
Stm32f407Ethernet_flash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001f134  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000390c  0801f2c8  0801f2c8  0002f2c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08022bd4  08022bd4  000401f4  2**0
                  CONTENTS
  4 .ARM          00000008  08022bd4  08022bd4  00032bd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08022bdc  08022bdc  000401f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08022bdc  08022bdc  00032bdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08022be0  08022be0  00032be0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  10000000  08022be4  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  100001f4  100001f4  000401f4  2**0
                  CONTENTS
 10 .bss          0001b820  20000000  20000000  00050000  2**3
                  ALLOC
 11 ._user_heap_stack 00002204  100001f4  100001f4  000401f4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000401f4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0004f159  00000000  00000000  00040224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000aea2  00000000  00000000  0008f37d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002ec0  00000000  00000000  0009a220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002c50  00000000  00000000  0009d0e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000362e5  00000000  00000000  0009fd30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0004bd59  00000000  00000000  000d6015  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f9750  00000000  00000000  00121d6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0021b4be  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000ce14  00000000  00000000  0021b510  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000000 	.word	0x20000000
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801f2ac 	.word	0x0801f2ac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000004 	.word	0x20000004
 80001cc:	0801f2ac 	.word	0x0801f2ac

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <DS18B20_IsValid>:
  * @brief  The function is used to check valid DS18B20 ROM
  * @retval Return in OK = 1, Failed = 0
  * @param  ROM		Pointer to ROM number
  */
uint8_t DS18B20_IsValid(uint8_t *ROM)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
	/* Checks if first byte is equal to DS18B20's family code */
	return (*ROM == DS18B20_FAMILY_CODE) ? 1 : 0;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	2b28      	cmp	r3, #40	; 0x28
 8000eba:	bf0c      	ite	eq
 8000ebc:	2301      	moveq	r3, #1
 8000ebe:	2300      	movne	r3, #0
 8000ec0:	b2db      	uxtb	r3, r3
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr

08000ece <DS18B20_SetResolution>:
  * @param  ROM			Pointer to ROM number
  * @param  Resolution	Resolution in 9 - 12
  */
uint8_t DS18B20_SetResolution(OneWire_t* OW, uint8_t *ROM,
		DS18B20_Res_t Resolution)
{
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	b086      	sub	sp, #24
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	60f8      	str	r0, [r7, #12]
 8000ed6:	60b9      	str	r1, [r7, #8]
 8000ed8:	4613      	mov	r3, r2
 8000eda:	71fb      	strb	r3, [r7, #7]
	uint8_t th, tl, conf;

	/* Check valid ROM */
	if (!DS18B20_IsValid(ROM)) return 0;
 8000edc:	68b8      	ldr	r0, [r7, #8]
 8000ede:	f7ff ffe5 	bl	8000eac <DS18B20_IsValid>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d101      	bne.n	8000eec <DS18B20_SetResolution+0x1e>
 8000ee8:	2300      	movs	r3, #0
 8000eea:	e074      	b.n	8000fd6 <DS18B20_SetResolution+0x108>

	/* Reset line */
	OneWire_Reset(OW);
 8000eec:	68f8      	ldr	r0, [r7, #12]
 8000eee:	f000 fa70 	bl	80013d2 <OneWire_Reset>

	/* Select ROM number */
	OneWire_SelectWithPointer(OW, ROM);
 8000ef2:	68b9      	ldr	r1, [r7, #8]
 8000ef4:	68f8      	ldr	r0, [r7, #12]
 8000ef6:	f000 fba4 	bl	8001642 <OneWire_SelectWithPointer>

	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OW, DS18B20_CMD_READSCRATCHPAD);
 8000efa:	21be      	movs	r1, #190	; 0xbe
 8000efc:	68f8      	ldr	r0, [r7, #12]
 8000efe:	f000 fa29 	bl	8001354 <OneWire_WriteByte>

	/* Ignore first 2 bytes */
	OneWire_ReadByte(OW);
 8000f02:	68f8      	ldr	r0, [r7, #12]
 8000f04:	f000 fa44 	bl	8001390 <OneWire_ReadByte>
	OneWire_ReadByte(OW);
 8000f08:	68f8      	ldr	r0, [r7, #12]
 8000f0a:	f000 fa41 	bl	8001390 <OneWire_ReadByte>

	th = OneWire_ReadByte(OW);
 8000f0e:	68f8      	ldr	r0, [r7, #12]
 8000f10:	f000 fa3e 	bl	8001390 <OneWire_ReadByte>
 8000f14:	4603      	mov	r3, r0
 8000f16:	75bb      	strb	r3, [r7, #22]
	tl = OneWire_ReadByte(OW);
 8000f18:	68f8      	ldr	r0, [r7, #12]
 8000f1a:	f000 fa39 	bl	8001390 <OneWire_ReadByte>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	757b      	strb	r3, [r7, #21]
	conf = OneWire_ReadByte(OW);
 8000f22:	68f8      	ldr	r0, [r7, #12]
 8000f24:	f000 fa34 	bl	8001390 <OneWire_ReadByte>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	75fb      	strb	r3, [r7, #23]

	if (Resolution == DS18B20_Resolution_9bits) {
 8000f2c:	79fb      	ldrb	r3, [r7, #7]
 8000f2e:	2b09      	cmp	r3, #9
 8000f30:	d108      	bne.n	8000f44 <DS18B20_SetResolution+0x76>
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8000f32:	7dfb      	ldrb	r3, [r7, #23]
 8000f34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000f38:	75fb      	strb	r3, [r7, #23]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8000f3a:	7dfb      	ldrb	r3, [r7, #23]
 8000f3c:	f023 0320 	bic.w	r3, r3, #32
 8000f40:	75fb      	strb	r3, [r7, #23]
 8000f42:	e022      	b.n	8000f8a <DS18B20_SetResolution+0xbc>
	} else if (Resolution == DS18B20_Resolution_10bits) {
 8000f44:	79fb      	ldrb	r3, [r7, #7]
 8000f46:	2b0a      	cmp	r3, #10
 8000f48:	d108      	bne.n	8000f5c <DS18B20_SetResolution+0x8e>
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8000f4a:	7dfb      	ldrb	r3, [r7, #23]
 8000f4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000f50:	75fb      	strb	r3, [r7, #23]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8000f52:	7dfb      	ldrb	r3, [r7, #23]
 8000f54:	f043 0320 	orr.w	r3, r3, #32
 8000f58:	75fb      	strb	r3, [r7, #23]
 8000f5a:	e016      	b.n	8000f8a <DS18B20_SetResolution+0xbc>
	} else if (Resolution == DS18B20_Resolution_11bits) {
 8000f5c:	79fb      	ldrb	r3, [r7, #7]
 8000f5e:	2b0b      	cmp	r3, #11
 8000f60:	d108      	bne.n	8000f74 <DS18B20_SetResolution+0xa6>
		conf |= 1 << DS18B20_RESOLUTION_R1;
 8000f62:	7dfb      	ldrb	r3, [r7, #23]
 8000f64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f68:	75fb      	strb	r3, [r7, #23]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8000f6a:	7dfb      	ldrb	r3, [r7, #23]
 8000f6c:	f023 0320 	bic.w	r3, r3, #32
 8000f70:	75fb      	strb	r3, [r7, #23]
 8000f72:	e00a      	b.n	8000f8a <DS18B20_SetResolution+0xbc>
	} else if (Resolution == DS18B20_Resolution_12bits) {
 8000f74:	79fb      	ldrb	r3, [r7, #7]
 8000f76:	2b0c      	cmp	r3, #12
 8000f78:	d107      	bne.n	8000f8a <DS18B20_SetResolution+0xbc>
		conf |= 1 << DS18B20_RESOLUTION_R1;
 8000f7a:	7dfb      	ldrb	r3, [r7, #23]
 8000f7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f80:	75fb      	strb	r3, [r7, #23]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8000f82:	7dfb      	ldrb	r3, [r7, #23]
 8000f84:	f043 0320 	orr.w	r3, r3, #32
 8000f88:	75fb      	strb	r3, [r7, #23]
	}

	/* Reset line */
	OneWire_Reset(OW);
 8000f8a:	68f8      	ldr	r0, [r7, #12]
 8000f8c:	f000 fa21 	bl	80013d2 <OneWire_Reset>

	/* Select ROM number */
	OneWire_SelectWithPointer(OW, ROM);
 8000f90:	68b9      	ldr	r1, [r7, #8]
 8000f92:	68f8      	ldr	r0, [r7, #12]
 8000f94:	f000 fb55 	bl	8001642 <OneWire_SelectWithPointer>

	/* Write scratchpad command by onewire protocol, only th, tl and conf
	 * register can be written */
	OneWire_WriteByte(OW, DS18B20_CMD_WRITESCRATCHPAD);
 8000f98:	214e      	movs	r1, #78	; 0x4e
 8000f9a:	68f8      	ldr	r0, [r7, #12]
 8000f9c:	f000 f9da 	bl	8001354 <OneWire_WriteByte>

	/* Write bytes */
	OneWire_WriteByte(OW, th);
 8000fa0:	7dbb      	ldrb	r3, [r7, #22]
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	68f8      	ldr	r0, [r7, #12]
 8000fa6:	f000 f9d5 	bl	8001354 <OneWire_WriteByte>
	OneWire_WriteByte(OW, tl);
 8000faa:	7d7b      	ldrb	r3, [r7, #21]
 8000fac:	4619      	mov	r1, r3
 8000fae:	68f8      	ldr	r0, [r7, #12]
 8000fb0:	f000 f9d0 	bl	8001354 <OneWire_WriteByte>
	OneWire_WriteByte(OW, conf);
 8000fb4:	7dfb      	ldrb	r3, [r7, #23]
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	68f8      	ldr	r0, [r7, #12]
 8000fba:	f000 f9cb 	bl	8001354 <OneWire_WriteByte>

	/* Reset line */
	OneWire_Reset(OW);
 8000fbe:	68f8      	ldr	r0, [r7, #12]
 8000fc0:	f000 fa07 	bl	80013d2 <OneWire_Reset>

	/* Select ROM number */
	OneWire_SelectWithPointer(OW, ROM);
 8000fc4:	68b9      	ldr	r1, [r7, #8]
 8000fc6:	68f8      	ldr	r0, [r7, #12]
 8000fc8:	f000 fb3b 	bl	8001642 <OneWire_SelectWithPointer>

	/* Copy scratchpad to EEPROM of DS18B20 */
	OneWire_WriteByte(OW, DS18B20_CMD_COPYSCRATCHPAD);
 8000fcc:	2148      	movs	r1, #72	; 0x48
 8000fce:	68f8      	ldr	r0, [r7, #12]
 8000fd0:	f000 f9c0 	bl	8001354 <OneWire_WriteByte>

	return 1;
 8000fd4:	2301      	movs	r3, #1
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3718      	adds	r7, #24
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <DS18B20_SetTempAlarm>:
  * @param  Low		Low temperature alarm, value > -55, 0 = reset
  * @param  High	High temperature alarm,, value < 125, 0 = reset
  */
uint8_t DS18B20_SetTempAlarm(OneWire_t* OW, uint8_t *ROM, int8_t Low,
		int8_t High)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b086      	sub	sp, #24
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	60f8      	str	r0, [r7, #12]
 8000fe6:	60b9      	str	r1, [r7, #8]
 8000fe8:	4611      	mov	r1, r2
 8000fea:	461a      	mov	r2, r3
 8000fec:	460b      	mov	r3, r1
 8000fee:	71fb      	strb	r3, [r7, #7]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	71bb      	strb	r3, [r7, #6]
	uint8_t tl, th, conf;

	/* Check if device is DS18B20 */
	if (!DS18B20_IsValid(ROM)) return 0;
 8000ff4:	68b8      	ldr	r0, [r7, #8]
 8000ff6:	f7ff ff59 	bl	8000eac <DS18B20_IsValid>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d101      	bne.n	8001004 <DS18B20_SetTempAlarm+0x26>
 8001000:	2300      	movs	r3, #0
 8001002:	e065      	b.n	80010d0 <DS18B20_SetTempAlarm+0xf2>

	Low = ((Low < -55) || (Low == 0)) ? -55 : Low;
 8001004:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001008:	f113 0f37 	cmn.w	r3, #55	; 0x37
 800100c:	db06      	blt.n	800101c <DS18B20_SetTempAlarm+0x3e>
 800100e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d002      	beq.n	800101c <DS18B20_SetTempAlarm+0x3e>
 8001016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101a:	e001      	b.n	8001020 <DS18B20_SetTempAlarm+0x42>
 800101c:	f06f 0336 	mvn.w	r3, #54	; 0x36
 8001020:	71fb      	strb	r3, [r7, #7]
	High = ((High > 125) || (High == 0)) ? 125 : High;
 8001022:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001026:	2b7d      	cmp	r3, #125	; 0x7d
 8001028:	dc06      	bgt.n	8001038 <DS18B20_SetTempAlarm+0x5a>
 800102a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d002      	beq.n	8001038 <DS18B20_SetTempAlarm+0x5a>
 8001032:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001036:	e000      	b.n	800103a <DS18B20_SetTempAlarm+0x5c>
 8001038:	237d      	movs	r3, #125	; 0x7d
 800103a:	71bb      	strb	r3, [r7, #6]

	/* Reset line */
	OneWire_Reset(OW);
 800103c:	68f8      	ldr	r0, [r7, #12]
 800103e:	f000 f9c8 	bl	80013d2 <OneWire_Reset>

	/* Select ROM number */
	OneWire_SelectWithPointer(OW, ROM);
 8001042:	68b9      	ldr	r1, [r7, #8]
 8001044:	68f8      	ldr	r0, [r7, #12]
 8001046:	f000 fafc 	bl	8001642 <OneWire_SelectWithPointer>

	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OW, DS18B20_CMD_READSCRATCHPAD);
 800104a:	21be      	movs	r1, #190	; 0xbe
 800104c:	68f8      	ldr	r0, [r7, #12]
 800104e:	f000 f981 	bl	8001354 <OneWire_WriteByte>

	/* Ignore first 2 bytes */
	OneWire_ReadByte(OW);
 8001052:	68f8      	ldr	r0, [r7, #12]
 8001054:	f000 f99c 	bl	8001390 <OneWire_ReadByte>
	OneWire_ReadByte(OW);
 8001058:	68f8      	ldr	r0, [r7, #12]
 800105a:	f000 f999 	bl	8001390 <OneWire_ReadByte>

	th = OneWire_ReadByte(OW);
 800105e:	68f8      	ldr	r0, [r7, #12]
 8001060:	f000 f996 	bl	8001390 <OneWire_ReadByte>
 8001064:	4603      	mov	r3, r0
 8001066:	75fb      	strb	r3, [r7, #23]
	tl = OneWire_ReadByte(OW);
 8001068:	68f8      	ldr	r0, [r7, #12]
 800106a:	f000 f991 	bl	8001390 <OneWire_ReadByte>
 800106e:	4603      	mov	r3, r0
 8001070:	75bb      	strb	r3, [r7, #22]
	conf = OneWire_ReadByte(OW);
 8001072:	68f8      	ldr	r0, [r7, #12]
 8001074:	f000 f98c 	bl	8001390 <OneWire_ReadByte>
 8001078:	4603      	mov	r3, r0
 800107a:	757b      	strb	r3, [r7, #21]

	th = (uint8_t)High;
 800107c:	79bb      	ldrb	r3, [r7, #6]
 800107e:	75fb      	strb	r3, [r7, #23]
	tl = (uint8_t)Low;
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	75bb      	strb	r3, [r7, #22]

	/* Reset line */
	OneWire_Reset(OW);
 8001084:	68f8      	ldr	r0, [r7, #12]
 8001086:	f000 f9a4 	bl	80013d2 <OneWire_Reset>

	/* Select ROM number */
	OneWire_SelectWithPointer(OW, ROM);
 800108a:	68b9      	ldr	r1, [r7, #8]
 800108c:	68f8      	ldr	r0, [r7, #12]
 800108e:	f000 fad8 	bl	8001642 <OneWire_SelectWithPointer>

	/* Write scratchpad command by onewire protocol, only th, tl and conf
	 * register can be written */
	OneWire_WriteByte(OW, DS18B20_CMD_WRITESCRATCHPAD);
 8001092:	214e      	movs	r1, #78	; 0x4e
 8001094:	68f8      	ldr	r0, [r7, #12]
 8001096:	f000 f95d 	bl	8001354 <OneWire_WriteByte>

	/* Write bytes */
	OneWire_WriteByte(OW, th);
 800109a:	7dfb      	ldrb	r3, [r7, #23]
 800109c:	4619      	mov	r1, r3
 800109e:	68f8      	ldr	r0, [r7, #12]
 80010a0:	f000 f958 	bl	8001354 <OneWire_WriteByte>
	OneWire_WriteByte(OW, tl);
 80010a4:	7dbb      	ldrb	r3, [r7, #22]
 80010a6:	4619      	mov	r1, r3
 80010a8:	68f8      	ldr	r0, [r7, #12]
 80010aa:	f000 f953 	bl	8001354 <OneWire_WriteByte>
	OneWire_WriteByte(OW, conf);
 80010ae:	7d7b      	ldrb	r3, [r7, #21]
 80010b0:	4619      	mov	r1, r3
 80010b2:	68f8      	ldr	r0, [r7, #12]
 80010b4:	f000 f94e 	bl	8001354 <OneWire_WriteByte>

	/* Reset line */
	OneWire_Reset(OW);
 80010b8:	68f8      	ldr	r0, [r7, #12]
 80010ba:	f000 f98a 	bl	80013d2 <OneWire_Reset>

	/* Select ROM number */
	OneWire_SelectWithPointer(OW, ROM);
 80010be:	68b9      	ldr	r1, [r7, #8]
 80010c0:	68f8      	ldr	r0, [r7, #12]
 80010c2:	f000 fabe 	bl	8001642 <OneWire_SelectWithPointer>

	/* Copy scratchpad to EEPROM of DS18B20 */
	OneWire_WriteByte(OW, DS18B20_CMD_COPYSCRATCHPAD);
 80010c6:	2148      	movs	r1, #72	; 0x48
 80010c8:	68f8      	ldr	r0, [r7, #12]
 80010ca:	f000 f943 	bl	8001354 <OneWire_WriteByte>

	return 1;
 80010ce:	2301      	movs	r3, #1
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3718      	adds	r7, #24
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <DS18B20_Init>:
  * @retval Rom detect status, OK = 1, No Rom detected = 0
  * @param  DS			DS18B20 HandleTypedef
  * @param  OW			OneWire HandleTypedef
  */
uint8_t DS18B20_Init(DS18B20_Drv_t *DS, OneWire_t *OW)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	6039      	str	r1, [r7, #0]
	/* Initialize OneWire and reset all data */
	OneWire_Init(OW);
 80010e2:	6838      	ldr	r0, [r7, #0]
 80010e4:	f000 fa7d 	bl	80015e2 <OneWire_Init>

	/* Search all OneWire devices ROM */
	while(1)
	{
		/* Start searching for OneWire devices along the line */
		if(OneWire_Search(OW, ONEWIRE_CMD_SEARCHROM) != 1) break;
 80010e8:	21f0      	movs	r1, #240	; 0xf0
 80010ea:	6838      	ldr	r0, [r7, #0]
 80010ec:	f000 f996 	bl	800141c <OneWire_Search>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d121      	bne.n	800113a <DS18B20_Init+0x62>

		/* Get device ROM */
		OneWire_GetDevRom(OW, DS->DevAddr[OW->RomCnt]);
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	7adb      	ldrb	r3, [r3, #11]
 80010fa:	00db      	lsls	r3, r3, #3
 80010fc:	687a      	ldr	r2, [r7, #4]
 80010fe:	4413      	add	r3, r2
 8001100:	4619      	mov	r1, r3
 8001102:	6838      	ldr	r0, [r7, #0]
 8001104:	f000 fa50 	bl	80015a8 <OneWire_GetDevRom>

		/* Set ROM Resolution */
		DS18B20_SetResolution(OW, &OW->RomCnt, DS->Resolution);
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	f103 010b 	add.w	r1, r3, #11
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001114:	461a      	mov	r2, r3
 8001116:	6838      	ldr	r0, [r7, #0]
 8001118:	f7ff fed9 	bl	8000ece <DS18B20_SetResolution>

		/* Reset Temperature Alarm */
		DS18B20_SetTempAlarm(OW, &OW->RomCnt, 0, 0);
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	f103 010b 	add.w	r1, r3, #11
 8001122:	2300      	movs	r3, #0
 8001124:	2200      	movs	r2, #0
 8001126:	6838      	ldr	r0, [r7, #0]
 8001128:	f7ff ff59 	bl	8000fde <DS18B20_SetTempAlarm>

		OW->RomCnt++;
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	7adb      	ldrb	r3, [r3, #11]
 8001130:	3301      	adds	r3, #1
 8001132:	b2da      	uxtb	r2, r3
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	72da      	strb	r2, [r3, #11]
		if(OneWire_Search(OW, ONEWIRE_CMD_SEARCHROM) != 1) break;
 8001138:	e7d6      	b.n	80010e8 <DS18B20_Init+0x10>
 800113a:	bf00      	nop
	}

	return (OW->RomCnt != 0) ? 1 : 0;
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	7adb      	ldrb	r3, [r3, #11]
 8001140:	2b00      	cmp	r3, #0
 8001142:	bf14      	ite	ne
 8001144:	2301      	movne	r3, #1
 8001146:	2300      	moveq	r3, #0
 8001148:	b2db      	uxtb	r3, r3
}
 800114a:	4618      	mov	r0, r3
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
	...

08001154 <DwtInit>:

/**
  * @brief  Initialize DWT
  */
void DwtInit(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
	SysCClk 		= (SystemCoreClock / 1000000);	// Calculate in us
 8001158:	4b10      	ldr	r3, [pc, #64]	; (800119c <DwtInit+0x48>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a10      	ldr	r2, [pc, #64]	; (80011a0 <DwtInit+0x4c>)
 800115e:	fba2 2303 	umull	r2, r3, r2, r3
 8001162:	0c9b      	lsrs	r3, r3, #18
 8001164:	4a0f      	ldr	r2, [pc, #60]	; (80011a4 <DwtInit+0x50>)
 8001166:	6013      	str	r3, [r2, #0]
	DWT_LAR			|= DWT_LAR_UNLOCK;
 8001168:	4b0f      	ldr	r3, [pc, #60]	; (80011a8 <DwtInit+0x54>)
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	490e      	ldr	r1, [pc, #56]	; (80011a8 <DwtInit+0x54>)
 800116e:	4b0f      	ldr	r3, [pc, #60]	; (80011ac <DwtInit+0x58>)
 8001170:	4313      	orrs	r3, r2
 8001172:	600b      	str	r3, [r1, #0]
	DEM_CR			|= (uint32_t)DEM_CR_TRCENA;
 8001174:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <DwtInit+0x5c>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a0d      	ldr	r2, [pc, #52]	; (80011b0 <DwtInit+0x5c>)
 800117a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800117e:	6013      	str	r3, [r2, #0]
	DWT_CYCCNT		= (uint32_t)0u;					// Reset the clock counter
 8001180:	4b0c      	ldr	r3, [pc, #48]	; (80011b4 <DwtInit+0x60>)
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]
	DWT_CR			|= (uint32_t)DWT_CR_CYCCNTENA;
 8001186:	4b0c      	ldr	r3, [pc, #48]	; (80011b8 <DwtInit+0x64>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a0b      	ldr	r2, [pc, #44]	; (80011b8 <DwtInit+0x64>)
 800118c:	f043 0301 	orr.w	r3, r3, #1
 8001190:	6013      	str	r3, [r2, #0]
}
 8001192:	bf00      	nop
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr
 800119c:	10000004 	.word	0x10000004
 80011a0:	431bde83 	.word	0x431bde83
 80011a4:	2000001c 	.word	0x2000001c
 80011a8:	e0001fb0 	.word	0xe0001fb0
 80011ac:	c5acce55 	.word	0xc5acce55
 80011b0:	e000edfc 	.word	0xe000edfc
 80011b4:	e0001004 	.word	0xe0001004
 80011b8:	e0001000 	.word	0xe0001000

080011bc <DwtDelay_us>:
/**
  * @brief  Function to delay in microsecond
  * @param	usec	Period in microsecond
  */
inline void DwtDelay_us(uint32_t usec)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
	start = DWT_CYCCNT;
 80011c4:	4b0b      	ldr	r3, [pc, #44]	; (80011f4 <DwtDelay_us+0x38>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a0b      	ldr	r2, [pc, #44]	; (80011f8 <DwtDelay_us+0x3c>)
 80011ca:	6013      	str	r3, [r2, #0]
	while(((DWT_CYCCNT - start) / SysCClk) < usec) {};
 80011cc:	bf00      	nop
 80011ce:	4b09      	ldr	r3, [pc, #36]	; (80011f4 <DwtDelay_us+0x38>)
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	4b09      	ldr	r3, [pc, #36]	; (80011f8 <DwtDelay_us+0x3c>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	1ad2      	subs	r2, r2, r3
 80011d8:	4b08      	ldr	r3, [pc, #32]	; (80011fc <DwtDelay_us+0x40>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80011e0:	687a      	ldr	r2, [r7, #4]
 80011e2:	429a      	cmp	r2, r3
 80011e4:	d8f3      	bhi.n	80011ce <DwtDelay_us+0x12>
}
 80011e6:	bf00      	nop
 80011e8:	bf00      	nop
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr
 80011f4:	e0001004 	.word	0xe0001004
 80011f8:	20000020 	.word	0x20000020
 80011fc:	2000001c 	.word	0x2000001c

08001200 <OneWire_Pin_Mode>:
  * @brief  The internal function is used as gpio pin mode
  * @param  OW		OneWire HandleTypedef
  * @param  Mode	Input or Output
  */
static void OneWire_Pin_Mode(OneWire_t* OW, PinMode Mode)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b088      	sub	sp, #32
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	460b      	mov	r3, r1
 800120a:	70fb      	strb	r3, [r7, #3]
		LL_GPIO_SetPinMode(OW->DataPort, OW->DataPin, LL_GPIO_MODE_INPUT);
	}else{
		LL_GPIO_SetPinMode(OW->DataPort, OW->DataPin, LL_GPIO_MODE_OUTPUT);
	}
#else
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120c:	f107 030c 	add.w	r3, r7, #12
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	609a      	str	r2, [r3, #8]
 8001218:	60da      	str	r2, [r3, #12]
 800121a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = OW->DataPin;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	899b      	ldrh	r3, [r3, #12]
 8001220:	60fb      	str	r3, [r7, #12]
	if(Mode == Input)
 8001222:	78fb      	ldrb	r3, [r7, #3]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d102      	bne.n	800122e <OneWire_Pin_Mode+0x2e>
	{
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001228:	2300      	movs	r3, #0
 800122a:	613b      	str	r3, [r7, #16]
 800122c:	e001      	b.n	8001232 <OneWire_Pin_Mode+0x32>
	}else{
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800122e:	2301      	movs	r3, #1
 8001230:	613b      	str	r3, [r7, #16]
	}
	HAL_GPIO_Init(OW->DataPort, &GPIO_InitStruct);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	691b      	ldr	r3, [r3, #16]
 8001236:	f107 020c 	add.w	r2, r7, #12
 800123a:	4611      	mov	r1, r2
 800123c:	4618      	mov	r0, r3
 800123e:	f006 fb25 	bl	800788c <HAL_GPIO_Init>
#endif
}
 8001242:	bf00      	nop
 8001244:	3720      	adds	r7, #32
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <OneWire_Pin_Level>:
  * @brief  The internal function is used as gpio pin level
  * @param  OW		OneWire HandleTypedef
  * @param  Mode	Level: Set/High = 1, Reset/Low = 0
  */
static void OneWire_Pin_Level(OneWire_t* OW, uint8_t Level)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	b082      	sub	sp, #8
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
 8001252:	460b      	mov	r3, r1
 8001254:	70fb      	strb	r3, [r7, #3]
		LL_GPIO_SetOutputPin(OW->DataPort, OW->DataPin);
	}else{
		LL_GPIO_ResetOutputPin(OW->DataPort, OW->DataPin);
	}
#else
	HAL_GPIO_WritePin(OW->DataPort, OW->DataPin, Level);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6918      	ldr	r0, [r3, #16]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	899b      	ldrh	r3, [r3, #12]
 800125e:	78fa      	ldrb	r2, [r7, #3]
 8001260:	4619      	mov	r1, r3
 8001262:	f006 fcc7 	bl	8007bf4 <HAL_GPIO_WritePin>
#endif
}
 8001266:	bf00      	nop
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <OneWire_Pin_Read>:
  * @brief  The internal function is used to read data pin
  * @retval Pin level status
  * @param  OW		OneWire HandleTypedef
  */
static uint8_t OneWire_Pin_Read(OneWire_t* OW)
{
 800126e:	b580      	push	{r7, lr}
 8001270:	b082      	sub	sp, #8
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
#ifdef LL_Driver
	return ((OW->DataPort->IDR & OW->DataPin) != 0x00U) ? 1 : 0;
#else
	return HAL_GPIO_ReadPin(OW->DataPort, OW->DataPin);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	691a      	ldr	r2, [r3, #16]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	899b      	ldrh	r3, [r3, #12]
 800127e:	4619      	mov	r1, r3
 8001280:	4610      	mov	r0, r2
 8001282:	f006 fc9f 	bl	8007bc4 <HAL_GPIO_ReadPin>
 8001286:	4603      	mov	r3, r0
#endif
}
 8001288:	4618      	mov	r0, r3
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}

08001290 <OneWire_WriteBit>:
  * @brief  The internal function is used to write bit
  * @param  OW		OneWire HandleTypedef
  * @param  bit		bit in 0 or 1
  */
static void OneWire_WriteBit(OneWire_t* OW, uint8_t bit)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	460b      	mov	r3, r1
 800129a:	70fb      	strb	r3, [r7, #3]
	if(bit)
 800129c:	78fb      	ldrb	r3, [r7, #3]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d016      	beq.n	80012d0 <OneWire_WriteBit+0x40>
	{
		/* Set line low */
		OneWire_Pin_Level(OW, 0);
 80012a2:	2100      	movs	r1, #0
 80012a4:	6878      	ldr	r0, [r7, #4]
 80012a6:	f7ff ffd0 	bl	800124a <OneWire_Pin_Level>
		OneWire_Pin_Mode(OW, Output);
 80012aa:	2101      	movs	r1, #1
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f7ff ffa7 	bl	8001200 <OneWire_Pin_Mode>
		DwtDelay_us(10);
 80012b2:	200a      	movs	r0, #10
 80012b4:	f7ff ff82 	bl	80011bc <DwtDelay_us>

		/* Bit high */
		OneWire_Pin_Mode(OW, Input);
 80012b8:	2100      	movs	r1, #0
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f7ff ffa0 	bl	8001200 <OneWire_Pin_Mode>

		/* Wait for 55 us and release the line */
		DwtDelay_us(55);
 80012c0:	2037      	movs	r0, #55	; 0x37
 80012c2:	f7ff ff7b 	bl	80011bc <DwtDelay_us>
		OneWire_Pin_Mode(OW, Input);
 80012c6:	2100      	movs	r1, #0
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f7ff ff99 	bl	8001200 <OneWire_Pin_Mode>

		/* Wait for 5 us and release the line */
		DwtDelay_us(5);
		OneWire_Pin_Mode(OW, Input);
	}
}
 80012ce:	e015      	b.n	80012fc <OneWire_WriteBit+0x6c>
		OneWire_Pin_Level(OW, 0);
 80012d0:	2100      	movs	r1, #0
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f7ff ffb9 	bl	800124a <OneWire_Pin_Level>
		OneWire_Pin_Mode(OW, Output);
 80012d8:	2101      	movs	r1, #1
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f7ff ff90 	bl	8001200 <OneWire_Pin_Mode>
		DwtDelay_us(65);
 80012e0:	2041      	movs	r0, #65	; 0x41
 80012e2:	f7ff ff6b 	bl	80011bc <DwtDelay_us>
		OneWire_Pin_Mode(OW, Input);
 80012e6:	2100      	movs	r1, #0
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f7ff ff89 	bl	8001200 <OneWire_Pin_Mode>
		DwtDelay_us(5);
 80012ee:	2005      	movs	r0, #5
 80012f0:	f7ff ff64 	bl	80011bc <DwtDelay_us>
		OneWire_Pin_Mode(OW, Input);
 80012f4:	2100      	movs	r1, #0
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f7ff ff82 	bl	8001200 <OneWire_Pin_Mode>
}
 80012fc:	bf00      	nop
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}

08001304 <OneWire_ReadBit>:
  * @brief  The function is used to read bit
  * @retval bit
  * @param  OW		OneWire HandleTypedef
  */
uint8_t OneWire_ReadBit(OneWire_t* OW)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
	uint8_t bit = 0;
 800130c:	2300      	movs	r3, #0
 800130e:	73fb      	strb	r3, [r7, #15]

	/* Line low */
	OneWire_Pin_Level(OW, 0);
 8001310:	2100      	movs	r1, #0
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f7ff ff99 	bl	800124a <OneWire_Pin_Level>
	OneWire_Pin_Mode(OW, Output);
 8001318:	2101      	movs	r1, #1
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f7ff ff70 	bl	8001200 <OneWire_Pin_Mode>
	DwtDelay_us(3);
 8001320:	2003      	movs	r0, #3
 8001322:	f7ff ff4b 	bl	80011bc <DwtDelay_us>

	/* Release line */
	OneWire_Pin_Mode(OW, Input);
 8001326:	2100      	movs	r1, #0
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f7ff ff69 	bl	8001200 <OneWire_Pin_Mode>
	DwtDelay_us(10);
 800132e:	200a      	movs	r0, #10
 8001330:	f7ff ff44 	bl	80011bc <DwtDelay_us>

	/* Read line value */
	if (OneWire_Pin_Read(OW))
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f7ff ff9a 	bl	800126e <OneWire_Pin_Read>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <OneWire_ReadBit+0x40>
	{
		/* Bit is HIGH */
		bit = 1;
 8001340:	2301      	movs	r3, #1
 8001342:	73fb      	strb	r3, [r7, #15]
	}

	/* Wait 50us to complete 60us period */
	DwtDelay_us(50);
 8001344:	2032      	movs	r0, #50	; 0x32
 8001346:	f7ff ff39 	bl	80011bc <DwtDelay_us>

	/* Return bit value */
	return bit;
 800134a:	7bfb      	ldrb	r3, [r7, #15]
}
 800134c:	4618      	mov	r0, r3
 800134e:	3710      	adds	r7, #16
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}

08001354 <OneWire_WriteByte>:
  * @brief  The function is used to write byte
  * @param  OW		OneWire HandleTypedef
  * @param  byte	byte to write
  */
void OneWire_WriteByte(OneWire_t* OW, uint8_t byte)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	460b      	mov	r3, r1
 800135e:	70fb      	strb	r3, [r7, #3]
	uint8_t bit = 8;
 8001360:	2308      	movs	r3, #8
 8001362:	73fb      	strb	r3, [r7, #15]
	/* Write 8 bits */
	while (bit--) {
 8001364:	e00a      	b.n	800137c <OneWire_WriteByte+0x28>
		/* LSB bit is first */
		OneWire_WriteBit(OW, byte & 0x01);
 8001366:	78fb      	ldrb	r3, [r7, #3]
 8001368:	f003 0301 	and.w	r3, r3, #1
 800136c:	b2db      	uxtb	r3, r3
 800136e:	4619      	mov	r1, r3
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f7ff ff8d 	bl	8001290 <OneWire_WriteBit>
		byte >>= 1;
 8001376:	78fb      	ldrb	r3, [r7, #3]
 8001378:	085b      	lsrs	r3, r3, #1
 800137a:	70fb      	strb	r3, [r7, #3]
	while (bit--) {
 800137c:	7bfb      	ldrb	r3, [r7, #15]
 800137e:	1e5a      	subs	r2, r3, #1
 8001380:	73fa      	strb	r2, [r7, #15]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d1ef      	bne.n	8001366 <OneWire_WriteByte+0x12>
	}
}
 8001386:	bf00      	nop
 8001388:	bf00      	nop
 800138a:	3710      	adds	r7, #16
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <OneWire_ReadByte>:
  * @brief  The function is used to read byte
  * @retval byte from device
  * @param  OW		OneWire HandleTypedef
  */
uint8_t OneWire_ReadByte(OneWire_t* OW)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
	uint8_t bit = 8, byte = 0;
 8001398:	2308      	movs	r3, #8
 800139a:	73fb      	strb	r3, [r7, #15]
 800139c:	2300      	movs	r3, #0
 800139e:	73bb      	strb	r3, [r7, #14]
	while (bit--) {
 80013a0:	e00d      	b.n	80013be <OneWire_ReadByte+0x2e>
		byte >>= 1;
 80013a2:	7bbb      	ldrb	r3, [r7, #14]
 80013a4:	085b      	lsrs	r3, r3, #1
 80013a6:	73bb      	strb	r3, [r7, #14]
		byte |= (OneWire_ReadBit(OW) << 7);
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f7ff ffab 	bl	8001304 <OneWire_ReadBit>
 80013ae:	4603      	mov	r3, r0
 80013b0:	01db      	lsls	r3, r3, #7
 80013b2:	b25a      	sxtb	r2, r3
 80013b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	b25b      	sxtb	r3, r3
 80013bc:	73bb      	strb	r3, [r7, #14]
	while (bit--) {
 80013be:	7bfb      	ldrb	r3, [r7, #15]
 80013c0:	1e5a      	subs	r2, r3, #1
 80013c2:	73fa      	strb	r2, [r7, #15]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d1ec      	bne.n	80013a2 <OneWire_ReadByte+0x12>
	}

	return byte;
 80013c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3710      	adds	r7, #16
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <OneWire_Reset>:
  * @brief  The function is used to reset device
  * @retval respond from device
  * @param  OW		OneWire HandleTypedef
  */
uint8_t OneWire_Reset(OneWire_t* OW)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b084      	sub	sp, #16
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
	/* Line low, and wait 480us */
	OneWire_Pin_Level(OW, 0);
 80013da:	2100      	movs	r1, #0
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f7ff ff34 	bl	800124a <OneWire_Pin_Level>
	OneWire_Pin_Mode(OW, Output);
 80013e2:	2101      	movs	r1, #1
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f7ff ff0b 	bl	8001200 <OneWire_Pin_Mode>
	DwtDelay_us(480);
 80013ea:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80013ee:	f7ff fee5 	bl	80011bc <DwtDelay_us>

	/* Release line and wait for 70us */
	OneWire_Pin_Mode(OW, Input);
 80013f2:	2100      	movs	r1, #0
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f7ff ff03 	bl	8001200 <OneWire_Pin_Mode>
	DwtDelay_us(70);
 80013fa:	2046      	movs	r0, #70	; 0x46
 80013fc:	f7ff fede 	bl	80011bc <DwtDelay_us>

	/* Check bit value */
	uint8_t rslt = OneWire_Pin_Read(OW);
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	f7ff ff34 	bl	800126e <OneWire_Pin_Read>
 8001406:	4603      	mov	r3, r0
 8001408:	73fb      	strb	r3, [r7, #15]

	/* Delay for 410 us */
	DwtDelay_us(410);
 800140a:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 800140e:	f7ff fed5 	bl	80011bc <DwtDelay_us>

	return rslt;
 8001412:	7bfb      	ldrb	r3, [r7, #15]
}
 8001414:	4618      	mov	r0, r3
 8001416:	3710      	adds	r7, #16
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}

0800141c <OneWire_Search>:
  * @brief  The function is used to search device
  * @retval Search result
  * @param  OW		OneWire HandleTypedef
  */
uint8_t OneWire_Search(OneWire_t* OW, uint8_t Cmd)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	460b      	mov	r3, r1
 8001426:	70fb      	strb	r3, [r7, #3]
	uint8_t id_bit_number 	= 1;
 8001428:	2301      	movs	r3, #1
 800142a:	73fb      	strb	r3, [r7, #15]
	uint8_t last_zero 		= 0;
 800142c:	2300      	movs	r3, #0
 800142e:	73bb      	strb	r3, [r7, #14]
	uint8_t rom_byte_number = 0;
 8001430:	2300      	movs	r3, #0
 8001432:	737b      	strb	r3, [r7, #13]
	uint8_t search_result 	= 0;
 8001434:	2300      	movs	r3, #0
 8001436:	733b      	strb	r3, [r7, #12]
	uint8_t rom_byte_mask 	= 1;
 8001438:	2301      	movs	r3, #1
 800143a:	72fb      	strb	r3, [r7, #11]
	uint8_t id_bit, cmp_id_bit, search_direction;

	/* if the last call was not the last one */
	if (!OW->LastDeviceFlag)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	789b      	ldrb	r3, [r3, #2]
 8001440:	2b00      	cmp	r3, #0
 8001442:	f040 809a 	bne.w	800157a <OneWire_Search+0x15e>
	{
		if (OneWire_Reset(OW))
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f7ff ffc3 	bl	80013d2 <OneWire_Reset>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d00a      	beq.n	8001468 <OneWire_Search+0x4c>
		{
			OW->LastDiscrepancy = 0;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2200      	movs	r2, #0
 8001456:	701a      	strb	r2, [r3, #0]
			OW->LastDeviceFlag = 0;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2200      	movs	r2, #0
 800145c:	709a      	strb	r2, [r3, #2]
			OW->LastFamilyDiscrepancy = 0;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2200      	movs	r2, #0
 8001462:	705a      	strb	r2, [r3, #1]
			return 0;
 8001464:	2300      	movs	r3, #0
 8001466:	e09b      	b.n	80015a0 <OneWire_Search+0x184>
		}

		// issue the search command
		OneWire_WriteByte(OW, Cmd);
 8001468:	78fb      	ldrb	r3, [r7, #3]
 800146a:	4619      	mov	r1, r3
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f7ff ff71 	bl	8001354 <OneWire_WriteByte>

		// loop to do the search
		do {
			// read a bit and its complement
			id_bit = OneWire_ReadBit(OW);
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f7ff ff46 	bl	8001304 <OneWire_ReadBit>
 8001478:	4603      	mov	r3, r0
 800147a:	727b      	strb	r3, [r7, #9]
			cmp_id_bit = OneWire_ReadBit(OW);
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f7ff ff41 	bl	8001304 <OneWire_ReadBit>
 8001482:	4603      	mov	r3, r0
 8001484:	723b      	strb	r3, [r7, #8]

			// check for no devices on 1-wire
			if ((id_bit == 1) && (cmp_id_bit == 1))
 8001486:	7a7b      	ldrb	r3, [r7, #9]
 8001488:	2b01      	cmp	r3, #1
 800148a:	d102      	bne.n	8001492 <OneWire_Search+0x76>
 800148c:	7a3b      	ldrb	r3, [r7, #8]
 800148e:	2b01      	cmp	r3, #1
 8001490:	d064      	beq.n	800155c <OneWire_Search+0x140>
			{
				break;
			} else {
				// all devices coupled have 0 or 1
				if (id_bit != cmp_id_bit)
 8001492:	7a7a      	ldrb	r2, [r7, #9]
 8001494:	7a3b      	ldrb	r3, [r7, #8]
 8001496:	429a      	cmp	r2, r3
 8001498:	d002      	beq.n	80014a0 <OneWire_Search+0x84>
				{
					search_direction = id_bit;  // bit write value for search
 800149a:	7a7b      	ldrb	r3, [r7, #9]
 800149c:	72bb      	strb	r3, [r7, #10]
 800149e:	e026      	b.n	80014ee <OneWire_Search+0xd2>
				} else {
					/* if this discrepancy if before the Last Discrepancy
					 * on a previous next then pick the same as last time */
					if (id_bit_number < OW->LastDiscrepancy)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	7bfa      	ldrb	r2, [r7, #15]
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d20d      	bcs.n	80014c6 <OneWire_Search+0xaa>
					{
						search_direction = ((OW->RomByte[rom_byte_number] & rom_byte_mask) > 0);
 80014aa:	7b7b      	ldrb	r3, [r7, #13]
 80014ac:	687a      	ldr	r2, [r7, #4]
 80014ae:	4413      	add	r3, r2
 80014b0:	78da      	ldrb	r2, [r3, #3]
 80014b2:	7afb      	ldrb	r3, [r7, #11]
 80014b4:	4013      	ands	r3, r2
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	bf14      	ite	ne
 80014bc:	2301      	movne	r3, #1
 80014be:	2300      	moveq	r3, #0
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	72bb      	strb	r3, [r7, #10]
 80014c4:	e008      	b.n	80014d8 <OneWire_Search+0xbc>
					} else {
						// if equal to last pick 1, if not then pick 0
						search_direction = (id_bit_number == OW->LastDiscrepancy);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	7bfa      	ldrb	r2, [r7, #15]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	bf0c      	ite	eq
 80014d0:	2301      	moveq	r3, #1
 80014d2:	2300      	movne	r3, #0
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	72bb      	strb	r3, [r7, #10]
					}

					// if 0 was picked then record its position in LastZero
					if (search_direction == 0)
 80014d8:	7abb      	ldrb	r3, [r7, #10]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d107      	bne.n	80014ee <OneWire_Search+0xd2>
					{
						last_zero = id_bit_number;
 80014de:	7bfb      	ldrb	r3, [r7, #15]
 80014e0:	73bb      	strb	r3, [r7, #14]

						// check for Last discrepancy in family
						if (last_zero < 9)
 80014e2:	7bbb      	ldrb	r3, [r7, #14]
 80014e4:	2b08      	cmp	r3, #8
 80014e6:	d802      	bhi.n	80014ee <OneWire_Search+0xd2>
						{
							OW->LastFamilyDiscrepancy = last_zero;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	7bba      	ldrb	r2, [r7, #14]
 80014ec:	705a      	strb	r2, [r3, #1]
					}
				}

				/* set or clear the bit in the ROM byte rom_byte_number
				 * with mask rom_byte_mask */
				if (search_direction == 1)
 80014ee:	7abb      	ldrb	r3, [r7, #10]
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d10c      	bne.n	800150e <OneWire_Search+0xf2>
				{
					OW->RomByte[rom_byte_number] |= rom_byte_mask;
 80014f4:	7b7b      	ldrb	r3, [r7, #13]
 80014f6:	687a      	ldr	r2, [r7, #4]
 80014f8:	4413      	add	r3, r2
 80014fa:	78d9      	ldrb	r1, [r3, #3]
 80014fc:	7b7b      	ldrb	r3, [r7, #13]
 80014fe:	7afa      	ldrb	r2, [r7, #11]
 8001500:	430a      	orrs	r2, r1
 8001502:	b2d1      	uxtb	r1, r2
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	4413      	add	r3, r2
 8001508:	460a      	mov	r2, r1
 800150a:	70da      	strb	r2, [r3, #3]
 800150c:	e010      	b.n	8001530 <OneWire_Search+0x114>
				} else {
					OW->RomByte[rom_byte_number] &= ~rom_byte_mask;
 800150e:	7b7b      	ldrb	r3, [r7, #13]
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	4413      	add	r3, r2
 8001514:	78db      	ldrb	r3, [r3, #3]
 8001516:	b25a      	sxtb	r2, r3
 8001518:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800151c:	43db      	mvns	r3, r3
 800151e:	b25b      	sxtb	r3, r3
 8001520:	4013      	ands	r3, r2
 8001522:	b25a      	sxtb	r2, r3
 8001524:	7b7b      	ldrb	r3, [r7, #13]
 8001526:	b2d1      	uxtb	r1, r2
 8001528:	687a      	ldr	r2, [r7, #4]
 800152a:	4413      	add	r3, r2
 800152c:	460a      	mov	r2, r1
 800152e:	70da      	strb	r2, [r3, #3]
				}

				// serial number search direction write bit
				OneWire_WriteBit(OW, search_direction);
 8001530:	7abb      	ldrb	r3, [r7, #10]
 8001532:	4619      	mov	r1, r3
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f7ff feab 	bl	8001290 <OneWire_WriteBit>

				/* increment the byte counter id_bit_number and shift the
				 * mask rom_byte_mask */
				id_bit_number++;
 800153a:	7bfb      	ldrb	r3, [r7, #15]
 800153c:	3301      	adds	r3, #1
 800153e:	73fb      	strb	r3, [r7, #15]
				rom_byte_mask <<= 1;
 8001540:	7afb      	ldrb	r3, [r7, #11]
 8001542:	005b      	lsls	r3, r3, #1
 8001544:	72fb      	strb	r3, [r7, #11]

				/* if the mask is 0 then go to new SerialNum byte
				 * rom_byte_number and reset mask */
				if (rom_byte_mask == 0)
 8001546:	7afb      	ldrb	r3, [r7, #11]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d104      	bne.n	8001556 <OneWire_Search+0x13a>
				{
					rom_byte_number++;
 800154c:	7b7b      	ldrb	r3, [r7, #13]
 800154e:	3301      	adds	r3, #1
 8001550:	737b      	strb	r3, [r7, #13]
					rom_byte_mask = 1;
 8001552:	2301      	movs	r3, #1
 8001554:	72fb      	strb	r3, [r7, #11]
				}
			}
		} while (rom_byte_number < 8);  /* loop until through all ROM bytes 0-7
 8001556:	7b7b      	ldrb	r3, [r7, #13]
 8001558:	2b07      	cmp	r3, #7
 800155a:	d98a      	bls.n	8001472 <OneWire_Search+0x56>
		if the search was successful then */

		if (!(id_bit_number < 65))
 800155c:	7bfb      	ldrb	r3, [r7, #15]
 800155e:	2b40      	cmp	r3, #64	; 0x40
 8001560:	d90b      	bls.n	800157a <OneWire_Search+0x15e>
		{
			/* search successful so set LastDiscrepancy, LastDeviceFlag,
			 * search_result */
			OW->LastDiscrepancy = last_zero;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	7bba      	ldrb	r2, [r7, #14]
 8001566:	701a      	strb	r2, [r3, #0]
			// check for last device
			if (OW->LastDiscrepancy == 0) {
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d102      	bne.n	8001576 <OneWire_Search+0x15a>
				OW->LastDeviceFlag = 1;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2201      	movs	r2, #1
 8001574:	709a      	strb	r2, [r3, #2]
			}
			search_result = 1;
 8001576:	2301      	movs	r3, #1
 8001578:	733b      	strb	r3, [r7, #12]
		}
	}

	/* if no device found then reset counters so next 'search' will be like a
	 * first */
	if (!search_result || !OW->RomByte[0])
 800157a:	7b3b      	ldrb	r3, [r7, #12]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d003      	beq.n	8001588 <OneWire_Search+0x16c>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	78db      	ldrb	r3, [r3, #3]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d10a      	bne.n	800159e <OneWire_Search+0x182>
	{
		OW->LastDiscrepancy = 0;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2200      	movs	r2, #0
 800158c:	701a      	strb	r2, [r3, #0]
		OW->LastDeviceFlag = 0;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2200      	movs	r2, #0
 8001592:	709a      	strb	r2, [r3, #2]
		OW->LastFamilyDiscrepancy = 0;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2200      	movs	r2, #0
 8001598:	705a      	strb	r2, [r3, #1]
		search_result = 0;
 800159a:	2300      	movs	r3, #0
 800159c:	733b      	strb	r3, [r7, #12]
	}

	return search_result;
 800159e:	7b3b      	ldrb	r3, [r7, #12]
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3710      	adds	r7, #16
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <OneWire_GetDevRom>:
  * @brief  The function is used get ROM full address
  * @param  OW		OneWire HandleTypedef
  * @param  ROM		Pointer to device ROM
  */
void OneWire_GetDevRom(OneWire_t* OW, uint8_t *ROM)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b085      	sub	sp, #20
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	6039      	str	r1, [r7, #0]
	for (uint8_t i = 0; i < 8; i++) {
 80015b2:	2300      	movs	r3, #0
 80015b4:	73fb      	strb	r3, [r7, #15]
 80015b6:	e00a      	b.n	80015ce <OneWire_GetDevRom+0x26>
		*(ROM + i) = OW->RomByte[i];
 80015b8:	7bfa      	ldrb	r2, [r7, #15]
 80015ba:	7bfb      	ldrb	r3, [r7, #15]
 80015bc:	6839      	ldr	r1, [r7, #0]
 80015be:	440b      	add	r3, r1
 80015c0:	6879      	ldr	r1, [r7, #4]
 80015c2:	440a      	add	r2, r1
 80015c4:	78d2      	ldrb	r2, [r2, #3]
 80015c6:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 8; i++) {
 80015c8:	7bfb      	ldrb	r3, [r7, #15]
 80015ca:	3301      	adds	r3, #1
 80015cc:	73fb      	strb	r3, [r7, #15]
 80015ce:	7bfb      	ldrb	r3, [r7, #15]
 80015d0:	2b07      	cmp	r3, #7
 80015d2:	d9f1      	bls.n	80015b8 <OneWire_GetDevRom+0x10>
	}
}
 80015d4:	bf00      	nop
 80015d6:	bf00      	nop
 80015d8:	3714      	adds	r7, #20
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr

080015e2 <OneWire_Init>:
/**
  * @brief  The function is used to initialize OneWire Communication
  * @param  OW		OneWire HandleTypedef
  */
void OneWire_Init(OneWire_t* OW)
{
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b082      	sub	sp, #8
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
	OneWire_Pin_Mode(OW, Output);
 80015ea:	2101      	movs	r1, #1
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f7ff fe07 	bl	8001200 <OneWire_Pin_Mode>
	OneWire_Pin_Level(OW, 1);
 80015f2:	2101      	movs	r1, #1
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f7ff fe28 	bl	800124a <OneWire_Pin_Level>
	DwtDelay_us(1000);
 80015fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015fe:	f7ff fddd 	bl	80011bc <DwtDelay_us>
	OneWire_Pin_Level(OW, 0);
 8001602:	2100      	movs	r1, #0
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f7ff fe20 	bl	800124a <OneWire_Pin_Level>
	DwtDelay_us(1000);
 800160a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800160e:	f7ff fdd5 	bl	80011bc <DwtDelay_us>
	OneWire_Pin_Level(OW, 1);
 8001612:	2101      	movs	r1, #1
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f7ff fe18 	bl	800124a <OneWire_Pin_Level>
	DwtDelay_us(2000);
 800161a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800161e:	f7ff fdcd 	bl	80011bc <DwtDelay_us>

	/* Reset the search state */
	OW->LastDiscrepancy 		= 0;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2200      	movs	r2, #0
 8001626:	701a      	strb	r2, [r3, #0]
	OW->LastDeviceFlag 			= 0;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2200      	movs	r2, #0
 800162c:	709a      	strb	r2, [r3, #2]
	OW->LastFamilyDiscrepancy 	= 0;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2200      	movs	r2, #0
 8001632:	705a      	strb	r2, [r3, #1]
	OW->RomCnt 					= 0;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2200      	movs	r2, #0
 8001638:	72da      	strb	r2, [r3, #11]
}
 800163a:	bf00      	nop
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}

08001642 <OneWire_SelectWithPointer>:
  * @brief  The function is used selected specific device ROM
  * @param  OW		OneWire HandleTypedef
  * @param  ROM		Pointer to device ROM
  */
void OneWire_SelectWithPointer(OneWire_t* OW, uint8_t *ROM)
{
 8001642:	b580      	push	{r7, lr}
 8001644:	b084      	sub	sp, #16
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
 800164a:	6039      	str	r1, [r7, #0]
	OneWire_WriteByte(OW, ONEWIRE_CMD_MATCHROM);
 800164c:	2155      	movs	r1, #85	; 0x55
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f7ff fe80 	bl	8001354 <OneWire_WriteByte>

	for (uint8_t i = 0; i < 8; i++)
 8001654:	2300      	movs	r3, #0
 8001656:	73fb      	strb	r3, [r7, #15]
 8001658:	e00a      	b.n	8001670 <OneWire_SelectWithPointer+0x2e>
	{
		OneWire_WriteByte(OW, *(ROM + i));
 800165a:	7bfb      	ldrb	r3, [r7, #15]
 800165c:	683a      	ldr	r2, [r7, #0]
 800165e:	4413      	add	r3, r2
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	4619      	mov	r1, r3
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f7ff fe75 	bl	8001354 <OneWire_WriteByte>
	for (uint8_t i = 0; i < 8; i++)
 800166a:	7bfb      	ldrb	r3, [r7, #15]
 800166c:	3301      	adds	r3, #1
 800166e:	73fb      	strb	r3, [r7, #15]
 8001670:	7bfb      	ldrb	r3, [r7, #15]
 8001672:	2b07      	cmp	r3, #7
 8001674:	d9f1      	bls.n	800165a <OneWire_SelectWithPointer+0x18>
	}
}
 8001676:	bf00      	nop
 8001678:	bf00      	nop
 800167a:	3710      	adds	r7, #16
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}

08001680 <GetSector>:
 *  Sector 4 as 64KB
 *  Sector 5 to Sector 7 each 128KB
 */

static uint32_t GetSector(uint32_t Address)
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 8001688:	2300      	movs	r3, #0
 800168a:	60fb      	str	r3, [r7, #12]

  if((Address < 0x08003FFF) && (Address >= 0x08000000))
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	4a44      	ldr	r2, [pc, #272]	; (80017a0 <GetSector+0x120>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d806      	bhi.n	80016a2 <GetSector+0x22>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800169a:	d302      	bcc.n	80016a2 <GetSector+0x22>
  {
    sector = FLASH_SECTOR_0;
 800169c:	2300      	movs	r3, #0
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	e077      	b.n	8001792 <GetSector+0x112>
  }
  else if((Address < 0x08007FFF) && (Address >= 0x08004000))
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4a3f      	ldr	r2, [pc, #252]	; (80017a4 <GetSector+0x124>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d806      	bhi.n	80016b8 <GetSector+0x38>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4a3e      	ldr	r2, [pc, #248]	; (80017a8 <GetSector+0x128>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d302      	bcc.n	80016b8 <GetSector+0x38>
  {
    sector = FLASH_SECTOR_1;
 80016b2:	2301      	movs	r3, #1
 80016b4:	60fb      	str	r3, [r7, #12]
 80016b6:	e06c      	b.n	8001792 <GetSector+0x112>
  }
  else if((Address < 0x0800BFFF) && (Address >= 0x08008000))
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	4a3c      	ldr	r2, [pc, #240]	; (80017ac <GetSector+0x12c>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d806      	bhi.n	80016ce <GetSector+0x4e>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	4a3b      	ldr	r2, [pc, #236]	; (80017b0 <GetSector+0x130>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d302      	bcc.n	80016ce <GetSector+0x4e>
  {
    sector = FLASH_SECTOR_2;
 80016c8:	2302      	movs	r3, #2
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	e061      	b.n	8001792 <GetSector+0x112>
  }
  else if((Address < 0x0800FFFF) && (Address >= 0x0800C000))
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4a38      	ldr	r2, [pc, #224]	; (80017b4 <GetSector+0x134>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d206      	bcs.n	80016e4 <GetSector+0x64>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a37      	ldr	r2, [pc, #220]	; (80017b8 <GetSector+0x138>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d302      	bcc.n	80016e4 <GetSector+0x64>
  {
    sector = FLASH_SECTOR_3;
 80016de:	2303      	movs	r3, #3
 80016e0:	60fb      	str	r3, [r7, #12]
 80016e2:	e056      	b.n	8001792 <GetSector+0x112>
  }
  else if((Address < 0x0801FFFF) && (Address >= 0x08010000))
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	4a35      	ldr	r2, [pc, #212]	; (80017bc <GetSector+0x13c>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d206      	bcs.n	80016fa <GetSector+0x7a>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	4a31      	ldr	r2, [pc, #196]	; (80017b4 <GetSector+0x134>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d902      	bls.n	80016fa <GetSector+0x7a>
  {
    sector = FLASH_SECTOR_4;
 80016f4:	2304      	movs	r3, #4
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	e04b      	b.n	8001792 <GetSector+0x112>
  }
  else if((Address < 0x0803FFFF) && (Address >= 0x08020000))
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4a30      	ldr	r2, [pc, #192]	; (80017c0 <GetSector+0x140>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d206      	bcs.n	8001710 <GetSector+0x90>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4a2d      	ldr	r2, [pc, #180]	; (80017bc <GetSector+0x13c>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d902      	bls.n	8001710 <GetSector+0x90>
  {
    sector = FLASH_SECTOR_5;
 800170a:	2305      	movs	r3, #5
 800170c:	60fb      	str	r3, [r7, #12]
 800170e:	e040      	b.n	8001792 <GetSector+0x112>
  }
  else if((Address < 0x0805FFFF) && (Address >= 0x08040000))
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	4a2c      	ldr	r2, [pc, #176]	; (80017c4 <GetSector+0x144>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d206      	bcs.n	8001726 <GetSector+0xa6>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	4a29      	ldr	r2, [pc, #164]	; (80017c0 <GetSector+0x140>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d902      	bls.n	8001726 <GetSector+0xa6>
  {
    sector = FLASH_SECTOR_6;
 8001720:	2306      	movs	r3, #6
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	e035      	b.n	8001792 <GetSector+0x112>
  }
  else if((Address < 0x0807FFFF) && (Address >= 0x08060000))
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4a27      	ldr	r2, [pc, #156]	; (80017c8 <GetSector+0x148>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d206      	bcs.n	800173c <GetSector+0xbc>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4a24      	ldr	r2, [pc, #144]	; (80017c4 <GetSector+0x144>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d902      	bls.n	800173c <GetSector+0xbc>
  {
    sector = FLASH_SECTOR_7;
 8001736:	2307      	movs	r3, #7
 8001738:	60fb      	str	r3, [r7, #12]
 800173a:	e02a      	b.n	8001792 <GetSector+0x112>
  }
  else if((Address < 0x0809FFFF) && (Address >= 0x08080000))
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	4a23      	ldr	r2, [pc, #140]	; (80017cc <GetSector+0x14c>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d206      	bcs.n	8001752 <GetSector+0xd2>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	4a20      	ldr	r2, [pc, #128]	; (80017c8 <GetSector+0x148>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d902      	bls.n	8001752 <GetSector+0xd2>
  {
    sector = FLASH_SECTOR_8;
 800174c:	2308      	movs	r3, #8
 800174e:	60fb      	str	r3, [r7, #12]
 8001750:	e01f      	b.n	8001792 <GetSector+0x112>
  }
  else if((Address < 0x080BFFFF) && (Address >= 0x080A0000))
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4a1e      	ldr	r2, [pc, #120]	; (80017d0 <GetSector+0x150>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d206      	bcs.n	8001768 <GetSector+0xe8>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4a1b      	ldr	r2, [pc, #108]	; (80017cc <GetSector+0x14c>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d902      	bls.n	8001768 <GetSector+0xe8>
  {
    sector = FLASH_SECTOR_9;
 8001762:	2309      	movs	r3, #9
 8001764:	60fb      	str	r3, [r7, #12]
 8001766:	e014      	b.n	8001792 <GetSector+0x112>
  }
  else if((Address < 0x080DFFFF) && (Address >= 0x080C0000))
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	4a1a      	ldr	r2, [pc, #104]	; (80017d4 <GetSector+0x154>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d806      	bhi.n	800177e <GetSector+0xfe>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	4a17      	ldr	r2, [pc, #92]	; (80017d0 <GetSector+0x150>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d902      	bls.n	800177e <GetSector+0xfe>
  {
    sector = FLASH_SECTOR_10;
 8001778:	230a      	movs	r3, #10
 800177a:	60fb      	str	r3, [r7, #12]
 800177c:	e009      	b.n	8001792 <GetSector+0x112>
  }
  else if((Address < 0x080FFFFF) && (Address >= 0x080E0000))
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a15      	ldr	r2, [pc, #84]	; (80017d8 <GetSector+0x158>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d805      	bhi.n	8001792 <GetSector+0x112>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a14      	ldr	r2, [pc, #80]	; (80017dc <GetSector+0x15c>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d901      	bls.n	8001792 <GetSector+0x112>
  {
    sector = FLASH_SECTOR_11;
 800178e:	230b      	movs	r3, #11
 8001790:	60fb      	str	r3, [r7, #12]
//  }
//  else if((Address < 0x081FFFFF) && (Address >= 0x081E0000))
//  {
//    sector = FLASH_SECTOR_23;
//  }
  return sector;
 8001792:	68fb      	ldr	r3, [r7, #12]
}
 8001794:	4618      	mov	r0, r3
 8001796:	3714      	adds	r7, #20
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr
 80017a0:	08003ffe 	.word	0x08003ffe
 80017a4:	08007ffe 	.word	0x08007ffe
 80017a8:	08004000 	.word	0x08004000
 80017ac:	0800bffe 	.word	0x0800bffe
 80017b0:	08008000 	.word	0x08008000
 80017b4:	0800ffff 	.word	0x0800ffff
 80017b8:	0800c000 	.word	0x0800c000
 80017bc:	0801ffff 	.word	0x0801ffff
 80017c0:	0803ffff 	.word	0x0803ffff
 80017c4:	0805ffff 	.word	0x0805ffff
 80017c8:	0807ffff 	.word	0x0807ffff
 80017cc:	0809ffff 	.word	0x0809ffff
 80017d0:	080bffff 	.word	0x080bffff
 80017d4:	080dfffe 	.word	0x080dfffe
 80017d8:	080ffffe 	.word	0x080ffffe
 80017dc:	080dffff 	.word	0x080dffff

080017e0 <Flash_Write_Data>:
   return float_variable;
}


uint32_t Flash_Write_Data (uint32_t StartSectorAddress, uint32_t *Data, uint16_t numberofwords)
{
 80017e0:	b5b0      	push	{r4, r5, r7, lr}
 80017e2:	b08a      	sub	sp, #40	; 0x28
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	60f8      	str	r0, [r7, #12]
 80017e8:	60b9      	str	r1, [r7, #8]
 80017ea:	4613      	mov	r3, r2
 80017ec:	80fb      	strh	r3, [r7, #6]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SECTORError;
	int sofar=0;
 80017ee:	2300      	movs	r3, #0
 80017f0:	627b      	str	r3, [r7, #36]	; 0x24


	 /* Unlock the Flash to enable the flash control register access *************/
	  HAL_FLASH_Unlock();
 80017f2:	f005 fdbb 	bl	800736c <HAL_FLASH_Unlock>

	  /* Erase the user Flash area */

	  /* Get the number of sector to erase from 1st sector */

	  uint32_t StartSector = GetSector(StartSectorAddress);
 80017f6:	68f8      	ldr	r0, [r7, #12]
 80017f8:	f7ff ff42 	bl	8001680 <GetSector>
 80017fc:	6238      	str	r0, [r7, #32]
	  uint32_t EndSectorAddress = StartSectorAddress + numberofwords*4;
 80017fe:	88fb      	ldrh	r3, [r7, #6]
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	461a      	mov	r2, r3
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	4413      	add	r3, r2
 8001808:	61fb      	str	r3, [r7, #28]
	  uint32_t EndSector = GetSector(EndSectorAddress);
 800180a:	69f8      	ldr	r0, [r7, #28]
 800180c:	f7ff ff38 	bl	8001680 <GetSector>
 8001810:	61b8      	str	r0, [r7, #24]

	  /* Fill EraseInit structure*/
	  EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 8001812:	4b21      	ldr	r3, [pc, #132]	; (8001898 <Flash_Write_Data+0xb8>)
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]
	  EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8001818:	4b1f      	ldr	r3, [pc, #124]	; (8001898 <Flash_Write_Data+0xb8>)
 800181a:	2202      	movs	r2, #2
 800181c:	611a      	str	r2, [r3, #16]
	  EraseInitStruct.Sector        = StartSector;
 800181e:	4a1e      	ldr	r2, [pc, #120]	; (8001898 <Flash_Write_Data+0xb8>)
 8001820:	6a3b      	ldr	r3, [r7, #32]
 8001822:	6093      	str	r3, [r2, #8]
	  EraseInitStruct.NbSectors     = (EndSector - StartSector) + 1;
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	6a3b      	ldr	r3, [r7, #32]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	3301      	adds	r3, #1
 800182c:	4a1a      	ldr	r2, [pc, #104]	; (8001898 <Flash_Write_Data+0xb8>)
 800182e:	60d3      	str	r3, [r2, #12]

	  /* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
	     you have to make sure that these data are rewritten before they are accessed during code
	     execution. If this cannot be done safely, it is recommended to flush the caches by setting the
	     DCRST and ICRST bits in the FLASH_CR register. */
	  if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 8001830:	f107 0314 	add.w	r3, r7, #20
 8001834:	4619      	mov	r1, r3
 8001836:	4818      	ldr	r0, [pc, #96]	; (8001898 <Flash_Write_Data+0xb8>)
 8001838:	f005 ff06 	bl	8007648 <HAL_FLASHEx_Erase>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d01f      	beq.n	8001882 <Flash_Write_Data+0xa2>
	  {
		  return HAL_FLASH_GetError ();
 8001842:	f005 fdc5 	bl	80073d0 <HAL_FLASH_GetError>
 8001846:	4603      	mov	r3, r0
 8001848:	e022      	b.n	8001890 <Flash_Write_Data+0xb0>
	  /* Program the user Flash area word by word
	    (area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/

	   while (sofar<numberofwords)
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartSectorAddress, Data[sofar]) == HAL_OK)
 800184a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	68ba      	ldr	r2, [r7, #8]
 8001850:	4413      	add	r3, r2
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2200      	movs	r2, #0
 8001856:	461c      	mov	r4, r3
 8001858:	4615      	mov	r5, r2
 800185a:	4622      	mov	r2, r4
 800185c:	462b      	mov	r3, r5
 800185e:	68f9      	ldr	r1, [r7, #12]
 8001860:	2002      	movs	r0, #2
 8001862:	f005 fd2f 	bl	80072c4 <HAL_FLASH_Program>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d106      	bne.n	800187a <Flash_Write_Data+0x9a>
	     {
	    	 StartSectorAddress += 4;  // use StartPageAddress += 2 for half word and 8 for double word
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	3304      	adds	r3, #4
 8001870:	60fb      	str	r3, [r7, #12]
	    	 sofar++;
 8001872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001874:	3301      	adds	r3, #1
 8001876:	627b      	str	r3, [r7, #36]	; 0x24
 8001878:	e003      	b.n	8001882 <Flash_Write_Data+0xa2>
	     }
	     else
	     {
	       /* Error occurred while writing data in Flash memory*/
	    	 return HAL_FLASH_GetError ();
 800187a:	f005 fda9 	bl	80073d0 <HAL_FLASH_GetError>
 800187e:	4603      	mov	r3, r0
 8001880:	e006      	b.n	8001890 <Flash_Write_Data+0xb0>
	   while (sofar<numberofwords)
 8001882:	88fb      	ldrh	r3, [r7, #6]
 8001884:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001886:	429a      	cmp	r2, r3
 8001888:	dbdf      	blt.n	800184a <Flash_Write_Data+0x6a>
	     }
	   }

	  /* Lock the Flash to disable the flash control register access (recommended
	     to protect the FLASH memory against possible unwanted operation) *********/
	  HAL_FLASH_Lock();
 800188a:	f005 fd91 	bl	80073b0 <HAL_FLASH_Lock>

	   return 0;
 800188e:	2300      	movs	r3, #0
}
 8001890:	4618      	mov	r0, r3
 8001892:	3728      	adds	r7, #40	; 0x28
 8001894:	46bd      	mov	sp, r7
 8001896:	bdb0      	pop	{r4, r5, r7, pc}
 8001898:	20000024 	.word	0x20000024

0800189c <Flash_Read_Data>:


void Flash_Read_Data (uint32_t StartSectorAddress, uint32_t *RxBuf, uint16_t numberofwords)
{
 800189c:	b480      	push	{r7}
 800189e:	b085      	sub	sp, #20
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	60b9      	str	r1, [r7, #8]
 80018a6:	4613      	mov	r3, r2
 80018a8:	80fb      	strh	r3, [r7, #6]
	while (1)
	{

		*RxBuf = *(__IO uint32_t *)StartSectorAddress;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	601a      	str	r2, [r3, #0]
		StartSectorAddress += 4;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	3304      	adds	r3, #4
 80018b6:	60fb      	str	r3, [r7, #12]
		RxBuf++;
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	3304      	adds	r3, #4
 80018bc:	60bb      	str	r3, [r7, #8]
		if (!(numberofwords--)) break;
 80018be:	88fb      	ldrh	r3, [r7, #6]
 80018c0:	1e5a      	subs	r2, r3, #1
 80018c2:	80fa      	strh	r2, [r7, #6]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d000      	beq.n	80018ca <Flash_Read_Data+0x2e>
		*RxBuf = *(__IO uint32_t *)StartSectorAddress;
 80018c8:	e7ef      	b.n	80018aa <Flash_Read_Data+0xe>
		if (!(numberofwords--)) break;
 80018ca:	bf00      	nop
	}
}
 80018cc:	bf00      	nop
 80018ce:	3714      	adds	r7, #20
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <RingAdd>:


/* Ring Buffer functions */
// This function must be called only after disabling USART RX interrupt or inside of the RX interrupt
void RingAdd(modbusRingBuffer_t *xRingBuffer, uint8_t u8Val)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	460b      	mov	r3, r1
 80018e2:	70fb      	strb	r3, [r7, #3]

	xRingBuffer->uxBuffer[xRingBuffer->u8end] = u8Val;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80018ea:	4619      	mov	r1, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	78fa      	ldrb	r2, [r7, #3]
 80018f0:	545a      	strb	r2, [r3, r1]
	xRingBuffer->u8end = (xRingBuffer->u8end + 1) % MAX_BUFFER;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80018f8:	3301      	adds	r3, #1
 80018fa:	425a      	negs	r2, r3
 80018fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001900:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001904:	bf58      	it	pl
 8001906:	4253      	negpl	r3, r2
 8001908:	b2da      	uxtb	r2, r3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	if (xRingBuffer->u8available == MAX_BUFFER)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8001916:	2b80      	cmp	r3, #128	; 0x80
 8001918:	d113      	bne.n	8001942 <RingAdd+0x6a>
	{
		xRingBuffer->overflow = true;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2201      	movs	r2, #1
 800191e:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8001928:	3301      	adds	r3, #1
 800192a:	425a      	negs	r2, r3
 800192c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001930:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001934:	bf58      	it	pl
 8001936:	4253      	negpl	r3, r2
 8001938:	b2da      	uxtb	r2, r3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	{
		xRingBuffer->overflow = false;
		xRingBuffer->u8available++;
	}

}
 8001940:	e00b      	b.n	800195a <RingAdd+0x82>
		xRingBuffer->overflow = false;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2200      	movs	r2, #0
 8001946:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
		xRingBuffer->u8available++;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8001950:	3301      	adds	r3, #1
 8001952:	b2da      	uxtb	r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
}
 800195a:	bf00      	nop
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr

08001966 <RingGetAllBytes>:

// This function must be called only after disabling USART RX interrupt
uint8_t RingGetAllBytes(modbusRingBuffer_t *xRingBuffer, uint8_t *buffer)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	b082      	sub	sp, #8
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
 800196e:	6039      	str	r1, [r7, #0]
	return RingGetNBytes(xRingBuffer, buffer, xRingBuffer->u8available);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8001976:	461a      	mov	r2, r3
 8001978:	6839      	ldr	r1, [r7, #0]
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f000 f805 	bl	800198a <RingGetNBytes>
 8001980:	4603      	mov	r3, r0
}
 8001982:	4618      	mov	r0, r3
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <RingGetNBytes>:

// This function must be called only after disabling USART RX interrupt
uint8_t RingGetNBytes(modbusRingBuffer_t *xRingBuffer, uint8_t *buffer, uint8_t uNumber)
{
 800198a:	b580      	push	{r7, lr}
 800198c:	b086      	sub	sp, #24
 800198e:	af00      	add	r7, sp, #0
 8001990:	60f8      	str	r0, [r7, #12]
 8001992:	60b9      	str	r1, [r7, #8]
 8001994:	4613      	mov	r3, r2
 8001996:	71fb      	strb	r3, [r7, #7]
	uint8_t uCounter;
	if(xRingBuffer->u8available == 0  || uNumber == 0 ) return 0;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d002      	beq.n	80019a8 <RingGetNBytes+0x1e>
 80019a2:	79fb      	ldrb	r3, [r7, #7]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d101      	bne.n	80019ac <RingGetNBytes+0x22>
 80019a8:	2300      	movs	r3, #0
 80019aa:	e03e      	b.n	8001a2a <RingGetNBytes+0xa0>
	if(uNumber > MAX_BUFFER) return 0;
 80019ac:	79fb      	ldrb	r3, [r7, #7]
 80019ae:	2b80      	cmp	r3, #128	; 0x80
 80019b0:	d901      	bls.n	80019b6 <RingGetNBytes+0x2c>
 80019b2:	2300      	movs	r3, #0
 80019b4:	e039      	b.n	8001a2a <RingGetNBytes+0xa0>

	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 80019b6:	2300      	movs	r3, #0
 80019b8:	75fb      	strb	r3, [r7, #23]
 80019ba:	e01b      	b.n	80019f4 <RingGetNBytes+0x6a>
	{
		buffer[uCounter] = xRingBuffer->uxBuffer[xRingBuffer->u8start];
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80019c2:	4619      	mov	r1, r3
 80019c4:	7dfb      	ldrb	r3, [r7, #23]
 80019c6:	68ba      	ldr	r2, [r7, #8]
 80019c8:	4413      	add	r3, r2
 80019ca:	68fa      	ldr	r2, [r7, #12]
 80019cc:	5c52      	ldrb	r2, [r2, r1]
 80019ce:	701a      	strb	r2, [r3, #0]
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80019d6:	3301      	adds	r3, #1
 80019d8:	425a      	negs	r2, r3
 80019da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80019de:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80019e2:	bf58      	it	pl
 80019e4:	4253      	negpl	r3, r2
 80019e6:	b2da      	uxtb	r2, r3
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 80019ee:	7dfb      	ldrb	r3, [r7, #23]
 80019f0:	3301      	adds	r3, #1
 80019f2:	75fb      	strb	r3, [r7, #23]
 80019f4:	7dfa      	ldrb	r2, [r7, #23]
 80019f6:	79fb      	ldrb	r3, [r7, #7]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d205      	bcs.n	8001a08 <RingGetNBytes+0x7e>
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8001a02:	7dfa      	ldrb	r2, [r7, #23]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d3d9      	bcc.n	80019bc <RingGetNBytes+0x32>
	}
	xRingBuffer->u8available = xRingBuffer->u8available - uCounter;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	f893 2082 	ldrb.w	r2, [r3, #130]	; 0x82
 8001a0e:	7dfb      	ldrb	r3, [r7, #23]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	b2da      	uxtb	r2, r3
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
	xRingBuffer->overflow = false;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
	RingClear(xRingBuffer);
 8001a22:	68f8      	ldr	r0, [r7, #12]
 8001a24:	f000 f805 	bl	8001a32 <RingClear>

	return uCounter;
 8001a28:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3718      	adds	r7, #24
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <RingClear>:
{
return xRingBuffer->u8available;
}

void RingClear(modbusRingBuffer_t *xRingBuffer)
{
 8001a32:	b480      	push	{r7}
 8001a34:	b083      	sub	sp, #12
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
xRingBuffer->u8start = 0;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
xRingBuffer->u8end = 0;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2200      	movs	r2, #0
 8001a46:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
xRingBuffer->u8available = 0;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
xRingBuffer->overflow = false;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
}
 8001a5a:	bf00      	nop
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
	...

08001a68 <ModbusInit>:
 * of the modbus handler
 *
 * @param modH   modbus handler
 */
void ModbusInit(modbusHandler_t * modH)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af02      	add	r7, sp, #8
 8001a6e:	6078      	str	r0, [r7, #4]

  if (numberHandlers < MAX_M_HANDLERS)
 8001a70:	4b42      	ldr	r3, [pc, #264]	; (8001b7c <ModbusInit+0x114>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d87d      	bhi.n	8001b74 <ModbusInit+0x10c>
  {

	  //Initialize the ring buffer

	  RingClear(&modH->xBufferRX);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	33bc      	adds	r3, #188	; 0xbc
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff ffd8 	bl	8001a32 <RingClear>

	  if(modH->uModbusType == MB_SLAVE)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	2b03      	cmp	r3, #3
 8001a88:	d109      	bne.n	8001a9e <ModbusInit+0x36>
		  }
		  else{
			  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusSlave, modH, &myTaskModbusA_attributes);
		  }
#else
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusSlave, modH, &myTaskModbusA_attributes);
 8001a8a:	4a3d      	ldr	r2, [pc, #244]	; (8001b80 <ModbusInit+0x118>)
 8001a8c:	6879      	ldr	r1, [r7, #4]
 8001a8e:	483d      	ldr	r0, [pc, #244]	; (8001b84 <ModbusInit+0x11c>)
 8001a90:	f00a fc49 	bl	800c326 <osThreadNew>
 8001a94:	4602      	mov	r2, r0
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 8001a9c:	e033      	b.n	8001b06 <ModbusInit+0x9e>
#endif


	  }
	  else if (modH->uModbusType == MB_MASTER)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	2b04      	cmp	r3, #4
 8001aa4:	d12e      	bne.n	8001b04 <ModbusInit+0x9c>
		  else
		  {
		     modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusMaster, modH, &myTaskModbusB_attributes);
		  }
#else
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusMaster, modH, &myTaskModbusB_attributes);
 8001aa6:	4a38      	ldr	r2, [pc, #224]	; (8001b88 <ModbusInit+0x120>)
 8001aa8:	6879      	ldr	r1, [r7, #4]
 8001aaa:	4838      	ldr	r0, [pc, #224]	; (8001b8c <ModbusInit+0x124>)
 8001aac:	f00a fc3b 	bl	800c326 <osThreadNew>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif



		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
				  	  	modH->u16timeOut ,     		// The timer period in ticks.
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	; 0xa2
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 8001abe:	4619      	mov	r1, r3
						pdFALSE,         // The timers will auto-reload themselves when they expire.
						( void * )modH->xTimerTimeout,     // Assign each timer a unique id equal to its array index.
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 8001ac6:	4a32      	ldr	r2, [pc, #200]	; (8001b90 <ModbusInit+0x128>)
 8001ac8:	9200      	str	r2, [sp, #0]
 8001aca:	2200      	movs	r2, #0
 8001acc:	4831      	ldr	r0, [pc, #196]	; (8001b94 <ModbusInit+0x12c>)
 8001ace:	f00d fc31 	bl	800f334 <xTimerCreate>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
						(TimerCallbackFunction_t) vTimerCallbackTimeout  // Each timer calls the same callback when it expires.
                  	  	);

		  if(modH->xTimerTimeout == NULL)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d100      	bne.n	8001ae6 <ModbusInit+0x7e>
		  {
			  while(1); //error creating timer, check heap and stack size
 8001ae4:	e7fe      	b.n	8001ae4 <ModbusInit+0x7c>
		  }


		  modH->QueueTelegramHandle = osMessageQueueNew (MAX_TELEGRAMS, sizeof(modbus_t), &QueueTelegram_attributes);
 8001ae6:	4a2c      	ldr	r2, [pc, #176]	; (8001b98 <ModbusInit+0x130>)
 8001ae8:	2110      	movs	r1, #16
 8001aea:	2002      	movs	r0, #2
 8001aec:	f00a ff02 	bl	800c8f4 <osMessageQueueNew>
 8001af0:	4602      	mov	r2, r0
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

		  if(modH->QueueTelegramHandle == NULL)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d101      	bne.n	8001b06 <ModbusInit+0x9e>
		  {
			  while(1); //error creating queue for telegrams, check heap and stack size
 8001b02:	e7fe      	b.n	8001b02 <ModbusInit+0x9a>
		  }

	  }
	  else
	  {
		  while(1); //Error Modbus type not supported choose a valid Type
 8001b04:	e7fe      	b.n	8001b04 <ModbusInit+0x9c>
	  }

	  if  (modH->myTaskModbusAHandle == NULL)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d100      	bne.n	8001b12 <ModbusInit+0xaa>
	  {
		  while(1); //Error creating Modbus task, check heap and stack size
 8001b10:	e7fe      	b.n	8001b10 <ModbusInit+0xa8>


	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
		  	  	  	  	  	  	  	T35 ,     // The timer period in ticks.
                                    pdFALSE,         // The timers will auto-reload themselves when they expire.
									( void * )modH->xTimerT35,     // Assign each timer a unique id equal to its array index.
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
 8001b18:	4a20      	ldr	r2, [pc, #128]	; (8001b9c <ModbusInit+0x134>)
 8001b1a:	9200      	str	r2, [sp, #0]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	2102      	movs	r1, #2
 8001b20:	481f      	ldr	r0, [pc, #124]	; (8001ba0 <ModbusInit+0x138>)
 8001b22:	f00d fc07 	bl	800f334 <xTimerCreate>
 8001b26:	4602      	mov	r2, r0
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
                                    (TimerCallbackFunction_t) vTimerCallbackT35     // Each timer calls the same callback when it expires.
                                    );
	  if (modH->xTimerT35 == NULL)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d100      	bne.n	8001b3a <ModbusInit+0xd2>
	  {
		  while(1); //Error creating the timer, check heap and stack size
 8001b38:	e7fe      	b.n	8001b38 <ModbusInit+0xd0>
	  }


	  modH->ModBusSphrHandle = osSemaphoreNew(1, 1, &ModBusSphr_attributes);
 8001b3a:	4a1a      	ldr	r2, [pc, #104]	; (8001ba4 <ModbusInit+0x13c>)
 8001b3c:	2101      	movs	r1, #1
 8001b3e:	2001      	movs	r0, #1
 8001b40:	f00a fdb8 	bl	800c6b4 <osSemaphoreNew>
 8001b44:	4602      	mov	r2, r0
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

	  if(modH->ModBusSphrHandle == NULL)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d100      	bne.n	8001b58 <ModbusInit+0xf0>
	  {
		  while(1); //Error creating the semaphore, check heap and stack size
 8001b56:	e7fe      	b.n	8001b56 <ModbusInit+0xee>
	  }

	  mHandlers[numberHandlers] = modH;
 8001b58:	4b08      	ldr	r3, [pc, #32]	; (8001b7c <ModbusInit+0x114>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4a12      	ldr	r2, [pc, #72]	; (8001ba8 <ModbusInit+0x140>)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	  numberHandlers++;
 8001b66:	4b05      	ldr	r3, [pc, #20]	; (8001b7c <ModbusInit+0x114>)
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	b2da      	uxtb	r2, r3
 8001b6e:	4b03      	ldr	r3, [pc, #12]	; (8001b7c <ModbusInit+0x114>)
 8001b70:	701a      	strb	r2, [r3, #0]
  else
  {
	  while(1); //error no more Modbus handlers supported
  }

}
 8001b72:	e000      	b.n	8001b76 <ModbusInit+0x10e>
	  while(1); //error no more Modbus handlers supported
 8001b74:	e7fe      	b.n	8001b74 <ModbusInit+0x10c>
}
 8001b76:	3708      	adds	r7, #8
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	20000038 	.word	0x20000038
 8001b80:	080225a0 	.word	0x080225a0
 8001b84:	08001dc5 	.word	0x08001dc5
 8001b88:	080225c4 	.word	0x080225c4
 8001b8c:	08002289 	.word	0x08002289
 8001b90:	08001d69 	.word	0x08001d69
 8001b94:	0801f30c 	.word	0x0801f30c
 8001b98:	08022588 	.word	0x08022588
 8001b9c:	08001ce5 	.word	0x08001ce5
 8001ba0:	0801f31c 	.word	0x0801f31c
 8001ba4:	080225e8 	.word	0x080225e8
 8001ba8:	20013ae8 	.word	0x20013ae8

08001bac <ModbusStart>:
 * ModbusRtu's own begin() functions.)
 *
 * @ingroup setup
 */
void ModbusStart(modbusHandler_t * modH)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]

	if(modH->xTypeHW != USART_HW && modH->xTypeHW != TCP_HW && modH->xTypeHW != USB_CDC_HW  && modH->xTypeHW != USART_HW_DMA )
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d00f      	beq.n	8001bde <ModbusStart+0x32>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8001bc4:	2b03      	cmp	r3, #3
 8001bc6:	d00a      	beq.n	8001bde <ModbusStart+0x32>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d005      	beq.n	8001bde <ModbusStart+0x32>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8001bd8:	2b04      	cmp	r3, #4
 8001bda:	d000      	beq.n	8001bde <ModbusStart+0x32>
	{

		while(1); //ERROR select the type of hardware
 8001bdc:	e7fe      	b.n	8001bdc <ModbusStart+0x30>
		while(1); //ERROR To use USART_HW_DMA you need to enable it in the ModbusConfig.h file
	}



	if (modH->xTypeHW == USART_HW || modH->xTypeHW ==  USART_HW_DMA )
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d004      	beq.n	8001bf2 <ModbusStart+0x46>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8001bee:	2b04      	cmp	r3, #4
 8001bf0:	d15a      	bne.n	8001ca8 <ModbusStart+0xfc>
	{

	      if (modH->EN_Port != NULL )
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	68db      	ldr	r3, [r3, #12]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d007      	beq.n	8001c0a <ModbusStart+0x5e>
          {
              // return RS485 transceiver to transmit mode
	    	  HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	68d8      	ldr	r0, [r3, #12]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	8a1b      	ldrh	r3, [r3, #16]
 8001c02:	2200      	movs	r2, #0
 8001c04:	4619      	mov	r1, r3
 8001c06:	f005 fff5 	bl	8007bf4 <HAL_GPIO_WritePin>
//	    	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
          }

          if (modH->uModbusType == MB_SLAVE &&  modH->u16regs == NULL )
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	2b03      	cmp	r3, #3
 8001c10:	d105      	bne.n	8001c1e <ModbusStart+0x72>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d100      	bne.n	8001c1e <ModbusStart+0x72>
          {
          	while(1); //ERROR define the DATA pointer shared through Modbus
 8001c1c:	e7fe      	b.n	8001c1c <ModbusStart+0x70>
          }

          //check that port is initialized
          while (HAL_UART_GetState(modH->port) != HAL_UART_STATE_READY)
 8001c1e:	bf00      	nop
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	4618      	mov	r0, r3
 8001c26:	f008 ffd9 	bl	800abdc <HAL_UART_GetState>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b20      	cmp	r3, #32
 8001c2e:	d1f7      	bne.n	8001c20 <ModbusStart+0x74>
          {

          }

#if ENABLE_USART_DMA ==1
          if( modH->xTypeHW == USART_HW_DMA )
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8001c36:	2b04      	cmp	r3, #4
 8001c38:	d118      	bne.n	8001c6c <ModbusStart+0xc0>
          {


        	  if(HAL_UARTEx_ReceiveToIdle_DMA(modH->port, modH->xBufferRX.uxBuffer, MAX_BUFFER ) != HAL_OK)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6858      	ldr	r0, [r3, #4]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	33bc      	adds	r3, #188	; 0xbc
 8001c42:	2280      	movs	r2, #128	; 0x80
 8001c44:	4619      	mov	r1, r3
 8001c46:	f008 fb9e 	bl	800a386 <HAL_UARTEx_ReceiveToIdle_DMA>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d000      	beq.n	8001c52 <ModbusStart+0xa6>
        	   {
        	         while(1)
 8001c50:	e7fe      	b.n	8001c50 <ModbusStart+0xa4>
        	         {
        	                    	  //error in your initialization code
        	         }
        	   }
        	  __HAL_DMA_DISABLE_IT(modH->port->hdmarx, DMA_IT_HT); // we don't need half-transfer interrupt
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f022 0208 	bic.w	r2, r2, #8
 8001c68:	601a      	str	r2, [r3, #0]
 8001c6a:	e00b      	b.n	8001c84 <ModbusStart+0xd8>

          }
          else{

        	  // Receive data from serial port for Modbus using interrupt
        	  if(HAL_UART_Receive_IT(modH->port, &modH->dataRX, 1) != HAL_OK)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6858      	ldr	r0, [r3, #4]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	33a6      	adds	r3, #166	; 0xa6
 8001c74:	2201      	movs	r2, #1
 8001c76:	4619      	mov	r1, r3
 8001c78:	f008 fa58 	bl	800a12c <HAL_UART_Receive_IT>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d000      	beq.n	8001c84 <ModbusStart+0xd8>
        	  {
        	           while(1)
 8001c82:	e7fe      	b.n	8001c82 <ModbusStart+0xd6>
                 }
          }

#endif

          if(modH->u8id !=0 && modH->uModbusType == MB_MASTER )
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	7a1b      	ldrb	r3, [r3, #8]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d004      	beq.n	8001c96 <ModbusStart+0xea>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	2b04      	cmp	r3, #4
 8001c92:	d100      	bne.n	8001c96 <ModbusStart+0xea>
          {
        	  while(1)
 8001c94:	e7fe      	b.n	8001c94 <ModbusStart+0xe8>
        	     	  //error Master ID must be zero
        	  }

          }

          if(modH->u8id ==0 && modH->uModbusType == MB_SLAVE )
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	7a1b      	ldrb	r3, [r3, #8]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d104      	bne.n	8001ca8 <ModbusStart+0xfc>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	2b03      	cmp	r3, #3
 8001ca4:	d100      	bne.n	8001ca8 <ModbusStart+0xfc>
          {
             	  while(1)
 8001ca6:	e7fe      	b.n	8001ca6 <ModbusStart+0xfa>


#endif


    modH->u8lastRec = modH->u8BufferSize = 0;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f893 2093 	ldrb.w	r2, [r3, #147]	; 0x93
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
    modH->u16InCnt = modH->u16OutCnt = modH->u16errCnt = 0;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f8b3 20a0 	ldrh.w	r2, [r3, #160]	; 0xa0
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f8b3 209e 	ldrh.w	r2, [r3, #158]	; 0x9e
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

}
 8001cdc:	bf00      	nop
 8001cde:	3708      	adds	r7, #8
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <vTimerCallbackT35>:
}
#endif


void vTimerCallbackT35(TimerHandle_t *pxTimer)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b086      	sub	sp, #24
 8001ce8:	af02      	add	r7, sp, #8
 8001cea:	6078      	str	r0, [r7, #4]
	//Notify that a stream has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 8001cec:	2300      	movs	r3, #0
 8001cee:	60fb      	str	r3, [r7, #12]
 8001cf0:	e02a      	b.n	8001d48 <vTimerCallbackT35+0x64>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerT35 ==  pxTimer ){
 8001cf2:	4a1b      	ldr	r2, [pc, #108]	; (8001d60 <vTimerCallbackT35+0x7c>)
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cfa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d11e      	bne.n	8001d42 <vTimerCallbackT35+0x5e>
			if(mHandlers[i]->uModbusType == MB_MASTER)
 8001d04:	4a16      	ldr	r2, [pc, #88]	; (8001d60 <vTimerCallbackT35+0x7c>)
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	2b04      	cmp	r3, #4
 8001d10:	d10c      	bne.n	8001d2c <vTimerCallbackT35+0x48>
			{
				xTimerStop(mHandlers[i]->xTimerTimeout,0);
 8001d12:	4a13      	ldr	r2, [pc, #76]	; (8001d60 <vTimerCallbackT35+0x7c>)
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d1a:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
 8001d1e:	2300      	movs	r3, #0
 8001d20:	9300      	str	r3, [sp, #0]
 8001d22:	2300      	movs	r3, #0
 8001d24:	2200      	movs	r2, #0
 8001d26:	2103      	movs	r1, #3
 8001d28:	f00d fb60 	bl	800f3ec <xTimerGenericCommand>
			}
			xTaskNotify(mHandlers[i]->myTaskModbusAHandle, 0, eSetValueWithOverwrite);
 8001d2c:	4a0c      	ldr	r2, [pc, #48]	; (8001d60 <vTimerCallbackT35+0x7c>)
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d34:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
 8001d38:	2300      	movs	r3, #0
 8001d3a:	2203      	movs	r2, #3
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	f00d f8c9 	bl	800eed4 <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	3301      	adds	r3, #1
 8001d46:	60fb      	str	r3, [r7, #12]
 8001d48:	4b06      	ldr	r3, [pc, #24]	; (8001d64 <vTimerCallbackT35+0x80>)
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	4293      	cmp	r3, r2
 8001d52:	dbce      	blt.n	8001cf2 <vTimerCallbackT35+0xe>
		}

	}
}
 8001d54:	bf00      	nop
 8001d56:	bf00      	nop
 8001d58:	3710      	adds	r7, #16
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	20013ae8 	.word	0x20013ae8
 8001d64:	20000038 	.word	0x20000038

08001d68 <vTimerCallbackTimeout>:

void vTimerCallbackTimeout(TimerHandle_t *pxTimer)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
	//Notify that a stream has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 8001d70:	2300      	movs	r3, #0
 8001d72:	60fb      	str	r3, [r7, #12]
 8001d74:	e017      	b.n	8001da6 <vTimerCallbackTimeout+0x3e>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerTimeout ==  pxTimer ){
 8001d76:	4a11      	ldr	r2, [pc, #68]	; (8001dbc <vTimerCallbackTimeout+0x54>)
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d7e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d10b      	bne.n	8001da0 <vTimerCallbackTimeout+0x38>
				xTaskNotify(mHandlers[i]->myTaskModbusAHandle, ERR_TIME_OUT, eSetValueWithOverwrite);
 8001d88:	4a0c      	ldr	r2, [pc, #48]	; (8001dbc <vTimerCallbackTimeout+0x54>)
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d90:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
 8001d94:	2300      	movs	r3, #0
 8001d96:	2203      	movs	r2, #3
 8001d98:	f06f 0107 	mvn.w	r1, #7
 8001d9c:	f00d f89a 	bl	800eed4 <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	3301      	adds	r3, #1
 8001da4:	60fb      	str	r3, [r7, #12]
 8001da6:	4b06      	ldr	r3, [pc, #24]	; (8001dc0 <vTimerCallbackTimeout+0x58>)
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	461a      	mov	r2, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	4293      	cmp	r3, r2
 8001db0:	dbe1      	blt.n	8001d76 <vTimerCallbackTimeout+0xe>
		}

	}

}
 8001db2:	bf00      	nop
 8001db4:	bf00      	nop
 8001db6:	3710      	adds	r7, #16
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	20013ae8 	.word	0x20013ae8
 8001dc0:	20000038 	.word	0x20000038

08001dc4 <StartTaskModbusSlave>:
#endif



void StartTaskModbusSlave(void *argument)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b084      	sub	sp, #16
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]

  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	60fb      	str	r3, [r7, #12]
#endif

  for(;;)
  {

	modH->i8lastError = 0;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	749a      	strb	r2, [r3, #18]

	  }
#endif


   if(modH->xTypeHW == USART_HW || modH->xTypeHW == USART_HW_DMA)
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d004      	beq.n	8001dea <StartTaskModbusSlave+0x26>
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8001de6:	2b04      	cmp	r3, #4
 8001de8:	d117      	bne.n	8001e1a <StartTaskModbusSlave+0x56>
   {

	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY); /* Block until a Modbus Frame arrives */
 8001dea:	f04f 31ff 	mov.w	r1, #4294967295
 8001dee:	2001      	movs	r0, #1
 8001df0:	f00d f828 	bl	800ee44 <ulTaskNotifyTake>

	  if (getRxBuffer(modH) == ERR_BUFF_OVERFLOW)
 8001df4:	68f8      	ldr	r0, [r7, #12]
 8001df6:	f000 fc15 	bl	8002624 <getRxBuffer>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	f113 0f03 	cmn.w	r3, #3
 8001e00:	d10b      	bne.n	8001e1a <StartTaskModbusSlave+0x56>
	  {
	      modH->i8lastError = ERR_BUFF_OVERFLOW;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	22fd      	movs	r2, #253	; 0xfd
 8001e06:	749a      	strb	r2, [r3, #18]
	   	  modH->u16errCnt++;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8001e0e:	3301      	adds	r3, #1
 8001e10:	b29a      	uxth	r2, r3
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
		  continue;
 8001e18:	e0a1      	b.n	8001f5e <StartTaskModbusSlave+0x19a>
	  }

   }

   if (modH->u8BufferSize < 7)
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001e20:	2b06      	cmp	r3, #6
 8001e22:	d80b      	bhi.n	8001e3c <StartTaskModbusSlave+0x78>
   {
      //The size of the frame is invalid
      modH->i8lastError = ERR_BAD_SIZE;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	22fa      	movs	r2, #250	; 0xfa
 8001e28:	749a      	strb	r2, [r3, #18]
      modH->u16errCnt++;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8001e30:	3301      	adds	r3, #1
 8001e32:	b29a      	uxth	r2, r3
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0

	  continue;
 8001e3a:	e090      	b.n	8001f5e <StartTaskModbusSlave+0x19a>
    }


   // check slave id
    if ( modH->u8Buffer[ID] !=  modH->u8id)
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	7cda      	ldrb	r2, [r3, #19]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	7a1b      	ldrb	r3, [r3, #8]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	f040 8089 	bne.w	8001f5c <StartTaskModbusSlave+0x198>
    	}
#endif
	 }

	  // validate message: CRC, FCT, address and size
    uint8_t u8exception = validateRequest(modH);
 8001e4a:	68f8      	ldr	r0, [r7, #12]
 8001e4c:	f000 fc34 	bl	80026b8 <validateRequest>
 8001e50:	4603      	mov	r3, r0
 8001e52:	72fb      	strb	r3, [r7, #11]
	if (u8exception > 0)
 8001e54:	7afb      	ldrb	r3, [r7, #11]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d00c      	beq.n	8001e74 <StartTaskModbusSlave+0xb0>
	{
	    if (u8exception != ERR_TIME_OUT)
		{
		    buildException( u8exception, modH);
 8001e5a:	7afb      	ldrb	r3, [r7, #11]
 8001e5c:	68f9      	ldr	r1, [r7, #12]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f000 fdce 	bl	8002a00 <buildException>
			sendTxBuffer(modH);
 8001e64:	68f8      	ldr	r0, [r7, #12]
 8001e66:	f000 fdea 	bl	8002a3e <sendTxBuffer>
		}
		modH->i8lastError = u8exception;
 8001e6a:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	749a      	strb	r2, [r3, #18]
		//return u8exception

		continue;
 8001e72:	e074      	b.n	8001f5e <StartTaskModbusSlave+0x19a>
	 }

	 modH->i8lastError = 0;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2200      	movs	r2, #0
 8001e78:	749a      	strb	r2, [r3, #18]
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8001e80:	f04f 31ff 	mov.w	r1, #4294967295
 8001e84:	4618      	mov	r0, r3
 8001e86:	f00b fcb3 	bl	800d7f0 <xQueueSemaphoreTake>

	 // process message
	 switch(modH->u8Buffer[ FUNC ] )
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	7d1b      	ldrb	r3, [r3, #20]
 8001e8e:	3b01      	subs	r3, #1
 8001e90:	2b0f      	cmp	r3, #15
 8001e92:	d859      	bhi.n	8001f48 <StartTaskModbusSlave+0x184>
 8001e94:	a201      	add	r2, pc, #4	; (adr r2, 8001e9c <StartTaskModbusSlave+0xd8>)
 8001e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e9a:	bf00      	nop
 8001e9c:	08001edd 	.word	0x08001edd
 8001ea0:	08001edd 	.word	0x08001edd
 8001ea4:	08001eef 	.word	0x08001eef
 8001ea8:	08001eef 	.word	0x08001eef
 8001eac:	08001f01 	.word	0x08001f01
 8001eb0:	08001f13 	.word	0x08001f13
 8001eb4:	08001f49 	.word	0x08001f49
 8001eb8:	08001f49 	.word	0x08001f49
 8001ebc:	08001f49 	.word	0x08001f49
 8001ec0:	08001f49 	.word	0x08001f49
 8001ec4:	08001f49 	.word	0x08001f49
 8001ec8:	08001f49 	.word	0x08001f49
 8001ecc:	08001f49 	.word	0x08001f49
 8001ed0:	08001f49 	.word	0x08001f49
 8001ed4:	08001f25 	.word	0x08001f25
 8001ed8:	08001f37 	.word	0x08001f37
	 {
			case MB_FC_READ_COILS:
			case MB_FC_READ_DISCRETE_INPUT:
				modH->i8state = process_FC1(modH);
 8001edc:	68f8      	ldr	r0, [r7, #12]
 8001ede:	f000 fe50 	bl	8002b82 <process_FC1>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 8001eec:	e02d      	b.n	8001f4a <StartTaskModbusSlave+0x186>
			case MB_FC_READ_INPUT_REGISTER:
			case MB_FC_READ_REGISTERS :
				modH->i8state = process_FC3(modH);
 8001eee:	68f8      	ldr	r0, [r7, #12]
 8001ef0:	f000 fefc 	bl	8002cec <process_FC3>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 8001efe:	e024      	b.n	8001f4a <StartTaskModbusSlave+0x186>
			case MB_FC_WRITE_COIL:
				modH->i8state = process_FC5(modH);
 8001f00:	68f8      	ldr	r0, [r7, #12]
 8001f02:	f000 ff5e 	bl	8002dc2 <process_FC5>
 8001f06:	4603      	mov	r3, r0
 8001f08:	461a      	mov	r2, r3
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 8001f10:	e01b      	b.n	8001f4a <StartTaskModbusSlave+0x186>
			case MB_FC_WRITE_REGISTER :
				modH->i8state = process_FC6(modH);
 8001f12:	68f8      	ldr	r0, [r7, #12]
 8001f14:	f000 ffae 	bl	8002e74 <process_FC6>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 8001f22:	e012      	b.n	8001f4a <StartTaskModbusSlave+0x186>
			case MB_FC_WRITE_MULTIPLE_COILS:
				modH->i8state = process_FC15(modH);
 8001f24:	68f8      	ldr	r0, [r7, #12]
 8001f26:	f000 ffd7 	bl	8002ed8 <process_FC15>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 8001f34:	e009      	b.n	8001f4a <StartTaskModbusSlave+0x186>
			case MB_FC_WRITE_MULTIPLE_REGISTERS :
				modH->i8state = process_FC16(modH);
 8001f36:	68f8      	ldr	r0, [r7, #12]
 8001f38:	f001 f85c 	bl	8002ff4 <process_FC16>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	461a      	mov	r2, r3
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 8001f46:	e000      	b.n	8001f4a <StartTaskModbusSlave+0x186>
			default:
				break;
 8001f48:	bf00      	nop
	 }


	 xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 8001f50:	2300      	movs	r3, #0
 8001f52:	2200      	movs	r2, #0
 8001f54:	2100      	movs	r1, #0
 8001f56:	f00b f945 	bl	800d1e4 <xQueueGenericSend>

	 continue;
 8001f5a:	e000      	b.n	8001f5e <StartTaskModbusSlave+0x19a>
    	continue; // continue this is not for us
 8001f5c:	bf00      	nop
  {
 8001f5e:	e737      	b.n	8001dd0 <StartTaskModbusSlave+0xc>

08001f60 <ModbusQuery>:
}



void ModbusQuery(modbusHandler_t * modH, modbus_t telegram )
{
 8001f60:	b084      	sub	sp, #16
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b082      	sub	sp, #8
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
 8001f6a:	f107 0014 	add.w	r0, r7, #20
 8001f6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	//Add the telegram to the TX tail Queue of Modbus
	if (modH->uModbusType == MB_MASTER)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	2b04      	cmp	r3, #4
 8001f78:	d10d      	bne.n	8001f96 <ModbusQuery+0x36>
	{
	telegram.u32CurrentTask = (uint32_t *) osThreadGetId();
 8001f7a:	f00a fa67 	bl	800c44c <osThreadGetId>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	623b      	str	r3, [r7, #32]
	xQueueSendToBack(modH->QueueTelegramHandle, &telegram, 0);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	f8d3 00a8 	ldr.w	r0, [r3, #168]	; 0xa8
 8001f88:	f107 0114 	add.w	r1, r7, #20
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f00b f928 	bl	800d1e4 <xQueueGenericSend>
	}
	else
		printf("error a slave cannot send queries as a master\n");
//		while(1);// error a slave cannot send queries as a master

}
 8001f94:	e002      	b.n	8001f9c <ModbusQuery+0x3c>
		printf("error a slave cannot send queries as a master\n");
 8001f96:	4805      	ldr	r0, [pc, #20]	; (8001fac <ModbusQuery+0x4c>)
 8001f98:	f01b faf8 	bl	801d58c <puts>
}
 8001f9c:	bf00      	nop
 8001f9e:	3708      	adds	r7, #8
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001fa6:	b004      	add	sp, #16
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	0801f328 	.word	0x0801f328

08001fb0 <SendQuery>:
 * @param modH  modbus handler
 * @param modbus_t  modbus telegram structure (id, fct, ...)
 * @ingroup loop
 */
int8_t SendQuery(modbusHandler_t *modH ,  modbus_t telegram )
{
 8001fb0:	b084      	sub	sp, #16
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	b084      	sub	sp, #16
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
 8001fba:	f107 001c 	add.w	r0, r7, #28
 8001fbe:	e880 000e 	stmia.w	r0, {r1, r2, r3}


	uint8_t u8regsno, u8bytesno;
	uint8_t  error = 0;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	73bb      	strb	r3, [r7, #14]
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8001fcc:	f04f 31ff 	mov.w	r1, #4294967295
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f00b fc0d 	bl	800d7f0 <xQueueSemaphoreTake>

	if (modH->u8id!=0) error = ERR_NOT_MASTER;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	7a1b      	ldrb	r3, [r3, #8]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <SendQuery+0x32>
 8001fde:	23ff      	movs	r3, #255	; 0xff
 8001fe0:	73bb      	strb	r3, [r7, #14]
	if (modH->i8state != COM_IDLE) error = ERR_POLLING ;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f993 30a7 	ldrsb.w	r3, [r3, #167]	; 0xa7
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <SendQuery+0x40>
 8001fec:	23fe      	movs	r3, #254	; 0xfe
 8001fee:	73bb      	strb	r3, [r7, #14]
	if ((telegram.u8id==0) || (telegram.u8id>247)) error = ERR_BAD_SLAVE_ID;
 8001ff0:	7f3b      	ldrb	r3, [r7, #28]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d002      	beq.n	8001ffc <SendQuery+0x4c>
 8001ff6:	7f3b      	ldrb	r3, [r7, #28]
 8001ff8:	2bf7      	cmp	r3, #247	; 0xf7
 8001ffa:	d901      	bls.n	8002000 <SendQuery+0x50>
 8001ffc:	23f7      	movs	r3, #247	; 0xf7
 8001ffe:	73bb      	strb	r3, [r7, #14]


	if(error)
 8002000:	7bbb      	ldrb	r3, [r7, #14]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d00e      	beq.n	8002024 <SendQuery+0x74>
	{
		 modH->i8lastError = error;
 8002006:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	749a      	strb	r2, [r3, #18]
		 xSemaphoreGive(modH->ModBusSphrHandle);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 8002014:	2300      	movs	r3, #0
 8002016:	2200      	movs	r2, #0
 8002018:	2100      	movs	r1, #0
 800201a:	f00b f8e3 	bl	800d1e4 <xQueueGenericSend>
		 return error;
 800201e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002022:	e129      	b.n	8002278 <SendQuery+0x2c8>
	}


	modH->u16regs = telegram.u16reg;
 8002024:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

	// telegram header
	modH->u8Buffer[ ID ]         = telegram.u8id;
 800202c:	7f3a      	ldrb	r2, [r7, #28]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	74da      	strb	r2, [r3, #19]
	modH->u8Buffer[ FUNC ]       = telegram.u8fct;
 8002032:	7f7a      	ldrb	r2, [r7, #29]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	751a      	strb	r2, [r3, #20]
	modH->u8Buffer[ ADD_HI ]     = highByte(telegram.u16RegAdd );
 8002038:	8bfb      	ldrh	r3, [r7, #30]
 800203a:	0a1b      	lsrs	r3, r3, #8
 800203c:	b29b      	uxth	r3, r3
 800203e:	b2da      	uxtb	r2, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	755a      	strb	r2, [r3, #21]
	modH->u8Buffer[ ADD_LO ]     = lowByte( telegram.u16RegAdd );
 8002044:	8bfb      	ldrh	r3, [r7, #30]
 8002046:	b2da      	uxtb	r2, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	759a      	strb	r2, [r3, #22]

	switch( telegram.u8fct )
 800204c:	7f7b      	ldrb	r3, [r7, #29]
 800204e:	3b01      	subs	r3, #1
 8002050:	2b0f      	cmp	r3, #15
 8002052:	f200 80fe 	bhi.w	8002252 <SendQuery+0x2a2>
 8002056:	a201      	add	r2, pc, #4	; (adr r2, 800205c <SendQuery+0xac>)
 8002058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800205c:	0800209d 	.word	0x0800209d
 8002060:	0800209d 	.word	0x0800209d
 8002064:	0800209d 	.word	0x0800209d
 8002068:	0800209d 	.word	0x0800209d
 800206c:	080020bb 	.word	0x080020bb
 8002070:	080020dd 	.word	0x080020dd
 8002074:	08002253 	.word	0x08002253
 8002078:	08002253 	.word	0x08002253
 800207c:	08002253 	.word	0x08002253
 8002080:	08002253 	.word	0x08002253
 8002084:	08002253 	.word	0x08002253
 8002088:	08002253 	.word	0x08002253
 800208c:	08002253 	.word	0x08002253
 8002090:	08002253 	.word	0x08002253
 8002094:	080020ff 	.word	0x080020ff
 8002098:	080021bd 	.word	0x080021bd
	{
	case MB_FC_READ_COILS:
	case MB_FC_READ_DISCRETE_INPUT:
	case MB_FC_READ_REGISTERS:
	case MB_FC_READ_INPUT_REGISTER:
	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 800209c:	8c3b      	ldrh	r3, [r7, #32]
 800209e:	0a1b      	lsrs	r3, r3, #8
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	b2da      	uxtb	r2, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 80020a8:	8c3b      	ldrh	r3, [r7, #32]
 80020aa:	b2da      	uxtb	r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2206      	movs	r2, #6
 80020b4:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    break;
 80020b8:	e0cb      	b.n	8002252 <SendQuery+0x2a2>
	case MB_FC_WRITE_COIL:
	    modH->u8Buffer[ NB_HI ]      = (( telegram.u16reg[0]> 0) ? 0xff : 0);
 80020ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020bc:	881b      	ldrh	r3, [r3, #0]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <SendQuery+0x116>
 80020c2:	22ff      	movs	r2, #255	; 0xff
 80020c4:	e000      	b.n	80020c8 <SendQuery+0x118>
 80020c6:	2200      	movs	r2, #0
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = 0;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2206      	movs	r2, #6
 80020d6:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    break;
 80020da:	e0ba      	b.n	8002252 <SendQuery+0x2a2>
	case MB_FC_WRITE_REGISTER:
	    modH->u8Buffer[ NB_HI ]      = highByte( telegram.u16reg[0]);
 80020dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020de:	881b      	ldrh	r3, [r3, #0]
 80020e0:	0a1b      	lsrs	r3, r3, #8
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	b2da      	uxtb	r2, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16reg[0]);
 80020ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ec:	881b      	ldrh	r3, [r3, #0]
 80020ee:	b2da      	uxtb	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2206      	movs	r2, #6
 80020f8:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    break;
 80020fc:	e0a9      	b.n	8002252 <SendQuery+0x2a2>
	case MB_FC_WRITE_MULTIPLE_COILS: // TODO: implement "sending coils"
	    u8regsno = telegram.u16CoilsNo / 16;
 80020fe:	8c3b      	ldrh	r3, [r7, #32]
 8002100:	091b      	lsrs	r3, r3, #4
 8002102:	b29b      	uxth	r3, r3
 8002104:	727b      	strb	r3, [r7, #9]
	    u8bytesno = u8regsno * 2;
 8002106:	7a7b      	ldrb	r3, [r7, #9]
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	73fb      	strb	r3, [r7, #15]
	    if ((telegram.u16CoilsNo % 16) != 0)
 800210c:	8c3b      	ldrh	r3, [r7, #32]
 800210e:	f003 030f 	and.w	r3, r3, #15
 8002112:	b29b      	uxth	r3, r3
 8002114:	2b00      	cmp	r3, #0
 8002116:	d005      	beq.n	8002124 <SendQuery+0x174>
	    {
	        u8bytesno++;
 8002118:	7bfb      	ldrb	r3, [r7, #15]
 800211a:	3301      	adds	r3, #1
 800211c:	73fb      	strb	r3, [r7, #15]
	        u8regsno++;
 800211e:	7a7b      	ldrb	r3, [r7, #9]
 8002120:	3301      	adds	r3, #1
 8002122:	727b      	strb	r3, [r7, #9]
	    }

	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 8002124:	8c3b      	ldrh	r3, [r7, #32]
 8002126:	0a1b      	lsrs	r3, r3, #8
 8002128:	b29b      	uxth	r3, r3
 800212a:	b2da      	uxtb	r2, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 8002130:	8c3b      	ldrh	r3, [r7, #32]
 8002132:	b2da      	uxtb	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	761a      	strb	r2, [r3, #24]
	    modH->u8Buffer[ BYTE_CNT ]    = u8bytesno;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	7bfa      	ldrb	r2, [r7, #15]
 800213c:	765a      	strb	r2, [r3, #25]
	    modH->u8BufferSize = 7;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2207      	movs	r2, #7
 8002142:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

	    for (uint16_t i = 0; i < u8bytesno; i++)
 8002146:	2300      	movs	r3, #0
 8002148:	81bb      	strh	r3, [r7, #12]
 800214a:	e031      	b.n	80021b0 <SendQuery+0x200>
	    {
	        if(i%2)
 800214c:	89bb      	ldrh	r3, [r7, #12]
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	b29b      	uxth	r3, r3
 8002154:	2b00      	cmp	r3, #0
 8002156:	d00f      	beq.n	8002178 <SendQuery+0x1c8>
	        {
	        	modH->u8Buffer[ modH->u8BufferSize ] = lowByte( telegram.u16reg[ i/2 ] );
 8002158:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800215a:	89bb      	ldrh	r3, [r7, #12]
 800215c:	085b      	lsrs	r3, r3, #1
 800215e:	b29b      	uxth	r3, r3
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	4413      	add	r3, r2
 8002164:	881a      	ldrh	r2, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800216c:	4619      	mov	r1, r3
 800216e:	b2d2      	uxtb	r2, r2
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	440b      	add	r3, r1
 8002174:	74da      	strb	r2, [r3, #19]
 8002176:	e010      	b.n	800219a <SendQuery+0x1ea>
	        }
	        else
	        {
	        	modH->u8Buffer[  modH->u8BufferSize ] = highByte( telegram.u16reg[ i/2 ] );
 8002178:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800217a:	89bb      	ldrh	r3, [r7, #12]
 800217c:	085b      	lsrs	r3, r3, #1
 800217e:	b29b      	uxth	r3, r3
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	4413      	add	r3, r2
 8002184:	881b      	ldrh	r3, [r3, #0]
 8002186:	0a1b      	lsrs	r3, r3, #8
 8002188:	b29a      	uxth	r2, r3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002190:	4619      	mov	r1, r3
 8002192:	b2d2      	uxtb	r2, r2
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	440b      	add	r3, r1
 8002198:	74da      	strb	r2, [r3, #19]

	        }
	        modH->u8BufferSize++;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80021a0:	3301      	adds	r3, #1
 80021a2:	b2da      	uxtb	r2, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    for (uint16_t i = 0; i < u8bytesno; i++)
 80021aa:	89bb      	ldrh	r3, [r7, #12]
 80021ac:	3301      	adds	r3, #1
 80021ae:	81bb      	strh	r3, [r7, #12]
 80021b0:	7bfb      	ldrb	r3, [r7, #15]
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	89ba      	ldrh	r2, [r7, #12]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d3c8      	bcc.n	800214c <SendQuery+0x19c>
	    }
	    break;
 80021ba:	e04a      	b.n	8002252 <SendQuery+0x2a2>

	case MB_FC_WRITE_MULTIPLE_REGISTERS:
	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 80021bc:	8c3b      	ldrh	r3, [r7, #32]
 80021be:	0a1b      	lsrs	r3, r3, #8
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	b2da      	uxtb	r2, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 80021c8:	8c3b      	ldrh	r3, [r7, #32]
 80021ca:	b2da      	uxtb	r2, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	761a      	strb	r2, [r3, #24]
	    modH->u8Buffer[ BYTE_CNT ]    = (uint8_t) ( telegram.u16CoilsNo * 2 );
 80021d0:	8c3b      	ldrh	r3, [r7, #32]
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	005b      	lsls	r3, r3, #1
 80021d6:	b2da      	uxtb	r2, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	765a      	strb	r2, [r3, #25]
	    modH->u8BufferSize = 7;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2207      	movs	r2, #7
 80021e0:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 80021e4:	2300      	movs	r3, #0
 80021e6:	817b      	strh	r3, [r7, #10]
 80021e8:	e02e      	b.n	8002248 <SendQuery+0x298>
	    {

	        modH->u8Buffer[  modH->u8BufferSize ] = highByte(  telegram.u16reg[ i ] );
 80021ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021ec:	897b      	ldrh	r3, [r7, #10]
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	4413      	add	r3, r2
 80021f2:	881b      	ldrh	r3, [r3, #0]
 80021f4:	0a1b      	lsrs	r3, r3, #8
 80021f6:	b29a      	uxth	r2, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80021fe:	4619      	mov	r1, r3
 8002200:	b2d2      	uxtb	r2, r2
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	440b      	add	r3, r1
 8002206:	74da      	strb	r2, [r3, #19]
	        modH->u8BufferSize++;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800220e:	3301      	adds	r3, #1
 8002210:	b2da      	uxtb	r2, r3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	        modH->u8Buffer[  modH->u8BufferSize ] = lowByte( telegram.u16reg[ i ] );
 8002218:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800221a:	897b      	ldrh	r3, [r7, #10]
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	4413      	add	r3, r2
 8002220:	881a      	ldrh	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002228:	4619      	mov	r1, r3
 800222a:	b2d2      	uxtb	r2, r2
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	440b      	add	r3, r1
 8002230:	74da      	strb	r2, [r3, #19]
	        modH->u8BufferSize++;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002238:	3301      	adds	r3, #1
 800223a:	b2da      	uxtb	r2, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 8002242:	897b      	ldrh	r3, [r7, #10]
 8002244:	3301      	adds	r3, #1
 8002246:	817b      	strh	r3, [r7, #10]
 8002248:	8c3b      	ldrh	r3, [r7, #32]
 800224a:	897a      	ldrh	r2, [r7, #10]
 800224c:	429a      	cmp	r2, r3
 800224e:	d3cc      	bcc.n	80021ea <SendQuery+0x23a>
	    }
	    break;
 8002250:	bf00      	nop
	}


	sendTxBuffer(modH);
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f000 fbf3 	bl	8002a3e <sendTxBuffer>

	xSemaphoreGive(modH->ModBusSphrHandle);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 800225e:	2300      	movs	r3, #0
 8002260:	2200      	movs	r2, #0
 8002262:	2100      	movs	r1, #0
 8002264:	f00a ffbe 	bl	800d1e4 <xQueueGenericSend>

	modH->i8state = COM_WAITING;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2201      	movs	r2, #1
 800226c:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
	modH->i8lastError = 0;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	749a      	strb	r2, [r3, #18]
	return 0;
 8002276:	2300      	movs	r3, #0


}
 8002278:	4618      	mov	r0, r3
 800227a:	3710      	adds	r7, #16
 800227c:	46bd      	mov	sp, r7
 800227e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002282:	b004      	add	sp, #16
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop

08002288 <StartTaskModbusMaster>:
}

#endif

void StartTaskModbusMaster(void *argument)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b08c      	sub	sp, #48	; 0x30
 800228c:	af02      	add	r7, sp, #8
 800228e:	6078      	str	r0, [r7, #4]

  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	627b      	str	r3, [r7, #36]	; 0x24


  for(;;)
  {
	  /*Wait indefinitely for a telegram to send */
	  xQueueReceive(modH->QueueTelegramHandle, &telegram, portMAX_DELAY);
 8002294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002296:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800229a:	f107 010c 	add.w	r1, r7, #12
 800229e:	f04f 32ff 	mov.w	r2, #4294967295
 80022a2:	4618      	mov	r0, r3
 80022a4:	f00b f9c4 	bl	800d630 <xQueueReceive>
       /* Block until a Modbus Frame arrives or query timeouts*/
   	   ulNotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
     }
#else
     // This is the case for implementations with only USART support
     SendQuery(modH, telegram);
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	9300      	str	r3, [sp, #0]
 80022ac:	f107 030c 	add.w	r3, r7, #12
 80022b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80022b4:	f7ff fe7c 	bl	8001fb0 <SendQuery>
     /* Block indefinitely until a Modbus Frame arrives or query timeouts*/
     ulNotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80022b8:	f04f 31ff 	mov.w	r1, #4294967295
 80022bc:	2001      	movs	r0, #1
 80022be:	f00c fdc1 	bl	800ee44 <ulTaskNotifyTake>
 80022c2:	6238      	str	r0, [r7, #32]

#endif

	  // notify the task the request timeout
      modH->i8lastError = 0;
 80022c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c6:	2200      	movs	r2, #0
 80022c8:	749a      	strb	r2, [r3, #18]
      if(ulNotificationValue)
 80022ca:	6a3b      	ldr	r3, [r7, #32]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d018      	beq.n	8002302 <StartTaskModbusMaster+0x7a>
      {
    	  modH->i8state = COM_IDLE;
 80022d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d2:	2200      	movs	r2, #0
 80022d4:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
    	  modH->i8lastError = ERR_TIME_OUT;
 80022d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022da:	22f8      	movs	r2, #248	; 0xf8
 80022dc:	749a      	strb	r2, [r3, #18]
    	  modH->u16errCnt++;
 80022de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e0:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 80022e4:	3301      	adds	r3, #1
 80022e6:	b29a      	uxth	r2, r3
 80022e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ea:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
    	  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 80022ee:	69b8      	ldr	r0, [r7, #24]
 80022f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f2:	f993 3012 	ldrsb.w	r3, [r3, #18]
 80022f6:	4619      	mov	r1, r3
 80022f8:	2300      	movs	r3, #0
 80022fa:	2203      	movs	r2, #3
 80022fc:	f00c fdea 	bl	800eed4 <xTaskGenericNotify>
    	  continue;
 8002300:	e09a      	b.n	8002438 <StartTaskModbusMaster+0x1b0>
      {
    	  getRxBuffer(modH);
      }

#else
      getRxBuffer(modH);
 8002302:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002304:	f000 f98e 	bl	8002624 <getRxBuffer>
#endif



	  if ( modH->u8BufferSize < 6){
 8002308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800230e:	2b05      	cmp	r3, #5
 8002310:	d818      	bhi.n	8002344 <StartTaskModbusMaster+0xbc>

		  modH->i8state = COM_IDLE;
 8002312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002314:	2200      	movs	r2, #0
 8002316:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
		  modH->i8lastError = ERR_BAD_SIZE;
 800231a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231c:	22fa      	movs	r2, #250	; 0xfa
 800231e:	749a      	strb	r2, [r3, #18]
		  modH->u16errCnt++;
 8002320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002322:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8002326:	3301      	adds	r3, #1
 8002328:	b29a      	uxth	r2, r3
 800232a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232c:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
		  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 8002330:	69b8      	ldr	r0, [r7, #24]
 8002332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002334:	f993 3012 	ldrsb.w	r3, [r3, #18]
 8002338:	4619      	mov	r1, r3
 800233a:	2300      	movs	r3, #0
 800233c:	2203      	movs	r2, #3
 800233e:	f00c fdc9 	bl	800eed4 <xTaskGenericNotify>
		  continue;
 8002342:	e079      	b.n	8002438 <StartTaskModbusMaster+0x1b0>
	  }

	  xTimerStop(modH->xTimerTimeout,0); // cancel timeout timer
 8002344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002346:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
 800234a:	2300      	movs	r3, #0
 800234c:	9300      	str	r3, [sp, #0]
 800234e:	2300      	movs	r3, #0
 8002350:	2200      	movs	r2, #0
 8002352:	2103      	movs	r1, #3
 8002354:	f00d f84a 	bl	800f3ec <xTimerGenericCommand>


	  // validate message: id, CRC, FCT, exception
	  int8_t u8exception = validateAnswer(modH);
 8002358:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800235a:	f000 f8f5 	bl	8002548 <validateAnswer>
 800235e:	4603      	mov	r3, r0
 8002360:	77fb      	strb	r3, [r7, #31]
	  if (u8exception != 0)
 8002362:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d010      	beq.n	800238c <StartTaskModbusMaster+0x104>
	  {
		 modH->i8state = COM_IDLE;
 800236a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236c:	2200      	movs	r2, #0
 800236e:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
         modH->i8lastError = u8exception;
 8002372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002374:	7ffa      	ldrb	r2, [r7, #31]
 8002376:	749a      	strb	r2, [r3, #18]
		 xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 8002378:	69b8      	ldr	r0, [r7, #24]
 800237a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237c:	f993 3012 	ldrsb.w	r3, [r3, #18]
 8002380:	4619      	mov	r1, r3
 8002382:	2300      	movs	r3, #0
 8002384:	2203      	movs	r2, #3
 8002386:	f00c fda5 	bl	800eed4 <xTaskGenericNotify>
	     continue;
 800238a:	e055      	b.n	8002438 <StartTaskModbusMaster+0x1b0>
	  }

	  modH->i8lastError = u8exception;
 800238c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238e:	7ffa      	ldrb	r2, [r7, #31]
 8002390:	749a      	strb	r2, [r3, #18]

	  xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 8002392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002394:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002398:	f04f 31ff 	mov.w	r1, #4294967295
 800239c:	4618      	mov	r0, r3
 800239e:	f00b fa27 	bl	800d7f0 <xQueueSemaphoreTake>
	  // process answer
	  switch( modH->u8Buffer[ FUNC ] )
 80023a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a4:	7d1b      	ldrb	r3, [r3, #20]
 80023a6:	3b01      	subs	r3, #1
 80023a8:	2b0f      	cmp	r3, #15
 80023aa:	d82b      	bhi.n	8002404 <StartTaskModbusMaster+0x17c>
 80023ac:	a201      	add	r2, pc, #4	; (adr r2, 80023b4 <StartTaskModbusMaster+0x12c>)
 80023ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023b2:	bf00      	nop
 80023b4:	080023f5 	.word	0x080023f5
 80023b8:	080023f5 	.word	0x080023f5
 80023bc:	080023fd 	.word	0x080023fd
 80023c0:	080023fd 	.word	0x080023fd
 80023c4:	08002405 	.word	0x08002405
 80023c8:	08002405 	.word	0x08002405
 80023cc:	08002405 	.word	0x08002405
 80023d0:	08002405 	.word	0x08002405
 80023d4:	08002405 	.word	0x08002405
 80023d8:	08002405 	.word	0x08002405
 80023dc:	08002405 	.word	0x08002405
 80023e0:	08002405 	.word	0x08002405
 80023e4:	08002405 	.word	0x08002405
 80023e8:	08002405 	.word	0x08002405
 80023ec:	08002405 	.word	0x08002405
 80023f0:	08002405 	.word	0x08002405
	  {
	  case MB_FC_READ_COILS:
	  case MB_FC_READ_DISCRETE_INPUT:
	      //call get_FC1 to transfer the incoming message to u16regs buffer
	      get_FC1(modH);
 80023f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80023f6:	f000 f821 	bl	800243c <get_FC1>
	      break;
 80023fa:	e004      	b.n	8002406 <StartTaskModbusMaster+0x17e>
	  case MB_FC_READ_INPUT_REGISTER:
	  case MB_FC_READ_REGISTERS :
	      // call get_FC3 to transfer the incoming message to u16regs buffer
	      get_FC3(modH);
 80023fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80023fe:	f000 f874 	bl	80024ea <get_FC3>
	      break;
 8002402:	e000      	b.n	8002406 <StartTaskModbusMaster+0x17e>
	  case MB_FC_WRITE_MULTIPLE_COILS:
	  case MB_FC_WRITE_MULTIPLE_REGISTERS :
	      // nothing to do
	      break;
	  default:
	      break;
 8002404:	bf00      	nop
	  }
	  modH->i8state = COM_IDLE;
 8002406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002408:	2200      	movs	r2, #0
 800240a:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7

	  if (modH->i8lastError ==0) // no error the error_OK, we need to use a different value than 0 to detect the timeout
 800240e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002410:	f993 3012 	ldrsb.w	r3, [r3, #18]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d10e      	bne.n	8002436 <StartTaskModbusMaster+0x1ae>
	  {
		  xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 8002418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241a:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 800241e:	2300      	movs	r3, #0
 8002420:	2200      	movs	r2, #0
 8002422:	2100      	movs	r1, #0
 8002424:	f00a fede 	bl	800d1e4 <xQueueGenericSend>
		  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, ERR_OK_QUERY, eSetValueWithOverwrite);
 8002428:	69b8      	ldr	r0, [r7, #24]
 800242a:	2300      	movs	r3, #0
 800242c:	2203      	movs	r2, #3
 800242e:	f06f 010a 	mvn.w	r1, #10
 8002432:	f00c fd4f 	bl	800eed4 <xTaskGenericNotify>
	  }


	  continue;
 8002436:	bf00      	nop
  {
 8002438:	e72c      	b.n	8002294 <StartTaskModbusMaster+0xc>
 800243a:	bf00      	nop

0800243c <get_FC1>:
 * This method puts the slave answer into master data buffer
 *
 * @ingroup register
 */
void get_FC1(modbusHandler_t *modH)
{
 800243c:	b590      	push	{r4, r7, lr}
 800243e:	b085      	sub	sp, #20
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
    uint8_t u8byte, i;
    u8byte = 3;
 8002444:	2303      	movs	r3, #3
 8002446:	73bb      	strb	r3, [r7, #14]
     for (i=0; i< modH->u8Buffer[2]; i++) {
 8002448:	2300      	movs	r3, #0
 800244a:	73fb      	strb	r3, [r7, #15]
 800244c:	e043      	b.n	80024d6 <get_FC1+0x9a>

        if(i%2)
 800244e:	7bfb      	ldrb	r3, [r7, #15]
 8002450:	f003 0301 	and.w	r3, r3, #1
 8002454:	b2db      	uxtb	r3, r3
 8002456:	2b00      	cmp	r3, #0
 8002458:	d01c      	beq.n	8002494 <get_FC1+0x58>
        {
        	modH->u16regs[i/2]= word(modH->u8Buffer[i+u8byte], lowByte(modH->u16regs[i/2]));
 800245a:	7bfa      	ldrb	r2, [r7, #15]
 800245c:	7bbb      	ldrb	r3, [r7, #14]
 800245e:	4413      	add	r3, r2
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	4413      	add	r3, r2
 8002464:	7cd8      	ldrb	r0, [r3, #19]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800246c:	7bfb      	ldrb	r3, [r7, #15]
 800246e:	085b      	lsrs	r3, r3, #1
 8002470:	b2db      	uxtb	r3, r3
 8002472:	005b      	lsls	r3, r3, #1
 8002474:	4413      	add	r3, r2
 8002476:	881b      	ldrh	r3, [r3, #0]
 8002478:	b2d9      	uxtb	r1, r3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8002480:	7bfb      	ldrb	r3, [r7, #15]
 8002482:	085b      	lsrs	r3, r3, #1
 8002484:	b2db      	uxtb	r3, r3
 8002486:	005b      	lsls	r3, r3, #1
 8002488:	18d4      	adds	r4, r2, r3
 800248a:	f000 fa5f 	bl	800294c <word>
 800248e:	4603      	mov	r3, r0
 8002490:	8023      	strh	r3, [r4, #0]
 8002492:	e01d      	b.n	80024d0 <get_FC1+0x94>
        }
        else
        {

        	modH->u16regs[i/2]= word(highByte(modH->u16regs[i/2]), modH->u8Buffer[i+u8byte]);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800249a:	7bfb      	ldrb	r3, [r7, #15]
 800249c:	085b      	lsrs	r3, r3, #1
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	005b      	lsls	r3, r3, #1
 80024a2:	4413      	add	r3, r2
 80024a4:	881b      	ldrh	r3, [r3, #0]
 80024a6:	0a1b      	lsrs	r3, r3, #8
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	b2d8      	uxtb	r0, r3
 80024ac:	7bfa      	ldrb	r2, [r7, #15]
 80024ae:	7bbb      	ldrb	r3, [r7, #14]
 80024b0:	4413      	add	r3, r2
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	4413      	add	r3, r2
 80024b6:	7cd9      	ldrb	r1, [r3, #19]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80024be:	7bfb      	ldrb	r3, [r7, #15]
 80024c0:	085b      	lsrs	r3, r3, #1
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	18d4      	adds	r4, r2, r3
 80024c8:	f000 fa40 	bl	800294c <word>
 80024cc:	4603      	mov	r3, r0
 80024ce:	8023      	strh	r3, [r4, #0]
     for (i=0; i< modH->u8Buffer[2]; i++) {
 80024d0:	7bfb      	ldrb	r3, [r7, #15]
 80024d2:	3301      	adds	r3, #1
 80024d4:	73fb      	strb	r3, [r7, #15]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	7d5b      	ldrb	r3, [r3, #21]
 80024da:	7bfa      	ldrb	r2, [r7, #15]
 80024dc:	429a      	cmp	r2, r3
 80024de:	d3b6      	bcc.n	800244e <get_FC1+0x12>
        }

     }
}
 80024e0:	bf00      	nop
 80024e2:	bf00      	nop
 80024e4:	3714      	adds	r7, #20
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd90      	pop	{r4, r7, pc}

080024ea <get_FC3>:
 * This method puts the slave answer into master data buffer
 *
 * @ingroup register
 */
void get_FC3(modbusHandler_t *modH)
{
 80024ea:	b590      	push	{r4, r7, lr}
 80024ec:	b085      	sub	sp, #20
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	6078      	str	r0, [r7, #4]
    uint8_t u8byte, i;
    u8byte = 3;
 80024f2:	2303      	movs	r3, #3
 80024f4:	73fb      	strb	r3, [r7, #15]

    for (i=0; i< modH->u8Buffer[ 2 ] /2; i++)
 80024f6:	2300      	movs	r3, #0
 80024f8:	73bb      	strb	r3, [r7, #14]
 80024fa:	e018      	b.n	800252e <get_FC3+0x44>
    {
    	modH->u16regs[ i ] = word(modH->u8Buffer[ u8byte ], modH->u8Buffer[ u8byte +1 ]);
 80024fc:	7bfb      	ldrb	r3, [r7, #15]
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	4413      	add	r3, r2
 8002502:	7cd8      	ldrb	r0, [r3, #19]
 8002504:	7bfb      	ldrb	r3, [r7, #15]
 8002506:	3301      	adds	r3, #1
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	4413      	add	r3, r2
 800250c:	7cd9      	ldrb	r1, [r3, #19]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8002514:	7bbb      	ldrb	r3, [r7, #14]
 8002516:	005b      	lsls	r3, r3, #1
 8002518:	18d4      	adds	r4, r2, r3
 800251a:	f000 fa17 	bl	800294c <word>
 800251e:	4603      	mov	r3, r0
 8002520:	8023      	strh	r3, [r4, #0]
        u8byte += 2;
 8002522:	7bfb      	ldrb	r3, [r7, #15]
 8002524:	3302      	adds	r3, #2
 8002526:	73fb      	strb	r3, [r7, #15]
    for (i=0; i< modH->u8Buffer[ 2 ] /2; i++)
 8002528:	7bbb      	ldrb	r3, [r7, #14]
 800252a:	3301      	adds	r3, #1
 800252c:	73bb      	strb	r3, [r7, #14]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	7d5b      	ldrb	r3, [r3, #21]
 8002532:	085b      	lsrs	r3, r3, #1
 8002534:	b2db      	uxtb	r3, r3
 8002536:	7bba      	ldrb	r2, [r7, #14]
 8002538:	429a      	cmp	r2, r3
 800253a:	d3df      	bcc.n	80024fc <get_FC3+0x12>
    }
}
 800253c:	bf00      	nop
 800253e:	bf00      	nop
 8002540:	3714      	adds	r7, #20
 8002542:	46bd      	mov	sp, r7
 8002544:	bd90      	pop	{r4, r7, pc}
	...

08002548 <validateAnswer>:
 *
 * @return 0 if OK, EXCEPTION if anything fails
 * @ingroup buffer
 */
uint8_t validateAnswer(modbusHandler_t *modH)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
#if ENABLE_TCP ==1
	if(modH->xTypeHW != TCP_HW)
	{
#endif
	uint16_t u16MsgCRC =
        ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002556:	3b02      	subs	r3, #2
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	4413      	add	r3, r2
 800255c:	7cdb      	ldrb	r3, [r3, #19]
 800255e:	021b      	lsls	r3, r3, #8
         | modH->u8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 8002560:	b21a      	sxth	r2, r3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002568:	3b01      	subs	r3, #1
 800256a:	6879      	ldr	r1, [r7, #4]
 800256c:	440b      	add	r3, r1
 800256e:	7cdb      	ldrb	r3, [r3, #19]
 8002570:	b21b      	sxth	r3, r3
 8002572:	4313      	orrs	r3, r2
 8002574:	b21b      	sxth	r3, r3
	uint16_t u16MsgCRC =
 8002576:	81bb      	strh	r3, [r7, #12]
    if ( calcCRC(modH->u8Buffer,  modH->u8BufferSize-2) != u16MsgCRC )
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f103 0213 	add.w	r2, r3, #19
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002584:	3b02      	subs	r3, #2
 8002586:	b2db      	uxtb	r3, r3
 8002588:	4619      	mov	r1, r3
 800258a:	4610      	mov	r0, r2
 800258c:	f000 f9f1 	bl	8002972 <calcCRC>
 8002590:	4603      	mov	r3, r0
 8002592:	461a      	mov	r2, r3
 8002594:	89bb      	ldrh	r3, [r7, #12]
 8002596:	4293      	cmp	r3, r2
 8002598:	d009      	beq.n	80025ae <validateAnswer+0x66>
    {
    	modH->u16errCnt ++;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 80025a0:	3301      	adds	r3, #1
 80025a2:	b29a      	uxth	r2, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
        return ERR_BAD_CRC;
 80025aa:	23fc      	movs	r3, #252	; 0xfc
 80025ac:	e034      	b.n	8002618 <validateAnswer+0xd0>
	}
#endif


    // check exception
    if ((modH->u8Buffer[ FUNC ] & 0x80) != 0)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	7d1b      	ldrb	r3, [r3, #20]
 80025b2:	b25b      	sxtb	r3, r3
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	da09      	bge.n	80025cc <validateAnswer+0x84>
    {
    	modH->u16errCnt ++;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 80025be:	3301      	adds	r3, #1
 80025c0:	b29a      	uxth	r2, r3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
        return ERR_EXCEPTION;
 80025c8:	23fb      	movs	r3, #251	; 0xfb
 80025ca:	e025      	b.n	8002618 <validateAnswer+0xd0>
    }

    // check fct code
    bool isSupported = false;
 80025cc:	2300      	movs	r3, #0
 80025ce:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 80025d0:	2300      	movs	r3, #0
 80025d2:	73bb      	strb	r3, [r7, #14]
 80025d4:	e00c      	b.n	80025f0 <validateAnswer+0xa8>
    {
        if (fctsupported[i] == modH->u8Buffer[FUNC])
 80025d6:	7bbb      	ldrb	r3, [r7, #14]
 80025d8:	4a11      	ldr	r2, [pc, #68]	; (8002620 <validateAnswer+0xd8>)
 80025da:	5cd2      	ldrb	r2, [r2, r3]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	7d1b      	ldrb	r3, [r3, #20]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d102      	bne.n	80025ea <validateAnswer+0xa2>
        {
            isSupported = 1;
 80025e4:	2301      	movs	r3, #1
 80025e6:	73fb      	strb	r3, [r7, #15]
            break;
 80025e8:	e005      	b.n	80025f6 <validateAnswer+0xae>
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 80025ea:	7bbb      	ldrb	r3, [r7, #14]
 80025ec:	3301      	adds	r3, #1
 80025ee:	73bb      	strb	r3, [r7, #14]
 80025f0:	7bbb      	ldrb	r3, [r7, #14]
 80025f2:	2b07      	cmp	r3, #7
 80025f4:	d9ef      	bls.n	80025d6 <validateAnswer+0x8e>
        }
    }
    if (!isSupported)
 80025f6:	7bfb      	ldrb	r3, [r7, #15]
 80025f8:	f083 0301 	eor.w	r3, r3, #1
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d009      	beq.n	8002616 <validateAnswer+0xce>
    {
    	modH->u16errCnt ++;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8002608:	3301      	adds	r3, #1
 800260a:	b29a      	uxth	r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
        return EXC_FUNC_CODE;
 8002612:	2301      	movs	r3, #1
 8002614:	e000      	b.n	8002618 <validateAnswer+0xd0>
    }

    return 0; // OK, no exception code thrown
 8002616:	2300      	movs	r3, #0
}
 8002618:	4618      	mov	r0, r3
 800261a:	3710      	adds	r7, #16
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	080225f8 	.word	0x080225f8

08002624 <getRxBuffer>:
 *
 * @return buffer size if OK, ERR_BUFF_OVERFLOW if u8BufferSize >= MAX_BUFFER
 * @ingroup buffer
 */
int16_t getRxBuffer(modbusHandler_t *modH)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]

    int16_t i16result;

    if(modH->xTypeHW == USART_HW)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8002632:	2b01      	cmp	r3, #1
 8002634:	d104      	bne.n	8002640 <getRxBuffer+0x1c>
    {
    	HAL_UART_AbortReceive_IT(modH->port); // disable interrupts to avoid race conditions on serial port
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	4618      	mov	r0, r3
 800263c:	f007 ff08 	bl	800a450 <HAL_UART_AbortReceive_IT>
    }

	if (modH->xBufferRX.overflow)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 8002646:	2b00      	cmp	r3, #0
 8002648:	d008      	beq.n	800265c <getRxBuffer+0x38>
    {
       	RingClear(&modH->xBufferRX); // clean up the overflowed buffer
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	33bc      	adds	r3, #188	; 0xbc
 800264e:	4618      	mov	r0, r3
 8002650:	f7ff f9ef 	bl	8001a32 <RingClear>
       	i16result =  ERR_BUFF_OVERFLOW;
 8002654:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 8002658:	81fb      	strh	r3, [r7, #14]
 800265a:	e019      	b.n	8002690 <getRxBuffer+0x6c>
    }
	else
	{
		modH->u8BufferSize = RingGetAllBytes(&modH->xBufferRX, modH->u8Buffer);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f103 02bc 	add.w	r2, r3, #188	; 0xbc
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	3313      	adds	r3, #19
 8002666:	4619      	mov	r1, r3
 8002668:	4610      	mov	r0, r2
 800266a:	f7ff f97c 	bl	8001966 <RingGetAllBytes>
 800266e:	4603      	mov	r3, r0
 8002670:	461a      	mov	r2, r3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
		modH->u16InCnt++;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800267e:	3301      	adds	r3, #1
 8002680:	b29a      	uxth	r2, r3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
		i16result = modH->u8BufferSize;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800268e:	81fb      	strh	r3, [r7, #14]
	}

	if(modH->xTypeHW == USART_HW)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8002696:	2b01      	cmp	r3, #1
 8002698:	d107      	bne.n	80026aa <getRxBuffer+0x86>
	{
		HAL_UART_Receive_IT(modH->port, &modH->dataRX, 1);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6858      	ldr	r0, [r3, #4]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	33a6      	adds	r3, #166	; 0xa6
 80026a2:	2201      	movs	r2, #1
 80026a4:	4619      	mov	r1, r3
 80026a6:	f007 fd41 	bl	800a12c <HAL_UART_Receive_IT>
	}

    return i16result;
 80026aa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3710      	adds	r7, #16
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
	...

080026b8 <validateRequest>:
 *
 * @return 0 if OK, EXCEPTION if anything fails
 * @ingroup modH Modbus handler
 */
uint8_t validateRequest(modbusHandler_t *modH)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
	    		return ERR_BAD_CRC;
	    		}
	    }
#else
	    uint16_t u16MsgCRC;
	    u16MsgCRC= ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80026c6:	3b02      	subs	r3, #2
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	4413      	add	r3, r2
 80026cc:	7cdb      	ldrb	r3, [r3, #19]
 80026ce:	021b      	lsls	r3, r3, #8
	    		   	         | modH->u8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 80026d0:	b21a      	sxth	r2, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80026d8:	3b01      	subs	r3, #1
 80026da:	6879      	ldr	r1, [r7, #4]
 80026dc:	440b      	add	r3, r1
 80026de:	7cdb      	ldrb	r3, [r3, #19]
 80026e0:	b21b      	sxth	r3, r3
 80026e2:	4313      	orrs	r3, r2
 80026e4:	b21b      	sxth	r3, r3
	    u16MsgCRC= ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 80026e6:	813b      	strh	r3, [r7, #8]


	    if ( calcCRC( modH->u8Buffer,  modH->u8BufferSize-2 ) != u16MsgCRC )
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f103 0213 	add.w	r2, r3, #19
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80026f4:	3b02      	subs	r3, #2
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	4619      	mov	r1, r3
 80026fa:	4610      	mov	r0, r2
 80026fc:	f000 f939 	bl	8002972 <calcCRC>
 8002700:	4603      	mov	r3, r0
 8002702:	461a      	mov	r2, r3
 8002704:	893b      	ldrh	r3, [r7, #8]
 8002706:	4293      	cmp	r3, r2
 8002708:	d009      	beq.n	800271e <validateRequest+0x66>
	    {
	       		modH->u16errCnt ++;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8002710:	3301      	adds	r3, #1
 8002712:	b29a      	uxth	r2, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
	       		return ERR_BAD_CRC;
 800271a:	23fc      	movs	r3, #252	; 0xfc
 800271c:	e10f      	b.n	800293e <validateRequest+0x286>


#endif

	    // check fct code
	    bool isSupported = false;
 800271e:	2300      	movs	r3, #0
 8002720:	73fb      	strb	r3, [r7, #15]
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 8002722:	2300      	movs	r3, #0
 8002724:	73bb      	strb	r3, [r7, #14]
 8002726:	e00c      	b.n	8002742 <validateRequest+0x8a>
	    {
	        if (fctsupported[i] == modH->u8Buffer[FUNC])
 8002728:	7bbb      	ldrb	r3, [r7, #14]
 800272a:	4a87      	ldr	r2, [pc, #540]	; (8002948 <validateRequest+0x290>)
 800272c:	5cd2      	ldrb	r2, [r2, r3]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	7d1b      	ldrb	r3, [r3, #20]
 8002732:	429a      	cmp	r2, r3
 8002734:	d102      	bne.n	800273c <validateRequest+0x84>
	        {
	            isSupported = 1;
 8002736:	2301      	movs	r3, #1
 8002738:	73fb      	strb	r3, [r7, #15]
	            break;
 800273a:	e005      	b.n	8002748 <validateRequest+0x90>
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 800273c:	7bbb      	ldrb	r3, [r7, #14]
 800273e:	3301      	adds	r3, #1
 8002740:	73bb      	strb	r3, [r7, #14]
 8002742:	7bbb      	ldrb	r3, [r7, #14]
 8002744:	2b07      	cmp	r3, #7
 8002746:	d9ef      	bls.n	8002728 <validateRequest+0x70>
	        }
	    }
	    if (!isSupported)
 8002748:	7bfb      	ldrb	r3, [r7, #15]
 800274a:	f083 0301 	eor.w	r3, r3, #1
 800274e:	b2db      	uxtb	r3, r3
 8002750:	2b00      	cmp	r3, #0
 8002752:	d009      	beq.n	8002768 <validateRequest+0xb0>
	    {
	    	modH->u16errCnt ++;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 800275a:	3301      	adds	r3, #1
 800275c:	b29a      	uxth	r2, r3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
	        return EXC_FUNC_CODE;
 8002764:	2301      	movs	r3, #1
 8002766:	e0ea      	b.n	800293e <validateRequest+0x286>
	    }

	    // check start address & nb range
	    uint16_t u16AdRegs = 0;
 8002768:	2300      	movs	r3, #0
 800276a:	81bb      	strh	r3, [r7, #12]
	    uint16_t u16NRegs = 0;
 800276c:	2300      	movs	r3, #0
 800276e:	817b      	strh	r3, [r7, #10]

	    //uint8_t u8regs;
	    switch ( modH->u8Buffer[ FUNC ] )
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	7d1b      	ldrb	r3, [r3, #20]
 8002774:	3b01      	subs	r3, #1
 8002776:	2b0f      	cmp	r3, #15
 8002778:	f200 80e0 	bhi.w	800293c <validateRequest+0x284>
 800277c:	a201      	add	r2, pc, #4	; (adr r2, 8002784 <validateRequest+0xcc>)
 800277e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002782:	bf00      	nop
 8002784:	080027c5 	.word	0x080027c5
 8002788:	080027c5 	.word	0x080027c5
 800278c:	080028dd 	.word	0x080028dd
 8002790:	080028dd 	.word	0x080028dd
 8002794:	08002871 	.word	0x08002871
 8002798:	080028b9 	.word	0x080028b9
 800279c:	0800293d 	.word	0x0800293d
 80027a0:	0800293d 	.word	0x0800293d
 80027a4:	0800293d 	.word	0x0800293d
 80027a8:	0800293d 	.word	0x0800293d
 80027ac:	0800293d 	.word	0x0800293d
 80027b0:	0800293d 	.word	0x0800293d
 80027b4:	0800293d 	.word	0x0800293d
 80027b8:	0800293d 	.word	0x0800293d
 80027bc:	080027c5 	.word	0x080027c5
 80027c0:	080028dd 	.word	0x080028dd
	    {
	    case MB_FC_READ_COILS:
	    case MB_FC_READ_DISCRETE_INPUT:
	    case MB_FC_WRITE_MULTIPLE_COILS:
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) / 16;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	7d5a      	ldrb	r2, [r3, #21]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	7d9b      	ldrb	r3, [r3, #22]
 80027cc:	4619      	mov	r1, r3
 80027ce:	4610      	mov	r0, r2
 80027d0:	f000 f8bc 	bl	800294c <word>
 80027d4:	4603      	mov	r3, r0
 80027d6:	091b      	lsrs	r3, r3, #4
 80027d8:	81bb      	strh	r3, [r7, #12]
	    	u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) /16;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	7dda      	ldrb	r2, [r3, #23]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	7e1b      	ldrb	r3, [r3, #24]
 80027e2:	4619      	mov	r1, r3
 80027e4:	4610      	mov	r0, r2
 80027e6:	f000 f8b1 	bl	800294c <word>
 80027ea:	4603      	mov	r3, r0
 80027ec:	091b      	lsrs	r3, r3, #4
 80027ee:	817b      	strh	r3, [r7, #10]
	    	if(word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) % 16) u16NRegs++; // check for incomplete words
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	7dda      	ldrb	r2, [r3, #23]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	7e1b      	ldrb	r3, [r3, #24]
 80027f8:	4619      	mov	r1, r3
 80027fa:	4610      	mov	r0, r2
 80027fc:	f000 f8a6 	bl	800294c <word>
 8002800:	4603      	mov	r3, r0
 8002802:	f003 030f 	and.w	r3, r3, #15
 8002806:	b29b      	uxth	r3, r3
 8002808:	2b00      	cmp	r3, #0
 800280a:	d002      	beq.n	8002812 <validateRequest+0x15a>
 800280c:	897b      	ldrh	r3, [r7, #10]
 800280e:	3301      	adds	r3, #1
 8002810:	817b      	strh	r3, [r7, #10]
	    	// verify address range
	    	if((u16AdRegs + u16NRegs) > modH->u16regsize) return EXC_ADDR_RANGE;
 8002812:	89ba      	ldrh	r2, [r7, #12]
 8002814:	897b      	ldrh	r3, [r7, #10]
 8002816:	4413      	add	r3, r2
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	f8b2 20a4 	ldrh.w	r2, [r2, #164]	; 0xa4
 800281e:	4293      	cmp	r3, r2
 8002820:	dd01      	ble.n	8002826 <validateRequest+0x16e>
 8002822:	2302      	movs	r3, #2
 8002824:	e08b      	b.n	800293e <validateRequest+0x286>

	    	//verify answer frame size in bytes

	    	u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) / 8;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	7dda      	ldrb	r2, [r3, #23]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	7e1b      	ldrb	r3, [r3, #24]
 800282e:	4619      	mov	r1, r3
 8002830:	4610      	mov	r0, r2
 8002832:	f000 f88b 	bl	800294c <word>
 8002836:	4603      	mov	r3, r0
 8002838:	08db      	lsrs	r3, r3, #3
 800283a:	817b      	strh	r3, [r7, #10]
	    	if(word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) % 8) u16NRegs++;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	7dda      	ldrb	r2, [r3, #23]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	7e1b      	ldrb	r3, [r3, #24]
 8002844:	4619      	mov	r1, r3
 8002846:	4610      	mov	r0, r2
 8002848:	f000 f880 	bl	800294c <word>
 800284c:	4603      	mov	r3, r0
 800284e:	f003 0307 	and.w	r3, r3, #7
 8002852:	b29b      	uxth	r3, r3
 8002854:	2b00      	cmp	r3, #0
 8002856:	d002      	beq.n	800285e <validateRequest+0x1a6>
 8002858:	897b      	ldrh	r3, [r7, #10]
 800285a:	3301      	adds	r3, #1
 800285c:	817b      	strh	r3, [r7, #10]
	    	u16NRegs = u16NRegs + 5; // adding the header  and CRC ( Slave address + Function code  + number of data bytes to follow + 2-byte CRC )
 800285e:	897b      	ldrh	r3, [r7, #10]
 8002860:	3305      	adds	r3, #5
 8002862:	817b      	strh	r3, [r7, #10]
	        if(u16NRegs > 256) return EXC_REGS_QUANT;
 8002864:	897b      	ldrh	r3, [r7, #10]
 8002866:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800286a:	d960      	bls.n	800292e <validateRequest+0x276>
 800286c:	2303      	movs	r3, #3
 800286e:	e066      	b.n	800293e <validateRequest+0x286>

	        break;
	    case MB_FC_WRITE_COIL:
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) / 16;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	7d5a      	ldrb	r2, [r3, #21]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	7d9b      	ldrb	r3, [r3, #22]
 8002878:	4619      	mov	r1, r3
 800287a:	4610      	mov	r0, r2
 800287c:	f000 f866 	bl	800294c <word>
 8002880:	4603      	mov	r3, r0
 8002882:	091b      	lsrs	r3, r3, #4
 8002884:	81bb      	strh	r3, [r7, #12]
	    	if(word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) % 16) u16AdRegs++;	// check for incomplete words
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	7d5a      	ldrb	r2, [r3, #21]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	7d9b      	ldrb	r3, [r3, #22]
 800288e:	4619      	mov	r1, r3
 8002890:	4610      	mov	r0, r2
 8002892:	f000 f85b 	bl	800294c <word>
 8002896:	4603      	mov	r3, r0
 8002898:	f003 030f 	and.w	r3, r3, #15
 800289c:	b29b      	uxth	r3, r3
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d002      	beq.n	80028a8 <validateRequest+0x1f0>
 80028a2:	89bb      	ldrh	r3, [r7, #12]
 80028a4:	3301      	adds	r3, #1
 80028a6:	81bb      	strh	r3, [r7, #12]
	        if (u16AdRegs > modH->u16regsize) return EXC_ADDR_RANGE;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 80028ae:	89ba      	ldrh	r2, [r7, #12]
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d93e      	bls.n	8002932 <validateRequest+0x27a>
 80028b4:	2302      	movs	r3, #2
 80028b6:	e042      	b.n	800293e <validateRequest+0x286>
	        break;
	    case MB_FC_WRITE_REGISTER :
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	7d5a      	ldrb	r2, [r3, #21]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	7d9b      	ldrb	r3, [r3, #22]
 80028c0:	4619      	mov	r1, r3
 80028c2:	4610      	mov	r0, r2
 80028c4:	f000 f842 	bl	800294c <word>
 80028c8:	4603      	mov	r3, r0
 80028ca:	81bb      	strh	r3, [r7, #12]
	        if (u16AdRegs > modH-> u16regsize) return EXC_ADDR_RANGE;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 80028d2:	89ba      	ldrh	r2, [r7, #12]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d92e      	bls.n	8002936 <validateRequest+0x27e>
 80028d8:	2302      	movs	r3, #2
 80028da:	e030      	b.n	800293e <validateRequest+0x286>
	        break;
	    case MB_FC_READ_REGISTERS :
	    case MB_FC_READ_INPUT_REGISTER :
	    case MB_FC_WRITE_MULTIPLE_REGISTERS :
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	7d5a      	ldrb	r2, [r3, #21]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	7d9b      	ldrb	r3, [r3, #22]
 80028e4:	4619      	mov	r1, r3
 80028e6:	4610      	mov	r0, r2
 80028e8:	f000 f830 	bl	800294c <word>
 80028ec:	4603      	mov	r3, r0
 80028ee:	81bb      	strh	r3, [r7, #12]
	        u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	7dda      	ldrb	r2, [r3, #23]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	7e1b      	ldrb	r3, [r3, #24]
 80028f8:	4619      	mov	r1, r3
 80028fa:	4610      	mov	r0, r2
 80028fc:	f000 f826 	bl	800294c <word>
 8002900:	4603      	mov	r3, r0
 8002902:	817b      	strh	r3, [r7, #10]
	        if (( u16AdRegs + u16NRegs ) > modH->u16regsize) return EXC_ADDR_RANGE;
 8002904:	89ba      	ldrh	r2, [r7, #12]
 8002906:	897b      	ldrh	r3, [r7, #10]
 8002908:	4413      	add	r3, r2
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	f8b2 20a4 	ldrh.w	r2, [r2, #164]	; 0xa4
 8002910:	4293      	cmp	r3, r2
 8002912:	dd01      	ble.n	8002918 <validateRequest+0x260>
 8002914:	2302      	movs	r3, #2
 8002916:	e012      	b.n	800293e <validateRequest+0x286>

	        //verify answer frame size in bytes
	        u16NRegs = u16NRegs*2 + 5; // adding the header  and CRC
 8002918:	897b      	ldrh	r3, [r7, #10]
 800291a:	005b      	lsls	r3, r3, #1
 800291c:	b29b      	uxth	r3, r3
 800291e:	3305      	adds	r3, #5
 8002920:	817b      	strh	r3, [r7, #10]
	        if ( u16NRegs > 256 ) return EXC_REGS_QUANT;
 8002922:	897b      	ldrh	r3, [r7, #10]
 8002924:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002928:	d907      	bls.n	800293a <validateRequest+0x282>
 800292a:	2303      	movs	r3, #3
 800292c:	e007      	b.n	800293e <validateRequest+0x286>
	        break;
 800292e:	bf00      	nop
 8002930:	e004      	b.n	800293c <validateRequest+0x284>
	        break;
 8002932:	bf00      	nop
 8002934:	e002      	b.n	800293c <validateRequest+0x284>
	        break;
 8002936:	bf00      	nop
 8002938:	e000      	b.n	800293c <validateRequest+0x284>
	        break;
 800293a:	bf00      	nop
	    }
	    return 0; // OK, no exception code thrown
 800293c:	2300      	movs	r3, #0

}
 800293e:	4618      	mov	r0, r3
 8002940:	3710      	adds	r7, #16
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	080225f8 	.word	0x080225f8

0800294c <word>:
 * @return uint16_t (word)
 * @ingroup H  Most significant byte
 * @ingroup L  Less significant byte
 */
uint16_t word(uint8_t H, uint8_t L)
{
 800294c:	b480      	push	{r7}
 800294e:	b085      	sub	sp, #20
 8002950:	af00      	add	r7, sp, #0
 8002952:	4603      	mov	r3, r0
 8002954:	460a      	mov	r2, r1
 8002956:	71fb      	strb	r3, [r7, #7]
 8002958:	4613      	mov	r3, r2
 800295a:	71bb      	strb	r3, [r7, #6]
	bytesFields W;
	W.u8[0] = L;
 800295c:	79bb      	ldrb	r3, [r7, #6]
 800295e:	733b      	strb	r3, [r7, #12]
	W.u8[1] = H;
 8002960:	79fb      	ldrb	r3, [r7, #7]
 8002962:	737b      	strb	r3, [r7, #13]

	return W.u16[0];
 8002964:	89bb      	ldrh	r3, [r7, #12]
}
 8002966:	4618      	mov	r0, r3
 8002968:	3714      	adds	r7, #20
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr

08002972 <calcCRC>:
 * @return uint16_t calculated CRC value for the message
 * @ingroup Buffer
 * @ingroup u8length
 */
uint16_t calcCRC(uint8_t *Buffer, uint8_t u8length)
{
 8002972:	b480      	push	{r7}
 8002974:	b087      	sub	sp, #28
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
 800297a:	460b      	mov	r3, r1
 800297c:	70fb      	strb	r3, [r7, #3]
    unsigned int temp, temp2, flag;
    temp = 0xFFFF;
 800297e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002982:	617b      	str	r3, [r7, #20]
    for (unsigned char i = 0; i < u8length; i++)
 8002984:	2300      	movs	r3, #0
 8002986:	74fb      	strb	r3, [r7, #19]
 8002988:	e023      	b.n	80029d2 <calcCRC+0x60>
    {
        temp = temp ^ Buffer[i];
 800298a:	7cfb      	ldrb	r3, [r7, #19]
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	4413      	add	r3, r2
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	461a      	mov	r2, r3
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	4053      	eors	r3, r2
 8002998:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 800299a:	2301      	movs	r3, #1
 800299c:	74bb      	strb	r3, [r7, #18]
 800299e:	e012      	b.n	80029c6 <calcCRC+0x54>
        {
            flag = temp & 0x0001;
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	f003 0301 	and.w	r3, r3, #1
 80029a6:	60bb      	str	r3, [r7, #8]
            temp >>=1;
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	085b      	lsrs	r3, r3, #1
 80029ac:	617b      	str	r3, [r7, #20]
            if (flag)
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d005      	beq.n	80029c0 <calcCRC+0x4e>
                temp ^= 0xA001;
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	f483 4320 	eor.w	r3, r3, #40960	; 0xa000
 80029ba:	f083 0301 	eor.w	r3, r3, #1
 80029be:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 80029c0:	7cbb      	ldrb	r3, [r7, #18]
 80029c2:	3301      	adds	r3, #1
 80029c4:	74bb      	strb	r3, [r7, #18]
 80029c6:	7cbb      	ldrb	r3, [r7, #18]
 80029c8:	2b08      	cmp	r3, #8
 80029ca:	d9e9      	bls.n	80029a0 <calcCRC+0x2e>
    for (unsigned char i = 0; i < u8length; i++)
 80029cc:	7cfb      	ldrb	r3, [r7, #19]
 80029ce:	3301      	adds	r3, #1
 80029d0:	74fb      	strb	r3, [r7, #19]
 80029d2:	7cfa      	ldrb	r2, [r7, #19]
 80029d4:	78fb      	ldrb	r3, [r7, #3]
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d3d7      	bcc.n	800298a <calcCRC+0x18>
        }
    }
    // Reverse byte order.
    temp2 = temp >> 8;
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	0a1b      	lsrs	r3, r3, #8
 80029de:	60fb      	str	r3, [r7, #12]
    temp = (temp << 8) | temp2;
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	021b      	lsls	r3, r3, #8
 80029e4:	68fa      	ldr	r2, [r7, #12]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	617b      	str	r3, [r7, #20]
    temp &= 0xFFFF;
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	617b      	str	r3, [r7, #20]
    // the returned value is already swapped
    // crcLo byte is first & crcHi byte is last
    return temp;
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	b29b      	uxth	r3, r3

}
 80029f4:	4618      	mov	r0, r3
 80029f6:	371c      	adds	r7, #28
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <buildException>:
 *
 * @ingroup u8exception exception number
 * @ingroup modH modbus handler
 */
void buildException( uint8_t u8exception, modbusHandler_t *modH )
{
 8002a00:	b480      	push	{r7}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	4603      	mov	r3, r0
 8002a08:	6039      	str	r1, [r7, #0]
 8002a0a:	71fb      	strb	r3, [r7, #7]
    uint8_t u8func = modH->u8Buffer[ FUNC ];  // get the original FUNC code
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	7d1b      	ldrb	r3, [r3, #20]
 8002a10:	73fb      	strb	r3, [r7, #15]

    modH->u8Buffer[ ID ]      = modH->u8id;
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	7a1a      	ldrb	r2, [r3, #8]
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	74da      	strb	r2, [r3, #19]
    modH->u8Buffer[ FUNC ]    = u8func + 0x80;
 8002a1a:	7bfb      	ldrb	r3, [r7, #15]
 8002a1c:	3b80      	subs	r3, #128	; 0x80
 8002a1e:	b2da      	uxtb	r2, r3
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	751a      	strb	r2, [r3, #20]
    modH->u8Buffer[ 2 ]       = u8exception;
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	79fa      	ldrb	r2, [r7, #7]
 8002a28:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = EXCEPTION_SIZE;
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	2203      	movs	r2, #3
 8002a2e:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
}
 8002a32:	bf00      	nop
 8002a34:	3714      	adds	r7, #20
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr

08002a3e <sendTxBuffer>:
 *
 * @return nothing
 * @ingroup modH Modbus handler
 */
static void sendTxBuffer(modbusHandler_t *modH)
{
 8002a3e:	b590      	push	{r4, r7, lr}
 8002a40:	b087      	sub	sp, #28
 8002a42:	af02      	add	r7, sp, #8
 8002a44:	6078      	str	r0, [r7, #4]
#if  ENABLE_TCP == 1
if(modH->xTypeHW != TCP_HW)
	 {
#endif

	uint16_t u16crc = calcCRC(modH->u8Buffer, modH->u8BufferSize);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f103 0213 	add.w	r2, r3, #19
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002a52:	4619      	mov	r1, r3
 8002a54:	4610      	mov	r0, r2
 8002a56:	f7ff ff8c 	bl	8002972 <calcCRC>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	81fb      	strh	r3, [r7, #14]
    modH->u8Buffer[ modH->u8BufferSize ] = u16crc >> 8;
 8002a5e:	89fb      	ldrh	r3, [r7, #14]
 8002a60:	0a1b      	lsrs	r3, r3, #8
 8002a62:	b29a      	uxth	r2, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	b2d2      	uxtb	r2, r2
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	440b      	add	r3, r1
 8002a72:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	b2da      	uxtb	r2, r3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    modH->u8Buffer[ modH->u8BufferSize ] = u16crc & 0x00ff;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	89fb      	ldrh	r3, [r7, #14]
 8002a8e:	b2da      	uxtb	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	440b      	add	r3, r1
 8002a94:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	b2da      	uxtb	r2, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
#if ENABLE_USB_CDC == 1 || ENABLE_TCP == 1
    if(modH->xTypeHW == USART_HW || modH->xTypeHW == USART_HW_DMA )
    {
#endif

    	if (modH->EN_Port != NULL)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d00c      	beq.n	8002ac8 <sendTxBuffer+0x8a>
        {
    		//enable transmitter, disable receiver to avoid echo on RS485 transceivers
    		HAL_HalfDuplex_EnableTransmitter(modH->port);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f008 f82a 	bl	800ab0c <HAL_HalfDuplex_EnableTransmitter>
    		HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_SET);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	68d8      	ldr	r0, [r3, #12]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	8a1b      	ldrh	r3, [r3, #16]
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	f005 f896 	bl	8007bf4 <HAL_GPIO_WritePin>
//    		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
        }

#if ENABLE_USART_DMA ==1
    	if(modH->xTypeHW == USART_HW)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d10c      	bne.n	8002aec <sendTxBuffer+0xae>
    	{
#endif
    		// transfer buffer to serial line IT
    		HAL_UART_Transmit_IT(modH->port, modH->u8Buffer,  modH->u8BufferSize);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6858      	ldr	r0, [r3, #4]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f103 0113 	add.w	r1, r3, #19
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	f007 fadc 	bl	800a0a2 <HAL_UART_Transmit_IT>
 8002aea:	e00b      	b.n	8002b04 <sendTxBuffer+0xc6>
#if ENABLE_USART_DMA ==1
    	}
        else
        {
        	//transfer buffer to serial line DMA
        	HAL_UART_Transmit_DMA(modH->port, modH->u8Buffer, modH->u8BufferSize);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6858      	ldr	r0, [r3, #4]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f103 0113 	add.w	r1, r3, #19
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	461a      	mov	r2, r3
 8002b00:	f007 fb44 	bl	800a18c <HAL_UART_Transmit_DMA>

        }
#endif
        ulTaskNotifyTake(pdTRUE, 250); //wait notification from TXE interrupt
 8002b04:	21fa      	movs	r1, #250	; 0xfa
 8002b06:	2001      	movs	r0, #1
 8002b08:	f00c f99c 	bl	800ee44 <ulTaskNotifyTake>
*/
#if defined(STM32H7)  || defined(STM32F3) || defined(STM32L4)  
          while((modH->port->Instance->ISR & USART_ISR_TC) ==0 )
#else
          // F429, F103, L152 ...
	  while((modH->port->Instance->SR & USART_SR_TC) ==0 )
 8002b0c:	bf00      	nop
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d0f7      	beq.n	8002b0e <sendTxBuffer+0xd0>
         {
 	        //block the task until the the last byte is send out of the shifting buffer in USART
         }


         if (modH->EN_Port != NULL)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d00c      	beq.n	8002b40 <sendTxBuffer+0x102>
         {

             //return RS485 transceiver to receive mode
        	 HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	68d8      	ldr	r0, [r3, #12]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	8a1b      	ldrh	r3, [r3, #16]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	4619      	mov	r1, r3
 8002b32:	f005 f85f 	bl	8007bf4 <HAL_GPIO_WritePin>
//        	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
        	 //enable receiver, disable transmitter
        	 HAL_HalfDuplex_EnableReceiver(modH->port);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f008 f81a 	bl	800ab74 <HAL_HalfDuplex_EnableReceiver>

         }

         // set timeout for master query
         if(modH->uModbusType == MB_MASTER )
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	2b04      	cmp	r3, #4
 8002b46:	d10c      	bne.n	8002b62 <sendTxBuffer+0x124>
         {
        	 xTimerReset(modH->xTimerTimeout,0);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 8002b4e:	f00b fc97 	bl	800e480 <xTaskGetTickCount>
 8002b52:	4602      	mov	r2, r0
 8002b54:	2300      	movs	r3, #0
 8002b56:	9300      	str	r3, [sp, #0]
 8002b58:	2300      	movs	r3, #0
 8002b5a:	2102      	movs	r1, #2
 8002b5c:	4620      	mov	r0, r4
 8002b5e:	f00c fc45 	bl	800f3ec <xTimerGenericCommand>

#endif

#endif

     modH->u8BufferSize = 0;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
     // increase message counter
     modH->u16OutCnt++;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 8002b70:	3301      	adds	r3, #1
 8002b72:	b29a      	uxth	r2, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e


}
 8002b7a:	bf00      	nop
 8002b7c:	3714      	adds	r7, #20
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd90      	pop	{r4, r7, pc}

08002b82 <process_FC1>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC1(modbusHandler_t *modH )
{
 8002b82:	b580      	push	{r7, lr}
 8002b84:	b086      	sub	sp, #24
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
    uint8_t u8currentBit, u8bytesno, u8bitsno;
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	7d5a      	ldrb	r2, [r3, #21]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	7d9b      	ldrb	r3, [r3, #22]
 8002b92:	4619      	mov	r1, r3
 8002b94:	4610      	mov	r0, r2
 8002b96:	f7ff fed9 	bl	800294c <word>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	827b      	strh	r3, [r7, #18]
    uint16_t u16Coilno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	7dda      	ldrb	r2, [r3, #23]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	7e1b      	ldrb	r3, [r3, #24]
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	4610      	mov	r0, r2
 8002baa:	f7ff fecf 	bl	800294c <word>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	823b      	strh	r3, [r7, #16]

    // put the number of bytes in the outcoming message
    u8bytesno = (uint8_t) (u16Coilno / 8);
 8002bb2:	8a3b      	ldrh	r3, [r7, #16]
 8002bb4:	08db      	lsrs	r3, r3, #3
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	75fb      	strb	r3, [r7, #23]
    if (u16Coilno % 8 != 0) u8bytesno ++;
 8002bba:	8a3b      	ldrh	r3, [r7, #16]
 8002bbc:	f003 0307 	and.w	r3, r3, #7
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d002      	beq.n	8002bcc <process_FC1+0x4a>
 8002bc6:	7dfb      	ldrb	r3, [r7, #23]
 8002bc8:	3301      	adds	r3, #1
 8002bca:	75fb      	strb	r3, [r7, #23]
    modH->u8Buffer[ ADD_HI ]  = u8bytesno;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	7dfa      	ldrb	r2, [r7, #23]
 8002bd0:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = ADD_LO;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2203      	movs	r2, #3
 8002bd6:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    modH->u8Buffer[modH->u8BufferSize + u8bytesno - 1 ] = 0;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002be0:	461a      	mov	r2, r3
 8002be2:	7dfb      	ldrb	r3, [r7, #23]
 8002be4:	4413      	add	r3, r2
 8002be6:	3b01      	subs	r3, #1
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	4413      	add	r3, r2
 8002bec:	2200      	movs	r2, #0
 8002bee:	74da      	strb	r2, [r3, #19]

    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	75bb      	strb	r3, [r7, #22]

    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	82bb      	strh	r3, [r7, #20]
 8002bf8:	e058      	b.n	8002cac <process_FC1+0x12a>
    {
        u16coil = u16StartCoil + u16currentCoil;
 8002bfa:	8a7a      	ldrh	r2, [r7, #18]
 8002bfc:	8abb      	ldrh	r3, [r7, #20]
 8002bfe:	4413      	add	r3, r2
 8002c00:	81bb      	strh	r3, [r7, #12]
        u16currentRegister =  (u16coil / 16);
 8002c02:	89bb      	ldrh	r3, [r7, #12]
 8002c04:	091b      	lsrs	r3, r3, #4
 8002c06:	817b      	strh	r3, [r7, #10]
        u8currentBit = (uint8_t) (u16coil % 16);
 8002c08:	89bb      	ldrh	r3, [r7, #12]
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	f003 030f 	and.w	r3, r3, #15
 8002c10:	727b      	strb	r3, [r7, #9]

        bitWrite(
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8002c18:	897b      	ldrh	r3, [r7, #10]
 8002c1a:	005b      	lsls	r3, r3, #1
 8002c1c:	4413      	add	r3, r2
 8002c1e:	881b      	ldrh	r3, [r3, #0]
 8002c20:	461a      	mov	r2, r3
 8002c22:	7a7b      	ldrb	r3, [r7, #9]
 8002c24:	fa42 f303 	asr.w	r3, r2, r3
 8002c28:	f003 0301 	and.w	r3, r3, #1
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d014      	beq.n	8002c5a <process_FC1+0xd8>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002c36:	461a      	mov	r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	4413      	add	r3, r2
 8002c3c:	7cda      	ldrb	r2, [r3, #19]
 8002c3e:	7dbb      	ldrb	r3, [r7, #22]
 8002c40:	2101      	movs	r1, #1
 8002c42:	fa01 f303 	lsl.w	r3, r1, r3
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	6879      	ldr	r1, [r7, #4]
 8002c4a:	f891 1093 	ldrb.w	r1, [r1, #147]	; 0x93
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	b2da      	uxtb	r2, r3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	440b      	add	r3, r1
 8002c56:	74da      	strb	r2, [r3, #19]
 8002c58:	e015      	b.n	8002c86 <process_FC1+0x104>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002c60:	461a      	mov	r2, r3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4413      	add	r3, r2
 8002c66:	7cda      	ldrb	r2, [r3, #19]
 8002c68:	7dbb      	ldrb	r3, [r7, #22]
 8002c6a:	2101      	movs	r1, #1
 8002c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	43db      	mvns	r3, r3
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	6879      	ldr	r1, [r7, #4]
 8002c78:	f891 1093 	ldrb.w	r1, [r1, #147]	; 0x93
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	b2da      	uxtb	r2, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	440b      	add	r3, r1
 8002c84:	74da      	strb	r2, [r3, #19]
        	modH->u8Buffer[ modH->u8BufferSize ],
            u8bitsno,
		    bitRead( modH->u16regs[ u16currentRegister ], u8currentBit ) );
        u8bitsno ++;
 8002c86:	7dbb      	ldrb	r3, [r7, #22]
 8002c88:	3301      	adds	r3, #1
 8002c8a:	75bb      	strb	r3, [r7, #22]

        if (u8bitsno > 7)
 8002c8c:	7dbb      	ldrb	r3, [r7, #22]
 8002c8e:	2b07      	cmp	r3, #7
 8002c90:	d909      	bls.n	8002ca6 <process_FC1+0x124>
        {
            u8bitsno = 0;
 8002c92:	2300      	movs	r3, #0
 8002c94:	75bb      	strb	r3, [r7, #22]
            modH->u8BufferSize++;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	b2da      	uxtb	r2, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8002ca6:	8abb      	ldrh	r3, [r7, #20]
 8002ca8:	3301      	adds	r3, #1
 8002caa:	82bb      	strh	r3, [r7, #20]
 8002cac:	8aba      	ldrh	r2, [r7, #20]
 8002cae:	8a3b      	ldrh	r3, [r7, #16]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d3a2      	bcc.n	8002bfa <process_FC1+0x78>
        }
    }

    // send outcoming message
    if (u16Coilno % 8 != 0) modH->u8BufferSize ++;
 8002cb4:	8a3b      	ldrh	r3, [r7, #16]
 8002cb6:	f003 0307 	and.w	r3, r3, #7
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d007      	beq.n	8002cd0 <process_FC1+0x14e>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	b2da      	uxtb	r2, r3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize = modH->u8BufferSize +2;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002cd6:	3302      	adds	r3, #2
 8002cd8:	73fb      	strb	r3, [r7, #15]
    sendTxBuffer(modH);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f7ff feaf 	bl	8002a3e <sendTxBuffer>
    return u8CopyBufferSize;
 8002ce0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3718      	adds	r7, #24
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <process_FC3>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC3(modbusHandler_t *modH)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]

    uint16_t u16StartAdd = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	7d5a      	ldrb	r2, [r3, #21]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	7d9b      	ldrb	r3, [r3, #22]
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	4610      	mov	r0, r2
 8002d00:	f7ff fe24 	bl	800294c <word>
 8002d04:	4603      	mov	r3, r0
 8002d06:	81bb      	strh	r3, [r7, #12]
    uint8_t u8regsno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	7dda      	ldrb	r2, [r3, #23]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	7e1b      	ldrb	r3, [r3, #24]
 8002d10:	4619      	mov	r1, r3
 8002d12:	4610      	mov	r0, r2
 8002d14:	f7ff fe1a 	bl	800294c <word>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	72fb      	strb	r3, [r7, #11]
    uint8_t u8CopyBufferSize;
    uint16_t i;

    modH->u8Buffer[ 2 ]       = u8regsno * 2;
 8002d1c:	7afb      	ldrb	r3, [r7, #11]
 8002d1e:	005b      	lsls	r3, r3, #1
 8002d20:	b2da      	uxtb	r2, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = 3;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2203      	movs	r2, #3
 8002d2a:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

    for (i = u16StartAdd; i < u16StartAdd + u8regsno; i++)
 8002d2e:	89bb      	ldrh	r3, [r7, #12]
 8002d30:	81fb      	strh	r3, [r7, #14]
 8002d32:	e032      	b.n	8002d9a <process_FC3+0xae>
    {
    	modH->u8Buffer[ modH->u8BufferSize ] = highByte(modH->u16regs[i]);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8002d3a:	89fb      	ldrh	r3, [r7, #14]
 8002d3c:	005b      	lsls	r3, r3, #1
 8002d3e:	4413      	add	r3, r2
 8002d40:	881b      	ldrh	r3, [r3, #0]
 8002d42:	0a1b      	lsrs	r3, r3, #8
 8002d44:	b29a      	uxth	r2, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	b2d2      	uxtb	r2, r2
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	440b      	add	r3, r1
 8002d54:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	b2da      	uxtb	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    	modH->u8Buffer[ modH->u8BufferSize ] = lowByte(modH->u16regs[i]);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8002d6c:	89fb      	ldrh	r3, [r7, #14]
 8002d6e:	005b      	lsls	r3, r3, #1
 8002d70:	4413      	add	r3, r2
 8002d72:	881a      	ldrh	r2, [r3, #0]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	b2d2      	uxtb	r2, r2
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	440b      	add	r3, r1
 8002d82:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	b2da      	uxtb	r2, r3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    for (i = u16StartAdd; i < u16StartAdd + u8regsno; i++)
 8002d94:	89fb      	ldrh	r3, [r7, #14]
 8002d96:	3301      	adds	r3, #1
 8002d98:	81fb      	strh	r3, [r7, #14]
 8002d9a:	89fa      	ldrh	r2, [r7, #14]
 8002d9c:	89b9      	ldrh	r1, [r7, #12]
 8002d9e:	7afb      	ldrb	r3, [r7, #11]
 8002da0:	440b      	add	r3, r1
 8002da2:	429a      	cmp	r2, r3
 8002da4:	dbc6      	blt.n	8002d34 <process_FC3+0x48>
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002dac:	3302      	adds	r3, #2
 8002dae:	72bb      	strb	r3, [r7, #10]
    sendTxBuffer(modH);
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f7ff fe44 	bl	8002a3e <sendTxBuffer>

    return u8CopyBufferSize;
 8002db6:	f997 300a 	ldrsb.w	r3, [r7, #10]
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3710      	adds	r7, #16
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}

08002dc2 <process_FC5>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC5( modbusHandler_t *modH )
{
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	b084      	sub	sp, #16
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
    uint8_t u8currentBit;
    uint16_t u16currentRegister;
    uint8_t u8CopyBufferSize;
    uint16_t u16coil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	7d5a      	ldrb	r2, [r3, #21]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	7d9b      	ldrb	r3, [r3, #22]
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	4610      	mov	r0, r2
 8002dd6:	f7ff fdb9 	bl	800294c <word>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	81fb      	strh	r3, [r7, #14]

    // point to the register and its bit
    u16currentRegister = (u16coil / 16);
 8002dde:	89fb      	ldrh	r3, [r7, #14]
 8002de0:	091b      	lsrs	r3, r3, #4
 8002de2:	81bb      	strh	r3, [r7, #12]
    u8currentBit = (uint8_t) (u16coil % 16);
 8002de4:	89fb      	ldrh	r3, [r7, #14]
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	f003 030f 	and.w	r3, r3, #15
 8002dec:	72fb      	strb	r3, [r7, #11]

    // write to coil
    bitWrite(
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	7ddb      	ldrb	r3, [r3, #23]
 8002df2:	2bff      	cmp	r3, #255	; 0xff
 8002df4:	d115      	bne.n	8002e22 <process_FC5+0x60>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8002dfc:	89bb      	ldrh	r3, [r7, #12]
 8002dfe:	005b      	lsls	r3, r3, #1
 8002e00:	4413      	add	r3, r2
 8002e02:	8819      	ldrh	r1, [r3, #0]
 8002e04:	7afb      	ldrb	r3, [r7, #11]
 8002e06:	2201      	movs	r2, #1
 8002e08:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0c:	b29a      	uxth	r2, r3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
 8002e14:	89bb      	ldrh	r3, [r7, #12]
 8002e16:	005b      	lsls	r3, r3, #1
 8002e18:	4403      	add	r3, r0
 8002e1a:	430a      	orrs	r2, r1
 8002e1c:	b292      	uxth	r2, r2
 8002e1e:	801a      	strh	r2, [r3, #0]
 8002e20:	e016      	b.n	8002e50 <process_FC5+0x8e>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8002e28:	89bb      	ldrh	r3, [r7, #12]
 8002e2a:	005b      	lsls	r3, r3, #1
 8002e2c:	4413      	add	r3, r2
 8002e2e:	8819      	ldrh	r1, [r3, #0]
 8002e30:	7afb      	ldrb	r3, [r7, #11]
 8002e32:	2201      	movs	r2, #1
 8002e34:	fa02 f303 	lsl.w	r3, r2, r3
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	43db      	mvns	r3, r3
 8002e3c:	b29a      	uxth	r2, r3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
 8002e44:	89bb      	ldrh	r3, [r7, #12]
 8002e46:	005b      	lsls	r3, r3, #1
 8002e48:	4403      	add	r3, r0
 8002e4a:	400a      	ands	r2, r1
 8002e4c:	b292      	uxth	r2, r2
 8002e4e:	801a      	strh	r2, [r3, #0]
        u8currentBit,
		modH->u8Buffer[ NB_HI ] == 0xff );


    // send answer to master
    modH->u8BufferSize = 6;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2206      	movs	r2, #6
 8002e54:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize =  modH->u8BufferSize +2;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002e5e:	3302      	adds	r3, #2
 8002e60:	72bb      	strb	r3, [r7, #10]
    sendTxBuffer(modH);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f7ff fdeb 	bl	8002a3e <sendTxBuffer>

    return u8CopyBufferSize;
 8002e68:	f997 300a 	ldrsb.w	r3, [r7, #10]
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3710      	adds	r7, #16
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <process_FC6>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC6(modbusHandler_t *modH )
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]

    uint16_t u16add = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	7d5a      	ldrb	r2, [r3, #21]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	7d9b      	ldrb	r3, [r3, #22]
 8002e84:	4619      	mov	r1, r3
 8002e86:	4610      	mov	r0, r2
 8002e88:	f7ff fd60 	bl	800294c <word>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	81fb      	strh	r3, [r7, #14]
    uint8_t u8CopyBufferSize;
    uint16_t u16val = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	7dda      	ldrb	r2, [r3, #23]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	7e1b      	ldrb	r3, [r3, #24]
 8002e98:	4619      	mov	r1, r3
 8002e9a:	4610      	mov	r0, r2
 8002e9c:	f7ff fd56 	bl	800294c <word>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	81bb      	strh	r3, [r7, #12]

    modH->u16regs[ u16add ] = u16val;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8002eaa:	89fb      	ldrh	r3, [r7, #14]
 8002eac:	005b      	lsls	r3, r3, #1
 8002eae:	4413      	add	r3, r2
 8002eb0:	89ba      	ldrh	r2, [r7, #12]
 8002eb2:	801a      	strh	r2, [r3, #0]

    // keep the same header
    modH->u8BufferSize = RESPONSE_SIZE;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2206      	movs	r2, #6
 8002eb8:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

    u8CopyBufferSize = modH->u8BufferSize + 2;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002ec2:	3302      	adds	r3, #2
 8002ec4:	72fb      	strb	r3, [r7, #11]
    sendTxBuffer(modH);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f7ff fdb9 	bl	8002a3e <sendTxBuffer>

    return u8CopyBufferSize;
 8002ecc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3710      	adds	r7, #16
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <process_FC15>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC15( modbusHandler_t *modH )
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b086      	sub	sp, #24
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;
    bool bTemp;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	7d5a      	ldrb	r2, [r3, #21]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	7d9b      	ldrb	r3, [r3, #22]
 8002ee8:	4619      	mov	r1, r3
 8002eea:	4610      	mov	r0, r2
 8002eec:	f7ff fd2e 	bl	800294c <word>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	827b      	strh	r3, [r7, #18]
    uint16_t u16Coilno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	7dda      	ldrb	r2, [r3, #23]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	7e1b      	ldrb	r3, [r3, #24]
 8002efc:	4619      	mov	r1, r3
 8002efe:	4610      	mov	r0, r2
 8002f00:	f7ff fd24 	bl	800294c <word>
 8002f04:	4603      	mov	r3, r0
 8002f06:	823b      	strh	r3, [r7, #16]


    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	75bb      	strb	r3, [r7, #22]
    u8frameByte = 7;
 8002f0c:	2307      	movs	r3, #7
 8002f0e:	75fb      	strb	r3, [r7, #23]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8002f10:	2300      	movs	r3, #0
 8002f12:	82bb      	strh	r3, [r7, #20]
 8002f14:	e058      	b.n	8002fc8 <process_FC15+0xf0>
    {

        u16coil = u16StartCoil + u16currentCoil;
 8002f16:	8a7a      	ldrh	r2, [r7, #18]
 8002f18:	8abb      	ldrh	r3, [r7, #20]
 8002f1a:	4413      	add	r3, r2
 8002f1c:	81bb      	strh	r3, [r7, #12]
        u16currentRegister = (u16coil / 16);
 8002f1e:	89bb      	ldrh	r3, [r7, #12]
 8002f20:	091b      	lsrs	r3, r3, #4
 8002f22:	817b      	strh	r3, [r7, #10]
        u8currentBit = (uint8_t) (u16coil % 16);
 8002f24:	89bb      	ldrh	r3, [r7, #12]
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	f003 030f 	and.w	r3, r3, #15
 8002f2c:	727b      	strb	r3, [r7, #9]

        bTemp = bitRead(
 8002f2e:	7dfb      	ldrb	r3, [r7, #23]
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	4413      	add	r3, r2
 8002f34:	7cdb      	ldrb	r3, [r3, #19]
 8002f36:	461a      	mov	r2, r3
 8002f38:	7dbb      	ldrb	r3, [r7, #22]
 8002f3a:	fa42 f303 	asr.w	r3, r2, r3
 8002f3e:	f003 0301 	and.w	r3, r3, #1
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	bf14      	ite	ne
 8002f46:	2301      	movne	r3, #1
 8002f48:	2300      	moveq	r3, #0
 8002f4a:	723b      	strb	r3, [r7, #8]
        			modH->u8Buffer[ u8frameByte ],
                    u8bitsno );

        bitWrite(
 8002f4c:	7a3b      	ldrb	r3, [r7, #8]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d015      	beq.n	8002f7e <process_FC15+0xa6>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8002f58:	897b      	ldrh	r3, [r7, #10]
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	4413      	add	r3, r2
 8002f5e:	8819      	ldrh	r1, [r3, #0]
 8002f60:	7a7b      	ldrb	r3, [r7, #9]
 8002f62:	2201      	movs	r2, #1
 8002f64:	fa02 f303 	lsl.w	r3, r2, r3
 8002f68:	b29a      	uxth	r2, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
 8002f70:	897b      	ldrh	r3, [r7, #10]
 8002f72:	005b      	lsls	r3, r3, #1
 8002f74:	4403      	add	r3, r0
 8002f76:	430a      	orrs	r2, r1
 8002f78:	b292      	uxth	r2, r2
 8002f7a:	801a      	strh	r2, [r3, #0]
 8002f7c:	e016      	b.n	8002fac <process_FC15+0xd4>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8002f84:	897b      	ldrh	r3, [r7, #10]
 8002f86:	005b      	lsls	r3, r3, #1
 8002f88:	4413      	add	r3, r2
 8002f8a:	8819      	ldrh	r1, [r3, #0]
 8002f8c:	7a7b      	ldrb	r3, [r7, #9]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	fa02 f303 	lsl.w	r3, r2, r3
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	43db      	mvns	r3, r3
 8002f98:	b29a      	uxth	r2, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
 8002fa0:	897b      	ldrh	r3, [r7, #10]
 8002fa2:	005b      	lsls	r3, r3, #1
 8002fa4:	4403      	add	r3, r0
 8002fa6:	400a      	ands	r2, r1
 8002fa8:	b292      	uxth	r2, r2
 8002faa:	801a      	strh	r2, [r3, #0]
            modH->u16regs[ u16currentRegister ],
            u8currentBit,
            bTemp );

        u8bitsno ++;
 8002fac:	7dbb      	ldrb	r3, [r7, #22]
 8002fae:	3301      	adds	r3, #1
 8002fb0:	75bb      	strb	r3, [r7, #22]

        if (u8bitsno > 7)
 8002fb2:	7dbb      	ldrb	r3, [r7, #22]
 8002fb4:	2b07      	cmp	r3, #7
 8002fb6:	d904      	bls.n	8002fc2 <process_FC15+0xea>
        {
            u8bitsno = 0;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	75bb      	strb	r3, [r7, #22]
            u8frameByte++;
 8002fbc:	7dfb      	ldrb	r3, [r7, #23]
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	75fb      	strb	r3, [r7, #23]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8002fc2:	8abb      	ldrh	r3, [r7, #20]
 8002fc4:	3301      	adds	r3, #1
 8002fc6:	82bb      	strh	r3, [r7, #20]
 8002fc8:	8aba      	ldrh	r2, [r7, #20]
 8002fca:	8a3b      	ldrh	r3, [r7, #16]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d3a2      	bcc.n	8002f16 <process_FC15+0x3e>
        }
    }

    // send outcoming message
    // it's just a copy of the incomping frame until 6th byte
    modH->u8BufferSize         = 6;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2206      	movs	r2, #6
 8002fd4:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize = modH->u8BufferSize +2;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002fde:	3302      	adds	r3, #2
 8002fe0:	73fb      	strb	r3, [r7, #15]
    sendTxBuffer(modH);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f7ff fd2b 	bl	8002a3e <sendTxBuffer>
    return u8CopyBufferSize;
 8002fe8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3718      	adds	r7, #24
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <process_FC16>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC16(modbusHandler_t *modH )
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b086      	sub	sp, #24
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
    uint16_t u16StartAdd = modH->u8Buffer[ ADD_HI ] << 8 | modH->u8Buffer[ ADD_LO ];
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	7d5b      	ldrb	r3, [r3, #21]
 8003000:	021b      	lsls	r3, r3, #8
 8003002:	b21a      	sxth	r2, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	7d9b      	ldrb	r3, [r3, #22]
 8003008:	b21b      	sxth	r3, r3
 800300a:	4313      	orrs	r3, r2
 800300c:	b21b      	sxth	r3, r3
 800300e:	82bb      	strh	r3, [r7, #20]
    uint16_t u16regsno = modH->u8Buffer[ NB_HI ] << 8 | modH->u8Buffer[ NB_LO ];
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	7ddb      	ldrb	r3, [r3, #23]
 8003014:	021b      	lsls	r3, r3, #8
 8003016:	b21a      	sxth	r2, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	7e1b      	ldrb	r3, [r3, #24]
 800301c:	b21b      	sxth	r3, r3
 800301e:	4313      	orrs	r3, r2
 8003020:	b21b      	sxth	r3, r3
 8003022:	827b      	strh	r3, [r7, #18]
    uint8_t u8CopyBufferSize;
    uint16_t i;
    uint16_t temp;

    // build header
    modH->u8Buffer[ NB_HI ]   = 0;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2200      	movs	r2, #0
 8003028:	75da      	strb	r2, [r3, #23]
    modH->u8Buffer[ NB_LO ]   = (uint8_t) u16regsno; // answer is always 256 or less bytes
 800302a:	8a7b      	ldrh	r3, [r7, #18]
 800302c:	b2da      	uxtb	r2, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	761a      	strb	r2, [r3, #24]
    modH->u8BufferSize         = RESPONSE_SIZE;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2206      	movs	r2, #6
 8003036:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

    // write registers
    for (i = 0; i < u16regsno; i++)
 800303a:	2300      	movs	r3, #0
 800303c:	82fb      	strh	r3, [r7, #22]
 800303e:	e01d      	b.n	800307c <process_FC16+0x88>
    {
        temp = word(
        		modH->u8Buffer[ (BYTE_CNT + 1) + i * 2 ],
 8003040:	8afb      	ldrh	r3, [r7, #22]
 8003042:	005b      	lsls	r3, r3, #1
 8003044:	3307      	adds	r3, #7
        temp = word(
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	4413      	add	r3, r2
 800304a:	7cd8      	ldrb	r0, [r3, #19]
				modH->u8Buffer[ (BYTE_CNT + 2) + i * 2 ]);
 800304c:	8afb      	ldrh	r3, [r7, #22]
 800304e:	3304      	adds	r3, #4
 8003050:	005b      	lsls	r3, r3, #1
        temp = word(
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	4413      	add	r3, r2
 8003056:	7cdb      	ldrb	r3, [r3, #19]
 8003058:	4619      	mov	r1, r3
 800305a:	f7ff fc77 	bl	800294c <word>
 800305e:	4603      	mov	r3, r0
 8003060:	81fb      	strh	r3, [r7, #14]

        modH->u16regs[ u16StartAdd + i ] = temp;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8003068:	8ab9      	ldrh	r1, [r7, #20]
 800306a:	8afb      	ldrh	r3, [r7, #22]
 800306c:	440b      	add	r3, r1
 800306e:	005b      	lsls	r3, r3, #1
 8003070:	4413      	add	r3, r2
 8003072:	89fa      	ldrh	r2, [r7, #14]
 8003074:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < u16regsno; i++)
 8003076:	8afb      	ldrh	r3, [r7, #22]
 8003078:	3301      	adds	r3, #1
 800307a:	82fb      	strh	r3, [r7, #22]
 800307c:	8afa      	ldrh	r2, [r7, #22]
 800307e:	8a7b      	ldrh	r3, [r7, #18]
 8003080:	429a      	cmp	r2, r3
 8003082:	d3dd      	bcc.n	8003040 <process_FC16+0x4c>
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800308a:	3302      	adds	r3, #2
 800308c:	747b      	strb	r3, [r7, #17]
    sendTxBuffer(modH);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f7ff fcd5 	bl	8002a3e <sendTxBuffer>

    return u8CopyBufferSize;
 8003094:	f997 3011 	ldrsb.w	r3, [r7, #17]
}
 8003098:	4618      	mov	r0, r3
 800309a:	3718      	adds	r7, #24
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <modbus_master_set_one>:
modbusHandler_t ModbusH2;
int16_t ModbusDATA2[8];
modbus_t telegram;

int8_t modbus_master_set_one(uint8_t slave_id, uint8_t function_code, uint16_t reg_start, uint16_t data) // modbus_parameter: 0-HOLDING, 1-INPUT, 2-COIL, 3-DISCRETE
{
 80030a0:	b590      	push	{r4, r7, lr}
 80030a2:	b087      	sub	sp, #28
 80030a4:	af02      	add	r7, sp, #8
 80030a6:	4604      	mov	r4, r0
 80030a8:	4608      	mov	r0, r1
 80030aa:	4611      	mov	r1, r2
 80030ac:	461a      	mov	r2, r3
 80030ae:	4623      	mov	r3, r4
 80030b0:	71fb      	strb	r3, [r7, #7]
 80030b2:	4603      	mov	r3, r0
 80030b4:	71bb      	strb	r3, [r7, #6]
 80030b6:	460b      	mov	r3, r1
 80030b8:	80bb      	strh	r3, [r7, #4]
 80030ba:	4613      	mov	r3, r2
 80030bc:	807b      	strh	r3, [r7, #2]
	uint32_t u32NotificationValue;

	telegram.u8id = slave_id; // slave address
 80030be:	4a1a      	ldr	r2, [pc, #104]	; (8003128 <modbus_master_set_one+0x88>)
 80030c0:	79fb      	ldrb	r3, [r7, #7]
 80030c2:	7013      	strb	r3, [r2, #0]
	telegram.u8fct = function_code; // function code (this one is registers read)
 80030c4:	4a18      	ldr	r2, [pc, #96]	; (8003128 <modbus_master_set_one+0x88>)
 80030c6:	79bb      	ldrb	r3, [r7, #6]
 80030c8:	7053      	strb	r3, [r2, #1]
	telegram.u16RegAdd = reg_start; // start address in slave
 80030ca:	4a17      	ldr	r2, [pc, #92]	; (8003128 <modbus_master_set_one+0x88>)
 80030cc:	88bb      	ldrh	r3, [r7, #4]
 80030ce:	8053      	strh	r3, [r2, #2]
	telegram.u16CoilsNo = 1; // number of elements (coils or registers) to read
 80030d0:	4b15      	ldr	r3, [pc, #84]	; (8003128 <modbus_master_set_one+0x88>)
 80030d2:	2201      	movs	r2, #1
 80030d4:	809a      	strh	r2, [r3, #4]
	ModbusDATA2[0] = data;
 80030d6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80030da:	4b14      	ldr	r3, [pc, #80]	; (800312c <modbus_master_set_one+0x8c>)
 80030dc:	801a      	strh	r2, [r3, #0]
	telegram.u16reg = ModbusDATA2; // pointer to a memory array
 80030de:	4b12      	ldr	r3, [pc, #72]	; (8003128 <modbus_master_set_one+0x88>)
 80030e0:	4a12      	ldr	r2, [pc, #72]	; (800312c <modbus_master_set_one+0x8c>)
 80030e2:	609a      	str	r2, [r3, #8]

	ModbusQuery(&ModbusH2, telegram);
 80030e4:	4b10      	ldr	r3, [pc, #64]	; (8003128 <modbus_master_set_one+0x88>)
 80030e6:	68da      	ldr	r2, [r3, #12]
 80030e8:	9200      	str	r2, [sp, #0]
 80030ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030ec:	4810      	ldr	r0, [pc, #64]	; (8003130 <modbus_master_set_one+0x90>)
 80030ee:	f7fe ff37 	bl	8001f60 <ModbusQuery>
	u32NotificationValue = ulTaskNotifyTake(pdTRUE, 500);
 80030f2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80030f6:	2001      	movs	r0, #1
 80030f8:	f00b fea4 	bl	800ee44 <ulTaskNotifyTake>
 80030fc:	60f8      	str	r0, [r7, #12]
	if (u32NotificationValue == 0)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d102      	bne.n	800310a <modbus_master_set_one+0x6a>
	{
		return -1;
 8003104:	f04f 33ff 	mov.w	r3, #4294967295
 8003108:	e009      	b.n	800311e <modbus_master_set_one+0x7e>
	}
	if (ModbusH2.i8lastError == ERR_TIME_OUT)
 800310a:	4b09      	ldr	r3, [pc, #36]	; (8003130 <modbus_master_set_one+0x90>)
 800310c:	f993 3012 	ldrsb.w	r3, [r3, #18]
 8003110:	f113 0f08 	cmn.w	r3, #8
 8003114:	d102      	bne.n	800311c <modbus_master_set_one+0x7c>
	{
		return -2;
 8003116:	f06f 0301 	mvn.w	r3, #1
 800311a:	e000      	b.n	800311e <modbus_master_set_one+0x7e>
	}
	return 1;
 800311c:	2301      	movs	r3, #1
}
 800311e:	4618      	mov	r0, r3
 8003120:	3714      	adds	r7, #20
 8003122:	46bd      	mov	sp, r7
 8003124:	bd90      	pop	{r4, r7, pc}
 8003126:	bf00      	nop
 8003128:	20013c34 	.word	0x20013c34
 800312c:	20013c44 	.word	0x20013c44
 8003130:	20013af0 	.word	0x20013af0

08003134 <modbus_master_get_one>:

int32_t modbus_master_get_one(uint8_t slave_id, uint8_t function_code, uint16_t reg_start) // modbus_parameter: 0-HOLDING, 1-INPUT, 2-COIL, 3-DISCRETE
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b086      	sub	sp, #24
 8003138:	af02      	add	r7, sp, #8
 800313a:	4603      	mov	r3, r0
 800313c:	71fb      	strb	r3, [r7, #7]
 800313e:	460b      	mov	r3, r1
 8003140:	71bb      	strb	r3, [r7, #6]
 8003142:	4613      	mov	r3, r2
 8003144:	80bb      	strh	r3, [r7, #4]
	uint32_t u32NotificationValue;

	telegram.u8id = slave_id; // slave address
 8003146:	4a19      	ldr	r2, [pc, #100]	; (80031ac <modbus_master_get_one+0x78>)
 8003148:	79fb      	ldrb	r3, [r7, #7]
 800314a:	7013      	strb	r3, [r2, #0]
	telegram.u8fct = function_code; // function code (this one is registers read)
 800314c:	4a17      	ldr	r2, [pc, #92]	; (80031ac <modbus_master_get_one+0x78>)
 800314e:	79bb      	ldrb	r3, [r7, #6]
 8003150:	7053      	strb	r3, [r2, #1]
	telegram.u16RegAdd = reg_start; // start address in slave
 8003152:	4a16      	ldr	r2, [pc, #88]	; (80031ac <modbus_master_get_one+0x78>)
 8003154:	88bb      	ldrh	r3, [r7, #4]
 8003156:	8053      	strh	r3, [r2, #2]
	telegram.u16CoilsNo = 1; // number of elements (coils or registers) to read
 8003158:	4b14      	ldr	r3, [pc, #80]	; (80031ac <modbus_master_get_one+0x78>)
 800315a:	2201      	movs	r2, #1
 800315c:	809a      	strh	r2, [r3, #4]
	telegram.u16reg = ModbusDATA2; // pointer to a memory array
 800315e:	4b13      	ldr	r3, [pc, #76]	; (80031ac <modbus_master_get_one+0x78>)
 8003160:	4a13      	ldr	r2, [pc, #76]	; (80031b0 <modbus_master_get_one+0x7c>)
 8003162:	609a      	str	r2, [r3, #8]

	ModbusQuery(&ModbusH2, telegram);
 8003164:	4b11      	ldr	r3, [pc, #68]	; (80031ac <modbus_master_get_one+0x78>)
 8003166:	68da      	ldr	r2, [r3, #12]
 8003168:	9200      	str	r2, [sp, #0]
 800316a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800316c:	4811      	ldr	r0, [pc, #68]	; (80031b4 <modbus_master_get_one+0x80>)
 800316e:	f7fe fef7 	bl	8001f60 <ModbusQuery>
	u32NotificationValue = ulTaskNotifyTake(pdTRUE, 500);
 8003172:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003176:	2001      	movs	r0, #1
 8003178:	f00b fe64 	bl	800ee44 <ulTaskNotifyTake>
 800317c:	60f8      	str	r0, [r7, #12]
	if (u32NotificationValue == 0)
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d102      	bne.n	800318a <modbus_master_get_one+0x56>
	{
		return -1;
 8003184:	f04f 33ff 	mov.w	r3, #4294967295
 8003188:	e00b      	b.n	80031a2 <modbus_master_get_one+0x6e>
	}
	if (ModbusH2.i8lastError == ERR_TIME_OUT)
 800318a:	4b0a      	ldr	r3, [pc, #40]	; (80031b4 <modbus_master_get_one+0x80>)
 800318c:	f993 3012 	ldrsb.w	r3, [r3, #18]
 8003190:	f113 0f08 	cmn.w	r3, #8
 8003194:	d102      	bne.n	800319c <modbus_master_get_one+0x68>
	{
		return -2;
 8003196:	f06f 0301 	mvn.w	r3, #1
 800319a:	e002      	b.n	80031a2 <modbus_master_get_one+0x6e>
	}
	return ModbusDATA2[0];
 800319c:	4b04      	ldr	r3, [pc, #16]	; (80031b0 <modbus_master_get_one+0x7c>)
 800319e:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3710      	adds	r7, #16
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	20013c34 	.word	0x20013c34
 80031b0:	20013c44 	.word	0x20013c44
 80031b4:	20013af0 	.word	0x20013af0

080031b8 <init_modbus_master>:
	return 1;
}

/* Master initialization */
void init_modbus_master()
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	af00      	add	r7, sp, #0
	ModbusH2.uModbusType = MB_MASTER;
 80031bc:	4b13      	ldr	r3, [pc, #76]	; (800320c <init_modbus_master+0x54>)
 80031be:	2204      	movs	r2, #4
 80031c0:	701a      	strb	r2, [r3, #0]
	ModbusH2.port =  &huart5;
 80031c2:	4b12      	ldr	r3, [pc, #72]	; (800320c <init_modbus_master+0x54>)
 80031c4:	4a12      	ldr	r2, [pc, #72]	; (8003210 <init_modbus_master+0x58>)
 80031c6:	605a      	str	r2, [r3, #4]
	ModbusH2.u8id = 0; // For master it must be 0
 80031c8:	4b10      	ldr	r3, [pc, #64]	; (800320c <init_modbus_master+0x54>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	721a      	strb	r2, [r3, #8]
	ModbusH2.u16timeOut = 100;
 80031ce:	4b0f      	ldr	r3, [pc, #60]	; (800320c <init_modbus_master+0x54>)
 80031d0:	2264      	movs	r2, #100	; 0x64
 80031d2:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
	ModbusH2.EN_Port = UART5_DIR_GPIO_Port;
 80031d6:	4b0d      	ldr	r3, [pc, #52]	; (800320c <init_modbus_master+0x54>)
 80031d8:	4a0e      	ldr	r2, [pc, #56]	; (8003214 <init_modbus_master+0x5c>)
 80031da:	60da      	str	r2, [r3, #12]
	ModbusH2.EN_Pin = UART5_DIR_Pin;
 80031dc:	4b0b      	ldr	r3, [pc, #44]	; (800320c <init_modbus_master+0x54>)
 80031de:	2208      	movs	r2, #8
 80031e0:	821a      	strh	r2, [r3, #16]
	ModbusH2.u16regs = ModbusDATA2;
 80031e2:	4b0a      	ldr	r3, [pc, #40]	; (800320c <init_modbus_master+0x54>)
 80031e4:	4a0c      	ldr	r2, [pc, #48]	; (8003218 <init_modbus_master+0x60>)
 80031e6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	ModbusH2.u16regsize= sizeof(ModbusDATA2)/sizeof(ModbusDATA2[0]);
 80031ea:	4b08      	ldr	r3, [pc, #32]	; (800320c <init_modbus_master+0x54>)
 80031ec:	2208      	movs	r2, #8
 80031ee:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
	ModbusH2.xTypeHW = USART_HW_DMA;
 80031f2:	4b06      	ldr	r3, [pc, #24]	; (800320c <init_modbus_master+0x54>)
 80031f4:	2204      	movs	r2, #4
 80031f6:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
	//Initialize Modbus library
	ModbusInit(&ModbusH2);
 80031fa:	4804      	ldr	r0, [pc, #16]	; (800320c <init_modbus_master+0x54>)
 80031fc:	f7fe fc34 	bl	8001a68 <ModbusInit>
	//Start capturing traffic on serial Port
	ModbusStart(&ModbusH2);
 8003200:	4802      	ldr	r0, [pc, #8]	; (800320c <init_modbus_master+0x54>)
 8003202:	f7fe fcd3 	bl	8001bac <ModbusStart>
}
 8003206:	bf00      	nop
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	20013af0 	.word	0x20013af0
 8003210:	20013f38 	.word	0x20013f38
 8003214:	40020c00 	.word	0x40020c00
 8003218:	20013c44 	.word	0x20013c44

0800321c <HAL_UART_TxCpltCallback>:
 * Modbus functionality.
 * @ingroup UartHandle UART HAL handler
 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b086      	sub	sp, #24
 8003220:	af02      	add	r7, sp, #8
 8003222:	6078      	str	r0, [r7, #4]
	/* Modbus RTU TX callback BEGIN */
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8003224:	2300      	movs	r3, #0
 8003226:	60bb      	str	r3, [r7, #8]
	int i;
	for (i = 0; i < numberHandlers; i++ )
 8003228:	2300      	movs	r3, #0
 800322a:	60fb      	str	r3, [r7, #12]
 800322c:	e019      	b.n	8003262 <HAL_UART_TxCpltCallback+0x46>
	{
	   	if (mHandlers[i]->port == huart  )
 800322e:	4a17      	ldr	r2, [pc, #92]	; (800328c <HAL_UART_TxCpltCallback+0x70>)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	429a      	cmp	r2, r3
 800323c:	d10e      	bne.n	800325c <HAL_UART_TxCpltCallback+0x40>
	   	{
	   		// notify the end of TX
	   		xTaskNotifyFromISR(mHandlers[i]->myTaskModbusAHandle, 0, eNoAction, &xHigherPriorityTaskWoken);
 800323e:	4a13      	ldr	r2, [pc, #76]	; (800328c <HAL_UART_TxCpltCallback+0x70>)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003246:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
 800324a:	f107 0308 	add.w	r3, r7, #8
 800324e:	9300      	str	r3, [sp, #0]
 8003250:	2300      	movs	r3, #0
 8003252:	2200      	movs	r2, #0
 8003254:	2100      	movs	r1, #0
 8003256:	f00b fef5 	bl	800f044 <xTaskGenericNotifyFromISR>
	   		break;
 800325a:	e008      	b.n	800326e <HAL_UART_TxCpltCallback+0x52>
	for (i = 0; i < numberHandlers; i++ )
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	3301      	adds	r3, #1
 8003260:	60fb      	str	r3, [r7, #12]
 8003262:	4b0b      	ldr	r3, [pc, #44]	; (8003290 <HAL_UART_TxCpltCallback+0x74>)
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	461a      	mov	r2, r3
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	4293      	cmp	r3, r2
 800326c:	dbdf      	blt.n	800322e <HAL_UART_TxCpltCallback+0x12>
	   	}

	}
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d007      	beq.n	8003284 <HAL_UART_TxCpltCallback+0x68>
 8003274:	4b07      	ldr	r3, [pc, #28]	; (8003294 <HAL_UART_TxCpltCallback+0x78>)
 8003276:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800327a:	601a      	str	r2, [r3, #0]
 800327c:	f3bf 8f4f 	dsb	sy
 8003280:	f3bf 8f6f 	isb	sy
	/*
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 * */

}
 8003284:	bf00      	nop
 8003286:	3710      	adds	r7, #16
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}
 800328c:	20013ae8 	.word	0x20013ae8
 8003290:	20000038 	.word	0x20000038
 8003294:	e000ed04 	.word	0xe000ed04

08003298 <HAL_UART_RxCpltCallback>:
 * user should implement the correct control flow and verification to maintain
 * Modbus functionality.
 * @ingroup UartHandle UART HAL handler
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8003298:	b590      	push	{r4, r7, lr}
 800329a:	b087      	sub	sp, #28
 800329c:	af02      	add	r7, sp, #8
 800329e:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80032a0:	2300      	movs	r3, #0
 80032a2:	60bb      	str	r3, [r7, #8]

	/* Modbus RTU RX callback BEGIN */
    int i;
    for (i = 0; i < numberHandlers; i++ )
 80032a4:	2300      	movs	r3, #0
 80032a6:	60fb      	str	r3, [r7, #12]
 80032a8:	e042      	b.n	8003330 <HAL_UART_RxCpltCallback+0x98>
    {
    	if (mHandlers[i]->port == UartHandle  )
 80032aa:	4a2d      	ldr	r2, [pc, #180]	; (8003360 <HAL_UART_RxCpltCallback+0xc8>)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d137      	bne.n	800332a <HAL_UART_RxCpltCallback+0x92>
    	{

    		if(mHandlers[i]->xTypeHW == USART_HW)
 80032ba:	4a29      	ldr	r2, [pc, #164]	; (8003360 <HAL_UART_RxCpltCallback+0xc8>)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032c2:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d139      	bne.n	800333e <HAL_UART_RxCpltCallback+0xa6>
    		{
    			RingAdd(&mHandlers[i]->xBufferRX, mHandlers[i]->dataRX);
 80032ca:	4a25      	ldr	r2, [pc, #148]	; (8003360 <HAL_UART_RxCpltCallback+0xc8>)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032d2:	f103 02bc 	add.w	r2, r3, #188	; 0xbc
 80032d6:	4922      	ldr	r1, [pc, #136]	; (8003360 <HAL_UART_RxCpltCallback+0xc8>)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80032de:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 80032e2:	4619      	mov	r1, r3
 80032e4:	4610      	mov	r0, r2
 80032e6:	f7fe faf7 	bl	80018d8 <RingAdd>
    			HAL_UART_Receive_IT(mHandlers[i]->port, &mHandlers[i]->dataRX, 1);
 80032ea:	4a1d      	ldr	r2, [pc, #116]	; (8003360 <HAL_UART_RxCpltCallback+0xc8>)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032f2:	6858      	ldr	r0, [r3, #4]
 80032f4:	4a1a      	ldr	r2, [pc, #104]	; (8003360 <HAL_UART_RxCpltCallback+0xc8>)
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032fc:	33a6      	adds	r3, #166	; 0xa6
 80032fe:	2201      	movs	r2, #1
 8003300:	4619      	mov	r1, r3
 8003302:	f006 ff13 	bl	800a12c <HAL_UART_Receive_IT>
    			xTimerResetFromISR(mHandlers[i]->xTimerT35, &xHigherPriorityTaskWoken);
 8003306:	4a16      	ldr	r2, [pc, #88]	; (8003360 <HAL_UART_RxCpltCallback+0xc8>)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800330e:	f8d3 40b0 	ldr.w	r4, [r3, #176]	; 0xb0
 8003312:	f00b f8c5 	bl	800e4a0 <xTaskGetTickCountFromISR>
 8003316:	4602      	mov	r2, r0
 8003318:	f107 0308 	add.w	r3, r7, #8
 800331c:	2100      	movs	r1, #0
 800331e:	9100      	str	r1, [sp, #0]
 8003320:	2107      	movs	r1, #7
 8003322:	4620      	mov	r0, r4
 8003324:	f00c f862 	bl	800f3ec <xTimerGenericCommand>
    		}
    		break;
 8003328:	e009      	b.n	800333e <HAL_UART_RxCpltCallback+0xa6>
    for (i = 0; i < numberHandlers; i++ )
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	3301      	adds	r3, #1
 800332e:	60fb      	str	r3, [r7, #12]
 8003330:	4b0c      	ldr	r3, [pc, #48]	; (8003364 <HAL_UART_RxCpltCallback+0xcc>)
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	461a      	mov	r2, r3
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	4293      	cmp	r3, r2
 800333a:	dbb6      	blt.n	80032aa <HAL_UART_RxCpltCallback+0x12>
 800333c:	e000      	b.n	8003340 <HAL_UART_RxCpltCallback+0xa8>
    		break;
 800333e:	bf00      	nop
    	}
    }
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d007      	beq.n	8003356 <HAL_UART_RxCpltCallback+0xbe>
 8003346:	4b08      	ldr	r3, [pc, #32]	; (8003368 <HAL_UART_RxCpltCallback+0xd0>)
 8003348:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800334c:	601a      	str	r2, [r3, #0]
 800334e:	f3bf 8f4f 	dsb	sy
 8003352:	f3bf 8f6f 	isb	sy
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 *
	 * */

}
 8003356:	bf00      	nop
 8003358:	3714      	adds	r7, #20
 800335a:	46bd      	mov	sp, r7
 800335c:	bd90      	pop	{r4, r7, pc}
 800335e:	bf00      	nop
 8003360:	20013ae8 	.word	0x20013ae8
 8003364:	20000038 	.word	0x20000038
 8003368:	e000ed04 	.word	0xe000ed04

0800336c <HAL_UART_ErrorCallback>:
 * handled by the HAL
 * */


void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]

 int i;

 for (i = 0; i < numberHandlers; i++ )
 8003374:	2300      	movs	r3, #0
 8003376:	60fb      	str	r3, [r7, #12]
 8003378:	e03f      	b.n	80033fa <HAL_UART_ErrorCallback+0x8e>
 {
    	if (mHandlers[i]->port == huart  )
 800337a:	4a26      	ldr	r2, [pc, #152]	; (8003414 <HAL_UART_ErrorCallback+0xa8>)
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	429a      	cmp	r2, r3
 8003388:	d134      	bne.n	80033f4 <HAL_UART_ErrorCallback+0x88>
    	{

    		if(mHandlers[i]->xTypeHW == USART_HW_DMA)
 800338a:	4a22      	ldr	r2, [pc, #136]	; (8003414 <HAL_UART_ErrorCallback+0xa8>)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003392:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8003396:	2b04      	cmp	r3, #4
 8003398:	d136      	bne.n	8003408 <HAL_UART_ErrorCallback+0x9c>
    		{
    			while(HAL_UARTEx_ReceiveToIdle_DMA(mHandlers[i]->port, mHandlers[i]->xBufferRX.uxBuffer, MAX_BUFFER) != HAL_OK)
 800339a:	e007      	b.n	80033ac <HAL_UART_ErrorCallback+0x40>
    		    {
    					HAL_UART_DMAStop(mHandlers[i]->port);
 800339c:	4a1d      	ldr	r2, [pc, #116]	; (8003414 <HAL_UART_ErrorCallback+0xa8>)
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f006 ff6e 	bl	800a288 <HAL_UART_DMAStop>
    			while(HAL_UARTEx_ReceiveToIdle_DMA(mHandlers[i]->port, mHandlers[i]->xBufferRX.uxBuffer, MAX_BUFFER) != HAL_OK)
 80033ac:	4a19      	ldr	r2, [pc, #100]	; (8003414 <HAL_UART_ErrorCallback+0xa8>)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033b4:	6858      	ldr	r0, [r3, #4]
 80033b6:	4a17      	ldr	r2, [pc, #92]	; (8003414 <HAL_UART_ErrorCallback+0xa8>)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033be:	33bc      	adds	r3, #188	; 0xbc
 80033c0:	2280      	movs	r2, #128	; 0x80
 80033c2:	4619      	mov	r1, r3
 80033c4:	f006 ffdf 	bl	800a386 <HAL_UARTEx_ReceiveToIdle_DMA>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d1e6      	bne.n	800339c <HAL_UART_ErrorCallback+0x30>
   				}
				__HAL_DMA_DISABLE_IT(mHandlers[i]->port->hdmarx, DMA_IT_HT); // we don't need half-transfer interrupt
 80033ce:	4a11      	ldr	r2, [pc, #68]	; (8003414 <HAL_UART_ErrorCallback+0xa8>)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	490d      	ldr	r1, [pc, #52]	; (8003414 <HAL_UART_ErrorCallback+0xa8>)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f022 0208 	bic.w	r2, r2, #8
 80033f0:	601a      	str	r2, [r3, #0]

    		}

    		break;
 80033f2:	e009      	b.n	8003408 <HAL_UART_ErrorCallback+0x9c>
 for (i = 0; i < numberHandlers; i++ )
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	3301      	adds	r3, #1
 80033f8:	60fb      	str	r3, [r7, #12]
 80033fa:	4b07      	ldr	r3, [pc, #28]	; (8003418 <HAL_UART_ErrorCallback+0xac>)
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	461a      	mov	r2, r3
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	4293      	cmp	r3, r2
 8003404:	dbb9      	blt.n	800337a <HAL_UART_ErrorCallback+0xe>
    	}
   }
}
 8003406:	e000      	b.n	800340a <HAL_UART_ErrorCallback+0x9e>
    		break;
 8003408:	bf00      	nop
}
 800340a:	bf00      	nop
 800340c:	3710      	adds	r7, #16
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	20013ae8 	.word	0x20013ae8
 8003418:	20000038 	.word	0x20000038

0800341c <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b086      	sub	sp, #24
 8003420:	af02      	add	r7, sp, #8
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	460b      	mov	r3, r1
 8003426:	807b      	strh	r3, [r7, #2]
	    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8003428:	2300      	movs	r3, #0
 800342a:	60bb      	str	r3, [r7, #8]
		/* Modbus RTU RX callback BEGIN */
	    int i;
	    for (i = 0; i < numberHandlers; i++ )
 800342c:	2300      	movs	r3, #0
 800342e:	60fb      	str	r3, [r7, #12]
 8003430:	e05f      	b.n	80034f2 <HAL_UARTEx_RxEventCallback+0xd6>
	    {
	    	if (mHandlers[i]->port == huart  )
 8003432:	4a3b      	ldr	r2, [pc, #236]	; (8003520 <HAL_UARTEx_RxEventCallback+0x104>)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	429a      	cmp	r2, r3
 8003440:	d154      	bne.n	80034ec <HAL_UARTEx_RxEventCallback+0xd0>
	    	{


	    		if(mHandlers[i]->xTypeHW == USART_HW_DMA)
 8003442:	4a37      	ldr	r2, [pc, #220]	; (8003520 <HAL_UARTEx_RxEventCallback+0x104>)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800344a:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800344e:	2b04      	cmp	r3, #4
 8003450:	d156      	bne.n	8003500 <HAL_UARTEx_RxEventCallback+0xe4>
	    		{
	    			if(Size) //check if we have received any byte
 8003452:	887b      	ldrh	r3, [r7, #2]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d053      	beq.n	8003500 <HAL_UARTEx_RxEventCallback+0xe4>
	    			{
		    				mHandlers[i]->xBufferRX.u8available = Size;
 8003458:	4a31      	ldr	r2, [pc, #196]	; (8003520 <HAL_UARTEx_RxEventCallback+0x104>)
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003460:	887a      	ldrh	r2, [r7, #2]
 8003462:	b2d2      	uxtb	r2, r2
 8003464:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
		    				mHandlers[i]->xBufferRX.overflow = false;
 8003468:	4a2d      	ldr	r2, [pc, #180]	; (8003520 <HAL_UARTEx_RxEventCallback+0x104>)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f

		    				while(HAL_UARTEx_ReceiveToIdle_DMA(mHandlers[i]->port, mHandlers[i]->xBufferRX.uxBuffer, MAX_BUFFER) != HAL_OK)
 8003476:	e007      	b.n	8003488 <HAL_UARTEx_RxEventCallback+0x6c>
		    				{
		    					HAL_UART_DMAStop(mHandlers[i]->port);
 8003478:	4a29      	ldr	r2, [pc, #164]	; (8003520 <HAL_UARTEx_RxEventCallback+0x104>)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	4618      	mov	r0, r3
 8003484:	f006 ff00 	bl	800a288 <HAL_UART_DMAStop>
		    				while(HAL_UARTEx_ReceiveToIdle_DMA(mHandlers[i]->port, mHandlers[i]->xBufferRX.uxBuffer, MAX_BUFFER) != HAL_OK)
 8003488:	4a25      	ldr	r2, [pc, #148]	; (8003520 <HAL_UARTEx_RxEventCallback+0x104>)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003490:	6858      	ldr	r0, [r3, #4]
 8003492:	4a23      	ldr	r2, [pc, #140]	; (8003520 <HAL_UARTEx_RxEventCallback+0x104>)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800349a:	33bc      	adds	r3, #188	; 0xbc
 800349c:	2280      	movs	r2, #128	; 0x80
 800349e:	4619      	mov	r1, r3
 80034a0:	f006 ff71 	bl	800a386 <HAL_UARTEx_ReceiveToIdle_DMA>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d1e6      	bne.n	8003478 <HAL_UARTEx_RxEventCallback+0x5c>

		    				}
		    				__HAL_DMA_DISABLE_IT(mHandlers[i]->port->hdmarx, DMA_IT_HT); // we don't need half-transfer interrupt
 80034aa:	4a1d      	ldr	r2, [pc, #116]	; (8003520 <HAL_UARTEx_RxEventCallback+0x104>)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	4919      	ldr	r1, [pc, #100]	; (8003520 <HAL_UARTEx_RxEventCallback+0x104>)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f022 0208 	bic.w	r2, r2, #8
 80034cc:	601a      	str	r2, [r3, #0]

		    				xTaskNotifyFromISR(mHandlers[i]->myTaskModbusAHandle, 0 , eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 80034ce:	4a14      	ldr	r2, [pc, #80]	; (8003520 <HAL_UARTEx_RxEventCallback+0x104>)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034d6:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
 80034da:	f107 0308 	add.w	r3, r7, #8
 80034de:	9300      	str	r3, [sp, #0]
 80034e0:	2300      	movs	r3, #0
 80034e2:	2203      	movs	r2, #3
 80034e4:	2100      	movs	r1, #0
 80034e6:	f00b fdad 	bl	800f044 <xTaskGenericNotifyFromISR>
	    			}
	    		}

	    		break;
 80034ea:	e009      	b.n	8003500 <HAL_UARTEx_RxEventCallback+0xe4>
	    for (i = 0; i < numberHandlers; i++ )
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	3301      	adds	r3, #1
 80034f0:	60fb      	str	r3, [r7, #12]
 80034f2:	4b0c      	ldr	r3, [pc, #48]	; (8003524 <HAL_UARTEx_RxEventCallback+0x108>)
 80034f4:	781b      	ldrb	r3, [r3, #0]
 80034f6:	461a      	mov	r2, r3
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	4293      	cmp	r3, r2
 80034fc:	db99      	blt.n	8003432 <HAL_UARTEx_RxEventCallback+0x16>
 80034fe:	e000      	b.n	8003502 <HAL_UARTEx_RxEventCallback+0xe6>
	    		break;
 8003500:	bf00      	nop
	    	}
	    }
	    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d007      	beq.n	8003518 <HAL_UARTEx_RxEventCallback+0xfc>
 8003508:	4b07      	ldr	r3, [pc, #28]	; (8003528 <HAL_UARTEx_RxEventCallback+0x10c>)
 800350a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800350e:	601a      	str	r2, [r3, #0]
 8003510:	f3bf 8f4f 	dsb	sy
 8003514:	f3bf 8f6f 	isb	sy
}
 8003518:	bf00      	nop
 800351a:	3710      	adds	r7, #16
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}
 8003520:	20013ae8 	.word	0x20013ae8
 8003524:	20000038 	.word	0x20000038
 8003528:	e000ed04 	.word	0xe000ed04

0800352c <SHT30_Send_Cmd>:
#include "sht30_i2c_drv.h"
#include "i2c.h"

static uint8_t SHT30_Send_Cmd(SHT30_CMD cmd)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b086      	sub	sp, #24
 8003530:	af02      	add	r7, sp, #8
 8003532:	4603      	mov	r3, r0
 8003534:	80fb      	strh	r3, [r7, #6]
    uint8_t cmd_buffer[2];
    cmd_buffer[0] = cmd >> 8;
 8003536:	88fb      	ldrh	r3, [r7, #6]
 8003538:	0a1b      	lsrs	r3, r3, #8
 800353a:	b29b      	uxth	r3, r3
 800353c:	b2db      	uxtb	r3, r3
 800353e:	733b      	strb	r3, [r7, #12]
    cmd_buffer[1] = cmd;
 8003540:	88fb      	ldrh	r3, [r7, #6]
 8003542:	b2db      	uxtb	r3, r3
 8003544:	737b      	strb	r3, [r7, #13]
//    HAL_Delay(20);
    return HAL_I2C_Master_Transmit(&hi2c1, SHT30_ADDR_WRITE, (uint8_t* )cmd_buffer, 2, SHT30_TIMEOUT);
 8003546:	f107 020c 	add.w	r2, r7, #12
 800354a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800354e:	9300      	str	r3, [sp, #0]
 8003550:	2302      	movs	r3, #2
 8003552:	2188      	movs	r1, #136	; 0x88
 8003554:	4803      	ldr	r0, [pc, #12]	; (8003564 <SHT30_Send_Cmd+0x38>)
 8003556:	f004 fcab 	bl	8007eb0 <HAL_I2C_Master_Transmit>
 800355a:	4603      	mov	r3, r0
}
 800355c:	4618      	mov	r0, r3
 800355e:	3710      	adds	r7, #16
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	20013d54 	.word	0x20013d54

08003568 <SHT30_reset>:

void SHT30_reset(void)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	af00      	add	r7, sp, #0
    SHT30_Send_Cmd(SOFT_RESET_CMD);
 800356c:	f243 00a2 	movw	r0, #12450	; 0x30a2
 8003570:	f7ff ffdc 	bl	800352c <SHT30_Send_Cmd>
    HAL_Delay(20);
 8003574:	2014      	movs	r0, #20
 8003576:	f001 ffdf 	bl	8005538 <HAL_Delay>
}
 800357a:	bf00      	nop
 800357c:	bd80      	pop	{r7, pc}

0800357e <SHT30_Init>:

uint8_t SHT30_Init(void)
{
 800357e:	b580      	push	{r7, lr}
 8003580:	af00      	add	r7, sp, #0
    return SHT30_Send_Cmd(MEDIUM_2_CMD);
 8003582:	f242 2020 	movw	r0, #8736	; 0x2220
 8003586:	f7ff ffd1 	bl	800352c <SHT30_Send_Cmd>
 800358a:	4603      	mov	r3, r0
}
 800358c:	4618      	mov	r0, r3
 800358e:	bd80      	pop	{r7, pc}

08003590 <modbus_set_holding>:
  .stack_size = 256 * 6,
  .priority = (osPriority_t) osPriorityNormal,
};

int8_t modbus_set_holding(uint8_t slave_id, uint16_t reg_start, uint16_t data)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	af00      	add	r7, sp, #0
 8003596:	4603      	mov	r3, r0
 8003598:	71fb      	strb	r3, [r7, #7]
 800359a:	460b      	mov	r3, r1
 800359c:	80bb      	strh	r3, [r7, #4]
 800359e:	4613      	mov	r3, r2
 80035a0:	807b      	strh	r3, [r7, #2]
	return modbus_master_set_one(slave_id, MB_FC_WRITE_MULTIPLE_REGISTERS, reg_start, data);
 80035a2:	887b      	ldrh	r3, [r7, #2]
 80035a4:	88ba      	ldrh	r2, [r7, #4]
 80035a6:	79f8      	ldrb	r0, [r7, #7]
 80035a8:	2110      	movs	r1, #16
 80035aa:	f7ff fd79 	bl	80030a0 <modbus_master_set_one>
 80035ae:	4603      	mov	r3, r0
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3708      	adds	r7, #8
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <modbus_get_holding>:

int32_t modbus_get_holding(uint8_t slave_id, uint16_t reg_start)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
 80035be:	4603      	mov	r3, r0
 80035c0:	460a      	mov	r2, r1
 80035c2:	71fb      	strb	r3, [r7, #7]
 80035c4:	4613      	mov	r3, r2
 80035c6:	80bb      	strh	r3, [r7, #4]
	return modbus_master_get_one(slave_id, MB_FC_READ_REGISTERS, reg_start);
 80035c8:	88ba      	ldrh	r2, [r7, #4]
 80035ca:	79fb      	ldrb	r3, [r7, #7]
 80035cc:	2103      	movs	r1, #3
 80035ce:	4618      	mov	r0, r3
 80035d0:	f7ff fdb0 	bl	8003134 <modbus_master_get_one>
 80035d4:	4603      	mov	r3, r0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3708      	adds	r7, #8
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
	...

080035e0 <rc_receive_temp>:
bool pult_link = true;   // переменная состояния связи пульта
uint8_t count_error = 0; // счетчик количества ошибочных пакетов
uint8_t count_link = 0;  // счетчик попыток соединений после разрыва связи

void rc_receive_temp()
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	af00      	add	r7, sp, #0
    new_reg_temp = modbus_get_holding(DEFAUL_PULT_ID, REG_TEMP);
 80035e4:	2102      	movs	r1, #2
 80035e6:	2001      	movs	r0, #1
 80035e8:	f7ff ffe6 	bl	80035b8 <modbus_get_holding>
 80035ec:	4603      	mov	r3, r0
 80035ee:	b21a      	sxth	r2, r3
 80035f0:	4b1b      	ldr	r3, [pc, #108]	; (8003660 <rc_receive_temp+0x80>)
 80035f2:	801a      	strh	r2, [r3, #0]
    DEBUG_RC("new_reg_temp = %i\n", new_reg_temp);
 80035f4:	4b1a      	ldr	r3, [pc, #104]	; (8003660 <rc_receive_temp+0x80>)
 80035f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035fa:	4619      	mov	r1, r3
 80035fc:	4819      	ldr	r0, [pc, #100]	; (8003664 <rc_receive_temp+0x84>)
 80035fe:	f019 ff3f 	bl	801d480 <iprintf>
    if (new_reg_temp >= 0 && reg_temp != new_reg_temp)
 8003602:	4b17      	ldr	r3, [pc, #92]	; (8003660 <rc_receive_temp+0x80>)
 8003604:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003608:	2b00      	cmp	r3, #0
 800360a:	db26      	blt.n	800365a <rc_receive_temp+0x7a>
 800360c:	4b16      	ldr	r3, [pc, #88]	; (8003668 <rc_receive_temp+0x88>)
 800360e:	781b      	ldrb	r3, [r3, #0]
 8003610:	461a      	mov	r2, r3
 8003612:	4b13      	ldr	r3, [pc, #76]	; (8003660 <rc_receive_temp+0x80>)
 8003614:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003618:	429a      	cmp	r2, r3
 800361a:	d01e      	beq.n	800365a <rc_receive_temp+0x7a>
    {
        reg_temp = new_reg_temp;
 800361c:	4b10      	ldr	r3, [pc, #64]	; (8003660 <rc_receive_temp+0x80>)
 800361e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003622:	b2da      	uxtb	r2, r3
 8003624:	4b10      	ldr	r3, [pc, #64]	; (8003668 <rc_receive_temp+0x88>)
 8003626:	701a      	strb	r2, [r3, #0]
        if (reg_temp < 10)
 8003628:	4b0f      	ldr	r3, [pc, #60]	; (8003668 <rc_receive_temp+0x88>)
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	2b09      	cmp	r3, #9
 800362e:	d805      	bhi.n	800363c <rc_receive_temp+0x5c>
        {
            limit_temp = true;
 8003630:	4b0e      	ldr	r3, [pc, #56]	; (800366c <rc_receive_temp+0x8c>)
 8003632:	2201      	movs	r2, #1
 8003634:	701a      	strb	r2, [r3, #0]
            reg_temp = 10;
 8003636:	4b0c      	ldr	r3, [pc, #48]	; (8003668 <rc_receive_temp+0x88>)
 8003638:	220a      	movs	r2, #10
 800363a:	701a      	strb	r2, [r3, #0]
        }
        if (reg_temp > 25)
 800363c:	4b0a      	ldr	r3, [pc, #40]	; (8003668 <rc_receive_temp+0x88>)
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	2b19      	cmp	r3, #25
 8003642:	d905      	bls.n	8003650 <rc_receive_temp+0x70>
        {
            limit_temp = true;
 8003644:	4b09      	ldr	r3, [pc, #36]	; (800366c <rc_receive_temp+0x8c>)
 8003646:	2201      	movs	r2, #1
 8003648:	701a      	strb	r2, [r3, #0]
            reg_temp = 25;
 800364a:	4b07      	ldr	r3, [pc, #28]	; (8003668 <rc_receive_temp+0x88>)
 800364c:	2219      	movs	r2, #25
 800364e:	701a      	strb	r2, [r3, #0]
        }
        heaters->ten.temp_limit = reg_temp;
 8003650:	4b05      	ldr	r3, [pc, #20]	; (8003668 <rc_receive_temp+0x88>)
 8003652:	781a      	ldrb	r2, [r3, #0]
 8003654:	4b06      	ldr	r3, [pc, #24]	; (8003670 <rc_receive_temp+0x90>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	605a      	str	r2, [r3, #4]
    }
}
 800365a:	bf00      	nop
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	20013c58 	.word	0x20013c58
 8003664:	0801f36c 	.word	0x0801f36c
 8003668:	20013c60 	.word	0x20013c60
 800366c:	20013c57 	.word	0x20013c57
 8003670:	2001399c 	.word	0x2001399c

08003674 <rc_receive_fan>:

void rc_receive_fan()
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b082      	sub	sp, #8
 8003678:	af00      	add	r7, sp, #0
    new_reg_fan = modbus_get_holding(DEFAUL_PULT_ID, REG_FAN);
 800367a:	2101      	movs	r1, #1
 800367c:	2001      	movs	r0, #1
 800367e:	f7ff ff9b 	bl	80035b8 <modbus_get_holding>
 8003682:	4603      	mov	r3, r0
 8003684:	b21a      	sxth	r2, r3
 8003686:	4b46      	ldr	r3, [pc, #280]	; (80037a0 <rc_receive_fan+0x12c>)
 8003688:	801a      	strh	r2, [r3, #0]
    DEBUG_RC("new_reg_fan = %i\n", new_reg_fan);
 800368a:	4b45      	ldr	r3, [pc, #276]	; (80037a0 <rc_receive_fan+0x12c>)
 800368c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003690:	4619      	mov	r1, r3
 8003692:	4844      	ldr	r0, [pc, #272]	; (80037a4 <rc_receive_fan+0x130>)
 8003694:	f019 fef4 	bl	801d480 <iprintf>
    if (new_reg_fan >= 0 && reg_fan != new_reg_fan)
 8003698:	4b41      	ldr	r3, [pc, #260]	; (80037a0 <rc_receive_fan+0x12c>)
 800369a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	db7a      	blt.n	8003798 <rc_receive_fan+0x124>
 80036a2:	4b41      	ldr	r3, [pc, #260]	; (80037a8 <rc_receive_fan+0x134>)
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	461a      	mov	r2, r3
 80036a8:	4b3d      	ldr	r3, [pc, #244]	; (80037a0 <rc_receive_fan+0x12c>)
 80036aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d072      	beq.n	8003798 <rc_receive_fan+0x124>
    {
        int16_t reg_fan_smart = reg_fan;
 80036b2:	4b3d      	ldr	r3, [pc, #244]	; (80037a8 <rc_receive_fan+0x134>)
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	80fb      	strh	r3, [r7, #6]
        reg_fan = new_reg_fan;
 80036b8:	4b39      	ldr	r3, [pc, #228]	; (80037a0 <rc_receive_fan+0x12c>)
 80036ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036be:	b2da      	uxtb	r2, r3
 80036c0:	4b39      	ldr	r3, [pc, #228]	; (80037a8 <rc_receive_fan+0x134>)
 80036c2:	701a      	strb	r2, [r3, #0]
        if (reg_fan == 0)
 80036c4:	4b38      	ldr	r3, [pc, #224]	; (80037a8 <rc_receive_fan+0x134>)
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d105      	bne.n	80036d8 <rc_receive_fan+0x64>
        {
            reg_fan = 1;
 80036cc:	4b36      	ldr	r3, [pc, #216]	; (80037a8 <rc_receive_fan+0x134>)
 80036ce:	2201      	movs	r2, #1
 80036d0:	701a      	strb	r2, [r3, #0]
            limit_fan = true;
 80036d2:	4b36      	ldr	r3, [pc, #216]	; (80037ac <rc_receive_fan+0x138>)
 80036d4:	2201      	movs	r2, #1
 80036d6:	701a      	strb	r2, [r3, #0]
        }
        if (device->mode == INFLOW_MODE)
 80036d8:	4b35      	ldr	r3, [pc, #212]	; (80037b0 <rc_receive_fan+0x13c>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	7b1b      	ldrb	r3, [r3, #12]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d122      	bne.n	8003728 <rc_receive_fan+0xb4>
        {
            if (reg_fan == 1)
 80036e2:	4b31      	ldr	r3, [pc, #196]	; (80037a8 <rc_receive_fan+0x134>)
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d104      	bne.n	80036f4 <rc_receive_fan+0x80>
                device->inflow_speed = 1;
 80036ea:	4b31      	ldr	r3, [pc, #196]	; (80037b0 <rc_receive_fan+0x13c>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2201      	movs	r2, #1
 80036f0:	739a      	strb	r2, [r3, #14]
 80036f2:	e019      	b.n	8003728 <rc_receive_fan+0xb4>
            else if (reg_fan == 2)
 80036f4:	4b2c      	ldr	r3, [pc, #176]	; (80037a8 <rc_receive_fan+0x134>)
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d104      	bne.n	8003706 <rc_receive_fan+0x92>
                device->inflow_speed = 3;
 80036fc:	4b2c      	ldr	r3, [pc, #176]	; (80037b0 <rc_receive_fan+0x13c>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2203      	movs	r2, #3
 8003702:	739a      	strb	r2, [r3, #14]
 8003704:	e010      	b.n	8003728 <rc_receive_fan+0xb4>
            else if (reg_fan == 3)
 8003706:	4b28      	ldr	r3, [pc, #160]	; (80037a8 <rc_receive_fan+0x134>)
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	2b03      	cmp	r3, #3
 800370c:	d104      	bne.n	8003718 <rc_receive_fan+0xa4>
                device->inflow_speed = 5;
 800370e:	4b28      	ldr	r3, [pc, #160]	; (80037b0 <rc_receive_fan+0x13c>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2205      	movs	r2, #5
 8003714:	739a      	strb	r2, [r3, #14]
 8003716:	e007      	b.n	8003728 <rc_receive_fan+0xb4>
            else if (reg_fan == 4)
 8003718:	4b23      	ldr	r3, [pc, #140]	; (80037a8 <rc_receive_fan+0x134>)
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	2b04      	cmp	r3, #4
 800371e:	d103      	bne.n	8003728 <rc_receive_fan+0xb4>
                device->inflow_speed = 7;
 8003720:	4b23      	ldr	r3, [pc, #140]	; (80037b0 <rc_receive_fan+0x13c>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2207      	movs	r2, #7
 8003726:	739a      	strb	r2, [r3, #14]
        }
        if (device->mode == SMART_MODE)
 8003728:	4b21      	ldr	r3, [pc, #132]	; (80037b0 <rc_receive_fan+0x13c>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	7b1b      	ldrb	r3, [r3, #12]
 800372e:	2b01      	cmp	r3, #1
 8003730:	d106      	bne.n	8003740 <rc_receive_fan+0xcc>
        {
            reg_fan = reg_fan_smart;
 8003732:	88fb      	ldrh	r3, [r7, #6]
 8003734:	b2da      	uxtb	r2, r3
 8003736:	4b1c      	ldr	r3, [pc, #112]	; (80037a8 <rc_receive_fan+0x134>)
 8003738:	701a      	strb	r2, [r3, #0]
            limit_fan = true;
 800373a:	4b1c      	ldr	r3, [pc, #112]	; (80037ac <rc_receive_fan+0x138>)
 800373c:	2201      	movs	r2, #1
 800373e:	701a      	strb	r2, [r3, #0]
        }
        if (device->mode == INFLOW_MAX_MODE)
 8003740:	4b1b      	ldr	r3, [pc, #108]	; (80037b0 <rc_receive_fan+0x13c>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	7b1b      	ldrb	r3, [r3, #12]
 8003746:	2b02      	cmp	r3, #2
 8003748:	d126      	bne.n	8003798 <rc_receive_fan+0x124>
        {
            device->mode = INFLOW_MODE;
 800374a:	4b19      	ldr	r3, [pc, #100]	; (80037b0 <rc_receive_fan+0x13c>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	2200      	movs	r2, #0
 8003750:	731a      	strb	r2, [r3, #12]
            if (reg_fan == 1)
 8003752:	4b15      	ldr	r3, [pc, #84]	; (80037a8 <rc_receive_fan+0x134>)
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	2b01      	cmp	r3, #1
 8003758:	d104      	bne.n	8003764 <rc_receive_fan+0xf0>
                device->inflow_speed = 1;
 800375a:	4b15      	ldr	r3, [pc, #84]	; (80037b0 <rc_receive_fan+0x13c>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	2201      	movs	r2, #1
 8003760:	739a      	strb	r2, [r3, #14]
                device->inflow_speed = 5;
            else if (reg_fan == 4)
                device->inflow_speed = 7;
        }
    }
}
 8003762:	e019      	b.n	8003798 <rc_receive_fan+0x124>
            else if (reg_fan == 2)
 8003764:	4b10      	ldr	r3, [pc, #64]	; (80037a8 <rc_receive_fan+0x134>)
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	2b02      	cmp	r3, #2
 800376a:	d104      	bne.n	8003776 <rc_receive_fan+0x102>
                device->inflow_speed = 3;
 800376c:	4b10      	ldr	r3, [pc, #64]	; (80037b0 <rc_receive_fan+0x13c>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2203      	movs	r2, #3
 8003772:	739a      	strb	r2, [r3, #14]
}
 8003774:	e010      	b.n	8003798 <rc_receive_fan+0x124>
            else if (reg_fan == 3)
 8003776:	4b0c      	ldr	r3, [pc, #48]	; (80037a8 <rc_receive_fan+0x134>)
 8003778:	781b      	ldrb	r3, [r3, #0]
 800377a:	2b03      	cmp	r3, #3
 800377c:	d104      	bne.n	8003788 <rc_receive_fan+0x114>
                device->inflow_speed = 5;
 800377e:	4b0c      	ldr	r3, [pc, #48]	; (80037b0 <rc_receive_fan+0x13c>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2205      	movs	r2, #5
 8003784:	739a      	strb	r2, [r3, #14]
}
 8003786:	e007      	b.n	8003798 <rc_receive_fan+0x124>
            else if (reg_fan == 4)
 8003788:	4b07      	ldr	r3, [pc, #28]	; (80037a8 <rc_receive_fan+0x134>)
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	2b04      	cmp	r3, #4
 800378e:	d103      	bne.n	8003798 <rc_receive_fan+0x124>
                device->inflow_speed = 7;
 8003790:	4b07      	ldr	r3, [pc, #28]	; (80037b0 <rc_receive_fan+0x13c>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2207      	movs	r2, #7
 8003796:	739a      	strb	r2, [r3, #14]
}
 8003798:	bf00      	nop
 800379a:	3708      	adds	r7, #8
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	20013c66 	.word	0x20013c66
 80037a4:	0801f390 	.word	0x0801f390
 80037a8:	20013c61 	.word	0x20013c61
 80037ac:	20013c62 	.word	0x20013c62
 80037b0:	20013adc 	.word	0x20013adc

080037b4 <rc_receive_work>:

void rc_receive_work()
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	af00      	add	r7, sp, #0
    new_reg_work = modbus_get_holding(DEFAUL_PULT_ID, REG_WORK);
 80037b8:	2107      	movs	r1, #7
 80037ba:	2001      	movs	r0, #1
 80037bc:	f7ff fefc 	bl	80035b8 <modbus_get_holding>
 80037c0:	4603      	mov	r3, r0
 80037c2:	b21a      	sxth	r2, r3
 80037c4:	4b15      	ldr	r3, [pc, #84]	; (800381c <rc_receive_work+0x68>)
 80037c6:	801a      	strh	r2, [r3, #0]
    DEBUG_RC("new_reg_work = %i\n", new_reg_work);
 80037c8:	4b14      	ldr	r3, [pc, #80]	; (800381c <rc_receive_work+0x68>)
 80037ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037ce:	4619      	mov	r1, r3
 80037d0:	4813      	ldr	r0, [pc, #76]	; (8003820 <rc_receive_work+0x6c>)
 80037d2:	f019 fe55 	bl	801d480 <iprintf>
    if (new_reg_work >= 0 && reg_work != new_reg_work)
 80037d6:	4b11      	ldr	r3, [pc, #68]	; (800381c <rc_receive_work+0x68>)
 80037d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	db1a      	blt.n	8003816 <rc_receive_work+0x62>
 80037e0:	4b10      	ldr	r3, [pc, #64]	; (8003824 <rc_receive_work+0x70>)
 80037e2:	781b      	ldrb	r3, [r3, #0]
 80037e4:	461a      	mov	r2, r3
 80037e6:	4b0d      	ldr	r3, [pc, #52]	; (800381c <rc_receive_work+0x68>)
 80037e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d012      	beq.n	8003816 <rc_receive_work+0x62>
    {
        reg_work = new_reg_work;
 80037f0:	4b0a      	ldr	r3, [pc, #40]	; (800381c <rc_receive_work+0x68>)
 80037f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037f6:	b2da      	uxtb	r2, r3
 80037f8:	4b0a      	ldr	r3, [pc, #40]	; (8003824 <rc_receive_work+0x70>)
 80037fa:	701a      	strb	r2, [r3, #0]
        if (reg_work == 0)
 80037fc:	4b09      	ldr	r3, [pc, #36]	; (8003824 <rc_receive_work+0x70>)
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d104      	bne.n	800380e <rc_receive_work+0x5a>
            device->mode = INFLOW_MODE;
 8003804:	4b08      	ldr	r3, [pc, #32]	; (8003828 <rc_receive_work+0x74>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2200      	movs	r2, #0
 800380a:	731a      	strb	r2, [r3, #12]
//                reg_work = 0;
//                limit_work = true;
//            }
        }
    }
}
 800380c:	e003      	b.n	8003816 <rc_receive_work+0x62>
                device->mode = SMART_MODE;
 800380e:	4b06      	ldr	r3, [pc, #24]	; (8003828 <rc_receive_work+0x74>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2201      	movs	r2, #1
 8003814:	731a      	strb	r2, [r3, #12]
}
 8003816:	bf00      	nop
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	20013c64 	.word	0x20013c64
 8003820:	0801f3b4 	.word	0x0801f3b4
 8003824:	20013c68 	.word	0x20013c68
 8003828:	20013adc 	.word	0x20013adc

0800382c <rc_receive_switch>:

void rc_receive_switch()
{
 800382c:	b580      	push	{r7, lr}
 800382e:	af00      	add	r7, sp, #0
    new_reg_switch = modbus_get_holding(DEFAUL_PULT_ID, REG_SWITCH);
 8003830:	2100      	movs	r1, #0
 8003832:	2001      	movs	r0, #1
 8003834:	f7ff fec0 	bl	80035b8 <modbus_get_holding>
 8003838:	4603      	mov	r3, r0
 800383a:	b21a      	sxth	r2, r3
 800383c:	4b25      	ldr	r3, [pc, #148]	; (80038d4 <rc_receive_switch+0xa8>)
 800383e:	801a      	strh	r2, [r3, #0]
    DEBUG_RC("new_reg_switch = %i\n", new_reg_switch);
 8003840:	4b24      	ldr	r3, [pc, #144]	; (80038d4 <rc_receive_switch+0xa8>)
 8003842:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003846:	4619      	mov	r1, r3
 8003848:	4823      	ldr	r0, [pc, #140]	; (80038d8 <rc_receive_switch+0xac>)
 800384a:	f019 fe19 	bl	801d480 <iprintf>
    if (new_reg_switch >= 0)
 800384e:	4b21      	ldr	r3, [pc, #132]	; (80038d4 <rc_receive_switch+0xa8>)
 8003850:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003854:	2b00      	cmp	r3, #0
 8003856:	db1e      	blt.n	8003896 <rc_receive_switch+0x6a>
    {
        pult_link = true;
 8003858:	4b20      	ldr	r3, [pc, #128]	; (80038dc <rc_receive_switch+0xb0>)
 800385a:	2201      	movs	r2, #1
 800385c:	701a      	strb	r2, [r3, #0]
        count_error = 0;
 800385e:	4b20      	ldr	r3, [pc, #128]	; (80038e0 <rc_receive_switch+0xb4>)
 8003860:	2200      	movs	r2, #0
 8003862:	701a      	strb	r2, [r3, #0]
        if (reg_switch != new_reg_switch)
 8003864:	4b1f      	ldr	r3, [pc, #124]	; (80038e4 <rc_receive_switch+0xb8>)
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	461a      	mov	r2, r3
 800386a:	4b1a      	ldr	r3, [pc, #104]	; (80038d4 <rc_receive_switch+0xa8>)
 800386c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003870:	429a      	cmp	r2, r3
 8003872:	d02c      	beq.n	80038ce <rc_receive_switch+0xa2>
        {
            reg_switch = new_reg_switch;
 8003874:	4b17      	ldr	r3, [pc, #92]	; (80038d4 <rc_receive_switch+0xa8>)
 8003876:	f9b3 3000 	ldrsh.w	r3, [r3]
 800387a:	b2da      	uxtb	r2, r3
 800387c:	4b19      	ldr	r3, [pc, #100]	; (80038e4 <rc_receive_switch+0xb8>)
 800387e:	701a      	strb	r2, [r3, #0]
            device->state = reg_switch;
 8003880:	4b18      	ldr	r3, [pc, #96]	; (80038e4 <rc_receive_switch+0xb8>)
 8003882:	781a      	ldrb	r2, [r3, #0]
 8003884:	4b18      	ldr	r3, [pc, #96]	; (80038e8 <rc_receive_switch+0xbc>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2a00      	cmp	r2, #0
 800388a:	bf14      	ite	ne
 800388c:	2201      	movne	r2, #1
 800388e:	2200      	moveq	r2, #0
 8003890:	b2d2      	uxtb	r2, r2
 8003892:	709a      	strb	r2, [r3, #2]
            write_device_params(device);
            pult_link = false;
            DEBUG_RC("remote_control communication break\n");
        }
    }
}
 8003894:	e01b      	b.n	80038ce <rc_receive_switch+0xa2>
        count_error++;
 8003896:	4b12      	ldr	r3, [pc, #72]	; (80038e0 <rc_receive_switch+0xb4>)
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	3301      	adds	r3, #1
 800389c:	b2da      	uxtb	r2, r3
 800389e:	4b10      	ldr	r3, [pc, #64]	; (80038e0 <rc_receive_switch+0xb4>)
 80038a0:	701a      	strb	r2, [r3, #0]
        if (count_error == LIMIT_ERROR)
 80038a2:	4b0f      	ldr	r3, [pc, #60]	; (80038e0 <rc_receive_switch+0xb4>)
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	2b03      	cmp	r3, #3
 80038a8:	d111      	bne.n	80038ce <rc_receive_switch+0xa2>
            count_error = 0;
 80038aa:	4b0d      	ldr	r3, [pc, #52]	; (80038e0 <rc_receive_switch+0xb4>)
 80038ac:	2200      	movs	r2, #0
 80038ae:	701a      	strb	r2, [r3, #0]
            device->remote_control.error = true;
 80038b0:	4b0d      	ldr	r3, [pc, #52]	; (80038e8 <rc_receive_switch+0xbc>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2201      	movs	r2, #1
 80038b6:	729a      	strb	r2, [r3, #10]
            write_device_params(device);
 80038b8:	4b0b      	ldr	r3, [pc, #44]	; (80038e8 <rc_receive_switch+0xbc>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4618      	mov	r0, r3
 80038be:	f000 fb8f 	bl	8003fe0 <write_device_params>
            pult_link = false;
 80038c2:	4b06      	ldr	r3, [pc, #24]	; (80038dc <rc_receive_switch+0xb0>)
 80038c4:	2200      	movs	r2, #0
 80038c6:	701a      	strb	r2, [r3, #0]
            DEBUG_RC("remote_control communication break\n");
 80038c8:	4808      	ldr	r0, [pc, #32]	; (80038ec <rc_receive_switch+0xc0>)
 80038ca:	f019 fe5f 	bl	801d58c <puts>
}
 80038ce:	bf00      	nop
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	20013c54 	.word	0x20013c54
 80038d8:	0801f3d8 	.word	0x0801f3d8
 80038dc:	10000000 	.word	0x10000000
 80038e0:	2000003b 	.word	0x2000003b
 80038e4:	20013c56 	.word	0x20013c56
 80038e8:	20013adc 	.word	0x20013adc
 80038ec:	0801f400 	.word	0x0801f400

080038f0 <rc_receive_handler>:

void rc_receive_handler()
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	af00      	add	r7, sp, #0
    rc_receive_switch();
 80038f4:	f7ff ff9a 	bl	800382c <rc_receive_switch>
    if (device->state)
 80038f8:	4b06      	ldr	r3, [pc, #24]	; (8003914 <rc_receive_handler+0x24>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	789b      	ldrb	r3, [r3, #2]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d005      	beq.n	800390e <rc_receive_handler+0x1e>
    {
        rc_receive_work();
 8003902:	f7ff ff57 	bl	80037b4 <rc_receive_work>
        rc_receive_fan();
 8003906:	f7ff feb5 	bl	8003674 <rc_receive_fan>
        rc_receive_temp();
 800390a:	f7ff fe69 	bl	80035e0 <rc_receive_temp>
    }
}
 800390e:	bf00      	nop
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	20013adc 	.word	0x20013adc

08003918 <check_limit_temp>:

void check_limit_temp()
{
 8003918:	b580      	push	{r7, lr}
 800391a:	af00      	add	r7, sp, #0
    if (limit_temp)
 800391c:	4b08      	ldr	r3, [pc, #32]	; (8003940 <check_limit_temp+0x28>)
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d00a      	beq.n	800393a <check_limit_temp+0x22>
    {
        limit_temp = false;
 8003924:	4b06      	ldr	r3, [pc, #24]	; (8003940 <check_limit_temp+0x28>)
 8003926:	2200      	movs	r2, #0
 8003928:	701a      	strb	r2, [r3, #0]
        modbus_set_holding(DEFAUL_PULT_ID, REG_TEMP, reg_temp);
 800392a:	4b06      	ldr	r3, [pc, #24]	; (8003944 <check_limit_temp+0x2c>)
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	b29b      	uxth	r3, r3
 8003930:	461a      	mov	r2, r3
 8003932:	2102      	movs	r1, #2
 8003934:	2001      	movs	r0, #1
 8003936:	f7ff fe2b 	bl	8003590 <modbus_set_holding>
    }
}
 800393a:	bf00      	nop
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	20013c57 	.word	0x20013c57
 8003944:	20013c60 	.word	0x20013c60

08003948 <check_limit_fan>:

void check_limit_fan()
{
 8003948:	b580      	push	{r7, lr}
 800394a:	af00      	add	r7, sp, #0
    if (limit_fan)
 800394c:	4b08      	ldr	r3, [pc, #32]	; (8003970 <check_limit_fan+0x28>)
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d00a      	beq.n	800396a <check_limit_fan+0x22>
    {
        limit_fan = false;
 8003954:	4b06      	ldr	r3, [pc, #24]	; (8003970 <check_limit_fan+0x28>)
 8003956:	2200      	movs	r2, #0
 8003958:	701a      	strb	r2, [r3, #0]
        modbus_set_holding(DEFAUL_PULT_ID, REG_FAN, reg_fan);
 800395a:	4b06      	ldr	r3, [pc, #24]	; (8003974 <check_limit_fan+0x2c>)
 800395c:	781b      	ldrb	r3, [r3, #0]
 800395e:	b29b      	uxth	r3, r3
 8003960:	461a      	mov	r2, r3
 8003962:	2101      	movs	r1, #1
 8003964:	2001      	movs	r0, #1
 8003966:	f7ff fe13 	bl	8003590 <modbus_set_holding>
    }
}
 800396a:	bf00      	nop
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	20013c62 	.word	0x20013c62
 8003974:	20013c61 	.word	0x20013c61

08003978 <check_limit_work>:

void check_limit_work()
{
 8003978:	b580      	push	{r7, lr}
 800397a:	af00      	add	r7, sp, #0
    if (limit_work)
 800397c:	4b08      	ldr	r3, [pc, #32]	; (80039a0 <check_limit_work+0x28>)
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d00a      	beq.n	800399a <check_limit_work+0x22>
    {
        limit_work = false;
 8003984:	4b06      	ldr	r3, [pc, #24]	; (80039a0 <check_limit_work+0x28>)
 8003986:	2200      	movs	r2, #0
 8003988:	701a      	strb	r2, [r3, #0]
        modbus_set_holding(DEFAUL_PULT_ID, REG_WORK, reg_work);
 800398a:	4b06      	ldr	r3, [pc, #24]	; (80039a4 <check_limit_work+0x2c>)
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	b29b      	uxth	r3, r3
 8003990:	461a      	mov	r2, r3
 8003992:	2107      	movs	r1, #7
 8003994:	2001      	movs	r0, #1
 8003996:	f7ff fdfb 	bl	8003590 <modbus_set_holding>
    }
}
 800399a:	bf00      	nop
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	2000003a 	.word	0x2000003a
 80039a4:	20013c68 	.word	0x20013c68

080039a8 <check_changes>:

void check_changes()
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	af00      	add	r7, sp, #0
    // проверяем изменения вкл/выкл прибора
    if (device->state != reg_switch)
 80039ac:	4b72      	ldr	r3, [pc, #456]	; (8003b78 <check_changes+0x1d0>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	789b      	ldrb	r3, [r3, #2]
 80039b2:	461a      	mov	r2, r3
 80039b4:	4b71      	ldr	r3, [pc, #452]	; (8003b7c <check_changes+0x1d4>)
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d008      	beq.n	80039ce <check_changes+0x26>
        modbus_set_holding(DEFAUL_PULT_ID, REG_SWITCH, device->state);
 80039bc:	4b6e      	ldr	r3, [pc, #440]	; (8003b78 <check_changes+0x1d0>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	789b      	ldrb	r3, [r3, #2]
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	461a      	mov	r2, r3
 80039c6:	2100      	movs	r1, #0
 80039c8:	2001      	movs	r0, #1
 80039ca:	f7ff fde1 	bl	8003590 <modbus_set_holding>
    if (device->state == ON)
 80039ce:	4b6a      	ldr	r3, [pc, #424]	; (8003b78 <check_changes+0x1d0>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	789b      	ldrb	r3, [r3, #2]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	f000 80cc 	beq.w	8003b72 <check_changes+0x1ca>
    {
        // проверяем изменения в установке выбранного режима
        if (device->mode != reg_work)
 80039da:	4b67      	ldr	r3, [pc, #412]	; (8003b78 <check_changes+0x1d0>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	7b1a      	ldrb	r2, [r3, #12]
 80039e0:	4b67      	ldr	r3, [pc, #412]	; (8003b80 <check_changes+0x1d8>)
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d02b      	beq.n	8003a40 <check_changes+0x98>
        {
            if (device->mode == INFLOW_MODE)
 80039e8:	4b63      	ldr	r3, [pc, #396]	; (8003b78 <check_changes+0x1d0>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	7b1b      	ldrb	r3, [r3, #12]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d107      	bne.n	8003a02 <check_changes+0x5a>
            {
                modbus_set_holding(DEFAUL_PULT_ID, REG_WORK, 0);
 80039f2:	2200      	movs	r2, #0
 80039f4:	2107      	movs	r1, #7
 80039f6:	2001      	movs	r0, #1
 80039f8:	f7ff fdca 	bl	8003590 <modbus_set_holding>
                DEBUG_RC("sent a message INFLOW_MODE\n");
 80039fc:	4861      	ldr	r0, [pc, #388]	; (8003b84 <check_changes+0x1dc>)
 80039fe:	f019 fdc5 	bl	801d58c <puts>
            }
            if (device->mode == SMART_MODE)
 8003a02:	4b5d      	ldr	r3, [pc, #372]	; (8003b78 <check_changes+0x1d0>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	7b1b      	ldrb	r3, [r3, #12]
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d107      	bne.n	8003a1c <check_changes+0x74>
            {
                modbus_set_holding(DEFAUL_PULT_ID, REG_WORK, 1);
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	2107      	movs	r1, #7
 8003a10:	2001      	movs	r0, #1
 8003a12:	f7ff fdbd 	bl	8003590 <modbus_set_holding>
                DEBUG_RC("sent a message SMART_MODE\n");
 8003a16:	485c      	ldr	r0, [pc, #368]	; (8003b88 <check_changes+0x1e0>)
 8003a18:	f019 fdb8 	bl	801d58c <puts>
            }
            if (device->mode == INFLOW_MAX_MODE)
 8003a1c:	4b56      	ldr	r3, [pc, #344]	; (8003b78 <check_changes+0x1d0>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	7b1b      	ldrb	r3, [r3, #12]
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d10c      	bne.n	8003a40 <check_changes+0x98>
            {
                modbus_set_holding(DEFAUL_PULT_ID, REG_WORK, 0);
 8003a26:	2200      	movs	r2, #0
 8003a28:	2107      	movs	r1, #7
 8003a2a:	2001      	movs	r0, #1
 8003a2c:	f7ff fdb0 	bl	8003590 <modbus_set_holding>
                modbus_set_holding(DEFAUL_PULT_ID, REG_FAN, 4);
 8003a30:	2204      	movs	r2, #4
 8003a32:	2101      	movs	r1, #1
 8003a34:	2001      	movs	r0, #1
 8003a36:	f7ff fdab 	bl	8003590 <modbus_set_holding>
                DEBUG_RC("sent a message INFLOW_MAX_MODE\n");
 8003a3a:	4854      	ldr	r0, [pc, #336]	; (8003b8c <check_changes+0x1e4>)
 8003a3c:	f019 fda6 	bl	801d58c <puts>
            }
        }
        // проверяем изменения в установке скорости режима INFLOW_MODE
        if (device->mode == INFLOW_MODE)
 8003a40:	4b4d      	ldr	r3, [pc, #308]	; (8003b78 <check_changes+0x1d0>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	7b1b      	ldrb	r3, [r3, #12]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d155      	bne.n	8003af6 <check_changes+0x14e>
        {
            // проверяем изменения в установке 1 скорости
            if (device->inflow_speed == 1 && reg_fan != 1)
 8003a4a:	4b4b      	ldr	r3, [pc, #300]	; (8003b78 <check_changes+0x1d0>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	7b9b      	ldrb	r3, [r3, #14]
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d10c      	bne.n	8003a6e <check_changes+0xc6>
 8003a54:	4b4e      	ldr	r3, [pc, #312]	; (8003b90 <check_changes+0x1e8>)
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d008      	beq.n	8003a6e <check_changes+0xc6>
            {
                modbus_set_holding(DEFAUL_PULT_ID, REG_FAN, 1);
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	2101      	movs	r1, #1
 8003a60:	2001      	movs	r0, #1
 8003a62:	f7ff fd95 	bl	8003590 <modbus_set_holding>
                DEBUG_RC("sent a message speed == 1\n");
 8003a66:	484b      	ldr	r0, [pc, #300]	; (8003b94 <check_changes+0x1ec>)
 8003a68:	f019 fd90 	bl	801d58c <puts>
 8003a6c:	e043      	b.n	8003af6 <check_changes+0x14e>
            }
            // проверяем изменения в установке 3 скорости
            else if ((device->inflow_speed == 2 || device->inflow_speed == 3 || device->inflow_speed == 4) && reg_fan != 2)
 8003a6e:	4b42      	ldr	r3, [pc, #264]	; (8003b78 <check_changes+0x1d0>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	7b9b      	ldrb	r3, [r3, #14]
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d009      	beq.n	8003a8c <check_changes+0xe4>
 8003a78:	4b3f      	ldr	r3, [pc, #252]	; (8003b78 <check_changes+0x1d0>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	7b9b      	ldrb	r3, [r3, #14]
 8003a7e:	2b03      	cmp	r3, #3
 8003a80:	d004      	beq.n	8003a8c <check_changes+0xe4>
 8003a82:	4b3d      	ldr	r3, [pc, #244]	; (8003b78 <check_changes+0x1d0>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	7b9b      	ldrb	r3, [r3, #14]
 8003a88:	2b04      	cmp	r3, #4
 8003a8a:	d10c      	bne.n	8003aa6 <check_changes+0xfe>
 8003a8c:	4b40      	ldr	r3, [pc, #256]	; (8003b90 <check_changes+0x1e8>)
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	2b02      	cmp	r3, #2
 8003a92:	d008      	beq.n	8003aa6 <check_changes+0xfe>
            {
                modbus_set_holding(DEFAUL_PULT_ID, REG_FAN, 2);
 8003a94:	2202      	movs	r2, #2
 8003a96:	2101      	movs	r1, #1
 8003a98:	2001      	movs	r0, #1
 8003a9a:	f7ff fd79 	bl	8003590 <modbus_set_holding>
                DEBUG_RC("sent a message speed == 3\n");
 8003a9e:	483e      	ldr	r0, [pc, #248]	; (8003b98 <check_changes+0x1f0>)
 8003aa0:	f019 fd74 	bl	801d58c <puts>
 8003aa4:	e027      	b.n	8003af6 <check_changes+0x14e>
            }
            // проверяем изменения в установке 5 скорости
            else if ((device->inflow_speed == 5 || device->inflow_speed == 6) && reg_fan != 3)
 8003aa6:	4b34      	ldr	r3, [pc, #208]	; (8003b78 <check_changes+0x1d0>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	7b9b      	ldrb	r3, [r3, #14]
 8003aac:	2b05      	cmp	r3, #5
 8003aae:	d004      	beq.n	8003aba <check_changes+0x112>
 8003ab0:	4b31      	ldr	r3, [pc, #196]	; (8003b78 <check_changes+0x1d0>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	7b9b      	ldrb	r3, [r3, #14]
 8003ab6:	2b06      	cmp	r3, #6
 8003ab8:	d10c      	bne.n	8003ad4 <check_changes+0x12c>
 8003aba:	4b35      	ldr	r3, [pc, #212]	; (8003b90 <check_changes+0x1e8>)
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	2b03      	cmp	r3, #3
 8003ac0:	d008      	beq.n	8003ad4 <check_changes+0x12c>
            {
                modbus_set_holding(DEFAUL_PULT_ID, REG_FAN, 3);
 8003ac2:	2203      	movs	r2, #3
 8003ac4:	2101      	movs	r1, #1
 8003ac6:	2001      	movs	r0, #1
 8003ac8:	f7ff fd62 	bl	8003590 <modbus_set_holding>
                DEBUG_RC("sent a message speed == 5\n");
 8003acc:	4833      	ldr	r0, [pc, #204]	; (8003b9c <check_changes+0x1f4>)
 8003ace:	f019 fd5d 	bl	801d58c <puts>
 8003ad2:	e010      	b.n	8003af6 <check_changes+0x14e>
            }
            // проверяем изменения в установке 7 скорости
            else if (device->inflow_speed == 7 && reg_fan != 4)
 8003ad4:	4b28      	ldr	r3, [pc, #160]	; (8003b78 <check_changes+0x1d0>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	7b9b      	ldrb	r3, [r3, #14]
 8003ada:	2b07      	cmp	r3, #7
 8003adc:	d10b      	bne.n	8003af6 <check_changes+0x14e>
 8003ade:	4b2c      	ldr	r3, [pc, #176]	; (8003b90 <check_changes+0x1e8>)
 8003ae0:	781b      	ldrb	r3, [r3, #0]
 8003ae2:	2b04      	cmp	r3, #4
 8003ae4:	d007      	beq.n	8003af6 <check_changes+0x14e>
            {
                modbus_set_holding(DEFAUL_PULT_ID, REG_FAN, 4);
 8003ae6:	2204      	movs	r2, #4
 8003ae8:	2101      	movs	r1, #1
 8003aea:	2001      	movs	r0, #1
 8003aec:	f7ff fd50 	bl	8003590 <modbus_set_holding>
                DEBUG_RC("sent a message speed == 7\n");
 8003af0:	482b      	ldr	r0, [pc, #172]	; (8003ba0 <check_changes+0x1f8>)
 8003af2:	f019 fd4b 	bl	801d58c <puts>
            }
        }
        // проверяем изменения в установке температуры тена
        if (heaters->ten.temp_limit != reg_temp)
 8003af6:	4b2b      	ldr	r3, [pc, #172]	; (8003ba4 <check_changes+0x1fc>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	4a2a      	ldr	r2, [pc, #168]	; (8003ba8 <check_changes+0x200>)
 8003afe:	7812      	ldrb	r2, [r2, #0]
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d00b      	beq.n	8003b1c <check_changes+0x174>
        {
            modbus_set_holding(DEFAUL_PULT_ID, REG_TEMP, heaters->ten.temp_limit);
 8003b04:	4b27      	ldr	r3, [pc, #156]	; (8003ba4 <check_changes+0x1fc>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	2102      	movs	r1, #2
 8003b10:	2001      	movs	r0, #1
 8003b12:	f7ff fd3d 	bl	8003590 <modbus_set_holding>
            DEBUG_RC("sent a message ten");
 8003b16:	4825      	ldr	r0, [pc, #148]	; (8003bac <check_changes+0x204>)
 8003b18:	f019 fcb2 	bl	801d480 <iprintf>
        }
        // проверяем изменения в установке значка включения тена
        if (heaters->ten.power > 0 && !reg_heater)
 8003b1c:	4b21      	ldr	r3, [pc, #132]	; (8003ba4 <check_changes+0x1fc>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	8a1b      	ldrh	r3, [r3, #16]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d011      	beq.n	8003b4a <check_changes+0x1a2>
 8003b26:	4b22      	ldr	r3, [pc, #136]	; (8003bb0 <check_changes+0x208>)
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	f083 0301 	eor.w	r3, r3, #1
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d00a      	beq.n	8003b4a <check_changes+0x1a2>
        {
            reg_heater = true;
 8003b34:	4b1e      	ldr	r3, [pc, #120]	; (8003bb0 <check_changes+0x208>)
 8003b36:	2201      	movs	r2, #1
 8003b38:	701a      	strb	r2, [r3, #0]
            modbus_set_holding(DEFAUL_PULT_ID, REG_HEATER, ON);
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	210a      	movs	r1, #10
 8003b3e:	2001      	movs	r0, #1
 8003b40:	f7ff fd26 	bl	8003590 <modbus_set_holding>
            DEBUG_RC("sent a message ten.power > 0\n");
 8003b44:	481b      	ldr	r0, [pc, #108]	; (8003bb4 <check_changes+0x20c>)
 8003b46:	f019 fd21 	bl	801d58c <puts>
        }
        if (heaters->ten.power == 0 && reg_heater)
 8003b4a:	4b16      	ldr	r3, [pc, #88]	; (8003ba4 <check_changes+0x1fc>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	8a1b      	ldrh	r3, [r3, #16]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d10e      	bne.n	8003b72 <check_changes+0x1ca>
 8003b54:	4b16      	ldr	r3, [pc, #88]	; (8003bb0 <check_changes+0x208>)
 8003b56:	781b      	ldrb	r3, [r3, #0]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d00a      	beq.n	8003b72 <check_changes+0x1ca>
        {
            reg_heater = false;
 8003b5c:	4b14      	ldr	r3, [pc, #80]	; (8003bb0 <check_changes+0x208>)
 8003b5e:	2200      	movs	r2, #0
 8003b60:	701a      	strb	r2, [r3, #0]
            modbus_set_holding(DEFAUL_PULT_ID, REG_HEATER, OFF);
 8003b62:	2200      	movs	r2, #0
 8003b64:	210a      	movs	r1, #10
 8003b66:	2001      	movs	r0, #1
 8003b68:	f7ff fd12 	bl	8003590 <modbus_set_holding>
            DEBUG_RC("sent a message ten.power = 0\n");
 8003b6c:	4812      	ldr	r0, [pc, #72]	; (8003bb8 <check_changes+0x210>)
 8003b6e:	f019 fd0d 	bl	801d58c <puts>
        }
    }
}
 8003b72:	bf00      	nop
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	20013adc 	.word	0x20013adc
 8003b7c:	20013c56 	.word	0x20013c56
 8003b80:	20013c68 	.word	0x20013c68
 8003b84:	0801f434 	.word	0x0801f434
 8003b88:	0801f460 	.word	0x0801f460
 8003b8c:	0801f48c 	.word	0x0801f48c
 8003b90:	20013c61 	.word	0x20013c61
 8003b94:	0801f4bc 	.word	0x0801f4bc
 8003b98:	0801f4e8 	.word	0x0801f4e8
 8003b9c:	0801f514 	.word	0x0801f514
 8003ba0:	0801f540 	.word	0x0801f540
 8003ba4:	2001399c 	.word	0x2001399c
 8003ba8:	20013c60 	.word	0x20013c60
 8003bac:	0801f56c 	.word	0x0801f56c
 8003bb0:	20000039 	.word	0x20000039
 8003bb4:	0801f590 	.word	0x0801f590
 8003bb8:	0801f5c0 	.word	0x0801f5c0

08003bbc <rc_send_handler>:

void rc_send_handler()
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	af00      	add	r7, sp, #0
    check_limit_fan();
 8003bc0:	f7ff fec2 	bl	8003948 <check_limit_fan>
    check_limit_temp();
 8003bc4:	f7ff fea8 	bl	8003918 <check_limit_temp>
    check_changes();
 8003bc8:	f7ff feee 	bl	80039a8 <check_changes>
    check_limit_work();
 8003bcc:	f7ff fed4 	bl	8003978 <check_limit_work>
}
 8003bd0:	bf00      	nop
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <try_connect>:

void try_connect()
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	af00      	add	r7, sp, #0
    count_link++;
 8003bd8:	4b12      	ldr	r3, [pc, #72]	; (8003c24 <try_connect+0x50>)
 8003bda:	781b      	ldrb	r3, [r3, #0]
 8003bdc:	3301      	adds	r3, #1
 8003bde:	b2da      	uxtb	r2, r3
 8003be0:	4b10      	ldr	r3, [pc, #64]	; (8003c24 <try_connect+0x50>)
 8003be2:	701a      	strb	r2, [r3, #0]
    if (count_link == LIMIT_LINK)
 8003be4:	4b0f      	ldr	r3, [pc, #60]	; (8003c24 <try_connect+0x50>)
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	2b1e      	cmp	r3, #30
 8003bea:	d119      	bne.n	8003c20 <try_connect+0x4c>
    {
        count_link = 0;
 8003bec:	4b0d      	ldr	r3, [pc, #52]	; (8003c24 <try_connect+0x50>)
 8003bee:	2200      	movs	r2, #0
 8003bf0:	701a      	strb	r2, [r3, #0]
//        mbc_master_destroy();
//        start_modbus_master();
        new_reg_switch = modbus_get_holding(DEFAUL_PULT_ID, REG_SWITCH);
 8003bf2:	2100      	movs	r1, #0
 8003bf4:	2001      	movs	r0, #1
 8003bf6:	f7ff fcdf 	bl	80035b8 <modbus_get_holding>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	b21a      	sxth	r2, r3
 8003bfe:	4b0a      	ldr	r3, [pc, #40]	; (8003c28 <try_connect+0x54>)
 8003c00:	801a      	strh	r2, [r3, #0]
        if (new_reg_switch >= 0)
 8003c02:	4b09      	ldr	r3, [pc, #36]	; (8003c28 <try_connect+0x54>)
 8003c04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	db09      	blt.n	8003c20 <try_connect+0x4c>
        {
            DEBUG_RC("connect pult\n");
 8003c0c:	4807      	ldr	r0, [pc, #28]	; (8003c2c <try_connect+0x58>)
 8003c0e:	f019 fcbd 	bl	801d58c <puts>
            pult_link = true;
 8003c12:	4b07      	ldr	r3, [pc, #28]	; (8003c30 <try_connect+0x5c>)
 8003c14:	2201      	movs	r2, #1
 8003c16:	701a      	strb	r2, [r3, #0]
            device->remote_control.error = OFF;
 8003c18:	4b06      	ldr	r3, [pc, #24]	; (8003c34 <try_connect+0x60>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	729a      	strb	r2, [r3, #10]
        }
    }
}
 8003c20:	bf00      	nop
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	2000003c 	.word	0x2000003c
 8003c28:	20013c54 	.word	0x20013c54
 8003c2c:	0801f5f0 	.word	0x0801f5f0
 8003c30:	10000000 	.word	0x10000000
 8003c34:	20013adc 	.word	0x20013adc

08003c38 <RemoteControlTask>:

void RemoteControlTask(void *argument)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
	for (;;)
	{
        if (pult_link)
 8003c40:	4b07      	ldr	r3, [pc, #28]	; (8003c60 <RemoteControlTask+0x28>)
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d004      	beq.n	8003c52 <RemoteControlTask+0x1a>
        {
            rc_receive_handler();
 8003c48:	f7ff fe52 	bl	80038f0 <rc_receive_handler>
            rc_send_handler();
 8003c4c:	f7ff ffb6 	bl	8003bbc <rc_send_handler>
 8003c50:	e001      	b.n	8003c56 <RemoteControlTask+0x1e>
        }
        else
        {
        	try_connect();
 8003c52:	f7ff ffbf 	bl	8003bd4 <try_connect>
        }
		osDelay(1000);
 8003c56:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003c5a:	f008 fc02 	bl	800c462 <osDelay>
        if (pult_link)
 8003c5e:	e7ef      	b.n	8003c40 <RemoteControlTask+0x8>
 8003c60:	10000000 	.word	0x10000000

08003c64 <create_remote_control_task>:
	}
}

void create_remote_control_task()
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	af00      	add	r7, sp, #0
	modbusMasterTaskHandle = osThreadNew(RemoteControlTask, NULL, &modbusMasterTask_attributes);
 8003c68:	4a04      	ldr	r2, [pc, #16]	; (8003c7c <create_remote_control_task+0x18>)
 8003c6a:	2100      	movs	r1, #0
 8003c6c:	4804      	ldr	r0, [pc, #16]	; (8003c80 <create_remote_control_task+0x1c>)
 8003c6e:	f008 fb5a 	bl	800c326 <osThreadNew>
 8003c72:	4603      	mov	r3, r0
 8003c74:	4a03      	ldr	r2, [pc, #12]	; (8003c84 <create_remote_control_task+0x20>)
 8003c76:	6013      	str	r3, [r2, #0]
}
 8003c78:	bf00      	nop
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	08022600 	.word	0x08022600
 8003c80:	08003c39 	.word	0x08003c39
 8003c84:	20013c5c 	.word	0x20013c5c

08003c88 <check_remote_control>:

void check_remote_control()
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	af00      	add	r7, sp, #0
	if (modbus_set_holding(DEFAUL_PULT_ID, REG_SWITCH, 0) == 1)
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	2100      	movs	r1, #0
 8003c90:	2001      	movs	r0, #1
 8003c92:	f7ff fc7d 	bl	8003590 <modbus_set_holding>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d106      	bne.n	8003caa <check_remote_control+0x22>
	{
		device->remote_control.find = ON;
 8003c9c:	4b08      	ldr	r3, [pc, #32]	; (8003cc0 <check_remote_control+0x38>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	725a      	strb	r2, [r3, #9]
		create_remote_control_task();
 8003ca4:	f7ff ffde 	bl	8003c64 <create_remote_control_task>
	    {
	        device->remote_control.error = ON;
	    }
	}
//	write_device_params();
}
 8003ca8:	e008      	b.n	8003cbc <check_remote_control+0x34>
	    if (device->remote_control.find)
 8003caa:	4b05      	ldr	r3, [pc, #20]	; (8003cc0 <check_remote_control+0x38>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	7a5b      	ldrb	r3, [r3, #9]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d003      	beq.n	8003cbc <check_remote_control+0x34>
	        device->remote_control.error = ON;
 8003cb4:	4b02      	ldr	r3, [pc, #8]	; (8003cc0 <check_remote_control+0x38>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2201      	movs	r2, #1
 8003cba:	729a      	strb	r2, [r3, #10]
}
 8003cbc:	bf00      	nop
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	20013adc 	.word	0x20013adc

08003cc4 <init_ds_devices>:
	get_ds_data();
	mass_temp();
}

void init_ds_devices()
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	af00      	add	r7, sp, #0
	DwtInit();
 8003cc8:	f7fd fa44 	bl	8001154 <DwtInit>

	OW.DataPin = DS_Pin;
 8003ccc:	4b15      	ldr	r3, [pc, #84]	; (8003d24 <init_ds_devices+0x60>)
 8003cce:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003cd2:	819a      	strh	r2, [r3, #12]
	OW.DataPort = DS_GPIO_Port;
 8003cd4:	4b13      	ldr	r3, [pc, #76]	; (8003d24 <init_ds_devices+0x60>)
 8003cd6:	4a14      	ldr	r2, [pc, #80]	; (8003d28 <init_ds_devices+0x64>)
 8003cd8:	611a      	str	r2, [r3, #16]
	DS.Resolution = DS18B20_Resolution_12bits;
 8003cda:	4b14      	ldr	r3, [pc, #80]	; (8003d2c <init_ds_devices+0x68>)
 8003cdc:	220c      	movs	r2, #12
 8003cde:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	DS18B20_Init(&DS, &OW);
 8003ce2:	4910      	ldr	r1, [pc, #64]	; (8003d24 <init_ds_devices+0x60>)
 8003ce4:	4811      	ldr	r0, [pc, #68]	; (8003d2c <init_ds_devices+0x68>)
 8003ce6:	f7fd f9f7 	bl	80010d8 <DS18B20_Init>
	/* Set high temperature alarm on device number 0, 31 Deg C */
	DS18B20_SetTempAlarm(&OW, DS.DevAddr[0], 0, 31);
 8003cea:	231f      	movs	r3, #31
 8003cec:	2200      	movs	r2, #0
 8003cee:	490f      	ldr	r1, [pc, #60]	; (8003d2c <init_ds_devices+0x68>)
 8003cf0:	480c      	ldr	r0, [pc, #48]	; (8003d24 <init_ds_devices+0x60>)
 8003cf2:	f7fd f974 	bl	8000fde <DS18B20_SetTempAlarm>

	OW2.DataPin = DS_Pin2;
 8003cf6:	4b0e      	ldr	r3, [pc, #56]	; (8003d30 <init_ds_devices+0x6c>)
 8003cf8:	2240      	movs	r2, #64	; 0x40
 8003cfa:	819a      	strh	r2, [r3, #12]
	OW2.DataPort = DS_GPIO_Port2;
 8003cfc:	4b0c      	ldr	r3, [pc, #48]	; (8003d30 <init_ds_devices+0x6c>)
 8003cfe:	4a0d      	ldr	r2, [pc, #52]	; (8003d34 <init_ds_devices+0x70>)
 8003d00:	611a      	str	r2, [r3, #16]
	DS2.Resolution = DS18B20_Resolution_12bits;
 8003d02:	4b0d      	ldr	r3, [pc, #52]	; (8003d38 <init_ds_devices+0x74>)
 8003d04:	220c      	movs	r2, #12
 8003d06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	/* Set high temperature alarm on device number 0, 31 Deg C */
	DS18B20_Init(&DS2, &OW2);
 8003d0a:	4909      	ldr	r1, [pc, #36]	; (8003d30 <init_ds_devices+0x6c>)
 8003d0c:	480a      	ldr	r0, [pc, #40]	; (8003d38 <init_ds_devices+0x74>)
 8003d0e:	f7fd f9e3 	bl	80010d8 <DS18B20_Init>
	DS18B20_SetTempAlarm(&OW2, DS2.DevAddr[0], 0, 60);
 8003d12:	233c      	movs	r3, #60	; 0x3c
 8003d14:	2200      	movs	r2, #0
 8003d16:	4908      	ldr	r1, [pc, #32]	; (8003d38 <init_ds_devices+0x74>)
 8003d18:	4805      	ldr	r0, [pc, #20]	; (8003d30 <init_ds_devices+0x6c>)
 8003d1a:	f7fd f960 	bl	8000fde <DS18B20_SetTempAlarm>
}
 8003d1e:	bf00      	nop
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	20013c84 	.word	0x20013c84
 8003d28:	40020c00 	.word	0x40020c00
 8003d2c:	20013cc4 	.word	0x20013cc4
 8003d30:	20013c6c 	.word	0x20013c6c
 8003d34:	40020800 	.word	0x40020800
 8003d38:	20013c98 	.word	0x20013c98

08003d3c <init_sht_devices>:
		DEBUG_SHT("read data from sht30 fail.\n");
	}
}

void init_sht_devices()
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	af00      	add	r7, sp, #0
	SHT30_reset();
 8003d40:	f7ff fc12 	bl	8003568 <SHT30_reset>
	if(SHT30_Init() == HAL_OK)
 8003d44:	f7ff fc1b 	bl	800357e <SHT30_Init>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d103      	bne.n	8003d56 <init_sht_devices+0x1a>
	{
		DEBUG_SHT("sht30 init ok.\n");
 8003d4e:	4804      	ldr	r0, [pc, #16]	; (8003d60 <init_sht_devices+0x24>)
 8003d50:	f019 fc1c 	bl	801d58c <puts>
	}
	else
	{
		DEBUG_SHT("sht30 init fail.\n");
	}
}
 8003d54:	e002      	b.n	8003d5c <init_sht_devices+0x20>
		DEBUG_SHT("sht30 init fail.\n");
 8003d56:	4803      	ldr	r0, [pc, #12]	; (8003d64 <init_sht_devices+0x28>)
 8003d58:	f019 fc18 	bl	801d58c <puts>
}
 8003d5c:	bf00      	nop
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	0801f680 	.word	0x0801f680
 8003d64:	0801f698 	.word	0x0801f698

08003d68 <first_init_heaters>:
#include "storage.h"
#include "main.h"
#include <string.h>

void first_init_heaters()
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	af00      	add	r7, sp, #0
    heaters->ten.off_temp = TEN_OFF_TEMP;
 8003d6c:	4b1a      	ldr	r3, [pc, #104]	; (8003dd8 <first_init_heaters+0x70>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	222d      	movs	r2, #45	; 0x2d
 8003d72:	609a      	str	r2, [r3, #8]
    heaters->ten.off_temp_under = TEN_OFF_UNDER;
 8003d74:	4b18      	ldr	r3, [pc, #96]	; (8003dd8 <first_init_heaters+0x70>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2205      	movs	r2, #5
 8003d7a:	60da      	str	r2, [r3, #12]
    heaters->ten.temp_limit = TEN_TEMP_LIMIT;
 8003d7c:	4b16      	ldr	r3, [pc, #88]	; (8003dd8 <first_init_heaters+0x70>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2219      	movs	r2, #25
 8003d82:	605a      	str	r2, [r3, #4]
    heaters->ten.started_value = TEN_STARTED_VALUE;
 8003d84:	4b14      	ldr	r3, [pc, #80]	; (8003dd8 <first_init_heaters+0x70>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2203      	movs	r2, #3
 8003d8a:	749a      	strb	r2, [r3, #18]
    heaters->ten.power_koef = TEN_POWER_KOEF;
 8003d8c:	4b12      	ldr	r3, [pc, #72]	; (8003dd8 <first_init_heaters+0x70>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2203      	movs	r2, #3
 8003d92:	615a      	str	r2, [r3, #20]

    heaters->on_off_ten = ON;
 8003d94:	4b10      	ldr	r3, [pc, #64]	; (8003dd8 <first_init_heaters+0x70>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2201      	movs	r2, #1
 8003d9a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    heaters->update_koef_time = 5000000;
 8003d9e:	4b0e      	ldr	r3, [pc, #56]	; (8003dd8 <first_init_heaters+0x70>)
 8003da0:	6819      	ldr	r1, [r3, #0]
 8003da2:	a30b      	add	r3, pc, #44	; (adr r3, 8003dd0 <first_init_heaters+0x68>)
 8003da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003da8:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    heaters->delta = 1;
 8003dac:	4b0a      	ldr	r3, [pc, #40]	; (8003dd8 <first_init_heaters+0x70>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003db4:	61da      	str	r2, [r3, #28]
    heaters->delta_high = 10;
 8003db6:	4b08      	ldr	r3, [pc, #32]	; (8003dd8 <first_init_heaters+0x70>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a08      	ldr	r2, [pc, #32]	; (8003ddc <first_init_heaters+0x74>)
 8003dbc:	621a      	str	r2, [r3, #32]
    heaters->koef_grow = 50;
 8003dbe:	4b06      	ldr	r3, [pc, #24]	; (8003dd8 <first_init_heaters+0x70>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	2232      	movs	r2, #50	; 0x32
 8003dc4:	625a      	str	r2, [r3, #36]	; 0x24
    write_heaters();
 8003dc6:	f000 f8eb 	bl	8003fa0 <write_heaters>
}
 8003dca:	bf00      	nop
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	004c4b40 	.word	0x004c4b40
 8003dd4:	00000000 	.word	0x00000000
 8003dd8:	2001399c 	.word	0x2001399c
 8003ddc:	41200000 	.word	0x41200000

08003de0 <first_init_wireless>:

void first_init_wireless()
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	af00      	add	r7, sp, #0
	// Настройки брокера Вакио
	wireless_params->vakio_mqtt.host[0] = 0;
 8003de4:	4b2c      	ldr	r3, [pc, #176]	; (8003e98 <first_init_wireless+0xb8>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	wireless_params->vakio_mqtt.login[0] = 0;
 8003dee:	4b2a      	ldr	r3, [pc, #168]	; (8003e98 <first_init_wireless+0xb8>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	2200      	movs	r2, #0
 8003df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	wireless_params->vakio_mqtt.password[0] = 0;
 8003df8:	4b27      	ldr	r3, [pc, #156]	; (8003e98 <first_init_wireless+0xb8>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	wireless_params->vakio_mqtt.port = DEFAULT_MQTT_PORT;
 8003e02:	4b25      	ldr	r3, [pc, #148]	; (8003e98 <first_init_wireless+0xb8>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f240 725b 	movw	r2, #1883	; 0x75b
 8003e0a:	669a      	str	r2, [r3, #104]	; 0x68
	wireless_params->vakio_mqtt.client_id[0] = 0;
 8003e0c:	4b22      	ldr	r3, [pc, #136]	; (8003e98 <first_init_wireless+0xb8>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

	// Настройки брокера пользователя
	wireless_params->user_mqtt.host[0] = 0;
 8003e16:	4b20      	ldr	r3, [pc, #128]	; (8003e98 <first_init_wireless+0xb8>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	wireless_params->user_mqtt.login[0] = 0;
 8003e20:	4b1d      	ldr	r3, [pc, #116]	; (8003e98 <first_init_wireless+0xb8>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2200      	movs	r2, #0
 8003e26:	701a      	strb	r2, [r3, #0]
	wireless_params->user_mqtt.password[0] = 0;
 8003e28:	4b1b      	ldr	r3, [pc, #108]	; (8003e98 <first_init_wireless+0xb8>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	731a      	strb	r2, [r3, #12]
	wireless_params->user_mqtt.port = DEFAULT_MQTT_PORT;
 8003e30:	4b19      	ldr	r3, [pc, #100]	; (8003e98 <first_init_wireless+0xb8>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f240 725b 	movw	r2, #1883	; 0x75b
 8003e38:	62da      	str	r2, [r3, #44]	; 0x2c
	wireless_params->user_mqtt.client_id[0] = 0;
 8003e3a:	4b17      	ldr	r3, [pc, #92]	; (8003e98 <first_init_wireless+0xb8>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	761a      	strb	r2, [r3, #24]
	strcpy(wireless_params->user_mqtt.topic, DEFAULT_USER_TOPIC);
 8003e42:	4b15      	ldr	r3, [pc, #84]	; (8003e98 <first_init_wireless+0xb8>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	3330      	adds	r3, #48	; 0x30
 8003e48:	4a14      	ldr	r2, [pc, #80]	; (8003e9c <first_init_wireless+0xbc>)
 8003e4a:	6810      	ldr	r0, [r2, #0]
 8003e4c:	6018      	str	r0, [r3, #0]
 8003e4e:	8892      	ldrh	r2, [r2, #4]
 8003e50:	809a      	strh	r2, [r3, #4]

	// Идентификаторы прибора
	wireless_params->vakio.device_id[0] = 0;
 8003e52:	4b11      	ldr	r3, [pc, #68]	; (8003e98 <first_init_wireless+0xb8>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	wireless_params->vakio.user_id[0] = 0;
 8003e5c:	4b0e      	ldr	r3, [pc, #56]	; (8003e98 <first_init_wireless+0xb8>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

	// Тип подключения к брокеру
	wireless_params->mqtt_type = VAKIO_MQTT;
 8003e66:	4b0c      	ldr	r3, [pc, #48]	; (8003e98 <first_init_wireless+0xb8>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

	// Айпи сервера
	wireless_params->server_ip[0] = 0;
 8003e70:	4b09      	ldr	r3, [pc, #36]	; (8003e98 <first_init_wireless+0xb8>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	2200      	movs	r2, #0
 8003e76:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
	wireless_params->vakio_mqtt_connect_ip = false;
 8003e7a:	4b07      	ldr	r3, [pc, #28]	; (8003e98 <first_init_wireless+0xb8>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
	wireless_params->vakio_mqtt_connect_ip;
	wireless_params->soft_ap_off_time = MIN_15_OFF_AP;
 8003e84:	4b04      	ldr	r3, [pc, #16]	; (8003e98 <first_init_wireless+0xb8>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
	write_wireless_params();
 8003e8e:	f000 f867 	bl	8003f60 <write_wireless_params>
}
 8003e92:	bf00      	nop
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	20013ae0 	.word	0x20013ae0
 8003e9c:	0801f6b0 	.word	0x0801f6b0

08003ea0 <first_init_device>:

void first_init_device()
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b082      	sub	sp, #8
 8003ea4:	af00      	add	r7, sp, #0
	device->check_1_0_0 = CHECK_VALUE_1_0_0;
 8003ea6:	4b2b      	ldr	r3, [pc, #172]	; (8003f54 <first_init_device+0xb4>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	72da      	strb	r2, [r3, #11]
	device->state = OFF;
 8003eae:	4b29      	ldr	r3, [pc, #164]	; (8003f54 <first_init_device+0xb4>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	709a      	strb	r2, [r3, #2]
	device->firmware_flag = false;
 8003eb6:	4b27      	ldr	r3, [pc, #156]	; (8003f54 <first_init_device+0xb4>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	701a      	strb	r2, [r3, #0]
	device->error_temp_hot = false;
 8003ebe:	4b25      	ldr	r3, [pc, #148]	; (8003f54 <first_init_device+0xb4>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	70da      	strb	r2, [r3, #3]
	device->error_temp_cold = false;
 8003ec6:	4b23      	ldr	r3, [pc, #140]	; (8003f54 <first_init_device+0xb4>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	711a      	strb	r2, [r3, #4]
	device->error_stop_hot = false;
 8003ece:	4b21      	ldr	r3, [pc, #132]	; (8003f54 <first_init_device+0xb4>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	715a      	strb	r2, [r3, #5]
	device->error_stop_cold = false;
 8003ed6:	4b1f      	ldr	r3, [pc, #124]	; (8003f54 <first_init_device+0xb4>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	2200      	movs	r2, #0
 8003edc:	719a      	strb	r2, [r3, #6]
	device->mode = INFLOW_MODE;
 8003ede:	4b1d      	ldr	r3, [pc, #116]	; (8003f54 <first_init_device+0xb4>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	731a      	strb	r2, [r3, #12]
	device->last_mode = INFLOW_MODE;
 8003ee6:	4b1b      	ldr	r3, [pc, #108]	; (8003f54 <first_init_device+0xb4>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	2200      	movs	r2, #0
 8003eec:	735a      	strb	r2, [r3, #13]
	device->inflow_speed = 1;
 8003eee:	4b19      	ldr	r3, [pc, #100]	; (8003f54 <first_init_device+0xb4>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	739a      	strb	r2, [r3, #14]
	uint8_t speed_arr[8] = SPEED_ARR_DEFAUL;
 8003ef6:	4a18      	ldr	r2, [pc, #96]	; (8003f58 <first_init_device+0xb8>)
 8003ef8:	463b      	mov	r3, r7
 8003efa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003efe:	e883 0003 	stmia.w	r3, {r0, r1}
	memcpy(device->speed_arr, speed_arr, 8);
 8003f02:	4b14      	ldr	r3, [pc, #80]	; (8003f54 <first_init_device+0xb4>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	3310      	adds	r3, #16
 8003f08:	461a      	mov	r2, r3
 8003f0a:	463b      	mov	r3, r7
 8003f0c:	cb03      	ldmia	r3!, {r0, r1}
 8003f0e:	6010      	str	r0, [r2, #0]
 8003f10:	6051      	str	r1, [r2, #4]
	device->sensors_addr.out[0] = 0;
 8003f12:	4b10      	ldr	r3, [pc, #64]	; (8003f54 <first_init_device+0xb4>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	2200      	movs	r2, #0
 8003f18:	761a      	strb	r2, [r3, #24]
	device->sensors_addr.in[0] = 0;
 8003f1a:	4b0e      	ldr	r3, [pc, #56]	; (8003f54 <first_init_device+0xb4>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	device->remote_control.find = OFF;
 8003f24:	4b0b      	ldr	r3, [pc, #44]	; (8003f54 <first_init_device+0xb4>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	725a      	strb	r2, [r3, #9]
	device->extra_options.deviation = 3;           // отклонение должно быть 3
 8003f2c:	4b09      	ldr	r3, [pc, #36]	; (8003f54 <first_init_device+0xb4>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	2203      	movs	r2, #3
 8003f32:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	device->extra_options.check_time = 1 * MINUTE; // время проверки должно быть 1-5 минут
 8003f36:	4b07      	ldr	r3, [pc, #28]	; (8003f54 <first_init_device+0xb4>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a08      	ldr	r2, [pc, #32]	; (8003f5c <first_init_device+0xbc>)
 8003f3c:	65da      	str	r2, [r3, #92]	; 0x5c
	device->extra_options.step_pwm = 5;            // шаг шим должно быть 5
 8003f3e:	4b05      	ldr	r3, [pc, #20]	; (8003f54 <first_init_device+0xb4>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	2205      	movs	r2, #5
 8003f44:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	write_device_params();
 8003f48:	f000 f84a 	bl	8003fe0 <write_device_params>
}
 8003f4c:	bf00      	nop
 8003f4e:	3708      	adds	r7, #8
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	20013adc 	.word	0x20013adc
 8003f58:	0801f6b8 	.word	0x0801f6b8
 8003f5c:	03938700 	.word	0x03938700

08003f60 <write_wireless_params>:
#define LOCATION_DEVICE 	0x080A0000 //0x081A0000
#define LOCATION_WIRELESS 	0x080C0000 //0x081C0000
#define LOCATION_HEATERS  	0x080E0000 //0x081E0000

void write_wireless_params()
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	af00      	add	r7, sp, #0
	Flash_Write_Data(LOCATION_WIRELESS, wireless_params, sizeof(wireless_parameters_s));
 8003f64:	4b04      	ldr	r3, [pc, #16]	; (8003f78 <write_wireless_params+0x18>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	22a0      	movs	r2, #160	; 0xa0
 8003f6a:	4619      	mov	r1, r3
 8003f6c:	4803      	ldr	r0, [pc, #12]	; (8003f7c <write_wireless_params+0x1c>)
 8003f6e:	f7fd fc37 	bl	80017e0 <Flash_Write_Data>
}
 8003f72:	bf00      	nop
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	20013ae0 	.word	0x20013ae0
 8003f7c:	080c0000 	.word	0x080c0000

08003f80 <read_wireless_params>:

void read_wireless_params()
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	af00      	add	r7, sp, #0
	Flash_Read_Data(LOCATION_WIRELESS, wireless_params, sizeof(wireless_parameters_s));
 8003f84:	4b04      	ldr	r3, [pc, #16]	; (8003f98 <read_wireless_params+0x18>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	22a0      	movs	r2, #160	; 0xa0
 8003f8a:	4619      	mov	r1, r3
 8003f8c:	4803      	ldr	r0, [pc, #12]	; (8003f9c <read_wireless_params+0x1c>)
 8003f8e:	f7fd fc85 	bl	800189c <Flash_Read_Data>
}
 8003f92:	bf00      	nop
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	20013ae0 	.word	0x20013ae0
 8003f9c:	080c0000 	.word	0x080c0000

08003fa0 <write_heaters>:

void write_heaters()
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	af00      	add	r7, sp, #0
	Flash_Write_Data(LOCATION_HEATERS, heaters, sizeof(heaters_s));
 8003fa4:	4b04      	ldr	r3, [pc, #16]	; (8003fb8 <write_heaters+0x18>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2238      	movs	r2, #56	; 0x38
 8003faa:	4619      	mov	r1, r3
 8003fac:	4803      	ldr	r0, [pc, #12]	; (8003fbc <write_heaters+0x1c>)
 8003fae:	f7fd fc17 	bl	80017e0 <Flash_Write_Data>
}
 8003fb2:	bf00      	nop
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	2001399c 	.word	0x2001399c
 8003fbc:	080e0000 	.word	0x080e0000

08003fc0 <read_heaters>:

void read_heaters()
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	af00      	add	r7, sp, #0
	Flash_Read_Data(LOCATION_HEATERS, heaters, sizeof(heaters_s));
 8003fc4:	4b04      	ldr	r3, [pc, #16]	; (8003fd8 <read_heaters+0x18>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	2238      	movs	r2, #56	; 0x38
 8003fca:	4619      	mov	r1, r3
 8003fcc:	4803      	ldr	r0, [pc, #12]	; (8003fdc <read_heaters+0x1c>)
 8003fce:	f7fd fc65 	bl	800189c <Flash_Read_Data>
}
 8003fd2:	bf00      	nop
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	2001399c 	.word	0x2001399c
 8003fdc:	080e0000 	.word	0x080e0000

08003fe0 <write_device_params>:

void write_device_params()
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	af00      	add	r7, sp, #0
	Flash_Write_Data(LOCATION_DEVICE, device, sizeof(device_s));
 8003fe4:	4b04      	ldr	r3, [pc, #16]	; (8003ff8 <write_device_params+0x18>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2264      	movs	r2, #100	; 0x64
 8003fea:	4619      	mov	r1, r3
 8003fec:	4803      	ldr	r0, [pc, #12]	; (8003ffc <write_device_params+0x1c>)
 8003fee:	f7fd fbf7 	bl	80017e0 <Flash_Write_Data>
}
 8003ff2:	bf00      	nop
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	20013adc 	.word	0x20013adc
 8003ffc:	080a0000 	.word	0x080a0000

08004000 <read_device_params>:

void read_device_params()
{
 8004000:	b580      	push	{r7, lr}
 8004002:	af00      	add	r7, sp, #0
	Flash_Read_Data(LOCATION_DEVICE, device, sizeof(device_s));
 8004004:	4b04      	ldr	r3, [pc, #16]	; (8004018 <read_device_params+0x18>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	2264      	movs	r2, #100	; 0x64
 800400a:	4619      	mov	r1, r3
 800400c:	4803      	ldr	r0, [pc, #12]	; (800401c <read_device_params+0x1c>)
 800400e:	f7fd fc45 	bl	800189c <Flash_Read_Data>
}
 8004012:	bf00      	nop
 8004014:	bd80      	pop	{r7, pc}
 8004016:	bf00      	nop
 8004018:	20013adc 	.word	0x20013adc
 800401c:	080a0000 	.word	0x080a0000

08004020 <first_start_init>:

void first_start_init()
{
 8004020:	b580      	push	{r7, lr}
 8004022:	af00      	add	r7, sp, #0
    first_init_device();
 8004024:	f7ff ff3c 	bl	8003ea0 <first_init_device>
    first_init_wireless();
 8004028:	f7ff feda 	bl	8003de0 <first_init_wireless>
    first_init_heaters();
 800402c:	f7ff fe9c 	bl	8003d68 <first_init_heaters>
}
 8004030:	bf00      	nop
 8004032:	bd80      	pop	{r7, pc}

08004034 <second_start_init>:

void second_start_init()
{
 8004034:	b580      	push	{r7, lr}
 8004036:	af00      	add	r7, sp, #0
    read_device_params();
 8004038:	f7ff ffe2 	bl	8004000 <read_device_params>
    read_wireless_params();
 800403c:	f7ff ffa0 	bl	8003f80 <read_wireless_params>
    read_heaters();
 8004040:	f7ff ffbe 	bl	8003fc0 <read_heaters>
}
 8004044:	bf00      	nop
 8004046:	bd80      	pop	{r7, pc}

08004048 <malloc_memory_parameters>:

void malloc_memory_parameters()
{
 8004048:	b580      	push	{r7, lr}
 800404a:	af00      	add	r7, sp, #0
    device = malloc(sizeof(device_s));
 800404c:	2064      	movs	r0, #100	; 0x64
 800404e:	f018 fb45 	bl	801c6dc <malloc>
 8004052:	4603      	mov	r3, r0
 8004054:	461a      	mov	r2, r3
 8004056:	4b0c      	ldr	r3, [pc, #48]	; (8004088 <malloc_memory_parameters+0x40>)
 8004058:	601a      	str	r2, [r3, #0]
    wireless_params = malloc(sizeof(wireless_parameters_s));
 800405a:	20a0      	movs	r0, #160	; 0xa0
 800405c:	f018 fb3e 	bl	801c6dc <malloc>
 8004060:	4603      	mov	r3, r0
 8004062:	461a      	mov	r2, r3
 8004064:	4b09      	ldr	r3, [pc, #36]	; (800408c <malloc_memory_parameters+0x44>)
 8004066:	601a      	str	r2, [r3, #0]
    sensors_data = malloc(sizeof(sensors_data_s));
 8004068:	2020      	movs	r0, #32
 800406a:	f018 fb37 	bl	801c6dc <malloc>
 800406e:	4603      	mov	r3, r0
 8004070:	461a      	mov	r2, r3
 8004072:	4b07      	ldr	r3, [pc, #28]	; (8004090 <malloc_memory_parameters+0x48>)
 8004074:	601a      	str	r2, [r3, #0]
    heaters = malloc(sizeof(heaters_s));
 8004076:	2038      	movs	r0, #56	; 0x38
 8004078:	f018 fb30 	bl	801c6dc <malloc>
 800407c:	4603      	mov	r3, r0
 800407e:	461a      	mov	r2, r3
 8004080:	4b04      	ldr	r3, [pc, #16]	; (8004094 <malloc_memory_parameters+0x4c>)
 8004082:	601a      	str	r2, [r3, #0]
}
 8004084:	bf00      	nop
 8004086:	bd80      	pop	{r7, pc}
 8004088:	20013adc 	.word	0x20013adc
 800408c:	20013ae0 	.word	0x20013ae0
 8004090:	20013ae4 	.word	0x20013ae4
 8004094:	2001399c 	.word	0x2001399c

08004098 <set_default_data>:
	device->check_1_0_0 = CHECK_VALUE_1_0_0 + 1;
	write_device_params();
}

void set_default_data()
{
 8004098:	b480      	push	{r7}
 800409a:	af00      	add	r7, sp, #0
	device->inflow_speed = 1;
 800409c:	4b1c      	ldr	r3, [pc, #112]	; (8004110 <set_default_data+0x78>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2201      	movs	r2, #1
 80040a2:	739a      	strb	r2, [r3, #14]
	heaters->ten.temp_limit = TEN_TEMP_LIMIT;
 80040a4:	4b1b      	ldr	r3, [pc, #108]	; (8004114 <set_default_data+0x7c>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	2219      	movs	r2, #25
 80040aa:	605a      	str	r2, [r3, #4]
    device->remote_control.error = false;
 80040ac:	4b18      	ldr	r3, [pc, #96]	; (8004110 <set_default_data+0x78>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	2200      	movs	r2, #0
 80040b2:	729a      	strb	r2, [r3, #10]
    sensors_data->out_state = false;
 80040b4:	4b18      	ldr	r3, [pc, #96]	; (8004118 <set_default_data+0x80>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	2200      	movs	r2, #0
 80040ba:	771a      	strb	r2, [r3, #28]
    sensors_data->in_state = false;
 80040bc:	4b16      	ldr	r3, [pc, #88]	; (8004118 <set_default_data+0x80>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	2200      	movs	r2, #0
 80040c2:	775a      	strb	r2, [r3, #29]
    heaters->ten.state = OFF;
 80040c4:	4b13      	ldr	r3, [pc, #76]	; (8004114 <set_default_data+0x7c>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2200      	movs	r2, #0
 80040ca:	705a      	strb	r2, [r3, #1]
    heaters->update_koef_time = 5000000;
 80040cc:	4b11      	ldr	r3, [pc, #68]	; (8004114 <set_default_data+0x7c>)
 80040ce:	6819      	ldr	r1, [r3, #0]
 80040d0:	a30d      	add	r3, pc, #52	; (adr r3, 8004108 <set_default_data+0x70>)
 80040d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d6:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    heaters->koef = 0;
 80040da:	4b0e      	ldr	r3, [pc, #56]	; (8004114 <set_default_data+0x7c>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	2200      	movs	r2, #0
 80040e0:	619a      	str	r2, [r3, #24]
    heaters->delta = 1;
 80040e2:	4b0c      	ldr	r3, [pc, #48]	; (8004114 <set_default_data+0x7c>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80040ea:	61da      	str	r2, [r3, #28]
    heaters->delta_high = 15;
 80040ec:	4b09      	ldr	r3, [pc, #36]	; (8004114 <set_default_data+0x7c>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a0a      	ldr	r2, [pc, #40]	; (800411c <set_default_data+0x84>)
 80040f2:	621a      	str	r2, [r3, #32]
    heaters->koef_grow = 50;
 80040f4:	4b07      	ldr	r3, [pc, #28]	; (8004114 <set_default_data+0x7c>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2232      	movs	r2, #50	; 0x32
 80040fa:	625a      	str	r2, [r3, #36]	; 0x24
}
 80040fc:	bf00      	nop
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr
 8004106:	bf00      	nop
 8004108:	004c4b40 	.word	0x004c4b40
 800410c:	00000000 	.word	0x00000000
 8004110:	20013adc 	.word	0x20013adc
 8004114:	2001399c 	.word	0x2001399c
 8004118:	20013ae4 	.word	0x20013ae4
 800411c:	41700000 	.word	0x41700000

08004120 <init_storage>:

void init_storage()
{
 8004120:	b580      	push	{r7, lr}
 8004122:	af00      	add	r7, sp, #0
	malloc_memory_parameters();
 8004124:	f7ff ff90 	bl	8004048 <malloc_memory_parameters>
	read_device_params();
 8004128:	f7ff ff6a 	bl	8004000 <read_device_params>
	// Проверка на первый запуск устройства
	if (device->check_1_0_0 != CHECK_VALUE_1_0_0)
 800412c:	4b06      	ldr	r3, [pc, #24]	; (8004148 <init_storage+0x28>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	7adb      	ldrb	r3, [r3, #11]
 8004132:	2b01      	cmp	r3, #1
 8004134:	d002      	beq.n	800413c <init_storage+0x1c>
	{
		first_start_init();
 8004136:	f7ff ff73 	bl	8004020 <first_start_init>
 800413a:	e001      	b.n	8004140 <init_storage+0x20>
	}
	else
	{
		second_start_init();
 800413c:	f7ff ff7a 	bl	8004034 <second_start_init>
	}
	set_default_data();
 8004140:	f7ff ffaa 	bl	8004098 <set_default_data>
}
 8004144:	bf00      	nop
 8004146:	bd80      	pop	{r7, pc}
 8004148:	20013adc 	.word	0x20013adc

0800414c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b082      	sub	sp, #8
 8004150:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004152:	2300      	movs	r3, #0
 8004154:	607b      	str	r3, [r7, #4]
 8004156:	4b1f      	ldr	r3, [pc, #124]	; (80041d4 <MX_DMA_Init+0x88>)
 8004158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800415a:	4a1e      	ldr	r2, [pc, #120]	; (80041d4 <MX_DMA_Init+0x88>)
 800415c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004160:	6313      	str	r3, [r2, #48]	; 0x30
 8004162:	4b1c      	ldr	r3, [pc, #112]	; (80041d4 <MX_DMA_Init+0x88>)
 8004164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004166:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800416a:	607b      	str	r3, [r7, #4]
 800416c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800416e:	2300      	movs	r3, #0
 8004170:	603b      	str	r3, [r7, #0]
 8004172:	4b18      	ldr	r3, [pc, #96]	; (80041d4 <MX_DMA_Init+0x88>)
 8004174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004176:	4a17      	ldr	r2, [pc, #92]	; (80041d4 <MX_DMA_Init+0x88>)
 8004178:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800417c:	6313      	str	r3, [r2, #48]	; 0x30
 800417e:	4b15      	ldr	r3, [pc, #84]	; (80041d4 <MX_DMA_Init+0x88>)
 8004180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004182:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004186:	603b      	str	r3, [r7, #0]
 8004188:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 800418a:	2200      	movs	r2, #0
 800418c:	2105      	movs	r1, #5
 800418e:	200b      	movs	r0, #11
 8004190:	f001 fad1 	bl	8005736 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8004194:	200b      	movs	r0, #11
 8004196:	f001 faea 	bl	800576e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 800419a:	2200      	movs	r2, #0
 800419c:	2105      	movs	r1, #5
 800419e:	202f      	movs	r0, #47	; 0x2f
 80041a0:	f001 fac9 	bl	8005736 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80041a4:	202f      	movs	r0, #47	; 0x2f
 80041a6:	f001 fae2 	bl	800576e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80041aa:	2200      	movs	r2, #0
 80041ac:	2105      	movs	r1, #5
 80041ae:	203a      	movs	r0, #58	; 0x3a
 80041b0:	f001 fac1 	bl	8005736 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80041b4:	203a      	movs	r0, #58	; 0x3a
 80041b6:	f001 fada 	bl	800576e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 80041ba:	2200      	movs	r2, #0
 80041bc:	2105      	movs	r1, #5
 80041be:	2046      	movs	r0, #70	; 0x46
 80041c0:	f001 fab9 	bl	8005736 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80041c4:	2046      	movs	r0, #70	; 0x46
 80041c6:	f001 fad2 	bl	800576e <HAL_NVIC_EnableIRQ>

}
 80041ca:	bf00      	nop
 80041cc:	3708      	adds	r7, #8
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	40023800 	.word	0x40023800

080041d8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80041d8:	b580      	push	{r7, lr}
 80041da:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80041dc:	4a04      	ldr	r2, [pc, #16]	; (80041f0 <MX_FREERTOS_Init+0x18>)
 80041de:	2100      	movs	r1, #0
 80041e0:	4804      	ldr	r0, [pc, #16]	; (80041f4 <MX_FREERTOS_Init+0x1c>)
 80041e2:	f008 f8a0 	bl	800c326 <osThreadNew>
 80041e6:	4603      	mov	r3, r0
 80041e8:	4a03      	ldr	r2, [pc, #12]	; (80041f8 <MX_FREERTOS_Init+0x20>)
 80041ea:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80041ec:	bf00      	nop
 80041ee:	bd80      	pop	{r7, pc}
 80041f0:	08022624 	.word	0x08022624
 80041f4:	080041fd 	.word	0x080041fd
 80041f8:	20013cf8 	.word	0x20013cf8

080041fc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8004204:	f007 fb7e 	bl	800b904 <MX_LWIP_Init>
  /* USER CODE BEGIN StartDefaultTask */
//  init_mqtt();
//  http_server_init();
  check_remote_control();
 8004208:	f7ff fd3e 	bl	8003c88 <check_remote_control>
//	HAL_GPIO_TogglePin(RELAY_CH3_GPIO_Port, RELAY_CH3_Pin);
//	HAL_GPIO_TogglePin(RELAY_CH4_GPIO_Port, RELAY_CH4_Pin);
//	HAL_GPIO_TogglePin(HEAT_VALVE_GATE1_GPIO_Port, HEAT_VALVE_GATE1_Pin);
//	HAL_GPIO_TogglePin(SSR_GATE1_GPIO_Port, SSR_GATE1_Pin);
//	printf("HELLO WORLD\n");
	  uint8_t ert = 5;
 800420c:	2305      	movs	r3, #5
 800420e:	73fb      	strb	r3, [r7, #15]
//		sprintf(msg, "speed %i\n", ert);  // convert int16_t to ascii, legal itoa
//		HAL_UART_Transmit_IT(&huart4, (uint8_t *) msg, 14);



    osDelay(1000);
 8004210:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004214:	f008 f925 	bl	800c462 <osDelay>
  {
 8004218:	e7f8      	b.n	800420c <StartDefaultTask+0x10>
	...

0800421c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b08c      	sub	sp, #48	; 0x30
 8004220:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004222:	f107 031c 	add.w	r3, r7, #28
 8004226:	2200      	movs	r2, #0
 8004228:	601a      	str	r2, [r3, #0]
 800422a:	605a      	str	r2, [r3, #4]
 800422c:	609a      	str	r2, [r3, #8]
 800422e:	60da      	str	r2, [r3, #12]
 8004230:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004232:	2300      	movs	r3, #0
 8004234:	61bb      	str	r3, [r7, #24]
 8004236:	4b61      	ldr	r3, [pc, #388]	; (80043bc <MX_GPIO_Init+0x1a0>)
 8004238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800423a:	4a60      	ldr	r2, [pc, #384]	; (80043bc <MX_GPIO_Init+0x1a0>)
 800423c:	f043 0310 	orr.w	r3, r3, #16
 8004240:	6313      	str	r3, [r2, #48]	; 0x30
 8004242:	4b5e      	ldr	r3, [pc, #376]	; (80043bc <MX_GPIO_Init+0x1a0>)
 8004244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004246:	f003 0310 	and.w	r3, r3, #16
 800424a:	61bb      	str	r3, [r7, #24]
 800424c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800424e:	2300      	movs	r3, #0
 8004250:	617b      	str	r3, [r7, #20]
 8004252:	4b5a      	ldr	r3, [pc, #360]	; (80043bc <MX_GPIO_Init+0x1a0>)
 8004254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004256:	4a59      	ldr	r2, [pc, #356]	; (80043bc <MX_GPIO_Init+0x1a0>)
 8004258:	f043 0304 	orr.w	r3, r3, #4
 800425c:	6313      	str	r3, [r2, #48]	; 0x30
 800425e:	4b57      	ldr	r3, [pc, #348]	; (80043bc <MX_GPIO_Init+0x1a0>)
 8004260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004262:	f003 0304 	and.w	r3, r3, #4
 8004266:	617b      	str	r3, [r7, #20]
 8004268:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800426a:	2300      	movs	r3, #0
 800426c:	613b      	str	r3, [r7, #16]
 800426e:	4b53      	ldr	r3, [pc, #332]	; (80043bc <MX_GPIO_Init+0x1a0>)
 8004270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004272:	4a52      	ldr	r2, [pc, #328]	; (80043bc <MX_GPIO_Init+0x1a0>)
 8004274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004278:	6313      	str	r3, [r2, #48]	; 0x30
 800427a:	4b50      	ldr	r3, [pc, #320]	; (80043bc <MX_GPIO_Init+0x1a0>)
 800427c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800427e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004282:	613b      	str	r3, [r7, #16]
 8004284:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004286:	2300      	movs	r3, #0
 8004288:	60fb      	str	r3, [r7, #12]
 800428a:	4b4c      	ldr	r3, [pc, #304]	; (80043bc <MX_GPIO_Init+0x1a0>)
 800428c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800428e:	4a4b      	ldr	r2, [pc, #300]	; (80043bc <MX_GPIO_Init+0x1a0>)
 8004290:	f043 0301 	orr.w	r3, r3, #1
 8004294:	6313      	str	r3, [r2, #48]	; 0x30
 8004296:	4b49      	ldr	r3, [pc, #292]	; (80043bc <MX_GPIO_Init+0x1a0>)
 8004298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800429a:	f003 0301 	and.w	r3, r3, #1
 800429e:	60fb      	str	r3, [r7, #12]
 80042a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80042a2:	2300      	movs	r3, #0
 80042a4:	60bb      	str	r3, [r7, #8]
 80042a6:	4b45      	ldr	r3, [pc, #276]	; (80043bc <MX_GPIO_Init+0x1a0>)
 80042a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042aa:	4a44      	ldr	r2, [pc, #272]	; (80043bc <MX_GPIO_Init+0x1a0>)
 80042ac:	f043 0302 	orr.w	r3, r3, #2
 80042b0:	6313      	str	r3, [r2, #48]	; 0x30
 80042b2:	4b42      	ldr	r3, [pc, #264]	; (80043bc <MX_GPIO_Init+0x1a0>)
 80042b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b6:	f003 0302 	and.w	r3, r3, #2
 80042ba:	60bb      	str	r3, [r7, #8]
 80042bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80042be:	2300      	movs	r3, #0
 80042c0:	607b      	str	r3, [r7, #4]
 80042c2:	4b3e      	ldr	r3, [pc, #248]	; (80043bc <MX_GPIO_Init+0x1a0>)
 80042c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c6:	4a3d      	ldr	r2, [pc, #244]	; (80043bc <MX_GPIO_Init+0x1a0>)
 80042c8:	f043 0308 	orr.w	r3, r3, #8
 80042cc:	6313      	str	r3, [r2, #48]	; 0x30
 80042ce:	4b3b      	ldr	r3, [pc, #236]	; (80043bc <MX_GPIO_Init+0x1a0>)
 80042d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d2:	f003 0308 	and.w	r3, r3, #8
 80042d6:	607b      	str	r3, [r7, #4]
 80042d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SW_DIP3_Pin|SW_DIP4_Pin|SW_DIP5_Pin|SW_DIP6_Pin
 80042da:	2200      	movs	r2, #0
 80042dc:	21bf      	movs	r1, #191	; 0xbf
 80042de:	4838      	ldr	r0, [pc, #224]	; (80043c0 <MX_GPIO_Init+0x1a4>)
 80042e0:	f003 fc88 	bl	8007bf4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|SW_DIP1_Pin|SW_DIP2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, HEAT_VALVE_GATE1_Pin|SPI1_CS_Pin|USART1_DIR_Pin, GPIO_PIN_RESET);
 80042e4:	2200      	movs	r2, #0
 80042e6:	f241 0118 	movw	r1, #4120	; 0x1018
 80042ea:	4836      	ldr	r0, [pc, #216]	; (80043c4 <MX_GPIO_Init+0x1a8>)
 80042ec:	f003 fc82 	bl	8007bf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RELAY_CH1_Pin|RELAY_CH2_Pin|RELAY_CH3_Pin|RELAY_CH4_Pin
 80042f0:	2200      	movs	r2, #0
 80042f2:	f24f 01e8 	movw	r1, #61672	; 0xf0e8
 80042f6:	4834      	ldr	r0, [pc, #208]	; (80043c8 <MX_GPIO_Init+0x1ac>)
 80042f8:	f003 fc7c 	bl	8007bf4 <HAL_GPIO_WritePin>
                          |UART5_DIR_Pin|LED_LINK_Pin|LED_WORK_Pin|LED_FAILURE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SSR_GATE1_GPIO_Port, SSR_GATE1_Pin, GPIO_PIN_RESET);
 80042fc:	2200      	movs	r2, #0
 80042fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004302:	4832      	ldr	r0, [pc, #200]	; (80043cc <MX_GPIO_Init+0x1b0>)
 8004304:	f003 fc76 	bl	8007bf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PE7 PEPin PEPin */
  GPIO_InitStruct.Pin = SW_DIP3_Pin|SW_DIP4_Pin|SW_DIP5_Pin|SW_DIP6_Pin
 8004308:	23bf      	movs	r3, #191	; 0xbf
 800430a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7|SW_DIP1_Pin|SW_DIP2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800430c:	2301      	movs	r3, #1
 800430e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004310:	2300      	movs	r3, #0
 8004312:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004314:	2300      	movs	r3, #0
 8004316:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004318:	f107 031c 	add.w	r3, r7, #28
 800431c:	4619      	mov	r1, r3
 800431e:	4828      	ldr	r0, [pc, #160]	; (80043c0 <MX_GPIO_Init+0x1a4>)
 8004320:	f003 fab4 	bl	800788c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = HEAT_VALVE_GATE1_Pin|SPI1_CS_Pin|USART1_DIR_Pin;
 8004324:	f241 0318 	movw	r3, #4120	; 0x1018
 8004328:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800432a:	2301      	movs	r3, #1
 800432c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800432e:	2300      	movs	r3, #0
 8004330:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004332:	2300      	movs	r3, #0
 8004334:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004336:	f107 031c 	add.w	r3, r7, #28
 800433a:	4619      	mov	r1, r3
 800433c:	4821      	ldr	r0, [pc, #132]	; (80043c4 <MX_GPIO_Init+0x1a8>)
 800433e:	f003 faa5 	bl	800788c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PB15 */
  GPIO_InitStruct.Pin = FAN_FG1_Pin|GPIO_PIN_15;
 8004342:	f248 0301 	movw	r3, #32769	; 0x8001
 8004346:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004348:	2300      	movs	r3, #0
 800434a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800434c:	2300      	movs	r3, #0
 800434e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004350:	f107 031c 	add.w	r3, r7, #28
 8004354:	4619      	mov	r1, r3
 8004356:	481e      	ldr	r0, [pc, #120]	; (80043d0 <MX_GPIO_Init+0x1b4>)
 8004358:	f003 fa98 	bl	800788c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SERVICE_BTN_Pin;
 800435c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004360:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004362:	2300      	movs	r3, #0
 8004364:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004366:	2301      	movs	r3, #1
 8004368:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SERVICE_BTN_GPIO_Port, &GPIO_InitStruct);
 800436a:	f107 031c 	add.w	r3, r7, #28
 800436e:	4619      	mov	r1, r3
 8004370:	4815      	ldr	r0, [pc, #84]	; (80043c8 <MX_GPIO_Init+0x1ac>)
 8004372:	f003 fa8b 	bl	800788c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = RELAY_CH1_Pin|RELAY_CH2_Pin|RELAY_CH3_Pin|RELAY_CH4_Pin
 8004376:	f24f 03e8 	movw	r3, #61672	; 0xf0e8
 800437a:	61fb      	str	r3, [r7, #28]
                          |UART5_DIR_Pin|LED_LINK_Pin|LED_WORK_Pin|LED_FAILURE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800437c:	2301      	movs	r3, #1
 800437e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004380:	2300      	movs	r3, #0
 8004382:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004384:	2300      	movs	r3, #0
 8004386:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004388:	f107 031c 	add.w	r3, r7, #28
 800438c:	4619      	mov	r1, r3
 800438e:	480e      	ldr	r0, [pc, #56]	; (80043c8 <MX_GPIO_Init+0x1ac>)
 8004390:	f003 fa7c 	bl	800788c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SSR_GATE1_Pin;
 8004394:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004398:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800439a:	2301      	movs	r3, #1
 800439c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800439e:	2300      	movs	r3, #0
 80043a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043a2:	2300      	movs	r3, #0
 80043a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SSR_GATE1_GPIO_Port, &GPIO_InitStruct);
 80043a6:	f107 031c 	add.w	r3, r7, #28
 80043aa:	4619      	mov	r1, r3
 80043ac:	4807      	ldr	r0, [pc, #28]	; (80043cc <MX_GPIO_Init+0x1b0>)
 80043ae:	f003 fa6d 	bl	800788c <HAL_GPIO_Init>

}
 80043b2:	bf00      	nop
 80043b4:	3730      	adds	r7, #48	; 0x30
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	40023800 	.word	0x40023800
 80043c0:	40021000 	.word	0x40021000
 80043c4:	40020000 	.word	0x40020000
 80043c8:	40020c00 	.word	0x40020c00
 80043cc:	40020800 	.word	0x40020800
 80043d0:	40020400 	.word	0x40020400

080043d4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80043d8:	4b12      	ldr	r3, [pc, #72]	; (8004424 <MX_I2C1_Init+0x50>)
 80043da:	4a13      	ldr	r2, [pc, #76]	; (8004428 <MX_I2C1_Init+0x54>)
 80043dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80043de:	4b11      	ldr	r3, [pc, #68]	; (8004424 <MX_I2C1_Init+0x50>)
 80043e0:	4a12      	ldr	r2, [pc, #72]	; (800442c <MX_I2C1_Init+0x58>)
 80043e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80043e4:	4b0f      	ldr	r3, [pc, #60]	; (8004424 <MX_I2C1_Init+0x50>)
 80043e6:	2200      	movs	r2, #0
 80043e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80043ea:	4b0e      	ldr	r3, [pc, #56]	; (8004424 <MX_I2C1_Init+0x50>)
 80043ec:	2200      	movs	r2, #0
 80043ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80043f0:	4b0c      	ldr	r3, [pc, #48]	; (8004424 <MX_I2C1_Init+0x50>)
 80043f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80043f6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80043f8:	4b0a      	ldr	r3, [pc, #40]	; (8004424 <MX_I2C1_Init+0x50>)
 80043fa:	2200      	movs	r2, #0
 80043fc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80043fe:	4b09      	ldr	r3, [pc, #36]	; (8004424 <MX_I2C1_Init+0x50>)
 8004400:	2200      	movs	r2, #0
 8004402:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004404:	4b07      	ldr	r3, [pc, #28]	; (8004424 <MX_I2C1_Init+0x50>)
 8004406:	2200      	movs	r2, #0
 8004408:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800440a:	4b06      	ldr	r3, [pc, #24]	; (8004424 <MX_I2C1_Init+0x50>)
 800440c:	2200      	movs	r2, #0
 800440e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004410:	4804      	ldr	r0, [pc, #16]	; (8004424 <MX_I2C1_Init+0x50>)
 8004412:	f003 fc09 	bl	8007c28 <HAL_I2C_Init>
 8004416:	4603      	mov	r3, r0
 8004418:	2b00      	cmp	r3, #0
 800441a:	d001      	beq.n	8004420 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800441c:	f000 f9c4 	bl	80047a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004420:	bf00      	nop
 8004422:	bd80      	pop	{r7, pc}
 8004424:	20013d54 	.word	0x20013d54
 8004428:	40005400 	.word	0x40005400
 800442c:	000186a0 	.word	0x000186a0

08004430 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8004434:	4b12      	ldr	r3, [pc, #72]	; (8004480 <MX_I2C3_Init+0x50>)
 8004436:	4a13      	ldr	r2, [pc, #76]	; (8004484 <MX_I2C3_Init+0x54>)
 8004438:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800443a:	4b11      	ldr	r3, [pc, #68]	; (8004480 <MX_I2C3_Init+0x50>)
 800443c:	4a12      	ldr	r2, [pc, #72]	; (8004488 <MX_I2C3_Init+0x58>)
 800443e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004440:	4b0f      	ldr	r3, [pc, #60]	; (8004480 <MX_I2C3_Init+0x50>)
 8004442:	2200      	movs	r2, #0
 8004444:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8004446:	4b0e      	ldr	r3, [pc, #56]	; (8004480 <MX_I2C3_Init+0x50>)
 8004448:	2200      	movs	r2, #0
 800444a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800444c:	4b0c      	ldr	r3, [pc, #48]	; (8004480 <MX_I2C3_Init+0x50>)
 800444e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004452:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004454:	4b0a      	ldr	r3, [pc, #40]	; (8004480 <MX_I2C3_Init+0x50>)
 8004456:	2200      	movs	r2, #0
 8004458:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800445a:	4b09      	ldr	r3, [pc, #36]	; (8004480 <MX_I2C3_Init+0x50>)
 800445c:	2200      	movs	r2, #0
 800445e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004460:	4b07      	ldr	r3, [pc, #28]	; (8004480 <MX_I2C3_Init+0x50>)
 8004462:	2200      	movs	r2, #0
 8004464:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004466:	4b06      	ldr	r3, [pc, #24]	; (8004480 <MX_I2C3_Init+0x50>)
 8004468:	2200      	movs	r2, #0
 800446a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800446c:	4804      	ldr	r0, [pc, #16]	; (8004480 <MX_I2C3_Init+0x50>)
 800446e:	f003 fbdb 	bl	8007c28 <HAL_I2C_Init>
 8004472:	4603      	mov	r3, r0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d001      	beq.n	800447c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8004478:	f000 f996 	bl	80047a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800447c:	bf00      	nop
 800447e:	bd80      	pop	{r7, pc}
 8004480:	20013d00 	.word	0x20013d00
 8004484:	40005c00 	.word	0x40005c00
 8004488:	000186a0 	.word	0x000186a0

0800448c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b08c      	sub	sp, #48	; 0x30
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004494:	f107 031c 	add.w	r3, r7, #28
 8004498:	2200      	movs	r2, #0
 800449a:	601a      	str	r2, [r3, #0]
 800449c:	605a      	str	r2, [r3, #4]
 800449e:	609a      	str	r2, [r3, #8]
 80044a0:	60da      	str	r2, [r3, #12]
 80044a2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a42      	ldr	r2, [pc, #264]	; (80045b4 <HAL_I2C_MspInit+0x128>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d12c      	bne.n	8004508 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044ae:	2300      	movs	r3, #0
 80044b0:	61bb      	str	r3, [r7, #24]
 80044b2:	4b41      	ldr	r3, [pc, #260]	; (80045b8 <HAL_I2C_MspInit+0x12c>)
 80044b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b6:	4a40      	ldr	r2, [pc, #256]	; (80045b8 <HAL_I2C_MspInit+0x12c>)
 80044b8:	f043 0302 	orr.w	r3, r3, #2
 80044bc:	6313      	str	r3, [r2, #48]	; 0x30
 80044be:	4b3e      	ldr	r3, [pc, #248]	; (80045b8 <HAL_I2C_MspInit+0x12c>)
 80044c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c2:	f003 0302 	and.w	r3, r3, #2
 80044c6:	61bb      	str	r3, [r7, #24]
 80044c8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80044ca:	23c0      	movs	r3, #192	; 0xc0
 80044cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80044ce:	2312      	movs	r3, #18
 80044d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044d2:	2300      	movs	r3, #0
 80044d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044d6:	2303      	movs	r3, #3
 80044d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80044da:	2304      	movs	r3, #4
 80044dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044de:	f107 031c 	add.w	r3, r7, #28
 80044e2:	4619      	mov	r1, r3
 80044e4:	4835      	ldr	r0, [pc, #212]	; (80045bc <HAL_I2C_MspInit+0x130>)
 80044e6:	f003 f9d1 	bl	800788c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80044ea:	2300      	movs	r3, #0
 80044ec:	617b      	str	r3, [r7, #20]
 80044ee:	4b32      	ldr	r3, [pc, #200]	; (80045b8 <HAL_I2C_MspInit+0x12c>)
 80044f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f2:	4a31      	ldr	r2, [pc, #196]	; (80045b8 <HAL_I2C_MspInit+0x12c>)
 80044f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80044f8:	6413      	str	r3, [r2, #64]	; 0x40
 80044fa:	4b2f      	ldr	r3, [pc, #188]	; (80045b8 <HAL_I2C_MspInit+0x12c>)
 80044fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004502:	617b      	str	r3, [r7, #20]
 8004504:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8004506:	e050      	b.n	80045aa <HAL_I2C_MspInit+0x11e>
  else if(i2cHandle->Instance==I2C3)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a2c      	ldr	r2, [pc, #176]	; (80045c0 <HAL_I2C_MspInit+0x134>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d14b      	bne.n	80045aa <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004512:	2300      	movs	r3, #0
 8004514:	613b      	str	r3, [r7, #16]
 8004516:	4b28      	ldr	r3, [pc, #160]	; (80045b8 <HAL_I2C_MspInit+0x12c>)
 8004518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800451a:	4a27      	ldr	r2, [pc, #156]	; (80045b8 <HAL_I2C_MspInit+0x12c>)
 800451c:	f043 0304 	orr.w	r3, r3, #4
 8004520:	6313      	str	r3, [r2, #48]	; 0x30
 8004522:	4b25      	ldr	r3, [pc, #148]	; (80045b8 <HAL_I2C_MspInit+0x12c>)
 8004524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004526:	f003 0304 	and.w	r3, r3, #4
 800452a:	613b      	str	r3, [r7, #16]
 800452c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800452e:	2300      	movs	r3, #0
 8004530:	60fb      	str	r3, [r7, #12]
 8004532:	4b21      	ldr	r3, [pc, #132]	; (80045b8 <HAL_I2C_MspInit+0x12c>)
 8004534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004536:	4a20      	ldr	r2, [pc, #128]	; (80045b8 <HAL_I2C_MspInit+0x12c>)
 8004538:	f043 0301 	orr.w	r3, r3, #1
 800453c:	6313      	str	r3, [r2, #48]	; 0x30
 800453e:	4b1e      	ldr	r3, [pc, #120]	; (80045b8 <HAL_I2C_MspInit+0x12c>)
 8004540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004542:	f003 0301 	and.w	r3, r3, #1
 8004546:	60fb      	str	r3, [r7, #12]
 8004548:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800454a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800454e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004550:	2312      	movs	r3, #18
 8004552:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004554:	2300      	movs	r3, #0
 8004556:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004558:	2303      	movs	r3, #3
 800455a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800455c:	2304      	movs	r3, #4
 800455e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004560:	f107 031c 	add.w	r3, r7, #28
 8004564:	4619      	mov	r1, r3
 8004566:	4817      	ldr	r0, [pc, #92]	; (80045c4 <HAL_I2C_MspInit+0x138>)
 8004568:	f003 f990 	bl	800788c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800456c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004570:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004572:	2312      	movs	r3, #18
 8004574:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004576:	2300      	movs	r3, #0
 8004578:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800457a:	2303      	movs	r3, #3
 800457c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800457e:	2304      	movs	r3, #4
 8004580:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004582:	f107 031c 	add.w	r3, r7, #28
 8004586:	4619      	mov	r1, r3
 8004588:	480f      	ldr	r0, [pc, #60]	; (80045c8 <HAL_I2C_MspInit+0x13c>)
 800458a:	f003 f97f 	bl	800788c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800458e:	2300      	movs	r3, #0
 8004590:	60bb      	str	r3, [r7, #8]
 8004592:	4b09      	ldr	r3, [pc, #36]	; (80045b8 <HAL_I2C_MspInit+0x12c>)
 8004594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004596:	4a08      	ldr	r2, [pc, #32]	; (80045b8 <HAL_I2C_MspInit+0x12c>)
 8004598:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800459c:	6413      	str	r3, [r2, #64]	; 0x40
 800459e:	4b06      	ldr	r3, [pc, #24]	; (80045b8 <HAL_I2C_MspInit+0x12c>)
 80045a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80045a6:	60bb      	str	r3, [r7, #8]
 80045a8:	68bb      	ldr	r3, [r7, #8]
}
 80045aa:	bf00      	nop
 80045ac:	3730      	adds	r7, #48	; 0x30
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	40005400 	.word	0x40005400
 80045b8:	40023800 	.word	0x40023800
 80045bc:	40020400 	.word	0x40020400
 80045c0:	40005c00 	.word	0x40005c00
 80045c4:	40020800 	.word	0x40020800
 80045c8:	40020000 	.word	0x40020000

080045cc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80045d4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80045d8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80045dc:	f003 0301 	and.w	r3, r3, #1
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d013      	beq.n	800460c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80045e4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80045e8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80045ec:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d00b      	beq.n	800460c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80045f4:	e000      	b.n	80045f8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80045f6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80045f8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d0f9      	beq.n	80045f6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8004602:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	b2d2      	uxtb	r2, r2
 800460a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800460c:	687b      	ldr	r3, [r7, #4]
}
 800460e:	4618      	mov	r0, r3
 8004610:	370c      	adds	r7, #12
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr

0800461a <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 800461a:	b580      	push	{r7, lr}
 800461c:	b086      	sub	sp, #24
 800461e:	af00      	add	r7, sp, #0
 8004620:	60f8      	str	r0, [r7, #12]
 8004622:	60b9      	str	r1, [r7, #8]
 8004624:	607a      	str	r2, [r7, #4]
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004626:	2300      	movs	r3, #0
 8004628:	617b      	str	r3, [r7, #20]
 800462a:	e009      	b.n	8004640 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	1c5a      	adds	r2, r3, #1
 8004630:	60ba      	str	r2, [r7, #8]
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	4618      	mov	r0, r3
 8004636:	f7ff ffc9 	bl	80045cc <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	3301      	adds	r3, #1
 800463e:	617b      	str	r3, [r7, #20]
 8004640:	697a      	ldr	r2, [r7, #20]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	429a      	cmp	r2, r3
 8004646:	dbf1      	blt.n	800462c <_write+0x12>
  }
  return len;
 8004648:	687b      	ldr	r3, [r7, #4]
}
 800464a:	4618      	mov	r0, r3
 800464c:	3718      	adds	r7, #24
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}

08004652 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004652:	b480      	push	{r7}
 8004654:	b083      	sub	sp, #12
 8004656:	af00      	add	r7, sp, #0
 8004658:	6078      	str	r0, [r7, #4]
  }
//  if (htim->Instance == TIM12) // check if the interrupt comes from TIM12
//  {
//    link_callback_IP();
//  }
}
 800465a:	bf00      	nop
 800465c:	370c      	adds	r7, #12
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr
	...

08004668 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800466c:	f000 fef2 	bl	8005454 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004670:	f000 f830 	bl	80046d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004674:	f7ff fdd2 	bl	800421c <MX_GPIO_Init>
  MX_DMA_Init();
 8004678:	f7ff fd68 	bl	800414c <MX_DMA_Init>
  MX_UART5_Init();
 800467c:	f000 fc92 	bl	8004fa4 <MX_UART5_Init>
  MX_SPI1_Init();
 8004680:	f000 f898 	bl	80047b4 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8004684:	f000 fcb8 	bl	8004ff8 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8004688:	f7ff fea4 	bl	80043d4 <MX_I2C1_Init>
  MX_TIM1_Init();
 800468c:	f000 faa8 	bl	8004be0 <MX_TIM1_Init>
  MX_TIM8_Init();
 8004690:	f000 faf8 	bl	8004c84 <MX_TIM8_Init>
  MX_TIM12_Init();
 8004694:	f000 fb7a 	bl	8004d8c <MX_TIM12_Init>
  MX_I2C3_Init();
 8004698:	f7ff feca 	bl	8004430 <MX_I2C3_Init>
  MX_UART4_Init();
 800469c:	f000 fc58 	bl	8004f50 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  init_ds_devices();
 80046a0:	f7ff fb10 	bl	8003cc4 <init_ds_devices>
  init_sht_devices();
 80046a4:	f7ff fb4a 	bl	8003d3c <init_sht_devices>
  HAL_TIM_Base_Start_IT(&htim1);
 80046a8:	4808      	ldr	r0, [pc, #32]	; (80046cc <main+0x64>)
 80046aa:	f004 fc79 	bl	8008fa0 <HAL_TIM_Base_Start_IT>
  init_storage();
 80046ae:	f7ff fd37 	bl	8004120 <init_storage>
  init_modbus_master();
 80046b2:	f7fe fd81 	bl	80031b8 <init_modbus_master>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 80046b6:	2104      	movs	r1, #4
 80046b8:	4805      	ldr	r0, [pc, #20]	; (80046d0 <main+0x68>)
 80046ba:	f004 fd31 	bl	8009120 <HAL_TIM_PWM_Start>
//  HAL_TIM_Base_Start_IT(&htim12);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80046be:	f007 fdd3 	bl	800c268 <osKernelInitialize>
  MX_FREERTOS_Init();
 80046c2:	f7ff fd89 	bl	80041d8 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80046c6:	f007 fdf3 	bl	800c2b0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80046ca:	e7fe      	b.n	80046ca <main+0x62>
 80046cc:	20013e48 	.word	0x20013e48
 80046d0:	20013e00 	.word	0x20013e00

080046d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b094      	sub	sp, #80	; 0x50
 80046d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80046da:	f107 0320 	add.w	r3, r7, #32
 80046de:	2230      	movs	r2, #48	; 0x30
 80046e0:	2100      	movs	r1, #0
 80046e2:	4618      	mov	r0, r3
 80046e4:	f018 f820 	bl	801c728 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80046e8:	f107 030c 	add.w	r3, r7, #12
 80046ec:	2200      	movs	r2, #0
 80046ee:	601a      	str	r2, [r3, #0]
 80046f0:	605a      	str	r2, [r3, #4]
 80046f2:	609a      	str	r2, [r3, #8]
 80046f4:	60da      	str	r2, [r3, #12]
 80046f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80046f8:	2300      	movs	r3, #0
 80046fa:	60bb      	str	r3, [r7, #8]
 80046fc:	4b28      	ldr	r3, [pc, #160]	; (80047a0 <SystemClock_Config+0xcc>)
 80046fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004700:	4a27      	ldr	r2, [pc, #156]	; (80047a0 <SystemClock_Config+0xcc>)
 8004702:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004706:	6413      	str	r3, [r2, #64]	; 0x40
 8004708:	4b25      	ldr	r3, [pc, #148]	; (80047a0 <SystemClock_Config+0xcc>)
 800470a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004710:	60bb      	str	r3, [r7, #8]
 8004712:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004714:	2300      	movs	r3, #0
 8004716:	607b      	str	r3, [r7, #4]
 8004718:	4b22      	ldr	r3, [pc, #136]	; (80047a4 <SystemClock_Config+0xd0>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a21      	ldr	r2, [pc, #132]	; (80047a4 <SystemClock_Config+0xd0>)
 800471e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004722:	6013      	str	r3, [r2, #0]
 8004724:	4b1f      	ldr	r3, [pc, #124]	; (80047a4 <SystemClock_Config+0xd0>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800472c:	607b      	str	r3, [r7, #4]
 800472e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004730:	2301      	movs	r3, #1
 8004732:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004734:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004738:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800473a:	2302      	movs	r3, #2
 800473c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800473e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004742:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004744:	2304      	movs	r3, #4
 8004746:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8004748:	23a8      	movs	r3, #168	; 0xa8
 800474a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800474c:	2302      	movs	r3, #2
 800474e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004750:	2304      	movs	r3, #4
 8004752:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004754:	f107 0320 	add.w	r3, r7, #32
 8004758:	4618      	mov	r0, r3
 800475a:	f003 feb1 	bl	80084c0 <HAL_RCC_OscConfig>
 800475e:	4603      	mov	r3, r0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d001      	beq.n	8004768 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004764:	f000 f820 	bl	80047a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004768:	230f      	movs	r3, #15
 800476a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800476c:	2302      	movs	r3, #2
 800476e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004770:	2300      	movs	r3, #0
 8004772:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004774:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004778:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800477a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800477e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004780:	f107 030c 	add.w	r3, r7, #12
 8004784:	2105      	movs	r1, #5
 8004786:	4618      	mov	r0, r3
 8004788:	f004 f912 	bl	80089b0 <HAL_RCC_ClockConfig>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d001      	beq.n	8004796 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8004792:	f000 f809 	bl	80047a8 <Error_Handler>
  }
}
 8004796:	bf00      	nop
 8004798:	3750      	adds	r7, #80	; 0x50
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
 800479e:	bf00      	nop
 80047a0:	40023800 	.word	0x40023800
 80047a4:	40007000 	.word	0x40007000

080047a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80047a8:	b480      	push	{r7}
 80047aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80047ac:	b672      	cpsid	i
}
 80047ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80047b0:	e7fe      	b.n	80047b0 <Error_Handler+0x8>
	...

080047b4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80047b8:	4b17      	ldr	r3, [pc, #92]	; (8004818 <MX_SPI1_Init+0x64>)
 80047ba:	4a18      	ldr	r2, [pc, #96]	; (800481c <MX_SPI1_Init+0x68>)
 80047bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80047be:	4b16      	ldr	r3, [pc, #88]	; (8004818 <MX_SPI1_Init+0x64>)
 80047c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80047c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80047c6:	4b14      	ldr	r3, [pc, #80]	; (8004818 <MX_SPI1_Init+0x64>)
 80047c8:	2200      	movs	r2, #0
 80047ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80047cc:	4b12      	ldr	r3, [pc, #72]	; (8004818 <MX_SPI1_Init+0x64>)
 80047ce:	2200      	movs	r2, #0
 80047d0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80047d2:	4b11      	ldr	r3, [pc, #68]	; (8004818 <MX_SPI1_Init+0x64>)
 80047d4:	2200      	movs	r2, #0
 80047d6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80047d8:	4b0f      	ldr	r3, [pc, #60]	; (8004818 <MX_SPI1_Init+0x64>)
 80047da:	2200      	movs	r2, #0
 80047dc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80047de:	4b0e      	ldr	r3, [pc, #56]	; (8004818 <MX_SPI1_Init+0x64>)
 80047e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047e4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80047e6:	4b0c      	ldr	r3, [pc, #48]	; (8004818 <MX_SPI1_Init+0x64>)
 80047e8:	2200      	movs	r2, #0
 80047ea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80047ec:	4b0a      	ldr	r3, [pc, #40]	; (8004818 <MX_SPI1_Init+0x64>)
 80047ee:	2200      	movs	r2, #0
 80047f0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80047f2:	4b09      	ldr	r3, [pc, #36]	; (8004818 <MX_SPI1_Init+0x64>)
 80047f4:	2200      	movs	r2, #0
 80047f6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80047f8:	4b07      	ldr	r3, [pc, #28]	; (8004818 <MX_SPI1_Init+0x64>)
 80047fa:	2200      	movs	r2, #0
 80047fc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80047fe:	4b06      	ldr	r3, [pc, #24]	; (8004818 <MX_SPI1_Init+0x64>)
 8004800:	220a      	movs	r2, #10
 8004802:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004804:	4804      	ldr	r0, [pc, #16]	; (8004818 <MX_SPI1_Init+0x64>)
 8004806:	f004 faf3 	bl	8008df0 <HAL_SPI_Init>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d001      	beq.n	8004814 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8004810:	f7ff ffca 	bl	80047a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004814:	bf00      	nop
 8004816:	bd80      	pop	{r7, pc}
 8004818:	20013da8 	.word	0x20013da8
 800481c:	40013000 	.word	0x40013000

08004820 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b08a      	sub	sp, #40	; 0x28
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004828:	f107 0314 	add.w	r3, r7, #20
 800482c:	2200      	movs	r2, #0
 800482e:	601a      	str	r2, [r3, #0]
 8004830:	605a      	str	r2, [r3, #4]
 8004832:	609a      	str	r2, [r3, #8]
 8004834:	60da      	str	r2, [r3, #12]
 8004836:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a28      	ldr	r2, [pc, #160]	; (80048e0 <HAL_SPI_MspInit+0xc0>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d149      	bne.n	80048d6 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004842:	2300      	movs	r3, #0
 8004844:	613b      	str	r3, [r7, #16]
 8004846:	4b27      	ldr	r3, [pc, #156]	; (80048e4 <HAL_SPI_MspInit+0xc4>)
 8004848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800484a:	4a26      	ldr	r2, [pc, #152]	; (80048e4 <HAL_SPI_MspInit+0xc4>)
 800484c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004850:	6453      	str	r3, [r2, #68]	; 0x44
 8004852:	4b24      	ldr	r3, [pc, #144]	; (80048e4 <HAL_SPI_MspInit+0xc4>)
 8004854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004856:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800485a:	613b      	str	r3, [r7, #16]
 800485c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800485e:	2300      	movs	r3, #0
 8004860:	60fb      	str	r3, [r7, #12]
 8004862:	4b20      	ldr	r3, [pc, #128]	; (80048e4 <HAL_SPI_MspInit+0xc4>)
 8004864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004866:	4a1f      	ldr	r2, [pc, #124]	; (80048e4 <HAL_SPI_MspInit+0xc4>)
 8004868:	f043 0301 	orr.w	r3, r3, #1
 800486c:	6313      	str	r3, [r2, #48]	; 0x30
 800486e:	4b1d      	ldr	r3, [pc, #116]	; (80048e4 <HAL_SPI_MspInit+0xc4>)
 8004870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004872:	f003 0301 	and.w	r3, r3, #1
 8004876:	60fb      	str	r3, [r7, #12]
 8004878:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800487a:	2300      	movs	r3, #0
 800487c:	60bb      	str	r3, [r7, #8]
 800487e:	4b19      	ldr	r3, [pc, #100]	; (80048e4 <HAL_SPI_MspInit+0xc4>)
 8004880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004882:	4a18      	ldr	r2, [pc, #96]	; (80048e4 <HAL_SPI_MspInit+0xc4>)
 8004884:	f043 0302 	orr.w	r3, r3, #2
 8004888:	6313      	str	r3, [r2, #48]	; 0x30
 800488a:	4b16      	ldr	r3, [pc, #88]	; (80048e4 <HAL_SPI_MspInit+0xc4>)
 800488c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800488e:	f003 0302 	and.w	r3, r3, #2
 8004892:	60bb      	str	r3, [r7, #8]
 8004894:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8004896:	2360      	movs	r3, #96	; 0x60
 8004898:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800489a:	2302      	movs	r3, #2
 800489c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800489e:	2300      	movs	r3, #0
 80048a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048a2:	2303      	movs	r3, #3
 80048a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80048a6:	2305      	movs	r3, #5
 80048a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048aa:	f107 0314 	add.w	r3, r7, #20
 80048ae:	4619      	mov	r1, r3
 80048b0:	480d      	ldr	r0, [pc, #52]	; (80048e8 <HAL_SPI_MspInit+0xc8>)
 80048b2:	f002 ffeb 	bl	800788c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80048b6:	2320      	movs	r3, #32
 80048b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048ba:	2302      	movs	r3, #2
 80048bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048be:	2300      	movs	r3, #0
 80048c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048c2:	2303      	movs	r3, #3
 80048c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80048c6:	2305      	movs	r3, #5
 80048c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048ca:	f107 0314 	add.w	r3, r7, #20
 80048ce:	4619      	mov	r1, r3
 80048d0:	4806      	ldr	r0, [pc, #24]	; (80048ec <HAL_SPI_MspInit+0xcc>)
 80048d2:	f002 ffdb 	bl	800788c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80048d6:	bf00      	nop
 80048d8:	3728      	adds	r7, #40	; 0x28
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	40013000 	.word	0x40013000
 80048e4:	40023800 	.word	0x40023800
 80048e8:	40020000 	.word	0x40020000
 80048ec:	40020400 	.word	0x40020400

080048f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b082      	sub	sp, #8
 80048f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048f6:	2300      	movs	r3, #0
 80048f8:	607b      	str	r3, [r7, #4]
 80048fa:	4b12      	ldr	r3, [pc, #72]	; (8004944 <HAL_MspInit+0x54>)
 80048fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048fe:	4a11      	ldr	r2, [pc, #68]	; (8004944 <HAL_MspInit+0x54>)
 8004900:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004904:	6453      	str	r3, [r2, #68]	; 0x44
 8004906:	4b0f      	ldr	r3, [pc, #60]	; (8004944 <HAL_MspInit+0x54>)
 8004908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800490a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800490e:	607b      	str	r3, [r7, #4]
 8004910:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004912:	2300      	movs	r3, #0
 8004914:	603b      	str	r3, [r7, #0]
 8004916:	4b0b      	ldr	r3, [pc, #44]	; (8004944 <HAL_MspInit+0x54>)
 8004918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491a:	4a0a      	ldr	r2, [pc, #40]	; (8004944 <HAL_MspInit+0x54>)
 800491c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004920:	6413      	str	r3, [r2, #64]	; 0x40
 8004922:	4b08      	ldr	r3, [pc, #32]	; (8004944 <HAL_MspInit+0x54>)
 8004924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800492a:	603b      	str	r3, [r7, #0]
 800492c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800492e:	2200      	movs	r2, #0
 8004930:	210f      	movs	r1, #15
 8004932:	f06f 0001 	mvn.w	r0, #1
 8004936:	f000 fefe 	bl	8005736 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800493a:	bf00      	nop
 800493c:	3708      	adds	r7, #8
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	40023800 	.word	0x40023800

08004948 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004948:	b480      	push	{r7}
 800494a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800494c:	e7fe      	b.n	800494c <NMI_Handler+0x4>

0800494e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800494e:	b480      	push	{r7}
 8004950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004952:	e7fe      	b.n	8004952 <HardFault_Handler+0x4>

08004954 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004954:	b480      	push	{r7}
 8004956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004958:	e7fe      	b.n	8004958 <MemManage_Handler+0x4>

0800495a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800495a:	b480      	push	{r7}
 800495c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800495e:	e7fe      	b.n	800495e <BusFault_Handler+0x4>

08004960 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004960:	b480      	push	{r7}
 8004962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004964:	e7fe      	b.n	8004964 <UsageFault_Handler+0x4>

08004966 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004966:	b480      	push	{r7}
 8004968:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800496a:	bf00      	nop
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr

08004974 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004978:	f000 fdbe 	bl	80054f8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800497c:	f00a f8d8 	bl	800eb30 <xTaskGetSchedulerState>
 8004980:	4603      	mov	r3, r0
 8004982:	2b01      	cmp	r3, #1
 8004984:	d001      	beq.n	800498a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8004986:	f00b f9f7 	bl	800fd78 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800498a:	bf00      	nop
 800498c:	bd80      	pop	{r7, pc}
	...

08004990 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8004994:	4802      	ldr	r0, [pc, #8]	; (80049a0 <DMA1_Stream0_IRQHandler+0x10>)
 8004996:	f001 f89d 	bl	8005ad4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800499a:	bf00      	nop
 800499c:	bd80      	pop	{r7, pc}
 800499e:	bf00      	nop
 80049a0:	20014064 	.word	0x20014064

080049a4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80049a8:	4802      	ldr	r0, [pc, #8]	; (80049b4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80049aa:	f004 fc81 	bl	80092b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80049ae:	bf00      	nop
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	bf00      	nop
 80049b4:	20013e48 	.word	0x20013e48

080049b8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80049bc:	4802      	ldr	r0, [pc, #8]	; (80049c8 <USART1_IRQHandler+0x10>)
 80049be:	f005 fdf9 	bl	800a5b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80049c2:	bf00      	nop
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop
 80049c8:	20013fdc 	.word	0x20013fdc

080049cc <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80049d0:	4803      	ldr	r0, [pc, #12]	; (80049e0 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 80049d2:	f004 fc6d 	bl	80092b0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 80049d6:	4803      	ldr	r0, [pc, #12]	; (80049e4 <TIM8_BRK_TIM12_IRQHandler+0x18>)
 80049d8:	f004 fc6a 	bl	80092b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 80049dc:	bf00      	nop
 80049de:	bd80      	pop	{r7, pc}
 80049e0:	20013e00 	.word	0x20013e00
 80049e4:	20013e90 	.word	0x20013e90

080049e8 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 80049ec:	4802      	ldr	r0, [pc, #8]	; (80049f8 <DMA1_Stream7_IRQHandler+0x10>)
 80049ee:	f001 f871 	bl	8005ad4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80049f2:	bf00      	nop
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	bf00      	nop
 80049f8:	200140c4 	.word	0x200140c4

080049fc <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8004a00:	4802      	ldr	r0, [pc, #8]	; (8004a0c <UART4_IRQHandler+0x10>)
 8004a02:	f005 fdd7 	bl	800a5b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8004a06:	bf00      	nop
 8004a08:	bd80      	pop	{r7, pc}
 8004a0a:	bf00      	nop
 8004a0c:	20014020 	.word	0x20014020

08004a10 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8004a14:	4802      	ldr	r0, [pc, #8]	; (8004a20 <UART5_IRQHandler+0x10>)
 8004a16:	f005 fdcd 	bl	800a5b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8004a1a:	bf00      	nop
 8004a1c:	bd80      	pop	{r7, pc}
 8004a1e:	bf00      	nop
 8004a20:	20013f38 	.word	0x20013f38

08004a24 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8004a28:	4802      	ldr	r0, [pc, #8]	; (8004a34 <DMA2_Stream2_IRQHandler+0x10>)
 8004a2a:	f001 f853 	bl	8005ad4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8004a2e:	bf00      	nop
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	bf00      	nop
 8004a34:	20013f7c 	.word	0x20013f7c

08004a38 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8004a3c:	4802      	ldr	r0, [pc, #8]	; (8004a48 <ETH_IRQHandler+0x10>)
 8004a3e:	f001 fe93 	bl	8006768 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8004a42:	bf00      	nop
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	bf00      	nop
 8004a48:	20015a88 	.word	0x20015a88

08004a4c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004a50:	4802      	ldr	r0, [pc, #8]	; (8004a5c <DMA2_Stream7_IRQHandler+0x10>)
 8004a52:	f001 f83f 	bl	8005ad4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8004a56:	bf00      	nop
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	bf00      	nop
 8004a5c:	20013ed8 	.word	0x20013ed8

08004a60 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004a60:	b480      	push	{r7}
 8004a62:	af00      	add	r7, sp, #0
  return 1;
 8004a64:	2301      	movs	r3, #1
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <_kill>:

int _kill(int pid, int sig)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b083      	sub	sp, #12
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004a7a:	4b05      	ldr	r3, [pc, #20]	; (8004a90 <_kill+0x20>)
 8004a7c:	2216      	movs	r2, #22
 8004a7e:	601a      	str	r2, [r3, #0]
  return -1;
 8004a80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	370c      	adds	r7, #12
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr
 8004a90:	20013900 	.word	0x20013900

08004a94 <_exit>:

void _exit (int status)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b082      	sub	sp, #8
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004a9c:	f04f 31ff 	mov.w	r1, #4294967295
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f7ff ffe5 	bl	8004a70 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004aa6:	e7fe      	b.n	8004aa6 <_exit+0x12>

08004aa8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b086      	sub	sp, #24
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	60b9      	str	r1, [r7, #8]
 8004ab2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	617b      	str	r3, [r7, #20]
 8004ab8:	e00a      	b.n	8004ad0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004aba:	f3af 8000 	nop.w
 8004abe:	4601      	mov	r1, r0
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	1c5a      	adds	r2, r3, #1
 8004ac4:	60ba      	str	r2, [r7, #8]
 8004ac6:	b2ca      	uxtb	r2, r1
 8004ac8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	3301      	adds	r3, #1
 8004ace:	617b      	str	r3, [r7, #20]
 8004ad0:	697a      	ldr	r2, [r7, #20]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	dbf0      	blt.n	8004aba <_read+0x12>
  }

  return len;
 8004ad8:	687b      	ldr	r3, [r7, #4]
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3718      	adds	r7, #24
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}

08004ae2 <_close>:
  }
  return len;
}

int _close(int file)
{
 8004ae2:	b480      	push	{r7}
 8004ae4:	b083      	sub	sp, #12
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004aea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	370c      	adds	r7, #12
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr

08004afa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004afa:	b480      	push	{r7}
 8004afc:	b083      	sub	sp, #12
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
 8004b02:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004b0a:	605a      	str	r2, [r3, #4]
  return 0;
 8004b0c:	2300      	movs	r3, #0
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	370c      	adds	r7, #12
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr

08004b1a <_isatty>:

int _isatty(int file)
{
 8004b1a:	b480      	push	{r7}
 8004b1c:	b083      	sub	sp, #12
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004b22:	2301      	movs	r3, #1
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	370c      	adds	r7, #12
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr

08004b30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b085      	sub	sp, #20
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	60b9      	str	r1, [r7, #8]
 8004b3a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004b3c:	2300      	movs	r3, #0
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3714      	adds	r7, #20
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr
	...

08004b4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b087      	sub	sp, #28
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004b54:	4a14      	ldr	r2, [pc, #80]	; (8004ba8 <_sbrk+0x5c>)
 8004b56:	4b15      	ldr	r3, [pc, #84]	; (8004bac <_sbrk+0x60>)
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004b60:	4b13      	ldr	r3, [pc, #76]	; (8004bb0 <_sbrk+0x64>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d102      	bne.n	8004b6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004b68:	4b11      	ldr	r3, [pc, #68]	; (8004bb0 <_sbrk+0x64>)
 8004b6a:	4a12      	ldr	r2, [pc, #72]	; (8004bb4 <_sbrk+0x68>)
 8004b6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004b6e:	4b10      	ldr	r3, [pc, #64]	; (8004bb0 <_sbrk+0x64>)
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	4413      	add	r3, r2
 8004b76:	693a      	ldr	r2, [r7, #16]
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d205      	bcs.n	8004b88 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8004b7c:	4b0e      	ldr	r3, [pc, #56]	; (8004bb8 <_sbrk+0x6c>)
 8004b7e:	220c      	movs	r2, #12
 8004b80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004b82:	f04f 33ff 	mov.w	r3, #4294967295
 8004b86:	e009      	b.n	8004b9c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8004b88:	4b09      	ldr	r3, [pc, #36]	; (8004bb0 <_sbrk+0x64>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004b8e:	4b08      	ldr	r3, [pc, #32]	; (8004bb0 <_sbrk+0x64>)
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	4413      	add	r3, r2
 8004b96:	4a06      	ldr	r2, [pc, #24]	; (8004bb0 <_sbrk+0x64>)
 8004b98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	371c      	adds	r7, #28
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr
 8004ba8:	20020000 	.word	0x20020000
 8004bac:	00002000 	.word	0x00002000
 8004bb0:	20000040 	.word	0x20000040
 8004bb4:	100001f8 	.word	0x100001f8
 8004bb8:	20013900 	.word	0x20013900

08004bbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004bc0:	4b06      	ldr	r3, [pc, #24]	; (8004bdc <SystemInit+0x20>)
 8004bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bc6:	4a05      	ldr	r2, [pc, #20]	; (8004bdc <SystemInit+0x20>)
 8004bc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004bcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004bd0:	bf00      	nop
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr
 8004bda:	bf00      	nop
 8004bdc:	e000ed00 	.word	0xe000ed00

08004be0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b086      	sub	sp, #24
 8004be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004be6:	f107 0308 	add.w	r3, r7, #8
 8004bea:	2200      	movs	r2, #0
 8004bec:	601a      	str	r2, [r3, #0]
 8004bee:	605a      	str	r2, [r3, #4]
 8004bf0:	609a      	str	r2, [r3, #8]
 8004bf2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004bf4:	463b      	mov	r3, r7
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	601a      	str	r2, [r3, #0]
 8004bfa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004bfc:	4b1f      	ldr	r3, [pc, #124]	; (8004c7c <MX_TIM1_Init+0x9c>)
 8004bfe:	4a20      	ldr	r2, [pc, #128]	; (8004c80 <MX_TIM1_Init+0xa0>)
 8004c00:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8400;
 8004c02:	4b1e      	ldr	r3, [pc, #120]	; (8004c7c <MX_TIM1_Init+0x9c>)
 8004c04:	f242 02d0 	movw	r2, #8400	; 0x20d0
 8004c08:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c0a:	4b1c      	ldr	r3, [pc, #112]	; (8004c7c <MX_TIM1_Init+0x9c>)
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 8004c10:	4b1a      	ldr	r3, [pc, #104]	; (8004c7c <MX_TIM1_Init+0x9c>)
 8004c12:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8004c16:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004c18:	4b18      	ldr	r3, [pc, #96]	; (8004c7c <MX_TIM1_Init+0x9c>)
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004c1e:	4b17      	ldr	r3, [pc, #92]	; (8004c7c <MX_TIM1_Init+0x9c>)
 8004c20:	2200      	movs	r2, #0
 8004c22:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004c24:	4b15      	ldr	r3, [pc, #84]	; (8004c7c <MX_TIM1_Init+0x9c>)
 8004c26:	2200      	movs	r2, #0
 8004c28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004c2a:	4814      	ldr	r0, [pc, #80]	; (8004c7c <MX_TIM1_Init+0x9c>)
 8004c2c:	f004 f969 	bl	8008f02 <HAL_TIM_Base_Init>
 8004c30:	4603      	mov	r3, r0
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d001      	beq.n	8004c3a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8004c36:	f7ff fdb7 	bl	80047a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004c3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c3e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004c40:	f107 0308 	add.w	r3, r7, #8
 8004c44:	4619      	mov	r1, r3
 8004c46:	480d      	ldr	r0, [pc, #52]	; (8004c7c <MX_TIM1_Init+0x9c>)
 8004c48:	f004 fcfc 	bl	8009644 <HAL_TIM_ConfigClockSource>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d001      	beq.n	8004c56 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8004c52:	f7ff fda9 	bl	80047a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004c56:	2300      	movs	r3, #0
 8004c58:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004c5e:	463b      	mov	r3, r7
 8004c60:	4619      	mov	r1, r3
 8004c62:	4806      	ldr	r0, [pc, #24]	; (8004c7c <MX_TIM1_Init+0x9c>)
 8004c64:	f005 f8ee 	bl	8009e44 <HAL_TIMEx_MasterConfigSynchronization>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d001      	beq.n	8004c72 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8004c6e:	f7ff fd9b 	bl	80047a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8004c72:	bf00      	nop
 8004c74:	3718      	adds	r7, #24
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	20013e48 	.word	0x20013e48
 8004c80:	40010000 	.word	0x40010000

08004c84 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b092      	sub	sp, #72	; 0x48
 8004c88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004c8a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004c8e:	2200      	movs	r2, #0
 8004c90:	601a      	str	r2, [r3, #0]
 8004c92:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004c94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c98:	2200      	movs	r2, #0
 8004c9a:	601a      	str	r2, [r3, #0]
 8004c9c:	605a      	str	r2, [r3, #4]
 8004c9e:	609a      	str	r2, [r3, #8]
 8004ca0:	60da      	str	r2, [r3, #12]
 8004ca2:	611a      	str	r2, [r3, #16]
 8004ca4:	615a      	str	r2, [r3, #20]
 8004ca6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004ca8:	1d3b      	adds	r3, r7, #4
 8004caa:	2220      	movs	r2, #32
 8004cac:	2100      	movs	r1, #0
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f017 fd3a 	bl	801c728 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8004cb4:	4b33      	ldr	r3, [pc, #204]	; (8004d84 <MX_TIM8_Init+0x100>)
 8004cb6:	4a34      	ldr	r2, [pc, #208]	; (8004d88 <MX_TIM8_Init+0x104>)
 8004cb8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 3-1;
 8004cba:	4b32      	ldr	r3, [pc, #200]	; (8004d84 <MX_TIM8_Init+0x100>)
 8004cbc:	2202      	movs	r2, #2
 8004cbe:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004cc0:	4b30      	ldr	r3, [pc, #192]	; (8004d84 <MX_TIM8_Init+0x100>)
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 56000-1;
 8004cc6:	4b2f      	ldr	r3, [pc, #188]	; (8004d84 <MX_TIM8_Init+0x100>)
 8004cc8:	f64d 22bf 	movw	r2, #55999	; 0xdabf
 8004ccc:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004cce:	4b2d      	ldr	r3, [pc, #180]	; (8004d84 <MX_TIM8_Init+0x100>)
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8004cd4:	4b2b      	ldr	r3, [pc, #172]	; (8004d84 <MX_TIM8_Init+0x100>)
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004cda:	4b2a      	ldr	r3, [pc, #168]	; (8004d84 <MX_TIM8_Init+0x100>)
 8004cdc:	2200      	movs	r2, #0
 8004cde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8004ce0:	4828      	ldr	r0, [pc, #160]	; (8004d84 <MX_TIM8_Init+0x100>)
 8004ce2:	f004 f9cd 	bl	8009080 <HAL_TIM_PWM_Init>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d001      	beq.n	8004cf0 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8004cec:	f7ff fd5c 	bl	80047a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8004cf8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004cfc:	4619      	mov	r1, r3
 8004cfe:	4821      	ldr	r0, [pc, #132]	; (8004d84 <MX_TIM8_Init+0x100>)
 8004d00:	f005 f8a0 	bl	8009e44 <HAL_TIMEx_MasterConfigSynchronization>
 8004d04:	4603      	mov	r3, r0
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d001      	beq.n	8004d0e <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8004d0a:	f7ff fd4d 	bl	80047a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004d0e:	2360      	movs	r3, #96	; 0x60
 8004d10:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8004d12:	2300      	movs	r3, #0
 8004d14:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004d16:	2300      	movs	r3, #0
 8004d18:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004d22:	2300      	movs	r3, #0
 8004d24:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004d26:	2300      	movs	r3, #0
 8004d28:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004d2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d2e:	2204      	movs	r2, #4
 8004d30:	4619      	mov	r1, r3
 8004d32:	4814      	ldr	r0, [pc, #80]	; (8004d84 <MX_TIM8_Init+0x100>)
 8004d34:	f004 fbc4 	bl	80094c0 <HAL_TIM_PWM_ConfigChannel>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d001      	beq.n	8004d42 <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8004d3e:	f7ff fd33 	bl	80047a8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004d42:	2300      	movs	r3, #0
 8004d44:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004d46:	2300      	movs	r3, #0
 8004d48:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004d52:	2300      	movs	r3, #0
 8004d54:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004d56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004d5a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8004d60:	1d3b      	adds	r3, r7, #4
 8004d62:	4619      	mov	r1, r3
 8004d64:	4807      	ldr	r0, [pc, #28]	; (8004d84 <MX_TIM8_Init+0x100>)
 8004d66:	f005 f8e9 	bl	8009f3c <HAL_TIMEx_ConfigBreakDeadTime>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d001      	beq.n	8004d74 <MX_TIM8_Init+0xf0>
  {
    Error_Handler();
 8004d70:	f7ff fd1a 	bl	80047a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8004d74:	4803      	ldr	r0, [pc, #12]	; (8004d84 <MX_TIM8_Init+0x100>)
 8004d76:	f000 f8b1 	bl	8004edc <HAL_TIM_MspPostInit>

}
 8004d7a:	bf00      	nop
 8004d7c:	3748      	adds	r7, #72	; 0x48
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop
 8004d84:	20013e00 	.word	0x20013e00
 8004d88:	40010400 	.word	0x40010400

08004d8c <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b084      	sub	sp, #16
 8004d90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004d92:	463b      	mov	r3, r7
 8004d94:	2200      	movs	r2, #0
 8004d96:	601a      	str	r2, [r3, #0]
 8004d98:	605a      	str	r2, [r3, #4]
 8004d9a:	609a      	str	r2, [r3, #8]
 8004d9c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8004d9e:	4b16      	ldr	r3, [pc, #88]	; (8004df8 <MX_TIM12_Init+0x6c>)
 8004da0:	4a16      	ldr	r2, [pc, #88]	; (8004dfc <MX_TIM12_Init+0x70>)
 8004da2:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 8400-1;
 8004da4:	4b14      	ldr	r3, [pc, #80]	; (8004df8 <MX_TIM12_Init+0x6c>)
 8004da6:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8004daa:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004dac:	4b12      	ldr	r3, [pc, #72]	; (8004df8 <MX_TIM12_Init+0x6c>)
 8004dae:	2200      	movs	r2, #0
 8004db0:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8004db2:	4b11      	ldr	r3, [pc, #68]	; (8004df8 <MX_TIM12_Init+0x6c>)
 8004db4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004db8:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004dba:	4b0f      	ldr	r3, [pc, #60]	; (8004df8 <MX_TIM12_Init+0x6c>)
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004dc0:	4b0d      	ldr	r3, [pc, #52]	; (8004df8 <MX_TIM12_Init+0x6c>)
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8004dc6:	480c      	ldr	r0, [pc, #48]	; (8004df8 <MX_TIM12_Init+0x6c>)
 8004dc8:	f004 f89b 	bl	8008f02 <HAL_TIM_Base_Init>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d001      	beq.n	8004dd6 <MX_TIM12_Init+0x4a>
  {
    Error_Handler();
 8004dd2:	f7ff fce9 	bl	80047a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004dd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004dda:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8004ddc:	463b      	mov	r3, r7
 8004dde:	4619      	mov	r1, r3
 8004de0:	4805      	ldr	r0, [pc, #20]	; (8004df8 <MX_TIM12_Init+0x6c>)
 8004de2:	f004 fc2f 	bl	8009644 <HAL_TIM_ConfigClockSource>
 8004de6:	4603      	mov	r3, r0
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d001      	beq.n	8004df0 <MX_TIM12_Init+0x64>
  {
    Error_Handler();
 8004dec:	f7ff fcdc 	bl	80047a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8004df0:	bf00      	nop
 8004df2:	3710      	adds	r7, #16
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}
 8004df8:	20013e90 	.word	0x20013e90
 8004dfc:	40001800 	.word	0x40001800

08004e00 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b084      	sub	sp, #16
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a1c      	ldr	r2, [pc, #112]	; (8004e80 <HAL_TIM_Base_MspInit+0x80>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d116      	bne.n	8004e40 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004e12:	2300      	movs	r3, #0
 8004e14:	60fb      	str	r3, [r7, #12]
 8004e16:	4b1b      	ldr	r3, [pc, #108]	; (8004e84 <HAL_TIM_Base_MspInit+0x84>)
 8004e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e1a:	4a1a      	ldr	r2, [pc, #104]	; (8004e84 <HAL_TIM_Base_MspInit+0x84>)
 8004e1c:	f043 0301 	orr.w	r3, r3, #1
 8004e20:	6453      	str	r3, [r2, #68]	; 0x44
 8004e22:	4b18      	ldr	r3, [pc, #96]	; (8004e84 <HAL_TIM_Base_MspInit+0x84>)
 8004e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e26:	f003 0301 	and.w	r3, r3, #1
 8004e2a:	60fb      	str	r3, [r7, #12]
 8004e2c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8004e2e:	2200      	movs	r2, #0
 8004e30:	2105      	movs	r1, #5
 8004e32:	2019      	movs	r0, #25
 8004e34:	f000 fc7f 	bl	8005736 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004e38:	2019      	movs	r0, #25
 8004e3a:	f000 fc98 	bl	800576e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8004e3e:	e01a      	b.n	8004e76 <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM12)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a10      	ldr	r2, [pc, #64]	; (8004e88 <HAL_TIM_Base_MspInit+0x88>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d115      	bne.n	8004e76 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	60bb      	str	r3, [r7, #8]
 8004e4e:	4b0d      	ldr	r3, [pc, #52]	; (8004e84 <HAL_TIM_Base_MspInit+0x84>)
 8004e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e52:	4a0c      	ldr	r2, [pc, #48]	; (8004e84 <HAL_TIM_Base_MspInit+0x84>)
 8004e54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e58:	6413      	str	r3, [r2, #64]	; 0x40
 8004e5a:	4b0a      	ldr	r3, [pc, #40]	; (8004e84 <HAL_TIM_Base_MspInit+0x84>)
 8004e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e62:	60bb      	str	r3, [r7, #8]
 8004e64:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 5, 0);
 8004e66:	2200      	movs	r2, #0
 8004e68:	2105      	movs	r1, #5
 8004e6a:	202b      	movs	r0, #43	; 0x2b
 8004e6c:	f000 fc63 	bl	8005736 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8004e70:	202b      	movs	r0, #43	; 0x2b
 8004e72:	f000 fc7c 	bl	800576e <HAL_NVIC_EnableIRQ>
}
 8004e76:	bf00      	nop
 8004e78:	3710      	adds	r7, #16
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	40010000 	.word	0x40010000
 8004e84:	40023800 	.word	0x40023800
 8004e88:	40001800 	.word	0x40001800

08004e8c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b084      	sub	sp, #16
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM8)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a0e      	ldr	r2, [pc, #56]	; (8004ed4 <HAL_TIM_PWM_MspInit+0x48>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d115      	bne.n	8004eca <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	60fb      	str	r3, [r7, #12]
 8004ea2:	4b0d      	ldr	r3, [pc, #52]	; (8004ed8 <HAL_TIM_PWM_MspInit+0x4c>)
 8004ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ea6:	4a0c      	ldr	r2, [pc, #48]	; (8004ed8 <HAL_TIM_PWM_MspInit+0x4c>)
 8004ea8:	f043 0302 	orr.w	r3, r3, #2
 8004eac:	6453      	str	r3, [r2, #68]	; 0x44
 8004eae:	4b0a      	ldr	r3, [pc, #40]	; (8004ed8 <HAL_TIM_PWM_MspInit+0x4c>)
 8004eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eb2:	f003 0302 	and.w	r3, r3, #2
 8004eb6:	60fb      	str	r3, [r7, #12]
 8004eb8:	68fb      	ldr	r3, [r7, #12]

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 5, 0);
 8004eba:	2200      	movs	r2, #0
 8004ebc:	2105      	movs	r1, #5
 8004ebe:	202b      	movs	r0, #43	; 0x2b
 8004ec0:	f000 fc39 	bl	8005736 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8004ec4:	202b      	movs	r0, #43	; 0x2b
 8004ec6:	f000 fc52 	bl	800576e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8004eca:	bf00      	nop
 8004ecc:	3710      	adds	r7, #16
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	40010400 	.word	0x40010400
 8004ed8:	40023800 	.word	0x40023800

08004edc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b088      	sub	sp, #32
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ee4:	f107 030c 	add.w	r3, r7, #12
 8004ee8:	2200      	movs	r2, #0
 8004eea:	601a      	str	r2, [r3, #0]
 8004eec:	605a      	str	r2, [r3, #4]
 8004eee:	609a      	str	r2, [r3, #8]
 8004ef0:	60da      	str	r2, [r3, #12]
 8004ef2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a12      	ldr	r2, [pc, #72]	; (8004f44 <HAL_TIM_MspPostInit+0x68>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d11d      	bne.n	8004f3a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004efe:	2300      	movs	r3, #0
 8004f00:	60bb      	str	r3, [r7, #8]
 8004f02:	4b11      	ldr	r3, [pc, #68]	; (8004f48 <HAL_TIM_MspPostInit+0x6c>)
 8004f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f06:	4a10      	ldr	r2, [pc, #64]	; (8004f48 <HAL_TIM_MspPostInit+0x6c>)
 8004f08:	f043 0304 	orr.w	r3, r3, #4
 8004f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8004f0e:	4b0e      	ldr	r3, [pc, #56]	; (8004f48 <HAL_TIM_MspPostInit+0x6c>)
 8004f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f12:	f003 0304 	and.w	r3, r3, #4
 8004f16:	60bb      	str	r3, [r7, #8]
 8004f18:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004f1a:	2380      	movs	r3, #128	; 0x80
 8004f1c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f1e:	2302      	movs	r3, #2
 8004f20:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f22:	2300      	movs	r3, #0
 8004f24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f26:	2300      	movs	r3, #0
 8004f28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004f2a:	2303      	movs	r3, #3
 8004f2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f2e:	f107 030c 	add.w	r3, r7, #12
 8004f32:	4619      	mov	r1, r3
 8004f34:	4805      	ldr	r0, [pc, #20]	; (8004f4c <HAL_TIM_MspPostInit+0x70>)
 8004f36:	f002 fca9 	bl	800788c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8004f3a:	bf00      	nop
 8004f3c:	3720      	adds	r7, #32
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	bf00      	nop
 8004f44:	40010400 	.word	0x40010400
 8004f48:	40023800 	.word	0x40023800
 8004f4c:	40020800 	.word	0x40020800

08004f50 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart1_rx;
DMA_HandleTypeDef hdma_usart1_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8004f54:	4b11      	ldr	r3, [pc, #68]	; (8004f9c <MX_UART4_Init+0x4c>)
 8004f56:	4a12      	ldr	r2, [pc, #72]	; (8004fa0 <MX_UART4_Init+0x50>)
 8004f58:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8004f5a:	4b10      	ldr	r3, [pc, #64]	; (8004f9c <MX_UART4_Init+0x4c>)
 8004f5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004f60:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8004f62:	4b0e      	ldr	r3, [pc, #56]	; (8004f9c <MX_UART4_Init+0x4c>)
 8004f64:	2200      	movs	r2, #0
 8004f66:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8004f68:	4b0c      	ldr	r3, [pc, #48]	; (8004f9c <MX_UART4_Init+0x4c>)
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8004f6e:	4b0b      	ldr	r3, [pc, #44]	; (8004f9c <MX_UART4_Init+0x4c>)
 8004f70:	2200      	movs	r2, #0
 8004f72:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8004f74:	4b09      	ldr	r3, [pc, #36]	; (8004f9c <MX_UART4_Init+0x4c>)
 8004f76:	220c      	movs	r2, #12
 8004f78:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004f7a:	4b08      	ldr	r3, [pc, #32]	; (8004f9c <MX_UART4_Init+0x4c>)
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8004f80:	4b06      	ldr	r3, [pc, #24]	; (8004f9c <MX_UART4_Init+0x4c>)
 8004f82:	2200      	movs	r2, #0
 8004f84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8004f86:	4805      	ldr	r0, [pc, #20]	; (8004f9c <MX_UART4_Init+0x4c>)
 8004f88:	f005 f83e 	bl	800a008 <HAL_UART_Init>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d001      	beq.n	8004f96 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8004f92:	f7ff fc09 	bl	80047a8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8004f96:	bf00      	nop
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	bf00      	nop
 8004f9c:	20014020 	.word	0x20014020
 8004fa0:	40004c00 	.word	0x40004c00

08004fa4 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8004fa8:	4b11      	ldr	r3, [pc, #68]	; (8004ff0 <MX_UART5_Init+0x4c>)
 8004faa:	4a12      	ldr	r2, [pc, #72]	; (8004ff4 <MX_UART5_Init+0x50>)
 8004fac:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8004fae:	4b10      	ldr	r3, [pc, #64]	; (8004ff0 <MX_UART5_Init+0x4c>)
 8004fb0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004fb4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8004fb6:	4b0e      	ldr	r3, [pc, #56]	; (8004ff0 <MX_UART5_Init+0x4c>)
 8004fb8:	2200      	movs	r2, #0
 8004fba:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8004fbc:	4b0c      	ldr	r3, [pc, #48]	; (8004ff0 <MX_UART5_Init+0x4c>)
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8004fc2:	4b0b      	ldr	r3, [pc, #44]	; (8004ff0 <MX_UART5_Init+0x4c>)
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8004fc8:	4b09      	ldr	r3, [pc, #36]	; (8004ff0 <MX_UART5_Init+0x4c>)
 8004fca:	220c      	movs	r2, #12
 8004fcc:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004fce:	4b08      	ldr	r3, [pc, #32]	; (8004ff0 <MX_UART5_Init+0x4c>)
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8004fd4:	4b06      	ldr	r3, [pc, #24]	; (8004ff0 <MX_UART5_Init+0x4c>)
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8004fda:	4805      	ldr	r0, [pc, #20]	; (8004ff0 <MX_UART5_Init+0x4c>)
 8004fdc:	f005 f814 	bl	800a008 <HAL_UART_Init>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d001      	beq.n	8004fea <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8004fe6:	f7ff fbdf 	bl	80047a8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8004fea:	bf00      	nop
 8004fec:	bd80      	pop	{r7, pc}
 8004fee:	bf00      	nop
 8004ff0:	20013f38 	.word	0x20013f38
 8004ff4:	40005000 	.word	0x40005000

08004ff8 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004ffc:	4b11      	ldr	r3, [pc, #68]	; (8005044 <MX_USART1_UART_Init+0x4c>)
 8004ffe:	4a12      	ldr	r2, [pc, #72]	; (8005048 <MX_USART1_UART_Init+0x50>)
 8005000:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005002:	4b10      	ldr	r3, [pc, #64]	; (8005044 <MX_USART1_UART_Init+0x4c>)
 8005004:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005008:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800500a:	4b0e      	ldr	r3, [pc, #56]	; (8005044 <MX_USART1_UART_Init+0x4c>)
 800500c:	2200      	movs	r2, #0
 800500e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005010:	4b0c      	ldr	r3, [pc, #48]	; (8005044 <MX_USART1_UART_Init+0x4c>)
 8005012:	2200      	movs	r2, #0
 8005014:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005016:	4b0b      	ldr	r3, [pc, #44]	; (8005044 <MX_USART1_UART_Init+0x4c>)
 8005018:	2200      	movs	r2, #0
 800501a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800501c:	4b09      	ldr	r3, [pc, #36]	; (8005044 <MX_USART1_UART_Init+0x4c>)
 800501e:	220c      	movs	r2, #12
 8005020:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005022:	4b08      	ldr	r3, [pc, #32]	; (8005044 <MX_USART1_UART_Init+0x4c>)
 8005024:	2200      	movs	r2, #0
 8005026:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005028:	4b06      	ldr	r3, [pc, #24]	; (8005044 <MX_USART1_UART_Init+0x4c>)
 800502a:	2200      	movs	r2, #0
 800502c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800502e:	4805      	ldr	r0, [pc, #20]	; (8005044 <MX_USART1_UART_Init+0x4c>)
 8005030:	f004 ffea 	bl	800a008 <HAL_UART_Init>
 8005034:	4603      	mov	r3, r0
 8005036:	2b00      	cmp	r3, #0
 8005038:	d001      	beq.n	800503e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800503a:	f7ff fbb5 	bl	80047a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800503e:	bf00      	nop
 8005040:	bd80      	pop	{r7, pc}
 8005042:	bf00      	nop
 8005044:	20013fdc 	.word	0x20013fdc
 8005048:	40011000 	.word	0x40011000

0800504c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b090      	sub	sp, #64	; 0x40
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005054:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005058:	2200      	movs	r2, #0
 800505a:	601a      	str	r2, [r3, #0]
 800505c:	605a      	str	r2, [r3, #4]
 800505e:	609a      	str	r2, [r3, #8]
 8005060:	60da      	str	r2, [r3, #12]
 8005062:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a86      	ldr	r2, [pc, #536]	; (8005284 <HAL_UART_MspInit+0x238>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d153      	bne.n	8005116 <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800506e:	2300      	movs	r3, #0
 8005070:	62bb      	str	r3, [r7, #40]	; 0x28
 8005072:	4b85      	ldr	r3, [pc, #532]	; (8005288 <HAL_UART_MspInit+0x23c>)
 8005074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005076:	4a84      	ldr	r2, [pc, #528]	; (8005288 <HAL_UART_MspInit+0x23c>)
 8005078:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800507c:	6413      	str	r3, [r2, #64]	; 0x40
 800507e:	4b82      	ldr	r3, [pc, #520]	; (8005288 <HAL_UART_MspInit+0x23c>)
 8005080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005082:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005086:	62bb      	str	r3, [r7, #40]	; 0x28
 8005088:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800508a:	2300      	movs	r3, #0
 800508c:	627b      	str	r3, [r7, #36]	; 0x24
 800508e:	4b7e      	ldr	r3, [pc, #504]	; (8005288 <HAL_UART_MspInit+0x23c>)
 8005090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005092:	4a7d      	ldr	r2, [pc, #500]	; (8005288 <HAL_UART_MspInit+0x23c>)
 8005094:	f043 0301 	orr.w	r3, r3, #1
 8005098:	6313      	str	r3, [r2, #48]	; 0x30
 800509a:	4b7b      	ldr	r3, [pc, #492]	; (8005288 <HAL_UART_MspInit+0x23c>)
 800509c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800509e:	f003 0301 	and.w	r3, r3, #1
 80050a2:	627b      	str	r3, [r7, #36]	; 0x24
 80050a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80050a6:	2300      	movs	r3, #0
 80050a8:	623b      	str	r3, [r7, #32]
 80050aa:	4b77      	ldr	r3, [pc, #476]	; (8005288 <HAL_UART_MspInit+0x23c>)
 80050ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ae:	4a76      	ldr	r2, [pc, #472]	; (8005288 <HAL_UART_MspInit+0x23c>)
 80050b0:	f043 0304 	orr.w	r3, r3, #4
 80050b4:	6313      	str	r3, [r2, #48]	; 0x30
 80050b6:	4b74      	ldr	r3, [pc, #464]	; (8005288 <HAL_UART_MspInit+0x23c>)
 80050b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ba:	f003 0304 	and.w	r3, r3, #4
 80050be:	623b      	str	r3, [r7, #32]
 80050c0:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80050c2:	2301      	movs	r3, #1
 80050c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050c6:	2302      	movs	r3, #2
 80050c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050ca:	2300      	movs	r3, #0
 80050cc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050ce:	2303      	movs	r3, #3
 80050d0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80050d2:	2308      	movs	r3, #8
 80050d4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80050da:	4619      	mov	r1, r3
 80050dc:	486b      	ldr	r0, [pc, #428]	; (800528c <HAL_UART_MspInit+0x240>)
 80050de:	f002 fbd5 	bl	800788c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80050e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80050e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050e8:	2302      	movs	r3, #2
 80050ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050ec:	2300      	movs	r3, #0
 80050ee:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050f0:	2303      	movs	r3, #3
 80050f2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80050f4:	2308      	movs	r3, #8
 80050f6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80050f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80050fc:	4619      	mov	r1, r3
 80050fe:	4864      	ldr	r0, [pc, #400]	; (8005290 <HAL_UART_MspInit+0x244>)
 8005100:	f002 fbc4 	bl	800788c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8005104:	2200      	movs	r2, #0
 8005106:	2105      	movs	r1, #5
 8005108:	2034      	movs	r0, #52	; 0x34
 800510a:	f000 fb14 	bl	8005736 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800510e:	2034      	movs	r0, #52	; 0x34
 8005110:	f000 fb2d 	bl	800576e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8005114:	e161      	b.n	80053da <HAL_UART_MspInit+0x38e>
  else if(uartHandle->Instance==UART5)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a5e      	ldr	r2, [pc, #376]	; (8005294 <HAL_UART_MspInit+0x248>)
 800511c:	4293      	cmp	r3, r2
 800511e:	f040 80c5 	bne.w	80052ac <HAL_UART_MspInit+0x260>
    __HAL_RCC_UART5_CLK_ENABLE();
 8005122:	2300      	movs	r3, #0
 8005124:	61fb      	str	r3, [r7, #28]
 8005126:	4b58      	ldr	r3, [pc, #352]	; (8005288 <HAL_UART_MspInit+0x23c>)
 8005128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800512a:	4a57      	ldr	r2, [pc, #348]	; (8005288 <HAL_UART_MspInit+0x23c>)
 800512c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005130:	6413      	str	r3, [r2, #64]	; 0x40
 8005132:	4b55      	ldr	r3, [pc, #340]	; (8005288 <HAL_UART_MspInit+0x23c>)
 8005134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005136:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800513a:	61fb      	str	r3, [r7, #28]
 800513c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800513e:	2300      	movs	r3, #0
 8005140:	61bb      	str	r3, [r7, #24]
 8005142:	4b51      	ldr	r3, [pc, #324]	; (8005288 <HAL_UART_MspInit+0x23c>)
 8005144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005146:	4a50      	ldr	r2, [pc, #320]	; (8005288 <HAL_UART_MspInit+0x23c>)
 8005148:	f043 0304 	orr.w	r3, r3, #4
 800514c:	6313      	str	r3, [r2, #48]	; 0x30
 800514e:	4b4e      	ldr	r3, [pc, #312]	; (8005288 <HAL_UART_MspInit+0x23c>)
 8005150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005152:	f003 0304 	and.w	r3, r3, #4
 8005156:	61bb      	str	r3, [r7, #24]
 8005158:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800515a:	2300      	movs	r3, #0
 800515c:	617b      	str	r3, [r7, #20]
 800515e:	4b4a      	ldr	r3, [pc, #296]	; (8005288 <HAL_UART_MspInit+0x23c>)
 8005160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005162:	4a49      	ldr	r2, [pc, #292]	; (8005288 <HAL_UART_MspInit+0x23c>)
 8005164:	f043 0308 	orr.w	r3, r3, #8
 8005168:	6313      	str	r3, [r2, #48]	; 0x30
 800516a:	4b47      	ldr	r3, [pc, #284]	; (8005288 <HAL_UART_MspInit+0x23c>)
 800516c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800516e:	f003 0308 	and.w	r3, r3, #8
 8005172:	617b      	str	r3, [r7, #20]
 8005174:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8005176:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800517a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800517c:	2302      	movs	r3, #2
 800517e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005180:	2300      	movs	r3, #0
 8005182:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005184:	2303      	movs	r3, #3
 8005186:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8005188:	2308      	movs	r3, #8
 800518a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800518c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005190:	4619      	mov	r1, r3
 8005192:	483f      	ldr	r0, [pc, #252]	; (8005290 <HAL_UART_MspInit+0x244>)
 8005194:	f002 fb7a 	bl	800788c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005198:	2304      	movs	r3, #4
 800519a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800519c:	2302      	movs	r3, #2
 800519e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051a0:	2300      	movs	r3, #0
 80051a2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051a4:	2303      	movs	r3, #3
 80051a6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80051a8:	2308      	movs	r3, #8
 80051aa:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80051ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80051b0:	4619      	mov	r1, r3
 80051b2:	4839      	ldr	r0, [pc, #228]	; (8005298 <HAL_UART_MspInit+0x24c>)
 80051b4:	f002 fb6a 	bl	800788c <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 80051b8:	4b38      	ldr	r3, [pc, #224]	; (800529c <HAL_UART_MspInit+0x250>)
 80051ba:	4a39      	ldr	r2, [pc, #228]	; (80052a0 <HAL_UART_MspInit+0x254>)
 80051bc:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 80051be:	4b37      	ldr	r3, [pc, #220]	; (800529c <HAL_UART_MspInit+0x250>)
 80051c0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80051c4:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80051c6:	4b35      	ldr	r3, [pc, #212]	; (800529c <HAL_UART_MspInit+0x250>)
 80051c8:	2200      	movs	r2, #0
 80051ca:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80051cc:	4b33      	ldr	r3, [pc, #204]	; (800529c <HAL_UART_MspInit+0x250>)
 80051ce:	2200      	movs	r2, #0
 80051d0:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80051d2:	4b32      	ldr	r3, [pc, #200]	; (800529c <HAL_UART_MspInit+0x250>)
 80051d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80051d8:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80051da:	4b30      	ldr	r3, [pc, #192]	; (800529c <HAL_UART_MspInit+0x250>)
 80051dc:	2200      	movs	r2, #0
 80051de:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80051e0:	4b2e      	ldr	r3, [pc, #184]	; (800529c <HAL_UART_MspInit+0x250>)
 80051e2:	2200      	movs	r2, #0
 80051e4:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 80051e6:	4b2d      	ldr	r3, [pc, #180]	; (800529c <HAL_UART_MspInit+0x250>)
 80051e8:	2200      	movs	r2, #0
 80051ea:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 80051ec:	4b2b      	ldr	r3, [pc, #172]	; (800529c <HAL_UART_MspInit+0x250>)
 80051ee:	2200      	movs	r2, #0
 80051f0:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80051f2:	4b2a      	ldr	r3, [pc, #168]	; (800529c <HAL_UART_MspInit+0x250>)
 80051f4:	2200      	movs	r2, #0
 80051f6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 80051f8:	4828      	ldr	r0, [pc, #160]	; (800529c <HAL_UART_MspInit+0x250>)
 80051fa:	f000 fad3 	bl	80057a4 <HAL_DMA_Init>
 80051fe:	4603      	mov	r3, r0
 8005200:	2b00      	cmp	r3, #0
 8005202:	d001      	beq.n	8005208 <HAL_UART_MspInit+0x1bc>
      Error_Handler();
 8005204:	f7ff fad0 	bl	80047a8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	4a24      	ldr	r2, [pc, #144]	; (800529c <HAL_UART_MspInit+0x250>)
 800520c:	639a      	str	r2, [r3, #56]	; 0x38
 800520e:	4a23      	ldr	r2, [pc, #140]	; (800529c <HAL_UART_MspInit+0x250>)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_uart5_tx.Instance = DMA1_Stream7;
 8005214:	4b23      	ldr	r3, [pc, #140]	; (80052a4 <HAL_UART_MspInit+0x258>)
 8005216:	4a24      	ldr	r2, [pc, #144]	; (80052a8 <HAL_UART_MspInit+0x25c>)
 8005218:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 800521a:	4b22      	ldr	r3, [pc, #136]	; (80052a4 <HAL_UART_MspInit+0x258>)
 800521c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005220:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005222:	4b20      	ldr	r3, [pc, #128]	; (80052a4 <HAL_UART_MspInit+0x258>)
 8005224:	2240      	movs	r2, #64	; 0x40
 8005226:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005228:	4b1e      	ldr	r3, [pc, #120]	; (80052a4 <HAL_UART_MspInit+0x258>)
 800522a:	2200      	movs	r2, #0
 800522c:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 800522e:	4b1d      	ldr	r3, [pc, #116]	; (80052a4 <HAL_UART_MspInit+0x258>)
 8005230:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005234:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005236:	4b1b      	ldr	r3, [pc, #108]	; (80052a4 <HAL_UART_MspInit+0x258>)
 8005238:	2200      	movs	r2, #0
 800523a:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800523c:	4b19      	ldr	r3, [pc, #100]	; (80052a4 <HAL_UART_MspInit+0x258>)
 800523e:	2200      	movs	r2, #0
 8005240:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 8005242:	4b18      	ldr	r3, [pc, #96]	; (80052a4 <HAL_UART_MspInit+0x258>)
 8005244:	2200      	movs	r2, #0
 8005246:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005248:	4b16      	ldr	r3, [pc, #88]	; (80052a4 <HAL_UART_MspInit+0x258>)
 800524a:	2200      	movs	r2, #0
 800524c:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800524e:	4b15      	ldr	r3, [pc, #84]	; (80052a4 <HAL_UART_MspInit+0x258>)
 8005250:	2200      	movs	r2, #0
 8005252:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8005254:	4813      	ldr	r0, [pc, #76]	; (80052a4 <HAL_UART_MspInit+0x258>)
 8005256:	f000 faa5 	bl	80057a4 <HAL_DMA_Init>
 800525a:	4603      	mov	r3, r0
 800525c:	2b00      	cmp	r3, #0
 800525e:	d001      	beq.n	8005264 <HAL_UART_MspInit+0x218>
      Error_Handler();
 8005260:	f7ff faa2 	bl	80047a8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart5_tx);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	4a0f      	ldr	r2, [pc, #60]	; (80052a4 <HAL_UART_MspInit+0x258>)
 8005268:	635a      	str	r2, [r3, #52]	; 0x34
 800526a:	4a0e      	ldr	r2, [pc, #56]	; (80052a4 <HAL_UART_MspInit+0x258>)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8005270:	2200      	movs	r2, #0
 8005272:	2105      	movs	r1, #5
 8005274:	2035      	movs	r0, #53	; 0x35
 8005276:	f000 fa5e 	bl	8005736 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800527a:	2035      	movs	r0, #53	; 0x35
 800527c:	f000 fa77 	bl	800576e <HAL_NVIC_EnableIRQ>
}
 8005280:	e0ab      	b.n	80053da <HAL_UART_MspInit+0x38e>
 8005282:	bf00      	nop
 8005284:	40004c00 	.word	0x40004c00
 8005288:	40023800 	.word	0x40023800
 800528c:	40020000 	.word	0x40020000
 8005290:	40020800 	.word	0x40020800
 8005294:	40005000 	.word	0x40005000
 8005298:	40020c00 	.word	0x40020c00
 800529c:	20014064 	.word	0x20014064
 80052a0:	40026010 	.word	0x40026010
 80052a4:	200140c4 	.word	0x200140c4
 80052a8:	400260b8 	.word	0x400260b8
  else if(uartHandle->Instance==USART1)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a4c      	ldr	r2, [pc, #304]	; (80053e4 <HAL_UART_MspInit+0x398>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	f040 8091 	bne.w	80053da <HAL_UART_MspInit+0x38e>
    __HAL_RCC_USART1_CLK_ENABLE();
 80052b8:	2300      	movs	r3, #0
 80052ba:	613b      	str	r3, [r7, #16]
 80052bc:	4b4a      	ldr	r3, [pc, #296]	; (80053e8 <HAL_UART_MspInit+0x39c>)
 80052be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052c0:	4a49      	ldr	r2, [pc, #292]	; (80053e8 <HAL_UART_MspInit+0x39c>)
 80052c2:	f043 0310 	orr.w	r3, r3, #16
 80052c6:	6453      	str	r3, [r2, #68]	; 0x44
 80052c8:	4b47      	ldr	r3, [pc, #284]	; (80053e8 <HAL_UART_MspInit+0x39c>)
 80052ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052cc:	f003 0310 	and.w	r3, r3, #16
 80052d0:	613b      	str	r3, [r7, #16]
 80052d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80052d4:	2300      	movs	r3, #0
 80052d6:	60fb      	str	r3, [r7, #12]
 80052d8:	4b43      	ldr	r3, [pc, #268]	; (80053e8 <HAL_UART_MspInit+0x39c>)
 80052da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052dc:	4a42      	ldr	r2, [pc, #264]	; (80053e8 <HAL_UART_MspInit+0x39c>)
 80052de:	f043 0301 	orr.w	r3, r3, #1
 80052e2:	6313      	str	r3, [r2, #48]	; 0x30
 80052e4:	4b40      	ldr	r3, [pc, #256]	; (80053e8 <HAL_UART_MspInit+0x39c>)
 80052e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052e8:	f003 0301 	and.w	r3, r3, #1
 80052ec:	60fb      	str	r3, [r7, #12]
 80052ee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80052f0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80052f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052f6:	2302      	movs	r3, #2
 80052f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052fa:	2300      	movs	r3, #0
 80052fc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052fe:	2303      	movs	r3, #3
 8005300:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005302:	2307      	movs	r3, #7
 8005304:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005306:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800530a:	4619      	mov	r1, r3
 800530c:	4837      	ldr	r0, [pc, #220]	; (80053ec <HAL_UART_MspInit+0x3a0>)
 800530e:	f002 fabd 	bl	800788c <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8005312:	4b37      	ldr	r3, [pc, #220]	; (80053f0 <HAL_UART_MspInit+0x3a4>)
 8005314:	4a37      	ldr	r2, [pc, #220]	; (80053f4 <HAL_UART_MspInit+0x3a8>)
 8005316:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8005318:	4b35      	ldr	r3, [pc, #212]	; (80053f0 <HAL_UART_MspInit+0x3a4>)
 800531a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800531e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005320:	4b33      	ldr	r3, [pc, #204]	; (80053f0 <HAL_UART_MspInit+0x3a4>)
 8005322:	2200      	movs	r2, #0
 8005324:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005326:	4b32      	ldr	r3, [pc, #200]	; (80053f0 <HAL_UART_MspInit+0x3a4>)
 8005328:	2200      	movs	r2, #0
 800532a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800532c:	4b30      	ldr	r3, [pc, #192]	; (80053f0 <HAL_UART_MspInit+0x3a4>)
 800532e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005332:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005334:	4b2e      	ldr	r3, [pc, #184]	; (80053f0 <HAL_UART_MspInit+0x3a4>)
 8005336:	2200      	movs	r2, #0
 8005338:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800533a:	4b2d      	ldr	r3, [pc, #180]	; (80053f0 <HAL_UART_MspInit+0x3a4>)
 800533c:	2200      	movs	r2, #0
 800533e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8005340:	4b2b      	ldr	r3, [pc, #172]	; (80053f0 <HAL_UART_MspInit+0x3a4>)
 8005342:	2200      	movs	r2, #0
 8005344:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005346:	4b2a      	ldr	r3, [pc, #168]	; (80053f0 <HAL_UART_MspInit+0x3a4>)
 8005348:	2200      	movs	r2, #0
 800534a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800534c:	4b28      	ldr	r3, [pc, #160]	; (80053f0 <HAL_UART_MspInit+0x3a4>)
 800534e:	2200      	movs	r2, #0
 8005350:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8005352:	4827      	ldr	r0, [pc, #156]	; (80053f0 <HAL_UART_MspInit+0x3a4>)
 8005354:	f000 fa26 	bl	80057a4 <HAL_DMA_Init>
 8005358:	4603      	mov	r3, r0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d001      	beq.n	8005362 <HAL_UART_MspInit+0x316>
      Error_Handler();
 800535e:	f7ff fa23 	bl	80047a8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	4a22      	ldr	r2, [pc, #136]	; (80053f0 <HAL_UART_MspInit+0x3a4>)
 8005366:	639a      	str	r2, [r3, #56]	; 0x38
 8005368:	4a21      	ldr	r2, [pc, #132]	; (80053f0 <HAL_UART_MspInit+0x3a4>)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800536e:	4b22      	ldr	r3, [pc, #136]	; (80053f8 <HAL_UART_MspInit+0x3ac>)
 8005370:	4a22      	ldr	r2, [pc, #136]	; (80053fc <HAL_UART_MspInit+0x3b0>)
 8005372:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8005374:	4b20      	ldr	r3, [pc, #128]	; (80053f8 <HAL_UART_MspInit+0x3ac>)
 8005376:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800537a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800537c:	4b1e      	ldr	r3, [pc, #120]	; (80053f8 <HAL_UART_MspInit+0x3ac>)
 800537e:	2240      	movs	r2, #64	; 0x40
 8005380:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005382:	4b1d      	ldr	r3, [pc, #116]	; (80053f8 <HAL_UART_MspInit+0x3ac>)
 8005384:	2200      	movs	r2, #0
 8005386:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005388:	4b1b      	ldr	r3, [pc, #108]	; (80053f8 <HAL_UART_MspInit+0x3ac>)
 800538a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800538e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005390:	4b19      	ldr	r3, [pc, #100]	; (80053f8 <HAL_UART_MspInit+0x3ac>)
 8005392:	2200      	movs	r2, #0
 8005394:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005396:	4b18      	ldr	r3, [pc, #96]	; (80053f8 <HAL_UART_MspInit+0x3ac>)
 8005398:	2200      	movs	r2, #0
 800539a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800539c:	4b16      	ldr	r3, [pc, #88]	; (80053f8 <HAL_UART_MspInit+0x3ac>)
 800539e:	2200      	movs	r2, #0
 80053a0:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80053a2:	4b15      	ldr	r3, [pc, #84]	; (80053f8 <HAL_UART_MspInit+0x3ac>)
 80053a4:	2200      	movs	r2, #0
 80053a6:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80053a8:	4b13      	ldr	r3, [pc, #76]	; (80053f8 <HAL_UART_MspInit+0x3ac>)
 80053aa:	2200      	movs	r2, #0
 80053ac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80053ae:	4812      	ldr	r0, [pc, #72]	; (80053f8 <HAL_UART_MspInit+0x3ac>)
 80053b0:	f000 f9f8 	bl	80057a4 <HAL_DMA_Init>
 80053b4:	4603      	mov	r3, r0
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d001      	beq.n	80053be <HAL_UART_MspInit+0x372>
      Error_Handler();
 80053ba:	f7ff f9f5 	bl	80047a8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a0d      	ldr	r2, [pc, #52]	; (80053f8 <HAL_UART_MspInit+0x3ac>)
 80053c2:	635a      	str	r2, [r3, #52]	; 0x34
 80053c4:	4a0c      	ldr	r2, [pc, #48]	; (80053f8 <HAL_UART_MspInit+0x3ac>)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80053ca:	2200      	movs	r2, #0
 80053cc:	2105      	movs	r1, #5
 80053ce:	2025      	movs	r0, #37	; 0x25
 80053d0:	f000 f9b1 	bl	8005736 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80053d4:	2025      	movs	r0, #37	; 0x25
 80053d6:	f000 f9ca 	bl	800576e <HAL_NVIC_EnableIRQ>
}
 80053da:	bf00      	nop
 80053dc:	3740      	adds	r7, #64	; 0x40
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}
 80053e2:	bf00      	nop
 80053e4:	40011000 	.word	0x40011000
 80053e8:	40023800 	.word	0x40023800
 80053ec:	40020000 	.word	0x40020000
 80053f0:	20013f7c 	.word	0x20013f7c
 80053f4:	40026440 	.word	0x40026440
 80053f8:	20013ed8 	.word	0x20013ed8
 80053fc:	400264b8 	.word	0x400264b8

08005400 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005400:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005438 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005404:	480d      	ldr	r0, [pc, #52]	; (800543c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005406:	490e      	ldr	r1, [pc, #56]	; (8005440 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005408:	4a0e      	ldr	r2, [pc, #56]	; (8005444 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800540a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800540c:	e002      	b.n	8005414 <LoopCopyDataInit>

0800540e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800540e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005410:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005412:	3304      	adds	r3, #4

08005414 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005414:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005416:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005418:	d3f9      	bcc.n	800540e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800541a:	4a0b      	ldr	r2, [pc, #44]	; (8005448 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800541c:	4c0b      	ldr	r4, [pc, #44]	; (800544c <LoopFillZerobss+0x26>)
  movs r3, #0
 800541e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005420:	e001      	b.n	8005426 <LoopFillZerobss>

08005422 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005422:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005424:	3204      	adds	r2, #4

08005426 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005426:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005428:	d3fb      	bcc.n	8005422 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800542a:	f7ff fbc7 	bl	8004bbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800542e:	f017 f931 	bl	801c694 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005432:	f7ff f919 	bl	8004668 <main>
  bx  lr    
 8005436:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005438:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800543c:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8005440:	100001f4 	.word	0x100001f4
  ldr r2, =_sidata
 8005444:	08022be4 	.word	0x08022be4
  ldr r2, =_sbss
 8005448:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800544c:	2001b820 	.word	0x2001b820

08005450 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005450:	e7fe      	b.n	8005450 <ADC_IRQHandler>
	...

08005454 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005458:	4b0e      	ldr	r3, [pc, #56]	; (8005494 <HAL_Init+0x40>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a0d      	ldr	r2, [pc, #52]	; (8005494 <HAL_Init+0x40>)
 800545e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005462:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005464:	4b0b      	ldr	r3, [pc, #44]	; (8005494 <HAL_Init+0x40>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a0a      	ldr	r2, [pc, #40]	; (8005494 <HAL_Init+0x40>)
 800546a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800546e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005470:	4b08      	ldr	r3, [pc, #32]	; (8005494 <HAL_Init+0x40>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a07      	ldr	r2, [pc, #28]	; (8005494 <HAL_Init+0x40>)
 8005476:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800547a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800547c:	2003      	movs	r0, #3
 800547e:	f000 f94f 	bl	8005720 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005482:	200f      	movs	r0, #15
 8005484:	f000 f808 	bl	8005498 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005488:	f7ff fa32 	bl	80048f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800548c:	2300      	movs	r3, #0
}
 800548e:	4618      	mov	r0, r3
 8005490:	bd80      	pop	{r7, pc}
 8005492:	bf00      	nop
 8005494:	40023c00 	.word	0x40023c00

08005498 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b082      	sub	sp, #8
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80054a0:	4b12      	ldr	r3, [pc, #72]	; (80054ec <HAL_InitTick+0x54>)
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	4b12      	ldr	r3, [pc, #72]	; (80054f0 <HAL_InitTick+0x58>)
 80054a6:	781b      	ldrb	r3, [r3, #0]
 80054a8:	4619      	mov	r1, r3
 80054aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80054ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80054b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80054b6:	4618      	mov	r0, r3
 80054b8:	f000 f967 	bl	800578a <HAL_SYSTICK_Config>
 80054bc:	4603      	mov	r3, r0
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d001      	beq.n	80054c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e00e      	b.n	80054e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2b0f      	cmp	r3, #15
 80054ca:	d80a      	bhi.n	80054e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80054cc:	2200      	movs	r2, #0
 80054ce:	6879      	ldr	r1, [r7, #4]
 80054d0:	f04f 30ff 	mov.w	r0, #4294967295
 80054d4:	f000 f92f 	bl	8005736 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80054d8:	4a06      	ldr	r2, [pc, #24]	; (80054f4 <HAL_InitTick+0x5c>)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80054de:	2300      	movs	r3, #0
 80054e0:	e000      	b.n	80054e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3708      	adds	r7, #8
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}
 80054ec:	10000004 	.word	0x10000004
 80054f0:	1000000c 	.word	0x1000000c
 80054f4:	10000008 	.word	0x10000008

080054f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80054f8:	b480      	push	{r7}
 80054fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80054fc:	4b06      	ldr	r3, [pc, #24]	; (8005518 <HAL_IncTick+0x20>)
 80054fe:	781b      	ldrb	r3, [r3, #0]
 8005500:	461a      	mov	r2, r3
 8005502:	4b06      	ldr	r3, [pc, #24]	; (800551c <HAL_IncTick+0x24>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4413      	add	r3, r2
 8005508:	4a04      	ldr	r2, [pc, #16]	; (800551c <HAL_IncTick+0x24>)
 800550a:	6013      	str	r3, [r2, #0]
}
 800550c:	bf00      	nop
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr
 8005516:	bf00      	nop
 8005518:	1000000c 	.word	0x1000000c
 800551c:	20014124 	.word	0x20014124

08005520 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005520:	b480      	push	{r7}
 8005522:	af00      	add	r7, sp, #0
  return uwTick;
 8005524:	4b03      	ldr	r3, [pc, #12]	; (8005534 <HAL_GetTick+0x14>)
 8005526:	681b      	ldr	r3, [r3, #0]
}
 8005528:	4618      	mov	r0, r3
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr
 8005532:	bf00      	nop
 8005534:	20014124 	.word	0x20014124

08005538 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b084      	sub	sp, #16
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005540:	f7ff ffee 	bl	8005520 <HAL_GetTick>
 8005544:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005550:	d005      	beq.n	800555e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005552:	4b0a      	ldr	r3, [pc, #40]	; (800557c <HAL_Delay+0x44>)
 8005554:	781b      	ldrb	r3, [r3, #0]
 8005556:	461a      	mov	r2, r3
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	4413      	add	r3, r2
 800555c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800555e:	bf00      	nop
 8005560:	f7ff ffde 	bl	8005520 <HAL_GetTick>
 8005564:	4602      	mov	r2, r0
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	1ad3      	subs	r3, r2, r3
 800556a:	68fa      	ldr	r2, [r7, #12]
 800556c:	429a      	cmp	r2, r3
 800556e:	d8f7      	bhi.n	8005560 <HAL_Delay+0x28>
  {
  }
}
 8005570:	bf00      	nop
 8005572:	bf00      	nop
 8005574:	3710      	adds	r7, #16
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
 800557a:	bf00      	nop
 800557c:	1000000c 	.word	0x1000000c

08005580 <__NVIC_SetPriorityGrouping>:
{
 8005580:	b480      	push	{r7}
 8005582:	b085      	sub	sp, #20
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f003 0307 	and.w	r3, r3, #7
 800558e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005590:	4b0c      	ldr	r3, [pc, #48]	; (80055c4 <__NVIC_SetPriorityGrouping+0x44>)
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005596:	68ba      	ldr	r2, [r7, #8]
 8005598:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800559c:	4013      	ands	r3, r2
 800559e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80055a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80055ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80055b2:	4a04      	ldr	r2, [pc, #16]	; (80055c4 <__NVIC_SetPriorityGrouping+0x44>)
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	60d3      	str	r3, [r2, #12]
}
 80055b8:	bf00      	nop
 80055ba:	3714      	adds	r7, #20
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr
 80055c4:	e000ed00 	.word	0xe000ed00

080055c8 <__NVIC_GetPriorityGrouping>:
{
 80055c8:	b480      	push	{r7}
 80055ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80055cc:	4b04      	ldr	r3, [pc, #16]	; (80055e0 <__NVIC_GetPriorityGrouping+0x18>)
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	0a1b      	lsrs	r3, r3, #8
 80055d2:	f003 0307 	and.w	r3, r3, #7
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr
 80055e0:	e000ed00 	.word	0xe000ed00

080055e4 <__NVIC_EnableIRQ>:
{
 80055e4:	b480      	push	{r7}
 80055e6:	b083      	sub	sp, #12
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	4603      	mov	r3, r0
 80055ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	db0b      	blt.n	800560e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80055f6:	79fb      	ldrb	r3, [r7, #7]
 80055f8:	f003 021f 	and.w	r2, r3, #31
 80055fc:	4907      	ldr	r1, [pc, #28]	; (800561c <__NVIC_EnableIRQ+0x38>)
 80055fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005602:	095b      	lsrs	r3, r3, #5
 8005604:	2001      	movs	r0, #1
 8005606:	fa00 f202 	lsl.w	r2, r0, r2
 800560a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800560e:	bf00      	nop
 8005610:	370c      	adds	r7, #12
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr
 800561a:	bf00      	nop
 800561c:	e000e100 	.word	0xe000e100

08005620 <__NVIC_SetPriority>:
{
 8005620:	b480      	push	{r7}
 8005622:	b083      	sub	sp, #12
 8005624:	af00      	add	r7, sp, #0
 8005626:	4603      	mov	r3, r0
 8005628:	6039      	str	r1, [r7, #0]
 800562a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800562c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005630:	2b00      	cmp	r3, #0
 8005632:	db0a      	blt.n	800564a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	b2da      	uxtb	r2, r3
 8005638:	490c      	ldr	r1, [pc, #48]	; (800566c <__NVIC_SetPriority+0x4c>)
 800563a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800563e:	0112      	lsls	r2, r2, #4
 8005640:	b2d2      	uxtb	r2, r2
 8005642:	440b      	add	r3, r1
 8005644:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005648:	e00a      	b.n	8005660 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	b2da      	uxtb	r2, r3
 800564e:	4908      	ldr	r1, [pc, #32]	; (8005670 <__NVIC_SetPriority+0x50>)
 8005650:	79fb      	ldrb	r3, [r7, #7]
 8005652:	f003 030f 	and.w	r3, r3, #15
 8005656:	3b04      	subs	r3, #4
 8005658:	0112      	lsls	r2, r2, #4
 800565a:	b2d2      	uxtb	r2, r2
 800565c:	440b      	add	r3, r1
 800565e:	761a      	strb	r2, [r3, #24]
}
 8005660:	bf00      	nop
 8005662:	370c      	adds	r7, #12
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr
 800566c:	e000e100 	.word	0xe000e100
 8005670:	e000ed00 	.word	0xe000ed00

08005674 <NVIC_EncodePriority>:
{
 8005674:	b480      	push	{r7}
 8005676:	b089      	sub	sp, #36	; 0x24
 8005678:	af00      	add	r7, sp, #0
 800567a:	60f8      	str	r0, [r7, #12]
 800567c:	60b9      	str	r1, [r7, #8]
 800567e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f003 0307 	and.w	r3, r3, #7
 8005686:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005688:	69fb      	ldr	r3, [r7, #28]
 800568a:	f1c3 0307 	rsb	r3, r3, #7
 800568e:	2b04      	cmp	r3, #4
 8005690:	bf28      	it	cs
 8005692:	2304      	movcs	r3, #4
 8005694:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005696:	69fb      	ldr	r3, [r7, #28]
 8005698:	3304      	adds	r3, #4
 800569a:	2b06      	cmp	r3, #6
 800569c:	d902      	bls.n	80056a4 <NVIC_EncodePriority+0x30>
 800569e:	69fb      	ldr	r3, [r7, #28]
 80056a0:	3b03      	subs	r3, #3
 80056a2:	e000      	b.n	80056a6 <NVIC_EncodePriority+0x32>
 80056a4:	2300      	movs	r3, #0
 80056a6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056a8:	f04f 32ff 	mov.w	r2, #4294967295
 80056ac:	69bb      	ldr	r3, [r7, #24]
 80056ae:	fa02 f303 	lsl.w	r3, r2, r3
 80056b2:	43da      	mvns	r2, r3
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	401a      	ands	r2, r3
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80056bc:	f04f 31ff 	mov.w	r1, #4294967295
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	fa01 f303 	lsl.w	r3, r1, r3
 80056c6:	43d9      	mvns	r1, r3
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056cc:	4313      	orrs	r3, r2
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3724      	adds	r7, #36	; 0x24
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr
	...

080056dc <SysTick_Config>:
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b082      	sub	sp, #8
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	3b01      	subs	r3, #1
 80056e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80056ec:	d301      	bcc.n	80056f2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80056ee:	2301      	movs	r3, #1
 80056f0:	e00f      	b.n	8005712 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80056f2:	4a0a      	ldr	r2, [pc, #40]	; (800571c <SysTick_Config+0x40>)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	3b01      	subs	r3, #1
 80056f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80056fa:	210f      	movs	r1, #15
 80056fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005700:	f7ff ff8e 	bl	8005620 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005704:	4b05      	ldr	r3, [pc, #20]	; (800571c <SysTick_Config+0x40>)
 8005706:	2200      	movs	r2, #0
 8005708:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800570a:	4b04      	ldr	r3, [pc, #16]	; (800571c <SysTick_Config+0x40>)
 800570c:	2207      	movs	r2, #7
 800570e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8005710:	2300      	movs	r3, #0
}
 8005712:	4618      	mov	r0, r3
 8005714:	3708      	adds	r7, #8
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
 800571a:	bf00      	nop
 800571c:	e000e010 	.word	0xe000e010

08005720 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b082      	sub	sp, #8
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f7ff ff29 	bl	8005580 <__NVIC_SetPriorityGrouping>
}
 800572e:	bf00      	nop
 8005730:	3708      	adds	r7, #8
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}

08005736 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005736:	b580      	push	{r7, lr}
 8005738:	b086      	sub	sp, #24
 800573a:	af00      	add	r7, sp, #0
 800573c:	4603      	mov	r3, r0
 800573e:	60b9      	str	r1, [r7, #8]
 8005740:	607a      	str	r2, [r7, #4]
 8005742:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005744:	2300      	movs	r3, #0
 8005746:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005748:	f7ff ff3e 	bl	80055c8 <__NVIC_GetPriorityGrouping>
 800574c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800574e:	687a      	ldr	r2, [r7, #4]
 8005750:	68b9      	ldr	r1, [r7, #8]
 8005752:	6978      	ldr	r0, [r7, #20]
 8005754:	f7ff ff8e 	bl	8005674 <NVIC_EncodePriority>
 8005758:	4602      	mov	r2, r0
 800575a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800575e:	4611      	mov	r1, r2
 8005760:	4618      	mov	r0, r3
 8005762:	f7ff ff5d 	bl	8005620 <__NVIC_SetPriority>
}
 8005766:	bf00      	nop
 8005768:	3718      	adds	r7, #24
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}

0800576e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800576e:	b580      	push	{r7, lr}
 8005770:	b082      	sub	sp, #8
 8005772:	af00      	add	r7, sp, #0
 8005774:	4603      	mov	r3, r0
 8005776:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005778:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800577c:	4618      	mov	r0, r3
 800577e:	f7ff ff31 	bl	80055e4 <__NVIC_EnableIRQ>
}
 8005782:	bf00      	nop
 8005784:	3708      	adds	r7, #8
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}

0800578a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800578a:	b580      	push	{r7, lr}
 800578c:	b082      	sub	sp, #8
 800578e:	af00      	add	r7, sp, #0
 8005790:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f7ff ffa2 	bl	80056dc <SysTick_Config>
 8005798:	4603      	mov	r3, r0
}
 800579a:	4618      	mov	r0, r3
 800579c:	3708      	adds	r7, #8
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
	...

080057a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b086      	sub	sp, #24
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80057ac:	2300      	movs	r3, #0
 80057ae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80057b0:	f7ff feb6 	bl	8005520 <HAL_GetTick>
 80057b4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d101      	bne.n	80057c0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	e099      	b.n	80058f4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2202      	movs	r2, #2
 80057c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2200      	movs	r2, #0
 80057cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f022 0201 	bic.w	r2, r2, #1
 80057de:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80057e0:	e00f      	b.n	8005802 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80057e2:	f7ff fe9d 	bl	8005520 <HAL_GetTick>
 80057e6:	4602      	mov	r2, r0
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	1ad3      	subs	r3, r2, r3
 80057ec:	2b05      	cmp	r3, #5
 80057ee:	d908      	bls.n	8005802 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2220      	movs	r2, #32
 80057f4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2203      	movs	r2, #3
 80057fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80057fe:	2303      	movs	r3, #3
 8005800:	e078      	b.n	80058f4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 0301 	and.w	r3, r3, #1
 800580c:	2b00      	cmp	r3, #0
 800580e:	d1e8      	bne.n	80057e2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005818:	697a      	ldr	r2, [r7, #20]
 800581a:	4b38      	ldr	r3, [pc, #224]	; (80058fc <HAL_DMA_Init+0x158>)
 800581c:	4013      	ands	r3, r2
 800581e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	685a      	ldr	r2, [r3, #4]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800582e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	691b      	ldr	r3, [r3, #16]
 8005834:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800583a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	699b      	ldr	r3, [r3, #24]
 8005840:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005846:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6a1b      	ldr	r3, [r3, #32]
 800584c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800584e:	697a      	ldr	r2, [r7, #20]
 8005850:	4313      	orrs	r3, r2
 8005852:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005858:	2b04      	cmp	r3, #4
 800585a:	d107      	bne.n	800586c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005864:	4313      	orrs	r3, r2
 8005866:	697a      	ldr	r2, [r7, #20]
 8005868:	4313      	orrs	r3, r2
 800586a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	697a      	ldr	r2, [r7, #20]
 8005872:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	695b      	ldr	r3, [r3, #20]
 800587a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	f023 0307 	bic.w	r3, r3, #7
 8005882:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005888:	697a      	ldr	r2, [r7, #20]
 800588a:	4313      	orrs	r3, r2
 800588c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005892:	2b04      	cmp	r3, #4
 8005894:	d117      	bne.n	80058c6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800589a:	697a      	ldr	r2, [r7, #20]
 800589c:	4313      	orrs	r3, r2
 800589e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d00e      	beq.n	80058c6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f000 fb01 	bl	8005eb0 <DMA_CheckFifoParam>
 80058ae:	4603      	mov	r3, r0
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d008      	beq.n	80058c6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2240      	movs	r2, #64	; 0x40
 80058b8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2201      	movs	r2, #1
 80058be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80058c2:	2301      	movs	r3, #1
 80058c4:	e016      	b.n	80058f4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	697a      	ldr	r2, [r7, #20]
 80058cc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f000 fab8 	bl	8005e44 <DMA_CalcBaseAndBitshift>
 80058d4:	4603      	mov	r3, r0
 80058d6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058dc:	223f      	movs	r2, #63	; 0x3f
 80058de:	409a      	lsls	r2, r3
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2200      	movs	r2, #0
 80058e8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2201      	movs	r2, #1
 80058ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80058f2:	2300      	movs	r3, #0
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3718      	adds	r7, #24
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}
 80058fc:	f010803f 	.word	0xf010803f

08005900 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b086      	sub	sp, #24
 8005904:	af00      	add	r7, sp, #0
 8005906:	60f8      	str	r0, [r7, #12]
 8005908:	60b9      	str	r1, [r7, #8]
 800590a:	607a      	str	r2, [r7, #4]
 800590c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800590e:	2300      	movs	r3, #0
 8005910:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005916:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800591e:	2b01      	cmp	r3, #1
 8005920:	d101      	bne.n	8005926 <HAL_DMA_Start_IT+0x26>
 8005922:	2302      	movs	r3, #2
 8005924:	e040      	b.n	80059a8 <HAL_DMA_Start_IT+0xa8>
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2201      	movs	r2, #1
 800592a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005934:	b2db      	uxtb	r3, r3
 8005936:	2b01      	cmp	r3, #1
 8005938:	d12f      	bne.n	800599a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2202      	movs	r2, #2
 800593e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2200      	movs	r2, #0
 8005946:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	687a      	ldr	r2, [r7, #4]
 800594c:	68b9      	ldr	r1, [r7, #8]
 800594e:	68f8      	ldr	r0, [r7, #12]
 8005950:	f000 fa4a 	bl	8005de8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005958:	223f      	movs	r2, #63	; 0x3f
 800595a:	409a      	lsls	r2, r3
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f042 0216 	orr.w	r2, r2, #22
 800596e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005974:	2b00      	cmp	r3, #0
 8005976:	d007      	beq.n	8005988 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f042 0208 	orr.w	r2, r2, #8
 8005986:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f042 0201 	orr.w	r2, r2, #1
 8005996:	601a      	str	r2, [r3, #0]
 8005998:	e005      	b.n	80059a6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2200      	movs	r2, #0
 800599e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80059a2:	2302      	movs	r3, #2
 80059a4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80059a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3718      	adds	r7, #24
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}

080059b0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b084      	sub	sp, #16
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059bc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80059be:	f7ff fdaf 	bl	8005520 <HAL_GetTick>
 80059c2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80059ca:	b2db      	uxtb	r3, r3
 80059cc:	2b02      	cmp	r3, #2
 80059ce:	d008      	beq.n	80059e2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2280      	movs	r2, #128	; 0x80
 80059d4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2200      	movs	r2, #0
 80059da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80059de:	2301      	movs	r3, #1
 80059e0:	e052      	b.n	8005a88 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f022 0216 	bic.w	r2, r2, #22
 80059f0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	695a      	ldr	r2, [r3, #20]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a00:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d103      	bne.n	8005a12 <HAL_DMA_Abort+0x62>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d007      	beq.n	8005a22 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f022 0208 	bic.w	r2, r2, #8
 8005a20:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f022 0201 	bic.w	r2, r2, #1
 8005a30:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005a32:	e013      	b.n	8005a5c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005a34:	f7ff fd74 	bl	8005520 <HAL_GetTick>
 8005a38:	4602      	mov	r2, r0
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	1ad3      	subs	r3, r2, r3
 8005a3e:	2b05      	cmp	r3, #5
 8005a40:	d90c      	bls.n	8005a5c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2220      	movs	r2, #32
 8005a46:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2203      	movs	r2, #3
 8005a4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2200      	movs	r2, #0
 8005a54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005a58:	2303      	movs	r3, #3
 8005a5a:	e015      	b.n	8005a88 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f003 0301 	and.w	r3, r3, #1
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d1e4      	bne.n	8005a34 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a6e:	223f      	movs	r2, #63	; 0x3f
 8005a70:	409a      	lsls	r2, r3
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2201      	movs	r2, #1
 8005a7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005a86:	2300      	movs	r3, #0
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3710      	adds	r7, #16
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}

08005a90 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b083      	sub	sp, #12
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a9e:	b2db      	uxtb	r3, r3
 8005aa0:	2b02      	cmp	r3, #2
 8005aa2:	d004      	beq.n	8005aae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2280      	movs	r2, #128	; 0x80
 8005aa8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e00c      	b.n	8005ac8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2205      	movs	r2, #5
 8005ab2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f022 0201 	bic.w	r2, r2, #1
 8005ac4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005ac6:	2300      	movs	r3, #0
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	370c      	adds	r7, #12
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr

08005ad4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b086      	sub	sp, #24
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005adc:	2300      	movs	r3, #0
 8005ade:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005ae0:	4b8e      	ldr	r3, [pc, #568]	; (8005d1c <HAL_DMA_IRQHandler+0x248>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a8e      	ldr	r2, [pc, #568]	; (8005d20 <HAL_DMA_IRQHandler+0x24c>)
 8005ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8005aea:	0a9b      	lsrs	r3, r3, #10
 8005aec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005af2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005afe:	2208      	movs	r2, #8
 8005b00:	409a      	lsls	r2, r3
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	4013      	ands	r3, r2
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d01a      	beq.n	8005b40 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f003 0304 	and.w	r3, r3, #4
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d013      	beq.n	8005b40 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f022 0204 	bic.w	r2, r2, #4
 8005b26:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b2c:	2208      	movs	r2, #8
 8005b2e:	409a      	lsls	r2, r3
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b38:	f043 0201 	orr.w	r2, r3, #1
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b44:	2201      	movs	r2, #1
 8005b46:	409a      	lsls	r2, r3
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	4013      	ands	r3, r2
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d012      	beq.n	8005b76 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	695b      	ldr	r3, [r3, #20]
 8005b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d00b      	beq.n	8005b76 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b62:	2201      	movs	r2, #1
 8005b64:	409a      	lsls	r2, r3
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b6e:	f043 0202 	orr.w	r2, r3, #2
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b7a:	2204      	movs	r2, #4
 8005b7c:	409a      	lsls	r2, r3
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	4013      	ands	r3, r2
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d012      	beq.n	8005bac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f003 0302 	and.w	r3, r3, #2
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d00b      	beq.n	8005bac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b98:	2204      	movs	r2, #4
 8005b9a:	409a      	lsls	r2, r3
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ba4:	f043 0204 	orr.w	r2, r3, #4
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bb0:	2210      	movs	r2, #16
 8005bb2:	409a      	lsls	r2, r3
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	4013      	ands	r3, r2
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d043      	beq.n	8005c44 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f003 0308 	and.w	r3, r3, #8
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d03c      	beq.n	8005c44 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bce:	2210      	movs	r2, #16
 8005bd0:	409a      	lsls	r2, r3
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d018      	beq.n	8005c16 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d108      	bne.n	8005c04 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d024      	beq.n	8005c44 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	4798      	blx	r3
 8005c02:	e01f      	b.n	8005c44 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d01b      	beq.n	8005c44 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	4798      	blx	r3
 8005c14:	e016      	b.n	8005c44 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d107      	bne.n	8005c34 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f022 0208 	bic.w	r2, r2, #8
 8005c32:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d003      	beq.n	8005c44 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c48:	2220      	movs	r2, #32
 8005c4a:	409a      	lsls	r2, r3
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	4013      	ands	r3, r2
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	f000 808f 	beq.w	8005d74 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f003 0310 	and.w	r3, r3, #16
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	f000 8087 	beq.w	8005d74 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c6a:	2220      	movs	r2, #32
 8005c6c:	409a      	lsls	r2, r3
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	2b05      	cmp	r3, #5
 8005c7c:	d136      	bne.n	8005cec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	681a      	ldr	r2, [r3, #0]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f022 0216 	bic.w	r2, r2, #22
 8005c8c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	695a      	ldr	r2, [r3, #20]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c9c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d103      	bne.n	8005cae <HAL_DMA_IRQHandler+0x1da>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d007      	beq.n	8005cbe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f022 0208 	bic.w	r2, r2, #8
 8005cbc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cc2:	223f      	movs	r2, #63	; 0x3f
 8005cc4:	409a      	lsls	r2, r3
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2201      	movs	r2, #1
 8005cce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d07e      	beq.n	8005de0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	4798      	blx	r3
        }
        return;
 8005cea:	e079      	b.n	8005de0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d01d      	beq.n	8005d36 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d10d      	bne.n	8005d24 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d031      	beq.n	8005d74 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	4798      	blx	r3
 8005d18:	e02c      	b.n	8005d74 <HAL_DMA_IRQHandler+0x2a0>
 8005d1a:	bf00      	nop
 8005d1c:	10000004 	.word	0x10000004
 8005d20:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d023      	beq.n	8005d74 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	4798      	blx	r3
 8005d34:	e01e      	b.n	8005d74 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d10f      	bne.n	8005d64 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f022 0210 	bic.w	r2, r2, #16
 8005d52:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2201      	movs	r2, #1
 8005d58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d003      	beq.n	8005d74 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d032      	beq.n	8005de2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d80:	f003 0301 	and.w	r3, r3, #1
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d022      	beq.n	8005dce <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2205      	movs	r2, #5
 8005d8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f022 0201 	bic.w	r2, r2, #1
 8005d9e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	3301      	adds	r3, #1
 8005da4:	60bb      	str	r3, [r7, #8]
 8005da6:	697a      	ldr	r2, [r7, #20]
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d307      	bcc.n	8005dbc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f003 0301 	and.w	r3, r3, #1
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d1f2      	bne.n	8005da0 <HAL_DMA_IRQHandler+0x2cc>
 8005dba:	e000      	b.n	8005dbe <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005dbc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d005      	beq.n	8005de2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	4798      	blx	r3
 8005dde:	e000      	b.n	8005de2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005de0:	bf00      	nop
    }
  }
}
 8005de2:	3718      	adds	r7, #24
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}

08005de8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b085      	sub	sp, #20
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	60f8      	str	r0, [r7, #12]
 8005df0:	60b9      	str	r1, [r7, #8]
 8005df2:	607a      	str	r2, [r7, #4]
 8005df4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005e04:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	683a      	ldr	r2, [r7, #0]
 8005e0c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	2b40      	cmp	r3, #64	; 0x40
 8005e14:	d108      	bne.n	8005e28 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	687a      	ldr	r2, [r7, #4]
 8005e1c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	68ba      	ldr	r2, [r7, #8]
 8005e24:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005e26:	e007      	b.n	8005e38 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	68ba      	ldr	r2, [r7, #8]
 8005e2e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	687a      	ldr	r2, [r7, #4]
 8005e36:	60da      	str	r2, [r3, #12]
}
 8005e38:	bf00      	nop
 8005e3a:	3714      	adds	r7, #20
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr

08005e44 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b085      	sub	sp, #20
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	b2db      	uxtb	r3, r3
 8005e52:	3b10      	subs	r3, #16
 8005e54:	4a14      	ldr	r2, [pc, #80]	; (8005ea8 <DMA_CalcBaseAndBitshift+0x64>)
 8005e56:	fba2 2303 	umull	r2, r3, r2, r3
 8005e5a:	091b      	lsrs	r3, r3, #4
 8005e5c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005e5e:	4a13      	ldr	r2, [pc, #76]	; (8005eac <DMA_CalcBaseAndBitshift+0x68>)
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	4413      	add	r3, r2
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	461a      	mov	r2, r3
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2b03      	cmp	r3, #3
 8005e70:	d909      	bls.n	8005e86 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005e7a:	f023 0303 	bic.w	r3, r3, #3
 8005e7e:	1d1a      	adds	r2, r3, #4
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	659a      	str	r2, [r3, #88]	; 0x58
 8005e84:	e007      	b.n	8005e96 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005e8e:	f023 0303 	bic.w	r3, r3, #3
 8005e92:	687a      	ldr	r2, [r7, #4]
 8005e94:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3714      	adds	r7, #20
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea4:	4770      	bx	lr
 8005ea6:	bf00      	nop
 8005ea8:	aaaaaaab 	.word	0xaaaaaaab
 8005eac:	08022660 	.word	0x08022660

08005eb0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b085      	sub	sp, #20
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ec0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	699b      	ldr	r3, [r3, #24]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d11f      	bne.n	8005f0a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	2b03      	cmp	r3, #3
 8005ece:	d856      	bhi.n	8005f7e <DMA_CheckFifoParam+0xce>
 8005ed0:	a201      	add	r2, pc, #4	; (adr r2, 8005ed8 <DMA_CheckFifoParam+0x28>)
 8005ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ed6:	bf00      	nop
 8005ed8:	08005ee9 	.word	0x08005ee9
 8005edc:	08005efb 	.word	0x08005efb
 8005ee0:	08005ee9 	.word	0x08005ee9
 8005ee4:	08005f7f 	.word	0x08005f7f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d046      	beq.n	8005f82 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ef8:	e043      	b.n	8005f82 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005efe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005f02:	d140      	bne.n	8005f86 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005f04:	2301      	movs	r3, #1
 8005f06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f08:	e03d      	b.n	8005f86 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	699b      	ldr	r3, [r3, #24]
 8005f0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f12:	d121      	bne.n	8005f58 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	2b03      	cmp	r3, #3
 8005f18:	d837      	bhi.n	8005f8a <DMA_CheckFifoParam+0xda>
 8005f1a:	a201      	add	r2, pc, #4	; (adr r2, 8005f20 <DMA_CheckFifoParam+0x70>)
 8005f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f20:	08005f31 	.word	0x08005f31
 8005f24:	08005f37 	.word	0x08005f37
 8005f28:	08005f31 	.word	0x08005f31
 8005f2c:	08005f49 	.word	0x08005f49
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005f30:	2301      	movs	r3, #1
 8005f32:	73fb      	strb	r3, [r7, #15]
      break;
 8005f34:	e030      	b.n	8005f98 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d025      	beq.n	8005f8e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f46:	e022      	b.n	8005f8e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f4c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005f50:	d11f      	bne.n	8005f92 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005f56:	e01c      	b.n	8005f92 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	2b02      	cmp	r3, #2
 8005f5c:	d903      	bls.n	8005f66 <DMA_CheckFifoParam+0xb6>
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	2b03      	cmp	r3, #3
 8005f62:	d003      	beq.n	8005f6c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005f64:	e018      	b.n	8005f98 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	73fb      	strb	r3, [r7, #15]
      break;
 8005f6a:	e015      	b.n	8005f98 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d00e      	beq.n	8005f96 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	73fb      	strb	r3, [r7, #15]
      break;
 8005f7c:	e00b      	b.n	8005f96 <DMA_CheckFifoParam+0xe6>
      break;
 8005f7e:	bf00      	nop
 8005f80:	e00a      	b.n	8005f98 <DMA_CheckFifoParam+0xe8>
      break;
 8005f82:	bf00      	nop
 8005f84:	e008      	b.n	8005f98 <DMA_CheckFifoParam+0xe8>
      break;
 8005f86:	bf00      	nop
 8005f88:	e006      	b.n	8005f98 <DMA_CheckFifoParam+0xe8>
      break;
 8005f8a:	bf00      	nop
 8005f8c:	e004      	b.n	8005f98 <DMA_CheckFifoParam+0xe8>
      break;
 8005f8e:	bf00      	nop
 8005f90:	e002      	b.n	8005f98 <DMA_CheckFifoParam+0xe8>
      break;   
 8005f92:	bf00      	nop
 8005f94:	e000      	b.n	8005f98 <DMA_CheckFifoParam+0xe8>
      break;
 8005f96:	bf00      	nop
    }
  } 
  
  return status; 
 8005f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3714      	adds	r7, #20
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa4:	4770      	bx	lr
 8005fa6:	bf00      	nop

08005fa8 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b088      	sub	sp, #32
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	61fb      	str	r3, [r7, #28]
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8005fb8:	4ba1      	ldr	r3, [pc, #644]	; (8006240 <HAL_ETH_Init+0x298>)
 8005fba:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d101      	bne.n	8005fce <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	e182      	b.n	80062d4 <HAL_ETH_Init+0x32c>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005fd4:	b2db      	uxtb	r3, r3
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d106      	bne.n	8005fe8 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f005 fd02 	bl	800b9ec <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005fe8:	2300      	movs	r3, #0
 8005fea:	60bb      	str	r3, [r7, #8]
 8005fec:	4b95      	ldr	r3, [pc, #596]	; (8006244 <HAL_ETH_Init+0x29c>)
 8005fee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ff0:	4a94      	ldr	r2, [pc, #592]	; (8006244 <HAL_ETH_Init+0x29c>)
 8005ff2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005ff6:	6453      	str	r3, [r2, #68]	; 0x44
 8005ff8:	4b92      	ldr	r3, [pc, #584]	; (8006244 <HAL_ETH_Init+0x29c>)
 8005ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ffc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006000:	60bb      	str	r3, [r7, #8]
 8006002:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8006004:	4b90      	ldr	r3, [pc, #576]	; (8006248 <HAL_ETH_Init+0x2a0>)
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	4a8f      	ldr	r2, [pc, #572]	; (8006248 <HAL_ETH_Init+0x2a0>)
 800600a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800600e:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8006010:	4b8d      	ldr	r3, [pc, #564]	; (8006248 <HAL_ETH_Init+0x2a0>)
 8006012:	685a      	ldr	r2, [r3, #4]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6a1b      	ldr	r3, [r3, #32]
 8006018:	498b      	ldr	r1, [pc, #556]	; (8006248 <HAL_ETH_Init+0x2a0>)
 800601a:	4313      	orrs	r3, r2
 800601c:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	687a      	ldr	r2, [r7, #4]
 800602a:	6812      	ldr	r2, [r2, #0]
 800602c:	f043 0301 	orr.w	r3, r3, #1
 8006030:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006034:	6013      	str	r3, [r2, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8006036:	f7ff fa73 	bl	8005520 <HAL_GetTick>
 800603a:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800603c:	e011      	b.n	8006062 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800603e:	f7ff fa6f 	bl	8005520 <HAL_GetTick>
 8006042:	4602      	mov	r2, r0
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	1ad3      	subs	r3, r2, r3
 8006048:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800604c:	d909      	bls.n	8006062 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2203      	movs	r2, #3
 8006052:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2200      	movs	r2, #0
 800605a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 800605e:	2303      	movs	r3, #3
 8006060:	e138      	b.n	80062d4 <HAL_ETH_Init+0x32c>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f003 0301 	and.w	r3, r3, #1
 8006070:	2b00      	cmp	r3, #0
 8006072:	d1e4      	bne.n	800603e <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	691b      	ldr	r3, [r3, #16]
 800607a:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 800607c:	69fb      	ldr	r3, [r7, #28]
 800607e:	f023 031c 	bic.w	r3, r3, #28
 8006082:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8006084:	f002 fe80 	bl	8008d88 <HAL_RCC_GetHCLKFreq>
 8006088:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800608a:	69bb      	ldr	r3, [r7, #24]
 800608c:	4a6f      	ldr	r2, [pc, #444]	; (800624c <HAL_ETH_Init+0x2a4>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d908      	bls.n	80060a4 <HAL_ETH_Init+0xfc>
 8006092:	69bb      	ldr	r3, [r7, #24]
 8006094:	4a6e      	ldr	r2, [pc, #440]	; (8006250 <HAL_ETH_Init+0x2a8>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d804      	bhi.n	80060a4 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800609a:	69fb      	ldr	r3, [r7, #28]
 800609c:	f043 0308 	orr.w	r3, r3, #8
 80060a0:	61fb      	str	r3, [r7, #28]
 80060a2:	e027      	b.n	80060f4 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80060a4:	69bb      	ldr	r3, [r7, #24]
 80060a6:	4a6a      	ldr	r2, [pc, #424]	; (8006250 <HAL_ETH_Init+0x2a8>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d908      	bls.n	80060be <HAL_ETH_Init+0x116>
 80060ac:	69bb      	ldr	r3, [r7, #24]
 80060ae:	4a64      	ldr	r2, [pc, #400]	; (8006240 <HAL_ETH_Init+0x298>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d204      	bcs.n	80060be <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80060b4:	69fb      	ldr	r3, [r7, #28]
 80060b6:	f043 030c 	orr.w	r3, r3, #12
 80060ba:	61fb      	str	r3, [r7, #28]
 80060bc:	e01a      	b.n	80060f4 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80060be:	69bb      	ldr	r3, [r7, #24]
 80060c0:	4a5f      	ldr	r2, [pc, #380]	; (8006240 <HAL_ETH_Init+0x298>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d303      	bcc.n	80060ce <HAL_ETH_Init+0x126>
 80060c6:	69bb      	ldr	r3, [r7, #24]
 80060c8:	4a62      	ldr	r2, [pc, #392]	; (8006254 <HAL_ETH_Init+0x2ac>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d911      	bls.n	80060f2 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80060ce:	69bb      	ldr	r3, [r7, #24]
 80060d0:	4a60      	ldr	r2, [pc, #384]	; (8006254 <HAL_ETH_Init+0x2ac>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d908      	bls.n	80060e8 <HAL_ETH_Init+0x140>
 80060d6:	69bb      	ldr	r3, [r7, #24]
 80060d8:	4a5f      	ldr	r2, [pc, #380]	; (8006258 <HAL_ETH_Init+0x2b0>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d804      	bhi.n	80060e8 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80060de:	69fb      	ldr	r3, [r7, #28]
 80060e0:	f043 0304 	orr.w	r3, r3, #4
 80060e4:	61fb      	str	r3, [r7, #28]
 80060e6:	e005      	b.n	80060f4 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80060e8:	69fb      	ldr	r3, [r7, #28]
 80060ea:	f043 0310 	orr.w	r3, r3, #16
 80060ee:	61fb      	str	r3, [r7, #28]
 80060f0:	e000      	b.n	80060f4 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80060f2:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	69fa      	ldr	r2, [r7, #28]
 80060fa:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80060fc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006100:	2100      	movs	r1, #0
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f000 fc10 	bl	8006928 <HAL_ETH_WritePHYRegister>
 8006108:	4603      	mov	r3, r0
 800610a:	2b00      	cmp	r3, #0
 800610c:	d00b      	beq.n	8006126 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8006112:	6939      	ldr	r1, [r7, #16]
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f000 fdc5 	bl	8006ca4 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2201      	movs	r2, #1
 800611e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8006122:	2301      	movs	r3, #1
 8006124:	e0d6      	b.n	80062d4 <HAL_ETH_Init+0x32c>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8006126:	20ff      	movs	r0, #255	; 0xff
 8006128:	f7ff fa06 	bl	8005538 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	2b00      	cmp	r3, #0
 8006132:	f000 80a4 	beq.w	800627e <HAL_ETH_Init+0x2d6>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8006136:	f7ff f9f3 	bl	8005520 <HAL_GetTick>
 800613a:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800613c:	f107 030c 	add.w	r3, r7, #12
 8006140:	461a      	mov	r2, r3
 8006142:	2101      	movs	r1, #1
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f000 fb87 	bl	8006858 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800614a:	f7ff f9e9 	bl	8005520 <HAL_GetTick>
 800614e:	4602      	mov	r2, r0
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	1ad3      	subs	r3, r2, r3
 8006154:	f241 3288 	movw	r2, #5000	; 0x1388
 8006158:	4293      	cmp	r3, r2
 800615a:	d90f      	bls.n	800617c <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800615c:	2301      	movs	r3, #1
 800615e:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8006160:	6939      	ldr	r1, [r7, #16]
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f000 fd9e 	bl	8006ca4 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2201      	movs	r2, #1
 800616c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2200      	movs	r2, #0
 8006174:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8006178:	2303      	movs	r3, #3
 800617a:	e0ab      	b.n	80062d4 <HAL_ETH_Init+0x32c>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f003 0304 	and.w	r3, r3, #4
 8006182:	2b00      	cmp	r3, #0
 8006184:	d0da      	beq.n	800613c <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8006186:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800618a:	2100      	movs	r1, #0
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f000 fbcb 	bl	8006928 <HAL_ETH_WritePHYRegister>
 8006192:	4603      	mov	r3, r0
 8006194:	2b00      	cmp	r3, #0
 8006196:	d00b      	beq.n	80061b0 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8006198:	2301      	movs	r3, #1
 800619a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800619c:	6939      	ldr	r1, [r7, #16]
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f000 fd80 	bl	8006ca4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2201      	movs	r2, #1
 80061a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80061ac:	2301      	movs	r3, #1
 80061ae:	e091      	b.n	80062d4 <HAL_ETH_Init+0x32c>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80061b0:	f7ff f9b6 	bl	8005520 <HAL_GetTick>
 80061b4:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80061b6:	f107 030c 	add.w	r3, r7, #12
 80061ba:	461a      	mov	r2, r3
 80061bc:	2101      	movs	r1, #1
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f000 fb4a 	bl	8006858 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80061c4:	f7ff f9ac 	bl	8005520 <HAL_GetTick>
 80061c8:	4602      	mov	r2, r0
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	1ad3      	subs	r3, r2, r3
 80061ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d90f      	bls.n	80061f6 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80061d6:	2301      	movs	r3, #1
 80061d8:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80061da:	6939      	ldr	r1, [r7, #16]
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f000 fd61 	bl	8006ca4 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2201      	movs	r2, #1
 80061e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2200      	movs	r2, #0
 80061ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80061f2:	2303      	movs	r3, #3
 80061f4:	e06e      	b.n	80062d4 <HAL_ETH_Init+0x32c>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	f003 0320 	and.w	r3, r3, #32
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d0da      	beq.n	80061b6 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8006200:	f107 030c 	add.w	r3, r7, #12
 8006204:	461a      	mov	r2, r3
 8006206:	2110      	movs	r1, #16
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f000 fb25 	bl	8006858 <HAL_ETH_ReadPHYRegister>
 800620e:	4603      	mov	r3, r0
 8006210:	2b00      	cmp	r3, #0
 8006212:	d00b      	beq.n	800622c <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8006214:	2301      	movs	r3, #1
 8006216:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8006218:	6939      	ldr	r1, [r7, #16]
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f000 fd42 	bl	8006ca4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2201      	movs	r2, #1
 8006224:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8006228:	2301      	movs	r3, #1
 800622a:	e053      	b.n	80062d4 <HAL_ETH_Init+0x32c>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f003 0304 	and.w	r3, r3, #4
 8006232:	2b00      	cmp	r3, #0
 8006234:	d012      	beq.n	800625c <HAL_ETH_Init+0x2b4>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800623c:	60da      	str	r2, [r3, #12]
 800623e:	e010      	b.n	8006262 <HAL_ETH_Init+0x2ba>
 8006240:	03938700 	.word	0x03938700
 8006244:	40023800 	.word	0x40023800
 8006248:	40013800 	.word	0x40013800
 800624c:	01312cff 	.word	0x01312cff
 8006250:	02160ebf 	.word	0x02160ebf
 8006254:	05f5e0ff 	.word	0x05f5e0ff
 8006258:	08f0d17f 	.word	0x08f0d17f
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2200      	movs	r2, #0
 8006260:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	f003 0302 	and.w	r3, r3, #2
 8006268:	2b00      	cmp	r3, #0
 800626a:	d003      	beq.n	8006274 <HAL_ETH_Init+0x2cc>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2200      	movs	r2, #0
 8006270:	609a      	str	r2, [r3, #8]
 8006272:	e026      	b.n	80062c2 <HAL_ETH_Init+0x31a>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800627a:	609a      	str	r2, [r3, #8]
 800627c:	e021      	b.n	80062c2 <HAL_ETH_Init+0x31a>
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	68db      	ldr	r3, [r3, #12]
 8006282:	08db      	lsrs	r3, r3, #3
 8006284:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	085b      	lsrs	r3, r3, #1
 800628c:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 800628e:	4313      	orrs	r3, r2
 8006290:	b29b      	uxth	r3, r3
 8006292:	461a      	mov	r2, r3
 8006294:	2100      	movs	r1, #0
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f000 fb46 	bl	8006928 <HAL_ETH_WritePHYRegister>
 800629c:	4603      	mov	r3, r0
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d00b      	beq.n	80062ba <HAL_ETH_Init+0x312>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80062a2:	2301      	movs	r3, #1
 80062a4:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80062a6:	6939      	ldr	r1, [r7, #16]
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f000 fcfb 	bl	8006ca4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2201      	movs	r2, #1
 80062b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	e00c      	b.n	80062d4 <HAL_ETH_Init+0x32c>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80062ba:	f640 70ff 	movw	r0, #4095	; 0xfff
 80062be:	f7ff f93b 	bl	8005538 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80062c2:	6939      	ldr	r1, [r7, #16]
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f000 fced 	bl	8006ca4 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2201      	movs	r2, #1
 80062ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80062d2:	2300      	movs	r3, #0
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3720      	adds	r7, #32
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}

080062dc <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80062dc:	b480      	push	{r7}
 80062de:	b087      	sub	sp, #28
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	60f8      	str	r0, [r7, #12]
 80062e4:	60b9      	str	r1, [r7, #8]
 80062e6:	607a      	str	r2, [r7, #4]
 80062e8:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80062ea:	2300      	movs	r3, #0
 80062ec:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	d101      	bne.n	80062fc <HAL_ETH_DMATxDescListInit+0x20>
 80062f8:	2302      	movs	r3, #2
 80062fa:	e051      	b.n	80063a0 <HAL_ETH_DMATxDescListInit+0xc4>
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2201      	movs	r2, #1
 8006300:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2202      	movs	r2, #2
 8006308:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	68ba      	ldr	r2, [r7, #8]
 8006310:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8006312:	2300      	movs	r3, #0
 8006314:	617b      	str	r3, [r7, #20]
 8006316:	e030      	b.n	800637a <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	015b      	lsls	r3, r3, #5
 800631c:	68ba      	ldr	r2, [r7, #8]
 800631e:	4413      	add	r3, r2
 8006320:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006328:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8006330:	fb02 f303 	mul.w	r3, r2, r3
 8006334:	687a      	ldr	r2, [r7, #4]
 8006336:	4413      	add	r3, r2
 8006338:	461a      	mov	r2, r3
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	69db      	ldr	r3, [r3, #28]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d105      	bne.n	8006352 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	3b01      	subs	r3, #1
 8006356:	697a      	ldr	r2, [r7, #20]
 8006358:	429a      	cmp	r2, r3
 800635a:	d208      	bcs.n	800636e <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	3301      	adds	r3, #1
 8006360:	015b      	lsls	r3, r3, #5
 8006362:	68ba      	ldr	r2, [r7, #8]
 8006364:	4413      	add	r3, r2
 8006366:	461a      	mov	r2, r3
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	60da      	str	r2, [r3, #12]
 800636c:	e002      	b.n	8006374 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 800636e:	68ba      	ldr	r2, [r7, #8]
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	3301      	adds	r3, #1
 8006378:	617b      	str	r3, [r7, #20]
 800637a:	697a      	ldr	r2, [r7, #20]
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	429a      	cmp	r2, r3
 8006380:	d3ca      	bcc.n	8006318 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681a      	ldr	r2, [r3, #0]
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800638c:	6113      	str	r3, [r2, #16]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2201      	movs	r2, #1
 8006392:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2200      	movs	r2, #0
 800639a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800639e:	2300      	movs	r3, #0
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	371c      	adds	r7, #28
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr

080063ac <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b087      	sub	sp, #28
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	60f8      	str	r0, [r7, #12]
 80063b4:	60b9      	str	r1, [r7, #8]
 80063b6:	607a      	str	r2, [r7, #4]
 80063b8:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80063ba:	2300      	movs	r3, #0
 80063bc:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	d101      	bne.n	80063cc <HAL_ETH_DMARxDescListInit+0x20>
 80063c8:	2302      	movs	r3, #2
 80063ca:	e055      	b.n	8006478 <HAL_ETH_DMARxDescListInit+0xcc>
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2201      	movs	r2, #1
 80063d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2202      	movs	r2, #2
 80063d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	68ba      	ldr	r2, [r7, #8]
 80063e0:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 80063e2:	2300      	movs	r3, #0
 80063e4:	617b      	str	r3, [r7, #20]
 80063e6:	e034      	b.n	8006452 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	015b      	lsls	r3, r3, #5
 80063ec:	68ba      	ldr	r2, [r7, #8]
 80063ee:	4413      	add	r3, r2
 80063f0:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80063f8:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8006400:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8006408:	fb02 f303 	mul.w	r3, r2, r3
 800640c:	687a      	ldr	r2, [r7, #4]
 800640e:	4413      	add	r3, r2
 8006410:	461a      	mov	r2, r3
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	699b      	ldr	r3, [r3, #24]
 800641a:	2b01      	cmp	r3, #1
 800641c:	d105      	bne.n	800642a <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	3b01      	subs	r3, #1
 800642e:	697a      	ldr	r2, [r7, #20]
 8006430:	429a      	cmp	r2, r3
 8006432:	d208      	bcs.n	8006446 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	3301      	adds	r3, #1
 8006438:	015b      	lsls	r3, r3, #5
 800643a:	68ba      	ldr	r2, [r7, #8]
 800643c:	4413      	add	r3, r2
 800643e:	461a      	mov	r2, r3
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	60da      	str	r2, [r3, #12]
 8006444:	e002      	b.n	800644c <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8006446:	68ba      	ldr	r2, [r7, #8]
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	3301      	adds	r3, #1
 8006450:	617b      	str	r3, [r7, #20]
 8006452:	697a      	ldr	r2, [r7, #20]
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	429a      	cmp	r2, r3
 8006458:	d3c6      	bcc.n	80063e8 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006464:	60d3      	str	r3, [r2, #12]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2201      	movs	r2, #1
 800646a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2200      	movs	r2, #0
 8006472:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8006476:	2300      	movs	r3, #0
}
 8006478:	4618      	mov	r0, r3
 800647a:	371c      	adds	r7, #28
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr

08006484 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8006484:	b480      	push	{r7}
 8006486:	b087      	sub	sp, #28
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 800648e:	2300      	movs	r3, #0
 8006490:	617b      	str	r3, [r7, #20]
 8006492:	2300      	movs	r3, #0
 8006494:	60fb      	str	r3, [r7, #12]
 8006496:	2300      	movs	r3, #0
 8006498:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d101      	bne.n	80064a8 <HAL_ETH_TransmitFrame+0x24>
 80064a4:	2302      	movs	r3, #2
 80064a6:	e0cc      	b.n	8006642 <HAL_ETH_TransmitFrame+0x1be>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2201      	movs	r2, #1
 80064ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2202      	movs	r2, #2
 80064b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d109      	bne.n	80064d2 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2201      	movs	r2, #1
 80064c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2200      	movs	r2, #0
 80064ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 80064ce:	2301      	movs	r3, #1
 80064d0:	e0b7      	b.n	8006642 <HAL_ETH_TransmitFrame+0x1be>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	da09      	bge.n	80064f0 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2212      	movs	r2, #18
 80064e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2200      	movs	r2, #0
 80064e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 80064ec:	2301      	movs	r3, #1
 80064ee:	e0a8      	b.n	8006642 <HAL_ETH_TransmitFrame+0x1be>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d915      	bls.n	8006526 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	4a54      	ldr	r2, [pc, #336]	; (8006650 <HAL_ETH_TransmitFrame+0x1cc>)
 80064fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006502:	0a9b      	lsrs	r3, r3, #10
 8006504:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8006506:	683a      	ldr	r2, [r7, #0]
 8006508:	4b51      	ldr	r3, [pc, #324]	; (8006650 <HAL_ETH_TransmitFrame+0x1cc>)
 800650a:	fba3 1302 	umull	r1, r3, r3, r2
 800650e:	0a9b      	lsrs	r3, r3, #10
 8006510:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8006514:	fb01 f303 	mul.w	r3, r1, r3
 8006518:	1ad3      	subs	r3, r2, r3
 800651a:	2b00      	cmp	r3, #0
 800651c:	d005      	beq.n	800652a <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	3301      	adds	r3, #1
 8006522:	617b      	str	r3, [r7, #20]
 8006524:	e001      	b.n	800652a <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8006526:	2301      	movs	r3, #1
 8006528:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	2b01      	cmp	r3, #1
 800652e:	d11c      	bne.n	800656a <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006534:	681a      	ldr	r2, [r3, #0]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800653a:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800653e:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006544:	683a      	ldr	r2, [r7, #0]
 8006546:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800654a:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006556:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800655a:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006560:	68db      	ldr	r3, [r3, #12]
 8006562:	461a      	mov	r2, r3
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	62da      	str	r2, [r3, #44]	; 0x2c
 8006568:	e04b      	b.n	8006602 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 800656a:	2300      	movs	r3, #0
 800656c:	613b      	str	r3, [r7, #16]
 800656e:	e044      	b.n	80065fa <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800657a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800657e:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d107      	bne.n	8006596 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800658a:	681a      	ldr	r2, [r3, #0]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006590:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006594:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800659a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800659e:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	3b01      	subs	r3, #1
 80065a4:	693a      	ldr	r2, [r7, #16]
 80065a6:	429a      	cmp	r2, r3
 80065a8:	d116      	bne.n	80065d8 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ae:	681a      	ldr	r2, [r3, #0]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065b4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80065b8:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	4a25      	ldr	r2, [pc, #148]	; (8006654 <HAL_ETH_TransmitFrame+0x1d0>)
 80065be:	fb03 f202 	mul.w	r2, r3, r2
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	4413      	add	r3, r2
 80065c6:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80065ca:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065d0:	68fa      	ldr	r2, [r7, #12]
 80065d2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80065d6:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065dc:	681a      	ldr	r2, [r3, #0]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065e2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80065e6:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ec:	68db      	ldr	r3, [r3, #12]
 80065ee:	461a      	mov	r2, r3
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	3301      	adds	r3, #1
 80065f8:	613b      	str	r3, [r7, #16]
 80065fa:	693a      	ldr	r2, [r7, #16]
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	429a      	cmp	r2, r3
 8006600:	d3b6      	bcc.n	8006570 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800660a:	695b      	ldr	r3, [r3, #20]
 800660c:	f003 0304 	and.w	r3, r3, #4
 8006610:	2b00      	cmp	r3, #0
 8006612:	d00d      	beq.n	8006630 <HAL_ETH_TransmitFrame+0x1ac>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800661c:	461a      	mov	r2, r3
 800661e:	2304      	movs	r3, #4
 8006620:	6153      	str	r3, [r2, #20]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800662a:	461a      	mov	r2, r3
 800662c:	2300      	movs	r3, #0
 800662e:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2201      	movs	r2, #1
 8006634:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2200      	movs	r2, #0
 800663c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8006640:	2300      	movs	r3, #0
}
 8006642:	4618      	mov	r0, r3
 8006644:	371c      	adds	r7, #28
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr
 800664e:	bf00      	nop
 8006650:	ac02b00b 	.word	0xac02b00b
 8006654:	fffffa0c 	.word	0xfffffa0c

08006658 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8006658:	b480      	push	{r7}
 800665a:	b085      	sub	sp, #20
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 8006660:	2300      	movs	r3, #0
 8006662:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800666a:	2b01      	cmp	r3, #1
 800666c:	d101      	bne.n	8006672 <HAL_ETH_GetReceivedFrame_IT+0x1a>
 800666e:	2302      	movs	r3, #2
 8006670:	e074      	b.n	800675c <HAL_ETH_GetReceivedFrame_IT+0x104>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2201      	movs	r2, #1
 8006676:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2202      	movs	r2, #2
 800667e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8006682:	e05a      	b.n	800673a <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	3301      	adds	r3, #1
 8006688:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006694:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006698:	d10d      	bne.n	80066b6 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2201      	movs	r2, #1
 80066a6:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ac:	68db      	ldr	r3, [r3, #12]
 80066ae:	461a      	mov	r2, r3
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	629a      	str	r2, [r3, #40]	; 0x28
 80066b4:	e041      	b.n	800673a <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d10b      	bne.n	80066dc <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066c8:	1c5a      	adds	r2, r3, #1
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066d2:	68db      	ldr	r3, [r3, #12]
 80066d4:	461a      	mov	r2, r3
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	629a      	str	r2, [r3, #40]	; 0x28
 80066da:	e02e      	b.n	800673a <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066e8:	1c5a      	adds	r2, r3, #1
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066f2:	2b01      	cmp	r3, #1
 80066f4:	d103      	bne.n	80066fe <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	0c1b      	lsrs	r3, r3, #16
 8006706:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800670a:	1f1a      	subs	r2, r3, #4
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006714:	689a      	ldr	r2, [r3, #8]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800671e:	68db      	ldr	r3, [r3, #12]
 8006720:	461a      	mov	r2, r3
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2201      	movs	r2, #1
 800672a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2200      	movs	r2, #0
 8006732:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8006736:	2300      	movs	r3, #0
 8006738:	e010      	b.n	800675c <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	2b00      	cmp	r3, #0
 8006742:	db02      	blt.n	800674a <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2b03      	cmp	r3, #3
 8006748:	d99c      	bls.n	8006684 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2201      	movs	r2, #1
 800674e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2200      	movs	r2, #0
 8006756:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 800675a:	2301      	movs	r3, #1
}
 800675c:	4618      	mov	r0, r3
 800675e:	3714      	adds	r7, #20
 8006760:	46bd      	mov	sp, r7
 8006762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006766:	4770      	bx	lr

08006768 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b082      	sub	sp, #8
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006778:	695b      	ldr	r3, [r3, #20]
 800677a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800677e:	2b40      	cmp	r3, #64	; 0x40
 8006780:	d112      	bne.n	80067a8 <HAL_ETH_IRQHandler+0x40>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f005 f9e0 	bl	800bb48 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006790:	461a      	mov	r2, r3
 8006792:	2340      	movs	r3, #64	; 0x40
 8006794:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2201      	movs	r2, #1
 800679a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2200      	movs	r2, #0
 80067a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80067a6:	e01a      	b.n	80067de <HAL_ETH_IRQHandler+0x76>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067b0:	695b      	ldr	r3, [r3, #20]
 80067b2:	f003 0301 	and.w	r3, r3, #1
 80067b6:	2b01      	cmp	r3, #1
 80067b8:	d111      	bne.n	80067de <HAL_ETH_IRQHandler+0x76>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f000 f838 	bl	8006830 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067c8:	461a      	mov	r2, r3
 80067ca:	2301      	movs	r3, #1
 80067cc:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2201      	movs	r2, #1
 80067d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2200      	movs	r2, #0
 80067da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067e6:	461a      	mov	r2, r3
 80067e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80067ec:	6153      	str	r3, [r2, #20]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067f6:	695b      	ldr	r3, [r3, #20]
 80067f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80067fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006800:	d112      	bne.n	8006828 <HAL_ETH_IRQHandler+0xc0>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f000 f81e 	bl	8006844 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006810:	461a      	mov	r2, r3
 8006812:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006816:	6153      	str	r3, [r2, #20]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2201      	movs	r2, #1
 800681c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2200      	movs	r2, #0
 8006824:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8006828:	bf00      	nop
 800682a:	3708      	adds	r7, #8
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}

08006830 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8006830:	b480      	push	{r7}
 8006832:	b083      	sub	sp, #12
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8006838:	bf00      	nop
 800683a:	370c      	adds	r7, #12
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr

08006844 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8006844:	b480      	push	{r7}
 8006846:	b083      	sub	sp, #12
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 800684c:	bf00      	nop
 800684e:	370c      	adds	r7, #12
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr

08006858 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b086      	sub	sp, #24
 800685c:	af00      	add	r7, sp, #0
 800685e:	60f8      	str	r0, [r7, #12]
 8006860:	460b      	mov	r3, r1
 8006862:	607a      	str	r2, [r7, #4]
 8006864:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8006866:	2300      	movs	r3, #0
 8006868:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800686a:	2300      	movs	r3, #0
 800686c:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006874:	b2db      	uxtb	r3, r3
 8006876:	2b82      	cmp	r3, #130	; 0x82
 8006878:	d101      	bne.n	800687e <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 800687a:	2302      	movs	r3, #2
 800687c:	e050      	b.n	8006920 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2282      	movs	r2, #130	; 0x82
 8006882:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	691b      	ldr	r3, [r3, #16]
 800688c:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	f003 031c 	and.w	r3, r3, #28
 8006894:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	8a1b      	ldrh	r3, [r3, #16]
 800689a:	02db      	lsls	r3, r3, #11
 800689c:	b29b      	uxth	r3, r3
 800689e:	697a      	ldr	r2, [r7, #20]
 80068a0:	4313      	orrs	r3, r2
 80068a2:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80068a4:	897b      	ldrh	r3, [r7, #10]
 80068a6:	019b      	lsls	r3, r3, #6
 80068a8:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80068ac:	697a      	ldr	r2, [r7, #20]
 80068ae:	4313      	orrs	r3, r2
 80068b0:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	f023 0302 	bic.w	r3, r3, #2
 80068b8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	f043 0301 	orr.w	r3, r3, #1
 80068c0:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	697a      	ldr	r2, [r7, #20]
 80068c8:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80068ca:	f7fe fe29 	bl	8005520 <HAL_GetTick>
 80068ce:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80068d0:	e015      	b.n	80068fe <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80068d2:	f7fe fe25 	bl	8005520 <HAL_GetTick>
 80068d6:	4602      	mov	r2, r0
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	1ad3      	subs	r3, r2, r3
 80068dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068e0:	d309      	bcc.n	80068f6 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2201      	movs	r2, #1
 80068e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2200      	movs	r2, #0
 80068ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80068f2:	2303      	movs	r3, #3
 80068f4:	e014      	b.n	8006920 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	691b      	ldr	r3, [r3, #16]
 80068fc:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	f003 0301 	and.w	r3, r3, #1
 8006904:	2b00      	cmp	r3, #0
 8006906:	d1e4      	bne.n	80068d2 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	695b      	ldr	r3, [r3, #20]
 800690e:	b29b      	uxth	r3, r3
 8006910:	461a      	mov	r2, r3
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	2201      	movs	r2, #1
 800691a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800691e:	2300      	movs	r3, #0
}
 8006920:	4618      	mov	r0, r3
 8006922:	3718      	adds	r7, #24
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}

08006928 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b086      	sub	sp, #24
 800692c:	af00      	add	r7, sp, #0
 800692e:	60f8      	str	r0, [r7, #12]
 8006930:	460b      	mov	r3, r1
 8006932:	607a      	str	r2, [r7, #4]
 8006934:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8006936:	2300      	movs	r3, #0
 8006938:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800693a:	2300      	movs	r3, #0
 800693c:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006944:	b2db      	uxtb	r3, r3
 8006946:	2b42      	cmp	r3, #66	; 0x42
 8006948:	d101      	bne.n	800694e <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 800694a:	2302      	movs	r3, #2
 800694c:	e04e      	b.n	80069ec <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2242      	movs	r2, #66	; 0x42
 8006952:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	691b      	ldr	r3, [r3, #16]
 800695c:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	f003 031c 	and.w	r3, r3, #28
 8006964:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	8a1b      	ldrh	r3, [r3, #16]
 800696a:	02db      	lsls	r3, r3, #11
 800696c:	b29b      	uxth	r3, r3
 800696e:	697a      	ldr	r2, [r7, #20]
 8006970:	4313      	orrs	r3, r2
 8006972:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8006974:	897b      	ldrh	r3, [r7, #10]
 8006976:	019b      	lsls	r3, r3, #6
 8006978:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800697c:	697a      	ldr	r2, [r7, #20]
 800697e:	4313      	orrs	r3, r2
 8006980:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	f043 0302 	orr.w	r3, r3, #2
 8006988:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	f043 0301 	orr.w	r3, r3, #1
 8006990:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	b29a      	uxth	r2, r3
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	697a      	ldr	r2, [r7, #20]
 80069a2:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80069a4:	f7fe fdbc 	bl	8005520 <HAL_GetTick>
 80069a8:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80069aa:	e015      	b.n	80069d8 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80069ac:	f7fe fdb8 	bl	8005520 <HAL_GetTick>
 80069b0:	4602      	mov	r2, r0
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	1ad3      	subs	r3, r2, r3
 80069b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069ba:	d309      	bcc.n	80069d0 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2201      	movs	r2, #1
 80069c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2200      	movs	r2, #0
 80069c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80069cc:	2303      	movs	r3, #3
 80069ce:	e00d      	b.n	80069ec <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	691b      	ldr	r3, [r3, #16]
 80069d6:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	f003 0301 	and.w	r3, r3, #1
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d1e4      	bne.n	80069ac <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2201      	movs	r2, #1
 80069e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 80069ea:	2300      	movs	r3, #0
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	3718      	adds	r7, #24
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}

080069f4 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b082      	sub	sp, #8
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a02:	2b01      	cmp	r3, #1
 8006a04:	d101      	bne.n	8006a0a <HAL_ETH_Start+0x16>
 8006a06:	2302      	movs	r3, #2
 8006a08:	e01f      	b.n	8006a4a <HAL_ETH_Start+0x56>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2201      	movs	r2, #1
 8006a0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2202      	movs	r2, #2
 8006a16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f000 fb40 	bl	80070a0 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f000 fb77 	bl	8007114 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f000 fc06 	bl	8007238 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f000 fbab 	bl	8007188 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f000 fbd4 	bl	80071e0 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2200      	movs	r2, #0
 8006a44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8006a48:	2300      	movs	r3, #0
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3708      	adds	r7, #8
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}

08006a52 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8006a52:	b580      	push	{r7, lr}
 8006a54:	b082      	sub	sp, #8
 8006a56:	af00      	add	r7, sp, #0
 8006a58:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	d101      	bne.n	8006a68 <HAL_ETH_Stop+0x16>
 8006a64:	2302      	movs	r3, #2
 8006a66:	e01f      	b.n	8006aa8 <HAL_ETH_Stop+0x56>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2202      	movs	r2, #2
 8006a74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f000 fb9b 	bl	80071b4 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f000 fbc4 	bl	800720c <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f000 fb62 	bl	800714e <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f000 fbd4 	bl	8007238 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f000 fb22 	bl	80070da <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2201      	movs	r2, #1
 8006a9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8006aa6:	2300      	movs	r3, #0
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	3708      	adds	r7, #8
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}

08006ab0 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b084      	sub	sp, #16
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8006aba:	2300      	movs	r3, #0
 8006abc:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	d101      	bne.n	8006acc <HAL_ETH_ConfigMAC+0x1c>
 8006ac8:	2302      	movs	r3, #2
 8006aca:	e0e4      	b.n	8006c96 <HAL_ETH_ConfigMAC+0x1e6>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2202      	movs	r2, #2
 8006ad8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	f000 80b1 	beq.w	8006c46 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8006aec:	68fa      	ldr	r2, [r7, #12]
 8006aee:	4b6c      	ldr	r3, [pc, #432]	; (8006ca0 <HAL_ETH_ConfigMAC+0x1f0>)
 8006af0:	4013      	ands	r3, r2
 8006af2:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8006afc:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8006b02:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8006b08:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8006b0e:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8006b14:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8006b1a:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8006b20:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8006b26:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8006b2c:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8006b32:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8006b38:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8006b3e:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8006b40:	68fa      	ldr	r2, [r7, #12]
 8006b42:	4313      	orrs	r3, r2
 8006b44:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	68fa      	ldr	r2, [r7, #12]
 8006b4c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8006b56:	2001      	movs	r0, #1
 8006b58:	f7fe fcee 	bl	8005538 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	68fa      	ldr	r2, [r7, #12]
 8006b62:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8006b6c:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8006b72:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8006b78:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8006b7e:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8006b84:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8006b8a:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8006b96:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8006b98:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8006ba2:	2001      	movs	r0, #1
 8006ba4:	f7fe fcc8 	bl	8005538 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	68fa      	ldr	r2, [r7, #12]
 8006bae:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	683a      	ldr	r2, [r7, #0]
 8006bb6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006bb8:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	683a      	ldr	r2, [r7, #0]
 8006bc0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006bc2:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	699b      	ldr	r3, [r3, #24]
 8006bca:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8006bcc:	68fa      	ldr	r2, [r7, #12]
 8006bce:	f64f 7341 	movw	r3, #65345	; 0xff41
 8006bd2:	4013      	ands	r3, r2
 8006bd4:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bda:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8006be0:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8006be6:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8006bec:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8006bf2:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8006bf8:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8006bfa:	68fa      	ldr	r2, [r7, #12]
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	68fa      	ldr	r2, [r7, #12]
 8006c06:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	699b      	ldr	r3, [r3, #24]
 8006c0e:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8006c10:	2001      	movs	r0, #1
 8006c12:	f7fe fc91 	bl	8005538 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	68fa      	ldr	r2, [r7, #12]
 8006c1c:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	430a      	orrs	r2, r1
 8006c2c:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	69db      	ldr	r3, [r3, #28]
 8006c34:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8006c36:	2001      	movs	r0, #1
 8006c38:	f7fe fc7e 	bl	8005538 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	68fa      	ldr	r2, [r7, #12]
 8006c42:	61da      	str	r2, [r3, #28]
 8006c44:	e01e      	b.n	8006c84 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8006c54:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	689a      	ldr	r2, [r3, #8]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	68db      	ldr	r3, [r3, #12]
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	68fa      	ldr	r2, [r7, #12]
 8006c62:	4313      	orrs	r3, r2
 8006c64:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	68fa      	ldr	r2, [r7, #12]
 8006c6c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8006c76:	2001      	movs	r0, #1
 8006c78:	f7fe fc5e 	bl	8005538 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	68fa      	ldr	r2, [r7, #12]
 8006c82:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2201      	movs	r2, #1
 8006c88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8006c94:	2300      	movs	r3, #0
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3710      	adds	r7, #16
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}
 8006c9e:	bf00      	nop
 8006ca0:	ff20810f 	.word	0xff20810f

08006ca4 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b0b0      	sub	sp, #192	; 0xc0
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d007      	beq.n	8006cca <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006cc0:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006cc8:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	69db      	ldr	r3, [r3, #28]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d103      	bne.n	8006cf2 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8006cea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006cee:	663b      	str	r3, [r7, #96]	; 0x60
 8006cf0:	e001      	b.n	8006cf6 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8006cf6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006cfa:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8006d00:	2300      	movs	r3, #0
 8006d02:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8006d04:	2300      	movs	r3, #0
 8006d06:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8006d10:	2340      	movs	r3, #64	; 0x40
 8006d12:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8006d14:	2300      	movs	r3, #0
 8006d16:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8006d20:	2300      	movs	r3, #0
 8006d22:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8006d26:	2300      	movs	r3, #0
 8006d28:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8006d32:	2300      	movs	r3, #0
 8006d34:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8006d44:	2380      	movs	r3, #128	; 0x80
 8006d46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8006d50:	2300      	movs	r3, #0
 8006d52:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8006d56:	2300      	movs	r3, #0
 8006d58:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8006d62:	2300      	movs	r3, #0
 8006d64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8006d78:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8006d7c:	4baa      	ldr	r3, [pc, #680]	; (8007028 <ETH_MACDMAConfig+0x384>)
 8006d7e:	4013      	ands	r3, r2
 8006d80:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8006d84:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8006d86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8006d88:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8006d8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8006d8c:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8006d8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8006d90:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8006d96:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8006d98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8006d9a:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8006d9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8006d9e:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8006da4:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8006da6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8006da8:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8006daa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8006dac:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8006dae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8006db0:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8006db2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8006db4:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8006db6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8006db8:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8006dba:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8006dcc:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8006dd8:	2001      	movs	r0, #1
 8006dda:	f7fe fbad 	bl	8005538 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8006de6:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8006de8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8006dea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8006dec:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8006dee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8006df0:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8006df2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8006df6:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8006df8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8006dfc:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8006dfe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8006e02:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8006e04:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8006e08:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8006e0c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8006e14:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8006e16:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8006e22:	2001      	movs	r0, #1
 8006e24:	f7fe fb88 	bl	8005538 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8006e30:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006e3a:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8006e44:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	699b      	ldr	r3, [r3, #24]
 8006e4c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8006e50:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8006e54:	f64f 7341 	movw	r3, #65345	; 0xff41
 8006e58:	4013      	ands	r3, r2
 8006e5a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8006e5e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006e62:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8006e64:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8006e68:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8006e6a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8006e6e:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8006e70:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8006e74:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8006e76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8006e7a:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8006e7c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8006e80:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8006e82:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8006e86:	4313      	orrs	r3, r2
 8006e88:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8006e94:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	699b      	ldr	r3, [r3, #24]
 8006e9c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8006ea0:	2001      	movs	r0, #1
 8006ea2:	f7fe fb49 	bl	8005538 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8006eae:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8006eb0:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8006eb4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	430a      	orrs	r2, r1
 8006ebe:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	69db      	ldr	r3, [r3, #28]
 8006ec6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8006eca:	2001      	movs	r0, #1
 8006ecc:	f7fe fb34 	bl	8005538 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8006ed8:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8006eda:	2300      	movs	r3, #0
 8006edc:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8006ede:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006ee2:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8006ee8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006eec:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8006efa:	2300      	movs	r3, #0
 8006efc:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8006efe:	2304      	movs	r3, #4
 8006f00:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8006f02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006f06:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8006f08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006f0c:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8006f0e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006f12:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8006f14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006f18:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8006f1a:	2380      	movs	r3, #128	; 0x80
 8006f1c:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8006f22:	2300      	movs	r3, #0
 8006f24:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f2e:	699b      	ldr	r3, [r3, #24]
 8006f30:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8006f34:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8006f38:	4b3c      	ldr	r3, [pc, #240]	; (800702c <ETH_MACDMAConfig+0x388>)
 8006f3a:	4013      	ands	r3, r2
 8006f3c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8006f40:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8006f42:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8006f44:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8006f46:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8006f48:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8006f4a:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8006f4c:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8006f4e:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8006f50:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8006f52:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8006f54:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8006f56:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8006f58:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8006f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8006f5c:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8006f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8006f60:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8006f62:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8006f66:	4313      	orrs	r3, r2
 8006f68:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f74:	461a      	mov	r2, r3
 8006f76:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006f7a:	6193      	str	r3, [r2, #24]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f84:	699b      	ldr	r3, [r3, #24]
 8006f86:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8006f8a:	2001      	movs	r0, #1
 8006f8c:	f7fe fad4 	bl	8005538 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f98:	461a      	mov	r2, r3
 8006f9a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006f9e:	6193      	str	r3, [r2, #24]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8006fa0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8006fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8006fa4:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8006fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8006fa8:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8006faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8006fac:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8006fae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8006fb0:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8006fb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fb4:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8006fb6:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8006fb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8006fba:	4313      	orrs	r3, r2
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8006fbc:	687a      	ldr	r2, [r7, #4]
 8006fbe:	6812      	ldr	r2, [r2, #0]
 8006fc0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006fc4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006fc8:	6013      	str	r3, [r2, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8006fd8:	2001      	movs	r0, #1
 8006fda:	f7fe faad 	bl	8005538 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fe6:	461a      	mov	r2, r3
 8006fe8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006fec:	6013      	str	r3, [r2, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	699b      	ldr	r3, [r3, #24]
 8006ff2:	2b01      	cmp	r3, #1
 8006ff4:	d10d      	bne.n	8007012 <ETH_MACDMAConfig+0x36e>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ffe:	69db      	ldr	r3, [r3, #28]
 8007000:	687a      	ldr	r2, [r7, #4]
 8007002:	6812      	ldr	r2, [r2, #0]
 8007004:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007008:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800700c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007010:	61d3      	str	r3, [r2, #28]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	695b      	ldr	r3, [r3, #20]
 8007016:	461a      	mov	r2, r3
 8007018:	2100      	movs	r1, #0
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f000 f808 	bl	8007030 <ETH_MACAddressConfig>
}
 8007020:	bf00      	nop
 8007022:	37c0      	adds	r7, #192	; 0xc0
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}
 8007028:	ff20810f 	.word	0xff20810f
 800702c:	f8de3f23 	.word	0xf8de3f23

08007030 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8007030:	b480      	push	{r7}
 8007032:	b087      	sub	sp, #28
 8007034:	af00      	add	r7, sp, #0
 8007036:	60f8      	str	r0, [r7, #12]
 8007038:	60b9      	str	r1, [r7, #8]
 800703a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	3305      	adds	r3, #5
 8007040:	781b      	ldrb	r3, [r3, #0]
 8007042:	021b      	lsls	r3, r3, #8
 8007044:	687a      	ldr	r2, [r7, #4]
 8007046:	3204      	adds	r2, #4
 8007048:	7812      	ldrb	r2, [r2, #0]
 800704a:	4313      	orrs	r3, r2
 800704c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800704e:	68ba      	ldr	r2, [r7, #8]
 8007050:	4b11      	ldr	r3, [pc, #68]	; (8007098 <ETH_MACAddressConfig+0x68>)
 8007052:	4413      	add	r3, r2
 8007054:	461a      	mov	r2, r3
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	3303      	adds	r3, #3
 800705e:	781b      	ldrb	r3, [r3, #0]
 8007060:	061a      	lsls	r2, r3, #24
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	3302      	adds	r3, #2
 8007066:	781b      	ldrb	r3, [r3, #0]
 8007068:	041b      	lsls	r3, r3, #16
 800706a:	431a      	orrs	r2, r3
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	3301      	adds	r3, #1
 8007070:	781b      	ldrb	r3, [r3, #0]
 8007072:	021b      	lsls	r3, r3, #8
 8007074:	4313      	orrs	r3, r2
 8007076:	687a      	ldr	r2, [r7, #4]
 8007078:	7812      	ldrb	r2, [r2, #0]
 800707a:	4313      	orrs	r3, r2
 800707c:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800707e:	68ba      	ldr	r2, [r7, #8]
 8007080:	4b06      	ldr	r3, [pc, #24]	; (800709c <ETH_MACAddressConfig+0x6c>)
 8007082:	4413      	add	r3, r2
 8007084:	461a      	mov	r2, r3
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	6013      	str	r3, [r2, #0]
}
 800708a:	bf00      	nop
 800708c:	371c      	adds	r7, #28
 800708e:	46bd      	mov	sp, r7
 8007090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007094:	4770      	bx	lr
 8007096:	bf00      	nop
 8007098:	40028040 	.word	0x40028040
 800709c:	40028044 	.word	0x40028044

080070a0 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b084      	sub	sp, #16
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80070a8:	2300      	movs	r3, #0
 80070aa:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	681a      	ldr	r2, [r3, #0]
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f042 0208 	orr.w	r2, r2, #8
 80070ba:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80070c4:	2001      	movs	r0, #1
 80070c6:	f000 f8dd 	bl	8007284 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	68fa      	ldr	r2, [r7, #12]
 80070d0:	601a      	str	r2, [r3, #0]
}
 80070d2:	bf00      	nop
 80070d4:	3710      	adds	r7, #16
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}

080070da <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80070da:	b580      	push	{r7, lr}
 80070dc:	b084      	sub	sp, #16
 80070de:	af00      	add	r7, sp, #0
 80070e0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80070e2:	2300      	movs	r3, #0
 80070e4:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	681a      	ldr	r2, [r3, #0]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f022 0208 	bic.w	r2, r2, #8
 80070f4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80070fe:	2001      	movs	r0, #1
 8007100:	f000 f8c0 	bl	8007284 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	68fa      	ldr	r2, [r7, #12]
 800710a:	601a      	str	r2, [r3, #0]
}
 800710c:	bf00      	nop
 800710e:	3710      	adds	r7, #16
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}

08007114 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8007114:	b580      	push	{r7, lr}
 8007116:	b084      	sub	sp, #16
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800711c:	2300      	movs	r3, #0
 800711e:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	681a      	ldr	r2, [r3, #0]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f042 0204 	orr.w	r2, r2, #4
 800712e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8007138:	2001      	movs	r0, #1
 800713a:	f000 f8a3 	bl	8007284 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	68fa      	ldr	r2, [r7, #12]
 8007144:	601a      	str	r2, [r3, #0]
}
 8007146:	bf00      	nop
 8007148:	3710      	adds	r7, #16
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}

0800714e <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800714e:	b580      	push	{r7, lr}
 8007150:	b084      	sub	sp, #16
 8007152:	af00      	add	r7, sp, #0
 8007154:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8007156:	2300      	movs	r3, #0
 8007158:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	681a      	ldr	r2, [r3, #0]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f022 0204 	bic.w	r2, r2, #4
 8007168:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8007172:	2001      	movs	r0, #1
 8007174:	f000 f886 	bl	8007284 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	68fa      	ldr	r2, [r7, #12]
 800717e:	601a      	str	r2, [r3, #0]
}
 8007180:	bf00      	nop
 8007182:	3710      	adds	r7, #16
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}

08007188 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8007188:	b480      	push	{r7}
 800718a:	b083      	sub	sp, #12
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007198:	699b      	ldr	r3, [r3, #24]
 800719a:	687a      	ldr	r2, [r7, #4]
 800719c:	6812      	ldr	r2, [r2, #0]
 800719e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80071a2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80071a6:	6193      	str	r3, [r2, #24]
}
 80071a8:	bf00      	nop
 80071aa:	370c      	adds	r7, #12
 80071ac:	46bd      	mov	sp, r7
 80071ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b2:	4770      	bx	lr

080071b4 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80071b4:	b480      	push	{r7}
 80071b6:	b083      	sub	sp, #12
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071c4:	699b      	ldr	r3, [r3, #24]
 80071c6:	687a      	ldr	r2, [r7, #4]
 80071c8:	6812      	ldr	r2, [r2, #0]
 80071ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80071ce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80071d2:	6193      	str	r3, [r2, #24]
}
 80071d4:	bf00      	nop
 80071d6:	370c      	adds	r7, #12
 80071d8:	46bd      	mov	sp, r7
 80071da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071de:	4770      	bx	lr

080071e0 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 80071e0:	b480      	push	{r7}
 80071e2:	b083      	sub	sp, #12
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071f0:	699b      	ldr	r3, [r3, #24]
 80071f2:	687a      	ldr	r2, [r7, #4]
 80071f4:	6812      	ldr	r2, [r2, #0]
 80071f6:	f043 0302 	orr.w	r3, r3, #2
 80071fa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80071fe:	6193      	str	r3, [r2, #24]
}
 8007200:	bf00      	nop
 8007202:	370c      	adds	r7, #12
 8007204:	46bd      	mov	sp, r7
 8007206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720a:	4770      	bx	lr

0800720c <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800720c:	b480      	push	{r7}
 800720e:	b083      	sub	sp, #12
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800721c:	699b      	ldr	r3, [r3, #24]
 800721e:	687a      	ldr	r2, [r7, #4]
 8007220:	6812      	ldr	r2, [r2, #0]
 8007222:	f023 0302 	bic.w	r3, r3, #2
 8007226:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800722a:	6193      	str	r3, [r2, #24]
}
 800722c:	bf00      	nop
 800722e:	370c      	adds	r7, #12
 8007230:	46bd      	mov	sp, r7
 8007232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007236:	4770      	bx	lr

08007238 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b084      	sub	sp, #16
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8007240:	2300      	movs	r3, #0
 8007242:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800724c:	699b      	ldr	r3, [r3, #24]
 800724e:	687a      	ldr	r2, [r7, #4]
 8007250:	6812      	ldr	r2, [r2, #0]
 8007252:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007256:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800725a:	6193      	str	r3, [r2, #24]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007264:	699b      	ldr	r3, [r3, #24]
 8007266:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8007268:	2001      	movs	r0, #1
 800726a:	f000 f80b 	bl	8007284 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681a      	ldr	r2, [r3, #0]
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007278:	6193      	str	r3, [r2, #24]
}
 800727a:	bf00      	nop
 800727c:	3710      	adds	r7, #16
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}
	...

08007284 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8007284:	b480      	push	{r7}
 8007286:	b085      	sub	sp, #20
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800728c:	4b0b      	ldr	r3, [pc, #44]	; (80072bc <ETH_Delay+0x38>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a0b      	ldr	r2, [pc, #44]	; (80072c0 <ETH_Delay+0x3c>)
 8007292:	fba2 2303 	umull	r2, r3, r2, r3
 8007296:	0a5b      	lsrs	r3, r3, #9
 8007298:	687a      	ldr	r2, [r7, #4]
 800729a:	fb02 f303 	mul.w	r3, r2, r3
 800729e:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 80072a0:	bf00      	nop
  } 
  while (Delay --);
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	1e5a      	subs	r2, r3, #1
 80072a6:	60fa      	str	r2, [r7, #12]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d1f9      	bne.n	80072a0 <ETH_Delay+0x1c>
}
 80072ac:	bf00      	nop
 80072ae:	bf00      	nop
 80072b0:	3714      	adds	r7, #20
 80072b2:	46bd      	mov	sp, r7
 80072b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b8:	4770      	bx	lr
 80072ba:	bf00      	nop
 80072bc:	10000004 	.word	0x10000004
 80072c0:	10624dd3 	.word	0x10624dd3

080072c4 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b086      	sub	sp, #24
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	60f8      	str	r0, [r7, #12]
 80072cc:	60b9      	str	r1, [r7, #8]
 80072ce:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80072d2:	2301      	movs	r3, #1
 80072d4:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80072d6:	4b23      	ldr	r3, [pc, #140]	; (8007364 <HAL_FLASH_Program+0xa0>)
 80072d8:	7e1b      	ldrb	r3, [r3, #24]
 80072da:	2b01      	cmp	r3, #1
 80072dc:	d101      	bne.n	80072e2 <HAL_FLASH_Program+0x1e>
 80072de:	2302      	movs	r3, #2
 80072e0:	e03b      	b.n	800735a <HAL_FLASH_Program+0x96>
 80072e2:	4b20      	ldr	r3, [pc, #128]	; (8007364 <HAL_FLASH_Program+0xa0>)
 80072e4:	2201      	movs	r2, #1
 80072e6:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80072e8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80072ec:	f000 f87c 	bl	80073e8 <FLASH_WaitForLastOperation>
 80072f0:	4603      	mov	r3, r0
 80072f2:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80072f4:	7dfb      	ldrb	r3, [r7, #23]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d12b      	bne.n	8007352 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d105      	bne.n	800730c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8007300:	783b      	ldrb	r3, [r7, #0]
 8007302:	4619      	mov	r1, r3
 8007304:	68b8      	ldr	r0, [r7, #8]
 8007306:	f000 f927 	bl	8007558 <FLASH_Program_Byte>
 800730a:	e016      	b.n	800733a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	2b01      	cmp	r3, #1
 8007310:	d105      	bne.n	800731e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8007312:	883b      	ldrh	r3, [r7, #0]
 8007314:	4619      	mov	r1, r3
 8007316:	68b8      	ldr	r0, [r7, #8]
 8007318:	f000 f8fa 	bl	8007510 <FLASH_Program_HalfWord>
 800731c:	e00d      	b.n	800733a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	2b02      	cmp	r3, #2
 8007322:	d105      	bne.n	8007330 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	4619      	mov	r1, r3
 8007328:	68b8      	ldr	r0, [r7, #8]
 800732a:	f000 f8cf 	bl	80074cc <FLASH_Program_Word>
 800732e:	e004      	b.n	800733a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8007330:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007334:	68b8      	ldr	r0, [r7, #8]
 8007336:	f000 f897 	bl	8007468 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800733a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800733e:	f000 f853 	bl	80073e8 <FLASH_WaitForLastOperation>
 8007342:	4603      	mov	r3, r0
 8007344:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8007346:	4b08      	ldr	r3, [pc, #32]	; (8007368 <HAL_FLASH_Program+0xa4>)
 8007348:	691b      	ldr	r3, [r3, #16]
 800734a:	4a07      	ldr	r2, [pc, #28]	; (8007368 <HAL_FLASH_Program+0xa4>)
 800734c:	f023 0301 	bic.w	r3, r3, #1
 8007350:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007352:	4b04      	ldr	r3, [pc, #16]	; (8007364 <HAL_FLASH_Program+0xa0>)
 8007354:	2200      	movs	r2, #0
 8007356:	761a      	strb	r2, [r3, #24]
  
  return status;
 8007358:	7dfb      	ldrb	r3, [r7, #23]
}
 800735a:	4618      	mov	r0, r3
 800735c:	3718      	adds	r7, #24
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}
 8007362:	bf00      	nop
 8007364:	20014128 	.word	0x20014128
 8007368:	40023c00 	.word	0x40023c00

0800736c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800736c:	b480      	push	{r7}
 800736e:	b083      	sub	sp, #12
 8007370:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8007372:	2300      	movs	r3, #0
 8007374:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8007376:	4b0b      	ldr	r3, [pc, #44]	; (80073a4 <HAL_FLASH_Unlock+0x38>)
 8007378:	691b      	ldr	r3, [r3, #16]
 800737a:	2b00      	cmp	r3, #0
 800737c:	da0b      	bge.n	8007396 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800737e:	4b09      	ldr	r3, [pc, #36]	; (80073a4 <HAL_FLASH_Unlock+0x38>)
 8007380:	4a09      	ldr	r2, [pc, #36]	; (80073a8 <HAL_FLASH_Unlock+0x3c>)
 8007382:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8007384:	4b07      	ldr	r3, [pc, #28]	; (80073a4 <HAL_FLASH_Unlock+0x38>)
 8007386:	4a09      	ldr	r2, [pc, #36]	; (80073ac <HAL_FLASH_Unlock+0x40>)
 8007388:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800738a:	4b06      	ldr	r3, [pc, #24]	; (80073a4 <HAL_FLASH_Unlock+0x38>)
 800738c:	691b      	ldr	r3, [r3, #16]
 800738e:	2b00      	cmp	r3, #0
 8007390:	da01      	bge.n	8007396 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8007392:	2301      	movs	r3, #1
 8007394:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8007396:	79fb      	ldrb	r3, [r7, #7]
}
 8007398:	4618      	mov	r0, r3
 800739a:	370c      	adds	r7, #12
 800739c:	46bd      	mov	sp, r7
 800739e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a2:	4770      	bx	lr
 80073a4:	40023c00 	.word	0x40023c00
 80073a8:	45670123 	.word	0x45670123
 80073ac:	cdef89ab 	.word	0xcdef89ab

080073b0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80073b0:	b480      	push	{r7}
 80073b2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80073b4:	4b05      	ldr	r3, [pc, #20]	; (80073cc <HAL_FLASH_Lock+0x1c>)
 80073b6:	691b      	ldr	r3, [r3, #16]
 80073b8:	4a04      	ldr	r2, [pc, #16]	; (80073cc <HAL_FLASH_Lock+0x1c>)
 80073ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80073be:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80073c0:	2300      	movs	r3, #0
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr
 80073cc:	40023c00 	.word	0x40023c00

080073d0 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 80073d0:	b480      	push	{r7}
 80073d2:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 80073d4:	4b03      	ldr	r3, [pc, #12]	; (80073e4 <HAL_FLASH_GetError+0x14>)
 80073d6:	69db      	ldr	r3, [r3, #28]
}  
 80073d8:	4618      	mov	r0, r3
 80073da:	46bd      	mov	sp, r7
 80073dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e0:	4770      	bx	lr
 80073e2:	bf00      	nop
 80073e4:	20014128 	.word	0x20014128

080073e8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b084      	sub	sp, #16
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80073f0:	2300      	movs	r3, #0
 80073f2:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80073f4:	4b1a      	ldr	r3, [pc, #104]	; (8007460 <FLASH_WaitForLastOperation+0x78>)
 80073f6:	2200      	movs	r2, #0
 80073f8:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80073fa:	f7fe f891 	bl	8005520 <HAL_GetTick>
 80073fe:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8007400:	e010      	b.n	8007424 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007408:	d00c      	beq.n	8007424 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d007      	beq.n	8007420 <FLASH_WaitForLastOperation+0x38>
 8007410:	f7fe f886 	bl	8005520 <HAL_GetTick>
 8007414:	4602      	mov	r2, r0
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	1ad3      	subs	r3, r2, r3
 800741a:	687a      	ldr	r2, [r7, #4]
 800741c:	429a      	cmp	r2, r3
 800741e:	d201      	bcs.n	8007424 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8007420:	2303      	movs	r3, #3
 8007422:	e019      	b.n	8007458 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8007424:	4b0f      	ldr	r3, [pc, #60]	; (8007464 <FLASH_WaitForLastOperation+0x7c>)
 8007426:	68db      	ldr	r3, [r3, #12]
 8007428:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800742c:	2b00      	cmp	r3, #0
 800742e:	d1e8      	bne.n	8007402 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8007430:	4b0c      	ldr	r3, [pc, #48]	; (8007464 <FLASH_WaitForLastOperation+0x7c>)
 8007432:	68db      	ldr	r3, [r3, #12]
 8007434:	f003 0301 	and.w	r3, r3, #1
 8007438:	2b00      	cmp	r3, #0
 800743a:	d002      	beq.n	8007442 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800743c:	4b09      	ldr	r3, [pc, #36]	; (8007464 <FLASH_WaitForLastOperation+0x7c>)
 800743e:	2201      	movs	r2, #1
 8007440:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8007442:	4b08      	ldr	r3, [pc, #32]	; (8007464 <FLASH_WaitForLastOperation+0x7c>)
 8007444:	68db      	ldr	r3, [r3, #12]
 8007446:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800744a:	2b00      	cmp	r3, #0
 800744c:	d003      	beq.n	8007456 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800744e:	f000 f8a5 	bl	800759c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8007452:	2301      	movs	r3, #1
 8007454:	e000      	b.n	8007458 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8007456:	2300      	movs	r3, #0
  
}  
 8007458:	4618      	mov	r0, r3
 800745a:	3710      	adds	r7, #16
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}
 8007460:	20014128 	.word	0x20014128
 8007464:	40023c00 	.word	0x40023c00

08007468 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8007468:	b480      	push	{r7}
 800746a:	b085      	sub	sp, #20
 800746c:	af00      	add	r7, sp, #0
 800746e:	60f8      	str	r0, [r7, #12]
 8007470:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007474:	4b14      	ldr	r3, [pc, #80]	; (80074c8 <FLASH_Program_DoubleWord+0x60>)
 8007476:	691b      	ldr	r3, [r3, #16]
 8007478:	4a13      	ldr	r2, [pc, #76]	; (80074c8 <FLASH_Program_DoubleWord+0x60>)
 800747a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800747e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8007480:	4b11      	ldr	r3, [pc, #68]	; (80074c8 <FLASH_Program_DoubleWord+0x60>)
 8007482:	691b      	ldr	r3, [r3, #16]
 8007484:	4a10      	ldr	r2, [pc, #64]	; (80074c8 <FLASH_Program_DoubleWord+0x60>)
 8007486:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800748a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800748c:	4b0e      	ldr	r3, [pc, #56]	; (80074c8 <FLASH_Program_DoubleWord+0x60>)
 800748e:	691b      	ldr	r3, [r3, #16]
 8007490:	4a0d      	ldr	r2, [pc, #52]	; (80074c8 <FLASH_Program_DoubleWord+0x60>)
 8007492:	f043 0301 	orr.w	r3, r3, #1
 8007496:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	683a      	ldr	r2, [r7, #0]
 800749c:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800749e:	f3bf 8f6f 	isb	sy
}
 80074a2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80074a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80074a8:	f04f 0200 	mov.w	r2, #0
 80074ac:	f04f 0300 	mov.w	r3, #0
 80074b0:	000a      	movs	r2, r1
 80074b2:	2300      	movs	r3, #0
 80074b4:	68f9      	ldr	r1, [r7, #12]
 80074b6:	3104      	adds	r1, #4
 80074b8:	4613      	mov	r3, r2
 80074ba:	600b      	str	r3, [r1, #0]
}
 80074bc:	bf00      	nop
 80074be:	3714      	adds	r7, #20
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr
 80074c8:	40023c00 	.word	0x40023c00

080074cc <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80074cc:	b480      	push	{r7}
 80074ce:	b083      	sub	sp, #12
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
 80074d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80074d6:	4b0d      	ldr	r3, [pc, #52]	; (800750c <FLASH_Program_Word+0x40>)
 80074d8:	691b      	ldr	r3, [r3, #16]
 80074da:	4a0c      	ldr	r2, [pc, #48]	; (800750c <FLASH_Program_Word+0x40>)
 80074dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074e0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80074e2:	4b0a      	ldr	r3, [pc, #40]	; (800750c <FLASH_Program_Word+0x40>)
 80074e4:	691b      	ldr	r3, [r3, #16]
 80074e6:	4a09      	ldr	r2, [pc, #36]	; (800750c <FLASH_Program_Word+0x40>)
 80074e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80074ec:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80074ee:	4b07      	ldr	r3, [pc, #28]	; (800750c <FLASH_Program_Word+0x40>)
 80074f0:	691b      	ldr	r3, [r3, #16]
 80074f2:	4a06      	ldr	r2, [pc, #24]	; (800750c <FLASH_Program_Word+0x40>)
 80074f4:	f043 0301 	orr.w	r3, r3, #1
 80074f8:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	683a      	ldr	r2, [r7, #0]
 80074fe:	601a      	str	r2, [r3, #0]
}
 8007500:	bf00      	nop
 8007502:	370c      	adds	r7, #12
 8007504:	46bd      	mov	sp, r7
 8007506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750a:	4770      	bx	lr
 800750c:	40023c00 	.word	0x40023c00

08007510 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8007510:	b480      	push	{r7}
 8007512:	b083      	sub	sp, #12
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
 8007518:	460b      	mov	r3, r1
 800751a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800751c:	4b0d      	ldr	r3, [pc, #52]	; (8007554 <FLASH_Program_HalfWord+0x44>)
 800751e:	691b      	ldr	r3, [r3, #16]
 8007520:	4a0c      	ldr	r2, [pc, #48]	; (8007554 <FLASH_Program_HalfWord+0x44>)
 8007522:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007526:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8007528:	4b0a      	ldr	r3, [pc, #40]	; (8007554 <FLASH_Program_HalfWord+0x44>)
 800752a:	691b      	ldr	r3, [r3, #16]
 800752c:	4a09      	ldr	r2, [pc, #36]	; (8007554 <FLASH_Program_HalfWord+0x44>)
 800752e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007532:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8007534:	4b07      	ldr	r3, [pc, #28]	; (8007554 <FLASH_Program_HalfWord+0x44>)
 8007536:	691b      	ldr	r3, [r3, #16]
 8007538:	4a06      	ldr	r2, [pc, #24]	; (8007554 <FLASH_Program_HalfWord+0x44>)
 800753a:	f043 0301 	orr.w	r3, r3, #1
 800753e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	887a      	ldrh	r2, [r7, #2]
 8007544:	801a      	strh	r2, [r3, #0]
}
 8007546:	bf00      	nop
 8007548:	370c      	adds	r7, #12
 800754a:	46bd      	mov	sp, r7
 800754c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007550:	4770      	bx	lr
 8007552:	bf00      	nop
 8007554:	40023c00 	.word	0x40023c00

08007558 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8007558:	b480      	push	{r7}
 800755a:	b083      	sub	sp, #12
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
 8007560:	460b      	mov	r3, r1
 8007562:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007564:	4b0c      	ldr	r3, [pc, #48]	; (8007598 <FLASH_Program_Byte+0x40>)
 8007566:	691b      	ldr	r3, [r3, #16]
 8007568:	4a0b      	ldr	r2, [pc, #44]	; (8007598 <FLASH_Program_Byte+0x40>)
 800756a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800756e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8007570:	4b09      	ldr	r3, [pc, #36]	; (8007598 <FLASH_Program_Byte+0x40>)
 8007572:	4a09      	ldr	r2, [pc, #36]	; (8007598 <FLASH_Program_Byte+0x40>)
 8007574:	691b      	ldr	r3, [r3, #16]
 8007576:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8007578:	4b07      	ldr	r3, [pc, #28]	; (8007598 <FLASH_Program_Byte+0x40>)
 800757a:	691b      	ldr	r3, [r3, #16]
 800757c:	4a06      	ldr	r2, [pc, #24]	; (8007598 <FLASH_Program_Byte+0x40>)
 800757e:	f043 0301 	orr.w	r3, r3, #1
 8007582:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	78fa      	ldrb	r2, [r7, #3]
 8007588:	701a      	strb	r2, [r3, #0]
}
 800758a:	bf00      	nop
 800758c:	370c      	adds	r7, #12
 800758e:	46bd      	mov	sp, r7
 8007590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007594:	4770      	bx	lr
 8007596:	bf00      	nop
 8007598:	40023c00 	.word	0x40023c00

0800759c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800759c:	b480      	push	{r7}
 800759e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80075a0:	4b27      	ldr	r3, [pc, #156]	; (8007640 <FLASH_SetErrorCode+0xa4>)
 80075a2:	68db      	ldr	r3, [r3, #12]
 80075a4:	f003 0310 	and.w	r3, r3, #16
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d008      	beq.n	80075be <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80075ac:	4b25      	ldr	r3, [pc, #148]	; (8007644 <FLASH_SetErrorCode+0xa8>)
 80075ae:	69db      	ldr	r3, [r3, #28]
 80075b0:	f043 0310 	orr.w	r3, r3, #16
 80075b4:	4a23      	ldr	r2, [pc, #140]	; (8007644 <FLASH_SetErrorCode+0xa8>)
 80075b6:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80075b8:	4b21      	ldr	r3, [pc, #132]	; (8007640 <FLASH_SetErrorCode+0xa4>)
 80075ba:	2210      	movs	r2, #16
 80075bc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80075be:	4b20      	ldr	r3, [pc, #128]	; (8007640 <FLASH_SetErrorCode+0xa4>)
 80075c0:	68db      	ldr	r3, [r3, #12]
 80075c2:	f003 0320 	and.w	r3, r3, #32
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d008      	beq.n	80075dc <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80075ca:	4b1e      	ldr	r3, [pc, #120]	; (8007644 <FLASH_SetErrorCode+0xa8>)
 80075cc:	69db      	ldr	r3, [r3, #28]
 80075ce:	f043 0308 	orr.w	r3, r3, #8
 80075d2:	4a1c      	ldr	r2, [pc, #112]	; (8007644 <FLASH_SetErrorCode+0xa8>)
 80075d4:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80075d6:	4b1a      	ldr	r3, [pc, #104]	; (8007640 <FLASH_SetErrorCode+0xa4>)
 80075d8:	2220      	movs	r2, #32
 80075da:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80075dc:	4b18      	ldr	r3, [pc, #96]	; (8007640 <FLASH_SetErrorCode+0xa4>)
 80075de:	68db      	ldr	r3, [r3, #12]
 80075e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d008      	beq.n	80075fa <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80075e8:	4b16      	ldr	r3, [pc, #88]	; (8007644 <FLASH_SetErrorCode+0xa8>)
 80075ea:	69db      	ldr	r3, [r3, #28]
 80075ec:	f043 0304 	orr.w	r3, r3, #4
 80075f0:	4a14      	ldr	r2, [pc, #80]	; (8007644 <FLASH_SetErrorCode+0xa8>)
 80075f2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80075f4:	4b12      	ldr	r3, [pc, #72]	; (8007640 <FLASH_SetErrorCode+0xa4>)
 80075f6:	2240      	movs	r2, #64	; 0x40
 80075f8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80075fa:	4b11      	ldr	r3, [pc, #68]	; (8007640 <FLASH_SetErrorCode+0xa4>)
 80075fc:	68db      	ldr	r3, [r3, #12]
 80075fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007602:	2b00      	cmp	r3, #0
 8007604:	d008      	beq.n	8007618 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8007606:	4b0f      	ldr	r3, [pc, #60]	; (8007644 <FLASH_SetErrorCode+0xa8>)
 8007608:	69db      	ldr	r3, [r3, #28]
 800760a:	f043 0302 	orr.w	r3, r3, #2
 800760e:	4a0d      	ldr	r2, [pc, #52]	; (8007644 <FLASH_SetErrorCode+0xa8>)
 8007610:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8007612:	4b0b      	ldr	r3, [pc, #44]	; (8007640 <FLASH_SetErrorCode+0xa4>)
 8007614:	2280      	movs	r2, #128	; 0x80
 8007616:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8007618:	4b09      	ldr	r3, [pc, #36]	; (8007640 <FLASH_SetErrorCode+0xa4>)
 800761a:	68db      	ldr	r3, [r3, #12]
 800761c:	f003 0302 	and.w	r3, r3, #2
 8007620:	2b00      	cmp	r3, #0
 8007622:	d008      	beq.n	8007636 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8007624:	4b07      	ldr	r3, [pc, #28]	; (8007644 <FLASH_SetErrorCode+0xa8>)
 8007626:	69db      	ldr	r3, [r3, #28]
 8007628:	f043 0320 	orr.w	r3, r3, #32
 800762c:	4a05      	ldr	r2, [pc, #20]	; (8007644 <FLASH_SetErrorCode+0xa8>)
 800762e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8007630:	4b03      	ldr	r3, [pc, #12]	; (8007640 <FLASH_SetErrorCode+0xa4>)
 8007632:	2202      	movs	r2, #2
 8007634:	60da      	str	r2, [r3, #12]
  }
}
 8007636:	bf00      	nop
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr
 8007640:	40023c00 	.word	0x40023c00
 8007644:	20014128 	.word	0x20014128

08007648 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b084      	sub	sp, #16
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
 8007650:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007652:	2301      	movs	r3, #1
 8007654:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8007656:	2300      	movs	r3, #0
 8007658:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800765a:	4b31      	ldr	r3, [pc, #196]	; (8007720 <HAL_FLASHEx_Erase+0xd8>)
 800765c:	7e1b      	ldrb	r3, [r3, #24]
 800765e:	2b01      	cmp	r3, #1
 8007660:	d101      	bne.n	8007666 <HAL_FLASHEx_Erase+0x1e>
 8007662:	2302      	movs	r3, #2
 8007664:	e058      	b.n	8007718 <HAL_FLASHEx_Erase+0xd0>
 8007666:	4b2e      	ldr	r3, [pc, #184]	; (8007720 <HAL_FLASHEx_Erase+0xd8>)
 8007668:	2201      	movs	r2, #1
 800766a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800766c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007670:	f7ff feba 	bl	80073e8 <FLASH_WaitForLastOperation>
 8007674:	4603      	mov	r3, r0
 8007676:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8007678:	7bfb      	ldrb	r3, [r7, #15]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d148      	bne.n	8007710 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	f04f 32ff 	mov.w	r2, #4294967295
 8007684:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	2b01      	cmp	r3, #1
 800768c:	d115      	bne.n	80076ba <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	691b      	ldr	r3, [r3, #16]
 8007692:	b2da      	uxtb	r2, r3
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	4619      	mov	r1, r3
 800769a:	4610      	mov	r0, r2
 800769c:	f000 f844 	bl	8007728 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80076a0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80076a4:	f7ff fea0 	bl	80073e8 <FLASH_WaitForLastOperation>
 80076a8:	4603      	mov	r3, r0
 80076aa:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80076ac:	4b1d      	ldr	r3, [pc, #116]	; (8007724 <HAL_FLASHEx_Erase+0xdc>)
 80076ae:	691b      	ldr	r3, [r3, #16]
 80076b0:	4a1c      	ldr	r2, [pc, #112]	; (8007724 <HAL_FLASHEx_Erase+0xdc>)
 80076b2:	f023 0304 	bic.w	r3, r3, #4
 80076b6:	6113      	str	r3, [r2, #16]
 80076b8:	e028      	b.n	800770c <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	689b      	ldr	r3, [r3, #8]
 80076be:	60bb      	str	r3, [r7, #8]
 80076c0:	e01c      	b.n	80076fc <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	691b      	ldr	r3, [r3, #16]
 80076c6:	b2db      	uxtb	r3, r3
 80076c8:	4619      	mov	r1, r3
 80076ca:	68b8      	ldr	r0, [r7, #8]
 80076cc:	f000 f850 	bl	8007770 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80076d0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80076d4:	f7ff fe88 	bl	80073e8 <FLASH_WaitForLastOperation>
 80076d8:	4603      	mov	r3, r0
 80076da:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80076dc:	4b11      	ldr	r3, [pc, #68]	; (8007724 <HAL_FLASHEx_Erase+0xdc>)
 80076de:	691b      	ldr	r3, [r3, #16]
 80076e0:	4a10      	ldr	r2, [pc, #64]	; (8007724 <HAL_FLASHEx_Erase+0xdc>)
 80076e2:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80076e6:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 80076e8:	7bfb      	ldrb	r3, [r7, #15]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d003      	beq.n	80076f6 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	68ba      	ldr	r2, [r7, #8]
 80076f2:	601a      	str	r2, [r3, #0]
          break;
 80076f4:	e00a      	b.n	800770c <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	3301      	adds	r3, #1
 80076fa:	60bb      	str	r3, [r7, #8]
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	68da      	ldr	r2, [r3, #12]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	689b      	ldr	r3, [r3, #8]
 8007704:	4413      	add	r3, r2
 8007706:	68ba      	ldr	r2, [r7, #8]
 8007708:	429a      	cmp	r2, r3
 800770a:	d3da      	bcc.n	80076c2 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800770c:	f000 f878 	bl	8007800 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007710:	4b03      	ldr	r3, [pc, #12]	; (8007720 <HAL_FLASHEx_Erase+0xd8>)
 8007712:	2200      	movs	r2, #0
 8007714:	761a      	strb	r2, [r3, #24]

  return status;
 8007716:	7bfb      	ldrb	r3, [r7, #15]
}
 8007718:	4618      	mov	r0, r3
 800771a:	3710      	adds	r7, #16
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}
 8007720:	20014128 	.word	0x20014128
 8007724:	40023c00 	.word	0x40023c00

08007728 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8007728:	b480      	push	{r7}
 800772a:	b083      	sub	sp, #12
 800772c:	af00      	add	r7, sp, #0
 800772e:	4603      	mov	r3, r0
 8007730:	6039      	str	r1, [r7, #0]
 8007732:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007734:	4b0d      	ldr	r3, [pc, #52]	; (800776c <FLASH_MassErase+0x44>)
 8007736:	691b      	ldr	r3, [r3, #16]
 8007738:	4a0c      	ldr	r2, [pc, #48]	; (800776c <FLASH_MassErase+0x44>)
 800773a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800773e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8007740:	4b0a      	ldr	r3, [pc, #40]	; (800776c <FLASH_MassErase+0x44>)
 8007742:	691b      	ldr	r3, [r3, #16]
 8007744:	4a09      	ldr	r2, [pc, #36]	; (800776c <FLASH_MassErase+0x44>)
 8007746:	f043 0304 	orr.w	r3, r3, #4
 800774a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 800774c:	4b07      	ldr	r3, [pc, #28]	; (800776c <FLASH_MassErase+0x44>)
 800774e:	691a      	ldr	r2, [r3, #16]
 8007750:	79fb      	ldrb	r3, [r7, #7]
 8007752:	021b      	lsls	r3, r3, #8
 8007754:	4313      	orrs	r3, r2
 8007756:	4a05      	ldr	r2, [pc, #20]	; (800776c <FLASH_MassErase+0x44>)
 8007758:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800775c:	6113      	str	r3, [r2, #16]
}
 800775e:	bf00      	nop
 8007760:	370c      	adds	r7, #12
 8007762:	46bd      	mov	sp, r7
 8007764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007768:	4770      	bx	lr
 800776a:	bf00      	nop
 800776c:	40023c00 	.word	0x40023c00

08007770 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8007770:	b480      	push	{r7}
 8007772:	b085      	sub	sp, #20
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
 8007778:	460b      	mov	r3, r1
 800777a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800777c:	2300      	movs	r3, #0
 800777e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8007780:	78fb      	ldrb	r3, [r7, #3]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d102      	bne.n	800778c <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8007786:	2300      	movs	r3, #0
 8007788:	60fb      	str	r3, [r7, #12]
 800778a:	e010      	b.n	80077ae <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800778c:	78fb      	ldrb	r3, [r7, #3]
 800778e:	2b01      	cmp	r3, #1
 8007790:	d103      	bne.n	800779a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8007792:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007796:	60fb      	str	r3, [r7, #12]
 8007798:	e009      	b.n	80077ae <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800779a:	78fb      	ldrb	r3, [r7, #3]
 800779c:	2b02      	cmp	r3, #2
 800779e:	d103      	bne.n	80077a8 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80077a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80077a4:	60fb      	str	r3, [r7, #12]
 80077a6:	e002      	b.n	80077ae <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80077a8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80077ac:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80077ae:	4b13      	ldr	r3, [pc, #76]	; (80077fc <FLASH_Erase_Sector+0x8c>)
 80077b0:	691b      	ldr	r3, [r3, #16]
 80077b2:	4a12      	ldr	r2, [pc, #72]	; (80077fc <FLASH_Erase_Sector+0x8c>)
 80077b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077b8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80077ba:	4b10      	ldr	r3, [pc, #64]	; (80077fc <FLASH_Erase_Sector+0x8c>)
 80077bc:	691a      	ldr	r2, [r3, #16]
 80077be:	490f      	ldr	r1, [pc, #60]	; (80077fc <FLASH_Erase_Sector+0x8c>)
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	4313      	orrs	r3, r2
 80077c4:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80077c6:	4b0d      	ldr	r3, [pc, #52]	; (80077fc <FLASH_Erase_Sector+0x8c>)
 80077c8:	691b      	ldr	r3, [r3, #16]
 80077ca:	4a0c      	ldr	r2, [pc, #48]	; (80077fc <FLASH_Erase_Sector+0x8c>)
 80077cc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80077d0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80077d2:	4b0a      	ldr	r3, [pc, #40]	; (80077fc <FLASH_Erase_Sector+0x8c>)
 80077d4:	691a      	ldr	r2, [r3, #16]
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	00db      	lsls	r3, r3, #3
 80077da:	4313      	orrs	r3, r2
 80077dc:	4a07      	ldr	r2, [pc, #28]	; (80077fc <FLASH_Erase_Sector+0x8c>)
 80077de:	f043 0302 	orr.w	r3, r3, #2
 80077e2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80077e4:	4b05      	ldr	r3, [pc, #20]	; (80077fc <FLASH_Erase_Sector+0x8c>)
 80077e6:	691b      	ldr	r3, [r3, #16]
 80077e8:	4a04      	ldr	r2, [pc, #16]	; (80077fc <FLASH_Erase_Sector+0x8c>)
 80077ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077ee:	6113      	str	r3, [r2, #16]
}
 80077f0:	bf00      	nop
 80077f2:	3714      	adds	r7, #20
 80077f4:	46bd      	mov	sp, r7
 80077f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fa:	4770      	bx	lr
 80077fc:	40023c00 	.word	0x40023c00

08007800 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8007800:	b480      	push	{r7}
 8007802:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8007804:	4b20      	ldr	r3, [pc, #128]	; (8007888 <FLASH_FlushCaches+0x88>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800780c:	2b00      	cmp	r3, #0
 800780e:	d017      	beq.n	8007840 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8007810:	4b1d      	ldr	r3, [pc, #116]	; (8007888 <FLASH_FlushCaches+0x88>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	4a1c      	ldr	r2, [pc, #112]	; (8007888 <FLASH_FlushCaches+0x88>)
 8007816:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800781a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800781c:	4b1a      	ldr	r3, [pc, #104]	; (8007888 <FLASH_FlushCaches+0x88>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4a19      	ldr	r2, [pc, #100]	; (8007888 <FLASH_FlushCaches+0x88>)
 8007822:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007826:	6013      	str	r3, [r2, #0]
 8007828:	4b17      	ldr	r3, [pc, #92]	; (8007888 <FLASH_FlushCaches+0x88>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a16      	ldr	r2, [pc, #88]	; (8007888 <FLASH_FlushCaches+0x88>)
 800782e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007832:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007834:	4b14      	ldr	r3, [pc, #80]	; (8007888 <FLASH_FlushCaches+0x88>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	4a13      	ldr	r2, [pc, #76]	; (8007888 <FLASH_FlushCaches+0x88>)
 800783a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800783e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8007840:	4b11      	ldr	r3, [pc, #68]	; (8007888 <FLASH_FlushCaches+0x88>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007848:	2b00      	cmp	r3, #0
 800784a:	d017      	beq.n	800787c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800784c:	4b0e      	ldr	r3, [pc, #56]	; (8007888 <FLASH_FlushCaches+0x88>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a0d      	ldr	r2, [pc, #52]	; (8007888 <FLASH_FlushCaches+0x88>)
 8007852:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007856:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8007858:	4b0b      	ldr	r3, [pc, #44]	; (8007888 <FLASH_FlushCaches+0x88>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4a0a      	ldr	r2, [pc, #40]	; (8007888 <FLASH_FlushCaches+0x88>)
 800785e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007862:	6013      	str	r3, [r2, #0]
 8007864:	4b08      	ldr	r3, [pc, #32]	; (8007888 <FLASH_FlushCaches+0x88>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a07      	ldr	r2, [pc, #28]	; (8007888 <FLASH_FlushCaches+0x88>)
 800786a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800786e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8007870:	4b05      	ldr	r3, [pc, #20]	; (8007888 <FLASH_FlushCaches+0x88>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4a04      	ldr	r2, [pc, #16]	; (8007888 <FLASH_FlushCaches+0x88>)
 8007876:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800787a:	6013      	str	r3, [r2, #0]
  }
}
 800787c:	bf00      	nop
 800787e:	46bd      	mov	sp, r7
 8007880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007884:	4770      	bx	lr
 8007886:	bf00      	nop
 8007888:	40023c00 	.word	0x40023c00

0800788c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800788c:	b480      	push	{r7}
 800788e:	b089      	sub	sp, #36	; 0x24
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
 8007894:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007896:	2300      	movs	r3, #0
 8007898:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800789a:	2300      	movs	r3, #0
 800789c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800789e:	2300      	movs	r3, #0
 80078a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80078a2:	2300      	movs	r3, #0
 80078a4:	61fb      	str	r3, [r7, #28]
 80078a6:	e16b      	b.n	8007b80 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80078a8:	2201      	movs	r2, #1
 80078aa:	69fb      	ldr	r3, [r7, #28]
 80078ac:	fa02 f303 	lsl.w	r3, r2, r3
 80078b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	697a      	ldr	r2, [r7, #20]
 80078b8:	4013      	ands	r3, r2
 80078ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80078bc:	693a      	ldr	r2, [r7, #16]
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	429a      	cmp	r2, r3
 80078c2:	f040 815a 	bne.w	8007b7a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	685b      	ldr	r3, [r3, #4]
 80078ca:	f003 0303 	and.w	r3, r3, #3
 80078ce:	2b01      	cmp	r3, #1
 80078d0:	d005      	beq.n	80078de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	685b      	ldr	r3, [r3, #4]
 80078d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80078da:	2b02      	cmp	r3, #2
 80078dc:	d130      	bne.n	8007940 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	689b      	ldr	r3, [r3, #8]
 80078e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80078e4:	69fb      	ldr	r3, [r7, #28]
 80078e6:	005b      	lsls	r3, r3, #1
 80078e8:	2203      	movs	r2, #3
 80078ea:	fa02 f303 	lsl.w	r3, r2, r3
 80078ee:	43db      	mvns	r3, r3
 80078f0:	69ba      	ldr	r2, [r7, #24]
 80078f2:	4013      	ands	r3, r2
 80078f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	68da      	ldr	r2, [r3, #12]
 80078fa:	69fb      	ldr	r3, [r7, #28]
 80078fc:	005b      	lsls	r3, r3, #1
 80078fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007902:	69ba      	ldr	r2, [r7, #24]
 8007904:	4313      	orrs	r3, r2
 8007906:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	69ba      	ldr	r2, [r7, #24]
 800790c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	685b      	ldr	r3, [r3, #4]
 8007912:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007914:	2201      	movs	r2, #1
 8007916:	69fb      	ldr	r3, [r7, #28]
 8007918:	fa02 f303 	lsl.w	r3, r2, r3
 800791c:	43db      	mvns	r3, r3
 800791e:	69ba      	ldr	r2, [r7, #24]
 8007920:	4013      	ands	r3, r2
 8007922:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	091b      	lsrs	r3, r3, #4
 800792a:	f003 0201 	and.w	r2, r3, #1
 800792e:	69fb      	ldr	r3, [r7, #28]
 8007930:	fa02 f303 	lsl.w	r3, r2, r3
 8007934:	69ba      	ldr	r2, [r7, #24]
 8007936:	4313      	orrs	r3, r2
 8007938:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	69ba      	ldr	r2, [r7, #24]
 800793e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	f003 0303 	and.w	r3, r3, #3
 8007948:	2b03      	cmp	r3, #3
 800794a:	d017      	beq.n	800797c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	68db      	ldr	r3, [r3, #12]
 8007950:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007952:	69fb      	ldr	r3, [r7, #28]
 8007954:	005b      	lsls	r3, r3, #1
 8007956:	2203      	movs	r2, #3
 8007958:	fa02 f303 	lsl.w	r3, r2, r3
 800795c:	43db      	mvns	r3, r3
 800795e:	69ba      	ldr	r2, [r7, #24]
 8007960:	4013      	ands	r3, r2
 8007962:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	689a      	ldr	r2, [r3, #8]
 8007968:	69fb      	ldr	r3, [r7, #28]
 800796a:	005b      	lsls	r3, r3, #1
 800796c:	fa02 f303 	lsl.w	r3, r2, r3
 8007970:	69ba      	ldr	r2, [r7, #24]
 8007972:	4313      	orrs	r3, r2
 8007974:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	69ba      	ldr	r2, [r7, #24]
 800797a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	f003 0303 	and.w	r3, r3, #3
 8007984:	2b02      	cmp	r3, #2
 8007986:	d123      	bne.n	80079d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007988:	69fb      	ldr	r3, [r7, #28]
 800798a:	08da      	lsrs	r2, r3, #3
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	3208      	adds	r2, #8
 8007990:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007994:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007996:	69fb      	ldr	r3, [r7, #28]
 8007998:	f003 0307 	and.w	r3, r3, #7
 800799c:	009b      	lsls	r3, r3, #2
 800799e:	220f      	movs	r2, #15
 80079a0:	fa02 f303 	lsl.w	r3, r2, r3
 80079a4:	43db      	mvns	r3, r3
 80079a6:	69ba      	ldr	r2, [r7, #24]
 80079a8:	4013      	ands	r3, r2
 80079aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	691a      	ldr	r2, [r3, #16]
 80079b0:	69fb      	ldr	r3, [r7, #28]
 80079b2:	f003 0307 	and.w	r3, r3, #7
 80079b6:	009b      	lsls	r3, r3, #2
 80079b8:	fa02 f303 	lsl.w	r3, r2, r3
 80079bc:	69ba      	ldr	r2, [r7, #24]
 80079be:	4313      	orrs	r3, r2
 80079c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80079c2:	69fb      	ldr	r3, [r7, #28]
 80079c4:	08da      	lsrs	r2, r3, #3
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	3208      	adds	r2, #8
 80079ca:	69b9      	ldr	r1, [r7, #24]
 80079cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80079d6:	69fb      	ldr	r3, [r7, #28]
 80079d8:	005b      	lsls	r3, r3, #1
 80079da:	2203      	movs	r2, #3
 80079dc:	fa02 f303 	lsl.w	r3, r2, r3
 80079e0:	43db      	mvns	r3, r3
 80079e2:	69ba      	ldr	r2, [r7, #24]
 80079e4:	4013      	ands	r3, r2
 80079e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	685b      	ldr	r3, [r3, #4]
 80079ec:	f003 0203 	and.w	r2, r3, #3
 80079f0:	69fb      	ldr	r3, [r7, #28]
 80079f2:	005b      	lsls	r3, r3, #1
 80079f4:	fa02 f303 	lsl.w	r3, r2, r3
 80079f8:	69ba      	ldr	r2, [r7, #24]
 80079fa:	4313      	orrs	r3, r2
 80079fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	69ba      	ldr	r2, [r7, #24]
 8007a02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	685b      	ldr	r3, [r3, #4]
 8007a08:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	f000 80b4 	beq.w	8007b7a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007a12:	2300      	movs	r3, #0
 8007a14:	60fb      	str	r3, [r7, #12]
 8007a16:	4b60      	ldr	r3, [pc, #384]	; (8007b98 <HAL_GPIO_Init+0x30c>)
 8007a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a1a:	4a5f      	ldr	r2, [pc, #380]	; (8007b98 <HAL_GPIO_Init+0x30c>)
 8007a1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007a20:	6453      	str	r3, [r2, #68]	; 0x44
 8007a22:	4b5d      	ldr	r3, [pc, #372]	; (8007b98 <HAL_GPIO_Init+0x30c>)
 8007a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a2a:	60fb      	str	r3, [r7, #12]
 8007a2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007a2e:	4a5b      	ldr	r2, [pc, #364]	; (8007b9c <HAL_GPIO_Init+0x310>)
 8007a30:	69fb      	ldr	r3, [r7, #28]
 8007a32:	089b      	lsrs	r3, r3, #2
 8007a34:	3302      	adds	r3, #2
 8007a36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007a3c:	69fb      	ldr	r3, [r7, #28]
 8007a3e:	f003 0303 	and.w	r3, r3, #3
 8007a42:	009b      	lsls	r3, r3, #2
 8007a44:	220f      	movs	r2, #15
 8007a46:	fa02 f303 	lsl.w	r3, r2, r3
 8007a4a:	43db      	mvns	r3, r3
 8007a4c:	69ba      	ldr	r2, [r7, #24]
 8007a4e:	4013      	ands	r3, r2
 8007a50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	4a52      	ldr	r2, [pc, #328]	; (8007ba0 <HAL_GPIO_Init+0x314>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d02b      	beq.n	8007ab2 <HAL_GPIO_Init+0x226>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	4a51      	ldr	r2, [pc, #324]	; (8007ba4 <HAL_GPIO_Init+0x318>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d025      	beq.n	8007aae <HAL_GPIO_Init+0x222>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	4a50      	ldr	r2, [pc, #320]	; (8007ba8 <HAL_GPIO_Init+0x31c>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d01f      	beq.n	8007aaa <HAL_GPIO_Init+0x21e>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	4a4f      	ldr	r2, [pc, #316]	; (8007bac <HAL_GPIO_Init+0x320>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d019      	beq.n	8007aa6 <HAL_GPIO_Init+0x21a>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	4a4e      	ldr	r2, [pc, #312]	; (8007bb0 <HAL_GPIO_Init+0x324>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d013      	beq.n	8007aa2 <HAL_GPIO_Init+0x216>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	4a4d      	ldr	r2, [pc, #308]	; (8007bb4 <HAL_GPIO_Init+0x328>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d00d      	beq.n	8007a9e <HAL_GPIO_Init+0x212>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	4a4c      	ldr	r2, [pc, #304]	; (8007bb8 <HAL_GPIO_Init+0x32c>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d007      	beq.n	8007a9a <HAL_GPIO_Init+0x20e>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	4a4b      	ldr	r2, [pc, #300]	; (8007bbc <HAL_GPIO_Init+0x330>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d101      	bne.n	8007a96 <HAL_GPIO_Init+0x20a>
 8007a92:	2307      	movs	r3, #7
 8007a94:	e00e      	b.n	8007ab4 <HAL_GPIO_Init+0x228>
 8007a96:	2308      	movs	r3, #8
 8007a98:	e00c      	b.n	8007ab4 <HAL_GPIO_Init+0x228>
 8007a9a:	2306      	movs	r3, #6
 8007a9c:	e00a      	b.n	8007ab4 <HAL_GPIO_Init+0x228>
 8007a9e:	2305      	movs	r3, #5
 8007aa0:	e008      	b.n	8007ab4 <HAL_GPIO_Init+0x228>
 8007aa2:	2304      	movs	r3, #4
 8007aa4:	e006      	b.n	8007ab4 <HAL_GPIO_Init+0x228>
 8007aa6:	2303      	movs	r3, #3
 8007aa8:	e004      	b.n	8007ab4 <HAL_GPIO_Init+0x228>
 8007aaa:	2302      	movs	r3, #2
 8007aac:	e002      	b.n	8007ab4 <HAL_GPIO_Init+0x228>
 8007aae:	2301      	movs	r3, #1
 8007ab0:	e000      	b.n	8007ab4 <HAL_GPIO_Init+0x228>
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	69fa      	ldr	r2, [r7, #28]
 8007ab6:	f002 0203 	and.w	r2, r2, #3
 8007aba:	0092      	lsls	r2, r2, #2
 8007abc:	4093      	lsls	r3, r2
 8007abe:	69ba      	ldr	r2, [r7, #24]
 8007ac0:	4313      	orrs	r3, r2
 8007ac2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007ac4:	4935      	ldr	r1, [pc, #212]	; (8007b9c <HAL_GPIO_Init+0x310>)
 8007ac6:	69fb      	ldr	r3, [r7, #28]
 8007ac8:	089b      	lsrs	r3, r3, #2
 8007aca:	3302      	adds	r3, #2
 8007acc:	69ba      	ldr	r2, [r7, #24]
 8007ace:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007ad2:	4b3b      	ldr	r3, [pc, #236]	; (8007bc0 <HAL_GPIO_Init+0x334>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007ad8:	693b      	ldr	r3, [r7, #16]
 8007ada:	43db      	mvns	r3, r3
 8007adc:	69ba      	ldr	r2, [r7, #24]
 8007ade:	4013      	ands	r3, r2
 8007ae0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	685b      	ldr	r3, [r3, #4]
 8007ae6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d003      	beq.n	8007af6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8007aee:	69ba      	ldr	r2, [r7, #24]
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	4313      	orrs	r3, r2
 8007af4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007af6:	4a32      	ldr	r2, [pc, #200]	; (8007bc0 <HAL_GPIO_Init+0x334>)
 8007af8:	69bb      	ldr	r3, [r7, #24]
 8007afa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007afc:	4b30      	ldr	r3, [pc, #192]	; (8007bc0 <HAL_GPIO_Init+0x334>)
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	43db      	mvns	r3, r3
 8007b06:	69ba      	ldr	r2, [r7, #24]
 8007b08:	4013      	ands	r3, r2
 8007b0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	685b      	ldr	r3, [r3, #4]
 8007b10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d003      	beq.n	8007b20 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8007b18:	69ba      	ldr	r2, [r7, #24]
 8007b1a:	693b      	ldr	r3, [r7, #16]
 8007b1c:	4313      	orrs	r3, r2
 8007b1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007b20:	4a27      	ldr	r2, [pc, #156]	; (8007bc0 <HAL_GPIO_Init+0x334>)
 8007b22:	69bb      	ldr	r3, [r7, #24]
 8007b24:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007b26:	4b26      	ldr	r3, [pc, #152]	; (8007bc0 <HAL_GPIO_Init+0x334>)
 8007b28:	689b      	ldr	r3, [r3, #8]
 8007b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	43db      	mvns	r3, r3
 8007b30:	69ba      	ldr	r2, [r7, #24]
 8007b32:	4013      	ands	r3, r2
 8007b34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	685b      	ldr	r3, [r3, #4]
 8007b3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d003      	beq.n	8007b4a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8007b42:	69ba      	ldr	r2, [r7, #24]
 8007b44:	693b      	ldr	r3, [r7, #16]
 8007b46:	4313      	orrs	r3, r2
 8007b48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007b4a:	4a1d      	ldr	r2, [pc, #116]	; (8007bc0 <HAL_GPIO_Init+0x334>)
 8007b4c:	69bb      	ldr	r3, [r7, #24]
 8007b4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007b50:	4b1b      	ldr	r3, [pc, #108]	; (8007bc0 <HAL_GPIO_Init+0x334>)
 8007b52:	68db      	ldr	r3, [r3, #12]
 8007b54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	43db      	mvns	r3, r3
 8007b5a:	69ba      	ldr	r2, [r7, #24]
 8007b5c:	4013      	ands	r3, r2
 8007b5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	685b      	ldr	r3, [r3, #4]
 8007b64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d003      	beq.n	8007b74 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8007b6c:	69ba      	ldr	r2, [r7, #24]
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	4313      	orrs	r3, r2
 8007b72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007b74:	4a12      	ldr	r2, [pc, #72]	; (8007bc0 <HAL_GPIO_Init+0x334>)
 8007b76:	69bb      	ldr	r3, [r7, #24]
 8007b78:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007b7a:	69fb      	ldr	r3, [r7, #28]
 8007b7c:	3301      	adds	r3, #1
 8007b7e:	61fb      	str	r3, [r7, #28]
 8007b80:	69fb      	ldr	r3, [r7, #28]
 8007b82:	2b0f      	cmp	r3, #15
 8007b84:	f67f ae90 	bls.w	80078a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007b88:	bf00      	nop
 8007b8a:	bf00      	nop
 8007b8c:	3724      	adds	r7, #36	; 0x24
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b94:	4770      	bx	lr
 8007b96:	bf00      	nop
 8007b98:	40023800 	.word	0x40023800
 8007b9c:	40013800 	.word	0x40013800
 8007ba0:	40020000 	.word	0x40020000
 8007ba4:	40020400 	.word	0x40020400
 8007ba8:	40020800 	.word	0x40020800
 8007bac:	40020c00 	.word	0x40020c00
 8007bb0:	40021000 	.word	0x40021000
 8007bb4:	40021400 	.word	0x40021400
 8007bb8:	40021800 	.word	0x40021800
 8007bbc:	40021c00 	.word	0x40021c00
 8007bc0:	40013c00 	.word	0x40013c00

08007bc4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b085      	sub	sp, #20
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	460b      	mov	r3, r1
 8007bce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	691a      	ldr	r2, [r3, #16]
 8007bd4:	887b      	ldrh	r3, [r7, #2]
 8007bd6:	4013      	ands	r3, r2
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d002      	beq.n	8007be2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007bdc:	2301      	movs	r3, #1
 8007bde:	73fb      	strb	r3, [r7, #15]
 8007be0:	e001      	b.n	8007be6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007be2:	2300      	movs	r3, #0
 8007be4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	3714      	adds	r7, #20
 8007bec:	46bd      	mov	sp, r7
 8007bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf2:	4770      	bx	lr

08007bf4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b083      	sub	sp, #12
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
 8007bfc:	460b      	mov	r3, r1
 8007bfe:	807b      	strh	r3, [r7, #2]
 8007c00:	4613      	mov	r3, r2
 8007c02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007c04:	787b      	ldrb	r3, [r7, #1]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d003      	beq.n	8007c12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007c0a:	887a      	ldrh	r2, [r7, #2]
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007c10:	e003      	b.n	8007c1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007c12:	887b      	ldrh	r3, [r7, #2]
 8007c14:	041a      	lsls	r2, r3, #16
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	619a      	str	r2, [r3, #24]
}
 8007c1a:	bf00      	nop
 8007c1c:	370c      	adds	r7, #12
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c24:	4770      	bx	lr
	...

08007c28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b084      	sub	sp, #16
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d101      	bne.n	8007c3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007c36:	2301      	movs	r3, #1
 8007c38:	e12b      	b.n	8007e92 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c40:	b2db      	uxtb	r3, r3
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d106      	bne.n	8007c54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f7fc fc1c 	bl	800448c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2224      	movs	r2, #36	; 0x24
 8007c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	681a      	ldr	r2, [r3, #0]
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f022 0201 	bic.w	r2, r2, #1
 8007c6a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	681a      	ldr	r2, [r3, #0]
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007c7a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	681a      	ldr	r2, [r3, #0]
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007c8a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007c8c:	f001 f888 	bl	8008da0 <HAL_RCC_GetPCLK1Freq>
 8007c90:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	685b      	ldr	r3, [r3, #4]
 8007c96:	4a81      	ldr	r2, [pc, #516]	; (8007e9c <HAL_I2C_Init+0x274>)
 8007c98:	4293      	cmp	r3, r2
 8007c9a:	d807      	bhi.n	8007cac <HAL_I2C_Init+0x84>
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	4a80      	ldr	r2, [pc, #512]	; (8007ea0 <HAL_I2C_Init+0x278>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	bf94      	ite	ls
 8007ca4:	2301      	movls	r3, #1
 8007ca6:	2300      	movhi	r3, #0
 8007ca8:	b2db      	uxtb	r3, r3
 8007caa:	e006      	b.n	8007cba <HAL_I2C_Init+0x92>
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	4a7d      	ldr	r2, [pc, #500]	; (8007ea4 <HAL_I2C_Init+0x27c>)
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	bf94      	ite	ls
 8007cb4:	2301      	movls	r3, #1
 8007cb6:	2300      	movhi	r3, #0
 8007cb8:	b2db      	uxtb	r3, r3
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d001      	beq.n	8007cc2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	e0e7      	b.n	8007e92 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	4a78      	ldr	r2, [pc, #480]	; (8007ea8 <HAL_I2C_Init+0x280>)
 8007cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8007cca:	0c9b      	lsrs	r3, r3, #18
 8007ccc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	685b      	ldr	r3, [r3, #4]
 8007cd4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	68ba      	ldr	r2, [r7, #8]
 8007cde:	430a      	orrs	r2, r1
 8007ce0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	6a1b      	ldr	r3, [r3, #32]
 8007ce8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	685b      	ldr	r3, [r3, #4]
 8007cf0:	4a6a      	ldr	r2, [pc, #424]	; (8007e9c <HAL_I2C_Init+0x274>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d802      	bhi.n	8007cfc <HAL_I2C_Init+0xd4>
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	3301      	adds	r3, #1
 8007cfa:	e009      	b.n	8007d10 <HAL_I2C_Init+0xe8>
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007d02:	fb02 f303 	mul.w	r3, r2, r3
 8007d06:	4a69      	ldr	r2, [pc, #420]	; (8007eac <HAL_I2C_Init+0x284>)
 8007d08:	fba2 2303 	umull	r2, r3, r2, r3
 8007d0c:	099b      	lsrs	r3, r3, #6
 8007d0e:	3301      	adds	r3, #1
 8007d10:	687a      	ldr	r2, [r7, #4]
 8007d12:	6812      	ldr	r2, [r2, #0]
 8007d14:	430b      	orrs	r3, r1
 8007d16:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	69db      	ldr	r3, [r3, #28]
 8007d1e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007d22:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	685b      	ldr	r3, [r3, #4]
 8007d2a:	495c      	ldr	r1, [pc, #368]	; (8007e9c <HAL_I2C_Init+0x274>)
 8007d2c:	428b      	cmp	r3, r1
 8007d2e:	d819      	bhi.n	8007d64 <HAL_I2C_Init+0x13c>
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	1e59      	subs	r1, r3, #1
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	685b      	ldr	r3, [r3, #4]
 8007d38:	005b      	lsls	r3, r3, #1
 8007d3a:	fbb1 f3f3 	udiv	r3, r1, r3
 8007d3e:	1c59      	adds	r1, r3, #1
 8007d40:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007d44:	400b      	ands	r3, r1
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d00a      	beq.n	8007d60 <HAL_I2C_Init+0x138>
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	1e59      	subs	r1, r3, #1
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	685b      	ldr	r3, [r3, #4]
 8007d52:	005b      	lsls	r3, r3, #1
 8007d54:	fbb1 f3f3 	udiv	r3, r1, r3
 8007d58:	3301      	adds	r3, #1
 8007d5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007d5e:	e051      	b.n	8007e04 <HAL_I2C_Init+0x1dc>
 8007d60:	2304      	movs	r3, #4
 8007d62:	e04f      	b.n	8007e04 <HAL_I2C_Init+0x1dc>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	689b      	ldr	r3, [r3, #8]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d111      	bne.n	8007d90 <HAL_I2C_Init+0x168>
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	1e58      	subs	r0, r3, #1
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6859      	ldr	r1, [r3, #4]
 8007d74:	460b      	mov	r3, r1
 8007d76:	005b      	lsls	r3, r3, #1
 8007d78:	440b      	add	r3, r1
 8007d7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8007d7e:	3301      	adds	r3, #1
 8007d80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	bf0c      	ite	eq
 8007d88:	2301      	moveq	r3, #1
 8007d8a:	2300      	movne	r3, #0
 8007d8c:	b2db      	uxtb	r3, r3
 8007d8e:	e012      	b.n	8007db6 <HAL_I2C_Init+0x18e>
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	1e58      	subs	r0, r3, #1
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6859      	ldr	r1, [r3, #4]
 8007d98:	460b      	mov	r3, r1
 8007d9a:	009b      	lsls	r3, r3, #2
 8007d9c:	440b      	add	r3, r1
 8007d9e:	0099      	lsls	r1, r3, #2
 8007da0:	440b      	add	r3, r1
 8007da2:	fbb0 f3f3 	udiv	r3, r0, r3
 8007da6:	3301      	adds	r3, #1
 8007da8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	bf0c      	ite	eq
 8007db0:	2301      	moveq	r3, #1
 8007db2:	2300      	movne	r3, #0
 8007db4:	b2db      	uxtb	r3, r3
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d001      	beq.n	8007dbe <HAL_I2C_Init+0x196>
 8007dba:	2301      	movs	r3, #1
 8007dbc:	e022      	b.n	8007e04 <HAL_I2C_Init+0x1dc>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	689b      	ldr	r3, [r3, #8]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d10e      	bne.n	8007de4 <HAL_I2C_Init+0x1bc>
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	1e58      	subs	r0, r3, #1
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6859      	ldr	r1, [r3, #4]
 8007dce:	460b      	mov	r3, r1
 8007dd0:	005b      	lsls	r3, r3, #1
 8007dd2:	440b      	add	r3, r1
 8007dd4:	fbb0 f3f3 	udiv	r3, r0, r3
 8007dd8:	3301      	adds	r3, #1
 8007dda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007dde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007de2:	e00f      	b.n	8007e04 <HAL_I2C_Init+0x1dc>
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	1e58      	subs	r0, r3, #1
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6859      	ldr	r1, [r3, #4]
 8007dec:	460b      	mov	r3, r1
 8007dee:	009b      	lsls	r3, r3, #2
 8007df0:	440b      	add	r3, r1
 8007df2:	0099      	lsls	r1, r3, #2
 8007df4:	440b      	add	r3, r1
 8007df6:	fbb0 f3f3 	udiv	r3, r0, r3
 8007dfa:	3301      	adds	r3, #1
 8007dfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e00:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007e04:	6879      	ldr	r1, [r7, #4]
 8007e06:	6809      	ldr	r1, [r1, #0]
 8007e08:	4313      	orrs	r3, r2
 8007e0a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	69da      	ldr	r2, [r3, #28]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6a1b      	ldr	r3, [r3, #32]
 8007e1e:	431a      	orrs	r2, r3
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	430a      	orrs	r2, r1
 8007e26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	689b      	ldr	r3, [r3, #8]
 8007e2e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007e32:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007e36:	687a      	ldr	r2, [r7, #4]
 8007e38:	6911      	ldr	r1, [r2, #16]
 8007e3a:	687a      	ldr	r2, [r7, #4]
 8007e3c:	68d2      	ldr	r2, [r2, #12]
 8007e3e:	4311      	orrs	r1, r2
 8007e40:	687a      	ldr	r2, [r7, #4]
 8007e42:	6812      	ldr	r2, [r2, #0]
 8007e44:	430b      	orrs	r3, r1
 8007e46:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	68db      	ldr	r3, [r3, #12]
 8007e4e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	695a      	ldr	r2, [r3, #20]
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	699b      	ldr	r3, [r3, #24]
 8007e5a:	431a      	orrs	r2, r3
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	430a      	orrs	r2, r1
 8007e62:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	681a      	ldr	r2, [r3, #0]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f042 0201 	orr.w	r2, r2, #1
 8007e72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2200      	movs	r2, #0
 8007e78:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2220      	movs	r2, #32
 8007e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2200      	movs	r2, #0
 8007e86:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007e90:	2300      	movs	r3, #0
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3710      	adds	r7, #16
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}
 8007e9a:	bf00      	nop
 8007e9c:	000186a0 	.word	0x000186a0
 8007ea0:	001e847f 	.word	0x001e847f
 8007ea4:	003d08ff 	.word	0x003d08ff
 8007ea8:	431bde83 	.word	0x431bde83
 8007eac:	10624dd3 	.word	0x10624dd3

08007eb0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b088      	sub	sp, #32
 8007eb4:	af02      	add	r7, sp, #8
 8007eb6:	60f8      	str	r0, [r7, #12]
 8007eb8:	607a      	str	r2, [r7, #4]
 8007eba:	461a      	mov	r2, r3
 8007ebc:	460b      	mov	r3, r1
 8007ebe:	817b      	strh	r3, [r7, #10]
 8007ec0:	4613      	mov	r3, r2
 8007ec2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007ec4:	f7fd fb2c 	bl	8005520 <HAL_GetTick>
 8007ec8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ed0:	b2db      	uxtb	r3, r3
 8007ed2:	2b20      	cmp	r3, #32
 8007ed4:	f040 80e0 	bne.w	8008098 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	9300      	str	r3, [sp, #0]
 8007edc:	2319      	movs	r3, #25
 8007ede:	2201      	movs	r2, #1
 8007ee0:	4970      	ldr	r1, [pc, #448]	; (80080a4 <HAL_I2C_Master_Transmit+0x1f4>)
 8007ee2:	68f8      	ldr	r0, [r7, #12]
 8007ee4:	f000 f964 	bl	80081b0 <I2C_WaitOnFlagUntilTimeout>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d001      	beq.n	8007ef2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8007eee:	2302      	movs	r3, #2
 8007ef0:	e0d3      	b.n	800809a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ef8:	2b01      	cmp	r3, #1
 8007efa:	d101      	bne.n	8007f00 <HAL_I2C_Master_Transmit+0x50>
 8007efc:	2302      	movs	r3, #2
 8007efe:	e0cc      	b.n	800809a <HAL_I2C_Master_Transmit+0x1ea>
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	2201      	movs	r2, #1
 8007f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f003 0301 	and.w	r3, r3, #1
 8007f12:	2b01      	cmp	r3, #1
 8007f14:	d007      	beq.n	8007f26 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	681a      	ldr	r2, [r3, #0]
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f042 0201 	orr.w	r2, r2, #1
 8007f24:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	681a      	ldr	r2, [r3, #0]
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007f34:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	2221      	movs	r2, #33	; 0x21
 8007f3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	2210      	movs	r2, #16
 8007f42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	687a      	ldr	r2, [r7, #4]
 8007f50:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	893a      	ldrh	r2, [r7, #8]
 8007f56:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f5c:	b29a      	uxth	r2, r3
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	4a50      	ldr	r2, [pc, #320]	; (80080a8 <HAL_I2C_Master_Transmit+0x1f8>)
 8007f66:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007f68:	8979      	ldrh	r1, [r7, #10]
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	6a3a      	ldr	r2, [r7, #32]
 8007f6e:	68f8      	ldr	r0, [r7, #12]
 8007f70:	f000 f89c 	bl	80080ac <I2C_MasterRequestWrite>
 8007f74:	4603      	mov	r3, r0
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d001      	beq.n	8007f7e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	e08d      	b.n	800809a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007f7e:	2300      	movs	r3, #0
 8007f80:	613b      	str	r3, [r7, #16]
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	695b      	ldr	r3, [r3, #20]
 8007f88:	613b      	str	r3, [r7, #16]
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	699b      	ldr	r3, [r3, #24]
 8007f90:	613b      	str	r3, [r7, #16]
 8007f92:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8007f94:	e066      	b.n	8008064 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007f96:	697a      	ldr	r2, [r7, #20]
 8007f98:	6a39      	ldr	r1, [r7, #32]
 8007f9a:	68f8      	ldr	r0, [r7, #12]
 8007f9c:	f000 f9de 	bl	800835c <I2C_WaitOnTXEFlagUntilTimeout>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d00d      	beq.n	8007fc2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007faa:	2b04      	cmp	r3, #4
 8007fac:	d107      	bne.n	8007fbe <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	681a      	ldr	r2, [r3, #0]
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007fbc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	e06b      	b.n	800809a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fc6:	781a      	ldrb	r2, [r3, #0]
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fd2:	1c5a      	adds	r2, r3, #1
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fdc:	b29b      	uxth	r3, r3
 8007fde:	3b01      	subs	r3, #1
 8007fe0:	b29a      	uxth	r2, r3
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fea:	3b01      	subs	r3, #1
 8007fec:	b29a      	uxth	r2, r3
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	695b      	ldr	r3, [r3, #20]
 8007ff8:	f003 0304 	and.w	r3, r3, #4
 8007ffc:	2b04      	cmp	r3, #4
 8007ffe:	d11b      	bne.n	8008038 <HAL_I2C_Master_Transmit+0x188>
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008004:	2b00      	cmp	r3, #0
 8008006:	d017      	beq.n	8008038 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800800c:	781a      	ldrb	r2, [r3, #0]
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008018:	1c5a      	adds	r2, r3, #1
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008022:	b29b      	uxth	r3, r3
 8008024:	3b01      	subs	r3, #1
 8008026:	b29a      	uxth	r2, r3
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008030:	3b01      	subs	r3, #1
 8008032:	b29a      	uxth	r2, r3
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008038:	697a      	ldr	r2, [r7, #20]
 800803a:	6a39      	ldr	r1, [r7, #32]
 800803c:	68f8      	ldr	r0, [r7, #12]
 800803e:	f000 f9ce 	bl	80083de <I2C_WaitOnBTFFlagUntilTimeout>
 8008042:	4603      	mov	r3, r0
 8008044:	2b00      	cmp	r3, #0
 8008046:	d00d      	beq.n	8008064 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800804c:	2b04      	cmp	r3, #4
 800804e:	d107      	bne.n	8008060 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	681a      	ldr	r2, [r3, #0]
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800805e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008060:	2301      	movs	r3, #1
 8008062:	e01a      	b.n	800809a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008068:	2b00      	cmp	r3, #0
 800806a:	d194      	bne.n	8007f96 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	681a      	ldr	r2, [r3, #0]
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800807a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	2220      	movs	r2, #32
 8008080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	2200      	movs	r2, #0
 8008088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	2200      	movs	r2, #0
 8008090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008094:	2300      	movs	r3, #0
 8008096:	e000      	b.n	800809a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8008098:	2302      	movs	r3, #2
  }
}
 800809a:	4618      	mov	r0, r3
 800809c:	3718      	adds	r7, #24
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}
 80080a2:	bf00      	nop
 80080a4:	00100002 	.word	0x00100002
 80080a8:	ffff0000 	.word	0xffff0000

080080ac <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b088      	sub	sp, #32
 80080b0:	af02      	add	r7, sp, #8
 80080b2:	60f8      	str	r0, [r7, #12]
 80080b4:	607a      	str	r2, [r7, #4]
 80080b6:	603b      	str	r3, [r7, #0]
 80080b8:	460b      	mov	r3, r1
 80080ba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080c0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80080c2:	697b      	ldr	r3, [r7, #20]
 80080c4:	2b08      	cmp	r3, #8
 80080c6:	d006      	beq.n	80080d6 <I2C_MasterRequestWrite+0x2a>
 80080c8:	697b      	ldr	r3, [r7, #20]
 80080ca:	2b01      	cmp	r3, #1
 80080cc:	d003      	beq.n	80080d6 <I2C_MasterRequestWrite+0x2a>
 80080ce:	697b      	ldr	r3, [r7, #20]
 80080d0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80080d4:	d108      	bne.n	80080e8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	681a      	ldr	r2, [r3, #0]
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80080e4:	601a      	str	r2, [r3, #0]
 80080e6:	e00b      	b.n	8008100 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080ec:	2b12      	cmp	r3, #18
 80080ee:	d107      	bne.n	8008100 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	681a      	ldr	r2, [r3, #0]
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80080fe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	9300      	str	r3, [sp, #0]
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2200      	movs	r2, #0
 8008108:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800810c:	68f8      	ldr	r0, [r7, #12]
 800810e:	f000 f84f 	bl	80081b0 <I2C_WaitOnFlagUntilTimeout>
 8008112:	4603      	mov	r3, r0
 8008114:	2b00      	cmp	r3, #0
 8008116:	d00d      	beq.n	8008134 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008122:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008126:	d103      	bne.n	8008130 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800812e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008130:	2303      	movs	r3, #3
 8008132:	e035      	b.n	80081a0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	691b      	ldr	r3, [r3, #16]
 8008138:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800813c:	d108      	bne.n	8008150 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800813e:	897b      	ldrh	r3, [r7, #10]
 8008140:	b2db      	uxtb	r3, r3
 8008142:	461a      	mov	r2, r3
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800814c:	611a      	str	r2, [r3, #16]
 800814e:	e01b      	b.n	8008188 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008150:	897b      	ldrh	r3, [r7, #10]
 8008152:	11db      	asrs	r3, r3, #7
 8008154:	b2db      	uxtb	r3, r3
 8008156:	f003 0306 	and.w	r3, r3, #6
 800815a:	b2db      	uxtb	r3, r3
 800815c:	f063 030f 	orn	r3, r3, #15
 8008160:	b2da      	uxtb	r2, r3
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	687a      	ldr	r2, [r7, #4]
 800816c:	490e      	ldr	r1, [pc, #56]	; (80081a8 <I2C_MasterRequestWrite+0xfc>)
 800816e:	68f8      	ldr	r0, [r7, #12]
 8008170:	f000 f875 	bl	800825e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008174:	4603      	mov	r3, r0
 8008176:	2b00      	cmp	r3, #0
 8008178:	d001      	beq.n	800817e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800817a:	2301      	movs	r3, #1
 800817c:	e010      	b.n	80081a0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800817e:	897b      	ldrh	r3, [r7, #10]
 8008180:	b2da      	uxtb	r2, r3
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	687a      	ldr	r2, [r7, #4]
 800818c:	4907      	ldr	r1, [pc, #28]	; (80081ac <I2C_MasterRequestWrite+0x100>)
 800818e:	68f8      	ldr	r0, [r7, #12]
 8008190:	f000 f865 	bl	800825e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008194:	4603      	mov	r3, r0
 8008196:	2b00      	cmp	r3, #0
 8008198:	d001      	beq.n	800819e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800819a:	2301      	movs	r3, #1
 800819c:	e000      	b.n	80081a0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800819e:	2300      	movs	r3, #0
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3718      	adds	r7, #24
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}
 80081a8:	00010008 	.word	0x00010008
 80081ac:	00010002 	.word	0x00010002

080081b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b084      	sub	sp, #16
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	60f8      	str	r0, [r7, #12]
 80081b8:	60b9      	str	r1, [r7, #8]
 80081ba:	603b      	str	r3, [r7, #0]
 80081bc:	4613      	mov	r3, r2
 80081be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80081c0:	e025      	b.n	800820e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081c8:	d021      	beq.n	800820e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081ca:	f7fd f9a9 	bl	8005520 <HAL_GetTick>
 80081ce:	4602      	mov	r2, r0
 80081d0:	69bb      	ldr	r3, [r7, #24]
 80081d2:	1ad3      	subs	r3, r2, r3
 80081d4:	683a      	ldr	r2, [r7, #0]
 80081d6:	429a      	cmp	r2, r3
 80081d8:	d302      	bcc.n	80081e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d116      	bne.n	800820e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	2200      	movs	r2, #0
 80081e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	2220      	movs	r2, #32
 80081ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	2200      	movs	r2, #0
 80081f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081fa:	f043 0220 	orr.w	r2, r3, #32
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	2200      	movs	r2, #0
 8008206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800820a:	2301      	movs	r3, #1
 800820c:	e023      	b.n	8008256 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	0c1b      	lsrs	r3, r3, #16
 8008212:	b2db      	uxtb	r3, r3
 8008214:	2b01      	cmp	r3, #1
 8008216:	d10d      	bne.n	8008234 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	695b      	ldr	r3, [r3, #20]
 800821e:	43da      	mvns	r2, r3
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	4013      	ands	r3, r2
 8008224:	b29b      	uxth	r3, r3
 8008226:	2b00      	cmp	r3, #0
 8008228:	bf0c      	ite	eq
 800822a:	2301      	moveq	r3, #1
 800822c:	2300      	movne	r3, #0
 800822e:	b2db      	uxtb	r3, r3
 8008230:	461a      	mov	r2, r3
 8008232:	e00c      	b.n	800824e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	699b      	ldr	r3, [r3, #24]
 800823a:	43da      	mvns	r2, r3
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	4013      	ands	r3, r2
 8008240:	b29b      	uxth	r3, r3
 8008242:	2b00      	cmp	r3, #0
 8008244:	bf0c      	ite	eq
 8008246:	2301      	moveq	r3, #1
 8008248:	2300      	movne	r3, #0
 800824a:	b2db      	uxtb	r3, r3
 800824c:	461a      	mov	r2, r3
 800824e:	79fb      	ldrb	r3, [r7, #7]
 8008250:	429a      	cmp	r2, r3
 8008252:	d0b6      	beq.n	80081c2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008254:	2300      	movs	r3, #0
}
 8008256:	4618      	mov	r0, r3
 8008258:	3710      	adds	r7, #16
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}

0800825e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800825e:	b580      	push	{r7, lr}
 8008260:	b084      	sub	sp, #16
 8008262:	af00      	add	r7, sp, #0
 8008264:	60f8      	str	r0, [r7, #12]
 8008266:	60b9      	str	r1, [r7, #8]
 8008268:	607a      	str	r2, [r7, #4]
 800826a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800826c:	e051      	b.n	8008312 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	695b      	ldr	r3, [r3, #20]
 8008274:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008278:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800827c:	d123      	bne.n	80082c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	681a      	ldr	r2, [r3, #0]
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800828c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008296:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	2200      	movs	r2, #0
 800829c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	2220      	movs	r2, #32
 80082a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	2200      	movs	r2, #0
 80082aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082b2:	f043 0204 	orr.w	r2, r3, #4
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	2200      	movs	r2, #0
 80082be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80082c2:	2301      	movs	r3, #1
 80082c4:	e046      	b.n	8008354 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082cc:	d021      	beq.n	8008312 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082ce:	f7fd f927 	bl	8005520 <HAL_GetTick>
 80082d2:	4602      	mov	r2, r0
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	1ad3      	subs	r3, r2, r3
 80082d8:	687a      	ldr	r2, [r7, #4]
 80082da:	429a      	cmp	r2, r3
 80082dc:	d302      	bcc.n	80082e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d116      	bne.n	8008312 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	2200      	movs	r2, #0
 80082e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	2220      	movs	r2, #32
 80082ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2200      	movs	r2, #0
 80082f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082fe:	f043 0220 	orr.w	r2, r3, #32
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	2200      	movs	r2, #0
 800830a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800830e:	2301      	movs	r3, #1
 8008310:	e020      	b.n	8008354 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	0c1b      	lsrs	r3, r3, #16
 8008316:	b2db      	uxtb	r3, r3
 8008318:	2b01      	cmp	r3, #1
 800831a:	d10c      	bne.n	8008336 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	695b      	ldr	r3, [r3, #20]
 8008322:	43da      	mvns	r2, r3
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	4013      	ands	r3, r2
 8008328:	b29b      	uxth	r3, r3
 800832a:	2b00      	cmp	r3, #0
 800832c:	bf14      	ite	ne
 800832e:	2301      	movne	r3, #1
 8008330:	2300      	moveq	r3, #0
 8008332:	b2db      	uxtb	r3, r3
 8008334:	e00b      	b.n	800834e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	699b      	ldr	r3, [r3, #24]
 800833c:	43da      	mvns	r2, r3
 800833e:	68bb      	ldr	r3, [r7, #8]
 8008340:	4013      	ands	r3, r2
 8008342:	b29b      	uxth	r3, r3
 8008344:	2b00      	cmp	r3, #0
 8008346:	bf14      	ite	ne
 8008348:	2301      	movne	r3, #1
 800834a:	2300      	moveq	r3, #0
 800834c:	b2db      	uxtb	r3, r3
 800834e:	2b00      	cmp	r3, #0
 8008350:	d18d      	bne.n	800826e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008352:	2300      	movs	r3, #0
}
 8008354:	4618      	mov	r0, r3
 8008356:	3710      	adds	r7, #16
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}

0800835c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b084      	sub	sp, #16
 8008360:	af00      	add	r7, sp, #0
 8008362:	60f8      	str	r0, [r7, #12]
 8008364:	60b9      	str	r1, [r7, #8]
 8008366:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008368:	e02d      	b.n	80083c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800836a:	68f8      	ldr	r0, [r7, #12]
 800836c:	f000 f878 	bl	8008460 <I2C_IsAcknowledgeFailed>
 8008370:	4603      	mov	r3, r0
 8008372:	2b00      	cmp	r3, #0
 8008374:	d001      	beq.n	800837a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008376:	2301      	movs	r3, #1
 8008378:	e02d      	b.n	80083d6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008380:	d021      	beq.n	80083c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008382:	f7fd f8cd 	bl	8005520 <HAL_GetTick>
 8008386:	4602      	mov	r2, r0
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	1ad3      	subs	r3, r2, r3
 800838c:	68ba      	ldr	r2, [r7, #8]
 800838e:	429a      	cmp	r2, r3
 8008390:	d302      	bcc.n	8008398 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d116      	bne.n	80083c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2200      	movs	r2, #0
 800839c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	2220      	movs	r2, #32
 80083a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	2200      	movs	r2, #0
 80083aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083b2:	f043 0220 	orr.w	r2, r3, #32
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	2200      	movs	r2, #0
 80083be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80083c2:	2301      	movs	r3, #1
 80083c4:	e007      	b.n	80083d6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	695b      	ldr	r3, [r3, #20]
 80083cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083d0:	2b80      	cmp	r3, #128	; 0x80
 80083d2:	d1ca      	bne.n	800836a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80083d4:	2300      	movs	r3, #0
}
 80083d6:	4618      	mov	r0, r3
 80083d8:	3710      	adds	r7, #16
 80083da:	46bd      	mov	sp, r7
 80083dc:	bd80      	pop	{r7, pc}

080083de <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80083de:	b580      	push	{r7, lr}
 80083e0:	b084      	sub	sp, #16
 80083e2:	af00      	add	r7, sp, #0
 80083e4:	60f8      	str	r0, [r7, #12]
 80083e6:	60b9      	str	r1, [r7, #8]
 80083e8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80083ea:	e02d      	b.n	8008448 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80083ec:	68f8      	ldr	r0, [r7, #12]
 80083ee:	f000 f837 	bl	8008460 <I2C_IsAcknowledgeFailed>
 80083f2:	4603      	mov	r3, r0
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d001      	beq.n	80083fc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80083f8:	2301      	movs	r3, #1
 80083fa:	e02d      	b.n	8008458 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008402:	d021      	beq.n	8008448 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008404:	f7fd f88c 	bl	8005520 <HAL_GetTick>
 8008408:	4602      	mov	r2, r0
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	1ad3      	subs	r3, r2, r3
 800840e:	68ba      	ldr	r2, [r7, #8]
 8008410:	429a      	cmp	r2, r3
 8008412:	d302      	bcc.n	800841a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d116      	bne.n	8008448 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	2200      	movs	r2, #0
 800841e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	2220      	movs	r2, #32
 8008424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	2200      	movs	r2, #0
 800842c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008434:	f043 0220 	orr.w	r2, r3, #32
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	2200      	movs	r2, #0
 8008440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008444:	2301      	movs	r3, #1
 8008446:	e007      	b.n	8008458 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	695b      	ldr	r3, [r3, #20]
 800844e:	f003 0304 	and.w	r3, r3, #4
 8008452:	2b04      	cmp	r3, #4
 8008454:	d1ca      	bne.n	80083ec <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008456:	2300      	movs	r3, #0
}
 8008458:	4618      	mov	r0, r3
 800845a:	3710      	adds	r7, #16
 800845c:	46bd      	mov	sp, r7
 800845e:	bd80      	pop	{r7, pc}

08008460 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008460:	b480      	push	{r7}
 8008462:	b083      	sub	sp, #12
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	695b      	ldr	r3, [r3, #20]
 800846e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008472:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008476:	d11b      	bne.n	80084b0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008480:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2200      	movs	r2, #0
 8008486:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2220      	movs	r2, #32
 800848c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2200      	movs	r2, #0
 8008494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800849c:	f043 0204 	orr.w	r2, r3, #4
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2200      	movs	r2, #0
 80084a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80084ac:	2301      	movs	r3, #1
 80084ae:	e000      	b.n	80084b2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80084b0:	2300      	movs	r3, #0
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	370c      	adds	r7, #12
 80084b6:	46bd      	mov	sp, r7
 80084b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084bc:	4770      	bx	lr
	...

080084c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b086      	sub	sp, #24
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d101      	bne.n	80084d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80084ce:	2301      	movs	r3, #1
 80084d0:	e267      	b.n	80089a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f003 0301 	and.w	r3, r3, #1
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d075      	beq.n	80085ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80084de:	4b88      	ldr	r3, [pc, #544]	; (8008700 <HAL_RCC_OscConfig+0x240>)
 80084e0:	689b      	ldr	r3, [r3, #8]
 80084e2:	f003 030c 	and.w	r3, r3, #12
 80084e6:	2b04      	cmp	r3, #4
 80084e8:	d00c      	beq.n	8008504 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80084ea:	4b85      	ldr	r3, [pc, #532]	; (8008700 <HAL_RCC_OscConfig+0x240>)
 80084ec:	689b      	ldr	r3, [r3, #8]
 80084ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80084f2:	2b08      	cmp	r3, #8
 80084f4:	d112      	bne.n	800851c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80084f6:	4b82      	ldr	r3, [pc, #520]	; (8008700 <HAL_RCC_OscConfig+0x240>)
 80084f8:	685b      	ldr	r3, [r3, #4]
 80084fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80084fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008502:	d10b      	bne.n	800851c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008504:	4b7e      	ldr	r3, [pc, #504]	; (8008700 <HAL_RCC_OscConfig+0x240>)
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800850c:	2b00      	cmp	r3, #0
 800850e:	d05b      	beq.n	80085c8 <HAL_RCC_OscConfig+0x108>
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	685b      	ldr	r3, [r3, #4]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d157      	bne.n	80085c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008518:	2301      	movs	r3, #1
 800851a:	e242      	b.n	80089a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	685b      	ldr	r3, [r3, #4]
 8008520:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008524:	d106      	bne.n	8008534 <HAL_RCC_OscConfig+0x74>
 8008526:	4b76      	ldr	r3, [pc, #472]	; (8008700 <HAL_RCC_OscConfig+0x240>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	4a75      	ldr	r2, [pc, #468]	; (8008700 <HAL_RCC_OscConfig+0x240>)
 800852c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008530:	6013      	str	r3, [r2, #0]
 8008532:	e01d      	b.n	8008570 <HAL_RCC_OscConfig+0xb0>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	685b      	ldr	r3, [r3, #4]
 8008538:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800853c:	d10c      	bne.n	8008558 <HAL_RCC_OscConfig+0x98>
 800853e:	4b70      	ldr	r3, [pc, #448]	; (8008700 <HAL_RCC_OscConfig+0x240>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	4a6f      	ldr	r2, [pc, #444]	; (8008700 <HAL_RCC_OscConfig+0x240>)
 8008544:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008548:	6013      	str	r3, [r2, #0]
 800854a:	4b6d      	ldr	r3, [pc, #436]	; (8008700 <HAL_RCC_OscConfig+0x240>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	4a6c      	ldr	r2, [pc, #432]	; (8008700 <HAL_RCC_OscConfig+0x240>)
 8008550:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008554:	6013      	str	r3, [r2, #0]
 8008556:	e00b      	b.n	8008570 <HAL_RCC_OscConfig+0xb0>
 8008558:	4b69      	ldr	r3, [pc, #420]	; (8008700 <HAL_RCC_OscConfig+0x240>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	4a68      	ldr	r2, [pc, #416]	; (8008700 <HAL_RCC_OscConfig+0x240>)
 800855e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008562:	6013      	str	r3, [r2, #0]
 8008564:	4b66      	ldr	r3, [pc, #408]	; (8008700 <HAL_RCC_OscConfig+0x240>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	4a65      	ldr	r2, [pc, #404]	; (8008700 <HAL_RCC_OscConfig+0x240>)
 800856a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800856e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	685b      	ldr	r3, [r3, #4]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d013      	beq.n	80085a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008578:	f7fc ffd2 	bl	8005520 <HAL_GetTick>
 800857c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800857e:	e008      	b.n	8008592 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008580:	f7fc ffce 	bl	8005520 <HAL_GetTick>
 8008584:	4602      	mov	r2, r0
 8008586:	693b      	ldr	r3, [r7, #16]
 8008588:	1ad3      	subs	r3, r2, r3
 800858a:	2b64      	cmp	r3, #100	; 0x64
 800858c:	d901      	bls.n	8008592 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800858e:	2303      	movs	r3, #3
 8008590:	e207      	b.n	80089a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008592:	4b5b      	ldr	r3, [pc, #364]	; (8008700 <HAL_RCC_OscConfig+0x240>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800859a:	2b00      	cmp	r3, #0
 800859c:	d0f0      	beq.n	8008580 <HAL_RCC_OscConfig+0xc0>
 800859e:	e014      	b.n	80085ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80085a0:	f7fc ffbe 	bl	8005520 <HAL_GetTick>
 80085a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80085a6:	e008      	b.n	80085ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80085a8:	f7fc ffba 	bl	8005520 <HAL_GetTick>
 80085ac:	4602      	mov	r2, r0
 80085ae:	693b      	ldr	r3, [r7, #16]
 80085b0:	1ad3      	subs	r3, r2, r3
 80085b2:	2b64      	cmp	r3, #100	; 0x64
 80085b4:	d901      	bls.n	80085ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80085b6:	2303      	movs	r3, #3
 80085b8:	e1f3      	b.n	80089a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80085ba:	4b51      	ldr	r3, [pc, #324]	; (8008700 <HAL_RCC_OscConfig+0x240>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d1f0      	bne.n	80085a8 <HAL_RCC_OscConfig+0xe8>
 80085c6:	e000      	b.n	80085ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80085c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f003 0302 	and.w	r3, r3, #2
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d063      	beq.n	800869e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80085d6:	4b4a      	ldr	r3, [pc, #296]	; (8008700 <HAL_RCC_OscConfig+0x240>)
 80085d8:	689b      	ldr	r3, [r3, #8]
 80085da:	f003 030c 	and.w	r3, r3, #12
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d00b      	beq.n	80085fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80085e2:	4b47      	ldr	r3, [pc, #284]	; (8008700 <HAL_RCC_OscConfig+0x240>)
 80085e4:	689b      	ldr	r3, [r3, #8]
 80085e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80085ea:	2b08      	cmp	r3, #8
 80085ec:	d11c      	bne.n	8008628 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80085ee:	4b44      	ldr	r3, [pc, #272]	; (8008700 <HAL_RCC_OscConfig+0x240>)
 80085f0:	685b      	ldr	r3, [r3, #4]
 80085f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d116      	bne.n	8008628 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80085fa:	4b41      	ldr	r3, [pc, #260]	; (8008700 <HAL_RCC_OscConfig+0x240>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f003 0302 	and.w	r3, r3, #2
 8008602:	2b00      	cmp	r3, #0
 8008604:	d005      	beq.n	8008612 <HAL_RCC_OscConfig+0x152>
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	68db      	ldr	r3, [r3, #12]
 800860a:	2b01      	cmp	r3, #1
 800860c:	d001      	beq.n	8008612 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800860e:	2301      	movs	r3, #1
 8008610:	e1c7      	b.n	80089a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008612:	4b3b      	ldr	r3, [pc, #236]	; (8008700 <HAL_RCC_OscConfig+0x240>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	691b      	ldr	r3, [r3, #16]
 800861e:	00db      	lsls	r3, r3, #3
 8008620:	4937      	ldr	r1, [pc, #220]	; (8008700 <HAL_RCC_OscConfig+0x240>)
 8008622:	4313      	orrs	r3, r2
 8008624:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008626:	e03a      	b.n	800869e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	68db      	ldr	r3, [r3, #12]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d020      	beq.n	8008672 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008630:	4b34      	ldr	r3, [pc, #208]	; (8008704 <HAL_RCC_OscConfig+0x244>)
 8008632:	2201      	movs	r2, #1
 8008634:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008636:	f7fc ff73 	bl	8005520 <HAL_GetTick>
 800863a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800863c:	e008      	b.n	8008650 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800863e:	f7fc ff6f 	bl	8005520 <HAL_GetTick>
 8008642:	4602      	mov	r2, r0
 8008644:	693b      	ldr	r3, [r7, #16]
 8008646:	1ad3      	subs	r3, r2, r3
 8008648:	2b02      	cmp	r3, #2
 800864a:	d901      	bls.n	8008650 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800864c:	2303      	movs	r3, #3
 800864e:	e1a8      	b.n	80089a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008650:	4b2b      	ldr	r3, [pc, #172]	; (8008700 <HAL_RCC_OscConfig+0x240>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f003 0302 	and.w	r3, r3, #2
 8008658:	2b00      	cmp	r3, #0
 800865a:	d0f0      	beq.n	800863e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800865c:	4b28      	ldr	r3, [pc, #160]	; (8008700 <HAL_RCC_OscConfig+0x240>)
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	691b      	ldr	r3, [r3, #16]
 8008668:	00db      	lsls	r3, r3, #3
 800866a:	4925      	ldr	r1, [pc, #148]	; (8008700 <HAL_RCC_OscConfig+0x240>)
 800866c:	4313      	orrs	r3, r2
 800866e:	600b      	str	r3, [r1, #0]
 8008670:	e015      	b.n	800869e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008672:	4b24      	ldr	r3, [pc, #144]	; (8008704 <HAL_RCC_OscConfig+0x244>)
 8008674:	2200      	movs	r2, #0
 8008676:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008678:	f7fc ff52 	bl	8005520 <HAL_GetTick>
 800867c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800867e:	e008      	b.n	8008692 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008680:	f7fc ff4e 	bl	8005520 <HAL_GetTick>
 8008684:	4602      	mov	r2, r0
 8008686:	693b      	ldr	r3, [r7, #16]
 8008688:	1ad3      	subs	r3, r2, r3
 800868a:	2b02      	cmp	r3, #2
 800868c:	d901      	bls.n	8008692 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800868e:	2303      	movs	r3, #3
 8008690:	e187      	b.n	80089a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008692:	4b1b      	ldr	r3, [pc, #108]	; (8008700 <HAL_RCC_OscConfig+0x240>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f003 0302 	and.w	r3, r3, #2
 800869a:	2b00      	cmp	r3, #0
 800869c:	d1f0      	bne.n	8008680 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f003 0308 	and.w	r3, r3, #8
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d036      	beq.n	8008718 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	695b      	ldr	r3, [r3, #20]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d016      	beq.n	80086e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80086b2:	4b15      	ldr	r3, [pc, #84]	; (8008708 <HAL_RCC_OscConfig+0x248>)
 80086b4:	2201      	movs	r2, #1
 80086b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086b8:	f7fc ff32 	bl	8005520 <HAL_GetTick>
 80086bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80086be:	e008      	b.n	80086d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80086c0:	f7fc ff2e 	bl	8005520 <HAL_GetTick>
 80086c4:	4602      	mov	r2, r0
 80086c6:	693b      	ldr	r3, [r7, #16]
 80086c8:	1ad3      	subs	r3, r2, r3
 80086ca:	2b02      	cmp	r3, #2
 80086cc:	d901      	bls.n	80086d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80086ce:	2303      	movs	r3, #3
 80086d0:	e167      	b.n	80089a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80086d2:	4b0b      	ldr	r3, [pc, #44]	; (8008700 <HAL_RCC_OscConfig+0x240>)
 80086d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086d6:	f003 0302 	and.w	r3, r3, #2
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d0f0      	beq.n	80086c0 <HAL_RCC_OscConfig+0x200>
 80086de:	e01b      	b.n	8008718 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80086e0:	4b09      	ldr	r3, [pc, #36]	; (8008708 <HAL_RCC_OscConfig+0x248>)
 80086e2:	2200      	movs	r2, #0
 80086e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80086e6:	f7fc ff1b 	bl	8005520 <HAL_GetTick>
 80086ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80086ec:	e00e      	b.n	800870c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80086ee:	f7fc ff17 	bl	8005520 <HAL_GetTick>
 80086f2:	4602      	mov	r2, r0
 80086f4:	693b      	ldr	r3, [r7, #16]
 80086f6:	1ad3      	subs	r3, r2, r3
 80086f8:	2b02      	cmp	r3, #2
 80086fa:	d907      	bls.n	800870c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80086fc:	2303      	movs	r3, #3
 80086fe:	e150      	b.n	80089a2 <HAL_RCC_OscConfig+0x4e2>
 8008700:	40023800 	.word	0x40023800
 8008704:	42470000 	.word	0x42470000
 8008708:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800870c:	4b88      	ldr	r3, [pc, #544]	; (8008930 <HAL_RCC_OscConfig+0x470>)
 800870e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008710:	f003 0302 	and.w	r3, r3, #2
 8008714:	2b00      	cmp	r3, #0
 8008716:	d1ea      	bne.n	80086ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f003 0304 	and.w	r3, r3, #4
 8008720:	2b00      	cmp	r3, #0
 8008722:	f000 8097 	beq.w	8008854 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008726:	2300      	movs	r3, #0
 8008728:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800872a:	4b81      	ldr	r3, [pc, #516]	; (8008930 <HAL_RCC_OscConfig+0x470>)
 800872c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800872e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008732:	2b00      	cmp	r3, #0
 8008734:	d10f      	bne.n	8008756 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008736:	2300      	movs	r3, #0
 8008738:	60bb      	str	r3, [r7, #8]
 800873a:	4b7d      	ldr	r3, [pc, #500]	; (8008930 <HAL_RCC_OscConfig+0x470>)
 800873c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800873e:	4a7c      	ldr	r2, [pc, #496]	; (8008930 <HAL_RCC_OscConfig+0x470>)
 8008740:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008744:	6413      	str	r3, [r2, #64]	; 0x40
 8008746:	4b7a      	ldr	r3, [pc, #488]	; (8008930 <HAL_RCC_OscConfig+0x470>)
 8008748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800874a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800874e:	60bb      	str	r3, [r7, #8]
 8008750:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008752:	2301      	movs	r3, #1
 8008754:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008756:	4b77      	ldr	r3, [pc, #476]	; (8008934 <HAL_RCC_OscConfig+0x474>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800875e:	2b00      	cmp	r3, #0
 8008760:	d118      	bne.n	8008794 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008762:	4b74      	ldr	r3, [pc, #464]	; (8008934 <HAL_RCC_OscConfig+0x474>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	4a73      	ldr	r2, [pc, #460]	; (8008934 <HAL_RCC_OscConfig+0x474>)
 8008768:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800876c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800876e:	f7fc fed7 	bl	8005520 <HAL_GetTick>
 8008772:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008774:	e008      	b.n	8008788 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008776:	f7fc fed3 	bl	8005520 <HAL_GetTick>
 800877a:	4602      	mov	r2, r0
 800877c:	693b      	ldr	r3, [r7, #16]
 800877e:	1ad3      	subs	r3, r2, r3
 8008780:	2b02      	cmp	r3, #2
 8008782:	d901      	bls.n	8008788 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008784:	2303      	movs	r3, #3
 8008786:	e10c      	b.n	80089a2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008788:	4b6a      	ldr	r3, [pc, #424]	; (8008934 <HAL_RCC_OscConfig+0x474>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008790:	2b00      	cmp	r3, #0
 8008792:	d0f0      	beq.n	8008776 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	689b      	ldr	r3, [r3, #8]
 8008798:	2b01      	cmp	r3, #1
 800879a:	d106      	bne.n	80087aa <HAL_RCC_OscConfig+0x2ea>
 800879c:	4b64      	ldr	r3, [pc, #400]	; (8008930 <HAL_RCC_OscConfig+0x470>)
 800879e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087a0:	4a63      	ldr	r2, [pc, #396]	; (8008930 <HAL_RCC_OscConfig+0x470>)
 80087a2:	f043 0301 	orr.w	r3, r3, #1
 80087a6:	6713      	str	r3, [r2, #112]	; 0x70
 80087a8:	e01c      	b.n	80087e4 <HAL_RCC_OscConfig+0x324>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	689b      	ldr	r3, [r3, #8]
 80087ae:	2b05      	cmp	r3, #5
 80087b0:	d10c      	bne.n	80087cc <HAL_RCC_OscConfig+0x30c>
 80087b2:	4b5f      	ldr	r3, [pc, #380]	; (8008930 <HAL_RCC_OscConfig+0x470>)
 80087b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087b6:	4a5e      	ldr	r2, [pc, #376]	; (8008930 <HAL_RCC_OscConfig+0x470>)
 80087b8:	f043 0304 	orr.w	r3, r3, #4
 80087bc:	6713      	str	r3, [r2, #112]	; 0x70
 80087be:	4b5c      	ldr	r3, [pc, #368]	; (8008930 <HAL_RCC_OscConfig+0x470>)
 80087c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087c2:	4a5b      	ldr	r2, [pc, #364]	; (8008930 <HAL_RCC_OscConfig+0x470>)
 80087c4:	f043 0301 	orr.w	r3, r3, #1
 80087c8:	6713      	str	r3, [r2, #112]	; 0x70
 80087ca:	e00b      	b.n	80087e4 <HAL_RCC_OscConfig+0x324>
 80087cc:	4b58      	ldr	r3, [pc, #352]	; (8008930 <HAL_RCC_OscConfig+0x470>)
 80087ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087d0:	4a57      	ldr	r2, [pc, #348]	; (8008930 <HAL_RCC_OscConfig+0x470>)
 80087d2:	f023 0301 	bic.w	r3, r3, #1
 80087d6:	6713      	str	r3, [r2, #112]	; 0x70
 80087d8:	4b55      	ldr	r3, [pc, #340]	; (8008930 <HAL_RCC_OscConfig+0x470>)
 80087da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087dc:	4a54      	ldr	r2, [pc, #336]	; (8008930 <HAL_RCC_OscConfig+0x470>)
 80087de:	f023 0304 	bic.w	r3, r3, #4
 80087e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	689b      	ldr	r3, [r3, #8]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d015      	beq.n	8008818 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087ec:	f7fc fe98 	bl	8005520 <HAL_GetTick>
 80087f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80087f2:	e00a      	b.n	800880a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80087f4:	f7fc fe94 	bl	8005520 <HAL_GetTick>
 80087f8:	4602      	mov	r2, r0
 80087fa:	693b      	ldr	r3, [r7, #16]
 80087fc:	1ad3      	subs	r3, r2, r3
 80087fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8008802:	4293      	cmp	r3, r2
 8008804:	d901      	bls.n	800880a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008806:	2303      	movs	r3, #3
 8008808:	e0cb      	b.n	80089a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800880a:	4b49      	ldr	r3, [pc, #292]	; (8008930 <HAL_RCC_OscConfig+0x470>)
 800880c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800880e:	f003 0302 	and.w	r3, r3, #2
 8008812:	2b00      	cmp	r3, #0
 8008814:	d0ee      	beq.n	80087f4 <HAL_RCC_OscConfig+0x334>
 8008816:	e014      	b.n	8008842 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008818:	f7fc fe82 	bl	8005520 <HAL_GetTick>
 800881c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800881e:	e00a      	b.n	8008836 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008820:	f7fc fe7e 	bl	8005520 <HAL_GetTick>
 8008824:	4602      	mov	r2, r0
 8008826:	693b      	ldr	r3, [r7, #16]
 8008828:	1ad3      	subs	r3, r2, r3
 800882a:	f241 3288 	movw	r2, #5000	; 0x1388
 800882e:	4293      	cmp	r3, r2
 8008830:	d901      	bls.n	8008836 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008832:	2303      	movs	r3, #3
 8008834:	e0b5      	b.n	80089a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008836:	4b3e      	ldr	r3, [pc, #248]	; (8008930 <HAL_RCC_OscConfig+0x470>)
 8008838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800883a:	f003 0302 	and.w	r3, r3, #2
 800883e:	2b00      	cmp	r3, #0
 8008840:	d1ee      	bne.n	8008820 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008842:	7dfb      	ldrb	r3, [r7, #23]
 8008844:	2b01      	cmp	r3, #1
 8008846:	d105      	bne.n	8008854 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008848:	4b39      	ldr	r3, [pc, #228]	; (8008930 <HAL_RCC_OscConfig+0x470>)
 800884a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800884c:	4a38      	ldr	r2, [pc, #224]	; (8008930 <HAL_RCC_OscConfig+0x470>)
 800884e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008852:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	699b      	ldr	r3, [r3, #24]
 8008858:	2b00      	cmp	r3, #0
 800885a:	f000 80a1 	beq.w	80089a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800885e:	4b34      	ldr	r3, [pc, #208]	; (8008930 <HAL_RCC_OscConfig+0x470>)
 8008860:	689b      	ldr	r3, [r3, #8]
 8008862:	f003 030c 	and.w	r3, r3, #12
 8008866:	2b08      	cmp	r3, #8
 8008868:	d05c      	beq.n	8008924 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	699b      	ldr	r3, [r3, #24]
 800886e:	2b02      	cmp	r3, #2
 8008870:	d141      	bne.n	80088f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008872:	4b31      	ldr	r3, [pc, #196]	; (8008938 <HAL_RCC_OscConfig+0x478>)
 8008874:	2200      	movs	r2, #0
 8008876:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008878:	f7fc fe52 	bl	8005520 <HAL_GetTick>
 800887c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800887e:	e008      	b.n	8008892 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008880:	f7fc fe4e 	bl	8005520 <HAL_GetTick>
 8008884:	4602      	mov	r2, r0
 8008886:	693b      	ldr	r3, [r7, #16]
 8008888:	1ad3      	subs	r3, r2, r3
 800888a:	2b02      	cmp	r3, #2
 800888c:	d901      	bls.n	8008892 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800888e:	2303      	movs	r3, #3
 8008890:	e087      	b.n	80089a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008892:	4b27      	ldr	r3, [pc, #156]	; (8008930 <HAL_RCC_OscConfig+0x470>)
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800889a:	2b00      	cmp	r3, #0
 800889c:	d1f0      	bne.n	8008880 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	69da      	ldr	r2, [r3, #28]
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6a1b      	ldr	r3, [r3, #32]
 80088a6:	431a      	orrs	r2, r3
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ac:	019b      	lsls	r3, r3, #6
 80088ae:	431a      	orrs	r2, r3
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088b4:	085b      	lsrs	r3, r3, #1
 80088b6:	3b01      	subs	r3, #1
 80088b8:	041b      	lsls	r3, r3, #16
 80088ba:	431a      	orrs	r2, r3
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088c0:	061b      	lsls	r3, r3, #24
 80088c2:	491b      	ldr	r1, [pc, #108]	; (8008930 <HAL_RCC_OscConfig+0x470>)
 80088c4:	4313      	orrs	r3, r2
 80088c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80088c8:	4b1b      	ldr	r3, [pc, #108]	; (8008938 <HAL_RCC_OscConfig+0x478>)
 80088ca:	2201      	movs	r2, #1
 80088cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80088ce:	f7fc fe27 	bl	8005520 <HAL_GetTick>
 80088d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80088d4:	e008      	b.n	80088e8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80088d6:	f7fc fe23 	bl	8005520 <HAL_GetTick>
 80088da:	4602      	mov	r2, r0
 80088dc:	693b      	ldr	r3, [r7, #16]
 80088de:	1ad3      	subs	r3, r2, r3
 80088e0:	2b02      	cmp	r3, #2
 80088e2:	d901      	bls.n	80088e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80088e4:	2303      	movs	r3, #3
 80088e6:	e05c      	b.n	80089a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80088e8:	4b11      	ldr	r3, [pc, #68]	; (8008930 <HAL_RCC_OscConfig+0x470>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d0f0      	beq.n	80088d6 <HAL_RCC_OscConfig+0x416>
 80088f4:	e054      	b.n	80089a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80088f6:	4b10      	ldr	r3, [pc, #64]	; (8008938 <HAL_RCC_OscConfig+0x478>)
 80088f8:	2200      	movs	r2, #0
 80088fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80088fc:	f7fc fe10 	bl	8005520 <HAL_GetTick>
 8008900:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008902:	e008      	b.n	8008916 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008904:	f7fc fe0c 	bl	8005520 <HAL_GetTick>
 8008908:	4602      	mov	r2, r0
 800890a:	693b      	ldr	r3, [r7, #16]
 800890c:	1ad3      	subs	r3, r2, r3
 800890e:	2b02      	cmp	r3, #2
 8008910:	d901      	bls.n	8008916 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008912:	2303      	movs	r3, #3
 8008914:	e045      	b.n	80089a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008916:	4b06      	ldr	r3, [pc, #24]	; (8008930 <HAL_RCC_OscConfig+0x470>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800891e:	2b00      	cmp	r3, #0
 8008920:	d1f0      	bne.n	8008904 <HAL_RCC_OscConfig+0x444>
 8008922:	e03d      	b.n	80089a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	699b      	ldr	r3, [r3, #24]
 8008928:	2b01      	cmp	r3, #1
 800892a:	d107      	bne.n	800893c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800892c:	2301      	movs	r3, #1
 800892e:	e038      	b.n	80089a2 <HAL_RCC_OscConfig+0x4e2>
 8008930:	40023800 	.word	0x40023800
 8008934:	40007000 	.word	0x40007000
 8008938:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800893c:	4b1b      	ldr	r3, [pc, #108]	; (80089ac <HAL_RCC_OscConfig+0x4ec>)
 800893e:	685b      	ldr	r3, [r3, #4]
 8008940:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	699b      	ldr	r3, [r3, #24]
 8008946:	2b01      	cmp	r3, #1
 8008948:	d028      	beq.n	800899c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008954:	429a      	cmp	r2, r3
 8008956:	d121      	bne.n	800899c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008962:	429a      	cmp	r2, r3
 8008964:	d11a      	bne.n	800899c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008966:	68fa      	ldr	r2, [r7, #12]
 8008968:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800896c:	4013      	ands	r3, r2
 800896e:	687a      	ldr	r2, [r7, #4]
 8008970:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008972:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008974:	4293      	cmp	r3, r2
 8008976:	d111      	bne.n	800899c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008982:	085b      	lsrs	r3, r3, #1
 8008984:	3b01      	subs	r3, #1
 8008986:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008988:	429a      	cmp	r2, r3
 800898a:	d107      	bne.n	800899c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008996:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008998:	429a      	cmp	r2, r3
 800899a:	d001      	beq.n	80089a0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800899c:	2301      	movs	r3, #1
 800899e:	e000      	b.n	80089a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80089a0:	2300      	movs	r3, #0
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	3718      	adds	r7, #24
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd80      	pop	{r7, pc}
 80089aa:	bf00      	nop
 80089ac:	40023800 	.word	0x40023800

080089b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b084      	sub	sp, #16
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
 80089b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d101      	bne.n	80089c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80089c0:	2301      	movs	r3, #1
 80089c2:	e0cc      	b.n	8008b5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80089c4:	4b68      	ldr	r3, [pc, #416]	; (8008b68 <HAL_RCC_ClockConfig+0x1b8>)
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f003 0307 	and.w	r3, r3, #7
 80089cc:	683a      	ldr	r2, [r7, #0]
 80089ce:	429a      	cmp	r2, r3
 80089d0:	d90c      	bls.n	80089ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80089d2:	4b65      	ldr	r3, [pc, #404]	; (8008b68 <HAL_RCC_ClockConfig+0x1b8>)
 80089d4:	683a      	ldr	r2, [r7, #0]
 80089d6:	b2d2      	uxtb	r2, r2
 80089d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80089da:	4b63      	ldr	r3, [pc, #396]	; (8008b68 <HAL_RCC_ClockConfig+0x1b8>)
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f003 0307 	and.w	r3, r3, #7
 80089e2:	683a      	ldr	r2, [r7, #0]
 80089e4:	429a      	cmp	r2, r3
 80089e6:	d001      	beq.n	80089ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80089e8:	2301      	movs	r3, #1
 80089ea:	e0b8      	b.n	8008b5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f003 0302 	and.w	r3, r3, #2
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d020      	beq.n	8008a3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f003 0304 	and.w	r3, r3, #4
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d005      	beq.n	8008a10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008a04:	4b59      	ldr	r3, [pc, #356]	; (8008b6c <HAL_RCC_ClockConfig+0x1bc>)
 8008a06:	689b      	ldr	r3, [r3, #8]
 8008a08:	4a58      	ldr	r2, [pc, #352]	; (8008b6c <HAL_RCC_ClockConfig+0x1bc>)
 8008a0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008a0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f003 0308 	and.w	r3, r3, #8
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d005      	beq.n	8008a28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008a1c:	4b53      	ldr	r3, [pc, #332]	; (8008b6c <HAL_RCC_ClockConfig+0x1bc>)
 8008a1e:	689b      	ldr	r3, [r3, #8]
 8008a20:	4a52      	ldr	r2, [pc, #328]	; (8008b6c <HAL_RCC_ClockConfig+0x1bc>)
 8008a22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008a26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008a28:	4b50      	ldr	r3, [pc, #320]	; (8008b6c <HAL_RCC_ClockConfig+0x1bc>)
 8008a2a:	689b      	ldr	r3, [r3, #8]
 8008a2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	689b      	ldr	r3, [r3, #8]
 8008a34:	494d      	ldr	r1, [pc, #308]	; (8008b6c <HAL_RCC_ClockConfig+0x1bc>)
 8008a36:	4313      	orrs	r3, r2
 8008a38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f003 0301 	and.w	r3, r3, #1
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d044      	beq.n	8008ad0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	685b      	ldr	r3, [r3, #4]
 8008a4a:	2b01      	cmp	r3, #1
 8008a4c:	d107      	bne.n	8008a5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008a4e:	4b47      	ldr	r3, [pc, #284]	; (8008b6c <HAL_RCC_ClockConfig+0x1bc>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d119      	bne.n	8008a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008a5a:	2301      	movs	r3, #1
 8008a5c:	e07f      	b.n	8008b5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	685b      	ldr	r3, [r3, #4]
 8008a62:	2b02      	cmp	r3, #2
 8008a64:	d003      	beq.n	8008a6e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008a6a:	2b03      	cmp	r3, #3
 8008a6c:	d107      	bne.n	8008a7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008a6e:	4b3f      	ldr	r3, [pc, #252]	; (8008b6c <HAL_RCC_ClockConfig+0x1bc>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d109      	bne.n	8008a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	e06f      	b.n	8008b5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008a7e:	4b3b      	ldr	r3, [pc, #236]	; (8008b6c <HAL_RCC_ClockConfig+0x1bc>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f003 0302 	and.w	r3, r3, #2
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d101      	bne.n	8008a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	e067      	b.n	8008b5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008a8e:	4b37      	ldr	r3, [pc, #220]	; (8008b6c <HAL_RCC_ClockConfig+0x1bc>)
 8008a90:	689b      	ldr	r3, [r3, #8]
 8008a92:	f023 0203 	bic.w	r2, r3, #3
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	685b      	ldr	r3, [r3, #4]
 8008a9a:	4934      	ldr	r1, [pc, #208]	; (8008b6c <HAL_RCC_ClockConfig+0x1bc>)
 8008a9c:	4313      	orrs	r3, r2
 8008a9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008aa0:	f7fc fd3e 	bl	8005520 <HAL_GetTick>
 8008aa4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008aa6:	e00a      	b.n	8008abe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008aa8:	f7fc fd3a 	bl	8005520 <HAL_GetTick>
 8008aac:	4602      	mov	r2, r0
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	1ad3      	subs	r3, r2, r3
 8008ab2:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	d901      	bls.n	8008abe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008aba:	2303      	movs	r3, #3
 8008abc:	e04f      	b.n	8008b5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008abe:	4b2b      	ldr	r3, [pc, #172]	; (8008b6c <HAL_RCC_ClockConfig+0x1bc>)
 8008ac0:	689b      	ldr	r3, [r3, #8]
 8008ac2:	f003 020c 	and.w	r2, r3, #12
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	685b      	ldr	r3, [r3, #4]
 8008aca:	009b      	lsls	r3, r3, #2
 8008acc:	429a      	cmp	r2, r3
 8008ace:	d1eb      	bne.n	8008aa8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008ad0:	4b25      	ldr	r3, [pc, #148]	; (8008b68 <HAL_RCC_ClockConfig+0x1b8>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f003 0307 	and.w	r3, r3, #7
 8008ad8:	683a      	ldr	r2, [r7, #0]
 8008ada:	429a      	cmp	r2, r3
 8008adc:	d20c      	bcs.n	8008af8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ade:	4b22      	ldr	r3, [pc, #136]	; (8008b68 <HAL_RCC_ClockConfig+0x1b8>)
 8008ae0:	683a      	ldr	r2, [r7, #0]
 8008ae2:	b2d2      	uxtb	r2, r2
 8008ae4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008ae6:	4b20      	ldr	r3, [pc, #128]	; (8008b68 <HAL_RCC_ClockConfig+0x1b8>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f003 0307 	and.w	r3, r3, #7
 8008aee:	683a      	ldr	r2, [r7, #0]
 8008af0:	429a      	cmp	r2, r3
 8008af2:	d001      	beq.n	8008af8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008af4:	2301      	movs	r3, #1
 8008af6:	e032      	b.n	8008b5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f003 0304 	and.w	r3, r3, #4
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d008      	beq.n	8008b16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008b04:	4b19      	ldr	r3, [pc, #100]	; (8008b6c <HAL_RCC_ClockConfig+0x1bc>)
 8008b06:	689b      	ldr	r3, [r3, #8]
 8008b08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	68db      	ldr	r3, [r3, #12]
 8008b10:	4916      	ldr	r1, [pc, #88]	; (8008b6c <HAL_RCC_ClockConfig+0x1bc>)
 8008b12:	4313      	orrs	r3, r2
 8008b14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f003 0308 	and.w	r3, r3, #8
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d009      	beq.n	8008b36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008b22:	4b12      	ldr	r3, [pc, #72]	; (8008b6c <HAL_RCC_ClockConfig+0x1bc>)
 8008b24:	689b      	ldr	r3, [r3, #8]
 8008b26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	691b      	ldr	r3, [r3, #16]
 8008b2e:	00db      	lsls	r3, r3, #3
 8008b30:	490e      	ldr	r1, [pc, #56]	; (8008b6c <HAL_RCC_ClockConfig+0x1bc>)
 8008b32:	4313      	orrs	r3, r2
 8008b34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008b36:	f000 f821 	bl	8008b7c <HAL_RCC_GetSysClockFreq>
 8008b3a:	4602      	mov	r2, r0
 8008b3c:	4b0b      	ldr	r3, [pc, #44]	; (8008b6c <HAL_RCC_ClockConfig+0x1bc>)
 8008b3e:	689b      	ldr	r3, [r3, #8]
 8008b40:	091b      	lsrs	r3, r3, #4
 8008b42:	f003 030f 	and.w	r3, r3, #15
 8008b46:	490a      	ldr	r1, [pc, #40]	; (8008b70 <HAL_RCC_ClockConfig+0x1c0>)
 8008b48:	5ccb      	ldrb	r3, [r1, r3]
 8008b4a:	fa22 f303 	lsr.w	r3, r2, r3
 8008b4e:	4a09      	ldr	r2, [pc, #36]	; (8008b74 <HAL_RCC_ClockConfig+0x1c4>)
 8008b50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008b52:	4b09      	ldr	r3, [pc, #36]	; (8008b78 <HAL_RCC_ClockConfig+0x1c8>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	4618      	mov	r0, r3
 8008b58:	f7fc fc9e 	bl	8005498 <HAL_InitTick>

  return HAL_OK;
 8008b5c:	2300      	movs	r3, #0
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	3710      	adds	r7, #16
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}
 8008b66:	bf00      	nop
 8008b68:	40023c00 	.word	0x40023c00
 8008b6c:	40023800 	.word	0x40023800
 8008b70:	08022648 	.word	0x08022648
 8008b74:	10000004 	.word	0x10000004
 8008b78:	10000008 	.word	0x10000008

08008b7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008b7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008b80:	b094      	sub	sp, #80	; 0x50
 8008b82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008b84:	2300      	movs	r3, #0
 8008b86:	647b      	str	r3, [r7, #68]	; 0x44
 8008b88:	2300      	movs	r3, #0
 8008b8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8008b90:	2300      	movs	r3, #0
 8008b92:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008b94:	4b79      	ldr	r3, [pc, #484]	; (8008d7c <HAL_RCC_GetSysClockFreq+0x200>)
 8008b96:	689b      	ldr	r3, [r3, #8]
 8008b98:	f003 030c 	and.w	r3, r3, #12
 8008b9c:	2b08      	cmp	r3, #8
 8008b9e:	d00d      	beq.n	8008bbc <HAL_RCC_GetSysClockFreq+0x40>
 8008ba0:	2b08      	cmp	r3, #8
 8008ba2:	f200 80e1 	bhi.w	8008d68 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d002      	beq.n	8008bb0 <HAL_RCC_GetSysClockFreq+0x34>
 8008baa:	2b04      	cmp	r3, #4
 8008bac:	d003      	beq.n	8008bb6 <HAL_RCC_GetSysClockFreq+0x3a>
 8008bae:	e0db      	b.n	8008d68 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008bb0:	4b73      	ldr	r3, [pc, #460]	; (8008d80 <HAL_RCC_GetSysClockFreq+0x204>)
 8008bb2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8008bb4:	e0db      	b.n	8008d6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008bb6:	4b73      	ldr	r3, [pc, #460]	; (8008d84 <HAL_RCC_GetSysClockFreq+0x208>)
 8008bb8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008bba:	e0d8      	b.n	8008d6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008bbc:	4b6f      	ldr	r3, [pc, #444]	; (8008d7c <HAL_RCC_GetSysClockFreq+0x200>)
 8008bbe:	685b      	ldr	r3, [r3, #4]
 8008bc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008bc4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008bc6:	4b6d      	ldr	r3, [pc, #436]	; (8008d7c <HAL_RCC_GetSysClockFreq+0x200>)
 8008bc8:	685b      	ldr	r3, [r3, #4]
 8008bca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d063      	beq.n	8008c9a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008bd2:	4b6a      	ldr	r3, [pc, #424]	; (8008d7c <HAL_RCC_GetSysClockFreq+0x200>)
 8008bd4:	685b      	ldr	r3, [r3, #4]
 8008bd6:	099b      	lsrs	r3, r3, #6
 8008bd8:	2200      	movs	r2, #0
 8008bda:	63bb      	str	r3, [r7, #56]	; 0x38
 8008bdc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008be0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008be4:	633b      	str	r3, [r7, #48]	; 0x30
 8008be6:	2300      	movs	r3, #0
 8008be8:	637b      	str	r3, [r7, #52]	; 0x34
 8008bea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008bee:	4622      	mov	r2, r4
 8008bf0:	462b      	mov	r3, r5
 8008bf2:	f04f 0000 	mov.w	r0, #0
 8008bf6:	f04f 0100 	mov.w	r1, #0
 8008bfa:	0159      	lsls	r1, r3, #5
 8008bfc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008c00:	0150      	lsls	r0, r2, #5
 8008c02:	4602      	mov	r2, r0
 8008c04:	460b      	mov	r3, r1
 8008c06:	4621      	mov	r1, r4
 8008c08:	1a51      	subs	r1, r2, r1
 8008c0a:	6139      	str	r1, [r7, #16]
 8008c0c:	4629      	mov	r1, r5
 8008c0e:	eb63 0301 	sbc.w	r3, r3, r1
 8008c12:	617b      	str	r3, [r7, #20]
 8008c14:	f04f 0200 	mov.w	r2, #0
 8008c18:	f04f 0300 	mov.w	r3, #0
 8008c1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008c20:	4659      	mov	r1, fp
 8008c22:	018b      	lsls	r3, r1, #6
 8008c24:	4651      	mov	r1, sl
 8008c26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008c2a:	4651      	mov	r1, sl
 8008c2c:	018a      	lsls	r2, r1, #6
 8008c2e:	4651      	mov	r1, sl
 8008c30:	ebb2 0801 	subs.w	r8, r2, r1
 8008c34:	4659      	mov	r1, fp
 8008c36:	eb63 0901 	sbc.w	r9, r3, r1
 8008c3a:	f04f 0200 	mov.w	r2, #0
 8008c3e:	f04f 0300 	mov.w	r3, #0
 8008c42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008c46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008c4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008c4e:	4690      	mov	r8, r2
 8008c50:	4699      	mov	r9, r3
 8008c52:	4623      	mov	r3, r4
 8008c54:	eb18 0303 	adds.w	r3, r8, r3
 8008c58:	60bb      	str	r3, [r7, #8]
 8008c5a:	462b      	mov	r3, r5
 8008c5c:	eb49 0303 	adc.w	r3, r9, r3
 8008c60:	60fb      	str	r3, [r7, #12]
 8008c62:	f04f 0200 	mov.w	r2, #0
 8008c66:	f04f 0300 	mov.w	r3, #0
 8008c6a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008c6e:	4629      	mov	r1, r5
 8008c70:	024b      	lsls	r3, r1, #9
 8008c72:	4621      	mov	r1, r4
 8008c74:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008c78:	4621      	mov	r1, r4
 8008c7a:	024a      	lsls	r2, r1, #9
 8008c7c:	4610      	mov	r0, r2
 8008c7e:	4619      	mov	r1, r3
 8008c80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c82:	2200      	movs	r2, #0
 8008c84:	62bb      	str	r3, [r7, #40]	; 0x28
 8008c86:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008c88:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008c8c:	f7f7 ff8c 	bl	8000ba8 <__aeabi_uldivmod>
 8008c90:	4602      	mov	r2, r0
 8008c92:	460b      	mov	r3, r1
 8008c94:	4613      	mov	r3, r2
 8008c96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c98:	e058      	b.n	8008d4c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008c9a:	4b38      	ldr	r3, [pc, #224]	; (8008d7c <HAL_RCC_GetSysClockFreq+0x200>)
 8008c9c:	685b      	ldr	r3, [r3, #4]
 8008c9e:	099b      	lsrs	r3, r3, #6
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	4611      	mov	r1, r2
 8008ca6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008caa:	623b      	str	r3, [r7, #32]
 8008cac:	2300      	movs	r3, #0
 8008cae:	627b      	str	r3, [r7, #36]	; 0x24
 8008cb0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008cb4:	4642      	mov	r2, r8
 8008cb6:	464b      	mov	r3, r9
 8008cb8:	f04f 0000 	mov.w	r0, #0
 8008cbc:	f04f 0100 	mov.w	r1, #0
 8008cc0:	0159      	lsls	r1, r3, #5
 8008cc2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008cc6:	0150      	lsls	r0, r2, #5
 8008cc8:	4602      	mov	r2, r0
 8008cca:	460b      	mov	r3, r1
 8008ccc:	4641      	mov	r1, r8
 8008cce:	ebb2 0a01 	subs.w	sl, r2, r1
 8008cd2:	4649      	mov	r1, r9
 8008cd4:	eb63 0b01 	sbc.w	fp, r3, r1
 8008cd8:	f04f 0200 	mov.w	r2, #0
 8008cdc:	f04f 0300 	mov.w	r3, #0
 8008ce0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008ce4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008ce8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008cec:	ebb2 040a 	subs.w	r4, r2, sl
 8008cf0:	eb63 050b 	sbc.w	r5, r3, fp
 8008cf4:	f04f 0200 	mov.w	r2, #0
 8008cf8:	f04f 0300 	mov.w	r3, #0
 8008cfc:	00eb      	lsls	r3, r5, #3
 8008cfe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008d02:	00e2      	lsls	r2, r4, #3
 8008d04:	4614      	mov	r4, r2
 8008d06:	461d      	mov	r5, r3
 8008d08:	4643      	mov	r3, r8
 8008d0a:	18e3      	adds	r3, r4, r3
 8008d0c:	603b      	str	r3, [r7, #0]
 8008d0e:	464b      	mov	r3, r9
 8008d10:	eb45 0303 	adc.w	r3, r5, r3
 8008d14:	607b      	str	r3, [r7, #4]
 8008d16:	f04f 0200 	mov.w	r2, #0
 8008d1a:	f04f 0300 	mov.w	r3, #0
 8008d1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008d22:	4629      	mov	r1, r5
 8008d24:	028b      	lsls	r3, r1, #10
 8008d26:	4621      	mov	r1, r4
 8008d28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008d2c:	4621      	mov	r1, r4
 8008d2e:	028a      	lsls	r2, r1, #10
 8008d30:	4610      	mov	r0, r2
 8008d32:	4619      	mov	r1, r3
 8008d34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d36:	2200      	movs	r2, #0
 8008d38:	61bb      	str	r3, [r7, #24]
 8008d3a:	61fa      	str	r2, [r7, #28]
 8008d3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008d40:	f7f7 ff32 	bl	8000ba8 <__aeabi_uldivmod>
 8008d44:	4602      	mov	r2, r0
 8008d46:	460b      	mov	r3, r1
 8008d48:	4613      	mov	r3, r2
 8008d4a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008d4c:	4b0b      	ldr	r3, [pc, #44]	; (8008d7c <HAL_RCC_GetSysClockFreq+0x200>)
 8008d4e:	685b      	ldr	r3, [r3, #4]
 8008d50:	0c1b      	lsrs	r3, r3, #16
 8008d52:	f003 0303 	and.w	r3, r3, #3
 8008d56:	3301      	adds	r3, #1
 8008d58:	005b      	lsls	r3, r3, #1
 8008d5a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8008d5c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008d5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d64:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008d66:	e002      	b.n	8008d6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008d68:	4b05      	ldr	r3, [pc, #20]	; (8008d80 <HAL_RCC_GetSysClockFreq+0x204>)
 8008d6a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008d6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008d6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	3750      	adds	r7, #80	; 0x50
 8008d74:	46bd      	mov	sp, r7
 8008d76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008d7a:	bf00      	nop
 8008d7c:	40023800 	.word	0x40023800
 8008d80:	00f42400 	.word	0x00f42400
 8008d84:	007a1200 	.word	0x007a1200

08008d88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008d88:	b480      	push	{r7}
 8008d8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008d8c:	4b03      	ldr	r3, [pc, #12]	; (8008d9c <HAL_RCC_GetHCLKFreq+0x14>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
}
 8008d90:	4618      	mov	r0, r3
 8008d92:	46bd      	mov	sp, r7
 8008d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d98:	4770      	bx	lr
 8008d9a:	bf00      	nop
 8008d9c:	10000004 	.word	0x10000004

08008da0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008da4:	f7ff fff0 	bl	8008d88 <HAL_RCC_GetHCLKFreq>
 8008da8:	4602      	mov	r2, r0
 8008daa:	4b05      	ldr	r3, [pc, #20]	; (8008dc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008dac:	689b      	ldr	r3, [r3, #8]
 8008dae:	0a9b      	lsrs	r3, r3, #10
 8008db0:	f003 0307 	and.w	r3, r3, #7
 8008db4:	4903      	ldr	r1, [pc, #12]	; (8008dc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008db6:	5ccb      	ldrb	r3, [r1, r3]
 8008db8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	bd80      	pop	{r7, pc}
 8008dc0:	40023800 	.word	0x40023800
 8008dc4:	08022658 	.word	0x08022658

08008dc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008dcc:	f7ff ffdc 	bl	8008d88 <HAL_RCC_GetHCLKFreq>
 8008dd0:	4602      	mov	r2, r0
 8008dd2:	4b05      	ldr	r3, [pc, #20]	; (8008de8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008dd4:	689b      	ldr	r3, [r3, #8]
 8008dd6:	0b5b      	lsrs	r3, r3, #13
 8008dd8:	f003 0307 	and.w	r3, r3, #7
 8008ddc:	4903      	ldr	r1, [pc, #12]	; (8008dec <HAL_RCC_GetPCLK2Freq+0x24>)
 8008dde:	5ccb      	ldrb	r3, [r1, r3]
 8008de0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	bd80      	pop	{r7, pc}
 8008de8:	40023800 	.word	0x40023800
 8008dec:	08022658 	.word	0x08022658

08008df0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b082      	sub	sp, #8
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d101      	bne.n	8008e02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008dfe:	2301      	movs	r3, #1
 8008e00:	e07b      	b.n	8008efa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d108      	bne.n	8008e1c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	685b      	ldr	r3, [r3, #4]
 8008e0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008e12:	d009      	beq.n	8008e28 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2200      	movs	r2, #0
 8008e18:	61da      	str	r2, [r3, #28]
 8008e1a:	e005      	b.n	8008e28 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2200      	movs	r2, #0
 8008e20:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2200      	movs	r2, #0
 8008e26:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008e34:	b2db      	uxtb	r3, r3
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d106      	bne.n	8008e48 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f7fb fcec 	bl	8004820 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2202      	movs	r2, #2
 8008e4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	681a      	ldr	r2, [r3, #0]
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e5e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	685b      	ldr	r3, [r3, #4]
 8008e64:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	689b      	ldr	r3, [r3, #8]
 8008e6c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008e70:	431a      	orrs	r2, r3
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	68db      	ldr	r3, [r3, #12]
 8008e76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e7a:	431a      	orrs	r2, r3
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	691b      	ldr	r3, [r3, #16]
 8008e80:	f003 0302 	and.w	r3, r3, #2
 8008e84:	431a      	orrs	r2, r3
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	695b      	ldr	r3, [r3, #20]
 8008e8a:	f003 0301 	and.w	r3, r3, #1
 8008e8e:	431a      	orrs	r2, r3
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	699b      	ldr	r3, [r3, #24]
 8008e94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008e98:	431a      	orrs	r2, r3
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	69db      	ldr	r3, [r3, #28]
 8008e9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008ea2:	431a      	orrs	r2, r3
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	6a1b      	ldr	r3, [r3, #32]
 8008ea8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008eac:	ea42 0103 	orr.w	r1, r2, r3
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eb4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	430a      	orrs	r2, r1
 8008ebe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	699b      	ldr	r3, [r3, #24]
 8008ec4:	0c1b      	lsrs	r3, r3, #16
 8008ec6:	f003 0104 	and.w	r1, r3, #4
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ece:	f003 0210 	and.w	r2, r3, #16
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	430a      	orrs	r2, r1
 8008ed8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	69da      	ldr	r2, [r3, #28]
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008ee8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2200      	movs	r2, #0
 8008eee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2201      	movs	r2, #1
 8008ef4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008ef8:	2300      	movs	r3, #0
}
 8008efa:	4618      	mov	r0, r3
 8008efc:	3708      	adds	r7, #8
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}

08008f02 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008f02:	b580      	push	{r7, lr}
 8008f04:	b082      	sub	sp, #8
 8008f06:	af00      	add	r7, sp, #0
 8008f08:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d101      	bne.n	8008f14 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008f10:	2301      	movs	r3, #1
 8008f12:	e041      	b.n	8008f98 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f1a:	b2db      	uxtb	r3, r3
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d106      	bne.n	8008f2e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2200      	movs	r2, #0
 8008f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	f7fb ff69 	bl	8004e00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2202      	movs	r2, #2
 8008f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681a      	ldr	r2, [r3, #0]
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	3304      	adds	r3, #4
 8008f3e:	4619      	mov	r1, r3
 8008f40:	4610      	mov	r0, r2
 8008f42:	f000 fc6f 	bl	8009824 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2201      	movs	r2, #1
 8008f4a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2201      	movs	r2, #1
 8008f52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2201      	movs	r2, #1
 8008f5a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	2201      	movs	r2, #1
 8008f62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2201      	movs	r2, #1
 8008f6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2201      	movs	r2, #1
 8008f72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2201      	movs	r2, #1
 8008f7a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2201      	movs	r2, #1
 8008f82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2201      	movs	r2, #1
 8008f8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2201      	movs	r2, #1
 8008f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008f96:	2300      	movs	r3, #0
}
 8008f98:	4618      	mov	r0, r3
 8008f9a:	3708      	adds	r7, #8
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bd80      	pop	{r7, pc}

08008fa0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008fa0:	b480      	push	{r7}
 8008fa2:	b085      	sub	sp, #20
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fae:	b2db      	uxtb	r3, r3
 8008fb0:	2b01      	cmp	r3, #1
 8008fb2:	d001      	beq.n	8008fb8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	e04e      	b.n	8009056 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2202      	movs	r2, #2
 8008fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	68da      	ldr	r2, [r3, #12]
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f042 0201 	orr.w	r2, r2, #1
 8008fce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	4a23      	ldr	r2, [pc, #140]	; (8009064 <HAL_TIM_Base_Start_IT+0xc4>)
 8008fd6:	4293      	cmp	r3, r2
 8008fd8:	d022      	beq.n	8009020 <HAL_TIM_Base_Start_IT+0x80>
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fe2:	d01d      	beq.n	8009020 <HAL_TIM_Base_Start_IT+0x80>
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	4a1f      	ldr	r2, [pc, #124]	; (8009068 <HAL_TIM_Base_Start_IT+0xc8>)
 8008fea:	4293      	cmp	r3, r2
 8008fec:	d018      	beq.n	8009020 <HAL_TIM_Base_Start_IT+0x80>
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	4a1e      	ldr	r2, [pc, #120]	; (800906c <HAL_TIM_Base_Start_IT+0xcc>)
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	d013      	beq.n	8009020 <HAL_TIM_Base_Start_IT+0x80>
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	4a1c      	ldr	r2, [pc, #112]	; (8009070 <HAL_TIM_Base_Start_IT+0xd0>)
 8008ffe:	4293      	cmp	r3, r2
 8009000:	d00e      	beq.n	8009020 <HAL_TIM_Base_Start_IT+0x80>
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	4a1b      	ldr	r2, [pc, #108]	; (8009074 <HAL_TIM_Base_Start_IT+0xd4>)
 8009008:	4293      	cmp	r3, r2
 800900a:	d009      	beq.n	8009020 <HAL_TIM_Base_Start_IT+0x80>
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	4a19      	ldr	r2, [pc, #100]	; (8009078 <HAL_TIM_Base_Start_IT+0xd8>)
 8009012:	4293      	cmp	r3, r2
 8009014:	d004      	beq.n	8009020 <HAL_TIM_Base_Start_IT+0x80>
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	4a18      	ldr	r2, [pc, #96]	; (800907c <HAL_TIM_Base_Start_IT+0xdc>)
 800901c:	4293      	cmp	r3, r2
 800901e:	d111      	bne.n	8009044 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	689b      	ldr	r3, [r3, #8]
 8009026:	f003 0307 	and.w	r3, r3, #7
 800902a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	2b06      	cmp	r3, #6
 8009030:	d010      	beq.n	8009054 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	681a      	ldr	r2, [r3, #0]
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f042 0201 	orr.w	r2, r2, #1
 8009040:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009042:	e007      	b.n	8009054 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	681a      	ldr	r2, [r3, #0]
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f042 0201 	orr.w	r2, r2, #1
 8009052:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009054:	2300      	movs	r3, #0
}
 8009056:	4618      	mov	r0, r3
 8009058:	3714      	adds	r7, #20
 800905a:	46bd      	mov	sp, r7
 800905c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009060:	4770      	bx	lr
 8009062:	bf00      	nop
 8009064:	40010000 	.word	0x40010000
 8009068:	40000400 	.word	0x40000400
 800906c:	40000800 	.word	0x40000800
 8009070:	40000c00 	.word	0x40000c00
 8009074:	40010400 	.word	0x40010400
 8009078:	40014000 	.word	0x40014000
 800907c:	40001800 	.word	0x40001800

08009080 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b082      	sub	sp, #8
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d101      	bne.n	8009092 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800908e:	2301      	movs	r3, #1
 8009090:	e041      	b.n	8009116 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009098:	b2db      	uxtb	r3, r3
 800909a:	2b00      	cmp	r3, #0
 800909c:	d106      	bne.n	80090ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2200      	movs	r2, #0
 80090a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f7fb fef0 	bl	8004e8c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2202      	movs	r2, #2
 80090b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681a      	ldr	r2, [r3, #0]
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	3304      	adds	r3, #4
 80090bc:	4619      	mov	r1, r3
 80090be:	4610      	mov	r0, r2
 80090c0:	f000 fbb0 	bl	8009824 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2201      	movs	r2, #1
 80090c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2201      	movs	r2, #1
 80090d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2201      	movs	r2, #1
 80090d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2201      	movs	r2, #1
 80090e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2201      	movs	r2, #1
 80090e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2201      	movs	r2, #1
 80090f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2201      	movs	r2, #1
 80090f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2201      	movs	r2, #1
 8009100:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2201      	movs	r2, #1
 8009108:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2201      	movs	r2, #1
 8009110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009114:	2300      	movs	r3, #0
}
 8009116:	4618      	mov	r0, r3
 8009118:	3708      	adds	r7, #8
 800911a:	46bd      	mov	sp, r7
 800911c:	bd80      	pop	{r7, pc}
	...

08009120 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b084      	sub	sp, #16
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
 8009128:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d109      	bne.n	8009144 <HAL_TIM_PWM_Start+0x24>
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009136:	b2db      	uxtb	r3, r3
 8009138:	2b01      	cmp	r3, #1
 800913a:	bf14      	ite	ne
 800913c:	2301      	movne	r3, #1
 800913e:	2300      	moveq	r3, #0
 8009140:	b2db      	uxtb	r3, r3
 8009142:	e022      	b.n	800918a <HAL_TIM_PWM_Start+0x6a>
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	2b04      	cmp	r3, #4
 8009148:	d109      	bne.n	800915e <HAL_TIM_PWM_Start+0x3e>
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009150:	b2db      	uxtb	r3, r3
 8009152:	2b01      	cmp	r3, #1
 8009154:	bf14      	ite	ne
 8009156:	2301      	movne	r3, #1
 8009158:	2300      	moveq	r3, #0
 800915a:	b2db      	uxtb	r3, r3
 800915c:	e015      	b.n	800918a <HAL_TIM_PWM_Start+0x6a>
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	2b08      	cmp	r3, #8
 8009162:	d109      	bne.n	8009178 <HAL_TIM_PWM_Start+0x58>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800916a:	b2db      	uxtb	r3, r3
 800916c:	2b01      	cmp	r3, #1
 800916e:	bf14      	ite	ne
 8009170:	2301      	movne	r3, #1
 8009172:	2300      	moveq	r3, #0
 8009174:	b2db      	uxtb	r3, r3
 8009176:	e008      	b.n	800918a <HAL_TIM_PWM_Start+0x6a>
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800917e:	b2db      	uxtb	r3, r3
 8009180:	2b01      	cmp	r3, #1
 8009182:	bf14      	ite	ne
 8009184:	2301      	movne	r3, #1
 8009186:	2300      	moveq	r3, #0
 8009188:	b2db      	uxtb	r3, r3
 800918a:	2b00      	cmp	r3, #0
 800918c:	d001      	beq.n	8009192 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800918e:	2301      	movs	r3, #1
 8009190:	e07c      	b.n	800928c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d104      	bne.n	80091a2 <HAL_TIM_PWM_Start+0x82>
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2202      	movs	r2, #2
 800919c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80091a0:	e013      	b.n	80091ca <HAL_TIM_PWM_Start+0xaa>
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	2b04      	cmp	r3, #4
 80091a6:	d104      	bne.n	80091b2 <HAL_TIM_PWM_Start+0x92>
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2202      	movs	r2, #2
 80091ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80091b0:	e00b      	b.n	80091ca <HAL_TIM_PWM_Start+0xaa>
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	2b08      	cmp	r3, #8
 80091b6:	d104      	bne.n	80091c2 <HAL_TIM_PWM_Start+0xa2>
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2202      	movs	r2, #2
 80091bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80091c0:	e003      	b.n	80091ca <HAL_TIM_PWM_Start+0xaa>
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2202      	movs	r2, #2
 80091c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	2201      	movs	r2, #1
 80091d0:	6839      	ldr	r1, [r7, #0]
 80091d2:	4618      	mov	r0, r3
 80091d4:	f000 fe10 	bl	8009df8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	4a2d      	ldr	r2, [pc, #180]	; (8009294 <HAL_TIM_PWM_Start+0x174>)
 80091de:	4293      	cmp	r3, r2
 80091e0:	d004      	beq.n	80091ec <HAL_TIM_PWM_Start+0xcc>
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	4a2c      	ldr	r2, [pc, #176]	; (8009298 <HAL_TIM_PWM_Start+0x178>)
 80091e8:	4293      	cmp	r3, r2
 80091ea:	d101      	bne.n	80091f0 <HAL_TIM_PWM_Start+0xd0>
 80091ec:	2301      	movs	r3, #1
 80091ee:	e000      	b.n	80091f2 <HAL_TIM_PWM_Start+0xd2>
 80091f0:	2300      	movs	r3, #0
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d007      	beq.n	8009206 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009204:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	4a22      	ldr	r2, [pc, #136]	; (8009294 <HAL_TIM_PWM_Start+0x174>)
 800920c:	4293      	cmp	r3, r2
 800920e:	d022      	beq.n	8009256 <HAL_TIM_PWM_Start+0x136>
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009218:	d01d      	beq.n	8009256 <HAL_TIM_PWM_Start+0x136>
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	4a1f      	ldr	r2, [pc, #124]	; (800929c <HAL_TIM_PWM_Start+0x17c>)
 8009220:	4293      	cmp	r3, r2
 8009222:	d018      	beq.n	8009256 <HAL_TIM_PWM_Start+0x136>
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	4a1d      	ldr	r2, [pc, #116]	; (80092a0 <HAL_TIM_PWM_Start+0x180>)
 800922a:	4293      	cmp	r3, r2
 800922c:	d013      	beq.n	8009256 <HAL_TIM_PWM_Start+0x136>
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	4a1c      	ldr	r2, [pc, #112]	; (80092a4 <HAL_TIM_PWM_Start+0x184>)
 8009234:	4293      	cmp	r3, r2
 8009236:	d00e      	beq.n	8009256 <HAL_TIM_PWM_Start+0x136>
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	4a16      	ldr	r2, [pc, #88]	; (8009298 <HAL_TIM_PWM_Start+0x178>)
 800923e:	4293      	cmp	r3, r2
 8009240:	d009      	beq.n	8009256 <HAL_TIM_PWM_Start+0x136>
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	4a18      	ldr	r2, [pc, #96]	; (80092a8 <HAL_TIM_PWM_Start+0x188>)
 8009248:	4293      	cmp	r3, r2
 800924a:	d004      	beq.n	8009256 <HAL_TIM_PWM_Start+0x136>
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	4a16      	ldr	r2, [pc, #88]	; (80092ac <HAL_TIM_PWM_Start+0x18c>)
 8009252:	4293      	cmp	r3, r2
 8009254:	d111      	bne.n	800927a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	689b      	ldr	r3, [r3, #8]
 800925c:	f003 0307 	and.w	r3, r3, #7
 8009260:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	2b06      	cmp	r3, #6
 8009266:	d010      	beq.n	800928a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	681a      	ldr	r2, [r3, #0]
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f042 0201 	orr.w	r2, r2, #1
 8009276:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009278:	e007      	b.n	800928a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	681a      	ldr	r2, [r3, #0]
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f042 0201 	orr.w	r2, r2, #1
 8009288:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800928a:	2300      	movs	r3, #0
}
 800928c:	4618      	mov	r0, r3
 800928e:	3710      	adds	r7, #16
 8009290:	46bd      	mov	sp, r7
 8009292:	bd80      	pop	{r7, pc}
 8009294:	40010000 	.word	0x40010000
 8009298:	40010400 	.word	0x40010400
 800929c:	40000400 	.word	0x40000400
 80092a0:	40000800 	.word	0x40000800
 80092a4:	40000c00 	.word	0x40000c00
 80092a8:	40014000 	.word	0x40014000
 80092ac:	40001800 	.word	0x40001800

080092b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b082      	sub	sp, #8
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	691b      	ldr	r3, [r3, #16]
 80092be:	f003 0302 	and.w	r3, r3, #2
 80092c2:	2b02      	cmp	r3, #2
 80092c4:	d122      	bne.n	800930c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	68db      	ldr	r3, [r3, #12]
 80092cc:	f003 0302 	and.w	r3, r3, #2
 80092d0:	2b02      	cmp	r3, #2
 80092d2:	d11b      	bne.n	800930c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f06f 0202 	mvn.w	r2, #2
 80092dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2201      	movs	r2, #1
 80092e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	699b      	ldr	r3, [r3, #24]
 80092ea:	f003 0303 	and.w	r3, r3, #3
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d003      	beq.n	80092fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f000 fa77 	bl	80097e6 <HAL_TIM_IC_CaptureCallback>
 80092f8:	e005      	b.n	8009306 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f000 fa69 	bl	80097d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009300:	6878      	ldr	r0, [r7, #4]
 8009302:	f000 fa7a 	bl	80097fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2200      	movs	r2, #0
 800930a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	691b      	ldr	r3, [r3, #16]
 8009312:	f003 0304 	and.w	r3, r3, #4
 8009316:	2b04      	cmp	r3, #4
 8009318:	d122      	bne.n	8009360 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	68db      	ldr	r3, [r3, #12]
 8009320:	f003 0304 	and.w	r3, r3, #4
 8009324:	2b04      	cmp	r3, #4
 8009326:	d11b      	bne.n	8009360 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f06f 0204 	mvn.w	r2, #4
 8009330:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2202      	movs	r2, #2
 8009336:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	699b      	ldr	r3, [r3, #24]
 800933e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009342:	2b00      	cmp	r3, #0
 8009344:	d003      	beq.n	800934e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f000 fa4d 	bl	80097e6 <HAL_TIM_IC_CaptureCallback>
 800934c:	e005      	b.n	800935a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	f000 fa3f 	bl	80097d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009354:	6878      	ldr	r0, [r7, #4]
 8009356:	f000 fa50 	bl	80097fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	2200      	movs	r2, #0
 800935e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	691b      	ldr	r3, [r3, #16]
 8009366:	f003 0308 	and.w	r3, r3, #8
 800936a:	2b08      	cmp	r3, #8
 800936c:	d122      	bne.n	80093b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	68db      	ldr	r3, [r3, #12]
 8009374:	f003 0308 	and.w	r3, r3, #8
 8009378:	2b08      	cmp	r3, #8
 800937a:	d11b      	bne.n	80093b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	f06f 0208 	mvn.w	r2, #8
 8009384:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2204      	movs	r2, #4
 800938a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	69db      	ldr	r3, [r3, #28]
 8009392:	f003 0303 	and.w	r3, r3, #3
 8009396:	2b00      	cmp	r3, #0
 8009398:	d003      	beq.n	80093a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800939a:	6878      	ldr	r0, [r7, #4]
 800939c:	f000 fa23 	bl	80097e6 <HAL_TIM_IC_CaptureCallback>
 80093a0:	e005      	b.n	80093ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f000 fa15 	bl	80097d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f000 fa26 	bl	80097fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2200      	movs	r2, #0
 80093b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	691b      	ldr	r3, [r3, #16]
 80093ba:	f003 0310 	and.w	r3, r3, #16
 80093be:	2b10      	cmp	r3, #16
 80093c0:	d122      	bne.n	8009408 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	68db      	ldr	r3, [r3, #12]
 80093c8:	f003 0310 	and.w	r3, r3, #16
 80093cc:	2b10      	cmp	r3, #16
 80093ce:	d11b      	bne.n	8009408 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f06f 0210 	mvn.w	r2, #16
 80093d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2208      	movs	r2, #8
 80093de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	69db      	ldr	r3, [r3, #28]
 80093e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d003      	beq.n	80093f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f000 f9f9 	bl	80097e6 <HAL_TIM_IC_CaptureCallback>
 80093f4:	e005      	b.n	8009402 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f000 f9eb 	bl	80097d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093fc:	6878      	ldr	r0, [r7, #4]
 80093fe:	f000 f9fc 	bl	80097fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2200      	movs	r2, #0
 8009406:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	691b      	ldr	r3, [r3, #16]
 800940e:	f003 0301 	and.w	r3, r3, #1
 8009412:	2b01      	cmp	r3, #1
 8009414:	d10e      	bne.n	8009434 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	68db      	ldr	r3, [r3, #12]
 800941c:	f003 0301 	and.w	r3, r3, #1
 8009420:	2b01      	cmp	r3, #1
 8009422:	d107      	bne.n	8009434 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f06f 0201 	mvn.w	r2, #1
 800942c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f7fb f90f 	bl	8004652 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	691b      	ldr	r3, [r3, #16]
 800943a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800943e:	2b80      	cmp	r3, #128	; 0x80
 8009440:	d10e      	bne.n	8009460 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	68db      	ldr	r3, [r3, #12]
 8009448:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800944c:	2b80      	cmp	r3, #128	; 0x80
 800944e:	d107      	bne.n	8009460 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009458:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f000 fdca 	bl	8009ff4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	691b      	ldr	r3, [r3, #16]
 8009466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800946a:	2b40      	cmp	r3, #64	; 0x40
 800946c:	d10e      	bne.n	800948c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	68db      	ldr	r3, [r3, #12]
 8009474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009478:	2b40      	cmp	r3, #64	; 0x40
 800947a:	d107      	bne.n	800948c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009484:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f000 f9c1 	bl	800980e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	691b      	ldr	r3, [r3, #16]
 8009492:	f003 0320 	and.w	r3, r3, #32
 8009496:	2b20      	cmp	r3, #32
 8009498:	d10e      	bne.n	80094b8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	68db      	ldr	r3, [r3, #12]
 80094a0:	f003 0320 	and.w	r3, r3, #32
 80094a4:	2b20      	cmp	r3, #32
 80094a6:	d107      	bne.n	80094b8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f06f 0220 	mvn.w	r2, #32
 80094b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f000 fd94 	bl	8009fe0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80094b8:	bf00      	nop
 80094ba:	3708      	adds	r7, #8
 80094bc:	46bd      	mov	sp, r7
 80094be:	bd80      	pop	{r7, pc}

080094c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b086      	sub	sp, #24
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	60f8      	str	r0, [r7, #12]
 80094c8:	60b9      	str	r1, [r7, #8]
 80094ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80094cc:	2300      	movs	r3, #0
 80094ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80094d6:	2b01      	cmp	r3, #1
 80094d8:	d101      	bne.n	80094de <HAL_TIM_PWM_ConfigChannel+0x1e>
 80094da:	2302      	movs	r3, #2
 80094dc:	e0ae      	b.n	800963c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	2201      	movs	r2, #1
 80094e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	2b0c      	cmp	r3, #12
 80094ea:	f200 809f 	bhi.w	800962c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80094ee:	a201      	add	r2, pc, #4	; (adr r2, 80094f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80094f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094f4:	08009529 	.word	0x08009529
 80094f8:	0800962d 	.word	0x0800962d
 80094fc:	0800962d 	.word	0x0800962d
 8009500:	0800962d 	.word	0x0800962d
 8009504:	08009569 	.word	0x08009569
 8009508:	0800962d 	.word	0x0800962d
 800950c:	0800962d 	.word	0x0800962d
 8009510:	0800962d 	.word	0x0800962d
 8009514:	080095ab 	.word	0x080095ab
 8009518:	0800962d 	.word	0x0800962d
 800951c:	0800962d 	.word	0x0800962d
 8009520:	0800962d 	.word	0x0800962d
 8009524:	080095eb 	.word	0x080095eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	68b9      	ldr	r1, [r7, #8]
 800952e:	4618      	mov	r0, r3
 8009530:	f000 fa18 	bl	8009964 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	699a      	ldr	r2, [r3, #24]
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	f042 0208 	orr.w	r2, r2, #8
 8009542:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	699a      	ldr	r2, [r3, #24]
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f022 0204 	bic.w	r2, r2, #4
 8009552:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	6999      	ldr	r1, [r3, #24]
 800955a:	68bb      	ldr	r3, [r7, #8]
 800955c:	691a      	ldr	r2, [r3, #16]
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	430a      	orrs	r2, r1
 8009564:	619a      	str	r2, [r3, #24]
      break;
 8009566:	e064      	b.n	8009632 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	68b9      	ldr	r1, [r7, #8]
 800956e:	4618      	mov	r0, r3
 8009570:	f000 fa68 	bl	8009a44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	699a      	ldr	r2, [r3, #24]
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009582:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	699a      	ldr	r2, [r3, #24]
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009592:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	6999      	ldr	r1, [r3, #24]
 800959a:	68bb      	ldr	r3, [r7, #8]
 800959c:	691b      	ldr	r3, [r3, #16]
 800959e:	021a      	lsls	r2, r3, #8
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	430a      	orrs	r2, r1
 80095a6:	619a      	str	r2, [r3, #24]
      break;
 80095a8:	e043      	b.n	8009632 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	68b9      	ldr	r1, [r7, #8]
 80095b0:	4618      	mov	r0, r3
 80095b2:	f000 fabd 	bl	8009b30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	69da      	ldr	r2, [r3, #28]
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	f042 0208 	orr.w	r2, r2, #8
 80095c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	69da      	ldr	r2, [r3, #28]
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	f022 0204 	bic.w	r2, r2, #4
 80095d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	69d9      	ldr	r1, [r3, #28]
 80095dc:	68bb      	ldr	r3, [r7, #8]
 80095de:	691a      	ldr	r2, [r3, #16]
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	430a      	orrs	r2, r1
 80095e6:	61da      	str	r2, [r3, #28]
      break;
 80095e8:	e023      	b.n	8009632 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	68b9      	ldr	r1, [r7, #8]
 80095f0:	4618      	mov	r0, r3
 80095f2:	f000 fb11 	bl	8009c18 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	69da      	ldr	r2, [r3, #28]
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009604:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	69da      	ldr	r2, [r3, #28]
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009614:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	69d9      	ldr	r1, [r3, #28]
 800961c:	68bb      	ldr	r3, [r7, #8]
 800961e:	691b      	ldr	r3, [r3, #16]
 8009620:	021a      	lsls	r2, r3, #8
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	430a      	orrs	r2, r1
 8009628:	61da      	str	r2, [r3, #28]
      break;
 800962a:	e002      	b.n	8009632 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800962c:	2301      	movs	r3, #1
 800962e:	75fb      	strb	r3, [r7, #23]
      break;
 8009630:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	2200      	movs	r2, #0
 8009636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800963a:	7dfb      	ldrb	r3, [r7, #23]
}
 800963c:	4618      	mov	r0, r3
 800963e:	3718      	adds	r7, #24
 8009640:	46bd      	mov	sp, r7
 8009642:	bd80      	pop	{r7, pc}

08009644 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b084      	sub	sp, #16
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
 800964c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800964e:	2300      	movs	r3, #0
 8009650:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009658:	2b01      	cmp	r3, #1
 800965a:	d101      	bne.n	8009660 <HAL_TIM_ConfigClockSource+0x1c>
 800965c:	2302      	movs	r3, #2
 800965e:	e0b4      	b.n	80097ca <HAL_TIM_ConfigClockSource+0x186>
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2201      	movs	r2, #1
 8009664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2202      	movs	r2, #2
 800966c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	689b      	ldr	r3, [r3, #8]
 8009676:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009678:	68bb      	ldr	r3, [r7, #8]
 800967a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800967e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009680:	68bb      	ldr	r3, [r7, #8]
 8009682:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009686:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	68ba      	ldr	r2, [r7, #8]
 800968e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009698:	d03e      	beq.n	8009718 <HAL_TIM_ConfigClockSource+0xd4>
 800969a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800969e:	f200 8087 	bhi.w	80097b0 <HAL_TIM_ConfigClockSource+0x16c>
 80096a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096a6:	f000 8086 	beq.w	80097b6 <HAL_TIM_ConfigClockSource+0x172>
 80096aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096ae:	d87f      	bhi.n	80097b0 <HAL_TIM_ConfigClockSource+0x16c>
 80096b0:	2b70      	cmp	r3, #112	; 0x70
 80096b2:	d01a      	beq.n	80096ea <HAL_TIM_ConfigClockSource+0xa6>
 80096b4:	2b70      	cmp	r3, #112	; 0x70
 80096b6:	d87b      	bhi.n	80097b0 <HAL_TIM_ConfigClockSource+0x16c>
 80096b8:	2b60      	cmp	r3, #96	; 0x60
 80096ba:	d050      	beq.n	800975e <HAL_TIM_ConfigClockSource+0x11a>
 80096bc:	2b60      	cmp	r3, #96	; 0x60
 80096be:	d877      	bhi.n	80097b0 <HAL_TIM_ConfigClockSource+0x16c>
 80096c0:	2b50      	cmp	r3, #80	; 0x50
 80096c2:	d03c      	beq.n	800973e <HAL_TIM_ConfigClockSource+0xfa>
 80096c4:	2b50      	cmp	r3, #80	; 0x50
 80096c6:	d873      	bhi.n	80097b0 <HAL_TIM_ConfigClockSource+0x16c>
 80096c8:	2b40      	cmp	r3, #64	; 0x40
 80096ca:	d058      	beq.n	800977e <HAL_TIM_ConfigClockSource+0x13a>
 80096cc:	2b40      	cmp	r3, #64	; 0x40
 80096ce:	d86f      	bhi.n	80097b0 <HAL_TIM_ConfigClockSource+0x16c>
 80096d0:	2b30      	cmp	r3, #48	; 0x30
 80096d2:	d064      	beq.n	800979e <HAL_TIM_ConfigClockSource+0x15a>
 80096d4:	2b30      	cmp	r3, #48	; 0x30
 80096d6:	d86b      	bhi.n	80097b0 <HAL_TIM_ConfigClockSource+0x16c>
 80096d8:	2b20      	cmp	r3, #32
 80096da:	d060      	beq.n	800979e <HAL_TIM_ConfigClockSource+0x15a>
 80096dc:	2b20      	cmp	r3, #32
 80096de:	d867      	bhi.n	80097b0 <HAL_TIM_ConfigClockSource+0x16c>
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d05c      	beq.n	800979e <HAL_TIM_ConfigClockSource+0x15a>
 80096e4:	2b10      	cmp	r3, #16
 80096e6:	d05a      	beq.n	800979e <HAL_TIM_ConfigClockSource+0x15a>
 80096e8:	e062      	b.n	80097b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6818      	ldr	r0, [r3, #0]
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	6899      	ldr	r1, [r3, #8]
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	685a      	ldr	r2, [r3, #4]
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	68db      	ldr	r3, [r3, #12]
 80096fa:	f000 fb5d 	bl	8009db8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	689b      	ldr	r3, [r3, #8]
 8009704:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009706:	68bb      	ldr	r3, [r7, #8]
 8009708:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800970c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	68ba      	ldr	r2, [r7, #8]
 8009714:	609a      	str	r2, [r3, #8]
      break;
 8009716:	e04f      	b.n	80097b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	6818      	ldr	r0, [r3, #0]
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	6899      	ldr	r1, [r3, #8]
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	685a      	ldr	r2, [r3, #4]
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	68db      	ldr	r3, [r3, #12]
 8009728:	f000 fb46 	bl	8009db8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	689a      	ldr	r2, [r3, #8]
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800973a:	609a      	str	r2, [r3, #8]
      break;
 800973c:	e03c      	b.n	80097b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	6818      	ldr	r0, [r3, #0]
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	6859      	ldr	r1, [r3, #4]
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	68db      	ldr	r3, [r3, #12]
 800974a:	461a      	mov	r2, r3
 800974c:	f000 faba 	bl	8009cc4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	2150      	movs	r1, #80	; 0x50
 8009756:	4618      	mov	r0, r3
 8009758:	f000 fb13 	bl	8009d82 <TIM_ITRx_SetConfig>
      break;
 800975c:	e02c      	b.n	80097b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6818      	ldr	r0, [r3, #0]
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	6859      	ldr	r1, [r3, #4]
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	68db      	ldr	r3, [r3, #12]
 800976a:	461a      	mov	r2, r3
 800976c:	f000 fad9 	bl	8009d22 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	2160      	movs	r1, #96	; 0x60
 8009776:	4618      	mov	r0, r3
 8009778:	f000 fb03 	bl	8009d82 <TIM_ITRx_SetConfig>
      break;
 800977c:	e01c      	b.n	80097b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	6818      	ldr	r0, [r3, #0]
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	6859      	ldr	r1, [r3, #4]
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	68db      	ldr	r3, [r3, #12]
 800978a:	461a      	mov	r2, r3
 800978c:	f000 fa9a 	bl	8009cc4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	2140      	movs	r1, #64	; 0x40
 8009796:	4618      	mov	r0, r3
 8009798:	f000 faf3 	bl	8009d82 <TIM_ITRx_SetConfig>
      break;
 800979c:	e00c      	b.n	80097b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681a      	ldr	r2, [r3, #0]
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	4619      	mov	r1, r3
 80097a8:	4610      	mov	r0, r2
 80097aa:	f000 faea 	bl	8009d82 <TIM_ITRx_SetConfig>
      break;
 80097ae:	e003      	b.n	80097b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80097b0:	2301      	movs	r3, #1
 80097b2:	73fb      	strb	r3, [r7, #15]
      break;
 80097b4:	e000      	b.n	80097b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80097b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2201      	movs	r2, #1
 80097bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2200      	movs	r2, #0
 80097c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80097c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	3710      	adds	r7, #16
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bd80      	pop	{r7, pc}

080097d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80097d2:	b480      	push	{r7}
 80097d4:	b083      	sub	sp, #12
 80097d6:	af00      	add	r7, sp, #0
 80097d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80097da:	bf00      	nop
 80097dc:	370c      	adds	r7, #12
 80097de:	46bd      	mov	sp, r7
 80097e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e4:	4770      	bx	lr

080097e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80097e6:	b480      	push	{r7}
 80097e8:	b083      	sub	sp, #12
 80097ea:	af00      	add	r7, sp, #0
 80097ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80097ee:	bf00      	nop
 80097f0:	370c      	adds	r7, #12
 80097f2:	46bd      	mov	sp, r7
 80097f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f8:	4770      	bx	lr

080097fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80097fa:	b480      	push	{r7}
 80097fc:	b083      	sub	sp, #12
 80097fe:	af00      	add	r7, sp, #0
 8009800:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009802:	bf00      	nop
 8009804:	370c      	adds	r7, #12
 8009806:	46bd      	mov	sp, r7
 8009808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980c:	4770      	bx	lr

0800980e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800980e:	b480      	push	{r7}
 8009810:	b083      	sub	sp, #12
 8009812:	af00      	add	r7, sp, #0
 8009814:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009816:	bf00      	nop
 8009818:	370c      	adds	r7, #12
 800981a:	46bd      	mov	sp, r7
 800981c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009820:	4770      	bx	lr
	...

08009824 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009824:	b480      	push	{r7}
 8009826:	b085      	sub	sp, #20
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
 800982c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	4a40      	ldr	r2, [pc, #256]	; (8009938 <TIM_Base_SetConfig+0x114>)
 8009838:	4293      	cmp	r3, r2
 800983a:	d013      	beq.n	8009864 <TIM_Base_SetConfig+0x40>
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009842:	d00f      	beq.n	8009864 <TIM_Base_SetConfig+0x40>
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	4a3d      	ldr	r2, [pc, #244]	; (800993c <TIM_Base_SetConfig+0x118>)
 8009848:	4293      	cmp	r3, r2
 800984a:	d00b      	beq.n	8009864 <TIM_Base_SetConfig+0x40>
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	4a3c      	ldr	r2, [pc, #240]	; (8009940 <TIM_Base_SetConfig+0x11c>)
 8009850:	4293      	cmp	r3, r2
 8009852:	d007      	beq.n	8009864 <TIM_Base_SetConfig+0x40>
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	4a3b      	ldr	r2, [pc, #236]	; (8009944 <TIM_Base_SetConfig+0x120>)
 8009858:	4293      	cmp	r3, r2
 800985a:	d003      	beq.n	8009864 <TIM_Base_SetConfig+0x40>
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	4a3a      	ldr	r2, [pc, #232]	; (8009948 <TIM_Base_SetConfig+0x124>)
 8009860:	4293      	cmp	r3, r2
 8009862:	d108      	bne.n	8009876 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800986a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	685b      	ldr	r3, [r3, #4]
 8009870:	68fa      	ldr	r2, [r7, #12]
 8009872:	4313      	orrs	r3, r2
 8009874:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	4a2f      	ldr	r2, [pc, #188]	; (8009938 <TIM_Base_SetConfig+0x114>)
 800987a:	4293      	cmp	r3, r2
 800987c:	d02b      	beq.n	80098d6 <TIM_Base_SetConfig+0xb2>
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009884:	d027      	beq.n	80098d6 <TIM_Base_SetConfig+0xb2>
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	4a2c      	ldr	r2, [pc, #176]	; (800993c <TIM_Base_SetConfig+0x118>)
 800988a:	4293      	cmp	r3, r2
 800988c:	d023      	beq.n	80098d6 <TIM_Base_SetConfig+0xb2>
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	4a2b      	ldr	r2, [pc, #172]	; (8009940 <TIM_Base_SetConfig+0x11c>)
 8009892:	4293      	cmp	r3, r2
 8009894:	d01f      	beq.n	80098d6 <TIM_Base_SetConfig+0xb2>
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	4a2a      	ldr	r2, [pc, #168]	; (8009944 <TIM_Base_SetConfig+0x120>)
 800989a:	4293      	cmp	r3, r2
 800989c:	d01b      	beq.n	80098d6 <TIM_Base_SetConfig+0xb2>
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	4a29      	ldr	r2, [pc, #164]	; (8009948 <TIM_Base_SetConfig+0x124>)
 80098a2:	4293      	cmp	r3, r2
 80098a4:	d017      	beq.n	80098d6 <TIM_Base_SetConfig+0xb2>
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	4a28      	ldr	r2, [pc, #160]	; (800994c <TIM_Base_SetConfig+0x128>)
 80098aa:	4293      	cmp	r3, r2
 80098ac:	d013      	beq.n	80098d6 <TIM_Base_SetConfig+0xb2>
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	4a27      	ldr	r2, [pc, #156]	; (8009950 <TIM_Base_SetConfig+0x12c>)
 80098b2:	4293      	cmp	r3, r2
 80098b4:	d00f      	beq.n	80098d6 <TIM_Base_SetConfig+0xb2>
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	4a26      	ldr	r2, [pc, #152]	; (8009954 <TIM_Base_SetConfig+0x130>)
 80098ba:	4293      	cmp	r3, r2
 80098bc:	d00b      	beq.n	80098d6 <TIM_Base_SetConfig+0xb2>
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	4a25      	ldr	r2, [pc, #148]	; (8009958 <TIM_Base_SetConfig+0x134>)
 80098c2:	4293      	cmp	r3, r2
 80098c4:	d007      	beq.n	80098d6 <TIM_Base_SetConfig+0xb2>
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	4a24      	ldr	r2, [pc, #144]	; (800995c <TIM_Base_SetConfig+0x138>)
 80098ca:	4293      	cmp	r3, r2
 80098cc:	d003      	beq.n	80098d6 <TIM_Base_SetConfig+0xb2>
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	4a23      	ldr	r2, [pc, #140]	; (8009960 <TIM_Base_SetConfig+0x13c>)
 80098d2:	4293      	cmp	r3, r2
 80098d4:	d108      	bne.n	80098e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80098dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	68db      	ldr	r3, [r3, #12]
 80098e2:	68fa      	ldr	r2, [r7, #12]
 80098e4:	4313      	orrs	r3, r2
 80098e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	695b      	ldr	r3, [r3, #20]
 80098f2:	4313      	orrs	r3, r2
 80098f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	68fa      	ldr	r2, [r7, #12]
 80098fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	689a      	ldr	r2, [r3, #8]
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	681a      	ldr	r2, [r3, #0]
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	4a0a      	ldr	r2, [pc, #40]	; (8009938 <TIM_Base_SetConfig+0x114>)
 8009910:	4293      	cmp	r3, r2
 8009912:	d003      	beq.n	800991c <TIM_Base_SetConfig+0xf8>
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	4a0c      	ldr	r2, [pc, #48]	; (8009948 <TIM_Base_SetConfig+0x124>)
 8009918:	4293      	cmp	r3, r2
 800991a:	d103      	bne.n	8009924 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	691a      	ldr	r2, [r3, #16]
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2201      	movs	r2, #1
 8009928:	615a      	str	r2, [r3, #20]
}
 800992a:	bf00      	nop
 800992c:	3714      	adds	r7, #20
 800992e:	46bd      	mov	sp, r7
 8009930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009934:	4770      	bx	lr
 8009936:	bf00      	nop
 8009938:	40010000 	.word	0x40010000
 800993c:	40000400 	.word	0x40000400
 8009940:	40000800 	.word	0x40000800
 8009944:	40000c00 	.word	0x40000c00
 8009948:	40010400 	.word	0x40010400
 800994c:	40014000 	.word	0x40014000
 8009950:	40014400 	.word	0x40014400
 8009954:	40014800 	.word	0x40014800
 8009958:	40001800 	.word	0x40001800
 800995c:	40001c00 	.word	0x40001c00
 8009960:	40002000 	.word	0x40002000

08009964 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009964:	b480      	push	{r7}
 8009966:	b087      	sub	sp, #28
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
 800996c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	6a1b      	ldr	r3, [r3, #32]
 8009972:	f023 0201 	bic.w	r2, r3, #1
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	6a1b      	ldr	r3, [r3, #32]
 800997e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	685b      	ldr	r3, [r3, #4]
 8009984:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	699b      	ldr	r3, [r3, #24]
 800998a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009992:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	f023 0303 	bic.w	r3, r3, #3
 800999a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800999c:	683b      	ldr	r3, [r7, #0]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	68fa      	ldr	r2, [r7, #12]
 80099a2:	4313      	orrs	r3, r2
 80099a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80099a6:	697b      	ldr	r3, [r7, #20]
 80099a8:	f023 0302 	bic.w	r3, r3, #2
 80099ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	689b      	ldr	r3, [r3, #8]
 80099b2:	697a      	ldr	r2, [r7, #20]
 80099b4:	4313      	orrs	r3, r2
 80099b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	4a20      	ldr	r2, [pc, #128]	; (8009a3c <TIM_OC1_SetConfig+0xd8>)
 80099bc:	4293      	cmp	r3, r2
 80099be:	d003      	beq.n	80099c8 <TIM_OC1_SetConfig+0x64>
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	4a1f      	ldr	r2, [pc, #124]	; (8009a40 <TIM_OC1_SetConfig+0xdc>)
 80099c4:	4293      	cmp	r3, r2
 80099c6:	d10c      	bne.n	80099e2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80099c8:	697b      	ldr	r3, [r7, #20]
 80099ca:	f023 0308 	bic.w	r3, r3, #8
 80099ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	68db      	ldr	r3, [r3, #12]
 80099d4:	697a      	ldr	r2, [r7, #20]
 80099d6:	4313      	orrs	r3, r2
 80099d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80099da:	697b      	ldr	r3, [r7, #20]
 80099dc:	f023 0304 	bic.w	r3, r3, #4
 80099e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	4a15      	ldr	r2, [pc, #84]	; (8009a3c <TIM_OC1_SetConfig+0xd8>)
 80099e6:	4293      	cmp	r3, r2
 80099e8:	d003      	beq.n	80099f2 <TIM_OC1_SetConfig+0x8e>
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	4a14      	ldr	r2, [pc, #80]	; (8009a40 <TIM_OC1_SetConfig+0xdc>)
 80099ee:	4293      	cmp	r3, r2
 80099f0:	d111      	bne.n	8009a16 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80099f2:	693b      	ldr	r3, [r7, #16]
 80099f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80099f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80099fa:	693b      	ldr	r3, [r7, #16]
 80099fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009a00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	695b      	ldr	r3, [r3, #20]
 8009a06:	693a      	ldr	r2, [r7, #16]
 8009a08:	4313      	orrs	r3, r2
 8009a0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	699b      	ldr	r3, [r3, #24]
 8009a10:	693a      	ldr	r2, [r7, #16]
 8009a12:	4313      	orrs	r3, r2
 8009a14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	693a      	ldr	r2, [r7, #16]
 8009a1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	68fa      	ldr	r2, [r7, #12]
 8009a20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	685a      	ldr	r2, [r3, #4]
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	697a      	ldr	r2, [r7, #20]
 8009a2e:	621a      	str	r2, [r3, #32]
}
 8009a30:	bf00      	nop
 8009a32:	371c      	adds	r7, #28
 8009a34:	46bd      	mov	sp, r7
 8009a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3a:	4770      	bx	lr
 8009a3c:	40010000 	.word	0x40010000
 8009a40:	40010400 	.word	0x40010400

08009a44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009a44:	b480      	push	{r7}
 8009a46:	b087      	sub	sp, #28
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
 8009a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	6a1b      	ldr	r3, [r3, #32]
 8009a52:	f023 0210 	bic.w	r2, r3, #16
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6a1b      	ldr	r3, [r3, #32]
 8009a5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	685b      	ldr	r3, [r3, #4]
 8009a64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	699b      	ldr	r3, [r3, #24]
 8009a6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	021b      	lsls	r3, r3, #8
 8009a82:	68fa      	ldr	r2, [r7, #12]
 8009a84:	4313      	orrs	r3, r2
 8009a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009a88:	697b      	ldr	r3, [r7, #20]
 8009a8a:	f023 0320 	bic.w	r3, r3, #32
 8009a8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	689b      	ldr	r3, [r3, #8]
 8009a94:	011b      	lsls	r3, r3, #4
 8009a96:	697a      	ldr	r2, [r7, #20]
 8009a98:	4313      	orrs	r3, r2
 8009a9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	4a22      	ldr	r2, [pc, #136]	; (8009b28 <TIM_OC2_SetConfig+0xe4>)
 8009aa0:	4293      	cmp	r3, r2
 8009aa2:	d003      	beq.n	8009aac <TIM_OC2_SetConfig+0x68>
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	4a21      	ldr	r2, [pc, #132]	; (8009b2c <TIM_OC2_SetConfig+0xe8>)
 8009aa8:	4293      	cmp	r3, r2
 8009aaa:	d10d      	bne.n	8009ac8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009aac:	697b      	ldr	r3, [r7, #20]
 8009aae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009ab2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	68db      	ldr	r3, [r3, #12]
 8009ab8:	011b      	lsls	r3, r3, #4
 8009aba:	697a      	ldr	r2, [r7, #20]
 8009abc:	4313      	orrs	r3, r2
 8009abe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009ac0:	697b      	ldr	r3, [r7, #20]
 8009ac2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ac6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	4a17      	ldr	r2, [pc, #92]	; (8009b28 <TIM_OC2_SetConfig+0xe4>)
 8009acc:	4293      	cmp	r3, r2
 8009ace:	d003      	beq.n	8009ad8 <TIM_OC2_SetConfig+0x94>
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	4a16      	ldr	r2, [pc, #88]	; (8009b2c <TIM_OC2_SetConfig+0xe8>)
 8009ad4:	4293      	cmp	r3, r2
 8009ad6:	d113      	bne.n	8009b00 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009ad8:	693b      	ldr	r3, [r7, #16]
 8009ada:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009ade:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009ae0:	693b      	ldr	r3, [r7, #16]
 8009ae2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009ae6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	695b      	ldr	r3, [r3, #20]
 8009aec:	009b      	lsls	r3, r3, #2
 8009aee:	693a      	ldr	r2, [r7, #16]
 8009af0:	4313      	orrs	r3, r2
 8009af2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009af4:	683b      	ldr	r3, [r7, #0]
 8009af6:	699b      	ldr	r3, [r3, #24]
 8009af8:	009b      	lsls	r3, r3, #2
 8009afa:	693a      	ldr	r2, [r7, #16]
 8009afc:	4313      	orrs	r3, r2
 8009afe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	693a      	ldr	r2, [r7, #16]
 8009b04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	68fa      	ldr	r2, [r7, #12]
 8009b0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	685a      	ldr	r2, [r3, #4]
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	697a      	ldr	r2, [r7, #20]
 8009b18:	621a      	str	r2, [r3, #32]
}
 8009b1a:	bf00      	nop
 8009b1c:	371c      	adds	r7, #28
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b24:	4770      	bx	lr
 8009b26:	bf00      	nop
 8009b28:	40010000 	.word	0x40010000
 8009b2c:	40010400 	.word	0x40010400

08009b30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009b30:	b480      	push	{r7}
 8009b32:	b087      	sub	sp, #28
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
 8009b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6a1b      	ldr	r3, [r3, #32]
 8009b3e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6a1b      	ldr	r3, [r3, #32]
 8009b4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	685b      	ldr	r3, [r3, #4]
 8009b50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	69db      	ldr	r3, [r3, #28]
 8009b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	f023 0303 	bic.w	r3, r3, #3
 8009b66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	68fa      	ldr	r2, [r7, #12]
 8009b6e:	4313      	orrs	r3, r2
 8009b70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009b72:	697b      	ldr	r3, [r7, #20]
 8009b74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009b78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	689b      	ldr	r3, [r3, #8]
 8009b7e:	021b      	lsls	r3, r3, #8
 8009b80:	697a      	ldr	r2, [r7, #20]
 8009b82:	4313      	orrs	r3, r2
 8009b84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	4a21      	ldr	r2, [pc, #132]	; (8009c10 <TIM_OC3_SetConfig+0xe0>)
 8009b8a:	4293      	cmp	r3, r2
 8009b8c:	d003      	beq.n	8009b96 <TIM_OC3_SetConfig+0x66>
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	4a20      	ldr	r2, [pc, #128]	; (8009c14 <TIM_OC3_SetConfig+0xe4>)
 8009b92:	4293      	cmp	r3, r2
 8009b94:	d10d      	bne.n	8009bb2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009b96:	697b      	ldr	r3, [r7, #20]
 8009b98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009b9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009b9e:	683b      	ldr	r3, [r7, #0]
 8009ba0:	68db      	ldr	r3, [r3, #12]
 8009ba2:	021b      	lsls	r3, r3, #8
 8009ba4:	697a      	ldr	r2, [r7, #20]
 8009ba6:	4313      	orrs	r3, r2
 8009ba8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009baa:	697b      	ldr	r3, [r7, #20]
 8009bac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009bb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	4a16      	ldr	r2, [pc, #88]	; (8009c10 <TIM_OC3_SetConfig+0xe0>)
 8009bb6:	4293      	cmp	r3, r2
 8009bb8:	d003      	beq.n	8009bc2 <TIM_OC3_SetConfig+0x92>
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	4a15      	ldr	r2, [pc, #84]	; (8009c14 <TIM_OC3_SetConfig+0xe4>)
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	d113      	bne.n	8009bea <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009bc2:	693b      	ldr	r3, [r7, #16]
 8009bc4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009bc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009bca:	693b      	ldr	r3, [r7, #16]
 8009bcc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009bd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	695b      	ldr	r3, [r3, #20]
 8009bd6:	011b      	lsls	r3, r3, #4
 8009bd8:	693a      	ldr	r2, [r7, #16]
 8009bda:	4313      	orrs	r3, r2
 8009bdc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	699b      	ldr	r3, [r3, #24]
 8009be2:	011b      	lsls	r3, r3, #4
 8009be4:	693a      	ldr	r2, [r7, #16]
 8009be6:	4313      	orrs	r3, r2
 8009be8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	693a      	ldr	r2, [r7, #16]
 8009bee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	68fa      	ldr	r2, [r7, #12]
 8009bf4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	685a      	ldr	r2, [r3, #4]
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	697a      	ldr	r2, [r7, #20]
 8009c02:	621a      	str	r2, [r3, #32]
}
 8009c04:	bf00      	nop
 8009c06:	371c      	adds	r7, #28
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0e:	4770      	bx	lr
 8009c10:	40010000 	.word	0x40010000
 8009c14:	40010400 	.word	0x40010400

08009c18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009c18:	b480      	push	{r7}
 8009c1a:	b087      	sub	sp, #28
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
 8009c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	6a1b      	ldr	r3, [r3, #32]
 8009c26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6a1b      	ldr	r3, [r3, #32]
 8009c32:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	685b      	ldr	r3, [r3, #4]
 8009c38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	69db      	ldr	r3, [r3, #28]
 8009c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	021b      	lsls	r3, r3, #8
 8009c56:	68fa      	ldr	r2, [r7, #12]
 8009c58:	4313      	orrs	r3, r2
 8009c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009c5c:	693b      	ldr	r3, [r7, #16]
 8009c5e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009c62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	689b      	ldr	r3, [r3, #8]
 8009c68:	031b      	lsls	r3, r3, #12
 8009c6a:	693a      	ldr	r2, [r7, #16]
 8009c6c:	4313      	orrs	r3, r2
 8009c6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	4a12      	ldr	r2, [pc, #72]	; (8009cbc <TIM_OC4_SetConfig+0xa4>)
 8009c74:	4293      	cmp	r3, r2
 8009c76:	d003      	beq.n	8009c80 <TIM_OC4_SetConfig+0x68>
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	4a11      	ldr	r2, [pc, #68]	; (8009cc0 <TIM_OC4_SetConfig+0xa8>)
 8009c7c:	4293      	cmp	r3, r2
 8009c7e:	d109      	bne.n	8009c94 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009c80:	697b      	ldr	r3, [r7, #20]
 8009c82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009c86:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	695b      	ldr	r3, [r3, #20]
 8009c8c:	019b      	lsls	r3, r3, #6
 8009c8e:	697a      	ldr	r2, [r7, #20]
 8009c90:	4313      	orrs	r3, r2
 8009c92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	697a      	ldr	r2, [r7, #20]
 8009c98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	68fa      	ldr	r2, [r7, #12]
 8009c9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	685a      	ldr	r2, [r3, #4]
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	693a      	ldr	r2, [r7, #16]
 8009cac:	621a      	str	r2, [r3, #32]
}
 8009cae:	bf00      	nop
 8009cb0:	371c      	adds	r7, #28
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb8:	4770      	bx	lr
 8009cba:	bf00      	nop
 8009cbc:	40010000 	.word	0x40010000
 8009cc0:	40010400 	.word	0x40010400

08009cc4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009cc4:	b480      	push	{r7}
 8009cc6:	b087      	sub	sp, #28
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	60f8      	str	r0, [r7, #12]
 8009ccc:	60b9      	str	r1, [r7, #8]
 8009cce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	6a1b      	ldr	r3, [r3, #32]
 8009cd4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	6a1b      	ldr	r3, [r3, #32]
 8009cda:	f023 0201 	bic.w	r2, r3, #1
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	699b      	ldr	r3, [r3, #24]
 8009ce6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009ce8:	693b      	ldr	r3, [r7, #16]
 8009cea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009cee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	011b      	lsls	r3, r3, #4
 8009cf4:	693a      	ldr	r2, [r7, #16]
 8009cf6:	4313      	orrs	r3, r2
 8009cf8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009cfa:	697b      	ldr	r3, [r7, #20]
 8009cfc:	f023 030a 	bic.w	r3, r3, #10
 8009d00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009d02:	697a      	ldr	r2, [r7, #20]
 8009d04:	68bb      	ldr	r3, [r7, #8]
 8009d06:	4313      	orrs	r3, r2
 8009d08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	693a      	ldr	r2, [r7, #16]
 8009d0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	697a      	ldr	r2, [r7, #20]
 8009d14:	621a      	str	r2, [r3, #32]
}
 8009d16:	bf00      	nop
 8009d18:	371c      	adds	r7, #28
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d20:	4770      	bx	lr

08009d22 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009d22:	b480      	push	{r7}
 8009d24:	b087      	sub	sp, #28
 8009d26:	af00      	add	r7, sp, #0
 8009d28:	60f8      	str	r0, [r7, #12]
 8009d2a:	60b9      	str	r1, [r7, #8]
 8009d2c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	6a1b      	ldr	r3, [r3, #32]
 8009d32:	f023 0210 	bic.w	r2, r3, #16
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	699b      	ldr	r3, [r3, #24]
 8009d3e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	6a1b      	ldr	r3, [r3, #32]
 8009d44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009d46:	697b      	ldr	r3, [r7, #20]
 8009d48:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009d4c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	031b      	lsls	r3, r3, #12
 8009d52:	697a      	ldr	r2, [r7, #20]
 8009d54:	4313      	orrs	r3, r2
 8009d56:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009d58:	693b      	ldr	r3, [r7, #16]
 8009d5a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009d5e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009d60:	68bb      	ldr	r3, [r7, #8]
 8009d62:	011b      	lsls	r3, r3, #4
 8009d64:	693a      	ldr	r2, [r7, #16]
 8009d66:	4313      	orrs	r3, r2
 8009d68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	697a      	ldr	r2, [r7, #20]
 8009d6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	693a      	ldr	r2, [r7, #16]
 8009d74:	621a      	str	r2, [r3, #32]
}
 8009d76:	bf00      	nop
 8009d78:	371c      	adds	r7, #28
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d80:	4770      	bx	lr

08009d82 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009d82:	b480      	push	{r7}
 8009d84:	b085      	sub	sp, #20
 8009d86:	af00      	add	r7, sp, #0
 8009d88:	6078      	str	r0, [r7, #4]
 8009d8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	689b      	ldr	r3, [r3, #8]
 8009d90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009d9a:	683a      	ldr	r2, [r7, #0]
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	4313      	orrs	r3, r2
 8009da0:	f043 0307 	orr.w	r3, r3, #7
 8009da4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	68fa      	ldr	r2, [r7, #12]
 8009daa:	609a      	str	r2, [r3, #8]
}
 8009dac:	bf00      	nop
 8009dae:	3714      	adds	r7, #20
 8009db0:	46bd      	mov	sp, r7
 8009db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db6:	4770      	bx	lr

08009db8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009db8:	b480      	push	{r7}
 8009dba:	b087      	sub	sp, #28
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	60f8      	str	r0, [r7, #12]
 8009dc0:	60b9      	str	r1, [r7, #8]
 8009dc2:	607a      	str	r2, [r7, #4]
 8009dc4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	689b      	ldr	r3, [r3, #8]
 8009dca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009dcc:	697b      	ldr	r3, [r7, #20]
 8009dce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009dd2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	021a      	lsls	r2, r3, #8
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	431a      	orrs	r2, r3
 8009ddc:	68bb      	ldr	r3, [r7, #8]
 8009dde:	4313      	orrs	r3, r2
 8009de0:	697a      	ldr	r2, [r7, #20]
 8009de2:	4313      	orrs	r3, r2
 8009de4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	697a      	ldr	r2, [r7, #20]
 8009dea:	609a      	str	r2, [r3, #8]
}
 8009dec:	bf00      	nop
 8009dee:	371c      	adds	r7, #28
 8009df0:	46bd      	mov	sp, r7
 8009df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df6:	4770      	bx	lr

08009df8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009df8:	b480      	push	{r7}
 8009dfa:	b087      	sub	sp, #28
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	60f8      	str	r0, [r7, #12]
 8009e00:	60b9      	str	r1, [r7, #8]
 8009e02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009e04:	68bb      	ldr	r3, [r7, #8]
 8009e06:	f003 031f 	and.w	r3, r3, #31
 8009e0a:	2201      	movs	r2, #1
 8009e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8009e10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	6a1a      	ldr	r2, [r3, #32]
 8009e16:	697b      	ldr	r3, [r7, #20]
 8009e18:	43db      	mvns	r3, r3
 8009e1a:	401a      	ands	r2, r3
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	6a1a      	ldr	r2, [r3, #32]
 8009e24:	68bb      	ldr	r3, [r7, #8]
 8009e26:	f003 031f 	and.w	r3, r3, #31
 8009e2a:	6879      	ldr	r1, [r7, #4]
 8009e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8009e30:	431a      	orrs	r2, r3
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	621a      	str	r2, [r3, #32]
}
 8009e36:	bf00      	nop
 8009e38:	371c      	adds	r7, #28
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e40:	4770      	bx	lr
	...

08009e44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009e44:	b480      	push	{r7}
 8009e46:	b085      	sub	sp, #20
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
 8009e4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e54:	2b01      	cmp	r3, #1
 8009e56:	d101      	bne.n	8009e5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009e58:	2302      	movs	r3, #2
 8009e5a:	e05a      	b.n	8009f12 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2201      	movs	r2, #1
 8009e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2202      	movs	r2, #2
 8009e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	685b      	ldr	r3, [r3, #4]
 8009e72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	689b      	ldr	r3, [r3, #8]
 8009e7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	68fa      	ldr	r2, [r7, #12]
 8009e8a:	4313      	orrs	r3, r2
 8009e8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	68fa      	ldr	r2, [r7, #12]
 8009e94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	4a21      	ldr	r2, [pc, #132]	; (8009f20 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009e9c:	4293      	cmp	r3, r2
 8009e9e:	d022      	beq.n	8009ee6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ea8:	d01d      	beq.n	8009ee6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	4a1d      	ldr	r2, [pc, #116]	; (8009f24 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009eb0:	4293      	cmp	r3, r2
 8009eb2:	d018      	beq.n	8009ee6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	4a1b      	ldr	r2, [pc, #108]	; (8009f28 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009eba:	4293      	cmp	r3, r2
 8009ebc:	d013      	beq.n	8009ee6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	4a1a      	ldr	r2, [pc, #104]	; (8009f2c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009ec4:	4293      	cmp	r3, r2
 8009ec6:	d00e      	beq.n	8009ee6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	4a18      	ldr	r2, [pc, #96]	; (8009f30 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009ece:	4293      	cmp	r3, r2
 8009ed0:	d009      	beq.n	8009ee6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	4a17      	ldr	r2, [pc, #92]	; (8009f34 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009ed8:	4293      	cmp	r3, r2
 8009eda:	d004      	beq.n	8009ee6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	4a15      	ldr	r2, [pc, #84]	; (8009f38 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009ee2:	4293      	cmp	r3, r2
 8009ee4:	d10c      	bne.n	8009f00 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009eec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009eee:	683b      	ldr	r3, [r7, #0]
 8009ef0:	685b      	ldr	r3, [r3, #4]
 8009ef2:	68ba      	ldr	r2, [r7, #8]
 8009ef4:	4313      	orrs	r3, r2
 8009ef6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	68ba      	ldr	r2, [r7, #8]
 8009efe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2201      	movs	r2, #1
 8009f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009f10:	2300      	movs	r3, #0
}
 8009f12:	4618      	mov	r0, r3
 8009f14:	3714      	adds	r7, #20
 8009f16:	46bd      	mov	sp, r7
 8009f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1c:	4770      	bx	lr
 8009f1e:	bf00      	nop
 8009f20:	40010000 	.word	0x40010000
 8009f24:	40000400 	.word	0x40000400
 8009f28:	40000800 	.word	0x40000800
 8009f2c:	40000c00 	.word	0x40000c00
 8009f30:	40010400 	.word	0x40010400
 8009f34:	40014000 	.word	0x40014000
 8009f38:	40001800 	.word	0x40001800

08009f3c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009f3c:	b480      	push	{r7}
 8009f3e:	b085      	sub	sp, #20
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
 8009f44:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009f46:	2300      	movs	r3, #0
 8009f48:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f50:	2b01      	cmp	r3, #1
 8009f52:	d101      	bne.n	8009f58 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009f54:	2302      	movs	r3, #2
 8009f56:	e03d      	b.n	8009fd4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2201      	movs	r2, #1
 8009f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009f66:	683b      	ldr	r3, [r7, #0]
 8009f68:	68db      	ldr	r3, [r3, #12]
 8009f6a:	4313      	orrs	r3, r2
 8009f6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	689b      	ldr	r3, [r3, #8]
 8009f78:	4313      	orrs	r3, r2
 8009f7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	685b      	ldr	r3, [r3, #4]
 8009f86:	4313      	orrs	r3, r2
 8009f88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	4313      	orrs	r3, r2
 8009f96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	691b      	ldr	r3, [r3, #16]
 8009fa2:	4313      	orrs	r3, r2
 8009fa4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	695b      	ldr	r3, [r3, #20]
 8009fb0:	4313      	orrs	r3, r2
 8009fb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009fba:	683b      	ldr	r3, [r7, #0]
 8009fbc:	69db      	ldr	r3, [r3, #28]
 8009fbe:	4313      	orrs	r3, r2
 8009fc0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	68fa      	ldr	r2, [r7, #12]
 8009fc8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	2200      	movs	r2, #0
 8009fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009fd2:	2300      	movs	r3, #0
}
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	3714      	adds	r7, #20
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fde:	4770      	bx	lr

08009fe0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009fe0:	b480      	push	{r7}
 8009fe2:	b083      	sub	sp, #12
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009fe8:	bf00      	nop
 8009fea:	370c      	adds	r7, #12
 8009fec:	46bd      	mov	sp, r7
 8009fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff2:	4770      	bx	lr

08009ff4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009ff4:	b480      	push	{r7}
 8009ff6:	b083      	sub	sp, #12
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009ffc:	bf00      	nop
 8009ffe:	370c      	adds	r7, #12
 800a000:	46bd      	mov	sp, r7
 800a002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a006:	4770      	bx	lr

0800a008 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b082      	sub	sp, #8
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d101      	bne.n	800a01a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a016:	2301      	movs	r3, #1
 800a018:	e03f      	b.n	800a09a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a020:	b2db      	uxtb	r3, r3
 800a022:	2b00      	cmp	r3, #0
 800a024:	d106      	bne.n	800a034 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	2200      	movs	r2, #0
 800a02a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a02e:	6878      	ldr	r0, [r7, #4]
 800a030:	f7fb f80c 	bl	800504c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2224      	movs	r2, #36	; 0x24
 800a038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	68da      	ldr	r2, [r3, #12]
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a04a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a04c:	6878      	ldr	r0, [r7, #4]
 800a04e:	f001 f9e5 	bl	800b41c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	691a      	ldr	r2, [r3, #16]
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a060:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	695a      	ldr	r2, [r3, #20]
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a070:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	68da      	ldr	r2, [r3, #12]
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a080:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	2200      	movs	r2, #0
 800a086:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2220      	movs	r2, #32
 800a08c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2220      	movs	r2, #32
 800a094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a098:	2300      	movs	r3, #0
}
 800a09a:	4618      	mov	r0, r3
 800a09c:	3708      	adds	r7, #8
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	bd80      	pop	{r7, pc}

0800a0a2 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a0a2:	b480      	push	{r7}
 800a0a4:	b085      	sub	sp, #20
 800a0a6:	af00      	add	r7, sp, #0
 800a0a8:	60f8      	str	r0, [r7, #12]
 800a0aa:	60b9      	str	r1, [r7, #8]
 800a0ac:	4613      	mov	r3, r2
 800a0ae:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a0b6:	b2db      	uxtb	r3, r3
 800a0b8:	2b20      	cmp	r3, #32
 800a0ba:	d130      	bne.n	800a11e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a0bc:	68bb      	ldr	r3, [r7, #8]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d002      	beq.n	800a0c8 <HAL_UART_Transmit_IT+0x26>
 800a0c2:	88fb      	ldrh	r3, [r7, #6]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d101      	bne.n	800a0cc <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800a0c8:	2301      	movs	r3, #1
 800a0ca:	e029      	b.n	800a120 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a0d2:	2b01      	cmp	r3, #1
 800a0d4:	d101      	bne.n	800a0da <HAL_UART_Transmit_IT+0x38>
 800a0d6:	2302      	movs	r3, #2
 800a0d8:	e022      	b.n	800a120 <HAL_UART_Transmit_IT+0x7e>
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	2201      	movs	r2, #1
 800a0de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	68ba      	ldr	r2, [r7, #8]
 800a0e6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	88fa      	ldrh	r2, [r7, #6]
 800a0ec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	88fa      	ldrh	r2, [r7, #6]
 800a0f2:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	2221      	movs	r2, #33	; 0x21
 800a0fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	2200      	movs	r2, #0
 800a106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	68da      	ldr	r2, [r3, #12]
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a118:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800a11a:	2300      	movs	r3, #0
 800a11c:	e000      	b.n	800a120 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800a11e:	2302      	movs	r3, #2
  }
}
 800a120:	4618      	mov	r0, r3
 800a122:	3714      	adds	r7, #20
 800a124:	46bd      	mov	sp, r7
 800a126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12a:	4770      	bx	lr

0800a12c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b084      	sub	sp, #16
 800a130:	af00      	add	r7, sp, #0
 800a132:	60f8      	str	r0, [r7, #12]
 800a134:	60b9      	str	r1, [r7, #8]
 800a136:	4613      	mov	r3, r2
 800a138:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a140:	b2db      	uxtb	r3, r3
 800a142:	2b20      	cmp	r3, #32
 800a144:	d11d      	bne.n	800a182 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a146:	68bb      	ldr	r3, [r7, #8]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d002      	beq.n	800a152 <HAL_UART_Receive_IT+0x26>
 800a14c:	88fb      	ldrh	r3, [r7, #6]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d101      	bne.n	800a156 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800a152:	2301      	movs	r3, #1
 800a154:	e016      	b.n	800a184 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a15c:	2b01      	cmp	r3, #1
 800a15e:	d101      	bne.n	800a164 <HAL_UART_Receive_IT+0x38>
 800a160:	2302      	movs	r3, #2
 800a162:	e00f      	b.n	800a184 <HAL_UART_Receive_IT+0x58>
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	2201      	movs	r2, #1
 800a168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	2200      	movs	r2, #0
 800a170:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a172:	88fb      	ldrh	r3, [r7, #6]
 800a174:	461a      	mov	r2, r3
 800a176:	68b9      	ldr	r1, [r7, #8]
 800a178:	68f8      	ldr	r0, [r7, #12]
 800a17a:	f000 fea0 	bl	800aebe <UART_Start_Receive_IT>
 800a17e:	4603      	mov	r3, r0
 800a180:	e000      	b.n	800a184 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a182:	2302      	movs	r3, #2
  }
}
 800a184:	4618      	mov	r0, r3
 800a186:	3710      	adds	r7, #16
 800a188:	46bd      	mov	sp, r7
 800a18a:	bd80      	pop	{r7, pc}

0800a18c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b08c      	sub	sp, #48	; 0x30
 800a190:	af00      	add	r7, sp, #0
 800a192:	60f8      	str	r0, [r7, #12]
 800a194:	60b9      	str	r1, [r7, #8]
 800a196:	4613      	mov	r3, r2
 800a198:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a1a0:	b2db      	uxtb	r3, r3
 800a1a2:	2b20      	cmp	r3, #32
 800a1a4:	d165      	bne.n	800a272 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800a1a6:	68bb      	ldr	r3, [r7, #8]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d002      	beq.n	800a1b2 <HAL_UART_Transmit_DMA+0x26>
 800a1ac:	88fb      	ldrh	r3, [r7, #6]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d101      	bne.n	800a1b6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800a1b2:	2301      	movs	r3, #1
 800a1b4:	e05e      	b.n	800a274 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a1bc:	2b01      	cmp	r3, #1
 800a1be:	d101      	bne.n	800a1c4 <HAL_UART_Transmit_DMA+0x38>
 800a1c0:	2302      	movs	r3, #2
 800a1c2:	e057      	b.n	800a274 <HAL_UART_Transmit_DMA+0xe8>
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	2201      	movs	r2, #1
 800a1c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800a1cc:	68ba      	ldr	r2, [r7, #8]
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	88fa      	ldrh	r2, [r7, #6]
 800a1d6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	88fa      	ldrh	r2, [r7, #6]
 800a1dc:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	2221      	movs	r2, #33	; 0x21
 800a1e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1f0:	4a22      	ldr	r2, [pc, #136]	; (800a27c <HAL_UART_Transmit_DMA+0xf0>)
 800a1f2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1f8:	4a21      	ldr	r2, [pc, #132]	; (800a280 <HAL_UART_Transmit_DMA+0xf4>)
 800a1fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a200:	4a20      	ldr	r2, [pc, #128]	; (800a284 <HAL_UART_Transmit_DMA+0xf8>)
 800a202:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a208:	2200      	movs	r2, #0
 800a20a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800a20c:	f107 0308 	add.w	r3, r7, #8
 800a210:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800a216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a218:	6819      	ldr	r1, [r3, #0]
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	3304      	adds	r3, #4
 800a220:	461a      	mov	r2, r3
 800a222:	88fb      	ldrh	r3, [r7, #6]
 800a224:	f7fb fb6c 	bl	8005900 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a230:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	2200      	movs	r2, #0
 800a236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	3314      	adds	r3, #20
 800a240:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a242:	69bb      	ldr	r3, [r7, #24]
 800a244:	e853 3f00 	ldrex	r3, [r3]
 800a248:	617b      	str	r3, [r7, #20]
   return(result);
 800a24a:	697b      	ldr	r3, [r7, #20]
 800a24c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a250:	62bb      	str	r3, [r7, #40]	; 0x28
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	3314      	adds	r3, #20
 800a258:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a25a:	627a      	str	r2, [r7, #36]	; 0x24
 800a25c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a25e:	6a39      	ldr	r1, [r7, #32]
 800a260:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a262:	e841 2300 	strex	r3, r2, [r1]
 800a266:	61fb      	str	r3, [r7, #28]
   return(result);
 800a268:	69fb      	ldr	r3, [r7, #28]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d1e5      	bne.n	800a23a <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800a26e:	2300      	movs	r3, #0
 800a270:	e000      	b.n	800a274 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800a272:	2302      	movs	r3, #2
  }
}
 800a274:	4618      	mov	r0, r3
 800a276:	3730      	adds	r7, #48	; 0x30
 800a278:	46bd      	mov	sp, r7
 800a27a:	bd80      	pop	{r7, pc}
 800a27c:	0800ac19 	.word	0x0800ac19
 800a280:	0800acb3 	.word	0x0800acb3
 800a284:	0800ae2b 	.word	0x0800ae2b

0800a288 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b090      	sub	sp, #64	; 0x40
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a290:	2300      	movs	r3, #0
 800a292:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	695b      	ldr	r3, [r3, #20]
 800a29a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a29e:	2b80      	cmp	r3, #128	; 0x80
 800a2a0:	bf0c      	ite	eq
 800a2a2:	2301      	moveq	r3, #1
 800a2a4:	2300      	movne	r3, #0
 800a2a6:	b2db      	uxtb	r3, r3
 800a2a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a2b0:	b2db      	uxtb	r3, r3
 800a2b2:	2b21      	cmp	r3, #33	; 0x21
 800a2b4:	d128      	bne.n	800a308 <HAL_UART_DMAStop+0x80>
 800a2b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d025      	beq.n	800a308 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	3314      	adds	r3, #20
 800a2c2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2c6:	e853 3f00 	ldrex	r3, [r3]
 800a2ca:	623b      	str	r3, [r7, #32]
   return(result);
 800a2cc:	6a3b      	ldr	r3, [r7, #32]
 800a2ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a2d2:	63bb      	str	r3, [r7, #56]	; 0x38
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	3314      	adds	r3, #20
 800a2da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a2dc:	633a      	str	r2, [r7, #48]	; 0x30
 800a2de:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a2e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a2e4:	e841 2300 	strex	r3, r2, [r1]
 800a2e8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a2ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d1e5      	bne.n	800a2bc <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d004      	beq.n	800a302 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	f7fb fb57 	bl	80059b0 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 800a302:	6878      	ldr	r0, [r7, #4]
 800a304:	f000 feb0 	bl	800b068 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	695b      	ldr	r3, [r3, #20]
 800a30e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a312:	2b40      	cmp	r3, #64	; 0x40
 800a314:	bf0c      	ite	eq
 800a316:	2301      	moveq	r3, #1
 800a318:	2300      	movne	r3, #0
 800a31a:	b2db      	uxtb	r3, r3
 800a31c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a324:	b2db      	uxtb	r3, r3
 800a326:	2b22      	cmp	r3, #34	; 0x22
 800a328:	d128      	bne.n	800a37c <HAL_UART_DMAStop+0xf4>
 800a32a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d025      	beq.n	800a37c <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	3314      	adds	r3, #20
 800a336:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a338:	693b      	ldr	r3, [r7, #16]
 800a33a:	e853 3f00 	ldrex	r3, [r3]
 800a33e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a346:	637b      	str	r3, [r7, #52]	; 0x34
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	3314      	adds	r3, #20
 800a34e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a350:	61fa      	str	r2, [r7, #28]
 800a352:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a354:	69b9      	ldr	r1, [r7, #24]
 800a356:	69fa      	ldr	r2, [r7, #28]
 800a358:	e841 2300 	strex	r3, r2, [r1]
 800a35c:	617b      	str	r3, [r7, #20]
   return(result);
 800a35e:	697b      	ldr	r3, [r7, #20]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d1e5      	bne.n	800a330 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d004      	beq.n	800a376 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a370:	4618      	mov	r0, r3
 800a372:	f7fb fb1d 	bl	80059b0 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800a376:	6878      	ldr	r0, [r7, #4]
 800a378:	f000 fe9e 	bl	800b0b8 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800a37c:	2300      	movs	r3, #0
}
 800a37e:	4618      	mov	r0, r3
 800a380:	3740      	adds	r7, #64	; 0x40
 800a382:	46bd      	mov	sp, r7
 800a384:	bd80      	pop	{r7, pc}

0800a386 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a386:	b580      	push	{r7, lr}
 800a388:	b08c      	sub	sp, #48	; 0x30
 800a38a:	af00      	add	r7, sp, #0
 800a38c:	60f8      	str	r0, [r7, #12]
 800a38e:	60b9      	str	r1, [r7, #8]
 800a390:	4613      	mov	r3, r2
 800a392:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a39a:	b2db      	uxtb	r3, r3
 800a39c:	2b20      	cmp	r3, #32
 800a39e:	d152      	bne.n	800a446 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 800a3a0:	68bb      	ldr	r3, [r7, #8]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d002      	beq.n	800a3ac <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800a3a6:	88fb      	ldrh	r3, [r7, #6]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d101      	bne.n	800a3b0 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800a3ac:	2301      	movs	r3, #1
 800a3ae:	e04b      	b.n	800a448 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a3b6:	2b01      	cmp	r3, #1
 800a3b8:	d101      	bne.n	800a3be <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 800a3ba:	2302      	movs	r3, #2
 800a3bc:	e044      	b.n	800a448 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	2201      	movs	r2, #1
 800a3c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	2201      	movs	r2, #1
 800a3ca:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800a3cc:	88fb      	ldrh	r3, [r7, #6]
 800a3ce:	461a      	mov	r2, r3
 800a3d0:	68b9      	ldr	r1, [r7, #8]
 800a3d2:	68f8      	ldr	r0, [r7, #12]
 800a3d4:	f000 fdae 	bl	800af34 <UART_Start_Receive_DMA>
 800a3d8:	4603      	mov	r3, r0
 800a3da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800a3de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d12c      	bne.n	800a440 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3ea:	2b01      	cmp	r3, #1
 800a3ec:	d125      	bne.n	800a43a <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	613b      	str	r3, [r7, #16]
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	613b      	str	r3, [r7, #16]
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	685b      	ldr	r3, [r3, #4]
 800a400:	613b      	str	r3, [r7, #16]
 800a402:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	330c      	adds	r3, #12
 800a40a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a40c:	69bb      	ldr	r3, [r7, #24]
 800a40e:	e853 3f00 	ldrex	r3, [r3]
 800a412:	617b      	str	r3, [r7, #20]
   return(result);
 800a414:	697b      	ldr	r3, [r7, #20]
 800a416:	f043 0310 	orr.w	r3, r3, #16
 800a41a:	62bb      	str	r3, [r7, #40]	; 0x28
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	330c      	adds	r3, #12
 800a422:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a424:	627a      	str	r2, [r7, #36]	; 0x24
 800a426:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a428:	6a39      	ldr	r1, [r7, #32]
 800a42a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a42c:	e841 2300 	strex	r3, r2, [r1]
 800a430:	61fb      	str	r3, [r7, #28]
   return(result);
 800a432:	69fb      	ldr	r3, [r7, #28]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d1e5      	bne.n	800a404 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 800a438:	e002      	b.n	800a440 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800a43a:	2301      	movs	r3, #1
 800a43c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800a440:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a444:	e000      	b.n	800a448 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 800a446:	2302      	movs	r3, #2
  }
}
 800a448:	4618      	mov	r0, r3
 800a44a:	3730      	adds	r7, #48	; 0x30
 800a44c:	46bd      	mov	sp, r7
 800a44e:	bd80      	pop	{r7, pc}

0800a450 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b09a      	sub	sp, #104	; 0x68
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	330c      	adds	r3, #12
 800a45e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a460:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a462:	e853 3f00 	ldrex	r3, [r3]
 800a466:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800a468:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a46a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a46e:	667b      	str	r3, [r7, #100]	; 0x64
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	330c      	adds	r3, #12
 800a476:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a478:	657a      	str	r2, [r7, #84]	; 0x54
 800a47a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a47c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a47e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a480:	e841 2300 	strex	r3, r2, [r1]
 800a484:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a486:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d1e5      	bne.n	800a458 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	3314      	adds	r3, #20
 800a492:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a496:	e853 3f00 	ldrex	r3, [r3]
 800a49a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a49c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a49e:	f023 0301 	bic.w	r3, r3, #1
 800a4a2:	663b      	str	r3, [r7, #96]	; 0x60
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	3314      	adds	r3, #20
 800a4aa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a4ac:	643a      	str	r2, [r7, #64]	; 0x40
 800a4ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4b0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a4b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a4b4:	e841 2300 	strex	r3, r2, [r1]
 800a4b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a4ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d1e5      	bne.n	800a48c <HAL_UART_AbortReceive_IT+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4c4:	2b01      	cmp	r3, #1
 800a4c6:	d119      	bne.n	800a4fc <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	330c      	adds	r3, #12
 800a4ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4d0:	6a3b      	ldr	r3, [r7, #32]
 800a4d2:	e853 3f00 	ldrex	r3, [r3]
 800a4d6:	61fb      	str	r3, [r7, #28]
   return(result);
 800a4d8:	69fb      	ldr	r3, [r7, #28]
 800a4da:	f023 0310 	bic.w	r3, r3, #16
 800a4de:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	330c      	adds	r3, #12
 800a4e6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a4e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a4ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a4ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a4f0:	e841 2300 	strex	r3, r2, [r1]
 800a4f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a4f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d1e5      	bne.n	800a4c8 <HAL_UART_AbortReceive_IT+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	695b      	ldr	r3, [r3, #20]
 800a502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a506:	2b40      	cmp	r3, #64	; 0x40
 800a508:	d13f      	bne.n	800a58a <HAL_UART_AbortReceive_IT+0x13a>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	3314      	adds	r3, #20
 800a510:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	e853 3f00 	ldrex	r3, [r3]
 800a518:	60bb      	str	r3, [r7, #8]
   return(result);
 800a51a:	68bb      	ldr	r3, [r7, #8]
 800a51c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a520:	65bb      	str	r3, [r7, #88]	; 0x58
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	3314      	adds	r3, #20
 800a528:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a52a:	61ba      	str	r2, [r7, #24]
 800a52c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a52e:	6979      	ldr	r1, [r7, #20]
 800a530:	69ba      	ldr	r2, [r7, #24]
 800a532:	e841 2300 	strex	r3, r2, [r1]
 800a536:	613b      	str	r3, [r7, #16]
   return(result);
 800a538:	693b      	ldr	r3, [r7, #16]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d1e5      	bne.n	800a50a <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a542:	2b00      	cmp	r3, #0
 800a544:	d013      	beq.n	800a56e <HAL_UART_AbortReceive_IT+0x11e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a54a:	4a19      	ldr	r2, [pc, #100]	; (800a5b0 <HAL_UART_AbortReceive_IT+0x160>)
 800a54c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a552:	4618      	mov	r0, r3
 800a554:	f7fb fa9c 	bl	8005a90 <HAL_DMA_Abort_IT>
 800a558:	4603      	mov	r3, r0
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d022      	beq.n	800a5a4 <HAL_UART_AbortReceive_IT+0x154>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a562:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a564:	687a      	ldr	r2, [r7, #4]
 800a566:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a568:	4610      	mov	r0, r2
 800a56a:	4798      	blx	r3
 800a56c:	e01a      	b.n	800a5a4 <HAL_UART_AbortReceive_IT+0x154>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	2200      	movs	r2, #0
 800a572:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2220      	movs	r2, #32
 800a578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2200      	movs	r2, #0
 800a580:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 800a582:	6878      	ldr	r0, [r7, #4]
 800a584:	f000 fab8 	bl	800aaf8 <HAL_UART_AbortReceiveCpltCallback>
 800a588:	e00c      	b.n	800a5a4 <HAL_UART_AbortReceive_IT+0x154>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	2200      	movs	r2, #0
 800a58e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	2220      	movs	r2, #32
 800a594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2200      	movs	r2, #0
 800a59c:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 800a59e:	6878      	ldr	r0, [r7, #4]
 800a5a0:	f000 faaa 	bl	800aaf8 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800a5a4:	2300      	movs	r3, #0
}
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	3768      	adds	r7, #104	; 0x68
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bd80      	pop	{r7, pc}
 800a5ae:	bf00      	nop
 800a5b0:	0800b1a7 	.word	0x0800b1a7

0800a5b4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b0ba      	sub	sp, #232	; 0xe8
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	68db      	ldr	r3, [r3, #12]
 800a5cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	695b      	ldr	r3, [r3, #20]
 800a5d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800a5da:	2300      	movs	r3, #0
 800a5dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a5e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a5ea:	f003 030f 	and.w	r3, r3, #15
 800a5ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800a5f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d10f      	bne.n	800a61a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a5fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a5fe:	f003 0320 	and.w	r3, r3, #32
 800a602:	2b00      	cmp	r3, #0
 800a604:	d009      	beq.n	800a61a <HAL_UART_IRQHandler+0x66>
 800a606:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a60a:	f003 0320 	and.w	r3, r3, #32
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d003      	beq.n	800a61a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a612:	6878      	ldr	r0, [r7, #4]
 800a614:	f000 fe47 	bl	800b2a6 <UART_Receive_IT>
      return;
 800a618:	e256      	b.n	800aac8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a61a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a61e:	2b00      	cmp	r3, #0
 800a620:	f000 80de 	beq.w	800a7e0 <HAL_UART_IRQHandler+0x22c>
 800a624:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a628:	f003 0301 	and.w	r3, r3, #1
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d106      	bne.n	800a63e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a630:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a634:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a638:	2b00      	cmp	r3, #0
 800a63a:	f000 80d1 	beq.w	800a7e0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a63e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a642:	f003 0301 	and.w	r3, r3, #1
 800a646:	2b00      	cmp	r3, #0
 800a648:	d00b      	beq.n	800a662 <HAL_UART_IRQHandler+0xae>
 800a64a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a64e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a652:	2b00      	cmp	r3, #0
 800a654:	d005      	beq.n	800a662 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a65a:	f043 0201 	orr.w	r2, r3, #1
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a662:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a666:	f003 0304 	and.w	r3, r3, #4
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d00b      	beq.n	800a686 <HAL_UART_IRQHandler+0xd2>
 800a66e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a672:	f003 0301 	and.w	r3, r3, #1
 800a676:	2b00      	cmp	r3, #0
 800a678:	d005      	beq.n	800a686 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a67e:	f043 0202 	orr.w	r2, r3, #2
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a686:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a68a:	f003 0302 	and.w	r3, r3, #2
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d00b      	beq.n	800a6aa <HAL_UART_IRQHandler+0xf6>
 800a692:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a696:	f003 0301 	and.w	r3, r3, #1
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d005      	beq.n	800a6aa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6a2:	f043 0204 	orr.w	r2, r3, #4
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a6aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6ae:	f003 0308 	and.w	r3, r3, #8
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d011      	beq.n	800a6da <HAL_UART_IRQHandler+0x126>
 800a6b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a6ba:	f003 0320 	and.w	r3, r3, #32
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d105      	bne.n	800a6ce <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a6c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a6c6:	f003 0301 	and.w	r3, r3, #1
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d005      	beq.n	800a6da <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6d2:	f043 0208 	orr.w	r2, r3, #8
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	f000 81ed 	beq.w	800aabe <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a6e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6e8:	f003 0320 	and.w	r3, r3, #32
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d008      	beq.n	800a702 <HAL_UART_IRQHandler+0x14e>
 800a6f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a6f4:	f003 0320 	and.w	r3, r3, #32
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d002      	beq.n	800a702 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a6fc:	6878      	ldr	r0, [r7, #4]
 800a6fe:	f000 fdd2 	bl	800b2a6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	695b      	ldr	r3, [r3, #20]
 800a708:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a70c:	2b40      	cmp	r3, #64	; 0x40
 800a70e:	bf0c      	ite	eq
 800a710:	2301      	moveq	r3, #1
 800a712:	2300      	movne	r3, #0
 800a714:	b2db      	uxtb	r3, r3
 800a716:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a71e:	f003 0308 	and.w	r3, r3, #8
 800a722:	2b00      	cmp	r3, #0
 800a724:	d103      	bne.n	800a72e <HAL_UART_IRQHandler+0x17a>
 800a726:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d04f      	beq.n	800a7ce <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a72e:	6878      	ldr	r0, [r7, #4]
 800a730:	f000 fcc2 	bl	800b0b8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	695b      	ldr	r3, [r3, #20]
 800a73a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a73e:	2b40      	cmp	r3, #64	; 0x40
 800a740:	d141      	bne.n	800a7c6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	3314      	adds	r3, #20
 800a748:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a74c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a750:	e853 3f00 	ldrex	r3, [r3]
 800a754:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a758:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a75c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a760:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	3314      	adds	r3, #20
 800a76a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a76e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a772:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a776:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a77a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a77e:	e841 2300 	strex	r3, r2, [r1]
 800a782:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a786:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d1d9      	bne.n	800a742 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a792:	2b00      	cmp	r3, #0
 800a794:	d013      	beq.n	800a7be <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a79a:	4a7d      	ldr	r2, [pc, #500]	; (800a990 <HAL_UART_IRQHandler+0x3dc>)
 800a79c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	f7fb f974 	bl	8005a90 <HAL_DMA_Abort_IT>
 800a7a8:	4603      	mov	r3, r0
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d016      	beq.n	800a7dc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7b4:	687a      	ldr	r2, [r7, #4]
 800a7b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a7b8:	4610      	mov	r0, r2
 800a7ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7bc:	e00e      	b.n	800a7dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a7be:	6878      	ldr	r0, [r7, #4]
 800a7c0:	f7f8 fdd4 	bl	800336c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7c4:	e00a      	b.n	800a7dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a7c6:	6878      	ldr	r0, [r7, #4]
 800a7c8:	f7f8 fdd0 	bl	800336c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7cc:	e006      	b.n	800a7dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a7ce:	6878      	ldr	r0, [r7, #4]
 800a7d0:	f7f8 fdcc 	bl	800336c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a7da:	e170      	b.n	800aabe <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7dc:	bf00      	nop
    return;
 800a7de:	e16e      	b.n	800aabe <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7e4:	2b01      	cmp	r3, #1
 800a7e6:	f040 814a 	bne.w	800aa7e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a7ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a7ee:	f003 0310 	and.w	r3, r3, #16
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	f000 8143 	beq.w	800aa7e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a7f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a7fc:	f003 0310 	and.w	r3, r3, #16
 800a800:	2b00      	cmp	r3, #0
 800a802:	f000 813c 	beq.w	800aa7e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a806:	2300      	movs	r3, #0
 800a808:	60bb      	str	r3, [r7, #8]
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	60bb      	str	r3, [r7, #8]
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	685b      	ldr	r3, [r3, #4]
 800a818:	60bb      	str	r3, [r7, #8]
 800a81a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	695b      	ldr	r3, [r3, #20]
 800a822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a826:	2b40      	cmp	r3, #64	; 0x40
 800a828:	f040 80b4 	bne.w	800a994 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	685b      	ldr	r3, [r3, #4]
 800a834:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a838:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	f000 8140 	beq.w	800aac2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a846:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a84a:	429a      	cmp	r2, r3
 800a84c:	f080 8139 	bcs.w	800aac2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a856:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a85c:	69db      	ldr	r3, [r3, #28]
 800a85e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a862:	f000 8088 	beq.w	800a976 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	330c      	adds	r3, #12
 800a86c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a870:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a874:	e853 3f00 	ldrex	r3, [r3]
 800a878:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a87c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a880:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a884:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	330c      	adds	r3, #12
 800a88e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a892:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a896:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a89a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a89e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a8a2:	e841 2300 	strex	r3, r2, [r1]
 800a8a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a8aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d1d9      	bne.n	800a866 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	3314      	adds	r3, #20
 800a8b8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a8bc:	e853 3f00 	ldrex	r3, [r3]
 800a8c0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a8c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a8c4:	f023 0301 	bic.w	r3, r3, #1
 800a8c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	3314      	adds	r3, #20
 800a8d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a8d6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a8da:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8dc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a8de:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a8e2:	e841 2300 	strex	r3, r2, [r1]
 800a8e6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a8e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d1e1      	bne.n	800a8b2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	3314      	adds	r3, #20
 800a8f4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a8f8:	e853 3f00 	ldrex	r3, [r3]
 800a8fc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a8fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a900:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a904:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	3314      	adds	r3, #20
 800a90e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a912:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a914:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a916:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a918:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a91a:	e841 2300 	strex	r3, r2, [r1]
 800a91e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a920:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a922:	2b00      	cmp	r3, #0
 800a924:	d1e3      	bne.n	800a8ee <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	2220      	movs	r2, #32
 800a92a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	2200      	movs	r2, #0
 800a932:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	330c      	adds	r3, #12
 800a93a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a93c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a93e:	e853 3f00 	ldrex	r3, [r3]
 800a942:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a944:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a946:	f023 0310 	bic.w	r3, r3, #16
 800a94a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	330c      	adds	r3, #12
 800a954:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a958:	65ba      	str	r2, [r7, #88]	; 0x58
 800a95a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a95c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a95e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a960:	e841 2300 	strex	r3, r2, [r1]
 800a964:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a966:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d1e3      	bne.n	800a934 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a970:	4618      	mov	r0, r3
 800a972:	f7fb f81d 	bl	80059b0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a97e:	b29b      	uxth	r3, r3
 800a980:	1ad3      	subs	r3, r2, r3
 800a982:	b29b      	uxth	r3, r3
 800a984:	4619      	mov	r1, r3
 800a986:	6878      	ldr	r0, [r7, #4]
 800a988:	f7f8 fd48 	bl	800341c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a98c:	e099      	b.n	800aac2 <HAL_UART_IRQHandler+0x50e>
 800a98e:	bf00      	nop
 800a990:	0800b17f 	.word	0x0800b17f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a99c:	b29b      	uxth	r3, r3
 800a99e:	1ad3      	subs	r3, r2, r3
 800a9a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a9a8:	b29b      	uxth	r3, r3
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	f000 808b 	beq.w	800aac6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800a9b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	f000 8086 	beq.w	800aac6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	330c      	adds	r3, #12
 800a9c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9c4:	e853 3f00 	ldrex	r3, [r3]
 800a9c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a9ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a9d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	330c      	adds	r3, #12
 800a9da:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a9de:	647a      	str	r2, [r7, #68]	; 0x44
 800a9e0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a9e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a9e6:	e841 2300 	strex	r3, r2, [r1]
 800a9ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a9ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d1e3      	bne.n	800a9ba <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	3314      	adds	r3, #20
 800a9f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9fc:	e853 3f00 	ldrex	r3, [r3]
 800aa00:	623b      	str	r3, [r7, #32]
   return(result);
 800aa02:	6a3b      	ldr	r3, [r7, #32]
 800aa04:	f023 0301 	bic.w	r3, r3, #1
 800aa08:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	3314      	adds	r3, #20
 800aa12:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800aa16:	633a      	str	r2, [r7, #48]	; 0x30
 800aa18:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aa1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa1e:	e841 2300 	strex	r3, r2, [r1]
 800aa22:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800aa24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d1e3      	bne.n	800a9f2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	2220      	movs	r2, #32
 800aa2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	2200      	movs	r2, #0
 800aa36:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	330c      	adds	r3, #12
 800aa3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa40:	693b      	ldr	r3, [r7, #16]
 800aa42:	e853 3f00 	ldrex	r3, [r3]
 800aa46:	60fb      	str	r3, [r7, #12]
   return(result);
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	f023 0310 	bic.w	r3, r3, #16
 800aa4e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	330c      	adds	r3, #12
 800aa58:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800aa5c:	61fa      	str	r2, [r7, #28]
 800aa5e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa60:	69b9      	ldr	r1, [r7, #24]
 800aa62:	69fa      	ldr	r2, [r7, #28]
 800aa64:	e841 2300 	strex	r3, r2, [r1]
 800aa68:	617b      	str	r3, [r7, #20]
   return(result);
 800aa6a:	697b      	ldr	r3, [r7, #20]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d1e3      	bne.n	800aa38 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800aa70:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800aa74:	4619      	mov	r1, r3
 800aa76:	6878      	ldr	r0, [r7, #4]
 800aa78:	f7f8 fcd0 	bl	800341c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800aa7c:	e023      	b.n	800aac6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800aa7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d009      	beq.n	800aa9e <HAL_UART_IRQHandler+0x4ea>
 800aa8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d003      	beq.n	800aa9e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800aa96:	6878      	ldr	r0, [r7, #4]
 800aa98:	f000 fb9d 	bl	800b1d6 <UART_Transmit_IT>
    return;
 800aa9c:	e014      	b.n	800aac8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800aa9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aaa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d00e      	beq.n	800aac8 <HAL_UART_IRQHandler+0x514>
 800aaaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aaae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d008      	beq.n	800aac8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800aab6:	6878      	ldr	r0, [r7, #4]
 800aab8:	f000 fbdd 	bl	800b276 <UART_EndTransmit_IT>
    return;
 800aabc:	e004      	b.n	800aac8 <HAL_UART_IRQHandler+0x514>
    return;
 800aabe:	bf00      	nop
 800aac0:	e002      	b.n	800aac8 <HAL_UART_IRQHandler+0x514>
      return;
 800aac2:	bf00      	nop
 800aac4:	e000      	b.n	800aac8 <HAL_UART_IRQHandler+0x514>
      return;
 800aac6:	bf00      	nop
  }
}
 800aac8:	37e8      	adds	r7, #232	; 0xe8
 800aaca:	46bd      	mov	sp, r7
 800aacc:	bd80      	pop	{r7, pc}
 800aace:	bf00      	nop

0800aad0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800aad0:	b480      	push	{r7}
 800aad2:	b083      	sub	sp, #12
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800aad8:	bf00      	nop
 800aada:	370c      	adds	r7, #12
 800aadc:	46bd      	mov	sp, r7
 800aade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae2:	4770      	bx	lr

0800aae4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800aae4:	b480      	push	{r7}
 800aae6:	b083      	sub	sp, #12
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800aaec:	bf00      	nop
 800aaee:	370c      	adds	r7, #12
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf6:	4770      	bx	lr

0800aaf8 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800aaf8:	b480      	push	{r7}
 800aafa:	b083      	sub	sp, #12
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800ab00:	bf00      	nop
 800ab02:	370c      	adds	r7, #12
 800ab04:	46bd      	mov	sp, r7
 800ab06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0a:	4770      	bx	lr

0800ab0c <HAL_HalfDuplex_EnableTransmitter>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 800ab0c:	b480      	push	{r7}
 800ab0e:	b085      	sub	sp, #20
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 800ab14:	2300      	movs	r3, #0
 800ab16:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ab1e:	2b01      	cmp	r3, #1
 800ab20:	d101      	bne.n	800ab26 <HAL_HalfDuplex_EnableTransmitter+0x1a>
 800ab22:	2302      	movs	r3, #2
 800ab24:	e020      	b.n	800ab68 <HAL_HalfDuplex_EnableTransmitter+0x5c>
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	2201      	movs	r2, #1
 800ab2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	2224      	movs	r2, #36	; 0x24
 800ab32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	68db      	ldr	r3, [r3, #12]
 800ab3c:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	f023 030c 	bic.w	r3, r3, #12
 800ab44:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_TE;
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	f043 0308 	orr.w	r3, r3, #8
 800ab4c:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	68fa      	ldr	r2, [r7, #12]
 800ab54:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	2220      	movs	r2, #32
 800ab5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	2200      	movs	r2, #0
 800ab62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ab66:	2300      	movs	r3, #0
}
 800ab68:	4618      	mov	r0, r3
 800ab6a:	3714      	adds	r7, #20
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab72:	4770      	bx	lr

0800ab74 <HAL_HalfDuplex_EnableReceiver>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 800ab74:	b480      	push	{r7}
 800ab76:	b085      	sub	sp, #20
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ab86:	2b01      	cmp	r3, #1
 800ab88:	d101      	bne.n	800ab8e <HAL_HalfDuplex_EnableReceiver+0x1a>
 800ab8a:	2302      	movs	r3, #2
 800ab8c:	e020      	b.n	800abd0 <HAL_HalfDuplex_EnableReceiver+0x5c>
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	2201      	movs	r2, #1
 800ab92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	2224      	movs	r2, #36	; 0x24
 800ab9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	68db      	ldr	r3, [r3, #12]
 800aba4:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	f023 030c 	bic.w	r3, r3, #12
 800abac:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_RE;
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	f043 0304 	orr.w	r3, r3, #4
 800abb4:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	68fa      	ldr	r2, [r7, #12]
 800abbc:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	2220      	movs	r2, #32
 800abc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	2200      	movs	r2, #0
 800abca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800abce:	2300      	movs	r3, #0
}
 800abd0:	4618      	mov	r0, r3
 800abd2:	3714      	adds	r7, #20
 800abd4:	46bd      	mov	sp, r7
 800abd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abda:	4770      	bx	lr

0800abdc <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 800abdc:	b480      	push	{r7}
 800abde:	b085      	sub	sp, #20
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 800abe4:	2300      	movs	r3, #0
 800abe6:	60fb      	str	r3, [r7, #12]
 800abe8:	2300      	movs	r3, #0
 800abea:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800abf2:	b2db      	uxtb	r3, r3
 800abf4:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800abfc:	b2db      	uxtb	r3, r3
 800abfe:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	b2da      	uxtb	r2, r3
 800ac04:	68bb      	ldr	r3, [r7, #8]
 800ac06:	b2db      	uxtb	r3, r3
 800ac08:	4313      	orrs	r3, r2
 800ac0a:	b2db      	uxtb	r3, r3
}
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	3714      	adds	r7, #20
 800ac10:	46bd      	mov	sp, r7
 800ac12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac16:	4770      	bx	lr

0800ac18 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b090      	sub	sp, #64	; 0x40
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac24:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d137      	bne.n	800aca4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800ac34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac36:	2200      	movs	r2, #0
 800ac38:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ac3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	3314      	adds	r3, #20
 800ac40:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac44:	e853 3f00 	ldrex	r3, [r3]
 800ac48:	623b      	str	r3, [r7, #32]
   return(result);
 800ac4a:	6a3b      	ldr	r3, [r7, #32]
 800ac4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ac50:	63bb      	str	r3, [r7, #56]	; 0x38
 800ac52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	3314      	adds	r3, #20
 800ac58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ac5a:	633a      	str	r2, [r7, #48]	; 0x30
 800ac5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ac60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac62:	e841 2300 	strex	r3, r2, [r1]
 800ac66:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ac68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d1e5      	bne.n	800ac3a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ac6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	330c      	adds	r3, #12
 800ac74:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac76:	693b      	ldr	r3, [r7, #16]
 800ac78:	e853 3f00 	ldrex	r3, [r3]
 800ac7c:	60fb      	str	r3, [r7, #12]
   return(result);
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac84:	637b      	str	r3, [r7, #52]	; 0x34
 800ac86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	330c      	adds	r3, #12
 800ac8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ac8e:	61fa      	str	r2, [r7, #28]
 800ac90:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac92:	69b9      	ldr	r1, [r7, #24]
 800ac94:	69fa      	ldr	r2, [r7, #28]
 800ac96:	e841 2300 	strex	r3, r2, [r1]
 800ac9a:	617b      	str	r3, [r7, #20]
   return(result);
 800ac9c:	697b      	ldr	r3, [r7, #20]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d1e5      	bne.n	800ac6e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800aca2:	e002      	b.n	800acaa <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800aca4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800aca6:	f7f8 fab9 	bl	800321c <HAL_UART_TxCpltCallback>
}
 800acaa:	bf00      	nop
 800acac:	3740      	adds	r7, #64	; 0x40
 800acae:	46bd      	mov	sp, r7
 800acb0:	bd80      	pop	{r7, pc}

0800acb2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800acb2:	b580      	push	{r7, lr}
 800acb4:	b084      	sub	sp, #16
 800acb6:	af00      	add	r7, sp, #0
 800acb8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acbe:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800acc0:	68f8      	ldr	r0, [r7, #12]
 800acc2:	f7ff ff05 	bl	800aad0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800acc6:	bf00      	nop
 800acc8:	3710      	adds	r7, #16
 800acca:	46bd      	mov	sp, r7
 800accc:	bd80      	pop	{r7, pc}

0800acce <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800acce:	b580      	push	{r7, lr}
 800acd0:	b09c      	sub	sp, #112	; 0x70
 800acd2:	af00      	add	r7, sp, #0
 800acd4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acda:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d172      	bne.n	800add0 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800acea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800acec:	2200      	movs	r2, #0
 800acee:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800acf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	330c      	adds	r3, #12
 800acf6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800acfa:	e853 3f00 	ldrex	r3, [r3]
 800acfe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ad00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad02:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ad06:	66bb      	str	r3, [r7, #104]	; 0x68
 800ad08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	330c      	adds	r3, #12
 800ad0e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ad10:	65ba      	str	r2, [r7, #88]	; 0x58
 800ad12:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad14:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ad16:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ad18:	e841 2300 	strex	r3, r2, [r1]
 800ad1c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ad1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d1e5      	bne.n	800acf0 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	3314      	adds	r3, #20
 800ad2a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad2e:	e853 3f00 	ldrex	r3, [r3]
 800ad32:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ad34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad36:	f023 0301 	bic.w	r3, r3, #1
 800ad3a:	667b      	str	r3, [r7, #100]	; 0x64
 800ad3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	3314      	adds	r3, #20
 800ad42:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ad44:	647a      	str	r2, [r7, #68]	; 0x44
 800ad46:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad48:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ad4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ad4c:	e841 2300 	strex	r3, r2, [r1]
 800ad50:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ad52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d1e5      	bne.n	800ad24 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ad58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	3314      	adds	r3, #20
 800ad5e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad62:	e853 3f00 	ldrex	r3, [r3]
 800ad66:	623b      	str	r3, [r7, #32]
   return(result);
 800ad68:	6a3b      	ldr	r3, [r7, #32]
 800ad6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ad6e:	663b      	str	r3, [r7, #96]	; 0x60
 800ad70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	3314      	adds	r3, #20
 800ad76:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ad78:	633a      	str	r2, [r7, #48]	; 0x30
 800ad7a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad7c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ad7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad80:	e841 2300 	strex	r3, r2, [r1]
 800ad84:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ad86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d1e5      	bne.n	800ad58 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ad8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad8e:	2220      	movs	r2, #32
 800ad90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad98:	2b01      	cmp	r3, #1
 800ad9a:	d119      	bne.n	800add0 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	330c      	adds	r3, #12
 800ada2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ada4:	693b      	ldr	r3, [r7, #16]
 800ada6:	e853 3f00 	ldrex	r3, [r3]
 800adaa:	60fb      	str	r3, [r7, #12]
   return(result);
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	f023 0310 	bic.w	r3, r3, #16
 800adb2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800adb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	330c      	adds	r3, #12
 800adba:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800adbc:	61fa      	str	r2, [r7, #28]
 800adbe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adc0:	69b9      	ldr	r1, [r7, #24]
 800adc2:	69fa      	ldr	r2, [r7, #28]
 800adc4:	e841 2300 	strex	r3, r2, [r1]
 800adc8:	617b      	str	r3, [r7, #20]
   return(result);
 800adca:	697b      	ldr	r3, [r7, #20]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d1e5      	bne.n	800ad9c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800add0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800add2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800add4:	2b01      	cmp	r3, #1
 800add6:	d106      	bne.n	800ade6 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800add8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800adda:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800addc:	4619      	mov	r1, r3
 800adde:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ade0:	f7f8 fb1c 	bl	800341c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ade4:	e002      	b.n	800adec <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800ade6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ade8:	f7f8 fa56 	bl	8003298 <HAL_UART_RxCpltCallback>
}
 800adec:	bf00      	nop
 800adee:	3770      	adds	r7, #112	; 0x70
 800adf0:	46bd      	mov	sp, r7
 800adf2:	bd80      	pop	{r7, pc}

0800adf4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b084      	sub	sp, #16
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae00:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae06:	2b01      	cmp	r3, #1
 800ae08:	d108      	bne.n	800ae1c <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ae0e:	085b      	lsrs	r3, r3, #1
 800ae10:	b29b      	uxth	r3, r3
 800ae12:	4619      	mov	r1, r3
 800ae14:	68f8      	ldr	r0, [r7, #12]
 800ae16:	f7f8 fb01 	bl	800341c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ae1a:	e002      	b.n	800ae22 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800ae1c:	68f8      	ldr	r0, [r7, #12]
 800ae1e:	f7ff fe61 	bl	800aae4 <HAL_UART_RxHalfCpltCallback>
}
 800ae22:	bf00      	nop
 800ae24:	3710      	adds	r7, #16
 800ae26:	46bd      	mov	sp, r7
 800ae28:	bd80      	pop	{r7, pc}

0800ae2a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ae2a:	b580      	push	{r7, lr}
 800ae2c:	b084      	sub	sp, #16
 800ae2e:	af00      	add	r7, sp, #0
 800ae30:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800ae32:	2300      	movs	r3, #0
 800ae34:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae3a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800ae3c:	68bb      	ldr	r3, [r7, #8]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	695b      	ldr	r3, [r3, #20]
 800ae42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae46:	2b80      	cmp	r3, #128	; 0x80
 800ae48:	bf0c      	ite	eq
 800ae4a:	2301      	moveq	r3, #1
 800ae4c:	2300      	movne	r3, #0
 800ae4e:	b2db      	uxtb	r3, r3
 800ae50:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800ae52:	68bb      	ldr	r3, [r7, #8]
 800ae54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae58:	b2db      	uxtb	r3, r3
 800ae5a:	2b21      	cmp	r3, #33	; 0x21
 800ae5c:	d108      	bne.n	800ae70 <UART_DMAError+0x46>
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d005      	beq.n	800ae70 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800ae64:	68bb      	ldr	r3, [r7, #8]
 800ae66:	2200      	movs	r2, #0
 800ae68:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800ae6a:	68b8      	ldr	r0, [r7, #8]
 800ae6c:	f000 f8fc 	bl	800b068 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ae70:	68bb      	ldr	r3, [r7, #8]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	695b      	ldr	r3, [r3, #20]
 800ae76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae7a:	2b40      	cmp	r3, #64	; 0x40
 800ae7c:	bf0c      	ite	eq
 800ae7e:	2301      	moveq	r3, #1
 800ae80:	2300      	movne	r3, #0
 800ae82:	b2db      	uxtb	r3, r3
 800ae84:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800ae86:	68bb      	ldr	r3, [r7, #8]
 800ae88:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ae8c:	b2db      	uxtb	r3, r3
 800ae8e:	2b22      	cmp	r3, #34	; 0x22
 800ae90:	d108      	bne.n	800aea4 <UART_DMAError+0x7a>
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d005      	beq.n	800aea4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800ae98:	68bb      	ldr	r3, [r7, #8]
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800ae9e:	68b8      	ldr	r0, [r7, #8]
 800aea0:	f000 f90a 	bl	800b0b8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800aea4:	68bb      	ldr	r3, [r7, #8]
 800aea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aea8:	f043 0210 	orr.w	r2, r3, #16
 800aeac:	68bb      	ldr	r3, [r7, #8]
 800aeae:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800aeb0:	68b8      	ldr	r0, [r7, #8]
 800aeb2:	f7f8 fa5b 	bl	800336c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aeb6:	bf00      	nop
 800aeb8:	3710      	adds	r7, #16
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bd80      	pop	{r7, pc}

0800aebe <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aebe:	b480      	push	{r7}
 800aec0:	b085      	sub	sp, #20
 800aec2:	af00      	add	r7, sp, #0
 800aec4:	60f8      	str	r0, [r7, #12]
 800aec6:	60b9      	str	r1, [r7, #8]
 800aec8:	4613      	mov	r3, r2
 800aeca:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	68ba      	ldr	r2, [r7, #8]
 800aed0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	88fa      	ldrh	r2, [r7, #6]
 800aed6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	88fa      	ldrh	r2, [r7, #6]
 800aedc:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	2200      	movs	r2, #0
 800aee2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	2222      	movs	r2, #34	; 0x22
 800aee8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	2200      	movs	r2, #0
 800aef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	68da      	ldr	r2, [r3, #12]
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800af02:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	695a      	ldr	r2, [r3, #20]
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	f042 0201 	orr.w	r2, r2, #1
 800af12:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	68da      	ldr	r2, [r3, #12]
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	f042 0220 	orr.w	r2, r2, #32
 800af22:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800af24:	2300      	movs	r3, #0
}
 800af26:	4618      	mov	r0, r3
 800af28:	3714      	adds	r7, #20
 800af2a:	46bd      	mov	sp, r7
 800af2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af30:	4770      	bx	lr
	...

0800af34 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800af34:	b580      	push	{r7, lr}
 800af36:	b098      	sub	sp, #96	; 0x60
 800af38:	af00      	add	r7, sp, #0
 800af3a:	60f8      	str	r0, [r7, #12]
 800af3c:	60b9      	str	r1, [r7, #8]
 800af3e:	4613      	mov	r3, r2
 800af40:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800af42:	68ba      	ldr	r2, [r7, #8]
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	88fa      	ldrh	r2, [r7, #6]
 800af4c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	2200      	movs	r2, #0
 800af52:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	2222      	movs	r2, #34	; 0x22
 800af58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af60:	4a3e      	ldr	r2, [pc, #248]	; (800b05c <UART_Start_Receive_DMA+0x128>)
 800af62:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af68:	4a3d      	ldr	r2, [pc, #244]	; (800b060 <UART_Start_Receive_DMA+0x12c>)
 800af6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af70:	4a3c      	ldr	r2, [pc, #240]	; (800b064 <UART_Start_Receive_DMA+0x130>)
 800af72:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af78:	2200      	movs	r2, #0
 800af7a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800af7c:	f107 0308 	add.w	r3, r7, #8
 800af80:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	3304      	adds	r3, #4
 800af8c:	4619      	mov	r1, r3
 800af8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800af90:	681a      	ldr	r2, [r3, #0]
 800af92:	88fb      	ldrh	r3, [r7, #6]
 800af94:	f7fa fcb4 	bl	8005900 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800af98:	2300      	movs	r3, #0
 800af9a:	613b      	str	r3, [r7, #16]
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	613b      	str	r3, [r7, #16]
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	685b      	ldr	r3, [r3, #4]
 800afaa:	613b      	str	r3, [r7, #16]
 800afac:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	2200      	movs	r2, #0
 800afb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	330c      	adds	r3, #12
 800afbc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800afc0:	e853 3f00 	ldrex	r3, [r3]
 800afc4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800afc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800afcc:	65bb      	str	r3, [r7, #88]	; 0x58
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	330c      	adds	r3, #12
 800afd4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800afd6:	64fa      	str	r2, [r7, #76]	; 0x4c
 800afd8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afda:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800afdc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800afde:	e841 2300 	strex	r3, r2, [r1]
 800afe2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800afe4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d1e5      	bne.n	800afb6 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	3314      	adds	r3, #20
 800aff0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aff4:	e853 3f00 	ldrex	r3, [r3]
 800aff8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800affa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800affc:	f043 0301 	orr.w	r3, r3, #1
 800b000:	657b      	str	r3, [r7, #84]	; 0x54
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	3314      	adds	r3, #20
 800b008:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b00a:	63ba      	str	r2, [r7, #56]	; 0x38
 800b00c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b00e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b010:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b012:	e841 2300 	strex	r3, r2, [r1]
 800b016:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d1e5      	bne.n	800afea <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	3314      	adds	r3, #20
 800b024:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b026:	69bb      	ldr	r3, [r7, #24]
 800b028:	e853 3f00 	ldrex	r3, [r3]
 800b02c:	617b      	str	r3, [r7, #20]
   return(result);
 800b02e:	697b      	ldr	r3, [r7, #20]
 800b030:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b034:	653b      	str	r3, [r7, #80]	; 0x50
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	3314      	adds	r3, #20
 800b03c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b03e:	627a      	str	r2, [r7, #36]	; 0x24
 800b040:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b042:	6a39      	ldr	r1, [r7, #32]
 800b044:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b046:	e841 2300 	strex	r3, r2, [r1]
 800b04a:	61fb      	str	r3, [r7, #28]
   return(result);
 800b04c:	69fb      	ldr	r3, [r7, #28]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d1e5      	bne.n	800b01e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800b052:	2300      	movs	r3, #0
}
 800b054:	4618      	mov	r0, r3
 800b056:	3760      	adds	r7, #96	; 0x60
 800b058:	46bd      	mov	sp, r7
 800b05a:	bd80      	pop	{r7, pc}
 800b05c:	0800accf 	.word	0x0800accf
 800b060:	0800adf5 	.word	0x0800adf5
 800b064:	0800ae2b 	.word	0x0800ae2b

0800b068 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b068:	b480      	push	{r7}
 800b06a:	b089      	sub	sp, #36	; 0x24
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	330c      	adds	r3, #12
 800b076:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	e853 3f00 	ldrex	r3, [r3]
 800b07e:	60bb      	str	r3, [r7, #8]
   return(result);
 800b080:	68bb      	ldr	r3, [r7, #8]
 800b082:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b086:	61fb      	str	r3, [r7, #28]
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	330c      	adds	r3, #12
 800b08e:	69fa      	ldr	r2, [r7, #28]
 800b090:	61ba      	str	r2, [r7, #24]
 800b092:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b094:	6979      	ldr	r1, [r7, #20]
 800b096:	69ba      	ldr	r2, [r7, #24]
 800b098:	e841 2300 	strex	r3, r2, [r1]
 800b09c:	613b      	str	r3, [r7, #16]
   return(result);
 800b09e:	693b      	ldr	r3, [r7, #16]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d1e5      	bne.n	800b070 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	2220      	movs	r2, #32
 800b0a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800b0ac:	bf00      	nop
 800b0ae:	3724      	adds	r7, #36	; 0x24
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b6:	4770      	bx	lr

0800b0b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b0b8:	b480      	push	{r7}
 800b0ba:	b095      	sub	sp, #84	; 0x54
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	330c      	adds	r3, #12
 800b0c6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0ca:	e853 3f00 	ldrex	r3, [r3]
 800b0ce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b0d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0d2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b0d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	330c      	adds	r3, #12
 800b0de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b0e0:	643a      	str	r2, [r7, #64]	; 0x40
 800b0e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0e4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b0e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b0e8:	e841 2300 	strex	r3, r2, [r1]
 800b0ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b0ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d1e5      	bne.n	800b0c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	3314      	adds	r3, #20
 800b0fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0fc:	6a3b      	ldr	r3, [r7, #32]
 800b0fe:	e853 3f00 	ldrex	r3, [r3]
 800b102:	61fb      	str	r3, [r7, #28]
   return(result);
 800b104:	69fb      	ldr	r3, [r7, #28]
 800b106:	f023 0301 	bic.w	r3, r3, #1
 800b10a:	64bb      	str	r3, [r7, #72]	; 0x48
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	3314      	adds	r3, #20
 800b112:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b114:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b116:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b118:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b11a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b11c:	e841 2300 	strex	r3, r2, [r1]
 800b120:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b124:	2b00      	cmp	r3, #0
 800b126:	d1e5      	bne.n	800b0f4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b12c:	2b01      	cmp	r3, #1
 800b12e:	d119      	bne.n	800b164 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	330c      	adds	r3, #12
 800b136:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	e853 3f00 	ldrex	r3, [r3]
 800b13e:	60bb      	str	r3, [r7, #8]
   return(result);
 800b140:	68bb      	ldr	r3, [r7, #8]
 800b142:	f023 0310 	bic.w	r3, r3, #16
 800b146:	647b      	str	r3, [r7, #68]	; 0x44
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	330c      	adds	r3, #12
 800b14e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b150:	61ba      	str	r2, [r7, #24]
 800b152:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b154:	6979      	ldr	r1, [r7, #20]
 800b156:	69ba      	ldr	r2, [r7, #24]
 800b158:	e841 2300 	strex	r3, r2, [r1]
 800b15c:	613b      	str	r3, [r7, #16]
   return(result);
 800b15e:	693b      	ldr	r3, [r7, #16]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d1e5      	bne.n	800b130 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	2220      	movs	r2, #32
 800b168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	2200      	movs	r2, #0
 800b170:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b172:	bf00      	nop
 800b174:	3754      	adds	r7, #84	; 0x54
 800b176:	46bd      	mov	sp, r7
 800b178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17c:	4770      	bx	lr

0800b17e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b17e:	b580      	push	{r7, lr}
 800b180:	b084      	sub	sp, #16
 800b182:	af00      	add	r7, sp, #0
 800b184:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b18a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	2200      	movs	r2, #0
 800b190:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	2200      	movs	r2, #0
 800b196:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b198:	68f8      	ldr	r0, [r7, #12]
 800b19a:	f7f8 f8e7 	bl	800336c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b19e:	bf00      	nop
 800b1a0:	3710      	adds	r7, #16
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	bd80      	pop	{r7, pc}

0800b1a6 <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800b1a6:	b580      	push	{r7, lr}
 800b1a8:	b084      	sub	sp, #16
 800b1aa:	af00      	add	r7, sp, #0
 800b1ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1b2:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	2220      	movs	r2, #32
 800b1be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 800b1c8:	68f8      	ldr	r0, [r7, #12]
 800b1ca:	f7ff fc95 	bl	800aaf8 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b1ce:	bf00      	nop
 800b1d0:	3710      	adds	r7, #16
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	bd80      	pop	{r7, pc}

0800b1d6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b1d6:	b480      	push	{r7}
 800b1d8:	b085      	sub	sp, #20
 800b1da:	af00      	add	r7, sp, #0
 800b1dc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b1e4:	b2db      	uxtb	r3, r3
 800b1e6:	2b21      	cmp	r3, #33	; 0x21
 800b1e8:	d13e      	bne.n	800b268 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	689b      	ldr	r3, [r3, #8]
 800b1ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b1f2:	d114      	bne.n	800b21e <UART_Transmit_IT+0x48>
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	691b      	ldr	r3, [r3, #16]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d110      	bne.n	800b21e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	6a1b      	ldr	r3, [r3, #32]
 800b200:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	881b      	ldrh	r3, [r3, #0]
 800b206:	461a      	mov	r2, r3
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b210:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	6a1b      	ldr	r3, [r3, #32]
 800b216:	1c9a      	adds	r2, r3, #2
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	621a      	str	r2, [r3, #32]
 800b21c:	e008      	b.n	800b230 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	6a1b      	ldr	r3, [r3, #32]
 800b222:	1c59      	adds	r1, r3, #1
 800b224:	687a      	ldr	r2, [r7, #4]
 800b226:	6211      	str	r1, [r2, #32]
 800b228:	781a      	ldrb	r2, [r3, #0]
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b234:	b29b      	uxth	r3, r3
 800b236:	3b01      	subs	r3, #1
 800b238:	b29b      	uxth	r3, r3
 800b23a:	687a      	ldr	r2, [r7, #4]
 800b23c:	4619      	mov	r1, r3
 800b23e:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b240:	2b00      	cmp	r3, #0
 800b242:	d10f      	bne.n	800b264 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	68da      	ldr	r2, [r3, #12]
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b252:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	68da      	ldr	r2, [r3, #12]
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b262:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b264:	2300      	movs	r3, #0
 800b266:	e000      	b.n	800b26a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b268:	2302      	movs	r3, #2
  }
}
 800b26a:	4618      	mov	r0, r3
 800b26c:	3714      	adds	r7, #20
 800b26e:	46bd      	mov	sp, r7
 800b270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b274:	4770      	bx	lr

0800b276 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b276:	b580      	push	{r7, lr}
 800b278:	b082      	sub	sp, #8
 800b27a:	af00      	add	r7, sp, #0
 800b27c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	68da      	ldr	r2, [r3, #12]
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b28c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	2220      	movs	r2, #32
 800b292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b296:	6878      	ldr	r0, [r7, #4]
 800b298:	f7f7 ffc0 	bl	800321c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b29c:	2300      	movs	r3, #0
}
 800b29e:	4618      	mov	r0, r3
 800b2a0:	3708      	adds	r7, #8
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	bd80      	pop	{r7, pc}

0800b2a6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b2a6:	b580      	push	{r7, lr}
 800b2a8:	b08c      	sub	sp, #48	; 0x30
 800b2aa:	af00      	add	r7, sp, #0
 800b2ac:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b2b4:	b2db      	uxtb	r3, r3
 800b2b6:	2b22      	cmp	r3, #34	; 0x22
 800b2b8:	f040 80ab 	bne.w	800b412 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	689b      	ldr	r3, [r3, #8]
 800b2c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b2c4:	d117      	bne.n	800b2f6 <UART_Receive_IT+0x50>
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	691b      	ldr	r3, [r3, #16]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d113      	bne.n	800b2f6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2d6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	685b      	ldr	r3, [r3, #4]
 800b2de:	b29b      	uxth	r3, r3
 800b2e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2e4:	b29a      	uxth	r2, r3
 800b2e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2e8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2ee:	1c9a      	adds	r2, r3, #2
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	629a      	str	r2, [r3, #40]	; 0x28
 800b2f4:	e026      	b.n	800b344 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b2fc:	2300      	movs	r3, #0
 800b2fe:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	689b      	ldr	r3, [r3, #8]
 800b304:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b308:	d007      	beq.n	800b31a <UART_Receive_IT+0x74>
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	689b      	ldr	r3, [r3, #8]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d10a      	bne.n	800b328 <UART_Receive_IT+0x82>
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	691b      	ldr	r3, [r3, #16]
 800b316:	2b00      	cmp	r3, #0
 800b318:	d106      	bne.n	800b328 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	685b      	ldr	r3, [r3, #4]
 800b320:	b2da      	uxtb	r2, r3
 800b322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b324:	701a      	strb	r2, [r3, #0]
 800b326:	e008      	b.n	800b33a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	685b      	ldr	r3, [r3, #4]
 800b32e:	b2db      	uxtb	r3, r3
 800b330:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b334:	b2da      	uxtb	r2, r3
 800b336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b338:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b33e:	1c5a      	adds	r2, r3, #1
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b348:	b29b      	uxth	r3, r3
 800b34a:	3b01      	subs	r3, #1
 800b34c:	b29b      	uxth	r3, r3
 800b34e:	687a      	ldr	r2, [r7, #4]
 800b350:	4619      	mov	r1, r3
 800b352:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b354:	2b00      	cmp	r3, #0
 800b356:	d15a      	bne.n	800b40e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	68da      	ldr	r2, [r3, #12]
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	f022 0220 	bic.w	r2, r2, #32
 800b366:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	68da      	ldr	r2, [r3, #12]
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b376:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	695a      	ldr	r2, [r3, #20]
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	f022 0201 	bic.w	r2, r2, #1
 800b386:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	2220      	movs	r2, #32
 800b38c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b394:	2b01      	cmp	r3, #1
 800b396:	d135      	bne.n	800b404 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	2200      	movs	r2, #0
 800b39c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	330c      	adds	r3, #12
 800b3a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3a6:	697b      	ldr	r3, [r7, #20]
 800b3a8:	e853 3f00 	ldrex	r3, [r3]
 800b3ac:	613b      	str	r3, [r7, #16]
   return(result);
 800b3ae:	693b      	ldr	r3, [r7, #16]
 800b3b0:	f023 0310 	bic.w	r3, r3, #16
 800b3b4:	627b      	str	r3, [r7, #36]	; 0x24
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	330c      	adds	r3, #12
 800b3bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b3be:	623a      	str	r2, [r7, #32]
 800b3c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3c2:	69f9      	ldr	r1, [r7, #28]
 800b3c4:	6a3a      	ldr	r2, [r7, #32]
 800b3c6:	e841 2300 	strex	r3, r2, [r1]
 800b3ca:	61bb      	str	r3, [r7, #24]
   return(result);
 800b3cc:	69bb      	ldr	r3, [r7, #24]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d1e5      	bne.n	800b39e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	f003 0310 	and.w	r3, r3, #16
 800b3dc:	2b10      	cmp	r3, #16
 800b3de:	d10a      	bne.n	800b3f6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	60fb      	str	r3, [r7, #12]
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	60fb      	str	r3, [r7, #12]
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	685b      	ldr	r3, [r3, #4]
 800b3f2:	60fb      	str	r3, [r7, #12]
 800b3f4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b3fa:	4619      	mov	r1, r3
 800b3fc:	6878      	ldr	r0, [r7, #4]
 800b3fe:	f7f8 f80d 	bl	800341c <HAL_UARTEx_RxEventCallback>
 800b402:	e002      	b.n	800b40a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b404:	6878      	ldr	r0, [r7, #4]
 800b406:	f7f7 ff47 	bl	8003298 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b40a:	2300      	movs	r3, #0
 800b40c:	e002      	b.n	800b414 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800b40e:	2300      	movs	r3, #0
 800b410:	e000      	b.n	800b414 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800b412:	2302      	movs	r3, #2
  }
}
 800b414:	4618      	mov	r0, r3
 800b416:	3730      	adds	r7, #48	; 0x30
 800b418:	46bd      	mov	sp, r7
 800b41a:	bd80      	pop	{r7, pc}

0800b41c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b41c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b420:	b0c0      	sub	sp, #256	; 0x100
 800b422:	af00      	add	r7, sp, #0
 800b424:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	691b      	ldr	r3, [r3, #16]
 800b430:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b438:	68d9      	ldr	r1, [r3, #12]
 800b43a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b43e:	681a      	ldr	r2, [r3, #0]
 800b440:	ea40 0301 	orr.w	r3, r0, r1
 800b444:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b446:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b44a:	689a      	ldr	r2, [r3, #8]
 800b44c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b450:	691b      	ldr	r3, [r3, #16]
 800b452:	431a      	orrs	r2, r3
 800b454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b458:	695b      	ldr	r3, [r3, #20]
 800b45a:	431a      	orrs	r2, r3
 800b45c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b460:	69db      	ldr	r3, [r3, #28]
 800b462:	4313      	orrs	r3, r2
 800b464:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	68db      	ldr	r3, [r3, #12]
 800b470:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b474:	f021 010c 	bic.w	r1, r1, #12
 800b478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b47c:	681a      	ldr	r2, [r3, #0]
 800b47e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b482:	430b      	orrs	r3, r1
 800b484:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b486:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	695b      	ldr	r3, [r3, #20]
 800b48e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b492:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b496:	6999      	ldr	r1, [r3, #24]
 800b498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b49c:	681a      	ldr	r2, [r3, #0]
 800b49e:	ea40 0301 	orr.w	r3, r0, r1
 800b4a2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b4a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b4a8:	681a      	ldr	r2, [r3, #0]
 800b4aa:	4b8f      	ldr	r3, [pc, #572]	; (800b6e8 <UART_SetConfig+0x2cc>)
 800b4ac:	429a      	cmp	r2, r3
 800b4ae:	d005      	beq.n	800b4bc <UART_SetConfig+0xa0>
 800b4b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b4b4:	681a      	ldr	r2, [r3, #0]
 800b4b6:	4b8d      	ldr	r3, [pc, #564]	; (800b6ec <UART_SetConfig+0x2d0>)
 800b4b8:	429a      	cmp	r2, r3
 800b4ba:	d104      	bne.n	800b4c6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b4bc:	f7fd fc84 	bl	8008dc8 <HAL_RCC_GetPCLK2Freq>
 800b4c0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b4c4:	e003      	b.n	800b4ce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b4c6:	f7fd fc6b 	bl	8008da0 <HAL_RCC_GetPCLK1Freq>
 800b4ca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b4ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b4d2:	69db      	ldr	r3, [r3, #28]
 800b4d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b4d8:	f040 810c 	bne.w	800b6f4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b4dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b4e0:	2200      	movs	r2, #0
 800b4e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b4e6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b4ea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b4ee:	4622      	mov	r2, r4
 800b4f0:	462b      	mov	r3, r5
 800b4f2:	1891      	adds	r1, r2, r2
 800b4f4:	65b9      	str	r1, [r7, #88]	; 0x58
 800b4f6:	415b      	adcs	r3, r3
 800b4f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b4fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b4fe:	4621      	mov	r1, r4
 800b500:	eb12 0801 	adds.w	r8, r2, r1
 800b504:	4629      	mov	r1, r5
 800b506:	eb43 0901 	adc.w	r9, r3, r1
 800b50a:	f04f 0200 	mov.w	r2, #0
 800b50e:	f04f 0300 	mov.w	r3, #0
 800b512:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b516:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b51a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b51e:	4690      	mov	r8, r2
 800b520:	4699      	mov	r9, r3
 800b522:	4623      	mov	r3, r4
 800b524:	eb18 0303 	adds.w	r3, r8, r3
 800b528:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b52c:	462b      	mov	r3, r5
 800b52e:	eb49 0303 	adc.w	r3, r9, r3
 800b532:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b536:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b53a:	685b      	ldr	r3, [r3, #4]
 800b53c:	2200      	movs	r2, #0
 800b53e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b542:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b546:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b54a:	460b      	mov	r3, r1
 800b54c:	18db      	adds	r3, r3, r3
 800b54e:	653b      	str	r3, [r7, #80]	; 0x50
 800b550:	4613      	mov	r3, r2
 800b552:	eb42 0303 	adc.w	r3, r2, r3
 800b556:	657b      	str	r3, [r7, #84]	; 0x54
 800b558:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b55c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b560:	f7f5 fb22 	bl	8000ba8 <__aeabi_uldivmod>
 800b564:	4602      	mov	r2, r0
 800b566:	460b      	mov	r3, r1
 800b568:	4b61      	ldr	r3, [pc, #388]	; (800b6f0 <UART_SetConfig+0x2d4>)
 800b56a:	fba3 2302 	umull	r2, r3, r3, r2
 800b56e:	095b      	lsrs	r3, r3, #5
 800b570:	011c      	lsls	r4, r3, #4
 800b572:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b576:	2200      	movs	r2, #0
 800b578:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b57c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b580:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b584:	4642      	mov	r2, r8
 800b586:	464b      	mov	r3, r9
 800b588:	1891      	adds	r1, r2, r2
 800b58a:	64b9      	str	r1, [r7, #72]	; 0x48
 800b58c:	415b      	adcs	r3, r3
 800b58e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b590:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b594:	4641      	mov	r1, r8
 800b596:	eb12 0a01 	adds.w	sl, r2, r1
 800b59a:	4649      	mov	r1, r9
 800b59c:	eb43 0b01 	adc.w	fp, r3, r1
 800b5a0:	f04f 0200 	mov.w	r2, #0
 800b5a4:	f04f 0300 	mov.w	r3, #0
 800b5a8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b5ac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b5b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b5b4:	4692      	mov	sl, r2
 800b5b6:	469b      	mov	fp, r3
 800b5b8:	4643      	mov	r3, r8
 800b5ba:	eb1a 0303 	adds.w	r3, sl, r3
 800b5be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b5c2:	464b      	mov	r3, r9
 800b5c4:	eb4b 0303 	adc.w	r3, fp, r3
 800b5c8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b5cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b5d0:	685b      	ldr	r3, [r3, #4]
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b5d8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b5dc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b5e0:	460b      	mov	r3, r1
 800b5e2:	18db      	adds	r3, r3, r3
 800b5e4:	643b      	str	r3, [r7, #64]	; 0x40
 800b5e6:	4613      	mov	r3, r2
 800b5e8:	eb42 0303 	adc.w	r3, r2, r3
 800b5ec:	647b      	str	r3, [r7, #68]	; 0x44
 800b5ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b5f2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b5f6:	f7f5 fad7 	bl	8000ba8 <__aeabi_uldivmod>
 800b5fa:	4602      	mov	r2, r0
 800b5fc:	460b      	mov	r3, r1
 800b5fe:	4611      	mov	r1, r2
 800b600:	4b3b      	ldr	r3, [pc, #236]	; (800b6f0 <UART_SetConfig+0x2d4>)
 800b602:	fba3 2301 	umull	r2, r3, r3, r1
 800b606:	095b      	lsrs	r3, r3, #5
 800b608:	2264      	movs	r2, #100	; 0x64
 800b60a:	fb02 f303 	mul.w	r3, r2, r3
 800b60e:	1acb      	subs	r3, r1, r3
 800b610:	00db      	lsls	r3, r3, #3
 800b612:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b616:	4b36      	ldr	r3, [pc, #216]	; (800b6f0 <UART_SetConfig+0x2d4>)
 800b618:	fba3 2302 	umull	r2, r3, r3, r2
 800b61c:	095b      	lsrs	r3, r3, #5
 800b61e:	005b      	lsls	r3, r3, #1
 800b620:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b624:	441c      	add	r4, r3
 800b626:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b62a:	2200      	movs	r2, #0
 800b62c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b630:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b634:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b638:	4642      	mov	r2, r8
 800b63a:	464b      	mov	r3, r9
 800b63c:	1891      	adds	r1, r2, r2
 800b63e:	63b9      	str	r1, [r7, #56]	; 0x38
 800b640:	415b      	adcs	r3, r3
 800b642:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b644:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b648:	4641      	mov	r1, r8
 800b64a:	1851      	adds	r1, r2, r1
 800b64c:	6339      	str	r1, [r7, #48]	; 0x30
 800b64e:	4649      	mov	r1, r9
 800b650:	414b      	adcs	r3, r1
 800b652:	637b      	str	r3, [r7, #52]	; 0x34
 800b654:	f04f 0200 	mov.w	r2, #0
 800b658:	f04f 0300 	mov.w	r3, #0
 800b65c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b660:	4659      	mov	r1, fp
 800b662:	00cb      	lsls	r3, r1, #3
 800b664:	4651      	mov	r1, sl
 800b666:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b66a:	4651      	mov	r1, sl
 800b66c:	00ca      	lsls	r2, r1, #3
 800b66e:	4610      	mov	r0, r2
 800b670:	4619      	mov	r1, r3
 800b672:	4603      	mov	r3, r0
 800b674:	4642      	mov	r2, r8
 800b676:	189b      	adds	r3, r3, r2
 800b678:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b67c:	464b      	mov	r3, r9
 800b67e:	460a      	mov	r2, r1
 800b680:	eb42 0303 	adc.w	r3, r2, r3
 800b684:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b68c:	685b      	ldr	r3, [r3, #4]
 800b68e:	2200      	movs	r2, #0
 800b690:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b694:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b698:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b69c:	460b      	mov	r3, r1
 800b69e:	18db      	adds	r3, r3, r3
 800b6a0:	62bb      	str	r3, [r7, #40]	; 0x28
 800b6a2:	4613      	mov	r3, r2
 800b6a4:	eb42 0303 	adc.w	r3, r2, r3
 800b6a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b6aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b6ae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b6b2:	f7f5 fa79 	bl	8000ba8 <__aeabi_uldivmod>
 800b6b6:	4602      	mov	r2, r0
 800b6b8:	460b      	mov	r3, r1
 800b6ba:	4b0d      	ldr	r3, [pc, #52]	; (800b6f0 <UART_SetConfig+0x2d4>)
 800b6bc:	fba3 1302 	umull	r1, r3, r3, r2
 800b6c0:	095b      	lsrs	r3, r3, #5
 800b6c2:	2164      	movs	r1, #100	; 0x64
 800b6c4:	fb01 f303 	mul.w	r3, r1, r3
 800b6c8:	1ad3      	subs	r3, r2, r3
 800b6ca:	00db      	lsls	r3, r3, #3
 800b6cc:	3332      	adds	r3, #50	; 0x32
 800b6ce:	4a08      	ldr	r2, [pc, #32]	; (800b6f0 <UART_SetConfig+0x2d4>)
 800b6d0:	fba2 2303 	umull	r2, r3, r2, r3
 800b6d4:	095b      	lsrs	r3, r3, #5
 800b6d6:	f003 0207 	and.w	r2, r3, #7
 800b6da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	4422      	add	r2, r4
 800b6e2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b6e4:	e105      	b.n	800b8f2 <UART_SetConfig+0x4d6>
 800b6e6:	bf00      	nop
 800b6e8:	40011000 	.word	0x40011000
 800b6ec:	40011400 	.word	0x40011400
 800b6f0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b6f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b6fe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b702:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b706:	4642      	mov	r2, r8
 800b708:	464b      	mov	r3, r9
 800b70a:	1891      	adds	r1, r2, r2
 800b70c:	6239      	str	r1, [r7, #32]
 800b70e:	415b      	adcs	r3, r3
 800b710:	627b      	str	r3, [r7, #36]	; 0x24
 800b712:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b716:	4641      	mov	r1, r8
 800b718:	1854      	adds	r4, r2, r1
 800b71a:	4649      	mov	r1, r9
 800b71c:	eb43 0501 	adc.w	r5, r3, r1
 800b720:	f04f 0200 	mov.w	r2, #0
 800b724:	f04f 0300 	mov.w	r3, #0
 800b728:	00eb      	lsls	r3, r5, #3
 800b72a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b72e:	00e2      	lsls	r2, r4, #3
 800b730:	4614      	mov	r4, r2
 800b732:	461d      	mov	r5, r3
 800b734:	4643      	mov	r3, r8
 800b736:	18e3      	adds	r3, r4, r3
 800b738:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b73c:	464b      	mov	r3, r9
 800b73e:	eb45 0303 	adc.w	r3, r5, r3
 800b742:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b746:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b74a:	685b      	ldr	r3, [r3, #4]
 800b74c:	2200      	movs	r2, #0
 800b74e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b752:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b756:	f04f 0200 	mov.w	r2, #0
 800b75a:	f04f 0300 	mov.w	r3, #0
 800b75e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b762:	4629      	mov	r1, r5
 800b764:	008b      	lsls	r3, r1, #2
 800b766:	4621      	mov	r1, r4
 800b768:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b76c:	4621      	mov	r1, r4
 800b76e:	008a      	lsls	r2, r1, #2
 800b770:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b774:	f7f5 fa18 	bl	8000ba8 <__aeabi_uldivmod>
 800b778:	4602      	mov	r2, r0
 800b77a:	460b      	mov	r3, r1
 800b77c:	4b60      	ldr	r3, [pc, #384]	; (800b900 <UART_SetConfig+0x4e4>)
 800b77e:	fba3 2302 	umull	r2, r3, r3, r2
 800b782:	095b      	lsrs	r3, r3, #5
 800b784:	011c      	lsls	r4, r3, #4
 800b786:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b78a:	2200      	movs	r2, #0
 800b78c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b790:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b794:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b798:	4642      	mov	r2, r8
 800b79a:	464b      	mov	r3, r9
 800b79c:	1891      	adds	r1, r2, r2
 800b79e:	61b9      	str	r1, [r7, #24]
 800b7a0:	415b      	adcs	r3, r3
 800b7a2:	61fb      	str	r3, [r7, #28]
 800b7a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b7a8:	4641      	mov	r1, r8
 800b7aa:	1851      	adds	r1, r2, r1
 800b7ac:	6139      	str	r1, [r7, #16]
 800b7ae:	4649      	mov	r1, r9
 800b7b0:	414b      	adcs	r3, r1
 800b7b2:	617b      	str	r3, [r7, #20]
 800b7b4:	f04f 0200 	mov.w	r2, #0
 800b7b8:	f04f 0300 	mov.w	r3, #0
 800b7bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b7c0:	4659      	mov	r1, fp
 800b7c2:	00cb      	lsls	r3, r1, #3
 800b7c4:	4651      	mov	r1, sl
 800b7c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b7ca:	4651      	mov	r1, sl
 800b7cc:	00ca      	lsls	r2, r1, #3
 800b7ce:	4610      	mov	r0, r2
 800b7d0:	4619      	mov	r1, r3
 800b7d2:	4603      	mov	r3, r0
 800b7d4:	4642      	mov	r2, r8
 800b7d6:	189b      	adds	r3, r3, r2
 800b7d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b7dc:	464b      	mov	r3, r9
 800b7de:	460a      	mov	r2, r1
 800b7e0:	eb42 0303 	adc.w	r3, r2, r3
 800b7e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b7e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b7ec:	685b      	ldr	r3, [r3, #4]
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	67bb      	str	r3, [r7, #120]	; 0x78
 800b7f2:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b7f4:	f04f 0200 	mov.w	r2, #0
 800b7f8:	f04f 0300 	mov.w	r3, #0
 800b7fc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b800:	4649      	mov	r1, r9
 800b802:	008b      	lsls	r3, r1, #2
 800b804:	4641      	mov	r1, r8
 800b806:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b80a:	4641      	mov	r1, r8
 800b80c:	008a      	lsls	r2, r1, #2
 800b80e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b812:	f7f5 f9c9 	bl	8000ba8 <__aeabi_uldivmod>
 800b816:	4602      	mov	r2, r0
 800b818:	460b      	mov	r3, r1
 800b81a:	4b39      	ldr	r3, [pc, #228]	; (800b900 <UART_SetConfig+0x4e4>)
 800b81c:	fba3 1302 	umull	r1, r3, r3, r2
 800b820:	095b      	lsrs	r3, r3, #5
 800b822:	2164      	movs	r1, #100	; 0x64
 800b824:	fb01 f303 	mul.w	r3, r1, r3
 800b828:	1ad3      	subs	r3, r2, r3
 800b82a:	011b      	lsls	r3, r3, #4
 800b82c:	3332      	adds	r3, #50	; 0x32
 800b82e:	4a34      	ldr	r2, [pc, #208]	; (800b900 <UART_SetConfig+0x4e4>)
 800b830:	fba2 2303 	umull	r2, r3, r2, r3
 800b834:	095b      	lsrs	r3, r3, #5
 800b836:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b83a:	441c      	add	r4, r3
 800b83c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b840:	2200      	movs	r2, #0
 800b842:	673b      	str	r3, [r7, #112]	; 0x70
 800b844:	677a      	str	r2, [r7, #116]	; 0x74
 800b846:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b84a:	4642      	mov	r2, r8
 800b84c:	464b      	mov	r3, r9
 800b84e:	1891      	adds	r1, r2, r2
 800b850:	60b9      	str	r1, [r7, #8]
 800b852:	415b      	adcs	r3, r3
 800b854:	60fb      	str	r3, [r7, #12]
 800b856:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b85a:	4641      	mov	r1, r8
 800b85c:	1851      	adds	r1, r2, r1
 800b85e:	6039      	str	r1, [r7, #0]
 800b860:	4649      	mov	r1, r9
 800b862:	414b      	adcs	r3, r1
 800b864:	607b      	str	r3, [r7, #4]
 800b866:	f04f 0200 	mov.w	r2, #0
 800b86a:	f04f 0300 	mov.w	r3, #0
 800b86e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b872:	4659      	mov	r1, fp
 800b874:	00cb      	lsls	r3, r1, #3
 800b876:	4651      	mov	r1, sl
 800b878:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b87c:	4651      	mov	r1, sl
 800b87e:	00ca      	lsls	r2, r1, #3
 800b880:	4610      	mov	r0, r2
 800b882:	4619      	mov	r1, r3
 800b884:	4603      	mov	r3, r0
 800b886:	4642      	mov	r2, r8
 800b888:	189b      	adds	r3, r3, r2
 800b88a:	66bb      	str	r3, [r7, #104]	; 0x68
 800b88c:	464b      	mov	r3, r9
 800b88e:	460a      	mov	r2, r1
 800b890:	eb42 0303 	adc.w	r3, r2, r3
 800b894:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b896:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b89a:	685b      	ldr	r3, [r3, #4]
 800b89c:	2200      	movs	r2, #0
 800b89e:	663b      	str	r3, [r7, #96]	; 0x60
 800b8a0:	667a      	str	r2, [r7, #100]	; 0x64
 800b8a2:	f04f 0200 	mov.w	r2, #0
 800b8a6:	f04f 0300 	mov.w	r3, #0
 800b8aa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800b8ae:	4649      	mov	r1, r9
 800b8b0:	008b      	lsls	r3, r1, #2
 800b8b2:	4641      	mov	r1, r8
 800b8b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b8b8:	4641      	mov	r1, r8
 800b8ba:	008a      	lsls	r2, r1, #2
 800b8bc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b8c0:	f7f5 f972 	bl	8000ba8 <__aeabi_uldivmod>
 800b8c4:	4602      	mov	r2, r0
 800b8c6:	460b      	mov	r3, r1
 800b8c8:	4b0d      	ldr	r3, [pc, #52]	; (800b900 <UART_SetConfig+0x4e4>)
 800b8ca:	fba3 1302 	umull	r1, r3, r3, r2
 800b8ce:	095b      	lsrs	r3, r3, #5
 800b8d0:	2164      	movs	r1, #100	; 0x64
 800b8d2:	fb01 f303 	mul.w	r3, r1, r3
 800b8d6:	1ad3      	subs	r3, r2, r3
 800b8d8:	011b      	lsls	r3, r3, #4
 800b8da:	3332      	adds	r3, #50	; 0x32
 800b8dc:	4a08      	ldr	r2, [pc, #32]	; (800b900 <UART_SetConfig+0x4e4>)
 800b8de:	fba2 2303 	umull	r2, r3, r2, r3
 800b8e2:	095b      	lsrs	r3, r3, #5
 800b8e4:	f003 020f 	and.w	r2, r3, #15
 800b8e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	4422      	add	r2, r4
 800b8f0:	609a      	str	r2, [r3, #8]
}
 800b8f2:	bf00      	nop
 800b8f4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b8fe:	bf00      	nop
 800b900:	51eb851f 	.word	0x51eb851f

0800b904 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800b904:	b580      	push	{r7, lr}
 800b906:	b084      	sub	sp, #16
 800b908:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800b90a:	2100      	movs	r1, #0
 800b90c:	2000      	movs	r0, #0
 800b90e:	f004 fe05 	bl	801051c <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 800b912:	4b2a      	ldr	r3, [pc, #168]	; (800b9bc <MX_LWIP_Init+0xb8>)
 800b914:	2200      	movs	r2, #0
 800b916:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 800b918:	4b29      	ldr	r3, [pc, #164]	; (800b9c0 <MX_LWIP_Init+0xbc>)
 800b91a:	2200      	movs	r2, #0
 800b91c:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 800b91e:	4b29      	ldr	r3, [pc, #164]	; (800b9c4 <MX_LWIP_Init+0xc0>)
 800b920:	2200      	movs	r2, #0
 800b922:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800b924:	4b28      	ldr	r3, [pc, #160]	; (800b9c8 <MX_LWIP_Init+0xc4>)
 800b926:	9302      	str	r3, [sp, #8]
 800b928:	4b28      	ldr	r3, [pc, #160]	; (800b9cc <MX_LWIP_Init+0xc8>)
 800b92a:	9301      	str	r3, [sp, #4]
 800b92c:	2300      	movs	r3, #0
 800b92e:	9300      	str	r3, [sp, #0]
 800b930:	4b24      	ldr	r3, [pc, #144]	; (800b9c4 <MX_LWIP_Init+0xc0>)
 800b932:	4a23      	ldr	r2, [pc, #140]	; (800b9c0 <MX_LWIP_Init+0xbc>)
 800b934:	4921      	ldr	r1, [pc, #132]	; (800b9bc <MX_LWIP_Init+0xb8>)
 800b936:	4826      	ldr	r0, [pc, #152]	; (800b9d0 <MX_LWIP_Init+0xcc>)
 800b938:	f005 fb74 	bl	8011024 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800b93c:	4824      	ldr	r0, [pc, #144]	; (800b9d0 <MX_LWIP_Init+0xcc>)
 800b93e:	f005 fd2b 	bl	8011398 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800b942:	4b23      	ldr	r3, [pc, #140]	; (800b9d0 <MX_LWIP_Init+0xcc>)
 800b944:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b948:	089b      	lsrs	r3, r3, #2
 800b94a:	f003 0301 	and.w	r3, r3, #1
 800b94e:	b2db      	uxtb	r3, r3
 800b950:	2b00      	cmp	r3, #0
 800b952:	d003      	beq.n	800b95c <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800b954:	481e      	ldr	r0, [pc, #120]	; (800b9d0 <MX_LWIP_Init+0xcc>)
 800b956:	f005 fd2f 	bl	80113b8 <netif_set_up>
 800b95a:	e002      	b.n	800b962 <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800b95c:	481c      	ldr	r0, [pc, #112]	; (800b9d0 <MX_LWIP_Init+0xcc>)
 800b95e:	f005 fd97 	bl	8011490 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800b962:	491c      	ldr	r1, [pc, #112]	; (800b9d4 <MX_LWIP_Init+0xd0>)
 800b964:	481a      	ldr	r0, [pc, #104]	; (800b9d0 <MX_LWIP_Init+0xcc>)
 800b966:	f005 fe2d 	bl	80115c4 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  Netif_LinkSemaphore = osSemaphoreNew(1, 1, NULL);
 800b96a:	2200      	movs	r2, #0
 800b96c:	2101      	movs	r1, #1
 800b96e:	2001      	movs	r0, #1
 800b970:	f000 fea0 	bl	800c6b4 <osSemaphoreNew>
 800b974:	4603      	mov	r3, r0
 800b976:	4a18      	ldr	r2, [pc, #96]	; (800b9d8 <MX_LWIP_Init+0xd4>)
 800b978:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 800b97a:	4b18      	ldr	r3, [pc, #96]	; (800b9dc <MX_LWIP_Init+0xd8>)
 800b97c:	4a14      	ldr	r2, [pc, #80]	; (800b9d0 <MX_LWIP_Init+0xcc>)
 800b97e:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 800b980:	4b15      	ldr	r3, [pc, #84]	; (800b9d8 <MX_LWIP_Init+0xd4>)
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	4a15      	ldr	r2, [pc, #84]	; (800b9dc <MX_LWIP_Init+0xd8>)
 800b986:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800b988:	2224      	movs	r2, #36	; 0x24
 800b98a:	2100      	movs	r1, #0
 800b98c:	4814      	ldr	r0, [pc, #80]	; (800b9e0 <MX_LWIP_Init+0xdc>)
 800b98e:	f010 fecb 	bl	801c728 <memset>
  attributes.name = "LinkThr";
 800b992:	4b13      	ldr	r3, [pc, #76]	; (800b9e0 <MX_LWIP_Init+0xdc>)
 800b994:	4a13      	ldr	r2, [pc, #76]	; (800b9e4 <MX_LWIP_Init+0xe0>)
 800b996:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800b998:	4b11      	ldr	r3, [pc, #68]	; (800b9e0 <MX_LWIP_Init+0xdc>)
 800b99a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b99e:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 800b9a0:	4b0f      	ldr	r3, [pc, #60]	; (800b9e0 <MX_LWIP_Init+0xdc>)
 800b9a2:	2210      	movs	r2, #16
 800b9a4:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernetif_set_link, &link_arg, &attributes);
 800b9a6:	4a0e      	ldr	r2, [pc, #56]	; (800b9e0 <MX_LWIP_Init+0xdc>)
 800b9a8:	490c      	ldr	r1, [pc, #48]	; (800b9dc <MX_LWIP_Init+0xd8>)
 800b9aa:	480f      	ldr	r0, [pc, #60]	; (800b9e8 <MX_LWIP_Init+0xe4>)
 800b9ac:	f000 fcbb 	bl	800c326 <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 800b9b0:	4807      	ldr	r0, [pc, #28]	; (800b9d0 <MX_LWIP_Init+0xcc>)
 800b9b2:	f00c ff6d 	bl	8018890 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800b9b6:	bf00      	nop
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	bd80      	pop	{r7, pc}
 800b9bc:	200141ac 	.word	0x200141ac
 800b9c0:	200141b0 	.word	0x200141b0
 800b9c4:	200141b4 	.word	0x200141b4
 800b9c8:	08010459 	.word	0x08010459
 800b9cc:	0800c011 	.word	0x0800c011
 800b9d0:	20014174 	.word	0x20014174
 800b9d4:	0800c0f5 	.word	0x0800c0f5
 800b9d8:	20000044 	.word	0x20000044
 800b9dc:	20014148 	.word	0x20014148
 800b9e0:	20014150 	.word	0x20014150
 800b9e4:	0801f6e4 	.word	0x0801f6e4
 800b9e8:	0800c07d 	.word	0x0800c07d

0800b9ec <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b08e      	sub	sp, #56	; 0x38
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b9f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	601a      	str	r2, [r3, #0]
 800b9fc:	605a      	str	r2, [r3, #4]
 800b9fe:	609a      	str	r2, [r3, #8]
 800ba00:	60da      	str	r2, [r3, #12]
 800ba02:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	4a4a      	ldr	r2, [pc, #296]	; (800bb34 <HAL_ETH_MspInit+0x148>)
 800ba0a:	4293      	cmp	r3, r2
 800ba0c:	f040 808d 	bne.w	800bb2a <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800ba10:	2300      	movs	r3, #0
 800ba12:	623b      	str	r3, [r7, #32]
 800ba14:	4b48      	ldr	r3, [pc, #288]	; (800bb38 <HAL_ETH_MspInit+0x14c>)
 800ba16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba18:	4a47      	ldr	r2, [pc, #284]	; (800bb38 <HAL_ETH_MspInit+0x14c>)
 800ba1a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800ba1e:	6313      	str	r3, [r2, #48]	; 0x30
 800ba20:	4b45      	ldr	r3, [pc, #276]	; (800bb38 <HAL_ETH_MspInit+0x14c>)
 800ba22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ba28:	623b      	str	r3, [r7, #32]
 800ba2a:	6a3b      	ldr	r3, [r7, #32]
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	61fb      	str	r3, [r7, #28]
 800ba30:	4b41      	ldr	r3, [pc, #260]	; (800bb38 <HAL_ETH_MspInit+0x14c>)
 800ba32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba34:	4a40      	ldr	r2, [pc, #256]	; (800bb38 <HAL_ETH_MspInit+0x14c>)
 800ba36:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ba3a:	6313      	str	r3, [r2, #48]	; 0x30
 800ba3c:	4b3e      	ldr	r3, [pc, #248]	; (800bb38 <HAL_ETH_MspInit+0x14c>)
 800ba3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba40:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ba44:	61fb      	str	r3, [r7, #28]
 800ba46:	69fb      	ldr	r3, [r7, #28]
 800ba48:	2300      	movs	r3, #0
 800ba4a:	61bb      	str	r3, [r7, #24]
 800ba4c:	4b3a      	ldr	r3, [pc, #232]	; (800bb38 <HAL_ETH_MspInit+0x14c>)
 800ba4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba50:	4a39      	ldr	r2, [pc, #228]	; (800bb38 <HAL_ETH_MspInit+0x14c>)
 800ba52:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ba56:	6313      	str	r3, [r2, #48]	; 0x30
 800ba58:	4b37      	ldr	r3, [pc, #220]	; (800bb38 <HAL_ETH_MspInit+0x14c>)
 800ba5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ba60:	61bb      	str	r3, [r7, #24]
 800ba62:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ba64:	2300      	movs	r3, #0
 800ba66:	617b      	str	r3, [r7, #20]
 800ba68:	4b33      	ldr	r3, [pc, #204]	; (800bb38 <HAL_ETH_MspInit+0x14c>)
 800ba6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba6c:	4a32      	ldr	r2, [pc, #200]	; (800bb38 <HAL_ETH_MspInit+0x14c>)
 800ba6e:	f043 0304 	orr.w	r3, r3, #4
 800ba72:	6313      	str	r3, [r2, #48]	; 0x30
 800ba74:	4b30      	ldr	r3, [pc, #192]	; (800bb38 <HAL_ETH_MspInit+0x14c>)
 800ba76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba78:	f003 0304 	and.w	r3, r3, #4
 800ba7c:	617b      	str	r3, [r7, #20]
 800ba7e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ba80:	2300      	movs	r3, #0
 800ba82:	613b      	str	r3, [r7, #16]
 800ba84:	4b2c      	ldr	r3, [pc, #176]	; (800bb38 <HAL_ETH_MspInit+0x14c>)
 800ba86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba88:	4a2b      	ldr	r2, [pc, #172]	; (800bb38 <HAL_ETH_MspInit+0x14c>)
 800ba8a:	f043 0301 	orr.w	r3, r3, #1
 800ba8e:	6313      	str	r3, [r2, #48]	; 0x30
 800ba90:	4b29      	ldr	r3, [pc, #164]	; (800bb38 <HAL_ETH_MspInit+0x14c>)
 800ba92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba94:	f003 0301 	and.w	r3, r3, #1
 800ba98:	613b      	str	r3, [r7, #16]
 800ba9a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	60fb      	str	r3, [r7, #12]
 800baa0:	4b25      	ldr	r3, [pc, #148]	; (800bb38 <HAL_ETH_MspInit+0x14c>)
 800baa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800baa4:	4a24      	ldr	r2, [pc, #144]	; (800bb38 <HAL_ETH_MspInit+0x14c>)
 800baa6:	f043 0302 	orr.w	r3, r3, #2
 800baaa:	6313      	str	r3, [r2, #48]	; 0x30
 800baac:	4b22      	ldr	r3, [pc, #136]	; (800bb38 <HAL_ETH_MspInit+0x14c>)
 800baae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bab0:	f003 0302 	and.w	r3, r3, #2
 800bab4:	60fb      	str	r3, [r7, #12]
 800bab6:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800bab8:	2332      	movs	r3, #50	; 0x32
 800baba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800babc:	2302      	movs	r3, #2
 800babe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bac0:	2300      	movs	r3, #0
 800bac2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bac4:	2303      	movs	r3, #3
 800bac6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800bac8:	230b      	movs	r3, #11
 800baca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800bacc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bad0:	4619      	mov	r1, r3
 800bad2:	481a      	ldr	r0, [pc, #104]	; (800bb3c <HAL_ETH_MspInit+0x150>)
 800bad4:	f7fb feda 	bl	800788c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800bad8:	2386      	movs	r3, #134	; 0x86
 800bada:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800badc:	2302      	movs	r3, #2
 800bade:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bae0:	2300      	movs	r3, #0
 800bae2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bae4:	2303      	movs	r3, #3
 800bae6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800bae8:	230b      	movs	r3, #11
 800baea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800baec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800baf0:	4619      	mov	r1, r3
 800baf2:	4813      	ldr	r0, [pc, #76]	; (800bb40 <HAL_ETH_MspInit+0x154>)
 800baf4:	f7fb feca 	bl	800788c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 800baf8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800bafc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bafe:	2302      	movs	r3, #2
 800bb00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bb02:	2300      	movs	r3, #0
 800bb04:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bb06:	2303      	movs	r3, #3
 800bb08:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800bb0a:	230b      	movs	r3, #11
 800bb0c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bb0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bb12:	4619      	mov	r1, r3
 800bb14:	480b      	ldr	r0, [pc, #44]	; (800bb44 <HAL_ETH_MspInit+0x158>)
 800bb16:	f7fb feb9 	bl	800788c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800bb1a:	2200      	movs	r2, #0
 800bb1c:	2105      	movs	r1, #5
 800bb1e:	203d      	movs	r0, #61	; 0x3d
 800bb20:	f7f9 fe09 	bl	8005736 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800bb24:	203d      	movs	r0, #61	; 0x3d
 800bb26:	f7f9 fe22 	bl	800576e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800bb2a:	bf00      	nop
 800bb2c:	3738      	adds	r7, #56	; 0x38
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	bd80      	pop	{r7, pc}
 800bb32:	bf00      	nop
 800bb34:	40028000 	.word	0x40028000
 800bb38:	40023800 	.word	0x40023800
 800bb3c:	40020800 	.word	0x40020800
 800bb40:	40020000 	.word	0x40020000
 800bb44:	40020400 	.word	0x40020400

0800bb48 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	b082      	sub	sp, #8
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 800bb50:	4b04      	ldr	r3, [pc, #16]	; (800bb64 <HAL_ETH_RxCpltCallback+0x1c>)
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	4618      	mov	r0, r3
 800bb56:	f000 fe89 	bl	800c86c <osSemaphoreRelease>
}
 800bb5a:	bf00      	nop
 800bb5c:	3708      	adds	r7, #8
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	bd80      	pop	{r7, pc}
 800bb62:	bf00      	nop
 800bb64:	20000048 	.word	0x20000048

0800bb68 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b090      	sub	sp, #64	; 0x40
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800bb70:	2300      	movs	r3, #0
 800bb72:	63bb      	str	r3, [r7, #56]	; 0x38
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800bb74:	4b5d      	ldr	r3, [pc, #372]	; (800bcec <low_level_init+0x184>)
 800bb76:	4a5e      	ldr	r2, [pc, #376]	; (800bcf0 <low_level_init+0x188>)
 800bb78:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800bb7a:	4b5c      	ldr	r3, [pc, #368]	; (800bcec <low_level_init+0x184>)
 800bb7c:	2201      	movs	r2, #1
 800bb7e:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 800bb80:	4b5a      	ldr	r3, [pc, #360]	; (800bcec <low_level_init+0x184>)
 800bb82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800bb86:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800bb88:	4b58      	ldr	r3, [pc, #352]	; (800bcec <low_level_init+0x184>)
 800bb8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bb8e:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800bb90:	4b56      	ldr	r3, [pc, #344]	; (800bcec <low_level_init+0x184>)
 800bb92:	2201      	movs	r2, #1
 800bb94:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800bb96:	2300      	movs	r3, #0
 800bb98:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x80;
 800bb9a:	2380      	movs	r3, #128	; 0x80
 800bb9c:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xE1;
 800bb9e:	23e1      	movs	r3, #225	; 0xe1
 800bba0:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0x00;
 800bba2:	2300      	movs	r3, #0
 800bba4:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x00;
 800bba6:	2300      	movs	r3, #0
 800bba8:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x00;
 800bbaa:	2300      	movs	r3, #0
 800bbac:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 800bbae:	4a4f      	ldr	r2, [pc, #316]	; (800bcec <low_level_init+0x184>)
 800bbb0:	f107 030c 	add.w	r3, r7, #12
 800bbb4:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 800bbb6:	4b4d      	ldr	r3, [pc, #308]	; (800bcec <low_level_init+0x184>)
 800bbb8:	2201      	movs	r2, #1
 800bbba:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800bbbc:	4b4b      	ldr	r3, [pc, #300]	; (800bcec <low_level_init+0x184>)
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800bbc2:	4b4a      	ldr	r3, [pc, #296]	; (800bcec <low_level_init+0x184>)
 800bbc4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800bbc8:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800bbca:	4848      	ldr	r0, [pc, #288]	; (800bcec <low_level_init+0x184>)
 800bbcc:	f7fa f9ec 	bl	8005fa8 <HAL_ETH_Init>
 800bbd0:	4603      	mov	r3, r0
 800bbd2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 800bbd6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d108      	bne.n	800bbf0 <low_level_init+0x88>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bbe4:	f043 0304 	orr.w	r3, r3, #4
 800bbe8:	b2da      	uxtb	r2, r3
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800bbf0:	2304      	movs	r3, #4
 800bbf2:	4a40      	ldr	r2, [pc, #256]	; (800bcf4 <low_level_init+0x18c>)
 800bbf4:	4940      	ldr	r1, [pc, #256]	; (800bcf8 <low_level_init+0x190>)
 800bbf6:	483d      	ldr	r0, [pc, #244]	; (800bcec <low_level_init+0x184>)
 800bbf8:	f7fa fb70 	bl	80062dc <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800bbfc:	2304      	movs	r3, #4
 800bbfe:	4a3f      	ldr	r2, [pc, #252]	; (800bcfc <low_level_init+0x194>)
 800bc00:	493f      	ldr	r1, [pc, #252]	; (800bd00 <low_level_init+0x198>)
 800bc02:	483a      	ldr	r0, [pc, #232]	; (800bcec <low_level_init+0x184>)
 800bc04:	f7fa fbd2 	bl	80063ac <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	2206      	movs	r2, #6
 800bc0c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800bc10:	4b36      	ldr	r3, [pc, #216]	; (800bcec <low_level_init+0x184>)
 800bc12:	695b      	ldr	r3, [r3, #20]
 800bc14:	781a      	ldrb	r2, [r3, #0]
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800bc1c:	4b33      	ldr	r3, [pc, #204]	; (800bcec <low_level_init+0x184>)
 800bc1e:	695b      	ldr	r3, [r3, #20]
 800bc20:	785a      	ldrb	r2, [r3, #1]
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800bc28:	4b30      	ldr	r3, [pc, #192]	; (800bcec <low_level_init+0x184>)
 800bc2a:	695b      	ldr	r3, [r3, #20]
 800bc2c:	789a      	ldrb	r2, [r3, #2]
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800bc34:	4b2d      	ldr	r3, [pc, #180]	; (800bcec <low_level_init+0x184>)
 800bc36:	695b      	ldr	r3, [r3, #20]
 800bc38:	78da      	ldrb	r2, [r3, #3]
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800bc40:	4b2a      	ldr	r3, [pc, #168]	; (800bcec <low_level_init+0x184>)
 800bc42:	695b      	ldr	r3, [r3, #20]
 800bc44:	791a      	ldrb	r2, [r3, #4]
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800bc4c:	4b27      	ldr	r3, [pc, #156]	; (800bcec <low_level_init+0x184>)
 800bc4e:	695b      	ldr	r3, [r3, #20]
 800bc50:	795a      	ldrb	r2, [r3, #5]
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = 1500;
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800bc5e:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bc66:	f043 030a 	orr.w	r3, r3, #10
 800bc6a:	b2da      	uxtb	r2, r3
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  s_xSemaphore = osSemaphoreNew(1, 1, NULL);
 800bc72:	2200      	movs	r2, #0
 800bc74:	2101      	movs	r1, #1
 800bc76:	2001      	movs	r0, #1
 800bc78:	f000 fd1c 	bl	800c6b4 <osSemaphoreNew>
 800bc7c:	4603      	mov	r3, r0
 800bc7e:	4a21      	ldr	r2, [pc, #132]	; (800bd04 <low_level_init+0x19c>)
 800bc80:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800bc82:	f107 0314 	add.w	r3, r7, #20
 800bc86:	2224      	movs	r2, #36	; 0x24
 800bc88:	2100      	movs	r1, #0
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	f010 fd4c 	bl	801c728 <memset>
  attributes.name = "EthIf";
 800bc90:	4b1d      	ldr	r3, [pc, #116]	; (800bd08 <low_level_init+0x1a0>)
 800bc92:	617b      	str	r3, [r7, #20]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800bc94:	f44f 73af 	mov.w	r3, #350	; 0x15e
 800bc98:	62bb      	str	r3, [r7, #40]	; 0x28
  attributes.priority = osPriorityRealtime;
 800bc9a:	2330      	movs	r3, #48	; 0x30
 800bc9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  osThreadNew(ethernetif_input, netif, &attributes);
 800bc9e:	f107 0314 	add.w	r3, r7, #20
 800bca2:	461a      	mov	r2, r3
 800bca4:	6879      	ldr	r1, [r7, #4]
 800bca6:	4819      	ldr	r0, [pc, #100]	; (800bd0c <low_level_init+0x1a4>)
 800bca8:	f000 fb3d 	bl	800c326 <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 800bcac:	480f      	ldr	r0, [pc, #60]	; (800bcec <low_level_init+0x184>)
 800bcae:	f7fa fea1 	bl	80069f4 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800bcb2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800bcb6:	461a      	mov	r2, r3
 800bcb8:	211d      	movs	r1, #29
 800bcba:	480c      	ldr	r0, [pc, #48]	; (800bcec <low_level_init+0x184>)
 800bcbc:	f7fa fdcc 	bl	8006858 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800bcc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcc2:	f043 030b 	orr.w	r3, r3, #11
 800bcc6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800bcc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcca:	461a      	mov	r2, r3
 800bccc:	211d      	movs	r1, #29
 800bcce:	4807      	ldr	r0, [pc, #28]	; (800bcec <low_level_init+0x184>)
 800bcd0:	f7fa fe2a 	bl	8006928 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800bcd4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800bcd8:	461a      	mov	r2, r3
 800bcda:	211d      	movs	r1, #29
 800bcdc:	4803      	ldr	r0, [pc, #12]	; (800bcec <low_level_init+0x184>)
 800bcde:	f7fa fdbb 	bl	8006858 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800bce2:	bf00      	nop
 800bce4:	3740      	adds	r7, #64	; 0x40
 800bce6:	46bd      	mov	sp, r7
 800bce8:	bd80      	pop	{r7, pc}
 800bcea:	bf00      	nop
 800bcec:	20015a88 	.word	0x20015a88
 800bcf0:	40028000 	.word	0x40028000
 800bcf4:	20015ad0 	.word	0x20015ad0
 800bcf8:	200141b8 	.word	0x200141b8
 800bcfc:	20014238 	.word	0x20014238
 800bd00:	20015a08 	.word	0x20015a08
 800bd04:	20000048 	.word	0x20000048
 800bd08:	0801f6ec 	.word	0x0801f6ec
 800bd0c:	0800bfb1 	.word	0x0800bfb1

0800bd10 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b08a      	sub	sp, #40	; 0x28
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
 800bd18:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800bd1a:	4b4b      	ldr	r3, [pc, #300]	; (800be48 <low_level_output+0x138>)
 800bd1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd1e:	689b      	ldr	r3, [r3, #8]
 800bd20:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800bd22:	2300      	movs	r3, #0
 800bd24:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800bd26:	2300      	movs	r3, #0
 800bd28:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800bd2e:	2300      	movs	r3, #0
 800bd30:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800bd32:	4b45      	ldr	r3, [pc, #276]	; (800be48 <low_level_output+0x138>)
 800bd34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd36:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 800bd38:	2300      	movs	r3, #0
 800bd3a:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 800bd3c:	683b      	ldr	r3, [r7, #0]
 800bd3e:	623b      	str	r3, [r7, #32]
 800bd40:	e05a      	b.n	800bdf8 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800bd42:	69bb      	ldr	r3, [r7, #24]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	da03      	bge.n	800bd52 <low_level_output+0x42>
      {
        errval = ERR_USE;
 800bd4a:	23f8      	movs	r3, #248	; 0xf8
 800bd4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 800bd50:	e05c      	b.n	800be0c <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800bd52:	6a3b      	ldr	r3, [r7, #32]
 800bd54:	895b      	ldrh	r3, [r3, #10]
 800bd56:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 800bd58:	2300      	movs	r3, #0
 800bd5a:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800bd5c:	e02f      	b.n	800bdbe <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800bd5e:	69fa      	ldr	r2, [r7, #28]
 800bd60:	693b      	ldr	r3, [r7, #16]
 800bd62:	18d0      	adds	r0, r2, r3
 800bd64:	6a3b      	ldr	r3, [r7, #32]
 800bd66:	685a      	ldr	r2, [r3, #4]
 800bd68:	68bb      	ldr	r3, [r7, #8]
 800bd6a:	18d1      	adds	r1, r2, r3
 800bd6c:	693b      	ldr	r3, [r7, #16]
 800bd6e:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800bd72:	3304      	adds	r3, #4
 800bd74:	461a      	mov	r2, r3
 800bd76:	f010 fcc9 	bl	801c70c <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800bd7a:	69bb      	ldr	r3, [r7, #24]
 800bd7c:	68db      	ldr	r3, [r3, #12]
 800bd7e:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800bd80:	69bb      	ldr	r3, [r7, #24]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	da03      	bge.n	800bd90 <low_level_output+0x80>
        {
          errval = ERR_USE;
 800bd88:	23f8      	movs	r3, #248	; 0xf8
 800bd8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800bd8e:	e03d      	b.n	800be0c <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800bd90:	69bb      	ldr	r3, [r7, #24]
 800bd92:	689b      	ldr	r3, [r3, #8]
 800bd94:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800bd96:	693a      	ldr	r2, [r7, #16]
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	4413      	add	r3, r2
 800bd9c:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800bda0:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800bda2:	68ba      	ldr	r2, [r7, #8]
 800bda4:	693b      	ldr	r3, [r7, #16]
 800bda6:	1ad3      	subs	r3, r2, r3
 800bda8:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800bdac:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800bdae:	697a      	ldr	r2, [r7, #20]
 800bdb0:	693b      	ldr	r3, [r7, #16]
 800bdb2:	1ad3      	subs	r3, r2, r3
 800bdb4:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800bdb8:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800bdba:	2300      	movs	r3, #0
 800bdbc:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800bdbe:	68fa      	ldr	r2, [r7, #12]
 800bdc0:	693b      	ldr	r3, [r7, #16]
 800bdc2:	4413      	add	r3, r2
 800bdc4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800bdc8:	4293      	cmp	r3, r2
 800bdca:	d8c8      	bhi.n	800bd5e <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800bdcc:	69fa      	ldr	r2, [r7, #28]
 800bdce:	693b      	ldr	r3, [r7, #16]
 800bdd0:	18d0      	adds	r0, r2, r3
 800bdd2:	6a3b      	ldr	r3, [r7, #32]
 800bdd4:	685a      	ldr	r2, [r3, #4]
 800bdd6:	68bb      	ldr	r3, [r7, #8]
 800bdd8:	4413      	add	r3, r2
 800bdda:	68fa      	ldr	r2, [r7, #12]
 800bddc:	4619      	mov	r1, r3
 800bdde:	f010 fc95 	bl	801c70c <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800bde2:	693a      	ldr	r2, [r7, #16]
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	4413      	add	r3, r2
 800bde8:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800bdea:	697a      	ldr	r2, [r7, #20]
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	4413      	add	r3, r2
 800bdf0:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800bdf2:	6a3b      	ldr	r3, [r7, #32]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	623b      	str	r3, [r7, #32]
 800bdf8:	6a3b      	ldr	r3, [r7, #32]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d1a1      	bne.n	800bd42 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800bdfe:	6979      	ldr	r1, [r7, #20]
 800be00:	4811      	ldr	r0, [pc, #68]	; (800be48 <low_level_output+0x138>)
 800be02:	f7fa fb3f 	bl	8006484 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 800be06:	2300      	movs	r3, #0
 800be08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800be0c:	4b0e      	ldr	r3, [pc, #56]	; (800be48 <low_level_output+0x138>)
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be14:	695b      	ldr	r3, [r3, #20]
 800be16:	f003 0320 	and.w	r3, r3, #32
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d00d      	beq.n	800be3a <low_level_output+0x12a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800be1e:	4b0a      	ldr	r3, [pc, #40]	; (800be48 <low_level_output+0x138>)
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be26:	461a      	mov	r2, r3
 800be28:	2320      	movs	r3, #32
 800be2a:	6153      	str	r3, [r2, #20]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800be2c:	4b06      	ldr	r3, [pc, #24]	; (800be48 <low_level_output+0x138>)
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be34:	461a      	mov	r2, r3
 800be36:	2300      	movs	r3, #0
 800be38:	6053      	str	r3, [r2, #4]
  }
  return errval;
 800be3a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800be3e:	4618      	mov	r0, r3
 800be40:	3728      	adds	r7, #40	; 0x28
 800be42:	46bd      	mov	sp, r7
 800be44:	bd80      	pop	{r7, pc}
 800be46:	bf00      	nop
 800be48:	20015a88 	.word	0x20015a88

0800be4c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800be4c:	b580      	push	{r7, lr}
 800be4e:	b08c      	sub	sp, #48	; 0x30
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800be54:	2300      	movs	r3, #0
 800be56:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 800be58:	2300      	movs	r3, #0
 800be5a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 800be5c:	2300      	movs	r3, #0
 800be5e:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 800be60:	2300      	movs	r3, #0
 800be62:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 800be64:	2300      	movs	r3, #0
 800be66:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 800be68:	2300      	movs	r3, #0
 800be6a:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 800be6c:	2300      	movs	r3, #0
 800be6e:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 800be70:	484e      	ldr	r0, [pc, #312]	; (800bfac <low_level_input+0x160>)
 800be72:	f7fa fbf1 	bl	8006658 <HAL_ETH_GetReceivedFrame_IT>
 800be76:	4603      	mov	r3, r0
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d001      	beq.n	800be80 <low_level_input+0x34>

    return NULL;
 800be7c:	2300      	movs	r3, #0
 800be7e:	e091      	b.n	800bfa4 <low_level_input+0x158>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 800be80:	4b4a      	ldr	r3, [pc, #296]	; (800bfac <low_level_input+0x160>)
 800be82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be84:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800be86:	4b49      	ldr	r3, [pc, #292]	; (800bfac <low_level_input+0x160>)
 800be88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be8a:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 800be8c:	89fb      	ldrh	r3, [r7, #14]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d007      	beq.n	800bea2 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800be92:	89fb      	ldrh	r3, [r7, #14]
 800be94:	f44f 72c1 	mov.w	r2, #386	; 0x182
 800be98:	4619      	mov	r1, r3
 800be9a:	2000      	movs	r0, #0
 800be9c:	f005 fc5c 	bl	8011758 <pbuf_alloc>
 800bea0:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 800bea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d04b      	beq.n	800bf40 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800bea8:	4b40      	ldr	r3, [pc, #256]	; (800bfac <low_level_input+0x160>)
 800beaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800beac:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 800beae:	2300      	movs	r3, #0
 800beb0:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800beb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beb4:	62bb      	str	r3, [r7, #40]	; 0x28
 800beb6:	e040      	b.n	800bf3a <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 800beb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beba:	895b      	ldrh	r3, [r3, #10]
 800bebc:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800bebe:	2300      	movs	r3, #0
 800bec0:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800bec2:	e021      	b.n	800bf08 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800bec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bec6:	685a      	ldr	r2, [r3, #4]
 800bec8:	69bb      	ldr	r3, [r7, #24]
 800beca:	18d0      	adds	r0, r2, r3
 800becc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bece:	69fb      	ldr	r3, [r7, #28]
 800bed0:	18d1      	adds	r1, r2, r3
 800bed2:	69fb      	ldr	r3, [r7, #28]
 800bed4:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800bed8:	3304      	adds	r3, #4
 800beda:	461a      	mov	r2, r3
 800bedc:	f010 fc16 	bl	801c70c <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800bee0:	6a3b      	ldr	r3, [r7, #32]
 800bee2:	68db      	ldr	r3, [r3, #12]
 800bee4:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800bee6:	6a3b      	ldr	r3, [r7, #32]
 800bee8:	689b      	ldr	r3, [r3, #8]
 800beea:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800beec:	69fa      	ldr	r2, [r7, #28]
 800beee:	697b      	ldr	r3, [r7, #20]
 800bef0:	4413      	add	r3, r2
 800bef2:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800bef6:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800bef8:	69ba      	ldr	r2, [r7, #24]
 800befa:	69fb      	ldr	r3, [r7, #28]
 800befc:	1ad3      	subs	r3, r2, r3
 800befe:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800bf02:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 800bf04:	2300      	movs	r3, #0
 800bf06:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800bf08:	697a      	ldr	r2, [r7, #20]
 800bf0a:	69fb      	ldr	r3, [r7, #28]
 800bf0c:	4413      	add	r3, r2
 800bf0e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800bf12:	4293      	cmp	r3, r2
 800bf14:	d8d6      	bhi.n	800bec4 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800bf16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf18:	685a      	ldr	r2, [r3, #4]
 800bf1a:	69bb      	ldr	r3, [r7, #24]
 800bf1c:	18d0      	adds	r0, r2, r3
 800bf1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf20:	69fb      	ldr	r3, [r7, #28]
 800bf22:	4413      	add	r3, r2
 800bf24:	697a      	ldr	r2, [r7, #20]
 800bf26:	4619      	mov	r1, r3
 800bf28:	f010 fbf0 	bl	801c70c <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800bf2c:	69fa      	ldr	r2, [r7, #28]
 800bf2e:	697b      	ldr	r3, [r7, #20]
 800bf30:	4413      	add	r3, r2
 800bf32:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800bf34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	62bb      	str	r3, [r7, #40]	; 0x28
 800bf3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d1bb      	bne.n	800beb8 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800bf40:	4b1a      	ldr	r3, [pc, #104]	; (800bfac <low_level_input+0x160>)
 800bf42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf44:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800bf46:	2300      	movs	r3, #0
 800bf48:	613b      	str	r3, [r7, #16]
 800bf4a:	e00b      	b.n	800bf64 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800bf4c:	6a3b      	ldr	r3, [r7, #32]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800bf54:	6a3b      	ldr	r3, [r7, #32]
 800bf56:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800bf58:	6a3b      	ldr	r3, [r7, #32]
 800bf5a:	68db      	ldr	r3, [r3, #12]
 800bf5c:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800bf5e:	693b      	ldr	r3, [r7, #16]
 800bf60:	3301      	adds	r3, #1
 800bf62:	613b      	str	r3, [r7, #16]
 800bf64:	4b11      	ldr	r3, [pc, #68]	; (800bfac <low_level_input+0x160>)
 800bf66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf68:	693a      	ldr	r2, [r7, #16]
 800bf6a:	429a      	cmp	r2, r3
 800bf6c:	d3ee      	bcc.n	800bf4c <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 800bf6e:	4b0f      	ldr	r3, [pc, #60]	; (800bfac <low_level_input+0x160>)
 800bf70:	2200      	movs	r2, #0
 800bf72:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 800bf74:	4b0d      	ldr	r3, [pc, #52]	; (800bfac <low_level_input+0x160>)
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf7c:	695b      	ldr	r3, [r3, #20]
 800bf7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d00d      	beq.n	800bfa2 <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800bf86:	4b09      	ldr	r3, [pc, #36]	; (800bfac <low_level_input+0x160>)
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf8e:	461a      	mov	r2, r3
 800bf90:	2380      	movs	r3, #128	; 0x80
 800bf92:	6153      	str	r3, [r2, #20]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800bf94:	4b05      	ldr	r3, [pc, #20]	; (800bfac <low_level_input+0x160>)
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf9c:	461a      	mov	r2, r3
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	6093      	str	r3, [r2, #8]
  }
  return p;
 800bfa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	3730      	adds	r7, #48	; 0x30
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	bd80      	pop	{r7, pc}
 800bfac:	20015a88 	.word	0x20015a88

0800bfb0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 800bfb0:	b580      	push	{r7, lr}
 800bfb2:	b084      	sub	sp, #16
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800bfbc:	4b12      	ldr	r3, [pc, #72]	; (800c008 <ethernetif_input+0x58>)
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	f04f 31ff 	mov.w	r1, #4294967295
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	f000 fbff 	bl	800c7c8 <osSemaphoreAcquire>
 800bfca:	4603      	mov	r3, r0
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d1f5      	bne.n	800bfbc <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 800bfd0:	480e      	ldr	r0, [pc, #56]	; (800c00c <ethernetif_input+0x5c>)
 800bfd2:	f010 faf3 	bl	801c5bc <sys_mutex_lock>
        p = low_level_input( netif );
 800bfd6:	68f8      	ldr	r0, [r7, #12]
 800bfd8:	f7ff ff38 	bl	800be4c <low_level_input>
 800bfdc:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 800bfde:	68bb      	ldr	r3, [r7, #8]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d00a      	beq.n	800bffa <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	691b      	ldr	r3, [r3, #16]
 800bfe8:	68f9      	ldr	r1, [r7, #12]
 800bfea:	68b8      	ldr	r0, [r7, #8]
 800bfec:	4798      	blx	r3
 800bfee:	4603      	mov	r3, r0
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d002      	beq.n	800bffa <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 800bff4:	68b8      	ldr	r0, [r7, #8]
 800bff6:	f005 fe93 	bl	8011d20 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 800bffa:	4804      	ldr	r0, [pc, #16]	; (800c00c <ethernetif_input+0x5c>)
 800bffc:	f010 faed 	bl	801c5da <sys_mutex_unlock>
      } while(p!=NULL);
 800c000:	68bb      	ldr	r3, [r7, #8]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d1e4      	bne.n	800bfd0 <ethernetif_input+0x20>
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800c006:	e7d9      	b.n	800bfbc <ethernetif_input+0xc>
 800c008:	20000048 	.word	0x20000048
 800c00c:	200172e0 	.word	0x200172e0

0800c010 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800c010:	b580      	push	{r7, lr}
 800c012:	b082      	sub	sp, #8
 800c014:	af00      	add	r7, sp, #0
 800c016:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d106      	bne.n	800c02c <ethernetif_init+0x1c>
 800c01e:	4b0e      	ldr	r3, [pc, #56]	; (800c058 <ethernetif_init+0x48>)
 800c020:	f240 2231 	movw	r2, #561	; 0x231
 800c024:	490d      	ldr	r1, [pc, #52]	; (800c05c <ethernetif_init+0x4c>)
 800c026:	480e      	ldr	r0, [pc, #56]	; (800c060 <ethernetif_init+0x50>)
 800c028:	f011 fa2a 	bl	801d480 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	2273      	movs	r2, #115	; 0x73
 800c030:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	2274      	movs	r2, #116	; 0x74
 800c038:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	4a09      	ldr	r2, [pc, #36]	; (800c064 <ethernetif_init+0x54>)
 800c040:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	4a08      	ldr	r2, [pc, #32]	; (800c068 <ethernetif_init+0x58>)
 800c046:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800c048:	6878      	ldr	r0, [r7, #4]
 800c04a:	f7ff fd8d 	bl	800bb68 <low_level_init>

  return ERR_OK;
 800c04e:	2300      	movs	r3, #0
}
 800c050:	4618      	mov	r0, r3
 800c052:	3708      	adds	r7, #8
 800c054:	46bd      	mov	sp, r7
 800c056:	bd80      	pop	{r7, pc}
 800c058:	0801f6f4 	.word	0x0801f6f4
 800c05c:	0801f710 	.word	0x0801f710
 800c060:	0801f720 	.word	0x0801f720
 800c064:	0801a75d 	.word	0x0801a75d
 800c068:	0800bd11 	.word	0x0800bd11

0800c06c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800c070:	f7f9 fa56 	bl	8005520 <HAL_GetTick>
 800c074:	4603      	mov	r3, r0
}
 800c076:	4618      	mov	r0, r3
 800c078:	bd80      	pop	{r7, pc}
	...

0800c07c <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void* argument)

{
 800c07c:	b580      	push	{r7, lr}
 800c07e:	b084      	sub	sp, #16
 800c080:	af00      	add	r7, sp, #0
 800c082:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800c084:	2300      	movs	r3, #0
 800c086:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800c08c:	f107 0308 	add.w	r3, r7, #8
 800c090:	461a      	mov	r2, r3
 800c092:	2101      	movs	r1, #1
 800c094:	4816      	ldr	r0, [pc, #88]	; (800c0f0 <ethernetif_set_link+0x74>)
 800c096:	f7fa fbdf 	bl	8006858 <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 800c09a:	68bb      	ldr	r3, [r7, #8]
 800c09c:	f003 0304 	and.w	r3, r3, #4
 800c0a0:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c0aa:	f003 0304 	and.w	r3, r3, #4
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d108      	bne.n	800c0c4 <ethernetif_set_link+0x48>
 800c0b2:	68bb      	ldr	r3, [r7, #8]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d005      	beq.n	800c0c4 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	4618      	mov	r0, r3
 800c0be:	f005 fa19 	bl	80114f4 <netif_set_link_up>
 800c0c2:	e011      	b.n	800c0e8 <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c0cc:	089b      	lsrs	r3, r3, #2
 800c0ce:	f003 0301 	and.w	r3, r3, #1
 800c0d2:	b2db      	uxtb	r3, r3
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d007      	beq.n	800c0e8 <ethernetif_set_link+0x6c>
 800c0d8:	68bb      	ldr	r3, [r7, #8]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d104      	bne.n	800c0e8 <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	f005 fa3e 	bl	8011564 <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 800c0e8:	20c8      	movs	r0, #200	; 0xc8
 800c0ea:	f000 f9ba 	bl	800c462 <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800c0ee:	e7cd      	b.n	800c08c <ethernetif_set_link+0x10>
 800c0f0:	20015a88 	.word	0x20015a88

0800c0f4 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 800c0f4:	b580      	push	{r7, lr}
 800c0f6:	b084      	sub	sp, #16
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 800c100:	2300      	movs	r3, #0
 800c102:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c10a:	089b      	lsrs	r3, r3, #2
 800c10c:	f003 0301 	and.w	r3, r3, #1
 800c110:	b2db      	uxtb	r3, r3
 800c112:	2b00      	cmp	r3, #0
 800c114:	d05d      	beq.n	800c1d2 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800c116:	4b34      	ldr	r3, [pc, #208]	; (800c1e8 <ethernetif_update_config+0xf4>)
 800c118:	685b      	ldr	r3, [r3, #4]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d03f      	beq.n	800c19e <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 800c11e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c122:	2100      	movs	r1, #0
 800c124:	4830      	ldr	r0, [pc, #192]	; (800c1e8 <ethernetif_update_config+0xf4>)
 800c126:	f7fa fbff 	bl	8006928 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800c12a:	f7f9 f9f9 	bl	8005520 <HAL_GetTick>
 800c12e:	4603      	mov	r3, r0
 800c130:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800c132:	f107 0308 	add.w	r3, r7, #8
 800c136:	461a      	mov	r2, r3
 800c138:	2101      	movs	r1, #1
 800c13a:	482b      	ldr	r0, [pc, #172]	; (800c1e8 <ethernetif_update_config+0xf4>)
 800c13c:	f7fa fb8c 	bl	8006858 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 800c140:	f7f9 f9ee 	bl	8005520 <HAL_GetTick>
 800c144:	4602      	mov	r2, r0
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	1ad3      	subs	r3, r2, r3
 800c14a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c14e:	d828      	bhi.n	800c1a2 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800c150:	68bb      	ldr	r3, [r7, #8]
 800c152:	f003 0320 	and.w	r3, r3, #32
 800c156:	2b00      	cmp	r3, #0
 800c158:	d0eb      	beq.n	800c132 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800c15a:	f107 0308 	add.w	r3, r7, #8
 800c15e:	461a      	mov	r2, r3
 800c160:	2110      	movs	r1, #16
 800c162:	4821      	ldr	r0, [pc, #132]	; (800c1e8 <ethernetif_update_config+0xf4>)
 800c164:	f7fa fb78 	bl	8006858 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800c168:	68bb      	ldr	r3, [r7, #8]
 800c16a:	f003 0304 	and.w	r3, r3, #4
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d004      	beq.n	800c17c <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800c172:	4b1d      	ldr	r3, [pc, #116]	; (800c1e8 <ethernetif_update_config+0xf4>)
 800c174:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c178:	60da      	str	r2, [r3, #12]
 800c17a:	e002      	b.n	800c182 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 800c17c:	4b1a      	ldr	r3, [pc, #104]	; (800c1e8 <ethernetif_update_config+0xf4>)
 800c17e:	2200      	movs	r2, #0
 800c180:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 800c182:	68bb      	ldr	r3, [r7, #8]
 800c184:	f003 0302 	and.w	r3, r3, #2
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d003      	beq.n	800c194 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 800c18c:	4b16      	ldr	r3, [pc, #88]	; (800c1e8 <ethernetif_update_config+0xf4>)
 800c18e:	2200      	movs	r2, #0
 800c190:	609a      	str	r2, [r3, #8]
 800c192:	e016      	b.n	800c1c2 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 800c194:	4b14      	ldr	r3, [pc, #80]	; (800c1e8 <ethernetif_update_config+0xf4>)
 800c196:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800c19a:	609a      	str	r2, [r3, #8]
 800c19c:	e011      	b.n	800c1c2 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 800c19e:	bf00      	nop
 800c1a0:	e000      	b.n	800c1a4 <ethernetif_update_config+0xb0>
          goto error;
 800c1a2:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800c1a4:	4b10      	ldr	r3, [pc, #64]	; (800c1e8 <ethernetif_update_config+0xf4>)
 800c1a6:	68db      	ldr	r3, [r3, #12]
 800c1a8:	08db      	lsrs	r3, r3, #3
 800c1aa:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 800c1ac:	4b0e      	ldr	r3, [pc, #56]	; (800c1e8 <ethernetif_update_config+0xf4>)
 800c1ae:	689b      	ldr	r3, [r3, #8]
 800c1b0:	085b      	lsrs	r3, r3, #1
 800c1b2:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800c1b4:	4313      	orrs	r3, r2
 800c1b6:	b29b      	uxth	r3, r3
 800c1b8:	461a      	mov	r2, r3
 800c1ba:	2100      	movs	r1, #0
 800c1bc:	480a      	ldr	r0, [pc, #40]	; (800c1e8 <ethernetif_update_config+0xf4>)
 800c1be:	f7fa fbb3 	bl	8006928 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800c1c2:	2100      	movs	r1, #0
 800c1c4:	4808      	ldr	r0, [pc, #32]	; (800c1e8 <ethernetif_update_config+0xf4>)
 800c1c6:	f7fa fc73 	bl	8006ab0 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 800c1ca:	4807      	ldr	r0, [pc, #28]	; (800c1e8 <ethernetif_update_config+0xf4>)
 800c1cc:	f7fa fc12 	bl	80069f4 <HAL_ETH_Start>
 800c1d0:	e002      	b.n	800c1d8 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 800c1d2:	4805      	ldr	r0, [pc, #20]	; (800c1e8 <ethernetif_update_config+0xf4>)
 800c1d4:	f7fa fc3d 	bl	8006a52 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 800c1d8:	6878      	ldr	r0, [r7, #4]
 800c1da:	f000 f807 	bl	800c1ec <ethernetif_notify_conn_changed>
}
 800c1de:	bf00      	nop
 800c1e0:	3710      	adds	r7, #16
 800c1e2:	46bd      	mov	sp, r7
 800c1e4:	bd80      	pop	{r7, pc}
 800c1e6:	bf00      	nop
 800c1e8:	20015a88 	.word	0x20015a88

0800c1ec <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 800c1ec:	b480      	push	{r7}
 800c1ee:	b083      	sub	sp, #12
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 800c1f4:	bf00      	nop
 800c1f6:	370c      	adds	r7, #12
 800c1f8:	46bd      	mov	sp, r7
 800c1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1fe:	4770      	bx	lr

0800c200 <__NVIC_SetPriority>:
{
 800c200:	b480      	push	{r7}
 800c202:	b083      	sub	sp, #12
 800c204:	af00      	add	r7, sp, #0
 800c206:	4603      	mov	r3, r0
 800c208:	6039      	str	r1, [r7, #0]
 800c20a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c20c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c210:	2b00      	cmp	r3, #0
 800c212:	db0a      	blt.n	800c22a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c214:	683b      	ldr	r3, [r7, #0]
 800c216:	b2da      	uxtb	r2, r3
 800c218:	490c      	ldr	r1, [pc, #48]	; (800c24c <__NVIC_SetPriority+0x4c>)
 800c21a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c21e:	0112      	lsls	r2, r2, #4
 800c220:	b2d2      	uxtb	r2, r2
 800c222:	440b      	add	r3, r1
 800c224:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800c228:	e00a      	b.n	800c240 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c22a:	683b      	ldr	r3, [r7, #0]
 800c22c:	b2da      	uxtb	r2, r3
 800c22e:	4908      	ldr	r1, [pc, #32]	; (800c250 <__NVIC_SetPriority+0x50>)
 800c230:	79fb      	ldrb	r3, [r7, #7]
 800c232:	f003 030f 	and.w	r3, r3, #15
 800c236:	3b04      	subs	r3, #4
 800c238:	0112      	lsls	r2, r2, #4
 800c23a:	b2d2      	uxtb	r2, r2
 800c23c:	440b      	add	r3, r1
 800c23e:	761a      	strb	r2, [r3, #24]
}
 800c240:	bf00      	nop
 800c242:	370c      	adds	r7, #12
 800c244:	46bd      	mov	sp, r7
 800c246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24a:	4770      	bx	lr
 800c24c:	e000e100 	.word	0xe000e100
 800c250:	e000ed00 	.word	0xe000ed00

0800c254 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c254:	b580      	push	{r7, lr}
 800c256:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c258:	2100      	movs	r1, #0
 800c25a:	f06f 0004 	mvn.w	r0, #4
 800c25e:	f7ff ffcf 	bl	800c200 <__NVIC_SetPriority>
#endif
}
 800c262:	bf00      	nop
 800c264:	bd80      	pop	{r7, pc}
	...

0800c268 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c268:	b480      	push	{r7}
 800c26a:	b083      	sub	sp, #12
 800c26c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c26e:	f3ef 8305 	mrs	r3, IPSR
 800c272:	603b      	str	r3, [r7, #0]
  return(result);
 800c274:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c276:	2b00      	cmp	r3, #0
 800c278:	d003      	beq.n	800c282 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c27a:	f06f 0305 	mvn.w	r3, #5
 800c27e:	607b      	str	r3, [r7, #4]
 800c280:	e00c      	b.n	800c29c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c282:	4b0a      	ldr	r3, [pc, #40]	; (800c2ac <osKernelInitialize+0x44>)
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	2b00      	cmp	r3, #0
 800c288:	d105      	bne.n	800c296 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c28a:	4b08      	ldr	r3, [pc, #32]	; (800c2ac <osKernelInitialize+0x44>)
 800c28c:	2201      	movs	r2, #1
 800c28e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c290:	2300      	movs	r3, #0
 800c292:	607b      	str	r3, [r7, #4]
 800c294:	e002      	b.n	800c29c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c296:	f04f 33ff 	mov.w	r3, #4294967295
 800c29a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c29c:	687b      	ldr	r3, [r7, #4]
}
 800c29e:	4618      	mov	r0, r3
 800c2a0:	370c      	adds	r7, #12
 800c2a2:	46bd      	mov	sp, r7
 800c2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a8:	4770      	bx	lr
 800c2aa:	bf00      	nop
 800c2ac:	2000004c 	.word	0x2000004c

0800c2b0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c2b0:	b580      	push	{r7, lr}
 800c2b2:	b082      	sub	sp, #8
 800c2b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c2b6:	f3ef 8305 	mrs	r3, IPSR
 800c2ba:	603b      	str	r3, [r7, #0]
  return(result);
 800c2bc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d003      	beq.n	800c2ca <osKernelStart+0x1a>
    stat = osErrorISR;
 800c2c2:	f06f 0305 	mvn.w	r3, #5
 800c2c6:	607b      	str	r3, [r7, #4]
 800c2c8:	e010      	b.n	800c2ec <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c2ca:	4b0b      	ldr	r3, [pc, #44]	; (800c2f8 <osKernelStart+0x48>)
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	2b01      	cmp	r3, #1
 800c2d0:	d109      	bne.n	800c2e6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c2d2:	f7ff ffbf 	bl	800c254 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c2d6:	4b08      	ldr	r3, [pc, #32]	; (800c2f8 <osKernelStart+0x48>)
 800c2d8:	2202      	movs	r2, #2
 800c2da:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c2dc:	f001 ffbe 	bl	800e25c <vTaskStartScheduler>
      stat = osOK;
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	607b      	str	r3, [r7, #4]
 800c2e4:	e002      	b.n	800c2ec <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c2e6:	f04f 33ff 	mov.w	r3, #4294967295
 800c2ea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c2ec:	687b      	ldr	r3, [r7, #4]
}
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	3708      	adds	r7, #8
 800c2f2:	46bd      	mov	sp, r7
 800c2f4:	bd80      	pop	{r7, pc}
 800c2f6:	bf00      	nop
 800c2f8:	2000004c 	.word	0x2000004c

0800c2fc <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b082      	sub	sp, #8
 800c300:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c302:	f3ef 8305 	mrs	r3, IPSR
 800c306:	603b      	str	r3, [r7, #0]
  return(result);
 800c308:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d003      	beq.n	800c316 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800c30e:	f002 f8c7 	bl	800e4a0 <xTaskGetTickCountFromISR>
 800c312:	6078      	str	r0, [r7, #4]
 800c314:	e002      	b.n	800c31c <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800c316:	f002 f8b3 	bl	800e480 <xTaskGetTickCount>
 800c31a:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800c31c:	687b      	ldr	r3, [r7, #4]
}
 800c31e:	4618      	mov	r0, r3
 800c320:	3708      	adds	r7, #8
 800c322:	46bd      	mov	sp, r7
 800c324:	bd80      	pop	{r7, pc}

0800c326 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c326:	b580      	push	{r7, lr}
 800c328:	b08e      	sub	sp, #56	; 0x38
 800c32a:	af04      	add	r7, sp, #16
 800c32c:	60f8      	str	r0, [r7, #12]
 800c32e:	60b9      	str	r1, [r7, #8]
 800c330:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c332:	2300      	movs	r3, #0
 800c334:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c336:	f3ef 8305 	mrs	r3, IPSR
 800c33a:	617b      	str	r3, [r7, #20]
  return(result);
 800c33c:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d17f      	bne.n	800c442 <osThreadNew+0x11c>
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	2b00      	cmp	r3, #0
 800c346:	d07c      	beq.n	800c442 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 800c348:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c34c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c34e:	2318      	movs	r3, #24
 800c350:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c352:	2300      	movs	r3, #0
 800c354:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800c356:	f04f 33ff 	mov.w	r3, #4294967295
 800c35a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d045      	beq.n	800c3ee <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	2b00      	cmp	r3, #0
 800c368:	d002      	beq.n	800c370 <osThreadNew+0x4a>
        name = attr->name;
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	699b      	ldr	r3, [r3, #24]
 800c374:	2b00      	cmp	r3, #0
 800c376:	d002      	beq.n	800c37e <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	699b      	ldr	r3, [r3, #24]
 800c37c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c37e:	69fb      	ldr	r3, [r7, #28]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d008      	beq.n	800c396 <osThreadNew+0x70>
 800c384:	69fb      	ldr	r3, [r7, #28]
 800c386:	2b38      	cmp	r3, #56	; 0x38
 800c388:	d805      	bhi.n	800c396 <osThreadNew+0x70>
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	685b      	ldr	r3, [r3, #4]
 800c38e:	f003 0301 	and.w	r3, r3, #1
 800c392:	2b00      	cmp	r3, #0
 800c394:	d001      	beq.n	800c39a <osThreadNew+0x74>
        return (NULL);
 800c396:	2300      	movs	r3, #0
 800c398:	e054      	b.n	800c444 <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	695b      	ldr	r3, [r3, #20]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d003      	beq.n	800c3aa <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	695b      	ldr	r3, [r3, #20]
 800c3a6:	089b      	lsrs	r3, r3, #2
 800c3a8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	689b      	ldr	r3, [r3, #8]
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d00e      	beq.n	800c3d0 <osThreadNew+0xaa>
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	68db      	ldr	r3, [r3, #12]
 800c3b6:	2b5b      	cmp	r3, #91	; 0x5b
 800c3b8:	d90a      	bls.n	800c3d0 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d006      	beq.n	800c3d0 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	695b      	ldr	r3, [r3, #20]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d002      	beq.n	800c3d0 <osThreadNew+0xaa>
        mem = 1;
 800c3ca:	2301      	movs	r3, #1
 800c3cc:	61bb      	str	r3, [r7, #24]
 800c3ce:	e010      	b.n	800c3f2 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	689b      	ldr	r3, [r3, #8]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d10c      	bne.n	800c3f2 <osThreadNew+0xcc>
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	68db      	ldr	r3, [r3, #12]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d108      	bne.n	800c3f2 <osThreadNew+0xcc>
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	691b      	ldr	r3, [r3, #16]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d104      	bne.n	800c3f2 <osThreadNew+0xcc>
          mem = 0;
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	61bb      	str	r3, [r7, #24]
 800c3ec:	e001      	b.n	800c3f2 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c3f2:	69bb      	ldr	r3, [r7, #24]
 800c3f4:	2b01      	cmp	r3, #1
 800c3f6:	d110      	bne.n	800c41a <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c3fc:	687a      	ldr	r2, [r7, #4]
 800c3fe:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c400:	9202      	str	r2, [sp, #8]
 800c402:	9301      	str	r3, [sp, #4]
 800c404:	69fb      	ldr	r3, [r7, #28]
 800c406:	9300      	str	r3, [sp, #0]
 800c408:	68bb      	ldr	r3, [r7, #8]
 800c40a:	6a3a      	ldr	r2, [r7, #32]
 800c40c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c40e:	68f8      	ldr	r0, [r7, #12]
 800c410:	f001 fd4e 	bl	800deb0 <xTaskCreateStatic>
 800c414:	4603      	mov	r3, r0
 800c416:	613b      	str	r3, [r7, #16]
 800c418:	e013      	b.n	800c442 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 800c41a:	69bb      	ldr	r3, [r7, #24]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d110      	bne.n	800c442 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c420:	6a3b      	ldr	r3, [r7, #32]
 800c422:	b29a      	uxth	r2, r3
 800c424:	f107 0310 	add.w	r3, r7, #16
 800c428:	9301      	str	r3, [sp, #4]
 800c42a:	69fb      	ldr	r3, [r7, #28]
 800c42c:	9300      	str	r3, [sp, #0]
 800c42e:	68bb      	ldr	r3, [r7, #8]
 800c430:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c432:	68f8      	ldr	r0, [r7, #12]
 800c434:	f001 fd99 	bl	800df6a <xTaskCreate>
 800c438:	4603      	mov	r3, r0
 800c43a:	2b01      	cmp	r3, #1
 800c43c:	d001      	beq.n	800c442 <osThreadNew+0x11c>
            hTask = NULL;
 800c43e:	2300      	movs	r3, #0
 800c440:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c442:	693b      	ldr	r3, [r7, #16]
}
 800c444:	4618      	mov	r0, r3
 800c446:	3728      	adds	r7, #40	; 0x28
 800c448:	46bd      	mov	sp, r7
 800c44a:	bd80      	pop	{r7, pc}

0800c44c <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 800c44c:	b580      	push	{r7, lr}
 800c44e:	b082      	sub	sp, #8
 800c450:	af00      	add	r7, sp, #0
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 800c452:	f002 fb5d 	bl	800eb10 <xTaskGetCurrentTaskHandle>
 800c456:	6078      	str	r0, [r7, #4]

  return (id);
 800c458:	687b      	ldr	r3, [r7, #4]
}
 800c45a:	4618      	mov	r0, r3
 800c45c:	3708      	adds	r7, #8
 800c45e:	46bd      	mov	sp, r7
 800c460:	bd80      	pop	{r7, pc}

0800c462 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c462:	b580      	push	{r7, lr}
 800c464:	b084      	sub	sp, #16
 800c466:	af00      	add	r7, sp, #0
 800c468:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c46a:	f3ef 8305 	mrs	r3, IPSR
 800c46e:	60bb      	str	r3, [r7, #8]
  return(result);
 800c470:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c472:	2b00      	cmp	r3, #0
 800c474:	d003      	beq.n	800c47e <osDelay+0x1c>
    stat = osErrorISR;
 800c476:	f06f 0305 	mvn.w	r3, #5
 800c47a:	60fb      	str	r3, [r7, #12]
 800c47c:	e007      	b.n	800c48e <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c47e:	2300      	movs	r3, #0
 800c480:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d002      	beq.n	800c48e <osDelay+0x2c>
      vTaskDelay(ticks);
 800c488:	6878      	ldr	r0, [r7, #4]
 800c48a:	f001 feb3 	bl	800e1f4 <vTaskDelay>
    }
  }

  return (stat);
 800c48e:	68fb      	ldr	r3, [r7, #12]
}
 800c490:	4618      	mov	r0, r3
 800c492:	3710      	adds	r7, #16
 800c494:	46bd      	mov	sp, r7
 800c496:	bd80      	pop	{r7, pc}

0800c498 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800c498:	b580      	push	{r7, lr}
 800c49a:	b088      	sub	sp, #32
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c4a4:	f3ef 8305 	mrs	r3, IPSR
 800c4a8:	60bb      	str	r3, [r7, #8]
  return(result);
 800c4aa:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d174      	bne.n	800c59a <osMutexNew+0x102>
    if (attr != NULL) {
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d003      	beq.n	800c4be <osMutexNew+0x26>
      type = attr->attr_bits;
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	685b      	ldr	r3, [r3, #4]
 800c4ba:	61bb      	str	r3, [r7, #24]
 800c4bc:	e001      	b.n	800c4c2 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800c4be:	2300      	movs	r3, #0
 800c4c0:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800c4c2:	69bb      	ldr	r3, [r7, #24]
 800c4c4:	f003 0301 	and.w	r3, r3, #1
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d002      	beq.n	800c4d2 <osMutexNew+0x3a>
      rmtx = 1U;
 800c4cc:	2301      	movs	r3, #1
 800c4ce:	617b      	str	r3, [r7, #20]
 800c4d0:	e001      	b.n	800c4d6 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800c4d6:	69bb      	ldr	r3, [r7, #24]
 800c4d8:	f003 0308 	and.w	r3, r3, #8
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d15c      	bne.n	800c59a <osMutexNew+0x102>
      mem = -1;
 800c4e0:	f04f 33ff 	mov.w	r3, #4294967295
 800c4e4:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d015      	beq.n	800c518 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	689b      	ldr	r3, [r3, #8]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d006      	beq.n	800c502 <osMutexNew+0x6a>
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	68db      	ldr	r3, [r3, #12]
 800c4f8:	2b4f      	cmp	r3, #79	; 0x4f
 800c4fa:	d902      	bls.n	800c502 <osMutexNew+0x6a>
          mem = 1;
 800c4fc:	2301      	movs	r3, #1
 800c4fe:	613b      	str	r3, [r7, #16]
 800c500:	e00c      	b.n	800c51c <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	689b      	ldr	r3, [r3, #8]
 800c506:	2b00      	cmp	r3, #0
 800c508:	d108      	bne.n	800c51c <osMutexNew+0x84>
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	68db      	ldr	r3, [r3, #12]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d104      	bne.n	800c51c <osMutexNew+0x84>
            mem = 0;
 800c512:	2300      	movs	r3, #0
 800c514:	613b      	str	r3, [r7, #16]
 800c516:	e001      	b.n	800c51c <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800c518:	2300      	movs	r3, #0
 800c51a:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800c51c:	693b      	ldr	r3, [r7, #16]
 800c51e:	2b01      	cmp	r3, #1
 800c520:	d112      	bne.n	800c548 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800c522:	697b      	ldr	r3, [r7, #20]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d007      	beq.n	800c538 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	689b      	ldr	r3, [r3, #8]
 800c52c:	4619      	mov	r1, r3
 800c52e:	2004      	movs	r0, #4
 800c530:	f000 fd69 	bl	800d006 <xQueueCreateMutexStatic>
 800c534:	61f8      	str	r0, [r7, #28]
 800c536:	e016      	b.n	800c566 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	689b      	ldr	r3, [r3, #8]
 800c53c:	4619      	mov	r1, r3
 800c53e:	2001      	movs	r0, #1
 800c540:	f000 fd61 	bl	800d006 <xQueueCreateMutexStatic>
 800c544:	61f8      	str	r0, [r7, #28]
 800c546:	e00e      	b.n	800c566 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800c548:	693b      	ldr	r3, [r7, #16]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d10b      	bne.n	800c566 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800c54e:	697b      	ldr	r3, [r7, #20]
 800c550:	2b00      	cmp	r3, #0
 800c552:	d004      	beq.n	800c55e <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800c554:	2004      	movs	r0, #4
 800c556:	f000 fd3e 	bl	800cfd6 <xQueueCreateMutex>
 800c55a:	61f8      	str	r0, [r7, #28]
 800c55c:	e003      	b.n	800c566 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800c55e:	2001      	movs	r0, #1
 800c560:	f000 fd39 	bl	800cfd6 <xQueueCreateMutex>
 800c564:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800c566:	69fb      	ldr	r3, [r7, #28]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d00c      	beq.n	800c586 <osMutexNew+0xee>
        if (attr != NULL) {
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d003      	beq.n	800c57a <osMutexNew+0xe2>
          name = attr->name;
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	60fb      	str	r3, [r7, #12]
 800c578:	e001      	b.n	800c57e <osMutexNew+0xe6>
        } else {
          name = NULL;
 800c57a:	2300      	movs	r3, #0
 800c57c:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800c57e:	68f9      	ldr	r1, [r7, #12]
 800c580:	69f8      	ldr	r0, [r7, #28]
 800c582:	f001 fc0d 	bl	800dda0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800c586:	69fb      	ldr	r3, [r7, #28]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d006      	beq.n	800c59a <osMutexNew+0x102>
 800c58c:	697b      	ldr	r3, [r7, #20]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d003      	beq.n	800c59a <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800c592:	69fb      	ldr	r3, [r7, #28]
 800c594:	f043 0301 	orr.w	r3, r3, #1
 800c598:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800c59a:	69fb      	ldr	r3, [r7, #28]
}
 800c59c:	4618      	mov	r0, r3
 800c59e:	3720      	adds	r7, #32
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	bd80      	pop	{r7, pc}

0800c5a4 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800c5a4:	b580      	push	{r7, lr}
 800c5a6:	b086      	sub	sp, #24
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	6078      	str	r0, [r7, #4]
 800c5ac:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	f023 0301 	bic.w	r3, r3, #1
 800c5b4:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	f003 0301 	and.w	r3, r3, #1
 800c5bc:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800c5be:	2300      	movs	r3, #0
 800c5c0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c5c2:	f3ef 8305 	mrs	r3, IPSR
 800c5c6:	60bb      	str	r3, [r7, #8]
  return(result);
 800c5c8:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d003      	beq.n	800c5d6 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800c5ce:	f06f 0305 	mvn.w	r3, #5
 800c5d2:	617b      	str	r3, [r7, #20]
 800c5d4:	e02c      	b.n	800c630 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800c5d6:	693b      	ldr	r3, [r7, #16]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d103      	bne.n	800c5e4 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800c5dc:	f06f 0303 	mvn.w	r3, #3
 800c5e0:	617b      	str	r3, [r7, #20]
 800c5e2:	e025      	b.n	800c630 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d011      	beq.n	800c60e <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800c5ea:	6839      	ldr	r1, [r7, #0]
 800c5ec:	6938      	ldr	r0, [r7, #16]
 800c5ee:	f000 fd59 	bl	800d0a4 <xQueueTakeMutexRecursive>
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	2b01      	cmp	r3, #1
 800c5f6:	d01b      	beq.n	800c630 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800c5f8:	683b      	ldr	r3, [r7, #0]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d003      	beq.n	800c606 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800c5fe:	f06f 0301 	mvn.w	r3, #1
 800c602:	617b      	str	r3, [r7, #20]
 800c604:	e014      	b.n	800c630 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800c606:	f06f 0302 	mvn.w	r3, #2
 800c60a:	617b      	str	r3, [r7, #20]
 800c60c:	e010      	b.n	800c630 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800c60e:	6839      	ldr	r1, [r7, #0]
 800c610:	6938      	ldr	r0, [r7, #16]
 800c612:	f001 f8ed 	bl	800d7f0 <xQueueSemaphoreTake>
 800c616:	4603      	mov	r3, r0
 800c618:	2b01      	cmp	r3, #1
 800c61a:	d009      	beq.n	800c630 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800c61c:	683b      	ldr	r3, [r7, #0]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d003      	beq.n	800c62a <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800c622:	f06f 0301 	mvn.w	r3, #1
 800c626:	617b      	str	r3, [r7, #20]
 800c628:	e002      	b.n	800c630 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800c62a:	f06f 0302 	mvn.w	r3, #2
 800c62e:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800c630:	697b      	ldr	r3, [r7, #20]
}
 800c632:	4618      	mov	r0, r3
 800c634:	3718      	adds	r7, #24
 800c636:	46bd      	mov	sp, r7
 800c638:	bd80      	pop	{r7, pc}

0800c63a <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800c63a:	b580      	push	{r7, lr}
 800c63c:	b086      	sub	sp, #24
 800c63e:	af00      	add	r7, sp, #0
 800c640:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	f023 0301 	bic.w	r3, r3, #1
 800c648:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	f003 0301 	and.w	r3, r3, #1
 800c650:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800c652:	2300      	movs	r3, #0
 800c654:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c656:	f3ef 8305 	mrs	r3, IPSR
 800c65a:	60bb      	str	r3, [r7, #8]
  return(result);
 800c65c:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d003      	beq.n	800c66a <osMutexRelease+0x30>
    stat = osErrorISR;
 800c662:	f06f 0305 	mvn.w	r3, #5
 800c666:	617b      	str	r3, [r7, #20]
 800c668:	e01f      	b.n	800c6aa <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800c66a:	693b      	ldr	r3, [r7, #16]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d103      	bne.n	800c678 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800c670:	f06f 0303 	mvn.w	r3, #3
 800c674:	617b      	str	r3, [r7, #20]
 800c676:	e018      	b.n	800c6aa <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d009      	beq.n	800c692 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800c67e:	6938      	ldr	r0, [r7, #16]
 800c680:	f000 fcdc 	bl	800d03c <xQueueGiveMutexRecursive>
 800c684:	4603      	mov	r3, r0
 800c686:	2b01      	cmp	r3, #1
 800c688:	d00f      	beq.n	800c6aa <osMutexRelease+0x70>
        stat = osErrorResource;
 800c68a:	f06f 0302 	mvn.w	r3, #2
 800c68e:	617b      	str	r3, [r7, #20]
 800c690:	e00b      	b.n	800c6aa <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800c692:	2300      	movs	r3, #0
 800c694:	2200      	movs	r2, #0
 800c696:	2100      	movs	r1, #0
 800c698:	6938      	ldr	r0, [r7, #16]
 800c69a:	f000 fda3 	bl	800d1e4 <xQueueGenericSend>
 800c69e:	4603      	mov	r3, r0
 800c6a0:	2b01      	cmp	r3, #1
 800c6a2:	d002      	beq.n	800c6aa <osMutexRelease+0x70>
        stat = osErrorResource;
 800c6a4:	f06f 0302 	mvn.w	r3, #2
 800c6a8:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800c6aa:	697b      	ldr	r3, [r7, #20]
}
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	3718      	adds	r7, #24
 800c6b0:	46bd      	mov	sp, r7
 800c6b2:	bd80      	pop	{r7, pc}

0800c6b4 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800c6b4:	b580      	push	{r7, lr}
 800c6b6:	b08a      	sub	sp, #40	; 0x28
 800c6b8:	af02      	add	r7, sp, #8
 800c6ba:	60f8      	str	r0, [r7, #12]
 800c6bc:	60b9      	str	r1, [r7, #8]
 800c6be:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c6c4:	f3ef 8305 	mrs	r3, IPSR
 800c6c8:	613b      	str	r3, [r7, #16]
  return(result);
 800c6ca:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d175      	bne.n	800c7bc <osSemaphoreNew+0x108>
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d072      	beq.n	800c7bc <osSemaphoreNew+0x108>
 800c6d6:	68ba      	ldr	r2, [r7, #8]
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	429a      	cmp	r2, r3
 800c6dc:	d86e      	bhi.n	800c7bc <osSemaphoreNew+0x108>
    mem = -1;
 800c6de:	f04f 33ff 	mov.w	r3, #4294967295
 800c6e2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d015      	beq.n	800c716 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	689b      	ldr	r3, [r3, #8]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d006      	beq.n	800c700 <osSemaphoreNew+0x4c>
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	68db      	ldr	r3, [r3, #12]
 800c6f6:	2b4f      	cmp	r3, #79	; 0x4f
 800c6f8:	d902      	bls.n	800c700 <osSemaphoreNew+0x4c>
        mem = 1;
 800c6fa:	2301      	movs	r3, #1
 800c6fc:	61bb      	str	r3, [r7, #24]
 800c6fe:	e00c      	b.n	800c71a <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	689b      	ldr	r3, [r3, #8]
 800c704:	2b00      	cmp	r3, #0
 800c706:	d108      	bne.n	800c71a <osSemaphoreNew+0x66>
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	68db      	ldr	r3, [r3, #12]
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d104      	bne.n	800c71a <osSemaphoreNew+0x66>
          mem = 0;
 800c710:	2300      	movs	r3, #0
 800c712:	61bb      	str	r3, [r7, #24]
 800c714:	e001      	b.n	800c71a <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800c716:	2300      	movs	r3, #0
 800c718:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800c71a:	69bb      	ldr	r3, [r7, #24]
 800c71c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c720:	d04c      	beq.n	800c7bc <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	2b01      	cmp	r3, #1
 800c726:	d128      	bne.n	800c77a <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800c728:	69bb      	ldr	r3, [r7, #24]
 800c72a:	2b01      	cmp	r3, #1
 800c72c:	d10a      	bne.n	800c744 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	689b      	ldr	r3, [r3, #8]
 800c732:	2203      	movs	r2, #3
 800c734:	9200      	str	r2, [sp, #0]
 800c736:	2200      	movs	r2, #0
 800c738:	2100      	movs	r1, #0
 800c73a:	2001      	movs	r0, #1
 800c73c:	f000 fb5c 	bl	800cdf8 <xQueueGenericCreateStatic>
 800c740:	61f8      	str	r0, [r7, #28]
 800c742:	e005      	b.n	800c750 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800c744:	2203      	movs	r2, #3
 800c746:	2100      	movs	r1, #0
 800c748:	2001      	movs	r0, #1
 800c74a:	f000 fbcd 	bl	800cee8 <xQueueGenericCreate>
 800c74e:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800c750:	69fb      	ldr	r3, [r7, #28]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d022      	beq.n	800c79c <osSemaphoreNew+0xe8>
 800c756:	68bb      	ldr	r3, [r7, #8]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d01f      	beq.n	800c79c <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800c75c:	2300      	movs	r3, #0
 800c75e:	2200      	movs	r2, #0
 800c760:	2100      	movs	r1, #0
 800c762:	69f8      	ldr	r0, [r7, #28]
 800c764:	f000 fd3e 	bl	800d1e4 <xQueueGenericSend>
 800c768:	4603      	mov	r3, r0
 800c76a:	2b01      	cmp	r3, #1
 800c76c:	d016      	beq.n	800c79c <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800c76e:	69f8      	ldr	r0, [r7, #28]
 800c770:	f001 f9ca 	bl	800db08 <vQueueDelete>
            hSemaphore = NULL;
 800c774:	2300      	movs	r3, #0
 800c776:	61fb      	str	r3, [r7, #28]
 800c778:	e010      	b.n	800c79c <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800c77a:	69bb      	ldr	r3, [r7, #24]
 800c77c:	2b01      	cmp	r3, #1
 800c77e:	d108      	bne.n	800c792 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	689b      	ldr	r3, [r3, #8]
 800c784:	461a      	mov	r2, r3
 800c786:	68b9      	ldr	r1, [r7, #8]
 800c788:	68f8      	ldr	r0, [r7, #12]
 800c78a:	f000 fcc1 	bl	800d110 <xQueueCreateCountingSemaphoreStatic>
 800c78e:	61f8      	str	r0, [r7, #28]
 800c790:	e004      	b.n	800c79c <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800c792:	68b9      	ldr	r1, [r7, #8]
 800c794:	68f8      	ldr	r0, [r7, #12]
 800c796:	f000 fcf2 	bl	800d17e <xQueueCreateCountingSemaphore>
 800c79a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800c79c:	69fb      	ldr	r3, [r7, #28]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d00c      	beq.n	800c7bc <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d003      	beq.n	800c7b0 <osSemaphoreNew+0xfc>
          name = attr->name;
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	617b      	str	r3, [r7, #20]
 800c7ae:	e001      	b.n	800c7b4 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800c7b0:	2300      	movs	r3, #0
 800c7b2:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800c7b4:	6979      	ldr	r1, [r7, #20]
 800c7b6:	69f8      	ldr	r0, [r7, #28]
 800c7b8:	f001 faf2 	bl	800dda0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800c7bc:	69fb      	ldr	r3, [r7, #28]
}
 800c7be:	4618      	mov	r0, r3
 800c7c0:	3720      	adds	r7, #32
 800c7c2:	46bd      	mov	sp, r7
 800c7c4:	bd80      	pop	{r7, pc}
	...

0800c7c8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b086      	sub	sp, #24
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
 800c7d0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800c7d6:	2300      	movs	r3, #0
 800c7d8:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800c7da:	693b      	ldr	r3, [r7, #16]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d103      	bne.n	800c7e8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800c7e0:	f06f 0303 	mvn.w	r3, #3
 800c7e4:	617b      	str	r3, [r7, #20]
 800c7e6:	e039      	b.n	800c85c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c7e8:	f3ef 8305 	mrs	r3, IPSR
 800c7ec:	60fb      	str	r3, [r7, #12]
  return(result);
 800c7ee:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d022      	beq.n	800c83a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800c7f4:	683b      	ldr	r3, [r7, #0]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d003      	beq.n	800c802 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800c7fa:	f06f 0303 	mvn.w	r3, #3
 800c7fe:	617b      	str	r3, [r7, #20]
 800c800:	e02c      	b.n	800c85c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800c802:	2300      	movs	r3, #0
 800c804:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800c806:	f107 0308 	add.w	r3, r7, #8
 800c80a:	461a      	mov	r2, r3
 800c80c:	2100      	movs	r1, #0
 800c80e:	6938      	ldr	r0, [r7, #16]
 800c810:	f001 f8fa 	bl	800da08 <xQueueReceiveFromISR>
 800c814:	4603      	mov	r3, r0
 800c816:	2b01      	cmp	r3, #1
 800c818:	d003      	beq.n	800c822 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800c81a:	f06f 0302 	mvn.w	r3, #2
 800c81e:	617b      	str	r3, [r7, #20]
 800c820:	e01c      	b.n	800c85c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800c822:	68bb      	ldr	r3, [r7, #8]
 800c824:	2b00      	cmp	r3, #0
 800c826:	d019      	beq.n	800c85c <osSemaphoreAcquire+0x94>
 800c828:	4b0f      	ldr	r3, [pc, #60]	; (800c868 <osSemaphoreAcquire+0xa0>)
 800c82a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c82e:	601a      	str	r2, [r3, #0]
 800c830:	f3bf 8f4f 	dsb	sy
 800c834:	f3bf 8f6f 	isb	sy
 800c838:	e010      	b.n	800c85c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800c83a:	6839      	ldr	r1, [r7, #0]
 800c83c:	6938      	ldr	r0, [r7, #16]
 800c83e:	f000 ffd7 	bl	800d7f0 <xQueueSemaphoreTake>
 800c842:	4603      	mov	r3, r0
 800c844:	2b01      	cmp	r3, #1
 800c846:	d009      	beq.n	800c85c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800c848:	683b      	ldr	r3, [r7, #0]
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d003      	beq.n	800c856 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800c84e:	f06f 0301 	mvn.w	r3, #1
 800c852:	617b      	str	r3, [r7, #20]
 800c854:	e002      	b.n	800c85c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800c856:	f06f 0302 	mvn.w	r3, #2
 800c85a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800c85c:	697b      	ldr	r3, [r7, #20]
}
 800c85e:	4618      	mov	r0, r3
 800c860:	3718      	adds	r7, #24
 800c862:	46bd      	mov	sp, r7
 800c864:	bd80      	pop	{r7, pc}
 800c866:	bf00      	nop
 800c868:	e000ed04 	.word	0xe000ed04

0800c86c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800c86c:	b580      	push	{r7, lr}
 800c86e:	b086      	sub	sp, #24
 800c870:	af00      	add	r7, sp, #0
 800c872:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800c878:	2300      	movs	r3, #0
 800c87a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800c87c:	693b      	ldr	r3, [r7, #16]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d103      	bne.n	800c88a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800c882:	f06f 0303 	mvn.w	r3, #3
 800c886:	617b      	str	r3, [r7, #20]
 800c888:	e02c      	b.n	800c8e4 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c88a:	f3ef 8305 	mrs	r3, IPSR
 800c88e:	60fb      	str	r3, [r7, #12]
  return(result);
 800c890:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800c892:	2b00      	cmp	r3, #0
 800c894:	d01a      	beq.n	800c8cc <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800c896:	2300      	movs	r3, #0
 800c898:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800c89a:	f107 0308 	add.w	r3, r7, #8
 800c89e:	4619      	mov	r1, r3
 800c8a0:	6938      	ldr	r0, [r7, #16]
 800c8a2:	f000 fe38 	bl	800d516 <xQueueGiveFromISR>
 800c8a6:	4603      	mov	r3, r0
 800c8a8:	2b01      	cmp	r3, #1
 800c8aa:	d003      	beq.n	800c8b4 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800c8ac:	f06f 0302 	mvn.w	r3, #2
 800c8b0:	617b      	str	r3, [r7, #20]
 800c8b2:	e017      	b.n	800c8e4 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800c8b4:	68bb      	ldr	r3, [r7, #8]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d014      	beq.n	800c8e4 <osSemaphoreRelease+0x78>
 800c8ba:	4b0d      	ldr	r3, [pc, #52]	; (800c8f0 <osSemaphoreRelease+0x84>)
 800c8bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c8c0:	601a      	str	r2, [r3, #0]
 800c8c2:	f3bf 8f4f 	dsb	sy
 800c8c6:	f3bf 8f6f 	isb	sy
 800c8ca:	e00b      	b.n	800c8e4 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	2200      	movs	r2, #0
 800c8d0:	2100      	movs	r1, #0
 800c8d2:	6938      	ldr	r0, [r7, #16]
 800c8d4:	f000 fc86 	bl	800d1e4 <xQueueGenericSend>
 800c8d8:	4603      	mov	r3, r0
 800c8da:	2b01      	cmp	r3, #1
 800c8dc:	d002      	beq.n	800c8e4 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800c8de:	f06f 0302 	mvn.w	r3, #2
 800c8e2:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800c8e4:	697b      	ldr	r3, [r7, #20]
}
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	3718      	adds	r7, #24
 800c8ea:	46bd      	mov	sp, r7
 800c8ec:	bd80      	pop	{r7, pc}
 800c8ee:	bf00      	nop
 800c8f0:	e000ed04 	.word	0xe000ed04

0800c8f4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800c8f4:	b580      	push	{r7, lr}
 800c8f6:	b08a      	sub	sp, #40	; 0x28
 800c8f8:	af02      	add	r7, sp, #8
 800c8fa:	60f8      	str	r0, [r7, #12]
 800c8fc:	60b9      	str	r1, [r7, #8]
 800c8fe:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800c900:	2300      	movs	r3, #0
 800c902:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c904:	f3ef 8305 	mrs	r3, IPSR
 800c908:	613b      	str	r3, [r7, #16]
  return(result);
 800c90a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d15f      	bne.n	800c9d0 <osMessageQueueNew+0xdc>
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	2b00      	cmp	r3, #0
 800c914:	d05c      	beq.n	800c9d0 <osMessageQueueNew+0xdc>
 800c916:	68bb      	ldr	r3, [r7, #8]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d059      	beq.n	800c9d0 <osMessageQueueNew+0xdc>
    mem = -1;
 800c91c:	f04f 33ff 	mov.w	r3, #4294967295
 800c920:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	2b00      	cmp	r3, #0
 800c926:	d029      	beq.n	800c97c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	689b      	ldr	r3, [r3, #8]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d012      	beq.n	800c956 <osMessageQueueNew+0x62>
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	68db      	ldr	r3, [r3, #12]
 800c934:	2b4f      	cmp	r3, #79	; 0x4f
 800c936:	d90e      	bls.n	800c956 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d00a      	beq.n	800c956 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	695a      	ldr	r2, [r3, #20]
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	68b9      	ldr	r1, [r7, #8]
 800c948:	fb01 f303 	mul.w	r3, r1, r3
 800c94c:	429a      	cmp	r2, r3
 800c94e:	d302      	bcc.n	800c956 <osMessageQueueNew+0x62>
        mem = 1;
 800c950:	2301      	movs	r3, #1
 800c952:	61bb      	str	r3, [r7, #24]
 800c954:	e014      	b.n	800c980 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	689b      	ldr	r3, [r3, #8]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d110      	bne.n	800c980 <osMessageQueueNew+0x8c>
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	68db      	ldr	r3, [r3, #12]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d10c      	bne.n	800c980 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d108      	bne.n	800c980 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	695b      	ldr	r3, [r3, #20]
 800c972:	2b00      	cmp	r3, #0
 800c974:	d104      	bne.n	800c980 <osMessageQueueNew+0x8c>
          mem = 0;
 800c976:	2300      	movs	r3, #0
 800c978:	61bb      	str	r3, [r7, #24]
 800c97a:	e001      	b.n	800c980 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800c97c:	2300      	movs	r3, #0
 800c97e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c980:	69bb      	ldr	r3, [r7, #24]
 800c982:	2b01      	cmp	r3, #1
 800c984:	d10b      	bne.n	800c99e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	691a      	ldr	r2, [r3, #16]
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	689b      	ldr	r3, [r3, #8]
 800c98e:	2100      	movs	r1, #0
 800c990:	9100      	str	r1, [sp, #0]
 800c992:	68b9      	ldr	r1, [r7, #8]
 800c994:	68f8      	ldr	r0, [r7, #12]
 800c996:	f000 fa2f 	bl	800cdf8 <xQueueGenericCreateStatic>
 800c99a:	61f8      	str	r0, [r7, #28]
 800c99c:	e008      	b.n	800c9b0 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800c99e:	69bb      	ldr	r3, [r7, #24]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d105      	bne.n	800c9b0 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800c9a4:	2200      	movs	r2, #0
 800c9a6:	68b9      	ldr	r1, [r7, #8]
 800c9a8:	68f8      	ldr	r0, [r7, #12]
 800c9aa:	f000 fa9d 	bl	800cee8 <xQueueGenericCreate>
 800c9ae:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800c9b0:	69fb      	ldr	r3, [r7, #28]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d00c      	beq.n	800c9d0 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d003      	beq.n	800c9c4 <osMessageQueueNew+0xd0>
        name = attr->name;
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	617b      	str	r3, [r7, #20]
 800c9c2:	e001      	b.n	800c9c8 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800c9c4:	2300      	movs	r3, #0
 800c9c6:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800c9c8:	6979      	ldr	r1, [r7, #20]
 800c9ca:	69f8      	ldr	r0, [r7, #28]
 800c9cc:	f001 f9e8 	bl	800dda0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800c9d0:	69fb      	ldr	r3, [r7, #28]
}
 800c9d2:	4618      	mov	r0, r3
 800c9d4:	3720      	adds	r7, #32
 800c9d6:	46bd      	mov	sp, r7
 800c9d8:	bd80      	pop	{r7, pc}
	...

0800c9dc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800c9dc:	b580      	push	{r7, lr}
 800c9de:	b088      	sub	sp, #32
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	60f8      	str	r0, [r7, #12]
 800c9e4:	60b9      	str	r1, [r7, #8]
 800c9e6:	603b      	str	r3, [r7, #0]
 800c9e8:	4613      	mov	r3, r2
 800c9ea:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c9f4:	f3ef 8305 	mrs	r3, IPSR
 800c9f8:	617b      	str	r3, [r7, #20]
  return(result);
 800c9fa:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d028      	beq.n	800ca52 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ca00:	69bb      	ldr	r3, [r7, #24]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d005      	beq.n	800ca12 <osMessageQueuePut+0x36>
 800ca06:	68bb      	ldr	r3, [r7, #8]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d002      	beq.n	800ca12 <osMessageQueuePut+0x36>
 800ca0c:	683b      	ldr	r3, [r7, #0]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d003      	beq.n	800ca1a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800ca12:	f06f 0303 	mvn.w	r3, #3
 800ca16:	61fb      	str	r3, [r7, #28]
 800ca18:	e038      	b.n	800ca8c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800ca1e:	f107 0210 	add.w	r2, r7, #16
 800ca22:	2300      	movs	r3, #0
 800ca24:	68b9      	ldr	r1, [r7, #8]
 800ca26:	69b8      	ldr	r0, [r7, #24]
 800ca28:	f000 fcda 	bl	800d3e0 <xQueueGenericSendFromISR>
 800ca2c:	4603      	mov	r3, r0
 800ca2e:	2b01      	cmp	r3, #1
 800ca30:	d003      	beq.n	800ca3a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800ca32:	f06f 0302 	mvn.w	r3, #2
 800ca36:	61fb      	str	r3, [r7, #28]
 800ca38:	e028      	b.n	800ca8c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800ca3a:	693b      	ldr	r3, [r7, #16]
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d025      	beq.n	800ca8c <osMessageQueuePut+0xb0>
 800ca40:	4b15      	ldr	r3, [pc, #84]	; (800ca98 <osMessageQueuePut+0xbc>)
 800ca42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca46:	601a      	str	r2, [r3, #0]
 800ca48:	f3bf 8f4f 	dsb	sy
 800ca4c:	f3bf 8f6f 	isb	sy
 800ca50:	e01c      	b.n	800ca8c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800ca52:	69bb      	ldr	r3, [r7, #24]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d002      	beq.n	800ca5e <osMessageQueuePut+0x82>
 800ca58:	68bb      	ldr	r3, [r7, #8]
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d103      	bne.n	800ca66 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800ca5e:	f06f 0303 	mvn.w	r3, #3
 800ca62:	61fb      	str	r3, [r7, #28]
 800ca64:	e012      	b.n	800ca8c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800ca66:	2300      	movs	r3, #0
 800ca68:	683a      	ldr	r2, [r7, #0]
 800ca6a:	68b9      	ldr	r1, [r7, #8]
 800ca6c:	69b8      	ldr	r0, [r7, #24]
 800ca6e:	f000 fbb9 	bl	800d1e4 <xQueueGenericSend>
 800ca72:	4603      	mov	r3, r0
 800ca74:	2b01      	cmp	r3, #1
 800ca76:	d009      	beq.n	800ca8c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800ca78:	683b      	ldr	r3, [r7, #0]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d003      	beq.n	800ca86 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800ca7e:	f06f 0301 	mvn.w	r3, #1
 800ca82:	61fb      	str	r3, [r7, #28]
 800ca84:	e002      	b.n	800ca8c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800ca86:	f06f 0302 	mvn.w	r3, #2
 800ca8a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800ca8c:	69fb      	ldr	r3, [r7, #28]
}
 800ca8e:	4618      	mov	r0, r3
 800ca90:	3720      	adds	r7, #32
 800ca92:	46bd      	mov	sp, r7
 800ca94:	bd80      	pop	{r7, pc}
 800ca96:	bf00      	nop
 800ca98:	e000ed04 	.word	0xe000ed04

0800ca9c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800ca9c:	b580      	push	{r7, lr}
 800ca9e:	b088      	sub	sp, #32
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	60f8      	str	r0, [r7, #12]
 800caa4:	60b9      	str	r1, [r7, #8]
 800caa6:	607a      	str	r2, [r7, #4]
 800caa8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800caae:	2300      	movs	r3, #0
 800cab0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cab2:	f3ef 8305 	mrs	r3, IPSR
 800cab6:	617b      	str	r3, [r7, #20]
  return(result);
 800cab8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d028      	beq.n	800cb10 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800cabe:	69bb      	ldr	r3, [r7, #24]
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d005      	beq.n	800cad0 <osMessageQueueGet+0x34>
 800cac4:	68bb      	ldr	r3, [r7, #8]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d002      	beq.n	800cad0 <osMessageQueueGet+0x34>
 800caca:	683b      	ldr	r3, [r7, #0]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d003      	beq.n	800cad8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800cad0:	f06f 0303 	mvn.w	r3, #3
 800cad4:	61fb      	str	r3, [r7, #28]
 800cad6:	e037      	b.n	800cb48 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800cad8:	2300      	movs	r3, #0
 800cada:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800cadc:	f107 0310 	add.w	r3, r7, #16
 800cae0:	461a      	mov	r2, r3
 800cae2:	68b9      	ldr	r1, [r7, #8]
 800cae4:	69b8      	ldr	r0, [r7, #24]
 800cae6:	f000 ff8f 	bl	800da08 <xQueueReceiveFromISR>
 800caea:	4603      	mov	r3, r0
 800caec:	2b01      	cmp	r3, #1
 800caee:	d003      	beq.n	800caf8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800caf0:	f06f 0302 	mvn.w	r3, #2
 800caf4:	61fb      	str	r3, [r7, #28]
 800caf6:	e027      	b.n	800cb48 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800caf8:	693b      	ldr	r3, [r7, #16]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d024      	beq.n	800cb48 <osMessageQueueGet+0xac>
 800cafe:	4b15      	ldr	r3, [pc, #84]	; (800cb54 <osMessageQueueGet+0xb8>)
 800cb00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb04:	601a      	str	r2, [r3, #0]
 800cb06:	f3bf 8f4f 	dsb	sy
 800cb0a:	f3bf 8f6f 	isb	sy
 800cb0e:	e01b      	b.n	800cb48 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800cb10:	69bb      	ldr	r3, [r7, #24]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d002      	beq.n	800cb1c <osMessageQueueGet+0x80>
 800cb16:	68bb      	ldr	r3, [r7, #8]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d103      	bne.n	800cb24 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800cb1c:	f06f 0303 	mvn.w	r3, #3
 800cb20:	61fb      	str	r3, [r7, #28]
 800cb22:	e011      	b.n	800cb48 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800cb24:	683a      	ldr	r2, [r7, #0]
 800cb26:	68b9      	ldr	r1, [r7, #8]
 800cb28:	69b8      	ldr	r0, [r7, #24]
 800cb2a:	f000 fd81 	bl	800d630 <xQueueReceive>
 800cb2e:	4603      	mov	r3, r0
 800cb30:	2b01      	cmp	r3, #1
 800cb32:	d009      	beq.n	800cb48 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800cb34:	683b      	ldr	r3, [r7, #0]
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d003      	beq.n	800cb42 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800cb3a:	f06f 0301 	mvn.w	r3, #1
 800cb3e:	61fb      	str	r3, [r7, #28]
 800cb40:	e002      	b.n	800cb48 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800cb42:	f06f 0302 	mvn.w	r3, #2
 800cb46:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800cb48:	69fb      	ldr	r3, [r7, #28]
}
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	3720      	adds	r7, #32
 800cb4e:	46bd      	mov	sp, r7
 800cb50:	bd80      	pop	{r7, pc}
 800cb52:	bf00      	nop
 800cb54:	e000ed04 	.word	0xe000ed04

0800cb58 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800cb58:	b480      	push	{r7}
 800cb5a:	b085      	sub	sp, #20
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	60f8      	str	r0, [r7, #12]
 800cb60:	60b9      	str	r1, [r7, #8]
 800cb62:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	4a07      	ldr	r2, [pc, #28]	; (800cb84 <vApplicationGetIdleTaskMemory+0x2c>)
 800cb68:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800cb6a:	68bb      	ldr	r3, [r7, #8]
 800cb6c:	4a06      	ldr	r2, [pc, #24]	; (800cb88 <vApplicationGetIdleTaskMemory+0x30>)
 800cb6e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800cb76:	601a      	str	r2, [r3, #0]
}
 800cb78:	bf00      	nop
 800cb7a:	3714      	adds	r7, #20
 800cb7c:	46bd      	mov	sp, r7
 800cb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb82:	4770      	bx	lr
 800cb84:	20000050 	.word	0x20000050
 800cb88:	200000ac 	.word	0x200000ac

0800cb8c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800cb8c:	b480      	push	{r7}
 800cb8e:	b085      	sub	sp, #20
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	60f8      	str	r0, [r7, #12]
 800cb94:	60b9      	str	r1, [r7, #8]
 800cb96:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	4a07      	ldr	r2, [pc, #28]	; (800cbb8 <vApplicationGetTimerTaskMemory+0x2c>)
 800cb9c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800cb9e:	68bb      	ldr	r3, [r7, #8]
 800cba0:	4a06      	ldr	r2, [pc, #24]	; (800cbbc <vApplicationGetTimerTaskMemory+0x30>)
 800cba2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cbaa:	601a      	str	r2, [r3, #0]
}
 800cbac:	bf00      	nop
 800cbae:	3714      	adds	r7, #20
 800cbb0:	46bd      	mov	sp, r7
 800cbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb6:	4770      	bx	lr
 800cbb8:	200010ac 	.word	0x200010ac
 800cbbc:	20001108 	.word	0x20001108

0800cbc0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800cbc0:	b480      	push	{r7}
 800cbc2:	b083      	sub	sp, #12
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	f103 0208 	add.w	r2, r3, #8
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	f04f 32ff 	mov.w	r2, #4294967295
 800cbd8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	f103 0208 	add.w	r2, r3, #8
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	f103 0208 	add.w	r2, r3, #8
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	2200      	movs	r2, #0
 800cbf2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800cbf4:	bf00      	nop
 800cbf6:	370c      	adds	r7, #12
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbfe:	4770      	bx	lr

0800cc00 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800cc00:	b480      	push	{r7}
 800cc02:	b083      	sub	sp, #12
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	2200      	movs	r2, #0
 800cc0c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800cc0e:	bf00      	nop
 800cc10:	370c      	adds	r7, #12
 800cc12:	46bd      	mov	sp, r7
 800cc14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc18:	4770      	bx	lr

0800cc1a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cc1a:	b480      	push	{r7}
 800cc1c:	b085      	sub	sp, #20
 800cc1e:	af00      	add	r7, sp, #0
 800cc20:	6078      	str	r0, [r7, #4]
 800cc22:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	685b      	ldr	r3, [r3, #4]
 800cc28:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800cc2a:	683b      	ldr	r3, [r7, #0]
 800cc2c:	68fa      	ldr	r2, [r7, #12]
 800cc2e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	689a      	ldr	r2, [r3, #8]
 800cc34:	683b      	ldr	r3, [r7, #0]
 800cc36:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	689b      	ldr	r3, [r3, #8]
 800cc3c:	683a      	ldr	r2, [r7, #0]
 800cc3e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	683a      	ldr	r2, [r7, #0]
 800cc44:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800cc46:	683b      	ldr	r3, [r7, #0]
 800cc48:	687a      	ldr	r2, [r7, #4]
 800cc4a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	1c5a      	adds	r2, r3, #1
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	601a      	str	r2, [r3, #0]
}
 800cc56:	bf00      	nop
 800cc58:	3714      	adds	r7, #20
 800cc5a:	46bd      	mov	sp, r7
 800cc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc60:	4770      	bx	lr

0800cc62 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cc62:	b480      	push	{r7}
 800cc64:	b085      	sub	sp, #20
 800cc66:	af00      	add	r7, sp, #0
 800cc68:	6078      	str	r0, [r7, #4]
 800cc6a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800cc6c:	683b      	ldr	r3, [r7, #0]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800cc72:	68bb      	ldr	r3, [r7, #8]
 800cc74:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc78:	d103      	bne.n	800cc82 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	691b      	ldr	r3, [r3, #16]
 800cc7e:	60fb      	str	r3, [r7, #12]
 800cc80:	e00c      	b.n	800cc9c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	3308      	adds	r3, #8
 800cc86:	60fb      	str	r3, [r7, #12]
 800cc88:	e002      	b.n	800cc90 <vListInsert+0x2e>
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	685b      	ldr	r3, [r3, #4]
 800cc8e:	60fb      	str	r3, [r7, #12]
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	685b      	ldr	r3, [r3, #4]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	68ba      	ldr	r2, [r7, #8]
 800cc98:	429a      	cmp	r2, r3
 800cc9a:	d2f6      	bcs.n	800cc8a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	685a      	ldr	r2, [r3, #4]
 800cca0:	683b      	ldr	r3, [r7, #0]
 800cca2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cca4:	683b      	ldr	r3, [r7, #0]
 800cca6:	685b      	ldr	r3, [r3, #4]
 800cca8:	683a      	ldr	r2, [r7, #0]
 800ccaa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ccac:	683b      	ldr	r3, [r7, #0]
 800ccae:	68fa      	ldr	r2, [r7, #12]
 800ccb0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	683a      	ldr	r2, [r7, #0]
 800ccb6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ccb8:	683b      	ldr	r3, [r7, #0]
 800ccba:	687a      	ldr	r2, [r7, #4]
 800ccbc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	1c5a      	adds	r2, r3, #1
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	601a      	str	r2, [r3, #0]
}
 800ccc8:	bf00      	nop
 800ccca:	3714      	adds	r7, #20
 800cccc:	46bd      	mov	sp, r7
 800ccce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd2:	4770      	bx	lr

0800ccd4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ccd4:	b480      	push	{r7}
 800ccd6:	b085      	sub	sp, #20
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	691b      	ldr	r3, [r3, #16]
 800cce0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	685b      	ldr	r3, [r3, #4]
 800cce6:	687a      	ldr	r2, [r7, #4]
 800cce8:	6892      	ldr	r2, [r2, #8]
 800ccea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	689b      	ldr	r3, [r3, #8]
 800ccf0:	687a      	ldr	r2, [r7, #4]
 800ccf2:	6852      	ldr	r2, [r2, #4]
 800ccf4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	685b      	ldr	r3, [r3, #4]
 800ccfa:	687a      	ldr	r2, [r7, #4]
 800ccfc:	429a      	cmp	r2, r3
 800ccfe:	d103      	bne.n	800cd08 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	689a      	ldr	r2, [r3, #8]
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	2200      	movs	r2, #0
 800cd0c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	1e5a      	subs	r2, r3, #1
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	681b      	ldr	r3, [r3, #0]
}
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	3714      	adds	r7, #20
 800cd20:	46bd      	mov	sp, r7
 800cd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd26:	4770      	bx	lr

0800cd28 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800cd28:	b580      	push	{r7, lr}
 800cd2a:	b084      	sub	sp, #16
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	6078      	str	r0, [r7, #4]
 800cd30:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d10a      	bne.n	800cd52 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800cd3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd40:	f383 8811 	msr	BASEPRI, r3
 800cd44:	f3bf 8f6f 	isb	sy
 800cd48:	f3bf 8f4f 	dsb	sy
 800cd4c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800cd4e:	bf00      	nop
 800cd50:	e7fe      	b.n	800cd50 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800cd52:	f002 ff7f 	bl	800fc54 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	681a      	ldr	r2, [r3, #0]
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd5e:	68f9      	ldr	r1, [r7, #12]
 800cd60:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cd62:	fb01 f303 	mul.w	r3, r1, r3
 800cd66:	441a      	add	r2, r3
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	2200      	movs	r2, #0
 800cd70:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	681a      	ldr	r2, [r3, #0]
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	681a      	ldr	r2, [r3, #0]
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd82:	3b01      	subs	r3, #1
 800cd84:	68f9      	ldr	r1, [r7, #12]
 800cd86:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cd88:	fb01 f303 	mul.w	r3, r1, r3
 800cd8c:	441a      	add	r2, r3
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	22ff      	movs	r2, #255	; 0xff
 800cd96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	22ff      	movs	r2, #255	; 0xff
 800cd9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800cda2:	683b      	ldr	r3, [r7, #0]
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d114      	bne.n	800cdd2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	691b      	ldr	r3, [r3, #16]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d01a      	beq.n	800cde6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	3310      	adds	r3, #16
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	f001 fced 	bl	800e794 <xTaskRemoveFromEventList>
 800cdba:	4603      	mov	r3, r0
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d012      	beq.n	800cde6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800cdc0:	4b0c      	ldr	r3, [pc, #48]	; (800cdf4 <xQueueGenericReset+0xcc>)
 800cdc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cdc6:	601a      	str	r2, [r3, #0]
 800cdc8:	f3bf 8f4f 	dsb	sy
 800cdcc:	f3bf 8f6f 	isb	sy
 800cdd0:	e009      	b.n	800cde6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	3310      	adds	r3, #16
 800cdd6:	4618      	mov	r0, r3
 800cdd8:	f7ff fef2 	bl	800cbc0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	3324      	adds	r3, #36	; 0x24
 800cde0:	4618      	mov	r0, r3
 800cde2:	f7ff feed 	bl	800cbc0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800cde6:	f002 ff65 	bl	800fcb4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800cdea:	2301      	movs	r3, #1
}
 800cdec:	4618      	mov	r0, r3
 800cdee:	3710      	adds	r7, #16
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	bd80      	pop	{r7, pc}
 800cdf4:	e000ed04 	.word	0xe000ed04

0800cdf8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800cdf8:	b580      	push	{r7, lr}
 800cdfa:	b08e      	sub	sp, #56	; 0x38
 800cdfc:	af02      	add	r7, sp, #8
 800cdfe:	60f8      	str	r0, [r7, #12]
 800ce00:	60b9      	str	r1, [r7, #8]
 800ce02:	607a      	str	r2, [r7, #4]
 800ce04:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d10a      	bne.n	800ce22 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800ce0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce10:	f383 8811 	msr	BASEPRI, r3
 800ce14:	f3bf 8f6f 	isb	sy
 800ce18:	f3bf 8f4f 	dsb	sy
 800ce1c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ce1e:	bf00      	nop
 800ce20:	e7fe      	b.n	800ce20 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ce22:	683b      	ldr	r3, [r7, #0]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d10a      	bne.n	800ce3e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800ce28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce2c:	f383 8811 	msr	BASEPRI, r3
 800ce30:	f3bf 8f6f 	isb	sy
 800ce34:	f3bf 8f4f 	dsb	sy
 800ce38:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ce3a:	bf00      	nop
 800ce3c:	e7fe      	b.n	800ce3c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d002      	beq.n	800ce4a <xQueueGenericCreateStatic+0x52>
 800ce44:	68bb      	ldr	r3, [r7, #8]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d001      	beq.n	800ce4e <xQueueGenericCreateStatic+0x56>
 800ce4a:	2301      	movs	r3, #1
 800ce4c:	e000      	b.n	800ce50 <xQueueGenericCreateStatic+0x58>
 800ce4e:	2300      	movs	r3, #0
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d10a      	bne.n	800ce6a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800ce54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce58:	f383 8811 	msr	BASEPRI, r3
 800ce5c:	f3bf 8f6f 	isb	sy
 800ce60:	f3bf 8f4f 	dsb	sy
 800ce64:	623b      	str	r3, [r7, #32]
}
 800ce66:	bf00      	nop
 800ce68:	e7fe      	b.n	800ce68 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d102      	bne.n	800ce76 <xQueueGenericCreateStatic+0x7e>
 800ce70:	68bb      	ldr	r3, [r7, #8]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d101      	bne.n	800ce7a <xQueueGenericCreateStatic+0x82>
 800ce76:	2301      	movs	r3, #1
 800ce78:	e000      	b.n	800ce7c <xQueueGenericCreateStatic+0x84>
 800ce7a:	2300      	movs	r3, #0
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d10a      	bne.n	800ce96 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800ce80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce84:	f383 8811 	msr	BASEPRI, r3
 800ce88:	f3bf 8f6f 	isb	sy
 800ce8c:	f3bf 8f4f 	dsb	sy
 800ce90:	61fb      	str	r3, [r7, #28]
}
 800ce92:	bf00      	nop
 800ce94:	e7fe      	b.n	800ce94 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ce96:	2350      	movs	r3, #80	; 0x50
 800ce98:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ce9a:	697b      	ldr	r3, [r7, #20]
 800ce9c:	2b50      	cmp	r3, #80	; 0x50
 800ce9e:	d00a      	beq.n	800ceb6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800cea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cea4:	f383 8811 	msr	BASEPRI, r3
 800cea8:	f3bf 8f6f 	isb	sy
 800ceac:	f3bf 8f4f 	dsb	sy
 800ceb0:	61bb      	str	r3, [r7, #24]
}
 800ceb2:	bf00      	nop
 800ceb4:	e7fe      	b.n	800ceb4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ceb6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ceb8:	683b      	ldr	r3, [r7, #0]
 800ceba:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800cebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d00d      	beq.n	800cede <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800cec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cec4:	2201      	movs	r2, #1
 800cec6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ceca:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800cece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ced0:	9300      	str	r3, [sp, #0]
 800ced2:	4613      	mov	r3, r2
 800ced4:	687a      	ldr	r2, [r7, #4]
 800ced6:	68b9      	ldr	r1, [r7, #8]
 800ced8:	68f8      	ldr	r0, [r7, #12]
 800ceda:	f000 f83f 	bl	800cf5c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800cee0:	4618      	mov	r0, r3
 800cee2:	3730      	adds	r7, #48	; 0x30
 800cee4:	46bd      	mov	sp, r7
 800cee6:	bd80      	pop	{r7, pc}

0800cee8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800cee8:	b580      	push	{r7, lr}
 800ceea:	b08a      	sub	sp, #40	; 0x28
 800ceec:	af02      	add	r7, sp, #8
 800ceee:	60f8      	str	r0, [r7, #12]
 800cef0:	60b9      	str	r1, [r7, #8]
 800cef2:	4613      	mov	r3, r2
 800cef4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d10a      	bne.n	800cf12 <xQueueGenericCreate+0x2a>
	__asm volatile
 800cefc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf00:	f383 8811 	msr	BASEPRI, r3
 800cf04:	f3bf 8f6f 	isb	sy
 800cf08:	f3bf 8f4f 	dsb	sy
 800cf0c:	613b      	str	r3, [r7, #16]
}
 800cf0e:	bf00      	nop
 800cf10:	e7fe      	b.n	800cf10 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	68ba      	ldr	r2, [r7, #8]
 800cf16:	fb02 f303 	mul.w	r3, r2, r3
 800cf1a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800cf1c:	69fb      	ldr	r3, [r7, #28]
 800cf1e:	3350      	adds	r3, #80	; 0x50
 800cf20:	4618      	mov	r0, r3
 800cf22:	f002 ffb9 	bl	800fe98 <pvPortMalloc>
 800cf26:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800cf28:	69bb      	ldr	r3, [r7, #24]
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d011      	beq.n	800cf52 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800cf2e:	69bb      	ldr	r3, [r7, #24]
 800cf30:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cf32:	697b      	ldr	r3, [r7, #20]
 800cf34:	3350      	adds	r3, #80	; 0x50
 800cf36:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800cf38:	69bb      	ldr	r3, [r7, #24]
 800cf3a:	2200      	movs	r2, #0
 800cf3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cf40:	79fa      	ldrb	r2, [r7, #7]
 800cf42:	69bb      	ldr	r3, [r7, #24]
 800cf44:	9300      	str	r3, [sp, #0]
 800cf46:	4613      	mov	r3, r2
 800cf48:	697a      	ldr	r2, [r7, #20]
 800cf4a:	68b9      	ldr	r1, [r7, #8]
 800cf4c:	68f8      	ldr	r0, [r7, #12]
 800cf4e:	f000 f805 	bl	800cf5c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cf52:	69bb      	ldr	r3, [r7, #24]
	}
 800cf54:	4618      	mov	r0, r3
 800cf56:	3720      	adds	r7, #32
 800cf58:	46bd      	mov	sp, r7
 800cf5a:	bd80      	pop	{r7, pc}

0800cf5c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800cf5c:	b580      	push	{r7, lr}
 800cf5e:	b084      	sub	sp, #16
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	60f8      	str	r0, [r7, #12]
 800cf64:	60b9      	str	r1, [r7, #8]
 800cf66:	607a      	str	r2, [r7, #4]
 800cf68:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800cf6a:	68bb      	ldr	r3, [r7, #8]
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d103      	bne.n	800cf78 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800cf70:	69bb      	ldr	r3, [r7, #24]
 800cf72:	69ba      	ldr	r2, [r7, #24]
 800cf74:	601a      	str	r2, [r3, #0]
 800cf76:	e002      	b.n	800cf7e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800cf78:	69bb      	ldr	r3, [r7, #24]
 800cf7a:	687a      	ldr	r2, [r7, #4]
 800cf7c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800cf7e:	69bb      	ldr	r3, [r7, #24]
 800cf80:	68fa      	ldr	r2, [r7, #12]
 800cf82:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800cf84:	69bb      	ldr	r3, [r7, #24]
 800cf86:	68ba      	ldr	r2, [r7, #8]
 800cf88:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cf8a:	2101      	movs	r1, #1
 800cf8c:	69b8      	ldr	r0, [r7, #24]
 800cf8e:	f7ff fecb 	bl	800cd28 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800cf92:	69bb      	ldr	r3, [r7, #24]
 800cf94:	78fa      	ldrb	r2, [r7, #3]
 800cf96:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800cf9a:	bf00      	nop
 800cf9c:	3710      	adds	r7, #16
 800cf9e:	46bd      	mov	sp, r7
 800cfa0:	bd80      	pop	{r7, pc}

0800cfa2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800cfa2:	b580      	push	{r7, lr}
 800cfa4:	b082      	sub	sp, #8
 800cfa6:	af00      	add	r7, sp, #0
 800cfa8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d00e      	beq.n	800cfce <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	2200      	movs	r2, #0
 800cfb4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	2200      	movs	r2, #0
 800cfba:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	2200      	movs	r2, #0
 800cfc0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800cfc2:	2300      	movs	r3, #0
 800cfc4:	2200      	movs	r2, #0
 800cfc6:	2100      	movs	r1, #0
 800cfc8:	6878      	ldr	r0, [r7, #4]
 800cfca:	f000 f90b 	bl	800d1e4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800cfce:	bf00      	nop
 800cfd0:	3708      	adds	r7, #8
 800cfd2:	46bd      	mov	sp, r7
 800cfd4:	bd80      	pop	{r7, pc}

0800cfd6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800cfd6:	b580      	push	{r7, lr}
 800cfd8:	b086      	sub	sp, #24
 800cfda:	af00      	add	r7, sp, #0
 800cfdc:	4603      	mov	r3, r0
 800cfde:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800cfe0:	2301      	movs	r3, #1
 800cfe2:	617b      	str	r3, [r7, #20]
 800cfe4:	2300      	movs	r3, #0
 800cfe6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800cfe8:	79fb      	ldrb	r3, [r7, #7]
 800cfea:	461a      	mov	r2, r3
 800cfec:	6939      	ldr	r1, [r7, #16]
 800cfee:	6978      	ldr	r0, [r7, #20]
 800cff0:	f7ff ff7a 	bl	800cee8 <xQueueGenericCreate>
 800cff4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800cff6:	68f8      	ldr	r0, [r7, #12]
 800cff8:	f7ff ffd3 	bl	800cfa2 <prvInitialiseMutex>

		return xNewQueue;
 800cffc:	68fb      	ldr	r3, [r7, #12]
	}
 800cffe:	4618      	mov	r0, r3
 800d000:	3718      	adds	r7, #24
 800d002:	46bd      	mov	sp, r7
 800d004:	bd80      	pop	{r7, pc}

0800d006 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800d006:	b580      	push	{r7, lr}
 800d008:	b088      	sub	sp, #32
 800d00a:	af02      	add	r7, sp, #8
 800d00c:	4603      	mov	r3, r0
 800d00e:	6039      	str	r1, [r7, #0]
 800d010:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d012:	2301      	movs	r3, #1
 800d014:	617b      	str	r3, [r7, #20]
 800d016:	2300      	movs	r3, #0
 800d018:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800d01a:	79fb      	ldrb	r3, [r7, #7]
 800d01c:	9300      	str	r3, [sp, #0]
 800d01e:	683b      	ldr	r3, [r7, #0]
 800d020:	2200      	movs	r2, #0
 800d022:	6939      	ldr	r1, [r7, #16]
 800d024:	6978      	ldr	r0, [r7, #20]
 800d026:	f7ff fee7 	bl	800cdf8 <xQueueGenericCreateStatic>
 800d02a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d02c:	68f8      	ldr	r0, [r7, #12]
 800d02e:	f7ff ffb8 	bl	800cfa2 <prvInitialiseMutex>

		return xNewQueue;
 800d032:	68fb      	ldr	r3, [r7, #12]
	}
 800d034:	4618      	mov	r0, r3
 800d036:	3718      	adds	r7, #24
 800d038:	46bd      	mov	sp, r7
 800d03a:	bd80      	pop	{r7, pc}

0800d03c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800d03c:	b590      	push	{r4, r7, lr}
 800d03e:	b087      	sub	sp, #28
 800d040:	af00      	add	r7, sp, #0
 800d042:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800d048:	693b      	ldr	r3, [r7, #16]
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d10a      	bne.n	800d064 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800d04e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d052:	f383 8811 	msr	BASEPRI, r3
 800d056:	f3bf 8f6f 	isb	sy
 800d05a:	f3bf 8f4f 	dsb	sy
 800d05e:	60fb      	str	r3, [r7, #12]
}
 800d060:	bf00      	nop
 800d062:	e7fe      	b.n	800d062 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800d064:	693b      	ldr	r3, [r7, #16]
 800d066:	689c      	ldr	r4, [r3, #8]
 800d068:	f001 fd52 	bl	800eb10 <xTaskGetCurrentTaskHandle>
 800d06c:	4603      	mov	r3, r0
 800d06e:	429c      	cmp	r4, r3
 800d070:	d111      	bne.n	800d096 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800d072:	693b      	ldr	r3, [r7, #16]
 800d074:	68db      	ldr	r3, [r3, #12]
 800d076:	1e5a      	subs	r2, r3, #1
 800d078:	693b      	ldr	r3, [r7, #16]
 800d07a:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800d07c:	693b      	ldr	r3, [r7, #16]
 800d07e:	68db      	ldr	r3, [r3, #12]
 800d080:	2b00      	cmp	r3, #0
 800d082:	d105      	bne.n	800d090 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800d084:	2300      	movs	r3, #0
 800d086:	2200      	movs	r2, #0
 800d088:	2100      	movs	r1, #0
 800d08a:	6938      	ldr	r0, [r7, #16]
 800d08c:	f000 f8aa 	bl	800d1e4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800d090:	2301      	movs	r3, #1
 800d092:	617b      	str	r3, [r7, #20]
 800d094:	e001      	b.n	800d09a <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800d096:	2300      	movs	r3, #0
 800d098:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800d09a:	697b      	ldr	r3, [r7, #20]
	}
 800d09c:	4618      	mov	r0, r3
 800d09e:	371c      	adds	r7, #28
 800d0a0:	46bd      	mov	sp, r7
 800d0a2:	bd90      	pop	{r4, r7, pc}

0800d0a4 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800d0a4:	b590      	push	{r4, r7, lr}
 800d0a6:	b087      	sub	sp, #28
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	6078      	str	r0, [r7, #4]
 800d0ac:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800d0b2:	693b      	ldr	r3, [r7, #16]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d10a      	bne.n	800d0ce <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800d0b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0bc:	f383 8811 	msr	BASEPRI, r3
 800d0c0:	f3bf 8f6f 	isb	sy
 800d0c4:	f3bf 8f4f 	dsb	sy
 800d0c8:	60fb      	str	r3, [r7, #12]
}
 800d0ca:	bf00      	nop
 800d0cc:	e7fe      	b.n	800d0cc <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800d0ce:	693b      	ldr	r3, [r7, #16]
 800d0d0:	689c      	ldr	r4, [r3, #8]
 800d0d2:	f001 fd1d 	bl	800eb10 <xTaskGetCurrentTaskHandle>
 800d0d6:	4603      	mov	r3, r0
 800d0d8:	429c      	cmp	r4, r3
 800d0da:	d107      	bne.n	800d0ec <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800d0dc:	693b      	ldr	r3, [r7, #16]
 800d0de:	68db      	ldr	r3, [r3, #12]
 800d0e0:	1c5a      	adds	r2, r3, #1
 800d0e2:	693b      	ldr	r3, [r7, #16]
 800d0e4:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800d0e6:	2301      	movs	r3, #1
 800d0e8:	617b      	str	r3, [r7, #20]
 800d0ea:	e00c      	b.n	800d106 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800d0ec:	6839      	ldr	r1, [r7, #0]
 800d0ee:	6938      	ldr	r0, [r7, #16]
 800d0f0:	f000 fb7e 	bl	800d7f0 <xQueueSemaphoreTake>
 800d0f4:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800d0f6:	697b      	ldr	r3, [r7, #20]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d004      	beq.n	800d106 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800d0fc:	693b      	ldr	r3, [r7, #16]
 800d0fe:	68db      	ldr	r3, [r3, #12]
 800d100:	1c5a      	adds	r2, r3, #1
 800d102:	693b      	ldr	r3, [r7, #16]
 800d104:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800d106:	697b      	ldr	r3, [r7, #20]
	}
 800d108:	4618      	mov	r0, r3
 800d10a:	371c      	adds	r7, #28
 800d10c:	46bd      	mov	sp, r7
 800d10e:	bd90      	pop	{r4, r7, pc}

0800d110 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800d110:	b580      	push	{r7, lr}
 800d112:	b08a      	sub	sp, #40	; 0x28
 800d114:	af02      	add	r7, sp, #8
 800d116:	60f8      	str	r0, [r7, #12]
 800d118:	60b9      	str	r1, [r7, #8]
 800d11a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d10a      	bne.n	800d138 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800d122:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d126:	f383 8811 	msr	BASEPRI, r3
 800d12a:	f3bf 8f6f 	isb	sy
 800d12e:	f3bf 8f4f 	dsb	sy
 800d132:	61bb      	str	r3, [r7, #24]
}
 800d134:	bf00      	nop
 800d136:	e7fe      	b.n	800d136 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800d138:	68ba      	ldr	r2, [r7, #8]
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	429a      	cmp	r2, r3
 800d13e:	d90a      	bls.n	800d156 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800d140:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d144:	f383 8811 	msr	BASEPRI, r3
 800d148:	f3bf 8f6f 	isb	sy
 800d14c:	f3bf 8f4f 	dsb	sy
 800d150:	617b      	str	r3, [r7, #20]
}
 800d152:	bf00      	nop
 800d154:	e7fe      	b.n	800d154 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d156:	2302      	movs	r3, #2
 800d158:	9300      	str	r3, [sp, #0]
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	2200      	movs	r2, #0
 800d15e:	2100      	movs	r1, #0
 800d160:	68f8      	ldr	r0, [r7, #12]
 800d162:	f7ff fe49 	bl	800cdf8 <xQueueGenericCreateStatic>
 800d166:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800d168:	69fb      	ldr	r3, [r7, #28]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d002      	beq.n	800d174 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800d16e:	69fb      	ldr	r3, [r7, #28]
 800d170:	68ba      	ldr	r2, [r7, #8]
 800d172:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800d174:	69fb      	ldr	r3, [r7, #28]
	}
 800d176:	4618      	mov	r0, r3
 800d178:	3720      	adds	r7, #32
 800d17a:	46bd      	mov	sp, r7
 800d17c:	bd80      	pop	{r7, pc}

0800d17e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800d17e:	b580      	push	{r7, lr}
 800d180:	b086      	sub	sp, #24
 800d182:	af00      	add	r7, sp, #0
 800d184:	6078      	str	r0, [r7, #4]
 800d186:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d10a      	bne.n	800d1a4 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800d18e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d192:	f383 8811 	msr	BASEPRI, r3
 800d196:	f3bf 8f6f 	isb	sy
 800d19a:	f3bf 8f4f 	dsb	sy
 800d19e:	613b      	str	r3, [r7, #16]
}
 800d1a0:	bf00      	nop
 800d1a2:	e7fe      	b.n	800d1a2 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800d1a4:	683a      	ldr	r2, [r7, #0]
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	429a      	cmp	r2, r3
 800d1aa:	d90a      	bls.n	800d1c2 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800d1ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1b0:	f383 8811 	msr	BASEPRI, r3
 800d1b4:	f3bf 8f6f 	isb	sy
 800d1b8:	f3bf 8f4f 	dsb	sy
 800d1bc:	60fb      	str	r3, [r7, #12]
}
 800d1be:	bf00      	nop
 800d1c0:	e7fe      	b.n	800d1c0 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d1c2:	2202      	movs	r2, #2
 800d1c4:	2100      	movs	r1, #0
 800d1c6:	6878      	ldr	r0, [r7, #4]
 800d1c8:	f7ff fe8e 	bl	800cee8 <xQueueGenericCreate>
 800d1cc:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800d1ce:	697b      	ldr	r3, [r7, #20]
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d002      	beq.n	800d1da <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800d1d4:	697b      	ldr	r3, [r7, #20]
 800d1d6:	683a      	ldr	r2, [r7, #0]
 800d1d8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800d1da:	697b      	ldr	r3, [r7, #20]
	}
 800d1dc:	4618      	mov	r0, r3
 800d1de:	3718      	adds	r7, #24
 800d1e0:	46bd      	mov	sp, r7
 800d1e2:	bd80      	pop	{r7, pc}

0800d1e4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d1e4:	b580      	push	{r7, lr}
 800d1e6:	b08e      	sub	sp, #56	; 0x38
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	60f8      	str	r0, [r7, #12]
 800d1ec:	60b9      	str	r1, [r7, #8]
 800d1ee:	607a      	str	r2, [r7, #4]
 800d1f0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d1f2:	2300      	movs	r3, #0
 800d1f4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d1fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d10a      	bne.n	800d216 <xQueueGenericSend+0x32>
	__asm volatile
 800d200:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d204:	f383 8811 	msr	BASEPRI, r3
 800d208:	f3bf 8f6f 	isb	sy
 800d20c:	f3bf 8f4f 	dsb	sy
 800d210:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d212:	bf00      	nop
 800d214:	e7fe      	b.n	800d214 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d216:	68bb      	ldr	r3, [r7, #8]
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d103      	bne.n	800d224 <xQueueGenericSend+0x40>
 800d21c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d21e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d220:	2b00      	cmp	r3, #0
 800d222:	d101      	bne.n	800d228 <xQueueGenericSend+0x44>
 800d224:	2301      	movs	r3, #1
 800d226:	e000      	b.n	800d22a <xQueueGenericSend+0x46>
 800d228:	2300      	movs	r3, #0
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d10a      	bne.n	800d244 <xQueueGenericSend+0x60>
	__asm volatile
 800d22e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d232:	f383 8811 	msr	BASEPRI, r3
 800d236:	f3bf 8f6f 	isb	sy
 800d23a:	f3bf 8f4f 	dsb	sy
 800d23e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d240:	bf00      	nop
 800d242:	e7fe      	b.n	800d242 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d244:	683b      	ldr	r3, [r7, #0]
 800d246:	2b02      	cmp	r3, #2
 800d248:	d103      	bne.n	800d252 <xQueueGenericSend+0x6e>
 800d24a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d24c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d24e:	2b01      	cmp	r3, #1
 800d250:	d101      	bne.n	800d256 <xQueueGenericSend+0x72>
 800d252:	2301      	movs	r3, #1
 800d254:	e000      	b.n	800d258 <xQueueGenericSend+0x74>
 800d256:	2300      	movs	r3, #0
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d10a      	bne.n	800d272 <xQueueGenericSend+0x8e>
	__asm volatile
 800d25c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d260:	f383 8811 	msr	BASEPRI, r3
 800d264:	f3bf 8f6f 	isb	sy
 800d268:	f3bf 8f4f 	dsb	sy
 800d26c:	623b      	str	r3, [r7, #32]
}
 800d26e:	bf00      	nop
 800d270:	e7fe      	b.n	800d270 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d272:	f001 fc5d 	bl	800eb30 <xTaskGetSchedulerState>
 800d276:	4603      	mov	r3, r0
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d102      	bne.n	800d282 <xQueueGenericSend+0x9e>
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d101      	bne.n	800d286 <xQueueGenericSend+0xa2>
 800d282:	2301      	movs	r3, #1
 800d284:	e000      	b.n	800d288 <xQueueGenericSend+0xa4>
 800d286:	2300      	movs	r3, #0
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d10a      	bne.n	800d2a2 <xQueueGenericSend+0xbe>
	__asm volatile
 800d28c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d290:	f383 8811 	msr	BASEPRI, r3
 800d294:	f3bf 8f6f 	isb	sy
 800d298:	f3bf 8f4f 	dsb	sy
 800d29c:	61fb      	str	r3, [r7, #28]
}
 800d29e:	bf00      	nop
 800d2a0:	e7fe      	b.n	800d2a0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d2a2:	f002 fcd7 	bl	800fc54 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d2a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d2aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2ae:	429a      	cmp	r2, r3
 800d2b0:	d302      	bcc.n	800d2b8 <xQueueGenericSend+0xd4>
 800d2b2:	683b      	ldr	r3, [r7, #0]
 800d2b4:	2b02      	cmp	r3, #2
 800d2b6:	d129      	bne.n	800d30c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d2b8:	683a      	ldr	r2, [r7, #0]
 800d2ba:	68b9      	ldr	r1, [r7, #8]
 800d2bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d2be:	f000 fc5e 	bl	800db7e <prvCopyDataToQueue>
 800d2c2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d2c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d010      	beq.n	800d2ee <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d2cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2ce:	3324      	adds	r3, #36	; 0x24
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	f001 fa5f 	bl	800e794 <xTaskRemoveFromEventList>
 800d2d6:	4603      	mov	r3, r0
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d013      	beq.n	800d304 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d2dc:	4b3f      	ldr	r3, [pc, #252]	; (800d3dc <xQueueGenericSend+0x1f8>)
 800d2de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d2e2:	601a      	str	r2, [r3, #0]
 800d2e4:	f3bf 8f4f 	dsb	sy
 800d2e8:	f3bf 8f6f 	isb	sy
 800d2ec:	e00a      	b.n	800d304 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d2ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d007      	beq.n	800d304 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d2f4:	4b39      	ldr	r3, [pc, #228]	; (800d3dc <xQueueGenericSend+0x1f8>)
 800d2f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d2fa:	601a      	str	r2, [r3, #0]
 800d2fc:	f3bf 8f4f 	dsb	sy
 800d300:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d304:	f002 fcd6 	bl	800fcb4 <vPortExitCritical>
				return pdPASS;
 800d308:	2301      	movs	r3, #1
 800d30a:	e063      	b.n	800d3d4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d103      	bne.n	800d31a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d312:	f002 fccf 	bl	800fcb4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d316:	2300      	movs	r3, #0
 800d318:	e05c      	b.n	800d3d4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d31a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d106      	bne.n	800d32e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d320:	f107 0314 	add.w	r3, r7, #20
 800d324:	4618      	mov	r0, r3
 800d326:	f001 fa99 	bl	800e85c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d32a:	2301      	movs	r3, #1
 800d32c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d32e:	f002 fcc1 	bl	800fcb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d332:	f000 fff9 	bl	800e328 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d336:	f002 fc8d 	bl	800fc54 <vPortEnterCritical>
 800d33a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d33c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d340:	b25b      	sxtb	r3, r3
 800d342:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d346:	d103      	bne.n	800d350 <xQueueGenericSend+0x16c>
 800d348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d34a:	2200      	movs	r2, #0
 800d34c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d352:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d356:	b25b      	sxtb	r3, r3
 800d358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d35c:	d103      	bne.n	800d366 <xQueueGenericSend+0x182>
 800d35e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d360:	2200      	movs	r2, #0
 800d362:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d366:	f002 fca5 	bl	800fcb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d36a:	1d3a      	adds	r2, r7, #4
 800d36c:	f107 0314 	add.w	r3, r7, #20
 800d370:	4611      	mov	r1, r2
 800d372:	4618      	mov	r0, r3
 800d374:	f001 fa88 	bl	800e888 <xTaskCheckForTimeOut>
 800d378:	4603      	mov	r3, r0
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d124      	bne.n	800d3c8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d37e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d380:	f000 fcf5 	bl	800dd6e <prvIsQueueFull>
 800d384:	4603      	mov	r3, r0
 800d386:	2b00      	cmp	r3, #0
 800d388:	d018      	beq.n	800d3bc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d38a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d38c:	3310      	adds	r3, #16
 800d38e:	687a      	ldr	r2, [r7, #4]
 800d390:	4611      	mov	r1, r2
 800d392:	4618      	mov	r0, r3
 800d394:	f001 f9ae 	bl	800e6f4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d398:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d39a:	f000 fc80 	bl	800dc9e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d39e:	f000 ffd1 	bl	800e344 <xTaskResumeAll>
 800d3a2:	4603      	mov	r3, r0
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	f47f af7c 	bne.w	800d2a2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800d3aa:	4b0c      	ldr	r3, [pc, #48]	; (800d3dc <xQueueGenericSend+0x1f8>)
 800d3ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3b0:	601a      	str	r2, [r3, #0]
 800d3b2:	f3bf 8f4f 	dsb	sy
 800d3b6:	f3bf 8f6f 	isb	sy
 800d3ba:	e772      	b.n	800d2a2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d3bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d3be:	f000 fc6e 	bl	800dc9e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d3c2:	f000 ffbf 	bl	800e344 <xTaskResumeAll>
 800d3c6:	e76c      	b.n	800d2a2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d3c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d3ca:	f000 fc68 	bl	800dc9e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d3ce:	f000 ffb9 	bl	800e344 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d3d2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d3d4:	4618      	mov	r0, r3
 800d3d6:	3738      	adds	r7, #56	; 0x38
 800d3d8:	46bd      	mov	sp, r7
 800d3da:	bd80      	pop	{r7, pc}
 800d3dc:	e000ed04 	.word	0xe000ed04

0800d3e0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d3e0:	b580      	push	{r7, lr}
 800d3e2:	b090      	sub	sp, #64	; 0x40
 800d3e4:	af00      	add	r7, sp, #0
 800d3e6:	60f8      	str	r0, [r7, #12]
 800d3e8:	60b9      	str	r1, [r7, #8]
 800d3ea:	607a      	str	r2, [r7, #4]
 800d3ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800d3f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d10a      	bne.n	800d40e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800d3f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3fc:	f383 8811 	msr	BASEPRI, r3
 800d400:	f3bf 8f6f 	isb	sy
 800d404:	f3bf 8f4f 	dsb	sy
 800d408:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d40a:	bf00      	nop
 800d40c:	e7fe      	b.n	800d40c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d40e:	68bb      	ldr	r3, [r7, #8]
 800d410:	2b00      	cmp	r3, #0
 800d412:	d103      	bne.n	800d41c <xQueueGenericSendFromISR+0x3c>
 800d414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d101      	bne.n	800d420 <xQueueGenericSendFromISR+0x40>
 800d41c:	2301      	movs	r3, #1
 800d41e:	e000      	b.n	800d422 <xQueueGenericSendFromISR+0x42>
 800d420:	2300      	movs	r3, #0
 800d422:	2b00      	cmp	r3, #0
 800d424:	d10a      	bne.n	800d43c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800d426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d42a:	f383 8811 	msr	BASEPRI, r3
 800d42e:	f3bf 8f6f 	isb	sy
 800d432:	f3bf 8f4f 	dsb	sy
 800d436:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d438:	bf00      	nop
 800d43a:	e7fe      	b.n	800d43a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d43c:	683b      	ldr	r3, [r7, #0]
 800d43e:	2b02      	cmp	r3, #2
 800d440:	d103      	bne.n	800d44a <xQueueGenericSendFromISR+0x6a>
 800d442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d446:	2b01      	cmp	r3, #1
 800d448:	d101      	bne.n	800d44e <xQueueGenericSendFromISR+0x6e>
 800d44a:	2301      	movs	r3, #1
 800d44c:	e000      	b.n	800d450 <xQueueGenericSendFromISR+0x70>
 800d44e:	2300      	movs	r3, #0
 800d450:	2b00      	cmp	r3, #0
 800d452:	d10a      	bne.n	800d46a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800d454:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d458:	f383 8811 	msr	BASEPRI, r3
 800d45c:	f3bf 8f6f 	isb	sy
 800d460:	f3bf 8f4f 	dsb	sy
 800d464:	623b      	str	r3, [r7, #32]
}
 800d466:	bf00      	nop
 800d468:	e7fe      	b.n	800d468 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d46a:	f002 fcd5 	bl	800fe18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d46e:	f3ef 8211 	mrs	r2, BASEPRI
 800d472:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d476:	f383 8811 	msr	BASEPRI, r3
 800d47a:	f3bf 8f6f 	isb	sy
 800d47e:	f3bf 8f4f 	dsb	sy
 800d482:	61fa      	str	r2, [r7, #28]
 800d484:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d486:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d488:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d48a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d48c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d48e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d492:	429a      	cmp	r2, r3
 800d494:	d302      	bcc.n	800d49c <xQueueGenericSendFromISR+0xbc>
 800d496:	683b      	ldr	r3, [r7, #0]
 800d498:	2b02      	cmp	r3, #2
 800d49a:	d12f      	bne.n	800d4fc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d49c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d49e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d4a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d4a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4aa:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d4ac:	683a      	ldr	r2, [r7, #0]
 800d4ae:	68b9      	ldr	r1, [r7, #8]
 800d4b0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d4b2:	f000 fb64 	bl	800db7e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d4b6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800d4ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4be:	d112      	bne.n	800d4e6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d4c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d016      	beq.n	800d4f6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d4c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4ca:	3324      	adds	r3, #36	; 0x24
 800d4cc:	4618      	mov	r0, r3
 800d4ce:	f001 f961 	bl	800e794 <xTaskRemoveFromEventList>
 800d4d2:	4603      	mov	r3, r0
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d00e      	beq.n	800d4f6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d00b      	beq.n	800d4f6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	2201      	movs	r2, #1
 800d4e2:	601a      	str	r2, [r3, #0]
 800d4e4:	e007      	b.n	800d4f6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d4e6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d4ea:	3301      	adds	r3, #1
 800d4ec:	b2db      	uxtb	r3, r3
 800d4ee:	b25a      	sxtb	r2, r3
 800d4f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d4f6:	2301      	movs	r3, #1
 800d4f8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800d4fa:	e001      	b.n	800d500 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d4fc:	2300      	movs	r3, #0
 800d4fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d502:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d504:	697b      	ldr	r3, [r7, #20]
 800d506:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d50a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d50c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d50e:	4618      	mov	r0, r3
 800d510:	3740      	adds	r7, #64	; 0x40
 800d512:	46bd      	mov	sp, r7
 800d514:	bd80      	pop	{r7, pc}

0800d516 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d516:	b580      	push	{r7, lr}
 800d518:	b08e      	sub	sp, #56	; 0x38
 800d51a:	af00      	add	r7, sp, #0
 800d51c:	6078      	str	r0, [r7, #4]
 800d51e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800d524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d526:	2b00      	cmp	r3, #0
 800d528:	d10a      	bne.n	800d540 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800d52a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d52e:	f383 8811 	msr	BASEPRI, r3
 800d532:	f3bf 8f6f 	isb	sy
 800d536:	f3bf 8f4f 	dsb	sy
 800d53a:	623b      	str	r3, [r7, #32]
}
 800d53c:	bf00      	nop
 800d53e:	e7fe      	b.n	800d53e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d544:	2b00      	cmp	r3, #0
 800d546:	d00a      	beq.n	800d55e <xQueueGiveFromISR+0x48>
	__asm volatile
 800d548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d54c:	f383 8811 	msr	BASEPRI, r3
 800d550:	f3bf 8f6f 	isb	sy
 800d554:	f3bf 8f4f 	dsb	sy
 800d558:	61fb      	str	r3, [r7, #28]
}
 800d55a:	bf00      	nop
 800d55c:	e7fe      	b.n	800d55c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800d55e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	2b00      	cmp	r3, #0
 800d564:	d103      	bne.n	800d56e <xQueueGiveFromISR+0x58>
 800d566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d568:	689b      	ldr	r3, [r3, #8]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d101      	bne.n	800d572 <xQueueGiveFromISR+0x5c>
 800d56e:	2301      	movs	r3, #1
 800d570:	e000      	b.n	800d574 <xQueueGiveFromISR+0x5e>
 800d572:	2300      	movs	r3, #0
 800d574:	2b00      	cmp	r3, #0
 800d576:	d10a      	bne.n	800d58e <xQueueGiveFromISR+0x78>
	__asm volatile
 800d578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d57c:	f383 8811 	msr	BASEPRI, r3
 800d580:	f3bf 8f6f 	isb	sy
 800d584:	f3bf 8f4f 	dsb	sy
 800d588:	61bb      	str	r3, [r7, #24]
}
 800d58a:	bf00      	nop
 800d58c:	e7fe      	b.n	800d58c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d58e:	f002 fc43 	bl	800fe18 <vPortValidateInterruptPriority>
	__asm volatile
 800d592:	f3ef 8211 	mrs	r2, BASEPRI
 800d596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d59a:	f383 8811 	msr	BASEPRI, r3
 800d59e:	f3bf 8f6f 	isb	sy
 800d5a2:	f3bf 8f4f 	dsb	sy
 800d5a6:	617a      	str	r2, [r7, #20]
 800d5a8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800d5aa:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d5ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d5ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5b2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800d5b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d5ba:	429a      	cmp	r2, r3
 800d5bc:	d22b      	bcs.n	800d616 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d5be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d5c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d5c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5ca:	1c5a      	adds	r2, r3, #1
 800d5cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5ce:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d5d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d5d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5d8:	d112      	bne.n	800d600 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d5da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d016      	beq.n	800d610 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d5e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5e4:	3324      	adds	r3, #36	; 0x24
 800d5e6:	4618      	mov	r0, r3
 800d5e8:	f001 f8d4 	bl	800e794 <xTaskRemoveFromEventList>
 800d5ec:	4603      	mov	r3, r0
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d00e      	beq.n	800d610 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d5f2:	683b      	ldr	r3, [r7, #0]
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d00b      	beq.n	800d610 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d5f8:	683b      	ldr	r3, [r7, #0]
 800d5fa:	2201      	movs	r2, #1
 800d5fc:	601a      	str	r2, [r3, #0]
 800d5fe:	e007      	b.n	800d610 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d600:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d604:	3301      	adds	r3, #1
 800d606:	b2db      	uxtb	r3, r3
 800d608:	b25a      	sxtb	r2, r3
 800d60a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d60c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d610:	2301      	movs	r3, #1
 800d612:	637b      	str	r3, [r7, #52]	; 0x34
 800d614:	e001      	b.n	800d61a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d616:	2300      	movs	r3, #0
 800d618:	637b      	str	r3, [r7, #52]	; 0x34
 800d61a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d61c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	f383 8811 	msr	BASEPRI, r3
}
 800d624:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d628:	4618      	mov	r0, r3
 800d62a:	3738      	adds	r7, #56	; 0x38
 800d62c:	46bd      	mov	sp, r7
 800d62e:	bd80      	pop	{r7, pc}

0800d630 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d630:	b580      	push	{r7, lr}
 800d632:	b08c      	sub	sp, #48	; 0x30
 800d634:	af00      	add	r7, sp, #0
 800d636:	60f8      	str	r0, [r7, #12]
 800d638:	60b9      	str	r1, [r7, #8]
 800d63a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d63c:	2300      	movs	r3, #0
 800d63e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d646:	2b00      	cmp	r3, #0
 800d648:	d10a      	bne.n	800d660 <xQueueReceive+0x30>
	__asm volatile
 800d64a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d64e:	f383 8811 	msr	BASEPRI, r3
 800d652:	f3bf 8f6f 	isb	sy
 800d656:	f3bf 8f4f 	dsb	sy
 800d65a:	623b      	str	r3, [r7, #32]
}
 800d65c:	bf00      	nop
 800d65e:	e7fe      	b.n	800d65e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d660:	68bb      	ldr	r3, [r7, #8]
 800d662:	2b00      	cmp	r3, #0
 800d664:	d103      	bne.n	800d66e <xQueueReceive+0x3e>
 800d666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d101      	bne.n	800d672 <xQueueReceive+0x42>
 800d66e:	2301      	movs	r3, #1
 800d670:	e000      	b.n	800d674 <xQueueReceive+0x44>
 800d672:	2300      	movs	r3, #0
 800d674:	2b00      	cmp	r3, #0
 800d676:	d10a      	bne.n	800d68e <xQueueReceive+0x5e>
	__asm volatile
 800d678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d67c:	f383 8811 	msr	BASEPRI, r3
 800d680:	f3bf 8f6f 	isb	sy
 800d684:	f3bf 8f4f 	dsb	sy
 800d688:	61fb      	str	r3, [r7, #28]
}
 800d68a:	bf00      	nop
 800d68c:	e7fe      	b.n	800d68c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d68e:	f001 fa4f 	bl	800eb30 <xTaskGetSchedulerState>
 800d692:	4603      	mov	r3, r0
 800d694:	2b00      	cmp	r3, #0
 800d696:	d102      	bne.n	800d69e <xQueueReceive+0x6e>
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d101      	bne.n	800d6a2 <xQueueReceive+0x72>
 800d69e:	2301      	movs	r3, #1
 800d6a0:	e000      	b.n	800d6a4 <xQueueReceive+0x74>
 800d6a2:	2300      	movs	r3, #0
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d10a      	bne.n	800d6be <xQueueReceive+0x8e>
	__asm volatile
 800d6a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6ac:	f383 8811 	msr	BASEPRI, r3
 800d6b0:	f3bf 8f6f 	isb	sy
 800d6b4:	f3bf 8f4f 	dsb	sy
 800d6b8:	61bb      	str	r3, [r7, #24]
}
 800d6ba:	bf00      	nop
 800d6bc:	e7fe      	b.n	800d6bc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d6be:	f002 fac9 	bl	800fc54 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d6c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6c6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d6c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d01f      	beq.n	800d70e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d6ce:	68b9      	ldr	r1, [r7, #8]
 800d6d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d6d2:	f000 fabe 	bl	800dc52 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d6d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6d8:	1e5a      	subs	r2, r3, #1
 800d6da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6dc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d6de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6e0:	691b      	ldr	r3, [r3, #16]
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d00f      	beq.n	800d706 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d6e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6e8:	3310      	adds	r3, #16
 800d6ea:	4618      	mov	r0, r3
 800d6ec:	f001 f852 	bl	800e794 <xTaskRemoveFromEventList>
 800d6f0:	4603      	mov	r3, r0
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d007      	beq.n	800d706 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d6f6:	4b3d      	ldr	r3, [pc, #244]	; (800d7ec <xQueueReceive+0x1bc>)
 800d6f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d6fc:	601a      	str	r2, [r3, #0]
 800d6fe:	f3bf 8f4f 	dsb	sy
 800d702:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d706:	f002 fad5 	bl	800fcb4 <vPortExitCritical>
				return pdPASS;
 800d70a:	2301      	movs	r3, #1
 800d70c:	e069      	b.n	800d7e2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	2b00      	cmp	r3, #0
 800d712:	d103      	bne.n	800d71c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d714:	f002 face 	bl	800fcb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d718:	2300      	movs	r3, #0
 800d71a:	e062      	b.n	800d7e2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d71c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d106      	bne.n	800d730 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d722:	f107 0310 	add.w	r3, r7, #16
 800d726:	4618      	mov	r0, r3
 800d728:	f001 f898 	bl	800e85c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d72c:	2301      	movs	r3, #1
 800d72e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d730:	f002 fac0 	bl	800fcb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d734:	f000 fdf8 	bl	800e328 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d738:	f002 fa8c 	bl	800fc54 <vPortEnterCritical>
 800d73c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d73e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d742:	b25b      	sxtb	r3, r3
 800d744:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d748:	d103      	bne.n	800d752 <xQueueReceive+0x122>
 800d74a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d74c:	2200      	movs	r2, #0
 800d74e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d754:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d758:	b25b      	sxtb	r3, r3
 800d75a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d75e:	d103      	bne.n	800d768 <xQueueReceive+0x138>
 800d760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d762:	2200      	movs	r2, #0
 800d764:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d768:	f002 faa4 	bl	800fcb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d76c:	1d3a      	adds	r2, r7, #4
 800d76e:	f107 0310 	add.w	r3, r7, #16
 800d772:	4611      	mov	r1, r2
 800d774:	4618      	mov	r0, r3
 800d776:	f001 f887 	bl	800e888 <xTaskCheckForTimeOut>
 800d77a:	4603      	mov	r3, r0
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d123      	bne.n	800d7c8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d780:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d782:	f000 fade 	bl	800dd42 <prvIsQueueEmpty>
 800d786:	4603      	mov	r3, r0
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d017      	beq.n	800d7bc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d78c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d78e:	3324      	adds	r3, #36	; 0x24
 800d790:	687a      	ldr	r2, [r7, #4]
 800d792:	4611      	mov	r1, r2
 800d794:	4618      	mov	r0, r3
 800d796:	f000 ffad 	bl	800e6f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d79a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d79c:	f000 fa7f 	bl	800dc9e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d7a0:	f000 fdd0 	bl	800e344 <xTaskResumeAll>
 800d7a4:	4603      	mov	r3, r0
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d189      	bne.n	800d6be <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d7aa:	4b10      	ldr	r3, [pc, #64]	; (800d7ec <xQueueReceive+0x1bc>)
 800d7ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d7b0:	601a      	str	r2, [r3, #0]
 800d7b2:	f3bf 8f4f 	dsb	sy
 800d7b6:	f3bf 8f6f 	isb	sy
 800d7ba:	e780      	b.n	800d6be <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d7bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d7be:	f000 fa6e 	bl	800dc9e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d7c2:	f000 fdbf 	bl	800e344 <xTaskResumeAll>
 800d7c6:	e77a      	b.n	800d6be <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d7c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d7ca:	f000 fa68 	bl	800dc9e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d7ce:	f000 fdb9 	bl	800e344 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d7d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d7d4:	f000 fab5 	bl	800dd42 <prvIsQueueEmpty>
 800d7d8:	4603      	mov	r3, r0
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	f43f af6f 	beq.w	800d6be <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d7e0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d7e2:	4618      	mov	r0, r3
 800d7e4:	3730      	adds	r7, #48	; 0x30
 800d7e6:	46bd      	mov	sp, r7
 800d7e8:	bd80      	pop	{r7, pc}
 800d7ea:	bf00      	nop
 800d7ec:	e000ed04 	.word	0xe000ed04

0800d7f0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d7f0:	b580      	push	{r7, lr}
 800d7f2:	b08e      	sub	sp, #56	; 0x38
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	6078      	str	r0, [r7, #4]
 800d7f8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d7fa:	2300      	movs	r3, #0
 800d7fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d802:	2300      	movs	r3, #0
 800d804:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d10a      	bne.n	800d822 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800d80c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d810:	f383 8811 	msr	BASEPRI, r3
 800d814:	f3bf 8f6f 	isb	sy
 800d818:	f3bf 8f4f 	dsb	sy
 800d81c:	623b      	str	r3, [r7, #32]
}
 800d81e:	bf00      	nop
 800d820:	e7fe      	b.n	800d820 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d826:	2b00      	cmp	r3, #0
 800d828:	d00a      	beq.n	800d840 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800d82a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d82e:	f383 8811 	msr	BASEPRI, r3
 800d832:	f3bf 8f6f 	isb	sy
 800d836:	f3bf 8f4f 	dsb	sy
 800d83a:	61fb      	str	r3, [r7, #28]
}
 800d83c:	bf00      	nop
 800d83e:	e7fe      	b.n	800d83e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d840:	f001 f976 	bl	800eb30 <xTaskGetSchedulerState>
 800d844:	4603      	mov	r3, r0
 800d846:	2b00      	cmp	r3, #0
 800d848:	d102      	bne.n	800d850 <xQueueSemaphoreTake+0x60>
 800d84a:	683b      	ldr	r3, [r7, #0]
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d101      	bne.n	800d854 <xQueueSemaphoreTake+0x64>
 800d850:	2301      	movs	r3, #1
 800d852:	e000      	b.n	800d856 <xQueueSemaphoreTake+0x66>
 800d854:	2300      	movs	r3, #0
 800d856:	2b00      	cmp	r3, #0
 800d858:	d10a      	bne.n	800d870 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800d85a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d85e:	f383 8811 	msr	BASEPRI, r3
 800d862:	f3bf 8f6f 	isb	sy
 800d866:	f3bf 8f4f 	dsb	sy
 800d86a:	61bb      	str	r3, [r7, #24]
}
 800d86c:	bf00      	nop
 800d86e:	e7fe      	b.n	800d86e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d870:	f002 f9f0 	bl	800fc54 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d878:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d87a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d024      	beq.n	800d8ca <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d882:	1e5a      	subs	r2, r3, #1
 800d884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d886:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d104      	bne.n	800d89a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d890:	f001 fac4 	bl	800ee1c <pvTaskIncrementMutexHeldCount>
 800d894:	4602      	mov	r2, r0
 800d896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d898:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d89a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d89c:	691b      	ldr	r3, [r3, #16]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d00f      	beq.n	800d8c2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d8a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8a4:	3310      	adds	r3, #16
 800d8a6:	4618      	mov	r0, r3
 800d8a8:	f000 ff74 	bl	800e794 <xTaskRemoveFromEventList>
 800d8ac:	4603      	mov	r3, r0
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d007      	beq.n	800d8c2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d8b2:	4b54      	ldr	r3, [pc, #336]	; (800da04 <xQueueSemaphoreTake+0x214>)
 800d8b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d8b8:	601a      	str	r2, [r3, #0]
 800d8ba:	f3bf 8f4f 	dsb	sy
 800d8be:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d8c2:	f002 f9f7 	bl	800fcb4 <vPortExitCritical>
				return pdPASS;
 800d8c6:	2301      	movs	r3, #1
 800d8c8:	e097      	b.n	800d9fa <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d8ca:	683b      	ldr	r3, [r7, #0]
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d111      	bne.n	800d8f4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d8d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d00a      	beq.n	800d8ec <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800d8d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8da:	f383 8811 	msr	BASEPRI, r3
 800d8de:	f3bf 8f6f 	isb	sy
 800d8e2:	f3bf 8f4f 	dsb	sy
 800d8e6:	617b      	str	r3, [r7, #20]
}
 800d8e8:	bf00      	nop
 800d8ea:	e7fe      	b.n	800d8ea <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d8ec:	f002 f9e2 	bl	800fcb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d8f0:	2300      	movs	r3, #0
 800d8f2:	e082      	b.n	800d9fa <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d8f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d106      	bne.n	800d908 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d8fa:	f107 030c 	add.w	r3, r7, #12
 800d8fe:	4618      	mov	r0, r3
 800d900:	f000 ffac 	bl	800e85c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d904:	2301      	movs	r3, #1
 800d906:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d908:	f002 f9d4 	bl	800fcb4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d90c:	f000 fd0c 	bl	800e328 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d910:	f002 f9a0 	bl	800fc54 <vPortEnterCritical>
 800d914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d916:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d91a:	b25b      	sxtb	r3, r3
 800d91c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d920:	d103      	bne.n	800d92a <xQueueSemaphoreTake+0x13a>
 800d922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d924:	2200      	movs	r2, #0
 800d926:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d92a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d92c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d930:	b25b      	sxtb	r3, r3
 800d932:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d936:	d103      	bne.n	800d940 <xQueueSemaphoreTake+0x150>
 800d938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d93a:	2200      	movs	r2, #0
 800d93c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d940:	f002 f9b8 	bl	800fcb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d944:	463a      	mov	r2, r7
 800d946:	f107 030c 	add.w	r3, r7, #12
 800d94a:	4611      	mov	r1, r2
 800d94c:	4618      	mov	r0, r3
 800d94e:	f000 ff9b 	bl	800e888 <xTaskCheckForTimeOut>
 800d952:	4603      	mov	r3, r0
 800d954:	2b00      	cmp	r3, #0
 800d956:	d132      	bne.n	800d9be <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d958:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d95a:	f000 f9f2 	bl	800dd42 <prvIsQueueEmpty>
 800d95e:	4603      	mov	r3, r0
 800d960:	2b00      	cmp	r3, #0
 800d962:	d026      	beq.n	800d9b2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d109      	bne.n	800d980 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800d96c:	f002 f972 	bl	800fc54 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d972:	689b      	ldr	r3, [r3, #8]
 800d974:	4618      	mov	r0, r3
 800d976:	f001 f8f9 	bl	800eb6c <xTaskPriorityInherit>
 800d97a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800d97c:	f002 f99a 	bl	800fcb4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d982:	3324      	adds	r3, #36	; 0x24
 800d984:	683a      	ldr	r2, [r7, #0]
 800d986:	4611      	mov	r1, r2
 800d988:	4618      	mov	r0, r3
 800d98a:	f000 feb3 	bl	800e6f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d98e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d990:	f000 f985 	bl	800dc9e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d994:	f000 fcd6 	bl	800e344 <xTaskResumeAll>
 800d998:	4603      	mov	r3, r0
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	f47f af68 	bne.w	800d870 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800d9a0:	4b18      	ldr	r3, [pc, #96]	; (800da04 <xQueueSemaphoreTake+0x214>)
 800d9a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d9a6:	601a      	str	r2, [r3, #0]
 800d9a8:	f3bf 8f4f 	dsb	sy
 800d9ac:	f3bf 8f6f 	isb	sy
 800d9b0:	e75e      	b.n	800d870 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d9b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d9b4:	f000 f973 	bl	800dc9e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d9b8:	f000 fcc4 	bl	800e344 <xTaskResumeAll>
 800d9bc:	e758      	b.n	800d870 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d9be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d9c0:	f000 f96d 	bl	800dc9e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d9c4:	f000 fcbe 	bl	800e344 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d9c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d9ca:	f000 f9ba 	bl	800dd42 <prvIsQueueEmpty>
 800d9ce:	4603      	mov	r3, r0
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	f43f af4d 	beq.w	800d870 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d9d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d00d      	beq.n	800d9f8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800d9dc:	f002 f93a 	bl	800fc54 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d9e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d9e2:	f000 f8b4 	bl	800db4e <prvGetDisinheritPriorityAfterTimeout>
 800d9e6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d9e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9ea:	689b      	ldr	r3, [r3, #8]
 800d9ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d9ee:	4618      	mov	r0, r3
 800d9f0:	f001 f992 	bl	800ed18 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d9f4:	f002 f95e 	bl	800fcb4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d9f8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d9fa:	4618      	mov	r0, r3
 800d9fc:	3738      	adds	r7, #56	; 0x38
 800d9fe:	46bd      	mov	sp, r7
 800da00:	bd80      	pop	{r7, pc}
 800da02:	bf00      	nop
 800da04:	e000ed04 	.word	0xe000ed04

0800da08 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800da08:	b580      	push	{r7, lr}
 800da0a:	b08e      	sub	sp, #56	; 0x38
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	60f8      	str	r0, [r7, #12]
 800da10:	60b9      	str	r1, [r7, #8]
 800da12:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800da18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d10a      	bne.n	800da34 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800da1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da22:	f383 8811 	msr	BASEPRI, r3
 800da26:	f3bf 8f6f 	isb	sy
 800da2a:	f3bf 8f4f 	dsb	sy
 800da2e:	623b      	str	r3, [r7, #32]
}
 800da30:	bf00      	nop
 800da32:	e7fe      	b.n	800da32 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800da34:	68bb      	ldr	r3, [r7, #8]
 800da36:	2b00      	cmp	r3, #0
 800da38:	d103      	bne.n	800da42 <xQueueReceiveFromISR+0x3a>
 800da3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d101      	bne.n	800da46 <xQueueReceiveFromISR+0x3e>
 800da42:	2301      	movs	r3, #1
 800da44:	e000      	b.n	800da48 <xQueueReceiveFromISR+0x40>
 800da46:	2300      	movs	r3, #0
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d10a      	bne.n	800da62 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800da4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da50:	f383 8811 	msr	BASEPRI, r3
 800da54:	f3bf 8f6f 	isb	sy
 800da58:	f3bf 8f4f 	dsb	sy
 800da5c:	61fb      	str	r3, [r7, #28]
}
 800da5e:	bf00      	nop
 800da60:	e7fe      	b.n	800da60 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800da62:	f002 f9d9 	bl	800fe18 <vPortValidateInterruptPriority>
	__asm volatile
 800da66:	f3ef 8211 	mrs	r2, BASEPRI
 800da6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da6e:	f383 8811 	msr	BASEPRI, r3
 800da72:	f3bf 8f6f 	isb	sy
 800da76:	f3bf 8f4f 	dsb	sy
 800da7a:	61ba      	str	r2, [r7, #24]
 800da7c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800da7e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800da80:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800da82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da86:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800da88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d02f      	beq.n	800daee <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800da8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800da94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800da98:	68b9      	ldr	r1, [r7, #8]
 800da9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800da9c:	f000 f8d9 	bl	800dc52 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800daa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daa2:	1e5a      	subs	r2, r3, #1
 800daa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daa6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800daa8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800daac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dab0:	d112      	bne.n	800dad8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dab4:	691b      	ldr	r3, [r3, #16]
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d016      	beq.n	800dae8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800daba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dabc:	3310      	adds	r3, #16
 800dabe:	4618      	mov	r0, r3
 800dac0:	f000 fe68 	bl	800e794 <xTaskRemoveFromEventList>
 800dac4:	4603      	mov	r3, r0
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d00e      	beq.n	800dae8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d00b      	beq.n	800dae8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	2201      	movs	r2, #1
 800dad4:	601a      	str	r2, [r3, #0]
 800dad6:	e007      	b.n	800dae8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800dad8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dadc:	3301      	adds	r3, #1
 800dade:	b2db      	uxtb	r3, r3
 800dae0:	b25a      	sxtb	r2, r3
 800dae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dae4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800dae8:	2301      	movs	r3, #1
 800daea:	637b      	str	r3, [r7, #52]	; 0x34
 800daec:	e001      	b.n	800daf2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800daee:	2300      	movs	r3, #0
 800daf0:	637b      	str	r3, [r7, #52]	; 0x34
 800daf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daf4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800daf6:	693b      	ldr	r3, [r7, #16]
 800daf8:	f383 8811 	msr	BASEPRI, r3
}
 800dafc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dafe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800db00:	4618      	mov	r0, r3
 800db02:	3738      	adds	r7, #56	; 0x38
 800db04:	46bd      	mov	sp, r7
 800db06:	bd80      	pop	{r7, pc}

0800db08 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800db08:	b580      	push	{r7, lr}
 800db0a:	b084      	sub	sp, #16
 800db0c:	af00      	add	r7, sp, #0
 800db0e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	2b00      	cmp	r3, #0
 800db18:	d10a      	bne.n	800db30 <vQueueDelete+0x28>
	__asm volatile
 800db1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db1e:	f383 8811 	msr	BASEPRI, r3
 800db22:	f3bf 8f6f 	isb	sy
 800db26:	f3bf 8f4f 	dsb	sy
 800db2a:	60bb      	str	r3, [r7, #8]
}
 800db2c:	bf00      	nop
 800db2e:	e7fe      	b.n	800db2e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800db30:	68f8      	ldr	r0, [r7, #12]
 800db32:	f000 f95f 	bl	800ddf4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d102      	bne.n	800db46 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800db40:	68f8      	ldr	r0, [r7, #12]
 800db42:	f002 fa75 	bl	8010030 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800db46:	bf00      	nop
 800db48:	3710      	adds	r7, #16
 800db4a:	46bd      	mov	sp, r7
 800db4c:	bd80      	pop	{r7, pc}

0800db4e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800db4e:	b480      	push	{r7}
 800db50:	b085      	sub	sp, #20
 800db52:	af00      	add	r7, sp, #0
 800db54:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d006      	beq.n	800db6c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800db68:	60fb      	str	r3, [r7, #12]
 800db6a:	e001      	b.n	800db70 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800db6c:	2300      	movs	r3, #0
 800db6e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800db70:	68fb      	ldr	r3, [r7, #12]
	}
 800db72:	4618      	mov	r0, r3
 800db74:	3714      	adds	r7, #20
 800db76:	46bd      	mov	sp, r7
 800db78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db7c:	4770      	bx	lr

0800db7e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800db7e:	b580      	push	{r7, lr}
 800db80:	b086      	sub	sp, #24
 800db82:	af00      	add	r7, sp, #0
 800db84:	60f8      	str	r0, [r7, #12]
 800db86:	60b9      	str	r1, [r7, #8]
 800db88:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800db8a:	2300      	movs	r3, #0
 800db8c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db92:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d10d      	bne.n	800dbb8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d14d      	bne.n	800dc40 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	689b      	ldr	r3, [r3, #8]
 800dba8:	4618      	mov	r0, r3
 800dbaa:	f001 f847 	bl	800ec3c <xTaskPriorityDisinherit>
 800dbae:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	2200      	movs	r2, #0
 800dbb4:	609a      	str	r2, [r3, #8]
 800dbb6:	e043      	b.n	800dc40 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d119      	bne.n	800dbf2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	6858      	ldr	r0, [r3, #4]
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbc6:	461a      	mov	r2, r3
 800dbc8:	68b9      	ldr	r1, [r7, #8]
 800dbca:	f00e fd9f 	bl	801c70c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	685a      	ldr	r2, [r3, #4]
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbd6:	441a      	add	r2, r3
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	685a      	ldr	r2, [r3, #4]
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	689b      	ldr	r3, [r3, #8]
 800dbe4:	429a      	cmp	r2, r3
 800dbe6:	d32b      	bcc.n	800dc40 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	681a      	ldr	r2, [r3, #0]
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	605a      	str	r2, [r3, #4]
 800dbf0:	e026      	b.n	800dc40 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	68d8      	ldr	r0, [r3, #12]
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbfa:	461a      	mov	r2, r3
 800dbfc:	68b9      	ldr	r1, [r7, #8]
 800dbfe:	f00e fd85 	bl	801c70c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	68da      	ldr	r2, [r3, #12]
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc0a:	425b      	negs	r3, r3
 800dc0c:	441a      	add	r2, r3
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	68da      	ldr	r2, [r3, #12]
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	429a      	cmp	r2, r3
 800dc1c:	d207      	bcs.n	800dc2e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	689a      	ldr	r2, [r3, #8]
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc26:	425b      	negs	r3, r3
 800dc28:	441a      	add	r2, r3
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	2b02      	cmp	r3, #2
 800dc32:	d105      	bne.n	800dc40 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dc34:	693b      	ldr	r3, [r7, #16]
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d002      	beq.n	800dc40 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800dc3a:	693b      	ldr	r3, [r7, #16]
 800dc3c:	3b01      	subs	r3, #1
 800dc3e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800dc40:	693b      	ldr	r3, [r7, #16]
 800dc42:	1c5a      	adds	r2, r3, #1
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800dc48:	697b      	ldr	r3, [r7, #20]
}
 800dc4a:	4618      	mov	r0, r3
 800dc4c:	3718      	adds	r7, #24
 800dc4e:	46bd      	mov	sp, r7
 800dc50:	bd80      	pop	{r7, pc}

0800dc52 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800dc52:	b580      	push	{r7, lr}
 800dc54:	b082      	sub	sp, #8
 800dc56:	af00      	add	r7, sp, #0
 800dc58:	6078      	str	r0, [r7, #4]
 800dc5a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d018      	beq.n	800dc96 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	68da      	ldr	r2, [r3, #12]
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc6c:	441a      	add	r2, r3
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	68da      	ldr	r2, [r3, #12]
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	689b      	ldr	r3, [r3, #8]
 800dc7a:	429a      	cmp	r2, r3
 800dc7c:	d303      	bcc.n	800dc86 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	681a      	ldr	r2, [r3, #0]
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	68d9      	ldr	r1, [r3, #12]
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc8e:	461a      	mov	r2, r3
 800dc90:	6838      	ldr	r0, [r7, #0]
 800dc92:	f00e fd3b 	bl	801c70c <memcpy>
	}
}
 800dc96:	bf00      	nop
 800dc98:	3708      	adds	r7, #8
 800dc9a:	46bd      	mov	sp, r7
 800dc9c:	bd80      	pop	{r7, pc}

0800dc9e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800dc9e:	b580      	push	{r7, lr}
 800dca0:	b084      	sub	sp, #16
 800dca2:	af00      	add	r7, sp, #0
 800dca4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800dca6:	f001 ffd5 	bl	800fc54 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dcb0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dcb2:	e011      	b.n	800dcd8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d012      	beq.n	800dce2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	3324      	adds	r3, #36	; 0x24
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	f000 fd67 	bl	800e794 <xTaskRemoveFromEventList>
 800dcc6:	4603      	mov	r3, r0
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d001      	beq.n	800dcd0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800dccc:	f000 fe3e 	bl	800e94c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800dcd0:	7bfb      	ldrb	r3, [r7, #15]
 800dcd2:	3b01      	subs	r3, #1
 800dcd4:	b2db      	uxtb	r3, r3
 800dcd6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dcd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	dce9      	bgt.n	800dcb4 <prvUnlockQueue+0x16>
 800dce0:	e000      	b.n	800dce4 <prvUnlockQueue+0x46>
					break;
 800dce2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	22ff      	movs	r2, #255	; 0xff
 800dce8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800dcec:	f001 ffe2 	bl	800fcb4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800dcf0:	f001 ffb0 	bl	800fc54 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dcfa:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dcfc:	e011      	b.n	800dd22 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	691b      	ldr	r3, [r3, #16]
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d012      	beq.n	800dd2c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	3310      	adds	r3, #16
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	f000 fd42 	bl	800e794 <xTaskRemoveFromEventList>
 800dd10:	4603      	mov	r3, r0
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d001      	beq.n	800dd1a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800dd16:	f000 fe19 	bl	800e94c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800dd1a:	7bbb      	ldrb	r3, [r7, #14]
 800dd1c:	3b01      	subs	r3, #1
 800dd1e:	b2db      	uxtb	r3, r3
 800dd20:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dd22:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	dce9      	bgt.n	800dcfe <prvUnlockQueue+0x60>
 800dd2a:	e000      	b.n	800dd2e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800dd2c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	22ff      	movs	r2, #255	; 0xff
 800dd32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800dd36:	f001 ffbd 	bl	800fcb4 <vPortExitCritical>
}
 800dd3a:	bf00      	nop
 800dd3c:	3710      	adds	r7, #16
 800dd3e:	46bd      	mov	sp, r7
 800dd40:	bd80      	pop	{r7, pc}

0800dd42 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800dd42:	b580      	push	{r7, lr}
 800dd44:	b084      	sub	sp, #16
 800dd46:	af00      	add	r7, sp, #0
 800dd48:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dd4a:	f001 ff83 	bl	800fc54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d102      	bne.n	800dd5c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800dd56:	2301      	movs	r3, #1
 800dd58:	60fb      	str	r3, [r7, #12]
 800dd5a:	e001      	b.n	800dd60 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800dd5c:	2300      	movs	r3, #0
 800dd5e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dd60:	f001 ffa8 	bl	800fcb4 <vPortExitCritical>

	return xReturn;
 800dd64:	68fb      	ldr	r3, [r7, #12]
}
 800dd66:	4618      	mov	r0, r3
 800dd68:	3710      	adds	r7, #16
 800dd6a:	46bd      	mov	sp, r7
 800dd6c:	bd80      	pop	{r7, pc}

0800dd6e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800dd6e:	b580      	push	{r7, lr}
 800dd70:	b084      	sub	sp, #16
 800dd72:	af00      	add	r7, sp, #0
 800dd74:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dd76:	f001 ff6d 	bl	800fc54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd82:	429a      	cmp	r2, r3
 800dd84:	d102      	bne.n	800dd8c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800dd86:	2301      	movs	r3, #1
 800dd88:	60fb      	str	r3, [r7, #12]
 800dd8a:	e001      	b.n	800dd90 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800dd8c:	2300      	movs	r3, #0
 800dd8e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dd90:	f001 ff90 	bl	800fcb4 <vPortExitCritical>

	return xReturn;
 800dd94:	68fb      	ldr	r3, [r7, #12]
}
 800dd96:	4618      	mov	r0, r3
 800dd98:	3710      	adds	r7, #16
 800dd9a:	46bd      	mov	sp, r7
 800dd9c:	bd80      	pop	{r7, pc}
	...

0800dda0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800dda0:	b480      	push	{r7}
 800dda2:	b085      	sub	sp, #20
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	6078      	str	r0, [r7, #4]
 800dda8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ddaa:	2300      	movs	r3, #0
 800ddac:	60fb      	str	r3, [r7, #12]
 800ddae:	e014      	b.n	800ddda <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ddb0:	4a0f      	ldr	r2, [pc, #60]	; (800ddf0 <vQueueAddToRegistry+0x50>)
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d10b      	bne.n	800ddd4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ddbc:	490c      	ldr	r1, [pc, #48]	; (800ddf0 <vQueueAddToRegistry+0x50>)
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	683a      	ldr	r2, [r7, #0]
 800ddc2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ddc6:	4a0a      	ldr	r2, [pc, #40]	; (800ddf0 <vQueueAddToRegistry+0x50>)
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	00db      	lsls	r3, r3, #3
 800ddcc:	4413      	add	r3, r2
 800ddce:	687a      	ldr	r2, [r7, #4]
 800ddd0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ddd2:	e006      	b.n	800dde2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	3301      	adds	r3, #1
 800ddd8:	60fb      	str	r3, [r7, #12]
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	2b07      	cmp	r3, #7
 800ddde:	d9e7      	bls.n	800ddb0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800dde0:	bf00      	nop
 800dde2:	bf00      	nop
 800dde4:	3714      	adds	r7, #20
 800dde6:	46bd      	mov	sp, r7
 800dde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddec:	4770      	bx	lr
 800ddee:	bf00      	nop
 800ddf0:	200172a0 	.word	0x200172a0

0800ddf4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800ddf4:	b480      	push	{r7}
 800ddf6:	b085      	sub	sp, #20
 800ddf8:	af00      	add	r7, sp, #0
 800ddfa:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ddfc:	2300      	movs	r3, #0
 800ddfe:	60fb      	str	r3, [r7, #12]
 800de00:	e016      	b.n	800de30 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800de02:	4a10      	ldr	r2, [pc, #64]	; (800de44 <vQueueUnregisterQueue+0x50>)
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	00db      	lsls	r3, r3, #3
 800de08:	4413      	add	r3, r2
 800de0a:	685b      	ldr	r3, [r3, #4]
 800de0c:	687a      	ldr	r2, [r7, #4]
 800de0e:	429a      	cmp	r2, r3
 800de10:	d10b      	bne.n	800de2a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800de12:	4a0c      	ldr	r2, [pc, #48]	; (800de44 <vQueueUnregisterQueue+0x50>)
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	2100      	movs	r1, #0
 800de18:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800de1c:	4a09      	ldr	r2, [pc, #36]	; (800de44 <vQueueUnregisterQueue+0x50>)
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	00db      	lsls	r3, r3, #3
 800de22:	4413      	add	r3, r2
 800de24:	2200      	movs	r2, #0
 800de26:	605a      	str	r2, [r3, #4]
				break;
 800de28:	e006      	b.n	800de38 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	3301      	adds	r3, #1
 800de2e:	60fb      	str	r3, [r7, #12]
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	2b07      	cmp	r3, #7
 800de34:	d9e5      	bls.n	800de02 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800de36:	bf00      	nop
 800de38:	bf00      	nop
 800de3a:	3714      	adds	r7, #20
 800de3c:	46bd      	mov	sp, r7
 800de3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de42:	4770      	bx	lr
 800de44:	200172a0 	.word	0x200172a0

0800de48 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800de48:	b580      	push	{r7, lr}
 800de4a:	b086      	sub	sp, #24
 800de4c:	af00      	add	r7, sp, #0
 800de4e:	60f8      	str	r0, [r7, #12]
 800de50:	60b9      	str	r1, [r7, #8]
 800de52:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800de58:	f001 fefc 	bl	800fc54 <vPortEnterCritical>
 800de5c:	697b      	ldr	r3, [r7, #20]
 800de5e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800de62:	b25b      	sxtb	r3, r3
 800de64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de68:	d103      	bne.n	800de72 <vQueueWaitForMessageRestricted+0x2a>
 800de6a:	697b      	ldr	r3, [r7, #20]
 800de6c:	2200      	movs	r2, #0
 800de6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800de72:	697b      	ldr	r3, [r7, #20]
 800de74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800de78:	b25b      	sxtb	r3, r3
 800de7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de7e:	d103      	bne.n	800de88 <vQueueWaitForMessageRestricted+0x40>
 800de80:	697b      	ldr	r3, [r7, #20]
 800de82:	2200      	movs	r2, #0
 800de84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800de88:	f001 ff14 	bl	800fcb4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800de8c:	697b      	ldr	r3, [r7, #20]
 800de8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de90:	2b00      	cmp	r3, #0
 800de92:	d106      	bne.n	800dea2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800de94:	697b      	ldr	r3, [r7, #20]
 800de96:	3324      	adds	r3, #36	; 0x24
 800de98:	687a      	ldr	r2, [r7, #4]
 800de9a:	68b9      	ldr	r1, [r7, #8]
 800de9c:	4618      	mov	r0, r3
 800de9e:	f000 fc4d 	bl	800e73c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800dea2:	6978      	ldr	r0, [r7, #20]
 800dea4:	f7ff fefb 	bl	800dc9e <prvUnlockQueue>
	}
 800dea8:	bf00      	nop
 800deaa:	3718      	adds	r7, #24
 800deac:	46bd      	mov	sp, r7
 800deae:	bd80      	pop	{r7, pc}

0800deb0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800deb0:	b580      	push	{r7, lr}
 800deb2:	b08e      	sub	sp, #56	; 0x38
 800deb4:	af04      	add	r7, sp, #16
 800deb6:	60f8      	str	r0, [r7, #12]
 800deb8:	60b9      	str	r1, [r7, #8]
 800deba:	607a      	str	r2, [r7, #4]
 800debc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800debe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d10a      	bne.n	800deda <xTaskCreateStatic+0x2a>
	__asm volatile
 800dec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dec8:	f383 8811 	msr	BASEPRI, r3
 800decc:	f3bf 8f6f 	isb	sy
 800ded0:	f3bf 8f4f 	dsb	sy
 800ded4:	623b      	str	r3, [r7, #32]
}
 800ded6:	bf00      	nop
 800ded8:	e7fe      	b.n	800ded8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800deda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d10a      	bne.n	800def6 <xTaskCreateStatic+0x46>
	__asm volatile
 800dee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dee4:	f383 8811 	msr	BASEPRI, r3
 800dee8:	f3bf 8f6f 	isb	sy
 800deec:	f3bf 8f4f 	dsb	sy
 800def0:	61fb      	str	r3, [r7, #28]
}
 800def2:	bf00      	nop
 800def4:	e7fe      	b.n	800def4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800def6:	235c      	movs	r3, #92	; 0x5c
 800def8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800defa:	693b      	ldr	r3, [r7, #16]
 800defc:	2b5c      	cmp	r3, #92	; 0x5c
 800defe:	d00a      	beq.n	800df16 <xTaskCreateStatic+0x66>
	__asm volatile
 800df00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df04:	f383 8811 	msr	BASEPRI, r3
 800df08:	f3bf 8f6f 	isb	sy
 800df0c:	f3bf 8f4f 	dsb	sy
 800df10:	61bb      	str	r3, [r7, #24]
}
 800df12:	bf00      	nop
 800df14:	e7fe      	b.n	800df14 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800df16:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800df18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d01e      	beq.n	800df5c <xTaskCreateStatic+0xac>
 800df1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df20:	2b00      	cmp	r3, #0
 800df22:	d01b      	beq.n	800df5c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800df24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df26:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800df28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800df2c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800df2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df30:	2202      	movs	r2, #2
 800df32:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800df36:	2300      	movs	r3, #0
 800df38:	9303      	str	r3, [sp, #12]
 800df3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df3c:	9302      	str	r3, [sp, #8]
 800df3e:	f107 0314 	add.w	r3, r7, #20
 800df42:	9301      	str	r3, [sp, #4]
 800df44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df46:	9300      	str	r3, [sp, #0]
 800df48:	683b      	ldr	r3, [r7, #0]
 800df4a:	687a      	ldr	r2, [r7, #4]
 800df4c:	68b9      	ldr	r1, [r7, #8]
 800df4e:	68f8      	ldr	r0, [r7, #12]
 800df50:	f000 f850 	bl	800dff4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800df54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800df56:	f000 f8dd 	bl	800e114 <prvAddNewTaskToReadyList>
 800df5a:	e001      	b.n	800df60 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800df5c:	2300      	movs	r3, #0
 800df5e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800df60:	697b      	ldr	r3, [r7, #20]
	}
 800df62:	4618      	mov	r0, r3
 800df64:	3728      	adds	r7, #40	; 0x28
 800df66:	46bd      	mov	sp, r7
 800df68:	bd80      	pop	{r7, pc}

0800df6a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800df6a:	b580      	push	{r7, lr}
 800df6c:	b08c      	sub	sp, #48	; 0x30
 800df6e:	af04      	add	r7, sp, #16
 800df70:	60f8      	str	r0, [r7, #12]
 800df72:	60b9      	str	r1, [r7, #8]
 800df74:	603b      	str	r3, [r7, #0]
 800df76:	4613      	mov	r3, r2
 800df78:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800df7a:	88fb      	ldrh	r3, [r7, #6]
 800df7c:	009b      	lsls	r3, r3, #2
 800df7e:	4618      	mov	r0, r3
 800df80:	f001 ff8a 	bl	800fe98 <pvPortMalloc>
 800df84:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800df86:	697b      	ldr	r3, [r7, #20]
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d00e      	beq.n	800dfaa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800df8c:	205c      	movs	r0, #92	; 0x5c
 800df8e:	f001 ff83 	bl	800fe98 <pvPortMalloc>
 800df92:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800df94:	69fb      	ldr	r3, [r7, #28]
 800df96:	2b00      	cmp	r3, #0
 800df98:	d003      	beq.n	800dfa2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800df9a:	69fb      	ldr	r3, [r7, #28]
 800df9c:	697a      	ldr	r2, [r7, #20]
 800df9e:	631a      	str	r2, [r3, #48]	; 0x30
 800dfa0:	e005      	b.n	800dfae <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800dfa2:	6978      	ldr	r0, [r7, #20]
 800dfa4:	f002 f844 	bl	8010030 <vPortFree>
 800dfa8:	e001      	b.n	800dfae <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800dfaa:	2300      	movs	r3, #0
 800dfac:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800dfae:	69fb      	ldr	r3, [r7, #28]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d017      	beq.n	800dfe4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800dfb4:	69fb      	ldr	r3, [r7, #28]
 800dfb6:	2200      	movs	r2, #0
 800dfb8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800dfbc:	88fa      	ldrh	r2, [r7, #6]
 800dfbe:	2300      	movs	r3, #0
 800dfc0:	9303      	str	r3, [sp, #12]
 800dfc2:	69fb      	ldr	r3, [r7, #28]
 800dfc4:	9302      	str	r3, [sp, #8]
 800dfc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfc8:	9301      	str	r3, [sp, #4]
 800dfca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfcc:	9300      	str	r3, [sp, #0]
 800dfce:	683b      	ldr	r3, [r7, #0]
 800dfd0:	68b9      	ldr	r1, [r7, #8]
 800dfd2:	68f8      	ldr	r0, [r7, #12]
 800dfd4:	f000 f80e 	bl	800dff4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dfd8:	69f8      	ldr	r0, [r7, #28]
 800dfda:	f000 f89b 	bl	800e114 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800dfde:	2301      	movs	r3, #1
 800dfe0:	61bb      	str	r3, [r7, #24]
 800dfe2:	e002      	b.n	800dfea <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800dfe4:	f04f 33ff 	mov.w	r3, #4294967295
 800dfe8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800dfea:	69bb      	ldr	r3, [r7, #24]
	}
 800dfec:	4618      	mov	r0, r3
 800dfee:	3720      	adds	r7, #32
 800dff0:	46bd      	mov	sp, r7
 800dff2:	bd80      	pop	{r7, pc}

0800dff4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800dff4:	b580      	push	{r7, lr}
 800dff6:	b088      	sub	sp, #32
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	60f8      	str	r0, [r7, #12]
 800dffc:	60b9      	str	r1, [r7, #8]
 800dffe:	607a      	str	r2, [r7, #4]
 800e000:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e004:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	009b      	lsls	r3, r3, #2
 800e00a:	461a      	mov	r2, r3
 800e00c:	21a5      	movs	r1, #165	; 0xa5
 800e00e:	f00e fb8b 	bl	801c728 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e014:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e01c:	3b01      	subs	r3, #1
 800e01e:	009b      	lsls	r3, r3, #2
 800e020:	4413      	add	r3, r2
 800e022:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e024:	69bb      	ldr	r3, [r7, #24]
 800e026:	f023 0307 	bic.w	r3, r3, #7
 800e02a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e02c:	69bb      	ldr	r3, [r7, #24]
 800e02e:	f003 0307 	and.w	r3, r3, #7
 800e032:	2b00      	cmp	r3, #0
 800e034:	d00a      	beq.n	800e04c <prvInitialiseNewTask+0x58>
	__asm volatile
 800e036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e03a:	f383 8811 	msr	BASEPRI, r3
 800e03e:	f3bf 8f6f 	isb	sy
 800e042:	f3bf 8f4f 	dsb	sy
 800e046:	617b      	str	r3, [r7, #20]
}
 800e048:	bf00      	nop
 800e04a:	e7fe      	b.n	800e04a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e04c:	68bb      	ldr	r3, [r7, #8]
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d01f      	beq.n	800e092 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e052:	2300      	movs	r3, #0
 800e054:	61fb      	str	r3, [r7, #28]
 800e056:	e012      	b.n	800e07e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e058:	68ba      	ldr	r2, [r7, #8]
 800e05a:	69fb      	ldr	r3, [r7, #28]
 800e05c:	4413      	add	r3, r2
 800e05e:	7819      	ldrb	r1, [r3, #0]
 800e060:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e062:	69fb      	ldr	r3, [r7, #28]
 800e064:	4413      	add	r3, r2
 800e066:	3334      	adds	r3, #52	; 0x34
 800e068:	460a      	mov	r2, r1
 800e06a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e06c:	68ba      	ldr	r2, [r7, #8]
 800e06e:	69fb      	ldr	r3, [r7, #28]
 800e070:	4413      	add	r3, r2
 800e072:	781b      	ldrb	r3, [r3, #0]
 800e074:	2b00      	cmp	r3, #0
 800e076:	d006      	beq.n	800e086 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e078:	69fb      	ldr	r3, [r7, #28]
 800e07a:	3301      	adds	r3, #1
 800e07c:	61fb      	str	r3, [r7, #28]
 800e07e:	69fb      	ldr	r3, [r7, #28]
 800e080:	2b0f      	cmp	r3, #15
 800e082:	d9e9      	bls.n	800e058 <prvInitialiseNewTask+0x64>
 800e084:	e000      	b.n	800e088 <prvInitialiseNewTask+0x94>
			{
				break;
 800e086:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e08a:	2200      	movs	r2, #0
 800e08c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e090:	e003      	b.n	800e09a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e094:	2200      	movs	r2, #0
 800e096:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e09a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e09c:	2b37      	cmp	r3, #55	; 0x37
 800e09e:	d901      	bls.n	800e0a4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e0a0:	2337      	movs	r3, #55	; 0x37
 800e0a2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e0a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e0a8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e0aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e0ae:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800e0b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0b2:	2200      	movs	r2, #0
 800e0b4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e0b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0b8:	3304      	adds	r3, #4
 800e0ba:	4618      	mov	r0, r3
 800e0bc:	f7fe fda0 	bl	800cc00 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e0c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0c2:	3318      	adds	r3, #24
 800e0c4:	4618      	mov	r0, r3
 800e0c6:	f7fe fd9b 	bl	800cc00 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e0ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e0ce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e0d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0d2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e0d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0d8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e0da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e0de:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e0e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0e2:	2200      	movs	r2, #0
 800e0e4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e0e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0e8:	2200      	movs	r2, #0
 800e0ea:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e0ee:	683a      	ldr	r2, [r7, #0]
 800e0f0:	68f9      	ldr	r1, [r7, #12]
 800e0f2:	69b8      	ldr	r0, [r7, #24]
 800e0f4:	f001 fc80 	bl	800f9f8 <pxPortInitialiseStack>
 800e0f8:	4602      	mov	r2, r0
 800e0fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0fc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e0fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e100:	2b00      	cmp	r3, #0
 800e102:	d002      	beq.n	800e10a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e106:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e108:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e10a:	bf00      	nop
 800e10c:	3720      	adds	r7, #32
 800e10e:	46bd      	mov	sp, r7
 800e110:	bd80      	pop	{r7, pc}
	...

0800e114 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e114:	b580      	push	{r7, lr}
 800e116:	b082      	sub	sp, #8
 800e118:	af00      	add	r7, sp, #0
 800e11a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e11c:	f001 fd9a 	bl	800fc54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e120:	4b2d      	ldr	r3, [pc, #180]	; (800e1d8 <prvAddNewTaskToReadyList+0xc4>)
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	3301      	adds	r3, #1
 800e126:	4a2c      	ldr	r2, [pc, #176]	; (800e1d8 <prvAddNewTaskToReadyList+0xc4>)
 800e128:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e12a:	4b2c      	ldr	r3, [pc, #176]	; (800e1dc <prvAddNewTaskToReadyList+0xc8>)
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d109      	bne.n	800e146 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e132:	4a2a      	ldr	r2, [pc, #168]	; (800e1dc <prvAddNewTaskToReadyList+0xc8>)
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e138:	4b27      	ldr	r3, [pc, #156]	; (800e1d8 <prvAddNewTaskToReadyList+0xc4>)
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	2b01      	cmp	r3, #1
 800e13e:	d110      	bne.n	800e162 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e140:	f000 fc28 	bl	800e994 <prvInitialiseTaskLists>
 800e144:	e00d      	b.n	800e162 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e146:	4b26      	ldr	r3, [pc, #152]	; (800e1e0 <prvAddNewTaskToReadyList+0xcc>)
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d109      	bne.n	800e162 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e14e:	4b23      	ldr	r3, [pc, #140]	; (800e1dc <prvAddNewTaskToReadyList+0xc8>)
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e158:	429a      	cmp	r2, r3
 800e15a:	d802      	bhi.n	800e162 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e15c:	4a1f      	ldr	r2, [pc, #124]	; (800e1dc <prvAddNewTaskToReadyList+0xc8>)
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e162:	4b20      	ldr	r3, [pc, #128]	; (800e1e4 <prvAddNewTaskToReadyList+0xd0>)
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	3301      	adds	r3, #1
 800e168:	4a1e      	ldr	r2, [pc, #120]	; (800e1e4 <prvAddNewTaskToReadyList+0xd0>)
 800e16a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e16c:	4b1d      	ldr	r3, [pc, #116]	; (800e1e4 <prvAddNewTaskToReadyList+0xd0>)
 800e16e:	681a      	ldr	r2, [r3, #0]
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e178:	4b1b      	ldr	r3, [pc, #108]	; (800e1e8 <prvAddNewTaskToReadyList+0xd4>)
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	429a      	cmp	r2, r3
 800e17e:	d903      	bls.n	800e188 <prvAddNewTaskToReadyList+0x74>
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e184:	4a18      	ldr	r2, [pc, #96]	; (800e1e8 <prvAddNewTaskToReadyList+0xd4>)
 800e186:	6013      	str	r3, [r2, #0]
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e18c:	4613      	mov	r3, r2
 800e18e:	009b      	lsls	r3, r3, #2
 800e190:	4413      	add	r3, r2
 800e192:	009b      	lsls	r3, r3, #2
 800e194:	4a15      	ldr	r2, [pc, #84]	; (800e1ec <prvAddNewTaskToReadyList+0xd8>)
 800e196:	441a      	add	r2, r3
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	3304      	adds	r3, #4
 800e19c:	4619      	mov	r1, r3
 800e19e:	4610      	mov	r0, r2
 800e1a0:	f7fe fd3b 	bl	800cc1a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e1a4:	f001 fd86 	bl	800fcb4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e1a8:	4b0d      	ldr	r3, [pc, #52]	; (800e1e0 <prvAddNewTaskToReadyList+0xcc>)
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d00e      	beq.n	800e1ce <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e1b0:	4b0a      	ldr	r3, [pc, #40]	; (800e1dc <prvAddNewTaskToReadyList+0xc8>)
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1ba:	429a      	cmp	r2, r3
 800e1bc:	d207      	bcs.n	800e1ce <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e1be:	4b0c      	ldr	r3, [pc, #48]	; (800e1f0 <prvAddNewTaskToReadyList+0xdc>)
 800e1c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e1c4:	601a      	str	r2, [r3, #0]
 800e1c6:	f3bf 8f4f 	dsb	sy
 800e1ca:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e1ce:	bf00      	nop
 800e1d0:	3708      	adds	r7, #8
 800e1d2:	46bd      	mov	sp, r7
 800e1d4:	bd80      	pop	{r7, pc}
 800e1d6:	bf00      	nop
 800e1d8:	200035dc 	.word	0x200035dc
 800e1dc:	20003108 	.word	0x20003108
 800e1e0:	200035e8 	.word	0x200035e8
 800e1e4:	200035f8 	.word	0x200035f8
 800e1e8:	200035e4 	.word	0x200035e4
 800e1ec:	2000310c 	.word	0x2000310c
 800e1f0:	e000ed04 	.word	0xe000ed04

0800e1f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e1f4:	b580      	push	{r7, lr}
 800e1f6:	b084      	sub	sp, #16
 800e1f8:	af00      	add	r7, sp, #0
 800e1fa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e1fc:	2300      	movs	r3, #0
 800e1fe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	2b00      	cmp	r3, #0
 800e204:	d017      	beq.n	800e236 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e206:	4b13      	ldr	r3, [pc, #76]	; (800e254 <vTaskDelay+0x60>)
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d00a      	beq.n	800e224 <vTaskDelay+0x30>
	__asm volatile
 800e20e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e212:	f383 8811 	msr	BASEPRI, r3
 800e216:	f3bf 8f6f 	isb	sy
 800e21a:	f3bf 8f4f 	dsb	sy
 800e21e:	60bb      	str	r3, [r7, #8]
}
 800e220:	bf00      	nop
 800e222:	e7fe      	b.n	800e222 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e224:	f000 f880 	bl	800e328 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e228:	2100      	movs	r1, #0
 800e22a:	6878      	ldr	r0, [r7, #4]
 800e22c:	f000 ffe6 	bl	800f1fc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e230:	f000 f888 	bl	800e344 <xTaskResumeAll>
 800e234:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d107      	bne.n	800e24c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800e23c:	4b06      	ldr	r3, [pc, #24]	; (800e258 <vTaskDelay+0x64>)
 800e23e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e242:	601a      	str	r2, [r3, #0]
 800e244:	f3bf 8f4f 	dsb	sy
 800e248:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e24c:	bf00      	nop
 800e24e:	3710      	adds	r7, #16
 800e250:	46bd      	mov	sp, r7
 800e252:	bd80      	pop	{r7, pc}
 800e254:	20003604 	.word	0x20003604
 800e258:	e000ed04 	.word	0xe000ed04

0800e25c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e25c:	b580      	push	{r7, lr}
 800e25e:	b08a      	sub	sp, #40	; 0x28
 800e260:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e262:	2300      	movs	r3, #0
 800e264:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e266:	2300      	movs	r3, #0
 800e268:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e26a:	463a      	mov	r2, r7
 800e26c:	1d39      	adds	r1, r7, #4
 800e26e:	f107 0308 	add.w	r3, r7, #8
 800e272:	4618      	mov	r0, r3
 800e274:	f7fe fc70 	bl	800cb58 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e278:	6839      	ldr	r1, [r7, #0]
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	68ba      	ldr	r2, [r7, #8]
 800e27e:	9202      	str	r2, [sp, #8]
 800e280:	9301      	str	r3, [sp, #4]
 800e282:	2300      	movs	r3, #0
 800e284:	9300      	str	r3, [sp, #0]
 800e286:	2300      	movs	r3, #0
 800e288:	460a      	mov	r2, r1
 800e28a:	4921      	ldr	r1, [pc, #132]	; (800e310 <vTaskStartScheduler+0xb4>)
 800e28c:	4821      	ldr	r0, [pc, #132]	; (800e314 <vTaskStartScheduler+0xb8>)
 800e28e:	f7ff fe0f 	bl	800deb0 <xTaskCreateStatic>
 800e292:	4603      	mov	r3, r0
 800e294:	4a20      	ldr	r2, [pc, #128]	; (800e318 <vTaskStartScheduler+0xbc>)
 800e296:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e298:	4b1f      	ldr	r3, [pc, #124]	; (800e318 <vTaskStartScheduler+0xbc>)
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d002      	beq.n	800e2a6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e2a0:	2301      	movs	r3, #1
 800e2a2:	617b      	str	r3, [r7, #20]
 800e2a4:	e001      	b.n	800e2aa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e2a6:	2300      	movs	r3, #0
 800e2a8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e2aa:	697b      	ldr	r3, [r7, #20]
 800e2ac:	2b01      	cmp	r3, #1
 800e2ae:	d102      	bne.n	800e2b6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e2b0:	f000 fff8 	bl	800f2a4 <xTimerCreateTimerTask>
 800e2b4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e2b6:	697b      	ldr	r3, [r7, #20]
 800e2b8:	2b01      	cmp	r3, #1
 800e2ba:	d116      	bne.n	800e2ea <vTaskStartScheduler+0x8e>
	__asm volatile
 800e2bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2c0:	f383 8811 	msr	BASEPRI, r3
 800e2c4:	f3bf 8f6f 	isb	sy
 800e2c8:	f3bf 8f4f 	dsb	sy
 800e2cc:	613b      	str	r3, [r7, #16]
}
 800e2ce:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e2d0:	4b12      	ldr	r3, [pc, #72]	; (800e31c <vTaskStartScheduler+0xc0>)
 800e2d2:	f04f 32ff 	mov.w	r2, #4294967295
 800e2d6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e2d8:	4b11      	ldr	r3, [pc, #68]	; (800e320 <vTaskStartScheduler+0xc4>)
 800e2da:	2201      	movs	r2, #1
 800e2dc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e2de:	4b11      	ldr	r3, [pc, #68]	; (800e324 <vTaskStartScheduler+0xc8>)
 800e2e0:	2200      	movs	r2, #0
 800e2e2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e2e4:	f001 fc14 	bl	800fb10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e2e8:	e00e      	b.n	800e308 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e2ea:	697b      	ldr	r3, [r7, #20]
 800e2ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2f0:	d10a      	bne.n	800e308 <vTaskStartScheduler+0xac>
	__asm volatile
 800e2f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2f6:	f383 8811 	msr	BASEPRI, r3
 800e2fa:	f3bf 8f6f 	isb	sy
 800e2fe:	f3bf 8f4f 	dsb	sy
 800e302:	60fb      	str	r3, [r7, #12]
}
 800e304:	bf00      	nop
 800e306:	e7fe      	b.n	800e306 <vTaskStartScheduler+0xaa>
}
 800e308:	bf00      	nop
 800e30a:	3718      	adds	r7, #24
 800e30c:	46bd      	mov	sp, r7
 800e30e:	bd80      	pop	{r7, pc}
 800e310:	0801f748 	.word	0x0801f748
 800e314:	0800e965 	.word	0x0800e965
 800e318:	20003600 	.word	0x20003600
 800e31c:	200035fc 	.word	0x200035fc
 800e320:	200035e8 	.word	0x200035e8
 800e324:	200035e0 	.word	0x200035e0

0800e328 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e328:	b480      	push	{r7}
 800e32a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e32c:	4b04      	ldr	r3, [pc, #16]	; (800e340 <vTaskSuspendAll+0x18>)
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	3301      	adds	r3, #1
 800e332:	4a03      	ldr	r2, [pc, #12]	; (800e340 <vTaskSuspendAll+0x18>)
 800e334:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e336:	bf00      	nop
 800e338:	46bd      	mov	sp, r7
 800e33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e33e:	4770      	bx	lr
 800e340:	20003604 	.word	0x20003604

0800e344 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e344:	b580      	push	{r7, lr}
 800e346:	b084      	sub	sp, #16
 800e348:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e34a:	2300      	movs	r3, #0
 800e34c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e34e:	2300      	movs	r3, #0
 800e350:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e352:	4b42      	ldr	r3, [pc, #264]	; (800e45c <xTaskResumeAll+0x118>)
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	2b00      	cmp	r3, #0
 800e358:	d10a      	bne.n	800e370 <xTaskResumeAll+0x2c>
	__asm volatile
 800e35a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e35e:	f383 8811 	msr	BASEPRI, r3
 800e362:	f3bf 8f6f 	isb	sy
 800e366:	f3bf 8f4f 	dsb	sy
 800e36a:	603b      	str	r3, [r7, #0]
}
 800e36c:	bf00      	nop
 800e36e:	e7fe      	b.n	800e36e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e370:	f001 fc70 	bl	800fc54 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e374:	4b39      	ldr	r3, [pc, #228]	; (800e45c <xTaskResumeAll+0x118>)
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	3b01      	subs	r3, #1
 800e37a:	4a38      	ldr	r2, [pc, #224]	; (800e45c <xTaskResumeAll+0x118>)
 800e37c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e37e:	4b37      	ldr	r3, [pc, #220]	; (800e45c <xTaskResumeAll+0x118>)
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	2b00      	cmp	r3, #0
 800e384:	d162      	bne.n	800e44c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e386:	4b36      	ldr	r3, [pc, #216]	; (800e460 <xTaskResumeAll+0x11c>)
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d05e      	beq.n	800e44c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e38e:	e02f      	b.n	800e3f0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e390:	4b34      	ldr	r3, [pc, #208]	; (800e464 <xTaskResumeAll+0x120>)
 800e392:	68db      	ldr	r3, [r3, #12]
 800e394:	68db      	ldr	r3, [r3, #12]
 800e396:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	3318      	adds	r3, #24
 800e39c:	4618      	mov	r0, r3
 800e39e:	f7fe fc99 	bl	800ccd4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	3304      	adds	r3, #4
 800e3a6:	4618      	mov	r0, r3
 800e3a8:	f7fe fc94 	bl	800ccd4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3b0:	4b2d      	ldr	r3, [pc, #180]	; (800e468 <xTaskResumeAll+0x124>)
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	429a      	cmp	r2, r3
 800e3b6:	d903      	bls.n	800e3c0 <xTaskResumeAll+0x7c>
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3bc:	4a2a      	ldr	r2, [pc, #168]	; (800e468 <xTaskResumeAll+0x124>)
 800e3be:	6013      	str	r3, [r2, #0]
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3c4:	4613      	mov	r3, r2
 800e3c6:	009b      	lsls	r3, r3, #2
 800e3c8:	4413      	add	r3, r2
 800e3ca:	009b      	lsls	r3, r3, #2
 800e3cc:	4a27      	ldr	r2, [pc, #156]	; (800e46c <xTaskResumeAll+0x128>)
 800e3ce:	441a      	add	r2, r3
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	3304      	adds	r3, #4
 800e3d4:	4619      	mov	r1, r3
 800e3d6:	4610      	mov	r0, r2
 800e3d8:	f7fe fc1f 	bl	800cc1a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3e0:	4b23      	ldr	r3, [pc, #140]	; (800e470 <xTaskResumeAll+0x12c>)
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3e6:	429a      	cmp	r2, r3
 800e3e8:	d302      	bcc.n	800e3f0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800e3ea:	4b22      	ldr	r3, [pc, #136]	; (800e474 <xTaskResumeAll+0x130>)
 800e3ec:	2201      	movs	r2, #1
 800e3ee:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e3f0:	4b1c      	ldr	r3, [pc, #112]	; (800e464 <xTaskResumeAll+0x120>)
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d1cb      	bne.n	800e390 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d001      	beq.n	800e402 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e3fe:	f000 fb67 	bl	800ead0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e402:	4b1d      	ldr	r3, [pc, #116]	; (800e478 <xTaskResumeAll+0x134>)
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d010      	beq.n	800e430 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e40e:	f000 f859 	bl	800e4c4 <xTaskIncrementTick>
 800e412:	4603      	mov	r3, r0
 800e414:	2b00      	cmp	r3, #0
 800e416:	d002      	beq.n	800e41e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800e418:	4b16      	ldr	r3, [pc, #88]	; (800e474 <xTaskResumeAll+0x130>)
 800e41a:	2201      	movs	r2, #1
 800e41c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	3b01      	subs	r3, #1
 800e422:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	2b00      	cmp	r3, #0
 800e428:	d1f1      	bne.n	800e40e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800e42a:	4b13      	ldr	r3, [pc, #76]	; (800e478 <xTaskResumeAll+0x134>)
 800e42c:	2200      	movs	r2, #0
 800e42e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e430:	4b10      	ldr	r3, [pc, #64]	; (800e474 <xTaskResumeAll+0x130>)
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	2b00      	cmp	r3, #0
 800e436:	d009      	beq.n	800e44c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e438:	2301      	movs	r3, #1
 800e43a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e43c:	4b0f      	ldr	r3, [pc, #60]	; (800e47c <xTaskResumeAll+0x138>)
 800e43e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e442:	601a      	str	r2, [r3, #0]
 800e444:	f3bf 8f4f 	dsb	sy
 800e448:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e44c:	f001 fc32 	bl	800fcb4 <vPortExitCritical>

	return xAlreadyYielded;
 800e450:	68bb      	ldr	r3, [r7, #8]
}
 800e452:	4618      	mov	r0, r3
 800e454:	3710      	adds	r7, #16
 800e456:	46bd      	mov	sp, r7
 800e458:	bd80      	pop	{r7, pc}
 800e45a:	bf00      	nop
 800e45c:	20003604 	.word	0x20003604
 800e460:	200035dc 	.word	0x200035dc
 800e464:	2000359c 	.word	0x2000359c
 800e468:	200035e4 	.word	0x200035e4
 800e46c:	2000310c 	.word	0x2000310c
 800e470:	20003108 	.word	0x20003108
 800e474:	200035f0 	.word	0x200035f0
 800e478:	200035ec 	.word	0x200035ec
 800e47c:	e000ed04 	.word	0xe000ed04

0800e480 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e480:	b480      	push	{r7}
 800e482:	b083      	sub	sp, #12
 800e484:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e486:	4b05      	ldr	r3, [pc, #20]	; (800e49c <xTaskGetTickCount+0x1c>)
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e48c:	687b      	ldr	r3, [r7, #4]
}
 800e48e:	4618      	mov	r0, r3
 800e490:	370c      	adds	r7, #12
 800e492:	46bd      	mov	sp, r7
 800e494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e498:	4770      	bx	lr
 800e49a:	bf00      	nop
 800e49c:	200035e0 	.word	0x200035e0

0800e4a0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800e4a0:	b580      	push	{r7, lr}
 800e4a2:	b082      	sub	sp, #8
 800e4a4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e4a6:	f001 fcb7 	bl	800fe18 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800e4aa:	2300      	movs	r3, #0
 800e4ac:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800e4ae:	4b04      	ldr	r3, [pc, #16]	; (800e4c0 <xTaskGetTickCountFromISR+0x20>)
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e4b4:	683b      	ldr	r3, [r7, #0]
}
 800e4b6:	4618      	mov	r0, r3
 800e4b8:	3708      	adds	r7, #8
 800e4ba:	46bd      	mov	sp, r7
 800e4bc:	bd80      	pop	{r7, pc}
 800e4be:	bf00      	nop
 800e4c0:	200035e0 	.word	0x200035e0

0800e4c4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e4c4:	b580      	push	{r7, lr}
 800e4c6:	b086      	sub	sp, #24
 800e4c8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e4ca:	2300      	movs	r3, #0
 800e4cc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e4ce:	4b4f      	ldr	r3, [pc, #316]	; (800e60c <xTaskIncrementTick+0x148>)
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	f040 808f 	bne.w	800e5f6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e4d8:	4b4d      	ldr	r3, [pc, #308]	; (800e610 <xTaskIncrementTick+0x14c>)
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	3301      	adds	r3, #1
 800e4de:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e4e0:	4a4b      	ldr	r2, [pc, #300]	; (800e610 <xTaskIncrementTick+0x14c>)
 800e4e2:	693b      	ldr	r3, [r7, #16]
 800e4e4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e4e6:	693b      	ldr	r3, [r7, #16]
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d120      	bne.n	800e52e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800e4ec:	4b49      	ldr	r3, [pc, #292]	; (800e614 <xTaskIncrementTick+0x150>)
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d00a      	beq.n	800e50c <xTaskIncrementTick+0x48>
	__asm volatile
 800e4f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4fa:	f383 8811 	msr	BASEPRI, r3
 800e4fe:	f3bf 8f6f 	isb	sy
 800e502:	f3bf 8f4f 	dsb	sy
 800e506:	603b      	str	r3, [r7, #0]
}
 800e508:	bf00      	nop
 800e50a:	e7fe      	b.n	800e50a <xTaskIncrementTick+0x46>
 800e50c:	4b41      	ldr	r3, [pc, #260]	; (800e614 <xTaskIncrementTick+0x150>)
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	60fb      	str	r3, [r7, #12]
 800e512:	4b41      	ldr	r3, [pc, #260]	; (800e618 <xTaskIncrementTick+0x154>)
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	4a3f      	ldr	r2, [pc, #252]	; (800e614 <xTaskIncrementTick+0x150>)
 800e518:	6013      	str	r3, [r2, #0]
 800e51a:	4a3f      	ldr	r2, [pc, #252]	; (800e618 <xTaskIncrementTick+0x154>)
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	6013      	str	r3, [r2, #0]
 800e520:	4b3e      	ldr	r3, [pc, #248]	; (800e61c <xTaskIncrementTick+0x158>)
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	3301      	adds	r3, #1
 800e526:	4a3d      	ldr	r2, [pc, #244]	; (800e61c <xTaskIncrementTick+0x158>)
 800e528:	6013      	str	r3, [r2, #0]
 800e52a:	f000 fad1 	bl	800ead0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e52e:	4b3c      	ldr	r3, [pc, #240]	; (800e620 <xTaskIncrementTick+0x15c>)
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	693a      	ldr	r2, [r7, #16]
 800e534:	429a      	cmp	r2, r3
 800e536:	d349      	bcc.n	800e5cc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e538:	4b36      	ldr	r3, [pc, #216]	; (800e614 <xTaskIncrementTick+0x150>)
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d104      	bne.n	800e54c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e542:	4b37      	ldr	r3, [pc, #220]	; (800e620 <xTaskIncrementTick+0x15c>)
 800e544:	f04f 32ff 	mov.w	r2, #4294967295
 800e548:	601a      	str	r2, [r3, #0]
					break;
 800e54a:	e03f      	b.n	800e5cc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e54c:	4b31      	ldr	r3, [pc, #196]	; (800e614 <xTaskIncrementTick+0x150>)
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	68db      	ldr	r3, [r3, #12]
 800e552:	68db      	ldr	r3, [r3, #12]
 800e554:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e556:	68bb      	ldr	r3, [r7, #8]
 800e558:	685b      	ldr	r3, [r3, #4]
 800e55a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e55c:	693a      	ldr	r2, [r7, #16]
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	429a      	cmp	r2, r3
 800e562:	d203      	bcs.n	800e56c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e564:	4a2e      	ldr	r2, [pc, #184]	; (800e620 <xTaskIncrementTick+0x15c>)
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e56a:	e02f      	b.n	800e5cc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e56c:	68bb      	ldr	r3, [r7, #8]
 800e56e:	3304      	adds	r3, #4
 800e570:	4618      	mov	r0, r3
 800e572:	f7fe fbaf 	bl	800ccd4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e576:	68bb      	ldr	r3, [r7, #8]
 800e578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d004      	beq.n	800e588 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e57e:	68bb      	ldr	r3, [r7, #8]
 800e580:	3318      	adds	r3, #24
 800e582:	4618      	mov	r0, r3
 800e584:	f7fe fba6 	bl	800ccd4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e588:	68bb      	ldr	r3, [r7, #8]
 800e58a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e58c:	4b25      	ldr	r3, [pc, #148]	; (800e624 <xTaskIncrementTick+0x160>)
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	429a      	cmp	r2, r3
 800e592:	d903      	bls.n	800e59c <xTaskIncrementTick+0xd8>
 800e594:	68bb      	ldr	r3, [r7, #8]
 800e596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e598:	4a22      	ldr	r2, [pc, #136]	; (800e624 <xTaskIncrementTick+0x160>)
 800e59a:	6013      	str	r3, [r2, #0]
 800e59c:	68bb      	ldr	r3, [r7, #8]
 800e59e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5a0:	4613      	mov	r3, r2
 800e5a2:	009b      	lsls	r3, r3, #2
 800e5a4:	4413      	add	r3, r2
 800e5a6:	009b      	lsls	r3, r3, #2
 800e5a8:	4a1f      	ldr	r2, [pc, #124]	; (800e628 <xTaskIncrementTick+0x164>)
 800e5aa:	441a      	add	r2, r3
 800e5ac:	68bb      	ldr	r3, [r7, #8]
 800e5ae:	3304      	adds	r3, #4
 800e5b0:	4619      	mov	r1, r3
 800e5b2:	4610      	mov	r0, r2
 800e5b4:	f7fe fb31 	bl	800cc1a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e5b8:	68bb      	ldr	r3, [r7, #8]
 800e5ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5bc:	4b1b      	ldr	r3, [pc, #108]	; (800e62c <xTaskIncrementTick+0x168>)
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5c2:	429a      	cmp	r2, r3
 800e5c4:	d3b8      	bcc.n	800e538 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800e5c6:	2301      	movs	r3, #1
 800e5c8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e5ca:	e7b5      	b.n	800e538 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e5cc:	4b17      	ldr	r3, [pc, #92]	; (800e62c <xTaskIncrementTick+0x168>)
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5d2:	4915      	ldr	r1, [pc, #84]	; (800e628 <xTaskIncrementTick+0x164>)
 800e5d4:	4613      	mov	r3, r2
 800e5d6:	009b      	lsls	r3, r3, #2
 800e5d8:	4413      	add	r3, r2
 800e5da:	009b      	lsls	r3, r3, #2
 800e5dc:	440b      	add	r3, r1
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	2b01      	cmp	r3, #1
 800e5e2:	d901      	bls.n	800e5e8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800e5e4:	2301      	movs	r3, #1
 800e5e6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e5e8:	4b11      	ldr	r3, [pc, #68]	; (800e630 <xTaskIncrementTick+0x16c>)
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d007      	beq.n	800e600 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800e5f0:	2301      	movs	r3, #1
 800e5f2:	617b      	str	r3, [r7, #20]
 800e5f4:	e004      	b.n	800e600 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e5f6:	4b0f      	ldr	r3, [pc, #60]	; (800e634 <xTaskIncrementTick+0x170>)
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	3301      	adds	r3, #1
 800e5fc:	4a0d      	ldr	r2, [pc, #52]	; (800e634 <xTaskIncrementTick+0x170>)
 800e5fe:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e600:	697b      	ldr	r3, [r7, #20]
}
 800e602:	4618      	mov	r0, r3
 800e604:	3718      	adds	r7, #24
 800e606:	46bd      	mov	sp, r7
 800e608:	bd80      	pop	{r7, pc}
 800e60a:	bf00      	nop
 800e60c:	20003604 	.word	0x20003604
 800e610:	200035e0 	.word	0x200035e0
 800e614:	20003594 	.word	0x20003594
 800e618:	20003598 	.word	0x20003598
 800e61c:	200035f4 	.word	0x200035f4
 800e620:	200035fc 	.word	0x200035fc
 800e624:	200035e4 	.word	0x200035e4
 800e628:	2000310c 	.word	0x2000310c
 800e62c:	20003108 	.word	0x20003108
 800e630:	200035f0 	.word	0x200035f0
 800e634:	200035ec 	.word	0x200035ec

0800e638 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e638:	b480      	push	{r7}
 800e63a:	b085      	sub	sp, #20
 800e63c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e63e:	4b28      	ldr	r3, [pc, #160]	; (800e6e0 <vTaskSwitchContext+0xa8>)
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	2b00      	cmp	r3, #0
 800e644:	d003      	beq.n	800e64e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e646:	4b27      	ldr	r3, [pc, #156]	; (800e6e4 <vTaskSwitchContext+0xac>)
 800e648:	2201      	movs	r2, #1
 800e64a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e64c:	e041      	b.n	800e6d2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800e64e:	4b25      	ldr	r3, [pc, #148]	; (800e6e4 <vTaskSwitchContext+0xac>)
 800e650:	2200      	movs	r2, #0
 800e652:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e654:	4b24      	ldr	r3, [pc, #144]	; (800e6e8 <vTaskSwitchContext+0xb0>)
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	60fb      	str	r3, [r7, #12]
 800e65a:	e010      	b.n	800e67e <vTaskSwitchContext+0x46>
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d10a      	bne.n	800e678 <vTaskSwitchContext+0x40>
	__asm volatile
 800e662:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e666:	f383 8811 	msr	BASEPRI, r3
 800e66a:	f3bf 8f6f 	isb	sy
 800e66e:	f3bf 8f4f 	dsb	sy
 800e672:	607b      	str	r3, [r7, #4]
}
 800e674:	bf00      	nop
 800e676:	e7fe      	b.n	800e676 <vTaskSwitchContext+0x3e>
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	3b01      	subs	r3, #1
 800e67c:	60fb      	str	r3, [r7, #12]
 800e67e:	491b      	ldr	r1, [pc, #108]	; (800e6ec <vTaskSwitchContext+0xb4>)
 800e680:	68fa      	ldr	r2, [r7, #12]
 800e682:	4613      	mov	r3, r2
 800e684:	009b      	lsls	r3, r3, #2
 800e686:	4413      	add	r3, r2
 800e688:	009b      	lsls	r3, r3, #2
 800e68a:	440b      	add	r3, r1
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d0e4      	beq.n	800e65c <vTaskSwitchContext+0x24>
 800e692:	68fa      	ldr	r2, [r7, #12]
 800e694:	4613      	mov	r3, r2
 800e696:	009b      	lsls	r3, r3, #2
 800e698:	4413      	add	r3, r2
 800e69a:	009b      	lsls	r3, r3, #2
 800e69c:	4a13      	ldr	r2, [pc, #76]	; (800e6ec <vTaskSwitchContext+0xb4>)
 800e69e:	4413      	add	r3, r2
 800e6a0:	60bb      	str	r3, [r7, #8]
 800e6a2:	68bb      	ldr	r3, [r7, #8]
 800e6a4:	685b      	ldr	r3, [r3, #4]
 800e6a6:	685a      	ldr	r2, [r3, #4]
 800e6a8:	68bb      	ldr	r3, [r7, #8]
 800e6aa:	605a      	str	r2, [r3, #4]
 800e6ac:	68bb      	ldr	r3, [r7, #8]
 800e6ae:	685a      	ldr	r2, [r3, #4]
 800e6b0:	68bb      	ldr	r3, [r7, #8]
 800e6b2:	3308      	adds	r3, #8
 800e6b4:	429a      	cmp	r2, r3
 800e6b6:	d104      	bne.n	800e6c2 <vTaskSwitchContext+0x8a>
 800e6b8:	68bb      	ldr	r3, [r7, #8]
 800e6ba:	685b      	ldr	r3, [r3, #4]
 800e6bc:	685a      	ldr	r2, [r3, #4]
 800e6be:	68bb      	ldr	r3, [r7, #8]
 800e6c0:	605a      	str	r2, [r3, #4]
 800e6c2:	68bb      	ldr	r3, [r7, #8]
 800e6c4:	685b      	ldr	r3, [r3, #4]
 800e6c6:	68db      	ldr	r3, [r3, #12]
 800e6c8:	4a09      	ldr	r2, [pc, #36]	; (800e6f0 <vTaskSwitchContext+0xb8>)
 800e6ca:	6013      	str	r3, [r2, #0]
 800e6cc:	4a06      	ldr	r2, [pc, #24]	; (800e6e8 <vTaskSwitchContext+0xb0>)
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	6013      	str	r3, [r2, #0]
}
 800e6d2:	bf00      	nop
 800e6d4:	3714      	adds	r7, #20
 800e6d6:	46bd      	mov	sp, r7
 800e6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6dc:	4770      	bx	lr
 800e6de:	bf00      	nop
 800e6e0:	20003604 	.word	0x20003604
 800e6e4:	200035f0 	.word	0x200035f0
 800e6e8:	200035e4 	.word	0x200035e4
 800e6ec:	2000310c 	.word	0x2000310c
 800e6f0:	20003108 	.word	0x20003108

0800e6f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e6f4:	b580      	push	{r7, lr}
 800e6f6:	b084      	sub	sp, #16
 800e6f8:	af00      	add	r7, sp, #0
 800e6fa:	6078      	str	r0, [r7, #4]
 800e6fc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	2b00      	cmp	r3, #0
 800e702:	d10a      	bne.n	800e71a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800e704:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e708:	f383 8811 	msr	BASEPRI, r3
 800e70c:	f3bf 8f6f 	isb	sy
 800e710:	f3bf 8f4f 	dsb	sy
 800e714:	60fb      	str	r3, [r7, #12]
}
 800e716:	bf00      	nop
 800e718:	e7fe      	b.n	800e718 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e71a:	4b07      	ldr	r3, [pc, #28]	; (800e738 <vTaskPlaceOnEventList+0x44>)
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	3318      	adds	r3, #24
 800e720:	4619      	mov	r1, r3
 800e722:	6878      	ldr	r0, [r7, #4]
 800e724:	f7fe fa9d 	bl	800cc62 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e728:	2101      	movs	r1, #1
 800e72a:	6838      	ldr	r0, [r7, #0]
 800e72c:	f000 fd66 	bl	800f1fc <prvAddCurrentTaskToDelayedList>
}
 800e730:	bf00      	nop
 800e732:	3710      	adds	r7, #16
 800e734:	46bd      	mov	sp, r7
 800e736:	bd80      	pop	{r7, pc}
 800e738:	20003108 	.word	0x20003108

0800e73c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e73c:	b580      	push	{r7, lr}
 800e73e:	b086      	sub	sp, #24
 800e740:	af00      	add	r7, sp, #0
 800e742:	60f8      	str	r0, [r7, #12]
 800e744:	60b9      	str	r1, [r7, #8]
 800e746:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d10a      	bne.n	800e764 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800e74e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e752:	f383 8811 	msr	BASEPRI, r3
 800e756:	f3bf 8f6f 	isb	sy
 800e75a:	f3bf 8f4f 	dsb	sy
 800e75e:	617b      	str	r3, [r7, #20]
}
 800e760:	bf00      	nop
 800e762:	e7fe      	b.n	800e762 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e764:	4b0a      	ldr	r3, [pc, #40]	; (800e790 <vTaskPlaceOnEventListRestricted+0x54>)
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	3318      	adds	r3, #24
 800e76a:	4619      	mov	r1, r3
 800e76c:	68f8      	ldr	r0, [r7, #12]
 800e76e:	f7fe fa54 	bl	800cc1a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	2b00      	cmp	r3, #0
 800e776:	d002      	beq.n	800e77e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800e778:	f04f 33ff 	mov.w	r3, #4294967295
 800e77c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e77e:	6879      	ldr	r1, [r7, #4]
 800e780:	68b8      	ldr	r0, [r7, #8]
 800e782:	f000 fd3b 	bl	800f1fc <prvAddCurrentTaskToDelayedList>
	}
 800e786:	bf00      	nop
 800e788:	3718      	adds	r7, #24
 800e78a:	46bd      	mov	sp, r7
 800e78c:	bd80      	pop	{r7, pc}
 800e78e:	bf00      	nop
 800e790:	20003108 	.word	0x20003108

0800e794 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e794:	b580      	push	{r7, lr}
 800e796:	b086      	sub	sp, #24
 800e798:	af00      	add	r7, sp, #0
 800e79a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	68db      	ldr	r3, [r3, #12]
 800e7a0:	68db      	ldr	r3, [r3, #12]
 800e7a2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e7a4:	693b      	ldr	r3, [r7, #16]
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d10a      	bne.n	800e7c0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800e7aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7ae:	f383 8811 	msr	BASEPRI, r3
 800e7b2:	f3bf 8f6f 	isb	sy
 800e7b6:	f3bf 8f4f 	dsb	sy
 800e7ba:	60fb      	str	r3, [r7, #12]
}
 800e7bc:	bf00      	nop
 800e7be:	e7fe      	b.n	800e7be <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e7c0:	693b      	ldr	r3, [r7, #16]
 800e7c2:	3318      	adds	r3, #24
 800e7c4:	4618      	mov	r0, r3
 800e7c6:	f7fe fa85 	bl	800ccd4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e7ca:	4b1e      	ldr	r3, [pc, #120]	; (800e844 <xTaskRemoveFromEventList+0xb0>)
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d11d      	bne.n	800e80e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e7d2:	693b      	ldr	r3, [r7, #16]
 800e7d4:	3304      	adds	r3, #4
 800e7d6:	4618      	mov	r0, r3
 800e7d8:	f7fe fa7c 	bl	800ccd4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e7dc:	693b      	ldr	r3, [r7, #16]
 800e7de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7e0:	4b19      	ldr	r3, [pc, #100]	; (800e848 <xTaskRemoveFromEventList+0xb4>)
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	429a      	cmp	r2, r3
 800e7e6:	d903      	bls.n	800e7f0 <xTaskRemoveFromEventList+0x5c>
 800e7e8:	693b      	ldr	r3, [r7, #16]
 800e7ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7ec:	4a16      	ldr	r2, [pc, #88]	; (800e848 <xTaskRemoveFromEventList+0xb4>)
 800e7ee:	6013      	str	r3, [r2, #0]
 800e7f0:	693b      	ldr	r3, [r7, #16]
 800e7f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7f4:	4613      	mov	r3, r2
 800e7f6:	009b      	lsls	r3, r3, #2
 800e7f8:	4413      	add	r3, r2
 800e7fa:	009b      	lsls	r3, r3, #2
 800e7fc:	4a13      	ldr	r2, [pc, #76]	; (800e84c <xTaskRemoveFromEventList+0xb8>)
 800e7fe:	441a      	add	r2, r3
 800e800:	693b      	ldr	r3, [r7, #16]
 800e802:	3304      	adds	r3, #4
 800e804:	4619      	mov	r1, r3
 800e806:	4610      	mov	r0, r2
 800e808:	f7fe fa07 	bl	800cc1a <vListInsertEnd>
 800e80c:	e005      	b.n	800e81a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e80e:	693b      	ldr	r3, [r7, #16]
 800e810:	3318      	adds	r3, #24
 800e812:	4619      	mov	r1, r3
 800e814:	480e      	ldr	r0, [pc, #56]	; (800e850 <xTaskRemoveFromEventList+0xbc>)
 800e816:	f7fe fa00 	bl	800cc1a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e81a:	693b      	ldr	r3, [r7, #16]
 800e81c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e81e:	4b0d      	ldr	r3, [pc, #52]	; (800e854 <xTaskRemoveFromEventList+0xc0>)
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e824:	429a      	cmp	r2, r3
 800e826:	d905      	bls.n	800e834 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e828:	2301      	movs	r3, #1
 800e82a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e82c:	4b0a      	ldr	r3, [pc, #40]	; (800e858 <xTaskRemoveFromEventList+0xc4>)
 800e82e:	2201      	movs	r2, #1
 800e830:	601a      	str	r2, [r3, #0]
 800e832:	e001      	b.n	800e838 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800e834:	2300      	movs	r3, #0
 800e836:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e838:	697b      	ldr	r3, [r7, #20]
}
 800e83a:	4618      	mov	r0, r3
 800e83c:	3718      	adds	r7, #24
 800e83e:	46bd      	mov	sp, r7
 800e840:	bd80      	pop	{r7, pc}
 800e842:	bf00      	nop
 800e844:	20003604 	.word	0x20003604
 800e848:	200035e4 	.word	0x200035e4
 800e84c:	2000310c 	.word	0x2000310c
 800e850:	2000359c 	.word	0x2000359c
 800e854:	20003108 	.word	0x20003108
 800e858:	200035f0 	.word	0x200035f0

0800e85c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e85c:	b480      	push	{r7}
 800e85e:	b083      	sub	sp, #12
 800e860:	af00      	add	r7, sp, #0
 800e862:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e864:	4b06      	ldr	r3, [pc, #24]	; (800e880 <vTaskInternalSetTimeOutState+0x24>)
 800e866:	681a      	ldr	r2, [r3, #0]
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e86c:	4b05      	ldr	r3, [pc, #20]	; (800e884 <vTaskInternalSetTimeOutState+0x28>)
 800e86e:	681a      	ldr	r2, [r3, #0]
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	605a      	str	r2, [r3, #4]
}
 800e874:	bf00      	nop
 800e876:	370c      	adds	r7, #12
 800e878:	46bd      	mov	sp, r7
 800e87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e87e:	4770      	bx	lr
 800e880:	200035f4 	.word	0x200035f4
 800e884:	200035e0 	.word	0x200035e0

0800e888 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e888:	b580      	push	{r7, lr}
 800e88a:	b088      	sub	sp, #32
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	6078      	str	r0, [r7, #4]
 800e890:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	2b00      	cmp	r3, #0
 800e896:	d10a      	bne.n	800e8ae <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e89c:	f383 8811 	msr	BASEPRI, r3
 800e8a0:	f3bf 8f6f 	isb	sy
 800e8a4:	f3bf 8f4f 	dsb	sy
 800e8a8:	613b      	str	r3, [r7, #16]
}
 800e8aa:	bf00      	nop
 800e8ac:	e7fe      	b.n	800e8ac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e8ae:	683b      	ldr	r3, [r7, #0]
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d10a      	bne.n	800e8ca <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e8b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8b8:	f383 8811 	msr	BASEPRI, r3
 800e8bc:	f3bf 8f6f 	isb	sy
 800e8c0:	f3bf 8f4f 	dsb	sy
 800e8c4:	60fb      	str	r3, [r7, #12]
}
 800e8c6:	bf00      	nop
 800e8c8:	e7fe      	b.n	800e8c8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e8ca:	f001 f9c3 	bl	800fc54 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e8ce:	4b1d      	ldr	r3, [pc, #116]	; (800e944 <xTaskCheckForTimeOut+0xbc>)
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	685b      	ldr	r3, [r3, #4]
 800e8d8:	69ba      	ldr	r2, [r7, #24]
 800e8da:	1ad3      	subs	r3, r2, r3
 800e8dc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e8de:	683b      	ldr	r3, [r7, #0]
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8e6:	d102      	bne.n	800e8ee <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e8e8:	2300      	movs	r3, #0
 800e8ea:	61fb      	str	r3, [r7, #28]
 800e8ec:	e023      	b.n	800e936 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	681a      	ldr	r2, [r3, #0]
 800e8f2:	4b15      	ldr	r3, [pc, #84]	; (800e948 <xTaskCheckForTimeOut+0xc0>)
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	429a      	cmp	r2, r3
 800e8f8:	d007      	beq.n	800e90a <xTaskCheckForTimeOut+0x82>
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	685b      	ldr	r3, [r3, #4]
 800e8fe:	69ba      	ldr	r2, [r7, #24]
 800e900:	429a      	cmp	r2, r3
 800e902:	d302      	bcc.n	800e90a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e904:	2301      	movs	r3, #1
 800e906:	61fb      	str	r3, [r7, #28]
 800e908:	e015      	b.n	800e936 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e90a:	683b      	ldr	r3, [r7, #0]
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	697a      	ldr	r2, [r7, #20]
 800e910:	429a      	cmp	r2, r3
 800e912:	d20b      	bcs.n	800e92c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e914:	683b      	ldr	r3, [r7, #0]
 800e916:	681a      	ldr	r2, [r3, #0]
 800e918:	697b      	ldr	r3, [r7, #20]
 800e91a:	1ad2      	subs	r2, r2, r3
 800e91c:	683b      	ldr	r3, [r7, #0]
 800e91e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e920:	6878      	ldr	r0, [r7, #4]
 800e922:	f7ff ff9b 	bl	800e85c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e926:	2300      	movs	r3, #0
 800e928:	61fb      	str	r3, [r7, #28]
 800e92a:	e004      	b.n	800e936 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800e92c:	683b      	ldr	r3, [r7, #0]
 800e92e:	2200      	movs	r2, #0
 800e930:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e932:	2301      	movs	r3, #1
 800e934:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e936:	f001 f9bd 	bl	800fcb4 <vPortExitCritical>

	return xReturn;
 800e93a:	69fb      	ldr	r3, [r7, #28]
}
 800e93c:	4618      	mov	r0, r3
 800e93e:	3720      	adds	r7, #32
 800e940:	46bd      	mov	sp, r7
 800e942:	bd80      	pop	{r7, pc}
 800e944:	200035e0 	.word	0x200035e0
 800e948:	200035f4 	.word	0x200035f4

0800e94c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e94c:	b480      	push	{r7}
 800e94e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e950:	4b03      	ldr	r3, [pc, #12]	; (800e960 <vTaskMissedYield+0x14>)
 800e952:	2201      	movs	r2, #1
 800e954:	601a      	str	r2, [r3, #0]
}
 800e956:	bf00      	nop
 800e958:	46bd      	mov	sp, r7
 800e95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e95e:	4770      	bx	lr
 800e960:	200035f0 	.word	0x200035f0

0800e964 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e964:	b580      	push	{r7, lr}
 800e966:	b082      	sub	sp, #8
 800e968:	af00      	add	r7, sp, #0
 800e96a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e96c:	f000 f852 	bl	800ea14 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e970:	4b06      	ldr	r3, [pc, #24]	; (800e98c <prvIdleTask+0x28>)
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	2b01      	cmp	r3, #1
 800e976:	d9f9      	bls.n	800e96c <prvIdleTask+0x8>
			{
				taskYIELD();
 800e978:	4b05      	ldr	r3, [pc, #20]	; (800e990 <prvIdleTask+0x2c>)
 800e97a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e97e:	601a      	str	r2, [r3, #0]
 800e980:	f3bf 8f4f 	dsb	sy
 800e984:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e988:	e7f0      	b.n	800e96c <prvIdleTask+0x8>
 800e98a:	bf00      	nop
 800e98c:	2000310c 	.word	0x2000310c
 800e990:	e000ed04 	.word	0xe000ed04

0800e994 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e994:	b580      	push	{r7, lr}
 800e996:	b082      	sub	sp, #8
 800e998:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e99a:	2300      	movs	r3, #0
 800e99c:	607b      	str	r3, [r7, #4]
 800e99e:	e00c      	b.n	800e9ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e9a0:	687a      	ldr	r2, [r7, #4]
 800e9a2:	4613      	mov	r3, r2
 800e9a4:	009b      	lsls	r3, r3, #2
 800e9a6:	4413      	add	r3, r2
 800e9a8:	009b      	lsls	r3, r3, #2
 800e9aa:	4a12      	ldr	r2, [pc, #72]	; (800e9f4 <prvInitialiseTaskLists+0x60>)
 800e9ac:	4413      	add	r3, r2
 800e9ae:	4618      	mov	r0, r3
 800e9b0:	f7fe f906 	bl	800cbc0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	3301      	adds	r3, #1
 800e9b8:	607b      	str	r3, [r7, #4]
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	2b37      	cmp	r3, #55	; 0x37
 800e9be:	d9ef      	bls.n	800e9a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e9c0:	480d      	ldr	r0, [pc, #52]	; (800e9f8 <prvInitialiseTaskLists+0x64>)
 800e9c2:	f7fe f8fd 	bl	800cbc0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e9c6:	480d      	ldr	r0, [pc, #52]	; (800e9fc <prvInitialiseTaskLists+0x68>)
 800e9c8:	f7fe f8fa 	bl	800cbc0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e9cc:	480c      	ldr	r0, [pc, #48]	; (800ea00 <prvInitialiseTaskLists+0x6c>)
 800e9ce:	f7fe f8f7 	bl	800cbc0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e9d2:	480c      	ldr	r0, [pc, #48]	; (800ea04 <prvInitialiseTaskLists+0x70>)
 800e9d4:	f7fe f8f4 	bl	800cbc0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e9d8:	480b      	ldr	r0, [pc, #44]	; (800ea08 <prvInitialiseTaskLists+0x74>)
 800e9da:	f7fe f8f1 	bl	800cbc0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e9de:	4b0b      	ldr	r3, [pc, #44]	; (800ea0c <prvInitialiseTaskLists+0x78>)
 800e9e0:	4a05      	ldr	r2, [pc, #20]	; (800e9f8 <prvInitialiseTaskLists+0x64>)
 800e9e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e9e4:	4b0a      	ldr	r3, [pc, #40]	; (800ea10 <prvInitialiseTaskLists+0x7c>)
 800e9e6:	4a05      	ldr	r2, [pc, #20]	; (800e9fc <prvInitialiseTaskLists+0x68>)
 800e9e8:	601a      	str	r2, [r3, #0]
}
 800e9ea:	bf00      	nop
 800e9ec:	3708      	adds	r7, #8
 800e9ee:	46bd      	mov	sp, r7
 800e9f0:	bd80      	pop	{r7, pc}
 800e9f2:	bf00      	nop
 800e9f4:	2000310c 	.word	0x2000310c
 800e9f8:	2000356c 	.word	0x2000356c
 800e9fc:	20003580 	.word	0x20003580
 800ea00:	2000359c 	.word	0x2000359c
 800ea04:	200035b0 	.word	0x200035b0
 800ea08:	200035c8 	.word	0x200035c8
 800ea0c:	20003594 	.word	0x20003594
 800ea10:	20003598 	.word	0x20003598

0800ea14 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ea14:	b580      	push	{r7, lr}
 800ea16:	b082      	sub	sp, #8
 800ea18:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ea1a:	e019      	b.n	800ea50 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ea1c:	f001 f91a 	bl	800fc54 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ea20:	4b10      	ldr	r3, [pc, #64]	; (800ea64 <prvCheckTasksWaitingTermination+0x50>)
 800ea22:	68db      	ldr	r3, [r3, #12]
 800ea24:	68db      	ldr	r3, [r3, #12]
 800ea26:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	3304      	adds	r3, #4
 800ea2c:	4618      	mov	r0, r3
 800ea2e:	f7fe f951 	bl	800ccd4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ea32:	4b0d      	ldr	r3, [pc, #52]	; (800ea68 <prvCheckTasksWaitingTermination+0x54>)
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	3b01      	subs	r3, #1
 800ea38:	4a0b      	ldr	r2, [pc, #44]	; (800ea68 <prvCheckTasksWaitingTermination+0x54>)
 800ea3a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ea3c:	4b0b      	ldr	r3, [pc, #44]	; (800ea6c <prvCheckTasksWaitingTermination+0x58>)
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	3b01      	subs	r3, #1
 800ea42:	4a0a      	ldr	r2, [pc, #40]	; (800ea6c <prvCheckTasksWaitingTermination+0x58>)
 800ea44:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ea46:	f001 f935 	bl	800fcb4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ea4a:	6878      	ldr	r0, [r7, #4]
 800ea4c:	f000 f810 	bl	800ea70 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ea50:	4b06      	ldr	r3, [pc, #24]	; (800ea6c <prvCheckTasksWaitingTermination+0x58>)
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d1e1      	bne.n	800ea1c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ea58:	bf00      	nop
 800ea5a:	bf00      	nop
 800ea5c:	3708      	adds	r7, #8
 800ea5e:	46bd      	mov	sp, r7
 800ea60:	bd80      	pop	{r7, pc}
 800ea62:	bf00      	nop
 800ea64:	200035b0 	.word	0x200035b0
 800ea68:	200035dc 	.word	0x200035dc
 800ea6c:	200035c4 	.word	0x200035c4

0800ea70 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ea70:	b580      	push	{r7, lr}
 800ea72:	b084      	sub	sp, #16
 800ea74:	af00      	add	r7, sp, #0
 800ea76:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d108      	bne.n	800ea94 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea86:	4618      	mov	r0, r3
 800ea88:	f001 fad2 	bl	8010030 <vPortFree>
				vPortFree( pxTCB );
 800ea8c:	6878      	ldr	r0, [r7, #4]
 800ea8e:	f001 facf 	bl	8010030 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ea92:	e018      	b.n	800eac6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ea9a:	2b01      	cmp	r3, #1
 800ea9c:	d103      	bne.n	800eaa6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800ea9e:	6878      	ldr	r0, [r7, #4]
 800eaa0:	f001 fac6 	bl	8010030 <vPortFree>
	}
 800eaa4:	e00f      	b.n	800eac6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800eaac:	2b02      	cmp	r3, #2
 800eaae:	d00a      	beq.n	800eac6 <prvDeleteTCB+0x56>
	__asm volatile
 800eab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eab4:	f383 8811 	msr	BASEPRI, r3
 800eab8:	f3bf 8f6f 	isb	sy
 800eabc:	f3bf 8f4f 	dsb	sy
 800eac0:	60fb      	str	r3, [r7, #12]
}
 800eac2:	bf00      	nop
 800eac4:	e7fe      	b.n	800eac4 <prvDeleteTCB+0x54>
	}
 800eac6:	bf00      	nop
 800eac8:	3710      	adds	r7, #16
 800eaca:	46bd      	mov	sp, r7
 800eacc:	bd80      	pop	{r7, pc}
	...

0800ead0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ead0:	b480      	push	{r7}
 800ead2:	b083      	sub	sp, #12
 800ead4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ead6:	4b0c      	ldr	r3, [pc, #48]	; (800eb08 <prvResetNextTaskUnblockTime+0x38>)
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d104      	bne.n	800eaea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800eae0:	4b0a      	ldr	r3, [pc, #40]	; (800eb0c <prvResetNextTaskUnblockTime+0x3c>)
 800eae2:	f04f 32ff 	mov.w	r2, #4294967295
 800eae6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800eae8:	e008      	b.n	800eafc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eaea:	4b07      	ldr	r3, [pc, #28]	; (800eb08 <prvResetNextTaskUnblockTime+0x38>)
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	68db      	ldr	r3, [r3, #12]
 800eaf0:	68db      	ldr	r3, [r3, #12]
 800eaf2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	685b      	ldr	r3, [r3, #4]
 800eaf8:	4a04      	ldr	r2, [pc, #16]	; (800eb0c <prvResetNextTaskUnblockTime+0x3c>)
 800eafa:	6013      	str	r3, [r2, #0]
}
 800eafc:	bf00      	nop
 800eafe:	370c      	adds	r7, #12
 800eb00:	46bd      	mov	sp, r7
 800eb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb06:	4770      	bx	lr
 800eb08:	20003594 	.word	0x20003594
 800eb0c:	200035fc 	.word	0x200035fc

0800eb10 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800eb10:	b480      	push	{r7}
 800eb12:	b083      	sub	sp, #12
 800eb14:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800eb16:	4b05      	ldr	r3, [pc, #20]	; (800eb2c <xTaskGetCurrentTaskHandle+0x1c>)
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800eb1c:	687b      	ldr	r3, [r7, #4]
	}
 800eb1e:	4618      	mov	r0, r3
 800eb20:	370c      	adds	r7, #12
 800eb22:	46bd      	mov	sp, r7
 800eb24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb28:	4770      	bx	lr
 800eb2a:	bf00      	nop
 800eb2c:	20003108 	.word	0x20003108

0800eb30 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800eb30:	b480      	push	{r7}
 800eb32:	b083      	sub	sp, #12
 800eb34:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800eb36:	4b0b      	ldr	r3, [pc, #44]	; (800eb64 <xTaskGetSchedulerState+0x34>)
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d102      	bne.n	800eb44 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800eb3e:	2301      	movs	r3, #1
 800eb40:	607b      	str	r3, [r7, #4]
 800eb42:	e008      	b.n	800eb56 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eb44:	4b08      	ldr	r3, [pc, #32]	; (800eb68 <xTaskGetSchedulerState+0x38>)
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d102      	bne.n	800eb52 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800eb4c:	2302      	movs	r3, #2
 800eb4e:	607b      	str	r3, [r7, #4]
 800eb50:	e001      	b.n	800eb56 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800eb52:	2300      	movs	r3, #0
 800eb54:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800eb56:	687b      	ldr	r3, [r7, #4]
	}
 800eb58:	4618      	mov	r0, r3
 800eb5a:	370c      	adds	r7, #12
 800eb5c:	46bd      	mov	sp, r7
 800eb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb62:	4770      	bx	lr
 800eb64:	200035e8 	.word	0x200035e8
 800eb68:	20003604 	.word	0x20003604

0800eb6c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800eb6c:	b580      	push	{r7, lr}
 800eb6e:	b084      	sub	sp, #16
 800eb70:	af00      	add	r7, sp, #0
 800eb72:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800eb78:	2300      	movs	r3, #0
 800eb7a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d051      	beq.n	800ec26 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800eb82:	68bb      	ldr	r3, [r7, #8]
 800eb84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb86:	4b2a      	ldr	r3, [pc, #168]	; (800ec30 <xTaskPriorityInherit+0xc4>)
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb8c:	429a      	cmp	r2, r3
 800eb8e:	d241      	bcs.n	800ec14 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800eb90:	68bb      	ldr	r3, [r7, #8]
 800eb92:	699b      	ldr	r3, [r3, #24]
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	db06      	blt.n	800eba6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eb98:	4b25      	ldr	r3, [pc, #148]	; (800ec30 <xTaskPriorityInherit+0xc4>)
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb9e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800eba2:	68bb      	ldr	r3, [r7, #8]
 800eba4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800eba6:	68bb      	ldr	r3, [r7, #8]
 800eba8:	6959      	ldr	r1, [r3, #20]
 800ebaa:	68bb      	ldr	r3, [r7, #8]
 800ebac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ebae:	4613      	mov	r3, r2
 800ebb0:	009b      	lsls	r3, r3, #2
 800ebb2:	4413      	add	r3, r2
 800ebb4:	009b      	lsls	r3, r3, #2
 800ebb6:	4a1f      	ldr	r2, [pc, #124]	; (800ec34 <xTaskPriorityInherit+0xc8>)
 800ebb8:	4413      	add	r3, r2
 800ebba:	4299      	cmp	r1, r3
 800ebbc:	d122      	bne.n	800ec04 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ebbe:	68bb      	ldr	r3, [r7, #8]
 800ebc0:	3304      	adds	r3, #4
 800ebc2:	4618      	mov	r0, r3
 800ebc4:	f7fe f886 	bl	800ccd4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ebc8:	4b19      	ldr	r3, [pc, #100]	; (800ec30 <xTaskPriorityInherit+0xc4>)
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ebce:	68bb      	ldr	r3, [r7, #8]
 800ebd0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ebd2:	68bb      	ldr	r3, [r7, #8]
 800ebd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ebd6:	4b18      	ldr	r3, [pc, #96]	; (800ec38 <xTaskPriorityInherit+0xcc>)
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	429a      	cmp	r2, r3
 800ebdc:	d903      	bls.n	800ebe6 <xTaskPriorityInherit+0x7a>
 800ebde:	68bb      	ldr	r3, [r7, #8]
 800ebe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebe2:	4a15      	ldr	r2, [pc, #84]	; (800ec38 <xTaskPriorityInherit+0xcc>)
 800ebe4:	6013      	str	r3, [r2, #0]
 800ebe6:	68bb      	ldr	r3, [r7, #8]
 800ebe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ebea:	4613      	mov	r3, r2
 800ebec:	009b      	lsls	r3, r3, #2
 800ebee:	4413      	add	r3, r2
 800ebf0:	009b      	lsls	r3, r3, #2
 800ebf2:	4a10      	ldr	r2, [pc, #64]	; (800ec34 <xTaskPriorityInherit+0xc8>)
 800ebf4:	441a      	add	r2, r3
 800ebf6:	68bb      	ldr	r3, [r7, #8]
 800ebf8:	3304      	adds	r3, #4
 800ebfa:	4619      	mov	r1, r3
 800ebfc:	4610      	mov	r0, r2
 800ebfe:	f7fe f80c 	bl	800cc1a <vListInsertEnd>
 800ec02:	e004      	b.n	800ec0e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ec04:	4b0a      	ldr	r3, [pc, #40]	; (800ec30 <xTaskPriorityInherit+0xc4>)
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec0a:	68bb      	ldr	r3, [r7, #8]
 800ec0c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ec0e:	2301      	movs	r3, #1
 800ec10:	60fb      	str	r3, [r7, #12]
 800ec12:	e008      	b.n	800ec26 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ec14:	68bb      	ldr	r3, [r7, #8]
 800ec16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ec18:	4b05      	ldr	r3, [pc, #20]	; (800ec30 <xTaskPriorityInherit+0xc4>)
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec1e:	429a      	cmp	r2, r3
 800ec20:	d201      	bcs.n	800ec26 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ec22:	2301      	movs	r3, #1
 800ec24:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ec26:	68fb      	ldr	r3, [r7, #12]
	}
 800ec28:	4618      	mov	r0, r3
 800ec2a:	3710      	adds	r7, #16
 800ec2c:	46bd      	mov	sp, r7
 800ec2e:	bd80      	pop	{r7, pc}
 800ec30:	20003108 	.word	0x20003108
 800ec34:	2000310c 	.word	0x2000310c
 800ec38:	200035e4 	.word	0x200035e4

0800ec3c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ec3c:	b580      	push	{r7, lr}
 800ec3e:	b086      	sub	sp, #24
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ec48:	2300      	movs	r3, #0
 800ec4a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d056      	beq.n	800ed00 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ec52:	4b2e      	ldr	r3, [pc, #184]	; (800ed0c <xTaskPriorityDisinherit+0xd0>)
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	693a      	ldr	r2, [r7, #16]
 800ec58:	429a      	cmp	r2, r3
 800ec5a:	d00a      	beq.n	800ec72 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ec5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec60:	f383 8811 	msr	BASEPRI, r3
 800ec64:	f3bf 8f6f 	isb	sy
 800ec68:	f3bf 8f4f 	dsb	sy
 800ec6c:	60fb      	str	r3, [r7, #12]
}
 800ec6e:	bf00      	nop
 800ec70:	e7fe      	b.n	800ec70 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ec72:	693b      	ldr	r3, [r7, #16]
 800ec74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d10a      	bne.n	800ec90 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ec7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec7e:	f383 8811 	msr	BASEPRI, r3
 800ec82:	f3bf 8f6f 	isb	sy
 800ec86:	f3bf 8f4f 	dsb	sy
 800ec8a:	60bb      	str	r3, [r7, #8]
}
 800ec8c:	bf00      	nop
 800ec8e:	e7fe      	b.n	800ec8e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800ec90:	693b      	ldr	r3, [r7, #16]
 800ec92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ec94:	1e5a      	subs	r2, r3, #1
 800ec96:	693b      	ldr	r3, [r7, #16]
 800ec98:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ec9a:	693b      	ldr	r3, [r7, #16]
 800ec9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec9e:	693b      	ldr	r3, [r7, #16]
 800eca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800eca2:	429a      	cmp	r2, r3
 800eca4:	d02c      	beq.n	800ed00 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800eca6:	693b      	ldr	r3, [r7, #16]
 800eca8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d128      	bne.n	800ed00 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ecae:	693b      	ldr	r3, [r7, #16]
 800ecb0:	3304      	adds	r3, #4
 800ecb2:	4618      	mov	r0, r3
 800ecb4:	f7fe f80e 	bl	800ccd4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ecb8:	693b      	ldr	r3, [r7, #16]
 800ecba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ecbc:	693b      	ldr	r3, [r7, #16]
 800ecbe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ecc0:	693b      	ldr	r3, [r7, #16]
 800ecc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecc4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ecc8:	693b      	ldr	r3, [r7, #16]
 800ecca:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800eccc:	693b      	ldr	r3, [r7, #16]
 800ecce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecd0:	4b0f      	ldr	r3, [pc, #60]	; (800ed10 <xTaskPriorityDisinherit+0xd4>)
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	429a      	cmp	r2, r3
 800ecd6:	d903      	bls.n	800ece0 <xTaskPriorityDisinherit+0xa4>
 800ecd8:	693b      	ldr	r3, [r7, #16]
 800ecda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecdc:	4a0c      	ldr	r2, [pc, #48]	; (800ed10 <xTaskPriorityDisinherit+0xd4>)
 800ecde:	6013      	str	r3, [r2, #0]
 800ece0:	693b      	ldr	r3, [r7, #16]
 800ece2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ece4:	4613      	mov	r3, r2
 800ece6:	009b      	lsls	r3, r3, #2
 800ece8:	4413      	add	r3, r2
 800ecea:	009b      	lsls	r3, r3, #2
 800ecec:	4a09      	ldr	r2, [pc, #36]	; (800ed14 <xTaskPriorityDisinherit+0xd8>)
 800ecee:	441a      	add	r2, r3
 800ecf0:	693b      	ldr	r3, [r7, #16]
 800ecf2:	3304      	adds	r3, #4
 800ecf4:	4619      	mov	r1, r3
 800ecf6:	4610      	mov	r0, r2
 800ecf8:	f7fd ff8f 	bl	800cc1a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ecfc:	2301      	movs	r3, #1
 800ecfe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ed00:	697b      	ldr	r3, [r7, #20]
	}
 800ed02:	4618      	mov	r0, r3
 800ed04:	3718      	adds	r7, #24
 800ed06:	46bd      	mov	sp, r7
 800ed08:	bd80      	pop	{r7, pc}
 800ed0a:	bf00      	nop
 800ed0c:	20003108 	.word	0x20003108
 800ed10:	200035e4 	.word	0x200035e4
 800ed14:	2000310c 	.word	0x2000310c

0800ed18 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ed18:	b580      	push	{r7, lr}
 800ed1a:	b088      	sub	sp, #32
 800ed1c:	af00      	add	r7, sp, #0
 800ed1e:	6078      	str	r0, [r7, #4]
 800ed20:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ed26:	2301      	movs	r3, #1
 800ed28:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d06a      	beq.n	800ee06 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ed30:	69bb      	ldr	r3, [r7, #24]
 800ed32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d10a      	bne.n	800ed4e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800ed38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed3c:	f383 8811 	msr	BASEPRI, r3
 800ed40:	f3bf 8f6f 	isb	sy
 800ed44:	f3bf 8f4f 	dsb	sy
 800ed48:	60fb      	str	r3, [r7, #12]
}
 800ed4a:	bf00      	nop
 800ed4c:	e7fe      	b.n	800ed4c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ed4e:	69bb      	ldr	r3, [r7, #24]
 800ed50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ed52:	683a      	ldr	r2, [r7, #0]
 800ed54:	429a      	cmp	r2, r3
 800ed56:	d902      	bls.n	800ed5e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ed58:	683b      	ldr	r3, [r7, #0]
 800ed5a:	61fb      	str	r3, [r7, #28]
 800ed5c:	e002      	b.n	800ed64 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ed5e:	69bb      	ldr	r3, [r7, #24]
 800ed60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ed62:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ed64:	69bb      	ldr	r3, [r7, #24]
 800ed66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed68:	69fa      	ldr	r2, [r7, #28]
 800ed6a:	429a      	cmp	r2, r3
 800ed6c:	d04b      	beq.n	800ee06 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ed6e:	69bb      	ldr	r3, [r7, #24]
 800ed70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ed72:	697a      	ldr	r2, [r7, #20]
 800ed74:	429a      	cmp	r2, r3
 800ed76:	d146      	bne.n	800ee06 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ed78:	4b25      	ldr	r3, [pc, #148]	; (800ee10 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	69ba      	ldr	r2, [r7, #24]
 800ed7e:	429a      	cmp	r2, r3
 800ed80:	d10a      	bne.n	800ed98 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800ed82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed86:	f383 8811 	msr	BASEPRI, r3
 800ed8a:	f3bf 8f6f 	isb	sy
 800ed8e:	f3bf 8f4f 	dsb	sy
 800ed92:	60bb      	str	r3, [r7, #8]
}
 800ed94:	bf00      	nop
 800ed96:	e7fe      	b.n	800ed96 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ed98:	69bb      	ldr	r3, [r7, #24]
 800ed9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed9c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ed9e:	69bb      	ldr	r3, [r7, #24]
 800eda0:	69fa      	ldr	r2, [r7, #28]
 800eda2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800eda4:	69bb      	ldr	r3, [r7, #24]
 800eda6:	699b      	ldr	r3, [r3, #24]
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	db04      	blt.n	800edb6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800edac:	69fb      	ldr	r3, [r7, #28]
 800edae:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800edb2:	69bb      	ldr	r3, [r7, #24]
 800edb4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800edb6:	69bb      	ldr	r3, [r7, #24]
 800edb8:	6959      	ldr	r1, [r3, #20]
 800edba:	693a      	ldr	r2, [r7, #16]
 800edbc:	4613      	mov	r3, r2
 800edbe:	009b      	lsls	r3, r3, #2
 800edc0:	4413      	add	r3, r2
 800edc2:	009b      	lsls	r3, r3, #2
 800edc4:	4a13      	ldr	r2, [pc, #76]	; (800ee14 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800edc6:	4413      	add	r3, r2
 800edc8:	4299      	cmp	r1, r3
 800edca:	d11c      	bne.n	800ee06 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800edcc:	69bb      	ldr	r3, [r7, #24]
 800edce:	3304      	adds	r3, #4
 800edd0:	4618      	mov	r0, r3
 800edd2:	f7fd ff7f 	bl	800ccd4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800edd6:	69bb      	ldr	r3, [r7, #24]
 800edd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800edda:	4b0f      	ldr	r3, [pc, #60]	; (800ee18 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	429a      	cmp	r2, r3
 800ede0:	d903      	bls.n	800edea <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800ede2:	69bb      	ldr	r3, [r7, #24]
 800ede4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ede6:	4a0c      	ldr	r2, [pc, #48]	; (800ee18 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ede8:	6013      	str	r3, [r2, #0]
 800edea:	69bb      	ldr	r3, [r7, #24]
 800edec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800edee:	4613      	mov	r3, r2
 800edf0:	009b      	lsls	r3, r3, #2
 800edf2:	4413      	add	r3, r2
 800edf4:	009b      	lsls	r3, r3, #2
 800edf6:	4a07      	ldr	r2, [pc, #28]	; (800ee14 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800edf8:	441a      	add	r2, r3
 800edfa:	69bb      	ldr	r3, [r7, #24]
 800edfc:	3304      	adds	r3, #4
 800edfe:	4619      	mov	r1, r3
 800ee00:	4610      	mov	r0, r2
 800ee02:	f7fd ff0a 	bl	800cc1a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ee06:	bf00      	nop
 800ee08:	3720      	adds	r7, #32
 800ee0a:	46bd      	mov	sp, r7
 800ee0c:	bd80      	pop	{r7, pc}
 800ee0e:	bf00      	nop
 800ee10:	20003108 	.word	0x20003108
 800ee14:	2000310c 	.word	0x2000310c
 800ee18:	200035e4 	.word	0x200035e4

0800ee1c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ee1c:	b480      	push	{r7}
 800ee1e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ee20:	4b07      	ldr	r3, [pc, #28]	; (800ee40 <pvTaskIncrementMutexHeldCount+0x24>)
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d004      	beq.n	800ee32 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ee28:	4b05      	ldr	r3, [pc, #20]	; (800ee40 <pvTaskIncrementMutexHeldCount+0x24>)
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ee2e:	3201      	adds	r2, #1
 800ee30:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800ee32:	4b03      	ldr	r3, [pc, #12]	; (800ee40 <pvTaskIncrementMutexHeldCount+0x24>)
 800ee34:	681b      	ldr	r3, [r3, #0]
	}
 800ee36:	4618      	mov	r0, r3
 800ee38:	46bd      	mov	sp, r7
 800ee3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee3e:	4770      	bx	lr
 800ee40:	20003108 	.word	0x20003108

0800ee44 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800ee44:	b580      	push	{r7, lr}
 800ee46:	b084      	sub	sp, #16
 800ee48:	af00      	add	r7, sp, #0
 800ee4a:	6078      	str	r0, [r7, #4]
 800ee4c:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800ee4e:	f000 ff01 	bl	800fc54 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800ee52:	4b1e      	ldr	r3, [pc, #120]	; (800eecc <ulTaskNotifyTake+0x88>)
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d113      	bne.n	800ee84 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800ee5c:	4b1b      	ldr	r3, [pc, #108]	; (800eecc <ulTaskNotifyTake+0x88>)
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	2201      	movs	r2, #1
 800ee62:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800ee66:	683b      	ldr	r3, [r7, #0]
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d00b      	beq.n	800ee84 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ee6c:	2101      	movs	r1, #1
 800ee6e:	6838      	ldr	r0, [r7, #0]
 800ee70:	f000 f9c4 	bl	800f1fc <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800ee74:	4b16      	ldr	r3, [pc, #88]	; (800eed0 <ulTaskNotifyTake+0x8c>)
 800ee76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ee7a:	601a      	str	r2, [r3, #0]
 800ee7c:	f3bf 8f4f 	dsb	sy
 800ee80:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800ee84:	f000 ff16 	bl	800fcb4 <vPortExitCritical>

		taskENTER_CRITICAL();
 800ee88:	f000 fee4 	bl	800fc54 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800ee8c:	4b0f      	ldr	r3, [pc, #60]	; (800eecc <ulTaskNotifyTake+0x88>)
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee92:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d00c      	beq.n	800eeb4 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d004      	beq.n	800eeaa <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800eea0:	4b0a      	ldr	r3, [pc, #40]	; (800eecc <ulTaskNotifyTake+0x88>)
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	2200      	movs	r2, #0
 800eea6:	655a      	str	r2, [r3, #84]	; 0x54
 800eea8:	e004      	b.n	800eeb4 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800eeaa:	4b08      	ldr	r3, [pc, #32]	; (800eecc <ulTaskNotifyTake+0x88>)
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	68fa      	ldr	r2, [r7, #12]
 800eeb0:	3a01      	subs	r2, #1
 800eeb2:	655a      	str	r2, [r3, #84]	; 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800eeb4:	4b05      	ldr	r3, [pc, #20]	; (800eecc <ulTaskNotifyTake+0x88>)
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	2200      	movs	r2, #0
 800eeba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800eebe:	f000 fef9 	bl	800fcb4 <vPortExitCritical>

		return ulReturn;
 800eec2:	68fb      	ldr	r3, [r7, #12]
	}
 800eec4:	4618      	mov	r0, r3
 800eec6:	3710      	adds	r7, #16
 800eec8:	46bd      	mov	sp, r7
 800eeca:	bd80      	pop	{r7, pc}
 800eecc:	20003108 	.word	0x20003108
 800eed0:	e000ed04 	.word	0xe000ed04

0800eed4 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800eed4:	b580      	push	{r7, lr}
 800eed6:	b08a      	sub	sp, #40	; 0x28
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	60f8      	str	r0, [r7, #12]
 800eedc:	60b9      	str	r1, [r7, #8]
 800eede:	603b      	str	r3, [r7, #0]
 800eee0:	4613      	mov	r3, r2
 800eee2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800eee4:	2301      	movs	r3, #1
 800eee6:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d10a      	bne.n	800ef04 <xTaskGenericNotify+0x30>
	__asm volatile
 800eeee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eef2:	f383 8811 	msr	BASEPRI, r3
 800eef6:	f3bf 8f6f 	isb	sy
 800eefa:	f3bf 8f4f 	dsb	sy
 800eefe:	61bb      	str	r3, [r7, #24]
}
 800ef00:	bf00      	nop
 800ef02:	e7fe      	b.n	800ef02 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800ef08:	f000 fea4 	bl	800fc54 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800ef0c:	683b      	ldr	r3, [r7, #0]
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d003      	beq.n	800ef1a <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800ef12:	6a3b      	ldr	r3, [r7, #32]
 800ef14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ef16:	683b      	ldr	r3, [r7, #0]
 800ef18:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800ef1a:	6a3b      	ldr	r3, [r7, #32]
 800ef1c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800ef20:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800ef22:	6a3b      	ldr	r3, [r7, #32]
 800ef24:	2202      	movs	r2, #2
 800ef26:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800ef2a:	79fb      	ldrb	r3, [r7, #7]
 800ef2c:	2b04      	cmp	r3, #4
 800ef2e:	d828      	bhi.n	800ef82 <xTaskGenericNotify+0xae>
 800ef30:	a201      	add	r2, pc, #4	; (adr r2, 800ef38 <xTaskGenericNotify+0x64>)
 800ef32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef36:	bf00      	nop
 800ef38:	0800efa3 	.word	0x0800efa3
 800ef3c:	0800ef4d 	.word	0x0800ef4d
 800ef40:	0800ef5b 	.word	0x0800ef5b
 800ef44:	0800ef67 	.word	0x0800ef67
 800ef48:	0800ef6f 	.word	0x0800ef6f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800ef4c:	6a3b      	ldr	r3, [r7, #32]
 800ef4e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ef50:	68bb      	ldr	r3, [r7, #8]
 800ef52:	431a      	orrs	r2, r3
 800ef54:	6a3b      	ldr	r3, [r7, #32]
 800ef56:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800ef58:	e026      	b.n	800efa8 <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800ef5a:	6a3b      	ldr	r3, [r7, #32]
 800ef5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef5e:	1c5a      	adds	r2, r3, #1
 800ef60:	6a3b      	ldr	r3, [r7, #32]
 800ef62:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800ef64:	e020      	b.n	800efa8 <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800ef66:	6a3b      	ldr	r3, [r7, #32]
 800ef68:	68ba      	ldr	r2, [r7, #8]
 800ef6a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800ef6c:	e01c      	b.n	800efa8 <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800ef6e:	7ffb      	ldrb	r3, [r7, #31]
 800ef70:	2b02      	cmp	r3, #2
 800ef72:	d003      	beq.n	800ef7c <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800ef74:	6a3b      	ldr	r3, [r7, #32]
 800ef76:	68ba      	ldr	r2, [r7, #8]
 800ef78:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800ef7a:	e015      	b.n	800efa8 <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 800ef7c:	2300      	movs	r3, #0
 800ef7e:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800ef80:	e012      	b.n	800efa8 <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800ef82:	6a3b      	ldr	r3, [r7, #32]
 800ef84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef8a:	d00c      	beq.n	800efa6 <xTaskGenericNotify+0xd2>
	__asm volatile
 800ef8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef90:	f383 8811 	msr	BASEPRI, r3
 800ef94:	f3bf 8f6f 	isb	sy
 800ef98:	f3bf 8f4f 	dsb	sy
 800ef9c:	617b      	str	r3, [r7, #20]
}
 800ef9e:	bf00      	nop
 800efa0:	e7fe      	b.n	800efa0 <xTaskGenericNotify+0xcc>
					break;
 800efa2:	bf00      	nop
 800efa4:	e000      	b.n	800efa8 <xTaskGenericNotify+0xd4>

					break;
 800efa6:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800efa8:	7ffb      	ldrb	r3, [r7, #31]
 800efaa:	2b01      	cmp	r3, #1
 800efac:	d13a      	bne.n	800f024 <xTaskGenericNotify+0x150>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800efae:	6a3b      	ldr	r3, [r7, #32]
 800efb0:	3304      	adds	r3, #4
 800efb2:	4618      	mov	r0, r3
 800efb4:	f7fd fe8e 	bl	800ccd4 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800efb8:	6a3b      	ldr	r3, [r7, #32]
 800efba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800efbc:	4b1d      	ldr	r3, [pc, #116]	; (800f034 <xTaskGenericNotify+0x160>)
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	429a      	cmp	r2, r3
 800efc2:	d903      	bls.n	800efcc <xTaskGenericNotify+0xf8>
 800efc4:	6a3b      	ldr	r3, [r7, #32]
 800efc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800efc8:	4a1a      	ldr	r2, [pc, #104]	; (800f034 <xTaskGenericNotify+0x160>)
 800efca:	6013      	str	r3, [r2, #0]
 800efcc:	6a3b      	ldr	r3, [r7, #32]
 800efce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800efd0:	4613      	mov	r3, r2
 800efd2:	009b      	lsls	r3, r3, #2
 800efd4:	4413      	add	r3, r2
 800efd6:	009b      	lsls	r3, r3, #2
 800efd8:	4a17      	ldr	r2, [pc, #92]	; (800f038 <xTaskGenericNotify+0x164>)
 800efda:	441a      	add	r2, r3
 800efdc:	6a3b      	ldr	r3, [r7, #32]
 800efde:	3304      	adds	r3, #4
 800efe0:	4619      	mov	r1, r3
 800efe2:	4610      	mov	r0, r2
 800efe4:	f7fd fe19 	bl	800cc1a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800efe8:	6a3b      	ldr	r3, [r7, #32]
 800efea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800efec:	2b00      	cmp	r3, #0
 800efee:	d00a      	beq.n	800f006 <xTaskGenericNotify+0x132>
	__asm volatile
 800eff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eff4:	f383 8811 	msr	BASEPRI, r3
 800eff8:	f3bf 8f6f 	isb	sy
 800effc:	f3bf 8f4f 	dsb	sy
 800f000:	613b      	str	r3, [r7, #16]
}
 800f002:	bf00      	nop
 800f004:	e7fe      	b.n	800f004 <xTaskGenericNotify+0x130>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f006:	6a3b      	ldr	r3, [r7, #32]
 800f008:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f00a:	4b0c      	ldr	r3, [pc, #48]	; (800f03c <xTaskGenericNotify+0x168>)
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f010:	429a      	cmp	r2, r3
 800f012:	d907      	bls.n	800f024 <xTaskGenericNotify+0x150>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800f014:	4b0a      	ldr	r3, [pc, #40]	; (800f040 <xTaskGenericNotify+0x16c>)
 800f016:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f01a:	601a      	str	r2, [r3, #0]
 800f01c:	f3bf 8f4f 	dsb	sy
 800f020:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800f024:	f000 fe46 	bl	800fcb4 <vPortExitCritical>

		return xReturn;
 800f028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800f02a:	4618      	mov	r0, r3
 800f02c:	3728      	adds	r7, #40	; 0x28
 800f02e:	46bd      	mov	sp, r7
 800f030:	bd80      	pop	{r7, pc}
 800f032:	bf00      	nop
 800f034:	200035e4 	.word	0x200035e4
 800f038:	2000310c 	.word	0x2000310c
 800f03c:	20003108 	.word	0x20003108
 800f040:	e000ed04 	.word	0xe000ed04

0800f044 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800f044:	b580      	push	{r7, lr}
 800f046:	b08e      	sub	sp, #56	; 0x38
 800f048:	af00      	add	r7, sp, #0
 800f04a:	60f8      	str	r0, [r7, #12]
 800f04c:	60b9      	str	r1, [r7, #8]
 800f04e:	603b      	str	r3, [r7, #0]
 800f050:	4613      	mov	r3, r2
 800f052:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800f054:	2301      	movs	r3, #1
 800f056:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d10a      	bne.n	800f074 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800f05e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f062:	f383 8811 	msr	BASEPRI, r3
 800f066:	f3bf 8f6f 	isb	sy
 800f06a:	f3bf 8f4f 	dsb	sy
 800f06e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f070:	bf00      	nop
 800f072:	e7fe      	b.n	800f072 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f074:	f000 fed0 	bl	800fe18 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800f07c:	f3ef 8211 	mrs	r2, BASEPRI
 800f080:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f084:	f383 8811 	msr	BASEPRI, r3
 800f088:	f3bf 8f6f 	isb	sy
 800f08c:	f3bf 8f4f 	dsb	sy
 800f090:	623a      	str	r2, [r7, #32]
 800f092:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800f094:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f096:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800f098:	683b      	ldr	r3, [r7, #0]
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d003      	beq.n	800f0a6 <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800f09e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f0a2:	683b      	ldr	r3, [r7, #0]
 800f0a4:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800f0a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0a8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800f0ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800f0b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0b2:	2202      	movs	r2, #2
 800f0b4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800f0b8:	79fb      	ldrb	r3, [r7, #7]
 800f0ba:	2b04      	cmp	r3, #4
 800f0bc:	d828      	bhi.n	800f110 <xTaskGenericNotifyFromISR+0xcc>
 800f0be:	a201      	add	r2, pc, #4	; (adr r2, 800f0c4 <xTaskGenericNotifyFromISR+0x80>)
 800f0c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0c4:	0800f131 	.word	0x0800f131
 800f0c8:	0800f0d9 	.word	0x0800f0d9
 800f0cc:	0800f0e7 	.word	0x0800f0e7
 800f0d0:	0800f0f3 	.word	0x0800f0f3
 800f0d4:	0800f0fb 	.word	0x0800f0fb
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800f0d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0da:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f0dc:	68bb      	ldr	r3, [r7, #8]
 800f0de:	431a      	orrs	r2, r3
 800f0e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0e2:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800f0e4:	e027      	b.n	800f136 <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800f0e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f0ea:	1c5a      	adds	r2, r3, #1
 800f0ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0ee:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800f0f0:	e021      	b.n	800f136 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800f0f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0f4:	68ba      	ldr	r2, [r7, #8]
 800f0f6:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800f0f8:	e01d      	b.n	800f136 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800f0fa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f0fe:	2b02      	cmp	r3, #2
 800f100:	d003      	beq.n	800f10a <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800f102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f104:	68ba      	ldr	r2, [r7, #8]
 800f106:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800f108:	e015      	b.n	800f136 <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 800f10a:	2300      	movs	r3, #0
 800f10c:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800f10e:	e012      	b.n	800f136 <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800f110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f114:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f118:	d00c      	beq.n	800f134 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 800f11a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f11e:	f383 8811 	msr	BASEPRI, r3
 800f122:	f3bf 8f6f 	isb	sy
 800f126:	f3bf 8f4f 	dsb	sy
 800f12a:	61bb      	str	r3, [r7, #24]
}
 800f12c:	bf00      	nop
 800f12e:	e7fe      	b.n	800f12e <xTaskGenericNotifyFromISR+0xea>
					break;
 800f130:	bf00      	nop
 800f132:	e000      	b.n	800f136 <xTaskGenericNotifyFromISR+0xf2>
					break;
 800f134:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800f136:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f13a:	2b01      	cmp	r3, #1
 800f13c:	d146      	bne.n	800f1cc <xTaskGenericNotifyFromISR+0x188>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800f13e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f142:	2b00      	cmp	r3, #0
 800f144:	d00a      	beq.n	800f15c <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 800f146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f14a:	f383 8811 	msr	BASEPRI, r3
 800f14e:	f3bf 8f6f 	isb	sy
 800f152:	f3bf 8f4f 	dsb	sy
 800f156:	617b      	str	r3, [r7, #20]
}
 800f158:	bf00      	nop
 800f15a:	e7fe      	b.n	800f15a <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f15c:	4b21      	ldr	r3, [pc, #132]	; (800f1e4 <xTaskGenericNotifyFromISR+0x1a0>)
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	2b00      	cmp	r3, #0
 800f162:	d11d      	bne.n	800f1a0 <xTaskGenericNotifyFromISR+0x15c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f166:	3304      	adds	r3, #4
 800f168:	4618      	mov	r0, r3
 800f16a:	f7fd fdb3 	bl	800ccd4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f16e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f172:	4b1d      	ldr	r3, [pc, #116]	; (800f1e8 <xTaskGenericNotifyFromISR+0x1a4>)
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	429a      	cmp	r2, r3
 800f178:	d903      	bls.n	800f182 <xTaskGenericNotifyFromISR+0x13e>
 800f17a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f17c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f17e:	4a1a      	ldr	r2, [pc, #104]	; (800f1e8 <xTaskGenericNotifyFromISR+0x1a4>)
 800f180:	6013      	str	r3, [r2, #0]
 800f182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f184:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f186:	4613      	mov	r3, r2
 800f188:	009b      	lsls	r3, r3, #2
 800f18a:	4413      	add	r3, r2
 800f18c:	009b      	lsls	r3, r3, #2
 800f18e:	4a17      	ldr	r2, [pc, #92]	; (800f1ec <xTaskGenericNotifyFromISR+0x1a8>)
 800f190:	441a      	add	r2, r3
 800f192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f194:	3304      	adds	r3, #4
 800f196:	4619      	mov	r1, r3
 800f198:	4610      	mov	r0, r2
 800f19a:	f7fd fd3e 	bl	800cc1a <vListInsertEnd>
 800f19e:	e005      	b.n	800f1ac <xTaskGenericNotifyFromISR+0x168>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800f1a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1a2:	3318      	adds	r3, #24
 800f1a4:	4619      	mov	r1, r3
 800f1a6:	4812      	ldr	r0, [pc, #72]	; (800f1f0 <xTaskGenericNotifyFromISR+0x1ac>)
 800f1a8:	f7fd fd37 	bl	800cc1a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f1ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f1b0:	4b10      	ldr	r3, [pc, #64]	; (800f1f4 <xTaskGenericNotifyFromISR+0x1b0>)
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1b6:	429a      	cmp	r2, r3
 800f1b8:	d908      	bls.n	800f1cc <xTaskGenericNotifyFromISR+0x188>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800f1ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d002      	beq.n	800f1c6 <xTaskGenericNotifyFromISR+0x182>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800f1c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f1c2:	2201      	movs	r2, #1
 800f1c4:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800f1c6:	4b0c      	ldr	r3, [pc, #48]	; (800f1f8 <xTaskGenericNotifyFromISR+0x1b4>)
 800f1c8:	2201      	movs	r2, #1
 800f1ca:	601a      	str	r2, [r3, #0]
 800f1cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1ce:	613b      	str	r3, [r7, #16]
	__asm volatile
 800f1d0:	693b      	ldr	r3, [r7, #16]
 800f1d2:	f383 8811 	msr	BASEPRI, r3
}
 800f1d6:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800f1d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800f1da:	4618      	mov	r0, r3
 800f1dc:	3738      	adds	r7, #56	; 0x38
 800f1de:	46bd      	mov	sp, r7
 800f1e0:	bd80      	pop	{r7, pc}
 800f1e2:	bf00      	nop
 800f1e4:	20003604 	.word	0x20003604
 800f1e8:	200035e4 	.word	0x200035e4
 800f1ec:	2000310c 	.word	0x2000310c
 800f1f0:	2000359c 	.word	0x2000359c
 800f1f4:	20003108 	.word	0x20003108
 800f1f8:	200035f0 	.word	0x200035f0

0800f1fc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f1fc:	b580      	push	{r7, lr}
 800f1fe:	b084      	sub	sp, #16
 800f200:	af00      	add	r7, sp, #0
 800f202:	6078      	str	r0, [r7, #4]
 800f204:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f206:	4b21      	ldr	r3, [pc, #132]	; (800f28c <prvAddCurrentTaskToDelayedList+0x90>)
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f20c:	4b20      	ldr	r3, [pc, #128]	; (800f290 <prvAddCurrentTaskToDelayedList+0x94>)
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	3304      	adds	r3, #4
 800f212:	4618      	mov	r0, r3
 800f214:	f7fd fd5e 	bl	800ccd4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f21e:	d10a      	bne.n	800f236 <prvAddCurrentTaskToDelayedList+0x3a>
 800f220:	683b      	ldr	r3, [r7, #0]
 800f222:	2b00      	cmp	r3, #0
 800f224:	d007      	beq.n	800f236 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f226:	4b1a      	ldr	r3, [pc, #104]	; (800f290 <prvAddCurrentTaskToDelayedList+0x94>)
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	3304      	adds	r3, #4
 800f22c:	4619      	mov	r1, r3
 800f22e:	4819      	ldr	r0, [pc, #100]	; (800f294 <prvAddCurrentTaskToDelayedList+0x98>)
 800f230:	f7fd fcf3 	bl	800cc1a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f234:	e026      	b.n	800f284 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f236:	68fa      	ldr	r2, [r7, #12]
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	4413      	add	r3, r2
 800f23c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f23e:	4b14      	ldr	r3, [pc, #80]	; (800f290 <prvAddCurrentTaskToDelayedList+0x94>)
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	68ba      	ldr	r2, [r7, #8]
 800f244:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f246:	68ba      	ldr	r2, [r7, #8]
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	429a      	cmp	r2, r3
 800f24c:	d209      	bcs.n	800f262 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f24e:	4b12      	ldr	r3, [pc, #72]	; (800f298 <prvAddCurrentTaskToDelayedList+0x9c>)
 800f250:	681a      	ldr	r2, [r3, #0]
 800f252:	4b0f      	ldr	r3, [pc, #60]	; (800f290 <prvAddCurrentTaskToDelayedList+0x94>)
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	3304      	adds	r3, #4
 800f258:	4619      	mov	r1, r3
 800f25a:	4610      	mov	r0, r2
 800f25c:	f7fd fd01 	bl	800cc62 <vListInsert>
}
 800f260:	e010      	b.n	800f284 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f262:	4b0e      	ldr	r3, [pc, #56]	; (800f29c <prvAddCurrentTaskToDelayedList+0xa0>)
 800f264:	681a      	ldr	r2, [r3, #0]
 800f266:	4b0a      	ldr	r3, [pc, #40]	; (800f290 <prvAddCurrentTaskToDelayedList+0x94>)
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	3304      	adds	r3, #4
 800f26c:	4619      	mov	r1, r3
 800f26e:	4610      	mov	r0, r2
 800f270:	f7fd fcf7 	bl	800cc62 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f274:	4b0a      	ldr	r3, [pc, #40]	; (800f2a0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	68ba      	ldr	r2, [r7, #8]
 800f27a:	429a      	cmp	r2, r3
 800f27c:	d202      	bcs.n	800f284 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f27e:	4a08      	ldr	r2, [pc, #32]	; (800f2a0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f280:	68bb      	ldr	r3, [r7, #8]
 800f282:	6013      	str	r3, [r2, #0]
}
 800f284:	bf00      	nop
 800f286:	3710      	adds	r7, #16
 800f288:	46bd      	mov	sp, r7
 800f28a:	bd80      	pop	{r7, pc}
 800f28c:	200035e0 	.word	0x200035e0
 800f290:	20003108 	.word	0x20003108
 800f294:	200035c8 	.word	0x200035c8
 800f298:	20003598 	.word	0x20003598
 800f29c:	20003594 	.word	0x20003594
 800f2a0:	200035fc 	.word	0x200035fc

0800f2a4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f2a4:	b580      	push	{r7, lr}
 800f2a6:	b08a      	sub	sp, #40	; 0x28
 800f2a8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f2aa:	2300      	movs	r3, #0
 800f2ac:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f2ae:	f000 fb63 	bl	800f978 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f2b2:	4b1c      	ldr	r3, [pc, #112]	; (800f324 <xTimerCreateTimerTask+0x80>)
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d021      	beq.n	800f2fe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f2ba:	2300      	movs	r3, #0
 800f2bc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f2be:	2300      	movs	r3, #0
 800f2c0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f2c2:	1d3a      	adds	r2, r7, #4
 800f2c4:	f107 0108 	add.w	r1, r7, #8
 800f2c8:	f107 030c 	add.w	r3, r7, #12
 800f2cc:	4618      	mov	r0, r3
 800f2ce:	f7fd fc5d 	bl	800cb8c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f2d2:	6879      	ldr	r1, [r7, #4]
 800f2d4:	68bb      	ldr	r3, [r7, #8]
 800f2d6:	68fa      	ldr	r2, [r7, #12]
 800f2d8:	9202      	str	r2, [sp, #8]
 800f2da:	9301      	str	r3, [sp, #4]
 800f2dc:	2302      	movs	r3, #2
 800f2de:	9300      	str	r3, [sp, #0]
 800f2e0:	2300      	movs	r3, #0
 800f2e2:	460a      	mov	r2, r1
 800f2e4:	4910      	ldr	r1, [pc, #64]	; (800f328 <xTimerCreateTimerTask+0x84>)
 800f2e6:	4811      	ldr	r0, [pc, #68]	; (800f32c <xTimerCreateTimerTask+0x88>)
 800f2e8:	f7fe fde2 	bl	800deb0 <xTaskCreateStatic>
 800f2ec:	4603      	mov	r3, r0
 800f2ee:	4a10      	ldr	r2, [pc, #64]	; (800f330 <xTimerCreateTimerTask+0x8c>)
 800f2f0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f2f2:	4b0f      	ldr	r3, [pc, #60]	; (800f330 <xTimerCreateTimerTask+0x8c>)
 800f2f4:	681b      	ldr	r3, [r3, #0]
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d001      	beq.n	800f2fe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f2fa:	2301      	movs	r3, #1
 800f2fc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f2fe:	697b      	ldr	r3, [r7, #20]
 800f300:	2b00      	cmp	r3, #0
 800f302:	d10a      	bne.n	800f31a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800f304:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f308:	f383 8811 	msr	BASEPRI, r3
 800f30c:	f3bf 8f6f 	isb	sy
 800f310:	f3bf 8f4f 	dsb	sy
 800f314:	613b      	str	r3, [r7, #16]
}
 800f316:	bf00      	nop
 800f318:	e7fe      	b.n	800f318 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f31a:	697b      	ldr	r3, [r7, #20]
}
 800f31c:	4618      	mov	r0, r3
 800f31e:	3718      	adds	r7, #24
 800f320:	46bd      	mov	sp, r7
 800f322:	bd80      	pop	{r7, pc}
 800f324:	20003638 	.word	0x20003638
 800f328:	0801f750 	.word	0x0801f750
 800f32c:	0800f521 	.word	0x0800f521
 800f330:	2000363c 	.word	0x2000363c

0800f334 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800f334:	b580      	push	{r7, lr}
 800f336:	b088      	sub	sp, #32
 800f338:	af02      	add	r7, sp, #8
 800f33a:	60f8      	str	r0, [r7, #12]
 800f33c:	60b9      	str	r1, [r7, #8]
 800f33e:	607a      	str	r2, [r7, #4]
 800f340:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800f342:	202c      	movs	r0, #44	; 0x2c
 800f344:	f000 fda8 	bl	800fe98 <pvPortMalloc>
 800f348:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800f34a:	697b      	ldr	r3, [r7, #20]
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d00d      	beq.n	800f36c <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800f350:	697b      	ldr	r3, [r7, #20]
 800f352:	2200      	movs	r2, #0
 800f354:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800f358:	697b      	ldr	r3, [r7, #20]
 800f35a:	9301      	str	r3, [sp, #4]
 800f35c:	6a3b      	ldr	r3, [r7, #32]
 800f35e:	9300      	str	r3, [sp, #0]
 800f360:	683b      	ldr	r3, [r7, #0]
 800f362:	687a      	ldr	r2, [r7, #4]
 800f364:	68b9      	ldr	r1, [r7, #8]
 800f366:	68f8      	ldr	r0, [r7, #12]
 800f368:	f000 f805 	bl	800f376 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800f36c:	697b      	ldr	r3, [r7, #20]
	}
 800f36e:	4618      	mov	r0, r3
 800f370:	3718      	adds	r7, #24
 800f372:	46bd      	mov	sp, r7
 800f374:	bd80      	pop	{r7, pc}

0800f376 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800f376:	b580      	push	{r7, lr}
 800f378:	b086      	sub	sp, #24
 800f37a:	af00      	add	r7, sp, #0
 800f37c:	60f8      	str	r0, [r7, #12]
 800f37e:	60b9      	str	r1, [r7, #8]
 800f380:	607a      	str	r2, [r7, #4]
 800f382:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800f384:	68bb      	ldr	r3, [r7, #8]
 800f386:	2b00      	cmp	r3, #0
 800f388:	d10a      	bne.n	800f3a0 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800f38a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f38e:	f383 8811 	msr	BASEPRI, r3
 800f392:	f3bf 8f6f 	isb	sy
 800f396:	f3bf 8f4f 	dsb	sy
 800f39a:	617b      	str	r3, [r7, #20]
}
 800f39c:	bf00      	nop
 800f39e:	e7fe      	b.n	800f39e <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800f3a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d01e      	beq.n	800f3e4 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800f3a6:	f000 fae7 	bl	800f978 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800f3aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3ac:	68fa      	ldr	r2, [r7, #12]
 800f3ae:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800f3b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3b2:	68ba      	ldr	r2, [r7, #8]
 800f3b4:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800f3b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3b8:	683a      	ldr	r2, [r7, #0]
 800f3ba:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800f3bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3be:	6a3a      	ldr	r2, [r7, #32]
 800f3c0:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800f3c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3c4:	3304      	adds	r3, #4
 800f3c6:	4618      	mov	r0, r3
 800f3c8:	f7fd fc1a 	bl	800cc00 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d008      	beq.n	800f3e4 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800f3d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f3d8:	f043 0304 	orr.w	r3, r3, #4
 800f3dc:	b2da      	uxtb	r2, r3
 800f3de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800f3e4:	bf00      	nop
 800f3e6:	3718      	adds	r7, #24
 800f3e8:	46bd      	mov	sp, r7
 800f3ea:	bd80      	pop	{r7, pc}

0800f3ec <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f3ec:	b580      	push	{r7, lr}
 800f3ee:	b08a      	sub	sp, #40	; 0x28
 800f3f0:	af00      	add	r7, sp, #0
 800f3f2:	60f8      	str	r0, [r7, #12]
 800f3f4:	60b9      	str	r1, [r7, #8]
 800f3f6:	607a      	str	r2, [r7, #4]
 800f3f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f3fa:	2300      	movs	r3, #0
 800f3fc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	2b00      	cmp	r3, #0
 800f402:	d10a      	bne.n	800f41a <xTimerGenericCommand+0x2e>
	__asm volatile
 800f404:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f408:	f383 8811 	msr	BASEPRI, r3
 800f40c:	f3bf 8f6f 	isb	sy
 800f410:	f3bf 8f4f 	dsb	sy
 800f414:	623b      	str	r3, [r7, #32]
}
 800f416:	bf00      	nop
 800f418:	e7fe      	b.n	800f418 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f41a:	4b1a      	ldr	r3, [pc, #104]	; (800f484 <xTimerGenericCommand+0x98>)
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	2b00      	cmp	r3, #0
 800f420:	d02a      	beq.n	800f478 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f422:	68bb      	ldr	r3, [r7, #8]
 800f424:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f42e:	68bb      	ldr	r3, [r7, #8]
 800f430:	2b05      	cmp	r3, #5
 800f432:	dc18      	bgt.n	800f466 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f434:	f7ff fb7c 	bl	800eb30 <xTaskGetSchedulerState>
 800f438:	4603      	mov	r3, r0
 800f43a:	2b02      	cmp	r3, #2
 800f43c:	d109      	bne.n	800f452 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f43e:	4b11      	ldr	r3, [pc, #68]	; (800f484 <xTimerGenericCommand+0x98>)
 800f440:	6818      	ldr	r0, [r3, #0]
 800f442:	f107 0110 	add.w	r1, r7, #16
 800f446:	2300      	movs	r3, #0
 800f448:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f44a:	f7fd fecb 	bl	800d1e4 <xQueueGenericSend>
 800f44e:	6278      	str	r0, [r7, #36]	; 0x24
 800f450:	e012      	b.n	800f478 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f452:	4b0c      	ldr	r3, [pc, #48]	; (800f484 <xTimerGenericCommand+0x98>)
 800f454:	6818      	ldr	r0, [r3, #0]
 800f456:	f107 0110 	add.w	r1, r7, #16
 800f45a:	2300      	movs	r3, #0
 800f45c:	2200      	movs	r2, #0
 800f45e:	f7fd fec1 	bl	800d1e4 <xQueueGenericSend>
 800f462:	6278      	str	r0, [r7, #36]	; 0x24
 800f464:	e008      	b.n	800f478 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f466:	4b07      	ldr	r3, [pc, #28]	; (800f484 <xTimerGenericCommand+0x98>)
 800f468:	6818      	ldr	r0, [r3, #0]
 800f46a:	f107 0110 	add.w	r1, r7, #16
 800f46e:	2300      	movs	r3, #0
 800f470:	683a      	ldr	r2, [r7, #0]
 800f472:	f7fd ffb5 	bl	800d3e0 <xQueueGenericSendFromISR>
 800f476:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f47a:	4618      	mov	r0, r3
 800f47c:	3728      	adds	r7, #40	; 0x28
 800f47e:	46bd      	mov	sp, r7
 800f480:	bd80      	pop	{r7, pc}
 800f482:	bf00      	nop
 800f484:	20003638 	.word	0x20003638

0800f488 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f488:	b580      	push	{r7, lr}
 800f48a:	b088      	sub	sp, #32
 800f48c:	af02      	add	r7, sp, #8
 800f48e:	6078      	str	r0, [r7, #4]
 800f490:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f492:	4b22      	ldr	r3, [pc, #136]	; (800f51c <prvProcessExpiredTimer+0x94>)
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	68db      	ldr	r3, [r3, #12]
 800f498:	68db      	ldr	r3, [r3, #12]
 800f49a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f49c:	697b      	ldr	r3, [r7, #20]
 800f49e:	3304      	adds	r3, #4
 800f4a0:	4618      	mov	r0, r3
 800f4a2:	f7fd fc17 	bl	800ccd4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f4a6:	697b      	ldr	r3, [r7, #20]
 800f4a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f4ac:	f003 0304 	and.w	r3, r3, #4
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d022      	beq.n	800f4fa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f4b4:	697b      	ldr	r3, [r7, #20]
 800f4b6:	699a      	ldr	r2, [r3, #24]
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	18d1      	adds	r1, r2, r3
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	683a      	ldr	r2, [r7, #0]
 800f4c0:	6978      	ldr	r0, [r7, #20]
 800f4c2:	f000 f8d1 	bl	800f668 <prvInsertTimerInActiveList>
 800f4c6:	4603      	mov	r3, r0
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d01f      	beq.n	800f50c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f4cc:	2300      	movs	r3, #0
 800f4ce:	9300      	str	r3, [sp, #0]
 800f4d0:	2300      	movs	r3, #0
 800f4d2:	687a      	ldr	r2, [r7, #4]
 800f4d4:	2100      	movs	r1, #0
 800f4d6:	6978      	ldr	r0, [r7, #20]
 800f4d8:	f7ff ff88 	bl	800f3ec <xTimerGenericCommand>
 800f4dc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f4de:	693b      	ldr	r3, [r7, #16]
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d113      	bne.n	800f50c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800f4e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4e8:	f383 8811 	msr	BASEPRI, r3
 800f4ec:	f3bf 8f6f 	isb	sy
 800f4f0:	f3bf 8f4f 	dsb	sy
 800f4f4:	60fb      	str	r3, [r7, #12]
}
 800f4f6:	bf00      	nop
 800f4f8:	e7fe      	b.n	800f4f8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f4fa:	697b      	ldr	r3, [r7, #20]
 800f4fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f500:	f023 0301 	bic.w	r3, r3, #1
 800f504:	b2da      	uxtb	r2, r3
 800f506:	697b      	ldr	r3, [r7, #20]
 800f508:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f50c:	697b      	ldr	r3, [r7, #20]
 800f50e:	6a1b      	ldr	r3, [r3, #32]
 800f510:	6978      	ldr	r0, [r7, #20]
 800f512:	4798      	blx	r3
}
 800f514:	bf00      	nop
 800f516:	3718      	adds	r7, #24
 800f518:	46bd      	mov	sp, r7
 800f51a:	bd80      	pop	{r7, pc}
 800f51c:	20003630 	.word	0x20003630

0800f520 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f520:	b580      	push	{r7, lr}
 800f522:	b084      	sub	sp, #16
 800f524:	af00      	add	r7, sp, #0
 800f526:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f528:	f107 0308 	add.w	r3, r7, #8
 800f52c:	4618      	mov	r0, r3
 800f52e:	f000 f857 	bl	800f5e0 <prvGetNextExpireTime>
 800f532:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f534:	68bb      	ldr	r3, [r7, #8]
 800f536:	4619      	mov	r1, r3
 800f538:	68f8      	ldr	r0, [r7, #12]
 800f53a:	f000 f803 	bl	800f544 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f53e:	f000 f8d5 	bl	800f6ec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f542:	e7f1      	b.n	800f528 <prvTimerTask+0x8>

0800f544 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f544:	b580      	push	{r7, lr}
 800f546:	b084      	sub	sp, #16
 800f548:	af00      	add	r7, sp, #0
 800f54a:	6078      	str	r0, [r7, #4]
 800f54c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f54e:	f7fe feeb 	bl	800e328 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f552:	f107 0308 	add.w	r3, r7, #8
 800f556:	4618      	mov	r0, r3
 800f558:	f000 f866 	bl	800f628 <prvSampleTimeNow>
 800f55c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f55e:	68bb      	ldr	r3, [r7, #8]
 800f560:	2b00      	cmp	r3, #0
 800f562:	d130      	bne.n	800f5c6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f564:	683b      	ldr	r3, [r7, #0]
 800f566:	2b00      	cmp	r3, #0
 800f568:	d10a      	bne.n	800f580 <prvProcessTimerOrBlockTask+0x3c>
 800f56a:	687a      	ldr	r2, [r7, #4]
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	429a      	cmp	r2, r3
 800f570:	d806      	bhi.n	800f580 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f572:	f7fe fee7 	bl	800e344 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f576:	68f9      	ldr	r1, [r7, #12]
 800f578:	6878      	ldr	r0, [r7, #4]
 800f57a:	f7ff ff85 	bl	800f488 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f57e:	e024      	b.n	800f5ca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f580:	683b      	ldr	r3, [r7, #0]
 800f582:	2b00      	cmp	r3, #0
 800f584:	d008      	beq.n	800f598 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f586:	4b13      	ldr	r3, [pc, #76]	; (800f5d4 <prvProcessTimerOrBlockTask+0x90>)
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d101      	bne.n	800f594 <prvProcessTimerOrBlockTask+0x50>
 800f590:	2301      	movs	r3, #1
 800f592:	e000      	b.n	800f596 <prvProcessTimerOrBlockTask+0x52>
 800f594:	2300      	movs	r3, #0
 800f596:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f598:	4b0f      	ldr	r3, [pc, #60]	; (800f5d8 <prvProcessTimerOrBlockTask+0x94>)
 800f59a:	6818      	ldr	r0, [r3, #0]
 800f59c:	687a      	ldr	r2, [r7, #4]
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	1ad3      	subs	r3, r2, r3
 800f5a2:	683a      	ldr	r2, [r7, #0]
 800f5a4:	4619      	mov	r1, r3
 800f5a6:	f7fe fc4f 	bl	800de48 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f5aa:	f7fe fecb 	bl	800e344 <xTaskResumeAll>
 800f5ae:	4603      	mov	r3, r0
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d10a      	bne.n	800f5ca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f5b4:	4b09      	ldr	r3, [pc, #36]	; (800f5dc <prvProcessTimerOrBlockTask+0x98>)
 800f5b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f5ba:	601a      	str	r2, [r3, #0]
 800f5bc:	f3bf 8f4f 	dsb	sy
 800f5c0:	f3bf 8f6f 	isb	sy
}
 800f5c4:	e001      	b.n	800f5ca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f5c6:	f7fe febd 	bl	800e344 <xTaskResumeAll>
}
 800f5ca:	bf00      	nop
 800f5cc:	3710      	adds	r7, #16
 800f5ce:	46bd      	mov	sp, r7
 800f5d0:	bd80      	pop	{r7, pc}
 800f5d2:	bf00      	nop
 800f5d4:	20003634 	.word	0x20003634
 800f5d8:	20003638 	.word	0x20003638
 800f5dc:	e000ed04 	.word	0xe000ed04

0800f5e0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f5e0:	b480      	push	{r7}
 800f5e2:	b085      	sub	sp, #20
 800f5e4:	af00      	add	r7, sp, #0
 800f5e6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f5e8:	4b0e      	ldr	r3, [pc, #56]	; (800f624 <prvGetNextExpireTime+0x44>)
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d101      	bne.n	800f5f6 <prvGetNextExpireTime+0x16>
 800f5f2:	2201      	movs	r2, #1
 800f5f4:	e000      	b.n	800f5f8 <prvGetNextExpireTime+0x18>
 800f5f6:	2200      	movs	r2, #0
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	2b00      	cmp	r3, #0
 800f602:	d105      	bne.n	800f610 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f604:	4b07      	ldr	r3, [pc, #28]	; (800f624 <prvGetNextExpireTime+0x44>)
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	68db      	ldr	r3, [r3, #12]
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	60fb      	str	r3, [r7, #12]
 800f60e:	e001      	b.n	800f614 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f610:	2300      	movs	r3, #0
 800f612:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f614:	68fb      	ldr	r3, [r7, #12]
}
 800f616:	4618      	mov	r0, r3
 800f618:	3714      	adds	r7, #20
 800f61a:	46bd      	mov	sp, r7
 800f61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f620:	4770      	bx	lr
 800f622:	bf00      	nop
 800f624:	20003630 	.word	0x20003630

0800f628 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f628:	b580      	push	{r7, lr}
 800f62a:	b084      	sub	sp, #16
 800f62c:	af00      	add	r7, sp, #0
 800f62e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f630:	f7fe ff26 	bl	800e480 <xTaskGetTickCount>
 800f634:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f636:	4b0b      	ldr	r3, [pc, #44]	; (800f664 <prvSampleTimeNow+0x3c>)
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	68fa      	ldr	r2, [r7, #12]
 800f63c:	429a      	cmp	r2, r3
 800f63e:	d205      	bcs.n	800f64c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f640:	f000 f936 	bl	800f8b0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	2201      	movs	r2, #1
 800f648:	601a      	str	r2, [r3, #0]
 800f64a:	e002      	b.n	800f652 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	2200      	movs	r2, #0
 800f650:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f652:	4a04      	ldr	r2, [pc, #16]	; (800f664 <prvSampleTimeNow+0x3c>)
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f658:	68fb      	ldr	r3, [r7, #12]
}
 800f65a:	4618      	mov	r0, r3
 800f65c:	3710      	adds	r7, #16
 800f65e:	46bd      	mov	sp, r7
 800f660:	bd80      	pop	{r7, pc}
 800f662:	bf00      	nop
 800f664:	20003640 	.word	0x20003640

0800f668 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f668:	b580      	push	{r7, lr}
 800f66a:	b086      	sub	sp, #24
 800f66c:	af00      	add	r7, sp, #0
 800f66e:	60f8      	str	r0, [r7, #12]
 800f670:	60b9      	str	r1, [r7, #8]
 800f672:	607a      	str	r2, [r7, #4]
 800f674:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f676:	2300      	movs	r3, #0
 800f678:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	68ba      	ldr	r2, [r7, #8]
 800f67e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	68fa      	ldr	r2, [r7, #12]
 800f684:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f686:	68ba      	ldr	r2, [r7, #8]
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	429a      	cmp	r2, r3
 800f68c:	d812      	bhi.n	800f6b4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f68e:	687a      	ldr	r2, [r7, #4]
 800f690:	683b      	ldr	r3, [r7, #0]
 800f692:	1ad2      	subs	r2, r2, r3
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	699b      	ldr	r3, [r3, #24]
 800f698:	429a      	cmp	r2, r3
 800f69a:	d302      	bcc.n	800f6a2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f69c:	2301      	movs	r3, #1
 800f69e:	617b      	str	r3, [r7, #20]
 800f6a0:	e01b      	b.n	800f6da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f6a2:	4b10      	ldr	r3, [pc, #64]	; (800f6e4 <prvInsertTimerInActiveList+0x7c>)
 800f6a4:	681a      	ldr	r2, [r3, #0]
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	3304      	adds	r3, #4
 800f6aa:	4619      	mov	r1, r3
 800f6ac:	4610      	mov	r0, r2
 800f6ae:	f7fd fad8 	bl	800cc62 <vListInsert>
 800f6b2:	e012      	b.n	800f6da <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f6b4:	687a      	ldr	r2, [r7, #4]
 800f6b6:	683b      	ldr	r3, [r7, #0]
 800f6b8:	429a      	cmp	r2, r3
 800f6ba:	d206      	bcs.n	800f6ca <prvInsertTimerInActiveList+0x62>
 800f6bc:	68ba      	ldr	r2, [r7, #8]
 800f6be:	683b      	ldr	r3, [r7, #0]
 800f6c0:	429a      	cmp	r2, r3
 800f6c2:	d302      	bcc.n	800f6ca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f6c4:	2301      	movs	r3, #1
 800f6c6:	617b      	str	r3, [r7, #20]
 800f6c8:	e007      	b.n	800f6da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f6ca:	4b07      	ldr	r3, [pc, #28]	; (800f6e8 <prvInsertTimerInActiveList+0x80>)
 800f6cc:	681a      	ldr	r2, [r3, #0]
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	3304      	adds	r3, #4
 800f6d2:	4619      	mov	r1, r3
 800f6d4:	4610      	mov	r0, r2
 800f6d6:	f7fd fac4 	bl	800cc62 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f6da:	697b      	ldr	r3, [r7, #20]
}
 800f6dc:	4618      	mov	r0, r3
 800f6de:	3718      	adds	r7, #24
 800f6e0:	46bd      	mov	sp, r7
 800f6e2:	bd80      	pop	{r7, pc}
 800f6e4:	20003634 	.word	0x20003634
 800f6e8:	20003630 	.word	0x20003630

0800f6ec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f6ec:	b580      	push	{r7, lr}
 800f6ee:	b08e      	sub	sp, #56	; 0x38
 800f6f0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f6f2:	e0ca      	b.n	800f88a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	da18      	bge.n	800f72c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f6fa:	1d3b      	adds	r3, r7, #4
 800f6fc:	3304      	adds	r3, #4
 800f6fe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f702:	2b00      	cmp	r3, #0
 800f704:	d10a      	bne.n	800f71c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800f706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f70a:	f383 8811 	msr	BASEPRI, r3
 800f70e:	f3bf 8f6f 	isb	sy
 800f712:	f3bf 8f4f 	dsb	sy
 800f716:	61fb      	str	r3, [r7, #28]
}
 800f718:	bf00      	nop
 800f71a:	e7fe      	b.n	800f71a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f71c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f722:	6850      	ldr	r0, [r2, #4]
 800f724:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f726:	6892      	ldr	r2, [r2, #8]
 800f728:	4611      	mov	r1, r2
 800f72a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	2b00      	cmp	r3, #0
 800f730:	f2c0 80aa 	blt.w	800f888 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f73a:	695b      	ldr	r3, [r3, #20]
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d004      	beq.n	800f74a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f742:	3304      	adds	r3, #4
 800f744:	4618      	mov	r0, r3
 800f746:	f7fd fac5 	bl	800ccd4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f74a:	463b      	mov	r3, r7
 800f74c:	4618      	mov	r0, r3
 800f74e:	f7ff ff6b 	bl	800f628 <prvSampleTimeNow>
 800f752:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	2b09      	cmp	r3, #9
 800f758:	f200 8097 	bhi.w	800f88a <prvProcessReceivedCommands+0x19e>
 800f75c:	a201      	add	r2, pc, #4	; (adr r2, 800f764 <prvProcessReceivedCommands+0x78>)
 800f75e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f762:	bf00      	nop
 800f764:	0800f78d 	.word	0x0800f78d
 800f768:	0800f78d 	.word	0x0800f78d
 800f76c:	0800f78d 	.word	0x0800f78d
 800f770:	0800f801 	.word	0x0800f801
 800f774:	0800f815 	.word	0x0800f815
 800f778:	0800f85f 	.word	0x0800f85f
 800f77c:	0800f78d 	.word	0x0800f78d
 800f780:	0800f78d 	.word	0x0800f78d
 800f784:	0800f801 	.word	0x0800f801
 800f788:	0800f815 	.word	0x0800f815
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f78c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f78e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f792:	f043 0301 	orr.w	r3, r3, #1
 800f796:	b2da      	uxtb	r2, r3
 800f798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f79a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f79e:	68ba      	ldr	r2, [r7, #8]
 800f7a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7a2:	699b      	ldr	r3, [r3, #24]
 800f7a4:	18d1      	adds	r1, r2, r3
 800f7a6:	68bb      	ldr	r3, [r7, #8]
 800f7a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f7aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f7ac:	f7ff ff5c 	bl	800f668 <prvInsertTimerInActiveList>
 800f7b0:	4603      	mov	r3, r0
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d069      	beq.n	800f88a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f7b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7b8:	6a1b      	ldr	r3, [r3, #32]
 800f7ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f7bc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f7be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f7c4:	f003 0304 	and.w	r3, r3, #4
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d05e      	beq.n	800f88a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f7cc:	68ba      	ldr	r2, [r7, #8]
 800f7ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7d0:	699b      	ldr	r3, [r3, #24]
 800f7d2:	441a      	add	r2, r3
 800f7d4:	2300      	movs	r3, #0
 800f7d6:	9300      	str	r3, [sp, #0]
 800f7d8:	2300      	movs	r3, #0
 800f7da:	2100      	movs	r1, #0
 800f7dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f7de:	f7ff fe05 	bl	800f3ec <xTimerGenericCommand>
 800f7e2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f7e4:	6a3b      	ldr	r3, [r7, #32]
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d14f      	bne.n	800f88a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800f7ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7ee:	f383 8811 	msr	BASEPRI, r3
 800f7f2:	f3bf 8f6f 	isb	sy
 800f7f6:	f3bf 8f4f 	dsb	sy
 800f7fa:	61bb      	str	r3, [r7, #24]
}
 800f7fc:	bf00      	nop
 800f7fe:	e7fe      	b.n	800f7fe <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f802:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f806:	f023 0301 	bic.w	r3, r3, #1
 800f80a:	b2da      	uxtb	r2, r3
 800f80c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f80e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800f812:	e03a      	b.n	800f88a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f816:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f81a:	f043 0301 	orr.w	r3, r3, #1
 800f81e:	b2da      	uxtb	r2, r3
 800f820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f822:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f826:	68ba      	ldr	r2, [r7, #8]
 800f828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f82a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f82c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f82e:	699b      	ldr	r3, [r3, #24]
 800f830:	2b00      	cmp	r3, #0
 800f832:	d10a      	bne.n	800f84a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800f834:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f838:	f383 8811 	msr	BASEPRI, r3
 800f83c:	f3bf 8f6f 	isb	sy
 800f840:	f3bf 8f4f 	dsb	sy
 800f844:	617b      	str	r3, [r7, #20]
}
 800f846:	bf00      	nop
 800f848:	e7fe      	b.n	800f848 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f84a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f84c:	699a      	ldr	r2, [r3, #24]
 800f84e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f850:	18d1      	adds	r1, r2, r3
 800f852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f854:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f856:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f858:	f7ff ff06 	bl	800f668 <prvInsertTimerInActiveList>
					break;
 800f85c:	e015      	b.n	800f88a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f85e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f860:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f864:	f003 0302 	and.w	r3, r3, #2
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d103      	bne.n	800f874 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800f86c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f86e:	f000 fbdf 	bl	8010030 <vPortFree>
 800f872:	e00a      	b.n	800f88a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f876:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f87a:	f023 0301 	bic.w	r3, r3, #1
 800f87e:	b2da      	uxtb	r2, r3
 800f880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f882:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f886:	e000      	b.n	800f88a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800f888:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f88a:	4b08      	ldr	r3, [pc, #32]	; (800f8ac <prvProcessReceivedCommands+0x1c0>)
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	1d39      	adds	r1, r7, #4
 800f890:	2200      	movs	r2, #0
 800f892:	4618      	mov	r0, r3
 800f894:	f7fd fecc 	bl	800d630 <xQueueReceive>
 800f898:	4603      	mov	r3, r0
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	f47f af2a 	bne.w	800f6f4 <prvProcessReceivedCommands+0x8>
	}
}
 800f8a0:	bf00      	nop
 800f8a2:	bf00      	nop
 800f8a4:	3730      	adds	r7, #48	; 0x30
 800f8a6:	46bd      	mov	sp, r7
 800f8a8:	bd80      	pop	{r7, pc}
 800f8aa:	bf00      	nop
 800f8ac:	20003638 	.word	0x20003638

0800f8b0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f8b0:	b580      	push	{r7, lr}
 800f8b2:	b088      	sub	sp, #32
 800f8b4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f8b6:	e048      	b.n	800f94a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f8b8:	4b2d      	ldr	r3, [pc, #180]	; (800f970 <prvSwitchTimerLists+0xc0>)
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	68db      	ldr	r3, [r3, #12]
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f8c2:	4b2b      	ldr	r3, [pc, #172]	; (800f970 <prvSwitchTimerLists+0xc0>)
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	68db      	ldr	r3, [r3, #12]
 800f8c8:	68db      	ldr	r3, [r3, #12]
 800f8ca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	3304      	adds	r3, #4
 800f8d0:	4618      	mov	r0, r3
 800f8d2:	f7fd f9ff 	bl	800ccd4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	6a1b      	ldr	r3, [r3, #32]
 800f8da:	68f8      	ldr	r0, [r7, #12]
 800f8dc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f8de:	68fb      	ldr	r3, [r7, #12]
 800f8e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f8e4:	f003 0304 	and.w	r3, r3, #4
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d02e      	beq.n	800f94a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	699b      	ldr	r3, [r3, #24]
 800f8f0:	693a      	ldr	r2, [r7, #16]
 800f8f2:	4413      	add	r3, r2
 800f8f4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f8f6:	68ba      	ldr	r2, [r7, #8]
 800f8f8:	693b      	ldr	r3, [r7, #16]
 800f8fa:	429a      	cmp	r2, r3
 800f8fc:	d90e      	bls.n	800f91c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	68ba      	ldr	r2, [r7, #8]
 800f902:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	68fa      	ldr	r2, [r7, #12]
 800f908:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f90a:	4b19      	ldr	r3, [pc, #100]	; (800f970 <prvSwitchTimerLists+0xc0>)
 800f90c:	681a      	ldr	r2, [r3, #0]
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	3304      	adds	r3, #4
 800f912:	4619      	mov	r1, r3
 800f914:	4610      	mov	r0, r2
 800f916:	f7fd f9a4 	bl	800cc62 <vListInsert>
 800f91a:	e016      	b.n	800f94a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f91c:	2300      	movs	r3, #0
 800f91e:	9300      	str	r3, [sp, #0]
 800f920:	2300      	movs	r3, #0
 800f922:	693a      	ldr	r2, [r7, #16]
 800f924:	2100      	movs	r1, #0
 800f926:	68f8      	ldr	r0, [r7, #12]
 800f928:	f7ff fd60 	bl	800f3ec <xTimerGenericCommand>
 800f92c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	2b00      	cmp	r3, #0
 800f932:	d10a      	bne.n	800f94a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800f934:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f938:	f383 8811 	msr	BASEPRI, r3
 800f93c:	f3bf 8f6f 	isb	sy
 800f940:	f3bf 8f4f 	dsb	sy
 800f944:	603b      	str	r3, [r7, #0]
}
 800f946:	bf00      	nop
 800f948:	e7fe      	b.n	800f948 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f94a:	4b09      	ldr	r3, [pc, #36]	; (800f970 <prvSwitchTimerLists+0xc0>)
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	681b      	ldr	r3, [r3, #0]
 800f950:	2b00      	cmp	r3, #0
 800f952:	d1b1      	bne.n	800f8b8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f954:	4b06      	ldr	r3, [pc, #24]	; (800f970 <prvSwitchTimerLists+0xc0>)
 800f956:	681b      	ldr	r3, [r3, #0]
 800f958:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f95a:	4b06      	ldr	r3, [pc, #24]	; (800f974 <prvSwitchTimerLists+0xc4>)
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	4a04      	ldr	r2, [pc, #16]	; (800f970 <prvSwitchTimerLists+0xc0>)
 800f960:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f962:	4a04      	ldr	r2, [pc, #16]	; (800f974 <prvSwitchTimerLists+0xc4>)
 800f964:	697b      	ldr	r3, [r7, #20]
 800f966:	6013      	str	r3, [r2, #0]
}
 800f968:	bf00      	nop
 800f96a:	3718      	adds	r7, #24
 800f96c:	46bd      	mov	sp, r7
 800f96e:	bd80      	pop	{r7, pc}
 800f970:	20003630 	.word	0x20003630
 800f974:	20003634 	.word	0x20003634

0800f978 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f978:	b580      	push	{r7, lr}
 800f97a:	b082      	sub	sp, #8
 800f97c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f97e:	f000 f969 	bl	800fc54 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f982:	4b15      	ldr	r3, [pc, #84]	; (800f9d8 <prvCheckForValidListAndQueue+0x60>)
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	2b00      	cmp	r3, #0
 800f988:	d120      	bne.n	800f9cc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f98a:	4814      	ldr	r0, [pc, #80]	; (800f9dc <prvCheckForValidListAndQueue+0x64>)
 800f98c:	f7fd f918 	bl	800cbc0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f990:	4813      	ldr	r0, [pc, #76]	; (800f9e0 <prvCheckForValidListAndQueue+0x68>)
 800f992:	f7fd f915 	bl	800cbc0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f996:	4b13      	ldr	r3, [pc, #76]	; (800f9e4 <prvCheckForValidListAndQueue+0x6c>)
 800f998:	4a10      	ldr	r2, [pc, #64]	; (800f9dc <prvCheckForValidListAndQueue+0x64>)
 800f99a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f99c:	4b12      	ldr	r3, [pc, #72]	; (800f9e8 <prvCheckForValidListAndQueue+0x70>)
 800f99e:	4a10      	ldr	r2, [pc, #64]	; (800f9e0 <prvCheckForValidListAndQueue+0x68>)
 800f9a0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f9a2:	2300      	movs	r3, #0
 800f9a4:	9300      	str	r3, [sp, #0]
 800f9a6:	4b11      	ldr	r3, [pc, #68]	; (800f9ec <prvCheckForValidListAndQueue+0x74>)
 800f9a8:	4a11      	ldr	r2, [pc, #68]	; (800f9f0 <prvCheckForValidListAndQueue+0x78>)
 800f9aa:	2110      	movs	r1, #16
 800f9ac:	200a      	movs	r0, #10
 800f9ae:	f7fd fa23 	bl	800cdf8 <xQueueGenericCreateStatic>
 800f9b2:	4603      	mov	r3, r0
 800f9b4:	4a08      	ldr	r2, [pc, #32]	; (800f9d8 <prvCheckForValidListAndQueue+0x60>)
 800f9b6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f9b8:	4b07      	ldr	r3, [pc, #28]	; (800f9d8 <prvCheckForValidListAndQueue+0x60>)
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d005      	beq.n	800f9cc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f9c0:	4b05      	ldr	r3, [pc, #20]	; (800f9d8 <prvCheckForValidListAndQueue+0x60>)
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	490b      	ldr	r1, [pc, #44]	; (800f9f4 <prvCheckForValidListAndQueue+0x7c>)
 800f9c6:	4618      	mov	r0, r3
 800f9c8:	f7fe f9ea 	bl	800dda0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f9cc:	f000 f972 	bl	800fcb4 <vPortExitCritical>
}
 800f9d0:	bf00      	nop
 800f9d2:	46bd      	mov	sp, r7
 800f9d4:	bd80      	pop	{r7, pc}
 800f9d6:	bf00      	nop
 800f9d8:	20003638 	.word	0x20003638
 800f9dc:	20003608 	.word	0x20003608
 800f9e0:	2000361c 	.word	0x2000361c
 800f9e4:	20003630 	.word	0x20003630
 800f9e8:	20003634 	.word	0x20003634
 800f9ec:	200036e4 	.word	0x200036e4
 800f9f0:	20003644 	.word	0x20003644
 800f9f4:	0801f758 	.word	0x0801f758

0800f9f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f9f8:	b480      	push	{r7}
 800f9fa:	b085      	sub	sp, #20
 800f9fc:	af00      	add	r7, sp, #0
 800f9fe:	60f8      	str	r0, [r7, #12]
 800fa00:	60b9      	str	r1, [r7, #8]
 800fa02:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	3b04      	subs	r3, #4
 800fa08:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800fa0a:	68fb      	ldr	r3, [r7, #12]
 800fa0c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800fa10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	3b04      	subs	r3, #4
 800fa16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800fa18:	68bb      	ldr	r3, [r7, #8]
 800fa1a:	f023 0201 	bic.w	r2, r3, #1
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	3b04      	subs	r3, #4
 800fa26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800fa28:	4a0c      	ldr	r2, [pc, #48]	; (800fa5c <pxPortInitialiseStack+0x64>)
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800fa2e:	68fb      	ldr	r3, [r7, #12]
 800fa30:	3b14      	subs	r3, #20
 800fa32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800fa34:	687a      	ldr	r2, [r7, #4]
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800fa3a:	68fb      	ldr	r3, [r7, #12]
 800fa3c:	3b04      	subs	r3, #4
 800fa3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800fa40:	68fb      	ldr	r3, [r7, #12]
 800fa42:	f06f 0202 	mvn.w	r2, #2
 800fa46:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800fa48:	68fb      	ldr	r3, [r7, #12]
 800fa4a:	3b20      	subs	r3, #32
 800fa4c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800fa4e:	68fb      	ldr	r3, [r7, #12]
}
 800fa50:	4618      	mov	r0, r3
 800fa52:	3714      	adds	r7, #20
 800fa54:	46bd      	mov	sp, r7
 800fa56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa5a:	4770      	bx	lr
 800fa5c:	0800fa61 	.word	0x0800fa61

0800fa60 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800fa60:	b480      	push	{r7}
 800fa62:	b085      	sub	sp, #20
 800fa64:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800fa66:	2300      	movs	r3, #0
 800fa68:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800fa6a:	4b12      	ldr	r3, [pc, #72]	; (800fab4 <prvTaskExitError+0x54>)
 800fa6c:	681b      	ldr	r3, [r3, #0]
 800fa6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa72:	d00a      	beq.n	800fa8a <prvTaskExitError+0x2a>
	__asm volatile
 800fa74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa78:	f383 8811 	msr	BASEPRI, r3
 800fa7c:	f3bf 8f6f 	isb	sy
 800fa80:	f3bf 8f4f 	dsb	sy
 800fa84:	60fb      	str	r3, [r7, #12]
}
 800fa86:	bf00      	nop
 800fa88:	e7fe      	b.n	800fa88 <prvTaskExitError+0x28>
	__asm volatile
 800fa8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa8e:	f383 8811 	msr	BASEPRI, r3
 800fa92:	f3bf 8f6f 	isb	sy
 800fa96:	f3bf 8f4f 	dsb	sy
 800fa9a:	60bb      	str	r3, [r7, #8]
}
 800fa9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800fa9e:	bf00      	nop
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d0fc      	beq.n	800faa0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800faa6:	bf00      	nop
 800faa8:	bf00      	nop
 800faaa:	3714      	adds	r7, #20
 800faac:	46bd      	mov	sp, r7
 800faae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fab2:	4770      	bx	lr
 800fab4:	10000010 	.word	0x10000010
	...

0800fac0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800fac0:	4b07      	ldr	r3, [pc, #28]	; (800fae0 <pxCurrentTCBConst2>)
 800fac2:	6819      	ldr	r1, [r3, #0]
 800fac4:	6808      	ldr	r0, [r1, #0]
 800fac6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800faca:	f380 8809 	msr	PSP, r0
 800face:	f3bf 8f6f 	isb	sy
 800fad2:	f04f 0000 	mov.w	r0, #0
 800fad6:	f380 8811 	msr	BASEPRI, r0
 800fada:	4770      	bx	lr
 800fadc:	f3af 8000 	nop.w

0800fae0 <pxCurrentTCBConst2>:
 800fae0:	20003108 	.word	0x20003108
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800fae4:	bf00      	nop
 800fae6:	bf00      	nop

0800fae8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800fae8:	4808      	ldr	r0, [pc, #32]	; (800fb0c <prvPortStartFirstTask+0x24>)
 800faea:	6800      	ldr	r0, [r0, #0]
 800faec:	6800      	ldr	r0, [r0, #0]
 800faee:	f380 8808 	msr	MSP, r0
 800faf2:	f04f 0000 	mov.w	r0, #0
 800faf6:	f380 8814 	msr	CONTROL, r0
 800fafa:	b662      	cpsie	i
 800fafc:	b661      	cpsie	f
 800fafe:	f3bf 8f4f 	dsb	sy
 800fb02:	f3bf 8f6f 	isb	sy
 800fb06:	df00      	svc	0
 800fb08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800fb0a:	bf00      	nop
 800fb0c:	e000ed08 	.word	0xe000ed08

0800fb10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800fb10:	b580      	push	{r7, lr}
 800fb12:	b086      	sub	sp, #24
 800fb14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800fb16:	4b46      	ldr	r3, [pc, #280]	; (800fc30 <xPortStartScheduler+0x120>)
 800fb18:	681b      	ldr	r3, [r3, #0]
 800fb1a:	4a46      	ldr	r2, [pc, #280]	; (800fc34 <xPortStartScheduler+0x124>)
 800fb1c:	4293      	cmp	r3, r2
 800fb1e:	d10a      	bne.n	800fb36 <xPortStartScheduler+0x26>
	__asm volatile
 800fb20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb24:	f383 8811 	msr	BASEPRI, r3
 800fb28:	f3bf 8f6f 	isb	sy
 800fb2c:	f3bf 8f4f 	dsb	sy
 800fb30:	613b      	str	r3, [r7, #16]
}
 800fb32:	bf00      	nop
 800fb34:	e7fe      	b.n	800fb34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800fb36:	4b3e      	ldr	r3, [pc, #248]	; (800fc30 <xPortStartScheduler+0x120>)
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	4a3f      	ldr	r2, [pc, #252]	; (800fc38 <xPortStartScheduler+0x128>)
 800fb3c:	4293      	cmp	r3, r2
 800fb3e:	d10a      	bne.n	800fb56 <xPortStartScheduler+0x46>
	__asm volatile
 800fb40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb44:	f383 8811 	msr	BASEPRI, r3
 800fb48:	f3bf 8f6f 	isb	sy
 800fb4c:	f3bf 8f4f 	dsb	sy
 800fb50:	60fb      	str	r3, [r7, #12]
}
 800fb52:	bf00      	nop
 800fb54:	e7fe      	b.n	800fb54 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800fb56:	4b39      	ldr	r3, [pc, #228]	; (800fc3c <xPortStartScheduler+0x12c>)
 800fb58:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800fb5a:	697b      	ldr	r3, [r7, #20]
 800fb5c:	781b      	ldrb	r3, [r3, #0]
 800fb5e:	b2db      	uxtb	r3, r3
 800fb60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800fb62:	697b      	ldr	r3, [r7, #20]
 800fb64:	22ff      	movs	r2, #255	; 0xff
 800fb66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800fb68:	697b      	ldr	r3, [r7, #20]
 800fb6a:	781b      	ldrb	r3, [r3, #0]
 800fb6c:	b2db      	uxtb	r3, r3
 800fb6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800fb70:	78fb      	ldrb	r3, [r7, #3]
 800fb72:	b2db      	uxtb	r3, r3
 800fb74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800fb78:	b2da      	uxtb	r2, r3
 800fb7a:	4b31      	ldr	r3, [pc, #196]	; (800fc40 <xPortStartScheduler+0x130>)
 800fb7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800fb7e:	4b31      	ldr	r3, [pc, #196]	; (800fc44 <xPortStartScheduler+0x134>)
 800fb80:	2207      	movs	r2, #7
 800fb82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fb84:	e009      	b.n	800fb9a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800fb86:	4b2f      	ldr	r3, [pc, #188]	; (800fc44 <xPortStartScheduler+0x134>)
 800fb88:	681b      	ldr	r3, [r3, #0]
 800fb8a:	3b01      	subs	r3, #1
 800fb8c:	4a2d      	ldr	r2, [pc, #180]	; (800fc44 <xPortStartScheduler+0x134>)
 800fb8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800fb90:	78fb      	ldrb	r3, [r7, #3]
 800fb92:	b2db      	uxtb	r3, r3
 800fb94:	005b      	lsls	r3, r3, #1
 800fb96:	b2db      	uxtb	r3, r3
 800fb98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fb9a:	78fb      	ldrb	r3, [r7, #3]
 800fb9c:	b2db      	uxtb	r3, r3
 800fb9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fba2:	2b80      	cmp	r3, #128	; 0x80
 800fba4:	d0ef      	beq.n	800fb86 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800fba6:	4b27      	ldr	r3, [pc, #156]	; (800fc44 <xPortStartScheduler+0x134>)
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	f1c3 0307 	rsb	r3, r3, #7
 800fbae:	2b04      	cmp	r3, #4
 800fbb0:	d00a      	beq.n	800fbc8 <xPortStartScheduler+0xb8>
	__asm volatile
 800fbb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbb6:	f383 8811 	msr	BASEPRI, r3
 800fbba:	f3bf 8f6f 	isb	sy
 800fbbe:	f3bf 8f4f 	dsb	sy
 800fbc2:	60bb      	str	r3, [r7, #8]
}
 800fbc4:	bf00      	nop
 800fbc6:	e7fe      	b.n	800fbc6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800fbc8:	4b1e      	ldr	r3, [pc, #120]	; (800fc44 <xPortStartScheduler+0x134>)
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	021b      	lsls	r3, r3, #8
 800fbce:	4a1d      	ldr	r2, [pc, #116]	; (800fc44 <xPortStartScheduler+0x134>)
 800fbd0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800fbd2:	4b1c      	ldr	r3, [pc, #112]	; (800fc44 <xPortStartScheduler+0x134>)
 800fbd4:	681b      	ldr	r3, [r3, #0]
 800fbd6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800fbda:	4a1a      	ldr	r2, [pc, #104]	; (800fc44 <xPortStartScheduler+0x134>)
 800fbdc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	b2da      	uxtb	r2, r3
 800fbe2:	697b      	ldr	r3, [r7, #20]
 800fbe4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800fbe6:	4b18      	ldr	r3, [pc, #96]	; (800fc48 <xPortStartScheduler+0x138>)
 800fbe8:	681b      	ldr	r3, [r3, #0]
 800fbea:	4a17      	ldr	r2, [pc, #92]	; (800fc48 <xPortStartScheduler+0x138>)
 800fbec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800fbf0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800fbf2:	4b15      	ldr	r3, [pc, #84]	; (800fc48 <xPortStartScheduler+0x138>)
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	4a14      	ldr	r2, [pc, #80]	; (800fc48 <xPortStartScheduler+0x138>)
 800fbf8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800fbfc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800fbfe:	f000 f8dd 	bl	800fdbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800fc02:	4b12      	ldr	r3, [pc, #72]	; (800fc4c <xPortStartScheduler+0x13c>)
 800fc04:	2200      	movs	r2, #0
 800fc06:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800fc08:	f000 f8fc 	bl	800fe04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800fc0c:	4b10      	ldr	r3, [pc, #64]	; (800fc50 <xPortStartScheduler+0x140>)
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	4a0f      	ldr	r2, [pc, #60]	; (800fc50 <xPortStartScheduler+0x140>)
 800fc12:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800fc16:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800fc18:	f7ff ff66 	bl	800fae8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800fc1c:	f7fe fd0c 	bl	800e638 <vTaskSwitchContext>
	prvTaskExitError();
 800fc20:	f7ff ff1e 	bl	800fa60 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800fc24:	2300      	movs	r3, #0
}
 800fc26:	4618      	mov	r0, r3
 800fc28:	3718      	adds	r7, #24
 800fc2a:	46bd      	mov	sp, r7
 800fc2c:	bd80      	pop	{r7, pc}
 800fc2e:	bf00      	nop
 800fc30:	e000ed00 	.word	0xe000ed00
 800fc34:	410fc271 	.word	0x410fc271
 800fc38:	410fc270 	.word	0x410fc270
 800fc3c:	e000e400 	.word	0xe000e400
 800fc40:	20003734 	.word	0x20003734
 800fc44:	20003738 	.word	0x20003738
 800fc48:	e000ed20 	.word	0xe000ed20
 800fc4c:	10000010 	.word	0x10000010
 800fc50:	e000ef34 	.word	0xe000ef34

0800fc54 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800fc54:	b480      	push	{r7}
 800fc56:	b083      	sub	sp, #12
 800fc58:	af00      	add	r7, sp, #0
	__asm volatile
 800fc5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc5e:	f383 8811 	msr	BASEPRI, r3
 800fc62:	f3bf 8f6f 	isb	sy
 800fc66:	f3bf 8f4f 	dsb	sy
 800fc6a:	607b      	str	r3, [r7, #4]
}
 800fc6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800fc6e:	4b0f      	ldr	r3, [pc, #60]	; (800fcac <vPortEnterCritical+0x58>)
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	3301      	adds	r3, #1
 800fc74:	4a0d      	ldr	r2, [pc, #52]	; (800fcac <vPortEnterCritical+0x58>)
 800fc76:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800fc78:	4b0c      	ldr	r3, [pc, #48]	; (800fcac <vPortEnterCritical+0x58>)
 800fc7a:	681b      	ldr	r3, [r3, #0]
 800fc7c:	2b01      	cmp	r3, #1
 800fc7e:	d10f      	bne.n	800fca0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800fc80:	4b0b      	ldr	r3, [pc, #44]	; (800fcb0 <vPortEnterCritical+0x5c>)
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	b2db      	uxtb	r3, r3
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d00a      	beq.n	800fca0 <vPortEnterCritical+0x4c>
	__asm volatile
 800fc8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc8e:	f383 8811 	msr	BASEPRI, r3
 800fc92:	f3bf 8f6f 	isb	sy
 800fc96:	f3bf 8f4f 	dsb	sy
 800fc9a:	603b      	str	r3, [r7, #0]
}
 800fc9c:	bf00      	nop
 800fc9e:	e7fe      	b.n	800fc9e <vPortEnterCritical+0x4a>
	}
}
 800fca0:	bf00      	nop
 800fca2:	370c      	adds	r7, #12
 800fca4:	46bd      	mov	sp, r7
 800fca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcaa:	4770      	bx	lr
 800fcac:	10000010 	.word	0x10000010
 800fcb0:	e000ed04 	.word	0xe000ed04

0800fcb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800fcb4:	b480      	push	{r7}
 800fcb6:	b083      	sub	sp, #12
 800fcb8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800fcba:	4b12      	ldr	r3, [pc, #72]	; (800fd04 <vPortExitCritical+0x50>)
 800fcbc:	681b      	ldr	r3, [r3, #0]
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d10a      	bne.n	800fcd8 <vPortExitCritical+0x24>
	__asm volatile
 800fcc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcc6:	f383 8811 	msr	BASEPRI, r3
 800fcca:	f3bf 8f6f 	isb	sy
 800fcce:	f3bf 8f4f 	dsb	sy
 800fcd2:	607b      	str	r3, [r7, #4]
}
 800fcd4:	bf00      	nop
 800fcd6:	e7fe      	b.n	800fcd6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800fcd8:	4b0a      	ldr	r3, [pc, #40]	; (800fd04 <vPortExitCritical+0x50>)
 800fcda:	681b      	ldr	r3, [r3, #0]
 800fcdc:	3b01      	subs	r3, #1
 800fcde:	4a09      	ldr	r2, [pc, #36]	; (800fd04 <vPortExitCritical+0x50>)
 800fce0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800fce2:	4b08      	ldr	r3, [pc, #32]	; (800fd04 <vPortExitCritical+0x50>)
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d105      	bne.n	800fcf6 <vPortExitCritical+0x42>
 800fcea:	2300      	movs	r3, #0
 800fcec:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fcee:	683b      	ldr	r3, [r7, #0]
 800fcf0:	f383 8811 	msr	BASEPRI, r3
}
 800fcf4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800fcf6:	bf00      	nop
 800fcf8:	370c      	adds	r7, #12
 800fcfa:	46bd      	mov	sp, r7
 800fcfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd00:	4770      	bx	lr
 800fd02:	bf00      	nop
 800fd04:	10000010 	.word	0x10000010
	...

0800fd10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800fd10:	f3ef 8009 	mrs	r0, PSP
 800fd14:	f3bf 8f6f 	isb	sy
 800fd18:	4b15      	ldr	r3, [pc, #84]	; (800fd70 <pxCurrentTCBConst>)
 800fd1a:	681a      	ldr	r2, [r3, #0]
 800fd1c:	f01e 0f10 	tst.w	lr, #16
 800fd20:	bf08      	it	eq
 800fd22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800fd26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd2a:	6010      	str	r0, [r2, #0]
 800fd2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800fd30:	f04f 0050 	mov.w	r0, #80	; 0x50
 800fd34:	f380 8811 	msr	BASEPRI, r0
 800fd38:	f3bf 8f4f 	dsb	sy
 800fd3c:	f3bf 8f6f 	isb	sy
 800fd40:	f7fe fc7a 	bl	800e638 <vTaskSwitchContext>
 800fd44:	f04f 0000 	mov.w	r0, #0
 800fd48:	f380 8811 	msr	BASEPRI, r0
 800fd4c:	bc09      	pop	{r0, r3}
 800fd4e:	6819      	ldr	r1, [r3, #0]
 800fd50:	6808      	ldr	r0, [r1, #0]
 800fd52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd56:	f01e 0f10 	tst.w	lr, #16
 800fd5a:	bf08      	it	eq
 800fd5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800fd60:	f380 8809 	msr	PSP, r0
 800fd64:	f3bf 8f6f 	isb	sy
 800fd68:	4770      	bx	lr
 800fd6a:	bf00      	nop
 800fd6c:	f3af 8000 	nop.w

0800fd70 <pxCurrentTCBConst>:
 800fd70:	20003108 	.word	0x20003108
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800fd74:	bf00      	nop
 800fd76:	bf00      	nop

0800fd78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800fd78:	b580      	push	{r7, lr}
 800fd7a:	b082      	sub	sp, #8
 800fd7c:	af00      	add	r7, sp, #0
	__asm volatile
 800fd7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd82:	f383 8811 	msr	BASEPRI, r3
 800fd86:	f3bf 8f6f 	isb	sy
 800fd8a:	f3bf 8f4f 	dsb	sy
 800fd8e:	607b      	str	r3, [r7, #4]
}
 800fd90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800fd92:	f7fe fb97 	bl	800e4c4 <xTaskIncrementTick>
 800fd96:	4603      	mov	r3, r0
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d003      	beq.n	800fda4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800fd9c:	4b06      	ldr	r3, [pc, #24]	; (800fdb8 <xPortSysTickHandler+0x40>)
 800fd9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fda2:	601a      	str	r2, [r3, #0]
 800fda4:	2300      	movs	r3, #0
 800fda6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fda8:	683b      	ldr	r3, [r7, #0]
 800fdaa:	f383 8811 	msr	BASEPRI, r3
}
 800fdae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800fdb0:	bf00      	nop
 800fdb2:	3708      	adds	r7, #8
 800fdb4:	46bd      	mov	sp, r7
 800fdb6:	bd80      	pop	{r7, pc}
 800fdb8:	e000ed04 	.word	0xe000ed04

0800fdbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800fdbc:	b480      	push	{r7}
 800fdbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800fdc0:	4b0b      	ldr	r3, [pc, #44]	; (800fdf0 <vPortSetupTimerInterrupt+0x34>)
 800fdc2:	2200      	movs	r2, #0
 800fdc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fdc6:	4b0b      	ldr	r3, [pc, #44]	; (800fdf4 <vPortSetupTimerInterrupt+0x38>)
 800fdc8:	2200      	movs	r2, #0
 800fdca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fdcc:	4b0a      	ldr	r3, [pc, #40]	; (800fdf8 <vPortSetupTimerInterrupt+0x3c>)
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	4a0a      	ldr	r2, [pc, #40]	; (800fdfc <vPortSetupTimerInterrupt+0x40>)
 800fdd2:	fba2 2303 	umull	r2, r3, r2, r3
 800fdd6:	099b      	lsrs	r3, r3, #6
 800fdd8:	4a09      	ldr	r2, [pc, #36]	; (800fe00 <vPortSetupTimerInterrupt+0x44>)
 800fdda:	3b01      	subs	r3, #1
 800fddc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800fdde:	4b04      	ldr	r3, [pc, #16]	; (800fdf0 <vPortSetupTimerInterrupt+0x34>)
 800fde0:	2207      	movs	r2, #7
 800fde2:	601a      	str	r2, [r3, #0]
}
 800fde4:	bf00      	nop
 800fde6:	46bd      	mov	sp, r7
 800fde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdec:	4770      	bx	lr
 800fdee:	bf00      	nop
 800fdf0:	e000e010 	.word	0xe000e010
 800fdf4:	e000e018 	.word	0xe000e018
 800fdf8:	10000004 	.word	0x10000004
 800fdfc:	10624dd3 	.word	0x10624dd3
 800fe00:	e000e014 	.word	0xe000e014

0800fe04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800fe04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800fe14 <vPortEnableVFP+0x10>
 800fe08:	6801      	ldr	r1, [r0, #0]
 800fe0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800fe0e:	6001      	str	r1, [r0, #0]
 800fe10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800fe12:	bf00      	nop
 800fe14:	e000ed88 	.word	0xe000ed88

0800fe18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800fe18:	b480      	push	{r7}
 800fe1a:	b085      	sub	sp, #20
 800fe1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800fe1e:	f3ef 8305 	mrs	r3, IPSR
 800fe22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	2b0f      	cmp	r3, #15
 800fe28:	d914      	bls.n	800fe54 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800fe2a:	4a17      	ldr	r2, [pc, #92]	; (800fe88 <vPortValidateInterruptPriority+0x70>)
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	4413      	add	r3, r2
 800fe30:	781b      	ldrb	r3, [r3, #0]
 800fe32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800fe34:	4b15      	ldr	r3, [pc, #84]	; (800fe8c <vPortValidateInterruptPriority+0x74>)
 800fe36:	781b      	ldrb	r3, [r3, #0]
 800fe38:	7afa      	ldrb	r2, [r7, #11]
 800fe3a:	429a      	cmp	r2, r3
 800fe3c:	d20a      	bcs.n	800fe54 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800fe3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe42:	f383 8811 	msr	BASEPRI, r3
 800fe46:	f3bf 8f6f 	isb	sy
 800fe4a:	f3bf 8f4f 	dsb	sy
 800fe4e:	607b      	str	r3, [r7, #4]
}
 800fe50:	bf00      	nop
 800fe52:	e7fe      	b.n	800fe52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800fe54:	4b0e      	ldr	r3, [pc, #56]	; (800fe90 <vPortValidateInterruptPriority+0x78>)
 800fe56:	681b      	ldr	r3, [r3, #0]
 800fe58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800fe5c:	4b0d      	ldr	r3, [pc, #52]	; (800fe94 <vPortValidateInterruptPriority+0x7c>)
 800fe5e:	681b      	ldr	r3, [r3, #0]
 800fe60:	429a      	cmp	r2, r3
 800fe62:	d90a      	bls.n	800fe7a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800fe64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe68:	f383 8811 	msr	BASEPRI, r3
 800fe6c:	f3bf 8f6f 	isb	sy
 800fe70:	f3bf 8f4f 	dsb	sy
 800fe74:	603b      	str	r3, [r7, #0]
}
 800fe76:	bf00      	nop
 800fe78:	e7fe      	b.n	800fe78 <vPortValidateInterruptPriority+0x60>
	}
 800fe7a:	bf00      	nop
 800fe7c:	3714      	adds	r7, #20
 800fe7e:	46bd      	mov	sp, r7
 800fe80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe84:	4770      	bx	lr
 800fe86:	bf00      	nop
 800fe88:	e000e3f0 	.word	0xe000e3f0
 800fe8c:	20003734 	.word	0x20003734
 800fe90:	e000ed0c 	.word	0xe000ed0c
 800fe94:	20003738 	.word	0x20003738

0800fe98 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800fe98:	b580      	push	{r7, lr}
 800fe9a:	b08a      	sub	sp, #40	; 0x28
 800fe9c:	af00      	add	r7, sp, #0
 800fe9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800fea0:	2300      	movs	r3, #0
 800fea2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800fea4:	f7fe fa40 	bl	800e328 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800fea8:	4b5b      	ldr	r3, [pc, #364]	; (8010018 <pvPortMalloc+0x180>)
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	2b00      	cmp	r3, #0
 800feae:	d101      	bne.n	800feb4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800feb0:	f000 f920 	bl	80100f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800feb4:	4b59      	ldr	r3, [pc, #356]	; (801001c <pvPortMalloc+0x184>)
 800feb6:	681a      	ldr	r2, [r3, #0]
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	4013      	ands	r3, r2
 800febc:	2b00      	cmp	r3, #0
 800febe:	f040 8093 	bne.w	800ffe8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d01d      	beq.n	800ff04 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800fec8:	2208      	movs	r2, #8
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	4413      	add	r3, r2
 800fece:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	f003 0307 	and.w	r3, r3, #7
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d014      	beq.n	800ff04 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	f023 0307 	bic.w	r3, r3, #7
 800fee0:	3308      	adds	r3, #8
 800fee2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	f003 0307 	and.w	r3, r3, #7
 800feea:	2b00      	cmp	r3, #0
 800feec:	d00a      	beq.n	800ff04 <pvPortMalloc+0x6c>
	__asm volatile
 800feee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fef2:	f383 8811 	msr	BASEPRI, r3
 800fef6:	f3bf 8f6f 	isb	sy
 800fefa:	f3bf 8f4f 	dsb	sy
 800fefe:	617b      	str	r3, [r7, #20]
}
 800ff00:	bf00      	nop
 800ff02:	e7fe      	b.n	800ff02 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d06e      	beq.n	800ffe8 <pvPortMalloc+0x150>
 800ff0a:	4b45      	ldr	r3, [pc, #276]	; (8010020 <pvPortMalloc+0x188>)
 800ff0c:	681b      	ldr	r3, [r3, #0]
 800ff0e:	687a      	ldr	r2, [r7, #4]
 800ff10:	429a      	cmp	r2, r3
 800ff12:	d869      	bhi.n	800ffe8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ff14:	4b43      	ldr	r3, [pc, #268]	; (8010024 <pvPortMalloc+0x18c>)
 800ff16:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ff18:	4b42      	ldr	r3, [pc, #264]	; (8010024 <pvPortMalloc+0x18c>)
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ff1e:	e004      	b.n	800ff2a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ff20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff22:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ff24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff26:	681b      	ldr	r3, [r3, #0]
 800ff28:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ff2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff2c:	685b      	ldr	r3, [r3, #4]
 800ff2e:	687a      	ldr	r2, [r7, #4]
 800ff30:	429a      	cmp	r2, r3
 800ff32:	d903      	bls.n	800ff3c <pvPortMalloc+0xa4>
 800ff34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff36:	681b      	ldr	r3, [r3, #0]
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d1f1      	bne.n	800ff20 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ff3c:	4b36      	ldr	r3, [pc, #216]	; (8010018 <pvPortMalloc+0x180>)
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ff42:	429a      	cmp	r2, r3
 800ff44:	d050      	beq.n	800ffe8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ff46:	6a3b      	ldr	r3, [r7, #32]
 800ff48:	681b      	ldr	r3, [r3, #0]
 800ff4a:	2208      	movs	r2, #8
 800ff4c:	4413      	add	r3, r2
 800ff4e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ff50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff52:	681a      	ldr	r2, [r3, #0]
 800ff54:	6a3b      	ldr	r3, [r7, #32]
 800ff56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ff58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff5a:	685a      	ldr	r2, [r3, #4]
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	1ad2      	subs	r2, r2, r3
 800ff60:	2308      	movs	r3, #8
 800ff62:	005b      	lsls	r3, r3, #1
 800ff64:	429a      	cmp	r2, r3
 800ff66:	d91f      	bls.n	800ffa8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ff68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	4413      	add	r3, r2
 800ff6e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ff70:	69bb      	ldr	r3, [r7, #24]
 800ff72:	f003 0307 	and.w	r3, r3, #7
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d00a      	beq.n	800ff90 <pvPortMalloc+0xf8>
	__asm volatile
 800ff7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff7e:	f383 8811 	msr	BASEPRI, r3
 800ff82:	f3bf 8f6f 	isb	sy
 800ff86:	f3bf 8f4f 	dsb	sy
 800ff8a:	613b      	str	r3, [r7, #16]
}
 800ff8c:	bf00      	nop
 800ff8e:	e7fe      	b.n	800ff8e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ff90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff92:	685a      	ldr	r2, [r3, #4]
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	1ad2      	subs	r2, r2, r3
 800ff98:	69bb      	ldr	r3, [r7, #24]
 800ff9a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ff9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff9e:	687a      	ldr	r2, [r7, #4]
 800ffa0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ffa2:	69b8      	ldr	r0, [r7, #24]
 800ffa4:	f000 f908 	bl	80101b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ffa8:	4b1d      	ldr	r3, [pc, #116]	; (8010020 <pvPortMalloc+0x188>)
 800ffaa:	681a      	ldr	r2, [r3, #0]
 800ffac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffae:	685b      	ldr	r3, [r3, #4]
 800ffb0:	1ad3      	subs	r3, r2, r3
 800ffb2:	4a1b      	ldr	r2, [pc, #108]	; (8010020 <pvPortMalloc+0x188>)
 800ffb4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ffb6:	4b1a      	ldr	r3, [pc, #104]	; (8010020 <pvPortMalloc+0x188>)
 800ffb8:	681a      	ldr	r2, [r3, #0]
 800ffba:	4b1b      	ldr	r3, [pc, #108]	; (8010028 <pvPortMalloc+0x190>)
 800ffbc:	681b      	ldr	r3, [r3, #0]
 800ffbe:	429a      	cmp	r2, r3
 800ffc0:	d203      	bcs.n	800ffca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ffc2:	4b17      	ldr	r3, [pc, #92]	; (8010020 <pvPortMalloc+0x188>)
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	4a18      	ldr	r2, [pc, #96]	; (8010028 <pvPortMalloc+0x190>)
 800ffc8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ffca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffcc:	685a      	ldr	r2, [r3, #4]
 800ffce:	4b13      	ldr	r3, [pc, #76]	; (801001c <pvPortMalloc+0x184>)
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	431a      	orrs	r2, r3
 800ffd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffd6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ffd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffda:	2200      	movs	r2, #0
 800ffdc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ffde:	4b13      	ldr	r3, [pc, #76]	; (801002c <pvPortMalloc+0x194>)
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	3301      	adds	r3, #1
 800ffe4:	4a11      	ldr	r2, [pc, #68]	; (801002c <pvPortMalloc+0x194>)
 800ffe6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ffe8:	f7fe f9ac 	bl	800e344 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ffec:	69fb      	ldr	r3, [r7, #28]
 800ffee:	f003 0307 	and.w	r3, r3, #7
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d00a      	beq.n	801000c <pvPortMalloc+0x174>
	__asm volatile
 800fff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fffa:	f383 8811 	msr	BASEPRI, r3
 800fffe:	f3bf 8f6f 	isb	sy
 8010002:	f3bf 8f4f 	dsb	sy
 8010006:	60fb      	str	r3, [r7, #12]
}
 8010008:	bf00      	nop
 801000a:	e7fe      	b.n	801000a <pvPortMalloc+0x172>
	return pvReturn;
 801000c:	69fb      	ldr	r3, [r7, #28]
}
 801000e:	4618      	mov	r0, r3
 8010010:	3728      	adds	r7, #40	; 0x28
 8010012:	46bd      	mov	sp, r7
 8010014:	bd80      	pop	{r7, pc}
 8010016:	bf00      	nop
 8010018:	20013744 	.word	0x20013744
 801001c:	20013758 	.word	0x20013758
 8010020:	20013748 	.word	0x20013748
 8010024:	2001373c 	.word	0x2001373c
 8010028:	2001374c 	.word	0x2001374c
 801002c:	20013750 	.word	0x20013750

08010030 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010030:	b580      	push	{r7, lr}
 8010032:	b086      	sub	sp, #24
 8010034:	af00      	add	r7, sp, #0
 8010036:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	2b00      	cmp	r3, #0
 8010040:	d04d      	beq.n	80100de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010042:	2308      	movs	r3, #8
 8010044:	425b      	negs	r3, r3
 8010046:	697a      	ldr	r2, [r7, #20]
 8010048:	4413      	add	r3, r2
 801004a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801004c:	697b      	ldr	r3, [r7, #20]
 801004e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010050:	693b      	ldr	r3, [r7, #16]
 8010052:	685a      	ldr	r2, [r3, #4]
 8010054:	4b24      	ldr	r3, [pc, #144]	; (80100e8 <vPortFree+0xb8>)
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	4013      	ands	r3, r2
 801005a:	2b00      	cmp	r3, #0
 801005c:	d10a      	bne.n	8010074 <vPortFree+0x44>
	__asm volatile
 801005e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010062:	f383 8811 	msr	BASEPRI, r3
 8010066:	f3bf 8f6f 	isb	sy
 801006a:	f3bf 8f4f 	dsb	sy
 801006e:	60fb      	str	r3, [r7, #12]
}
 8010070:	bf00      	nop
 8010072:	e7fe      	b.n	8010072 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010074:	693b      	ldr	r3, [r7, #16]
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	2b00      	cmp	r3, #0
 801007a:	d00a      	beq.n	8010092 <vPortFree+0x62>
	__asm volatile
 801007c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010080:	f383 8811 	msr	BASEPRI, r3
 8010084:	f3bf 8f6f 	isb	sy
 8010088:	f3bf 8f4f 	dsb	sy
 801008c:	60bb      	str	r3, [r7, #8]
}
 801008e:	bf00      	nop
 8010090:	e7fe      	b.n	8010090 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010092:	693b      	ldr	r3, [r7, #16]
 8010094:	685a      	ldr	r2, [r3, #4]
 8010096:	4b14      	ldr	r3, [pc, #80]	; (80100e8 <vPortFree+0xb8>)
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	4013      	ands	r3, r2
 801009c:	2b00      	cmp	r3, #0
 801009e:	d01e      	beq.n	80100de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80100a0:	693b      	ldr	r3, [r7, #16]
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d11a      	bne.n	80100de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80100a8:	693b      	ldr	r3, [r7, #16]
 80100aa:	685a      	ldr	r2, [r3, #4]
 80100ac:	4b0e      	ldr	r3, [pc, #56]	; (80100e8 <vPortFree+0xb8>)
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	43db      	mvns	r3, r3
 80100b2:	401a      	ands	r2, r3
 80100b4:	693b      	ldr	r3, [r7, #16]
 80100b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80100b8:	f7fe f936 	bl	800e328 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80100bc:	693b      	ldr	r3, [r7, #16]
 80100be:	685a      	ldr	r2, [r3, #4]
 80100c0:	4b0a      	ldr	r3, [pc, #40]	; (80100ec <vPortFree+0xbc>)
 80100c2:	681b      	ldr	r3, [r3, #0]
 80100c4:	4413      	add	r3, r2
 80100c6:	4a09      	ldr	r2, [pc, #36]	; (80100ec <vPortFree+0xbc>)
 80100c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80100ca:	6938      	ldr	r0, [r7, #16]
 80100cc:	f000 f874 	bl	80101b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80100d0:	4b07      	ldr	r3, [pc, #28]	; (80100f0 <vPortFree+0xc0>)
 80100d2:	681b      	ldr	r3, [r3, #0]
 80100d4:	3301      	adds	r3, #1
 80100d6:	4a06      	ldr	r2, [pc, #24]	; (80100f0 <vPortFree+0xc0>)
 80100d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80100da:	f7fe f933 	bl	800e344 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80100de:	bf00      	nop
 80100e0:	3718      	adds	r7, #24
 80100e2:	46bd      	mov	sp, r7
 80100e4:	bd80      	pop	{r7, pc}
 80100e6:	bf00      	nop
 80100e8:	20013758 	.word	0x20013758
 80100ec:	20013748 	.word	0x20013748
 80100f0:	20013754 	.word	0x20013754

080100f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80100f4:	b480      	push	{r7}
 80100f6:	b085      	sub	sp, #20
 80100f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80100fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80100fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010100:	4b27      	ldr	r3, [pc, #156]	; (80101a0 <prvHeapInit+0xac>)
 8010102:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010104:	68fb      	ldr	r3, [r7, #12]
 8010106:	f003 0307 	and.w	r3, r3, #7
 801010a:	2b00      	cmp	r3, #0
 801010c:	d00c      	beq.n	8010128 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801010e:	68fb      	ldr	r3, [r7, #12]
 8010110:	3307      	adds	r3, #7
 8010112:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010114:	68fb      	ldr	r3, [r7, #12]
 8010116:	f023 0307 	bic.w	r3, r3, #7
 801011a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801011c:	68ba      	ldr	r2, [r7, #8]
 801011e:	68fb      	ldr	r3, [r7, #12]
 8010120:	1ad3      	subs	r3, r2, r3
 8010122:	4a1f      	ldr	r2, [pc, #124]	; (80101a0 <prvHeapInit+0xac>)
 8010124:	4413      	add	r3, r2
 8010126:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010128:	68fb      	ldr	r3, [r7, #12]
 801012a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801012c:	4a1d      	ldr	r2, [pc, #116]	; (80101a4 <prvHeapInit+0xb0>)
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010132:	4b1c      	ldr	r3, [pc, #112]	; (80101a4 <prvHeapInit+0xb0>)
 8010134:	2200      	movs	r2, #0
 8010136:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	68ba      	ldr	r2, [r7, #8]
 801013c:	4413      	add	r3, r2
 801013e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010140:	2208      	movs	r2, #8
 8010142:	68fb      	ldr	r3, [r7, #12]
 8010144:	1a9b      	subs	r3, r3, r2
 8010146:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010148:	68fb      	ldr	r3, [r7, #12]
 801014a:	f023 0307 	bic.w	r3, r3, #7
 801014e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010150:	68fb      	ldr	r3, [r7, #12]
 8010152:	4a15      	ldr	r2, [pc, #84]	; (80101a8 <prvHeapInit+0xb4>)
 8010154:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010156:	4b14      	ldr	r3, [pc, #80]	; (80101a8 <prvHeapInit+0xb4>)
 8010158:	681b      	ldr	r3, [r3, #0]
 801015a:	2200      	movs	r2, #0
 801015c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801015e:	4b12      	ldr	r3, [pc, #72]	; (80101a8 <prvHeapInit+0xb4>)
 8010160:	681b      	ldr	r3, [r3, #0]
 8010162:	2200      	movs	r2, #0
 8010164:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801016a:	683b      	ldr	r3, [r7, #0]
 801016c:	68fa      	ldr	r2, [r7, #12]
 801016e:	1ad2      	subs	r2, r2, r3
 8010170:	683b      	ldr	r3, [r7, #0]
 8010172:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010174:	4b0c      	ldr	r3, [pc, #48]	; (80101a8 <prvHeapInit+0xb4>)
 8010176:	681a      	ldr	r2, [r3, #0]
 8010178:	683b      	ldr	r3, [r7, #0]
 801017a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801017c:	683b      	ldr	r3, [r7, #0]
 801017e:	685b      	ldr	r3, [r3, #4]
 8010180:	4a0a      	ldr	r2, [pc, #40]	; (80101ac <prvHeapInit+0xb8>)
 8010182:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010184:	683b      	ldr	r3, [r7, #0]
 8010186:	685b      	ldr	r3, [r3, #4]
 8010188:	4a09      	ldr	r2, [pc, #36]	; (80101b0 <prvHeapInit+0xbc>)
 801018a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801018c:	4b09      	ldr	r3, [pc, #36]	; (80101b4 <prvHeapInit+0xc0>)
 801018e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010192:	601a      	str	r2, [r3, #0]
}
 8010194:	bf00      	nop
 8010196:	3714      	adds	r7, #20
 8010198:	46bd      	mov	sp, r7
 801019a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801019e:	4770      	bx	lr
 80101a0:	2000373c 	.word	0x2000373c
 80101a4:	2001373c 	.word	0x2001373c
 80101a8:	20013744 	.word	0x20013744
 80101ac:	2001374c 	.word	0x2001374c
 80101b0:	20013748 	.word	0x20013748
 80101b4:	20013758 	.word	0x20013758

080101b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80101b8:	b480      	push	{r7}
 80101ba:	b085      	sub	sp, #20
 80101bc:	af00      	add	r7, sp, #0
 80101be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80101c0:	4b28      	ldr	r3, [pc, #160]	; (8010264 <prvInsertBlockIntoFreeList+0xac>)
 80101c2:	60fb      	str	r3, [r7, #12]
 80101c4:	e002      	b.n	80101cc <prvInsertBlockIntoFreeList+0x14>
 80101c6:	68fb      	ldr	r3, [r7, #12]
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	60fb      	str	r3, [r7, #12]
 80101cc:	68fb      	ldr	r3, [r7, #12]
 80101ce:	681b      	ldr	r3, [r3, #0]
 80101d0:	687a      	ldr	r2, [r7, #4]
 80101d2:	429a      	cmp	r2, r3
 80101d4:	d8f7      	bhi.n	80101c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80101d6:	68fb      	ldr	r3, [r7, #12]
 80101d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80101da:	68fb      	ldr	r3, [r7, #12]
 80101dc:	685b      	ldr	r3, [r3, #4]
 80101de:	68ba      	ldr	r2, [r7, #8]
 80101e0:	4413      	add	r3, r2
 80101e2:	687a      	ldr	r2, [r7, #4]
 80101e4:	429a      	cmp	r2, r3
 80101e6:	d108      	bne.n	80101fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80101e8:	68fb      	ldr	r3, [r7, #12]
 80101ea:	685a      	ldr	r2, [r3, #4]
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	685b      	ldr	r3, [r3, #4]
 80101f0:	441a      	add	r2, r3
 80101f2:	68fb      	ldr	r3, [r7, #12]
 80101f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80101f6:	68fb      	ldr	r3, [r7, #12]
 80101f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	685b      	ldr	r3, [r3, #4]
 8010202:	68ba      	ldr	r2, [r7, #8]
 8010204:	441a      	add	r2, r3
 8010206:	68fb      	ldr	r3, [r7, #12]
 8010208:	681b      	ldr	r3, [r3, #0]
 801020a:	429a      	cmp	r2, r3
 801020c:	d118      	bne.n	8010240 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801020e:	68fb      	ldr	r3, [r7, #12]
 8010210:	681a      	ldr	r2, [r3, #0]
 8010212:	4b15      	ldr	r3, [pc, #84]	; (8010268 <prvInsertBlockIntoFreeList+0xb0>)
 8010214:	681b      	ldr	r3, [r3, #0]
 8010216:	429a      	cmp	r2, r3
 8010218:	d00d      	beq.n	8010236 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	685a      	ldr	r2, [r3, #4]
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	681b      	ldr	r3, [r3, #0]
 8010222:	685b      	ldr	r3, [r3, #4]
 8010224:	441a      	add	r2, r3
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801022a:	68fb      	ldr	r3, [r7, #12]
 801022c:	681b      	ldr	r3, [r3, #0]
 801022e:	681a      	ldr	r2, [r3, #0]
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	601a      	str	r2, [r3, #0]
 8010234:	e008      	b.n	8010248 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010236:	4b0c      	ldr	r3, [pc, #48]	; (8010268 <prvInsertBlockIntoFreeList+0xb0>)
 8010238:	681a      	ldr	r2, [r3, #0]
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	601a      	str	r2, [r3, #0]
 801023e:	e003      	b.n	8010248 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010240:	68fb      	ldr	r3, [r7, #12]
 8010242:	681a      	ldr	r2, [r3, #0]
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010248:	68fa      	ldr	r2, [r7, #12]
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	429a      	cmp	r2, r3
 801024e:	d002      	beq.n	8010256 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010250:	68fb      	ldr	r3, [r7, #12]
 8010252:	687a      	ldr	r2, [r7, #4]
 8010254:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010256:	bf00      	nop
 8010258:	3714      	adds	r7, #20
 801025a:	46bd      	mov	sp, r7
 801025c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010260:	4770      	bx	lr
 8010262:	bf00      	nop
 8010264:	2001373c 	.word	0x2001373c
 8010268:	20013744 	.word	0x20013744

0801026c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 801026c:	b580      	push	{r7, lr}
 801026e:	b084      	sub	sp, #16
 8010270:	af00      	add	r7, sp, #0
 8010272:	6078      	str	r0, [r7, #4]
 8010274:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8010276:	f007 fa9b 	bl	80177b0 <sys_timeouts_sleeptime>
 801027a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 801027c:	68fb      	ldr	r3, [r7, #12]
 801027e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010282:	d10b      	bne.n	801029c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8010284:	4813      	ldr	r0, [pc, #76]	; (80102d4 <tcpip_timeouts_mbox_fetch+0x68>)
 8010286:	f00c f9a8 	bl	801c5da <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 801028a:	2200      	movs	r2, #0
 801028c:	6839      	ldr	r1, [r7, #0]
 801028e:	6878      	ldr	r0, [r7, #4]
 8010290:	f00c f930 	bl	801c4f4 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8010294:	480f      	ldr	r0, [pc, #60]	; (80102d4 <tcpip_timeouts_mbox_fetch+0x68>)
 8010296:	f00c f991 	bl	801c5bc <sys_mutex_lock>
    return;
 801029a:	e018      	b.n	80102ce <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d102      	bne.n	80102a8 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 80102a2:	f007 fa4b 	bl	801773c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80102a6:	e7e6      	b.n	8010276 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 80102a8:	480a      	ldr	r0, [pc, #40]	; (80102d4 <tcpip_timeouts_mbox_fetch+0x68>)
 80102aa:	f00c f996 	bl	801c5da <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 80102ae:	68fa      	ldr	r2, [r7, #12]
 80102b0:	6839      	ldr	r1, [r7, #0]
 80102b2:	6878      	ldr	r0, [r7, #4]
 80102b4:	f00c f91e 	bl	801c4f4 <sys_arch_mbox_fetch>
 80102b8:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 80102ba:	4806      	ldr	r0, [pc, #24]	; (80102d4 <tcpip_timeouts_mbox_fetch+0x68>)
 80102bc:	f00c f97e 	bl	801c5bc <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 80102c0:	68bb      	ldr	r3, [r7, #8]
 80102c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102c6:	d102      	bne.n	80102ce <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 80102c8:	f007 fa38 	bl	801773c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80102cc:	e7d3      	b.n	8010276 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 80102ce:	3710      	adds	r7, #16
 80102d0:	46bd      	mov	sp, r7
 80102d2:	bd80      	pop	{r7, pc}
 80102d4:	200172e0 	.word	0x200172e0

080102d8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 80102d8:	b580      	push	{r7, lr}
 80102da:	b084      	sub	sp, #16
 80102dc:	af00      	add	r7, sp, #0
 80102de:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 80102e0:	4810      	ldr	r0, [pc, #64]	; (8010324 <tcpip_thread+0x4c>)
 80102e2:	f00c f96b 	bl	801c5bc <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 80102e6:	4b10      	ldr	r3, [pc, #64]	; (8010328 <tcpip_thread+0x50>)
 80102e8:	681b      	ldr	r3, [r3, #0]
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d005      	beq.n	80102fa <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 80102ee:	4b0e      	ldr	r3, [pc, #56]	; (8010328 <tcpip_thread+0x50>)
 80102f0:	681b      	ldr	r3, [r3, #0]
 80102f2:	4a0e      	ldr	r2, [pc, #56]	; (801032c <tcpip_thread+0x54>)
 80102f4:	6812      	ldr	r2, [r2, #0]
 80102f6:	4610      	mov	r0, r2
 80102f8:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80102fa:	f107 030c 	add.w	r3, r7, #12
 80102fe:	4619      	mov	r1, r3
 8010300:	480b      	ldr	r0, [pc, #44]	; (8010330 <tcpip_thread+0x58>)
 8010302:	f7ff ffb3 	bl	801026c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8010306:	68fb      	ldr	r3, [r7, #12]
 8010308:	2b00      	cmp	r3, #0
 801030a:	d106      	bne.n	801031a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 801030c:	4b09      	ldr	r3, [pc, #36]	; (8010334 <tcpip_thread+0x5c>)
 801030e:	2291      	movs	r2, #145	; 0x91
 8010310:	4909      	ldr	r1, [pc, #36]	; (8010338 <tcpip_thread+0x60>)
 8010312:	480a      	ldr	r0, [pc, #40]	; (801033c <tcpip_thread+0x64>)
 8010314:	f00d f8b4 	bl	801d480 <iprintf>
      continue;
 8010318:	e003      	b.n	8010322 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 801031a:	68fb      	ldr	r3, [r7, #12]
 801031c:	4618      	mov	r0, r3
 801031e:	f000 f80f 	bl	8010340 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8010322:	e7ea      	b.n	80102fa <tcpip_thread+0x22>
 8010324:	200172e0 	.word	0x200172e0
 8010328:	2001375c 	.word	0x2001375c
 801032c:	20013760 	.word	0x20013760
 8010330:	20013764 	.word	0x20013764
 8010334:	0801f760 	.word	0x0801f760
 8010338:	0801f790 	.word	0x0801f790
 801033c:	0801f7b0 	.word	0x0801f7b0

08010340 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8010340:	b580      	push	{r7, lr}
 8010342:	b082      	sub	sp, #8
 8010344:	af00      	add	r7, sp, #0
 8010346:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	781b      	ldrb	r3, [r3, #0]
 801034c:	2b02      	cmp	r3, #2
 801034e:	d026      	beq.n	801039e <tcpip_thread_handle_msg+0x5e>
 8010350:	2b02      	cmp	r3, #2
 8010352:	dc2b      	bgt.n	80103ac <tcpip_thread_handle_msg+0x6c>
 8010354:	2b00      	cmp	r3, #0
 8010356:	d002      	beq.n	801035e <tcpip_thread_handle_msg+0x1e>
 8010358:	2b01      	cmp	r3, #1
 801035a:	d015      	beq.n	8010388 <tcpip_thread_handle_msg+0x48>
 801035c:	e026      	b.n	80103ac <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	68db      	ldr	r3, [r3, #12]
 8010362:	687a      	ldr	r2, [r7, #4]
 8010364:	6850      	ldr	r0, [r2, #4]
 8010366:	687a      	ldr	r2, [r7, #4]
 8010368:	6892      	ldr	r2, [r2, #8]
 801036a:	4611      	mov	r1, r2
 801036c:	4798      	blx	r3
 801036e:	4603      	mov	r3, r0
 8010370:	2b00      	cmp	r3, #0
 8010372:	d004      	beq.n	801037e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	685b      	ldr	r3, [r3, #4]
 8010378:	4618      	mov	r0, r3
 801037a:	f001 fcd1 	bl	8011d20 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801037e:	6879      	ldr	r1, [r7, #4]
 8010380:	2009      	movs	r0, #9
 8010382:	f000 fe1d 	bl	8010fc0 <memp_free>
      break;
 8010386:	e018      	b.n	80103ba <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	685b      	ldr	r3, [r3, #4]
 801038c:	687a      	ldr	r2, [r7, #4]
 801038e:	6892      	ldr	r2, [r2, #8]
 8010390:	4610      	mov	r0, r2
 8010392:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8010394:	6879      	ldr	r1, [r7, #4]
 8010396:	2008      	movs	r0, #8
 8010398:	f000 fe12 	bl	8010fc0 <memp_free>
      break;
 801039c:	e00d      	b.n	80103ba <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	685b      	ldr	r3, [r3, #4]
 80103a2:	687a      	ldr	r2, [r7, #4]
 80103a4:	6892      	ldr	r2, [r2, #8]
 80103a6:	4610      	mov	r0, r2
 80103a8:	4798      	blx	r3
      break;
 80103aa:	e006      	b.n	80103ba <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80103ac:	4b05      	ldr	r3, [pc, #20]	; (80103c4 <tcpip_thread_handle_msg+0x84>)
 80103ae:	22cf      	movs	r2, #207	; 0xcf
 80103b0:	4905      	ldr	r1, [pc, #20]	; (80103c8 <tcpip_thread_handle_msg+0x88>)
 80103b2:	4806      	ldr	r0, [pc, #24]	; (80103cc <tcpip_thread_handle_msg+0x8c>)
 80103b4:	f00d f864 	bl	801d480 <iprintf>
      break;
 80103b8:	bf00      	nop
  }
}
 80103ba:	bf00      	nop
 80103bc:	3708      	adds	r7, #8
 80103be:	46bd      	mov	sp, r7
 80103c0:	bd80      	pop	{r7, pc}
 80103c2:	bf00      	nop
 80103c4:	0801f760 	.word	0x0801f760
 80103c8:	0801f790 	.word	0x0801f790
 80103cc:	0801f7b0 	.word	0x0801f7b0

080103d0 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 80103d0:	b580      	push	{r7, lr}
 80103d2:	b086      	sub	sp, #24
 80103d4:	af00      	add	r7, sp, #0
 80103d6:	60f8      	str	r0, [r7, #12]
 80103d8:	60b9      	str	r1, [r7, #8]
 80103da:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80103dc:	481a      	ldr	r0, [pc, #104]	; (8010448 <tcpip_inpkt+0x78>)
 80103de:	f00c f8ba 	bl	801c556 <sys_mbox_valid>
 80103e2:	4603      	mov	r3, r0
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d105      	bne.n	80103f4 <tcpip_inpkt+0x24>
 80103e8:	4b18      	ldr	r3, [pc, #96]	; (801044c <tcpip_inpkt+0x7c>)
 80103ea:	22fc      	movs	r2, #252	; 0xfc
 80103ec:	4918      	ldr	r1, [pc, #96]	; (8010450 <tcpip_inpkt+0x80>)
 80103ee:	4819      	ldr	r0, [pc, #100]	; (8010454 <tcpip_inpkt+0x84>)
 80103f0:	f00d f846 	bl	801d480 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 80103f4:	2009      	movs	r0, #9
 80103f6:	f000 fd91 	bl	8010f1c <memp_malloc>
 80103fa:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 80103fc:	697b      	ldr	r3, [r7, #20]
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d102      	bne.n	8010408 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8010402:	f04f 33ff 	mov.w	r3, #4294967295
 8010406:	e01a      	b.n	801043e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8010408:	697b      	ldr	r3, [r7, #20]
 801040a:	2200      	movs	r2, #0
 801040c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 801040e:	697b      	ldr	r3, [r7, #20]
 8010410:	68fa      	ldr	r2, [r7, #12]
 8010412:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8010414:	697b      	ldr	r3, [r7, #20]
 8010416:	68ba      	ldr	r2, [r7, #8]
 8010418:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 801041a:	697b      	ldr	r3, [r7, #20]
 801041c:	687a      	ldr	r2, [r7, #4]
 801041e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8010420:	6979      	ldr	r1, [r7, #20]
 8010422:	4809      	ldr	r0, [pc, #36]	; (8010448 <tcpip_inpkt+0x78>)
 8010424:	f00c f84c 	bl	801c4c0 <sys_mbox_trypost>
 8010428:	4603      	mov	r3, r0
 801042a:	2b00      	cmp	r3, #0
 801042c:	d006      	beq.n	801043c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801042e:	6979      	ldr	r1, [r7, #20]
 8010430:	2009      	movs	r0, #9
 8010432:	f000 fdc5 	bl	8010fc0 <memp_free>
    return ERR_MEM;
 8010436:	f04f 33ff 	mov.w	r3, #4294967295
 801043a:	e000      	b.n	801043e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 801043c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 801043e:	4618      	mov	r0, r3
 8010440:	3718      	adds	r7, #24
 8010442:	46bd      	mov	sp, r7
 8010444:	bd80      	pop	{r7, pc}
 8010446:	bf00      	nop
 8010448:	20013764 	.word	0x20013764
 801044c:	0801f760 	.word	0x0801f760
 8010450:	0801f7d8 	.word	0x0801f7d8
 8010454:	0801f7b0 	.word	0x0801f7b0

08010458 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8010458:	b580      	push	{r7, lr}
 801045a:	b082      	sub	sp, #8
 801045c:	af00      	add	r7, sp, #0
 801045e:	6078      	str	r0, [r7, #4]
 8010460:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8010462:	683b      	ldr	r3, [r7, #0]
 8010464:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010468:	f003 0318 	and.w	r3, r3, #24
 801046c:	2b00      	cmp	r3, #0
 801046e:	d006      	beq.n	801047e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8010470:	4a08      	ldr	r2, [pc, #32]	; (8010494 <tcpip_input+0x3c>)
 8010472:	6839      	ldr	r1, [r7, #0]
 8010474:	6878      	ldr	r0, [r7, #4]
 8010476:	f7ff ffab 	bl	80103d0 <tcpip_inpkt>
 801047a:	4603      	mov	r3, r0
 801047c:	e005      	b.n	801048a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 801047e:	4a06      	ldr	r2, [pc, #24]	; (8010498 <tcpip_input+0x40>)
 8010480:	6839      	ldr	r1, [r7, #0]
 8010482:	6878      	ldr	r0, [r7, #4]
 8010484:	f7ff ffa4 	bl	80103d0 <tcpip_inpkt>
 8010488:	4603      	mov	r3, r0
}
 801048a:	4618      	mov	r0, r3
 801048c:	3708      	adds	r7, #8
 801048e:	46bd      	mov	sp, r7
 8010490:	bd80      	pop	{r7, pc}
 8010492:	bf00      	nop
 8010494:	0801c2e1 	.word	0x0801c2e1
 8010498:	0801b1ad 	.word	0x0801b1ad

0801049c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 801049c:	b580      	push	{r7, lr}
 801049e:	b084      	sub	sp, #16
 80104a0:	af00      	add	r7, sp, #0
 80104a2:	6078      	str	r0, [r7, #4]
 80104a4:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80104a6:	4819      	ldr	r0, [pc, #100]	; (801050c <tcpip_try_callback+0x70>)
 80104a8:	f00c f855 	bl	801c556 <sys_mbox_valid>
 80104ac:	4603      	mov	r3, r0
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	d106      	bne.n	80104c0 <tcpip_try_callback+0x24>
 80104b2:	4b17      	ldr	r3, [pc, #92]	; (8010510 <tcpip_try_callback+0x74>)
 80104b4:	f240 125d 	movw	r2, #349	; 0x15d
 80104b8:	4916      	ldr	r1, [pc, #88]	; (8010514 <tcpip_try_callback+0x78>)
 80104ba:	4817      	ldr	r0, [pc, #92]	; (8010518 <tcpip_try_callback+0x7c>)
 80104bc:	f00c ffe0 	bl	801d480 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 80104c0:	2008      	movs	r0, #8
 80104c2:	f000 fd2b 	bl	8010f1c <memp_malloc>
 80104c6:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 80104c8:	68fb      	ldr	r3, [r7, #12]
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d102      	bne.n	80104d4 <tcpip_try_callback+0x38>
    return ERR_MEM;
 80104ce:	f04f 33ff 	mov.w	r3, #4294967295
 80104d2:	e017      	b.n	8010504 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 80104d4:	68fb      	ldr	r3, [r7, #12]
 80104d6:	2201      	movs	r2, #1
 80104d8:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 80104da:	68fb      	ldr	r3, [r7, #12]
 80104dc:	687a      	ldr	r2, [r7, #4]
 80104de:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 80104e0:	68fb      	ldr	r3, [r7, #12]
 80104e2:	683a      	ldr	r2, [r7, #0]
 80104e4:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80104e6:	68f9      	ldr	r1, [r7, #12]
 80104e8:	4808      	ldr	r0, [pc, #32]	; (801050c <tcpip_try_callback+0x70>)
 80104ea:	f00b ffe9 	bl	801c4c0 <sys_mbox_trypost>
 80104ee:	4603      	mov	r3, r0
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d006      	beq.n	8010502 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 80104f4:	68f9      	ldr	r1, [r7, #12]
 80104f6:	2008      	movs	r0, #8
 80104f8:	f000 fd62 	bl	8010fc0 <memp_free>
    return ERR_MEM;
 80104fc:	f04f 33ff 	mov.w	r3, #4294967295
 8010500:	e000      	b.n	8010504 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8010502:	2300      	movs	r3, #0
}
 8010504:	4618      	mov	r0, r3
 8010506:	3710      	adds	r7, #16
 8010508:	46bd      	mov	sp, r7
 801050a:	bd80      	pop	{r7, pc}
 801050c:	20013764 	.word	0x20013764
 8010510:	0801f760 	.word	0x0801f760
 8010514:	0801f7d8 	.word	0x0801f7d8
 8010518:	0801f7b0 	.word	0x0801f7b0

0801051c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 801051c:	b580      	push	{r7, lr}
 801051e:	b084      	sub	sp, #16
 8010520:	af02      	add	r7, sp, #8
 8010522:	6078      	str	r0, [r7, #4]
 8010524:	6039      	str	r1, [r7, #0]
  lwip_init();
 8010526:	f000 f871 	bl	801060c <lwip_init>

  tcpip_init_done = initfunc;
 801052a:	4a17      	ldr	r2, [pc, #92]	; (8010588 <tcpip_init+0x6c>)
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8010530:	4a16      	ldr	r2, [pc, #88]	; (801058c <tcpip_init+0x70>)
 8010532:	683b      	ldr	r3, [r7, #0]
 8010534:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8010536:	2106      	movs	r1, #6
 8010538:	4815      	ldr	r0, [pc, #84]	; (8010590 <tcpip_init+0x74>)
 801053a:	f00b ffa7 	bl	801c48c <sys_mbox_new>
 801053e:	4603      	mov	r3, r0
 8010540:	2b00      	cmp	r3, #0
 8010542:	d006      	beq.n	8010552 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8010544:	4b13      	ldr	r3, [pc, #76]	; (8010594 <tcpip_init+0x78>)
 8010546:	f240 2261 	movw	r2, #609	; 0x261
 801054a:	4913      	ldr	r1, [pc, #76]	; (8010598 <tcpip_init+0x7c>)
 801054c:	4813      	ldr	r0, [pc, #76]	; (801059c <tcpip_init+0x80>)
 801054e:	f00c ff97 	bl	801d480 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8010552:	4813      	ldr	r0, [pc, #76]	; (80105a0 <tcpip_init+0x84>)
 8010554:	f00c f81c 	bl	801c590 <sys_mutex_new>
 8010558:	4603      	mov	r3, r0
 801055a:	2b00      	cmp	r3, #0
 801055c:	d006      	beq.n	801056c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 801055e:	4b0d      	ldr	r3, [pc, #52]	; (8010594 <tcpip_init+0x78>)
 8010560:	f240 2265 	movw	r2, #613	; 0x265
 8010564:	490f      	ldr	r1, [pc, #60]	; (80105a4 <tcpip_init+0x88>)
 8010566:	480d      	ldr	r0, [pc, #52]	; (801059c <tcpip_init+0x80>)
 8010568:	f00c ff8a 	bl	801d480 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 801056c:	2318      	movs	r3, #24
 801056e:	9300      	str	r3, [sp, #0]
 8010570:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010574:	2200      	movs	r2, #0
 8010576:	490c      	ldr	r1, [pc, #48]	; (80105a8 <tcpip_init+0x8c>)
 8010578:	480c      	ldr	r0, [pc, #48]	; (80105ac <tcpip_init+0x90>)
 801057a:	f00c f83b 	bl	801c5f4 <sys_thread_new>
}
 801057e:	bf00      	nop
 8010580:	3708      	adds	r7, #8
 8010582:	46bd      	mov	sp, r7
 8010584:	bd80      	pop	{r7, pc}
 8010586:	bf00      	nop
 8010588:	2001375c 	.word	0x2001375c
 801058c:	20013760 	.word	0x20013760
 8010590:	20013764 	.word	0x20013764
 8010594:	0801f760 	.word	0x0801f760
 8010598:	0801f7e8 	.word	0x0801f7e8
 801059c:	0801f7b0 	.word	0x0801f7b0
 80105a0:	200172e0 	.word	0x200172e0
 80105a4:	0801f80c 	.word	0x0801f80c
 80105a8:	080102d9 	.word	0x080102d9
 80105ac:	0801f830 	.word	0x0801f830

080105b0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80105b0:	b480      	push	{r7}
 80105b2:	b083      	sub	sp, #12
 80105b4:	af00      	add	r7, sp, #0
 80105b6:	4603      	mov	r3, r0
 80105b8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80105ba:	88fb      	ldrh	r3, [r7, #6]
 80105bc:	021b      	lsls	r3, r3, #8
 80105be:	b21a      	sxth	r2, r3
 80105c0:	88fb      	ldrh	r3, [r7, #6]
 80105c2:	0a1b      	lsrs	r3, r3, #8
 80105c4:	b29b      	uxth	r3, r3
 80105c6:	b21b      	sxth	r3, r3
 80105c8:	4313      	orrs	r3, r2
 80105ca:	b21b      	sxth	r3, r3
 80105cc:	b29b      	uxth	r3, r3
}
 80105ce:	4618      	mov	r0, r3
 80105d0:	370c      	adds	r7, #12
 80105d2:	46bd      	mov	sp, r7
 80105d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105d8:	4770      	bx	lr

080105da <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80105da:	b480      	push	{r7}
 80105dc:	b083      	sub	sp, #12
 80105de:	af00      	add	r7, sp, #0
 80105e0:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	061a      	lsls	r2, r3, #24
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	021b      	lsls	r3, r3, #8
 80105ea:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80105ee:	431a      	orrs	r2, r3
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	0a1b      	lsrs	r3, r3, #8
 80105f4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80105f8:	431a      	orrs	r2, r3
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	0e1b      	lsrs	r3, r3, #24
 80105fe:	4313      	orrs	r3, r2
}
 8010600:	4618      	mov	r0, r3
 8010602:	370c      	adds	r7, #12
 8010604:	46bd      	mov	sp, r7
 8010606:	f85d 7b04 	ldr.w	r7, [sp], #4
 801060a:	4770      	bx	lr

0801060c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 801060c:	b580      	push	{r7, lr}
 801060e:	b082      	sub	sp, #8
 8010610:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8010612:	2300      	movs	r3, #0
 8010614:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8010616:	f00b ffaf 	bl	801c578 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 801061a:	f000 f8d5 	bl	80107c8 <mem_init>
  memp_init();
 801061e:	f000 fc31 	bl	8010e84 <memp_init>
  pbuf_init();
  netif_init();
 8010622:	f000 fcf7 	bl	8011014 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8010626:	f007 f8fb 	bl	8017820 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 801062a:	f001 fe23 	bl	8012274 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 801062e:	f007 f83d 	bl	80176ac <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8010632:	bf00      	nop
 8010634:	3708      	adds	r7, #8
 8010636:	46bd      	mov	sp, r7
 8010638:	bd80      	pop	{r7, pc}
	...

0801063c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 801063c:	b480      	push	{r7}
 801063e:	b083      	sub	sp, #12
 8010640:	af00      	add	r7, sp, #0
 8010642:	4603      	mov	r3, r0
 8010644:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8010646:	4b05      	ldr	r3, [pc, #20]	; (801065c <ptr_to_mem+0x20>)
 8010648:	681a      	ldr	r2, [r3, #0]
 801064a:	88fb      	ldrh	r3, [r7, #6]
 801064c:	4413      	add	r3, r2
}
 801064e:	4618      	mov	r0, r3
 8010650:	370c      	adds	r7, #12
 8010652:	46bd      	mov	sp, r7
 8010654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010658:	4770      	bx	lr
 801065a:	bf00      	nop
 801065c:	20013768 	.word	0x20013768

08010660 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8010660:	b480      	push	{r7}
 8010662:	b083      	sub	sp, #12
 8010664:	af00      	add	r7, sp, #0
 8010666:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8010668:	4b05      	ldr	r3, [pc, #20]	; (8010680 <mem_to_ptr+0x20>)
 801066a:	681b      	ldr	r3, [r3, #0]
 801066c:	687a      	ldr	r2, [r7, #4]
 801066e:	1ad3      	subs	r3, r2, r3
 8010670:	b29b      	uxth	r3, r3
}
 8010672:	4618      	mov	r0, r3
 8010674:	370c      	adds	r7, #12
 8010676:	46bd      	mov	sp, r7
 8010678:	f85d 7b04 	ldr.w	r7, [sp], #4
 801067c:	4770      	bx	lr
 801067e:	bf00      	nop
 8010680:	20013768 	.word	0x20013768

08010684 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8010684:	b590      	push	{r4, r7, lr}
 8010686:	b085      	sub	sp, #20
 8010688:	af00      	add	r7, sp, #0
 801068a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 801068c:	4b45      	ldr	r3, [pc, #276]	; (80107a4 <plug_holes+0x120>)
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	687a      	ldr	r2, [r7, #4]
 8010692:	429a      	cmp	r2, r3
 8010694:	d206      	bcs.n	80106a4 <plug_holes+0x20>
 8010696:	4b44      	ldr	r3, [pc, #272]	; (80107a8 <plug_holes+0x124>)
 8010698:	f240 12df 	movw	r2, #479	; 0x1df
 801069c:	4943      	ldr	r1, [pc, #268]	; (80107ac <plug_holes+0x128>)
 801069e:	4844      	ldr	r0, [pc, #272]	; (80107b0 <plug_holes+0x12c>)
 80106a0:	f00c feee 	bl	801d480 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80106a4:	4b43      	ldr	r3, [pc, #268]	; (80107b4 <plug_holes+0x130>)
 80106a6:	681b      	ldr	r3, [r3, #0]
 80106a8:	687a      	ldr	r2, [r7, #4]
 80106aa:	429a      	cmp	r2, r3
 80106ac:	d306      	bcc.n	80106bc <plug_holes+0x38>
 80106ae:	4b3e      	ldr	r3, [pc, #248]	; (80107a8 <plug_holes+0x124>)
 80106b0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80106b4:	4940      	ldr	r1, [pc, #256]	; (80107b8 <plug_holes+0x134>)
 80106b6:	483e      	ldr	r0, [pc, #248]	; (80107b0 <plug_holes+0x12c>)
 80106b8:	f00c fee2 	bl	801d480 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	791b      	ldrb	r3, [r3, #4]
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	d006      	beq.n	80106d2 <plug_holes+0x4e>
 80106c4:	4b38      	ldr	r3, [pc, #224]	; (80107a8 <plug_holes+0x124>)
 80106c6:	f240 12e1 	movw	r2, #481	; 0x1e1
 80106ca:	493c      	ldr	r1, [pc, #240]	; (80107bc <plug_holes+0x138>)
 80106cc:	4838      	ldr	r0, [pc, #224]	; (80107b0 <plug_holes+0x12c>)
 80106ce:	f00c fed7 	bl	801d480 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	881b      	ldrh	r3, [r3, #0]
 80106d6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80106da:	d906      	bls.n	80106ea <plug_holes+0x66>
 80106dc:	4b32      	ldr	r3, [pc, #200]	; (80107a8 <plug_holes+0x124>)
 80106de:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80106e2:	4937      	ldr	r1, [pc, #220]	; (80107c0 <plug_holes+0x13c>)
 80106e4:	4832      	ldr	r0, [pc, #200]	; (80107b0 <plug_holes+0x12c>)
 80106e6:	f00c fecb 	bl	801d480 <iprintf>

  nmem = ptr_to_mem(mem->next);
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	881b      	ldrh	r3, [r3, #0]
 80106ee:	4618      	mov	r0, r3
 80106f0:	f7ff ffa4 	bl	801063c <ptr_to_mem>
 80106f4:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80106f6:	687a      	ldr	r2, [r7, #4]
 80106f8:	68fb      	ldr	r3, [r7, #12]
 80106fa:	429a      	cmp	r2, r3
 80106fc:	d024      	beq.n	8010748 <plug_holes+0xc4>
 80106fe:	68fb      	ldr	r3, [r7, #12]
 8010700:	791b      	ldrb	r3, [r3, #4]
 8010702:	2b00      	cmp	r3, #0
 8010704:	d120      	bne.n	8010748 <plug_holes+0xc4>
 8010706:	4b2b      	ldr	r3, [pc, #172]	; (80107b4 <plug_holes+0x130>)
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	68fa      	ldr	r2, [r7, #12]
 801070c:	429a      	cmp	r2, r3
 801070e:	d01b      	beq.n	8010748 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8010710:	4b2c      	ldr	r3, [pc, #176]	; (80107c4 <plug_holes+0x140>)
 8010712:	681b      	ldr	r3, [r3, #0]
 8010714:	68fa      	ldr	r2, [r7, #12]
 8010716:	429a      	cmp	r2, r3
 8010718:	d102      	bne.n	8010720 <plug_holes+0x9c>
      lfree = mem;
 801071a:	4a2a      	ldr	r2, [pc, #168]	; (80107c4 <plug_holes+0x140>)
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	881a      	ldrh	r2, [r3, #0]
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	881b      	ldrh	r3, [r3, #0]
 801072c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8010730:	d00a      	beq.n	8010748 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8010732:	68fb      	ldr	r3, [r7, #12]
 8010734:	881b      	ldrh	r3, [r3, #0]
 8010736:	4618      	mov	r0, r3
 8010738:	f7ff ff80 	bl	801063c <ptr_to_mem>
 801073c:	4604      	mov	r4, r0
 801073e:	6878      	ldr	r0, [r7, #4]
 8010740:	f7ff ff8e 	bl	8010660 <mem_to_ptr>
 8010744:	4603      	mov	r3, r0
 8010746:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	885b      	ldrh	r3, [r3, #2]
 801074c:	4618      	mov	r0, r3
 801074e:	f7ff ff75 	bl	801063c <ptr_to_mem>
 8010752:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8010754:	68ba      	ldr	r2, [r7, #8]
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	429a      	cmp	r2, r3
 801075a:	d01f      	beq.n	801079c <plug_holes+0x118>
 801075c:	68bb      	ldr	r3, [r7, #8]
 801075e:	791b      	ldrb	r3, [r3, #4]
 8010760:	2b00      	cmp	r3, #0
 8010762:	d11b      	bne.n	801079c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8010764:	4b17      	ldr	r3, [pc, #92]	; (80107c4 <plug_holes+0x140>)
 8010766:	681b      	ldr	r3, [r3, #0]
 8010768:	687a      	ldr	r2, [r7, #4]
 801076a:	429a      	cmp	r2, r3
 801076c:	d102      	bne.n	8010774 <plug_holes+0xf0>
      lfree = pmem;
 801076e:	4a15      	ldr	r2, [pc, #84]	; (80107c4 <plug_holes+0x140>)
 8010770:	68bb      	ldr	r3, [r7, #8]
 8010772:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	881a      	ldrh	r2, [r3, #0]
 8010778:	68bb      	ldr	r3, [r7, #8]
 801077a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	881b      	ldrh	r3, [r3, #0]
 8010780:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8010784:	d00a      	beq.n	801079c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	881b      	ldrh	r3, [r3, #0]
 801078a:	4618      	mov	r0, r3
 801078c:	f7ff ff56 	bl	801063c <ptr_to_mem>
 8010790:	4604      	mov	r4, r0
 8010792:	68b8      	ldr	r0, [r7, #8]
 8010794:	f7ff ff64 	bl	8010660 <mem_to_ptr>
 8010798:	4603      	mov	r3, r0
 801079a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 801079c:	bf00      	nop
 801079e:	3714      	adds	r7, #20
 80107a0:	46bd      	mov	sp, r7
 80107a2:	bd90      	pop	{r4, r7, pc}
 80107a4:	20013768 	.word	0x20013768
 80107a8:	0801f840 	.word	0x0801f840
 80107ac:	0801f870 	.word	0x0801f870
 80107b0:	0801f888 	.word	0x0801f888
 80107b4:	2001376c 	.word	0x2001376c
 80107b8:	0801f8b0 	.word	0x0801f8b0
 80107bc:	0801f8cc 	.word	0x0801f8cc
 80107c0:	0801f8e8 	.word	0x0801f8e8
 80107c4:	20013774 	.word	0x20013774

080107c8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80107c8:	b580      	push	{r7, lr}
 80107ca:	b082      	sub	sp, #8
 80107cc:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80107ce:	4b1f      	ldr	r3, [pc, #124]	; (801084c <mem_init+0x84>)
 80107d0:	3303      	adds	r3, #3
 80107d2:	f023 0303 	bic.w	r3, r3, #3
 80107d6:	461a      	mov	r2, r3
 80107d8:	4b1d      	ldr	r3, [pc, #116]	; (8010850 <mem_init+0x88>)
 80107da:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80107dc:	4b1c      	ldr	r3, [pc, #112]	; (8010850 <mem_init+0x88>)
 80107de:	681b      	ldr	r3, [r3, #0]
 80107e0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 80107e8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	2200      	movs	r2, #0
 80107ee:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	2200      	movs	r2, #0
 80107f4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80107f6:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 80107fa:	f7ff ff1f 	bl	801063c <ptr_to_mem>
 80107fe:	4603      	mov	r3, r0
 8010800:	4a14      	ldr	r2, [pc, #80]	; (8010854 <mem_init+0x8c>)
 8010802:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8010804:	4b13      	ldr	r3, [pc, #76]	; (8010854 <mem_init+0x8c>)
 8010806:	681b      	ldr	r3, [r3, #0]
 8010808:	2201      	movs	r2, #1
 801080a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 801080c:	4b11      	ldr	r3, [pc, #68]	; (8010854 <mem_init+0x8c>)
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8010814:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8010816:	4b0f      	ldr	r3, [pc, #60]	; (8010854 <mem_init+0x8c>)
 8010818:	681b      	ldr	r3, [r3, #0]
 801081a:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 801081e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8010820:	4b0b      	ldr	r3, [pc, #44]	; (8010850 <mem_init+0x88>)
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	4a0c      	ldr	r2, [pc, #48]	; (8010858 <mem_init+0x90>)
 8010826:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8010828:	480c      	ldr	r0, [pc, #48]	; (801085c <mem_init+0x94>)
 801082a:	f00b feb1 	bl	801c590 <sys_mutex_new>
 801082e:	4603      	mov	r3, r0
 8010830:	2b00      	cmp	r3, #0
 8010832:	d006      	beq.n	8010842 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8010834:	4b0a      	ldr	r3, [pc, #40]	; (8010860 <mem_init+0x98>)
 8010836:	f240 221f 	movw	r2, #543	; 0x21f
 801083a:	490a      	ldr	r1, [pc, #40]	; (8010864 <mem_init+0x9c>)
 801083c:	480a      	ldr	r0, [pc, #40]	; (8010868 <mem_init+0xa0>)
 801083e:	f00c fe1f 	bl	801d480 <iprintf>
  }
}
 8010842:	bf00      	nop
 8010844:	3708      	adds	r7, #8
 8010846:	46bd      	mov	sp, r7
 8010848:	bd80      	pop	{r7, pc}
 801084a:	bf00      	nop
 801084c:	200172fc 	.word	0x200172fc
 8010850:	20013768 	.word	0x20013768
 8010854:	2001376c 	.word	0x2001376c
 8010858:	20013774 	.word	0x20013774
 801085c:	20013770 	.word	0x20013770
 8010860:	0801f840 	.word	0x0801f840
 8010864:	0801f914 	.word	0x0801f914
 8010868:	0801f888 	.word	0x0801f888

0801086c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 801086c:	b580      	push	{r7, lr}
 801086e:	b086      	sub	sp, #24
 8010870:	af00      	add	r7, sp, #0
 8010872:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8010874:	6878      	ldr	r0, [r7, #4]
 8010876:	f7ff fef3 	bl	8010660 <mem_to_ptr>
 801087a:	4603      	mov	r3, r0
 801087c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	881b      	ldrh	r3, [r3, #0]
 8010882:	4618      	mov	r0, r3
 8010884:	f7ff feda 	bl	801063c <ptr_to_mem>
 8010888:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	885b      	ldrh	r3, [r3, #2]
 801088e:	4618      	mov	r0, r3
 8010890:	f7ff fed4 	bl	801063c <ptr_to_mem>
 8010894:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	881b      	ldrh	r3, [r3, #0]
 801089a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 801089e:	d818      	bhi.n	80108d2 <mem_link_valid+0x66>
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	885b      	ldrh	r3, [r3, #2]
 80108a4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80108a8:	d813      	bhi.n	80108d2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80108ae:	8afa      	ldrh	r2, [r7, #22]
 80108b0:	429a      	cmp	r2, r3
 80108b2:	d004      	beq.n	80108be <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80108b4:	68fb      	ldr	r3, [r7, #12]
 80108b6:	881b      	ldrh	r3, [r3, #0]
 80108b8:	8afa      	ldrh	r2, [r7, #22]
 80108ba:	429a      	cmp	r2, r3
 80108bc:	d109      	bne.n	80108d2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80108be:	4b08      	ldr	r3, [pc, #32]	; (80108e0 <mem_link_valid+0x74>)
 80108c0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80108c2:	693a      	ldr	r2, [r7, #16]
 80108c4:	429a      	cmp	r2, r3
 80108c6:	d006      	beq.n	80108d6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80108c8:	693b      	ldr	r3, [r7, #16]
 80108ca:	885b      	ldrh	r3, [r3, #2]
 80108cc:	8afa      	ldrh	r2, [r7, #22]
 80108ce:	429a      	cmp	r2, r3
 80108d0:	d001      	beq.n	80108d6 <mem_link_valid+0x6a>
    return 0;
 80108d2:	2300      	movs	r3, #0
 80108d4:	e000      	b.n	80108d8 <mem_link_valid+0x6c>
  }
  return 1;
 80108d6:	2301      	movs	r3, #1
}
 80108d8:	4618      	mov	r0, r3
 80108da:	3718      	adds	r7, #24
 80108dc:	46bd      	mov	sp, r7
 80108de:	bd80      	pop	{r7, pc}
 80108e0:	2001376c 	.word	0x2001376c

080108e4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80108e4:	b580      	push	{r7, lr}
 80108e6:	b088      	sub	sp, #32
 80108e8:	af00      	add	r7, sp, #0
 80108ea:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d070      	beq.n	80109d4 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	f003 0303 	and.w	r3, r3, #3
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d00d      	beq.n	8010918 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80108fc:	4b37      	ldr	r3, [pc, #220]	; (80109dc <mem_free+0xf8>)
 80108fe:	f240 2273 	movw	r2, #627	; 0x273
 8010902:	4937      	ldr	r1, [pc, #220]	; (80109e0 <mem_free+0xfc>)
 8010904:	4837      	ldr	r0, [pc, #220]	; (80109e4 <mem_free+0x100>)
 8010906:	f00c fdbb 	bl	801d480 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801090a:	f00b fe93 	bl	801c634 <sys_arch_protect>
 801090e:	60f8      	str	r0, [r7, #12]
 8010910:	68f8      	ldr	r0, [r7, #12]
 8010912:	f00b fe9d 	bl	801c650 <sys_arch_unprotect>
    return;
 8010916:	e05e      	b.n	80109d6 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	3b08      	subs	r3, #8
 801091c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 801091e:	4b32      	ldr	r3, [pc, #200]	; (80109e8 <mem_free+0x104>)
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	69fa      	ldr	r2, [r7, #28]
 8010924:	429a      	cmp	r2, r3
 8010926:	d306      	bcc.n	8010936 <mem_free+0x52>
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	f103 020c 	add.w	r2, r3, #12
 801092e:	4b2f      	ldr	r3, [pc, #188]	; (80109ec <mem_free+0x108>)
 8010930:	681b      	ldr	r3, [r3, #0]
 8010932:	429a      	cmp	r2, r3
 8010934:	d90d      	bls.n	8010952 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8010936:	4b29      	ldr	r3, [pc, #164]	; (80109dc <mem_free+0xf8>)
 8010938:	f240 227f 	movw	r2, #639	; 0x27f
 801093c:	492c      	ldr	r1, [pc, #176]	; (80109f0 <mem_free+0x10c>)
 801093e:	4829      	ldr	r0, [pc, #164]	; (80109e4 <mem_free+0x100>)
 8010940:	f00c fd9e 	bl	801d480 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8010944:	f00b fe76 	bl	801c634 <sys_arch_protect>
 8010948:	6138      	str	r0, [r7, #16]
 801094a:	6938      	ldr	r0, [r7, #16]
 801094c:	f00b fe80 	bl	801c650 <sys_arch_unprotect>
    return;
 8010950:	e041      	b.n	80109d6 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8010952:	4828      	ldr	r0, [pc, #160]	; (80109f4 <mem_free+0x110>)
 8010954:	f00b fe32 	bl	801c5bc <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8010958:	69fb      	ldr	r3, [r7, #28]
 801095a:	791b      	ldrb	r3, [r3, #4]
 801095c:	2b00      	cmp	r3, #0
 801095e:	d110      	bne.n	8010982 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8010960:	4b1e      	ldr	r3, [pc, #120]	; (80109dc <mem_free+0xf8>)
 8010962:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8010966:	4924      	ldr	r1, [pc, #144]	; (80109f8 <mem_free+0x114>)
 8010968:	481e      	ldr	r0, [pc, #120]	; (80109e4 <mem_free+0x100>)
 801096a:	f00c fd89 	bl	801d480 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 801096e:	4821      	ldr	r0, [pc, #132]	; (80109f4 <mem_free+0x110>)
 8010970:	f00b fe33 	bl	801c5da <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8010974:	f00b fe5e 	bl	801c634 <sys_arch_protect>
 8010978:	6178      	str	r0, [r7, #20]
 801097a:	6978      	ldr	r0, [r7, #20]
 801097c:	f00b fe68 	bl	801c650 <sys_arch_unprotect>
    return;
 8010980:	e029      	b.n	80109d6 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8010982:	69f8      	ldr	r0, [r7, #28]
 8010984:	f7ff ff72 	bl	801086c <mem_link_valid>
 8010988:	4603      	mov	r3, r0
 801098a:	2b00      	cmp	r3, #0
 801098c:	d110      	bne.n	80109b0 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 801098e:	4b13      	ldr	r3, [pc, #76]	; (80109dc <mem_free+0xf8>)
 8010990:	f240 2295 	movw	r2, #661	; 0x295
 8010994:	4919      	ldr	r1, [pc, #100]	; (80109fc <mem_free+0x118>)
 8010996:	4813      	ldr	r0, [pc, #76]	; (80109e4 <mem_free+0x100>)
 8010998:	f00c fd72 	bl	801d480 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 801099c:	4815      	ldr	r0, [pc, #84]	; (80109f4 <mem_free+0x110>)
 801099e:	f00b fe1c 	bl	801c5da <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80109a2:	f00b fe47 	bl	801c634 <sys_arch_protect>
 80109a6:	61b8      	str	r0, [r7, #24]
 80109a8:	69b8      	ldr	r0, [r7, #24]
 80109aa:	f00b fe51 	bl	801c650 <sys_arch_unprotect>
    return;
 80109ae:	e012      	b.n	80109d6 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 80109b0:	69fb      	ldr	r3, [r7, #28]
 80109b2:	2200      	movs	r2, #0
 80109b4:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80109b6:	4b12      	ldr	r3, [pc, #72]	; (8010a00 <mem_free+0x11c>)
 80109b8:	681b      	ldr	r3, [r3, #0]
 80109ba:	69fa      	ldr	r2, [r7, #28]
 80109bc:	429a      	cmp	r2, r3
 80109be:	d202      	bcs.n	80109c6 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80109c0:	4a0f      	ldr	r2, [pc, #60]	; (8010a00 <mem_free+0x11c>)
 80109c2:	69fb      	ldr	r3, [r7, #28]
 80109c4:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80109c6:	69f8      	ldr	r0, [r7, #28]
 80109c8:	f7ff fe5c 	bl	8010684 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80109cc:	4809      	ldr	r0, [pc, #36]	; (80109f4 <mem_free+0x110>)
 80109ce:	f00b fe04 	bl	801c5da <sys_mutex_unlock>
 80109d2:	e000      	b.n	80109d6 <mem_free+0xf2>
    return;
 80109d4:	bf00      	nop
}
 80109d6:	3720      	adds	r7, #32
 80109d8:	46bd      	mov	sp, r7
 80109da:	bd80      	pop	{r7, pc}
 80109dc:	0801f840 	.word	0x0801f840
 80109e0:	0801f930 	.word	0x0801f930
 80109e4:	0801f888 	.word	0x0801f888
 80109e8:	20013768 	.word	0x20013768
 80109ec:	2001376c 	.word	0x2001376c
 80109f0:	0801f954 	.word	0x0801f954
 80109f4:	20013770 	.word	0x20013770
 80109f8:	0801f970 	.word	0x0801f970
 80109fc:	0801f998 	.word	0x0801f998
 8010a00:	20013774 	.word	0x20013774

08010a04 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8010a04:	b580      	push	{r7, lr}
 8010a06:	b088      	sub	sp, #32
 8010a08:	af00      	add	r7, sp, #0
 8010a0a:	6078      	str	r0, [r7, #4]
 8010a0c:	460b      	mov	r3, r1
 8010a0e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8010a10:	887b      	ldrh	r3, [r7, #2]
 8010a12:	3303      	adds	r3, #3
 8010a14:	b29b      	uxth	r3, r3
 8010a16:	f023 0303 	bic.w	r3, r3, #3
 8010a1a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8010a1c:	8bfb      	ldrh	r3, [r7, #30]
 8010a1e:	2b0b      	cmp	r3, #11
 8010a20:	d801      	bhi.n	8010a26 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8010a22:	230c      	movs	r3, #12
 8010a24:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8010a26:	8bfb      	ldrh	r3, [r7, #30]
 8010a28:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8010a2c:	d803      	bhi.n	8010a36 <mem_trim+0x32>
 8010a2e:	8bfa      	ldrh	r2, [r7, #30]
 8010a30:	887b      	ldrh	r3, [r7, #2]
 8010a32:	429a      	cmp	r2, r3
 8010a34:	d201      	bcs.n	8010a3a <mem_trim+0x36>
    return NULL;
 8010a36:	2300      	movs	r3, #0
 8010a38:	e0d8      	b.n	8010bec <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8010a3a:	4b6e      	ldr	r3, [pc, #440]	; (8010bf4 <mem_trim+0x1f0>)
 8010a3c:	681b      	ldr	r3, [r3, #0]
 8010a3e:	687a      	ldr	r2, [r7, #4]
 8010a40:	429a      	cmp	r2, r3
 8010a42:	d304      	bcc.n	8010a4e <mem_trim+0x4a>
 8010a44:	4b6c      	ldr	r3, [pc, #432]	; (8010bf8 <mem_trim+0x1f4>)
 8010a46:	681b      	ldr	r3, [r3, #0]
 8010a48:	687a      	ldr	r2, [r7, #4]
 8010a4a:	429a      	cmp	r2, r3
 8010a4c:	d306      	bcc.n	8010a5c <mem_trim+0x58>
 8010a4e:	4b6b      	ldr	r3, [pc, #428]	; (8010bfc <mem_trim+0x1f8>)
 8010a50:	f240 22d1 	movw	r2, #721	; 0x2d1
 8010a54:	496a      	ldr	r1, [pc, #424]	; (8010c00 <mem_trim+0x1fc>)
 8010a56:	486b      	ldr	r0, [pc, #428]	; (8010c04 <mem_trim+0x200>)
 8010a58:	f00c fd12 	bl	801d480 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8010a5c:	4b65      	ldr	r3, [pc, #404]	; (8010bf4 <mem_trim+0x1f0>)
 8010a5e:	681b      	ldr	r3, [r3, #0]
 8010a60:	687a      	ldr	r2, [r7, #4]
 8010a62:	429a      	cmp	r2, r3
 8010a64:	d304      	bcc.n	8010a70 <mem_trim+0x6c>
 8010a66:	4b64      	ldr	r3, [pc, #400]	; (8010bf8 <mem_trim+0x1f4>)
 8010a68:	681b      	ldr	r3, [r3, #0]
 8010a6a:	687a      	ldr	r2, [r7, #4]
 8010a6c:	429a      	cmp	r2, r3
 8010a6e:	d307      	bcc.n	8010a80 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8010a70:	f00b fde0 	bl	801c634 <sys_arch_protect>
 8010a74:	60b8      	str	r0, [r7, #8]
 8010a76:	68b8      	ldr	r0, [r7, #8]
 8010a78:	f00b fdea 	bl	801c650 <sys_arch_unprotect>
    return rmem;
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	e0b5      	b.n	8010bec <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	3b08      	subs	r3, #8
 8010a84:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8010a86:	69b8      	ldr	r0, [r7, #24]
 8010a88:	f7ff fdea 	bl	8010660 <mem_to_ptr>
 8010a8c:	4603      	mov	r3, r0
 8010a8e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8010a90:	69bb      	ldr	r3, [r7, #24]
 8010a92:	881a      	ldrh	r2, [r3, #0]
 8010a94:	8afb      	ldrh	r3, [r7, #22]
 8010a96:	1ad3      	subs	r3, r2, r3
 8010a98:	b29b      	uxth	r3, r3
 8010a9a:	3b08      	subs	r3, #8
 8010a9c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8010a9e:	8bfa      	ldrh	r2, [r7, #30]
 8010aa0:	8abb      	ldrh	r3, [r7, #20]
 8010aa2:	429a      	cmp	r2, r3
 8010aa4:	d906      	bls.n	8010ab4 <mem_trim+0xb0>
 8010aa6:	4b55      	ldr	r3, [pc, #340]	; (8010bfc <mem_trim+0x1f8>)
 8010aa8:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8010aac:	4956      	ldr	r1, [pc, #344]	; (8010c08 <mem_trim+0x204>)
 8010aae:	4855      	ldr	r0, [pc, #340]	; (8010c04 <mem_trim+0x200>)
 8010ab0:	f00c fce6 	bl	801d480 <iprintf>
  if (newsize > size) {
 8010ab4:	8bfa      	ldrh	r2, [r7, #30]
 8010ab6:	8abb      	ldrh	r3, [r7, #20]
 8010ab8:	429a      	cmp	r2, r3
 8010aba:	d901      	bls.n	8010ac0 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8010abc:	2300      	movs	r3, #0
 8010abe:	e095      	b.n	8010bec <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8010ac0:	8bfa      	ldrh	r2, [r7, #30]
 8010ac2:	8abb      	ldrh	r3, [r7, #20]
 8010ac4:	429a      	cmp	r2, r3
 8010ac6:	d101      	bne.n	8010acc <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	e08f      	b.n	8010bec <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8010acc:	484f      	ldr	r0, [pc, #316]	; (8010c0c <mem_trim+0x208>)
 8010ace:	f00b fd75 	bl	801c5bc <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8010ad2:	69bb      	ldr	r3, [r7, #24]
 8010ad4:	881b      	ldrh	r3, [r3, #0]
 8010ad6:	4618      	mov	r0, r3
 8010ad8:	f7ff fdb0 	bl	801063c <ptr_to_mem>
 8010adc:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8010ade:	693b      	ldr	r3, [r7, #16]
 8010ae0:	791b      	ldrb	r3, [r3, #4]
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	d13f      	bne.n	8010b66 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8010ae6:	69bb      	ldr	r3, [r7, #24]
 8010ae8:	881b      	ldrh	r3, [r3, #0]
 8010aea:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8010aee:	d106      	bne.n	8010afe <mem_trim+0xfa>
 8010af0:	4b42      	ldr	r3, [pc, #264]	; (8010bfc <mem_trim+0x1f8>)
 8010af2:	f240 22f5 	movw	r2, #757	; 0x2f5
 8010af6:	4946      	ldr	r1, [pc, #280]	; (8010c10 <mem_trim+0x20c>)
 8010af8:	4842      	ldr	r0, [pc, #264]	; (8010c04 <mem_trim+0x200>)
 8010afa:	f00c fcc1 	bl	801d480 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8010afe:	693b      	ldr	r3, [r7, #16]
 8010b00:	881b      	ldrh	r3, [r3, #0]
 8010b02:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8010b04:	8afa      	ldrh	r2, [r7, #22]
 8010b06:	8bfb      	ldrh	r3, [r7, #30]
 8010b08:	4413      	add	r3, r2
 8010b0a:	b29b      	uxth	r3, r3
 8010b0c:	3308      	adds	r3, #8
 8010b0e:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8010b10:	4b40      	ldr	r3, [pc, #256]	; (8010c14 <mem_trim+0x210>)
 8010b12:	681b      	ldr	r3, [r3, #0]
 8010b14:	693a      	ldr	r2, [r7, #16]
 8010b16:	429a      	cmp	r2, r3
 8010b18:	d106      	bne.n	8010b28 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 8010b1a:	89fb      	ldrh	r3, [r7, #14]
 8010b1c:	4618      	mov	r0, r3
 8010b1e:	f7ff fd8d 	bl	801063c <ptr_to_mem>
 8010b22:	4603      	mov	r3, r0
 8010b24:	4a3b      	ldr	r2, [pc, #236]	; (8010c14 <mem_trim+0x210>)
 8010b26:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8010b28:	89fb      	ldrh	r3, [r7, #14]
 8010b2a:	4618      	mov	r0, r3
 8010b2c:	f7ff fd86 	bl	801063c <ptr_to_mem>
 8010b30:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8010b32:	693b      	ldr	r3, [r7, #16]
 8010b34:	2200      	movs	r2, #0
 8010b36:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8010b38:	693b      	ldr	r3, [r7, #16]
 8010b3a:	89ba      	ldrh	r2, [r7, #12]
 8010b3c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8010b3e:	693b      	ldr	r3, [r7, #16]
 8010b40:	8afa      	ldrh	r2, [r7, #22]
 8010b42:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8010b44:	69bb      	ldr	r3, [r7, #24]
 8010b46:	89fa      	ldrh	r2, [r7, #14]
 8010b48:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8010b4a:	693b      	ldr	r3, [r7, #16]
 8010b4c:	881b      	ldrh	r3, [r3, #0]
 8010b4e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8010b52:	d047      	beq.n	8010be4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8010b54:	693b      	ldr	r3, [r7, #16]
 8010b56:	881b      	ldrh	r3, [r3, #0]
 8010b58:	4618      	mov	r0, r3
 8010b5a:	f7ff fd6f 	bl	801063c <ptr_to_mem>
 8010b5e:	4602      	mov	r2, r0
 8010b60:	89fb      	ldrh	r3, [r7, #14]
 8010b62:	8053      	strh	r3, [r2, #2]
 8010b64:	e03e      	b.n	8010be4 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8010b66:	8bfb      	ldrh	r3, [r7, #30]
 8010b68:	f103 0214 	add.w	r2, r3, #20
 8010b6c:	8abb      	ldrh	r3, [r7, #20]
 8010b6e:	429a      	cmp	r2, r3
 8010b70:	d838      	bhi.n	8010be4 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8010b72:	8afa      	ldrh	r2, [r7, #22]
 8010b74:	8bfb      	ldrh	r3, [r7, #30]
 8010b76:	4413      	add	r3, r2
 8010b78:	b29b      	uxth	r3, r3
 8010b7a:	3308      	adds	r3, #8
 8010b7c:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8010b7e:	69bb      	ldr	r3, [r7, #24]
 8010b80:	881b      	ldrh	r3, [r3, #0]
 8010b82:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8010b86:	d106      	bne.n	8010b96 <mem_trim+0x192>
 8010b88:	4b1c      	ldr	r3, [pc, #112]	; (8010bfc <mem_trim+0x1f8>)
 8010b8a:	f240 3216 	movw	r2, #790	; 0x316
 8010b8e:	4920      	ldr	r1, [pc, #128]	; (8010c10 <mem_trim+0x20c>)
 8010b90:	481c      	ldr	r0, [pc, #112]	; (8010c04 <mem_trim+0x200>)
 8010b92:	f00c fc75 	bl	801d480 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8010b96:	89fb      	ldrh	r3, [r7, #14]
 8010b98:	4618      	mov	r0, r3
 8010b9a:	f7ff fd4f 	bl	801063c <ptr_to_mem>
 8010b9e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8010ba0:	4b1c      	ldr	r3, [pc, #112]	; (8010c14 <mem_trim+0x210>)
 8010ba2:	681b      	ldr	r3, [r3, #0]
 8010ba4:	693a      	ldr	r2, [r7, #16]
 8010ba6:	429a      	cmp	r2, r3
 8010ba8:	d202      	bcs.n	8010bb0 <mem_trim+0x1ac>
      lfree = mem2;
 8010baa:	4a1a      	ldr	r2, [pc, #104]	; (8010c14 <mem_trim+0x210>)
 8010bac:	693b      	ldr	r3, [r7, #16]
 8010bae:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8010bb0:	693b      	ldr	r3, [r7, #16]
 8010bb2:	2200      	movs	r2, #0
 8010bb4:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8010bb6:	69bb      	ldr	r3, [r7, #24]
 8010bb8:	881a      	ldrh	r2, [r3, #0]
 8010bba:	693b      	ldr	r3, [r7, #16]
 8010bbc:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8010bbe:	693b      	ldr	r3, [r7, #16]
 8010bc0:	8afa      	ldrh	r2, [r7, #22]
 8010bc2:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8010bc4:	69bb      	ldr	r3, [r7, #24]
 8010bc6:	89fa      	ldrh	r2, [r7, #14]
 8010bc8:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8010bca:	693b      	ldr	r3, [r7, #16]
 8010bcc:	881b      	ldrh	r3, [r3, #0]
 8010bce:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8010bd2:	d007      	beq.n	8010be4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8010bd4:	693b      	ldr	r3, [r7, #16]
 8010bd6:	881b      	ldrh	r3, [r3, #0]
 8010bd8:	4618      	mov	r0, r3
 8010bda:	f7ff fd2f 	bl	801063c <ptr_to_mem>
 8010bde:	4602      	mov	r2, r0
 8010be0:	89fb      	ldrh	r3, [r7, #14]
 8010be2:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8010be4:	4809      	ldr	r0, [pc, #36]	; (8010c0c <mem_trim+0x208>)
 8010be6:	f00b fcf8 	bl	801c5da <sys_mutex_unlock>
  return rmem;
 8010bea:	687b      	ldr	r3, [r7, #4]
}
 8010bec:	4618      	mov	r0, r3
 8010bee:	3720      	adds	r7, #32
 8010bf0:	46bd      	mov	sp, r7
 8010bf2:	bd80      	pop	{r7, pc}
 8010bf4:	20013768 	.word	0x20013768
 8010bf8:	2001376c 	.word	0x2001376c
 8010bfc:	0801f840 	.word	0x0801f840
 8010c00:	0801f9cc 	.word	0x0801f9cc
 8010c04:	0801f888 	.word	0x0801f888
 8010c08:	0801f9e4 	.word	0x0801f9e4
 8010c0c:	20013770 	.word	0x20013770
 8010c10:	0801fa04 	.word	0x0801fa04
 8010c14:	20013774 	.word	0x20013774

08010c18 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8010c18:	b580      	push	{r7, lr}
 8010c1a:	b088      	sub	sp, #32
 8010c1c:	af00      	add	r7, sp, #0
 8010c1e:	4603      	mov	r3, r0
 8010c20:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8010c22:	88fb      	ldrh	r3, [r7, #6]
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	d101      	bne.n	8010c2c <mem_malloc+0x14>
    return NULL;
 8010c28:	2300      	movs	r3, #0
 8010c2a:	e0e2      	b.n	8010df2 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8010c2c:	88fb      	ldrh	r3, [r7, #6]
 8010c2e:	3303      	adds	r3, #3
 8010c30:	b29b      	uxth	r3, r3
 8010c32:	f023 0303 	bic.w	r3, r3, #3
 8010c36:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8010c38:	8bbb      	ldrh	r3, [r7, #28]
 8010c3a:	2b0b      	cmp	r3, #11
 8010c3c:	d801      	bhi.n	8010c42 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8010c3e:	230c      	movs	r3, #12
 8010c40:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8010c42:	8bbb      	ldrh	r3, [r7, #28]
 8010c44:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8010c48:	d803      	bhi.n	8010c52 <mem_malloc+0x3a>
 8010c4a:	8bba      	ldrh	r2, [r7, #28]
 8010c4c:	88fb      	ldrh	r3, [r7, #6]
 8010c4e:	429a      	cmp	r2, r3
 8010c50:	d201      	bcs.n	8010c56 <mem_malloc+0x3e>
    return NULL;
 8010c52:	2300      	movs	r3, #0
 8010c54:	e0cd      	b.n	8010df2 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8010c56:	4869      	ldr	r0, [pc, #420]	; (8010dfc <mem_malloc+0x1e4>)
 8010c58:	f00b fcb0 	bl	801c5bc <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8010c5c:	4b68      	ldr	r3, [pc, #416]	; (8010e00 <mem_malloc+0x1e8>)
 8010c5e:	681b      	ldr	r3, [r3, #0]
 8010c60:	4618      	mov	r0, r3
 8010c62:	f7ff fcfd 	bl	8010660 <mem_to_ptr>
 8010c66:	4603      	mov	r3, r0
 8010c68:	83fb      	strh	r3, [r7, #30]
 8010c6a:	e0b7      	b.n	8010ddc <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8010c6c:	8bfb      	ldrh	r3, [r7, #30]
 8010c6e:	4618      	mov	r0, r3
 8010c70:	f7ff fce4 	bl	801063c <ptr_to_mem>
 8010c74:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8010c76:	697b      	ldr	r3, [r7, #20]
 8010c78:	791b      	ldrb	r3, [r3, #4]
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	f040 80a7 	bne.w	8010dce <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8010c80:	697b      	ldr	r3, [r7, #20]
 8010c82:	881b      	ldrh	r3, [r3, #0]
 8010c84:	461a      	mov	r2, r3
 8010c86:	8bfb      	ldrh	r3, [r7, #30]
 8010c88:	1ad3      	subs	r3, r2, r3
 8010c8a:	f1a3 0208 	sub.w	r2, r3, #8
 8010c8e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8010c90:	429a      	cmp	r2, r3
 8010c92:	f0c0 809c 	bcc.w	8010dce <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8010c96:	697b      	ldr	r3, [r7, #20]
 8010c98:	881b      	ldrh	r3, [r3, #0]
 8010c9a:	461a      	mov	r2, r3
 8010c9c:	8bfb      	ldrh	r3, [r7, #30]
 8010c9e:	1ad3      	subs	r3, r2, r3
 8010ca0:	f1a3 0208 	sub.w	r2, r3, #8
 8010ca4:	8bbb      	ldrh	r3, [r7, #28]
 8010ca6:	3314      	adds	r3, #20
 8010ca8:	429a      	cmp	r2, r3
 8010caa:	d333      	bcc.n	8010d14 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8010cac:	8bfa      	ldrh	r2, [r7, #30]
 8010cae:	8bbb      	ldrh	r3, [r7, #28]
 8010cb0:	4413      	add	r3, r2
 8010cb2:	b29b      	uxth	r3, r3
 8010cb4:	3308      	adds	r3, #8
 8010cb6:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8010cb8:	8a7b      	ldrh	r3, [r7, #18]
 8010cba:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8010cbe:	d106      	bne.n	8010cce <mem_malloc+0xb6>
 8010cc0:	4b50      	ldr	r3, [pc, #320]	; (8010e04 <mem_malloc+0x1ec>)
 8010cc2:	f240 3287 	movw	r2, #903	; 0x387
 8010cc6:	4950      	ldr	r1, [pc, #320]	; (8010e08 <mem_malloc+0x1f0>)
 8010cc8:	4850      	ldr	r0, [pc, #320]	; (8010e0c <mem_malloc+0x1f4>)
 8010cca:	f00c fbd9 	bl	801d480 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8010cce:	8a7b      	ldrh	r3, [r7, #18]
 8010cd0:	4618      	mov	r0, r3
 8010cd2:	f7ff fcb3 	bl	801063c <ptr_to_mem>
 8010cd6:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8010cd8:	68fb      	ldr	r3, [r7, #12]
 8010cda:	2200      	movs	r2, #0
 8010cdc:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8010cde:	697b      	ldr	r3, [r7, #20]
 8010ce0:	881a      	ldrh	r2, [r3, #0]
 8010ce2:	68fb      	ldr	r3, [r7, #12]
 8010ce4:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8010ce6:	68fb      	ldr	r3, [r7, #12]
 8010ce8:	8bfa      	ldrh	r2, [r7, #30]
 8010cea:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8010cec:	697b      	ldr	r3, [r7, #20]
 8010cee:	8a7a      	ldrh	r2, [r7, #18]
 8010cf0:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8010cf2:	697b      	ldr	r3, [r7, #20]
 8010cf4:	2201      	movs	r2, #1
 8010cf6:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8010cf8:	68fb      	ldr	r3, [r7, #12]
 8010cfa:	881b      	ldrh	r3, [r3, #0]
 8010cfc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8010d00:	d00b      	beq.n	8010d1a <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8010d02:	68fb      	ldr	r3, [r7, #12]
 8010d04:	881b      	ldrh	r3, [r3, #0]
 8010d06:	4618      	mov	r0, r3
 8010d08:	f7ff fc98 	bl	801063c <ptr_to_mem>
 8010d0c:	4602      	mov	r2, r0
 8010d0e:	8a7b      	ldrh	r3, [r7, #18]
 8010d10:	8053      	strh	r3, [r2, #2]
 8010d12:	e002      	b.n	8010d1a <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8010d14:	697b      	ldr	r3, [r7, #20]
 8010d16:	2201      	movs	r2, #1
 8010d18:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8010d1a:	4b39      	ldr	r3, [pc, #228]	; (8010e00 <mem_malloc+0x1e8>)
 8010d1c:	681b      	ldr	r3, [r3, #0]
 8010d1e:	697a      	ldr	r2, [r7, #20]
 8010d20:	429a      	cmp	r2, r3
 8010d22:	d127      	bne.n	8010d74 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8010d24:	4b36      	ldr	r3, [pc, #216]	; (8010e00 <mem_malloc+0x1e8>)
 8010d26:	681b      	ldr	r3, [r3, #0]
 8010d28:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8010d2a:	e005      	b.n	8010d38 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8010d2c:	69bb      	ldr	r3, [r7, #24]
 8010d2e:	881b      	ldrh	r3, [r3, #0]
 8010d30:	4618      	mov	r0, r3
 8010d32:	f7ff fc83 	bl	801063c <ptr_to_mem>
 8010d36:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8010d38:	69bb      	ldr	r3, [r7, #24]
 8010d3a:	791b      	ldrb	r3, [r3, #4]
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d004      	beq.n	8010d4a <mem_malloc+0x132>
 8010d40:	4b33      	ldr	r3, [pc, #204]	; (8010e10 <mem_malloc+0x1f8>)
 8010d42:	681b      	ldr	r3, [r3, #0]
 8010d44:	69ba      	ldr	r2, [r7, #24]
 8010d46:	429a      	cmp	r2, r3
 8010d48:	d1f0      	bne.n	8010d2c <mem_malloc+0x114>
          }
          lfree = cur;
 8010d4a:	4a2d      	ldr	r2, [pc, #180]	; (8010e00 <mem_malloc+0x1e8>)
 8010d4c:	69bb      	ldr	r3, [r7, #24]
 8010d4e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8010d50:	4b2b      	ldr	r3, [pc, #172]	; (8010e00 <mem_malloc+0x1e8>)
 8010d52:	681a      	ldr	r2, [r3, #0]
 8010d54:	4b2e      	ldr	r3, [pc, #184]	; (8010e10 <mem_malloc+0x1f8>)
 8010d56:	681b      	ldr	r3, [r3, #0]
 8010d58:	429a      	cmp	r2, r3
 8010d5a:	d00b      	beq.n	8010d74 <mem_malloc+0x15c>
 8010d5c:	4b28      	ldr	r3, [pc, #160]	; (8010e00 <mem_malloc+0x1e8>)
 8010d5e:	681b      	ldr	r3, [r3, #0]
 8010d60:	791b      	ldrb	r3, [r3, #4]
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d006      	beq.n	8010d74 <mem_malloc+0x15c>
 8010d66:	4b27      	ldr	r3, [pc, #156]	; (8010e04 <mem_malloc+0x1ec>)
 8010d68:	f240 32b5 	movw	r2, #949	; 0x3b5
 8010d6c:	4929      	ldr	r1, [pc, #164]	; (8010e14 <mem_malloc+0x1fc>)
 8010d6e:	4827      	ldr	r0, [pc, #156]	; (8010e0c <mem_malloc+0x1f4>)
 8010d70:	f00c fb86 	bl	801d480 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8010d74:	4821      	ldr	r0, [pc, #132]	; (8010dfc <mem_malloc+0x1e4>)
 8010d76:	f00b fc30 	bl	801c5da <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8010d7a:	8bba      	ldrh	r2, [r7, #28]
 8010d7c:	697b      	ldr	r3, [r7, #20]
 8010d7e:	4413      	add	r3, r2
 8010d80:	3308      	adds	r3, #8
 8010d82:	4a23      	ldr	r2, [pc, #140]	; (8010e10 <mem_malloc+0x1f8>)
 8010d84:	6812      	ldr	r2, [r2, #0]
 8010d86:	4293      	cmp	r3, r2
 8010d88:	d906      	bls.n	8010d98 <mem_malloc+0x180>
 8010d8a:	4b1e      	ldr	r3, [pc, #120]	; (8010e04 <mem_malloc+0x1ec>)
 8010d8c:	f240 32b9 	movw	r2, #953	; 0x3b9
 8010d90:	4921      	ldr	r1, [pc, #132]	; (8010e18 <mem_malloc+0x200>)
 8010d92:	481e      	ldr	r0, [pc, #120]	; (8010e0c <mem_malloc+0x1f4>)
 8010d94:	f00c fb74 	bl	801d480 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8010d98:	697b      	ldr	r3, [r7, #20]
 8010d9a:	f003 0303 	and.w	r3, r3, #3
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	d006      	beq.n	8010db0 <mem_malloc+0x198>
 8010da2:	4b18      	ldr	r3, [pc, #96]	; (8010e04 <mem_malloc+0x1ec>)
 8010da4:	f240 32bb 	movw	r2, #955	; 0x3bb
 8010da8:	491c      	ldr	r1, [pc, #112]	; (8010e1c <mem_malloc+0x204>)
 8010daa:	4818      	ldr	r0, [pc, #96]	; (8010e0c <mem_malloc+0x1f4>)
 8010dac:	f00c fb68 	bl	801d480 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8010db0:	697b      	ldr	r3, [r7, #20]
 8010db2:	f003 0303 	and.w	r3, r3, #3
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d006      	beq.n	8010dc8 <mem_malloc+0x1b0>
 8010dba:	4b12      	ldr	r3, [pc, #72]	; (8010e04 <mem_malloc+0x1ec>)
 8010dbc:	f240 32bd 	movw	r2, #957	; 0x3bd
 8010dc0:	4917      	ldr	r1, [pc, #92]	; (8010e20 <mem_malloc+0x208>)
 8010dc2:	4812      	ldr	r0, [pc, #72]	; (8010e0c <mem_malloc+0x1f4>)
 8010dc4:	f00c fb5c 	bl	801d480 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8010dc8:	697b      	ldr	r3, [r7, #20]
 8010dca:	3308      	adds	r3, #8
 8010dcc:	e011      	b.n	8010df2 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 8010dce:	8bfb      	ldrh	r3, [r7, #30]
 8010dd0:	4618      	mov	r0, r3
 8010dd2:	f7ff fc33 	bl	801063c <ptr_to_mem>
 8010dd6:	4603      	mov	r3, r0
 8010dd8:	881b      	ldrh	r3, [r3, #0]
 8010dda:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8010ddc:	8bfa      	ldrh	r2, [r7, #30]
 8010dde:	8bbb      	ldrh	r3, [r7, #28]
 8010de0:	f5c3 53a0 	rsb	r3, r3, #5120	; 0x1400
 8010de4:	429a      	cmp	r2, r3
 8010de6:	f4ff af41 	bcc.w	8010c6c <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8010dea:	4804      	ldr	r0, [pc, #16]	; (8010dfc <mem_malloc+0x1e4>)
 8010dec:	f00b fbf5 	bl	801c5da <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8010df0:	2300      	movs	r3, #0
}
 8010df2:	4618      	mov	r0, r3
 8010df4:	3720      	adds	r7, #32
 8010df6:	46bd      	mov	sp, r7
 8010df8:	bd80      	pop	{r7, pc}
 8010dfa:	bf00      	nop
 8010dfc:	20013770 	.word	0x20013770
 8010e00:	20013774 	.word	0x20013774
 8010e04:	0801f840 	.word	0x0801f840
 8010e08:	0801fa04 	.word	0x0801fa04
 8010e0c:	0801f888 	.word	0x0801f888
 8010e10:	2001376c 	.word	0x2001376c
 8010e14:	0801fa18 	.word	0x0801fa18
 8010e18:	0801fa34 	.word	0x0801fa34
 8010e1c:	0801fa64 	.word	0x0801fa64
 8010e20:	0801fa94 	.word	0x0801fa94

08010e24 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8010e24:	b480      	push	{r7}
 8010e26:	b085      	sub	sp, #20
 8010e28:	af00      	add	r7, sp, #0
 8010e2a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	689b      	ldr	r3, [r3, #8]
 8010e30:	2200      	movs	r2, #0
 8010e32:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	685b      	ldr	r3, [r3, #4]
 8010e38:	3303      	adds	r3, #3
 8010e3a:	f023 0303 	bic.w	r3, r3, #3
 8010e3e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8010e40:	2300      	movs	r3, #0
 8010e42:	60fb      	str	r3, [r7, #12]
 8010e44:	e011      	b.n	8010e6a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	689b      	ldr	r3, [r3, #8]
 8010e4a:	681a      	ldr	r2, [r3, #0]
 8010e4c:	68bb      	ldr	r3, [r7, #8]
 8010e4e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	689b      	ldr	r3, [r3, #8]
 8010e54:	68ba      	ldr	r2, [r7, #8]
 8010e56:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	881b      	ldrh	r3, [r3, #0]
 8010e5c:	461a      	mov	r2, r3
 8010e5e:	68bb      	ldr	r3, [r7, #8]
 8010e60:	4413      	add	r3, r2
 8010e62:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8010e64:	68fb      	ldr	r3, [r7, #12]
 8010e66:	3301      	adds	r3, #1
 8010e68:	60fb      	str	r3, [r7, #12]
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	885b      	ldrh	r3, [r3, #2]
 8010e6e:	461a      	mov	r2, r3
 8010e70:	68fb      	ldr	r3, [r7, #12]
 8010e72:	4293      	cmp	r3, r2
 8010e74:	dbe7      	blt.n	8010e46 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8010e76:	bf00      	nop
 8010e78:	bf00      	nop
 8010e7a:	3714      	adds	r7, #20
 8010e7c:	46bd      	mov	sp, r7
 8010e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e82:	4770      	bx	lr

08010e84 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8010e84:	b580      	push	{r7, lr}
 8010e86:	b082      	sub	sp, #8
 8010e88:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8010e8a:	2300      	movs	r3, #0
 8010e8c:	80fb      	strh	r3, [r7, #6]
 8010e8e:	e009      	b.n	8010ea4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8010e90:	88fb      	ldrh	r3, [r7, #6]
 8010e92:	4a08      	ldr	r2, [pc, #32]	; (8010eb4 <memp_init+0x30>)
 8010e94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010e98:	4618      	mov	r0, r3
 8010e9a:	f7ff ffc3 	bl	8010e24 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8010e9e:	88fb      	ldrh	r3, [r7, #6]
 8010ea0:	3301      	adds	r3, #1
 8010ea2:	80fb      	strh	r3, [r7, #6]
 8010ea4:	88fb      	ldrh	r3, [r7, #6]
 8010ea6:	2b0c      	cmp	r3, #12
 8010ea8:	d9f2      	bls.n	8010e90 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8010eaa:	bf00      	nop
 8010eac:	bf00      	nop
 8010eae:	3708      	adds	r7, #8
 8010eb0:	46bd      	mov	sp, r7
 8010eb2:	bd80      	pop	{r7, pc}
 8010eb4:	08022704 	.word	0x08022704

08010eb8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8010eb8:	b580      	push	{r7, lr}
 8010eba:	b084      	sub	sp, #16
 8010ebc:	af00      	add	r7, sp, #0
 8010ebe:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8010ec0:	f00b fbb8 	bl	801c634 <sys_arch_protect>
 8010ec4:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	689b      	ldr	r3, [r3, #8]
 8010eca:	681b      	ldr	r3, [r3, #0]
 8010ecc:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8010ece:	68bb      	ldr	r3, [r7, #8]
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d015      	beq.n	8010f00 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	689b      	ldr	r3, [r3, #8]
 8010ed8:	68ba      	ldr	r2, [r7, #8]
 8010eda:	6812      	ldr	r2, [r2, #0]
 8010edc:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8010ede:	68bb      	ldr	r3, [r7, #8]
 8010ee0:	f003 0303 	and.w	r3, r3, #3
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	d006      	beq.n	8010ef6 <do_memp_malloc_pool+0x3e>
 8010ee8:	4b09      	ldr	r3, [pc, #36]	; (8010f10 <do_memp_malloc_pool+0x58>)
 8010eea:	f44f 728c 	mov.w	r2, #280	; 0x118
 8010eee:	4909      	ldr	r1, [pc, #36]	; (8010f14 <do_memp_malloc_pool+0x5c>)
 8010ef0:	4809      	ldr	r0, [pc, #36]	; (8010f18 <do_memp_malloc_pool+0x60>)
 8010ef2:	f00c fac5 	bl	801d480 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8010ef6:	68f8      	ldr	r0, [r7, #12]
 8010ef8:	f00b fbaa 	bl	801c650 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8010efc:	68bb      	ldr	r3, [r7, #8]
 8010efe:	e003      	b.n	8010f08 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8010f00:	68f8      	ldr	r0, [r7, #12]
 8010f02:	f00b fba5 	bl	801c650 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8010f06:	2300      	movs	r3, #0
}
 8010f08:	4618      	mov	r0, r3
 8010f0a:	3710      	adds	r7, #16
 8010f0c:	46bd      	mov	sp, r7
 8010f0e:	bd80      	pop	{r7, pc}
 8010f10:	0801fab8 	.word	0x0801fab8
 8010f14:	0801fae8 	.word	0x0801fae8
 8010f18:	0801fb0c 	.word	0x0801fb0c

08010f1c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8010f1c:	b580      	push	{r7, lr}
 8010f1e:	b084      	sub	sp, #16
 8010f20:	af00      	add	r7, sp, #0
 8010f22:	4603      	mov	r3, r0
 8010f24:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8010f26:	79fb      	ldrb	r3, [r7, #7]
 8010f28:	2b0c      	cmp	r3, #12
 8010f2a:	d908      	bls.n	8010f3e <memp_malloc+0x22>
 8010f2c:	4b0a      	ldr	r3, [pc, #40]	; (8010f58 <memp_malloc+0x3c>)
 8010f2e:	f240 1257 	movw	r2, #343	; 0x157
 8010f32:	490a      	ldr	r1, [pc, #40]	; (8010f5c <memp_malloc+0x40>)
 8010f34:	480a      	ldr	r0, [pc, #40]	; (8010f60 <memp_malloc+0x44>)
 8010f36:	f00c faa3 	bl	801d480 <iprintf>
 8010f3a:	2300      	movs	r3, #0
 8010f3c:	e008      	b.n	8010f50 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8010f3e:	79fb      	ldrb	r3, [r7, #7]
 8010f40:	4a08      	ldr	r2, [pc, #32]	; (8010f64 <memp_malloc+0x48>)
 8010f42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010f46:	4618      	mov	r0, r3
 8010f48:	f7ff ffb6 	bl	8010eb8 <do_memp_malloc_pool>
 8010f4c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8010f4e:	68fb      	ldr	r3, [r7, #12]
}
 8010f50:	4618      	mov	r0, r3
 8010f52:	3710      	adds	r7, #16
 8010f54:	46bd      	mov	sp, r7
 8010f56:	bd80      	pop	{r7, pc}
 8010f58:	0801fab8 	.word	0x0801fab8
 8010f5c:	0801fb48 	.word	0x0801fb48
 8010f60:	0801fb0c 	.word	0x0801fb0c
 8010f64:	08022704 	.word	0x08022704

08010f68 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8010f68:	b580      	push	{r7, lr}
 8010f6a:	b084      	sub	sp, #16
 8010f6c:	af00      	add	r7, sp, #0
 8010f6e:	6078      	str	r0, [r7, #4]
 8010f70:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8010f72:	683b      	ldr	r3, [r7, #0]
 8010f74:	f003 0303 	and.w	r3, r3, #3
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	d006      	beq.n	8010f8a <do_memp_free_pool+0x22>
 8010f7c:	4b0d      	ldr	r3, [pc, #52]	; (8010fb4 <do_memp_free_pool+0x4c>)
 8010f7e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8010f82:	490d      	ldr	r1, [pc, #52]	; (8010fb8 <do_memp_free_pool+0x50>)
 8010f84:	480d      	ldr	r0, [pc, #52]	; (8010fbc <do_memp_free_pool+0x54>)
 8010f86:	f00c fa7b 	bl	801d480 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8010f8a:	683b      	ldr	r3, [r7, #0]
 8010f8c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8010f8e:	f00b fb51 	bl	801c634 <sys_arch_protect>
 8010f92:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	689b      	ldr	r3, [r3, #8]
 8010f98:	681a      	ldr	r2, [r3, #0]
 8010f9a:	68fb      	ldr	r3, [r7, #12]
 8010f9c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	689b      	ldr	r3, [r3, #8]
 8010fa2:	68fa      	ldr	r2, [r7, #12]
 8010fa4:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8010fa6:	68b8      	ldr	r0, [r7, #8]
 8010fa8:	f00b fb52 	bl	801c650 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8010fac:	bf00      	nop
 8010fae:	3710      	adds	r7, #16
 8010fb0:	46bd      	mov	sp, r7
 8010fb2:	bd80      	pop	{r7, pc}
 8010fb4:	0801fab8 	.word	0x0801fab8
 8010fb8:	0801fb68 	.word	0x0801fb68
 8010fbc:	0801fb0c 	.word	0x0801fb0c

08010fc0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8010fc0:	b580      	push	{r7, lr}
 8010fc2:	b082      	sub	sp, #8
 8010fc4:	af00      	add	r7, sp, #0
 8010fc6:	4603      	mov	r3, r0
 8010fc8:	6039      	str	r1, [r7, #0]
 8010fca:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8010fcc:	79fb      	ldrb	r3, [r7, #7]
 8010fce:	2b0c      	cmp	r3, #12
 8010fd0:	d907      	bls.n	8010fe2 <memp_free+0x22>
 8010fd2:	4b0c      	ldr	r3, [pc, #48]	; (8011004 <memp_free+0x44>)
 8010fd4:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8010fd8:	490b      	ldr	r1, [pc, #44]	; (8011008 <memp_free+0x48>)
 8010fda:	480c      	ldr	r0, [pc, #48]	; (801100c <memp_free+0x4c>)
 8010fdc:	f00c fa50 	bl	801d480 <iprintf>
 8010fe0:	e00c      	b.n	8010ffc <memp_free+0x3c>

  if (mem == NULL) {
 8010fe2:	683b      	ldr	r3, [r7, #0]
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	d008      	beq.n	8010ffa <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8010fe8:	79fb      	ldrb	r3, [r7, #7]
 8010fea:	4a09      	ldr	r2, [pc, #36]	; (8011010 <memp_free+0x50>)
 8010fec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010ff0:	6839      	ldr	r1, [r7, #0]
 8010ff2:	4618      	mov	r0, r3
 8010ff4:	f7ff ffb8 	bl	8010f68 <do_memp_free_pool>
 8010ff8:	e000      	b.n	8010ffc <memp_free+0x3c>
    return;
 8010ffa:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8010ffc:	3708      	adds	r7, #8
 8010ffe:	46bd      	mov	sp, r7
 8011000:	bd80      	pop	{r7, pc}
 8011002:	bf00      	nop
 8011004:	0801fab8 	.word	0x0801fab8
 8011008:	0801fb88 	.word	0x0801fb88
 801100c:	0801fb0c 	.word	0x0801fb0c
 8011010:	08022704 	.word	0x08022704

08011014 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8011014:	b480      	push	{r7}
 8011016:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8011018:	bf00      	nop
 801101a:	46bd      	mov	sp, r7
 801101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011020:	4770      	bx	lr
	...

08011024 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8011024:	b580      	push	{r7, lr}
 8011026:	b086      	sub	sp, #24
 8011028:	af00      	add	r7, sp, #0
 801102a:	60f8      	str	r0, [r7, #12]
 801102c:	60b9      	str	r1, [r7, #8]
 801102e:	607a      	str	r2, [r7, #4]
 8011030:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8011032:	68fb      	ldr	r3, [r7, #12]
 8011034:	2b00      	cmp	r3, #0
 8011036:	d108      	bne.n	801104a <netif_add+0x26>
 8011038:	4b5b      	ldr	r3, [pc, #364]	; (80111a8 <netif_add+0x184>)
 801103a:	f240 1227 	movw	r2, #295	; 0x127
 801103e:	495b      	ldr	r1, [pc, #364]	; (80111ac <netif_add+0x188>)
 8011040:	485b      	ldr	r0, [pc, #364]	; (80111b0 <netif_add+0x18c>)
 8011042:	f00c fa1d 	bl	801d480 <iprintf>
 8011046:	2300      	movs	r3, #0
 8011048:	e0a9      	b.n	801119e <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 801104a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801104c:	2b00      	cmp	r3, #0
 801104e:	d108      	bne.n	8011062 <netif_add+0x3e>
 8011050:	4b55      	ldr	r3, [pc, #340]	; (80111a8 <netif_add+0x184>)
 8011052:	f44f 7294 	mov.w	r2, #296	; 0x128
 8011056:	4957      	ldr	r1, [pc, #348]	; (80111b4 <netif_add+0x190>)
 8011058:	4855      	ldr	r0, [pc, #340]	; (80111b0 <netif_add+0x18c>)
 801105a:	f00c fa11 	bl	801d480 <iprintf>
 801105e:	2300      	movs	r3, #0
 8011060:	e09d      	b.n	801119e <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8011062:	68bb      	ldr	r3, [r7, #8]
 8011064:	2b00      	cmp	r3, #0
 8011066:	d101      	bne.n	801106c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8011068:	4b53      	ldr	r3, [pc, #332]	; (80111b8 <netif_add+0x194>)
 801106a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	2b00      	cmp	r3, #0
 8011070:	d101      	bne.n	8011076 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8011072:	4b51      	ldr	r3, [pc, #324]	; (80111b8 <netif_add+0x194>)
 8011074:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8011076:	683b      	ldr	r3, [r7, #0]
 8011078:	2b00      	cmp	r3, #0
 801107a:	d101      	bne.n	8011080 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 801107c:	4b4e      	ldr	r3, [pc, #312]	; (80111b8 <netif_add+0x194>)
 801107e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8011080:	68fb      	ldr	r3, [r7, #12]
 8011082:	2200      	movs	r2, #0
 8011084:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8011086:	68fb      	ldr	r3, [r7, #12]
 8011088:	2200      	movs	r2, #0
 801108a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 801108c:	68fb      	ldr	r3, [r7, #12]
 801108e:	2200      	movs	r2, #0
 8011090:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8011092:	68fb      	ldr	r3, [r7, #12]
 8011094:	4a49      	ldr	r2, [pc, #292]	; (80111bc <netif_add+0x198>)
 8011096:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8011098:	68fb      	ldr	r3, [r7, #12]
 801109a:	2200      	movs	r2, #0
 801109c:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 801109e:	68fb      	ldr	r3, [r7, #12]
 80110a0:	2200      	movs	r2, #0
 80110a2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 80110a6:	68fb      	ldr	r3, [r7, #12]
 80110a8:	3324      	adds	r3, #36	; 0x24
 80110aa:	2204      	movs	r2, #4
 80110ac:	2100      	movs	r1, #0
 80110ae:	4618      	mov	r0, r3
 80110b0:	f00b fb3a 	bl	801c728 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80110b4:	68fb      	ldr	r3, [r7, #12]
 80110b6:	2200      	movs	r2, #0
 80110b8:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80110ba:	68fb      	ldr	r3, [r7, #12]
 80110bc:	6a3a      	ldr	r2, [r7, #32]
 80110be:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80110c0:	4b3f      	ldr	r3, [pc, #252]	; (80111c0 <netif_add+0x19c>)
 80110c2:	781a      	ldrb	r2, [r3, #0]
 80110c4:	68fb      	ldr	r3, [r7, #12]
 80110c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 80110ca:	68fb      	ldr	r3, [r7, #12]
 80110cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80110ce:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80110d0:	683b      	ldr	r3, [r7, #0]
 80110d2:	687a      	ldr	r2, [r7, #4]
 80110d4:	68b9      	ldr	r1, [r7, #8]
 80110d6:	68f8      	ldr	r0, [r7, #12]
 80110d8:	f000 f914 	bl	8011304 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80110dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110de:	68f8      	ldr	r0, [r7, #12]
 80110e0:	4798      	blx	r3
 80110e2:	4603      	mov	r3, r0
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	d001      	beq.n	80110ec <netif_add+0xc8>
    return NULL;
 80110e8:	2300      	movs	r3, #0
 80110ea:	e058      	b.n	801119e <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80110ec:	68fb      	ldr	r3, [r7, #12]
 80110ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80110f2:	2bff      	cmp	r3, #255	; 0xff
 80110f4:	d103      	bne.n	80110fe <netif_add+0xda>
        netif->num = 0;
 80110f6:	68fb      	ldr	r3, [r7, #12]
 80110f8:	2200      	movs	r2, #0
 80110fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 80110fe:	2300      	movs	r3, #0
 8011100:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8011102:	4b30      	ldr	r3, [pc, #192]	; (80111c4 <netif_add+0x1a0>)
 8011104:	681b      	ldr	r3, [r3, #0]
 8011106:	617b      	str	r3, [r7, #20]
 8011108:	e02b      	b.n	8011162 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 801110a:	697a      	ldr	r2, [r7, #20]
 801110c:	68fb      	ldr	r3, [r7, #12]
 801110e:	429a      	cmp	r2, r3
 8011110:	d106      	bne.n	8011120 <netif_add+0xfc>
 8011112:	4b25      	ldr	r3, [pc, #148]	; (80111a8 <netif_add+0x184>)
 8011114:	f240 128b 	movw	r2, #395	; 0x18b
 8011118:	492b      	ldr	r1, [pc, #172]	; (80111c8 <netif_add+0x1a4>)
 801111a:	4825      	ldr	r0, [pc, #148]	; (80111b0 <netif_add+0x18c>)
 801111c:	f00c f9b0 	bl	801d480 <iprintf>
        num_netifs++;
 8011120:	693b      	ldr	r3, [r7, #16]
 8011122:	3301      	adds	r3, #1
 8011124:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8011126:	693b      	ldr	r3, [r7, #16]
 8011128:	2bff      	cmp	r3, #255	; 0xff
 801112a:	dd06      	ble.n	801113a <netif_add+0x116>
 801112c:	4b1e      	ldr	r3, [pc, #120]	; (80111a8 <netif_add+0x184>)
 801112e:	f240 128d 	movw	r2, #397	; 0x18d
 8011132:	4926      	ldr	r1, [pc, #152]	; (80111cc <netif_add+0x1a8>)
 8011134:	481e      	ldr	r0, [pc, #120]	; (80111b0 <netif_add+0x18c>)
 8011136:	f00c f9a3 	bl	801d480 <iprintf>
        if (netif2->num == netif->num) {
 801113a:	697b      	ldr	r3, [r7, #20]
 801113c:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8011140:	68fb      	ldr	r3, [r7, #12]
 8011142:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011146:	429a      	cmp	r2, r3
 8011148:	d108      	bne.n	801115c <netif_add+0x138>
          netif->num++;
 801114a:	68fb      	ldr	r3, [r7, #12]
 801114c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011150:	3301      	adds	r3, #1
 8011152:	b2da      	uxtb	r2, r3
 8011154:	68fb      	ldr	r3, [r7, #12]
 8011156:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 801115a:	e005      	b.n	8011168 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801115c:	697b      	ldr	r3, [r7, #20]
 801115e:	681b      	ldr	r3, [r3, #0]
 8011160:	617b      	str	r3, [r7, #20]
 8011162:	697b      	ldr	r3, [r7, #20]
 8011164:	2b00      	cmp	r3, #0
 8011166:	d1d0      	bne.n	801110a <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 8011168:	697b      	ldr	r3, [r7, #20]
 801116a:	2b00      	cmp	r3, #0
 801116c:	d1be      	bne.n	80110ec <netif_add+0xc8>
  }
  if (netif->num == 254) {
 801116e:	68fb      	ldr	r3, [r7, #12]
 8011170:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011174:	2bfe      	cmp	r3, #254	; 0xfe
 8011176:	d103      	bne.n	8011180 <netif_add+0x15c>
    netif_num = 0;
 8011178:	4b11      	ldr	r3, [pc, #68]	; (80111c0 <netif_add+0x19c>)
 801117a:	2200      	movs	r2, #0
 801117c:	701a      	strb	r2, [r3, #0]
 801117e:	e006      	b.n	801118e <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8011180:	68fb      	ldr	r3, [r7, #12]
 8011182:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011186:	3301      	adds	r3, #1
 8011188:	b2da      	uxtb	r2, r3
 801118a:	4b0d      	ldr	r3, [pc, #52]	; (80111c0 <netif_add+0x19c>)
 801118c:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 801118e:	4b0d      	ldr	r3, [pc, #52]	; (80111c4 <netif_add+0x1a0>)
 8011190:	681a      	ldr	r2, [r3, #0]
 8011192:	68fb      	ldr	r3, [r7, #12]
 8011194:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8011196:	4a0b      	ldr	r2, [pc, #44]	; (80111c4 <netif_add+0x1a0>)
 8011198:	68fb      	ldr	r3, [r7, #12]
 801119a:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 801119c:	68fb      	ldr	r3, [r7, #12]
}
 801119e:	4618      	mov	r0, r3
 80111a0:	3718      	adds	r7, #24
 80111a2:	46bd      	mov	sp, r7
 80111a4:	bd80      	pop	{r7, pc}
 80111a6:	bf00      	nop
 80111a8:	0801fba4 	.word	0x0801fba4
 80111ac:	0801fc38 	.word	0x0801fc38
 80111b0:	0801fbf4 	.word	0x0801fbf4
 80111b4:	0801fc54 	.word	0x0801fc54
 80111b8:	08022788 	.word	0x08022788
 80111bc:	080115e7 	.word	0x080115e7
 80111c0:	200137ac 	.word	0x200137ac
 80111c4:	2001b7c8 	.word	0x2001b7c8
 80111c8:	0801fc78 	.word	0x0801fc78
 80111cc:	0801fc8c 	.word	0x0801fc8c

080111d0 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80111d0:	b580      	push	{r7, lr}
 80111d2:	b082      	sub	sp, #8
 80111d4:	af00      	add	r7, sp, #0
 80111d6:	6078      	str	r0, [r7, #4]
 80111d8:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80111da:	6839      	ldr	r1, [r7, #0]
 80111dc:	6878      	ldr	r0, [r7, #4]
 80111de:	f002 fb91 	bl	8013904 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80111e2:	6839      	ldr	r1, [r7, #0]
 80111e4:	6878      	ldr	r0, [r7, #4]
 80111e6:	f006 ffa7 	bl	8018138 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80111ea:	bf00      	nop
 80111ec:	3708      	adds	r7, #8
 80111ee:	46bd      	mov	sp, r7
 80111f0:	bd80      	pop	{r7, pc}
	...

080111f4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80111f4:	b580      	push	{r7, lr}
 80111f6:	b086      	sub	sp, #24
 80111f8:	af00      	add	r7, sp, #0
 80111fa:	60f8      	str	r0, [r7, #12]
 80111fc:	60b9      	str	r1, [r7, #8]
 80111fe:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8011200:	68bb      	ldr	r3, [r7, #8]
 8011202:	2b00      	cmp	r3, #0
 8011204:	d106      	bne.n	8011214 <netif_do_set_ipaddr+0x20>
 8011206:	4b1d      	ldr	r3, [pc, #116]	; (801127c <netif_do_set_ipaddr+0x88>)
 8011208:	f240 12cb 	movw	r2, #459	; 0x1cb
 801120c:	491c      	ldr	r1, [pc, #112]	; (8011280 <netif_do_set_ipaddr+0x8c>)
 801120e:	481d      	ldr	r0, [pc, #116]	; (8011284 <netif_do_set_ipaddr+0x90>)
 8011210:	f00c f936 	bl	801d480 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	2b00      	cmp	r3, #0
 8011218:	d106      	bne.n	8011228 <netif_do_set_ipaddr+0x34>
 801121a:	4b18      	ldr	r3, [pc, #96]	; (801127c <netif_do_set_ipaddr+0x88>)
 801121c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8011220:	4917      	ldr	r1, [pc, #92]	; (8011280 <netif_do_set_ipaddr+0x8c>)
 8011222:	4818      	ldr	r0, [pc, #96]	; (8011284 <netif_do_set_ipaddr+0x90>)
 8011224:	f00c f92c 	bl	801d480 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8011228:	68bb      	ldr	r3, [r7, #8]
 801122a:	681a      	ldr	r2, [r3, #0]
 801122c:	68fb      	ldr	r3, [r7, #12]
 801122e:	3304      	adds	r3, #4
 8011230:	681b      	ldr	r3, [r3, #0]
 8011232:	429a      	cmp	r2, r3
 8011234:	d01c      	beq.n	8011270 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8011236:	68bb      	ldr	r3, [r7, #8]
 8011238:	681b      	ldr	r3, [r3, #0]
 801123a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 801123c:	68fb      	ldr	r3, [r7, #12]
 801123e:	3304      	adds	r3, #4
 8011240:	681a      	ldr	r2, [r3, #0]
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8011246:	f107 0314 	add.w	r3, r7, #20
 801124a:	4619      	mov	r1, r3
 801124c:	6878      	ldr	r0, [r7, #4]
 801124e:	f7ff ffbf 	bl	80111d0 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8011252:	68bb      	ldr	r3, [r7, #8]
 8011254:	2b00      	cmp	r3, #0
 8011256:	d002      	beq.n	801125e <netif_do_set_ipaddr+0x6a>
 8011258:	68bb      	ldr	r3, [r7, #8]
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	e000      	b.n	8011260 <netif_do_set_ipaddr+0x6c>
 801125e:	2300      	movs	r3, #0
 8011260:	68fa      	ldr	r2, [r7, #12]
 8011262:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8011264:	2101      	movs	r1, #1
 8011266:	68f8      	ldr	r0, [r7, #12]
 8011268:	f000 f8d2 	bl	8011410 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 801126c:	2301      	movs	r3, #1
 801126e:	e000      	b.n	8011272 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8011270:	2300      	movs	r3, #0
}
 8011272:	4618      	mov	r0, r3
 8011274:	3718      	adds	r7, #24
 8011276:	46bd      	mov	sp, r7
 8011278:	bd80      	pop	{r7, pc}
 801127a:	bf00      	nop
 801127c:	0801fba4 	.word	0x0801fba4
 8011280:	0801fcbc 	.word	0x0801fcbc
 8011284:	0801fbf4 	.word	0x0801fbf4

08011288 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8011288:	b480      	push	{r7}
 801128a:	b085      	sub	sp, #20
 801128c:	af00      	add	r7, sp, #0
 801128e:	60f8      	str	r0, [r7, #12]
 8011290:	60b9      	str	r1, [r7, #8]
 8011292:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8011294:	68bb      	ldr	r3, [r7, #8]
 8011296:	681a      	ldr	r2, [r3, #0]
 8011298:	68fb      	ldr	r3, [r7, #12]
 801129a:	3308      	adds	r3, #8
 801129c:	681b      	ldr	r3, [r3, #0]
 801129e:	429a      	cmp	r2, r3
 80112a0:	d00a      	beq.n	80112b8 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80112a2:	68bb      	ldr	r3, [r7, #8]
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	d002      	beq.n	80112ae <netif_do_set_netmask+0x26>
 80112a8:	68bb      	ldr	r3, [r7, #8]
 80112aa:	681b      	ldr	r3, [r3, #0]
 80112ac:	e000      	b.n	80112b0 <netif_do_set_netmask+0x28>
 80112ae:	2300      	movs	r3, #0
 80112b0:	68fa      	ldr	r2, [r7, #12]
 80112b2:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80112b4:	2301      	movs	r3, #1
 80112b6:	e000      	b.n	80112ba <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80112b8:	2300      	movs	r3, #0
}
 80112ba:	4618      	mov	r0, r3
 80112bc:	3714      	adds	r7, #20
 80112be:	46bd      	mov	sp, r7
 80112c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112c4:	4770      	bx	lr

080112c6 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80112c6:	b480      	push	{r7}
 80112c8:	b085      	sub	sp, #20
 80112ca:	af00      	add	r7, sp, #0
 80112cc:	60f8      	str	r0, [r7, #12]
 80112ce:	60b9      	str	r1, [r7, #8]
 80112d0:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80112d2:	68bb      	ldr	r3, [r7, #8]
 80112d4:	681a      	ldr	r2, [r3, #0]
 80112d6:	68fb      	ldr	r3, [r7, #12]
 80112d8:	330c      	adds	r3, #12
 80112da:	681b      	ldr	r3, [r3, #0]
 80112dc:	429a      	cmp	r2, r3
 80112de:	d00a      	beq.n	80112f6 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80112e0:	68bb      	ldr	r3, [r7, #8]
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	d002      	beq.n	80112ec <netif_do_set_gw+0x26>
 80112e6:	68bb      	ldr	r3, [r7, #8]
 80112e8:	681b      	ldr	r3, [r3, #0]
 80112ea:	e000      	b.n	80112ee <netif_do_set_gw+0x28>
 80112ec:	2300      	movs	r3, #0
 80112ee:	68fa      	ldr	r2, [r7, #12]
 80112f0:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80112f2:	2301      	movs	r3, #1
 80112f4:	e000      	b.n	80112f8 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80112f6:	2300      	movs	r3, #0
}
 80112f8:	4618      	mov	r0, r3
 80112fa:	3714      	adds	r7, #20
 80112fc:	46bd      	mov	sp, r7
 80112fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011302:	4770      	bx	lr

08011304 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8011304:	b580      	push	{r7, lr}
 8011306:	b088      	sub	sp, #32
 8011308:	af00      	add	r7, sp, #0
 801130a:	60f8      	str	r0, [r7, #12]
 801130c:	60b9      	str	r1, [r7, #8]
 801130e:	607a      	str	r2, [r7, #4]
 8011310:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8011312:	2300      	movs	r3, #0
 8011314:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8011316:	2300      	movs	r3, #0
 8011318:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801131a:	68bb      	ldr	r3, [r7, #8]
 801131c:	2b00      	cmp	r3, #0
 801131e:	d101      	bne.n	8011324 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8011320:	4b1c      	ldr	r3, [pc, #112]	; (8011394 <netif_set_addr+0x90>)
 8011322:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	2b00      	cmp	r3, #0
 8011328:	d101      	bne.n	801132e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 801132a:	4b1a      	ldr	r3, [pc, #104]	; (8011394 <netif_set_addr+0x90>)
 801132c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801132e:	683b      	ldr	r3, [r7, #0]
 8011330:	2b00      	cmp	r3, #0
 8011332:	d101      	bne.n	8011338 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8011334:	4b17      	ldr	r3, [pc, #92]	; (8011394 <netif_set_addr+0x90>)
 8011336:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8011338:	68bb      	ldr	r3, [r7, #8]
 801133a:	2b00      	cmp	r3, #0
 801133c:	d003      	beq.n	8011346 <netif_set_addr+0x42>
 801133e:	68bb      	ldr	r3, [r7, #8]
 8011340:	681b      	ldr	r3, [r3, #0]
 8011342:	2b00      	cmp	r3, #0
 8011344:	d101      	bne.n	801134a <netif_set_addr+0x46>
 8011346:	2301      	movs	r3, #1
 8011348:	e000      	b.n	801134c <netif_set_addr+0x48>
 801134a:	2300      	movs	r3, #0
 801134c:	617b      	str	r3, [r7, #20]
  if (remove) {
 801134e:	697b      	ldr	r3, [r7, #20]
 8011350:	2b00      	cmp	r3, #0
 8011352:	d006      	beq.n	8011362 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8011354:	f107 0310 	add.w	r3, r7, #16
 8011358:	461a      	mov	r2, r3
 801135a:	68b9      	ldr	r1, [r7, #8]
 801135c:	68f8      	ldr	r0, [r7, #12]
 801135e:	f7ff ff49 	bl	80111f4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8011362:	69fa      	ldr	r2, [r7, #28]
 8011364:	6879      	ldr	r1, [r7, #4]
 8011366:	68f8      	ldr	r0, [r7, #12]
 8011368:	f7ff ff8e 	bl	8011288 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 801136c:	69ba      	ldr	r2, [r7, #24]
 801136e:	6839      	ldr	r1, [r7, #0]
 8011370:	68f8      	ldr	r0, [r7, #12]
 8011372:	f7ff ffa8 	bl	80112c6 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8011376:	697b      	ldr	r3, [r7, #20]
 8011378:	2b00      	cmp	r3, #0
 801137a:	d106      	bne.n	801138a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801137c:	f107 0310 	add.w	r3, r7, #16
 8011380:	461a      	mov	r2, r3
 8011382:	68b9      	ldr	r1, [r7, #8]
 8011384:	68f8      	ldr	r0, [r7, #12]
 8011386:	f7ff ff35 	bl	80111f4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 801138a:	bf00      	nop
 801138c:	3720      	adds	r7, #32
 801138e:	46bd      	mov	sp, r7
 8011390:	bd80      	pop	{r7, pc}
 8011392:	bf00      	nop
 8011394:	08022788 	.word	0x08022788

08011398 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8011398:	b480      	push	{r7}
 801139a:	b083      	sub	sp, #12
 801139c:	af00      	add	r7, sp, #0
 801139e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80113a0:	4a04      	ldr	r2, [pc, #16]	; (80113b4 <netif_set_default+0x1c>)
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80113a6:	bf00      	nop
 80113a8:	370c      	adds	r7, #12
 80113aa:	46bd      	mov	sp, r7
 80113ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113b0:	4770      	bx	lr
 80113b2:	bf00      	nop
 80113b4:	2001b7cc 	.word	0x2001b7cc

080113b8 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80113b8:	b580      	push	{r7, lr}
 80113ba:	b082      	sub	sp, #8
 80113bc:	af00      	add	r7, sp, #0
 80113be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d107      	bne.n	80113d6 <netif_set_up+0x1e>
 80113c6:	4b0f      	ldr	r3, [pc, #60]	; (8011404 <netif_set_up+0x4c>)
 80113c8:	f44f 7254 	mov.w	r2, #848	; 0x350
 80113cc:	490e      	ldr	r1, [pc, #56]	; (8011408 <netif_set_up+0x50>)
 80113ce:	480f      	ldr	r0, [pc, #60]	; (801140c <netif_set_up+0x54>)
 80113d0:	f00c f856 	bl	801d480 <iprintf>
 80113d4:	e013      	b.n	80113fe <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80113dc:	f003 0301 	and.w	r3, r3, #1
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	d10c      	bne.n	80113fe <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80113ea:	f043 0301 	orr.w	r3, r3, #1
 80113ee:	b2da      	uxtb	r2, r3
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80113f6:	2103      	movs	r1, #3
 80113f8:	6878      	ldr	r0, [r7, #4]
 80113fa:	f000 f809 	bl	8011410 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80113fe:	3708      	adds	r7, #8
 8011400:	46bd      	mov	sp, r7
 8011402:	bd80      	pop	{r7, pc}
 8011404:	0801fba4 	.word	0x0801fba4
 8011408:	0801fd2c 	.word	0x0801fd2c
 801140c:	0801fbf4 	.word	0x0801fbf4

08011410 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8011410:	b580      	push	{r7, lr}
 8011412:	b082      	sub	sp, #8
 8011414:	af00      	add	r7, sp, #0
 8011416:	6078      	str	r0, [r7, #4]
 8011418:	460b      	mov	r3, r1
 801141a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	2b00      	cmp	r3, #0
 8011420:	d106      	bne.n	8011430 <netif_issue_reports+0x20>
 8011422:	4b18      	ldr	r3, [pc, #96]	; (8011484 <netif_issue_reports+0x74>)
 8011424:	f240 326d 	movw	r2, #877	; 0x36d
 8011428:	4917      	ldr	r1, [pc, #92]	; (8011488 <netif_issue_reports+0x78>)
 801142a:	4818      	ldr	r0, [pc, #96]	; (801148c <netif_issue_reports+0x7c>)
 801142c:	f00c f828 	bl	801d480 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011436:	f003 0304 	and.w	r3, r3, #4
 801143a:	2b00      	cmp	r3, #0
 801143c:	d01e      	beq.n	801147c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011444:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8011448:	2b00      	cmp	r3, #0
 801144a:	d017      	beq.n	801147c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801144c:	78fb      	ldrb	r3, [r7, #3]
 801144e:	f003 0301 	and.w	r3, r3, #1
 8011452:	2b00      	cmp	r3, #0
 8011454:	d013      	beq.n	801147e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	3304      	adds	r3, #4
 801145a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801145c:	2b00      	cmp	r3, #0
 801145e:	d00e      	beq.n	801147e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011466:	f003 0308 	and.w	r3, r3, #8
 801146a:	2b00      	cmp	r3, #0
 801146c:	d007      	beq.n	801147e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	3304      	adds	r3, #4
 8011472:	4619      	mov	r1, r3
 8011474:	6878      	ldr	r0, [r7, #4]
 8011476:	f009 fc5f 	bl	801ad38 <etharp_request>
 801147a:	e000      	b.n	801147e <netif_issue_reports+0x6e>
    return;
 801147c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 801147e:	3708      	adds	r7, #8
 8011480:	46bd      	mov	sp, r7
 8011482:	bd80      	pop	{r7, pc}
 8011484:	0801fba4 	.word	0x0801fba4
 8011488:	0801fd48 	.word	0x0801fd48
 801148c:	0801fbf4 	.word	0x0801fbf4

08011490 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8011490:	b580      	push	{r7, lr}
 8011492:	b082      	sub	sp, #8
 8011494:	af00      	add	r7, sp, #0
 8011496:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	2b00      	cmp	r3, #0
 801149c:	d107      	bne.n	80114ae <netif_set_down+0x1e>
 801149e:	4b12      	ldr	r3, [pc, #72]	; (80114e8 <netif_set_down+0x58>)
 80114a0:	f240 329b 	movw	r2, #923	; 0x39b
 80114a4:	4911      	ldr	r1, [pc, #68]	; (80114ec <netif_set_down+0x5c>)
 80114a6:	4812      	ldr	r0, [pc, #72]	; (80114f0 <netif_set_down+0x60>)
 80114a8:	f00b ffea 	bl	801d480 <iprintf>
 80114ac:	e019      	b.n	80114e2 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80114b4:	f003 0301 	and.w	r3, r3, #1
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	d012      	beq.n	80114e2 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80114c2:	f023 0301 	bic.w	r3, r3, #1
 80114c6:	b2da      	uxtb	r2, r3
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80114d4:	f003 0308 	and.w	r3, r3, #8
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d002      	beq.n	80114e2 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80114dc:	6878      	ldr	r0, [r7, #4]
 80114de:	f008 ffe5 	bl	801a4ac <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80114e2:	3708      	adds	r7, #8
 80114e4:	46bd      	mov	sp, r7
 80114e6:	bd80      	pop	{r7, pc}
 80114e8:	0801fba4 	.word	0x0801fba4
 80114ec:	0801fd6c 	.word	0x0801fd6c
 80114f0:	0801fbf4 	.word	0x0801fbf4

080114f4 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80114f4:	b580      	push	{r7, lr}
 80114f6:	b082      	sub	sp, #8
 80114f8:	af00      	add	r7, sp, #0
 80114fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	2b00      	cmp	r3, #0
 8011500:	d107      	bne.n	8011512 <netif_set_link_up+0x1e>
 8011502:	4b15      	ldr	r3, [pc, #84]	; (8011558 <netif_set_link_up+0x64>)
 8011504:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8011508:	4914      	ldr	r1, [pc, #80]	; (801155c <netif_set_link_up+0x68>)
 801150a:	4815      	ldr	r0, [pc, #84]	; (8011560 <netif_set_link_up+0x6c>)
 801150c:	f00b ffb8 	bl	801d480 <iprintf>
 8011510:	e01e      	b.n	8011550 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011518:	f003 0304 	and.w	r3, r3, #4
 801151c:	2b00      	cmp	r3, #0
 801151e:	d117      	bne.n	8011550 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011526:	f043 0304 	orr.w	r3, r3, #4
 801152a:	b2da      	uxtb	r2, r3
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 8011532:	6878      	ldr	r0, [r7, #4]
 8011534:	f007 fa2a 	bl	801898c <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8011538:	2103      	movs	r1, #3
 801153a:	6878      	ldr	r0, [r7, #4]
 801153c:	f7ff ff68 	bl	8011410 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	69db      	ldr	r3, [r3, #28]
 8011544:	2b00      	cmp	r3, #0
 8011546:	d003      	beq.n	8011550 <netif_set_link_up+0x5c>
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	69db      	ldr	r3, [r3, #28]
 801154c:	6878      	ldr	r0, [r7, #4]
 801154e:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8011550:	3708      	adds	r7, #8
 8011552:	46bd      	mov	sp, r7
 8011554:	bd80      	pop	{r7, pc}
 8011556:	bf00      	nop
 8011558:	0801fba4 	.word	0x0801fba4
 801155c:	0801fd8c 	.word	0x0801fd8c
 8011560:	0801fbf4 	.word	0x0801fbf4

08011564 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8011564:	b580      	push	{r7, lr}
 8011566:	b082      	sub	sp, #8
 8011568:	af00      	add	r7, sp, #0
 801156a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	2b00      	cmp	r3, #0
 8011570:	d107      	bne.n	8011582 <netif_set_link_down+0x1e>
 8011572:	4b11      	ldr	r3, [pc, #68]	; (80115b8 <netif_set_link_down+0x54>)
 8011574:	f240 4206 	movw	r2, #1030	; 0x406
 8011578:	4910      	ldr	r1, [pc, #64]	; (80115bc <netif_set_link_down+0x58>)
 801157a:	4811      	ldr	r0, [pc, #68]	; (80115c0 <netif_set_link_down+0x5c>)
 801157c:	f00b ff80 	bl	801d480 <iprintf>
 8011580:	e017      	b.n	80115b2 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011588:	f003 0304 	and.w	r3, r3, #4
 801158c:	2b00      	cmp	r3, #0
 801158e:	d010      	beq.n	80115b2 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011596:	f023 0304 	bic.w	r3, r3, #4
 801159a:	b2da      	uxtb	r2, r3
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	69db      	ldr	r3, [r3, #28]
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	d003      	beq.n	80115b2 <netif_set_link_down+0x4e>
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	69db      	ldr	r3, [r3, #28]
 80115ae:	6878      	ldr	r0, [r7, #4]
 80115b0:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80115b2:	3708      	adds	r7, #8
 80115b4:	46bd      	mov	sp, r7
 80115b6:	bd80      	pop	{r7, pc}
 80115b8:	0801fba4 	.word	0x0801fba4
 80115bc:	0801fdb0 	.word	0x0801fdb0
 80115c0:	0801fbf4 	.word	0x0801fbf4

080115c4 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80115c4:	b480      	push	{r7}
 80115c6:	b083      	sub	sp, #12
 80115c8:	af00      	add	r7, sp, #0
 80115ca:	6078      	str	r0, [r7, #4]
 80115cc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	d002      	beq.n	80115da <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	683a      	ldr	r2, [r7, #0]
 80115d8:	61da      	str	r2, [r3, #28]
  }
}
 80115da:	bf00      	nop
 80115dc:	370c      	adds	r7, #12
 80115de:	46bd      	mov	sp, r7
 80115e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115e4:	4770      	bx	lr

080115e6 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80115e6:	b480      	push	{r7}
 80115e8:	b085      	sub	sp, #20
 80115ea:	af00      	add	r7, sp, #0
 80115ec:	60f8      	str	r0, [r7, #12]
 80115ee:	60b9      	str	r1, [r7, #8]
 80115f0:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80115f2:	f06f 030b 	mvn.w	r3, #11
}
 80115f6:	4618      	mov	r0, r3
 80115f8:	3714      	adds	r7, #20
 80115fa:	46bd      	mov	sp, r7
 80115fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011600:	4770      	bx	lr
	...

08011604 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8011604:	b480      	push	{r7}
 8011606:	b085      	sub	sp, #20
 8011608:	af00      	add	r7, sp, #0
 801160a:	4603      	mov	r3, r0
 801160c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 801160e:	79fb      	ldrb	r3, [r7, #7]
 8011610:	2b00      	cmp	r3, #0
 8011612:	d013      	beq.n	801163c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8011614:	4b0d      	ldr	r3, [pc, #52]	; (801164c <netif_get_by_index+0x48>)
 8011616:	681b      	ldr	r3, [r3, #0]
 8011618:	60fb      	str	r3, [r7, #12]
 801161a:	e00c      	b.n	8011636 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 801161c:	68fb      	ldr	r3, [r7, #12]
 801161e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011622:	3301      	adds	r3, #1
 8011624:	b2db      	uxtb	r3, r3
 8011626:	79fa      	ldrb	r2, [r7, #7]
 8011628:	429a      	cmp	r2, r3
 801162a:	d101      	bne.n	8011630 <netif_get_by_index+0x2c>
        return netif; /* found! */
 801162c:	68fb      	ldr	r3, [r7, #12]
 801162e:	e006      	b.n	801163e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8011630:	68fb      	ldr	r3, [r7, #12]
 8011632:	681b      	ldr	r3, [r3, #0]
 8011634:	60fb      	str	r3, [r7, #12]
 8011636:	68fb      	ldr	r3, [r7, #12]
 8011638:	2b00      	cmp	r3, #0
 801163a:	d1ef      	bne.n	801161c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 801163c:	2300      	movs	r3, #0
}
 801163e:	4618      	mov	r0, r3
 8011640:	3714      	adds	r7, #20
 8011642:	46bd      	mov	sp, r7
 8011644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011648:	4770      	bx	lr
 801164a:	bf00      	nop
 801164c:	2001b7c8 	.word	0x2001b7c8

08011650 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8011650:	b580      	push	{r7, lr}
 8011652:	b082      	sub	sp, #8
 8011654:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8011656:	f00a ffed 	bl	801c634 <sys_arch_protect>
 801165a:	6038      	str	r0, [r7, #0]
 801165c:	4b0d      	ldr	r3, [pc, #52]	; (8011694 <pbuf_free_ooseq+0x44>)
 801165e:	2200      	movs	r2, #0
 8011660:	701a      	strb	r2, [r3, #0]
 8011662:	6838      	ldr	r0, [r7, #0]
 8011664:	f00a fff4 	bl	801c650 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8011668:	4b0b      	ldr	r3, [pc, #44]	; (8011698 <pbuf_free_ooseq+0x48>)
 801166a:	681b      	ldr	r3, [r3, #0]
 801166c:	607b      	str	r3, [r7, #4]
 801166e:	e00a      	b.n	8011686 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011674:	2b00      	cmp	r3, #0
 8011676:	d003      	beq.n	8011680 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8011678:	6878      	ldr	r0, [r7, #4]
 801167a:	f002 f981 	bl	8013980 <tcp_free_ooseq>
      return;
 801167e:	e005      	b.n	801168c <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	68db      	ldr	r3, [r3, #12]
 8011684:	607b      	str	r3, [r7, #4]
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	2b00      	cmp	r3, #0
 801168a:	d1f1      	bne.n	8011670 <pbuf_free_ooseq+0x20>
    }
  }
}
 801168c:	3708      	adds	r7, #8
 801168e:	46bd      	mov	sp, r7
 8011690:	bd80      	pop	{r7, pc}
 8011692:	bf00      	nop
 8011694:	2001b7d0 	.word	0x2001b7d0
 8011698:	2001b7d8 	.word	0x2001b7d8

0801169c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 801169c:	b580      	push	{r7, lr}
 801169e:	b082      	sub	sp, #8
 80116a0:	af00      	add	r7, sp, #0
 80116a2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 80116a4:	f7ff ffd4 	bl	8011650 <pbuf_free_ooseq>
}
 80116a8:	bf00      	nop
 80116aa:	3708      	adds	r7, #8
 80116ac:	46bd      	mov	sp, r7
 80116ae:	bd80      	pop	{r7, pc}

080116b0 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80116b0:	b580      	push	{r7, lr}
 80116b2:	b082      	sub	sp, #8
 80116b4:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 80116b6:	f00a ffbd 	bl	801c634 <sys_arch_protect>
 80116ba:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 80116bc:	4b0f      	ldr	r3, [pc, #60]	; (80116fc <pbuf_pool_is_empty+0x4c>)
 80116be:	781b      	ldrb	r3, [r3, #0]
 80116c0:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 80116c2:	4b0e      	ldr	r3, [pc, #56]	; (80116fc <pbuf_pool_is_empty+0x4c>)
 80116c4:	2201      	movs	r2, #1
 80116c6:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 80116c8:	6878      	ldr	r0, [r7, #4]
 80116ca:	f00a ffc1 	bl	801c650 <sys_arch_unprotect>

  if (!queued) {
 80116ce:	78fb      	ldrb	r3, [r7, #3]
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	d10f      	bne.n	80116f4 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 80116d4:	2100      	movs	r1, #0
 80116d6:	480a      	ldr	r0, [pc, #40]	; (8011700 <pbuf_pool_is_empty+0x50>)
 80116d8:	f7fe fee0 	bl	801049c <tcpip_try_callback>
 80116dc:	4603      	mov	r3, r0
 80116de:	2b00      	cmp	r3, #0
 80116e0:	d008      	beq.n	80116f4 <pbuf_pool_is_empty+0x44>
 80116e2:	f00a ffa7 	bl	801c634 <sys_arch_protect>
 80116e6:	6078      	str	r0, [r7, #4]
 80116e8:	4b04      	ldr	r3, [pc, #16]	; (80116fc <pbuf_pool_is_empty+0x4c>)
 80116ea:	2200      	movs	r2, #0
 80116ec:	701a      	strb	r2, [r3, #0]
 80116ee:	6878      	ldr	r0, [r7, #4]
 80116f0:	f00a ffae 	bl	801c650 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80116f4:	bf00      	nop
 80116f6:	3708      	adds	r7, #8
 80116f8:	46bd      	mov	sp, r7
 80116fa:	bd80      	pop	{r7, pc}
 80116fc:	2001b7d0 	.word	0x2001b7d0
 8011700:	0801169d 	.word	0x0801169d

08011704 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8011704:	b480      	push	{r7}
 8011706:	b085      	sub	sp, #20
 8011708:	af00      	add	r7, sp, #0
 801170a:	60f8      	str	r0, [r7, #12]
 801170c:	60b9      	str	r1, [r7, #8]
 801170e:	4611      	mov	r1, r2
 8011710:	461a      	mov	r2, r3
 8011712:	460b      	mov	r3, r1
 8011714:	80fb      	strh	r3, [r7, #6]
 8011716:	4613      	mov	r3, r2
 8011718:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 801171a:	68fb      	ldr	r3, [r7, #12]
 801171c:	2200      	movs	r2, #0
 801171e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8011720:	68fb      	ldr	r3, [r7, #12]
 8011722:	68ba      	ldr	r2, [r7, #8]
 8011724:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8011726:	68fb      	ldr	r3, [r7, #12]
 8011728:	88fa      	ldrh	r2, [r7, #6]
 801172a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 801172c:	68fb      	ldr	r3, [r7, #12]
 801172e:	88ba      	ldrh	r2, [r7, #4]
 8011730:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8011732:	8b3b      	ldrh	r3, [r7, #24]
 8011734:	b2da      	uxtb	r2, r3
 8011736:	68fb      	ldr	r3, [r7, #12]
 8011738:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 801173a:	68fb      	ldr	r3, [r7, #12]
 801173c:	7f3a      	ldrb	r2, [r7, #28]
 801173e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8011740:	68fb      	ldr	r3, [r7, #12]
 8011742:	2201      	movs	r2, #1
 8011744:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8011746:	68fb      	ldr	r3, [r7, #12]
 8011748:	2200      	movs	r2, #0
 801174a:	73da      	strb	r2, [r3, #15]
}
 801174c:	bf00      	nop
 801174e:	3714      	adds	r7, #20
 8011750:	46bd      	mov	sp, r7
 8011752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011756:	4770      	bx	lr

08011758 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8011758:	b580      	push	{r7, lr}
 801175a:	b08c      	sub	sp, #48	; 0x30
 801175c:	af02      	add	r7, sp, #8
 801175e:	4603      	mov	r3, r0
 8011760:	71fb      	strb	r3, [r7, #7]
 8011762:	460b      	mov	r3, r1
 8011764:	80bb      	strh	r3, [r7, #4]
 8011766:	4613      	mov	r3, r2
 8011768:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 801176a:	79fb      	ldrb	r3, [r7, #7]
 801176c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 801176e:	887b      	ldrh	r3, [r7, #2]
 8011770:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8011774:	d07f      	beq.n	8011876 <pbuf_alloc+0x11e>
 8011776:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 801177a:	f300 80c8 	bgt.w	801190e <pbuf_alloc+0x1b6>
 801177e:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8011782:	d010      	beq.n	80117a6 <pbuf_alloc+0x4e>
 8011784:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8011788:	f300 80c1 	bgt.w	801190e <pbuf_alloc+0x1b6>
 801178c:	2b01      	cmp	r3, #1
 801178e:	d002      	beq.n	8011796 <pbuf_alloc+0x3e>
 8011790:	2b41      	cmp	r3, #65	; 0x41
 8011792:	f040 80bc 	bne.w	801190e <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8011796:	887a      	ldrh	r2, [r7, #2]
 8011798:	88bb      	ldrh	r3, [r7, #4]
 801179a:	4619      	mov	r1, r3
 801179c:	2000      	movs	r0, #0
 801179e:	f000 f8d1 	bl	8011944 <pbuf_alloc_reference>
 80117a2:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 80117a4:	e0bd      	b.n	8011922 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80117a6:	2300      	movs	r3, #0
 80117a8:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 80117aa:	2300      	movs	r3, #0
 80117ac:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80117ae:	88bb      	ldrh	r3, [r7, #4]
 80117b0:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80117b2:	200c      	movs	r0, #12
 80117b4:	f7ff fbb2 	bl	8010f1c <memp_malloc>
 80117b8:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80117ba:	693b      	ldr	r3, [r7, #16]
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d109      	bne.n	80117d4 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 80117c0:	f7ff ff76 	bl	80116b0 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80117c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d002      	beq.n	80117d0 <pbuf_alloc+0x78>
            pbuf_free(p);
 80117ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80117cc:	f000 faa8 	bl	8011d20 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80117d0:	2300      	movs	r3, #0
 80117d2:	e0a7      	b.n	8011924 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80117d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80117d6:	3303      	adds	r3, #3
 80117d8:	b29b      	uxth	r3, r3
 80117da:	f023 0303 	bic.w	r3, r3, #3
 80117de:	b29b      	uxth	r3, r3
 80117e0:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 80117e4:	b29b      	uxth	r3, r3
 80117e6:	8b7a      	ldrh	r2, [r7, #26]
 80117e8:	4293      	cmp	r3, r2
 80117ea:	bf28      	it	cs
 80117ec:	4613      	movcs	r3, r2
 80117ee:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80117f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80117f2:	3310      	adds	r3, #16
 80117f4:	693a      	ldr	r2, [r7, #16]
 80117f6:	4413      	add	r3, r2
 80117f8:	3303      	adds	r3, #3
 80117fa:	f023 0303 	bic.w	r3, r3, #3
 80117fe:	4618      	mov	r0, r3
 8011800:	89f9      	ldrh	r1, [r7, #14]
 8011802:	8b7a      	ldrh	r2, [r7, #26]
 8011804:	2300      	movs	r3, #0
 8011806:	9301      	str	r3, [sp, #4]
 8011808:	887b      	ldrh	r3, [r7, #2]
 801180a:	9300      	str	r3, [sp, #0]
 801180c:	460b      	mov	r3, r1
 801180e:	4601      	mov	r1, r0
 8011810:	6938      	ldr	r0, [r7, #16]
 8011812:	f7ff ff77 	bl	8011704 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8011816:	693b      	ldr	r3, [r7, #16]
 8011818:	685b      	ldr	r3, [r3, #4]
 801181a:	f003 0303 	and.w	r3, r3, #3
 801181e:	2b00      	cmp	r3, #0
 8011820:	d006      	beq.n	8011830 <pbuf_alloc+0xd8>
 8011822:	4b42      	ldr	r3, [pc, #264]	; (801192c <pbuf_alloc+0x1d4>)
 8011824:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011828:	4941      	ldr	r1, [pc, #260]	; (8011930 <pbuf_alloc+0x1d8>)
 801182a:	4842      	ldr	r0, [pc, #264]	; (8011934 <pbuf_alloc+0x1dc>)
 801182c:	f00b fe28 	bl	801d480 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8011830:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011832:	3303      	adds	r3, #3
 8011834:	f023 0303 	bic.w	r3, r3, #3
 8011838:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 801183c:	d106      	bne.n	801184c <pbuf_alloc+0xf4>
 801183e:	4b3b      	ldr	r3, [pc, #236]	; (801192c <pbuf_alloc+0x1d4>)
 8011840:	f44f 7281 	mov.w	r2, #258	; 0x102
 8011844:	493c      	ldr	r1, [pc, #240]	; (8011938 <pbuf_alloc+0x1e0>)
 8011846:	483b      	ldr	r0, [pc, #236]	; (8011934 <pbuf_alloc+0x1dc>)
 8011848:	f00b fe1a 	bl	801d480 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 801184c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801184e:	2b00      	cmp	r3, #0
 8011850:	d102      	bne.n	8011858 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8011852:	693b      	ldr	r3, [r7, #16]
 8011854:	627b      	str	r3, [r7, #36]	; 0x24
 8011856:	e002      	b.n	801185e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8011858:	69fb      	ldr	r3, [r7, #28]
 801185a:	693a      	ldr	r2, [r7, #16]
 801185c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 801185e:	693b      	ldr	r3, [r7, #16]
 8011860:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8011862:	8b7a      	ldrh	r2, [r7, #26]
 8011864:	89fb      	ldrh	r3, [r7, #14]
 8011866:	1ad3      	subs	r3, r2, r3
 8011868:	837b      	strh	r3, [r7, #26]
        offset = 0;
 801186a:	2300      	movs	r3, #0
 801186c:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 801186e:	8b7b      	ldrh	r3, [r7, #26]
 8011870:	2b00      	cmp	r3, #0
 8011872:	d19e      	bne.n	80117b2 <pbuf_alloc+0x5a>
      break;
 8011874:	e055      	b.n	8011922 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8011876:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011878:	3303      	adds	r3, #3
 801187a:	b29b      	uxth	r3, r3
 801187c:	f023 0303 	bic.w	r3, r3, #3
 8011880:	b29a      	uxth	r2, r3
 8011882:	88bb      	ldrh	r3, [r7, #4]
 8011884:	3303      	adds	r3, #3
 8011886:	b29b      	uxth	r3, r3
 8011888:	f023 0303 	bic.w	r3, r3, #3
 801188c:	b29b      	uxth	r3, r3
 801188e:	4413      	add	r3, r2
 8011890:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8011892:	8b3b      	ldrh	r3, [r7, #24]
 8011894:	3310      	adds	r3, #16
 8011896:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8011898:	8b3a      	ldrh	r2, [r7, #24]
 801189a:	88bb      	ldrh	r3, [r7, #4]
 801189c:	3303      	adds	r3, #3
 801189e:	f023 0303 	bic.w	r3, r3, #3
 80118a2:	429a      	cmp	r2, r3
 80118a4:	d306      	bcc.n	80118b4 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80118a6:	8afa      	ldrh	r2, [r7, #22]
 80118a8:	88bb      	ldrh	r3, [r7, #4]
 80118aa:	3303      	adds	r3, #3
 80118ac:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80118b0:	429a      	cmp	r2, r3
 80118b2:	d201      	bcs.n	80118b8 <pbuf_alloc+0x160>
        return NULL;
 80118b4:	2300      	movs	r3, #0
 80118b6:	e035      	b.n	8011924 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80118b8:	8afb      	ldrh	r3, [r7, #22]
 80118ba:	4618      	mov	r0, r3
 80118bc:	f7ff f9ac 	bl	8010c18 <mem_malloc>
 80118c0:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 80118c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	d101      	bne.n	80118cc <pbuf_alloc+0x174>
        return NULL;
 80118c8:	2300      	movs	r3, #0
 80118ca:	e02b      	b.n	8011924 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80118cc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80118ce:	3310      	adds	r3, #16
 80118d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80118d2:	4413      	add	r3, r2
 80118d4:	3303      	adds	r3, #3
 80118d6:	f023 0303 	bic.w	r3, r3, #3
 80118da:	4618      	mov	r0, r3
 80118dc:	88b9      	ldrh	r1, [r7, #4]
 80118de:	88ba      	ldrh	r2, [r7, #4]
 80118e0:	2300      	movs	r3, #0
 80118e2:	9301      	str	r3, [sp, #4]
 80118e4:	887b      	ldrh	r3, [r7, #2]
 80118e6:	9300      	str	r3, [sp, #0]
 80118e8:	460b      	mov	r3, r1
 80118ea:	4601      	mov	r1, r0
 80118ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80118ee:	f7ff ff09 	bl	8011704 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80118f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118f4:	685b      	ldr	r3, [r3, #4]
 80118f6:	f003 0303 	and.w	r3, r3, #3
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	d010      	beq.n	8011920 <pbuf_alloc+0x1c8>
 80118fe:	4b0b      	ldr	r3, [pc, #44]	; (801192c <pbuf_alloc+0x1d4>)
 8011900:	f44f 7291 	mov.w	r2, #290	; 0x122
 8011904:	490d      	ldr	r1, [pc, #52]	; (801193c <pbuf_alloc+0x1e4>)
 8011906:	480b      	ldr	r0, [pc, #44]	; (8011934 <pbuf_alloc+0x1dc>)
 8011908:	f00b fdba 	bl	801d480 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 801190c:	e008      	b.n	8011920 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 801190e:	4b07      	ldr	r3, [pc, #28]	; (801192c <pbuf_alloc+0x1d4>)
 8011910:	f240 1227 	movw	r2, #295	; 0x127
 8011914:	490a      	ldr	r1, [pc, #40]	; (8011940 <pbuf_alloc+0x1e8>)
 8011916:	4807      	ldr	r0, [pc, #28]	; (8011934 <pbuf_alloc+0x1dc>)
 8011918:	f00b fdb2 	bl	801d480 <iprintf>
      return NULL;
 801191c:	2300      	movs	r3, #0
 801191e:	e001      	b.n	8011924 <pbuf_alloc+0x1cc>
      break;
 8011920:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8011922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011924:	4618      	mov	r0, r3
 8011926:	3728      	adds	r7, #40	; 0x28
 8011928:	46bd      	mov	sp, r7
 801192a:	bd80      	pop	{r7, pc}
 801192c:	0801fdd4 	.word	0x0801fdd4
 8011930:	0801fe04 	.word	0x0801fe04
 8011934:	0801fe34 	.word	0x0801fe34
 8011938:	0801fe5c 	.word	0x0801fe5c
 801193c:	0801fe90 	.word	0x0801fe90
 8011940:	0801febc 	.word	0x0801febc

08011944 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8011944:	b580      	push	{r7, lr}
 8011946:	b086      	sub	sp, #24
 8011948:	af02      	add	r7, sp, #8
 801194a:	6078      	str	r0, [r7, #4]
 801194c:	460b      	mov	r3, r1
 801194e:	807b      	strh	r3, [r7, #2]
 8011950:	4613      	mov	r3, r2
 8011952:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8011954:	883b      	ldrh	r3, [r7, #0]
 8011956:	2b41      	cmp	r3, #65	; 0x41
 8011958:	d009      	beq.n	801196e <pbuf_alloc_reference+0x2a>
 801195a:	883b      	ldrh	r3, [r7, #0]
 801195c:	2b01      	cmp	r3, #1
 801195e:	d006      	beq.n	801196e <pbuf_alloc_reference+0x2a>
 8011960:	4b0f      	ldr	r3, [pc, #60]	; (80119a0 <pbuf_alloc_reference+0x5c>)
 8011962:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8011966:	490f      	ldr	r1, [pc, #60]	; (80119a4 <pbuf_alloc_reference+0x60>)
 8011968:	480f      	ldr	r0, [pc, #60]	; (80119a8 <pbuf_alloc_reference+0x64>)
 801196a:	f00b fd89 	bl	801d480 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 801196e:	200b      	movs	r0, #11
 8011970:	f7ff fad4 	bl	8010f1c <memp_malloc>
 8011974:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8011976:	68fb      	ldr	r3, [r7, #12]
 8011978:	2b00      	cmp	r3, #0
 801197a:	d101      	bne.n	8011980 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 801197c:	2300      	movs	r3, #0
 801197e:	e00b      	b.n	8011998 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8011980:	8879      	ldrh	r1, [r7, #2]
 8011982:	887a      	ldrh	r2, [r7, #2]
 8011984:	2300      	movs	r3, #0
 8011986:	9301      	str	r3, [sp, #4]
 8011988:	883b      	ldrh	r3, [r7, #0]
 801198a:	9300      	str	r3, [sp, #0]
 801198c:	460b      	mov	r3, r1
 801198e:	6879      	ldr	r1, [r7, #4]
 8011990:	68f8      	ldr	r0, [r7, #12]
 8011992:	f7ff feb7 	bl	8011704 <pbuf_init_alloced_pbuf>
  return p;
 8011996:	68fb      	ldr	r3, [r7, #12]
}
 8011998:	4618      	mov	r0, r3
 801199a:	3710      	adds	r7, #16
 801199c:	46bd      	mov	sp, r7
 801199e:	bd80      	pop	{r7, pc}
 80119a0:	0801fdd4 	.word	0x0801fdd4
 80119a4:	0801fed8 	.word	0x0801fed8
 80119a8:	0801fe34 	.word	0x0801fe34

080119ac <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80119ac:	b580      	push	{r7, lr}
 80119ae:	b088      	sub	sp, #32
 80119b0:	af02      	add	r7, sp, #8
 80119b2:	607b      	str	r3, [r7, #4]
 80119b4:	4603      	mov	r3, r0
 80119b6:	73fb      	strb	r3, [r7, #15]
 80119b8:	460b      	mov	r3, r1
 80119ba:	81bb      	strh	r3, [r7, #12]
 80119bc:	4613      	mov	r3, r2
 80119be:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80119c0:	7bfb      	ldrb	r3, [r7, #15]
 80119c2:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80119c4:	8a7b      	ldrh	r3, [r7, #18]
 80119c6:	3303      	adds	r3, #3
 80119c8:	f023 0203 	bic.w	r2, r3, #3
 80119cc:	89bb      	ldrh	r3, [r7, #12]
 80119ce:	441a      	add	r2, r3
 80119d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80119d2:	429a      	cmp	r2, r3
 80119d4:	d901      	bls.n	80119da <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80119d6:	2300      	movs	r3, #0
 80119d8:	e018      	b.n	8011a0c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80119da:	6a3b      	ldr	r3, [r7, #32]
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d007      	beq.n	80119f0 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80119e0:	8a7b      	ldrh	r3, [r7, #18]
 80119e2:	3303      	adds	r3, #3
 80119e4:	f023 0303 	bic.w	r3, r3, #3
 80119e8:	6a3a      	ldr	r2, [r7, #32]
 80119ea:	4413      	add	r3, r2
 80119ec:	617b      	str	r3, [r7, #20]
 80119ee:	e001      	b.n	80119f4 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80119f0:	2300      	movs	r3, #0
 80119f2:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80119f4:	6878      	ldr	r0, [r7, #4]
 80119f6:	89b9      	ldrh	r1, [r7, #12]
 80119f8:	89ba      	ldrh	r2, [r7, #12]
 80119fa:	2302      	movs	r3, #2
 80119fc:	9301      	str	r3, [sp, #4]
 80119fe:	897b      	ldrh	r3, [r7, #10]
 8011a00:	9300      	str	r3, [sp, #0]
 8011a02:	460b      	mov	r3, r1
 8011a04:	6979      	ldr	r1, [r7, #20]
 8011a06:	f7ff fe7d 	bl	8011704 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8011a0a:	687b      	ldr	r3, [r7, #4]
}
 8011a0c:	4618      	mov	r0, r3
 8011a0e:	3718      	adds	r7, #24
 8011a10:	46bd      	mov	sp, r7
 8011a12:	bd80      	pop	{r7, pc}

08011a14 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8011a14:	b580      	push	{r7, lr}
 8011a16:	b084      	sub	sp, #16
 8011a18:	af00      	add	r7, sp, #0
 8011a1a:	6078      	str	r0, [r7, #4]
 8011a1c:	460b      	mov	r3, r1
 8011a1e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d106      	bne.n	8011a34 <pbuf_realloc+0x20>
 8011a26:	4b3a      	ldr	r3, [pc, #232]	; (8011b10 <pbuf_realloc+0xfc>)
 8011a28:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8011a2c:	4939      	ldr	r1, [pc, #228]	; (8011b14 <pbuf_realloc+0x100>)
 8011a2e:	483a      	ldr	r0, [pc, #232]	; (8011b18 <pbuf_realloc+0x104>)
 8011a30:	f00b fd26 	bl	801d480 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	891b      	ldrh	r3, [r3, #8]
 8011a38:	887a      	ldrh	r2, [r7, #2]
 8011a3a:	429a      	cmp	r2, r3
 8011a3c:	d263      	bcs.n	8011b06 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	891a      	ldrh	r2, [r3, #8]
 8011a42:	887b      	ldrh	r3, [r7, #2]
 8011a44:	1ad3      	subs	r3, r2, r3
 8011a46:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8011a48:	887b      	ldrh	r3, [r7, #2]
 8011a4a:	817b      	strh	r3, [r7, #10]
  q = p;
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8011a50:	e018      	b.n	8011a84 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8011a52:	68fb      	ldr	r3, [r7, #12]
 8011a54:	895b      	ldrh	r3, [r3, #10]
 8011a56:	897a      	ldrh	r2, [r7, #10]
 8011a58:	1ad3      	subs	r3, r2, r3
 8011a5a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8011a5c:	68fb      	ldr	r3, [r7, #12]
 8011a5e:	891a      	ldrh	r2, [r3, #8]
 8011a60:	893b      	ldrh	r3, [r7, #8]
 8011a62:	1ad3      	subs	r3, r2, r3
 8011a64:	b29a      	uxth	r2, r3
 8011a66:	68fb      	ldr	r3, [r7, #12]
 8011a68:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8011a6a:	68fb      	ldr	r3, [r7, #12]
 8011a6c:	681b      	ldr	r3, [r3, #0]
 8011a6e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8011a70:	68fb      	ldr	r3, [r7, #12]
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	d106      	bne.n	8011a84 <pbuf_realloc+0x70>
 8011a76:	4b26      	ldr	r3, [pc, #152]	; (8011b10 <pbuf_realloc+0xfc>)
 8011a78:	f240 12af 	movw	r2, #431	; 0x1af
 8011a7c:	4927      	ldr	r1, [pc, #156]	; (8011b1c <pbuf_realloc+0x108>)
 8011a7e:	4826      	ldr	r0, [pc, #152]	; (8011b18 <pbuf_realloc+0x104>)
 8011a80:	f00b fcfe 	bl	801d480 <iprintf>
  while (rem_len > q->len) {
 8011a84:	68fb      	ldr	r3, [r7, #12]
 8011a86:	895b      	ldrh	r3, [r3, #10]
 8011a88:	897a      	ldrh	r2, [r7, #10]
 8011a8a:	429a      	cmp	r2, r3
 8011a8c:	d8e1      	bhi.n	8011a52 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8011a8e:	68fb      	ldr	r3, [r7, #12]
 8011a90:	7b1b      	ldrb	r3, [r3, #12]
 8011a92:	f003 030f 	and.w	r3, r3, #15
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d121      	bne.n	8011ade <pbuf_realloc+0xca>
 8011a9a:	68fb      	ldr	r3, [r7, #12]
 8011a9c:	895b      	ldrh	r3, [r3, #10]
 8011a9e:	897a      	ldrh	r2, [r7, #10]
 8011aa0:	429a      	cmp	r2, r3
 8011aa2:	d01c      	beq.n	8011ade <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8011aa4:	68fb      	ldr	r3, [r7, #12]
 8011aa6:	7b5b      	ldrb	r3, [r3, #13]
 8011aa8:	f003 0302 	and.w	r3, r3, #2
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	d116      	bne.n	8011ade <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8011ab0:	68fb      	ldr	r3, [r7, #12]
 8011ab2:	685a      	ldr	r2, [r3, #4]
 8011ab4:	68fb      	ldr	r3, [r7, #12]
 8011ab6:	1ad3      	subs	r3, r2, r3
 8011ab8:	b29a      	uxth	r2, r3
 8011aba:	897b      	ldrh	r3, [r7, #10]
 8011abc:	4413      	add	r3, r2
 8011abe:	b29b      	uxth	r3, r3
 8011ac0:	4619      	mov	r1, r3
 8011ac2:	68f8      	ldr	r0, [r7, #12]
 8011ac4:	f7fe ff9e 	bl	8010a04 <mem_trim>
 8011ac8:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8011aca:	68fb      	ldr	r3, [r7, #12]
 8011acc:	2b00      	cmp	r3, #0
 8011ace:	d106      	bne.n	8011ade <pbuf_realloc+0xca>
 8011ad0:	4b0f      	ldr	r3, [pc, #60]	; (8011b10 <pbuf_realloc+0xfc>)
 8011ad2:	f240 12bd 	movw	r2, #445	; 0x1bd
 8011ad6:	4912      	ldr	r1, [pc, #72]	; (8011b20 <pbuf_realloc+0x10c>)
 8011ad8:	480f      	ldr	r0, [pc, #60]	; (8011b18 <pbuf_realloc+0x104>)
 8011ada:	f00b fcd1 	bl	801d480 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8011ade:	68fb      	ldr	r3, [r7, #12]
 8011ae0:	897a      	ldrh	r2, [r7, #10]
 8011ae2:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8011ae4:	68fb      	ldr	r3, [r7, #12]
 8011ae6:	895a      	ldrh	r2, [r3, #10]
 8011ae8:	68fb      	ldr	r3, [r7, #12]
 8011aea:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8011aec:	68fb      	ldr	r3, [r7, #12]
 8011aee:	681b      	ldr	r3, [r3, #0]
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	d004      	beq.n	8011afe <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8011af4:	68fb      	ldr	r3, [r7, #12]
 8011af6:	681b      	ldr	r3, [r3, #0]
 8011af8:	4618      	mov	r0, r3
 8011afa:	f000 f911 	bl	8011d20 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8011afe:	68fb      	ldr	r3, [r7, #12]
 8011b00:	2200      	movs	r2, #0
 8011b02:	601a      	str	r2, [r3, #0]
 8011b04:	e000      	b.n	8011b08 <pbuf_realloc+0xf4>
    return;
 8011b06:	bf00      	nop

}
 8011b08:	3710      	adds	r7, #16
 8011b0a:	46bd      	mov	sp, r7
 8011b0c:	bd80      	pop	{r7, pc}
 8011b0e:	bf00      	nop
 8011b10:	0801fdd4 	.word	0x0801fdd4
 8011b14:	0801feec 	.word	0x0801feec
 8011b18:	0801fe34 	.word	0x0801fe34
 8011b1c:	0801ff04 	.word	0x0801ff04
 8011b20:	0801ff1c 	.word	0x0801ff1c

08011b24 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8011b24:	b580      	push	{r7, lr}
 8011b26:	b086      	sub	sp, #24
 8011b28:	af00      	add	r7, sp, #0
 8011b2a:	60f8      	str	r0, [r7, #12]
 8011b2c:	60b9      	str	r1, [r7, #8]
 8011b2e:	4613      	mov	r3, r2
 8011b30:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8011b32:	68fb      	ldr	r3, [r7, #12]
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	d106      	bne.n	8011b46 <pbuf_add_header_impl+0x22>
 8011b38:	4b2b      	ldr	r3, [pc, #172]	; (8011be8 <pbuf_add_header_impl+0xc4>)
 8011b3a:	f240 12df 	movw	r2, #479	; 0x1df
 8011b3e:	492b      	ldr	r1, [pc, #172]	; (8011bec <pbuf_add_header_impl+0xc8>)
 8011b40:	482b      	ldr	r0, [pc, #172]	; (8011bf0 <pbuf_add_header_impl+0xcc>)
 8011b42:	f00b fc9d 	bl	801d480 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8011b46:	68fb      	ldr	r3, [r7, #12]
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	d003      	beq.n	8011b54 <pbuf_add_header_impl+0x30>
 8011b4c:	68bb      	ldr	r3, [r7, #8]
 8011b4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011b52:	d301      	bcc.n	8011b58 <pbuf_add_header_impl+0x34>
    return 1;
 8011b54:	2301      	movs	r3, #1
 8011b56:	e043      	b.n	8011be0 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8011b58:	68bb      	ldr	r3, [r7, #8]
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	d101      	bne.n	8011b62 <pbuf_add_header_impl+0x3e>
    return 0;
 8011b5e:	2300      	movs	r3, #0
 8011b60:	e03e      	b.n	8011be0 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8011b62:	68bb      	ldr	r3, [r7, #8]
 8011b64:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8011b66:	68fb      	ldr	r3, [r7, #12]
 8011b68:	891a      	ldrh	r2, [r3, #8]
 8011b6a:	8a7b      	ldrh	r3, [r7, #18]
 8011b6c:	4413      	add	r3, r2
 8011b6e:	b29b      	uxth	r3, r3
 8011b70:	8a7a      	ldrh	r2, [r7, #18]
 8011b72:	429a      	cmp	r2, r3
 8011b74:	d901      	bls.n	8011b7a <pbuf_add_header_impl+0x56>
    return 1;
 8011b76:	2301      	movs	r3, #1
 8011b78:	e032      	b.n	8011be0 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8011b7a:	68fb      	ldr	r3, [r7, #12]
 8011b7c:	7b1b      	ldrb	r3, [r3, #12]
 8011b7e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8011b80:	8a3b      	ldrh	r3, [r7, #16]
 8011b82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d00c      	beq.n	8011ba4 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8011b8a:	68fb      	ldr	r3, [r7, #12]
 8011b8c:	685a      	ldr	r2, [r3, #4]
 8011b8e:	68bb      	ldr	r3, [r7, #8]
 8011b90:	425b      	negs	r3, r3
 8011b92:	4413      	add	r3, r2
 8011b94:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8011b96:	68fb      	ldr	r3, [r7, #12]
 8011b98:	3310      	adds	r3, #16
 8011b9a:	697a      	ldr	r2, [r7, #20]
 8011b9c:	429a      	cmp	r2, r3
 8011b9e:	d20d      	bcs.n	8011bbc <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8011ba0:	2301      	movs	r3, #1
 8011ba2:	e01d      	b.n	8011be0 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8011ba4:	79fb      	ldrb	r3, [r7, #7]
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	d006      	beq.n	8011bb8 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8011baa:	68fb      	ldr	r3, [r7, #12]
 8011bac:	685a      	ldr	r2, [r3, #4]
 8011bae:	68bb      	ldr	r3, [r7, #8]
 8011bb0:	425b      	negs	r3, r3
 8011bb2:	4413      	add	r3, r2
 8011bb4:	617b      	str	r3, [r7, #20]
 8011bb6:	e001      	b.n	8011bbc <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8011bb8:	2301      	movs	r3, #1
 8011bba:	e011      	b.n	8011be0 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8011bbc:	68fb      	ldr	r3, [r7, #12]
 8011bbe:	697a      	ldr	r2, [r7, #20]
 8011bc0:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8011bc2:	68fb      	ldr	r3, [r7, #12]
 8011bc4:	895a      	ldrh	r2, [r3, #10]
 8011bc6:	8a7b      	ldrh	r3, [r7, #18]
 8011bc8:	4413      	add	r3, r2
 8011bca:	b29a      	uxth	r2, r3
 8011bcc:	68fb      	ldr	r3, [r7, #12]
 8011bce:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8011bd0:	68fb      	ldr	r3, [r7, #12]
 8011bd2:	891a      	ldrh	r2, [r3, #8]
 8011bd4:	8a7b      	ldrh	r3, [r7, #18]
 8011bd6:	4413      	add	r3, r2
 8011bd8:	b29a      	uxth	r2, r3
 8011bda:	68fb      	ldr	r3, [r7, #12]
 8011bdc:	811a      	strh	r2, [r3, #8]


  return 0;
 8011bde:	2300      	movs	r3, #0
}
 8011be0:	4618      	mov	r0, r3
 8011be2:	3718      	adds	r7, #24
 8011be4:	46bd      	mov	sp, r7
 8011be6:	bd80      	pop	{r7, pc}
 8011be8:	0801fdd4 	.word	0x0801fdd4
 8011bec:	0801ff38 	.word	0x0801ff38
 8011bf0:	0801fe34 	.word	0x0801fe34

08011bf4 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8011bf4:	b580      	push	{r7, lr}
 8011bf6:	b082      	sub	sp, #8
 8011bf8:	af00      	add	r7, sp, #0
 8011bfa:	6078      	str	r0, [r7, #4]
 8011bfc:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8011bfe:	2200      	movs	r2, #0
 8011c00:	6839      	ldr	r1, [r7, #0]
 8011c02:	6878      	ldr	r0, [r7, #4]
 8011c04:	f7ff ff8e 	bl	8011b24 <pbuf_add_header_impl>
 8011c08:	4603      	mov	r3, r0
}
 8011c0a:	4618      	mov	r0, r3
 8011c0c:	3708      	adds	r7, #8
 8011c0e:	46bd      	mov	sp, r7
 8011c10:	bd80      	pop	{r7, pc}
	...

08011c14 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8011c14:	b580      	push	{r7, lr}
 8011c16:	b084      	sub	sp, #16
 8011c18:	af00      	add	r7, sp, #0
 8011c1a:	6078      	str	r0, [r7, #4]
 8011c1c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	d106      	bne.n	8011c32 <pbuf_remove_header+0x1e>
 8011c24:	4b20      	ldr	r3, [pc, #128]	; (8011ca8 <pbuf_remove_header+0x94>)
 8011c26:	f240 224b 	movw	r2, #587	; 0x24b
 8011c2a:	4920      	ldr	r1, [pc, #128]	; (8011cac <pbuf_remove_header+0x98>)
 8011c2c:	4820      	ldr	r0, [pc, #128]	; (8011cb0 <pbuf_remove_header+0x9c>)
 8011c2e:	f00b fc27 	bl	801d480 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	d003      	beq.n	8011c40 <pbuf_remove_header+0x2c>
 8011c38:	683b      	ldr	r3, [r7, #0]
 8011c3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011c3e:	d301      	bcc.n	8011c44 <pbuf_remove_header+0x30>
    return 1;
 8011c40:	2301      	movs	r3, #1
 8011c42:	e02c      	b.n	8011c9e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8011c44:	683b      	ldr	r3, [r7, #0]
 8011c46:	2b00      	cmp	r3, #0
 8011c48:	d101      	bne.n	8011c4e <pbuf_remove_header+0x3a>
    return 0;
 8011c4a:	2300      	movs	r3, #0
 8011c4c:	e027      	b.n	8011c9e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8011c4e:	683b      	ldr	r3, [r7, #0]
 8011c50:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	895b      	ldrh	r3, [r3, #10]
 8011c56:	89fa      	ldrh	r2, [r7, #14]
 8011c58:	429a      	cmp	r2, r3
 8011c5a:	d908      	bls.n	8011c6e <pbuf_remove_header+0x5a>
 8011c5c:	4b12      	ldr	r3, [pc, #72]	; (8011ca8 <pbuf_remove_header+0x94>)
 8011c5e:	f240 2255 	movw	r2, #597	; 0x255
 8011c62:	4914      	ldr	r1, [pc, #80]	; (8011cb4 <pbuf_remove_header+0xa0>)
 8011c64:	4812      	ldr	r0, [pc, #72]	; (8011cb0 <pbuf_remove_header+0x9c>)
 8011c66:	f00b fc0b 	bl	801d480 <iprintf>
 8011c6a:	2301      	movs	r3, #1
 8011c6c:	e017      	b.n	8011c9e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	685b      	ldr	r3, [r3, #4]
 8011c72:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	685a      	ldr	r2, [r3, #4]
 8011c78:	683b      	ldr	r3, [r7, #0]
 8011c7a:	441a      	add	r2, r3
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	895a      	ldrh	r2, [r3, #10]
 8011c84:	89fb      	ldrh	r3, [r7, #14]
 8011c86:	1ad3      	subs	r3, r2, r3
 8011c88:	b29a      	uxth	r2, r3
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	891a      	ldrh	r2, [r3, #8]
 8011c92:	89fb      	ldrh	r3, [r7, #14]
 8011c94:	1ad3      	subs	r3, r2, r3
 8011c96:	b29a      	uxth	r2, r3
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8011c9c:	2300      	movs	r3, #0
}
 8011c9e:	4618      	mov	r0, r3
 8011ca0:	3710      	adds	r7, #16
 8011ca2:	46bd      	mov	sp, r7
 8011ca4:	bd80      	pop	{r7, pc}
 8011ca6:	bf00      	nop
 8011ca8:	0801fdd4 	.word	0x0801fdd4
 8011cac:	0801ff38 	.word	0x0801ff38
 8011cb0:	0801fe34 	.word	0x0801fe34
 8011cb4:	0801ff44 	.word	0x0801ff44

08011cb8 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8011cb8:	b580      	push	{r7, lr}
 8011cba:	b082      	sub	sp, #8
 8011cbc:	af00      	add	r7, sp, #0
 8011cbe:	6078      	str	r0, [r7, #4]
 8011cc0:	460b      	mov	r3, r1
 8011cc2:	807b      	strh	r3, [r7, #2]
 8011cc4:	4613      	mov	r3, r2
 8011cc6:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8011cc8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	da08      	bge.n	8011ce2 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8011cd0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011cd4:	425b      	negs	r3, r3
 8011cd6:	4619      	mov	r1, r3
 8011cd8:	6878      	ldr	r0, [r7, #4]
 8011cda:	f7ff ff9b 	bl	8011c14 <pbuf_remove_header>
 8011cde:	4603      	mov	r3, r0
 8011ce0:	e007      	b.n	8011cf2 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8011ce2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011ce6:	787a      	ldrb	r2, [r7, #1]
 8011ce8:	4619      	mov	r1, r3
 8011cea:	6878      	ldr	r0, [r7, #4]
 8011cec:	f7ff ff1a 	bl	8011b24 <pbuf_add_header_impl>
 8011cf0:	4603      	mov	r3, r0
  }
}
 8011cf2:	4618      	mov	r0, r3
 8011cf4:	3708      	adds	r7, #8
 8011cf6:	46bd      	mov	sp, r7
 8011cf8:	bd80      	pop	{r7, pc}

08011cfa <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8011cfa:	b580      	push	{r7, lr}
 8011cfc:	b082      	sub	sp, #8
 8011cfe:	af00      	add	r7, sp, #0
 8011d00:	6078      	str	r0, [r7, #4]
 8011d02:	460b      	mov	r3, r1
 8011d04:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8011d06:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011d0a:	2201      	movs	r2, #1
 8011d0c:	4619      	mov	r1, r3
 8011d0e:	6878      	ldr	r0, [r7, #4]
 8011d10:	f7ff ffd2 	bl	8011cb8 <pbuf_header_impl>
 8011d14:	4603      	mov	r3, r0
}
 8011d16:	4618      	mov	r0, r3
 8011d18:	3708      	adds	r7, #8
 8011d1a:	46bd      	mov	sp, r7
 8011d1c:	bd80      	pop	{r7, pc}
	...

08011d20 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8011d20:	b580      	push	{r7, lr}
 8011d22:	b088      	sub	sp, #32
 8011d24:	af00      	add	r7, sp, #0
 8011d26:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	2b00      	cmp	r3, #0
 8011d2c:	d10b      	bne.n	8011d46 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	d106      	bne.n	8011d42 <pbuf_free+0x22>
 8011d34:	4b3b      	ldr	r3, [pc, #236]	; (8011e24 <pbuf_free+0x104>)
 8011d36:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8011d3a:	493b      	ldr	r1, [pc, #236]	; (8011e28 <pbuf_free+0x108>)
 8011d3c:	483b      	ldr	r0, [pc, #236]	; (8011e2c <pbuf_free+0x10c>)
 8011d3e:	f00b fb9f 	bl	801d480 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8011d42:	2300      	movs	r3, #0
 8011d44:	e069      	b.n	8011e1a <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8011d46:	2300      	movs	r3, #0
 8011d48:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8011d4a:	e062      	b.n	8011e12 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8011d4c:	f00a fc72 	bl	801c634 <sys_arch_protect>
 8011d50:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	7b9b      	ldrb	r3, [r3, #14]
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	d106      	bne.n	8011d68 <pbuf_free+0x48>
 8011d5a:	4b32      	ldr	r3, [pc, #200]	; (8011e24 <pbuf_free+0x104>)
 8011d5c:	f240 22f1 	movw	r2, #753	; 0x2f1
 8011d60:	4933      	ldr	r1, [pc, #204]	; (8011e30 <pbuf_free+0x110>)
 8011d62:	4832      	ldr	r0, [pc, #200]	; (8011e2c <pbuf_free+0x10c>)
 8011d64:	f00b fb8c 	bl	801d480 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	7b9b      	ldrb	r3, [r3, #14]
 8011d6c:	3b01      	subs	r3, #1
 8011d6e:	b2da      	uxtb	r2, r3
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	739a      	strb	r2, [r3, #14]
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	7b9b      	ldrb	r3, [r3, #14]
 8011d78:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8011d7a:	69b8      	ldr	r0, [r7, #24]
 8011d7c:	f00a fc68 	bl	801c650 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8011d80:	7dfb      	ldrb	r3, [r7, #23]
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	d143      	bne.n	8011e0e <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	681b      	ldr	r3, [r3, #0]
 8011d8a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	7b1b      	ldrb	r3, [r3, #12]
 8011d90:	f003 030f 	and.w	r3, r3, #15
 8011d94:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	7b5b      	ldrb	r3, [r3, #13]
 8011d9a:	f003 0302 	and.w	r3, r3, #2
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	d011      	beq.n	8011dc6 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8011da6:	68bb      	ldr	r3, [r7, #8]
 8011da8:	691b      	ldr	r3, [r3, #16]
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	d106      	bne.n	8011dbc <pbuf_free+0x9c>
 8011dae:	4b1d      	ldr	r3, [pc, #116]	; (8011e24 <pbuf_free+0x104>)
 8011db0:	f240 22ff 	movw	r2, #767	; 0x2ff
 8011db4:	491f      	ldr	r1, [pc, #124]	; (8011e34 <pbuf_free+0x114>)
 8011db6:	481d      	ldr	r0, [pc, #116]	; (8011e2c <pbuf_free+0x10c>)
 8011db8:	f00b fb62 	bl	801d480 <iprintf>
        pc->custom_free_function(p);
 8011dbc:	68bb      	ldr	r3, [r7, #8]
 8011dbe:	691b      	ldr	r3, [r3, #16]
 8011dc0:	6878      	ldr	r0, [r7, #4]
 8011dc2:	4798      	blx	r3
 8011dc4:	e01d      	b.n	8011e02 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8011dc6:	7bfb      	ldrb	r3, [r7, #15]
 8011dc8:	2b02      	cmp	r3, #2
 8011dca:	d104      	bne.n	8011dd6 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8011dcc:	6879      	ldr	r1, [r7, #4]
 8011dce:	200c      	movs	r0, #12
 8011dd0:	f7ff f8f6 	bl	8010fc0 <memp_free>
 8011dd4:	e015      	b.n	8011e02 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8011dd6:	7bfb      	ldrb	r3, [r7, #15]
 8011dd8:	2b01      	cmp	r3, #1
 8011dda:	d104      	bne.n	8011de6 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8011ddc:	6879      	ldr	r1, [r7, #4]
 8011dde:	200b      	movs	r0, #11
 8011de0:	f7ff f8ee 	bl	8010fc0 <memp_free>
 8011de4:	e00d      	b.n	8011e02 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8011de6:	7bfb      	ldrb	r3, [r7, #15]
 8011de8:	2b00      	cmp	r3, #0
 8011dea:	d103      	bne.n	8011df4 <pbuf_free+0xd4>
          mem_free(p);
 8011dec:	6878      	ldr	r0, [r7, #4]
 8011dee:	f7fe fd79 	bl	80108e4 <mem_free>
 8011df2:	e006      	b.n	8011e02 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8011df4:	4b0b      	ldr	r3, [pc, #44]	; (8011e24 <pbuf_free+0x104>)
 8011df6:	f240 320f 	movw	r2, #783	; 0x30f
 8011dfa:	490f      	ldr	r1, [pc, #60]	; (8011e38 <pbuf_free+0x118>)
 8011dfc:	480b      	ldr	r0, [pc, #44]	; (8011e2c <pbuf_free+0x10c>)
 8011dfe:	f00b fb3f 	bl	801d480 <iprintf>
        }
      }
      count++;
 8011e02:	7ffb      	ldrb	r3, [r7, #31]
 8011e04:	3301      	adds	r3, #1
 8011e06:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8011e08:	693b      	ldr	r3, [r7, #16]
 8011e0a:	607b      	str	r3, [r7, #4]
 8011e0c:	e001      	b.n	8011e12 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8011e0e:	2300      	movs	r3, #0
 8011e10:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	d199      	bne.n	8011d4c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8011e18:	7ffb      	ldrb	r3, [r7, #31]
}
 8011e1a:	4618      	mov	r0, r3
 8011e1c:	3720      	adds	r7, #32
 8011e1e:	46bd      	mov	sp, r7
 8011e20:	bd80      	pop	{r7, pc}
 8011e22:	bf00      	nop
 8011e24:	0801fdd4 	.word	0x0801fdd4
 8011e28:	0801ff38 	.word	0x0801ff38
 8011e2c:	0801fe34 	.word	0x0801fe34
 8011e30:	0801ff64 	.word	0x0801ff64
 8011e34:	0801ff7c 	.word	0x0801ff7c
 8011e38:	0801ffa0 	.word	0x0801ffa0

08011e3c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8011e3c:	b480      	push	{r7}
 8011e3e:	b085      	sub	sp, #20
 8011e40:	af00      	add	r7, sp, #0
 8011e42:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8011e44:	2300      	movs	r3, #0
 8011e46:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8011e48:	e005      	b.n	8011e56 <pbuf_clen+0x1a>
    ++len;
 8011e4a:	89fb      	ldrh	r3, [r7, #14]
 8011e4c:	3301      	adds	r3, #1
 8011e4e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	681b      	ldr	r3, [r3, #0]
 8011e54:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	d1f6      	bne.n	8011e4a <pbuf_clen+0xe>
  }
  return len;
 8011e5c:	89fb      	ldrh	r3, [r7, #14]
}
 8011e5e:	4618      	mov	r0, r3
 8011e60:	3714      	adds	r7, #20
 8011e62:	46bd      	mov	sp, r7
 8011e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e68:	4770      	bx	lr
	...

08011e6c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8011e6c:	b580      	push	{r7, lr}
 8011e6e:	b084      	sub	sp, #16
 8011e70:	af00      	add	r7, sp, #0
 8011e72:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	d016      	beq.n	8011ea8 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8011e7a:	f00a fbdb 	bl	801c634 <sys_arch_protect>
 8011e7e:	60f8      	str	r0, [r7, #12]
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	7b9b      	ldrb	r3, [r3, #14]
 8011e84:	3301      	adds	r3, #1
 8011e86:	b2da      	uxtb	r2, r3
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	739a      	strb	r2, [r3, #14]
 8011e8c:	68f8      	ldr	r0, [r7, #12]
 8011e8e:	f00a fbdf 	bl	801c650 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	7b9b      	ldrb	r3, [r3, #14]
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	d106      	bne.n	8011ea8 <pbuf_ref+0x3c>
 8011e9a:	4b05      	ldr	r3, [pc, #20]	; (8011eb0 <pbuf_ref+0x44>)
 8011e9c:	f240 3242 	movw	r2, #834	; 0x342
 8011ea0:	4904      	ldr	r1, [pc, #16]	; (8011eb4 <pbuf_ref+0x48>)
 8011ea2:	4805      	ldr	r0, [pc, #20]	; (8011eb8 <pbuf_ref+0x4c>)
 8011ea4:	f00b faec 	bl	801d480 <iprintf>
  }
}
 8011ea8:	bf00      	nop
 8011eaa:	3710      	adds	r7, #16
 8011eac:	46bd      	mov	sp, r7
 8011eae:	bd80      	pop	{r7, pc}
 8011eb0:	0801fdd4 	.word	0x0801fdd4
 8011eb4:	0801ffb4 	.word	0x0801ffb4
 8011eb8:	0801fe34 	.word	0x0801fe34

08011ebc <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8011ebc:	b580      	push	{r7, lr}
 8011ebe:	b084      	sub	sp, #16
 8011ec0:	af00      	add	r7, sp, #0
 8011ec2:	6078      	str	r0, [r7, #4]
 8011ec4:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	d002      	beq.n	8011ed2 <pbuf_cat+0x16>
 8011ecc:	683b      	ldr	r3, [r7, #0]
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	d107      	bne.n	8011ee2 <pbuf_cat+0x26>
 8011ed2:	4b20      	ldr	r3, [pc, #128]	; (8011f54 <pbuf_cat+0x98>)
 8011ed4:	f240 3259 	movw	r2, #857	; 0x359
 8011ed8:	491f      	ldr	r1, [pc, #124]	; (8011f58 <pbuf_cat+0x9c>)
 8011eda:	4820      	ldr	r0, [pc, #128]	; (8011f5c <pbuf_cat+0xa0>)
 8011edc:	f00b fad0 	bl	801d480 <iprintf>
 8011ee0:	e034      	b.n	8011f4c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	60fb      	str	r3, [r7, #12]
 8011ee6:	e00a      	b.n	8011efe <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8011ee8:	68fb      	ldr	r3, [r7, #12]
 8011eea:	891a      	ldrh	r2, [r3, #8]
 8011eec:	683b      	ldr	r3, [r7, #0]
 8011eee:	891b      	ldrh	r3, [r3, #8]
 8011ef0:	4413      	add	r3, r2
 8011ef2:	b29a      	uxth	r2, r3
 8011ef4:	68fb      	ldr	r3, [r7, #12]
 8011ef6:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8011ef8:	68fb      	ldr	r3, [r7, #12]
 8011efa:	681b      	ldr	r3, [r3, #0]
 8011efc:	60fb      	str	r3, [r7, #12]
 8011efe:	68fb      	ldr	r3, [r7, #12]
 8011f00:	681b      	ldr	r3, [r3, #0]
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	d1f0      	bne.n	8011ee8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8011f06:	68fb      	ldr	r3, [r7, #12]
 8011f08:	891a      	ldrh	r2, [r3, #8]
 8011f0a:	68fb      	ldr	r3, [r7, #12]
 8011f0c:	895b      	ldrh	r3, [r3, #10]
 8011f0e:	429a      	cmp	r2, r3
 8011f10:	d006      	beq.n	8011f20 <pbuf_cat+0x64>
 8011f12:	4b10      	ldr	r3, [pc, #64]	; (8011f54 <pbuf_cat+0x98>)
 8011f14:	f240 3262 	movw	r2, #866	; 0x362
 8011f18:	4911      	ldr	r1, [pc, #68]	; (8011f60 <pbuf_cat+0xa4>)
 8011f1a:	4810      	ldr	r0, [pc, #64]	; (8011f5c <pbuf_cat+0xa0>)
 8011f1c:	f00b fab0 	bl	801d480 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8011f20:	68fb      	ldr	r3, [r7, #12]
 8011f22:	681b      	ldr	r3, [r3, #0]
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	d006      	beq.n	8011f36 <pbuf_cat+0x7a>
 8011f28:	4b0a      	ldr	r3, [pc, #40]	; (8011f54 <pbuf_cat+0x98>)
 8011f2a:	f240 3263 	movw	r2, #867	; 0x363
 8011f2e:	490d      	ldr	r1, [pc, #52]	; (8011f64 <pbuf_cat+0xa8>)
 8011f30:	480a      	ldr	r0, [pc, #40]	; (8011f5c <pbuf_cat+0xa0>)
 8011f32:	f00b faa5 	bl	801d480 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8011f36:	68fb      	ldr	r3, [r7, #12]
 8011f38:	891a      	ldrh	r2, [r3, #8]
 8011f3a:	683b      	ldr	r3, [r7, #0]
 8011f3c:	891b      	ldrh	r3, [r3, #8]
 8011f3e:	4413      	add	r3, r2
 8011f40:	b29a      	uxth	r2, r3
 8011f42:	68fb      	ldr	r3, [r7, #12]
 8011f44:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8011f46:	68fb      	ldr	r3, [r7, #12]
 8011f48:	683a      	ldr	r2, [r7, #0]
 8011f4a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8011f4c:	3710      	adds	r7, #16
 8011f4e:	46bd      	mov	sp, r7
 8011f50:	bd80      	pop	{r7, pc}
 8011f52:	bf00      	nop
 8011f54:	0801fdd4 	.word	0x0801fdd4
 8011f58:	0801ffc8 	.word	0x0801ffc8
 8011f5c:	0801fe34 	.word	0x0801fe34
 8011f60:	08020000 	.word	0x08020000
 8011f64:	08020030 	.word	0x08020030

08011f68 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8011f68:	b580      	push	{r7, lr}
 8011f6a:	b082      	sub	sp, #8
 8011f6c:	af00      	add	r7, sp, #0
 8011f6e:	6078      	str	r0, [r7, #4]
 8011f70:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8011f72:	6839      	ldr	r1, [r7, #0]
 8011f74:	6878      	ldr	r0, [r7, #4]
 8011f76:	f7ff ffa1 	bl	8011ebc <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8011f7a:	6838      	ldr	r0, [r7, #0]
 8011f7c:	f7ff ff76 	bl	8011e6c <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8011f80:	bf00      	nop
 8011f82:	3708      	adds	r7, #8
 8011f84:	46bd      	mov	sp, r7
 8011f86:	bd80      	pop	{r7, pc}

08011f88 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8011f88:	b580      	push	{r7, lr}
 8011f8a:	b086      	sub	sp, #24
 8011f8c:	af00      	add	r7, sp, #0
 8011f8e:	6078      	str	r0, [r7, #4]
 8011f90:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8011f92:	2300      	movs	r3, #0
 8011f94:	617b      	str	r3, [r7, #20]
 8011f96:	2300      	movs	r3, #0
 8011f98:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	d008      	beq.n	8011fb2 <pbuf_copy+0x2a>
 8011fa0:	683b      	ldr	r3, [r7, #0]
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	d005      	beq.n	8011fb2 <pbuf_copy+0x2a>
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	891a      	ldrh	r2, [r3, #8]
 8011faa:	683b      	ldr	r3, [r7, #0]
 8011fac:	891b      	ldrh	r3, [r3, #8]
 8011fae:	429a      	cmp	r2, r3
 8011fb0:	d209      	bcs.n	8011fc6 <pbuf_copy+0x3e>
 8011fb2:	4b57      	ldr	r3, [pc, #348]	; (8012110 <pbuf_copy+0x188>)
 8011fb4:	f240 32c9 	movw	r2, #969	; 0x3c9
 8011fb8:	4956      	ldr	r1, [pc, #344]	; (8012114 <pbuf_copy+0x18c>)
 8011fba:	4857      	ldr	r0, [pc, #348]	; (8012118 <pbuf_copy+0x190>)
 8011fbc:	f00b fa60 	bl	801d480 <iprintf>
 8011fc0:	f06f 030f 	mvn.w	r3, #15
 8011fc4:	e09f      	b.n	8012106 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	895b      	ldrh	r3, [r3, #10]
 8011fca:	461a      	mov	r2, r3
 8011fcc:	697b      	ldr	r3, [r7, #20]
 8011fce:	1ad2      	subs	r2, r2, r3
 8011fd0:	683b      	ldr	r3, [r7, #0]
 8011fd2:	895b      	ldrh	r3, [r3, #10]
 8011fd4:	4619      	mov	r1, r3
 8011fd6:	693b      	ldr	r3, [r7, #16]
 8011fd8:	1acb      	subs	r3, r1, r3
 8011fda:	429a      	cmp	r2, r3
 8011fdc:	d306      	bcc.n	8011fec <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8011fde:	683b      	ldr	r3, [r7, #0]
 8011fe0:	895b      	ldrh	r3, [r3, #10]
 8011fe2:	461a      	mov	r2, r3
 8011fe4:	693b      	ldr	r3, [r7, #16]
 8011fe6:	1ad3      	subs	r3, r2, r3
 8011fe8:	60fb      	str	r3, [r7, #12]
 8011fea:	e005      	b.n	8011ff8 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	895b      	ldrh	r3, [r3, #10]
 8011ff0:	461a      	mov	r2, r3
 8011ff2:	697b      	ldr	r3, [r7, #20]
 8011ff4:	1ad3      	subs	r3, r2, r3
 8011ff6:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	685a      	ldr	r2, [r3, #4]
 8011ffc:	697b      	ldr	r3, [r7, #20]
 8011ffe:	18d0      	adds	r0, r2, r3
 8012000:	683b      	ldr	r3, [r7, #0]
 8012002:	685a      	ldr	r2, [r3, #4]
 8012004:	693b      	ldr	r3, [r7, #16]
 8012006:	4413      	add	r3, r2
 8012008:	68fa      	ldr	r2, [r7, #12]
 801200a:	4619      	mov	r1, r3
 801200c:	f00a fb7e 	bl	801c70c <memcpy>
    offset_to += len;
 8012010:	697a      	ldr	r2, [r7, #20]
 8012012:	68fb      	ldr	r3, [r7, #12]
 8012014:	4413      	add	r3, r2
 8012016:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8012018:	693a      	ldr	r2, [r7, #16]
 801201a:	68fb      	ldr	r3, [r7, #12]
 801201c:	4413      	add	r3, r2
 801201e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	895b      	ldrh	r3, [r3, #10]
 8012024:	461a      	mov	r2, r3
 8012026:	697b      	ldr	r3, [r7, #20]
 8012028:	4293      	cmp	r3, r2
 801202a:	d906      	bls.n	801203a <pbuf_copy+0xb2>
 801202c:	4b38      	ldr	r3, [pc, #224]	; (8012110 <pbuf_copy+0x188>)
 801202e:	f240 32d9 	movw	r2, #985	; 0x3d9
 8012032:	493a      	ldr	r1, [pc, #232]	; (801211c <pbuf_copy+0x194>)
 8012034:	4838      	ldr	r0, [pc, #224]	; (8012118 <pbuf_copy+0x190>)
 8012036:	f00b fa23 	bl	801d480 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 801203a:	683b      	ldr	r3, [r7, #0]
 801203c:	895b      	ldrh	r3, [r3, #10]
 801203e:	461a      	mov	r2, r3
 8012040:	693b      	ldr	r3, [r7, #16]
 8012042:	4293      	cmp	r3, r2
 8012044:	d906      	bls.n	8012054 <pbuf_copy+0xcc>
 8012046:	4b32      	ldr	r3, [pc, #200]	; (8012110 <pbuf_copy+0x188>)
 8012048:	f240 32da 	movw	r2, #986	; 0x3da
 801204c:	4934      	ldr	r1, [pc, #208]	; (8012120 <pbuf_copy+0x198>)
 801204e:	4832      	ldr	r0, [pc, #200]	; (8012118 <pbuf_copy+0x190>)
 8012050:	f00b fa16 	bl	801d480 <iprintf>
    if (offset_from >= p_from->len) {
 8012054:	683b      	ldr	r3, [r7, #0]
 8012056:	895b      	ldrh	r3, [r3, #10]
 8012058:	461a      	mov	r2, r3
 801205a:	693b      	ldr	r3, [r7, #16]
 801205c:	4293      	cmp	r3, r2
 801205e:	d304      	bcc.n	801206a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8012060:	2300      	movs	r3, #0
 8012062:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8012064:	683b      	ldr	r3, [r7, #0]
 8012066:	681b      	ldr	r3, [r3, #0]
 8012068:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	895b      	ldrh	r3, [r3, #10]
 801206e:	461a      	mov	r2, r3
 8012070:	697b      	ldr	r3, [r7, #20]
 8012072:	4293      	cmp	r3, r2
 8012074:	d114      	bne.n	80120a0 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8012076:	2300      	movs	r3, #0
 8012078:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	681b      	ldr	r3, [r3, #0]
 801207e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	2b00      	cmp	r3, #0
 8012084:	d10c      	bne.n	80120a0 <pbuf_copy+0x118>
 8012086:	683b      	ldr	r3, [r7, #0]
 8012088:	2b00      	cmp	r3, #0
 801208a:	d009      	beq.n	80120a0 <pbuf_copy+0x118>
 801208c:	4b20      	ldr	r3, [pc, #128]	; (8012110 <pbuf_copy+0x188>)
 801208e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8012092:	4924      	ldr	r1, [pc, #144]	; (8012124 <pbuf_copy+0x19c>)
 8012094:	4820      	ldr	r0, [pc, #128]	; (8012118 <pbuf_copy+0x190>)
 8012096:	f00b f9f3 	bl	801d480 <iprintf>
 801209a:	f06f 030f 	mvn.w	r3, #15
 801209e:	e032      	b.n	8012106 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80120a0:	683b      	ldr	r3, [r7, #0]
 80120a2:	2b00      	cmp	r3, #0
 80120a4:	d013      	beq.n	80120ce <pbuf_copy+0x146>
 80120a6:	683b      	ldr	r3, [r7, #0]
 80120a8:	895a      	ldrh	r2, [r3, #10]
 80120aa:	683b      	ldr	r3, [r7, #0]
 80120ac:	891b      	ldrh	r3, [r3, #8]
 80120ae:	429a      	cmp	r2, r3
 80120b0:	d10d      	bne.n	80120ce <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80120b2:	683b      	ldr	r3, [r7, #0]
 80120b4:	681b      	ldr	r3, [r3, #0]
 80120b6:	2b00      	cmp	r3, #0
 80120b8:	d009      	beq.n	80120ce <pbuf_copy+0x146>
 80120ba:	4b15      	ldr	r3, [pc, #84]	; (8012110 <pbuf_copy+0x188>)
 80120bc:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80120c0:	4919      	ldr	r1, [pc, #100]	; (8012128 <pbuf_copy+0x1a0>)
 80120c2:	4815      	ldr	r0, [pc, #84]	; (8012118 <pbuf_copy+0x190>)
 80120c4:	f00b f9dc 	bl	801d480 <iprintf>
 80120c8:	f06f 0305 	mvn.w	r3, #5
 80120cc:	e01b      	b.n	8012106 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	2b00      	cmp	r3, #0
 80120d2:	d013      	beq.n	80120fc <pbuf_copy+0x174>
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	895a      	ldrh	r2, [r3, #10]
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	891b      	ldrh	r3, [r3, #8]
 80120dc:	429a      	cmp	r2, r3
 80120de:	d10d      	bne.n	80120fc <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	681b      	ldr	r3, [r3, #0]
 80120e4:	2b00      	cmp	r3, #0
 80120e6:	d009      	beq.n	80120fc <pbuf_copy+0x174>
 80120e8:	4b09      	ldr	r3, [pc, #36]	; (8012110 <pbuf_copy+0x188>)
 80120ea:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80120ee:	490e      	ldr	r1, [pc, #56]	; (8012128 <pbuf_copy+0x1a0>)
 80120f0:	4809      	ldr	r0, [pc, #36]	; (8012118 <pbuf_copy+0x190>)
 80120f2:	f00b f9c5 	bl	801d480 <iprintf>
 80120f6:	f06f 0305 	mvn.w	r3, #5
 80120fa:	e004      	b.n	8012106 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80120fc:	683b      	ldr	r3, [r7, #0]
 80120fe:	2b00      	cmp	r3, #0
 8012100:	f47f af61 	bne.w	8011fc6 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8012104:	2300      	movs	r3, #0
}
 8012106:	4618      	mov	r0, r3
 8012108:	3718      	adds	r7, #24
 801210a:	46bd      	mov	sp, r7
 801210c:	bd80      	pop	{r7, pc}
 801210e:	bf00      	nop
 8012110:	0801fdd4 	.word	0x0801fdd4
 8012114:	0802007c 	.word	0x0802007c
 8012118:	0801fe34 	.word	0x0801fe34
 801211c:	080200ac 	.word	0x080200ac
 8012120:	080200c4 	.word	0x080200c4
 8012124:	080200e0 	.word	0x080200e0
 8012128:	080200f0 	.word	0x080200f0

0801212c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 801212c:	b580      	push	{r7, lr}
 801212e:	b088      	sub	sp, #32
 8012130:	af00      	add	r7, sp, #0
 8012132:	60f8      	str	r0, [r7, #12]
 8012134:	60b9      	str	r1, [r7, #8]
 8012136:	4611      	mov	r1, r2
 8012138:	461a      	mov	r2, r3
 801213a:	460b      	mov	r3, r1
 801213c:	80fb      	strh	r3, [r7, #6]
 801213e:	4613      	mov	r3, r2
 8012140:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8012142:	2300      	movs	r3, #0
 8012144:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8012146:	2300      	movs	r3, #0
 8012148:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 801214a:	68fb      	ldr	r3, [r7, #12]
 801214c:	2b00      	cmp	r3, #0
 801214e:	d108      	bne.n	8012162 <pbuf_copy_partial+0x36>
 8012150:	4b2b      	ldr	r3, [pc, #172]	; (8012200 <pbuf_copy_partial+0xd4>)
 8012152:	f240 420a 	movw	r2, #1034	; 0x40a
 8012156:	492b      	ldr	r1, [pc, #172]	; (8012204 <pbuf_copy_partial+0xd8>)
 8012158:	482b      	ldr	r0, [pc, #172]	; (8012208 <pbuf_copy_partial+0xdc>)
 801215a:	f00b f991 	bl	801d480 <iprintf>
 801215e:	2300      	movs	r3, #0
 8012160:	e04a      	b.n	80121f8 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8012162:	68bb      	ldr	r3, [r7, #8]
 8012164:	2b00      	cmp	r3, #0
 8012166:	d108      	bne.n	801217a <pbuf_copy_partial+0x4e>
 8012168:	4b25      	ldr	r3, [pc, #148]	; (8012200 <pbuf_copy_partial+0xd4>)
 801216a:	f240 420b 	movw	r2, #1035	; 0x40b
 801216e:	4927      	ldr	r1, [pc, #156]	; (801220c <pbuf_copy_partial+0xe0>)
 8012170:	4825      	ldr	r0, [pc, #148]	; (8012208 <pbuf_copy_partial+0xdc>)
 8012172:	f00b f985 	bl	801d480 <iprintf>
 8012176:	2300      	movs	r3, #0
 8012178:	e03e      	b.n	80121f8 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801217a:	68fb      	ldr	r3, [r7, #12]
 801217c:	61fb      	str	r3, [r7, #28]
 801217e:	e034      	b.n	80121ea <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8012180:	88bb      	ldrh	r3, [r7, #4]
 8012182:	2b00      	cmp	r3, #0
 8012184:	d00a      	beq.n	801219c <pbuf_copy_partial+0x70>
 8012186:	69fb      	ldr	r3, [r7, #28]
 8012188:	895b      	ldrh	r3, [r3, #10]
 801218a:	88ba      	ldrh	r2, [r7, #4]
 801218c:	429a      	cmp	r2, r3
 801218e:	d305      	bcc.n	801219c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8012190:	69fb      	ldr	r3, [r7, #28]
 8012192:	895b      	ldrh	r3, [r3, #10]
 8012194:	88ba      	ldrh	r2, [r7, #4]
 8012196:	1ad3      	subs	r3, r2, r3
 8012198:	80bb      	strh	r3, [r7, #4]
 801219a:	e023      	b.n	80121e4 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 801219c:	69fb      	ldr	r3, [r7, #28]
 801219e:	895a      	ldrh	r2, [r3, #10]
 80121a0:	88bb      	ldrh	r3, [r7, #4]
 80121a2:	1ad3      	subs	r3, r2, r3
 80121a4:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80121a6:	8b3a      	ldrh	r2, [r7, #24]
 80121a8:	88fb      	ldrh	r3, [r7, #6]
 80121aa:	429a      	cmp	r2, r3
 80121ac:	d901      	bls.n	80121b2 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80121ae:	88fb      	ldrh	r3, [r7, #6]
 80121b0:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80121b2:	8b7b      	ldrh	r3, [r7, #26]
 80121b4:	68ba      	ldr	r2, [r7, #8]
 80121b6:	18d0      	adds	r0, r2, r3
 80121b8:	69fb      	ldr	r3, [r7, #28]
 80121ba:	685a      	ldr	r2, [r3, #4]
 80121bc:	88bb      	ldrh	r3, [r7, #4]
 80121be:	4413      	add	r3, r2
 80121c0:	8b3a      	ldrh	r2, [r7, #24]
 80121c2:	4619      	mov	r1, r3
 80121c4:	f00a faa2 	bl	801c70c <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80121c8:	8afa      	ldrh	r2, [r7, #22]
 80121ca:	8b3b      	ldrh	r3, [r7, #24]
 80121cc:	4413      	add	r3, r2
 80121ce:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80121d0:	8b7a      	ldrh	r2, [r7, #26]
 80121d2:	8b3b      	ldrh	r3, [r7, #24]
 80121d4:	4413      	add	r3, r2
 80121d6:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80121d8:	88fa      	ldrh	r2, [r7, #6]
 80121da:	8b3b      	ldrh	r3, [r7, #24]
 80121dc:	1ad3      	subs	r3, r2, r3
 80121de:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80121e0:	2300      	movs	r3, #0
 80121e2:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80121e4:	69fb      	ldr	r3, [r7, #28]
 80121e6:	681b      	ldr	r3, [r3, #0]
 80121e8:	61fb      	str	r3, [r7, #28]
 80121ea:	88fb      	ldrh	r3, [r7, #6]
 80121ec:	2b00      	cmp	r3, #0
 80121ee:	d002      	beq.n	80121f6 <pbuf_copy_partial+0xca>
 80121f0:	69fb      	ldr	r3, [r7, #28]
 80121f2:	2b00      	cmp	r3, #0
 80121f4:	d1c4      	bne.n	8012180 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80121f6:	8afb      	ldrh	r3, [r7, #22]
}
 80121f8:	4618      	mov	r0, r3
 80121fa:	3720      	adds	r7, #32
 80121fc:	46bd      	mov	sp, r7
 80121fe:	bd80      	pop	{r7, pc}
 8012200:	0801fdd4 	.word	0x0801fdd4
 8012204:	0802011c 	.word	0x0802011c
 8012208:	0801fe34 	.word	0x0801fe34
 801220c:	0802013c 	.word	0x0802013c

08012210 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8012210:	b580      	push	{r7, lr}
 8012212:	b084      	sub	sp, #16
 8012214:	af00      	add	r7, sp, #0
 8012216:	4603      	mov	r3, r0
 8012218:	603a      	str	r2, [r7, #0]
 801221a:	71fb      	strb	r3, [r7, #7]
 801221c:	460b      	mov	r3, r1
 801221e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8012220:	683b      	ldr	r3, [r7, #0]
 8012222:	8919      	ldrh	r1, [r3, #8]
 8012224:	88ba      	ldrh	r2, [r7, #4]
 8012226:	79fb      	ldrb	r3, [r7, #7]
 8012228:	4618      	mov	r0, r3
 801222a:	f7ff fa95 	bl	8011758 <pbuf_alloc>
 801222e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8012230:	68fb      	ldr	r3, [r7, #12]
 8012232:	2b00      	cmp	r3, #0
 8012234:	d101      	bne.n	801223a <pbuf_clone+0x2a>
    return NULL;
 8012236:	2300      	movs	r3, #0
 8012238:	e011      	b.n	801225e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 801223a:	6839      	ldr	r1, [r7, #0]
 801223c:	68f8      	ldr	r0, [r7, #12]
 801223e:	f7ff fea3 	bl	8011f88 <pbuf_copy>
 8012242:	4603      	mov	r3, r0
 8012244:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8012246:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801224a:	2b00      	cmp	r3, #0
 801224c:	d006      	beq.n	801225c <pbuf_clone+0x4c>
 801224e:	4b06      	ldr	r3, [pc, #24]	; (8012268 <pbuf_clone+0x58>)
 8012250:	f240 5224 	movw	r2, #1316	; 0x524
 8012254:	4905      	ldr	r1, [pc, #20]	; (801226c <pbuf_clone+0x5c>)
 8012256:	4806      	ldr	r0, [pc, #24]	; (8012270 <pbuf_clone+0x60>)
 8012258:	f00b f912 	bl	801d480 <iprintf>
  return q;
 801225c:	68fb      	ldr	r3, [r7, #12]
}
 801225e:	4618      	mov	r0, r3
 8012260:	3710      	adds	r7, #16
 8012262:	46bd      	mov	sp, r7
 8012264:	bd80      	pop	{r7, pc}
 8012266:	bf00      	nop
 8012268:	0801fdd4 	.word	0x0801fdd4
 801226c:	08020248 	.word	0x08020248
 8012270:	0801fe34 	.word	0x0801fe34

08012274 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8012274:	b580      	push	{r7, lr}
 8012276:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8012278:	f00b f990 	bl	801d59c <rand>
 801227c:	4603      	mov	r3, r0
 801227e:	b29b      	uxth	r3, r3
 8012280:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8012284:	b29b      	uxth	r3, r3
 8012286:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801228a:	b29a      	uxth	r2, r3
 801228c:	4b01      	ldr	r3, [pc, #4]	; (8012294 <tcp_init+0x20>)
 801228e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8012290:	bf00      	nop
 8012292:	bd80      	pop	{r7, pc}
 8012294:	10000014 	.word	0x10000014

08012298 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8012298:	b580      	push	{r7, lr}
 801229a:	b082      	sub	sp, #8
 801229c:	af00      	add	r7, sp, #0
 801229e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	7d1b      	ldrb	r3, [r3, #20]
 80122a4:	2b01      	cmp	r3, #1
 80122a6:	d105      	bne.n	80122b4 <tcp_free+0x1c>
 80122a8:	4b06      	ldr	r3, [pc, #24]	; (80122c4 <tcp_free+0x2c>)
 80122aa:	22d4      	movs	r2, #212	; 0xd4
 80122ac:	4906      	ldr	r1, [pc, #24]	; (80122c8 <tcp_free+0x30>)
 80122ae:	4807      	ldr	r0, [pc, #28]	; (80122cc <tcp_free+0x34>)
 80122b0:	f00b f8e6 	bl	801d480 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80122b4:	6879      	ldr	r1, [r7, #4]
 80122b6:	2001      	movs	r0, #1
 80122b8:	f7fe fe82 	bl	8010fc0 <memp_free>
}
 80122bc:	bf00      	nop
 80122be:	3708      	adds	r7, #8
 80122c0:	46bd      	mov	sp, r7
 80122c2:	bd80      	pop	{r7, pc}
 80122c4:	080202d4 	.word	0x080202d4
 80122c8:	08020304 	.word	0x08020304
 80122cc:	08020318 	.word	0x08020318

080122d0 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80122d0:	b580      	push	{r7, lr}
 80122d2:	b082      	sub	sp, #8
 80122d4:	af00      	add	r7, sp, #0
 80122d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	7d1b      	ldrb	r3, [r3, #20]
 80122dc:	2b01      	cmp	r3, #1
 80122de:	d105      	bne.n	80122ec <tcp_free_listen+0x1c>
 80122e0:	4b06      	ldr	r3, [pc, #24]	; (80122fc <tcp_free_listen+0x2c>)
 80122e2:	22df      	movs	r2, #223	; 0xdf
 80122e4:	4906      	ldr	r1, [pc, #24]	; (8012300 <tcp_free_listen+0x30>)
 80122e6:	4807      	ldr	r0, [pc, #28]	; (8012304 <tcp_free_listen+0x34>)
 80122e8:	f00b f8ca 	bl	801d480 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80122ec:	6879      	ldr	r1, [r7, #4]
 80122ee:	2002      	movs	r0, #2
 80122f0:	f7fe fe66 	bl	8010fc0 <memp_free>
}
 80122f4:	bf00      	nop
 80122f6:	3708      	adds	r7, #8
 80122f8:	46bd      	mov	sp, r7
 80122fa:	bd80      	pop	{r7, pc}
 80122fc:	080202d4 	.word	0x080202d4
 8012300:	08020340 	.word	0x08020340
 8012304:	08020318 	.word	0x08020318

08012308 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8012308:	b580      	push	{r7, lr}
 801230a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 801230c:	f000 fea2 	bl	8013054 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8012310:	4b07      	ldr	r3, [pc, #28]	; (8012330 <tcp_tmr+0x28>)
 8012312:	781b      	ldrb	r3, [r3, #0]
 8012314:	3301      	adds	r3, #1
 8012316:	b2da      	uxtb	r2, r3
 8012318:	4b05      	ldr	r3, [pc, #20]	; (8012330 <tcp_tmr+0x28>)
 801231a:	701a      	strb	r2, [r3, #0]
 801231c:	4b04      	ldr	r3, [pc, #16]	; (8012330 <tcp_tmr+0x28>)
 801231e:	781b      	ldrb	r3, [r3, #0]
 8012320:	f003 0301 	and.w	r3, r3, #1
 8012324:	2b00      	cmp	r3, #0
 8012326:	d001      	beq.n	801232c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8012328:	f000 fb54 	bl	80129d4 <tcp_slowtmr>
  }
}
 801232c:	bf00      	nop
 801232e:	bd80      	pop	{r7, pc}
 8012330:	200137ad 	.word	0x200137ad

08012334 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8012334:	b580      	push	{r7, lr}
 8012336:	b084      	sub	sp, #16
 8012338:	af00      	add	r7, sp, #0
 801233a:	6078      	str	r0, [r7, #4]
 801233c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 801233e:	683b      	ldr	r3, [r7, #0]
 8012340:	2b00      	cmp	r3, #0
 8012342:	d105      	bne.n	8012350 <tcp_remove_listener+0x1c>
 8012344:	4b0d      	ldr	r3, [pc, #52]	; (801237c <tcp_remove_listener+0x48>)
 8012346:	22ff      	movs	r2, #255	; 0xff
 8012348:	490d      	ldr	r1, [pc, #52]	; (8012380 <tcp_remove_listener+0x4c>)
 801234a:	480e      	ldr	r0, [pc, #56]	; (8012384 <tcp_remove_listener+0x50>)
 801234c:	f00b f898 	bl	801d480 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	60fb      	str	r3, [r7, #12]
 8012354:	e00a      	b.n	801236c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8012356:	68fb      	ldr	r3, [r7, #12]
 8012358:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801235a:	683a      	ldr	r2, [r7, #0]
 801235c:	429a      	cmp	r2, r3
 801235e:	d102      	bne.n	8012366 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8012360:	68fb      	ldr	r3, [r7, #12]
 8012362:	2200      	movs	r2, #0
 8012364:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8012366:	68fb      	ldr	r3, [r7, #12]
 8012368:	68db      	ldr	r3, [r3, #12]
 801236a:	60fb      	str	r3, [r7, #12]
 801236c:	68fb      	ldr	r3, [r7, #12]
 801236e:	2b00      	cmp	r3, #0
 8012370:	d1f1      	bne.n	8012356 <tcp_remove_listener+0x22>
    }
  }
}
 8012372:	bf00      	nop
 8012374:	bf00      	nop
 8012376:	3710      	adds	r7, #16
 8012378:	46bd      	mov	sp, r7
 801237a:	bd80      	pop	{r7, pc}
 801237c:	080202d4 	.word	0x080202d4
 8012380:	0802035c 	.word	0x0802035c
 8012384:	08020318 	.word	0x08020318

08012388 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8012388:	b580      	push	{r7, lr}
 801238a:	b084      	sub	sp, #16
 801238c:	af00      	add	r7, sp, #0
 801238e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	2b00      	cmp	r3, #0
 8012394:	d106      	bne.n	80123a4 <tcp_listen_closed+0x1c>
 8012396:	4b14      	ldr	r3, [pc, #80]	; (80123e8 <tcp_listen_closed+0x60>)
 8012398:	f240 1211 	movw	r2, #273	; 0x111
 801239c:	4913      	ldr	r1, [pc, #76]	; (80123ec <tcp_listen_closed+0x64>)
 801239e:	4814      	ldr	r0, [pc, #80]	; (80123f0 <tcp_listen_closed+0x68>)
 80123a0:	f00b f86e 	bl	801d480 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	7d1b      	ldrb	r3, [r3, #20]
 80123a8:	2b01      	cmp	r3, #1
 80123aa:	d006      	beq.n	80123ba <tcp_listen_closed+0x32>
 80123ac:	4b0e      	ldr	r3, [pc, #56]	; (80123e8 <tcp_listen_closed+0x60>)
 80123ae:	f44f 7289 	mov.w	r2, #274	; 0x112
 80123b2:	4910      	ldr	r1, [pc, #64]	; (80123f4 <tcp_listen_closed+0x6c>)
 80123b4:	480e      	ldr	r0, [pc, #56]	; (80123f0 <tcp_listen_closed+0x68>)
 80123b6:	f00b f863 	bl	801d480 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80123ba:	2301      	movs	r3, #1
 80123bc:	60fb      	str	r3, [r7, #12]
 80123be:	e00b      	b.n	80123d8 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80123c0:	4a0d      	ldr	r2, [pc, #52]	; (80123f8 <tcp_listen_closed+0x70>)
 80123c2:	68fb      	ldr	r3, [r7, #12]
 80123c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80123c8:	681b      	ldr	r3, [r3, #0]
 80123ca:	6879      	ldr	r1, [r7, #4]
 80123cc:	4618      	mov	r0, r3
 80123ce:	f7ff ffb1 	bl	8012334 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80123d2:	68fb      	ldr	r3, [r7, #12]
 80123d4:	3301      	adds	r3, #1
 80123d6:	60fb      	str	r3, [r7, #12]
 80123d8:	68fb      	ldr	r3, [r7, #12]
 80123da:	2b03      	cmp	r3, #3
 80123dc:	d9f0      	bls.n	80123c0 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80123de:	bf00      	nop
 80123e0:	bf00      	nop
 80123e2:	3710      	adds	r7, #16
 80123e4:	46bd      	mov	sp, r7
 80123e6:	bd80      	pop	{r7, pc}
 80123e8:	080202d4 	.word	0x080202d4
 80123ec:	08020384 	.word	0x08020384
 80123f0:	08020318 	.word	0x08020318
 80123f4:	08020390 	.word	0x08020390
 80123f8:	08022750 	.word	0x08022750

080123fc <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80123fc:	b5b0      	push	{r4, r5, r7, lr}
 80123fe:	b088      	sub	sp, #32
 8012400:	af04      	add	r7, sp, #16
 8012402:	6078      	str	r0, [r7, #4]
 8012404:	460b      	mov	r3, r1
 8012406:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	2b00      	cmp	r3, #0
 801240c:	d106      	bne.n	801241c <tcp_close_shutdown+0x20>
 801240e:	4b63      	ldr	r3, [pc, #396]	; (801259c <tcp_close_shutdown+0x1a0>)
 8012410:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8012414:	4962      	ldr	r1, [pc, #392]	; (80125a0 <tcp_close_shutdown+0x1a4>)
 8012416:	4863      	ldr	r0, [pc, #396]	; (80125a4 <tcp_close_shutdown+0x1a8>)
 8012418:	f00b f832 	bl	801d480 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 801241c:	78fb      	ldrb	r3, [r7, #3]
 801241e:	2b00      	cmp	r3, #0
 8012420:	d066      	beq.n	80124f0 <tcp_close_shutdown+0xf4>
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	7d1b      	ldrb	r3, [r3, #20]
 8012426:	2b04      	cmp	r3, #4
 8012428:	d003      	beq.n	8012432 <tcp_close_shutdown+0x36>
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	7d1b      	ldrb	r3, [r3, #20]
 801242e:	2b07      	cmp	r3, #7
 8012430:	d15e      	bne.n	80124f0 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012436:	2b00      	cmp	r3, #0
 8012438:	d104      	bne.n	8012444 <tcp_close_shutdown+0x48>
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801243e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8012442:	d055      	beq.n	80124f0 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	8b5b      	ldrh	r3, [r3, #26]
 8012448:	f003 0310 	and.w	r3, r3, #16
 801244c:	2b00      	cmp	r3, #0
 801244e:	d106      	bne.n	801245e <tcp_close_shutdown+0x62>
 8012450:	4b52      	ldr	r3, [pc, #328]	; (801259c <tcp_close_shutdown+0x1a0>)
 8012452:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8012456:	4954      	ldr	r1, [pc, #336]	; (80125a8 <tcp_close_shutdown+0x1ac>)
 8012458:	4852      	ldr	r0, [pc, #328]	; (80125a4 <tcp_close_shutdown+0x1a8>)
 801245a:	f00b f811 	bl	801d480 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8012466:	687d      	ldr	r5, [r7, #4]
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	3304      	adds	r3, #4
 801246c:	687a      	ldr	r2, [r7, #4]
 801246e:	8ad2      	ldrh	r2, [r2, #22]
 8012470:	6879      	ldr	r1, [r7, #4]
 8012472:	8b09      	ldrh	r1, [r1, #24]
 8012474:	9102      	str	r1, [sp, #8]
 8012476:	9201      	str	r2, [sp, #4]
 8012478:	9300      	str	r3, [sp, #0]
 801247a:	462b      	mov	r3, r5
 801247c:	4622      	mov	r2, r4
 801247e:	4601      	mov	r1, r0
 8012480:	6878      	ldr	r0, [r7, #4]
 8012482:	f004 fe91 	bl	80171a8 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8012486:	6878      	ldr	r0, [r7, #4]
 8012488:	f001 f8c6 	bl	8013618 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 801248c:	4b47      	ldr	r3, [pc, #284]	; (80125ac <tcp_close_shutdown+0x1b0>)
 801248e:	681b      	ldr	r3, [r3, #0]
 8012490:	687a      	ldr	r2, [r7, #4]
 8012492:	429a      	cmp	r2, r3
 8012494:	d105      	bne.n	80124a2 <tcp_close_shutdown+0xa6>
 8012496:	4b45      	ldr	r3, [pc, #276]	; (80125ac <tcp_close_shutdown+0x1b0>)
 8012498:	681b      	ldr	r3, [r3, #0]
 801249a:	68db      	ldr	r3, [r3, #12]
 801249c:	4a43      	ldr	r2, [pc, #268]	; (80125ac <tcp_close_shutdown+0x1b0>)
 801249e:	6013      	str	r3, [r2, #0]
 80124a0:	e013      	b.n	80124ca <tcp_close_shutdown+0xce>
 80124a2:	4b42      	ldr	r3, [pc, #264]	; (80125ac <tcp_close_shutdown+0x1b0>)
 80124a4:	681b      	ldr	r3, [r3, #0]
 80124a6:	60fb      	str	r3, [r7, #12]
 80124a8:	e00c      	b.n	80124c4 <tcp_close_shutdown+0xc8>
 80124aa:	68fb      	ldr	r3, [r7, #12]
 80124ac:	68db      	ldr	r3, [r3, #12]
 80124ae:	687a      	ldr	r2, [r7, #4]
 80124b0:	429a      	cmp	r2, r3
 80124b2:	d104      	bne.n	80124be <tcp_close_shutdown+0xc2>
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	68da      	ldr	r2, [r3, #12]
 80124b8:	68fb      	ldr	r3, [r7, #12]
 80124ba:	60da      	str	r2, [r3, #12]
 80124bc:	e005      	b.n	80124ca <tcp_close_shutdown+0xce>
 80124be:	68fb      	ldr	r3, [r7, #12]
 80124c0:	68db      	ldr	r3, [r3, #12]
 80124c2:	60fb      	str	r3, [r7, #12]
 80124c4:	68fb      	ldr	r3, [r7, #12]
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	d1ef      	bne.n	80124aa <tcp_close_shutdown+0xae>
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	2200      	movs	r2, #0
 80124ce:	60da      	str	r2, [r3, #12]
 80124d0:	4b37      	ldr	r3, [pc, #220]	; (80125b0 <tcp_close_shutdown+0x1b4>)
 80124d2:	2201      	movs	r2, #1
 80124d4:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80124d6:	4b37      	ldr	r3, [pc, #220]	; (80125b4 <tcp_close_shutdown+0x1b8>)
 80124d8:	681b      	ldr	r3, [r3, #0]
 80124da:	687a      	ldr	r2, [r7, #4]
 80124dc:	429a      	cmp	r2, r3
 80124de:	d102      	bne.n	80124e6 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80124e0:	f003 fd5e 	bl	8015fa0 <tcp_trigger_input_pcb_close>
 80124e4:	e002      	b.n	80124ec <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 80124e6:	6878      	ldr	r0, [r7, #4]
 80124e8:	f7ff fed6 	bl	8012298 <tcp_free>
      }
      return ERR_OK;
 80124ec:	2300      	movs	r3, #0
 80124ee:	e050      	b.n	8012592 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	7d1b      	ldrb	r3, [r3, #20]
 80124f4:	2b02      	cmp	r3, #2
 80124f6:	d03b      	beq.n	8012570 <tcp_close_shutdown+0x174>
 80124f8:	2b02      	cmp	r3, #2
 80124fa:	dc44      	bgt.n	8012586 <tcp_close_shutdown+0x18a>
 80124fc:	2b00      	cmp	r3, #0
 80124fe:	d002      	beq.n	8012506 <tcp_close_shutdown+0x10a>
 8012500:	2b01      	cmp	r3, #1
 8012502:	d02a      	beq.n	801255a <tcp_close_shutdown+0x15e>
 8012504:	e03f      	b.n	8012586 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	8adb      	ldrh	r3, [r3, #22]
 801250a:	2b00      	cmp	r3, #0
 801250c:	d021      	beq.n	8012552 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801250e:	4b2a      	ldr	r3, [pc, #168]	; (80125b8 <tcp_close_shutdown+0x1bc>)
 8012510:	681b      	ldr	r3, [r3, #0]
 8012512:	687a      	ldr	r2, [r7, #4]
 8012514:	429a      	cmp	r2, r3
 8012516:	d105      	bne.n	8012524 <tcp_close_shutdown+0x128>
 8012518:	4b27      	ldr	r3, [pc, #156]	; (80125b8 <tcp_close_shutdown+0x1bc>)
 801251a:	681b      	ldr	r3, [r3, #0]
 801251c:	68db      	ldr	r3, [r3, #12]
 801251e:	4a26      	ldr	r2, [pc, #152]	; (80125b8 <tcp_close_shutdown+0x1bc>)
 8012520:	6013      	str	r3, [r2, #0]
 8012522:	e013      	b.n	801254c <tcp_close_shutdown+0x150>
 8012524:	4b24      	ldr	r3, [pc, #144]	; (80125b8 <tcp_close_shutdown+0x1bc>)
 8012526:	681b      	ldr	r3, [r3, #0]
 8012528:	60bb      	str	r3, [r7, #8]
 801252a:	e00c      	b.n	8012546 <tcp_close_shutdown+0x14a>
 801252c:	68bb      	ldr	r3, [r7, #8]
 801252e:	68db      	ldr	r3, [r3, #12]
 8012530:	687a      	ldr	r2, [r7, #4]
 8012532:	429a      	cmp	r2, r3
 8012534:	d104      	bne.n	8012540 <tcp_close_shutdown+0x144>
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	68da      	ldr	r2, [r3, #12]
 801253a:	68bb      	ldr	r3, [r7, #8]
 801253c:	60da      	str	r2, [r3, #12]
 801253e:	e005      	b.n	801254c <tcp_close_shutdown+0x150>
 8012540:	68bb      	ldr	r3, [r7, #8]
 8012542:	68db      	ldr	r3, [r3, #12]
 8012544:	60bb      	str	r3, [r7, #8]
 8012546:	68bb      	ldr	r3, [r7, #8]
 8012548:	2b00      	cmp	r3, #0
 801254a:	d1ef      	bne.n	801252c <tcp_close_shutdown+0x130>
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	2200      	movs	r2, #0
 8012550:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8012552:	6878      	ldr	r0, [r7, #4]
 8012554:	f7ff fea0 	bl	8012298 <tcp_free>
      break;
 8012558:	e01a      	b.n	8012590 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 801255a:	6878      	ldr	r0, [r7, #4]
 801255c:	f7ff ff14 	bl	8012388 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8012560:	6879      	ldr	r1, [r7, #4]
 8012562:	4816      	ldr	r0, [pc, #88]	; (80125bc <tcp_close_shutdown+0x1c0>)
 8012564:	f001 f8a8 	bl	80136b8 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8012568:	6878      	ldr	r0, [r7, #4]
 801256a:	f7ff feb1 	bl	80122d0 <tcp_free_listen>
      break;
 801256e:	e00f      	b.n	8012590 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8012570:	6879      	ldr	r1, [r7, #4]
 8012572:	480e      	ldr	r0, [pc, #56]	; (80125ac <tcp_close_shutdown+0x1b0>)
 8012574:	f001 f8a0 	bl	80136b8 <tcp_pcb_remove>
 8012578:	4b0d      	ldr	r3, [pc, #52]	; (80125b0 <tcp_close_shutdown+0x1b4>)
 801257a:	2201      	movs	r2, #1
 801257c:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 801257e:	6878      	ldr	r0, [r7, #4]
 8012580:	f7ff fe8a 	bl	8012298 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8012584:	e004      	b.n	8012590 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8012586:	6878      	ldr	r0, [r7, #4]
 8012588:	f000 f81a 	bl	80125c0 <tcp_close_shutdown_fin>
 801258c:	4603      	mov	r3, r0
 801258e:	e000      	b.n	8012592 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8012590:	2300      	movs	r3, #0
}
 8012592:	4618      	mov	r0, r3
 8012594:	3710      	adds	r7, #16
 8012596:	46bd      	mov	sp, r7
 8012598:	bdb0      	pop	{r4, r5, r7, pc}
 801259a:	bf00      	nop
 801259c:	080202d4 	.word	0x080202d4
 80125a0:	080203a8 	.word	0x080203a8
 80125a4:	08020318 	.word	0x08020318
 80125a8:	080203c8 	.word	0x080203c8
 80125ac:	2001b7d8 	.word	0x2001b7d8
 80125b0:	2001b7d4 	.word	0x2001b7d4
 80125b4:	2001b7ec 	.word	0x2001b7ec
 80125b8:	2001b7e4 	.word	0x2001b7e4
 80125bc:	2001b7e0 	.word	0x2001b7e0

080125c0 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80125c0:	b580      	push	{r7, lr}
 80125c2:	b084      	sub	sp, #16
 80125c4:	af00      	add	r7, sp, #0
 80125c6:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	d106      	bne.n	80125dc <tcp_close_shutdown_fin+0x1c>
 80125ce:	4b2e      	ldr	r3, [pc, #184]	; (8012688 <tcp_close_shutdown_fin+0xc8>)
 80125d0:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80125d4:	492d      	ldr	r1, [pc, #180]	; (801268c <tcp_close_shutdown_fin+0xcc>)
 80125d6:	482e      	ldr	r0, [pc, #184]	; (8012690 <tcp_close_shutdown_fin+0xd0>)
 80125d8:	f00a ff52 	bl	801d480 <iprintf>

  switch (pcb->state) {
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	7d1b      	ldrb	r3, [r3, #20]
 80125e0:	2b07      	cmp	r3, #7
 80125e2:	d020      	beq.n	8012626 <tcp_close_shutdown_fin+0x66>
 80125e4:	2b07      	cmp	r3, #7
 80125e6:	dc2b      	bgt.n	8012640 <tcp_close_shutdown_fin+0x80>
 80125e8:	2b03      	cmp	r3, #3
 80125ea:	d002      	beq.n	80125f2 <tcp_close_shutdown_fin+0x32>
 80125ec:	2b04      	cmp	r3, #4
 80125ee:	d00d      	beq.n	801260c <tcp_close_shutdown_fin+0x4c>
 80125f0:	e026      	b.n	8012640 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80125f2:	6878      	ldr	r0, [r7, #4]
 80125f4:	f003 fee6 	bl	80163c4 <tcp_send_fin>
 80125f8:	4603      	mov	r3, r0
 80125fa:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80125fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012600:	2b00      	cmp	r3, #0
 8012602:	d11f      	bne.n	8012644 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	2205      	movs	r2, #5
 8012608:	751a      	strb	r2, [r3, #20]
      }
      break;
 801260a:	e01b      	b.n	8012644 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 801260c:	6878      	ldr	r0, [r7, #4]
 801260e:	f003 fed9 	bl	80163c4 <tcp_send_fin>
 8012612:	4603      	mov	r3, r0
 8012614:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8012616:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801261a:	2b00      	cmp	r3, #0
 801261c:	d114      	bne.n	8012648 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	2205      	movs	r2, #5
 8012622:	751a      	strb	r2, [r3, #20]
      }
      break;
 8012624:	e010      	b.n	8012648 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8012626:	6878      	ldr	r0, [r7, #4]
 8012628:	f003 fecc 	bl	80163c4 <tcp_send_fin>
 801262c:	4603      	mov	r3, r0
 801262e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8012630:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012634:	2b00      	cmp	r3, #0
 8012636:	d109      	bne.n	801264c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	2209      	movs	r2, #9
 801263c:	751a      	strb	r2, [r3, #20]
      }
      break;
 801263e:	e005      	b.n	801264c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8012640:	2300      	movs	r3, #0
 8012642:	e01c      	b.n	801267e <tcp_close_shutdown_fin+0xbe>
      break;
 8012644:	bf00      	nop
 8012646:	e002      	b.n	801264e <tcp_close_shutdown_fin+0x8e>
      break;
 8012648:	bf00      	nop
 801264a:	e000      	b.n	801264e <tcp_close_shutdown_fin+0x8e>
      break;
 801264c:	bf00      	nop
  }

  if (err == ERR_OK) {
 801264e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012652:	2b00      	cmp	r3, #0
 8012654:	d103      	bne.n	801265e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8012656:	6878      	ldr	r0, [r7, #4]
 8012658:	f003 fff2 	bl	8016640 <tcp_output>
 801265c:	e00d      	b.n	801267a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 801265e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012666:	d108      	bne.n	801267a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	8b5b      	ldrh	r3, [r3, #26]
 801266c:	f043 0308 	orr.w	r3, r3, #8
 8012670:	b29a      	uxth	r2, r3
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8012676:	2300      	movs	r3, #0
 8012678:	e001      	b.n	801267e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 801267a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801267e:	4618      	mov	r0, r3
 8012680:	3710      	adds	r7, #16
 8012682:	46bd      	mov	sp, r7
 8012684:	bd80      	pop	{r7, pc}
 8012686:	bf00      	nop
 8012688:	080202d4 	.word	0x080202d4
 801268c:	08020384 	.word	0x08020384
 8012690:	08020318 	.word	0x08020318

08012694 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8012694:	b580      	push	{r7, lr}
 8012696:	b082      	sub	sp, #8
 8012698:	af00      	add	r7, sp, #0
 801269a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	2b00      	cmp	r3, #0
 80126a0:	d109      	bne.n	80126b6 <tcp_close+0x22>
 80126a2:	4b0f      	ldr	r3, [pc, #60]	; (80126e0 <tcp_close+0x4c>)
 80126a4:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80126a8:	490e      	ldr	r1, [pc, #56]	; (80126e4 <tcp_close+0x50>)
 80126aa:	480f      	ldr	r0, [pc, #60]	; (80126e8 <tcp_close+0x54>)
 80126ac:	f00a fee8 	bl	801d480 <iprintf>
 80126b0:	f06f 030f 	mvn.w	r3, #15
 80126b4:	e00f      	b.n	80126d6 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	7d1b      	ldrb	r3, [r3, #20]
 80126ba:	2b01      	cmp	r3, #1
 80126bc:	d006      	beq.n	80126cc <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	8b5b      	ldrh	r3, [r3, #26]
 80126c2:	f043 0310 	orr.w	r3, r3, #16
 80126c6:	b29a      	uxth	r2, r3
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80126cc:	2101      	movs	r1, #1
 80126ce:	6878      	ldr	r0, [r7, #4]
 80126d0:	f7ff fe94 	bl	80123fc <tcp_close_shutdown>
 80126d4:	4603      	mov	r3, r0
}
 80126d6:	4618      	mov	r0, r3
 80126d8:	3708      	adds	r7, #8
 80126da:	46bd      	mov	sp, r7
 80126dc:	bd80      	pop	{r7, pc}
 80126de:	bf00      	nop
 80126e0:	080202d4 	.word	0x080202d4
 80126e4:	080203e4 	.word	0x080203e4
 80126e8:	08020318 	.word	0x08020318

080126ec <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80126ec:	b580      	push	{r7, lr}
 80126ee:	b08e      	sub	sp, #56	; 0x38
 80126f0:	af04      	add	r7, sp, #16
 80126f2:	6078      	str	r0, [r7, #4]
 80126f4:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	2b00      	cmp	r3, #0
 80126fa:	d107      	bne.n	801270c <tcp_abandon+0x20>
 80126fc:	4b52      	ldr	r3, [pc, #328]	; (8012848 <tcp_abandon+0x15c>)
 80126fe:	f240 223d 	movw	r2, #573	; 0x23d
 8012702:	4952      	ldr	r1, [pc, #328]	; (801284c <tcp_abandon+0x160>)
 8012704:	4852      	ldr	r0, [pc, #328]	; (8012850 <tcp_abandon+0x164>)
 8012706:	f00a febb 	bl	801d480 <iprintf>
 801270a:	e099      	b.n	8012840 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	7d1b      	ldrb	r3, [r3, #20]
 8012710:	2b01      	cmp	r3, #1
 8012712:	d106      	bne.n	8012722 <tcp_abandon+0x36>
 8012714:	4b4c      	ldr	r3, [pc, #304]	; (8012848 <tcp_abandon+0x15c>)
 8012716:	f44f 7210 	mov.w	r2, #576	; 0x240
 801271a:	494e      	ldr	r1, [pc, #312]	; (8012854 <tcp_abandon+0x168>)
 801271c:	484c      	ldr	r0, [pc, #304]	; (8012850 <tcp_abandon+0x164>)
 801271e:	f00a feaf 	bl	801d480 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	7d1b      	ldrb	r3, [r3, #20]
 8012726:	2b0a      	cmp	r3, #10
 8012728:	d107      	bne.n	801273a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 801272a:	6879      	ldr	r1, [r7, #4]
 801272c:	484a      	ldr	r0, [pc, #296]	; (8012858 <tcp_abandon+0x16c>)
 801272e:	f000 ffc3 	bl	80136b8 <tcp_pcb_remove>
    tcp_free(pcb);
 8012732:	6878      	ldr	r0, [r7, #4]
 8012734:	f7ff fdb0 	bl	8012298 <tcp_free>
 8012738:	e082      	b.n	8012840 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 801273a:	2300      	movs	r3, #0
 801273c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 801273e:	2300      	movs	r3, #0
 8012740:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012746:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801274c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012754:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	691b      	ldr	r3, [r3, #16]
 801275a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	7d1b      	ldrb	r3, [r3, #20]
 8012760:	2b00      	cmp	r3, #0
 8012762:	d126      	bne.n	80127b2 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	8adb      	ldrh	r3, [r3, #22]
 8012768:	2b00      	cmp	r3, #0
 801276a:	d02e      	beq.n	80127ca <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801276c:	4b3b      	ldr	r3, [pc, #236]	; (801285c <tcp_abandon+0x170>)
 801276e:	681b      	ldr	r3, [r3, #0]
 8012770:	687a      	ldr	r2, [r7, #4]
 8012772:	429a      	cmp	r2, r3
 8012774:	d105      	bne.n	8012782 <tcp_abandon+0x96>
 8012776:	4b39      	ldr	r3, [pc, #228]	; (801285c <tcp_abandon+0x170>)
 8012778:	681b      	ldr	r3, [r3, #0]
 801277a:	68db      	ldr	r3, [r3, #12]
 801277c:	4a37      	ldr	r2, [pc, #220]	; (801285c <tcp_abandon+0x170>)
 801277e:	6013      	str	r3, [r2, #0]
 8012780:	e013      	b.n	80127aa <tcp_abandon+0xbe>
 8012782:	4b36      	ldr	r3, [pc, #216]	; (801285c <tcp_abandon+0x170>)
 8012784:	681b      	ldr	r3, [r3, #0]
 8012786:	61fb      	str	r3, [r7, #28]
 8012788:	e00c      	b.n	80127a4 <tcp_abandon+0xb8>
 801278a:	69fb      	ldr	r3, [r7, #28]
 801278c:	68db      	ldr	r3, [r3, #12]
 801278e:	687a      	ldr	r2, [r7, #4]
 8012790:	429a      	cmp	r2, r3
 8012792:	d104      	bne.n	801279e <tcp_abandon+0xb2>
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	68da      	ldr	r2, [r3, #12]
 8012798:	69fb      	ldr	r3, [r7, #28]
 801279a:	60da      	str	r2, [r3, #12]
 801279c:	e005      	b.n	80127aa <tcp_abandon+0xbe>
 801279e:	69fb      	ldr	r3, [r7, #28]
 80127a0:	68db      	ldr	r3, [r3, #12]
 80127a2:	61fb      	str	r3, [r7, #28]
 80127a4:	69fb      	ldr	r3, [r7, #28]
 80127a6:	2b00      	cmp	r3, #0
 80127a8:	d1ef      	bne.n	801278a <tcp_abandon+0x9e>
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	2200      	movs	r2, #0
 80127ae:	60da      	str	r2, [r3, #12]
 80127b0:	e00b      	b.n	80127ca <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80127b2:	683b      	ldr	r3, [r7, #0]
 80127b4:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	8adb      	ldrh	r3, [r3, #22]
 80127ba:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80127bc:	6879      	ldr	r1, [r7, #4]
 80127be:	4828      	ldr	r0, [pc, #160]	; (8012860 <tcp_abandon+0x174>)
 80127c0:	f000 ff7a 	bl	80136b8 <tcp_pcb_remove>
 80127c4:	4b27      	ldr	r3, [pc, #156]	; (8012864 <tcp_abandon+0x178>)
 80127c6:	2201      	movs	r2, #1
 80127c8:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	d004      	beq.n	80127dc <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80127d6:	4618      	mov	r0, r3
 80127d8:	f000 fd1c 	bl	8013214 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80127e0:	2b00      	cmp	r3, #0
 80127e2:	d004      	beq.n	80127ee <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80127e8:	4618      	mov	r0, r3
 80127ea:	f000 fd13 	bl	8013214 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80127f2:	2b00      	cmp	r3, #0
 80127f4:	d004      	beq.n	8012800 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80127fa:	4618      	mov	r0, r3
 80127fc:	f000 fd0a 	bl	8013214 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8012800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012802:	2b00      	cmp	r3, #0
 8012804:	d00e      	beq.n	8012824 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8012806:	6879      	ldr	r1, [r7, #4]
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	3304      	adds	r3, #4
 801280c:	687a      	ldr	r2, [r7, #4]
 801280e:	8b12      	ldrh	r2, [r2, #24]
 8012810:	9202      	str	r2, [sp, #8]
 8012812:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012814:	9201      	str	r2, [sp, #4]
 8012816:	9300      	str	r3, [sp, #0]
 8012818:	460b      	mov	r3, r1
 801281a:	697a      	ldr	r2, [r7, #20]
 801281c:	69b9      	ldr	r1, [r7, #24]
 801281e:	6878      	ldr	r0, [r7, #4]
 8012820:	f004 fcc2 	bl	80171a8 <tcp_rst>
    }
    last_state = pcb->state;
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	7d1b      	ldrb	r3, [r3, #20]
 8012828:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 801282a:	6878      	ldr	r0, [r7, #4]
 801282c:	f7ff fd34 	bl	8012298 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8012830:	693b      	ldr	r3, [r7, #16]
 8012832:	2b00      	cmp	r3, #0
 8012834:	d004      	beq.n	8012840 <tcp_abandon+0x154>
 8012836:	693b      	ldr	r3, [r7, #16]
 8012838:	f06f 010c 	mvn.w	r1, #12
 801283c:	68f8      	ldr	r0, [r7, #12]
 801283e:	4798      	blx	r3
  }
}
 8012840:	3728      	adds	r7, #40	; 0x28
 8012842:	46bd      	mov	sp, r7
 8012844:	bd80      	pop	{r7, pc}
 8012846:	bf00      	nop
 8012848:	080202d4 	.word	0x080202d4
 801284c:	08020418 	.word	0x08020418
 8012850:	08020318 	.word	0x08020318
 8012854:	08020434 	.word	0x08020434
 8012858:	2001b7e8 	.word	0x2001b7e8
 801285c:	2001b7e4 	.word	0x2001b7e4
 8012860:	2001b7d8 	.word	0x2001b7d8
 8012864:	2001b7d4 	.word	0x2001b7d4

08012868 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8012868:	b580      	push	{r7, lr}
 801286a:	b082      	sub	sp, #8
 801286c:	af00      	add	r7, sp, #0
 801286e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8012870:	2101      	movs	r1, #1
 8012872:	6878      	ldr	r0, [r7, #4]
 8012874:	f7ff ff3a 	bl	80126ec <tcp_abandon>
}
 8012878:	bf00      	nop
 801287a:	3708      	adds	r7, #8
 801287c:	46bd      	mov	sp, r7
 801287e:	bd80      	pop	{r7, pc}

08012880 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8012880:	b580      	push	{r7, lr}
 8012882:	b084      	sub	sp, #16
 8012884:	af00      	add	r7, sp, #0
 8012886:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	2b00      	cmp	r3, #0
 801288c:	d106      	bne.n	801289c <tcp_update_rcv_ann_wnd+0x1c>
 801288e:	4b25      	ldr	r3, [pc, #148]	; (8012924 <tcp_update_rcv_ann_wnd+0xa4>)
 8012890:	f240 32a6 	movw	r2, #934	; 0x3a6
 8012894:	4924      	ldr	r1, [pc, #144]	; (8012928 <tcp_update_rcv_ann_wnd+0xa8>)
 8012896:	4825      	ldr	r0, [pc, #148]	; (801292c <tcp_update_rcv_ann_wnd+0xac>)
 8012898:	f00a fdf2 	bl	801d480 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80128a0:	687a      	ldr	r2, [r7, #4]
 80128a2:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80128a4:	4413      	add	r3, r2
 80128a6:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80128ac:	687a      	ldr	r2, [r7, #4]
 80128ae:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80128b0:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 80128b4:	bf28      	it	cs
 80128b6:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 80128ba:	b292      	uxth	r2, r2
 80128bc:	4413      	add	r3, r2
 80128be:	68fa      	ldr	r2, [r7, #12]
 80128c0:	1ad3      	subs	r3, r2, r3
 80128c2:	2b00      	cmp	r3, #0
 80128c4:	db08      	blt.n	80128d8 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80128d2:	68fa      	ldr	r2, [r7, #12]
 80128d4:	1ad3      	subs	r3, r2, r3
 80128d6:	e020      	b.n	801291a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80128e0:	1ad3      	subs	r3, r2, r3
 80128e2:	2b00      	cmp	r3, #0
 80128e4:	dd03      	ble.n	80128ee <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	2200      	movs	r2, #0
 80128ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80128ec:	e014      	b.n	8012918 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80128f6:	1ad3      	subs	r3, r2, r3
 80128f8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80128fa:	68bb      	ldr	r3, [r7, #8]
 80128fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012900:	d306      	bcc.n	8012910 <tcp_update_rcv_ann_wnd+0x90>
 8012902:	4b08      	ldr	r3, [pc, #32]	; (8012924 <tcp_update_rcv_ann_wnd+0xa4>)
 8012904:	f240 32b6 	movw	r2, #950	; 0x3b6
 8012908:	4909      	ldr	r1, [pc, #36]	; (8012930 <tcp_update_rcv_ann_wnd+0xb0>)
 801290a:	4808      	ldr	r0, [pc, #32]	; (801292c <tcp_update_rcv_ann_wnd+0xac>)
 801290c:	f00a fdb8 	bl	801d480 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8012910:	68bb      	ldr	r3, [r7, #8]
 8012912:	b29a      	uxth	r2, r3
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8012918:	2300      	movs	r3, #0
  }
}
 801291a:	4618      	mov	r0, r3
 801291c:	3710      	adds	r7, #16
 801291e:	46bd      	mov	sp, r7
 8012920:	bd80      	pop	{r7, pc}
 8012922:	bf00      	nop
 8012924:	080202d4 	.word	0x080202d4
 8012928:	08020530 	.word	0x08020530
 801292c:	08020318 	.word	0x08020318
 8012930:	08020554 	.word	0x08020554

08012934 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8012934:	b580      	push	{r7, lr}
 8012936:	b084      	sub	sp, #16
 8012938:	af00      	add	r7, sp, #0
 801293a:	6078      	str	r0, [r7, #4]
 801293c:	460b      	mov	r3, r1
 801293e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	2b00      	cmp	r3, #0
 8012944:	d107      	bne.n	8012956 <tcp_recved+0x22>
 8012946:	4b1f      	ldr	r3, [pc, #124]	; (80129c4 <tcp_recved+0x90>)
 8012948:	f240 32cf 	movw	r2, #975	; 0x3cf
 801294c:	491e      	ldr	r1, [pc, #120]	; (80129c8 <tcp_recved+0x94>)
 801294e:	481f      	ldr	r0, [pc, #124]	; (80129cc <tcp_recved+0x98>)
 8012950:	f00a fd96 	bl	801d480 <iprintf>
 8012954:	e032      	b.n	80129bc <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	7d1b      	ldrb	r3, [r3, #20]
 801295a:	2b01      	cmp	r3, #1
 801295c:	d106      	bne.n	801296c <tcp_recved+0x38>
 801295e:	4b19      	ldr	r3, [pc, #100]	; (80129c4 <tcp_recved+0x90>)
 8012960:	f240 32d2 	movw	r2, #978	; 0x3d2
 8012964:	491a      	ldr	r1, [pc, #104]	; (80129d0 <tcp_recved+0x9c>)
 8012966:	4819      	ldr	r0, [pc, #100]	; (80129cc <tcp_recved+0x98>)
 8012968:	f00a fd8a 	bl	801d480 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012970:	887b      	ldrh	r3, [r7, #2]
 8012972:	4413      	add	r3, r2
 8012974:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8012976:	89fb      	ldrh	r3, [r7, #14]
 8012978:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801297c:	d804      	bhi.n	8012988 <tcp_recved+0x54>
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012982:	89fa      	ldrh	r2, [r7, #14]
 8012984:	429a      	cmp	r2, r3
 8012986:	d204      	bcs.n	8012992 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801298e:	851a      	strh	r2, [r3, #40]	; 0x28
 8012990:	e002      	b.n	8012998 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	89fa      	ldrh	r2, [r7, #14]
 8012996:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8012998:	6878      	ldr	r0, [r7, #4]
 801299a:	f7ff ff71 	bl	8012880 <tcp_update_rcv_ann_wnd>
 801299e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80129a0:	68bb      	ldr	r3, [r7, #8]
 80129a2:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80129a6:	d309      	bcc.n	80129bc <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	8b5b      	ldrh	r3, [r3, #26]
 80129ac:	f043 0302 	orr.w	r3, r3, #2
 80129b0:	b29a      	uxth	r2, r3
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80129b6:	6878      	ldr	r0, [r7, #4]
 80129b8:	f003 fe42 	bl	8016640 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80129bc:	3710      	adds	r7, #16
 80129be:	46bd      	mov	sp, r7
 80129c0:	bd80      	pop	{r7, pc}
 80129c2:	bf00      	nop
 80129c4:	080202d4 	.word	0x080202d4
 80129c8:	08020570 	.word	0x08020570
 80129cc:	08020318 	.word	0x08020318
 80129d0:	08020588 	.word	0x08020588

080129d4 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80129d4:	b5b0      	push	{r4, r5, r7, lr}
 80129d6:	b090      	sub	sp, #64	; 0x40
 80129d8:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80129da:	2300      	movs	r3, #0
 80129dc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 80129e0:	4b94      	ldr	r3, [pc, #592]	; (8012c34 <tcp_slowtmr+0x260>)
 80129e2:	681b      	ldr	r3, [r3, #0]
 80129e4:	3301      	adds	r3, #1
 80129e6:	4a93      	ldr	r2, [pc, #588]	; (8012c34 <tcp_slowtmr+0x260>)
 80129e8:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80129ea:	4b93      	ldr	r3, [pc, #588]	; (8012c38 <tcp_slowtmr+0x264>)
 80129ec:	781b      	ldrb	r3, [r3, #0]
 80129ee:	3301      	adds	r3, #1
 80129f0:	b2da      	uxtb	r2, r3
 80129f2:	4b91      	ldr	r3, [pc, #580]	; (8012c38 <tcp_slowtmr+0x264>)
 80129f4:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80129f6:	2300      	movs	r3, #0
 80129f8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 80129fa:	4b90      	ldr	r3, [pc, #576]	; (8012c3c <tcp_slowtmr+0x268>)
 80129fc:	681b      	ldr	r3, [r3, #0]
 80129fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8012a00:	e29f      	b.n	8012f42 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8012a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a04:	7d1b      	ldrb	r3, [r3, #20]
 8012a06:	2b00      	cmp	r3, #0
 8012a08:	d106      	bne.n	8012a18 <tcp_slowtmr+0x44>
 8012a0a:	4b8d      	ldr	r3, [pc, #564]	; (8012c40 <tcp_slowtmr+0x26c>)
 8012a0c:	f240 42be 	movw	r2, #1214	; 0x4be
 8012a10:	498c      	ldr	r1, [pc, #560]	; (8012c44 <tcp_slowtmr+0x270>)
 8012a12:	488d      	ldr	r0, [pc, #564]	; (8012c48 <tcp_slowtmr+0x274>)
 8012a14:	f00a fd34 	bl	801d480 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8012a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a1a:	7d1b      	ldrb	r3, [r3, #20]
 8012a1c:	2b01      	cmp	r3, #1
 8012a1e:	d106      	bne.n	8012a2e <tcp_slowtmr+0x5a>
 8012a20:	4b87      	ldr	r3, [pc, #540]	; (8012c40 <tcp_slowtmr+0x26c>)
 8012a22:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8012a26:	4989      	ldr	r1, [pc, #548]	; (8012c4c <tcp_slowtmr+0x278>)
 8012a28:	4887      	ldr	r0, [pc, #540]	; (8012c48 <tcp_slowtmr+0x274>)
 8012a2a:	f00a fd29 	bl	801d480 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8012a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a30:	7d1b      	ldrb	r3, [r3, #20]
 8012a32:	2b0a      	cmp	r3, #10
 8012a34:	d106      	bne.n	8012a44 <tcp_slowtmr+0x70>
 8012a36:	4b82      	ldr	r3, [pc, #520]	; (8012c40 <tcp_slowtmr+0x26c>)
 8012a38:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8012a3c:	4984      	ldr	r1, [pc, #528]	; (8012c50 <tcp_slowtmr+0x27c>)
 8012a3e:	4882      	ldr	r0, [pc, #520]	; (8012c48 <tcp_slowtmr+0x274>)
 8012a40:	f00a fd1e 	bl	801d480 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8012a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a46:	7f9a      	ldrb	r2, [r3, #30]
 8012a48:	4b7b      	ldr	r3, [pc, #492]	; (8012c38 <tcp_slowtmr+0x264>)
 8012a4a:	781b      	ldrb	r3, [r3, #0]
 8012a4c:	429a      	cmp	r2, r3
 8012a4e:	d105      	bne.n	8012a5c <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8012a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a52:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8012a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a56:	68db      	ldr	r3, [r3, #12]
 8012a58:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8012a5a:	e272      	b.n	8012f42 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8012a5c:	4b76      	ldr	r3, [pc, #472]	; (8012c38 <tcp_slowtmr+0x264>)
 8012a5e:	781a      	ldrb	r2, [r3, #0]
 8012a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a62:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8012a64:	2300      	movs	r3, #0
 8012a66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8012a6a:	2300      	movs	r3, #0
 8012a6c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8012a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a72:	7d1b      	ldrb	r3, [r3, #20]
 8012a74:	2b02      	cmp	r3, #2
 8012a76:	d10a      	bne.n	8012a8e <tcp_slowtmr+0xba>
 8012a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a7a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012a7e:	2b05      	cmp	r3, #5
 8012a80:	d905      	bls.n	8012a8e <tcp_slowtmr+0xba>
      ++pcb_remove;
 8012a82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012a86:	3301      	adds	r3, #1
 8012a88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012a8c:	e11e      	b.n	8012ccc <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8012a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a90:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012a94:	2b0b      	cmp	r3, #11
 8012a96:	d905      	bls.n	8012aa4 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8012a98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012a9c:	3301      	adds	r3, #1
 8012a9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012aa2:	e113      	b.n	8012ccc <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8012aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012aa6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8012aaa:	2b00      	cmp	r3, #0
 8012aac:	d075      	beq.n	8012b9a <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8012aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012ab2:	2b00      	cmp	r3, #0
 8012ab4:	d006      	beq.n	8012ac4 <tcp_slowtmr+0xf0>
 8012ab6:	4b62      	ldr	r3, [pc, #392]	; (8012c40 <tcp_slowtmr+0x26c>)
 8012ab8:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8012abc:	4965      	ldr	r1, [pc, #404]	; (8012c54 <tcp_slowtmr+0x280>)
 8012abe:	4862      	ldr	r0, [pc, #392]	; (8012c48 <tcp_slowtmr+0x274>)
 8012ac0:	f00a fcde 	bl	801d480 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8012ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ac6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	d106      	bne.n	8012ada <tcp_slowtmr+0x106>
 8012acc:	4b5c      	ldr	r3, [pc, #368]	; (8012c40 <tcp_slowtmr+0x26c>)
 8012ace:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8012ad2:	4961      	ldr	r1, [pc, #388]	; (8012c58 <tcp_slowtmr+0x284>)
 8012ad4:	485c      	ldr	r0, [pc, #368]	; (8012c48 <tcp_slowtmr+0x274>)
 8012ad6:	f00a fcd3 	bl	801d480 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8012ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012adc:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8012ae0:	2b0b      	cmp	r3, #11
 8012ae2:	d905      	bls.n	8012af0 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8012ae4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012ae8:	3301      	adds	r3, #1
 8012aea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012aee:	e0ed      	b.n	8012ccc <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8012af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012af2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8012af6:	3b01      	subs	r3, #1
 8012af8:	4a58      	ldr	r2, [pc, #352]	; (8012c5c <tcp_slowtmr+0x288>)
 8012afa:	5cd3      	ldrb	r3, [r2, r3]
 8012afc:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8012afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b00:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8012b04:	7c7a      	ldrb	r2, [r7, #17]
 8012b06:	429a      	cmp	r2, r3
 8012b08:	d907      	bls.n	8012b1a <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8012b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b0c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8012b10:	3301      	adds	r3, #1
 8012b12:	b2da      	uxtb	r2, r3
 8012b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b16:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8012b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b1c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8012b20:	7c7a      	ldrb	r2, [r7, #17]
 8012b22:	429a      	cmp	r2, r3
 8012b24:	f200 80d2 	bhi.w	8012ccc <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8012b28:	2301      	movs	r3, #1
 8012b2a:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8012b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b2e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012b32:	2b00      	cmp	r3, #0
 8012b34:	d108      	bne.n	8012b48 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8012b36:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012b38:	f004 fc2a 	bl	8017390 <tcp_zero_window_probe>
 8012b3c:	4603      	mov	r3, r0
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	d014      	beq.n	8012b6c <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8012b42:	2300      	movs	r3, #0
 8012b44:	623b      	str	r3, [r7, #32]
 8012b46:	e011      	b.n	8012b6c <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8012b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b4a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012b4e:	4619      	mov	r1, r3
 8012b50:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012b52:	f003 faef 	bl	8016134 <tcp_split_unsent_seg>
 8012b56:	4603      	mov	r3, r0
 8012b58:	2b00      	cmp	r3, #0
 8012b5a:	d107      	bne.n	8012b6c <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8012b5c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012b5e:	f003 fd6f 	bl	8016640 <tcp_output>
 8012b62:	4603      	mov	r3, r0
 8012b64:	2b00      	cmp	r3, #0
 8012b66:	d101      	bne.n	8012b6c <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8012b68:	2300      	movs	r3, #0
 8012b6a:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8012b6c:	6a3b      	ldr	r3, [r7, #32]
 8012b6e:	2b00      	cmp	r3, #0
 8012b70:	f000 80ac 	beq.w	8012ccc <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8012b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b76:	2200      	movs	r2, #0
 8012b78:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8012b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b7e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8012b82:	2b06      	cmp	r3, #6
 8012b84:	f200 80a2 	bhi.w	8012ccc <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8012b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b8a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8012b8e:	3301      	adds	r3, #1
 8012b90:	b2da      	uxtb	r2, r3
 8012b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b94:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8012b98:	e098      	b.n	8012ccc <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8012b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b9c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	db0f      	blt.n	8012bc4 <tcp_slowtmr+0x1f0>
 8012ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ba6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012baa:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8012bae:	4293      	cmp	r3, r2
 8012bb0:	d008      	beq.n	8012bc4 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8012bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bb4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012bb8:	b29b      	uxth	r3, r3
 8012bba:	3301      	adds	r3, #1
 8012bbc:	b29b      	uxth	r3, r3
 8012bbe:	b21a      	sxth	r2, r3
 8012bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bc2:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8012bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bc6:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8012bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bcc:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8012bd0:	429a      	cmp	r2, r3
 8012bd2:	db7b      	blt.n	8012ccc <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8012bd4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012bd6:	f004 f825 	bl	8016c24 <tcp_rexmit_rto_prepare>
 8012bda:	4603      	mov	r3, r0
 8012bdc:	2b00      	cmp	r3, #0
 8012bde:	d007      	beq.n	8012bf0 <tcp_slowtmr+0x21c>
 8012be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	d171      	bne.n	8012ccc <tcp_slowtmr+0x2f8>
 8012be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012bec:	2b00      	cmp	r3, #0
 8012bee:	d06d      	beq.n	8012ccc <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8012bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bf2:	7d1b      	ldrb	r3, [r3, #20]
 8012bf4:	2b02      	cmp	r3, #2
 8012bf6:	d03a      	beq.n	8012c6e <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8012bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bfa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012bfe:	2b0c      	cmp	r3, #12
 8012c00:	bf28      	it	cs
 8012c02:	230c      	movcs	r3, #12
 8012c04:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8012c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c08:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012c0c:	10db      	asrs	r3, r3, #3
 8012c0e:	b21b      	sxth	r3, r3
 8012c10:	461a      	mov	r2, r3
 8012c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c14:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012c18:	4413      	add	r3, r2
 8012c1a:	7efa      	ldrb	r2, [r7, #27]
 8012c1c:	4910      	ldr	r1, [pc, #64]	; (8012c60 <tcp_slowtmr+0x28c>)
 8012c1e:	5c8a      	ldrb	r2, [r1, r2]
 8012c20:	4093      	lsls	r3, r2
 8012c22:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8012c24:	697b      	ldr	r3, [r7, #20]
 8012c26:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8012c2a:	4293      	cmp	r3, r2
 8012c2c:	dc1a      	bgt.n	8012c64 <tcp_slowtmr+0x290>
 8012c2e:	697b      	ldr	r3, [r7, #20]
 8012c30:	b21a      	sxth	r2, r3
 8012c32:	e019      	b.n	8012c68 <tcp_slowtmr+0x294>
 8012c34:	2001b7dc 	.word	0x2001b7dc
 8012c38:	200137ae 	.word	0x200137ae
 8012c3c:	2001b7d8 	.word	0x2001b7d8
 8012c40:	080202d4 	.word	0x080202d4
 8012c44:	08020618 	.word	0x08020618
 8012c48:	08020318 	.word	0x08020318
 8012c4c:	08020644 	.word	0x08020644
 8012c50:	08020670 	.word	0x08020670
 8012c54:	080206a0 	.word	0x080206a0
 8012c58:	080206d4 	.word	0x080206d4
 8012c5c:	08022748 	.word	0x08022748
 8012c60:	08022738 	.word	0x08022738
 8012c64:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8012c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c6a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8012c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c70:	2200      	movs	r2, #0
 8012c72:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8012c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c76:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c7c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012c80:	4293      	cmp	r3, r2
 8012c82:	bf28      	it	cs
 8012c84:	4613      	movcs	r3, r2
 8012c86:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8012c88:	8a7b      	ldrh	r3, [r7, #18]
 8012c8a:	085b      	lsrs	r3, r3, #1
 8012c8c:	b29a      	uxth	r2, r3
 8012c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c90:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8012c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c96:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8012c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c9c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012c9e:	005b      	lsls	r3, r3, #1
 8012ca0:	b29b      	uxth	r3, r3
 8012ca2:	429a      	cmp	r2, r3
 8012ca4:	d206      	bcs.n	8012cb4 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8012ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ca8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012caa:	005b      	lsls	r3, r3, #1
 8012cac:	b29a      	uxth	r2, r3
 8012cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cb0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8012cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cb6:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8012cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cba:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8012cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cc0:	2200      	movs	r2, #0
 8012cc2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8012cc6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012cc8:	f004 f81c 	bl	8016d04 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8012ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cce:	7d1b      	ldrb	r3, [r3, #20]
 8012cd0:	2b06      	cmp	r3, #6
 8012cd2:	d111      	bne.n	8012cf8 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8012cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cd6:	8b5b      	ldrh	r3, [r3, #26]
 8012cd8:	f003 0310 	and.w	r3, r3, #16
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	d00b      	beq.n	8012cf8 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012ce0:	4b9d      	ldr	r3, [pc, #628]	; (8012f58 <tcp_slowtmr+0x584>)
 8012ce2:	681a      	ldr	r2, [r3, #0]
 8012ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ce6:	6a1b      	ldr	r3, [r3, #32]
 8012ce8:	1ad3      	subs	r3, r2, r3
 8012cea:	2b28      	cmp	r3, #40	; 0x28
 8012cec:	d904      	bls.n	8012cf8 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8012cee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012cf2:	3301      	adds	r3, #1
 8012cf4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8012cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cfa:	7a5b      	ldrb	r3, [r3, #9]
 8012cfc:	f003 0308 	and.w	r3, r3, #8
 8012d00:	2b00      	cmp	r3, #0
 8012d02:	d04c      	beq.n	8012d9e <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8012d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d06:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8012d08:	2b04      	cmp	r3, #4
 8012d0a:	d003      	beq.n	8012d14 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8012d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d0e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8012d10:	2b07      	cmp	r3, #7
 8012d12:	d144      	bne.n	8012d9e <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012d14:	4b90      	ldr	r3, [pc, #576]	; (8012f58 <tcp_slowtmr+0x584>)
 8012d16:	681a      	ldr	r2, [r3, #0]
 8012d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d1a:	6a1b      	ldr	r3, [r3, #32]
 8012d1c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8012d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8012d24:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8012d28:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8012d2c:	498b      	ldr	r1, [pc, #556]	; (8012f5c <tcp_slowtmr+0x588>)
 8012d2e:	fba1 1303 	umull	r1, r3, r1, r3
 8012d32:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012d34:	429a      	cmp	r2, r3
 8012d36:	d90a      	bls.n	8012d4e <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8012d38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012d3c:	3301      	adds	r3, #1
 8012d3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8012d42:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012d46:	3301      	adds	r3, #1
 8012d48:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8012d4c:	e027      	b.n	8012d9e <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012d4e:	4b82      	ldr	r3, [pc, #520]	; (8012f58 <tcp_slowtmr+0x584>)
 8012d50:	681a      	ldr	r2, [r3, #0]
 8012d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d54:	6a1b      	ldr	r3, [r3, #32]
 8012d56:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8012d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d5a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8012d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d60:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8012d64:	4618      	mov	r0, r3
 8012d66:	4b7e      	ldr	r3, [pc, #504]	; (8012f60 <tcp_slowtmr+0x58c>)
 8012d68:	fb00 f303 	mul.w	r3, r0, r3
 8012d6c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8012d6e:	497b      	ldr	r1, [pc, #492]	; (8012f5c <tcp_slowtmr+0x588>)
 8012d70:	fba1 1303 	umull	r1, r3, r1, r3
 8012d74:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012d76:	429a      	cmp	r2, r3
 8012d78:	d911      	bls.n	8012d9e <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8012d7a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012d7c:	f004 fac8 	bl	8017310 <tcp_keepalive>
 8012d80:	4603      	mov	r3, r0
 8012d82:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8012d86:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8012d8a:	2b00      	cmp	r3, #0
 8012d8c:	d107      	bne.n	8012d9e <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8012d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d90:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8012d94:	3301      	adds	r3, #1
 8012d96:	b2da      	uxtb	r2, r3
 8012d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d9a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8012d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012da0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012da2:	2b00      	cmp	r3, #0
 8012da4:	d011      	beq.n	8012dca <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8012da6:	4b6c      	ldr	r3, [pc, #432]	; (8012f58 <tcp_slowtmr+0x584>)
 8012da8:	681a      	ldr	r2, [r3, #0]
 8012daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dac:	6a1b      	ldr	r3, [r3, #32]
 8012dae:	1ad2      	subs	r2, r2, r3
 8012db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012db2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8012db6:	4619      	mov	r1, r3
 8012db8:	460b      	mov	r3, r1
 8012dba:	005b      	lsls	r3, r3, #1
 8012dbc:	440b      	add	r3, r1
 8012dbe:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8012dc0:	429a      	cmp	r2, r3
 8012dc2:	d302      	bcc.n	8012dca <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8012dc4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012dc6:	f000 fddb 	bl	8013980 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8012dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dcc:	7d1b      	ldrb	r3, [r3, #20]
 8012dce:	2b03      	cmp	r3, #3
 8012dd0:	d10b      	bne.n	8012dea <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012dd2:	4b61      	ldr	r3, [pc, #388]	; (8012f58 <tcp_slowtmr+0x584>)
 8012dd4:	681a      	ldr	r2, [r3, #0]
 8012dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dd8:	6a1b      	ldr	r3, [r3, #32]
 8012dda:	1ad3      	subs	r3, r2, r3
 8012ddc:	2b28      	cmp	r3, #40	; 0x28
 8012dde:	d904      	bls.n	8012dea <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8012de0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012de4:	3301      	adds	r3, #1
 8012de6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8012dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dec:	7d1b      	ldrb	r3, [r3, #20]
 8012dee:	2b09      	cmp	r3, #9
 8012df0:	d10b      	bne.n	8012e0a <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8012df2:	4b59      	ldr	r3, [pc, #356]	; (8012f58 <tcp_slowtmr+0x584>)
 8012df4:	681a      	ldr	r2, [r3, #0]
 8012df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012df8:	6a1b      	ldr	r3, [r3, #32]
 8012dfa:	1ad3      	subs	r3, r2, r3
 8012dfc:	2bf0      	cmp	r3, #240	; 0xf0
 8012dfe:	d904      	bls.n	8012e0a <tcp_slowtmr+0x436>
        ++pcb_remove;
 8012e00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012e04:	3301      	adds	r3, #1
 8012e06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8012e0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012e0e:	2b00      	cmp	r3, #0
 8012e10:	d060      	beq.n	8012ed4 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8012e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012e18:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8012e1a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012e1c:	f000 fbfc 	bl	8013618 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8012e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	d010      	beq.n	8012e48 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8012e26:	4b4f      	ldr	r3, [pc, #316]	; (8012f64 <tcp_slowtmr+0x590>)
 8012e28:	681b      	ldr	r3, [r3, #0]
 8012e2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012e2c:	429a      	cmp	r2, r3
 8012e2e:	d106      	bne.n	8012e3e <tcp_slowtmr+0x46a>
 8012e30:	4b4d      	ldr	r3, [pc, #308]	; (8012f68 <tcp_slowtmr+0x594>)
 8012e32:	f240 526d 	movw	r2, #1389	; 0x56d
 8012e36:	494d      	ldr	r1, [pc, #308]	; (8012f6c <tcp_slowtmr+0x598>)
 8012e38:	484d      	ldr	r0, [pc, #308]	; (8012f70 <tcp_slowtmr+0x59c>)
 8012e3a:	f00a fb21 	bl	801d480 <iprintf>
        prev->next = pcb->next;
 8012e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e40:	68da      	ldr	r2, [r3, #12]
 8012e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e44:	60da      	str	r2, [r3, #12]
 8012e46:	e00f      	b.n	8012e68 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8012e48:	4b46      	ldr	r3, [pc, #280]	; (8012f64 <tcp_slowtmr+0x590>)
 8012e4a:	681b      	ldr	r3, [r3, #0]
 8012e4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012e4e:	429a      	cmp	r2, r3
 8012e50:	d006      	beq.n	8012e60 <tcp_slowtmr+0x48c>
 8012e52:	4b45      	ldr	r3, [pc, #276]	; (8012f68 <tcp_slowtmr+0x594>)
 8012e54:	f240 5271 	movw	r2, #1393	; 0x571
 8012e58:	4946      	ldr	r1, [pc, #280]	; (8012f74 <tcp_slowtmr+0x5a0>)
 8012e5a:	4845      	ldr	r0, [pc, #276]	; (8012f70 <tcp_slowtmr+0x59c>)
 8012e5c:	f00a fb10 	bl	801d480 <iprintf>
        tcp_active_pcbs = pcb->next;
 8012e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e62:	68db      	ldr	r3, [r3, #12]
 8012e64:	4a3f      	ldr	r2, [pc, #252]	; (8012f64 <tcp_slowtmr+0x590>)
 8012e66:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8012e68:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012e6c:	2b00      	cmp	r3, #0
 8012e6e:	d013      	beq.n	8012e98 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8012e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e72:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8012e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e76:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8012e78:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8012e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e7c:	3304      	adds	r3, #4
 8012e7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012e80:	8ad2      	ldrh	r2, [r2, #22]
 8012e82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012e84:	8b09      	ldrh	r1, [r1, #24]
 8012e86:	9102      	str	r1, [sp, #8]
 8012e88:	9201      	str	r2, [sp, #4]
 8012e8a:	9300      	str	r3, [sp, #0]
 8012e8c:	462b      	mov	r3, r5
 8012e8e:	4622      	mov	r2, r4
 8012e90:	4601      	mov	r1, r0
 8012e92:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012e94:	f004 f988 	bl	80171a8 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8012e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e9a:	691b      	ldr	r3, [r3, #16]
 8012e9c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8012e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ea0:	7d1b      	ldrb	r3, [r3, #20]
 8012ea2:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8012ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ea6:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8012ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012eaa:	68db      	ldr	r3, [r3, #12]
 8012eac:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8012eae:	6838      	ldr	r0, [r7, #0]
 8012eb0:	f7ff f9f2 	bl	8012298 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8012eb4:	4b30      	ldr	r3, [pc, #192]	; (8012f78 <tcp_slowtmr+0x5a4>)
 8012eb6:	2200      	movs	r2, #0
 8012eb8:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8012eba:	68fb      	ldr	r3, [r7, #12]
 8012ebc:	2b00      	cmp	r3, #0
 8012ebe:	d004      	beq.n	8012eca <tcp_slowtmr+0x4f6>
 8012ec0:	68fb      	ldr	r3, [r7, #12]
 8012ec2:	f06f 010c 	mvn.w	r1, #12
 8012ec6:	68b8      	ldr	r0, [r7, #8]
 8012ec8:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8012eca:	4b2b      	ldr	r3, [pc, #172]	; (8012f78 <tcp_slowtmr+0x5a4>)
 8012ecc:	781b      	ldrb	r3, [r3, #0]
 8012ece:	2b00      	cmp	r3, #0
 8012ed0:	d037      	beq.n	8012f42 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8012ed2:	e590      	b.n	80129f6 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8012ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ed6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8012ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012eda:	68db      	ldr	r3, [r3, #12]
 8012edc:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8012ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ee0:	7f1b      	ldrb	r3, [r3, #28]
 8012ee2:	3301      	adds	r3, #1
 8012ee4:	b2da      	uxtb	r2, r3
 8012ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ee8:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8012eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012eec:	7f1a      	ldrb	r2, [r3, #28]
 8012eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ef0:	7f5b      	ldrb	r3, [r3, #29]
 8012ef2:	429a      	cmp	r2, r3
 8012ef4:	d325      	bcc.n	8012f42 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8012ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ef8:	2200      	movs	r2, #0
 8012efa:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8012efc:	4b1e      	ldr	r3, [pc, #120]	; (8012f78 <tcp_slowtmr+0x5a4>)
 8012efe:	2200      	movs	r2, #0
 8012f00:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8012f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012f08:	2b00      	cmp	r3, #0
 8012f0a:	d00b      	beq.n	8012f24 <tcp_slowtmr+0x550>
 8012f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012f12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012f14:	6912      	ldr	r2, [r2, #16]
 8012f16:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012f18:	4610      	mov	r0, r2
 8012f1a:	4798      	blx	r3
 8012f1c:	4603      	mov	r3, r0
 8012f1e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8012f22:	e002      	b.n	8012f2a <tcp_slowtmr+0x556>
 8012f24:	2300      	movs	r3, #0
 8012f26:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8012f2a:	4b13      	ldr	r3, [pc, #76]	; (8012f78 <tcp_slowtmr+0x5a4>)
 8012f2c:	781b      	ldrb	r3, [r3, #0]
 8012f2e:	2b00      	cmp	r3, #0
 8012f30:	d000      	beq.n	8012f34 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 8012f32:	e560      	b.n	80129f6 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8012f34:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8012f38:	2b00      	cmp	r3, #0
 8012f3a:	d102      	bne.n	8012f42 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8012f3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012f3e:	f003 fb7f 	bl	8016640 <tcp_output>
  while (pcb != NULL) {
 8012f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f44:	2b00      	cmp	r3, #0
 8012f46:	f47f ad5c 	bne.w	8012a02 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8012f4a:	2300      	movs	r3, #0
 8012f4c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8012f4e:	4b0b      	ldr	r3, [pc, #44]	; (8012f7c <tcp_slowtmr+0x5a8>)
 8012f50:	681b      	ldr	r3, [r3, #0]
 8012f52:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8012f54:	e067      	b.n	8013026 <tcp_slowtmr+0x652>
 8012f56:	bf00      	nop
 8012f58:	2001b7dc 	.word	0x2001b7dc
 8012f5c:	10624dd3 	.word	0x10624dd3
 8012f60:	000124f8 	.word	0x000124f8
 8012f64:	2001b7d8 	.word	0x2001b7d8
 8012f68:	080202d4 	.word	0x080202d4
 8012f6c:	0802070c 	.word	0x0802070c
 8012f70:	08020318 	.word	0x08020318
 8012f74:	08020738 	.word	0x08020738
 8012f78:	2001b7d4 	.word	0x2001b7d4
 8012f7c:	2001b7e8 	.word	0x2001b7e8
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8012f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f82:	7d1b      	ldrb	r3, [r3, #20]
 8012f84:	2b0a      	cmp	r3, #10
 8012f86:	d006      	beq.n	8012f96 <tcp_slowtmr+0x5c2>
 8012f88:	4b2b      	ldr	r3, [pc, #172]	; (8013038 <tcp_slowtmr+0x664>)
 8012f8a:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8012f8e:	492b      	ldr	r1, [pc, #172]	; (801303c <tcp_slowtmr+0x668>)
 8012f90:	482b      	ldr	r0, [pc, #172]	; (8013040 <tcp_slowtmr+0x66c>)
 8012f92:	f00a fa75 	bl	801d480 <iprintf>
    pcb_remove = 0;
 8012f96:	2300      	movs	r3, #0
 8012f98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8012f9c:	4b29      	ldr	r3, [pc, #164]	; (8013044 <tcp_slowtmr+0x670>)
 8012f9e:	681a      	ldr	r2, [r3, #0]
 8012fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fa2:	6a1b      	ldr	r3, [r3, #32]
 8012fa4:	1ad3      	subs	r3, r2, r3
 8012fa6:	2bf0      	cmp	r3, #240	; 0xf0
 8012fa8:	d904      	bls.n	8012fb4 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8012faa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012fae:	3301      	adds	r3, #1
 8012fb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8012fb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012fb8:	2b00      	cmp	r3, #0
 8012fba:	d02f      	beq.n	801301c <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8012fbc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012fbe:	f000 fb2b 	bl	8013618 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8012fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fc4:	2b00      	cmp	r3, #0
 8012fc6:	d010      	beq.n	8012fea <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8012fc8:	4b1f      	ldr	r3, [pc, #124]	; (8013048 <tcp_slowtmr+0x674>)
 8012fca:	681b      	ldr	r3, [r3, #0]
 8012fcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012fce:	429a      	cmp	r2, r3
 8012fd0:	d106      	bne.n	8012fe0 <tcp_slowtmr+0x60c>
 8012fd2:	4b19      	ldr	r3, [pc, #100]	; (8013038 <tcp_slowtmr+0x664>)
 8012fd4:	f240 52af 	movw	r2, #1455	; 0x5af
 8012fd8:	491c      	ldr	r1, [pc, #112]	; (801304c <tcp_slowtmr+0x678>)
 8012fda:	4819      	ldr	r0, [pc, #100]	; (8013040 <tcp_slowtmr+0x66c>)
 8012fdc:	f00a fa50 	bl	801d480 <iprintf>
        prev->next = pcb->next;
 8012fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fe2:	68da      	ldr	r2, [r3, #12]
 8012fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fe6:	60da      	str	r2, [r3, #12]
 8012fe8:	e00f      	b.n	801300a <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8012fea:	4b17      	ldr	r3, [pc, #92]	; (8013048 <tcp_slowtmr+0x674>)
 8012fec:	681b      	ldr	r3, [r3, #0]
 8012fee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012ff0:	429a      	cmp	r2, r3
 8012ff2:	d006      	beq.n	8013002 <tcp_slowtmr+0x62e>
 8012ff4:	4b10      	ldr	r3, [pc, #64]	; (8013038 <tcp_slowtmr+0x664>)
 8012ff6:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8012ffa:	4915      	ldr	r1, [pc, #84]	; (8013050 <tcp_slowtmr+0x67c>)
 8012ffc:	4810      	ldr	r0, [pc, #64]	; (8013040 <tcp_slowtmr+0x66c>)
 8012ffe:	f00a fa3f 	bl	801d480 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8013002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013004:	68db      	ldr	r3, [r3, #12]
 8013006:	4a10      	ldr	r2, [pc, #64]	; (8013048 <tcp_slowtmr+0x674>)
 8013008:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 801300a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801300c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 801300e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013010:	68db      	ldr	r3, [r3, #12]
 8013012:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8013014:	69f8      	ldr	r0, [r7, #28]
 8013016:	f7ff f93f 	bl	8012298 <tcp_free>
 801301a:	e004      	b.n	8013026 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 801301c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801301e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8013020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013022:	68db      	ldr	r3, [r3, #12]
 8013024:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8013026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013028:	2b00      	cmp	r3, #0
 801302a:	d1a9      	bne.n	8012f80 <tcp_slowtmr+0x5ac>
    }
  }
}
 801302c:	bf00      	nop
 801302e:	bf00      	nop
 8013030:	3730      	adds	r7, #48	; 0x30
 8013032:	46bd      	mov	sp, r7
 8013034:	bdb0      	pop	{r4, r5, r7, pc}
 8013036:	bf00      	nop
 8013038:	080202d4 	.word	0x080202d4
 801303c:	08020764 	.word	0x08020764
 8013040:	08020318 	.word	0x08020318
 8013044:	2001b7dc 	.word	0x2001b7dc
 8013048:	2001b7e8 	.word	0x2001b7e8
 801304c:	08020794 	.word	0x08020794
 8013050:	080207bc 	.word	0x080207bc

08013054 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8013054:	b580      	push	{r7, lr}
 8013056:	b082      	sub	sp, #8
 8013058:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801305a:	4b2d      	ldr	r3, [pc, #180]	; (8013110 <tcp_fasttmr+0xbc>)
 801305c:	781b      	ldrb	r3, [r3, #0]
 801305e:	3301      	adds	r3, #1
 8013060:	b2da      	uxtb	r2, r3
 8013062:	4b2b      	ldr	r3, [pc, #172]	; (8013110 <tcp_fasttmr+0xbc>)
 8013064:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8013066:	4b2b      	ldr	r3, [pc, #172]	; (8013114 <tcp_fasttmr+0xc0>)
 8013068:	681b      	ldr	r3, [r3, #0]
 801306a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801306c:	e048      	b.n	8013100 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	7f9a      	ldrb	r2, [r3, #30]
 8013072:	4b27      	ldr	r3, [pc, #156]	; (8013110 <tcp_fasttmr+0xbc>)
 8013074:	781b      	ldrb	r3, [r3, #0]
 8013076:	429a      	cmp	r2, r3
 8013078:	d03f      	beq.n	80130fa <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 801307a:	4b25      	ldr	r3, [pc, #148]	; (8013110 <tcp_fasttmr+0xbc>)
 801307c:	781a      	ldrb	r2, [r3, #0]
 801307e:	687b      	ldr	r3, [r7, #4]
 8013080:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	8b5b      	ldrh	r3, [r3, #26]
 8013086:	f003 0301 	and.w	r3, r3, #1
 801308a:	2b00      	cmp	r3, #0
 801308c:	d010      	beq.n	80130b0 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	8b5b      	ldrh	r3, [r3, #26]
 8013092:	f043 0302 	orr.w	r3, r3, #2
 8013096:	b29a      	uxth	r2, r3
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 801309c:	6878      	ldr	r0, [r7, #4]
 801309e:	f003 facf 	bl	8016640 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	8b5b      	ldrh	r3, [r3, #26]
 80130a6:	f023 0303 	bic.w	r3, r3, #3
 80130aa:	b29a      	uxth	r2, r3
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	8b5b      	ldrh	r3, [r3, #26]
 80130b4:	f003 0308 	and.w	r3, r3, #8
 80130b8:	2b00      	cmp	r3, #0
 80130ba:	d009      	beq.n	80130d0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	8b5b      	ldrh	r3, [r3, #26]
 80130c0:	f023 0308 	bic.w	r3, r3, #8
 80130c4:	b29a      	uxth	r2, r3
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80130ca:	6878      	ldr	r0, [r7, #4]
 80130cc:	f7ff fa78 	bl	80125c0 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80130d0:	687b      	ldr	r3, [r7, #4]
 80130d2:	68db      	ldr	r3, [r3, #12]
 80130d4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80130da:	2b00      	cmp	r3, #0
 80130dc:	d00a      	beq.n	80130f4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80130de:	4b0e      	ldr	r3, [pc, #56]	; (8013118 <tcp_fasttmr+0xc4>)
 80130e0:	2200      	movs	r2, #0
 80130e2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80130e4:	6878      	ldr	r0, [r7, #4]
 80130e6:	f000 f819 	bl	801311c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80130ea:	4b0b      	ldr	r3, [pc, #44]	; (8013118 <tcp_fasttmr+0xc4>)
 80130ec:	781b      	ldrb	r3, [r3, #0]
 80130ee:	2b00      	cmp	r3, #0
 80130f0:	d000      	beq.n	80130f4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80130f2:	e7b8      	b.n	8013066 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80130f4:	683b      	ldr	r3, [r7, #0]
 80130f6:	607b      	str	r3, [r7, #4]
 80130f8:	e002      	b.n	8013100 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	68db      	ldr	r3, [r3, #12]
 80130fe:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	2b00      	cmp	r3, #0
 8013104:	d1b3      	bne.n	801306e <tcp_fasttmr+0x1a>
    }
  }
}
 8013106:	bf00      	nop
 8013108:	bf00      	nop
 801310a:	3708      	adds	r7, #8
 801310c:	46bd      	mov	sp, r7
 801310e:	bd80      	pop	{r7, pc}
 8013110:	200137ae 	.word	0x200137ae
 8013114:	2001b7d8 	.word	0x2001b7d8
 8013118:	2001b7d4 	.word	0x2001b7d4

0801311c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 801311c:	b590      	push	{r4, r7, lr}
 801311e:	b085      	sub	sp, #20
 8013120:	af00      	add	r7, sp, #0
 8013122:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8013124:	687b      	ldr	r3, [r7, #4]
 8013126:	2b00      	cmp	r3, #0
 8013128:	d109      	bne.n	801313e <tcp_process_refused_data+0x22>
 801312a:	4b37      	ldr	r3, [pc, #220]	; (8013208 <tcp_process_refused_data+0xec>)
 801312c:	f240 6209 	movw	r2, #1545	; 0x609
 8013130:	4936      	ldr	r1, [pc, #216]	; (801320c <tcp_process_refused_data+0xf0>)
 8013132:	4837      	ldr	r0, [pc, #220]	; (8013210 <tcp_process_refused_data+0xf4>)
 8013134:	f00a f9a4 	bl	801d480 <iprintf>
 8013138:	f06f 030f 	mvn.w	r3, #15
 801313c:	e060      	b.n	8013200 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 801313e:	687b      	ldr	r3, [r7, #4]
 8013140:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013142:	7b5b      	ldrb	r3, [r3, #13]
 8013144:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801314a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	2200      	movs	r2, #0
 8013150:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8013152:	687b      	ldr	r3, [r7, #4]
 8013154:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013158:	2b00      	cmp	r3, #0
 801315a:	d00b      	beq.n	8013174 <tcp_process_refused_data+0x58>
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8013162:	687b      	ldr	r3, [r7, #4]
 8013164:	6918      	ldr	r0, [r3, #16]
 8013166:	2300      	movs	r3, #0
 8013168:	68ba      	ldr	r2, [r7, #8]
 801316a:	6879      	ldr	r1, [r7, #4]
 801316c:	47a0      	blx	r4
 801316e:	4603      	mov	r3, r0
 8013170:	73fb      	strb	r3, [r7, #15]
 8013172:	e007      	b.n	8013184 <tcp_process_refused_data+0x68>
 8013174:	2300      	movs	r3, #0
 8013176:	68ba      	ldr	r2, [r7, #8]
 8013178:	6879      	ldr	r1, [r7, #4]
 801317a:	2000      	movs	r0, #0
 801317c:	f000 f8a4 	bl	80132c8 <tcp_recv_null>
 8013180:	4603      	mov	r3, r0
 8013182:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8013184:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013188:	2b00      	cmp	r3, #0
 801318a:	d12a      	bne.n	80131e2 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 801318c:	7bbb      	ldrb	r3, [r7, #14]
 801318e:	f003 0320 	and.w	r3, r3, #32
 8013192:	2b00      	cmp	r3, #0
 8013194:	d033      	beq.n	80131fe <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801319a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801319e:	d005      	beq.n	80131ac <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80131a4:	3301      	adds	r3, #1
 80131a6:	b29a      	uxth	r2, r3
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80131b2:	2b00      	cmp	r3, #0
 80131b4:	d00b      	beq.n	80131ce <tcp_process_refused_data+0xb2>
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	6918      	ldr	r0, [r3, #16]
 80131c0:	2300      	movs	r3, #0
 80131c2:	2200      	movs	r2, #0
 80131c4:	6879      	ldr	r1, [r7, #4]
 80131c6:	47a0      	blx	r4
 80131c8:	4603      	mov	r3, r0
 80131ca:	73fb      	strb	r3, [r7, #15]
 80131cc:	e001      	b.n	80131d2 <tcp_process_refused_data+0xb6>
 80131ce:	2300      	movs	r3, #0
 80131d0:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80131d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80131d6:	f113 0f0d 	cmn.w	r3, #13
 80131da:	d110      	bne.n	80131fe <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80131dc:	f06f 030c 	mvn.w	r3, #12
 80131e0:	e00e      	b.n	8013200 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80131e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80131e6:	f113 0f0d 	cmn.w	r3, #13
 80131ea:	d102      	bne.n	80131f2 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80131ec:	f06f 030c 	mvn.w	r3, #12
 80131f0:	e006      	b.n	8013200 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80131f2:	687b      	ldr	r3, [r7, #4]
 80131f4:	68ba      	ldr	r2, [r7, #8]
 80131f6:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 80131f8:	f06f 0304 	mvn.w	r3, #4
 80131fc:	e000      	b.n	8013200 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80131fe:	2300      	movs	r3, #0
}
 8013200:	4618      	mov	r0, r3
 8013202:	3714      	adds	r7, #20
 8013204:	46bd      	mov	sp, r7
 8013206:	bd90      	pop	{r4, r7, pc}
 8013208:	080202d4 	.word	0x080202d4
 801320c:	080207e4 	.word	0x080207e4
 8013210:	08020318 	.word	0x08020318

08013214 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8013214:	b580      	push	{r7, lr}
 8013216:	b084      	sub	sp, #16
 8013218:	af00      	add	r7, sp, #0
 801321a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 801321c:	e007      	b.n	801322e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	681b      	ldr	r3, [r3, #0]
 8013222:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8013224:	6878      	ldr	r0, [r7, #4]
 8013226:	f000 f80a 	bl	801323e <tcp_seg_free>
    seg = next;
 801322a:	68fb      	ldr	r3, [r7, #12]
 801322c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	2b00      	cmp	r3, #0
 8013232:	d1f4      	bne.n	801321e <tcp_segs_free+0xa>
  }
}
 8013234:	bf00      	nop
 8013236:	bf00      	nop
 8013238:	3710      	adds	r7, #16
 801323a:	46bd      	mov	sp, r7
 801323c:	bd80      	pop	{r7, pc}

0801323e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 801323e:	b580      	push	{r7, lr}
 8013240:	b082      	sub	sp, #8
 8013242:	af00      	add	r7, sp, #0
 8013244:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	2b00      	cmp	r3, #0
 801324a:	d00c      	beq.n	8013266 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	685b      	ldr	r3, [r3, #4]
 8013250:	2b00      	cmp	r3, #0
 8013252:	d004      	beq.n	801325e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8013254:	687b      	ldr	r3, [r7, #4]
 8013256:	685b      	ldr	r3, [r3, #4]
 8013258:	4618      	mov	r0, r3
 801325a:	f7fe fd61 	bl	8011d20 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 801325e:	6879      	ldr	r1, [r7, #4]
 8013260:	2003      	movs	r0, #3
 8013262:	f7fd fead 	bl	8010fc0 <memp_free>
  }
}
 8013266:	bf00      	nop
 8013268:	3708      	adds	r7, #8
 801326a:	46bd      	mov	sp, r7
 801326c:	bd80      	pop	{r7, pc}
	...

08013270 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8013270:	b580      	push	{r7, lr}
 8013272:	b084      	sub	sp, #16
 8013274:	af00      	add	r7, sp, #0
 8013276:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8013278:	687b      	ldr	r3, [r7, #4]
 801327a:	2b00      	cmp	r3, #0
 801327c:	d106      	bne.n	801328c <tcp_seg_copy+0x1c>
 801327e:	4b0f      	ldr	r3, [pc, #60]	; (80132bc <tcp_seg_copy+0x4c>)
 8013280:	f240 6282 	movw	r2, #1666	; 0x682
 8013284:	490e      	ldr	r1, [pc, #56]	; (80132c0 <tcp_seg_copy+0x50>)
 8013286:	480f      	ldr	r0, [pc, #60]	; (80132c4 <tcp_seg_copy+0x54>)
 8013288:	f00a f8fa 	bl	801d480 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 801328c:	2003      	movs	r0, #3
 801328e:	f7fd fe45 	bl	8010f1c <memp_malloc>
 8013292:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8013294:	68fb      	ldr	r3, [r7, #12]
 8013296:	2b00      	cmp	r3, #0
 8013298:	d101      	bne.n	801329e <tcp_seg_copy+0x2e>
    return NULL;
 801329a:	2300      	movs	r3, #0
 801329c:	e00a      	b.n	80132b4 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801329e:	2210      	movs	r2, #16
 80132a0:	6879      	ldr	r1, [r7, #4]
 80132a2:	68f8      	ldr	r0, [r7, #12]
 80132a4:	f009 fa32 	bl	801c70c <memcpy>
  pbuf_ref(cseg->p);
 80132a8:	68fb      	ldr	r3, [r7, #12]
 80132aa:	685b      	ldr	r3, [r3, #4]
 80132ac:	4618      	mov	r0, r3
 80132ae:	f7fe fddd 	bl	8011e6c <pbuf_ref>
  return cseg;
 80132b2:	68fb      	ldr	r3, [r7, #12]
}
 80132b4:	4618      	mov	r0, r3
 80132b6:	3710      	adds	r7, #16
 80132b8:	46bd      	mov	sp, r7
 80132ba:	bd80      	pop	{r7, pc}
 80132bc:	080202d4 	.word	0x080202d4
 80132c0:	08020828 	.word	0x08020828
 80132c4:	08020318 	.word	0x08020318

080132c8 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80132c8:	b580      	push	{r7, lr}
 80132ca:	b084      	sub	sp, #16
 80132cc:	af00      	add	r7, sp, #0
 80132ce:	60f8      	str	r0, [r7, #12]
 80132d0:	60b9      	str	r1, [r7, #8]
 80132d2:	607a      	str	r2, [r7, #4]
 80132d4:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80132d6:	68bb      	ldr	r3, [r7, #8]
 80132d8:	2b00      	cmp	r3, #0
 80132da:	d109      	bne.n	80132f0 <tcp_recv_null+0x28>
 80132dc:	4b12      	ldr	r3, [pc, #72]	; (8013328 <tcp_recv_null+0x60>)
 80132de:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80132e2:	4912      	ldr	r1, [pc, #72]	; (801332c <tcp_recv_null+0x64>)
 80132e4:	4812      	ldr	r0, [pc, #72]	; (8013330 <tcp_recv_null+0x68>)
 80132e6:	f00a f8cb 	bl	801d480 <iprintf>
 80132ea:	f06f 030f 	mvn.w	r3, #15
 80132ee:	e016      	b.n	801331e <tcp_recv_null+0x56>

  if (p != NULL) {
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	2b00      	cmp	r3, #0
 80132f4:	d009      	beq.n	801330a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	891b      	ldrh	r3, [r3, #8]
 80132fa:	4619      	mov	r1, r3
 80132fc:	68b8      	ldr	r0, [r7, #8]
 80132fe:	f7ff fb19 	bl	8012934 <tcp_recved>
    pbuf_free(p);
 8013302:	6878      	ldr	r0, [r7, #4]
 8013304:	f7fe fd0c 	bl	8011d20 <pbuf_free>
 8013308:	e008      	b.n	801331c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 801330a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801330e:	2b00      	cmp	r3, #0
 8013310:	d104      	bne.n	801331c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8013312:	68b8      	ldr	r0, [r7, #8]
 8013314:	f7ff f9be 	bl	8012694 <tcp_close>
 8013318:	4603      	mov	r3, r0
 801331a:	e000      	b.n	801331e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 801331c:	2300      	movs	r3, #0
}
 801331e:	4618      	mov	r0, r3
 8013320:	3710      	adds	r7, #16
 8013322:	46bd      	mov	sp, r7
 8013324:	bd80      	pop	{r7, pc}
 8013326:	bf00      	nop
 8013328:	080202d4 	.word	0x080202d4
 801332c:	08020844 	.word	0x08020844
 8013330:	08020318 	.word	0x08020318

08013334 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8013334:	b580      	push	{r7, lr}
 8013336:	b086      	sub	sp, #24
 8013338:	af00      	add	r7, sp, #0
 801333a:	4603      	mov	r3, r0
 801333c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801333e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013342:	2b00      	cmp	r3, #0
 8013344:	db01      	blt.n	801334a <tcp_kill_prio+0x16>
 8013346:	79fb      	ldrb	r3, [r7, #7]
 8013348:	e000      	b.n	801334c <tcp_kill_prio+0x18>
 801334a:	237f      	movs	r3, #127	; 0x7f
 801334c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 801334e:	7afb      	ldrb	r3, [r7, #11]
 8013350:	2b00      	cmp	r3, #0
 8013352:	d034      	beq.n	80133be <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8013354:	7afb      	ldrb	r3, [r7, #11]
 8013356:	3b01      	subs	r3, #1
 8013358:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 801335a:	2300      	movs	r3, #0
 801335c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801335e:	2300      	movs	r3, #0
 8013360:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013362:	4b19      	ldr	r3, [pc, #100]	; (80133c8 <tcp_kill_prio+0x94>)
 8013364:	681b      	ldr	r3, [r3, #0]
 8013366:	617b      	str	r3, [r7, #20]
 8013368:	e01f      	b.n	80133aa <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 801336a:	697b      	ldr	r3, [r7, #20]
 801336c:	7d5b      	ldrb	r3, [r3, #21]
 801336e:	7afa      	ldrb	r2, [r7, #11]
 8013370:	429a      	cmp	r2, r3
 8013372:	d80c      	bhi.n	801338e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8013374:	697b      	ldr	r3, [r7, #20]
 8013376:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8013378:	7afa      	ldrb	r2, [r7, #11]
 801337a:	429a      	cmp	r2, r3
 801337c:	d112      	bne.n	80133a4 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801337e:	4b13      	ldr	r3, [pc, #76]	; (80133cc <tcp_kill_prio+0x98>)
 8013380:	681a      	ldr	r2, [r3, #0]
 8013382:	697b      	ldr	r3, [r7, #20]
 8013384:	6a1b      	ldr	r3, [r3, #32]
 8013386:	1ad3      	subs	r3, r2, r3
 8013388:	68fa      	ldr	r2, [r7, #12]
 801338a:	429a      	cmp	r2, r3
 801338c:	d80a      	bhi.n	80133a4 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 801338e:	4b0f      	ldr	r3, [pc, #60]	; (80133cc <tcp_kill_prio+0x98>)
 8013390:	681a      	ldr	r2, [r3, #0]
 8013392:	697b      	ldr	r3, [r7, #20]
 8013394:	6a1b      	ldr	r3, [r3, #32]
 8013396:	1ad3      	subs	r3, r2, r3
 8013398:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 801339a:	697b      	ldr	r3, [r7, #20]
 801339c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 801339e:	697b      	ldr	r3, [r7, #20]
 80133a0:	7d5b      	ldrb	r3, [r3, #21]
 80133a2:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80133a4:	697b      	ldr	r3, [r7, #20]
 80133a6:	68db      	ldr	r3, [r3, #12]
 80133a8:	617b      	str	r3, [r7, #20]
 80133aa:	697b      	ldr	r3, [r7, #20]
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	d1dc      	bne.n	801336a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80133b0:	693b      	ldr	r3, [r7, #16]
 80133b2:	2b00      	cmp	r3, #0
 80133b4:	d004      	beq.n	80133c0 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80133b6:	6938      	ldr	r0, [r7, #16]
 80133b8:	f7ff fa56 	bl	8012868 <tcp_abort>
 80133bc:	e000      	b.n	80133c0 <tcp_kill_prio+0x8c>
    return;
 80133be:	bf00      	nop
  }
}
 80133c0:	3718      	adds	r7, #24
 80133c2:	46bd      	mov	sp, r7
 80133c4:	bd80      	pop	{r7, pc}
 80133c6:	bf00      	nop
 80133c8:	2001b7d8 	.word	0x2001b7d8
 80133cc:	2001b7dc 	.word	0x2001b7dc

080133d0 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80133d0:	b580      	push	{r7, lr}
 80133d2:	b086      	sub	sp, #24
 80133d4:	af00      	add	r7, sp, #0
 80133d6:	4603      	mov	r3, r0
 80133d8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80133da:	79fb      	ldrb	r3, [r7, #7]
 80133dc:	2b08      	cmp	r3, #8
 80133de:	d009      	beq.n	80133f4 <tcp_kill_state+0x24>
 80133e0:	79fb      	ldrb	r3, [r7, #7]
 80133e2:	2b09      	cmp	r3, #9
 80133e4:	d006      	beq.n	80133f4 <tcp_kill_state+0x24>
 80133e6:	4b1a      	ldr	r3, [pc, #104]	; (8013450 <tcp_kill_state+0x80>)
 80133e8:	f240 62dd 	movw	r2, #1757	; 0x6dd
 80133ec:	4919      	ldr	r1, [pc, #100]	; (8013454 <tcp_kill_state+0x84>)
 80133ee:	481a      	ldr	r0, [pc, #104]	; (8013458 <tcp_kill_state+0x88>)
 80133f0:	f00a f846 	bl	801d480 <iprintf>

  inactivity = 0;
 80133f4:	2300      	movs	r3, #0
 80133f6:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80133f8:	2300      	movs	r3, #0
 80133fa:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80133fc:	4b17      	ldr	r3, [pc, #92]	; (801345c <tcp_kill_state+0x8c>)
 80133fe:	681b      	ldr	r3, [r3, #0]
 8013400:	617b      	str	r3, [r7, #20]
 8013402:	e017      	b.n	8013434 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8013404:	697b      	ldr	r3, [r7, #20]
 8013406:	7d1b      	ldrb	r3, [r3, #20]
 8013408:	79fa      	ldrb	r2, [r7, #7]
 801340a:	429a      	cmp	r2, r3
 801340c:	d10f      	bne.n	801342e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801340e:	4b14      	ldr	r3, [pc, #80]	; (8013460 <tcp_kill_state+0x90>)
 8013410:	681a      	ldr	r2, [r3, #0]
 8013412:	697b      	ldr	r3, [r7, #20]
 8013414:	6a1b      	ldr	r3, [r3, #32]
 8013416:	1ad3      	subs	r3, r2, r3
 8013418:	68fa      	ldr	r2, [r7, #12]
 801341a:	429a      	cmp	r2, r3
 801341c:	d807      	bhi.n	801342e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 801341e:	4b10      	ldr	r3, [pc, #64]	; (8013460 <tcp_kill_state+0x90>)
 8013420:	681a      	ldr	r2, [r3, #0]
 8013422:	697b      	ldr	r3, [r7, #20]
 8013424:	6a1b      	ldr	r3, [r3, #32]
 8013426:	1ad3      	subs	r3, r2, r3
 8013428:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801342a:	697b      	ldr	r3, [r7, #20]
 801342c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801342e:	697b      	ldr	r3, [r7, #20]
 8013430:	68db      	ldr	r3, [r3, #12]
 8013432:	617b      	str	r3, [r7, #20]
 8013434:	697b      	ldr	r3, [r7, #20]
 8013436:	2b00      	cmp	r3, #0
 8013438:	d1e4      	bne.n	8013404 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801343a:	693b      	ldr	r3, [r7, #16]
 801343c:	2b00      	cmp	r3, #0
 801343e:	d003      	beq.n	8013448 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8013440:	2100      	movs	r1, #0
 8013442:	6938      	ldr	r0, [r7, #16]
 8013444:	f7ff f952 	bl	80126ec <tcp_abandon>
  }
}
 8013448:	bf00      	nop
 801344a:	3718      	adds	r7, #24
 801344c:	46bd      	mov	sp, r7
 801344e:	bd80      	pop	{r7, pc}
 8013450:	080202d4 	.word	0x080202d4
 8013454:	08020860 	.word	0x08020860
 8013458:	08020318 	.word	0x08020318
 801345c:	2001b7d8 	.word	0x2001b7d8
 8013460:	2001b7dc 	.word	0x2001b7dc

08013464 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8013464:	b580      	push	{r7, lr}
 8013466:	b084      	sub	sp, #16
 8013468:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801346a:	2300      	movs	r3, #0
 801346c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 801346e:	2300      	movs	r3, #0
 8013470:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8013472:	4b12      	ldr	r3, [pc, #72]	; (80134bc <tcp_kill_timewait+0x58>)
 8013474:	681b      	ldr	r3, [r3, #0]
 8013476:	60fb      	str	r3, [r7, #12]
 8013478:	e012      	b.n	80134a0 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801347a:	4b11      	ldr	r3, [pc, #68]	; (80134c0 <tcp_kill_timewait+0x5c>)
 801347c:	681a      	ldr	r2, [r3, #0]
 801347e:	68fb      	ldr	r3, [r7, #12]
 8013480:	6a1b      	ldr	r3, [r3, #32]
 8013482:	1ad3      	subs	r3, r2, r3
 8013484:	687a      	ldr	r2, [r7, #4]
 8013486:	429a      	cmp	r2, r3
 8013488:	d807      	bhi.n	801349a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801348a:	4b0d      	ldr	r3, [pc, #52]	; (80134c0 <tcp_kill_timewait+0x5c>)
 801348c:	681a      	ldr	r2, [r3, #0]
 801348e:	68fb      	ldr	r3, [r7, #12]
 8013490:	6a1b      	ldr	r3, [r3, #32]
 8013492:	1ad3      	subs	r3, r2, r3
 8013494:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8013496:	68fb      	ldr	r3, [r7, #12]
 8013498:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801349a:	68fb      	ldr	r3, [r7, #12]
 801349c:	68db      	ldr	r3, [r3, #12]
 801349e:	60fb      	str	r3, [r7, #12]
 80134a0:	68fb      	ldr	r3, [r7, #12]
 80134a2:	2b00      	cmp	r3, #0
 80134a4:	d1e9      	bne.n	801347a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80134a6:	68bb      	ldr	r3, [r7, #8]
 80134a8:	2b00      	cmp	r3, #0
 80134aa:	d002      	beq.n	80134b2 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80134ac:	68b8      	ldr	r0, [r7, #8]
 80134ae:	f7ff f9db 	bl	8012868 <tcp_abort>
  }
}
 80134b2:	bf00      	nop
 80134b4:	3710      	adds	r7, #16
 80134b6:	46bd      	mov	sp, r7
 80134b8:	bd80      	pop	{r7, pc}
 80134ba:	bf00      	nop
 80134bc:	2001b7e8 	.word	0x2001b7e8
 80134c0:	2001b7dc 	.word	0x2001b7dc

080134c4 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80134c4:	b580      	push	{r7, lr}
 80134c6:	b082      	sub	sp, #8
 80134c8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80134ca:	4b10      	ldr	r3, [pc, #64]	; (801350c <tcp_handle_closepend+0x48>)
 80134cc:	681b      	ldr	r3, [r3, #0]
 80134ce:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80134d0:	e014      	b.n	80134fc <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	68db      	ldr	r3, [r3, #12]
 80134d6:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	8b5b      	ldrh	r3, [r3, #26]
 80134dc:	f003 0308 	and.w	r3, r3, #8
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	d009      	beq.n	80134f8 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	8b5b      	ldrh	r3, [r3, #26]
 80134e8:	f023 0308 	bic.w	r3, r3, #8
 80134ec:	b29a      	uxth	r2, r3
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80134f2:	6878      	ldr	r0, [r7, #4]
 80134f4:	f7ff f864 	bl	80125c0 <tcp_close_shutdown_fin>
    }
    pcb = next;
 80134f8:	683b      	ldr	r3, [r7, #0]
 80134fa:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80134fc:	687b      	ldr	r3, [r7, #4]
 80134fe:	2b00      	cmp	r3, #0
 8013500:	d1e7      	bne.n	80134d2 <tcp_handle_closepend+0xe>
  }
}
 8013502:	bf00      	nop
 8013504:	bf00      	nop
 8013506:	3708      	adds	r7, #8
 8013508:	46bd      	mov	sp, r7
 801350a:	bd80      	pop	{r7, pc}
 801350c:	2001b7d8 	.word	0x2001b7d8

08013510 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8013510:	b580      	push	{r7, lr}
 8013512:	b084      	sub	sp, #16
 8013514:	af00      	add	r7, sp, #0
 8013516:	4603      	mov	r3, r0
 8013518:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801351a:	2001      	movs	r0, #1
 801351c:	f7fd fcfe 	bl	8010f1c <memp_malloc>
 8013520:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8013522:	68fb      	ldr	r3, [r7, #12]
 8013524:	2b00      	cmp	r3, #0
 8013526:	d126      	bne.n	8013576 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8013528:	f7ff ffcc 	bl	80134c4 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 801352c:	f7ff ff9a 	bl	8013464 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013530:	2001      	movs	r0, #1
 8013532:	f7fd fcf3 	bl	8010f1c <memp_malloc>
 8013536:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8013538:	68fb      	ldr	r3, [r7, #12]
 801353a:	2b00      	cmp	r3, #0
 801353c:	d11b      	bne.n	8013576 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 801353e:	2009      	movs	r0, #9
 8013540:	f7ff ff46 	bl	80133d0 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013544:	2001      	movs	r0, #1
 8013546:	f7fd fce9 	bl	8010f1c <memp_malloc>
 801354a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 801354c:	68fb      	ldr	r3, [r7, #12]
 801354e:	2b00      	cmp	r3, #0
 8013550:	d111      	bne.n	8013576 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8013552:	2008      	movs	r0, #8
 8013554:	f7ff ff3c 	bl	80133d0 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013558:	2001      	movs	r0, #1
 801355a:	f7fd fcdf 	bl	8010f1c <memp_malloc>
 801355e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8013560:	68fb      	ldr	r3, [r7, #12]
 8013562:	2b00      	cmp	r3, #0
 8013564:	d107      	bne.n	8013576 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8013566:	79fb      	ldrb	r3, [r7, #7]
 8013568:	4618      	mov	r0, r3
 801356a:	f7ff fee3 	bl	8013334 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801356e:	2001      	movs	r0, #1
 8013570:	f7fd fcd4 	bl	8010f1c <memp_malloc>
 8013574:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8013576:	68fb      	ldr	r3, [r7, #12]
 8013578:	2b00      	cmp	r3, #0
 801357a:	d03f      	beq.n	80135fc <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801357c:	229c      	movs	r2, #156	; 0x9c
 801357e:	2100      	movs	r1, #0
 8013580:	68f8      	ldr	r0, [r7, #12]
 8013582:	f009 f8d1 	bl	801c728 <memset>
    pcb->prio = prio;
 8013586:	68fb      	ldr	r3, [r7, #12]
 8013588:	79fa      	ldrb	r2, [r7, #7]
 801358a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 801358c:	68fb      	ldr	r3, [r7, #12]
 801358e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8013592:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8013596:	68fb      	ldr	r3, [r7, #12]
 8013598:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801359c:	855a      	strh	r2, [r3, #42]	; 0x2a
 801359e:	68fb      	ldr	r3, [r7, #12]
 80135a0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80135a2:	68fb      	ldr	r3, [r7, #12]
 80135a4:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80135a6:	68fb      	ldr	r3, [r7, #12]
 80135a8:	22ff      	movs	r2, #255	; 0xff
 80135aa:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80135ac:	68fb      	ldr	r3, [r7, #12]
 80135ae:	f44f 7206 	mov.w	r2, #536	; 0x218
 80135b2:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80135b4:	68fb      	ldr	r3, [r7, #12]
 80135b6:	2206      	movs	r2, #6
 80135b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80135bc:	68fb      	ldr	r3, [r7, #12]
 80135be:	2206      	movs	r2, #6
 80135c0:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80135c2:	68fb      	ldr	r3, [r7, #12]
 80135c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80135c8:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80135ca:	68fb      	ldr	r3, [r7, #12]
 80135cc:	2201      	movs	r2, #1
 80135ce:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80135d2:	4b0d      	ldr	r3, [pc, #52]	; (8013608 <tcp_alloc+0xf8>)
 80135d4:	681a      	ldr	r2, [r3, #0]
 80135d6:	68fb      	ldr	r3, [r7, #12]
 80135d8:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80135da:	4b0c      	ldr	r3, [pc, #48]	; (801360c <tcp_alloc+0xfc>)
 80135dc:	781a      	ldrb	r2, [r3, #0]
 80135de:	68fb      	ldr	r3, [r7, #12]
 80135e0:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80135e2:	68fb      	ldr	r3, [r7, #12]
 80135e4:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80135e8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80135ec:	68fb      	ldr	r3, [r7, #12]
 80135ee:	4a08      	ldr	r2, [pc, #32]	; (8013610 <tcp_alloc+0x100>)
 80135f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80135f4:	68fb      	ldr	r3, [r7, #12]
 80135f6:	4a07      	ldr	r2, [pc, #28]	; (8013614 <tcp_alloc+0x104>)
 80135f8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80135fc:	68fb      	ldr	r3, [r7, #12]
}
 80135fe:	4618      	mov	r0, r3
 8013600:	3710      	adds	r7, #16
 8013602:	46bd      	mov	sp, r7
 8013604:	bd80      	pop	{r7, pc}
 8013606:	bf00      	nop
 8013608:	2001b7dc 	.word	0x2001b7dc
 801360c:	200137ae 	.word	0x200137ae
 8013610:	080132c9 	.word	0x080132c9
 8013614:	006ddd00 	.word	0x006ddd00

08013618 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8013618:	b580      	push	{r7, lr}
 801361a:	b082      	sub	sp, #8
 801361c:	af00      	add	r7, sp, #0
 801361e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8013620:	687b      	ldr	r3, [r7, #4]
 8013622:	2b00      	cmp	r3, #0
 8013624:	d107      	bne.n	8013636 <tcp_pcb_purge+0x1e>
 8013626:	4b21      	ldr	r3, [pc, #132]	; (80136ac <tcp_pcb_purge+0x94>)
 8013628:	f640 0251 	movw	r2, #2129	; 0x851
 801362c:	4920      	ldr	r1, [pc, #128]	; (80136b0 <tcp_pcb_purge+0x98>)
 801362e:	4821      	ldr	r0, [pc, #132]	; (80136b4 <tcp_pcb_purge+0x9c>)
 8013630:	f009 ff26 	bl	801d480 <iprintf>
 8013634:	e037      	b.n	80136a6 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8013636:	687b      	ldr	r3, [r7, #4]
 8013638:	7d1b      	ldrb	r3, [r3, #20]
 801363a:	2b00      	cmp	r3, #0
 801363c:	d033      	beq.n	80136a6 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8013642:	2b0a      	cmp	r3, #10
 8013644:	d02f      	beq.n	80136a6 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8013646:	687b      	ldr	r3, [r7, #4]
 8013648:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 801364a:	2b01      	cmp	r3, #1
 801364c:	d02b      	beq.n	80136a6 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013652:	2b00      	cmp	r3, #0
 8013654:	d007      	beq.n	8013666 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801365a:	4618      	mov	r0, r3
 801365c:	f7fe fb60 	bl	8011d20 <pbuf_free>
      pcb->refused_data = NULL;
 8013660:	687b      	ldr	r3, [r7, #4]
 8013662:	2200      	movs	r2, #0
 8013664:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8013666:	687b      	ldr	r3, [r7, #4]
 8013668:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801366a:	2b00      	cmp	r3, #0
 801366c:	d002      	beq.n	8013674 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 801366e:	6878      	ldr	r0, [r7, #4]
 8013670:	f000 f986 	bl	8013980 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8013674:	687b      	ldr	r3, [r7, #4]
 8013676:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801367a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013680:	4618      	mov	r0, r3
 8013682:	f7ff fdc7 	bl	8013214 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8013686:	687b      	ldr	r3, [r7, #4]
 8013688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801368a:	4618      	mov	r0, r3
 801368c:	f7ff fdc2 	bl	8013214 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	2200      	movs	r2, #0
 8013694:	66da      	str	r2, [r3, #108]	; 0x6c
 8013696:	687b      	ldr	r3, [r7, #4]
 8013698:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 801369e:	687b      	ldr	r3, [r7, #4]
 80136a0:	2200      	movs	r2, #0
 80136a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80136a6:	3708      	adds	r7, #8
 80136a8:	46bd      	mov	sp, r7
 80136aa:	bd80      	pop	{r7, pc}
 80136ac:	080202d4 	.word	0x080202d4
 80136b0:	08020920 	.word	0x08020920
 80136b4:	08020318 	.word	0x08020318

080136b8 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80136b8:	b580      	push	{r7, lr}
 80136ba:	b084      	sub	sp, #16
 80136bc:	af00      	add	r7, sp, #0
 80136be:	6078      	str	r0, [r7, #4]
 80136c0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80136c2:	683b      	ldr	r3, [r7, #0]
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	d106      	bne.n	80136d6 <tcp_pcb_remove+0x1e>
 80136c8:	4b3e      	ldr	r3, [pc, #248]	; (80137c4 <tcp_pcb_remove+0x10c>)
 80136ca:	f640 0283 	movw	r2, #2179	; 0x883
 80136ce:	493e      	ldr	r1, [pc, #248]	; (80137c8 <tcp_pcb_remove+0x110>)
 80136d0:	483e      	ldr	r0, [pc, #248]	; (80137cc <tcp_pcb_remove+0x114>)
 80136d2:	f009 fed5 	bl	801d480 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	2b00      	cmp	r3, #0
 80136da:	d106      	bne.n	80136ea <tcp_pcb_remove+0x32>
 80136dc:	4b39      	ldr	r3, [pc, #228]	; (80137c4 <tcp_pcb_remove+0x10c>)
 80136de:	f640 0284 	movw	r2, #2180	; 0x884
 80136e2:	493b      	ldr	r1, [pc, #236]	; (80137d0 <tcp_pcb_remove+0x118>)
 80136e4:	4839      	ldr	r0, [pc, #228]	; (80137cc <tcp_pcb_remove+0x114>)
 80136e6:	f009 fecb 	bl	801d480 <iprintf>

  TCP_RMV(pcblist, pcb);
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	681b      	ldr	r3, [r3, #0]
 80136ee:	683a      	ldr	r2, [r7, #0]
 80136f0:	429a      	cmp	r2, r3
 80136f2:	d105      	bne.n	8013700 <tcp_pcb_remove+0x48>
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	681b      	ldr	r3, [r3, #0]
 80136f8:	68da      	ldr	r2, [r3, #12]
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	601a      	str	r2, [r3, #0]
 80136fe:	e013      	b.n	8013728 <tcp_pcb_remove+0x70>
 8013700:	687b      	ldr	r3, [r7, #4]
 8013702:	681b      	ldr	r3, [r3, #0]
 8013704:	60fb      	str	r3, [r7, #12]
 8013706:	e00c      	b.n	8013722 <tcp_pcb_remove+0x6a>
 8013708:	68fb      	ldr	r3, [r7, #12]
 801370a:	68db      	ldr	r3, [r3, #12]
 801370c:	683a      	ldr	r2, [r7, #0]
 801370e:	429a      	cmp	r2, r3
 8013710:	d104      	bne.n	801371c <tcp_pcb_remove+0x64>
 8013712:	683b      	ldr	r3, [r7, #0]
 8013714:	68da      	ldr	r2, [r3, #12]
 8013716:	68fb      	ldr	r3, [r7, #12]
 8013718:	60da      	str	r2, [r3, #12]
 801371a:	e005      	b.n	8013728 <tcp_pcb_remove+0x70>
 801371c:	68fb      	ldr	r3, [r7, #12]
 801371e:	68db      	ldr	r3, [r3, #12]
 8013720:	60fb      	str	r3, [r7, #12]
 8013722:	68fb      	ldr	r3, [r7, #12]
 8013724:	2b00      	cmp	r3, #0
 8013726:	d1ef      	bne.n	8013708 <tcp_pcb_remove+0x50>
 8013728:	683b      	ldr	r3, [r7, #0]
 801372a:	2200      	movs	r2, #0
 801372c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 801372e:	6838      	ldr	r0, [r7, #0]
 8013730:	f7ff ff72 	bl	8013618 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8013734:	683b      	ldr	r3, [r7, #0]
 8013736:	7d1b      	ldrb	r3, [r3, #20]
 8013738:	2b0a      	cmp	r3, #10
 801373a:	d013      	beq.n	8013764 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 801373c:	683b      	ldr	r3, [r7, #0]
 801373e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8013740:	2b01      	cmp	r3, #1
 8013742:	d00f      	beq.n	8013764 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8013744:	683b      	ldr	r3, [r7, #0]
 8013746:	8b5b      	ldrh	r3, [r3, #26]
 8013748:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 801374c:	2b00      	cmp	r3, #0
 801374e:	d009      	beq.n	8013764 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8013750:	683b      	ldr	r3, [r7, #0]
 8013752:	8b5b      	ldrh	r3, [r3, #26]
 8013754:	f043 0302 	orr.w	r3, r3, #2
 8013758:	b29a      	uxth	r2, r3
 801375a:	683b      	ldr	r3, [r7, #0]
 801375c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801375e:	6838      	ldr	r0, [r7, #0]
 8013760:	f002 ff6e 	bl	8016640 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8013764:	683b      	ldr	r3, [r7, #0]
 8013766:	7d1b      	ldrb	r3, [r3, #20]
 8013768:	2b01      	cmp	r3, #1
 801376a:	d020      	beq.n	80137ae <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 801376c:	683b      	ldr	r3, [r7, #0]
 801376e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013770:	2b00      	cmp	r3, #0
 8013772:	d006      	beq.n	8013782 <tcp_pcb_remove+0xca>
 8013774:	4b13      	ldr	r3, [pc, #76]	; (80137c4 <tcp_pcb_remove+0x10c>)
 8013776:	f640 0293 	movw	r2, #2195	; 0x893
 801377a:	4916      	ldr	r1, [pc, #88]	; (80137d4 <tcp_pcb_remove+0x11c>)
 801377c:	4813      	ldr	r0, [pc, #76]	; (80137cc <tcp_pcb_remove+0x114>)
 801377e:	f009 fe7f 	bl	801d480 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8013782:	683b      	ldr	r3, [r7, #0]
 8013784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013786:	2b00      	cmp	r3, #0
 8013788:	d006      	beq.n	8013798 <tcp_pcb_remove+0xe0>
 801378a:	4b0e      	ldr	r3, [pc, #56]	; (80137c4 <tcp_pcb_remove+0x10c>)
 801378c:	f640 0294 	movw	r2, #2196	; 0x894
 8013790:	4911      	ldr	r1, [pc, #68]	; (80137d8 <tcp_pcb_remove+0x120>)
 8013792:	480e      	ldr	r0, [pc, #56]	; (80137cc <tcp_pcb_remove+0x114>)
 8013794:	f009 fe74 	bl	801d480 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8013798:	683b      	ldr	r3, [r7, #0]
 801379a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801379c:	2b00      	cmp	r3, #0
 801379e:	d006      	beq.n	80137ae <tcp_pcb_remove+0xf6>
 80137a0:	4b08      	ldr	r3, [pc, #32]	; (80137c4 <tcp_pcb_remove+0x10c>)
 80137a2:	f640 0296 	movw	r2, #2198	; 0x896
 80137a6:	490d      	ldr	r1, [pc, #52]	; (80137dc <tcp_pcb_remove+0x124>)
 80137a8:	4808      	ldr	r0, [pc, #32]	; (80137cc <tcp_pcb_remove+0x114>)
 80137aa:	f009 fe69 	bl	801d480 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80137ae:	683b      	ldr	r3, [r7, #0]
 80137b0:	2200      	movs	r2, #0
 80137b2:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80137b4:	683b      	ldr	r3, [r7, #0]
 80137b6:	2200      	movs	r2, #0
 80137b8:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80137ba:	bf00      	nop
 80137bc:	3710      	adds	r7, #16
 80137be:	46bd      	mov	sp, r7
 80137c0:	bd80      	pop	{r7, pc}
 80137c2:	bf00      	nop
 80137c4:	080202d4 	.word	0x080202d4
 80137c8:	0802093c 	.word	0x0802093c
 80137cc:	08020318 	.word	0x08020318
 80137d0:	08020958 	.word	0x08020958
 80137d4:	08020978 	.word	0x08020978
 80137d8:	08020990 	.word	0x08020990
 80137dc:	080209ac 	.word	0x080209ac

080137e0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80137e0:	b580      	push	{r7, lr}
 80137e2:	b082      	sub	sp, #8
 80137e4:	af00      	add	r7, sp, #0
 80137e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	2b00      	cmp	r3, #0
 80137ec:	d106      	bne.n	80137fc <tcp_next_iss+0x1c>
 80137ee:	4b0a      	ldr	r3, [pc, #40]	; (8013818 <tcp_next_iss+0x38>)
 80137f0:	f640 02af 	movw	r2, #2223	; 0x8af
 80137f4:	4909      	ldr	r1, [pc, #36]	; (801381c <tcp_next_iss+0x3c>)
 80137f6:	480a      	ldr	r0, [pc, #40]	; (8013820 <tcp_next_iss+0x40>)
 80137f8:	f009 fe42 	bl	801d480 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80137fc:	4b09      	ldr	r3, [pc, #36]	; (8013824 <tcp_next_iss+0x44>)
 80137fe:	681a      	ldr	r2, [r3, #0]
 8013800:	4b09      	ldr	r3, [pc, #36]	; (8013828 <tcp_next_iss+0x48>)
 8013802:	681b      	ldr	r3, [r3, #0]
 8013804:	4413      	add	r3, r2
 8013806:	4a07      	ldr	r2, [pc, #28]	; (8013824 <tcp_next_iss+0x44>)
 8013808:	6013      	str	r3, [r2, #0]
  return iss;
 801380a:	4b06      	ldr	r3, [pc, #24]	; (8013824 <tcp_next_iss+0x44>)
 801380c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801380e:	4618      	mov	r0, r3
 8013810:	3708      	adds	r7, #8
 8013812:	46bd      	mov	sp, r7
 8013814:	bd80      	pop	{r7, pc}
 8013816:	bf00      	nop
 8013818:	080202d4 	.word	0x080202d4
 801381c:	080209c4 	.word	0x080209c4
 8013820:	08020318 	.word	0x08020318
 8013824:	10000018 	.word	0x10000018
 8013828:	2001b7dc 	.word	0x2001b7dc

0801382c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 801382c:	b580      	push	{r7, lr}
 801382e:	b086      	sub	sp, #24
 8013830:	af00      	add	r7, sp, #0
 8013832:	4603      	mov	r3, r0
 8013834:	60b9      	str	r1, [r7, #8]
 8013836:	607a      	str	r2, [r7, #4]
 8013838:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	2b00      	cmp	r3, #0
 801383e:	d106      	bne.n	801384e <tcp_eff_send_mss_netif+0x22>
 8013840:	4b14      	ldr	r3, [pc, #80]	; (8013894 <tcp_eff_send_mss_netif+0x68>)
 8013842:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8013846:	4914      	ldr	r1, [pc, #80]	; (8013898 <tcp_eff_send_mss_netif+0x6c>)
 8013848:	4814      	ldr	r0, [pc, #80]	; (801389c <tcp_eff_send_mss_netif+0x70>)
 801384a:	f009 fe19 	bl	801d480 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 801384e:	68bb      	ldr	r3, [r7, #8]
 8013850:	2b00      	cmp	r3, #0
 8013852:	d101      	bne.n	8013858 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8013854:	89fb      	ldrh	r3, [r7, #14]
 8013856:	e019      	b.n	801388c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8013858:	68bb      	ldr	r3, [r7, #8]
 801385a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801385c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801385e:	8afb      	ldrh	r3, [r7, #22]
 8013860:	2b00      	cmp	r3, #0
 8013862:	d012      	beq.n	801388a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8013864:	2328      	movs	r3, #40	; 0x28
 8013866:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8013868:	8afa      	ldrh	r2, [r7, #22]
 801386a:	8abb      	ldrh	r3, [r7, #20]
 801386c:	429a      	cmp	r2, r3
 801386e:	d904      	bls.n	801387a <tcp_eff_send_mss_netif+0x4e>
 8013870:	8afa      	ldrh	r2, [r7, #22]
 8013872:	8abb      	ldrh	r3, [r7, #20]
 8013874:	1ad3      	subs	r3, r2, r3
 8013876:	b29b      	uxth	r3, r3
 8013878:	e000      	b.n	801387c <tcp_eff_send_mss_netif+0x50>
 801387a:	2300      	movs	r3, #0
 801387c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801387e:	8a7a      	ldrh	r2, [r7, #18]
 8013880:	89fb      	ldrh	r3, [r7, #14]
 8013882:	4293      	cmp	r3, r2
 8013884:	bf28      	it	cs
 8013886:	4613      	movcs	r3, r2
 8013888:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801388a:	89fb      	ldrh	r3, [r7, #14]
}
 801388c:	4618      	mov	r0, r3
 801388e:	3718      	adds	r7, #24
 8013890:	46bd      	mov	sp, r7
 8013892:	bd80      	pop	{r7, pc}
 8013894:	080202d4 	.word	0x080202d4
 8013898:	080209e0 	.word	0x080209e0
 801389c:	08020318 	.word	0x08020318

080138a0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80138a0:	b580      	push	{r7, lr}
 80138a2:	b084      	sub	sp, #16
 80138a4:	af00      	add	r7, sp, #0
 80138a6:	6078      	str	r0, [r7, #4]
 80138a8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80138aa:	683b      	ldr	r3, [r7, #0]
 80138ac:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80138ae:	687b      	ldr	r3, [r7, #4]
 80138b0:	2b00      	cmp	r3, #0
 80138b2:	d119      	bne.n	80138e8 <tcp_netif_ip_addr_changed_pcblist+0x48>
 80138b4:	4b10      	ldr	r3, [pc, #64]	; (80138f8 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80138b6:	f44f 6210 	mov.w	r2, #2304	; 0x900
 80138ba:	4910      	ldr	r1, [pc, #64]	; (80138fc <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80138bc:	4810      	ldr	r0, [pc, #64]	; (8013900 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80138be:	f009 fddf 	bl	801d480 <iprintf>

  while (pcb != NULL) {
 80138c2:	e011      	b.n	80138e8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80138c4:	68fb      	ldr	r3, [r7, #12]
 80138c6:	681a      	ldr	r2, [r3, #0]
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	681b      	ldr	r3, [r3, #0]
 80138cc:	429a      	cmp	r2, r3
 80138ce:	d108      	bne.n	80138e2 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80138d0:	68fb      	ldr	r3, [r7, #12]
 80138d2:	68db      	ldr	r3, [r3, #12]
 80138d4:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80138d6:	68f8      	ldr	r0, [r7, #12]
 80138d8:	f7fe ffc6 	bl	8012868 <tcp_abort>
      pcb = next;
 80138dc:	68bb      	ldr	r3, [r7, #8]
 80138de:	60fb      	str	r3, [r7, #12]
 80138e0:	e002      	b.n	80138e8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80138e2:	68fb      	ldr	r3, [r7, #12]
 80138e4:	68db      	ldr	r3, [r3, #12]
 80138e6:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80138e8:	68fb      	ldr	r3, [r7, #12]
 80138ea:	2b00      	cmp	r3, #0
 80138ec:	d1ea      	bne.n	80138c4 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80138ee:	bf00      	nop
 80138f0:	bf00      	nop
 80138f2:	3710      	adds	r7, #16
 80138f4:	46bd      	mov	sp, r7
 80138f6:	bd80      	pop	{r7, pc}
 80138f8:	080202d4 	.word	0x080202d4
 80138fc:	08020a08 	.word	0x08020a08
 8013900:	08020318 	.word	0x08020318

08013904 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013904:	b580      	push	{r7, lr}
 8013906:	b084      	sub	sp, #16
 8013908:	af00      	add	r7, sp, #0
 801390a:	6078      	str	r0, [r7, #4]
 801390c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	2b00      	cmp	r3, #0
 8013912:	d02a      	beq.n	801396a <tcp_netif_ip_addr_changed+0x66>
 8013914:	687b      	ldr	r3, [r7, #4]
 8013916:	681b      	ldr	r3, [r3, #0]
 8013918:	2b00      	cmp	r3, #0
 801391a:	d026      	beq.n	801396a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 801391c:	4b15      	ldr	r3, [pc, #84]	; (8013974 <tcp_netif_ip_addr_changed+0x70>)
 801391e:	681b      	ldr	r3, [r3, #0]
 8013920:	4619      	mov	r1, r3
 8013922:	6878      	ldr	r0, [r7, #4]
 8013924:	f7ff ffbc 	bl	80138a0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8013928:	4b13      	ldr	r3, [pc, #76]	; (8013978 <tcp_netif_ip_addr_changed+0x74>)
 801392a:	681b      	ldr	r3, [r3, #0]
 801392c:	4619      	mov	r1, r3
 801392e:	6878      	ldr	r0, [r7, #4]
 8013930:	f7ff ffb6 	bl	80138a0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8013934:	683b      	ldr	r3, [r7, #0]
 8013936:	2b00      	cmp	r3, #0
 8013938:	d017      	beq.n	801396a <tcp_netif_ip_addr_changed+0x66>
 801393a:	683b      	ldr	r3, [r7, #0]
 801393c:	681b      	ldr	r3, [r3, #0]
 801393e:	2b00      	cmp	r3, #0
 8013940:	d013      	beq.n	801396a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013942:	4b0e      	ldr	r3, [pc, #56]	; (801397c <tcp_netif_ip_addr_changed+0x78>)
 8013944:	681b      	ldr	r3, [r3, #0]
 8013946:	60fb      	str	r3, [r7, #12]
 8013948:	e00c      	b.n	8013964 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801394a:	68fb      	ldr	r3, [r7, #12]
 801394c:	681a      	ldr	r2, [r3, #0]
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	681b      	ldr	r3, [r3, #0]
 8013952:	429a      	cmp	r2, r3
 8013954:	d103      	bne.n	801395e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8013956:	683b      	ldr	r3, [r7, #0]
 8013958:	681a      	ldr	r2, [r3, #0]
 801395a:	68fb      	ldr	r3, [r7, #12]
 801395c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801395e:	68fb      	ldr	r3, [r7, #12]
 8013960:	68db      	ldr	r3, [r3, #12]
 8013962:	60fb      	str	r3, [r7, #12]
 8013964:	68fb      	ldr	r3, [r7, #12]
 8013966:	2b00      	cmp	r3, #0
 8013968:	d1ef      	bne.n	801394a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801396a:	bf00      	nop
 801396c:	3710      	adds	r7, #16
 801396e:	46bd      	mov	sp, r7
 8013970:	bd80      	pop	{r7, pc}
 8013972:	bf00      	nop
 8013974:	2001b7d8 	.word	0x2001b7d8
 8013978:	2001b7e4 	.word	0x2001b7e4
 801397c:	2001b7e0 	.word	0x2001b7e0

08013980 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8013980:	b580      	push	{r7, lr}
 8013982:	b082      	sub	sp, #8
 8013984:	af00      	add	r7, sp, #0
 8013986:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801398c:	2b00      	cmp	r3, #0
 801398e:	d007      	beq.n	80139a0 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8013990:	687b      	ldr	r3, [r7, #4]
 8013992:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013994:	4618      	mov	r0, r3
 8013996:	f7ff fc3d 	bl	8013214 <tcp_segs_free>
    pcb->ooseq = NULL;
 801399a:	687b      	ldr	r3, [r7, #4]
 801399c:	2200      	movs	r2, #0
 801399e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80139a0:	bf00      	nop
 80139a2:	3708      	adds	r7, #8
 80139a4:	46bd      	mov	sp, r7
 80139a6:	bd80      	pop	{r7, pc}

080139a8 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80139a8:	b590      	push	{r4, r7, lr}
 80139aa:	b08d      	sub	sp, #52	; 0x34
 80139ac:	af04      	add	r7, sp, #16
 80139ae:	6078      	str	r0, [r7, #4]
 80139b0:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80139b2:	687b      	ldr	r3, [r7, #4]
 80139b4:	2b00      	cmp	r3, #0
 80139b6:	d105      	bne.n	80139c4 <tcp_input+0x1c>
 80139b8:	4b9b      	ldr	r3, [pc, #620]	; (8013c28 <tcp_input+0x280>)
 80139ba:	2283      	movs	r2, #131	; 0x83
 80139bc:	499b      	ldr	r1, [pc, #620]	; (8013c2c <tcp_input+0x284>)
 80139be:	489c      	ldr	r0, [pc, #624]	; (8013c30 <tcp_input+0x288>)
 80139c0:	f009 fd5e 	bl	801d480 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80139c4:	687b      	ldr	r3, [r7, #4]
 80139c6:	685b      	ldr	r3, [r3, #4]
 80139c8:	4a9a      	ldr	r2, [pc, #616]	; (8013c34 <tcp_input+0x28c>)
 80139ca:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	895b      	ldrh	r3, [r3, #10]
 80139d0:	2b13      	cmp	r3, #19
 80139d2:	f240 83d1 	bls.w	8014178 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80139d6:	4b98      	ldr	r3, [pc, #608]	; (8013c38 <tcp_input+0x290>)
 80139d8:	695b      	ldr	r3, [r3, #20]
 80139da:	4a97      	ldr	r2, [pc, #604]	; (8013c38 <tcp_input+0x290>)
 80139dc:	6812      	ldr	r2, [r2, #0]
 80139de:	4611      	mov	r1, r2
 80139e0:	4618      	mov	r0, r3
 80139e2:	f007 fdfd 	bl	801b5e0 <ip4_addr_isbroadcast_u32>
 80139e6:	4603      	mov	r3, r0
 80139e8:	2b00      	cmp	r3, #0
 80139ea:	f040 83c7 	bne.w	801417c <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80139ee:	4b92      	ldr	r3, [pc, #584]	; (8013c38 <tcp_input+0x290>)
 80139f0:	695b      	ldr	r3, [r3, #20]
 80139f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80139f6:	2be0      	cmp	r3, #224	; 0xe0
 80139f8:	f000 83c0 	beq.w	801417c <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80139fc:	4b8d      	ldr	r3, [pc, #564]	; (8013c34 <tcp_input+0x28c>)
 80139fe:	681b      	ldr	r3, [r3, #0]
 8013a00:	899b      	ldrh	r3, [r3, #12]
 8013a02:	b29b      	uxth	r3, r3
 8013a04:	4618      	mov	r0, r3
 8013a06:	f7fc fdd3 	bl	80105b0 <lwip_htons>
 8013a0a:	4603      	mov	r3, r0
 8013a0c:	0b1b      	lsrs	r3, r3, #12
 8013a0e:	b29b      	uxth	r3, r3
 8013a10:	b2db      	uxtb	r3, r3
 8013a12:	009b      	lsls	r3, r3, #2
 8013a14:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8013a16:	7cbb      	ldrb	r3, [r7, #18]
 8013a18:	2b13      	cmp	r3, #19
 8013a1a:	f240 83b1 	bls.w	8014180 <tcp_input+0x7d8>
 8013a1e:	7cbb      	ldrb	r3, [r7, #18]
 8013a20:	b29a      	uxth	r2, r3
 8013a22:	687b      	ldr	r3, [r7, #4]
 8013a24:	891b      	ldrh	r3, [r3, #8]
 8013a26:	429a      	cmp	r2, r3
 8013a28:	f200 83aa 	bhi.w	8014180 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8013a2c:	7cbb      	ldrb	r3, [r7, #18]
 8013a2e:	b29b      	uxth	r3, r3
 8013a30:	3b14      	subs	r3, #20
 8013a32:	b29a      	uxth	r2, r3
 8013a34:	4b81      	ldr	r3, [pc, #516]	; (8013c3c <tcp_input+0x294>)
 8013a36:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8013a38:	4b81      	ldr	r3, [pc, #516]	; (8013c40 <tcp_input+0x298>)
 8013a3a:	2200      	movs	r2, #0
 8013a3c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8013a3e:	687b      	ldr	r3, [r7, #4]
 8013a40:	895a      	ldrh	r2, [r3, #10]
 8013a42:	7cbb      	ldrb	r3, [r7, #18]
 8013a44:	b29b      	uxth	r3, r3
 8013a46:	429a      	cmp	r2, r3
 8013a48:	d309      	bcc.n	8013a5e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8013a4a:	4b7c      	ldr	r3, [pc, #496]	; (8013c3c <tcp_input+0x294>)
 8013a4c:	881a      	ldrh	r2, [r3, #0]
 8013a4e:	4b7d      	ldr	r3, [pc, #500]	; (8013c44 <tcp_input+0x29c>)
 8013a50:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8013a52:	7cbb      	ldrb	r3, [r7, #18]
 8013a54:	4619      	mov	r1, r3
 8013a56:	6878      	ldr	r0, [r7, #4]
 8013a58:	f7fe f8dc 	bl	8011c14 <pbuf_remove_header>
 8013a5c:	e04e      	b.n	8013afc <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	681b      	ldr	r3, [r3, #0]
 8013a62:	2b00      	cmp	r3, #0
 8013a64:	d105      	bne.n	8013a72 <tcp_input+0xca>
 8013a66:	4b70      	ldr	r3, [pc, #448]	; (8013c28 <tcp_input+0x280>)
 8013a68:	22c2      	movs	r2, #194	; 0xc2
 8013a6a:	4977      	ldr	r1, [pc, #476]	; (8013c48 <tcp_input+0x2a0>)
 8013a6c:	4870      	ldr	r0, [pc, #448]	; (8013c30 <tcp_input+0x288>)
 8013a6e:	f009 fd07 	bl	801d480 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8013a72:	2114      	movs	r1, #20
 8013a74:	6878      	ldr	r0, [r7, #4]
 8013a76:	f7fe f8cd 	bl	8011c14 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8013a7a:	687b      	ldr	r3, [r7, #4]
 8013a7c:	895a      	ldrh	r2, [r3, #10]
 8013a7e:	4b71      	ldr	r3, [pc, #452]	; (8013c44 <tcp_input+0x29c>)
 8013a80:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8013a82:	4b6e      	ldr	r3, [pc, #440]	; (8013c3c <tcp_input+0x294>)
 8013a84:	881a      	ldrh	r2, [r3, #0]
 8013a86:	4b6f      	ldr	r3, [pc, #444]	; (8013c44 <tcp_input+0x29c>)
 8013a88:	881b      	ldrh	r3, [r3, #0]
 8013a8a:	1ad3      	subs	r3, r2, r3
 8013a8c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8013a8e:	4b6d      	ldr	r3, [pc, #436]	; (8013c44 <tcp_input+0x29c>)
 8013a90:	881b      	ldrh	r3, [r3, #0]
 8013a92:	4619      	mov	r1, r3
 8013a94:	6878      	ldr	r0, [r7, #4]
 8013a96:	f7fe f8bd 	bl	8011c14 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	681b      	ldr	r3, [r3, #0]
 8013a9e:	895b      	ldrh	r3, [r3, #10]
 8013aa0:	8a3a      	ldrh	r2, [r7, #16]
 8013aa2:	429a      	cmp	r2, r3
 8013aa4:	f200 836e 	bhi.w	8014184 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	681b      	ldr	r3, [r3, #0]
 8013aac:	685b      	ldr	r3, [r3, #4]
 8013aae:	4a64      	ldr	r2, [pc, #400]	; (8013c40 <tcp_input+0x298>)
 8013ab0:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8013ab2:	687b      	ldr	r3, [r7, #4]
 8013ab4:	681b      	ldr	r3, [r3, #0]
 8013ab6:	8a3a      	ldrh	r2, [r7, #16]
 8013ab8:	4611      	mov	r1, r2
 8013aba:	4618      	mov	r0, r3
 8013abc:	f7fe f8aa 	bl	8011c14 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	891a      	ldrh	r2, [r3, #8]
 8013ac4:	8a3b      	ldrh	r3, [r7, #16]
 8013ac6:	1ad3      	subs	r3, r2, r3
 8013ac8:	b29a      	uxth	r2, r3
 8013aca:	687b      	ldr	r3, [r7, #4]
 8013acc:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8013ace:	687b      	ldr	r3, [r7, #4]
 8013ad0:	895b      	ldrh	r3, [r3, #10]
 8013ad2:	2b00      	cmp	r3, #0
 8013ad4:	d005      	beq.n	8013ae2 <tcp_input+0x13a>
 8013ad6:	4b54      	ldr	r3, [pc, #336]	; (8013c28 <tcp_input+0x280>)
 8013ad8:	22df      	movs	r2, #223	; 0xdf
 8013ada:	495c      	ldr	r1, [pc, #368]	; (8013c4c <tcp_input+0x2a4>)
 8013adc:	4854      	ldr	r0, [pc, #336]	; (8013c30 <tcp_input+0x288>)
 8013ade:	f009 fccf 	bl	801d480 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8013ae2:	687b      	ldr	r3, [r7, #4]
 8013ae4:	891a      	ldrh	r2, [r3, #8]
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	681b      	ldr	r3, [r3, #0]
 8013aea:	891b      	ldrh	r3, [r3, #8]
 8013aec:	429a      	cmp	r2, r3
 8013aee:	d005      	beq.n	8013afc <tcp_input+0x154>
 8013af0:	4b4d      	ldr	r3, [pc, #308]	; (8013c28 <tcp_input+0x280>)
 8013af2:	22e0      	movs	r2, #224	; 0xe0
 8013af4:	4956      	ldr	r1, [pc, #344]	; (8013c50 <tcp_input+0x2a8>)
 8013af6:	484e      	ldr	r0, [pc, #312]	; (8013c30 <tcp_input+0x288>)
 8013af8:	f009 fcc2 	bl	801d480 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8013afc:	4b4d      	ldr	r3, [pc, #308]	; (8013c34 <tcp_input+0x28c>)
 8013afe:	681b      	ldr	r3, [r3, #0]
 8013b00:	881b      	ldrh	r3, [r3, #0]
 8013b02:	b29b      	uxth	r3, r3
 8013b04:	4a4b      	ldr	r2, [pc, #300]	; (8013c34 <tcp_input+0x28c>)
 8013b06:	6814      	ldr	r4, [r2, #0]
 8013b08:	4618      	mov	r0, r3
 8013b0a:	f7fc fd51 	bl	80105b0 <lwip_htons>
 8013b0e:	4603      	mov	r3, r0
 8013b10:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8013b12:	4b48      	ldr	r3, [pc, #288]	; (8013c34 <tcp_input+0x28c>)
 8013b14:	681b      	ldr	r3, [r3, #0]
 8013b16:	885b      	ldrh	r3, [r3, #2]
 8013b18:	b29b      	uxth	r3, r3
 8013b1a:	4a46      	ldr	r2, [pc, #280]	; (8013c34 <tcp_input+0x28c>)
 8013b1c:	6814      	ldr	r4, [r2, #0]
 8013b1e:	4618      	mov	r0, r3
 8013b20:	f7fc fd46 	bl	80105b0 <lwip_htons>
 8013b24:	4603      	mov	r3, r0
 8013b26:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8013b28:	4b42      	ldr	r3, [pc, #264]	; (8013c34 <tcp_input+0x28c>)
 8013b2a:	681b      	ldr	r3, [r3, #0]
 8013b2c:	685b      	ldr	r3, [r3, #4]
 8013b2e:	4a41      	ldr	r2, [pc, #260]	; (8013c34 <tcp_input+0x28c>)
 8013b30:	6814      	ldr	r4, [r2, #0]
 8013b32:	4618      	mov	r0, r3
 8013b34:	f7fc fd51 	bl	80105da <lwip_htonl>
 8013b38:	4603      	mov	r3, r0
 8013b3a:	6063      	str	r3, [r4, #4]
 8013b3c:	6863      	ldr	r3, [r4, #4]
 8013b3e:	4a45      	ldr	r2, [pc, #276]	; (8013c54 <tcp_input+0x2ac>)
 8013b40:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8013b42:	4b3c      	ldr	r3, [pc, #240]	; (8013c34 <tcp_input+0x28c>)
 8013b44:	681b      	ldr	r3, [r3, #0]
 8013b46:	689b      	ldr	r3, [r3, #8]
 8013b48:	4a3a      	ldr	r2, [pc, #232]	; (8013c34 <tcp_input+0x28c>)
 8013b4a:	6814      	ldr	r4, [r2, #0]
 8013b4c:	4618      	mov	r0, r3
 8013b4e:	f7fc fd44 	bl	80105da <lwip_htonl>
 8013b52:	4603      	mov	r3, r0
 8013b54:	60a3      	str	r3, [r4, #8]
 8013b56:	68a3      	ldr	r3, [r4, #8]
 8013b58:	4a3f      	ldr	r2, [pc, #252]	; (8013c58 <tcp_input+0x2b0>)
 8013b5a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8013b5c:	4b35      	ldr	r3, [pc, #212]	; (8013c34 <tcp_input+0x28c>)
 8013b5e:	681b      	ldr	r3, [r3, #0]
 8013b60:	89db      	ldrh	r3, [r3, #14]
 8013b62:	b29b      	uxth	r3, r3
 8013b64:	4a33      	ldr	r2, [pc, #204]	; (8013c34 <tcp_input+0x28c>)
 8013b66:	6814      	ldr	r4, [r2, #0]
 8013b68:	4618      	mov	r0, r3
 8013b6a:	f7fc fd21 	bl	80105b0 <lwip_htons>
 8013b6e:	4603      	mov	r3, r0
 8013b70:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8013b72:	4b30      	ldr	r3, [pc, #192]	; (8013c34 <tcp_input+0x28c>)
 8013b74:	681b      	ldr	r3, [r3, #0]
 8013b76:	899b      	ldrh	r3, [r3, #12]
 8013b78:	b29b      	uxth	r3, r3
 8013b7a:	4618      	mov	r0, r3
 8013b7c:	f7fc fd18 	bl	80105b0 <lwip_htons>
 8013b80:	4603      	mov	r3, r0
 8013b82:	b2db      	uxtb	r3, r3
 8013b84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013b88:	b2da      	uxtb	r2, r3
 8013b8a:	4b34      	ldr	r3, [pc, #208]	; (8013c5c <tcp_input+0x2b4>)
 8013b8c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8013b8e:	687b      	ldr	r3, [r7, #4]
 8013b90:	891a      	ldrh	r2, [r3, #8]
 8013b92:	4b33      	ldr	r3, [pc, #204]	; (8013c60 <tcp_input+0x2b8>)
 8013b94:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8013b96:	4b31      	ldr	r3, [pc, #196]	; (8013c5c <tcp_input+0x2b4>)
 8013b98:	781b      	ldrb	r3, [r3, #0]
 8013b9a:	f003 0303 	and.w	r3, r3, #3
 8013b9e:	2b00      	cmp	r3, #0
 8013ba0:	d00c      	beq.n	8013bbc <tcp_input+0x214>
    tcplen++;
 8013ba2:	4b2f      	ldr	r3, [pc, #188]	; (8013c60 <tcp_input+0x2b8>)
 8013ba4:	881b      	ldrh	r3, [r3, #0]
 8013ba6:	3301      	adds	r3, #1
 8013ba8:	b29a      	uxth	r2, r3
 8013baa:	4b2d      	ldr	r3, [pc, #180]	; (8013c60 <tcp_input+0x2b8>)
 8013bac:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8013bae:	687b      	ldr	r3, [r7, #4]
 8013bb0:	891a      	ldrh	r2, [r3, #8]
 8013bb2:	4b2b      	ldr	r3, [pc, #172]	; (8013c60 <tcp_input+0x2b8>)
 8013bb4:	881b      	ldrh	r3, [r3, #0]
 8013bb6:	429a      	cmp	r2, r3
 8013bb8:	f200 82e6 	bhi.w	8014188 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8013bbc:	2300      	movs	r3, #0
 8013bbe:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013bc0:	4b28      	ldr	r3, [pc, #160]	; (8013c64 <tcp_input+0x2bc>)
 8013bc2:	681b      	ldr	r3, [r3, #0]
 8013bc4:	61fb      	str	r3, [r7, #28]
 8013bc6:	e09d      	b.n	8013d04 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8013bc8:	69fb      	ldr	r3, [r7, #28]
 8013bca:	7d1b      	ldrb	r3, [r3, #20]
 8013bcc:	2b00      	cmp	r3, #0
 8013bce:	d105      	bne.n	8013bdc <tcp_input+0x234>
 8013bd0:	4b15      	ldr	r3, [pc, #84]	; (8013c28 <tcp_input+0x280>)
 8013bd2:	22fb      	movs	r2, #251	; 0xfb
 8013bd4:	4924      	ldr	r1, [pc, #144]	; (8013c68 <tcp_input+0x2c0>)
 8013bd6:	4816      	ldr	r0, [pc, #88]	; (8013c30 <tcp_input+0x288>)
 8013bd8:	f009 fc52 	bl	801d480 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8013bdc:	69fb      	ldr	r3, [r7, #28]
 8013bde:	7d1b      	ldrb	r3, [r3, #20]
 8013be0:	2b0a      	cmp	r3, #10
 8013be2:	d105      	bne.n	8013bf0 <tcp_input+0x248>
 8013be4:	4b10      	ldr	r3, [pc, #64]	; (8013c28 <tcp_input+0x280>)
 8013be6:	22fc      	movs	r2, #252	; 0xfc
 8013be8:	4920      	ldr	r1, [pc, #128]	; (8013c6c <tcp_input+0x2c4>)
 8013bea:	4811      	ldr	r0, [pc, #68]	; (8013c30 <tcp_input+0x288>)
 8013bec:	f009 fc48 	bl	801d480 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8013bf0:	69fb      	ldr	r3, [r7, #28]
 8013bf2:	7d1b      	ldrb	r3, [r3, #20]
 8013bf4:	2b01      	cmp	r3, #1
 8013bf6:	d105      	bne.n	8013c04 <tcp_input+0x25c>
 8013bf8:	4b0b      	ldr	r3, [pc, #44]	; (8013c28 <tcp_input+0x280>)
 8013bfa:	22fd      	movs	r2, #253	; 0xfd
 8013bfc:	491c      	ldr	r1, [pc, #112]	; (8013c70 <tcp_input+0x2c8>)
 8013bfe:	480c      	ldr	r0, [pc, #48]	; (8013c30 <tcp_input+0x288>)
 8013c00:	f009 fc3e 	bl	801d480 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013c04:	69fb      	ldr	r3, [r7, #28]
 8013c06:	7a1b      	ldrb	r3, [r3, #8]
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	d033      	beq.n	8013c74 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013c0c:	69fb      	ldr	r3, [r7, #28]
 8013c0e:	7a1a      	ldrb	r2, [r3, #8]
 8013c10:	4b09      	ldr	r3, [pc, #36]	; (8013c38 <tcp_input+0x290>)
 8013c12:	685b      	ldr	r3, [r3, #4]
 8013c14:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013c18:	3301      	adds	r3, #1
 8013c1a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013c1c:	429a      	cmp	r2, r3
 8013c1e:	d029      	beq.n	8013c74 <tcp_input+0x2cc>
      prev = pcb;
 8013c20:	69fb      	ldr	r3, [r7, #28]
 8013c22:	61bb      	str	r3, [r7, #24]
      continue;
 8013c24:	e06b      	b.n	8013cfe <tcp_input+0x356>
 8013c26:	bf00      	nop
 8013c28:	08020a3c 	.word	0x08020a3c
 8013c2c:	08020a70 	.word	0x08020a70
 8013c30:	08020a88 	.word	0x08020a88
 8013c34:	200137c0 	.word	0x200137c0
 8013c38:	200172e4 	.word	0x200172e4
 8013c3c:	200137c4 	.word	0x200137c4
 8013c40:	200137c8 	.word	0x200137c8
 8013c44:	200137c6 	.word	0x200137c6
 8013c48:	08020ab0 	.word	0x08020ab0
 8013c4c:	08020ac0 	.word	0x08020ac0
 8013c50:	08020acc 	.word	0x08020acc
 8013c54:	200137d0 	.word	0x200137d0
 8013c58:	200137d4 	.word	0x200137d4
 8013c5c:	200137dc 	.word	0x200137dc
 8013c60:	200137da 	.word	0x200137da
 8013c64:	2001b7d8 	.word	0x2001b7d8
 8013c68:	08020aec 	.word	0x08020aec
 8013c6c:	08020b14 	.word	0x08020b14
 8013c70:	08020b40 	.word	0x08020b40
    }

    if (pcb->remote_port == tcphdr->src &&
 8013c74:	69fb      	ldr	r3, [r7, #28]
 8013c76:	8b1a      	ldrh	r2, [r3, #24]
 8013c78:	4b72      	ldr	r3, [pc, #456]	; (8013e44 <tcp_input+0x49c>)
 8013c7a:	681b      	ldr	r3, [r3, #0]
 8013c7c:	881b      	ldrh	r3, [r3, #0]
 8013c7e:	b29b      	uxth	r3, r3
 8013c80:	429a      	cmp	r2, r3
 8013c82:	d13a      	bne.n	8013cfa <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8013c84:	69fb      	ldr	r3, [r7, #28]
 8013c86:	8ada      	ldrh	r2, [r3, #22]
 8013c88:	4b6e      	ldr	r3, [pc, #440]	; (8013e44 <tcp_input+0x49c>)
 8013c8a:	681b      	ldr	r3, [r3, #0]
 8013c8c:	885b      	ldrh	r3, [r3, #2]
 8013c8e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8013c90:	429a      	cmp	r2, r3
 8013c92:	d132      	bne.n	8013cfa <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013c94:	69fb      	ldr	r3, [r7, #28]
 8013c96:	685a      	ldr	r2, [r3, #4]
 8013c98:	4b6b      	ldr	r3, [pc, #428]	; (8013e48 <tcp_input+0x4a0>)
 8013c9a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8013c9c:	429a      	cmp	r2, r3
 8013c9e:	d12c      	bne.n	8013cfa <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8013ca0:	69fb      	ldr	r3, [r7, #28]
 8013ca2:	681a      	ldr	r2, [r3, #0]
 8013ca4:	4b68      	ldr	r3, [pc, #416]	; (8013e48 <tcp_input+0x4a0>)
 8013ca6:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013ca8:	429a      	cmp	r2, r3
 8013caa:	d126      	bne.n	8013cfa <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8013cac:	69fb      	ldr	r3, [r7, #28]
 8013cae:	68db      	ldr	r3, [r3, #12]
 8013cb0:	69fa      	ldr	r2, [r7, #28]
 8013cb2:	429a      	cmp	r2, r3
 8013cb4:	d106      	bne.n	8013cc4 <tcp_input+0x31c>
 8013cb6:	4b65      	ldr	r3, [pc, #404]	; (8013e4c <tcp_input+0x4a4>)
 8013cb8:	f240 120d 	movw	r2, #269	; 0x10d
 8013cbc:	4964      	ldr	r1, [pc, #400]	; (8013e50 <tcp_input+0x4a8>)
 8013cbe:	4865      	ldr	r0, [pc, #404]	; (8013e54 <tcp_input+0x4ac>)
 8013cc0:	f009 fbde 	bl	801d480 <iprintf>
      if (prev != NULL) {
 8013cc4:	69bb      	ldr	r3, [r7, #24]
 8013cc6:	2b00      	cmp	r3, #0
 8013cc8:	d00a      	beq.n	8013ce0 <tcp_input+0x338>
        prev->next = pcb->next;
 8013cca:	69fb      	ldr	r3, [r7, #28]
 8013ccc:	68da      	ldr	r2, [r3, #12]
 8013cce:	69bb      	ldr	r3, [r7, #24]
 8013cd0:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8013cd2:	4b61      	ldr	r3, [pc, #388]	; (8013e58 <tcp_input+0x4b0>)
 8013cd4:	681a      	ldr	r2, [r3, #0]
 8013cd6:	69fb      	ldr	r3, [r7, #28]
 8013cd8:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8013cda:	4a5f      	ldr	r2, [pc, #380]	; (8013e58 <tcp_input+0x4b0>)
 8013cdc:	69fb      	ldr	r3, [r7, #28]
 8013cde:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8013ce0:	69fb      	ldr	r3, [r7, #28]
 8013ce2:	68db      	ldr	r3, [r3, #12]
 8013ce4:	69fa      	ldr	r2, [r7, #28]
 8013ce6:	429a      	cmp	r2, r3
 8013ce8:	d111      	bne.n	8013d0e <tcp_input+0x366>
 8013cea:	4b58      	ldr	r3, [pc, #352]	; (8013e4c <tcp_input+0x4a4>)
 8013cec:	f240 1215 	movw	r2, #277	; 0x115
 8013cf0:	495a      	ldr	r1, [pc, #360]	; (8013e5c <tcp_input+0x4b4>)
 8013cf2:	4858      	ldr	r0, [pc, #352]	; (8013e54 <tcp_input+0x4ac>)
 8013cf4:	f009 fbc4 	bl	801d480 <iprintf>
      break;
 8013cf8:	e009      	b.n	8013d0e <tcp_input+0x366>
    }
    prev = pcb;
 8013cfa:	69fb      	ldr	r3, [r7, #28]
 8013cfc:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013cfe:	69fb      	ldr	r3, [r7, #28]
 8013d00:	68db      	ldr	r3, [r3, #12]
 8013d02:	61fb      	str	r3, [r7, #28]
 8013d04:	69fb      	ldr	r3, [r7, #28]
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	f47f af5e 	bne.w	8013bc8 <tcp_input+0x220>
 8013d0c:	e000      	b.n	8013d10 <tcp_input+0x368>
      break;
 8013d0e:	bf00      	nop
  }

  if (pcb == NULL) {
 8013d10:	69fb      	ldr	r3, [r7, #28]
 8013d12:	2b00      	cmp	r3, #0
 8013d14:	f040 80aa 	bne.w	8013e6c <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8013d18:	4b51      	ldr	r3, [pc, #324]	; (8013e60 <tcp_input+0x4b8>)
 8013d1a:	681b      	ldr	r3, [r3, #0]
 8013d1c:	61fb      	str	r3, [r7, #28]
 8013d1e:	e03f      	b.n	8013da0 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8013d20:	69fb      	ldr	r3, [r7, #28]
 8013d22:	7d1b      	ldrb	r3, [r3, #20]
 8013d24:	2b0a      	cmp	r3, #10
 8013d26:	d006      	beq.n	8013d36 <tcp_input+0x38e>
 8013d28:	4b48      	ldr	r3, [pc, #288]	; (8013e4c <tcp_input+0x4a4>)
 8013d2a:	f240 121f 	movw	r2, #287	; 0x11f
 8013d2e:	494d      	ldr	r1, [pc, #308]	; (8013e64 <tcp_input+0x4bc>)
 8013d30:	4848      	ldr	r0, [pc, #288]	; (8013e54 <tcp_input+0x4ac>)
 8013d32:	f009 fba5 	bl	801d480 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013d36:	69fb      	ldr	r3, [r7, #28]
 8013d38:	7a1b      	ldrb	r3, [r3, #8]
 8013d3a:	2b00      	cmp	r3, #0
 8013d3c:	d009      	beq.n	8013d52 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013d3e:	69fb      	ldr	r3, [r7, #28]
 8013d40:	7a1a      	ldrb	r2, [r3, #8]
 8013d42:	4b41      	ldr	r3, [pc, #260]	; (8013e48 <tcp_input+0x4a0>)
 8013d44:	685b      	ldr	r3, [r3, #4]
 8013d46:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013d4a:	3301      	adds	r3, #1
 8013d4c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013d4e:	429a      	cmp	r2, r3
 8013d50:	d122      	bne.n	8013d98 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8013d52:	69fb      	ldr	r3, [r7, #28]
 8013d54:	8b1a      	ldrh	r2, [r3, #24]
 8013d56:	4b3b      	ldr	r3, [pc, #236]	; (8013e44 <tcp_input+0x49c>)
 8013d58:	681b      	ldr	r3, [r3, #0]
 8013d5a:	881b      	ldrh	r3, [r3, #0]
 8013d5c:	b29b      	uxth	r3, r3
 8013d5e:	429a      	cmp	r2, r3
 8013d60:	d11b      	bne.n	8013d9a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8013d62:	69fb      	ldr	r3, [r7, #28]
 8013d64:	8ada      	ldrh	r2, [r3, #22]
 8013d66:	4b37      	ldr	r3, [pc, #220]	; (8013e44 <tcp_input+0x49c>)
 8013d68:	681b      	ldr	r3, [r3, #0]
 8013d6a:	885b      	ldrh	r3, [r3, #2]
 8013d6c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8013d6e:	429a      	cmp	r2, r3
 8013d70:	d113      	bne.n	8013d9a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013d72:	69fb      	ldr	r3, [r7, #28]
 8013d74:	685a      	ldr	r2, [r3, #4]
 8013d76:	4b34      	ldr	r3, [pc, #208]	; (8013e48 <tcp_input+0x4a0>)
 8013d78:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8013d7a:	429a      	cmp	r2, r3
 8013d7c:	d10d      	bne.n	8013d9a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8013d7e:	69fb      	ldr	r3, [r7, #28]
 8013d80:	681a      	ldr	r2, [r3, #0]
 8013d82:	4b31      	ldr	r3, [pc, #196]	; (8013e48 <tcp_input+0x4a0>)
 8013d84:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013d86:	429a      	cmp	r2, r3
 8013d88:	d107      	bne.n	8013d9a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8013d8a:	69f8      	ldr	r0, [r7, #28]
 8013d8c:	f000 fb56 	bl	801443c <tcp_timewait_input>
        }
        pbuf_free(p);
 8013d90:	6878      	ldr	r0, [r7, #4]
 8013d92:	f7fd ffc5 	bl	8011d20 <pbuf_free>
        return;
 8013d96:	e1fd      	b.n	8014194 <tcp_input+0x7ec>
        continue;
 8013d98:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8013d9a:	69fb      	ldr	r3, [r7, #28]
 8013d9c:	68db      	ldr	r3, [r3, #12]
 8013d9e:	61fb      	str	r3, [r7, #28]
 8013da0:	69fb      	ldr	r3, [r7, #28]
 8013da2:	2b00      	cmp	r3, #0
 8013da4:	d1bc      	bne.n	8013d20 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8013da6:	2300      	movs	r3, #0
 8013da8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013daa:	4b2f      	ldr	r3, [pc, #188]	; (8013e68 <tcp_input+0x4c0>)
 8013dac:	681b      	ldr	r3, [r3, #0]
 8013dae:	617b      	str	r3, [r7, #20]
 8013db0:	e02a      	b.n	8013e08 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8013db2:	697b      	ldr	r3, [r7, #20]
 8013db4:	7a1b      	ldrb	r3, [r3, #8]
 8013db6:	2b00      	cmp	r3, #0
 8013db8:	d00c      	beq.n	8013dd4 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013dba:	697b      	ldr	r3, [r7, #20]
 8013dbc:	7a1a      	ldrb	r2, [r3, #8]
 8013dbe:	4b22      	ldr	r3, [pc, #136]	; (8013e48 <tcp_input+0x4a0>)
 8013dc0:	685b      	ldr	r3, [r3, #4]
 8013dc2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013dc6:	3301      	adds	r3, #1
 8013dc8:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8013dca:	429a      	cmp	r2, r3
 8013dcc:	d002      	beq.n	8013dd4 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8013dce:	697b      	ldr	r3, [r7, #20]
 8013dd0:	61bb      	str	r3, [r7, #24]
        continue;
 8013dd2:	e016      	b.n	8013e02 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8013dd4:	697b      	ldr	r3, [r7, #20]
 8013dd6:	8ada      	ldrh	r2, [r3, #22]
 8013dd8:	4b1a      	ldr	r3, [pc, #104]	; (8013e44 <tcp_input+0x49c>)
 8013dda:	681b      	ldr	r3, [r3, #0]
 8013ddc:	885b      	ldrh	r3, [r3, #2]
 8013dde:	b29b      	uxth	r3, r3
 8013de0:	429a      	cmp	r2, r3
 8013de2:	d10c      	bne.n	8013dfe <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8013de4:	697b      	ldr	r3, [r7, #20]
 8013de6:	681a      	ldr	r2, [r3, #0]
 8013de8:	4b17      	ldr	r3, [pc, #92]	; (8013e48 <tcp_input+0x4a0>)
 8013dea:	695b      	ldr	r3, [r3, #20]
 8013dec:	429a      	cmp	r2, r3
 8013dee:	d00f      	beq.n	8013e10 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8013df0:	697b      	ldr	r3, [r7, #20]
 8013df2:	2b00      	cmp	r3, #0
 8013df4:	d00d      	beq.n	8013e12 <tcp_input+0x46a>
 8013df6:	697b      	ldr	r3, [r7, #20]
 8013df8:	681b      	ldr	r3, [r3, #0]
 8013dfa:	2b00      	cmp	r3, #0
 8013dfc:	d009      	beq.n	8013e12 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8013dfe:	697b      	ldr	r3, [r7, #20]
 8013e00:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013e02:	697b      	ldr	r3, [r7, #20]
 8013e04:	68db      	ldr	r3, [r3, #12]
 8013e06:	617b      	str	r3, [r7, #20]
 8013e08:	697b      	ldr	r3, [r7, #20]
 8013e0a:	2b00      	cmp	r3, #0
 8013e0c:	d1d1      	bne.n	8013db2 <tcp_input+0x40a>
 8013e0e:	e000      	b.n	8013e12 <tcp_input+0x46a>
            break;
 8013e10:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8013e12:	697b      	ldr	r3, [r7, #20]
 8013e14:	2b00      	cmp	r3, #0
 8013e16:	d029      	beq.n	8013e6c <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8013e18:	69bb      	ldr	r3, [r7, #24]
 8013e1a:	2b00      	cmp	r3, #0
 8013e1c:	d00a      	beq.n	8013e34 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8013e1e:	697b      	ldr	r3, [r7, #20]
 8013e20:	68da      	ldr	r2, [r3, #12]
 8013e22:	69bb      	ldr	r3, [r7, #24]
 8013e24:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8013e26:	4b10      	ldr	r3, [pc, #64]	; (8013e68 <tcp_input+0x4c0>)
 8013e28:	681a      	ldr	r2, [r3, #0]
 8013e2a:	697b      	ldr	r3, [r7, #20]
 8013e2c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8013e2e:	4a0e      	ldr	r2, [pc, #56]	; (8013e68 <tcp_input+0x4c0>)
 8013e30:	697b      	ldr	r3, [r7, #20]
 8013e32:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8013e34:	6978      	ldr	r0, [r7, #20]
 8013e36:	f000 fa03 	bl	8014240 <tcp_listen_input>
      }
      pbuf_free(p);
 8013e3a:	6878      	ldr	r0, [r7, #4]
 8013e3c:	f7fd ff70 	bl	8011d20 <pbuf_free>
      return;
 8013e40:	e1a8      	b.n	8014194 <tcp_input+0x7ec>
 8013e42:	bf00      	nop
 8013e44:	200137c0 	.word	0x200137c0
 8013e48:	200172e4 	.word	0x200172e4
 8013e4c:	08020a3c 	.word	0x08020a3c
 8013e50:	08020b68 	.word	0x08020b68
 8013e54:	08020a88 	.word	0x08020a88
 8013e58:	2001b7d8 	.word	0x2001b7d8
 8013e5c:	08020b94 	.word	0x08020b94
 8013e60:	2001b7e8 	.word	0x2001b7e8
 8013e64:	08020bc0 	.word	0x08020bc0
 8013e68:	2001b7e0 	.word	0x2001b7e0
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8013e6c:	69fb      	ldr	r3, [r7, #28]
 8013e6e:	2b00      	cmp	r3, #0
 8013e70:	f000 8158 	beq.w	8014124 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8013e74:	4b95      	ldr	r3, [pc, #596]	; (80140cc <tcp_input+0x724>)
 8013e76:	2200      	movs	r2, #0
 8013e78:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8013e7a:	687b      	ldr	r3, [r7, #4]
 8013e7c:	891a      	ldrh	r2, [r3, #8]
 8013e7e:	4b93      	ldr	r3, [pc, #588]	; (80140cc <tcp_input+0x724>)
 8013e80:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8013e82:	4a92      	ldr	r2, [pc, #584]	; (80140cc <tcp_input+0x724>)
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8013e88:	4b91      	ldr	r3, [pc, #580]	; (80140d0 <tcp_input+0x728>)
 8013e8a:	681b      	ldr	r3, [r3, #0]
 8013e8c:	4a8f      	ldr	r2, [pc, #572]	; (80140cc <tcp_input+0x724>)
 8013e8e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8013e90:	4b90      	ldr	r3, [pc, #576]	; (80140d4 <tcp_input+0x72c>)
 8013e92:	2200      	movs	r2, #0
 8013e94:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8013e96:	4b90      	ldr	r3, [pc, #576]	; (80140d8 <tcp_input+0x730>)
 8013e98:	2200      	movs	r2, #0
 8013e9a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8013e9c:	4b8f      	ldr	r3, [pc, #572]	; (80140dc <tcp_input+0x734>)
 8013e9e:	2200      	movs	r2, #0
 8013ea0:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8013ea2:	4b8f      	ldr	r3, [pc, #572]	; (80140e0 <tcp_input+0x738>)
 8013ea4:	781b      	ldrb	r3, [r3, #0]
 8013ea6:	f003 0308 	and.w	r3, r3, #8
 8013eaa:	2b00      	cmp	r3, #0
 8013eac:	d006      	beq.n	8013ebc <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8013eae:	687b      	ldr	r3, [r7, #4]
 8013eb0:	7b5b      	ldrb	r3, [r3, #13]
 8013eb2:	f043 0301 	orr.w	r3, r3, #1
 8013eb6:	b2da      	uxtb	r2, r3
 8013eb8:	687b      	ldr	r3, [r7, #4]
 8013eba:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8013ebc:	69fb      	ldr	r3, [r7, #28]
 8013ebe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013ec0:	2b00      	cmp	r3, #0
 8013ec2:	d017      	beq.n	8013ef4 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8013ec4:	69f8      	ldr	r0, [r7, #28]
 8013ec6:	f7ff f929 	bl	801311c <tcp_process_refused_data>
 8013eca:	4603      	mov	r3, r0
 8013ecc:	f113 0f0d 	cmn.w	r3, #13
 8013ed0:	d007      	beq.n	8013ee2 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8013ed2:	69fb      	ldr	r3, [r7, #28]
 8013ed4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8013ed6:	2b00      	cmp	r3, #0
 8013ed8:	d00c      	beq.n	8013ef4 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8013eda:	4b82      	ldr	r3, [pc, #520]	; (80140e4 <tcp_input+0x73c>)
 8013edc:	881b      	ldrh	r3, [r3, #0]
 8013ede:	2b00      	cmp	r3, #0
 8013ee0:	d008      	beq.n	8013ef4 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8013ee2:	69fb      	ldr	r3, [r7, #28]
 8013ee4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013ee6:	2b00      	cmp	r3, #0
 8013ee8:	f040 80e3 	bne.w	80140b2 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8013eec:	69f8      	ldr	r0, [r7, #28]
 8013eee:	f003 f9ad 	bl	801724c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8013ef2:	e0de      	b.n	80140b2 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8013ef4:	4a7c      	ldr	r2, [pc, #496]	; (80140e8 <tcp_input+0x740>)
 8013ef6:	69fb      	ldr	r3, [r7, #28]
 8013ef8:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8013efa:	69f8      	ldr	r0, [r7, #28]
 8013efc:	f000 fb18 	bl	8014530 <tcp_process>
 8013f00:	4603      	mov	r3, r0
 8013f02:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8013f04:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013f08:	f113 0f0d 	cmn.w	r3, #13
 8013f0c:	f000 80d3 	beq.w	80140b6 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8013f10:	4b71      	ldr	r3, [pc, #452]	; (80140d8 <tcp_input+0x730>)
 8013f12:	781b      	ldrb	r3, [r3, #0]
 8013f14:	f003 0308 	and.w	r3, r3, #8
 8013f18:	2b00      	cmp	r3, #0
 8013f1a:	d015      	beq.n	8013f48 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8013f1c:	69fb      	ldr	r3, [r7, #28]
 8013f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013f22:	2b00      	cmp	r3, #0
 8013f24:	d008      	beq.n	8013f38 <tcp_input+0x590>
 8013f26:	69fb      	ldr	r3, [r7, #28]
 8013f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013f2c:	69fa      	ldr	r2, [r7, #28]
 8013f2e:	6912      	ldr	r2, [r2, #16]
 8013f30:	f06f 010d 	mvn.w	r1, #13
 8013f34:	4610      	mov	r0, r2
 8013f36:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8013f38:	69f9      	ldr	r1, [r7, #28]
 8013f3a:	486c      	ldr	r0, [pc, #432]	; (80140ec <tcp_input+0x744>)
 8013f3c:	f7ff fbbc 	bl	80136b8 <tcp_pcb_remove>
        tcp_free(pcb);
 8013f40:	69f8      	ldr	r0, [r7, #28]
 8013f42:	f7fe f9a9 	bl	8012298 <tcp_free>
 8013f46:	e0da      	b.n	80140fe <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8013f48:	2300      	movs	r3, #0
 8013f4a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8013f4c:	4b63      	ldr	r3, [pc, #396]	; (80140dc <tcp_input+0x734>)
 8013f4e:	881b      	ldrh	r3, [r3, #0]
 8013f50:	2b00      	cmp	r3, #0
 8013f52:	d01d      	beq.n	8013f90 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8013f54:	4b61      	ldr	r3, [pc, #388]	; (80140dc <tcp_input+0x734>)
 8013f56:	881b      	ldrh	r3, [r3, #0]
 8013f58:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8013f5a:	69fb      	ldr	r3, [r7, #28]
 8013f5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013f60:	2b00      	cmp	r3, #0
 8013f62:	d00a      	beq.n	8013f7a <tcp_input+0x5d2>
 8013f64:	69fb      	ldr	r3, [r7, #28]
 8013f66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013f6a:	69fa      	ldr	r2, [r7, #28]
 8013f6c:	6910      	ldr	r0, [r2, #16]
 8013f6e:	89fa      	ldrh	r2, [r7, #14]
 8013f70:	69f9      	ldr	r1, [r7, #28]
 8013f72:	4798      	blx	r3
 8013f74:	4603      	mov	r3, r0
 8013f76:	74fb      	strb	r3, [r7, #19]
 8013f78:	e001      	b.n	8013f7e <tcp_input+0x5d6>
 8013f7a:	2300      	movs	r3, #0
 8013f7c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8013f7e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013f82:	f113 0f0d 	cmn.w	r3, #13
 8013f86:	f000 8098 	beq.w	80140ba <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8013f8a:	4b54      	ldr	r3, [pc, #336]	; (80140dc <tcp_input+0x734>)
 8013f8c:	2200      	movs	r2, #0
 8013f8e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8013f90:	69f8      	ldr	r0, [r7, #28]
 8013f92:	f000 f915 	bl	80141c0 <tcp_input_delayed_close>
 8013f96:	4603      	mov	r3, r0
 8013f98:	2b00      	cmp	r3, #0
 8013f9a:	f040 8090 	bne.w	80140be <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8013f9e:	4b4d      	ldr	r3, [pc, #308]	; (80140d4 <tcp_input+0x72c>)
 8013fa0:	681b      	ldr	r3, [r3, #0]
 8013fa2:	2b00      	cmp	r3, #0
 8013fa4:	d041      	beq.n	801402a <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8013fa6:	69fb      	ldr	r3, [r7, #28]
 8013fa8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013faa:	2b00      	cmp	r3, #0
 8013fac:	d006      	beq.n	8013fbc <tcp_input+0x614>
 8013fae:	4b50      	ldr	r3, [pc, #320]	; (80140f0 <tcp_input+0x748>)
 8013fb0:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8013fb4:	494f      	ldr	r1, [pc, #316]	; (80140f4 <tcp_input+0x74c>)
 8013fb6:	4850      	ldr	r0, [pc, #320]	; (80140f8 <tcp_input+0x750>)
 8013fb8:	f009 fa62 	bl	801d480 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8013fbc:	69fb      	ldr	r3, [r7, #28]
 8013fbe:	8b5b      	ldrh	r3, [r3, #26]
 8013fc0:	f003 0310 	and.w	r3, r3, #16
 8013fc4:	2b00      	cmp	r3, #0
 8013fc6:	d008      	beq.n	8013fda <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8013fc8:	4b42      	ldr	r3, [pc, #264]	; (80140d4 <tcp_input+0x72c>)
 8013fca:	681b      	ldr	r3, [r3, #0]
 8013fcc:	4618      	mov	r0, r3
 8013fce:	f7fd fea7 	bl	8011d20 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8013fd2:	69f8      	ldr	r0, [r7, #28]
 8013fd4:	f7fe fc48 	bl	8012868 <tcp_abort>
            goto aborted;
 8013fd8:	e091      	b.n	80140fe <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8013fda:	69fb      	ldr	r3, [r7, #28]
 8013fdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013fe0:	2b00      	cmp	r3, #0
 8013fe2:	d00c      	beq.n	8013ffe <tcp_input+0x656>
 8013fe4:	69fb      	ldr	r3, [r7, #28]
 8013fe6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8013fea:	69fb      	ldr	r3, [r7, #28]
 8013fec:	6918      	ldr	r0, [r3, #16]
 8013fee:	4b39      	ldr	r3, [pc, #228]	; (80140d4 <tcp_input+0x72c>)
 8013ff0:	681a      	ldr	r2, [r3, #0]
 8013ff2:	2300      	movs	r3, #0
 8013ff4:	69f9      	ldr	r1, [r7, #28]
 8013ff6:	47a0      	blx	r4
 8013ff8:	4603      	mov	r3, r0
 8013ffa:	74fb      	strb	r3, [r7, #19]
 8013ffc:	e008      	b.n	8014010 <tcp_input+0x668>
 8013ffe:	4b35      	ldr	r3, [pc, #212]	; (80140d4 <tcp_input+0x72c>)
 8014000:	681a      	ldr	r2, [r3, #0]
 8014002:	2300      	movs	r3, #0
 8014004:	69f9      	ldr	r1, [r7, #28]
 8014006:	2000      	movs	r0, #0
 8014008:	f7ff f95e 	bl	80132c8 <tcp_recv_null>
 801400c:	4603      	mov	r3, r0
 801400e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8014010:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014014:	f113 0f0d 	cmn.w	r3, #13
 8014018:	d053      	beq.n	80140c2 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801401a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801401e:	2b00      	cmp	r3, #0
 8014020:	d003      	beq.n	801402a <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8014022:	4b2c      	ldr	r3, [pc, #176]	; (80140d4 <tcp_input+0x72c>)
 8014024:	681a      	ldr	r2, [r3, #0]
 8014026:	69fb      	ldr	r3, [r7, #28]
 8014028:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801402a:	4b2b      	ldr	r3, [pc, #172]	; (80140d8 <tcp_input+0x730>)
 801402c:	781b      	ldrb	r3, [r3, #0]
 801402e:	f003 0320 	and.w	r3, r3, #32
 8014032:	2b00      	cmp	r3, #0
 8014034:	d030      	beq.n	8014098 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8014036:	69fb      	ldr	r3, [r7, #28]
 8014038:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801403a:	2b00      	cmp	r3, #0
 801403c:	d009      	beq.n	8014052 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801403e:	69fb      	ldr	r3, [r7, #28]
 8014040:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014042:	7b5a      	ldrb	r2, [r3, #13]
 8014044:	69fb      	ldr	r3, [r7, #28]
 8014046:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014048:	f042 0220 	orr.w	r2, r2, #32
 801404c:	b2d2      	uxtb	r2, r2
 801404e:	735a      	strb	r2, [r3, #13]
 8014050:	e022      	b.n	8014098 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8014052:	69fb      	ldr	r3, [r7, #28]
 8014054:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014056:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801405a:	d005      	beq.n	8014068 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 801405c:	69fb      	ldr	r3, [r7, #28]
 801405e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014060:	3301      	adds	r3, #1
 8014062:	b29a      	uxth	r2, r3
 8014064:	69fb      	ldr	r3, [r7, #28]
 8014066:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8014068:	69fb      	ldr	r3, [r7, #28]
 801406a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801406e:	2b00      	cmp	r3, #0
 8014070:	d00b      	beq.n	801408a <tcp_input+0x6e2>
 8014072:	69fb      	ldr	r3, [r7, #28]
 8014074:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8014078:	69fb      	ldr	r3, [r7, #28]
 801407a:	6918      	ldr	r0, [r3, #16]
 801407c:	2300      	movs	r3, #0
 801407e:	2200      	movs	r2, #0
 8014080:	69f9      	ldr	r1, [r7, #28]
 8014082:	47a0      	blx	r4
 8014084:	4603      	mov	r3, r0
 8014086:	74fb      	strb	r3, [r7, #19]
 8014088:	e001      	b.n	801408e <tcp_input+0x6e6>
 801408a:	2300      	movs	r3, #0
 801408c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801408e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014092:	f113 0f0d 	cmn.w	r3, #13
 8014096:	d016      	beq.n	80140c6 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8014098:	4b13      	ldr	r3, [pc, #76]	; (80140e8 <tcp_input+0x740>)
 801409a:	2200      	movs	r2, #0
 801409c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801409e:	69f8      	ldr	r0, [r7, #28]
 80140a0:	f000 f88e 	bl	80141c0 <tcp_input_delayed_close>
 80140a4:	4603      	mov	r3, r0
 80140a6:	2b00      	cmp	r3, #0
 80140a8:	d128      	bne.n	80140fc <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80140aa:	69f8      	ldr	r0, [r7, #28]
 80140ac:	f002 fac8 	bl	8016640 <tcp_output>
 80140b0:	e025      	b.n	80140fe <tcp_input+0x756>
        goto aborted;
 80140b2:	bf00      	nop
 80140b4:	e023      	b.n	80140fe <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80140b6:	bf00      	nop
 80140b8:	e021      	b.n	80140fe <tcp_input+0x756>
              goto aborted;
 80140ba:	bf00      	nop
 80140bc:	e01f      	b.n	80140fe <tcp_input+0x756>
          goto aborted;
 80140be:	bf00      	nop
 80140c0:	e01d      	b.n	80140fe <tcp_input+0x756>
            goto aborted;
 80140c2:	bf00      	nop
 80140c4:	e01b      	b.n	80140fe <tcp_input+0x756>
              goto aborted;
 80140c6:	bf00      	nop
 80140c8:	e019      	b.n	80140fe <tcp_input+0x756>
 80140ca:	bf00      	nop
 80140cc:	200137b0 	.word	0x200137b0
 80140d0:	200137c0 	.word	0x200137c0
 80140d4:	200137e0 	.word	0x200137e0
 80140d8:	200137dd 	.word	0x200137dd
 80140dc:	200137d8 	.word	0x200137d8
 80140e0:	200137dc 	.word	0x200137dc
 80140e4:	200137da 	.word	0x200137da
 80140e8:	2001b7ec 	.word	0x2001b7ec
 80140ec:	2001b7d8 	.word	0x2001b7d8
 80140f0:	08020a3c 	.word	0x08020a3c
 80140f4:	08020bf0 	.word	0x08020bf0
 80140f8:	08020a88 	.word	0x08020a88
          goto aborted;
 80140fc:	bf00      	nop
    tcp_input_pcb = NULL;
 80140fe:	4b27      	ldr	r3, [pc, #156]	; (801419c <tcp_input+0x7f4>)
 8014100:	2200      	movs	r2, #0
 8014102:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8014104:	4b26      	ldr	r3, [pc, #152]	; (80141a0 <tcp_input+0x7f8>)
 8014106:	2200      	movs	r2, #0
 8014108:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 801410a:	4b26      	ldr	r3, [pc, #152]	; (80141a4 <tcp_input+0x7fc>)
 801410c:	685b      	ldr	r3, [r3, #4]
 801410e:	2b00      	cmp	r3, #0
 8014110:	d03f      	beq.n	8014192 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8014112:	4b24      	ldr	r3, [pc, #144]	; (80141a4 <tcp_input+0x7fc>)
 8014114:	685b      	ldr	r3, [r3, #4]
 8014116:	4618      	mov	r0, r3
 8014118:	f7fd fe02 	bl	8011d20 <pbuf_free>
      inseg.p = NULL;
 801411c:	4b21      	ldr	r3, [pc, #132]	; (80141a4 <tcp_input+0x7fc>)
 801411e:	2200      	movs	r2, #0
 8014120:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8014122:	e036      	b.n	8014192 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8014124:	4b20      	ldr	r3, [pc, #128]	; (80141a8 <tcp_input+0x800>)
 8014126:	681b      	ldr	r3, [r3, #0]
 8014128:	899b      	ldrh	r3, [r3, #12]
 801412a:	b29b      	uxth	r3, r3
 801412c:	4618      	mov	r0, r3
 801412e:	f7fc fa3f 	bl	80105b0 <lwip_htons>
 8014132:	4603      	mov	r3, r0
 8014134:	b2db      	uxtb	r3, r3
 8014136:	f003 0304 	and.w	r3, r3, #4
 801413a:	2b00      	cmp	r3, #0
 801413c:	d118      	bne.n	8014170 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801413e:	4b1b      	ldr	r3, [pc, #108]	; (80141ac <tcp_input+0x804>)
 8014140:	6819      	ldr	r1, [r3, #0]
 8014142:	4b1b      	ldr	r3, [pc, #108]	; (80141b0 <tcp_input+0x808>)
 8014144:	881b      	ldrh	r3, [r3, #0]
 8014146:	461a      	mov	r2, r3
 8014148:	4b1a      	ldr	r3, [pc, #104]	; (80141b4 <tcp_input+0x80c>)
 801414a:	681b      	ldr	r3, [r3, #0]
 801414c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801414e:	4b16      	ldr	r3, [pc, #88]	; (80141a8 <tcp_input+0x800>)
 8014150:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014152:	885b      	ldrh	r3, [r3, #2]
 8014154:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014156:	4a14      	ldr	r2, [pc, #80]	; (80141a8 <tcp_input+0x800>)
 8014158:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801415a:	8812      	ldrh	r2, [r2, #0]
 801415c:	b292      	uxth	r2, r2
 801415e:	9202      	str	r2, [sp, #8]
 8014160:	9301      	str	r3, [sp, #4]
 8014162:	4b15      	ldr	r3, [pc, #84]	; (80141b8 <tcp_input+0x810>)
 8014164:	9300      	str	r3, [sp, #0]
 8014166:	4b15      	ldr	r3, [pc, #84]	; (80141bc <tcp_input+0x814>)
 8014168:	4602      	mov	r2, r0
 801416a:	2000      	movs	r0, #0
 801416c:	f003 f81c 	bl	80171a8 <tcp_rst>
    pbuf_free(p);
 8014170:	6878      	ldr	r0, [r7, #4]
 8014172:	f7fd fdd5 	bl	8011d20 <pbuf_free>
  return;
 8014176:	e00c      	b.n	8014192 <tcp_input+0x7ea>
    goto dropped;
 8014178:	bf00      	nop
 801417a:	e006      	b.n	801418a <tcp_input+0x7e2>
    goto dropped;
 801417c:	bf00      	nop
 801417e:	e004      	b.n	801418a <tcp_input+0x7e2>
    goto dropped;
 8014180:	bf00      	nop
 8014182:	e002      	b.n	801418a <tcp_input+0x7e2>
      goto dropped;
 8014184:	bf00      	nop
 8014186:	e000      	b.n	801418a <tcp_input+0x7e2>
      goto dropped;
 8014188:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 801418a:	6878      	ldr	r0, [r7, #4]
 801418c:	f7fd fdc8 	bl	8011d20 <pbuf_free>
 8014190:	e000      	b.n	8014194 <tcp_input+0x7ec>
  return;
 8014192:	bf00      	nop
}
 8014194:	3724      	adds	r7, #36	; 0x24
 8014196:	46bd      	mov	sp, r7
 8014198:	bd90      	pop	{r4, r7, pc}
 801419a:	bf00      	nop
 801419c:	2001b7ec 	.word	0x2001b7ec
 80141a0:	200137e0 	.word	0x200137e0
 80141a4:	200137b0 	.word	0x200137b0
 80141a8:	200137c0 	.word	0x200137c0
 80141ac:	200137d4 	.word	0x200137d4
 80141b0:	200137da 	.word	0x200137da
 80141b4:	200137d0 	.word	0x200137d0
 80141b8:	200172f4 	.word	0x200172f4
 80141bc:	200172f8 	.word	0x200172f8

080141c0 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80141c0:	b580      	push	{r7, lr}
 80141c2:	b082      	sub	sp, #8
 80141c4:	af00      	add	r7, sp, #0
 80141c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80141c8:	687b      	ldr	r3, [r7, #4]
 80141ca:	2b00      	cmp	r3, #0
 80141cc:	d106      	bne.n	80141dc <tcp_input_delayed_close+0x1c>
 80141ce:	4b17      	ldr	r3, [pc, #92]	; (801422c <tcp_input_delayed_close+0x6c>)
 80141d0:	f240 225a 	movw	r2, #602	; 0x25a
 80141d4:	4916      	ldr	r1, [pc, #88]	; (8014230 <tcp_input_delayed_close+0x70>)
 80141d6:	4817      	ldr	r0, [pc, #92]	; (8014234 <tcp_input_delayed_close+0x74>)
 80141d8:	f009 f952 	bl	801d480 <iprintf>

  if (recv_flags & TF_CLOSED) {
 80141dc:	4b16      	ldr	r3, [pc, #88]	; (8014238 <tcp_input_delayed_close+0x78>)
 80141de:	781b      	ldrb	r3, [r3, #0]
 80141e0:	f003 0310 	and.w	r3, r3, #16
 80141e4:	2b00      	cmp	r3, #0
 80141e6:	d01c      	beq.n	8014222 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	8b5b      	ldrh	r3, [r3, #26]
 80141ec:	f003 0310 	and.w	r3, r3, #16
 80141f0:	2b00      	cmp	r3, #0
 80141f2:	d10d      	bne.n	8014210 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80141f4:	687b      	ldr	r3, [r7, #4]
 80141f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80141fa:	2b00      	cmp	r3, #0
 80141fc:	d008      	beq.n	8014210 <tcp_input_delayed_close+0x50>
 80141fe:	687b      	ldr	r3, [r7, #4]
 8014200:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014204:	687a      	ldr	r2, [r7, #4]
 8014206:	6912      	ldr	r2, [r2, #16]
 8014208:	f06f 010e 	mvn.w	r1, #14
 801420c:	4610      	mov	r0, r2
 801420e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8014210:	6879      	ldr	r1, [r7, #4]
 8014212:	480a      	ldr	r0, [pc, #40]	; (801423c <tcp_input_delayed_close+0x7c>)
 8014214:	f7ff fa50 	bl	80136b8 <tcp_pcb_remove>
    tcp_free(pcb);
 8014218:	6878      	ldr	r0, [r7, #4]
 801421a:	f7fe f83d 	bl	8012298 <tcp_free>
    return 1;
 801421e:	2301      	movs	r3, #1
 8014220:	e000      	b.n	8014224 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8014222:	2300      	movs	r3, #0
}
 8014224:	4618      	mov	r0, r3
 8014226:	3708      	adds	r7, #8
 8014228:	46bd      	mov	sp, r7
 801422a:	bd80      	pop	{r7, pc}
 801422c:	08020a3c 	.word	0x08020a3c
 8014230:	08020c0c 	.word	0x08020c0c
 8014234:	08020a88 	.word	0x08020a88
 8014238:	200137dd 	.word	0x200137dd
 801423c:	2001b7d8 	.word	0x2001b7d8

08014240 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8014240:	b590      	push	{r4, r7, lr}
 8014242:	b08b      	sub	sp, #44	; 0x2c
 8014244:	af04      	add	r7, sp, #16
 8014246:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8014248:	4b6f      	ldr	r3, [pc, #444]	; (8014408 <tcp_listen_input+0x1c8>)
 801424a:	781b      	ldrb	r3, [r3, #0]
 801424c:	f003 0304 	and.w	r3, r3, #4
 8014250:	2b00      	cmp	r3, #0
 8014252:	f040 80d2 	bne.w	80143fa <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	2b00      	cmp	r3, #0
 801425a:	d106      	bne.n	801426a <tcp_listen_input+0x2a>
 801425c:	4b6b      	ldr	r3, [pc, #428]	; (801440c <tcp_listen_input+0x1cc>)
 801425e:	f240 2281 	movw	r2, #641	; 0x281
 8014262:	496b      	ldr	r1, [pc, #428]	; (8014410 <tcp_listen_input+0x1d0>)
 8014264:	486b      	ldr	r0, [pc, #428]	; (8014414 <tcp_listen_input+0x1d4>)
 8014266:	f009 f90b 	bl	801d480 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801426a:	4b67      	ldr	r3, [pc, #412]	; (8014408 <tcp_listen_input+0x1c8>)
 801426c:	781b      	ldrb	r3, [r3, #0]
 801426e:	f003 0310 	and.w	r3, r3, #16
 8014272:	2b00      	cmp	r3, #0
 8014274:	d019      	beq.n	80142aa <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014276:	4b68      	ldr	r3, [pc, #416]	; (8014418 <tcp_listen_input+0x1d8>)
 8014278:	6819      	ldr	r1, [r3, #0]
 801427a:	4b68      	ldr	r3, [pc, #416]	; (801441c <tcp_listen_input+0x1dc>)
 801427c:	881b      	ldrh	r3, [r3, #0]
 801427e:	461a      	mov	r2, r3
 8014280:	4b67      	ldr	r3, [pc, #412]	; (8014420 <tcp_listen_input+0x1e0>)
 8014282:	681b      	ldr	r3, [r3, #0]
 8014284:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014286:	4b67      	ldr	r3, [pc, #412]	; (8014424 <tcp_listen_input+0x1e4>)
 8014288:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801428a:	885b      	ldrh	r3, [r3, #2]
 801428c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801428e:	4a65      	ldr	r2, [pc, #404]	; (8014424 <tcp_listen_input+0x1e4>)
 8014290:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014292:	8812      	ldrh	r2, [r2, #0]
 8014294:	b292      	uxth	r2, r2
 8014296:	9202      	str	r2, [sp, #8]
 8014298:	9301      	str	r3, [sp, #4]
 801429a:	4b63      	ldr	r3, [pc, #396]	; (8014428 <tcp_listen_input+0x1e8>)
 801429c:	9300      	str	r3, [sp, #0]
 801429e:	4b63      	ldr	r3, [pc, #396]	; (801442c <tcp_listen_input+0x1ec>)
 80142a0:	4602      	mov	r2, r0
 80142a2:	6878      	ldr	r0, [r7, #4]
 80142a4:	f002 ff80 	bl	80171a8 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80142a8:	e0a9      	b.n	80143fe <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 80142aa:	4b57      	ldr	r3, [pc, #348]	; (8014408 <tcp_listen_input+0x1c8>)
 80142ac:	781b      	ldrb	r3, [r3, #0]
 80142ae:	f003 0302 	and.w	r3, r3, #2
 80142b2:	2b00      	cmp	r3, #0
 80142b4:	f000 80a3 	beq.w	80143fe <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 80142b8:	687b      	ldr	r3, [r7, #4]
 80142ba:	7d5b      	ldrb	r3, [r3, #21]
 80142bc:	4618      	mov	r0, r3
 80142be:	f7ff f927 	bl	8013510 <tcp_alloc>
 80142c2:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80142c4:	697b      	ldr	r3, [r7, #20]
 80142c6:	2b00      	cmp	r3, #0
 80142c8:	d111      	bne.n	80142ee <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80142ca:	687b      	ldr	r3, [r7, #4]
 80142cc:	699b      	ldr	r3, [r3, #24]
 80142ce:	2b00      	cmp	r3, #0
 80142d0:	d00a      	beq.n	80142e8 <tcp_listen_input+0xa8>
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	699b      	ldr	r3, [r3, #24]
 80142d6:	687a      	ldr	r2, [r7, #4]
 80142d8:	6910      	ldr	r0, [r2, #16]
 80142da:	f04f 32ff 	mov.w	r2, #4294967295
 80142de:	2100      	movs	r1, #0
 80142e0:	4798      	blx	r3
 80142e2:	4603      	mov	r3, r0
 80142e4:	73bb      	strb	r3, [r7, #14]
      return;
 80142e6:	e08b      	b.n	8014400 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80142e8:	23f0      	movs	r3, #240	; 0xf0
 80142ea:	73bb      	strb	r3, [r7, #14]
      return;
 80142ec:	e088      	b.n	8014400 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80142ee:	4b50      	ldr	r3, [pc, #320]	; (8014430 <tcp_listen_input+0x1f0>)
 80142f0:	695a      	ldr	r2, [r3, #20]
 80142f2:	697b      	ldr	r3, [r7, #20]
 80142f4:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80142f6:	4b4e      	ldr	r3, [pc, #312]	; (8014430 <tcp_listen_input+0x1f0>)
 80142f8:	691a      	ldr	r2, [r3, #16]
 80142fa:	697b      	ldr	r3, [r7, #20]
 80142fc:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80142fe:	687b      	ldr	r3, [r7, #4]
 8014300:	8ada      	ldrh	r2, [r3, #22]
 8014302:	697b      	ldr	r3, [r7, #20]
 8014304:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8014306:	4b47      	ldr	r3, [pc, #284]	; (8014424 <tcp_listen_input+0x1e4>)
 8014308:	681b      	ldr	r3, [r3, #0]
 801430a:	881b      	ldrh	r3, [r3, #0]
 801430c:	b29a      	uxth	r2, r3
 801430e:	697b      	ldr	r3, [r7, #20]
 8014310:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8014312:	697b      	ldr	r3, [r7, #20]
 8014314:	2203      	movs	r2, #3
 8014316:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8014318:	4b41      	ldr	r3, [pc, #260]	; (8014420 <tcp_listen_input+0x1e0>)
 801431a:	681b      	ldr	r3, [r3, #0]
 801431c:	1c5a      	adds	r2, r3, #1
 801431e:	697b      	ldr	r3, [r7, #20]
 8014320:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8014322:	697b      	ldr	r3, [r7, #20]
 8014324:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014326:	697b      	ldr	r3, [r7, #20]
 8014328:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 801432a:	6978      	ldr	r0, [r7, #20]
 801432c:	f7ff fa58 	bl	80137e0 <tcp_next_iss>
 8014330:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8014332:	697b      	ldr	r3, [r7, #20]
 8014334:	693a      	ldr	r2, [r7, #16]
 8014336:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8014338:	697b      	ldr	r3, [r7, #20]
 801433a:	693a      	ldr	r2, [r7, #16]
 801433c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 801433e:	697b      	ldr	r3, [r7, #20]
 8014340:	693a      	ldr	r2, [r7, #16]
 8014342:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8014344:	697b      	ldr	r3, [r7, #20]
 8014346:	693a      	ldr	r2, [r7, #16]
 8014348:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801434a:	4b35      	ldr	r3, [pc, #212]	; (8014420 <tcp_listen_input+0x1e0>)
 801434c:	681b      	ldr	r3, [r3, #0]
 801434e:	1e5a      	subs	r2, r3, #1
 8014350:	697b      	ldr	r3, [r7, #20]
 8014352:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	691a      	ldr	r2, [r3, #16]
 8014358:	697b      	ldr	r3, [r7, #20]
 801435a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 801435c:	697b      	ldr	r3, [r7, #20]
 801435e:	687a      	ldr	r2, [r7, #4]
 8014360:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8014362:	687b      	ldr	r3, [r7, #4]
 8014364:	7a5b      	ldrb	r3, [r3, #9]
 8014366:	f003 030c 	and.w	r3, r3, #12
 801436a:	b2da      	uxtb	r2, r3
 801436c:	697b      	ldr	r3, [r7, #20]
 801436e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8014370:	687b      	ldr	r3, [r7, #4]
 8014372:	7a1a      	ldrb	r2, [r3, #8]
 8014374:	697b      	ldr	r3, [r7, #20]
 8014376:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8014378:	4b2e      	ldr	r3, [pc, #184]	; (8014434 <tcp_listen_input+0x1f4>)
 801437a:	681a      	ldr	r2, [r3, #0]
 801437c:	697b      	ldr	r3, [r7, #20]
 801437e:	60da      	str	r2, [r3, #12]
 8014380:	4a2c      	ldr	r2, [pc, #176]	; (8014434 <tcp_listen_input+0x1f4>)
 8014382:	697b      	ldr	r3, [r7, #20]
 8014384:	6013      	str	r3, [r2, #0]
 8014386:	f003 f8d1 	bl	801752c <tcp_timer_needed>
 801438a:	4b2b      	ldr	r3, [pc, #172]	; (8014438 <tcp_listen_input+0x1f8>)
 801438c:	2201      	movs	r2, #1
 801438e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8014390:	6978      	ldr	r0, [r7, #20]
 8014392:	f001 fd8f 	bl	8015eb4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8014396:	4b23      	ldr	r3, [pc, #140]	; (8014424 <tcp_listen_input+0x1e4>)
 8014398:	681b      	ldr	r3, [r3, #0]
 801439a:	89db      	ldrh	r3, [r3, #14]
 801439c:	b29a      	uxth	r2, r3
 801439e:	697b      	ldr	r3, [r7, #20]
 80143a0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80143a4:	697b      	ldr	r3, [r7, #20]
 80143a6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80143aa:	697b      	ldr	r3, [r7, #20]
 80143ac:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80143b0:	697b      	ldr	r3, [r7, #20]
 80143b2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80143b4:	697b      	ldr	r3, [r7, #20]
 80143b6:	3304      	adds	r3, #4
 80143b8:	4618      	mov	r0, r3
 80143ba:	f006 fe5d 	bl	801b078 <ip4_route>
 80143be:	4601      	mov	r1, r0
 80143c0:	697b      	ldr	r3, [r7, #20]
 80143c2:	3304      	adds	r3, #4
 80143c4:	461a      	mov	r2, r3
 80143c6:	4620      	mov	r0, r4
 80143c8:	f7ff fa30 	bl	801382c <tcp_eff_send_mss_netif>
 80143cc:	4603      	mov	r3, r0
 80143ce:	461a      	mov	r2, r3
 80143d0:	697b      	ldr	r3, [r7, #20]
 80143d2:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80143d4:	2112      	movs	r1, #18
 80143d6:	6978      	ldr	r0, [r7, #20]
 80143d8:	f002 f844 	bl	8016464 <tcp_enqueue_flags>
 80143dc:	4603      	mov	r3, r0
 80143de:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80143e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80143e4:	2b00      	cmp	r3, #0
 80143e6:	d004      	beq.n	80143f2 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80143e8:	2100      	movs	r1, #0
 80143ea:	6978      	ldr	r0, [r7, #20]
 80143ec:	f7fe f97e 	bl	80126ec <tcp_abandon>
      return;
 80143f0:	e006      	b.n	8014400 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80143f2:	6978      	ldr	r0, [r7, #20]
 80143f4:	f002 f924 	bl	8016640 <tcp_output>
  return;
 80143f8:	e001      	b.n	80143fe <tcp_listen_input+0x1be>
    return;
 80143fa:	bf00      	nop
 80143fc:	e000      	b.n	8014400 <tcp_listen_input+0x1c0>
  return;
 80143fe:	bf00      	nop
}
 8014400:	371c      	adds	r7, #28
 8014402:	46bd      	mov	sp, r7
 8014404:	bd90      	pop	{r4, r7, pc}
 8014406:	bf00      	nop
 8014408:	200137dc 	.word	0x200137dc
 801440c:	08020a3c 	.word	0x08020a3c
 8014410:	08020c34 	.word	0x08020c34
 8014414:	08020a88 	.word	0x08020a88
 8014418:	200137d4 	.word	0x200137d4
 801441c:	200137da 	.word	0x200137da
 8014420:	200137d0 	.word	0x200137d0
 8014424:	200137c0 	.word	0x200137c0
 8014428:	200172f4 	.word	0x200172f4
 801442c:	200172f8 	.word	0x200172f8
 8014430:	200172e4 	.word	0x200172e4
 8014434:	2001b7d8 	.word	0x2001b7d8
 8014438:	2001b7d4 	.word	0x2001b7d4

0801443c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 801443c:	b580      	push	{r7, lr}
 801443e:	b086      	sub	sp, #24
 8014440:	af04      	add	r7, sp, #16
 8014442:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8014444:	4b2f      	ldr	r3, [pc, #188]	; (8014504 <tcp_timewait_input+0xc8>)
 8014446:	781b      	ldrb	r3, [r3, #0]
 8014448:	f003 0304 	and.w	r3, r3, #4
 801444c:	2b00      	cmp	r3, #0
 801444e:	d153      	bne.n	80144f8 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	2b00      	cmp	r3, #0
 8014454:	d106      	bne.n	8014464 <tcp_timewait_input+0x28>
 8014456:	4b2c      	ldr	r3, [pc, #176]	; (8014508 <tcp_timewait_input+0xcc>)
 8014458:	f240 22ee 	movw	r2, #750	; 0x2ee
 801445c:	492b      	ldr	r1, [pc, #172]	; (801450c <tcp_timewait_input+0xd0>)
 801445e:	482c      	ldr	r0, [pc, #176]	; (8014510 <tcp_timewait_input+0xd4>)
 8014460:	f009 f80e 	bl	801d480 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8014464:	4b27      	ldr	r3, [pc, #156]	; (8014504 <tcp_timewait_input+0xc8>)
 8014466:	781b      	ldrb	r3, [r3, #0]
 8014468:	f003 0302 	and.w	r3, r3, #2
 801446c:	2b00      	cmp	r3, #0
 801446e:	d02a      	beq.n	80144c6 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8014470:	4b28      	ldr	r3, [pc, #160]	; (8014514 <tcp_timewait_input+0xd8>)
 8014472:	681a      	ldr	r2, [r3, #0]
 8014474:	687b      	ldr	r3, [r7, #4]
 8014476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014478:	1ad3      	subs	r3, r2, r3
 801447a:	2b00      	cmp	r3, #0
 801447c:	db2d      	blt.n	80144da <tcp_timewait_input+0x9e>
 801447e:	4b25      	ldr	r3, [pc, #148]	; (8014514 <tcp_timewait_input+0xd8>)
 8014480:	681a      	ldr	r2, [r3, #0]
 8014482:	687b      	ldr	r3, [r7, #4]
 8014484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014486:	6879      	ldr	r1, [r7, #4]
 8014488:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801448a:	440b      	add	r3, r1
 801448c:	1ad3      	subs	r3, r2, r3
 801448e:	2b00      	cmp	r3, #0
 8014490:	dc23      	bgt.n	80144da <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014492:	4b21      	ldr	r3, [pc, #132]	; (8014518 <tcp_timewait_input+0xdc>)
 8014494:	6819      	ldr	r1, [r3, #0]
 8014496:	4b21      	ldr	r3, [pc, #132]	; (801451c <tcp_timewait_input+0xe0>)
 8014498:	881b      	ldrh	r3, [r3, #0]
 801449a:	461a      	mov	r2, r3
 801449c:	4b1d      	ldr	r3, [pc, #116]	; (8014514 <tcp_timewait_input+0xd8>)
 801449e:	681b      	ldr	r3, [r3, #0]
 80144a0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80144a2:	4b1f      	ldr	r3, [pc, #124]	; (8014520 <tcp_timewait_input+0xe4>)
 80144a4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80144a6:	885b      	ldrh	r3, [r3, #2]
 80144a8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80144aa:	4a1d      	ldr	r2, [pc, #116]	; (8014520 <tcp_timewait_input+0xe4>)
 80144ac:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80144ae:	8812      	ldrh	r2, [r2, #0]
 80144b0:	b292      	uxth	r2, r2
 80144b2:	9202      	str	r2, [sp, #8]
 80144b4:	9301      	str	r3, [sp, #4]
 80144b6:	4b1b      	ldr	r3, [pc, #108]	; (8014524 <tcp_timewait_input+0xe8>)
 80144b8:	9300      	str	r3, [sp, #0]
 80144ba:	4b1b      	ldr	r3, [pc, #108]	; (8014528 <tcp_timewait_input+0xec>)
 80144bc:	4602      	mov	r2, r0
 80144be:	6878      	ldr	r0, [r7, #4]
 80144c0:	f002 fe72 	bl	80171a8 <tcp_rst>
      return;
 80144c4:	e01b      	b.n	80144fe <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 80144c6:	4b0f      	ldr	r3, [pc, #60]	; (8014504 <tcp_timewait_input+0xc8>)
 80144c8:	781b      	ldrb	r3, [r3, #0]
 80144ca:	f003 0301 	and.w	r3, r3, #1
 80144ce:	2b00      	cmp	r3, #0
 80144d0:	d003      	beq.n	80144da <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80144d2:	4b16      	ldr	r3, [pc, #88]	; (801452c <tcp_timewait_input+0xf0>)
 80144d4:	681a      	ldr	r2, [r3, #0]
 80144d6:	687b      	ldr	r3, [r7, #4]
 80144d8:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80144da:	4b10      	ldr	r3, [pc, #64]	; (801451c <tcp_timewait_input+0xe0>)
 80144dc:	881b      	ldrh	r3, [r3, #0]
 80144de:	2b00      	cmp	r3, #0
 80144e0:	d00c      	beq.n	80144fc <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80144e2:	687b      	ldr	r3, [r7, #4]
 80144e4:	8b5b      	ldrh	r3, [r3, #26]
 80144e6:	f043 0302 	orr.w	r3, r3, #2
 80144ea:	b29a      	uxth	r2, r3
 80144ec:	687b      	ldr	r3, [r7, #4]
 80144ee:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80144f0:	6878      	ldr	r0, [r7, #4]
 80144f2:	f002 f8a5 	bl	8016640 <tcp_output>
  }
  return;
 80144f6:	e001      	b.n	80144fc <tcp_timewait_input+0xc0>
    return;
 80144f8:	bf00      	nop
 80144fa:	e000      	b.n	80144fe <tcp_timewait_input+0xc2>
  return;
 80144fc:	bf00      	nop
}
 80144fe:	3708      	adds	r7, #8
 8014500:	46bd      	mov	sp, r7
 8014502:	bd80      	pop	{r7, pc}
 8014504:	200137dc 	.word	0x200137dc
 8014508:	08020a3c 	.word	0x08020a3c
 801450c:	08020c54 	.word	0x08020c54
 8014510:	08020a88 	.word	0x08020a88
 8014514:	200137d0 	.word	0x200137d0
 8014518:	200137d4 	.word	0x200137d4
 801451c:	200137da 	.word	0x200137da
 8014520:	200137c0 	.word	0x200137c0
 8014524:	200172f4 	.word	0x200172f4
 8014528:	200172f8 	.word	0x200172f8
 801452c:	2001b7dc 	.word	0x2001b7dc

08014530 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8014530:	b590      	push	{r4, r7, lr}
 8014532:	b08d      	sub	sp, #52	; 0x34
 8014534:	af04      	add	r7, sp, #16
 8014536:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8014538:	2300      	movs	r3, #0
 801453a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 801453c:	2300      	movs	r3, #0
 801453e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8014540:	687b      	ldr	r3, [r7, #4]
 8014542:	2b00      	cmp	r3, #0
 8014544:	d106      	bne.n	8014554 <tcp_process+0x24>
 8014546:	4b9d      	ldr	r3, [pc, #628]	; (80147bc <tcp_process+0x28c>)
 8014548:	f44f 7247 	mov.w	r2, #796	; 0x31c
 801454c:	499c      	ldr	r1, [pc, #624]	; (80147c0 <tcp_process+0x290>)
 801454e:	489d      	ldr	r0, [pc, #628]	; (80147c4 <tcp_process+0x294>)
 8014550:	f008 ff96 	bl	801d480 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8014554:	4b9c      	ldr	r3, [pc, #624]	; (80147c8 <tcp_process+0x298>)
 8014556:	781b      	ldrb	r3, [r3, #0]
 8014558:	f003 0304 	and.w	r3, r3, #4
 801455c:	2b00      	cmp	r3, #0
 801455e:	d04e      	beq.n	80145fe <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8014560:	687b      	ldr	r3, [r7, #4]
 8014562:	7d1b      	ldrb	r3, [r3, #20]
 8014564:	2b02      	cmp	r3, #2
 8014566:	d108      	bne.n	801457a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8014568:	687b      	ldr	r3, [r7, #4]
 801456a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801456c:	4b97      	ldr	r3, [pc, #604]	; (80147cc <tcp_process+0x29c>)
 801456e:	681b      	ldr	r3, [r3, #0]
 8014570:	429a      	cmp	r2, r3
 8014572:	d123      	bne.n	80145bc <tcp_process+0x8c>
        acceptable = 1;
 8014574:	2301      	movs	r3, #1
 8014576:	76fb      	strb	r3, [r7, #27]
 8014578:	e020      	b.n	80145bc <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801457a:	687b      	ldr	r3, [r7, #4]
 801457c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801457e:	4b94      	ldr	r3, [pc, #592]	; (80147d0 <tcp_process+0x2a0>)
 8014580:	681b      	ldr	r3, [r3, #0]
 8014582:	429a      	cmp	r2, r3
 8014584:	d102      	bne.n	801458c <tcp_process+0x5c>
        acceptable = 1;
 8014586:	2301      	movs	r3, #1
 8014588:	76fb      	strb	r3, [r7, #27]
 801458a:	e017      	b.n	80145bc <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801458c:	4b90      	ldr	r3, [pc, #576]	; (80147d0 <tcp_process+0x2a0>)
 801458e:	681a      	ldr	r2, [r3, #0]
 8014590:	687b      	ldr	r3, [r7, #4]
 8014592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014594:	1ad3      	subs	r3, r2, r3
 8014596:	2b00      	cmp	r3, #0
 8014598:	db10      	blt.n	80145bc <tcp_process+0x8c>
 801459a:	4b8d      	ldr	r3, [pc, #564]	; (80147d0 <tcp_process+0x2a0>)
 801459c:	681a      	ldr	r2, [r3, #0]
 801459e:	687b      	ldr	r3, [r7, #4]
 80145a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80145a2:	6879      	ldr	r1, [r7, #4]
 80145a4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80145a6:	440b      	add	r3, r1
 80145a8:	1ad3      	subs	r3, r2, r3
 80145aa:	2b00      	cmp	r3, #0
 80145ac:	dc06      	bgt.n	80145bc <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80145ae:	687b      	ldr	r3, [r7, #4]
 80145b0:	8b5b      	ldrh	r3, [r3, #26]
 80145b2:	f043 0302 	orr.w	r3, r3, #2
 80145b6:	b29a      	uxth	r2, r3
 80145b8:	687b      	ldr	r3, [r7, #4]
 80145ba:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80145bc:	7efb      	ldrb	r3, [r7, #27]
 80145be:	2b00      	cmp	r3, #0
 80145c0:	d01b      	beq.n	80145fa <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80145c2:	687b      	ldr	r3, [r7, #4]
 80145c4:	7d1b      	ldrb	r3, [r3, #20]
 80145c6:	2b00      	cmp	r3, #0
 80145c8:	d106      	bne.n	80145d8 <tcp_process+0xa8>
 80145ca:	4b7c      	ldr	r3, [pc, #496]	; (80147bc <tcp_process+0x28c>)
 80145cc:	f44f 724e 	mov.w	r2, #824	; 0x338
 80145d0:	4980      	ldr	r1, [pc, #512]	; (80147d4 <tcp_process+0x2a4>)
 80145d2:	487c      	ldr	r0, [pc, #496]	; (80147c4 <tcp_process+0x294>)
 80145d4:	f008 ff54 	bl	801d480 <iprintf>
      recv_flags |= TF_RESET;
 80145d8:	4b7f      	ldr	r3, [pc, #508]	; (80147d8 <tcp_process+0x2a8>)
 80145da:	781b      	ldrb	r3, [r3, #0]
 80145dc:	f043 0308 	orr.w	r3, r3, #8
 80145e0:	b2da      	uxtb	r2, r3
 80145e2:	4b7d      	ldr	r3, [pc, #500]	; (80147d8 <tcp_process+0x2a8>)
 80145e4:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80145e6:	687b      	ldr	r3, [r7, #4]
 80145e8:	8b5b      	ldrh	r3, [r3, #26]
 80145ea:	f023 0301 	bic.w	r3, r3, #1
 80145ee:	b29a      	uxth	r2, r3
 80145f0:	687b      	ldr	r3, [r7, #4]
 80145f2:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80145f4:	f06f 030d 	mvn.w	r3, #13
 80145f8:	e37a      	b.n	8014cf0 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80145fa:	2300      	movs	r3, #0
 80145fc:	e378      	b.n	8014cf0 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80145fe:	4b72      	ldr	r3, [pc, #456]	; (80147c8 <tcp_process+0x298>)
 8014600:	781b      	ldrb	r3, [r3, #0]
 8014602:	f003 0302 	and.w	r3, r3, #2
 8014606:	2b00      	cmp	r3, #0
 8014608:	d010      	beq.n	801462c <tcp_process+0xfc>
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	7d1b      	ldrb	r3, [r3, #20]
 801460e:	2b02      	cmp	r3, #2
 8014610:	d00c      	beq.n	801462c <tcp_process+0xfc>
 8014612:	687b      	ldr	r3, [r7, #4]
 8014614:	7d1b      	ldrb	r3, [r3, #20]
 8014616:	2b03      	cmp	r3, #3
 8014618:	d008      	beq.n	801462c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801461a:	687b      	ldr	r3, [r7, #4]
 801461c:	8b5b      	ldrh	r3, [r3, #26]
 801461e:	f043 0302 	orr.w	r3, r3, #2
 8014622:	b29a      	uxth	r2, r3
 8014624:	687b      	ldr	r3, [r7, #4]
 8014626:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8014628:	2300      	movs	r3, #0
 801462a:	e361      	b.n	8014cf0 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801462c:	687b      	ldr	r3, [r7, #4]
 801462e:	8b5b      	ldrh	r3, [r3, #26]
 8014630:	f003 0310 	and.w	r3, r3, #16
 8014634:	2b00      	cmp	r3, #0
 8014636:	d103      	bne.n	8014640 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8014638:	4b68      	ldr	r3, [pc, #416]	; (80147dc <tcp_process+0x2ac>)
 801463a:	681a      	ldr	r2, [r3, #0]
 801463c:	687b      	ldr	r3, [r7, #4]
 801463e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	2200      	movs	r2, #0
 8014644:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8014648:	687b      	ldr	r3, [r7, #4]
 801464a:	2200      	movs	r2, #0
 801464c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8014650:	6878      	ldr	r0, [r7, #4]
 8014652:	f001 fc2f 	bl	8015eb4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8014656:	687b      	ldr	r3, [r7, #4]
 8014658:	7d1b      	ldrb	r3, [r3, #20]
 801465a:	3b02      	subs	r3, #2
 801465c:	2b07      	cmp	r3, #7
 801465e:	f200 8337 	bhi.w	8014cd0 <tcp_process+0x7a0>
 8014662:	a201      	add	r2, pc, #4	; (adr r2, 8014668 <tcp_process+0x138>)
 8014664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014668:	08014689 	.word	0x08014689
 801466c:	080148b9 	.word	0x080148b9
 8014670:	08014a31 	.word	0x08014a31
 8014674:	08014a5b 	.word	0x08014a5b
 8014678:	08014b7f 	.word	0x08014b7f
 801467c:	08014a31 	.word	0x08014a31
 8014680:	08014c0b 	.word	0x08014c0b
 8014684:	08014c9b 	.word	0x08014c9b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8014688:	4b4f      	ldr	r3, [pc, #316]	; (80147c8 <tcp_process+0x298>)
 801468a:	781b      	ldrb	r3, [r3, #0]
 801468c:	f003 0310 	and.w	r3, r3, #16
 8014690:	2b00      	cmp	r3, #0
 8014692:	f000 80e4 	beq.w	801485e <tcp_process+0x32e>
 8014696:	4b4c      	ldr	r3, [pc, #304]	; (80147c8 <tcp_process+0x298>)
 8014698:	781b      	ldrb	r3, [r3, #0]
 801469a:	f003 0302 	and.w	r3, r3, #2
 801469e:	2b00      	cmp	r3, #0
 80146a0:	f000 80dd 	beq.w	801485e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80146a8:	1c5a      	adds	r2, r3, #1
 80146aa:	4b48      	ldr	r3, [pc, #288]	; (80147cc <tcp_process+0x29c>)
 80146ac:	681b      	ldr	r3, [r3, #0]
 80146ae:	429a      	cmp	r2, r3
 80146b0:	f040 80d5 	bne.w	801485e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80146b4:	4b46      	ldr	r3, [pc, #280]	; (80147d0 <tcp_process+0x2a0>)
 80146b6:	681b      	ldr	r3, [r3, #0]
 80146b8:	1c5a      	adds	r2, r3, #1
 80146ba:	687b      	ldr	r3, [r7, #4]
 80146bc:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80146be:	687b      	ldr	r3, [r7, #4]
 80146c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80146c2:	687b      	ldr	r3, [r7, #4]
 80146c4:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 80146c6:	4b41      	ldr	r3, [pc, #260]	; (80147cc <tcp_process+0x29c>)
 80146c8:	681a      	ldr	r2, [r3, #0]
 80146ca:	687b      	ldr	r3, [r7, #4]
 80146cc:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80146ce:	4b44      	ldr	r3, [pc, #272]	; (80147e0 <tcp_process+0x2b0>)
 80146d0:	681b      	ldr	r3, [r3, #0]
 80146d2:	89db      	ldrh	r3, [r3, #14]
 80146d4:	b29a      	uxth	r2, r3
 80146d6:	687b      	ldr	r3, [r7, #4]
 80146d8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80146dc:	687b      	ldr	r3, [r7, #4]
 80146de:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80146e2:	687b      	ldr	r3, [r7, #4]
 80146e4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80146e8:	4b39      	ldr	r3, [pc, #228]	; (80147d0 <tcp_process+0x2a0>)
 80146ea:	681b      	ldr	r3, [r3, #0]
 80146ec:	1e5a      	subs	r2, r3, #1
 80146ee:	687b      	ldr	r3, [r7, #4]
 80146f0:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 80146f2:	687b      	ldr	r3, [r7, #4]
 80146f4:	2204      	movs	r2, #4
 80146f6:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80146f8:	687b      	ldr	r3, [r7, #4]
 80146fa:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80146fc:	687b      	ldr	r3, [r7, #4]
 80146fe:	3304      	adds	r3, #4
 8014700:	4618      	mov	r0, r3
 8014702:	f006 fcb9 	bl	801b078 <ip4_route>
 8014706:	4601      	mov	r1, r0
 8014708:	687b      	ldr	r3, [r7, #4]
 801470a:	3304      	adds	r3, #4
 801470c:	461a      	mov	r2, r3
 801470e:	4620      	mov	r0, r4
 8014710:	f7ff f88c 	bl	801382c <tcp_eff_send_mss_netif>
 8014714:	4603      	mov	r3, r0
 8014716:	461a      	mov	r2, r3
 8014718:	687b      	ldr	r3, [r7, #4]
 801471a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801471c:	687b      	ldr	r3, [r7, #4]
 801471e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014720:	009a      	lsls	r2, r3, #2
 8014722:	687b      	ldr	r3, [r7, #4]
 8014724:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014726:	005b      	lsls	r3, r3, #1
 8014728:	f241 111c 	movw	r1, #4380	; 0x111c
 801472c:	428b      	cmp	r3, r1
 801472e:	bf38      	it	cc
 8014730:	460b      	movcc	r3, r1
 8014732:	429a      	cmp	r2, r3
 8014734:	d204      	bcs.n	8014740 <tcp_process+0x210>
 8014736:	687b      	ldr	r3, [r7, #4]
 8014738:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801473a:	009b      	lsls	r3, r3, #2
 801473c:	b29b      	uxth	r3, r3
 801473e:	e00d      	b.n	801475c <tcp_process+0x22c>
 8014740:	687b      	ldr	r3, [r7, #4]
 8014742:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014744:	005b      	lsls	r3, r3, #1
 8014746:	f241 121c 	movw	r2, #4380	; 0x111c
 801474a:	4293      	cmp	r3, r2
 801474c:	d904      	bls.n	8014758 <tcp_process+0x228>
 801474e:	687b      	ldr	r3, [r7, #4]
 8014750:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014752:	005b      	lsls	r3, r3, #1
 8014754:	b29b      	uxth	r3, r3
 8014756:	e001      	b.n	801475c <tcp_process+0x22c>
 8014758:	f241 131c 	movw	r3, #4380	; 0x111c
 801475c:	687a      	ldr	r2, [r7, #4]
 801475e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8014762:	687b      	ldr	r3, [r7, #4]
 8014764:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014768:	2b00      	cmp	r3, #0
 801476a:	d106      	bne.n	801477a <tcp_process+0x24a>
 801476c:	4b13      	ldr	r3, [pc, #76]	; (80147bc <tcp_process+0x28c>)
 801476e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8014772:	491c      	ldr	r1, [pc, #112]	; (80147e4 <tcp_process+0x2b4>)
 8014774:	4813      	ldr	r0, [pc, #76]	; (80147c4 <tcp_process+0x294>)
 8014776:	f008 fe83 	bl	801d480 <iprintf>
        --pcb->snd_queuelen;
 801477a:	687b      	ldr	r3, [r7, #4]
 801477c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014780:	3b01      	subs	r3, #1
 8014782:	b29a      	uxth	r2, r3
 8014784:	687b      	ldr	r3, [r7, #4]
 8014786:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801478e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8014790:	69fb      	ldr	r3, [r7, #28]
 8014792:	2b00      	cmp	r3, #0
 8014794:	d12a      	bne.n	80147ec <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8014796:	687b      	ldr	r3, [r7, #4]
 8014798:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801479a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801479c:	69fb      	ldr	r3, [r7, #28]
 801479e:	2b00      	cmp	r3, #0
 80147a0:	d106      	bne.n	80147b0 <tcp_process+0x280>
 80147a2:	4b06      	ldr	r3, [pc, #24]	; (80147bc <tcp_process+0x28c>)
 80147a4:	f44f 725d 	mov.w	r2, #884	; 0x374
 80147a8:	490f      	ldr	r1, [pc, #60]	; (80147e8 <tcp_process+0x2b8>)
 80147aa:	4806      	ldr	r0, [pc, #24]	; (80147c4 <tcp_process+0x294>)
 80147ac:	f008 fe68 	bl	801d480 <iprintf>
          pcb->unsent = rseg->next;
 80147b0:	69fb      	ldr	r3, [r7, #28]
 80147b2:	681a      	ldr	r2, [r3, #0]
 80147b4:	687b      	ldr	r3, [r7, #4]
 80147b6:	66da      	str	r2, [r3, #108]	; 0x6c
 80147b8:	e01c      	b.n	80147f4 <tcp_process+0x2c4>
 80147ba:	bf00      	nop
 80147bc:	08020a3c 	.word	0x08020a3c
 80147c0:	08020c74 	.word	0x08020c74
 80147c4:	08020a88 	.word	0x08020a88
 80147c8:	200137dc 	.word	0x200137dc
 80147cc:	200137d4 	.word	0x200137d4
 80147d0:	200137d0 	.word	0x200137d0
 80147d4:	08020c90 	.word	0x08020c90
 80147d8:	200137dd 	.word	0x200137dd
 80147dc:	2001b7dc 	.word	0x2001b7dc
 80147e0:	200137c0 	.word	0x200137c0
 80147e4:	08020cb0 	.word	0x08020cb0
 80147e8:	08020cc8 	.word	0x08020cc8
        } else {
          pcb->unacked = rseg->next;
 80147ec:	69fb      	ldr	r3, [r7, #28]
 80147ee:	681a      	ldr	r2, [r3, #0]
 80147f0:	687b      	ldr	r3, [r7, #4]
 80147f2:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 80147f4:	69f8      	ldr	r0, [r7, #28]
 80147f6:	f7fe fd22 	bl	801323e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80147fa:	687b      	ldr	r3, [r7, #4]
 80147fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80147fe:	2b00      	cmp	r3, #0
 8014800:	d104      	bne.n	801480c <tcp_process+0x2dc>
          pcb->rtime = -1;
 8014802:	687b      	ldr	r3, [r7, #4]
 8014804:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014808:	861a      	strh	r2, [r3, #48]	; 0x30
 801480a:	e006      	b.n	801481a <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 801480c:	687b      	ldr	r3, [r7, #4]
 801480e:	2200      	movs	r2, #0
 8014810:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	2200      	movs	r2, #0
 8014816:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801481a:	687b      	ldr	r3, [r7, #4]
 801481c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014820:	2b00      	cmp	r3, #0
 8014822:	d00a      	beq.n	801483a <tcp_process+0x30a>
 8014824:	687b      	ldr	r3, [r7, #4]
 8014826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801482a:	687a      	ldr	r2, [r7, #4]
 801482c:	6910      	ldr	r0, [r2, #16]
 801482e:	2200      	movs	r2, #0
 8014830:	6879      	ldr	r1, [r7, #4]
 8014832:	4798      	blx	r3
 8014834:	4603      	mov	r3, r0
 8014836:	76bb      	strb	r3, [r7, #26]
 8014838:	e001      	b.n	801483e <tcp_process+0x30e>
 801483a:	2300      	movs	r3, #0
 801483c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801483e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8014842:	f113 0f0d 	cmn.w	r3, #13
 8014846:	d102      	bne.n	801484e <tcp_process+0x31e>
          return ERR_ABRT;
 8014848:	f06f 030c 	mvn.w	r3, #12
 801484c:	e250      	b.n	8014cf0 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801484e:	687b      	ldr	r3, [r7, #4]
 8014850:	8b5b      	ldrh	r3, [r3, #26]
 8014852:	f043 0302 	orr.w	r3, r3, #2
 8014856:	b29a      	uxth	r2, r3
 8014858:	687b      	ldr	r3, [r7, #4]
 801485a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 801485c:	e23a      	b.n	8014cd4 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801485e:	4b98      	ldr	r3, [pc, #608]	; (8014ac0 <tcp_process+0x590>)
 8014860:	781b      	ldrb	r3, [r3, #0]
 8014862:	f003 0310 	and.w	r3, r3, #16
 8014866:	2b00      	cmp	r3, #0
 8014868:	f000 8234 	beq.w	8014cd4 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801486c:	4b95      	ldr	r3, [pc, #596]	; (8014ac4 <tcp_process+0x594>)
 801486e:	6819      	ldr	r1, [r3, #0]
 8014870:	4b95      	ldr	r3, [pc, #596]	; (8014ac8 <tcp_process+0x598>)
 8014872:	881b      	ldrh	r3, [r3, #0]
 8014874:	461a      	mov	r2, r3
 8014876:	4b95      	ldr	r3, [pc, #596]	; (8014acc <tcp_process+0x59c>)
 8014878:	681b      	ldr	r3, [r3, #0]
 801487a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801487c:	4b94      	ldr	r3, [pc, #592]	; (8014ad0 <tcp_process+0x5a0>)
 801487e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014880:	885b      	ldrh	r3, [r3, #2]
 8014882:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014884:	4a92      	ldr	r2, [pc, #584]	; (8014ad0 <tcp_process+0x5a0>)
 8014886:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014888:	8812      	ldrh	r2, [r2, #0]
 801488a:	b292      	uxth	r2, r2
 801488c:	9202      	str	r2, [sp, #8]
 801488e:	9301      	str	r3, [sp, #4]
 8014890:	4b90      	ldr	r3, [pc, #576]	; (8014ad4 <tcp_process+0x5a4>)
 8014892:	9300      	str	r3, [sp, #0]
 8014894:	4b90      	ldr	r3, [pc, #576]	; (8014ad8 <tcp_process+0x5a8>)
 8014896:	4602      	mov	r2, r0
 8014898:	6878      	ldr	r0, [r7, #4]
 801489a:	f002 fc85 	bl	80171a8 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801489e:	687b      	ldr	r3, [r7, #4]
 80148a0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80148a4:	2b05      	cmp	r3, #5
 80148a6:	f200 8215 	bhi.w	8014cd4 <tcp_process+0x7a4>
          pcb->rtime = 0;
 80148aa:	687b      	ldr	r3, [r7, #4]
 80148ac:	2200      	movs	r2, #0
 80148ae:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80148b0:	6878      	ldr	r0, [r7, #4]
 80148b2:	f002 fa4f 	bl	8016d54 <tcp_rexmit_rto>
      break;
 80148b6:	e20d      	b.n	8014cd4 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80148b8:	4b81      	ldr	r3, [pc, #516]	; (8014ac0 <tcp_process+0x590>)
 80148ba:	781b      	ldrb	r3, [r3, #0]
 80148bc:	f003 0310 	and.w	r3, r3, #16
 80148c0:	2b00      	cmp	r3, #0
 80148c2:	f000 80a1 	beq.w	8014a08 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80148c6:	4b7f      	ldr	r3, [pc, #508]	; (8014ac4 <tcp_process+0x594>)
 80148c8:	681a      	ldr	r2, [r3, #0]
 80148ca:	687b      	ldr	r3, [r7, #4]
 80148cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80148ce:	1ad3      	subs	r3, r2, r3
 80148d0:	3b01      	subs	r3, #1
 80148d2:	2b00      	cmp	r3, #0
 80148d4:	db7e      	blt.n	80149d4 <tcp_process+0x4a4>
 80148d6:	4b7b      	ldr	r3, [pc, #492]	; (8014ac4 <tcp_process+0x594>)
 80148d8:	681a      	ldr	r2, [r3, #0]
 80148da:	687b      	ldr	r3, [r7, #4]
 80148dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80148de:	1ad3      	subs	r3, r2, r3
 80148e0:	2b00      	cmp	r3, #0
 80148e2:	dc77      	bgt.n	80149d4 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80148e4:	687b      	ldr	r3, [r7, #4]
 80148e6:	2204      	movs	r2, #4
 80148e8:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80148ea:	687b      	ldr	r3, [r7, #4]
 80148ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80148ee:	2b00      	cmp	r3, #0
 80148f0:	d102      	bne.n	80148f8 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80148f2:	23fa      	movs	r3, #250	; 0xfa
 80148f4:	76bb      	strb	r3, [r7, #26]
 80148f6:	e01d      	b.n	8014934 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80148f8:	687b      	ldr	r3, [r7, #4]
 80148fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80148fc:	699b      	ldr	r3, [r3, #24]
 80148fe:	2b00      	cmp	r3, #0
 8014900:	d106      	bne.n	8014910 <tcp_process+0x3e0>
 8014902:	4b76      	ldr	r3, [pc, #472]	; (8014adc <tcp_process+0x5ac>)
 8014904:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8014908:	4975      	ldr	r1, [pc, #468]	; (8014ae0 <tcp_process+0x5b0>)
 801490a:	4876      	ldr	r0, [pc, #472]	; (8014ae4 <tcp_process+0x5b4>)
 801490c:	f008 fdb8 	bl	801d480 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8014910:	687b      	ldr	r3, [r7, #4]
 8014912:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014914:	699b      	ldr	r3, [r3, #24]
 8014916:	2b00      	cmp	r3, #0
 8014918:	d00a      	beq.n	8014930 <tcp_process+0x400>
 801491a:	687b      	ldr	r3, [r7, #4]
 801491c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801491e:	699b      	ldr	r3, [r3, #24]
 8014920:	687a      	ldr	r2, [r7, #4]
 8014922:	6910      	ldr	r0, [r2, #16]
 8014924:	2200      	movs	r2, #0
 8014926:	6879      	ldr	r1, [r7, #4]
 8014928:	4798      	blx	r3
 801492a:	4603      	mov	r3, r0
 801492c:	76bb      	strb	r3, [r7, #26]
 801492e:	e001      	b.n	8014934 <tcp_process+0x404>
 8014930:	23f0      	movs	r3, #240	; 0xf0
 8014932:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8014934:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8014938:	2b00      	cmp	r3, #0
 801493a:	d00a      	beq.n	8014952 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 801493c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8014940:	f113 0f0d 	cmn.w	r3, #13
 8014944:	d002      	beq.n	801494c <tcp_process+0x41c>
              tcp_abort(pcb);
 8014946:	6878      	ldr	r0, [r7, #4]
 8014948:	f7fd ff8e 	bl	8012868 <tcp_abort>
            }
            return ERR_ABRT;
 801494c:	f06f 030c 	mvn.w	r3, #12
 8014950:	e1ce      	b.n	8014cf0 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8014952:	6878      	ldr	r0, [r7, #4]
 8014954:	f000 fae0 	bl	8014f18 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8014958:	4b63      	ldr	r3, [pc, #396]	; (8014ae8 <tcp_process+0x5b8>)
 801495a:	881b      	ldrh	r3, [r3, #0]
 801495c:	2b00      	cmp	r3, #0
 801495e:	d005      	beq.n	801496c <tcp_process+0x43c>
            recv_acked--;
 8014960:	4b61      	ldr	r3, [pc, #388]	; (8014ae8 <tcp_process+0x5b8>)
 8014962:	881b      	ldrh	r3, [r3, #0]
 8014964:	3b01      	subs	r3, #1
 8014966:	b29a      	uxth	r2, r3
 8014968:	4b5f      	ldr	r3, [pc, #380]	; (8014ae8 <tcp_process+0x5b8>)
 801496a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801496c:	687b      	ldr	r3, [r7, #4]
 801496e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014970:	009a      	lsls	r2, r3, #2
 8014972:	687b      	ldr	r3, [r7, #4]
 8014974:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014976:	005b      	lsls	r3, r3, #1
 8014978:	f241 111c 	movw	r1, #4380	; 0x111c
 801497c:	428b      	cmp	r3, r1
 801497e:	bf38      	it	cc
 8014980:	460b      	movcc	r3, r1
 8014982:	429a      	cmp	r2, r3
 8014984:	d204      	bcs.n	8014990 <tcp_process+0x460>
 8014986:	687b      	ldr	r3, [r7, #4]
 8014988:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801498a:	009b      	lsls	r3, r3, #2
 801498c:	b29b      	uxth	r3, r3
 801498e:	e00d      	b.n	80149ac <tcp_process+0x47c>
 8014990:	687b      	ldr	r3, [r7, #4]
 8014992:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014994:	005b      	lsls	r3, r3, #1
 8014996:	f241 121c 	movw	r2, #4380	; 0x111c
 801499a:	4293      	cmp	r3, r2
 801499c:	d904      	bls.n	80149a8 <tcp_process+0x478>
 801499e:	687b      	ldr	r3, [r7, #4]
 80149a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80149a2:	005b      	lsls	r3, r3, #1
 80149a4:	b29b      	uxth	r3, r3
 80149a6:	e001      	b.n	80149ac <tcp_process+0x47c>
 80149a8:	f241 131c 	movw	r3, #4380	; 0x111c
 80149ac:	687a      	ldr	r2, [r7, #4]
 80149ae:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80149b2:	4b4e      	ldr	r3, [pc, #312]	; (8014aec <tcp_process+0x5bc>)
 80149b4:	781b      	ldrb	r3, [r3, #0]
 80149b6:	f003 0320 	and.w	r3, r3, #32
 80149ba:	2b00      	cmp	r3, #0
 80149bc:	d037      	beq.n	8014a2e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80149be:	687b      	ldr	r3, [r7, #4]
 80149c0:	8b5b      	ldrh	r3, [r3, #26]
 80149c2:	f043 0302 	orr.w	r3, r3, #2
 80149c6:	b29a      	uxth	r2, r3
 80149c8:	687b      	ldr	r3, [r7, #4]
 80149ca:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80149cc:	687b      	ldr	r3, [r7, #4]
 80149ce:	2207      	movs	r2, #7
 80149d0:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80149d2:	e02c      	b.n	8014a2e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80149d4:	4b3b      	ldr	r3, [pc, #236]	; (8014ac4 <tcp_process+0x594>)
 80149d6:	6819      	ldr	r1, [r3, #0]
 80149d8:	4b3b      	ldr	r3, [pc, #236]	; (8014ac8 <tcp_process+0x598>)
 80149da:	881b      	ldrh	r3, [r3, #0]
 80149dc:	461a      	mov	r2, r3
 80149de:	4b3b      	ldr	r3, [pc, #236]	; (8014acc <tcp_process+0x59c>)
 80149e0:	681b      	ldr	r3, [r3, #0]
 80149e2:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80149e4:	4b3a      	ldr	r3, [pc, #232]	; (8014ad0 <tcp_process+0x5a0>)
 80149e6:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80149e8:	885b      	ldrh	r3, [r3, #2]
 80149ea:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80149ec:	4a38      	ldr	r2, [pc, #224]	; (8014ad0 <tcp_process+0x5a0>)
 80149ee:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80149f0:	8812      	ldrh	r2, [r2, #0]
 80149f2:	b292      	uxth	r2, r2
 80149f4:	9202      	str	r2, [sp, #8]
 80149f6:	9301      	str	r3, [sp, #4]
 80149f8:	4b36      	ldr	r3, [pc, #216]	; (8014ad4 <tcp_process+0x5a4>)
 80149fa:	9300      	str	r3, [sp, #0]
 80149fc:	4b36      	ldr	r3, [pc, #216]	; (8014ad8 <tcp_process+0x5a8>)
 80149fe:	4602      	mov	r2, r0
 8014a00:	6878      	ldr	r0, [r7, #4]
 8014a02:	f002 fbd1 	bl	80171a8 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8014a06:	e167      	b.n	8014cd8 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8014a08:	4b2d      	ldr	r3, [pc, #180]	; (8014ac0 <tcp_process+0x590>)
 8014a0a:	781b      	ldrb	r3, [r3, #0]
 8014a0c:	f003 0302 	and.w	r3, r3, #2
 8014a10:	2b00      	cmp	r3, #0
 8014a12:	f000 8161 	beq.w	8014cd8 <tcp_process+0x7a8>
 8014a16:	687b      	ldr	r3, [r7, #4]
 8014a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a1a:	1e5a      	subs	r2, r3, #1
 8014a1c:	4b2b      	ldr	r3, [pc, #172]	; (8014acc <tcp_process+0x59c>)
 8014a1e:	681b      	ldr	r3, [r3, #0]
 8014a20:	429a      	cmp	r2, r3
 8014a22:	f040 8159 	bne.w	8014cd8 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8014a26:	6878      	ldr	r0, [r7, #4]
 8014a28:	f002 f9b6 	bl	8016d98 <tcp_rexmit>
      break;
 8014a2c:	e154      	b.n	8014cd8 <tcp_process+0x7a8>
 8014a2e:	e153      	b.n	8014cd8 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8014a30:	6878      	ldr	r0, [r7, #4]
 8014a32:	f000 fa71 	bl	8014f18 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8014a36:	4b2d      	ldr	r3, [pc, #180]	; (8014aec <tcp_process+0x5bc>)
 8014a38:	781b      	ldrb	r3, [r3, #0]
 8014a3a:	f003 0320 	and.w	r3, r3, #32
 8014a3e:	2b00      	cmp	r3, #0
 8014a40:	f000 814c 	beq.w	8014cdc <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8014a44:	687b      	ldr	r3, [r7, #4]
 8014a46:	8b5b      	ldrh	r3, [r3, #26]
 8014a48:	f043 0302 	orr.w	r3, r3, #2
 8014a4c:	b29a      	uxth	r2, r3
 8014a4e:	687b      	ldr	r3, [r7, #4]
 8014a50:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8014a52:	687b      	ldr	r3, [r7, #4]
 8014a54:	2207      	movs	r2, #7
 8014a56:	751a      	strb	r2, [r3, #20]
      }
      break;
 8014a58:	e140      	b.n	8014cdc <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8014a5a:	6878      	ldr	r0, [r7, #4]
 8014a5c:	f000 fa5c 	bl	8014f18 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8014a60:	4b22      	ldr	r3, [pc, #136]	; (8014aec <tcp_process+0x5bc>)
 8014a62:	781b      	ldrb	r3, [r3, #0]
 8014a64:	f003 0320 	and.w	r3, r3, #32
 8014a68:	2b00      	cmp	r3, #0
 8014a6a:	d071      	beq.n	8014b50 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8014a6c:	4b14      	ldr	r3, [pc, #80]	; (8014ac0 <tcp_process+0x590>)
 8014a6e:	781b      	ldrb	r3, [r3, #0]
 8014a70:	f003 0310 	and.w	r3, r3, #16
 8014a74:	2b00      	cmp	r3, #0
 8014a76:	d060      	beq.n	8014b3a <tcp_process+0x60a>
 8014a78:	687b      	ldr	r3, [r7, #4]
 8014a7a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014a7c:	4b11      	ldr	r3, [pc, #68]	; (8014ac4 <tcp_process+0x594>)
 8014a7e:	681b      	ldr	r3, [r3, #0]
 8014a80:	429a      	cmp	r2, r3
 8014a82:	d15a      	bne.n	8014b3a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8014a84:	687b      	ldr	r3, [r7, #4]
 8014a86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8014a88:	2b00      	cmp	r3, #0
 8014a8a:	d156      	bne.n	8014b3a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8014a8c:	687b      	ldr	r3, [r7, #4]
 8014a8e:	8b5b      	ldrh	r3, [r3, #26]
 8014a90:	f043 0302 	orr.w	r3, r3, #2
 8014a94:	b29a      	uxth	r2, r3
 8014a96:	687b      	ldr	r3, [r7, #4]
 8014a98:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8014a9a:	6878      	ldr	r0, [r7, #4]
 8014a9c:	f7fe fdbc 	bl	8013618 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8014aa0:	4b13      	ldr	r3, [pc, #76]	; (8014af0 <tcp_process+0x5c0>)
 8014aa2:	681b      	ldr	r3, [r3, #0]
 8014aa4:	687a      	ldr	r2, [r7, #4]
 8014aa6:	429a      	cmp	r2, r3
 8014aa8:	d105      	bne.n	8014ab6 <tcp_process+0x586>
 8014aaa:	4b11      	ldr	r3, [pc, #68]	; (8014af0 <tcp_process+0x5c0>)
 8014aac:	681b      	ldr	r3, [r3, #0]
 8014aae:	68db      	ldr	r3, [r3, #12]
 8014ab0:	4a0f      	ldr	r2, [pc, #60]	; (8014af0 <tcp_process+0x5c0>)
 8014ab2:	6013      	str	r3, [r2, #0]
 8014ab4:	e02e      	b.n	8014b14 <tcp_process+0x5e4>
 8014ab6:	4b0e      	ldr	r3, [pc, #56]	; (8014af0 <tcp_process+0x5c0>)
 8014ab8:	681b      	ldr	r3, [r3, #0]
 8014aba:	617b      	str	r3, [r7, #20]
 8014abc:	e027      	b.n	8014b0e <tcp_process+0x5de>
 8014abe:	bf00      	nop
 8014ac0:	200137dc 	.word	0x200137dc
 8014ac4:	200137d4 	.word	0x200137d4
 8014ac8:	200137da 	.word	0x200137da
 8014acc:	200137d0 	.word	0x200137d0
 8014ad0:	200137c0 	.word	0x200137c0
 8014ad4:	200172f4 	.word	0x200172f4
 8014ad8:	200172f8 	.word	0x200172f8
 8014adc:	08020a3c 	.word	0x08020a3c
 8014ae0:	08020cdc 	.word	0x08020cdc
 8014ae4:	08020a88 	.word	0x08020a88
 8014ae8:	200137d8 	.word	0x200137d8
 8014aec:	200137dd 	.word	0x200137dd
 8014af0:	2001b7d8 	.word	0x2001b7d8
 8014af4:	697b      	ldr	r3, [r7, #20]
 8014af6:	68db      	ldr	r3, [r3, #12]
 8014af8:	687a      	ldr	r2, [r7, #4]
 8014afa:	429a      	cmp	r2, r3
 8014afc:	d104      	bne.n	8014b08 <tcp_process+0x5d8>
 8014afe:	687b      	ldr	r3, [r7, #4]
 8014b00:	68da      	ldr	r2, [r3, #12]
 8014b02:	697b      	ldr	r3, [r7, #20]
 8014b04:	60da      	str	r2, [r3, #12]
 8014b06:	e005      	b.n	8014b14 <tcp_process+0x5e4>
 8014b08:	697b      	ldr	r3, [r7, #20]
 8014b0a:	68db      	ldr	r3, [r3, #12]
 8014b0c:	617b      	str	r3, [r7, #20]
 8014b0e:	697b      	ldr	r3, [r7, #20]
 8014b10:	2b00      	cmp	r3, #0
 8014b12:	d1ef      	bne.n	8014af4 <tcp_process+0x5c4>
 8014b14:	687b      	ldr	r3, [r7, #4]
 8014b16:	2200      	movs	r2, #0
 8014b18:	60da      	str	r2, [r3, #12]
 8014b1a:	4b77      	ldr	r3, [pc, #476]	; (8014cf8 <tcp_process+0x7c8>)
 8014b1c:	2201      	movs	r2, #1
 8014b1e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8014b20:	687b      	ldr	r3, [r7, #4]
 8014b22:	220a      	movs	r2, #10
 8014b24:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8014b26:	4b75      	ldr	r3, [pc, #468]	; (8014cfc <tcp_process+0x7cc>)
 8014b28:	681a      	ldr	r2, [r3, #0]
 8014b2a:	687b      	ldr	r3, [r7, #4]
 8014b2c:	60da      	str	r2, [r3, #12]
 8014b2e:	4a73      	ldr	r2, [pc, #460]	; (8014cfc <tcp_process+0x7cc>)
 8014b30:	687b      	ldr	r3, [r7, #4]
 8014b32:	6013      	str	r3, [r2, #0]
 8014b34:	f002 fcfa 	bl	801752c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8014b38:	e0d2      	b.n	8014ce0 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8014b3a:	687b      	ldr	r3, [r7, #4]
 8014b3c:	8b5b      	ldrh	r3, [r3, #26]
 8014b3e:	f043 0302 	orr.w	r3, r3, #2
 8014b42:	b29a      	uxth	r2, r3
 8014b44:	687b      	ldr	r3, [r7, #4]
 8014b46:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8014b48:	687b      	ldr	r3, [r7, #4]
 8014b4a:	2208      	movs	r2, #8
 8014b4c:	751a      	strb	r2, [r3, #20]
      break;
 8014b4e:	e0c7      	b.n	8014ce0 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8014b50:	4b6b      	ldr	r3, [pc, #428]	; (8014d00 <tcp_process+0x7d0>)
 8014b52:	781b      	ldrb	r3, [r3, #0]
 8014b54:	f003 0310 	and.w	r3, r3, #16
 8014b58:	2b00      	cmp	r3, #0
 8014b5a:	f000 80c1 	beq.w	8014ce0 <tcp_process+0x7b0>
 8014b5e:	687b      	ldr	r3, [r7, #4]
 8014b60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014b62:	4b68      	ldr	r3, [pc, #416]	; (8014d04 <tcp_process+0x7d4>)
 8014b64:	681b      	ldr	r3, [r3, #0]
 8014b66:	429a      	cmp	r2, r3
 8014b68:	f040 80ba 	bne.w	8014ce0 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8014b6c:	687b      	ldr	r3, [r7, #4]
 8014b6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8014b70:	2b00      	cmp	r3, #0
 8014b72:	f040 80b5 	bne.w	8014ce0 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8014b76:	687b      	ldr	r3, [r7, #4]
 8014b78:	2206      	movs	r2, #6
 8014b7a:	751a      	strb	r2, [r3, #20]
      break;
 8014b7c:	e0b0      	b.n	8014ce0 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8014b7e:	6878      	ldr	r0, [r7, #4]
 8014b80:	f000 f9ca 	bl	8014f18 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8014b84:	4b60      	ldr	r3, [pc, #384]	; (8014d08 <tcp_process+0x7d8>)
 8014b86:	781b      	ldrb	r3, [r3, #0]
 8014b88:	f003 0320 	and.w	r3, r3, #32
 8014b8c:	2b00      	cmp	r3, #0
 8014b8e:	f000 80a9 	beq.w	8014ce4 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8014b92:	687b      	ldr	r3, [r7, #4]
 8014b94:	8b5b      	ldrh	r3, [r3, #26]
 8014b96:	f043 0302 	orr.w	r3, r3, #2
 8014b9a:	b29a      	uxth	r2, r3
 8014b9c:	687b      	ldr	r3, [r7, #4]
 8014b9e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8014ba0:	6878      	ldr	r0, [r7, #4]
 8014ba2:	f7fe fd39 	bl	8013618 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8014ba6:	4b59      	ldr	r3, [pc, #356]	; (8014d0c <tcp_process+0x7dc>)
 8014ba8:	681b      	ldr	r3, [r3, #0]
 8014baa:	687a      	ldr	r2, [r7, #4]
 8014bac:	429a      	cmp	r2, r3
 8014bae:	d105      	bne.n	8014bbc <tcp_process+0x68c>
 8014bb0:	4b56      	ldr	r3, [pc, #344]	; (8014d0c <tcp_process+0x7dc>)
 8014bb2:	681b      	ldr	r3, [r3, #0]
 8014bb4:	68db      	ldr	r3, [r3, #12]
 8014bb6:	4a55      	ldr	r2, [pc, #340]	; (8014d0c <tcp_process+0x7dc>)
 8014bb8:	6013      	str	r3, [r2, #0]
 8014bba:	e013      	b.n	8014be4 <tcp_process+0x6b4>
 8014bbc:	4b53      	ldr	r3, [pc, #332]	; (8014d0c <tcp_process+0x7dc>)
 8014bbe:	681b      	ldr	r3, [r3, #0]
 8014bc0:	613b      	str	r3, [r7, #16]
 8014bc2:	e00c      	b.n	8014bde <tcp_process+0x6ae>
 8014bc4:	693b      	ldr	r3, [r7, #16]
 8014bc6:	68db      	ldr	r3, [r3, #12]
 8014bc8:	687a      	ldr	r2, [r7, #4]
 8014bca:	429a      	cmp	r2, r3
 8014bcc:	d104      	bne.n	8014bd8 <tcp_process+0x6a8>
 8014bce:	687b      	ldr	r3, [r7, #4]
 8014bd0:	68da      	ldr	r2, [r3, #12]
 8014bd2:	693b      	ldr	r3, [r7, #16]
 8014bd4:	60da      	str	r2, [r3, #12]
 8014bd6:	e005      	b.n	8014be4 <tcp_process+0x6b4>
 8014bd8:	693b      	ldr	r3, [r7, #16]
 8014bda:	68db      	ldr	r3, [r3, #12]
 8014bdc:	613b      	str	r3, [r7, #16]
 8014bde:	693b      	ldr	r3, [r7, #16]
 8014be0:	2b00      	cmp	r3, #0
 8014be2:	d1ef      	bne.n	8014bc4 <tcp_process+0x694>
 8014be4:	687b      	ldr	r3, [r7, #4]
 8014be6:	2200      	movs	r2, #0
 8014be8:	60da      	str	r2, [r3, #12]
 8014bea:	4b43      	ldr	r3, [pc, #268]	; (8014cf8 <tcp_process+0x7c8>)
 8014bec:	2201      	movs	r2, #1
 8014bee:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8014bf0:	687b      	ldr	r3, [r7, #4]
 8014bf2:	220a      	movs	r2, #10
 8014bf4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8014bf6:	4b41      	ldr	r3, [pc, #260]	; (8014cfc <tcp_process+0x7cc>)
 8014bf8:	681a      	ldr	r2, [r3, #0]
 8014bfa:	687b      	ldr	r3, [r7, #4]
 8014bfc:	60da      	str	r2, [r3, #12]
 8014bfe:	4a3f      	ldr	r2, [pc, #252]	; (8014cfc <tcp_process+0x7cc>)
 8014c00:	687b      	ldr	r3, [r7, #4]
 8014c02:	6013      	str	r3, [r2, #0]
 8014c04:	f002 fc92 	bl	801752c <tcp_timer_needed>
      }
      break;
 8014c08:	e06c      	b.n	8014ce4 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8014c0a:	6878      	ldr	r0, [r7, #4]
 8014c0c:	f000 f984 	bl	8014f18 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8014c10:	4b3b      	ldr	r3, [pc, #236]	; (8014d00 <tcp_process+0x7d0>)
 8014c12:	781b      	ldrb	r3, [r3, #0]
 8014c14:	f003 0310 	and.w	r3, r3, #16
 8014c18:	2b00      	cmp	r3, #0
 8014c1a:	d065      	beq.n	8014ce8 <tcp_process+0x7b8>
 8014c1c:	687b      	ldr	r3, [r7, #4]
 8014c1e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014c20:	4b38      	ldr	r3, [pc, #224]	; (8014d04 <tcp_process+0x7d4>)
 8014c22:	681b      	ldr	r3, [r3, #0]
 8014c24:	429a      	cmp	r2, r3
 8014c26:	d15f      	bne.n	8014ce8 <tcp_process+0x7b8>
 8014c28:	687b      	ldr	r3, [r7, #4]
 8014c2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014c2c:	2b00      	cmp	r3, #0
 8014c2e:	d15b      	bne.n	8014ce8 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8014c30:	6878      	ldr	r0, [r7, #4]
 8014c32:	f7fe fcf1 	bl	8013618 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8014c36:	4b35      	ldr	r3, [pc, #212]	; (8014d0c <tcp_process+0x7dc>)
 8014c38:	681b      	ldr	r3, [r3, #0]
 8014c3a:	687a      	ldr	r2, [r7, #4]
 8014c3c:	429a      	cmp	r2, r3
 8014c3e:	d105      	bne.n	8014c4c <tcp_process+0x71c>
 8014c40:	4b32      	ldr	r3, [pc, #200]	; (8014d0c <tcp_process+0x7dc>)
 8014c42:	681b      	ldr	r3, [r3, #0]
 8014c44:	68db      	ldr	r3, [r3, #12]
 8014c46:	4a31      	ldr	r2, [pc, #196]	; (8014d0c <tcp_process+0x7dc>)
 8014c48:	6013      	str	r3, [r2, #0]
 8014c4a:	e013      	b.n	8014c74 <tcp_process+0x744>
 8014c4c:	4b2f      	ldr	r3, [pc, #188]	; (8014d0c <tcp_process+0x7dc>)
 8014c4e:	681b      	ldr	r3, [r3, #0]
 8014c50:	60fb      	str	r3, [r7, #12]
 8014c52:	e00c      	b.n	8014c6e <tcp_process+0x73e>
 8014c54:	68fb      	ldr	r3, [r7, #12]
 8014c56:	68db      	ldr	r3, [r3, #12]
 8014c58:	687a      	ldr	r2, [r7, #4]
 8014c5a:	429a      	cmp	r2, r3
 8014c5c:	d104      	bne.n	8014c68 <tcp_process+0x738>
 8014c5e:	687b      	ldr	r3, [r7, #4]
 8014c60:	68da      	ldr	r2, [r3, #12]
 8014c62:	68fb      	ldr	r3, [r7, #12]
 8014c64:	60da      	str	r2, [r3, #12]
 8014c66:	e005      	b.n	8014c74 <tcp_process+0x744>
 8014c68:	68fb      	ldr	r3, [r7, #12]
 8014c6a:	68db      	ldr	r3, [r3, #12]
 8014c6c:	60fb      	str	r3, [r7, #12]
 8014c6e:	68fb      	ldr	r3, [r7, #12]
 8014c70:	2b00      	cmp	r3, #0
 8014c72:	d1ef      	bne.n	8014c54 <tcp_process+0x724>
 8014c74:	687b      	ldr	r3, [r7, #4]
 8014c76:	2200      	movs	r2, #0
 8014c78:	60da      	str	r2, [r3, #12]
 8014c7a:	4b1f      	ldr	r3, [pc, #124]	; (8014cf8 <tcp_process+0x7c8>)
 8014c7c:	2201      	movs	r2, #1
 8014c7e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8014c80:	687b      	ldr	r3, [r7, #4]
 8014c82:	220a      	movs	r2, #10
 8014c84:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8014c86:	4b1d      	ldr	r3, [pc, #116]	; (8014cfc <tcp_process+0x7cc>)
 8014c88:	681a      	ldr	r2, [r3, #0]
 8014c8a:	687b      	ldr	r3, [r7, #4]
 8014c8c:	60da      	str	r2, [r3, #12]
 8014c8e:	4a1b      	ldr	r2, [pc, #108]	; (8014cfc <tcp_process+0x7cc>)
 8014c90:	687b      	ldr	r3, [r7, #4]
 8014c92:	6013      	str	r3, [r2, #0]
 8014c94:	f002 fc4a 	bl	801752c <tcp_timer_needed>
      }
      break;
 8014c98:	e026      	b.n	8014ce8 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8014c9a:	6878      	ldr	r0, [r7, #4]
 8014c9c:	f000 f93c 	bl	8014f18 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8014ca0:	4b17      	ldr	r3, [pc, #92]	; (8014d00 <tcp_process+0x7d0>)
 8014ca2:	781b      	ldrb	r3, [r3, #0]
 8014ca4:	f003 0310 	and.w	r3, r3, #16
 8014ca8:	2b00      	cmp	r3, #0
 8014caa:	d01f      	beq.n	8014cec <tcp_process+0x7bc>
 8014cac:	687b      	ldr	r3, [r7, #4]
 8014cae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014cb0:	4b14      	ldr	r3, [pc, #80]	; (8014d04 <tcp_process+0x7d4>)
 8014cb2:	681b      	ldr	r3, [r3, #0]
 8014cb4:	429a      	cmp	r2, r3
 8014cb6:	d119      	bne.n	8014cec <tcp_process+0x7bc>
 8014cb8:	687b      	ldr	r3, [r7, #4]
 8014cba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014cbc:	2b00      	cmp	r3, #0
 8014cbe:	d115      	bne.n	8014cec <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8014cc0:	4b11      	ldr	r3, [pc, #68]	; (8014d08 <tcp_process+0x7d8>)
 8014cc2:	781b      	ldrb	r3, [r3, #0]
 8014cc4:	f043 0310 	orr.w	r3, r3, #16
 8014cc8:	b2da      	uxtb	r2, r3
 8014cca:	4b0f      	ldr	r3, [pc, #60]	; (8014d08 <tcp_process+0x7d8>)
 8014ccc:	701a      	strb	r2, [r3, #0]
      }
      break;
 8014cce:	e00d      	b.n	8014cec <tcp_process+0x7bc>
    default:
      break;
 8014cd0:	bf00      	nop
 8014cd2:	e00c      	b.n	8014cee <tcp_process+0x7be>
      break;
 8014cd4:	bf00      	nop
 8014cd6:	e00a      	b.n	8014cee <tcp_process+0x7be>
      break;
 8014cd8:	bf00      	nop
 8014cda:	e008      	b.n	8014cee <tcp_process+0x7be>
      break;
 8014cdc:	bf00      	nop
 8014cde:	e006      	b.n	8014cee <tcp_process+0x7be>
      break;
 8014ce0:	bf00      	nop
 8014ce2:	e004      	b.n	8014cee <tcp_process+0x7be>
      break;
 8014ce4:	bf00      	nop
 8014ce6:	e002      	b.n	8014cee <tcp_process+0x7be>
      break;
 8014ce8:	bf00      	nop
 8014cea:	e000      	b.n	8014cee <tcp_process+0x7be>
      break;
 8014cec:	bf00      	nop
  }
  return ERR_OK;
 8014cee:	2300      	movs	r3, #0
}
 8014cf0:	4618      	mov	r0, r3
 8014cf2:	3724      	adds	r7, #36	; 0x24
 8014cf4:	46bd      	mov	sp, r7
 8014cf6:	bd90      	pop	{r4, r7, pc}
 8014cf8:	2001b7d4 	.word	0x2001b7d4
 8014cfc:	2001b7e8 	.word	0x2001b7e8
 8014d00:	200137dc 	.word	0x200137dc
 8014d04:	200137d4 	.word	0x200137d4
 8014d08:	200137dd 	.word	0x200137dd
 8014d0c:	2001b7d8 	.word	0x2001b7d8

08014d10 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8014d10:	b590      	push	{r4, r7, lr}
 8014d12:	b085      	sub	sp, #20
 8014d14:	af00      	add	r7, sp, #0
 8014d16:	6078      	str	r0, [r7, #4]
 8014d18:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8014d1a:	687b      	ldr	r3, [r7, #4]
 8014d1c:	2b00      	cmp	r3, #0
 8014d1e:	d106      	bne.n	8014d2e <tcp_oos_insert_segment+0x1e>
 8014d20:	4b3b      	ldr	r3, [pc, #236]	; (8014e10 <tcp_oos_insert_segment+0x100>)
 8014d22:	f240 421f 	movw	r2, #1055	; 0x41f
 8014d26:	493b      	ldr	r1, [pc, #236]	; (8014e14 <tcp_oos_insert_segment+0x104>)
 8014d28:	483b      	ldr	r0, [pc, #236]	; (8014e18 <tcp_oos_insert_segment+0x108>)
 8014d2a:	f008 fba9 	bl	801d480 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8014d2e:	687b      	ldr	r3, [r7, #4]
 8014d30:	68db      	ldr	r3, [r3, #12]
 8014d32:	899b      	ldrh	r3, [r3, #12]
 8014d34:	b29b      	uxth	r3, r3
 8014d36:	4618      	mov	r0, r3
 8014d38:	f7fb fc3a 	bl	80105b0 <lwip_htons>
 8014d3c:	4603      	mov	r3, r0
 8014d3e:	b2db      	uxtb	r3, r3
 8014d40:	f003 0301 	and.w	r3, r3, #1
 8014d44:	2b00      	cmp	r3, #0
 8014d46:	d028      	beq.n	8014d9a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8014d48:	6838      	ldr	r0, [r7, #0]
 8014d4a:	f7fe fa63 	bl	8013214 <tcp_segs_free>
    next = NULL;
 8014d4e:	2300      	movs	r3, #0
 8014d50:	603b      	str	r3, [r7, #0]
 8014d52:	e056      	b.n	8014e02 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8014d54:	683b      	ldr	r3, [r7, #0]
 8014d56:	68db      	ldr	r3, [r3, #12]
 8014d58:	899b      	ldrh	r3, [r3, #12]
 8014d5a:	b29b      	uxth	r3, r3
 8014d5c:	4618      	mov	r0, r3
 8014d5e:	f7fb fc27 	bl	80105b0 <lwip_htons>
 8014d62:	4603      	mov	r3, r0
 8014d64:	b2db      	uxtb	r3, r3
 8014d66:	f003 0301 	and.w	r3, r3, #1
 8014d6a:	2b00      	cmp	r3, #0
 8014d6c:	d00d      	beq.n	8014d8a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8014d6e:	687b      	ldr	r3, [r7, #4]
 8014d70:	68db      	ldr	r3, [r3, #12]
 8014d72:	899b      	ldrh	r3, [r3, #12]
 8014d74:	b29c      	uxth	r4, r3
 8014d76:	2001      	movs	r0, #1
 8014d78:	f7fb fc1a 	bl	80105b0 <lwip_htons>
 8014d7c:	4603      	mov	r3, r0
 8014d7e:	461a      	mov	r2, r3
 8014d80:	687b      	ldr	r3, [r7, #4]
 8014d82:	68db      	ldr	r3, [r3, #12]
 8014d84:	4322      	orrs	r2, r4
 8014d86:	b292      	uxth	r2, r2
 8014d88:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8014d8a:	683b      	ldr	r3, [r7, #0]
 8014d8c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8014d8e:	683b      	ldr	r3, [r7, #0]
 8014d90:	681b      	ldr	r3, [r3, #0]
 8014d92:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8014d94:	68f8      	ldr	r0, [r7, #12]
 8014d96:	f7fe fa52 	bl	801323e <tcp_seg_free>
    while (next &&
 8014d9a:	683b      	ldr	r3, [r7, #0]
 8014d9c:	2b00      	cmp	r3, #0
 8014d9e:	d00e      	beq.n	8014dbe <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8014da0:	687b      	ldr	r3, [r7, #4]
 8014da2:	891b      	ldrh	r3, [r3, #8]
 8014da4:	461a      	mov	r2, r3
 8014da6:	4b1d      	ldr	r3, [pc, #116]	; (8014e1c <tcp_oos_insert_segment+0x10c>)
 8014da8:	681b      	ldr	r3, [r3, #0]
 8014daa:	441a      	add	r2, r3
 8014dac:	683b      	ldr	r3, [r7, #0]
 8014dae:	68db      	ldr	r3, [r3, #12]
 8014db0:	685b      	ldr	r3, [r3, #4]
 8014db2:	6839      	ldr	r1, [r7, #0]
 8014db4:	8909      	ldrh	r1, [r1, #8]
 8014db6:	440b      	add	r3, r1
 8014db8:	1ad3      	subs	r3, r2, r3
    while (next &&
 8014dba:	2b00      	cmp	r3, #0
 8014dbc:	daca      	bge.n	8014d54 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8014dbe:	683b      	ldr	r3, [r7, #0]
 8014dc0:	2b00      	cmp	r3, #0
 8014dc2:	d01e      	beq.n	8014e02 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8014dc4:	687b      	ldr	r3, [r7, #4]
 8014dc6:	891b      	ldrh	r3, [r3, #8]
 8014dc8:	461a      	mov	r2, r3
 8014dca:	4b14      	ldr	r3, [pc, #80]	; (8014e1c <tcp_oos_insert_segment+0x10c>)
 8014dcc:	681b      	ldr	r3, [r3, #0]
 8014dce:	441a      	add	r2, r3
 8014dd0:	683b      	ldr	r3, [r7, #0]
 8014dd2:	68db      	ldr	r3, [r3, #12]
 8014dd4:	685b      	ldr	r3, [r3, #4]
 8014dd6:	1ad3      	subs	r3, r2, r3
    if (next &&
 8014dd8:	2b00      	cmp	r3, #0
 8014dda:	dd12      	ble.n	8014e02 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8014ddc:	683b      	ldr	r3, [r7, #0]
 8014dde:	68db      	ldr	r3, [r3, #12]
 8014de0:	685b      	ldr	r3, [r3, #4]
 8014de2:	b29a      	uxth	r2, r3
 8014de4:	4b0d      	ldr	r3, [pc, #52]	; (8014e1c <tcp_oos_insert_segment+0x10c>)
 8014de6:	681b      	ldr	r3, [r3, #0]
 8014de8:	b29b      	uxth	r3, r3
 8014dea:	1ad3      	subs	r3, r2, r3
 8014dec:	b29a      	uxth	r2, r3
 8014dee:	687b      	ldr	r3, [r7, #4]
 8014df0:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8014df2:	687b      	ldr	r3, [r7, #4]
 8014df4:	685a      	ldr	r2, [r3, #4]
 8014df6:	687b      	ldr	r3, [r7, #4]
 8014df8:	891b      	ldrh	r3, [r3, #8]
 8014dfa:	4619      	mov	r1, r3
 8014dfc:	4610      	mov	r0, r2
 8014dfe:	f7fc fe09 	bl	8011a14 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8014e02:	687b      	ldr	r3, [r7, #4]
 8014e04:	683a      	ldr	r2, [r7, #0]
 8014e06:	601a      	str	r2, [r3, #0]
}
 8014e08:	bf00      	nop
 8014e0a:	3714      	adds	r7, #20
 8014e0c:	46bd      	mov	sp, r7
 8014e0e:	bd90      	pop	{r4, r7, pc}
 8014e10:	08020a3c 	.word	0x08020a3c
 8014e14:	08020cfc 	.word	0x08020cfc
 8014e18:	08020a88 	.word	0x08020a88
 8014e1c:	200137d0 	.word	0x200137d0

08014e20 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8014e20:	b5b0      	push	{r4, r5, r7, lr}
 8014e22:	b086      	sub	sp, #24
 8014e24:	af00      	add	r7, sp, #0
 8014e26:	60f8      	str	r0, [r7, #12]
 8014e28:	60b9      	str	r1, [r7, #8]
 8014e2a:	607a      	str	r2, [r7, #4]
 8014e2c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8014e2e:	e03e      	b.n	8014eae <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8014e30:	68bb      	ldr	r3, [r7, #8]
 8014e32:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8014e34:	68bb      	ldr	r3, [r7, #8]
 8014e36:	681b      	ldr	r3, [r3, #0]
 8014e38:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8014e3a:	697b      	ldr	r3, [r7, #20]
 8014e3c:	685b      	ldr	r3, [r3, #4]
 8014e3e:	4618      	mov	r0, r3
 8014e40:	f7fc fffc 	bl	8011e3c <pbuf_clen>
 8014e44:	4603      	mov	r3, r0
 8014e46:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8014e48:	68fb      	ldr	r3, [r7, #12]
 8014e4a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014e4e:	8a7a      	ldrh	r2, [r7, #18]
 8014e50:	429a      	cmp	r2, r3
 8014e52:	d906      	bls.n	8014e62 <tcp_free_acked_segments+0x42>
 8014e54:	4b2a      	ldr	r3, [pc, #168]	; (8014f00 <tcp_free_acked_segments+0xe0>)
 8014e56:	f240 4257 	movw	r2, #1111	; 0x457
 8014e5a:	492a      	ldr	r1, [pc, #168]	; (8014f04 <tcp_free_acked_segments+0xe4>)
 8014e5c:	482a      	ldr	r0, [pc, #168]	; (8014f08 <tcp_free_acked_segments+0xe8>)
 8014e5e:	f008 fb0f 	bl	801d480 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8014e62:	68fb      	ldr	r3, [r7, #12]
 8014e64:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8014e68:	8a7b      	ldrh	r3, [r7, #18]
 8014e6a:	1ad3      	subs	r3, r2, r3
 8014e6c:	b29a      	uxth	r2, r3
 8014e6e:	68fb      	ldr	r3, [r7, #12]
 8014e70:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8014e74:	697b      	ldr	r3, [r7, #20]
 8014e76:	891a      	ldrh	r2, [r3, #8]
 8014e78:	4b24      	ldr	r3, [pc, #144]	; (8014f0c <tcp_free_acked_segments+0xec>)
 8014e7a:	881b      	ldrh	r3, [r3, #0]
 8014e7c:	4413      	add	r3, r2
 8014e7e:	b29a      	uxth	r2, r3
 8014e80:	4b22      	ldr	r3, [pc, #136]	; (8014f0c <tcp_free_acked_segments+0xec>)
 8014e82:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8014e84:	6978      	ldr	r0, [r7, #20]
 8014e86:	f7fe f9da 	bl	801323e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8014e8a:	68fb      	ldr	r3, [r7, #12]
 8014e8c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014e90:	2b00      	cmp	r3, #0
 8014e92:	d00c      	beq.n	8014eae <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8014e94:	68bb      	ldr	r3, [r7, #8]
 8014e96:	2b00      	cmp	r3, #0
 8014e98:	d109      	bne.n	8014eae <tcp_free_acked_segments+0x8e>
 8014e9a:	683b      	ldr	r3, [r7, #0]
 8014e9c:	2b00      	cmp	r3, #0
 8014e9e:	d106      	bne.n	8014eae <tcp_free_acked_segments+0x8e>
 8014ea0:	4b17      	ldr	r3, [pc, #92]	; (8014f00 <tcp_free_acked_segments+0xe0>)
 8014ea2:	f240 4261 	movw	r2, #1121	; 0x461
 8014ea6:	491a      	ldr	r1, [pc, #104]	; (8014f10 <tcp_free_acked_segments+0xf0>)
 8014ea8:	4817      	ldr	r0, [pc, #92]	; (8014f08 <tcp_free_acked_segments+0xe8>)
 8014eaa:	f008 fae9 	bl	801d480 <iprintf>
  while (seg_list != NULL &&
 8014eae:	68bb      	ldr	r3, [r7, #8]
 8014eb0:	2b00      	cmp	r3, #0
 8014eb2:	d020      	beq.n	8014ef6 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8014eb4:	68bb      	ldr	r3, [r7, #8]
 8014eb6:	68db      	ldr	r3, [r3, #12]
 8014eb8:	685b      	ldr	r3, [r3, #4]
 8014eba:	4618      	mov	r0, r3
 8014ebc:	f7fb fb8d 	bl	80105da <lwip_htonl>
 8014ec0:	4604      	mov	r4, r0
 8014ec2:	68bb      	ldr	r3, [r7, #8]
 8014ec4:	891b      	ldrh	r3, [r3, #8]
 8014ec6:	461d      	mov	r5, r3
 8014ec8:	68bb      	ldr	r3, [r7, #8]
 8014eca:	68db      	ldr	r3, [r3, #12]
 8014ecc:	899b      	ldrh	r3, [r3, #12]
 8014ece:	b29b      	uxth	r3, r3
 8014ed0:	4618      	mov	r0, r3
 8014ed2:	f7fb fb6d 	bl	80105b0 <lwip_htons>
 8014ed6:	4603      	mov	r3, r0
 8014ed8:	b2db      	uxtb	r3, r3
 8014eda:	f003 0303 	and.w	r3, r3, #3
 8014ede:	2b00      	cmp	r3, #0
 8014ee0:	d001      	beq.n	8014ee6 <tcp_free_acked_segments+0xc6>
 8014ee2:	2301      	movs	r3, #1
 8014ee4:	e000      	b.n	8014ee8 <tcp_free_acked_segments+0xc8>
 8014ee6:	2300      	movs	r3, #0
 8014ee8:	442b      	add	r3, r5
 8014eea:	18e2      	adds	r2, r4, r3
 8014eec:	4b09      	ldr	r3, [pc, #36]	; (8014f14 <tcp_free_acked_segments+0xf4>)
 8014eee:	681b      	ldr	r3, [r3, #0]
 8014ef0:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8014ef2:	2b00      	cmp	r3, #0
 8014ef4:	dd9c      	ble.n	8014e30 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8014ef6:	68bb      	ldr	r3, [r7, #8]
}
 8014ef8:	4618      	mov	r0, r3
 8014efa:	3718      	adds	r7, #24
 8014efc:	46bd      	mov	sp, r7
 8014efe:	bdb0      	pop	{r4, r5, r7, pc}
 8014f00:	08020a3c 	.word	0x08020a3c
 8014f04:	08020d24 	.word	0x08020d24
 8014f08:	08020a88 	.word	0x08020a88
 8014f0c:	200137d8 	.word	0x200137d8
 8014f10:	08020d4c 	.word	0x08020d4c
 8014f14:	200137d4 	.word	0x200137d4

08014f18 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8014f18:	b5b0      	push	{r4, r5, r7, lr}
 8014f1a:	b094      	sub	sp, #80	; 0x50
 8014f1c:	af00      	add	r7, sp, #0
 8014f1e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8014f20:	2300      	movs	r3, #0
 8014f22:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8014f24:	687b      	ldr	r3, [r7, #4]
 8014f26:	2b00      	cmp	r3, #0
 8014f28:	d106      	bne.n	8014f38 <tcp_receive+0x20>
 8014f2a:	4b91      	ldr	r3, [pc, #580]	; (8015170 <tcp_receive+0x258>)
 8014f2c:	f240 427b 	movw	r2, #1147	; 0x47b
 8014f30:	4990      	ldr	r1, [pc, #576]	; (8015174 <tcp_receive+0x25c>)
 8014f32:	4891      	ldr	r0, [pc, #580]	; (8015178 <tcp_receive+0x260>)
 8014f34:	f008 faa4 	bl	801d480 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8014f38:	687b      	ldr	r3, [r7, #4]
 8014f3a:	7d1b      	ldrb	r3, [r3, #20]
 8014f3c:	2b03      	cmp	r3, #3
 8014f3e:	d806      	bhi.n	8014f4e <tcp_receive+0x36>
 8014f40:	4b8b      	ldr	r3, [pc, #556]	; (8015170 <tcp_receive+0x258>)
 8014f42:	f240 427c 	movw	r2, #1148	; 0x47c
 8014f46:	498d      	ldr	r1, [pc, #564]	; (801517c <tcp_receive+0x264>)
 8014f48:	488b      	ldr	r0, [pc, #556]	; (8015178 <tcp_receive+0x260>)
 8014f4a:	f008 fa99 	bl	801d480 <iprintf>

  if (flags & TCP_ACK) {
 8014f4e:	4b8c      	ldr	r3, [pc, #560]	; (8015180 <tcp_receive+0x268>)
 8014f50:	781b      	ldrb	r3, [r3, #0]
 8014f52:	f003 0310 	and.w	r3, r3, #16
 8014f56:	2b00      	cmp	r3, #0
 8014f58:	f000 8264 	beq.w	8015424 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8014f5c:	687b      	ldr	r3, [r7, #4]
 8014f5e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014f62:	461a      	mov	r2, r3
 8014f64:	687b      	ldr	r3, [r7, #4]
 8014f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014f68:	4413      	add	r3, r2
 8014f6a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014f70:	4b84      	ldr	r3, [pc, #528]	; (8015184 <tcp_receive+0x26c>)
 8014f72:	681b      	ldr	r3, [r3, #0]
 8014f74:	1ad3      	subs	r3, r2, r3
 8014f76:	2b00      	cmp	r3, #0
 8014f78:	db1b      	blt.n	8014fb2 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8014f7a:	687b      	ldr	r3, [r7, #4]
 8014f7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014f7e:	4b81      	ldr	r3, [pc, #516]	; (8015184 <tcp_receive+0x26c>)
 8014f80:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8014f82:	429a      	cmp	r2, r3
 8014f84:	d106      	bne.n	8014f94 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8014f86:	687b      	ldr	r3, [r7, #4]
 8014f88:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8014f8a:	4b7f      	ldr	r3, [pc, #508]	; (8015188 <tcp_receive+0x270>)
 8014f8c:	681b      	ldr	r3, [r3, #0]
 8014f8e:	1ad3      	subs	r3, r2, r3
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	db0e      	blt.n	8014fb2 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8014f94:	687b      	ldr	r3, [r7, #4]
 8014f96:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8014f98:	4b7b      	ldr	r3, [pc, #492]	; (8015188 <tcp_receive+0x270>)
 8014f9a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8014f9c:	429a      	cmp	r2, r3
 8014f9e:	d125      	bne.n	8014fec <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8014fa0:	4b7a      	ldr	r3, [pc, #488]	; (801518c <tcp_receive+0x274>)
 8014fa2:	681b      	ldr	r3, [r3, #0]
 8014fa4:	89db      	ldrh	r3, [r3, #14]
 8014fa6:	b29a      	uxth	r2, r3
 8014fa8:	687b      	ldr	r3, [r7, #4]
 8014faa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014fae:	429a      	cmp	r2, r3
 8014fb0:	d91c      	bls.n	8014fec <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8014fb2:	4b76      	ldr	r3, [pc, #472]	; (801518c <tcp_receive+0x274>)
 8014fb4:	681b      	ldr	r3, [r3, #0]
 8014fb6:	89db      	ldrh	r3, [r3, #14]
 8014fb8:	b29a      	uxth	r2, r3
 8014fba:	687b      	ldr	r3, [r7, #4]
 8014fbc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8014fc0:	687b      	ldr	r3, [r7, #4]
 8014fc2:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8014fc6:	687b      	ldr	r3, [r7, #4]
 8014fc8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014fcc:	429a      	cmp	r2, r3
 8014fce:	d205      	bcs.n	8014fdc <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8014fd0:	687b      	ldr	r3, [r7, #4]
 8014fd2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8014fd6:	687b      	ldr	r3, [r7, #4]
 8014fd8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8014fdc:	4b69      	ldr	r3, [pc, #420]	; (8015184 <tcp_receive+0x26c>)
 8014fde:	681a      	ldr	r2, [r3, #0]
 8014fe0:	687b      	ldr	r3, [r7, #4]
 8014fe2:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8014fe4:	4b68      	ldr	r3, [pc, #416]	; (8015188 <tcp_receive+0x270>)
 8014fe6:	681a      	ldr	r2, [r3, #0]
 8014fe8:	687b      	ldr	r3, [r7, #4]
 8014fea:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8014fec:	4b66      	ldr	r3, [pc, #408]	; (8015188 <tcp_receive+0x270>)
 8014fee:	681a      	ldr	r2, [r3, #0]
 8014ff0:	687b      	ldr	r3, [r7, #4]
 8014ff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014ff4:	1ad3      	subs	r3, r2, r3
 8014ff6:	2b00      	cmp	r3, #0
 8014ff8:	dc58      	bgt.n	80150ac <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8014ffa:	4b65      	ldr	r3, [pc, #404]	; (8015190 <tcp_receive+0x278>)
 8014ffc:	881b      	ldrh	r3, [r3, #0]
 8014ffe:	2b00      	cmp	r3, #0
 8015000:	d14b      	bne.n	801509a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8015002:	687b      	ldr	r3, [r7, #4]
 8015004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015006:	687a      	ldr	r2, [r7, #4]
 8015008:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 801500c:	4413      	add	r3, r2
 801500e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015010:	429a      	cmp	r2, r3
 8015012:	d142      	bne.n	801509a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8015014:	687b      	ldr	r3, [r7, #4]
 8015016:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801501a:	2b00      	cmp	r3, #0
 801501c:	db3d      	blt.n	801509a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801501e:	687b      	ldr	r3, [r7, #4]
 8015020:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8015022:	4b59      	ldr	r3, [pc, #356]	; (8015188 <tcp_receive+0x270>)
 8015024:	681b      	ldr	r3, [r3, #0]
 8015026:	429a      	cmp	r2, r3
 8015028:	d137      	bne.n	801509a <tcp_receive+0x182>
              found_dupack = 1;
 801502a:	2301      	movs	r3, #1
 801502c:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801502e:	687b      	ldr	r3, [r7, #4]
 8015030:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8015034:	2bff      	cmp	r3, #255	; 0xff
 8015036:	d007      	beq.n	8015048 <tcp_receive+0x130>
                ++pcb->dupacks;
 8015038:	687b      	ldr	r3, [r7, #4]
 801503a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801503e:	3301      	adds	r3, #1
 8015040:	b2da      	uxtb	r2, r3
 8015042:	687b      	ldr	r3, [r7, #4]
 8015044:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8015048:	687b      	ldr	r3, [r7, #4]
 801504a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801504e:	2b03      	cmp	r3, #3
 8015050:	d91b      	bls.n	801508a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8015052:	687b      	ldr	r3, [r7, #4]
 8015054:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801505c:	4413      	add	r3, r2
 801505e:	b29a      	uxth	r2, r3
 8015060:	687b      	ldr	r3, [r7, #4]
 8015062:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8015066:	429a      	cmp	r2, r3
 8015068:	d30a      	bcc.n	8015080 <tcp_receive+0x168>
 801506a:	687b      	ldr	r3, [r7, #4]
 801506c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015070:	687b      	ldr	r3, [r7, #4]
 8015072:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015074:	4413      	add	r3, r2
 8015076:	b29a      	uxth	r2, r3
 8015078:	687b      	ldr	r3, [r7, #4]
 801507a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801507e:	e004      	b.n	801508a <tcp_receive+0x172>
 8015080:	687b      	ldr	r3, [r7, #4]
 8015082:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015086:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 801508a:	687b      	ldr	r3, [r7, #4]
 801508c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8015090:	2b02      	cmp	r3, #2
 8015092:	d902      	bls.n	801509a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8015094:	6878      	ldr	r0, [r7, #4]
 8015096:	f001 feeb 	bl	8016e70 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801509a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801509c:	2b00      	cmp	r3, #0
 801509e:	f040 8161 	bne.w	8015364 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 80150a2:	687b      	ldr	r3, [r7, #4]
 80150a4:	2200      	movs	r2, #0
 80150a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80150aa:	e15b      	b.n	8015364 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80150ac:	4b36      	ldr	r3, [pc, #216]	; (8015188 <tcp_receive+0x270>)
 80150ae:	681a      	ldr	r2, [r3, #0]
 80150b0:	687b      	ldr	r3, [r7, #4]
 80150b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80150b4:	1ad3      	subs	r3, r2, r3
 80150b6:	3b01      	subs	r3, #1
 80150b8:	2b00      	cmp	r3, #0
 80150ba:	f2c0 814e 	blt.w	801535a <tcp_receive+0x442>
 80150be:	4b32      	ldr	r3, [pc, #200]	; (8015188 <tcp_receive+0x270>)
 80150c0:	681a      	ldr	r2, [r3, #0]
 80150c2:	687b      	ldr	r3, [r7, #4]
 80150c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80150c6:	1ad3      	subs	r3, r2, r3
 80150c8:	2b00      	cmp	r3, #0
 80150ca:	f300 8146 	bgt.w	801535a <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80150ce:	687b      	ldr	r3, [r7, #4]
 80150d0:	8b5b      	ldrh	r3, [r3, #26]
 80150d2:	f003 0304 	and.w	r3, r3, #4
 80150d6:	2b00      	cmp	r3, #0
 80150d8:	d010      	beq.n	80150fc <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80150da:	687b      	ldr	r3, [r7, #4]
 80150dc:	8b5b      	ldrh	r3, [r3, #26]
 80150de:	f023 0304 	bic.w	r3, r3, #4
 80150e2:	b29a      	uxth	r2, r3
 80150e4:	687b      	ldr	r3, [r7, #4]
 80150e6:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80150ee:	687b      	ldr	r3, [r7, #4]
 80150f0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 80150f4:	687b      	ldr	r3, [r7, #4]
 80150f6:	2200      	movs	r2, #0
 80150f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80150fc:	687b      	ldr	r3, [r7, #4]
 80150fe:	2200      	movs	r2, #0
 8015100:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8015104:	687b      	ldr	r3, [r7, #4]
 8015106:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801510a:	10db      	asrs	r3, r3, #3
 801510c:	b21b      	sxth	r3, r3
 801510e:	b29a      	uxth	r2, r3
 8015110:	687b      	ldr	r3, [r7, #4]
 8015112:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8015116:	b29b      	uxth	r3, r3
 8015118:	4413      	add	r3, r2
 801511a:	b29b      	uxth	r3, r3
 801511c:	b21a      	sxth	r2, r3
 801511e:	687b      	ldr	r3, [r7, #4]
 8015120:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8015124:	4b18      	ldr	r3, [pc, #96]	; (8015188 <tcp_receive+0x270>)
 8015126:	681b      	ldr	r3, [r3, #0]
 8015128:	b29a      	uxth	r2, r3
 801512a:	687b      	ldr	r3, [r7, #4]
 801512c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801512e:	b29b      	uxth	r3, r3
 8015130:	1ad3      	subs	r3, r2, r3
 8015132:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8015134:	687b      	ldr	r3, [r7, #4]
 8015136:	2200      	movs	r2, #0
 8015138:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 801513c:	4b12      	ldr	r3, [pc, #72]	; (8015188 <tcp_receive+0x270>)
 801513e:	681a      	ldr	r2, [r3, #0]
 8015140:	687b      	ldr	r3, [r7, #4]
 8015142:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8015144:	687b      	ldr	r3, [r7, #4]
 8015146:	7d1b      	ldrb	r3, [r3, #20]
 8015148:	2b03      	cmp	r3, #3
 801514a:	f240 8097 	bls.w	801527c <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 801514e:	687b      	ldr	r3, [r7, #4]
 8015150:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015154:	687b      	ldr	r3, [r7, #4]
 8015156:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801515a:	429a      	cmp	r2, r3
 801515c:	d245      	bcs.n	80151ea <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801515e:	687b      	ldr	r3, [r7, #4]
 8015160:	8b5b      	ldrh	r3, [r3, #26]
 8015162:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8015166:	2b00      	cmp	r3, #0
 8015168:	d014      	beq.n	8015194 <tcp_receive+0x27c>
 801516a:	2301      	movs	r3, #1
 801516c:	e013      	b.n	8015196 <tcp_receive+0x27e>
 801516e:	bf00      	nop
 8015170:	08020a3c 	.word	0x08020a3c
 8015174:	08020d6c 	.word	0x08020d6c
 8015178:	08020a88 	.word	0x08020a88
 801517c:	08020d88 	.word	0x08020d88
 8015180:	200137dc 	.word	0x200137dc
 8015184:	200137d0 	.word	0x200137d0
 8015188:	200137d4 	.word	0x200137d4
 801518c:	200137c0 	.word	0x200137c0
 8015190:	200137da 	.word	0x200137da
 8015194:	2302      	movs	r3, #2
 8015196:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801519a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801519e:	b29a      	uxth	r2, r3
 80151a0:	687b      	ldr	r3, [r7, #4]
 80151a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80151a4:	fb12 f303 	smulbb	r3, r2, r3
 80151a8:	b29b      	uxth	r3, r3
 80151aa:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80151ac:	4293      	cmp	r3, r2
 80151ae:	bf28      	it	cs
 80151b0:	4613      	movcs	r3, r2
 80151b2:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80151b4:	687b      	ldr	r3, [r7, #4]
 80151b6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80151ba:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80151bc:	4413      	add	r3, r2
 80151be:	b29a      	uxth	r2, r3
 80151c0:	687b      	ldr	r3, [r7, #4]
 80151c2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80151c6:	429a      	cmp	r2, r3
 80151c8:	d309      	bcc.n	80151de <tcp_receive+0x2c6>
 80151ca:	687b      	ldr	r3, [r7, #4]
 80151cc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80151d0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80151d2:	4413      	add	r3, r2
 80151d4:	b29a      	uxth	r2, r3
 80151d6:	687b      	ldr	r3, [r7, #4]
 80151d8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80151dc:	e04e      	b.n	801527c <tcp_receive+0x364>
 80151de:	687b      	ldr	r3, [r7, #4]
 80151e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80151e4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80151e8:	e048      	b.n	801527c <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80151ea:	687b      	ldr	r3, [r7, #4]
 80151ec:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80151f0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80151f2:	4413      	add	r3, r2
 80151f4:	b29a      	uxth	r2, r3
 80151f6:	687b      	ldr	r3, [r7, #4]
 80151f8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80151fc:	429a      	cmp	r2, r3
 80151fe:	d309      	bcc.n	8015214 <tcp_receive+0x2fc>
 8015200:	687b      	ldr	r3, [r7, #4]
 8015202:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8015206:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8015208:	4413      	add	r3, r2
 801520a:	b29a      	uxth	r2, r3
 801520c:	687b      	ldr	r3, [r7, #4]
 801520e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8015212:	e004      	b.n	801521e <tcp_receive+0x306>
 8015214:	687b      	ldr	r3, [r7, #4]
 8015216:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801521a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801521e:	687b      	ldr	r3, [r7, #4]
 8015220:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8015224:	687b      	ldr	r3, [r7, #4]
 8015226:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801522a:	429a      	cmp	r2, r3
 801522c:	d326      	bcc.n	801527c <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801522e:	687b      	ldr	r3, [r7, #4]
 8015230:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8015234:	687b      	ldr	r3, [r7, #4]
 8015236:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801523a:	1ad3      	subs	r3, r2, r3
 801523c:	b29a      	uxth	r2, r3
 801523e:	687b      	ldr	r3, [r7, #4]
 8015240:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8015244:	687b      	ldr	r3, [r7, #4]
 8015246:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801524a:	687b      	ldr	r3, [r7, #4]
 801524c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801524e:	4413      	add	r3, r2
 8015250:	b29a      	uxth	r2, r3
 8015252:	687b      	ldr	r3, [r7, #4]
 8015254:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8015258:	429a      	cmp	r2, r3
 801525a:	d30a      	bcc.n	8015272 <tcp_receive+0x35a>
 801525c:	687b      	ldr	r3, [r7, #4]
 801525e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015262:	687b      	ldr	r3, [r7, #4]
 8015264:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015266:	4413      	add	r3, r2
 8015268:	b29a      	uxth	r2, r3
 801526a:	687b      	ldr	r3, [r7, #4]
 801526c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8015270:	e004      	b.n	801527c <tcp_receive+0x364>
 8015272:	687b      	ldr	r3, [r7, #4]
 8015274:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015278:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801527c:	687b      	ldr	r3, [r7, #4]
 801527e:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8015280:	687b      	ldr	r3, [r7, #4]
 8015282:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015284:	4a98      	ldr	r2, [pc, #608]	; (80154e8 <tcp_receive+0x5d0>)
 8015286:	6878      	ldr	r0, [r7, #4]
 8015288:	f7ff fdca 	bl	8014e20 <tcp_free_acked_segments>
 801528c:	4602      	mov	r2, r0
 801528e:	687b      	ldr	r3, [r7, #4]
 8015290:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8015292:	687b      	ldr	r3, [r7, #4]
 8015294:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8015296:	687b      	ldr	r3, [r7, #4]
 8015298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801529a:	4a94      	ldr	r2, [pc, #592]	; (80154ec <tcp_receive+0x5d4>)
 801529c:	6878      	ldr	r0, [r7, #4]
 801529e:	f7ff fdbf 	bl	8014e20 <tcp_free_acked_segments>
 80152a2:	4602      	mov	r2, r0
 80152a4:	687b      	ldr	r3, [r7, #4]
 80152a6:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80152a8:	687b      	ldr	r3, [r7, #4]
 80152aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80152ac:	2b00      	cmp	r3, #0
 80152ae:	d104      	bne.n	80152ba <tcp_receive+0x3a2>
        pcb->rtime = -1;
 80152b0:	687b      	ldr	r3, [r7, #4]
 80152b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80152b6:	861a      	strh	r2, [r3, #48]	; 0x30
 80152b8:	e002      	b.n	80152c0 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 80152ba:	687b      	ldr	r3, [r7, #4]
 80152bc:	2200      	movs	r2, #0
 80152be:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80152c0:	687b      	ldr	r3, [r7, #4]
 80152c2:	2200      	movs	r2, #0
 80152c4:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80152c6:	687b      	ldr	r3, [r7, #4]
 80152c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80152ca:	2b00      	cmp	r3, #0
 80152cc:	d103      	bne.n	80152d6 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 80152ce:	687b      	ldr	r3, [r7, #4]
 80152d0:	2200      	movs	r2, #0
 80152d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80152d6:	687b      	ldr	r3, [r7, #4]
 80152d8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80152dc:	4b84      	ldr	r3, [pc, #528]	; (80154f0 <tcp_receive+0x5d8>)
 80152de:	881b      	ldrh	r3, [r3, #0]
 80152e0:	4413      	add	r3, r2
 80152e2:	b29a      	uxth	r2, r3
 80152e4:	687b      	ldr	r3, [r7, #4]
 80152e6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80152ea:	687b      	ldr	r3, [r7, #4]
 80152ec:	8b5b      	ldrh	r3, [r3, #26]
 80152ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80152f2:	2b00      	cmp	r3, #0
 80152f4:	d035      	beq.n	8015362 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80152f6:	687b      	ldr	r3, [r7, #4]
 80152f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80152fa:	2b00      	cmp	r3, #0
 80152fc:	d118      	bne.n	8015330 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 80152fe:	687b      	ldr	r3, [r7, #4]
 8015300:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015302:	2b00      	cmp	r3, #0
 8015304:	d00c      	beq.n	8015320 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8015306:	687b      	ldr	r3, [r7, #4]
 8015308:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801530a:	687b      	ldr	r3, [r7, #4]
 801530c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801530e:	68db      	ldr	r3, [r3, #12]
 8015310:	685b      	ldr	r3, [r3, #4]
 8015312:	4618      	mov	r0, r3
 8015314:	f7fb f961 	bl	80105da <lwip_htonl>
 8015318:	4603      	mov	r3, r0
 801531a:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801531c:	2b00      	cmp	r3, #0
 801531e:	dc20      	bgt.n	8015362 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8015320:	687b      	ldr	r3, [r7, #4]
 8015322:	8b5b      	ldrh	r3, [r3, #26]
 8015324:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8015328:	b29a      	uxth	r2, r3
 801532a:	687b      	ldr	r3, [r7, #4]
 801532c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801532e:	e018      	b.n	8015362 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8015330:	687b      	ldr	r3, [r7, #4]
 8015332:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8015334:	687b      	ldr	r3, [r7, #4]
 8015336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015338:	68db      	ldr	r3, [r3, #12]
 801533a:	685b      	ldr	r3, [r3, #4]
 801533c:	4618      	mov	r0, r3
 801533e:	f7fb f94c 	bl	80105da <lwip_htonl>
 8015342:	4603      	mov	r3, r0
 8015344:	1ae3      	subs	r3, r4, r3
 8015346:	2b00      	cmp	r3, #0
 8015348:	dc0b      	bgt.n	8015362 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 801534a:	687b      	ldr	r3, [r7, #4]
 801534c:	8b5b      	ldrh	r3, [r3, #26]
 801534e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8015352:	b29a      	uxth	r2, r3
 8015354:	687b      	ldr	r3, [r7, #4]
 8015356:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015358:	e003      	b.n	8015362 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801535a:	6878      	ldr	r0, [r7, #4]
 801535c:	f001 ff76 	bl	801724c <tcp_send_empty_ack>
 8015360:	e000      	b.n	8015364 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015362:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8015364:	687b      	ldr	r3, [r7, #4]
 8015366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015368:	2b00      	cmp	r3, #0
 801536a:	d05b      	beq.n	8015424 <tcp_receive+0x50c>
 801536c:	687b      	ldr	r3, [r7, #4]
 801536e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015370:	4b60      	ldr	r3, [pc, #384]	; (80154f4 <tcp_receive+0x5dc>)
 8015372:	681b      	ldr	r3, [r3, #0]
 8015374:	1ad3      	subs	r3, r2, r3
 8015376:	2b00      	cmp	r3, #0
 8015378:	da54      	bge.n	8015424 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801537a:	4b5f      	ldr	r3, [pc, #380]	; (80154f8 <tcp_receive+0x5e0>)
 801537c:	681b      	ldr	r3, [r3, #0]
 801537e:	b29a      	uxth	r2, r3
 8015380:	687b      	ldr	r3, [r7, #4]
 8015382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015384:	b29b      	uxth	r3, r3
 8015386:	1ad3      	subs	r3, r2, r3
 8015388:	b29b      	uxth	r3, r3
 801538a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801538e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8015392:	687b      	ldr	r3, [r7, #4]
 8015394:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8015398:	10db      	asrs	r3, r3, #3
 801539a:	b21b      	sxth	r3, r3
 801539c:	b29b      	uxth	r3, r3
 801539e:	1ad3      	subs	r3, r2, r3
 80153a0:	b29b      	uxth	r3, r3
 80153a2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80153a6:	687b      	ldr	r3, [r7, #4]
 80153a8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80153ac:	b29a      	uxth	r2, r3
 80153ae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80153b2:	4413      	add	r3, r2
 80153b4:	b29b      	uxth	r3, r3
 80153b6:	b21a      	sxth	r2, r3
 80153b8:	687b      	ldr	r3, [r7, #4]
 80153ba:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80153bc:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80153c0:	2b00      	cmp	r3, #0
 80153c2:	da05      	bge.n	80153d0 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 80153c4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80153c8:	425b      	negs	r3, r3
 80153ca:	b29b      	uxth	r3, r3
 80153cc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80153d0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80153d4:	687b      	ldr	r3, [r7, #4]
 80153d6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80153da:	109b      	asrs	r3, r3, #2
 80153dc:	b21b      	sxth	r3, r3
 80153de:	b29b      	uxth	r3, r3
 80153e0:	1ad3      	subs	r3, r2, r3
 80153e2:	b29b      	uxth	r3, r3
 80153e4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80153e8:	687b      	ldr	r3, [r7, #4]
 80153ea:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80153ee:	b29a      	uxth	r2, r3
 80153f0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80153f4:	4413      	add	r3, r2
 80153f6:	b29b      	uxth	r3, r3
 80153f8:	b21a      	sxth	r2, r3
 80153fa:	687b      	ldr	r3, [r7, #4]
 80153fc:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80153fe:	687b      	ldr	r3, [r7, #4]
 8015400:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8015404:	10db      	asrs	r3, r3, #3
 8015406:	b21b      	sxth	r3, r3
 8015408:	b29a      	uxth	r2, r3
 801540a:	687b      	ldr	r3, [r7, #4]
 801540c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8015410:	b29b      	uxth	r3, r3
 8015412:	4413      	add	r3, r2
 8015414:	b29b      	uxth	r3, r3
 8015416:	b21a      	sxth	r2, r3
 8015418:	687b      	ldr	r3, [r7, #4]
 801541a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801541e:	687b      	ldr	r3, [r7, #4]
 8015420:	2200      	movs	r2, #0
 8015422:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8015424:	4b35      	ldr	r3, [pc, #212]	; (80154fc <tcp_receive+0x5e4>)
 8015426:	881b      	ldrh	r3, [r3, #0]
 8015428:	2b00      	cmp	r3, #0
 801542a:	f000 84e2 	beq.w	8015df2 <tcp_receive+0xeda>
 801542e:	687b      	ldr	r3, [r7, #4]
 8015430:	7d1b      	ldrb	r3, [r3, #20]
 8015432:	2b06      	cmp	r3, #6
 8015434:	f200 84dd 	bhi.w	8015df2 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8015438:	687b      	ldr	r3, [r7, #4]
 801543a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801543c:	4b30      	ldr	r3, [pc, #192]	; (8015500 <tcp_receive+0x5e8>)
 801543e:	681b      	ldr	r3, [r3, #0]
 8015440:	1ad3      	subs	r3, r2, r3
 8015442:	3b01      	subs	r3, #1
 8015444:	2b00      	cmp	r3, #0
 8015446:	f2c0 808f 	blt.w	8015568 <tcp_receive+0x650>
 801544a:	687b      	ldr	r3, [r7, #4]
 801544c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801544e:	4b2b      	ldr	r3, [pc, #172]	; (80154fc <tcp_receive+0x5e4>)
 8015450:	881b      	ldrh	r3, [r3, #0]
 8015452:	4619      	mov	r1, r3
 8015454:	4b2a      	ldr	r3, [pc, #168]	; (8015500 <tcp_receive+0x5e8>)
 8015456:	681b      	ldr	r3, [r3, #0]
 8015458:	440b      	add	r3, r1
 801545a:	1ad3      	subs	r3, r2, r3
 801545c:	3301      	adds	r3, #1
 801545e:	2b00      	cmp	r3, #0
 8015460:	f300 8082 	bgt.w	8015568 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8015464:	4b27      	ldr	r3, [pc, #156]	; (8015504 <tcp_receive+0x5ec>)
 8015466:	685b      	ldr	r3, [r3, #4]
 8015468:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 801546a:	687b      	ldr	r3, [r7, #4]
 801546c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801546e:	4b24      	ldr	r3, [pc, #144]	; (8015500 <tcp_receive+0x5e8>)
 8015470:	681b      	ldr	r3, [r3, #0]
 8015472:	1ad3      	subs	r3, r2, r3
 8015474:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8015476:	4b23      	ldr	r3, [pc, #140]	; (8015504 <tcp_receive+0x5ec>)
 8015478:	685b      	ldr	r3, [r3, #4]
 801547a:	2b00      	cmp	r3, #0
 801547c:	d106      	bne.n	801548c <tcp_receive+0x574>
 801547e:	4b22      	ldr	r3, [pc, #136]	; (8015508 <tcp_receive+0x5f0>)
 8015480:	f240 5294 	movw	r2, #1428	; 0x594
 8015484:	4921      	ldr	r1, [pc, #132]	; (801550c <tcp_receive+0x5f4>)
 8015486:	4822      	ldr	r0, [pc, #136]	; (8015510 <tcp_receive+0x5f8>)
 8015488:	f007 fffa 	bl	801d480 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801548c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801548e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8015492:	4293      	cmp	r3, r2
 8015494:	d906      	bls.n	80154a4 <tcp_receive+0x58c>
 8015496:	4b1c      	ldr	r3, [pc, #112]	; (8015508 <tcp_receive+0x5f0>)
 8015498:	f240 5295 	movw	r2, #1429	; 0x595
 801549c:	491d      	ldr	r1, [pc, #116]	; (8015514 <tcp_receive+0x5fc>)
 801549e:	481c      	ldr	r0, [pc, #112]	; (8015510 <tcp_receive+0x5f8>)
 80154a0:	f007 ffee 	bl	801d480 <iprintf>
      off = (u16_t)off32;
 80154a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154a6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80154aa:	4b16      	ldr	r3, [pc, #88]	; (8015504 <tcp_receive+0x5ec>)
 80154ac:	685b      	ldr	r3, [r3, #4]
 80154ae:	891b      	ldrh	r3, [r3, #8]
 80154b0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80154b4:	429a      	cmp	r2, r3
 80154b6:	d906      	bls.n	80154c6 <tcp_receive+0x5ae>
 80154b8:	4b13      	ldr	r3, [pc, #76]	; (8015508 <tcp_receive+0x5f0>)
 80154ba:	f240 5297 	movw	r2, #1431	; 0x597
 80154be:	4916      	ldr	r1, [pc, #88]	; (8015518 <tcp_receive+0x600>)
 80154c0:	4813      	ldr	r0, [pc, #76]	; (8015510 <tcp_receive+0x5f8>)
 80154c2:	f007 ffdd 	bl	801d480 <iprintf>
      inseg.len -= off;
 80154c6:	4b0f      	ldr	r3, [pc, #60]	; (8015504 <tcp_receive+0x5ec>)
 80154c8:	891a      	ldrh	r2, [r3, #8]
 80154ca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80154ce:	1ad3      	subs	r3, r2, r3
 80154d0:	b29a      	uxth	r2, r3
 80154d2:	4b0c      	ldr	r3, [pc, #48]	; (8015504 <tcp_receive+0x5ec>)
 80154d4:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80154d6:	4b0b      	ldr	r3, [pc, #44]	; (8015504 <tcp_receive+0x5ec>)
 80154d8:	685b      	ldr	r3, [r3, #4]
 80154da:	891a      	ldrh	r2, [r3, #8]
 80154dc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80154e0:	1ad3      	subs	r3, r2, r3
 80154e2:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 80154e4:	e02a      	b.n	801553c <tcp_receive+0x624>
 80154e6:	bf00      	nop
 80154e8:	08020da4 	.word	0x08020da4
 80154ec:	08020dac 	.word	0x08020dac
 80154f0:	200137d8 	.word	0x200137d8
 80154f4:	200137d4 	.word	0x200137d4
 80154f8:	2001b7dc 	.word	0x2001b7dc
 80154fc:	200137da 	.word	0x200137da
 8015500:	200137d0 	.word	0x200137d0
 8015504:	200137b0 	.word	0x200137b0
 8015508:	08020a3c 	.word	0x08020a3c
 801550c:	08020db4 	.word	0x08020db4
 8015510:	08020a88 	.word	0x08020a88
 8015514:	08020dc4 	.word	0x08020dc4
 8015518:	08020dd4 	.word	0x08020dd4
        off -= p->len;
 801551c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801551e:	895b      	ldrh	r3, [r3, #10]
 8015520:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015524:	1ad3      	subs	r3, r2, r3
 8015526:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801552a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801552c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801552e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8015530:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015532:	2200      	movs	r2, #0
 8015534:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8015536:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015538:	681b      	ldr	r3, [r3, #0]
 801553a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 801553c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801553e:	895b      	ldrh	r3, [r3, #10]
 8015540:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015544:	429a      	cmp	r2, r3
 8015546:	d8e9      	bhi.n	801551c <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8015548:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801554c:	4619      	mov	r1, r3
 801554e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8015550:	f7fc fb60 	bl	8011c14 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8015554:	687b      	ldr	r3, [r7, #4]
 8015556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015558:	4a91      	ldr	r2, [pc, #580]	; (80157a0 <tcp_receive+0x888>)
 801555a:	6013      	str	r3, [r2, #0]
 801555c:	4b91      	ldr	r3, [pc, #580]	; (80157a4 <tcp_receive+0x88c>)
 801555e:	68db      	ldr	r3, [r3, #12]
 8015560:	4a8f      	ldr	r2, [pc, #572]	; (80157a0 <tcp_receive+0x888>)
 8015562:	6812      	ldr	r2, [r2, #0]
 8015564:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8015566:	e00d      	b.n	8015584 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8015568:	4b8d      	ldr	r3, [pc, #564]	; (80157a0 <tcp_receive+0x888>)
 801556a:	681a      	ldr	r2, [r3, #0]
 801556c:	687b      	ldr	r3, [r7, #4]
 801556e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015570:	1ad3      	subs	r3, r2, r3
 8015572:	2b00      	cmp	r3, #0
 8015574:	da06      	bge.n	8015584 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8015576:	687b      	ldr	r3, [r7, #4]
 8015578:	8b5b      	ldrh	r3, [r3, #26]
 801557a:	f043 0302 	orr.w	r3, r3, #2
 801557e:	b29a      	uxth	r2, r3
 8015580:	687b      	ldr	r3, [r7, #4]
 8015582:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8015584:	4b86      	ldr	r3, [pc, #536]	; (80157a0 <tcp_receive+0x888>)
 8015586:	681a      	ldr	r2, [r3, #0]
 8015588:	687b      	ldr	r3, [r7, #4]
 801558a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801558c:	1ad3      	subs	r3, r2, r3
 801558e:	2b00      	cmp	r3, #0
 8015590:	f2c0 842a 	blt.w	8015de8 <tcp_receive+0xed0>
 8015594:	4b82      	ldr	r3, [pc, #520]	; (80157a0 <tcp_receive+0x888>)
 8015596:	681a      	ldr	r2, [r3, #0]
 8015598:	687b      	ldr	r3, [r7, #4]
 801559a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801559c:	6879      	ldr	r1, [r7, #4]
 801559e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80155a0:	440b      	add	r3, r1
 80155a2:	1ad3      	subs	r3, r2, r3
 80155a4:	3301      	adds	r3, #1
 80155a6:	2b00      	cmp	r3, #0
 80155a8:	f300 841e 	bgt.w	8015de8 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80155ac:	687b      	ldr	r3, [r7, #4]
 80155ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80155b0:	4b7b      	ldr	r3, [pc, #492]	; (80157a0 <tcp_receive+0x888>)
 80155b2:	681b      	ldr	r3, [r3, #0]
 80155b4:	429a      	cmp	r2, r3
 80155b6:	f040 829a 	bne.w	8015aee <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80155ba:	4b7a      	ldr	r3, [pc, #488]	; (80157a4 <tcp_receive+0x88c>)
 80155bc:	891c      	ldrh	r4, [r3, #8]
 80155be:	4b79      	ldr	r3, [pc, #484]	; (80157a4 <tcp_receive+0x88c>)
 80155c0:	68db      	ldr	r3, [r3, #12]
 80155c2:	899b      	ldrh	r3, [r3, #12]
 80155c4:	b29b      	uxth	r3, r3
 80155c6:	4618      	mov	r0, r3
 80155c8:	f7fa fff2 	bl	80105b0 <lwip_htons>
 80155cc:	4603      	mov	r3, r0
 80155ce:	b2db      	uxtb	r3, r3
 80155d0:	f003 0303 	and.w	r3, r3, #3
 80155d4:	2b00      	cmp	r3, #0
 80155d6:	d001      	beq.n	80155dc <tcp_receive+0x6c4>
 80155d8:	2301      	movs	r3, #1
 80155da:	e000      	b.n	80155de <tcp_receive+0x6c6>
 80155dc:	2300      	movs	r3, #0
 80155de:	4423      	add	r3, r4
 80155e0:	b29a      	uxth	r2, r3
 80155e2:	4b71      	ldr	r3, [pc, #452]	; (80157a8 <tcp_receive+0x890>)
 80155e4:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80155e6:	687b      	ldr	r3, [r7, #4]
 80155e8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80155ea:	4b6f      	ldr	r3, [pc, #444]	; (80157a8 <tcp_receive+0x890>)
 80155ec:	881b      	ldrh	r3, [r3, #0]
 80155ee:	429a      	cmp	r2, r3
 80155f0:	d275      	bcs.n	80156de <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80155f2:	4b6c      	ldr	r3, [pc, #432]	; (80157a4 <tcp_receive+0x88c>)
 80155f4:	68db      	ldr	r3, [r3, #12]
 80155f6:	899b      	ldrh	r3, [r3, #12]
 80155f8:	b29b      	uxth	r3, r3
 80155fa:	4618      	mov	r0, r3
 80155fc:	f7fa ffd8 	bl	80105b0 <lwip_htons>
 8015600:	4603      	mov	r3, r0
 8015602:	b2db      	uxtb	r3, r3
 8015604:	f003 0301 	and.w	r3, r3, #1
 8015608:	2b00      	cmp	r3, #0
 801560a:	d01f      	beq.n	801564c <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801560c:	4b65      	ldr	r3, [pc, #404]	; (80157a4 <tcp_receive+0x88c>)
 801560e:	68db      	ldr	r3, [r3, #12]
 8015610:	899b      	ldrh	r3, [r3, #12]
 8015612:	b29b      	uxth	r3, r3
 8015614:	b21b      	sxth	r3, r3
 8015616:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801561a:	b21c      	sxth	r4, r3
 801561c:	4b61      	ldr	r3, [pc, #388]	; (80157a4 <tcp_receive+0x88c>)
 801561e:	68db      	ldr	r3, [r3, #12]
 8015620:	899b      	ldrh	r3, [r3, #12]
 8015622:	b29b      	uxth	r3, r3
 8015624:	4618      	mov	r0, r3
 8015626:	f7fa ffc3 	bl	80105b0 <lwip_htons>
 801562a:	4603      	mov	r3, r0
 801562c:	b2db      	uxtb	r3, r3
 801562e:	b29b      	uxth	r3, r3
 8015630:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8015634:	b29b      	uxth	r3, r3
 8015636:	4618      	mov	r0, r3
 8015638:	f7fa ffba 	bl	80105b0 <lwip_htons>
 801563c:	4603      	mov	r3, r0
 801563e:	b21b      	sxth	r3, r3
 8015640:	4323      	orrs	r3, r4
 8015642:	b21a      	sxth	r2, r3
 8015644:	4b57      	ldr	r3, [pc, #348]	; (80157a4 <tcp_receive+0x88c>)
 8015646:	68db      	ldr	r3, [r3, #12]
 8015648:	b292      	uxth	r2, r2
 801564a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 801564c:	687b      	ldr	r3, [r7, #4]
 801564e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015650:	4b54      	ldr	r3, [pc, #336]	; (80157a4 <tcp_receive+0x88c>)
 8015652:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8015654:	4b53      	ldr	r3, [pc, #332]	; (80157a4 <tcp_receive+0x88c>)
 8015656:	68db      	ldr	r3, [r3, #12]
 8015658:	899b      	ldrh	r3, [r3, #12]
 801565a:	b29b      	uxth	r3, r3
 801565c:	4618      	mov	r0, r3
 801565e:	f7fa ffa7 	bl	80105b0 <lwip_htons>
 8015662:	4603      	mov	r3, r0
 8015664:	b2db      	uxtb	r3, r3
 8015666:	f003 0302 	and.w	r3, r3, #2
 801566a:	2b00      	cmp	r3, #0
 801566c:	d005      	beq.n	801567a <tcp_receive+0x762>
            inseg.len -= 1;
 801566e:	4b4d      	ldr	r3, [pc, #308]	; (80157a4 <tcp_receive+0x88c>)
 8015670:	891b      	ldrh	r3, [r3, #8]
 8015672:	3b01      	subs	r3, #1
 8015674:	b29a      	uxth	r2, r3
 8015676:	4b4b      	ldr	r3, [pc, #300]	; (80157a4 <tcp_receive+0x88c>)
 8015678:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801567a:	4b4a      	ldr	r3, [pc, #296]	; (80157a4 <tcp_receive+0x88c>)
 801567c:	685b      	ldr	r3, [r3, #4]
 801567e:	4a49      	ldr	r2, [pc, #292]	; (80157a4 <tcp_receive+0x88c>)
 8015680:	8912      	ldrh	r2, [r2, #8]
 8015682:	4611      	mov	r1, r2
 8015684:	4618      	mov	r0, r3
 8015686:	f7fc f9c5 	bl	8011a14 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801568a:	4b46      	ldr	r3, [pc, #280]	; (80157a4 <tcp_receive+0x88c>)
 801568c:	891c      	ldrh	r4, [r3, #8]
 801568e:	4b45      	ldr	r3, [pc, #276]	; (80157a4 <tcp_receive+0x88c>)
 8015690:	68db      	ldr	r3, [r3, #12]
 8015692:	899b      	ldrh	r3, [r3, #12]
 8015694:	b29b      	uxth	r3, r3
 8015696:	4618      	mov	r0, r3
 8015698:	f7fa ff8a 	bl	80105b0 <lwip_htons>
 801569c:	4603      	mov	r3, r0
 801569e:	b2db      	uxtb	r3, r3
 80156a0:	f003 0303 	and.w	r3, r3, #3
 80156a4:	2b00      	cmp	r3, #0
 80156a6:	d001      	beq.n	80156ac <tcp_receive+0x794>
 80156a8:	2301      	movs	r3, #1
 80156aa:	e000      	b.n	80156ae <tcp_receive+0x796>
 80156ac:	2300      	movs	r3, #0
 80156ae:	4423      	add	r3, r4
 80156b0:	b29a      	uxth	r2, r3
 80156b2:	4b3d      	ldr	r3, [pc, #244]	; (80157a8 <tcp_receive+0x890>)
 80156b4:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80156b6:	4b3c      	ldr	r3, [pc, #240]	; (80157a8 <tcp_receive+0x890>)
 80156b8:	881b      	ldrh	r3, [r3, #0]
 80156ba:	461a      	mov	r2, r3
 80156bc:	4b38      	ldr	r3, [pc, #224]	; (80157a0 <tcp_receive+0x888>)
 80156be:	681b      	ldr	r3, [r3, #0]
 80156c0:	441a      	add	r2, r3
 80156c2:	687b      	ldr	r3, [r7, #4]
 80156c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80156c6:	6879      	ldr	r1, [r7, #4]
 80156c8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80156ca:	440b      	add	r3, r1
 80156cc:	429a      	cmp	r2, r3
 80156ce:	d006      	beq.n	80156de <tcp_receive+0x7c6>
 80156d0:	4b36      	ldr	r3, [pc, #216]	; (80157ac <tcp_receive+0x894>)
 80156d2:	f240 52cb 	movw	r2, #1483	; 0x5cb
 80156d6:	4936      	ldr	r1, [pc, #216]	; (80157b0 <tcp_receive+0x898>)
 80156d8:	4836      	ldr	r0, [pc, #216]	; (80157b4 <tcp_receive+0x89c>)
 80156da:	f007 fed1 	bl	801d480 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80156de:	687b      	ldr	r3, [r7, #4]
 80156e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80156e2:	2b00      	cmp	r3, #0
 80156e4:	f000 80e7 	beq.w	80158b6 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80156e8:	4b2e      	ldr	r3, [pc, #184]	; (80157a4 <tcp_receive+0x88c>)
 80156ea:	68db      	ldr	r3, [r3, #12]
 80156ec:	899b      	ldrh	r3, [r3, #12]
 80156ee:	b29b      	uxth	r3, r3
 80156f0:	4618      	mov	r0, r3
 80156f2:	f7fa ff5d 	bl	80105b0 <lwip_htons>
 80156f6:	4603      	mov	r3, r0
 80156f8:	b2db      	uxtb	r3, r3
 80156fa:	f003 0301 	and.w	r3, r3, #1
 80156fe:	2b00      	cmp	r3, #0
 8015700:	d010      	beq.n	8015724 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8015702:	e00a      	b.n	801571a <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8015704:	687b      	ldr	r3, [r7, #4]
 8015706:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015708:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801570a:	687b      	ldr	r3, [r7, #4]
 801570c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801570e:	681a      	ldr	r2, [r3, #0]
 8015710:	687b      	ldr	r3, [r7, #4]
 8015712:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8015714:	68f8      	ldr	r0, [r7, #12]
 8015716:	f7fd fd92 	bl	801323e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801571a:	687b      	ldr	r3, [r7, #4]
 801571c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801571e:	2b00      	cmp	r3, #0
 8015720:	d1f0      	bne.n	8015704 <tcp_receive+0x7ec>
 8015722:	e0c8      	b.n	80158b6 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8015724:	687b      	ldr	r3, [r7, #4]
 8015726:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015728:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801572a:	e052      	b.n	80157d2 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801572c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801572e:	68db      	ldr	r3, [r3, #12]
 8015730:	899b      	ldrh	r3, [r3, #12]
 8015732:	b29b      	uxth	r3, r3
 8015734:	4618      	mov	r0, r3
 8015736:	f7fa ff3b 	bl	80105b0 <lwip_htons>
 801573a:	4603      	mov	r3, r0
 801573c:	b2db      	uxtb	r3, r3
 801573e:	f003 0301 	and.w	r3, r3, #1
 8015742:	2b00      	cmp	r3, #0
 8015744:	d03d      	beq.n	80157c2 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8015746:	4b17      	ldr	r3, [pc, #92]	; (80157a4 <tcp_receive+0x88c>)
 8015748:	68db      	ldr	r3, [r3, #12]
 801574a:	899b      	ldrh	r3, [r3, #12]
 801574c:	b29b      	uxth	r3, r3
 801574e:	4618      	mov	r0, r3
 8015750:	f7fa ff2e 	bl	80105b0 <lwip_htons>
 8015754:	4603      	mov	r3, r0
 8015756:	b2db      	uxtb	r3, r3
 8015758:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801575c:	2b00      	cmp	r3, #0
 801575e:	d130      	bne.n	80157c2 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8015760:	4b10      	ldr	r3, [pc, #64]	; (80157a4 <tcp_receive+0x88c>)
 8015762:	68db      	ldr	r3, [r3, #12]
 8015764:	899b      	ldrh	r3, [r3, #12]
 8015766:	b29c      	uxth	r4, r3
 8015768:	2001      	movs	r0, #1
 801576a:	f7fa ff21 	bl	80105b0 <lwip_htons>
 801576e:	4603      	mov	r3, r0
 8015770:	461a      	mov	r2, r3
 8015772:	4b0c      	ldr	r3, [pc, #48]	; (80157a4 <tcp_receive+0x88c>)
 8015774:	68db      	ldr	r3, [r3, #12]
 8015776:	4322      	orrs	r2, r4
 8015778:	b292      	uxth	r2, r2
 801577a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801577c:	4b09      	ldr	r3, [pc, #36]	; (80157a4 <tcp_receive+0x88c>)
 801577e:	891c      	ldrh	r4, [r3, #8]
 8015780:	4b08      	ldr	r3, [pc, #32]	; (80157a4 <tcp_receive+0x88c>)
 8015782:	68db      	ldr	r3, [r3, #12]
 8015784:	899b      	ldrh	r3, [r3, #12]
 8015786:	b29b      	uxth	r3, r3
 8015788:	4618      	mov	r0, r3
 801578a:	f7fa ff11 	bl	80105b0 <lwip_htons>
 801578e:	4603      	mov	r3, r0
 8015790:	b2db      	uxtb	r3, r3
 8015792:	f003 0303 	and.w	r3, r3, #3
 8015796:	2b00      	cmp	r3, #0
 8015798:	d00e      	beq.n	80157b8 <tcp_receive+0x8a0>
 801579a:	2301      	movs	r3, #1
 801579c:	e00d      	b.n	80157ba <tcp_receive+0x8a2>
 801579e:	bf00      	nop
 80157a0:	200137d0 	.word	0x200137d0
 80157a4:	200137b0 	.word	0x200137b0
 80157a8:	200137da 	.word	0x200137da
 80157ac:	08020a3c 	.word	0x08020a3c
 80157b0:	08020de4 	.word	0x08020de4
 80157b4:	08020a88 	.word	0x08020a88
 80157b8:	2300      	movs	r3, #0
 80157ba:	4423      	add	r3, r4
 80157bc:	b29a      	uxth	r2, r3
 80157be:	4b98      	ldr	r3, [pc, #608]	; (8015a20 <tcp_receive+0xb08>)
 80157c0:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80157c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80157c4:	613b      	str	r3, [r7, #16]
              next = next->next;
 80157c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80157c8:	681b      	ldr	r3, [r3, #0]
 80157ca:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 80157cc:	6938      	ldr	r0, [r7, #16]
 80157ce:	f7fd fd36 	bl	801323e <tcp_seg_free>
            while (next &&
 80157d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80157d4:	2b00      	cmp	r3, #0
 80157d6:	d00e      	beq.n	80157f6 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80157d8:	4b91      	ldr	r3, [pc, #580]	; (8015a20 <tcp_receive+0xb08>)
 80157da:	881b      	ldrh	r3, [r3, #0]
 80157dc:	461a      	mov	r2, r3
 80157de:	4b91      	ldr	r3, [pc, #580]	; (8015a24 <tcp_receive+0xb0c>)
 80157e0:	681b      	ldr	r3, [r3, #0]
 80157e2:	441a      	add	r2, r3
 80157e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80157e6:	68db      	ldr	r3, [r3, #12]
 80157e8:	685b      	ldr	r3, [r3, #4]
 80157ea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80157ec:	8909      	ldrh	r1, [r1, #8]
 80157ee:	440b      	add	r3, r1
 80157f0:	1ad3      	subs	r3, r2, r3
            while (next &&
 80157f2:	2b00      	cmp	r3, #0
 80157f4:	da9a      	bge.n	801572c <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80157f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80157f8:	2b00      	cmp	r3, #0
 80157fa:	d059      	beq.n	80158b0 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 80157fc:	4b88      	ldr	r3, [pc, #544]	; (8015a20 <tcp_receive+0xb08>)
 80157fe:	881b      	ldrh	r3, [r3, #0]
 8015800:	461a      	mov	r2, r3
 8015802:	4b88      	ldr	r3, [pc, #544]	; (8015a24 <tcp_receive+0xb0c>)
 8015804:	681b      	ldr	r3, [r3, #0]
 8015806:	441a      	add	r2, r3
 8015808:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801580a:	68db      	ldr	r3, [r3, #12]
 801580c:	685b      	ldr	r3, [r3, #4]
 801580e:	1ad3      	subs	r3, r2, r3
            if (next &&
 8015810:	2b00      	cmp	r3, #0
 8015812:	dd4d      	ble.n	80158b0 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8015814:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015816:	68db      	ldr	r3, [r3, #12]
 8015818:	685b      	ldr	r3, [r3, #4]
 801581a:	b29a      	uxth	r2, r3
 801581c:	4b81      	ldr	r3, [pc, #516]	; (8015a24 <tcp_receive+0xb0c>)
 801581e:	681b      	ldr	r3, [r3, #0]
 8015820:	b29b      	uxth	r3, r3
 8015822:	1ad3      	subs	r3, r2, r3
 8015824:	b29a      	uxth	r2, r3
 8015826:	4b80      	ldr	r3, [pc, #512]	; (8015a28 <tcp_receive+0xb10>)
 8015828:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801582a:	4b7f      	ldr	r3, [pc, #508]	; (8015a28 <tcp_receive+0xb10>)
 801582c:	68db      	ldr	r3, [r3, #12]
 801582e:	899b      	ldrh	r3, [r3, #12]
 8015830:	b29b      	uxth	r3, r3
 8015832:	4618      	mov	r0, r3
 8015834:	f7fa febc 	bl	80105b0 <lwip_htons>
 8015838:	4603      	mov	r3, r0
 801583a:	b2db      	uxtb	r3, r3
 801583c:	f003 0302 	and.w	r3, r3, #2
 8015840:	2b00      	cmp	r3, #0
 8015842:	d005      	beq.n	8015850 <tcp_receive+0x938>
                inseg.len -= 1;
 8015844:	4b78      	ldr	r3, [pc, #480]	; (8015a28 <tcp_receive+0xb10>)
 8015846:	891b      	ldrh	r3, [r3, #8]
 8015848:	3b01      	subs	r3, #1
 801584a:	b29a      	uxth	r2, r3
 801584c:	4b76      	ldr	r3, [pc, #472]	; (8015a28 <tcp_receive+0xb10>)
 801584e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8015850:	4b75      	ldr	r3, [pc, #468]	; (8015a28 <tcp_receive+0xb10>)
 8015852:	685b      	ldr	r3, [r3, #4]
 8015854:	4a74      	ldr	r2, [pc, #464]	; (8015a28 <tcp_receive+0xb10>)
 8015856:	8912      	ldrh	r2, [r2, #8]
 8015858:	4611      	mov	r1, r2
 801585a:	4618      	mov	r0, r3
 801585c:	f7fc f8da 	bl	8011a14 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8015860:	4b71      	ldr	r3, [pc, #452]	; (8015a28 <tcp_receive+0xb10>)
 8015862:	891c      	ldrh	r4, [r3, #8]
 8015864:	4b70      	ldr	r3, [pc, #448]	; (8015a28 <tcp_receive+0xb10>)
 8015866:	68db      	ldr	r3, [r3, #12]
 8015868:	899b      	ldrh	r3, [r3, #12]
 801586a:	b29b      	uxth	r3, r3
 801586c:	4618      	mov	r0, r3
 801586e:	f7fa fe9f 	bl	80105b0 <lwip_htons>
 8015872:	4603      	mov	r3, r0
 8015874:	b2db      	uxtb	r3, r3
 8015876:	f003 0303 	and.w	r3, r3, #3
 801587a:	2b00      	cmp	r3, #0
 801587c:	d001      	beq.n	8015882 <tcp_receive+0x96a>
 801587e:	2301      	movs	r3, #1
 8015880:	e000      	b.n	8015884 <tcp_receive+0x96c>
 8015882:	2300      	movs	r3, #0
 8015884:	4423      	add	r3, r4
 8015886:	b29a      	uxth	r2, r3
 8015888:	4b65      	ldr	r3, [pc, #404]	; (8015a20 <tcp_receive+0xb08>)
 801588a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801588c:	4b64      	ldr	r3, [pc, #400]	; (8015a20 <tcp_receive+0xb08>)
 801588e:	881b      	ldrh	r3, [r3, #0]
 8015890:	461a      	mov	r2, r3
 8015892:	4b64      	ldr	r3, [pc, #400]	; (8015a24 <tcp_receive+0xb0c>)
 8015894:	681b      	ldr	r3, [r3, #0]
 8015896:	441a      	add	r2, r3
 8015898:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801589a:	68db      	ldr	r3, [r3, #12]
 801589c:	685b      	ldr	r3, [r3, #4]
 801589e:	429a      	cmp	r2, r3
 80158a0:	d006      	beq.n	80158b0 <tcp_receive+0x998>
 80158a2:	4b62      	ldr	r3, [pc, #392]	; (8015a2c <tcp_receive+0xb14>)
 80158a4:	f240 52fc 	movw	r2, #1532	; 0x5fc
 80158a8:	4961      	ldr	r1, [pc, #388]	; (8015a30 <tcp_receive+0xb18>)
 80158aa:	4862      	ldr	r0, [pc, #392]	; (8015a34 <tcp_receive+0xb1c>)
 80158ac:	f007 fde8 	bl	801d480 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80158b0:	687b      	ldr	r3, [r7, #4]
 80158b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80158b4:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80158b6:	4b5a      	ldr	r3, [pc, #360]	; (8015a20 <tcp_receive+0xb08>)
 80158b8:	881b      	ldrh	r3, [r3, #0]
 80158ba:	461a      	mov	r2, r3
 80158bc:	4b59      	ldr	r3, [pc, #356]	; (8015a24 <tcp_receive+0xb0c>)
 80158be:	681b      	ldr	r3, [r3, #0]
 80158c0:	441a      	add	r2, r3
 80158c2:	687b      	ldr	r3, [r7, #4]
 80158c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80158c6:	687b      	ldr	r3, [r7, #4]
 80158c8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80158ca:	4b55      	ldr	r3, [pc, #340]	; (8015a20 <tcp_receive+0xb08>)
 80158cc:	881b      	ldrh	r3, [r3, #0]
 80158ce:	429a      	cmp	r2, r3
 80158d0:	d206      	bcs.n	80158e0 <tcp_receive+0x9c8>
 80158d2:	4b56      	ldr	r3, [pc, #344]	; (8015a2c <tcp_receive+0xb14>)
 80158d4:	f240 6207 	movw	r2, #1543	; 0x607
 80158d8:	4957      	ldr	r1, [pc, #348]	; (8015a38 <tcp_receive+0xb20>)
 80158da:	4856      	ldr	r0, [pc, #344]	; (8015a34 <tcp_receive+0xb1c>)
 80158dc:	f007 fdd0 	bl	801d480 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80158e0:	687b      	ldr	r3, [r7, #4]
 80158e2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80158e4:	4b4e      	ldr	r3, [pc, #312]	; (8015a20 <tcp_receive+0xb08>)
 80158e6:	881b      	ldrh	r3, [r3, #0]
 80158e8:	1ad3      	subs	r3, r2, r3
 80158ea:	b29a      	uxth	r2, r3
 80158ec:	687b      	ldr	r3, [r7, #4]
 80158ee:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80158f0:	6878      	ldr	r0, [r7, #4]
 80158f2:	f7fc ffc5 	bl	8012880 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80158f6:	4b4c      	ldr	r3, [pc, #304]	; (8015a28 <tcp_receive+0xb10>)
 80158f8:	685b      	ldr	r3, [r3, #4]
 80158fa:	891b      	ldrh	r3, [r3, #8]
 80158fc:	2b00      	cmp	r3, #0
 80158fe:	d006      	beq.n	801590e <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8015900:	4b49      	ldr	r3, [pc, #292]	; (8015a28 <tcp_receive+0xb10>)
 8015902:	685b      	ldr	r3, [r3, #4]
 8015904:	4a4d      	ldr	r2, [pc, #308]	; (8015a3c <tcp_receive+0xb24>)
 8015906:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8015908:	4b47      	ldr	r3, [pc, #284]	; (8015a28 <tcp_receive+0xb10>)
 801590a:	2200      	movs	r2, #0
 801590c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801590e:	4b46      	ldr	r3, [pc, #280]	; (8015a28 <tcp_receive+0xb10>)
 8015910:	68db      	ldr	r3, [r3, #12]
 8015912:	899b      	ldrh	r3, [r3, #12]
 8015914:	b29b      	uxth	r3, r3
 8015916:	4618      	mov	r0, r3
 8015918:	f7fa fe4a 	bl	80105b0 <lwip_htons>
 801591c:	4603      	mov	r3, r0
 801591e:	b2db      	uxtb	r3, r3
 8015920:	f003 0301 	and.w	r3, r3, #1
 8015924:	2b00      	cmp	r3, #0
 8015926:	f000 80b8 	beq.w	8015a9a <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801592a:	4b45      	ldr	r3, [pc, #276]	; (8015a40 <tcp_receive+0xb28>)
 801592c:	781b      	ldrb	r3, [r3, #0]
 801592e:	f043 0320 	orr.w	r3, r3, #32
 8015932:	b2da      	uxtb	r2, r3
 8015934:	4b42      	ldr	r3, [pc, #264]	; (8015a40 <tcp_receive+0xb28>)
 8015936:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8015938:	e0af      	b.n	8015a9a <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801593a:	687b      	ldr	r3, [r7, #4]
 801593c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801593e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8015940:	687b      	ldr	r3, [r7, #4]
 8015942:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015944:	68db      	ldr	r3, [r3, #12]
 8015946:	685b      	ldr	r3, [r3, #4]
 8015948:	4a36      	ldr	r2, [pc, #216]	; (8015a24 <tcp_receive+0xb0c>)
 801594a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801594c:	68bb      	ldr	r3, [r7, #8]
 801594e:	891b      	ldrh	r3, [r3, #8]
 8015950:	461c      	mov	r4, r3
 8015952:	68bb      	ldr	r3, [r7, #8]
 8015954:	68db      	ldr	r3, [r3, #12]
 8015956:	899b      	ldrh	r3, [r3, #12]
 8015958:	b29b      	uxth	r3, r3
 801595a:	4618      	mov	r0, r3
 801595c:	f7fa fe28 	bl	80105b0 <lwip_htons>
 8015960:	4603      	mov	r3, r0
 8015962:	b2db      	uxtb	r3, r3
 8015964:	f003 0303 	and.w	r3, r3, #3
 8015968:	2b00      	cmp	r3, #0
 801596a:	d001      	beq.n	8015970 <tcp_receive+0xa58>
 801596c:	2301      	movs	r3, #1
 801596e:	e000      	b.n	8015972 <tcp_receive+0xa5a>
 8015970:	2300      	movs	r3, #0
 8015972:	191a      	adds	r2, r3, r4
 8015974:	687b      	ldr	r3, [r7, #4]
 8015976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015978:	441a      	add	r2, r3
 801597a:	687b      	ldr	r3, [r7, #4]
 801597c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801597e:	687b      	ldr	r3, [r7, #4]
 8015980:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015982:	461c      	mov	r4, r3
 8015984:	68bb      	ldr	r3, [r7, #8]
 8015986:	891b      	ldrh	r3, [r3, #8]
 8015988:	461d      	mov	r5, r3
 801598a:	68bb      	ldr	r3, [r7, #8]
 801598c:	68db      	ldr	r3, [r3, #12]
 801598e:	899b      	ldrh	r3, [r3, #12]
 8015990:	b29b      	uxth	r3, r3
 8015992:	4618      	mov	r0, r3
 8015994:	f7fa fe0c 	bl	80105b0 <lwip_htons>
 8015998:	4603      	mov	r3, r0
 801599a:	b2db      	uxtb	r3, r3
 801599c:	f003 0303 	and.w	r3, r3, #3
 80159a0:	2b00      	cmp	r3, #0
 80159a2:	d001      	beq.n	80159a8 <tcp_receive+0xa90>
 80159a4:	2301      	movs	r3, #1
 80159a6:	e000      	b.n	80159aa <tcp_receive+0xa92>
 80159a8:	2300      	movs	r3, #0
 80159aa:	442b      	add	r3, r5
 80159ac:	429c      	cmp	r4, r3
 80159ae:	d206      	bcs.n	80159be <tcp_receive+0xaa6>
 80159b0:	4b1e      	ldr	r3, [pc, #120]	; (8015a2c <tcp_receive+0xb14>)
 80159b2:	f240 622b 	movw	r2, #1579	; 0x62b
 80159b6:	4923      	ldr	r1, [pc, #140]	; (8015a44 <tcp_receive+0xb2c>)
 80159b8:	481e      	ldr	r0, [pc, #120]	; (8015a34 <tcp_receive+0xb1c>)
 80159ba:	f007 fd61 	bl	801d480 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80159be:	68bb      	ldr	r3, [r7, #8]
 80159c0:	891b      	ldrh	r3, [r3, #8]
 80159c2:	461c      	mov	r4, r3
 80159c4:	68bb      	ldr	r3, [r7, #8]
 80159c6:	68db      	ldr	r3, [r3, #12]
 80159c8:	899b      	ldrh	r3, [r3, #12]
 80159ca:	b29b      	uxth	r3, r3
 80159cc:	4618      	mov	r0, r3
 80159ce:	f7fa fdef 	bl	80105b0 <lwip_htons>
 80159d2:	4603      	mov	r3, r0
 80159d4:	b2db      	uxtb	r3, r3
 80159d6:	f003 0303 	and.w	r3, r3, #3
 80159da:	2b00      	cmp	r3, #0
 80159dc:	d001      	beq.n	80159e2 <tcp_receive+0xaca>
 80159de:	2301      	movs	r3, #1
 80159e0:	e000      	b.n	80159e4 <tcp_receive+0xacc>
 80159e2:	2300      	movs	r3, #0
 80159e4:	1919      	adds	r1, r3, r4
 80159e6:	687b      	ldr	r3, [r7, #4]
 80159e8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80159ea:	b28b      	uxth	r3, r1
 80159ec:	1ad3      	subs	r3, r2, r3
 80159ee:	b29a      	uxth	r2, r3
 80159f0:	687b      	ldr	r3, [r7, #4]
 80159f2:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80159f4:	6878      	ldr	r0, [r7, #4]
 80159f6:	f7fc ff43 	bl	8012880 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80159fa:	68bb      	ldr	r3, [r7, #8]
 80159fc:	685b      	ldr	r3, [r3, #4]
 80159fe:	891b      	ldrh	r3, [r3, #8]
 8015a00:	2b00      	cmp	r3, #0
 8015a02:	d028      	beq.n	8015a56 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8015a04:	4b0d      	ldr	r3, [pc, #52]	; (8015a3c <tcp_receive+0xb24>)
 8015a06:	681b      	ldr	r3, [r3, #0]
 8015a08:	2b00      	cmp	r3, #0
 8015a0a:	d01d      	beq.n	8015a48 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8015a0c:	4b0b      	ldr	r3, [pc, #44]	; (8015a3c <tcp_receive+0xb24>)
 8015a0e:	681a      	ldr	r2, [r3, #0]
 8015a10:	68bb      	ldr	r3, [r7, #8]
 8015a12:	685b      	ldr	r3, [r3, #4]
 8015a14:	4619      	mov	r1, r3
 8015a16:	4610      	mov	r0, r2
 8015a18:	f7fc fa50 	bl	8011ebc <pbuf_cat>
 8015a1c:	e018      	b.n	8015a50 <tcp_receive+0xb38>
 8015a1e:	bf00      	nop
 8015a20:	200137da 	.word	0x200137da
 8015a24:	200137d0 	.word	0x200137d0
 8015a28:	200137b0 	.word	0x200137b0
 8015a2c:	08020a3c 	.word	0x08020a3c
 8015a30:	08020e1c 	.word	0x08020e1c
 8015a34:	08020a88 	.word	0x08020a88
 8015a38:	08020e58 	.word	0x08020e58
 8015a3c:	200137e0 	.word	0x200137e0
 8015a40:	200137dd 	.word	0x200137dd
 8015a44:	08020e78 	.word	0x08020e78
            } else {
              recv_data = cseg->p;
 8015a48:	68bb      	ldr	r3, [r7, #8]
 8015a4a:	685b      	ldr	r3, [r3, #4]
 8015a4c:	4a70      	ldr	r2, [pc, #448]	; (8015c10 <tcp_receive+0xcf8>)
 8015a4e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8015a50:	68bb      	ldr	r3, [r7, #8]
 8015a52:	2200      	movs	r2, #0
 8015a54:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8015a56:	68bb      	ldr	r3, [r7, #8]
 8015a58:	68db      	ldr	r3, [r3, #12]
 8015a5a:	899b      	ldrh	r3, [r3, #12]
 8015a5c:	b29b      	uxth	r3, r3
 8015a5e:	4618      	mov	r0, r3
 8015a60:	f7fa fda6 	bl	80105b0 <lwip_htons>
 8015a64:	4603      	mov	r3, r0
 8015a66:	b2db      	uxtb	r3, r3
 8015a68:	f003 0301 	and.w	r3, r3, #1
 8015a6c:	2b00      	cmp	r3, #0
 8015a6e:	d00d      	beq.n	8015a8c <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8015a70:	4b68      	ldr	r3, [pc, #416]	; (8015c14 <tcp_receive+0xcfc>)
 8015a72:	781b      	ldrb	r3, [r3, #0]
 8015a74:	f043 0320 	orr.w	r3, r3, #32
 8015a78:	b2da      	uxtb	r2, r3
 8015a7a:	4b66      	ldr	r3, [pc, #408]	; (8015c14 <tcp_receive+0xcfc>)
 8015a7c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8015a7e:	687b      	ldr	r3, [r7, #4]
 8015a80:	7d1b      	ldrb	r3, [r3, #20]
 8015a82:	2b04      	cmp	r3, #4
 8015a84:	d102      	bne.n	8015a8c <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8015a86:	687b      	ldr	r3, [r7, #4]
 8015a88:	2207      	movs	r2, #7
 8015a8a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8015a8c:	68bb      	ldr	r3, [r7, #8]
 8015a8e:	681a      	ldr	r2, [r3, #0]
 8015a90:	687b      	ldr	r3, [r7, #4]
 8015a92:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8015a94:	68b8      	ldr	r0, [r7, #8]
 8015a96:	f7fd fbd2 	bl	801323e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8015a9a:	687b      	ldr	r3, [r7, #4]
 8015a9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015a9e:	2b00      	cmp	r3, #0
 8015aa0:	d008      	beq.n	8015ab4 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8015aa2:	687b      	ldr	r3, [r7, #4]
 8015aa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015aa6:	68db      	ldr	r3, [r3, #12]
 8015aa8:	685a      	ldr	r2, [r3, #4]
 8015aaa:	687b      	ldr	r3, [r7, #4]
 8015aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8015aae:	429a      	cmp	r2, r3
 8015ab0:	f43f af43 	beq.w	801593a <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8015ab4:	687b      	ldr	r3, [r7, #4]
 8015ab6:	8b5b      	ldrh	r3, [r3, #26]
 8015ab8:	f003 0301 	and.w	r3, r3, #1
 8015abc:	2b00      	cmp	r3, #0
 8015abe:	d00e      	beq.n	8015ade <tcp_receive+0xbc6>
 8015ac0:	687b      	ldr	r3, [r7, #4]
 8015ac2:	8b5b      	ldrh	r3, [r3, #26]
 8015ac4:	f023 0301 	bic.w	r3, r3, #1
 8015ac8:	b29a      	uxth	r2, r3
 8015aca:	687b      	ldr	r3, [r7, #4]
 8015acc:	835a      	strh	r2, [r3, #26]
 8015ace:	687b      	ldr	r3, [r7, #4]
 8015ad0:	8b5b      	ldrh	r3, [r3, #26]
 8015ad2:	f043 0302 	orr.w	r3, r3, #2
 8015ad6:	b29a      	uxth	r2, r3
 8015ad8:	687b      	ldr	r3, [r7, #4]
 8015ada:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8015adc:	e188      	b.n	8015df0 <tcp_receive+0xed8>
        tcp_ack(pcb);
 8015ade:	687b      	ldr	r3, [r7, #4]
 8015ae0:	8b5b      	ldrh	r3, [r3, #26]
 8015ae2:	f043 0301 	orr.w	r3, r3, #1
 8015ae6:	b29a      	uxth	r2, r3
 8015ae8:	687b      	ldr	r3, [r7, #4]
 8015aea:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8015aec:	e180      	b.n	8015df0 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8015aee:	687b      	ldr	r3, [r7, #4]
 8015af0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015af2:	2b00      	cmp	r3, #0
 8015af4:	d106      	bne.n	8015b04 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8015af6:	4848      	ldr	r0, [pc, #288]	; (8015c18 <tcp_receive+0xd00>)
 8015af8:	f7fd fbba 	bl	8013270 <tcp_seg_copy>
 8015afc:	4602      	mov	r2, r0
 8015afe:	687b      	ldr	r3, [r7, #4]
 8015b00:	675a      	str	r2, [r3, #116]	; 0x74
 8015b02:	e16d      	b.n	8015de0 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8015b04:	2300      	movs	r3, #0
 8015b06:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8015b08:	687b      	ldr	r3, [r7, #4]
 8015b0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015b0c:	63bb      	str	r3, [r7, #56]	; 0x38
 8015b0e:	e157      	b.n	8015dc0 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8015b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b12:	68db      	ldr	r3, [r3, #12]
 8015b14:	685a      	ldr	r2, [r3, #4]
 8015b16:	4b41      	ldr	r3, [pc, #260]	; (8015c1c <tcp_receive+0xd04>)
 8015b18:	681b      	ldr	r3, [r3, #0]
 8015b1a:	429a      	cmp	r2, r3
 8015b1c:	d11d      	bne.n	8015b5a <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8015b1e:	4b3e      	ldr	r3, [pc, #248]	; (8015c18 <tcp_receive+0xd00>)
 8015b20:	891a      	ldrh	r2, [r3, #8]
 8015b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b24:	891b      	ldrh	r3, [r3, #8]
 8015b26:	429a      	cmp	r2, r3
 8015b28:	f240 814f 	bls.w	8015dca <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8015b2c:	483a      	ldr	r0, [pc, #232]	; (8015c18 <tcp_receive+0xd00>)
 8015b2e:	f7fd fb9f 	bl	8013270 <tcp_seg_copy>
 8015b32:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8015b34:	697b      	ldr	r3, [r7, #20]
 8015b36:	2b00      	cmp	r3, #0
 8015b38:	f000 8149 	beq.w	8015dce <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8015b3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015b3e:	2b00      	cmp	r3, #0
 8015b40:	d003      	beq.n	8015b4a <tcp_receive+0xc32>
                    prev->next = cseg;
 8015b42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015b44:	697a      	ldr	r2, [r7, #20]
 8015b46:	601a      	str	r2, [r3, #0]
 8015b48:	e002      	b.n	8015b50 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8015b4a:	687b      	ldr	r3, [r7, #4]
 8015b4c:	697a      	ldr	r2, [r7, #20]
 8015b4e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8015b50:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8015b52:	6978      	ldr	r0, [r7, #20]
 8015b54:	f7ff f8dc 	bl	8014d10 <tcp_oos_insert_segment>
                }
                break;
 8015b58:	e139      	b.n	8015dce <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8015b5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015b5c:	2b00      	cmp	r3, #0
 8015b5e:	d117      	bne.n	8015b90 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8015b60:	4b2e      	ldr	r3, [pc, #184]	; (8015c1c <tcp_receive+0xd04>)
 8015b62:	681a      	ldr	r2, [r3, #0]
 8015b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b66:	68db      	ldr	r3, [r3, #12]
 8015b68:	685b      	ldr	r3, [r3, #4]
 8015b6a:	1ad3      	subs	r3, r2, r3
 8015b6c:	2b00      	cmp	r3, #0
 8015b6e:	da57      	bge.n	8015c20 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8015b70:	4829      	ldr	r0, [pc, #164]	; (8015c18 <tcp_receive+0xd00>)
 8015b72:	f7fd fb7d 	bl	8013270 <tcp_seg_copy>
 8015b76:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8015b78:	69bb      	ldr	r3, [r7, #24]
 8015b7a:	2b00      	cmp	r3, #0
 8015b7c:	f000 8129 	beq.w	8015dd2 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8015b80:	687b      	ldr	r3, [r7, #4]
 8015b82:	69ba      	ldr	r2, [r7, #24]
 8015b84:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8015b86:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8015b88:	69b8      	ldr	r0, [r7, #24]
 8015b8a:	f7ff f8c1 	bl	8014d10 <tcp_oos_insert_segment>
                  }
                  break;
 8015b8e:	e120      	b.n	8015dd2 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8015b90:	4b22      	ldr	r3, [pc, #136]	; (8015c1c <tcp_receive+0xd04>)
 8015b92:	681a      	ldr	r2, [r3, #0]
 8015b94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015b96:	68db      	ldr	r3, [r3, #12]
 8015b98:	685b      	ldr	r3, [r3, #4]
 8015b9a:	1ad3      	subs	r3, r2, r3
 8015b9c:	3b01      	subs	r3, #1
 8015b9e:	2b00      	cmp	r3, #0
 8015ba0:	db3e      	blt.n	8015c20 <tcp_receive+0xd08>
 8015ba2:	4b1e      	ldr	r3, [pc, #120]	; (8015c1c <tcp_receive+0xd04>)
 8015ba4:	681a      	ldr	r2, [r3, #0]
 8015ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ba8:	68db      	ldr	r3, [r3, #12]
 8015baa:	685b      	ldr	r3, [r3, #4]
 8015bac:	1ad3      	subs	r3, r2, r3
 8015bae:	3301      	adds	r3, #1
 8015bb0:	2b00      	cmp	r3, #0
 8015bb2:	dc35      	bgt.n	8015c20 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8015bb4:	4818      	ldr	r0, [pc, #96]	; (8015c18 <tcp_receive+0xd00>)
 8015bb6:	f7fd fb5b 	bl	8013270 <tcp_seg_copy>
 8015bba:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8015bbc:	69fb      	ldr	r3, [r7, #28]
 8015bbe:	2b00      	cmp	r3, #0
 8015bc0:	f000 8109 	beq.w	8015dd6 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8015bc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015bc6:	68db      	ldr	r3, [r3, #12]
 8015bc8:	685b      	ldr	r3, [r3, #4]
 8015bca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015bcc:	8912      	ldrh	r2, [r2, #8]
 8015bce:	441a      	add	r2, r3
 8015bd0:	4b12      	ldr	r3, [pc, #72]	; (8015c1c <tcp_receive+0xd04>)
 8015bd2:	681b      	ldr	r3, [r3, #0]
 8015bd4:	1ad3      	subs	r3, r2, r3
 8015bd6:	2b00      	cmp	r3, #0
 8015bd8:	dd12      	ble.n	8015c00 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8015bda:	4b10      	ldr	r3, [pc, #64]	; (8015c1c <tcp_receive+0xd04>)
 8015bdc:	681b      	ldr	r3, [r3, #0]
 8015bde:	b29a      	uxth	r2, r3
 8015be0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015be2:	68db      	ldr	r3, [r3, #12]
 8015be4:	685b      	ldr	r3, [r3, #4]
 8015be6:	b29b      	uxth	r3, r3
 8015be8:	1ad3      	subs	r3, r2, r3
 8015bea:	b29a      	uxth	r2, r3
 8015bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015bee:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8015bf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015bf2:	685a      	ldr	r2, [r3, #4]
 8015bf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015bf6:	891b      	ldrh	r3, [r3, #8]
 8015bf8:	4619      	mov	r1, r3
 8015bfa:	4610      	mov	r0, r2
 8015bfc:	f7fb ff0a 	bl	8011a14 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8015c00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015c02:	69fa      	ldr	r2, [r7, #28]
 8015c04:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8015c06:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8015c08:	69f8      	ldr	r0, [r7, #28]
 8015c0a:	f7ff f881 	bl	8014d10 <tcp_oos_insert_segment>
                  }
                  break;
 8015c0e:	e0e2      	b.n	8015dd6 <tcp_receive+0xebe>
 8015c10:	200137e0 	.word	0x200137e0
 8015c14:	200137dd 	.word	0x200137dd
 8015c18:	200137b0 	.word	0x200137b0
 8015c1c:	200137d0 	.word	0x200137d0
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8015c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c22:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8015c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c26:	681b      	ldr	r3, [r3, #0]
 8015c28:	2b00      	cmp	r3, #0
 8015c2a:	f040 80c6 	bne.w	8015dba <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8015c2e:	4b80      	ldr	r3, [pc, #512]	; (8015e30 <tcp_receive+0xf18>)
 8015c30:	681a      	ldr	r2, [r3, #0]
 8015c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c34:	68db      	ldr	r3, [r3, #12]
 8015c36:	685b      	ldr	r3, [r3, #4]
 8015c38:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8015c3a:	2b00      	cmp	r3, #0
 8015c3c:	f340 80bd 	ble.w	8015dba <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8015c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c42:	68db      	ldr	r3, [r3, #12]
 8015c44:	899b      	ldrh	r3, [r3, #12]
 8015c46:	b29b      	uxth	r3, r3
 8015c48:	4618      	mov	r0, r3
 8015c4a:	f7fa fcb1 	bl	80105b0 <lwip_htons>
 8015c4e:	4603      	mov	r3, r0
 8015c50:	b2db      	uxtb	r3, r3
 8015c52:	f003 0301 	and.w	r3, r3, #1
 8015c56:	2b00      	cmp	r3, #0
 8015c58:	f040 80bf 	bne.w	8015dda <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8015c5c:	4875      	ldr	r0, [pc, #468]	; (8015e34 <tcp_receive+0xf1c>)
 8015c5e:	f7fd fb07 	bl	8013270 <tcp_seg_copy>
 8015c62:	4602      	mov	r2, r0
 8015c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c66:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8015c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c6a:	681b      	ldr	r3, [r3, #0]
 8015c6c:	2b00      	cmp	r3, #0
 8015c6e:	f000 80b6 	beq.w	8015dde <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8015c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c74:	68db      	ldr	r3, [r3, #12]
 8015c76:	685b      	ldr	r3, [r3, #4]
 8015c78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015c7a:	8912      	ldrh	r2, [r2, #8]
 8015c7c:	441a      	add	r2, r3
 8015c7e:	4b6c      	ldr	r3, [pc, #432]	; (8015e30 <tcp_receive+0xf18>)
 8015c80:	681b      	ldr	r3, [r3, #0]
 8015c82:	1ad3      	subs	r3, r2, r3
 8015c84:	2b00      	cmp	r3, #0
 8015c86:	dd12      	ble.n	8015cae <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8015c88:	4b69      	ldr	r3, [pc, #420]	; (8015e30 <tcp_receive+0xf18>)
 8015c8a:	681b      	ldr	r3, [r3, #0]
 8015c8c:	b29a      	uxth	r2, r3
 8015c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c90:	68db      	ldr	r3, [r3, #12]
 8015c92:	685b      	ldr	r3, [r3, #4]
 8015c94:	b29b      	uxth	r3, r3
 8015c96:	1ad3      	subs	r3, r2, r3
 8015c98:	b29a      	uxth	r2, r3
 8015c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c9c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8015c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ca0:	685a      	ldr	r2, [r3, #4]
 8015ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ca4:	891b      	ldrh	r3, [r3, #8]
 8015ca6:	4619      	mov	r1, r3
 8015ca8:	4610      	mov	r0, r2
 8015caa:	f7fb feb3 	bl	8011a14 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8015cae:	4b62      	ldr	r3, [pc, #392]	; (8015e38 <tcp_receive+0xf20>)
 8015cb0:	881b      	ldrh	r3, [r3, #0]
 8015cb2:	461a      	mov	r2, r3
 8015cb4:	4b5e      	ldr	r3, [pc, #376]	; (8015e30 <tcp_receive+0xf18>)
 8015cb6:	681b      	ldr	r3, [r3, #0]
 8015cb8:	441a      	add	r2, r3
 8015cba:	687b      	ldr	r3, [r7, #4]
 8015cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015cbe:	6879      	ldr	r1, [r7, #4]
 8015cc0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015cc2:	440b      	add	r3, r1
 8015cc4:	1ad3      	subs	r3, r2, r3
 8015cc6:	2b00      	cmp	r3, #0
 8015cc8:	f340 8089 	ble.w	8015dde <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8015ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015cce:	681b      	ldr	r3, [r3, #0]
 8015cd0:	68db      	ldr	r3, [r3, #12]
 8015cd2:	899b      	ldrh	r3, [r3, #12]
 8015cd4:	b29b      	uxth	r3, r3
 8015cd6:	4618      	mov	r0, r3
 8015cd8:	f7fa fc6a 	bl	80105b0 <lwip_htons>
 8015cdc:	4603      	mov	r3, r0
 8015cde:	b2db      	uxtb	r3, r3
 8015ce0:	f003 0301 	and.w	r3, r3, #1
 8015ce4:	2b00      	cmp	r3, #0
 8015ce6:	d022      	beq.n	8015d2e <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8015ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015cea:	681b      	ldr	r3, [r3, #0]
 8015cec:	68db      	ldr	r3, [r3, #12]
 8015cee:	899b      	ldrh	r3, [r3, #12]
 8015cf0:	b29b      	uxth	r3, r3
 8015cf2:	b21b      	sxth	r3, r3
 8015cf4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8015cf8:	b21c      	sxth	r4, r3
 8015cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015cfc:	681b      	ldr	r3, [r3, #0]
 8015cfe:	68db      	ldr	r3, [r3, #12]
 8015d00:	899b      	ldrh	r3, [r3, #12]
 8015d02:	b29b      	uxth	r3, r3
 8015d04:	4618      	mov	r0, r3
 8015d06:	f7fa fc53 	bl	80105b0 <lwip_htons>
 8015d0a:	4603      	mov	r3, r0
 8015d0c:	b2db      	uxtb	r3, r3
 8015d0e:	b29b      	uxth	r3, r3
 8015d10:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8015d14:	b29b      	uxth	r3, r3
 8015d16:	4618      	mov	r0, r3
 8015d18:	f7fa fc4a 	bl	80105b0 <lwip_htons>
 8015d1c:	4603      	mov	r3, r0
 8015d1e:	b21b      	sxth	r3, r3
 8015d20:	4323      	orrs	r3, r4
 8015d22:	b21a      	sxth	r2, r3
 8015d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d26:	681b      	ldr	r3, [r3, #0]
 8015d28:	68db      	ldr	r3, [r3, #12]
 8015d2a:	b292      	uxth	r2, r2
 8015d2c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8015d2e:	687b      	ldr	r3, [r7, #4]
 8015d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015d32:	b29a      	uxth	r2, r3
 8015d34:	687b      	ldr	r3, [r7, #4]
 8015d36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015d38:	4413      	add	r3, r2
 8015d3a:	b299      	uxth	r1, r3
 8015d3c:	4b3c      	ldr	r3, [pc, #240]	; (8015e30 <tcp_receive+0xf18>)
 8015d3e:	681b      	ldr	r3, [r3, #0]
 8015d40:	b29a      	uxth	r2, r3
 8015d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d44:	681b      	ldr	r3, [r3, #0]
 8015d46:	1a8a      	subs	r2, r1, r2
 8015d48:	b292      	uxth	r2, r2
 8015d4a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8015d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d4e:	681b      	ldr	r3, [r3, #0]
 8015d50:	685a      	ldr	r2, [r3, #4]
 8015d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d54:	681b      	ldr	r3, [r3, #0]
 8015d56:	891b      	ldrh	r3, [r3, #8]
 8015d58:	4619      	mov	r1, r3
 8015d5a:	4610      	mov	r0, r2
 8015d5c:	f7fb fe5a 	bl	8011a14 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8015d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d62:	681b      	ldr	r3, [r3, #0]
 8015d64:	891c      	ldrh	r4, [r3, #8]
 8015d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d68:	681b      	ldr	r3, [r3, #0]
 8015d6a:	68db      	ldr	r3, [r3, #12]
 8015d6c:	899b      	ldrh	r3, [r3, #12]
 8015d6e:	b29b      	uxth	r3, r3
 8015d70:	4618      	mov	r0, r3
 8015d72:	f7fa fc1d 	bl	80105b0 <lwip_htons>
 8015d76:	4603      	mov	r3, r0
 8015d78:	b2db      	uxtb	r3, r3
 8015d7a:	f003 0303 	and.w	r3, r3, #3
 8015d7e:	2b00      	cmp	r3, #0
 8015d80:	d001      	beq.n	8015d86 <tcp_receive+0xe6e>
 8015d82:	2301      	movs	r3, #1
 8015d84:	e000      	b.n	8015d88 <tcp_receive+0xe70>
 8015d86:	2300      	movs	r3, #0
 8015d88:	4423      	add	r3, r4
 8015d8a:	b29a      	uxth	r2, r3
 8015d8c:	4b2a      	ldr	r3, [pc, #168]	; (8015e38 <tcp_receive+0xf20>)
 8015d8e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8015d90:	4b29      	ldr	r3, [pc, #164]	; (8015e38 <tcp_receive+0xf20>)
 8015d92:	881b      	ldrh	r3, [r3, #0]
 8015d94:	461a      	mov	r2, r3
 8015d96:	4b26      	ldr	r3, [pc, #152]	; (8015e30 <tcp_receive+0xf18>)
 8015d98:	681b      	ldr	r3, [r3, #0]
 8015d9a:	441a      	add	r2, r3
 8015d9c:	687b      	ldr	r3, [r7, #4]
 8015d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015da0:	6879      	ldr	r1, [r7, #4]
 8015da2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015da4:	440b      	add	r3, r1
 8015da6:	429a      	cmp	r2, r3
 8015da8:	d019      	beq.n	8015dde <tcp_receive+0xec6>
 8015daa:	4b24      	ldr	r3, [pc, #144]	; (8015e3c <tcp_receive+0xf24>)
 8015dac:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8015db0:	4923      	ldr	r1, [pc, #140]	; (8015e40 <tcp_receive+0xf28>)
 8015db2:	4824      	ldr	r0, [pc, #144]	; (8015e44 <tcp_receive+0xf2c>)
 8015db4:	f007 fb64 	bl	801d480 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8015db8:	e011      	b.n	8015dde <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8015dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015dbc:	681b      	ldr	r3, [r3, #0]
 8015dbe:	63bb      	str	r3, [r7, #56]	; 0x38
 8015dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015dc2:	2b00      	cmp	r3, #0
 8015dc4:	f47f aea4 	bne.w	8015b10 <tcp_receive+0xbf8>
 8015dc8:	e00a      	b.n	8015de0 <tcp_receive+0xec8>
                break;
 8015dca:	bf00      	nop
 8015dcc:	e008      	b.n	8015de0 <tcp_receive+0xec8>
                break;
 8015dce:	bf00      	nop
 8015dd0:	e006      	b.n	8015de0 <tcp_receive+0xec8>
                  break;
 8015dd2:	bf00      	nop
 8015dd4:	e004      	b.n	8015de0 <tcp_receive+0xec8>
                  break;
 8015dd6:	bf00      	nop
 8015dd8:	e002      	b.n	8015de0 <tcp_receive+0xec8>
                  break;
 8015dda:	bf00      	nop
 8015ddc:	e000      	b.n	8015de0 <tcp_receive+0xec8>
                break;
 8015dde:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8015de0:	6878      	ldr	r0, [r7, #4]
 8015de2:	f001 fa33 	bl	801724c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8015de6:	e003      	b.n	8015df0 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8015de8:	6878      	ldr	r0, [r7, #4]
 8015dea:	f001 fa2f 	bl	801724c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8015dee:	e01a      	b.n	8015e26 <tcp_receive+0xf0e>
 8015df0:	e019      	b.n	8015e26 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8015df2:	4b0f      	ldr	r3, [pc, #60]	; (8015e30 <tcp_receive+0xf18>)
 8015df4:	681a      	ldr	r2, [r3, #0]
 8015df6:	687b      	ldr	r3, [r7, #4]
 8015df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015dfa:	1ad3      	subs	r3, r2, r3
 8015dfc:	2b00      	cmp	r3, #0
 8015dfe:	db0a      	blt.n	8015e16 <tcp_receive+0xefe>
 8015e00:	4b0b      	ldr	r3, [pc, #44]	; (8015e30 <tcp_receive+0xf18>)
 8015e02:	681a      	ldr	r2, [r3, #0]
 8015e04:	687b      	ldr	r3, [r7, #4]
 8015e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e08:	6879      	ldr	r1, [r7, #4]
 8015e0a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015e0c:	440b      	add	r3, r1
 8015e0e:	1ad3      	subs	r3, r2, r3
 8015e10:	3301      	adds	r3, #1
 8015e12:	2b00      	cmp	r3, #0
 8015e14:	dd07      	ble.n	8015e26 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8015e16:	687b      	ldr	r3, [r7, #4]
 8015e18:	8b5b      	ldrh	r3, [r3, #26]
 8015e1a:	f043 0302 	orr.w	r3, r3, #2
 8015e1e:	b29a      	uxth	r2, r3
 8015e20:	687b      	ldr	r3, [r7, #4]
 8015e22:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8015e24:	e7ff      	b.n	8015e26 <tcp_receive+0xf0e>
 8015e26:	bf00      	nop
 8015e28:	3750      	adds	r7, #80	; 0x50
 8015e2a:	46bd      	mov	sp, r7
 8015e2c:	bdb0      	pop	{r4, r5, r7, pc}
 8015e2e:	bf00      	nop
 8015e30:	200137d0 	.word	0x200137d0
 8015e34:	200137b0 	.word	0x200137b0
 8015e38:	200137da 	.word	0x200137da
 8015e3c:	08020a3c 	.word	0x08020a3c
 8015e40:	08020de4 	.word	0x08020de4
 8015e44:	08020a88 	.word	0x08020a88

08015e48 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8015e48:	b480      	push	{r7}
 8015e4a:	b083      	sub	sp, #12
 8015e4c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8015e4e:	4b15      	ldr	r3, [pc, #84]	; (8015ea4 <tcp_get_next_optbyte+0x5c>)
 8015e50:	881b      	ldrh	r3, [r3, #0]
 8015e52:	1c5a      	adds	r2, r3, #1
 8015e54:	b291      	uxth	r1, r2
 8015e56:	4a13      	ldr	r2, [pc, #76]	; (8015ea4 <tcp_get_next_optbyte+0x5c>)
 8015e58:	8011      	strh	r1, [r2, #0]
 8015e5a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8015e5c:	4b12      	ldr	r3, [pc, #72]	; (8015ea8 <tcp_get_next_optbyte+0x60>)
 8015e5e:	681b      	ldr	r3, [r3, #0]
 8015e60:	2b00      	cmp	r3, #0
 8015e62:	d004      	beq.n	8015e6e <tcp_get_next_optbyte+0x26>
 8015e64:	4b11      	ldr	r3, [pc, #68]	; (8015eac <tcp_get_next_optbyte+0x64>)
 8015e66:	881b      	ldrh	r3, [r3, #0]
 8015e68:	88fa      	ldrh	r2, [r7, #6]
 8015e6a:	429a      	cmp	r2, r3
 8015e6c:	d208      	bcs.n	8015e80 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8015e6e:	4b10      	ldr	r3, [pc, #64]	; (8015eb0 <tcp_get_next_optbyte+0x68>)
 8015e70:	681b      	ldr	r3, [r3, #0]
 8015e72:	3314      	adds	r3, #20
 8015e74:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8015e76:	88fb      	ldrh	r3, [r7, #6]
 8015e78:	683a      	ldr	r2, [r7, #0]
 8015e7a:	4413      	add	r3, r2
 8015e7c:	781b      	ldrb	r3, [r3, #0]
 8015e7e:	e00b      	b.n	8015e98 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8015e80:	88fb      	ldrh	r3, [r7, #6]
 8015e82:	b2da      	uxtb	r2, r3
 8015e84:	4b09      	ldr	r3, [pc, #36]	; (8015eac <tcp_get_next_optbyte+0x64>)
 8015e86:	881b      	ldrh	r3, [r3, #0]
 8015e88:	b2db      	uxtb	r3, r3
 8015e8a:	1ad3      	subs	r3, r2, r3
 8015e8c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8015e8e:	4b06      	ldr	r3, [pc, #24]	; (8015ea8 <tcp_get_next_optbyte+0x60>)
 8015e90:	681a      	ldr	r2, [r3, #0]
 8015e92:	797b      	ldrb	r3, [r7, #5]
 8015e94:	4413      	add	r3, r2
 8015e96:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015e98:	4618      	mov	r0, r3
 8015e9a:	370c      	adds	r7, #12
 8015e9c:	46bd      	mov	sp, r7
 8015e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ea2:	4770      	bx	lr
 8015ea4:	200137cc 	.word	0x200137cc
 8015ea8:	200137c8 	.word	0x200137c8
 8015eac:	200137c6 	.word	0x200137c6
 8015eb0:	200137c0 	.word	0x200137c0

08015eb4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8015eb4:	b580      	push	{r7, lr}
 8015eb6:	b084      	sub	sp, #16
 8015eb8:	af00      	add	r7, sp, #0
 8015eba:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8015ebc:	687b      	ldr	r3, [r7, #4]
 8015ebe:	2b00      	cmp	r3, #0
 8015ec0:	d106      	bne.n	8015ed0 <tcp_parseopt+0x1c>
 8015ec2:	4b32      	ldr	r3, [pc, #200]	; (8015f8c <tcp_parseopt+0xd8>)
 8015ec4:	f240 727d 	movw	r2, #1917	; 0x77d
 8015ec8:	4931      	ldr	r1, [pc, #196]	; (8015f90 <tcp_parseopt+0xdc>)
 8015eca:	4832      	ldr	r0, [pc, #200]	; (8015f94 <tcp_parseopt+0xe0>)
 8015ecc:	f007 fad8 	bl	801d480 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8015ed0:	4b31      	ldr	r3, [pc, #196]	; (8015f98 <tcp_parseopt+0xe4>)
 8015ed2:	881b      	ldrh	r3, [r3, #0]
 8015ed4:	2b00      	cmp	r3, #0
 8015ed6:	d055      	beq.n	8015f84 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8015ed8:	4b30      	ldr	r3, [pc, #192]	; (8015f9c <tcp_parseopt+0xe8>)
 8015eda:	2200      	movs	r2, #0
 8015edc:	801a      	strh	r2, [r3, #0]
 8015ede:	e045      	b.n	8015f6c <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8015ee0:	f7ff ffb2 	bl	8015e48 <tcp_get_next_optbyte>
 8015ee4:	4603      	mov	r3, r0
 8015ee6:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8015ee8:	7bfb      	ldrb	r3, [r7, #15]
 8015eea:	2b02      	cmp	r3, #2
 8015eec:	d006      	beq.n	8015efc <tcp_parseopt+0x48>
 8015eee:	2b02      	cmp	r3, #2
 8015ef0:	dc2b      	bgt.n	8015f4a <tcp_parseopt+0x96>
 8015ef2:	2b00      	cmp	r3, #0
 8015ef4:	d041      	beq.n	8015f7a <tcp_parseopt+0xc6>
 8015ef6:	2b01      	cmp	r3, #1
 8015ef8:	d127      	bne.n	8015f4a <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8015efa:	e037      	b.n	8015f6c <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8015efc:	f7ff ffa4 	bl	8015e48 <tcp_get_next_optbyte>
 8015f00:	4603      	mov	r3, r0
 8015f02:	2b04      	cmp	r3, #4
 8015f04:	d13b      	bne.n	8015f7e <tcp_parseopt+0xca>
 8015f06:	4b25      	ldr	r3, [pc, #148]	; (8015f9c <tcp_parseopt+0xe8>)
 8015f08:	881b      	ldrh	r3, [r3, #0]
 8015f0a:	3301      	adds	r3, #1
 8015f0c:	4a22      	ldr	r2, [pc, #136]	; (8015f98 <tcp_parseopt+0xe4>)
 8015f0e:	8812      	ldrh	r2, [r2, #0]
 8015f10:	4293      	cmp	r3, r2
 8015f12:	da34      	bge.n	8015f7e <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8015f14:	f7ff ff98 	bl	8015e48 <tcp_get_next_optbyte>
 8015f18:	4603      	mov	r3, r0
 8015f1a:	b29b      	uxth	r3, r3
 8015f1c:	021b      	lsls	r3, r3, #8
 8015f1e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8015f20:	f7ff ff92 	bl	8015e48 <tcp_get_next_optbyte>
 8015f24:	4603      	mov	r3, r0
 8015f26:	b29a      	uxth	r2, r3
 8015f28:	89bb      	ldrh	r3, [r7, #12]
 8015f2a:	4313      	orrs	r3, r2
 8015f2c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8015f2e:	89bb      	ldrh	r3, [r7, #12]
 8015f30:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8015f34:	d804      	bhi.n	8015f40 <tcp_parseopt+0x8c>
 8015f36:	89bb      	ldrh	r3, [r7, #12]
 8015f38:	2b00      	cmp	r3, #0
 8015f3a:	d001      	beq.n	8015f40 <tcp_parseopt+0x8c>
 8015f3c:	89ba      	ldrh	r2, [r7, #12]
 8015f3e:	e001      	b.n	8015f44 <tcp_parseopt+0x90>
 8015f40:	f44f 7206 	mov.w	r2, #536	; 0x218
 8015f44:	687b      	ldr	r3, [r7, #4]
 8015f46:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8015f48:	e010      	b.n	8015f6c <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8015f4a:	f7ff ff7d 	bl	8015e48 <tcp_get_next_optbyte>
 8015f4e:	4603      	mov	r3, r0
 8015f50:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8015f52:	7afb      	ldrb	r3, [r7, #11]
 8015f54:	2b01      	cmp	r3, #1
 8015f56:	d914      	bls.n	8015f82 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8015f58:	7afb      	ldrb	r3, [r7, #11]
 8015f5a:	b29a      	uxth	r2, r3
 8015f5c:	4b0f      	ldr	r3, [pc, #60]	; (8015f9c <tcp_parseopt+0xe8>)
 8015f5e:	881b      	ldrh	r3, [r3, #0]
 8015f60:	4413      	add	r3, r2
 8015f62:	b29b      	uxth	r3, r3
 8015f64:	3b02      	subs	r3, #2
 8015f66:	b29a      	uxth	r2, r3
 8015f68:	4b0c      	ldr	r3, [pc, #48]	; (8015f9c <tcp_parseopt+0xe8>)
 8015f6a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8015f6c:	4b0b      	ldr	r3, [pc, #44]	; (8015f9c <tcp_parseopt+0xe8>)
 8015f6e:	881a      	ldrh	r2, [r3, #0]
 8015f70:	4b09      	ldr	r3, [pc, #36]	; (8015f98 <tcp_parseopt+0xe4>)
 8015f72:	881b      	ldrh	r3, [r3, #0]
 8015f74:	429a      	cmp	r2, r3
 8015f76:	d3b3      	bcc.n	8015ee0 <tcp_parseopt+0x2c>
 8015f78:	e004      	b.n	8015f84 <tcp_parseopt+0xd0>
          return;
 8015f7a:	bf00      	nop
 8015f7c:	e002      	b.n	8015f84 <tcp_parseopt+0xd0>
            return;
 8015f7e:	bf00      	nop
 8015f80:	e000      	b.n	8015f84 <tcp_parseopt+0xd0>
            return;
 8015f82:	bf00      	nop
      }
    }
  }
}
 8015f84:	3710      	adds	r7, #16
 8015f86:	46bd      	mov	sp, r7
 8015f88:	bd80      	pop	{r7, pc}
 8015f8a:	bf00      	nop
 8015f8c:	08020a3c 	.word	0x08020a3c
 8015f90:	08020ea0 	.word	0x08020ea0
 8015f94:	08020a88 	.word	0x08020a88
 8015f98:	200137c4 	.word	0x200137c4
 8015f9c:	200137cc 	.word	0x200137cc

08015fa0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8015fa0:	b480      	push	{r7}
 8015fa2:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8015fa4:	4b05      	ldr	r3, [pc, #20]	; (8015fbc <tcp_trigger_input_pcb_close+0x1c>)
 8015fa6:	781b      	ldrb	r3, [r3, #0]
 8015fa8:	f043 0310 	orr.w	r3, r3, #16
 8015fac:	b2da      	uxtb	r2, r3
 8015fae:	4b03      	ldr	r3, [pc, #12]	; (8015fbc <tcp_trigger_input_pcb_close+0x1c>)
 8015fb0:	701a      	strb	r2, [r3, #0]
}
 8015fb2:	bf00      	nop
 8015fb4:	46bd      	mov	sp, r7
 8015fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fba:	4770      	bx	lr
 8015fbc:	200137dd 	.word	0x200137dd

08015fc0 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8015fc0:	b580      	push	{r7, lr}
 8015fc2:	b084      	sub	sp, #16
 8015fc4:	af00      	add	r7, sp, #0
 8015fc6:	60f8      	str	r0, [r7, #12]
 8015fc8:	60b9      	str	r1, [r7, #8]
 8015fca:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8015fcc:	68fb      	ldr	r3, [r7, #12]
 8015fce:	2b00      	cmp	r3, #0
 8015fd0:	d00a      	beq.n	8015fe8 <tcp_route+0x28>
 8015fd2:	68fb      	ldr	r3, [r7, #12]
 8015fd4:	7a1b      	ldrb	r3, [r3, #8]
 8015fd6:	2b00      	cmp	r3, #0
 8015fd8:	d006      	beq.n	8015fe8 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8015fda:	68fb      	ldr	r3, [r7, #12]
 8015fdc:	7a1b      	ldrb	r3, [r3, #8]
 8015fde:	4618      	mov	r0, r3
 8015fe0:	f7fb fb10 	bl	8011604 <netif_get_by_index>
 8015fe4:	4603      	mov	r3, r0
 8015fe6:	e003      	b.n	8015ff0 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8015fe8:	6878      	ldr	r0, [r7, #4]
 8015fea:	f005 f845 	bl	801b078 <ip4_route>
 8015fee:	4603      	mov	r3, r0
  }
}
 8015ff0:	4618      	mov	r0, r3
 8015ff2:	3710      	adds	r7, #16
 8015ff4:	46bd      	mov	sp, r7
 8015ff6:	bd80      	pop	{r7, pc}

08015ff8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8015ff8:	b590      	push	{r4, r7, lr}
 8015ffa:	b087      	sub	sp, #28
 8015ffc:	af00      	add	r7, sp, #0
 8015ffe:	60f8      	str	r0, [r7, #12]
 8016000:	60b9      	str	r1, [r7, #8]
 8016002:	603b      	str	r3, [r7, #0]
 8016004:	4613      	mov	r3, r2
 8016006:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8016008:	68fb      	ldr	r3, [r7, #12]
 801600a:	2b00      	cmp	r3, #0
 801600c:	d105      	bne.n	801601a <tcp_create_segment+0x22>
 801600e:	4b44      	ldr	r3, [pc, #272]	; (8016120 <tcp_create_segment+0x128>)
 8016010:	22a3      	movs	r2, #163	; 0xa3
 8016012:	4944      	ldr	r1, [pc, #272]	; (8016124 <tcp_create_segment+0x12c>)
 8016014:	4844      	ldr	r0, [pc, #272]	; (8016128 <tcp_create_segment+0x130>)
 8016016:	f007 fa33 	bl	801d480 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801601a:	68bb      	ldr	r3, [r7, #8]
 801601c:	2b00      	cmp	r3, #0
 801601e:	d105      	bne.n	801602c <tcp_create_segment+0x34>
 8016020:	4b3f      	ldr	r3, [pc, #252]	; (8016120 <tcp_create_segment+0x128>)
 8016022:	22a4      	movs	r2, #164	; 0xa4
 8016024:	4941      	ldr	r1, [pc, #260]	; (801612c <tcp_create_segment+0x134>)
 8016026:	4840      	ldr	r0, [pc, #256]	; (8016128 <tcp_create_segment+0x130>)
 8016028:	f007 fa2a 	bl	801d480 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801602c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8016030:	009b      	lsls	r3, r3, #2
 8016032:	b2db      	uxtb	r3, r3
 8016034:	f003 0304 	and.w	r3, r3, #4
 8016038:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801603a:	2003      	movs	r0, #3
 801603c:	f7fa ff6e 	bl	8010f1c <memp_malloc>
 8016040:	6138      	str	r0, [r7, #16]
 8016042:	693b      	ldr	r3, [r7, #16]
 8016044:	2b00      	cmp	r3, #0
 8016046:	d104      	bne.n	8016052 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8016048:	68b8      	ldr	r0, [r7, #8]
 801604a:	f7fb fe69 	bl	8011d20 <pbuf_free>
    return NULL;
 801604e:	2300      	movs	r3, #0
 8016050:	e061      	b.n	8016116 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8016052:	693b      	ldr	r3, [r7, #16]
 8016054:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8016058:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801605a:	693b      	ldr	r3, [r7, #16]
 801605c:	2200      	movs	r2, #0
 801605e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8016060:	693b      	ldr	r3, [r7, #16]
 8016062:	68ba      	ldr	r2, [r7, #8]
 8016064:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8016066:	68bb      	ldr	r3, [r7, #8]
 8016068:	891a      	ldrh	r2, [r3, #8]
 801606a:	7dfb      	ldrb	r3, [r7, #23]
 801606c:	b29b      	uxth	r3, r3
 801606e:	429a      	cmp	r2, r3
 8016070:	d205      	bcs.n	801607e <tcp_create_segment+0x86>
 8016072:	4b2b      	ldr	r3, [pc, #172]	; (8016120 <tcp_create_segment+0x128>)
 8016074:	22b0      	movs	r2, #176	; 0xb0
 8016076:	492e      	ldr	r1, [pc, #184]	; (8016130 <tcp_create_segment+0x138>)
 8016078:	482b      	ldr	r0, [pc, #172]	; (8016128 <tcp_create_segment+0x130>)
 801607a:	f007 fa01 	bl	801d480 <iprintf>
  seg->len = p->tot_len - optlen;
 801607e:	68bb      	ldr	r3, [r7, #8]
 8016080:	891a      	ldrh	r2, [r3, #8]
 8016082:	7dfb      	ldrb	r3, [r7, #23]
 8016084:	b29b      	uxth	r3, r3
 8016086:	1ad3      	subs	r3, r2, r3
 8016088:	b29a      	uxth	r2, r3
 801608a:	693b      	ldr	r3, [r7, #16]
 801608c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801608e:	2114      	movs	r1, #20
 8016090:	68b8      	ldr	r0, [r7, #8]
 8016092:	f7fb fdaf 	bl	8011bf4 <pbuf_add_header>
 8016096:	4603      	mov	r3, r0
 8016098:	2b00      	cmp	r3, #0
 801609a:	d004      	beq.n	80160a6 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801609c:	6938      	ldr	r0, [r7, #16]
 801609e:	f7fd f8ce 	bl	801323e <tcp_seg_free>
    return NULL;
 80160a2:	2300      	movs	r3, #0
 80160a4:	e037      	b.n	8016116 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80160a6:	693b      	ldr	r3, [r7, #16]
 80160a8:	685b      	ldr	r3, [r3, #4]
 80160aa:	685a      	ldr	r2, [r3, #4]
 80160ac:	693b      	ldr	r3, [r7, #16]
 80160ae:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80160b0:	68fb      	ldr	r3, [r7, #12]
 80160b2:	8ada      	ldrh	r2, [r3, #22]
 80160b4:	693b      	ldr	r3, [r7, #16]
 80160b6:	68dc      	ldr	r4, [r3, #12]
 80160b8:	4610      	mov	r0, r2
 80160ba:	f7fa fa79 	bl	80105b0 <lwip_htons>
 80160be:	4603      	mov	r3, r0
 80160c0:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80160c2:	68fb      	ldr	r3, [r7, #12]
 80160c4:	8b1a      	ldrh	r2, [r3, #24]
 80160c6:	693b      	ldr	r3, [r7, #16]
 80160c8:	68dc      	ldr	r4, [r3, #12]
 80160ca:	4610      	mov	r0, r2
 80160cc:	f7fa fa70 	bl	80105b0 <lwip_htons>
 80160d0:	4603      	mov	r3, r0
 80160d2:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80160d4:	693b      	ldr	r3, [r7, #16]
 80160d6:	68dc      	ldr	r4, [r3, #12]
 80160d8:	6838      	ldr	r0, [r7, #0]
 80160da:	f7fa fa7e 	bl	80105da <lwip_htonl>
 80160de:	4603      	mov	r3, r0
 80160e0:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80160e2:	7dfb      	ldrb	r3, [r7, #23]
 80160e4:	089b      	lsrs	r3, r3, #2
 80160e6:	b2db      	uxtb	r3, r3
 80160e8:	b29b      	uxth	r3, r3
 80160ea:	3305      	adds	r3, #5
 80160ec:	b29b      	uxth	r3, r3
 80160ee:	031b      	lsls	r3, r3, #12
 80160f0:	b29a      	uxth	r2, r3
 80160f2:	79fb      	ldrb	r3, [r7, #7]
 80160f4:	b29b      	uxth	r3, r3
 80160f6:	4313      	orrs	r3, r2
 80160f8:	b29a      	uxth	r2, r3
 80160fa:	693b      	ldr	r3, [r7, #16]
 80160fc:	68dc      	ldr	r4, [r3, #12]
 80160fe:	4610      	mov	r0, r2
 8016100:	f7fa fa56 	bl	80105b0 <lwip_htons>
 8016104:	4603      	mov	r3, r0
 8016106:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8016108:	693b      	ldr	r3, [r7, #16]
 801610a:	68db      	ldr	r3, [r3, #12]
 801610c:	2200      	movs	r2, #0
 801610e:	749a      	strb	r2, [r3, #18]
 8016110:	2200      	movs	r2, #0
 8016112:	74da      	strb	r2, [r3, #19]
  return seg;
 8016114:	693b      	ldr	r3, [r7, #16]
}
 8016116:	4618      	mov	r0, r3
 8016118:	371c      	adds	r7, #28
 801611a:	46bd      	mov	sp, r7
 801611c:	bd90      	pop	{r4, r7, pc}
 801611e:	bf00      	nop
 8016120:	08020ebc 	.word	0x08020ebc
 8016124:	08020ef0 	.word	0x08020ef0
 8016128:	08020f10 	.word	0x08020f10
 801612c:	08020f38 	.word	0x08020f38
 8016130:	08020f5c 	.word	0x08020f5c

08016134 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8016134:	b590      	push	{r4, r7, lr}
 8016136:	b08b      	sub	sp, #44	; 0x2c
 8016138:	af02      	add	r7, sp, #8
 801613a:	6078      	str	r0, [r7, #4]
 801613c:	460b      	mov	r3, r1
 801613e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8016140:	2300      	movs	r3, #0
 8016142:	61fb      	str	r3, [r7, #28]
 8016144:	2300      	movs	r3, #0
 8016146:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8016148:	2300      	movs	r3, #0
 801614a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801614c:	687b      	ldr	r3, [r7, #4]
 801614e:	2b00      	cmp	r3, #0
 8016150:	d106      	bne.n	8016160 <tcp_split_unsent_seg+0x2c>
 8016152:	4b95      	ldr	r3, [pc, #596]	; (80163a8 <tcp_split_unsent_seg+0x274>)
 8016154:	f240 324b 	movw	r2, #843	; 0x34b
 8016158:	4994      	ldr	r1, [pc, #592]	; (80163ac <tcp_split_unsent_seg+0x278>)
 801615a:	4895      	ldr	r0, [pc, #596]	; (80163b0 <tcp_split_unsent_seg+0x27c>)
 801615c:	f007 f990 	bl	801d480 <iprintf>

  useg = pcb->unsent;
 8016160:	687b      	ldr	r3, [r7, #4]
 8016162:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016164:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8016166:	697b      	ldr	r3, [r7, #20]
 8016168:	2b00      	cmp	r3, #0
 801616a:	d102      	bne.n	8016172 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801616c:	f04f 33ff 	mov.w	r3, #4294967295
 8016170:	e116      	b.n	80163a0 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8016172:	887b      	ldrh	r3, [r7, #2]
 8016174:	2b00      	cmp	r3, #0
 8016176:	d109      	bne.n	801618c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8016178:	4b8b      	ldr	r3, [pc, #556]	; (80163a8 <tcp_split_unsent_seg+0x274>)
 801617a:	f240 3253 	movw	r2, #851	; 0x353
 801617e:	498d      	ldr	r1, [pc, #564]	; (80163b4 <tcp_split_unsent_seg+0x280>)
 8016180:	488b      	ldr	r0, [pc, #556]	; (80163b0 <tcp_split_unsent_seg+0x27c>)
 8016182:	f007 f97d 	bl	801d480 <iprintf>
    return ERR_VAL;
 8016186:	f06f 0305 	mvn.w	r3, #5
 801618a:	e109      	b.n	80163a0 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801618c:	697b      	ldr	r3, [r7, #20]
 801618e:	891b      	ldrh	r3, [r3, #8]
 8016190:	887a      	ldrh	r2, [r7, #2]
 8016192:	429a      	cmp	r2, r3
 8016194:	d301      	bcc.n	801619a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8016196:	2300      	movs	r3, #0
 8016198:	e102      	b.n	80163a0 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801619a:	687b      	ldr	r3, [r7, #4]
 801619c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801619e:	887a      	ldrh	r2, [r7, #2]
 80161a0:	429a      	cmp	r2, r3
 80161a2:	d906      	bls.n	80161b2 <tcp_split_unsent_seg+0x7e>
 80161a4:	4b80      	ldr	r3, [pc, #512]	; (80163a8 <tcp_split_unsent_seg+0x274>)
 80161a6:	f240 325b 	movw	r2, #859	; 0x35b
 80161aa:	4983      	ldr	r1, [pc, #524]	; (80163b8 <tcp_split_unsent_seg+0x284>)
 80161ac:	4880      	ldr	r0, [pc, #512]	; (80163b0 <tcp_split_unsent_seg+0x27c>)
 80161ae:	f007 f967 	bl	801d480 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80161b2:	697b      	ldr	r3, [r7, #20]
 80161b4:	891b      	ldrh	r3, [r3, #8]
 80161b6:	2b00      	cmp	r3, #0
 80161b8:	d106      	bne.n	80161c8 <tcp_split_unsent_seg+0x94>
 80161ba:	4b7b      	ldr	r3, [pc, #492]	; (80163a8 <tcp_split_unsent_seg+0x274>)
 80161bc:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80161c0:	497e      	ldr	r1, [pc, #504]	; (80163bc <tcp_split_unsent_seg+0x288>)
 80161c2:	487b      	ldr	r0, [pc, #492]	; (80163b0 <tcp_split_unsent_seg+0x27c>)
 80161c4:	f007 f95c 	bl	801d480 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80161c8:	697b      	ldr	r3, [r7, #20]
 80161ca:	7a9b      	ldrb	r3, [r3, #10]
 80161cc:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80161ce:	7bfb      	ldrb	r3, [r7, #15]
 80161d0:	009b      	lsls	r3, r3, #2
 80161d2:	b2db      	uxtb	r3, r3
 80161d4:	f003 0304 	and.w	r3, r3, #4
 80161d8:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80161da:	697b      	ldr	r3, [r7, #20]
 80161dc:	891a      	ldrh	r2, [r3, #8]
 80161de:	887b      	ldrh	r3, [r7, #2]
 80161e0:	1ad3      	subs	r3, r2, r3
 80161e2:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80161e4:	7bbb      	ldrb	r3, [r7, #14]
 80161e6:	b29a      	uxth	r2, r3
 80161e8:	89bb      	ldrh	r3, [r7, #12]
 80161ea:	4413      	add	r3, r2
 80161ec:	b29b      	uxth	r3, r3
 80161ee:	f44f 7220 	mov.w	r2, #640	; 0x280
 80161f2:	4619      	mov	r1, r3
 80161f4:	2036      	movs	r0, #54	; 0x36
 80161f6:	f7fb faaf 	bl	8011758 <pbuf_alloc>
 80161fa:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80161fc:	693b      	ldr	r3, [r7, #16]
 80161fe:	2b00      	cmp	r3, #0
 8016200:	f000 80b7 	beq.w	8016372 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8016204:	697b      	ldr	r3, [r7, #20]
 8016206:	685b      	ldr	r3, [r3, #4]
 8016208:	891a      	ldrh	r2, [r3, #8]
 801620a:	697b      	ldr	r3, [r7, #20]
 801620c:	891b      	ldrh	r3, [r3, #8]
 801620e:	1ad3      	subs	r3, r2, r3
 8016210:	b29a      	uxth	r2, r3
 8016212:	887b      	ldrh	r3, [r7, #2]
 8016214:	4413      	add	r3, r2
 8016216:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8016218:	697b      	ldr	r3, [r7, #20]
 801621a:	6858      	ldr	r0, [r3, #4]
 801621c:	693b      	ldr	r3, [r7, #16]
 801621e:	685a      	ldr	r2, [r3, #4]
 8016220:	7bbb      	ldrb	r3, [r7, #14]
 8016222:	18d1      	adds	r1, r2, r3
 8016224:	897b      	ldrh	r3, [r7, #10]
 8016226:	89ba      	ldrh	r2, [r7, #12]
 8016228:	f7fb ff80 	bl	801212c <pbuf_copy_partial>
 801622c:	4603      	mov	r3, r0
 801622e:	461a      	mov	r2, r3
 8016230:	89bb      	ldrh	r3, [r7, #12]
 8016232:	4293      	cmp	r3, r2
 8016234:	f040 809f 	bne.w	8016376 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8016238:	697b      	ldr	r3, [r7, #20]
 801623a:	68db      	ldr	r3, [r3, #12]
 801623c:	899b      	ldrh	r3, [r3, #12]
 801623e:	b29b      	uxth	r3, r3
 8016240:	4618      	mov	r0, r3
 8016242:	f7fa f9b5 	bl	80105b0 <lwip_htons>
 8016246:	4603      	mov	r3, r0
 8016248:	b2db      	uxtb	r3, r3
 801624a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801624e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8016250:	2300      	movs	r3, #0
 8016252:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8016254:	7efb      	ldrb	r3, [r7, #27]
 8016256:	f003 0308 	and.w	r3, r3, #8
 801625a:	2b00      	cmp	r3, #0
 801625c:	d007      	beq.n	801626e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801625e:	7efb      	ldrb	r3, [r7, #27]
 8016260:	f023 0308 	bic.w	r3, r3, #8
 8016264:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8016266:	7ebb      	ldrb	r3, [r7, #26]
 8016268:	f043 0308 	orr.w	r3, r3, #8
 801626c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801626e:	7efb      	ldrb	r3, [r7, #27]
 8016270:	f003 0301 	and.w	r3, r3, #1
 8016274:	2b00      	cmp	r3, #0
 8016276:	d007      	beq.n	8016288 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8016278:	7efb      	ldrb	r3, [r7, #27]
 801627a:	f023 0301 	bic.w	r3, r3, #1
 801627e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8016280:	7ebb      	ldrb	r3, [r7, #26]
 8016282:	f043 0301 	orr.w	r3, r3, #1
 8016286:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8016288:	697b      	ldr	r3, [r7, #20]
 801628a:	68db      	ldr	r3, [r3, #12]
 801628c:	685b      	ldr	r3, [r3, #4]
 801628e:	4618      	mov	r0, r3
 8016290:	f7fa f9a3 	bl	80105da <lwip_htonl>
 8016294:	4602      	mov	r2, r0
 8016296:	887b      	ldrh	r3, [r7, #2]
 8016298:	18d1      	adds	r1, r2, r3
 801629a:	7eba      	ldrb	r2, [r7, #26]
 801629c:	7bfb      	ldrb	r3, [r7, #15]
 801629e:	9300      	str	r3, [sp, #0]
 80162a0:	460b      	mov	r3, r1
 80162a2:	6939      	ldr	r1, [r7, #16]
 80162a4:	6878      	ldr	r0, [r7, #4]
 80162a6:	f7ff fea7 	bl	8015ff8 <tcp_create_segment>
 80162aa:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80162ac:	69fb      	ldr	r3, [r7, #28]
 80162ae:	2b00      	cmp	r3, #0
 80162b0:	d063      	beq.n	801637a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80162b2:	697b      	ldr	r3, [r7, #20]
 80162b4:	685b      	ldr	r3, [r3, #4]
 80162b6:	4618      	mov	r0, r3
 80162b8:	f7fb fdc0 	bl	8011e3c <pbuf_clen>
 80162bc:	4603      	mov	r3, r0
 80162be:	461a      	mov	r2, r3
 80162c0:	687b      	ldr	r3, [r7, #4]
 80162c2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80162c6:	1a9b      	subs	r3, r3, r2
 80162c8:	b29a      	uxth	r2, r3
 80162ca:	687b      	ldr	r3, [r7, #4]
 80162cc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80162d0:	697b      	ldr	r3, [r7, #20]
 80162d2:	6858      	ldr	r0, [r3, #4]
 80162d4:	697b      	ldr	r3, [r7, #20]
 80162d6:	685b      	ldr	r3, [r3, #4]
 80162d8:	891a      	ldrh	r2, [r3, #8]
 80162da:	89bb      	ldrh	r3, [r7, #12]
 80162dc:	1ad3      	subs	r3, r2, r3
 80162de:	b29b      	uxth	r3, r3
 80162e0:	4619      	mov	r1, r3
 80162e2:	f7fb fb97 	bl	8011a14 <pbuf_realloc>
  useg->len -= remainder;
 80162e6:	697b      	ldr	r3, [r7, #20]
 80162e8:	891a      	ldrh	r2, [r3, #8]
 80162ea:	89bb      	ldrh	r3, [r7, #12]
 80162ec:	1ad3      	subs	r3, r2, r3
 80162ee:	b29a      	uxth	r2, r3
 80162f0:	697b      	ldr	r3, [r7, #20]
 80162f2:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80162f4:	697b      	ldr	r3, [r7, #20]
 80162f6:	68db      	ldr	r3, [r3, #12]
 80162f8:	899b      	ldrh	r3, [r3, #12]
 80162fa:	b29c      	uxth	r4, r3
 80162fc:	7efb      	ldrb	r3, [r7, #27]
 80162fe:	b29b      	uxth	r3, r3
 8016300:	4618      	mov	r0, r3
 8016302:	f7fa f955 	bl	80105b0 <lwip_htons>
 8016306:	4603      	mov	r3, r0
 8016308:	461a      	mov	r2, r3
 801630a:	697b      	ldr	r3, [r7, #20]
 801630c:	68db      	ldr	r3, [r3, #12]
 801630e:	4322      	orrs	r2, r4
 8016310:	b292      	uxth	r2, r2
 8016312:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8016314:	697b      	ldr	r3, [r7, #20]
 8016316:	685b      	ldr	r3, [r3, #4]
 8016318:	4618      	mov	r0, r3
 801631a:	f7fb fd8f 	bl	8011e3c <pbuf_clen>
 801631e:	4603      	mov	r3, r0
 8016320:	461a      	mov	r2, r3
 8016322:	687b      	ldr	r3, [r7, #4]
 8016324:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016328:	4413      	add	r3, r2
 801632a:	b29a      	uxth	r2, r3
 801632c:	687b      	ldr	r3, [r7, #4]
 801632e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8016332:	69fb      	ldr	r3, [r7, #28]
 8016334:	685b      	ldr	r3, [r3, #4]
 8016336:	4618      	mov	r0, r3
 8016338:	f7fb fd80 	bl	8011e3c <pbuf_clen>
 801633c:	4603      	mov	r3, r0
 801633e:	461a      	mov	r2, r3
 8016340:	687b      	ldr	r3, [r7, #4]
 8016342:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016346:	4413      	add	r3, r2
 8016348:	b29a      	uxth	r2, r3
 801634a:	687b      	ldr	r3, [r7, #4]
 801634c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8016350:	697b      	ldr	r3, [r7, #20]
 8016352:	681a      	ldr	r2, [r3, #0]
 8016354:	69fb      	ldr	r3, [r7, #28]
 8016356:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8016358:	697b      	ldr	r3, [r7, #20]
 801635a:	69fa      	ldr	r2, [r7, #28]
 801635c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801635e:	69fb      	ldr	r3, [r7, #28]
 8016360:	681b      	ldr	r3, [r3, #0]
 8016362:	2b00      	cmp	r3, #0
 8016364:	d103      	bne.n	801636e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8016366:	687b      	ldr	r3, [r7, #4]
 8016368:	2200      	movs	r2, #0
 801636a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801636e:	2300      	movs	r3, #0
 8016370:	e016      	b.n	80163a0 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8016372:	bf00      	nop
 8016374:	e002      	b.n	801637c <tcp_split_unsent_seg+0x248>
    goto memerr;
 8016376:	bf00      	nop
 8016378:	e000      	b.n	801637c <tcp_split_unsent_seg+0x248>
    goto memerr;
 801637a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801637c:	69fb      	ldr	r3, [r7, #28]
 801637e:	2b00      	cmp	r3, #0
 8016380:	d006      	beq.n	8016390 <tcp_split_unsent_seg+0x25c>
 8016382:	4b09      	ldr	r3, [pc, #36]	; (80163a8 <tcp_split_unsent_seg+0x274>)
 8016384:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8016388:	490d      	ldr	r1, [pc, #52]	; (80163c0 <tcp_split_unsent_seg+0x28c>)
 801638a:	4809      	ldr	r0, [pc, #36]	; (80163b0 <tcp_split_unsent_seg+0x27c>)
 801638c:	f007 f878 	bl	801d480 <iprintf>
  if (p != NULL) {
 8016390:	693b      	ldr	r3, [r7, #16]
 8016392:	2b00      	cmp	r3, #0
 8016394:	d002      	beq.n	801639c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8016396:	6938      	ldr	r0, [r7, #16]
 8016398:	f7fb fcc2 	bl	8011d20 <pbuf_free>
  }

  return ERR_MEM;
 801639c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80163a0:	4618      	mov	r0, r3
 80163a2:	3724      	adds	r7, #36	; 0x24
 80163a4:	46bd      	mov	sp, r7
 80163a6:	bd90      	pop	{r4, r7, pc}
 80163a8:	08020ebc 	.word	0x08020ebc
 80163ac:	08021250 	.word	0x08021250
 80163b0:	08020f10 	.word	0x08020f10
 80163b4:	08021274 	.word	0x08021274
 80163b8:	08021298 	.word	0x08021298
 80163bc:	080212a8 	.word	0x080212a8
 80163c0:	080212b8 	.word	0x080212b8

080163c4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80163c4:	b590      	push	{r4, r7, lr}
 80163c6:	b085      	sub	sp, #20
 80163c8:	af00      	add	r7, sp, #0
 80163ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80163cc:	687b      	ldr	r3, [r7, #4]
 80163ce:	2b00      	cmp	r3, #0
 80163d0:	d106      	bne.n	80163e0 <tcp_send_fin+0x1c>
 80163d2:	4b21      	ldr	r3, [pc, #132]	; (8016458 <tcp_send_fin+0x94>)
 80163d4:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80163d8:	4920      	ldr	r1, [pc, #128]	; (801645c <tcp_send_fin+0x98>)
 80163da:	4821      	ldr	r0, [pc, #132]	; (8016460 <tcp_send_fin+0x9c>)
 80163dc:	f007 f850 	bl	801d480 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80163e0:	687b      	ldr	r3, [r7, #4]
 80163e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80163e4:	2b00      	cmp	r3, #0
 80163e6:	d02e      	beq.n	8016446 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80163e8:	687b      	ldr	r3, [r7, #4]
 80163ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80163ec:	60fb      	str	r3, [r7, #12]
 80163ee:	e002      	b.n	80163f6 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80163f0:	68fb      	ldr	r3, [r7, #12]
 80163f2:	681b      	ldr	r3, [r3, #0]
 80163f4:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80163f6:	68fb      	ldr	r3, [r7, #12]
 80163f8:	681b      	ldr	r3, [r3, #0]
 80163fa:	2b00      	cmp	r3, #0
 80163fc:	d1f8      	bne.n	80163f0 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80163fe:	68fb      	ldr	r3, [r7, #12]
 8016400:	68db      	ldr	r3, [r3, #12]
 8016402:	899b      	ldrh	r3, [r3, #12]
 8016404:	b29b      	uxth	r3, r3
 8016406:	4618      	mov	r0, r3
 8016408:	f7fa f8d2 	bl	80105b0 <lwip_htons>
 801640c:	4603      	mov	r3, r0
 801640e:	b2db      	uxtb	r3, r3
 8016410:	f003 0307 	and.w	r3, r3, #7
 8016414:	2b00      	cmp	r3, #0
 8016416:	d116      	bne.n	8016446 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8016418:	68fb      	ldr	r3, [r7, #12]
 801641a:	68db      	ldr	r3, [r3, #12]
 801641c:	899b      	ldrh	r3, [r3, #12]
 801641e:	b29c      	uxth	r4, r3
 8016420:	2001      	movs	r0, #1
 8016422:	f7fa f8c5 	bl	80105b0 <lwip_htons>
 8016426:	4603      	mov	r3, r0
 8016428:	461a      	mov	r2, r3
 801642a:	68fb      	ldr	r3, [r7, #12]
 801642c:	68db      	ldr	r3, [r3, #12]
 801642e:	4322      	orrs	r2, r4
 8016430:	b292      	uxth	r2, r2
 8016432:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8016434:	687b      	ldr	r3, [r7, #4]
 8016436:	8b5b      	ldrh	r3, [r3, #26]
 8016438:	f043 0320 	orr.w	r3, r3, #32
 801643c:	b29a      	uxth	r2, r3
 801643e:	687b      	ldr	r3, [r7, #4]
 8016440:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8016442:	2300      	movs	r3, #0
 8016444:	e004      	b.n	8016450 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8016446:	2101      	movs	r1, #1
 8016448:	6878      	ldr	r0, [r7, #4]
 801644a:	f000 f80b 	bl	8016464 <tcp_enqueue_flags>
 801644e:	4603      	mov	r3, r0
}
 8016450:	4618      	mov	r0, r3
 8016452:	3714      	adds	r7, #20
 8016454:	46bd      	mov	sp, r7
 8016456:	bd90      	pop	{r4, r7, pc}
 8016458:	08020ebc 	.word	0x08020ebc
 801645c:	080212c4 	.word	0x080212c4
 8016460:	08020f10 	.word	0x08020f10

08016464 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8016464:	b580      	push	{r7, lr}
 8016466:	b08a      	sub	sp, #40	; 0x28
 8016468:	af02      	add	r7, sp, #8
 801646a:	6078      	str	r0, [r7, #4]
 801646c:	460b      	mov	r3, r1
 801646e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8016470:	2300      	movs	r3, #0
 8016472:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8016474:	2300      	movs	r3, #0
 8016476:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8016478:	78fb      	ldrb	r3, [r7, #3]
 801647a:	f003 0303 	and.w	r3, r3, #3
 801647e:	2b00      	cmp	r3, #0
 8016480:	d106      	bne.n	8016490 <tcp_enqueue_flags+0x2c>
 8016482:	4b67      	ldr	r3, [pc, #412]	; (8016620 <tcp_enqueue_flags+0x1bc>)
 8016484:	f240 4211 	movw	r2, #1041	; 0x411
 8016488:	4966      	ldr	r1, [pc, #408]	; (8016624 <tcp_enqueue_flags+0x1c0>)
 801648a:	4867      	ldr	r0, [pc, #412]	; (8016628 <tcp_enqueue_flags+0x1c4>)
 801648c:	f006 fff8 	bl	801d480 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8016490:	687b      	ldr	r3, [r7, #4]
 8016492:	2b00      	cmp	r3, #0
 8016494:	d106      	bne.n	80164a4 <tcp_enqueue_flags+0x40>
 8016496:	4b62      	ldr	r3, [pc, #392]	; (8016620 <tcp_enqueue_flags+0x1bc>)
 8016498:	f240 4213 	movw	r2, #1043	; 0x413
 801649c:	4963      	ldr	r1, [pc, #396]	; (801662c <tcp_enqueue_flags+0x1c8>)
 801649e:	4862      	ldr	r0, [pc, #392]	; (8016628 <tcp_enqueue_flags+0x1c4>)
 80164a0:	f006 ffee 	bl	801d480 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80164a4:	78fb      	ldrb	r3, [r7, #3]
 80164a6:	f003 0302 	and.w	r3, r3, #2
 80164aa:	2b00      	cmp	r3, #0
 80164ac:	d001      	beq.n	80164b2 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80164ae:	2301      	movs	r3, #1
 80164b0:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80164b2:	7ffb      	ldrb	r3, [r7, #31]
 80164b4:	009b      	lsls	r3, r3, #2
 80164b6:	b2db      	uxtb	r3, r3
 80164b8:	f003 0304 	and.w	r3, r3, #4
 80164bc:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80164be:	7dfb      	ldrb	r3, [r7, #23]
 80164c0:	b29b      	uxth	r3, r3
 80164c2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80164c6:	4619      	mov	r1, r3
 80164c8:	2036      	movs	r0, #54	; 0x36
 80164ca:	f7fb f945 	bl	8011758 <pbuf_alloc>
 80164ce:	6138      	str	r0, [r7, #16]
 80164d0:	693b      	ldr	r3, [r7, #16]
 80164d2:	2b00      	cmp	r3, #0
 80164d4:	d109      	bne.n	80164ea <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80164d6:	687b      	ldr	r3, [r7, #4]
 80164d8:	8b5b      	ldrh	r3, [r3, #26]
 80164da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80164de:	b29a      	uxth	r2, r3
 80164e0:	687b      	ldr	r3, [r7, #4]
 80164e2:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80164e4:	f04f 33ff 	mov.w	r3, #4294967295
 80164e8:	e095      	b.n	8016616 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80164ea:	693b      	ldr	r3, [r7, #16]
 80164ec:	895a      	ldrh	r2, [r3, #10]
 80164ee:	7dfb      	ldrb	r3, [r7, #23]
 80164f0:	b29b      	uxth	r3, r3
 80164f2:	429a      	cmp	r2, r3
 80164f4:	d206      	bcs.n	8016504 <tcp_enqueue_flags+0xa0>
 80164f6:	4b4a      	ldr	r3, [pc, #296]	; (8016620 <tcp_enqueue_flags+0x1bc>)
 80164f8:	f240 4239 	movw	r2, #1081	; 0x439
 80164fc:	494c      	ldr	r1, [pc, #304]	; (8016630 <tcp_enqueue_flags+0x1cc>)
 80164fe:	484a      	ldr	r0, [pc, #296]	; (8016628 <tcp_enqueue_flags+0x1c4>)
 8016500:	f006 ffbe 	bl	801d480 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8016504:	687b      	ldr	r3, [r7, #4]
 8016506:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8016508:	78fa      	ldrb	r2, [r7, #3]
 801650a:	7ffb      	ldrb	r3, [r7, #31]
 801650c:	9300      	str	r3, [sp, #0]
 801650e:	460b      	mov	r3, r1
 8016510:	6939      	ldr	r1, [r7, #16]
 8016512:	6878      	ldr	r0, [r7, #4]
 8016514:	f7ff fd70 	bl	8015ff8 <tcp_create_segment>
 8016518:	60f8      	str	r0, [r7, #12]
 801651a:	68fb      	ldr	r3, [r7, #12]
 801651c:	2b00      	cmp	r3, #0
 801651e:	d109      	bne.n	8016534 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016520:	687b      	ldr	r3, [r7, #4]
 8016522:	8b5b      	ldrh	r3, [r3, #26]
 8016524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016528:	b29a      	uxth	r2, r3
 801652a:	687b      	ldr	r3, [r7, #4]
 801652c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801652e:	f04f 33ff 	mov.w	r3, #4294967295
 8016532:	e070      	b.n	8016616 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8016534:	68fb      	ldr	r3, [r7, #12]
 8016536:	68db      	ldr	r3, [r3, #12]
 8016538:	f003 0303 	and.w	r3, r3, #3
 801653c:	2b00      	cmp	r3, #0
 801653e:	d006      	beq.n	801654e <tcp_enqueue_flags+0xea>
 8016540:	4b37      	ldr	r3, [pc, #220]	; (8016620 <tcp_enqueue_flags+0x1bc>)
 8016542:	f240 4242 	movw	r2, #1090	; 0x442
 8016546:	493b      	ldr	r1, [pc, #236]	; (8016634 <tcp_enqueue_flags+0x1d0>)
 8016548:	4837      	ldr	r0, [pc, #220]	; (8016628 <tcp_enqueue_flags+0x1c4>)
 801654a:	f006 ff99 	bl	801d480 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801654e:	68fb      	ldr	r3, [r7, #12]
 8016550:	891b      	ldrh	r3, [r3, #8]
 8016552:	2b00      	cmp	r3, #0
 8016554:	d006      	beq.n	8016564 <tcp_enqueue_flags+0x100>
 8016556:	4b32      	ldr	r3, [pc, #200]	; (8016620 <tcp_enqueue_flags+0x1bc>)
 8016558:	f240 4243 	movw	r2, #1091	; 0x443
 801655c:	4936      	ldr	r1, [pc, #216]	; (8016638 <tcp_enqueue_flags+0x1d4>)
 801655e:	4832      	ldr	r0, [pc, #200]	; (8016628 <tcp_enqueue_flags+0x1c4>)
 8016560:	f006 ff8e 	bl	801d480 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8016564:	687b      	ldr	r3, [r7, #4]
 8016566:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016568:	2b00      	cmp	r3, #0
 801656a:	d103      	bne.n	8016574 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801656c:	687b      	ldr	r3, [r7, #4]
 801656e:	68fa      	ldr	r2, [r7, #12]
 8016570:	66da      	str	r2, [r3, #108]	; 0x6c
 8016572:	e00d      	b.n	8016590 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8016574:	687b      	ldr	r3, [r7, #4]
 8016576:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016578:	61bb      	str	r3, [r7, #24]
 801657a:	e002      	b.n	8016582 <tcp_enqueue_flags+0x11e>
 801657c:	69bb      	ldr	r3, [r7, #24]
 801657e:	681b      	ldr	r3, [r3, #0]
 8016580:	61bb      	str	r3, [r7, #24]
 8016582:	69bb      	ldr	r3, [r7, #24]
 8016584:	681b      	ldr	r3, [r3, #0]
 8016586:	2b00      	cmp	r3, #0
 8016588:	d1f8      	bne.n	801657c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801658a:	69bb      	ldr	r3, [r7, #24]
 801658c:	68fa      	ldr	r2, [r7, #12]
 801658e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8016590:	687b      	ldr	r3, [r7, #4]
 8016592:	2200      	movs	r2, #0
 8016594:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8016598:	78fb      	ldrb	r3, [r7, #3]
 801659a:	f003 0302 	and.w	r3, r3, #2
 801659e:	2b00      	cmp	r3, #0
 80165a0:	d104      	bne.n	80165ac <tcp_enqueue_flags+0x148>
 80165a2:	78fb      	ldrb	r3, [r7, #3]
 80165a4:	f003 0301 	and.w	r3, r3, #1
 80165a8:	2b00      	cmp	r3, #0
 80165aa:	d004      	beq.n	80165b6 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80165ac:	687b      	ldr	r3, [r7, #4]
 80165ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80165b0:	1c5a      	adds	r2, r3, #1
 80165b2:	687b      	ldr	r3, [r7, #4]
 80165b4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80165b6:	78fb      	ldrb	r3, [r7, #3]
 80165b8:	f003 0301 	and.w	r3, r3, #1
 80165bc:	2b00      	cmp	r3, #0
 80165be:	d006      	beq.n	80165ce <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80165c0:	687b      	ldr	r3, [r7, #4]
 80165c2:	8b5b      	ldrh	r3, [r3, #26]
 80165c4:	f043 0320 	orr.w	r3, r3, #32
 80165c8:	b29a      	uxth	r2, r3
 80165ca:	687b      	ldr	r3, [r7, #4]
 80165cc:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80165ce:	68fb      	ldr	r3, [r7, #12]
 80165d0:	685b      	ldr	r3, [r3, #4]
 80165d2:	4618      	mov	r0, r3
 80165d4:	f7fb fc32 	bl	8011e3c <pbuf_clen>
 80165d8:	4603      	mov	r3, r0
 80165da:	461a      	mov	r2, r3
 80165dc:	687b      	ldr	r3, [r7, #4]
 80165de:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80165e2:	4413      	add	r3, r2
 80165e4:	b29a      	uxth	r2, r3
 80165e6:	687b      	ldr	r3, [r7, #4]
 80165e8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80165ec:	687b      	ldr	r3, [r7, #4]
 80165ee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80165f2:	2b00      	cmp	r3, #0
 80165f4:	d00e      	beq.n	8016614 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80165f6:	687b      	ldr	r3, [r7, #4]
 80165f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80165fa:	2b00      	cmp	r3, #0
 80165fc:	d10a      	bne.n	8016614 <tcp_enqueue_flags+0x1b0>
 80165fe:	687b      	ldr	r3, [r7, #4]
 8016600:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016602:	2b00      	cmp	r3, #0
 8016604:	d106      	bne.n	8016614 <tcp_enqueue_flags+0x1b0>
 8016606:	4b06      	ldr	r3, [pc, #24]	; (8016620 <tcp_enqueue_flags+0x1bc>)
 8016608:	f240 4265 	movw	r2, #1125	; 0x465
 801660c:	490b      	ldr	r1, [pc, #44]	; (801663c <tcp_enqueue_flags+0x1d8>)
 801660e:	4806      	ldr	r0, [pc, #24]	; (8016628 <tcp_enqueue_flags+0x1c4>)
 8016610:	f006 ff36 	bl	801d480 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8016614:	2300      	movs	r3, #0
}
 8016616:	4618      	mov	r0, r3
 8016618:	3720      	adds	r7, #32
 801661a:	46bd      	mov	sp, r7
 801661c:	bd80      	pop	{r7, pc}
 801661e:	bf00      	nop
 8016620:	08020ebc 	.word	0x08020ebc
 8016624:	080212e0 	.word	0x080212e0
 8016628:	08020f10 	.word	0x08020f10
 801662c:	08021338 	.word	0x08021338
 8016630:	08021358 	.word	0x08021358
 8016634:	08021394 	.word	0x08021394
 8016638:	080213ac 	.word	0x080213ac
 801663c:	080213d8 	.word	0x080213d8

08016640 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8016640:	b5b0      	push	{r4, r5, r7, lr}
 8016642:	b08a      	sub	sp, #40	; 0x28
 8016644:	af00      	add	r7, sp, #0
 8016646:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8016648:	687b      	ldr	r3, [r7, #4]
 801664a:	2b00      	cmp	r3, #0
 801664c:	d106      	bne.n	801665c <tcp_output+0x1c>
 801664e:	4b8a      	ldr	r3, [pc, #552]	; (8016878 <tcp_output+0x238>)
 8016650:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8016654:	4989      	ldr	r1, [pc, #548]	; (801687c <tcp_output+0x23c>)
 8016656:	488a      	ldr	r0, [pc, #552]	; (8016880 <tcp_output+0x240>)
 8016658:	f006 ff12 	bl	801d480 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801665c:	687b      	ldr	r3, [r7, #4]
 801665e:	7d1b      	ldrb	r3, [r3, #20]
 8016660:	2b01      	cmp	r3, #1
 8016662:	d106      	bne.n	8016672 <tcp_output+0x32>
 8016664:	4b84      	ldr	r3, [pc, #528]	; (8016878 <tcp_output+0x238>)
 8016666:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801666a:	4986      	ldr	r1, [pc, #536]	; (8016884 <tcp_output+0x244>)
 801666c:	4884      	ldr	r0, [pc, #528]	; (8016880 <tcp_output+0x240>)
 801666e:	f006 ff07 	bl	801d480 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8016672:	4b85      	ldr	r3, [pc, #532]	; (8016888 <tcp_output+0x248>)
 8016674:	681b      	ldr	r3, [r3, #0]
 8016676:	687a      	ldr	r2, [r7, #4]
 8016678:	429a      	cmp	r2, r3
 801667a:	d101      	bne.n	8016680 <tcp_output+0x40>
    return ERR_OK;
 801667c:	2300      	movs	r3, #0
 801667e:	e1ce      	b.n	8016a1e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8016680:	687b      	ldr	r3, [r7, #4]
 8016682:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8016686:	687b      	ldr	r3, [r7, #4]
 8016688:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801668c:	4293      	cmp	r3, r2
 801668e:	bf28      	it	cs
 8016690:	4613      	movcs	r3, r2
 8016692:	b29b      	uxth	r3, r3
 8016694:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8016696:	687b      	ldr	r3, [r7, #4]
 8016698:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801669a:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 801669c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801669e:	2b00      	cmp	r3, #0
 80166a0:	d10b      	bne.n	80166ba <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80166a2:	687b      	ldr	r3, [r7, #4]
 80166a4:	8b5b      	ldrh	r3, [r3, #26]
 80166a6:	f003 0302 	and.w	r3, r3, #2
 80166aa:	2b00      	cmp	r3, #0
 80166ac:	f000 81aa 	beq.w	8016a04 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 80166b0:	6878      	ldr	r0, [r7, #4]
 80166b2:	f000 fdcb 	bl	801724c <tcp_send_empty_ack>
 80166b6:	4603      	mov	r3, r0
 80166b8:	e1b1      	b.n	8016a1e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80166ba:	6879      	ldr	r1, [r7, #4]
 80166bc:	687b      	ldr	r3, [r7, #4]
 80166be:	3304      	adds	r3, #4
 80166c0:	461a      	mov	r2, r3
 80166c2:	6878      	ldr	r0, [r7, #4]
 80166c4:	f7ff fc7c 	bl	8015fc0 <tcp_route>
 80166c8:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80166ca:	697b      	ldr	r3, [r7, #20]
 80166cc:	2b00      	cmp	r3, #0
 80166ce:	d102      	bne.n	80166d6 <tcp_output+0x96>
    return ERR_RTE;
 80166d0:	f06f 0303 	mvn.w	r3, #3
 80166d4:	e1a3      	b.n	8016a1e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80166d6:	687b      	ldr	r3, [r7, #4]
 80166d8:	2b00      	cmp	r3, #0
 80166da:	d003      	beq.n	80166e4 <tcp_output+0xa4>
 80166dc:	687b      	ldr	r3, [r7, #4]
 80166de:	681b      	ldr	r3, [r3, #0]
 80166e0:	2b00      	cmp	r3, #0
 80166e2:	d111      	bne.n	8016708 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80166e4:	697b      	ldr	r3, [r7, #20]
 80166e6:	2b00      	cmp	r3, #0
 80166e8:	d002      	beq.n	80166f0 <tcp_output+0xb0>
 80166ea:	697b      	ldr	r3, [r7, #20]
 80166ec:	3304      	adds	r3, #4
 80166ee:	e000      	b.n	80166f2 <tcp_output+0xb2>
 80166f0:	2300      	movs	r3, #0
 80166f2:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80166f4:	693b      	ldr	r3, [r7, #16]
 80166f6:	2b00      	cmp	r3, #0
 80166f8:	d102      	bne.n	8016700 <tcp_output+0xc0>
      return ERR_RTE;
 80166fa:	f06f 0303 	mvn.w	r3, #3
 80166fe:	e18e      	b.n	8016a1e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8016700:	693b      	ldr	r3, [r7, #16]
 8016702:	681a      	ldr	r2, [r3, #0]
 8016704:	687b      	ldr	r3, [r7, #4]
 8016706:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8016708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801670a:	68db      	ldr	r3, [r3, #12]
 801670c:	685b      	ldr	r3, [r3, #4]
 801670e:	4618      	mov	r0, r3
 8016710:	f7f9 ff63 	bl	80105da <lwip_htonl>
 8016714:	4602      	mov	r2, r0
 8016716:	687b      	ldr	r3, [r7, #4]
 8016718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801671a:	1ad3      	subs	r3, r2, r3
 801671c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801671e:	8912      	ldrh	r2, [r2, #8]
 8016720:	4413      	add	r3, r2
 8016722:	69ba      	ldr	r2, [r7, #24]
 8016724:	429a      	cmp	r2, r3
 8016726:	d227      	bcs.n	8016778 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8016728:	687b      	ldr	r3, [r7, #4]
 801672a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801672e:	461a      	mov	r2, r3
 8016730:	69bb      	ldr	r3, [r7, #24]
 8016732:	4293      	cmp	r3, r2
 8016734:	d114      	bne.n	8016760 <tcp_output+0x120>
 8016736:	687b      	ldr	r3, [r7, #4]
 8016738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801673a:	2b00      	cmp	r3, #0
 801673c:	d110      	bne.n	8016760 <tcp_output+0x120>
 801673e:	687b      	ldr	r3, [r7, #4]
 8016740:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8016744:	2b00      	cmp	r3, #0
 8016746:	d10b      	bne.n	8016760 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8016748:	687b      	ldr	r3, [r7, #4]
 801674a:	2200      	movs	r2, #0
 801674c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8016750:	687b      	ldr	r3, [r7, #4]
 8016752:	2201      	movs	r2, #1
 8016754:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8016758:	687b      	ldr	r3, [r7, #4]
 801675a:	2200      	movs	r2, #0
 801675c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8016760:	687b      	ldr	r3, [r7, #4]
 8016762:	8b5b      	ldrh	r3, [r3, #26]
 8016764:	f003 0302 	and.w	r3, r3, #2
 8016768:	2b00      	cmp	r3, #0
 801676a:	f000 814d 	beq.w	8016a08 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801676e:	6878      	ldr	r0, [r7, #4]
 8016770:	f000 fd6c 	bl	801724c <tcp_send_empty_ack>
 8016774:	4603      	mov	r3, r0
 8016776:	e152      	b.n	8016a1e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8016778:	687b      	ldr	r3, [r7, #4]
 801677a:	2200      	movs	r2, #0
 801677c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8016780:	687b      	ldr	r3, [r7, #4]
 8016782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016784:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8016786:	6a3b      	ldr	r3, [r7, #32]
 8016788:	2b00      	cmp	r3, #0
 801678a:	f000 811c 	beq.w	80169c6 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801678e:	e002      	b.n	8016796 <tcp_output+0x156>
 8016790:	6a3b      	ldr	r3, [r7, #32]
 8016792:	681b      	ldr	r3, [r3, #0]
 8016794:	623b      	str	r3, [r7, #32]
 8016796:	6a3b      	ldr	r3, [r7, #32]
 8016798:	681b      	ldr	r3, [r3, #0]
 801679a:	2b00      	cmp	r3, #0
 801679c:	d1f8      	bne.n	8016790 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801679e:	e112      	b.n	80169c6 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80167a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167a2:	68db      	ldr	r3, [r3, #12]
 80167a4:	899b      	ldrh	r3, [r3, #12]
 80167a6:	b29b      	uxth	r3, r3
 80167a8:	4618      	mov	r0, r3
 80167aa:	f7f9 ff01 	bl	80105b0 <lwip_htons>
 80167ae:	4603      	mov	r3, r0
 80167b0:	b2db      	uxtb	r3, r3
 80167b2:	f003 0304 	and.w	r3, r3, #4
 80167b6:	2b00      	cmp	r3, #0
 80167b8:	d006      	beq.n	80167c8 <tcp_output+0x188>
 80167ba:	4b2f      	ldr	r3, [pc, #188]	; (8016878 <tcp_output+0x238>)
 80167bc:	f240 5236 	movw	r2, #1334	; 0x536
 80167c0:	4932      	ldr	r1, [pc, #200]	; (801688c <tcp_output+0x24c>)
 80167c2:	482f      	ldr	r0, [pc, #188]	; (8016880 <tcp_output+0x240>)
 80167c4:	f006 fe5c 	bl	801d480 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80167c8:	687b      	ldr	r3, [r7, #4]
 80167ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80167cc:	2b00      	cmp	r3, #0
 80167ce:	d01f      	beq.n	8016810 <tcp_output+0x1d0>
 80167d0:	687b      	ldr	r3, [r7, #4]
 80167d2:	8b5b      	ldrh	r3, [r3, #26]
 80167d4:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80167d8:	2b00      	cmp	r3, #0
 80167da:	d119      	bne.n	8016810 <tcp_output+0x1d0>
 80167dc:	687b      	ldr	r3, [r7, #4]
 80167de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80167e0:	2b00      	cmp	r3, #0
 80167e2:	d00b      	beq.n	80167fc <tcp_output+0x1bc>
 80167e4:	687b      	ldr	r3, [r7, #4]
 80167e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80167e8:	681b      	ldr	r3, [r3, #0]
 80167ea:	2b00      	cmp	r3, #0
 80167ec:	d110      	bne.n	8016810 <tcp_output+0x1d0>
 80167ee:	687b      	ldr	r3, [r7, #4]
 80167f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80167f2:	891a      	ldrh	r2, [r3, #8]
 80167f4:	687b      	ldr	r3, [r7, #4]
 80167f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80167f8:	429a      	cmp	r2, r3
 80167fa:	d209      	bcs.n	8016810 <tcp_output+0x1d0>
 80167fc:	687b      	ldr	r3, [r7, #4]
 80167fe:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8016802:	2b00      	cmp	r3, #0
 8016804:	d004      	beq.n	8016810 <tcp_output+0x1d0>
 8016806:	687b      	ldr	r3, [r7, #4]
 8016808:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801680c:	2b08      	cmp	r3, #8
 801680e:	d901      	bls.n	8016814 <tcp_output+0x1d4>
 8016810:	2301      	movs	r3, #1
 8016812:	e000      	b.n	8016816 <tcp_output+0x1d6>
 8016814:	2300      	movs	r3, #0
 8016816:	2b00      	cmp	r3, #0
 8016818:	d106      	bne.n	8016828 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801681a:	687b      	ldr	r3, [r7, #4]
 801681c:	8b5b      	ldrh	r3, [r3, #26]
 801681e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8016822:	2b00      	cmp	r3, #0
 8016824:	f000 80e4 	beq.w	80169f0 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8016828:	687b      	ldr	r3, [r7, #4]
 801682a:	7d1b      	ldrb	r3, [r3, #20]
 801682c:	2b02      	cmp	r3, #2
 801682e:	d00d      	beq.n	801684c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8016830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016832:	68db      	ldr	r3, [r3, #12]
 8016834:	899b      	ldrh	r3, [r3, #12]
 8016836:	b29c      	uxth	r4, r3
 8016838:	2010      	movs	r0, #16
 801683a:	f7f9 feb9 	bl	80105b0 <lwip_htons>
 801683e:	4603      	mov	r3, r0
 8016840:	461a      	mov	r2, r3
 8016842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016844:	68db      	ldr	r3, [r3, #12]
 8016846:	4322      	orrs	r2, r4
 8016848:	b292      	uxth	r2, r2
 801684a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801684c:	697a      	ldr	r2, [r7, #20]
 801684e:	6879      	ldr	r1, [r7, #4]
 8016850:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016852:	f000 f909 	bl	8016a68 <tcp_output_segment>
 8016856:	4603      	mov	r3, r0
 8016858:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801685a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801685e:	2b00      	cmp	r3, #0
 8016860:	d016      	beq.n	8016890 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016862:	687b      	ldr	r3, [r7, #4]
 8016864:	8b5b      	ldrh	r3, [r3, #26]
 8016866:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801686a:	b29a      	uxth	r2, r3
 801686c:	687b      	ldr	r3, [r7, #4]
 801686e:	835a      	strh	r2, [r3, #26]
      return err;
 8016870:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016874:	e0d3      	b.n	8016a1e <tcp_output+0x3de>
 8016876:	bf00      	nop
 8016878:	08020ebc 	.word	0x08020ebc
 801687c:	08021400 	.word	0x08021400
 8016880:	08020f10 	.word	0x08020f10
 8016884:	08021418 	.word	0x08021418
 8016888:	2001b7ec 	.word	0x2001b7ec
 801688c:	08021440 	.word	0x08021440
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8016890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016892:	681a      	ldr	r2, [r3, #0]
 8016894:	687b      	ldr	r3, [r7, #4]
 8016896:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8016898:	687b      	ldr	r3, [r7, #4]
 801689a:	7d1b      	ldrb	r3, [r3, #20]
 801689c:	2b02      	cmp	r3, #2
 801689e:	d006      	beq.n	80168ae <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80168a0:	687b      	ldr	r3, [r7, #4]
 80168a2:	8b5b      	ldrh	r3, [r3, #26]
 80168a4:	f023 0303 	bic.w	r3, r3, #3
 80168a8:	b29a      	uxth	r2, r3
 80168aa:	687b      	ldr	r3, [r7, #4]
 80168ac:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80168ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168b0:	68db      	ldr	r3, [r3, #12]
 80168b2:	685b      	ldr	r3, [r3, #4]
 80168b4:	4618      	mov	r0, r3
 80168b6:	f7f9 fe90 	bl	80105da <lwip_htonl>
 80168ba:	4604      	mov	r4, r0
 80168bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168be:	891b      	ldrh	r3, [r3, #8]
 80168c0:	461d      	mov	r5, r3
 80168c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168c4:	68db      	ldr	r3, [r3, #12]
 80168c6:	899b      	ldrh	r3, [r3, #12]
 80168c8:	b29b      	uxth	r3, r3
 80168ca:	4618      	mov	r0, r3
 80168cc:	f7f9 fe70 	bl	80105b0 <lwip_htons>
 80168d0:	4603      	mov	r3, r0
 80168d2:	b2db      	uxtb	r3, r3
 80168d4:	f003 0303 	and.w	r3, r3, #3
 80168d8:	2b00      	cmp	r3, #0
 80168da:	d001      	beq.n	80168e0 <tcp_output+0x2a0>
 80168dc:	2301      	movs	r3, #1
 80168de:	e000      	b.n	80168e2 <tcp_output+0x2a2>
 80168e0:	2300      	movs	r3, #0
 80168e2:	442b      	add	r3, r5
 80168e4:	4423      	add	r3, r4
 80168e6:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80168e8:	687b      	ldr	r3, [r7, #4]
 80168ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80168ec:	68bb      	ldr	r3, [r7, #8]
 80168ee:	1ad3      	subs	r3, r2, r3
 80168f0:	2b00      	cmp	r3, #0
 80168f2:	da02      	bge.n	80168fa <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80168f4:	687b      	ldr	r3, [r7, #4]
 80168f6:	68ba      	ldr	r2, [r7, #8]
 80168f8:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80168fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168fc:	891b      	ldrh	r3, [r3, #8]
 80168fe:	461c      	mov	r4, r3
 8016900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016902:	68db      	ldr	r3, [r3, #12]
 8016904:	899b      	ldrh	r3, [r3, #12]
 8016906:	b29b      	uxth	r3, r3
 8016908:	4618      	mov	r0, r3
 801690a:	f7f9 fe51 	bl	80105b0 <lwip_htons>
 801690e:	4603      	mov	r3, r0
 8016910:	b2db      	uxtb	r3, r3
 8016912:	f003 0303 	and.w	r3, r3, #3
 8016916:	2b00      	cmp	r3, #0
 8016918:	d001      	beq.n	801691e <tcp_output+0x2de>
 801691a:	2301      	movs	r3, #1
 801691c:	e000      	b.n	8016920 <tcp_output+0x2e0>
 801691e:	2300      	movs	r3, #0
 8016920:	4423      	add	r3, r4
 8016922:	2b00      	cmp	r3, #0
 8016924:	d049      	beq.n	80169ba <tcp_output+0x37a>
      seg->next = NULL;
 8016926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016928:	2200      	movs	r2, #0
 801692a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801692c:	687b      	ldr	r3, [r7, #4]
 801692e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016930:	2b00      	cmp	r3, #0
 8016932:	d105      	bne.n	8016940 <tcp_output+0x300>
        pcb->unacked = seg;
 8016934:	687b      	ldr	r3, [r7, #4]
 8016936:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016938:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801693a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801693c:	623b      	str	r3, [r7, #32]
 801693e:	e03f      	b.n	80169c0 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8016940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016942:	68db      	ldr	r3, [r3, #12]
 8016944:	685b      	ldr	r3, [r3, #4]
 8016946:	4618      	mov	r0, r3
 8016948:	f7f9 fe47 	bl	80105da <lwip_htonl>
 801694c:	4604      	mov	r4, r0
 801694e:	6a3b      	ldr	r3, [r7, #32]
 8016950:	68db      	ldr	r3, [r3, #12]
 8016952:	685b      	ldr	r3, [r3, #4]
 8016954:	4618      	mov	r0, r3
 8016956:	f7f9 fe40 	bl	80105da <lwip_htonl>
 801695a:	4603      	mov	r3, r0
 801695c:	1ae3      	subs	r3, r4, r3
 801695e:	2b00      	cmp	r3, #0
 8016960:	da24      	bge.n	80169ac <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8016962:	687b      	ldr	r3, [r7, #4]
 8016964:	3370      	adds	r3, #112	; 0x70
 8016966:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8016968:	e002      	b.n	8016970 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801696a:	69fb      	ldr	r3, [r7, #28]
 801696c:	681b      	ldr	r3, [r3, #0]
 801696e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8016970:	69fb      	ldr	r3, [r7, #28]
 8016972:	681b      	ldr	r3, [r3, #0]
 8016974:	2b00      	cmp	r3, #0
 8016976:	d011      	beq.n	801699c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8016978:	69fb      	ldr	r3, [r7, #28]
 801697a:	681b      	ldr	r3, [r3, #0]
 801697c:	68db      	ldr	r3, [r3, #12]
 801697e:	685b      	ldr	r3, [r3, #4]
 8016980:	4618      	mov	r0, r3
 8016982:	f7f9 fe2a 	bl	80105da <lwip_htonl>
 8016986:	4604      	mov	r4, r0
 8016988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801698a:	68db      	ldr	r3, [r3, #12]
 801698c:	685b      	ldr	r3, [r3, #4]
 801698e:	4618      	mov	r0, r3
 8016990:	f7f9 fe23 	bl	80105da <lwip_htonl>
 8016994:	4603      	mov	r3, r0
 8016996:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8016998:	2b00      	cmp	r3, #0
 801699a:	dbe6      	blt.n	801696a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 801699c:	69fb      	ldr	r3, [r7, #28]
 801699e:	681a      	ldr	r2, [r3, #0]
 80169a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169a2:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80169a4:	69fb      	ldr	r3, [r7, #28]
 80169a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80169a8:	601a      	str	r2, [r3, #0]
 80169aa:	e009      	b.n	80169c0 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80169ac:	6a3b      	ldr	r3, [r7, #32]
 80169ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80169b0:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80169b2:	6a3b      	ldr	r3, [r7, #32]
 80169b4:	681b      	ldr	r3, [r3, #0]
 80169b6:	623b      	str	r3, [r7, #32]
 80169b8:	e002      	b.n	80169c0 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80169ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80169bc:	f7fc fc3f 	bl	801323e <tcp_seg_free>
    }
    seg = pcb->unsent;
 80169c0:	687b      	ldr	r3, [r7, #4]
 80169c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80169c4:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 80169c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169c8:	2b00      	cmp	r3, #0
 80169ca:	d012      	beq.n	80169f2 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80169cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169ce:	68db      	ldr	r3, [r3, #12]
 80169d0:	685b      	ldr	r3, [r3, #4]
 80169d2:	4618      	mov	r0, r3
 80169d4:	f7f9 fe01 	bl	80105da <lwip_htonl>
 80169d8:	4602      	mov	r2, r0
 80169da:	687b      	ldr	r3, [r7, #4]
 80169dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80169de:	1ad3      	subs	r3, r2, r3
 80169e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80169e2:	8912      	ldrh	r2, [r2, #8]
 80169e4:	4413      	add	r3, r2
  while (seg != NULL &&
 80169e6:	69ba      	ldr	r2, [r7, #24]
 80169e8:	429a      	cmp	r2, r3
 80169ea:	f4bf aed9 	bcs.w	80167a0 <tcp_output+0x160>
 80169ee:	e000      	b.n	80169f2 <tcp_output+0x3b2>
      break;
 80169f0:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80169f2:	687b      	ldr	r3, [r7, #4]
 80169f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80169f6:	2b00      	cmp	r3, #0
 80169f8:	d108      	bne.n	8016a0c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80169fa:	687b      	ldr	r3, [r7, #4]
 80169fc:	2200      	movs	r2, #0
 80169fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8016a02:	e004      	b.n	8016a0e <tcp_output+0x3ce>
    goto output_done;
 8016a04:	bf00      	nop
 8016a06:	e002      	b.n	8016a0e <tcp_output+0x3ce>
    goto output_done;
 8016a08:	bf00      	nop
 8016a0a:	e000      	b.n	8016a0e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8016a0c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8016a0e:	687b      	ldr	r3, [r7, #4]
 8016a10:	8b5b      	ldrh	r3, [r3, #26]
 8016a12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8016a16:	b29a      	uxth	r2, r3
 8016a18:	687b      	ldr	r3, [r7, #4]
 8016a1a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8016a1c:	2300      	movs	r3, #0
}
 8016a1e:	4618      	mov	r0, r3
 8016a20:	3728      	adds	r7, #40	; 0x28
 8016a22:	46bd      	mov	sp, r7
 8016a24:	bdb0      	pop	{r4, r5, r7, pc}
 8016a26:	bf00      	nop

08016a28 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8016a28:	b580      	push	{r7, lr}
 8016a2a:	b082      	sub	sp, #8
 8016a2c:	af00      	add	r7, sp, #0
 8016a2e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8016a30:	687b      	ldr	r3, [r7, #4]
 8016a32:	2b00      	cmp	r3, #0
 8016a34:	d106      	bne.n	8016a44 <tcp_output_segment_busy+0x1c>
 8016a36:	4b09      	ldr	r3, [pc, #36]	; (8016a5c <tcp_output_segment_busy+0x34>)
 8016a38:	f240 529a 	movw	r2, #1434	; 0x59a
 8016a3c:	4908      	ldr	r1, [pc, #32]	; (8016a60 <tcp_output_segment_busy+0x38>)
 8016a3e:	4809      	ldr	r0, [pc, #36]	; (8016a64 <tcp_output_segment_busy+0x3c>)
 8016a40:	f006 fd1e 	bl	801d480 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8016a44:	687b      	ldr	r3, [r7, #4]
 8016a46:	685b      	ldr	r3, [r3, #4]
 8016a48:	7b9b      	ldrb	r3, [r3, #14]
 8016a4a:	2b01      	cmp	r3, #1
 8016a4c:	d001      	beq.n	8016a52 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8016a4e:	2301      	movs	r3, #1
 8016a50:	e000      	b.n	8016a54 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8016a52:	2300      	movs	r3, #0
}
 8016a54:	4618      	mov	r0, r3
 8016a56:	3708      	adds	r7, #8
 8016a58:	46bd      	mov	sp, r7
 8016a5a:	bd80      	pop	{r7, pc}
 8016a5c:	08020ebc 	.word	0x08020ebc
 8016a60:	08021458 	.word	0x08021458
 8016a64:	08020f10 	.word	0x08020f10

08016a68 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8016a68:	b5b0      	push	{r4, r5, r7, lr}
 8016a6a:	b08c      	sub	sp, #48	; 0x30
 8016a6c:	af04      	add	r7, sp, #16
 8016a6e:	60f8      	str	r0, [r7, #12]
 8016a70:	60b9      	str	r1, [r7, #8]
 8016a72:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8016a74:	68fb      	ldr	r3, [r7, #12]
 8016a76:	2b00      	cmp	r3, #0
 8016a78:	d106      	bne.n	8016a88 <tcp_output_segment+0x20>
 8016a7a:	4b63      	ldr	r3, [pc, #396]	; (8016c08 <tcp_output_segment+0x1a0>)
 8016a7c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8016a80:	4962      	ldr	r1, [pc, #392]	; (8016c0c <tcp_output_segment+0x1a4>)
 8016a82:	4863      	ldr	r0, [pc, #396]	; (8016c10 <tcp_output_segment+0x1a8>)
 8016a84:	f006 fcfc 	bl	801d480 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8016a88:	68bb      	ldr	r3, [r7, #8]
 8016a8a:	2b00      	cmp	r3, #0
 8016a8c:	d106      	bne.n	8016a9c <tcp_output_segment+0x34>
 8016a8e:	4b5e      	ldr	r3, [pc, #376]	; (8016c08 <tcp_output_segment+0x1a0>)
 8016a90:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8016a94:	495f      	ldr	r1, [pc, #380]	; (8016c14 <tcp_output_segment+0x1ac>)
 8016a96:	485e      	ldr	r0, [pc, #376]	; (8016c10 <tcp_output_segment+0x1a8>)
 8016a98:	f006 fcf2 	bl	801d480 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8016a9c:	687b      	ldr	r3, [r7, #4]
 8016a9e:	2b00      	cmp	r3, #0
 8016aa0:	d106      	bne.n	8016ab0 <tcp_output_segment+0x48>
 8016aa2:	4b59      	ldr	r3, [pc, #356]	; (8016c08 <tcp_output_segment+0x1a0>)
 8016aa4:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8016aa8:	495b      	ldr	r1, [pc, #364]	; (8016c18 <tcp_output_segment+0x1b0>)
 8016aaa:	4859      	ldr	r0, [pc, #356]	; (8016c10 <tcp_output_segment+0x1a8>)
 8016aac:	f006 fce8 	bl	801d480 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8016ab0:	68f8      	ldr	r0, [r7, #12]
 8016ab2:	f7ff ffb9 	bl	8016a28 <tcp_output_segment_busy>
 8016ab6:	4603      	mov	r3, r0
 8016ab8:	2b00      	cmp	r3, #0
 8016aba:	d001      	beq.n	8016ac0 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8016abc:	2300      	movs	r3, #0
 8016abe:	e09f      	b.n	8016c00 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8016ac0:	68bb      	ldr	r3, [r7, #8]
 8016ac2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016ac4:	68fb      	ldr	r3, [r7, #12]
 8016ac6:	68dc      	ldr	r4, [r3, #12]
 8016ac8:	4610      	mov	r0, r2
 8016aca:	f7f9 fd86 	bl	80105da <lwip_htonl>
 8016ace:	4603      	mov	r3, r0
 8016ad0:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8016ad2:	68bb      	ldr	r3, [r7, #8]
 8016ad4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8016ad6:	68fb      	ldr	r3, [r7, #12]
 8016ad8:	68dc      	ldr	r4, [r3, #12]
 8016ada:	4610      	mov	r0, r2
 8016adc:	f7f9 fd68 	bl	80105b0 <lwip_htons>
 8016ae0:	4603      	mov	r3, r0
 8016ae2:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8016ae4:	68bb      	ldr	r3, [r7, #8]
 8016ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016ae8:	68ba      	ldr	r2, [r7, #8]
 8016aea:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8016aec:	441a      	add	r2, r3
 8016aee:	68bb      	ldr	r3, [r7, #8]
 8016af0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8016af2:	68fb      	ldr	r3, [r7, #12]
 8016af4:	68db      	ldr	r3, [r3, #12]
 8016af6:	3314      	adds	r3, #20
 8016af8:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8016afa:	68fb      	ldr	r3, [r7, #12]
 8016afc:	7a9b      	ldrb	r3, [r3, #10]
 8016afe:	f003 0301 	and.w	r3, r3, #1
 8016b02:	2b00      	cmp	r3, #0
 8016b04:	d015      	beq.n	8016b32 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8016b06:	68bb      	ldr	r3, [r7, #8]
 8016b08:	3304      	adds	r3, #4
 8016b0a:	461a      	mov	r2, r3
 8016b0c:	6879      	ldr	r1, [r7, #4]
 8016b0e:	f44f 7006 	mov.w	r0, #536	; 0x218
 8016b12:	f7fc fe8b 	bl	801382c <tcp_eff_send_mss_netif>
 8016b16:	4603      	mov	r3, r0
 8016b18:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8016b1a:	8b7b      	ldrh	r3, [r7, #26]
 8016b1c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8016b20:	4618      	mov	r0, r3
 8016b22:	f7f9 fd5a 	bl	80105da <lwip_htonl>
 8016b26:	4602      	mov	r2, r0
 8016b28:	69fb      	ldr	r3, [r7, #28]
 8016b2a:	601a      	str	r2, [r3, #0]
    opts += 1;
 8016b2c:	69fb      	ldr	r3, [r7, #28]
 8016b2e:	3304      	adds	r3, #4
 8016b30:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8016b32:	68bb      	ldr	r3, [r7, #8]
 8016b34:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8016b38:	2b00      	cmp	r3, #0
 8016b3a:	da02      	bge.n	8016b42 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8016b3c:	68bb      	ldr	r3, [r7, #8]
 8016b3e:	2200      	movs	r2, #0
 8016b40:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8016b42:	68bb      	ldr	r3, [r7, #8]
 8016b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016b46:	2b00      	cmp	r3, #0
 8016b48:	d10c      	bne.n	8016b64 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8016b4a:	4b34      	ldr	r3, [pc, #208]	; (8016c1c <tcp_output_segment+0x1b4>)
 8016b4c:	681a      	ldr	r2, [r3, #0]
 8016b4e:	68bb      	ldr	r3, [r7, #8]
 8016b50:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8016b52:	68fb      	ldr	r3, [r7, #12]
 8016b54:	68db      	ldr	r3, [r3, #12]
 8016b56:	685b      	ldr	r3, [r3, #4]
 8016b58:	4618      	mov	r0, r3
 8016b5a:	f7f9 fd3e 	bl	80105da <lwip_htonl>
 8016b5e:	4602      	mov	r2, r0
 8016b60:	68bb      	ldr	r3, [r7, #8]
 8016b62:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8016b64:	68fb      	ldr	r3, [r7, #12]
 8016b66:	68da      	ldr	r2, [r3, #12]
 8016b68:	68fb      	ldr	r3, [r7, #12]
 8016b6a:	685b      	ldr	r3, [r3, #4]
 8016b6c:	685b      	ldr	r3, [r3, #4]
 8016b6e:	1ad3      	subs	r3, r2, r3
 8016b70:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8016b72:	68fb      	ldr	r3, [r7, #12]
 8016b74:	685b      	ldr	r3, [r3, #4]
 8016b76:	8959      	ldrh	r1, [r3, #10]
 8016b78:	68fb      	ldr	r3, [r7, #12]
 8016b7a:	685b      	ldr	r3, [r3, #4]
 8016b7c:	8b3a      	ldrh	r2, [r7, #24]
 8016b7e:	1a8a      	subs	r2, r1, r2
 8016b80:	b292      	uxth	r2, r2
 8016b82:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8016b84:	68fb      	ldr	r3, [r7, #12]
 8016b86:	685b      	ldr	r3, [r3, #4]
 8016b88:	8919      	ldrh	r1, [r3, #8]
 8016b8a:	68fb      	ldr	r3, [r7, #12]
 8016b8c:	685b      	ldr	r3, [r3, #4]
 8016b8e:	8b3a      	ldrh	r2, [r7, #24]
 8016b90:	1a8a      	subs	r2, r1, r2
 8016b92:	b292      	uxth	r2, r2
 8016b94:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8016b96:	68fb      	ldr	r3, [r7, #12]
 8016b98:	685b      	ldr	r3, [r3, #4]
 8016b9a:	68fa      	ldr	r2, [r7, #12]
 8016b9c:	68d2      	ldr	r2, [r2, #12]
 8016b9e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8016ba0:	68fb      	ldr	r3, [r7, #12]
 8016ba2:	68db      	ldr	r3, [r3, #12]
 8016ba4:	2200      	movs	r2, #0
 8016ba6:	741a      	strb	r2, [r3, #16]
 8016ba8:	2200      	movs	r2, #0
 8016baa:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8016bac:	68fb      	ldr	r3, [r7, #12]
 8016bae:	68db      	ldr	r3, [r3, #12]
 8016bb0:	f103 0214 	add.w	r2, r3, #20
 8016bb4:	68fb      	ldr	r3, [r7, #12]
 8016bb6:	7a9b      	ldrb	r3, [r3, #10]
 8016bb8:	009b      	lsls	r3, r3, #2
 8016bba:	f003 0304 	and.w	r3, r3, #4
 8016bbe:	4413      	add	r3, r2
 8016bc0:	69fa      	ldr	r2, [r7, #28]
 8016bc2:	429a      	cmp	r2, r3
 8016bc4:	d006      	beq.n	8016bd4 <tcp_output_segment+0x16c>
 8016bc6:	4b10      	ldr	r3, [pc, #64]	; (8016c08 <tcp_output_segment+0x1a0>)
 8016bc8:	f240 621c 	movw	r2, #1564	; 0x61c
 8016bcc:	4914      	ldr	r1, [pc, #80]	; (8016c20 <tcp_output_segment+0x1b8>)
 8016bce:	4810      	ldr	r0, [pc, #64]	; (8016c10 <tcp_output_segment+0x1a8>)
 8016bd0:	f006 fc56 	bl	801d480 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8016bd4:	68fb      	ldr	r3, [r7, #12]
 8016bd6:	6858      	ldr	r0, [r3, #4]
 8016bd8:	68b9      	ldr	r1, [r7, #8]
 8016bda:	68bb      	ldr	r3, [r7, #8]
 8016bdc:	1d1c      	adds	r4, r3, #4
 8016bde:	68bb      	ldr	r3, [r7, #8]
 8016be0:	7add      	ldrb	r5, [r3, #11]
 8016be2:	68bb      	ldr	r3, [r7, #8]
 8016be4:	7a9b      	ldrb	r3, [r3, #10]
 8016be6:	687a      	ldr	r2, [r7, #4]
 8016be8:	9202      	str	r2, [sp, #8]
 8016bea:	2206      	movs	r2, #6
 8016bec:	9201      	str	r2, [sp, #4]
 8016bee:	9300      	str	r3, [sp, #0]
 8016bf0:	462b      	mov	r3, r5
 8016bf2:	4622      	mov	r2, r4
 8016bf4:	f004 fc1c 	bl	801b430 <ip4_output_if>
 8016bf8:	4603      	mov	r3, r0
 8016bfa:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8016bfc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016c00:	4618      	mov	r0, r3
 8016c02:	3720      	adds	r7, #32
 8016c04:	46bd      	mov	sp, r7
 8016c06:	bdb0      	pop	{r4, r5, r7, pc}
 8016c08:	08020ebc 	.word	0x08020ebc
 8016c0c:	08021480 	.word	0x08021480
 8016c10:	08020f10 	.word	0x08020f10
 8016c14:	080214a0 	.word	0x080214a0
 8016c18:	080214c0 	.word	0x080214c0
 8016c1c:	2001b7dc 	.word	0x2001b7dc
 8016c20:	080214e4 	.word	0x080214e4

08016c24 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8016c24:	b5b0      	push	{r4, r5, r7, lr}
 8016c26:	b084      	sub	sp, #16
 8016c28:	af00      	add	r7, sp, #0
 8016c2a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8016c2c:	687b      	ldr	r3, [r7, #4]
 8016c2e:	2b00      	cmp	r3, #0
 8016c30:	d106      	bne.n	8016c40 <tcp_rexmit_rto_prepare+0x1c>
 8016c32:	4b31      	ldr	r3, [pc, #196]	; (8016cf8 <tcp_rexmit_rto_prepare+0xd4>)
 8016c34:	f240 6263 	movw	r2, #1635	; 0x663
 8016c38:	4930      	ldr	r1, [pc, #192]	; (8016cfc <tcp_rexmit_rto_prepare+0xd8>)
 8016c3a:	4831      	ldr	r0, [pc, #196]	; (8016d00 <tcp_rexmit_rto_prepare+0xdc>)
 8016c3c:	f006 fc20 	bl	801d480 <iprintf>

  if (pcb->unacked == NULL) {
 8016c40:	687b      	ldr	r3, [r7, #4]
 8016c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016c44:	2b00      	cmp	r3, #0
 8016c46:	d102      	bne.n	8016c4e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8016c48:	f06f 0305 	mvn.w	r3, #5
 8016c4c:	e050      	b.n	8016cf0 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8016c4e:	687b      	ldr	r3, [r7, #4]
 8016c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016c52:	60fb      	str	r3, [r7, #12]
 8016c54:	e00b      	b.n	8016c6e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8016c56:	68f8      	ldr	r0, [r7, #12]
 8016c58:	f7ff fee6 	bl	8016a28 <tcp_output_segment_busy>
 8016c5c:	4603      	mov	r3, r0
 8016c5e:	2b00      	cmp	r3, #0
 8016c60:	d002      	beq.n	8016c68 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8016c62:	f06f 0305 	mvn.w	r3, #5
 8016c66:	e043      	b.n	8016cf0 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8016c68:	68fb      	ldr	r3, [r7, #12]
 8016c6a:	681b      	ldr	r3, [r3, #0]
 8016c6c:	60fb      	str	r3, [r7, #12]
 8016c6e:	68fb      	ldr	r3, [r7, #12]
 8016c70:	681b      	ldr	r3, [r3, #0]
 8016c72:	2b00      	cmp	r3, #0
 8016c74:	d1ef      	bne.n	8016c56 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8016c76:	68f8      	ldr	r0, [r7, #12]
 8016c78:	f7ff fed6 	bl	8016a28 <tcp_output_segment_busy>
 8016c7c:	4603      	mov	r3, r0
 8016c7e:	2b00      	cmp	r3, #0
 8016c80:	d002      	beq.n	8016c88 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8016c82:	f06f 0305 	mvn.w	r3, #5
 8016c86:	e033      	b.n	8016cf0 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8016c88:	687b      	ldr	r3, [r7, #4]
 8016c8a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8016c8c:	68fb      	ldr	r3, [r7, #12]
 8016c8e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8016c90:	687b      	ldr	r3, [r7, #4]
 8016c92:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8016c94:	687b      	ldr	r3, [r7, #4]
 8016c96:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8016c98:	687b      	ldr	r3, [r7, #4]
 8016c9a:	2200      	movs	r2, #0
 8016c9c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8016c9e:	687b      	ldr	r3, [r7, #4]
 8016ca0:	8b5b      	ldrh	r3, [r3, #26]
 8016ca2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8016ca6:	b29a      	uxth	r2, r3
 8016ca8:	687b      	ldr	r3, [r7, #4]
 8016caa:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8016cac:	68fb      	ldr	r3, [r7, #12]
 8016cae:	68db      	ldr	r3, [r3, #12]
 8016cb0:	685b      	ldr	r3, [r3, #4]
 8016cb2:	4618      	mov	r0, r3
 8016cb4:	f7f9 fc91 	bl	80105da <lwip_htonl>
 8016cb8:	4604      	mov	r4, r0
 8016cba:	68fb      	ldr	r3, [r7, #12]
 8016cbc:	891b      	ldrh	r3, [r3, #8]
 8016cbe:	461d      	mov	r5, r3
 8016cc0:	68fb      	ldr	r3, [r7, #12]
 8016cc2:	68db      	ldr	r3, [r3, #12]
 8016cc4:	899b      	ldrh	r3, [r3, #12]
 8016cc6:	b29b      	uxth	r3, r3
 8016cc8:	4618      	mov	r0, r3
 8016cca:	f7f9 fc71 	bl	80105b0 <lwip_htons>
 8016cce:	4603      	mov	r3, r0
 8016cd0:	b2db      	uxtb	r3, r3
 8016cd2:	f003 0303 	and.w	r3, r3, #3
 8016cd6:	2b00      	cmp	r3, #0
 8016cd8:	d001      	beq.n	8016cde <tcp_rexmit_rto_prepare+0xba>
 8016cda:	2301      	movs	r3, #1
 8016cdc:	e000      	b.n	8016ce0 <tcp_rexmit_rto_prepare+0xbc>
 8016cde:	2300      	movs	r3, #0
 8016ce0:	442b      	add	r3, r5
 8016ce2:	18e2      	adds	r2, r4, r3
 8016ce4:	687b      	ldr	r3, [r7, #4]
 8016ce6:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8016ce8:	687b      	ldr	r3, [r7, #4]
 8016cea:	2200      	movs	r2, #0
 8016cec:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8016cee:	2300      	movs	r3, #0
}
 8016cf0:	4618      	mov	r0, r3
 8016cf2:	3710      	adds	r7, #16
 8016cf4:	46bd      	mov	sp, r7
 8016cf6:	bdb0      	pop	{r4, r5, r7, pc}
 8016cf8:	08020ebc 	.word	0x08020ebc
 8016cfc:	080214f8 	.word	0x080214f8
 8016d00:	08020f10 	.word	0x08020f10

08016d04 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8016d04:	b580      	push	{r7, lr}
 8016d06:	b082      	sub	sp, #8
 8016d08:	af00      	add	r7, sp, #0
 8016d0a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8016d0c:	687b      	ldr	r3, [r7, #4]
 8016d0e:	2b00      	cmp	r3, #0
 8016d10:	d106      	bne.n	8016d20 <tcp_rexmit_rto_commit+0x1c>
 8016d12:	4b0d      	ldr	r3, [pc, #52]	; (8016d48 <tcp_rexmit_rto_commit+0x44>)
 8016d14:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8016d18:	490c      	ldr	r1, [pc, #48]	; (8016d4c <tcp_rexmit_rto_commit+0x48>)
 8016d1a:	480d      	ldr	r0, [pc, #52]	; (8016d50 <tcp_rexmit_rto_commit+0x4c>)
 8016d1c:	f006 fbb0 	bl	801d480 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8016d20:	687b      	ldr	r3, [r7, #4]
 8016d22:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016d26:	2bff      	cmp	r3, #255	; 0xff
 8016d28:	d007      	beq.n	8016d3a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8016d2a:	687b      	ldr	r3, [r7, #4]
 8016d2c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016d30:	3301      	adds	r3, #1
 8016d32:	b2da      	uxtb	r2, r3
 8016d34:	687b      	ldr	r3, [r7, #4]
 8016d36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8016d3a:	6878      	ldr	r0, [r7, #4]
 8016d3c:	f7ff fc80 	bl	8016640 <tcp_output>
}
 8016d40:	bf00      	nop
 8016d42:	3708      	adds	r7, #8
 8016d44:	46bd      	mov	sp, r7
 8016d46:	bd80      	pop	{r7, pc}
 8016d48:	08020ebc 	.word	0x08020ebc
 8016d4c:	0802151c 	.word	0x0802151c
 8016d50:	08020f10 	.word	0x08020f10

08016d54 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8016d54:	b580      	push	{r7, lr}
 8016d56:	b082      	sub	sp, #8
 8016d58:	af00      	add	r7, sp, #0
 8016d5a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8016d5c:	687b      	ldr	r3, [r7, #4]
 8016d5e:	2b00      	cmp	r3, #0
 8016d60:	d106      	bne.n	8016d70 <tcp_rexmit_rto+0x1c>
 8016d62:	4b0a      	ldr	r3, [pc, #40]	; (8016d8c <tcp_rexmit_rto+0x38>)
 8016d64:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8016d68:	4909      	ldr	r1, [pc, #36]	; (8016d90 <tcp_rexmit_rto+0x3c>)
 8016d6a:	480a      	ldr	r0, [pc, #40]	; (8016d94 <tcp_rexmit_rto+0x40>)
 8016d6c:	f006 fb88 	bl	801d480 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8016d70:	6878      	ldr	r0, [r7, #4]
 8016d72:	f7ff ff57 	bl	8016c24 <tcp_rexmit_rto_prepare>
 8016d76:	4603      	mov	r3, r0
 8016d78:	2b00      	cmp	r3, #0
 8016d7a:	d102      	bne.n	8016d82 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8016d7c:	6878      	ldr	r0, [r7, #4]
 8016d7e:	f7ff ffc1 	bl	8016d04 <tcp_rexmit_rto_commit>
  }
}
 8016d82:	bf00      	nop
 8016d84:	3708      	adds	r7, #8
 8016d86:	46bd      	mov	sp, r7
 8016d88:	bd80      	pop	{r7, pc}
 8016d8a:	bf00      	nop
 8016d8c:	08020ebc 	.word	0x08020ebc
 8016d90:	08021540 	.word	0x08021540
 8016d94:	08020f10 	.word	0x08020f10

08016d98 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8016d98:	b590      	push	{r4, r7, lr}
 8016d9a:	b085      	sub	sp, #20
 8016d9c:	af00      	add	r7, sp, #0
 8016d9e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8016da0:	687b      	ldr	r3, [r7, #4]
 8016da2:	2b00      	cmp	r3, #0
 8016da4:	d106      	bne.n	8016db4 <tcp_rexmit+0x1c>
 8016da6:	4b2f      	ldr	r3, [pc, #188]	; (8016e64 <tcp_rexmit+0xcc>)
 8016da8:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8016dac:	492e      	ldr	r1, [pc, #184]	; (8016e68 <tcp_rexmit+0xd0>)
 8016dae:	482f      	ldr	r0, [pc, #188]	; (8016e6c <tcp_rexmit+0xd4>)
 8016db0:	f006 fb66 	bl	801d480 <iprintf>

  if (pcb->unacked == NULL) {
 8016db4:	687b      	ldr	r3, [r7, #4]
 8016db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016db8:	2b00      	cmp	r3, #0
 8016dba:	d102      	bne.n	8016dc2 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8016dbc:	f06f 0305 	mvn.w	r3, #5
 8016dc0:	e04c      	b.n	8016e5c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8016dc2:	687b      	ldr	r3, [r7, #4]
 8016dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016dc6:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8016dc8:	68b8      	ldr	r0, [r7, #8]
 8016dca:	f7ff fe2d 	bl	8016a28 <tcp_output_segment_busy>
 8016dce:	4603      	mov	r3, r0
 8016dd0:	2b00      	cmp	r3, #0
 8016dd2:	d002      	beq.n	8016dda <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8016dd4:	f06f 0305 	mvn.w	r3, #5
 8016dd8:	e040      	b.n	8016e5c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8016dda:	68bb      	ldr	r3, [r7, #8]
 8016ddc:	681a      	ldr	r2, [r3, #0]
 8016dde:	687b      	ldr	r3, [r7, #4]
 8016de0:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8016de2:	687b      	ldr	r3, [r7, #4]
 8016de4:	336c      	adds	r3, #108	; 0x6c
 8016de6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8016de8:	e002      	b.n	8016df0 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8016dea:	68fb      	ldr	r3, [r7, #12]
 8016dec:	681b      	ldr	r3, [r3, #0]
 8016dee:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8016df0:	68fb      	ldr	r3, [r7, #12]
 8016df2:	681b      	ldr	r3, [r3, #0]
 8016df4:	2b00      	cmp	r3, #0
 8016df6:	d011      	beq.n	8016e1c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8016df8:	68fb      	ldr	r3, [r7, #12]
 8016dfa:	681b      	ldr	r3, [r3, #0]
 8016dfc:	68db      	ldr	r3, [r3, #12]
 8016dfe:	685b      	ldr	r3, [r3, #4]
 8016e00:	4618      	mov	r0, r3
 8016e02:	f7f9 fbea 	bl	80105da <lwip_htonl>
 8016e06:	4604      	mov	r4, r0
 8016e08:	68bb      	ldr	r3, [r7, #8]
 8016e0a:	68db      	ldr	r3, [r3, #12]
 8016e0c:	685b      	ldr	r3, [r3, #4]
 8016e0e:	4618      	mov	r0, r3
 8016e10:	f7f9 fbe3 	bl	80105da <lwip_htonl>
 8016e14:	4603      	mov	r3, r0
 8016e16:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8016e18:	2b00      	cmp	r3, #0
 8016e1a:	dbe6      	blt.n	8016dea <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8016e1c:	68fb      	ldr	r3, [r7, #12]
 8016e1e:	681a      	ldr	r2, [r3, #0]
 8016e20:	68bb      	ldr	r3, [r7, #8]
 8016e22:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8016e24:	68fb      	ldr	r3, [r7, #12]
 8016e26:	68ba      	ldr	r2, [r7, #8]
 8016e28:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8016e2a:	68bb      	ldr	r3, [r7, #8]
 8016e2c:	681b      	ldr	r3, [r3, #0]
 8016e2e:	2b00      	cmp	r3, #0
 8016e30:	d103      	bne.n	8016e3a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8016e32:	687b      	ldr	r3, [r7, #4]
 8016e34:	2200      	movs	r2, #0
 8016e36:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8016e3a:	687b      	ldr	r3, [r7, #4]
 8016e3c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016e40:	2bff      	cmp	r3, #255	; 0xff
 8016e42:	d007      	beq.n	8016e54 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8016e44:	687b      	ldr	r3, [r7, #4]
 8016e46:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016e4a:	3301      	adds	r3, #1
 8016e4c:	b2da      	uxtb	r2, r3
 8016e4e:	687b      	ldr	r3, [r7, #4]
 8016e50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8016e54:	687b      	ldr	r3, [r7, #4]
 8016e56:	2200      	movs	r2, #0
 8016e58:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8016e5a:	2300      	movs	r3, #0
}
 8016e5c:	4618      	mov	r0, r3
 8016e5e:	3714      	adds	r7, #20
 8016e60:	46bd      	mov	sp, r7
 8016e62:	bd90      	pop	{r4, r7, pc}
 8016e64:	08020ebc 	.word	0x08020ebc
 8016e68:	0802155c 	.word	0x0802155c
 8016e6c:	08020f10 	.word	0x08020f10

08016e70 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8016e70:	b580      	push	{r7, lr}
 8016e72:	b082      	sub	sp, #8
 8016e74:	af00      	add	r7, sp, #0
 8016e76:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8016e78:	687b      	ldr	r3, [r7, #4]
 8016e7a:	2b00      	cmp	r3, #0
 8016e7c:	d106      	bne.n	8016e8c <tcp_rexmit_fast+0x1c>
 8016e7e:	4b2a      	ldr	r3, [pc, #168]	; (8016f28 <tcp_rexmit_fast+0xb8>)
 8016e80:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8016e84:	4929      	ldr	r1, [pc, #164]	; (8016f2c <tcp_rexmit_fast+0xbc>)
 8016e86:	482a      	ldr	r0, [pc, #168]	; (8016f30 <tcp_rexmit_fast+0xc0>)
 8016e88:	f006 fafa 	bl	801d480 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8016e8c:	687b      	ldr	r3, [r7, #4]
 8016e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016e90:	2b00      	cmp	r3, #0
 8016e92:	d044      	beq.n	8016f1e <tcp_rexmit_fast+0xae>
 8016e94:	687b      	ldr	r3, [r7, #4]
 8016e96:	8b5b      	ldrh	r3, [r3, #26]
 8016e98:	f003 0304 	and.w	r3, r3, #4
 8016e9c:	2b00      	cmp	r3, #0
 8016e9e:	d13e      	bne.n	8016f1e <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8016ea0:	6878      	ldr	r0, [r7, #4]
 8016ea2:	f7ff ff79 	bl	8016d98 <tcp_rexmit>
 8016ea6:	4603      	mov	r3, r0
 8016ea8:	2b00      	cmp	r3, #0
 8016eaa:	d138      	bne.n	8016f1e <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8016eac:	687b      	ldr	r3, [r7, #4]
 8016eae:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8016eb2:	687b      	ldr	r3, [r7, #4]
 8016eb4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8016eb8:	4293      	cmp	r3, r2
 8016eba:	bf28      	it	cs
 8016ebc:	4613      	movcs	r3, r2
 8016ebe:	b29b      	uxth	r3, r3
 8016ec0:	0fda      	lsrs	r2, r3, #31
 8016ec2:	4413      	add	r3, r2
 8016ec4:	105b      	asrs	r3, r3, #1
 8016ec6:	b29a      	uxth	r2, r3
 8016ec8:	687b      	ldr	r3, [r7, #4]
 8016eca:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8016ece:	687b      	ldr	r3, [r7, #4]
 8016ed0:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8016ed4:	461a      	mov	r2, r3
 8016ed6:	687b      	ldr	r3, [r7, #4]
 8016ed8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016eda:	005b      	lsls	r3, r3, #1
 8016edc:	429a      	cmp	r2, r3
 8016ede:	d206      	bcs.n	8016eee <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8016ee0:	687b      	ldr	r3, [r7, #4]
 8016ee2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016ee4:	005b      	lsls	r3, r3, #1
 8016ee6:	b29a      	uxth	r2, r3
 8016ee8:	687b      	ldr	r3, [r7, #4]
 8016eea:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8016eee:	687b      	ldr	r3, [r7, #4]
 8016ef0:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8016ef4:	687b      	ldr	r3, [r7, #4]
 8016ef6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016ef8:	4619      	mov	r1, r3
 8016efa:	0049      	lsls	r1, r1, #1
 8016efc:	440b      	add	r3, r1
 8016efe:	b29b      	uxth	r3, r3
 8016f00:	4413      	add	r3, r2
 8016f02:	b29a      	uxth	r2, r3
 8016f04:	687b      	ldr	r3, [r7, #4]
 8016f06:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8016f0a:	687b      	ldr	r3, [r7, #4]
 8016f0c:	8b5b      	ldrh	r3, [r3, #26]
 8016f0e:	f043 0304 	orr.w	r3, r3, #4
 8016f12:	b29a      	uxth	r2, r3
 8016f14:	687b      	ldr	r3, [r7, #4]
 8016f16:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8016f18:	687b      	ldr	r3, [r7, #4]
 8016f1a:	2200      	movs	r2, #0
 8016f1c:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8016f1e:	bf00      	nop
 8016f20:	3708      	adds	r7, #8
 8016f22:	46bd      	mov	sp, r7
 8016f24:	bd80      	pop	{r7, pc}
 8016f26:	bf00      	nop
 8016f28:	08020ebc 	.word	0x08020ebc
 8016f2c:	08021574 	.word	0x08021574
 8016f30:	08020f10 	.word	0x08020f10

08016f34 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8016f34:	b580      	push	{r7, lr}
 8016f36:	b086      	sub	sp, #24
 8016f38:	af00      	add	r7, sp, #0
 8016f3a:	60f8      	str	r0, [r7, #12]
 8016f3c:	607b      	str	r3, [r7, #4]
 8016f3e:	460b      	mov	r3, r1
 8016f40:	817b      	strh	r3, [r7, #10]
 8016f42:	4613      	mov	r3, r2
 8016f44:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8016f46:	897a      	ldrh	r2, [r7, #10]
 8016f48:	893b      	ldrh	r3, [r7, #8]
 8016f4a:	4413      	add	r3, r2
 8016f4c:	b29b      	uxth	r3, r3
 8016f4e:	3314      	adds	r3, #20
 8016f50:	b29b      	uxth	r3, r3
 8016f52:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016f56:	4619      	mov	r1, r3
 8016f58:	2022      	movs	r0, #34	; 0x22
 8016f5a:	f7fa fbfd 	bl	8011758 <pbuf_alloc>
 8016f5e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8016f60:	697b      	ldr	r3, [r7, #20]
 8016f62:	2b00      	cmp	r3, #0
 8016f64:	d04d      	beq.n	8017002 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8016f66:	897b      	ldrh	r3, [r7, #10]
 8016f68:	3313      	adds	r3, #19
 8016f6a:	697a      	ldr	r2, [r7, #20]
 8016f6c:	8952      	ldrh	r2, [r2, #10]
 8016f6e:	4293      	cmp	r3, r2
 8016f70:	db06      	blt.n	8016f80 <tcp_output_alloc_header_common+0x4c>
 8016f72:	4b26      	ldr	r3, [pc, #152]	; (801700c <tcp_output_alloc_header_common+0xd8>)
 8016f74:	f240 7223 	movw	r2, #1827	; 0x723
 8016f78:	4925      	ldr	r1, [pc, #148]	; (8017010 <tcp_output_alloc_header_common+0xdc>)
 8016f7a:	4826      	ldr	r0, [pc, #152]	; (8017014 <tcp_output_alloc_header_common+0xe0>)
 8016f7c:	f006 fa80 	bl	801d480 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8016f80:	697b      	ldr	r3, [r7, #20]
 8016f82:	685b      	ldr	r3, [r3, #4]
 8016f84:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8016f86:	8c3b      	ldrh	r3, [r7, #32]
 8016f88:	4618      	mov	r0, r3
 8016f8a:	f7f9 fb11 	bl	80105b0 <lwip_htons>
 8016f8e:	4603      	mov	r3, r0
 8016f90:	461a      	mov	r2, r3
 8016f92:	693b      	ldr	r3, [r7, #16]
 8016f94:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8016f96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016f98:	4618      	mov	r0, r3
 8016f9a:	f7f9 fb09 	bl	80105b0 <lwip_htons>
 8016f9e:	4603      	mov	r3, r0
 8016fa0:	461a      	mov	r2, r3
 8016fa2:	693b      	ldr	r3, [r7, #16]
 8016fa4:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8016fa6:	693b      	ldr	r3, [r7, #16]
 8016fa8:	687a      	ldr	r2, [r7, #4]
 8016faa:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8016fac:	68f8      	ldr	r0, [r7, #12]
 8016fae:	f7f9 fb14 	bl	80105da <lwip_htonl>
 8016fb2:	4602      	mov	r2, r0
 8016fb4:	693b      	ldr	r3, [r7, #16]
 8016fb6:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8016fb8:	897b      	ldrh	r3, [r7, #10]
 8016fba:	089b      	lsrs	r3, r3, #2
 8016fbc:	b29b      	uxth	r3, r3
 8016fbe:	3305      	adds	r3, #5
 8016fc0:	b29b      	uxth	r3, r3
 8016fc2:	031b      	lsls	r3, r3, #12
 8016fc4:	b29a      	uxth	r2, r3
 8016fc6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8016fca:	b29b      	uxth	r3, r3
 8016fcc:	4313      	orrs	r3, r2
 8016fce:	b29b      	uxth	r3, r3
 8016fd0:	4618      	mov	r0, r3
 8016fd2:	f7f9 faed 	bl	80105b0 <lwip_htons>
 8016fd6:	4603      	mov	r3, r0
 8016fd8:	461a      	mov	r2, r3
 8016fda:	693b      	ldr	r3, [r7, #16]
 8016fdc:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8016fde:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8016fe0:	4618      	mov	r0, r3
 8016fe2:	f7f9 fae5 	bl	80105b0 <lwip_htons>
 8016fe6:	4603      	mov	r3, r0
 8016fe8:	461a      	mov	r2, r3
 8016fea:	693b      	ldr	r3, [r7, #16]
 8016fec:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8016fee:	693b      	ldr	r3, [r7, #16]
 8016ff0:	2200      	movs	r2, #0
 8016ff2:	741a      	strb	r2, [r3, #16]
 8016ff4:	2200      	movs	r2, #0
 8016ff6:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8016ff8:	693b      	ldr	r3, [r7, #16]
 8016ffa:	2200      	movs	r2, #0
 8016ffc:	749a      	strb	r2, [r3, #18]
 8016ffe:	2200      	movs	r2, #0
 8017000:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8017002:	697b      	ldr	r3, [r7, #20]
}
 8017004:	4618      	mov	r0, r3
 8017006:	3718      	adds	r7, #24
 8017008:	46bd      	mov	sp, r7
 801700a:	bd80      	pop	{r7, pc}
 801700c:	08020ebc 	.word	0x08020ebc
 8017010:	08021594 	.word	0x08021594
 8017014:	08020f10 	.word	0x08020f10

08017018 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8017018:	b5b0      	push	{r4, r5, r7, lr}
 801701a:	b08a      	sub	sp, #40	; 0x28
 801701c:	af04      	add	r7, sp, #16
 801701e:	60f8      	str	r0, [r7, #12]
 8017020:	607b      	str	r3, [r7, #4]
 8017022:	460b      	mov	r3, r1
 8017024:	817b      	strh	r3, [r7, #10]
 8017026:	4613      	mov	r3, r2
 8017028:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801702a:	68fb      	ldr	r3, [r7, #12]
 801702c:	2b00      	cmp	r3, #0
 801702e:	d106      	bne.n	801703e <tcp_output_alloc_header+0x26>
 8017030:	4b15      	ldr	r3, [pc, #84]	; (8017088 <tcp_output_alloc_header+0x70>)
 8017032:	f240 7242 	movw	r2, #1858	; 0x742
 8017036:	4915      	ldr	r1, [pc, #84]	; (801708c <tcp_output_alloc_header+0x74>)
 8017038:	4815      	ldr	r0, [pc, #84]	; (8017090 <tcp_output_alloc_header+0x78>)
 801703a:	f006 fa21 	bl	801d480 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801703e:	68fb      	ldr	r3, [r7, #12]
 8017040:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8017042:	68fb      	ldr	r3, [r7, #12]
 8017044:	8adb      	ldrh	r3, [r3, #22]
 8017046:	68fa      	ldr	r2, [r7, #12]
 8017048:	8b12      	ldrh	r2, [r2, #24]
 801704a:	68f9      	ldr	r1, [r7, #12]
 801704c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801704e:	893d      	ldrh	r5, [r7, #8]
 8017050:	897c      	ldrh	r4, [r7, #10]
 8017052:	9103      	str	r1, [sp, #12]
 8017054:	2110      	movs	r1, #16
 8017056:	9102      	str	r1, [sp, #8]
 8017058:	9201      	str	r2, [sp, #4]
 801705a:	9300      	str	r3, [sp, #0]
 801705c:	687b      	ldr	r3, [r7, #4]
 801705e:	462a      	mov	r2, r5
 8017060:	4621      	mov	r1, r4
 8017062:	f7ff ff67 	bl	8016f34 <tcp_output_alloc_header_common>
 8017066:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8017068:	697b      	ldr	r3, [r7, #20]
 801706a:	2b00      	cmp	r3, #0
 801706c:	d006      	beq.n	801707c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801706e:	68fb      	ldr	r3, [r7, #12]
 8017070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017072:	68fa      	ldr	r2, [r7, #12]
 8017074:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8017076:	441a      	add	r2, r3
 8017078:	68fb      	ldr	r3, [r7, #12]
 801707a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801707c:	697b      	ldr	r3, [r7, #20]
}
 801707e:	4618      	mov	r0, r3
 8017080:	3718      	adds	r7, #24
 8017082:	46bd      	mov	sp, r7
 8017084:	bdb0      	pop	{r4, r5, r7, pc}
 8017086:	bf00      	nop
 8017088:	08020ebc 	.word	0x08020ebc
 801708c:	080215c4 	.word	0x080215c4
 8017090:	08020f10 	.word	0x08020f10

08017094 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8017094:	b580      	push	{r7, lr}
 8017096:	b088      	sub	sp, #32
 8017098:	af00      	add	r7, sp, #0
 801709a:	60f8      	str	r0, [r7, #12]
 801709c:	60b9      	str	r1, [r7, #8]
 801709e:	4611      	mov	r1, r2
 80170a0:	461a      	mov	r2, r3
 80170a2:	460b      	mov	r3, r1
 80170a4:	71fb      	strb	r3, [r7, #7]
 80170a6:	4613      	mov	r3, r2
 80170a8:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80170aa:	2300      	movs	r3, #0
 80170ac:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80170ae:	68bb      	ldr	r3, [r7, #8]
 80170b0:	2b00      	cmp	r3, #0
 80170b2:	d106      	bne.n	80170c2 <tcp_output_fill_options+0x2e>
 80170b4:	4b13      	ldr	r3, [pc, #76]	; (8017104 <tcp_output_fill_options+0x70>)
 80170b6:	f240 7256 	movw	r2, #1878	; 0x756
 80170ba:	4913      	ldr	r1, [pc, #76]	; (8017108 <tcp_output_fill_options+0x74>)
 80170bc:	4813      	ldr	r0, [pc, #76]	; (801710c <tcp_output_fill_options+0x78>)
 80170be:	f006 f9df 	bl	801d480 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80170c2:	68bb      	ldr	r3, [r7, #8]
 80170c4:	685b      	ldr	r3, [r3, #4]
 80170c6:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80170c8:	69bb      	ldr	r3, [r7, #24]
 80170ca:	3314      	adds	r3, #20
 80170cc:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80170ce:	69bb      	ldr	r3, [r7, #24]
 80170d0:	f103 0214 	add.w	r2, r3, #20
 80170d4:	8bfb      	ldrh	r3, [r7, #30]
 80170d6:	009b      	lsls	r3, r3, #2
 80170d8:	4619      	mov	r1, r3
 80170da:	79fb      	ldrb	r3, [r7, #7]
 80170dc:	009b      	lsls	r3, r3, #2
 80170de:	f003 0304 	and.w	r3, r3, #4
 80170e2:	440b      	add	r3, r1
 80170e4:	4413      	add	r3, r2
 80170e6:	697a      	ldr	r2, [r7, #20]
 80170e8:	429a      	cmp	r2, r3
 80170ea:	d006      	beq.n	80170fa <tcp_output_fill_options+0x66>
 80170ec:	4b05      	ldr	r3, [pc, #20]	; (8017104 <tcp_output_fill_options+0x70>)
 80170ee:	f240 7275 	movw	r2, #1909	; 0x775
 80170f2:	4907      	ldr	r1, [pc, #28]	; (8017110 <tcp_output_fill_options+0x7c>)
 80170f4:	4805      	ldr	r0, [pc, #20]	; (801710c <tcp_output_fill_options+0x78>)
 80170f6:	f006 f9c3 	bl	801d480 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80170fa:	bf00      	nop
 80170fc:	3720      	adds	r7, #32
 80170fe:	46bd      	mov	sp, r7
 8017100:	bd80      	pop	{r7, pc}
 8017102:	bf00      	nop
 8017104:	08020ebc 	.word	0x08020ebc
 8017108:	080215ec 	.word	0x080215ec
 801710c:	08020f10 	.word	0x08020f10
 8017110:	080214e4 	.word	0x080214e4

08017114 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8017114:	b580      	push	{r7, lr}
 8017116:	b08a      	sub	sp, #40	; 0x28
 8017118:	af04      	add	r7, sp, #16
 801711a:	60f8      	str	r0, [r7, #12]
 801711c:	60b9      	str	r1, [r7, #8]
 801711e:	607a      	str	r2, [r7, #4]
 8017120:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8017122:	68bb      	ldr	r3, [r7, #8]
 8017124:	2b00      	cmp	r3, #0
 8017126:	d106      	bne.n	8017136 <tcp_output_control_segment+0x22>
 8017128:	4b1c      	ldr	r3, [pc, #112]	; (801719c <tcp_output_control_segment+0x88>)
 801712a:	f240 7287 	movw	r2, #1927	; 0x787
 801712e:	491c      	ldr	r1, [pc, #112]	; (80171a0 <tcp_output_control_segment+0x8c>)
 8017130:	481c      	ldr	r0, [pc, #112]	; (80171a4 <tcp_output_control_segment+0x90>)
 8017132:	f006 f9a5 	bl	801d480 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8017136:	683a      	ldr	r2, [r7, #0]
 8017138:	6879      	ldr	r1, [r7, #4]
 801713a:	68f8      	ldr	r0, [r7, #12]
 801713c:	f7fe ff40 	bl	8015fc0 <tcp_route>
 8017140:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8017142:	693b      	ldr	r3, [r7, #16]
 8017144:	2b00      	cmp	r3, #0
 8017146:	d102      	bne.n	801714e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8017148:	23fc      	movs	r3, #252	; 0xfc
 801714a:	75fb      	strb	r3, [r7, #23]
 801714c:	e01c      	b.n	8017188 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801714e:	68fb      	ldr	r3, [r7, #12]
 8017150:	2b00      	cmp	r3, #0
 8017152:	d006      	beq.n	8017162 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8017154:	68fb      	ldr	r3, [r7, #12]
 8017156:	7adb      	ldrb	r3, [r3, #11]
 8017158:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801715a:	68fb      	ldr	r3, [r7, #12]
 801715c:	7a9b      	ldrb	r3, [r3, #10]
 801715e:	757b      	strb	r3, [r7, #21]
 8017160:	e003      	b.n	801716a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8017162:	23ff      	movs	r3, #255	; 0xff
 8017164:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8017166:	2300      	movs	r3, #0
 8017168:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801716a:	7dba      	ldrb	r2, [r7, #22]
 801716c:	693b      	ldr	r3, [r7, #16]
 801716e:	9302      	str	r3, [sp, #8]
 8017170:	2306      	movs	r3, #6
 8017172:	9301      	str	r3, [sp, #4]
 8017174:	7d7b      	ldrb	r3, [r7, #21]
 8017176:	9300      	str	r3, [sp, #0]
 8017178:	4613      	mov	r3, r2
 801717a:	683a      	ldr	r2, [r7, #0]
 801717c:	6879      	ldr	r1, [r7, #4]
 801717e:	68b8      	ldr	r0, [r7, #8]
 8017180:	f004 f956 	bl	801b430 <ip4_output_if>
 8017184:	4603      	mov	r3, r0
 8017186:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8017188:	68b8      	ldr	r0, [r7, #8]
 801718a:	f7fa fdc9 	bl	8011d20 <pbuf_free>
  return err;
 801718e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017192:	4618      	mov	r0, r3
 8017194:	3718      	adds	r7, #24
 8017196:	46bd      	mov	sp, r7
 8017198:	bd80      	pop	{r7, pc}
 801719a:	bf00      	nop
 801719c:	08020ebc 	.word	0x08020ebc
 80171a0:	08021614 	.word	0x08021614
 80171a4:	08020f10 	.word	0x08020f10

080171a8 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80171a8:	b590      	push	{r4, r7, lr}
 80171aa:	b08b      	sub	sp, #44	; 0x2c
 80171ac:	af04      	add	r7, sp, #16
 80171ae:	60f8      	str	r0, [r7, #12]
 80171b0:	60b9      	str	r1, [r7, #8]
 80171b2:	607a      	str	r2, [r7, #4]
 80171b4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80171b6:	683b      	ldr	r3, [r7, #0]
 80171b8:	2b00      	cmp	r3, #0
 80171ba:	d106      	bne.n	80171ca <tcp_rst+0x22>
 80171bc:	4b1f      	ldr	r3, [pc, #124]	; (801723c <tcp_rst+0x94>)
 80171be:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80171c2:	491f      	ldr	r1, [pc, #124]	; (8017240 <tcp_rst+0x98>)
 80171c4:	481f      	ldr	r0, [pc, #124]	; (8017244 <tcp_rst+0x9c>)
 80171c6:	f006 f95b 	bl	801d480 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80171ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80171cc:	2b00      	cmp	r3, #0
 80171ce:	d106      	bne.n	80171de <tcp_rst+0x36>
 80171d0:	4b1a      	ldr	r3, [pc, #104]	; (801723c <tcp_rst+0x94>)
 80171d2:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80171d6:	491c      	ldr	r1, [pc, #112]	; (8017248 <tcp_rst+0xa0>)
 80171d8:	481a      	ldr	r0, [pc, #104]	; (8017244 <tcp_rst+0x9c>)
 80171da:	f006 f951 	bl	801d480 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80171de:	2300      	movs	r3, #0
 80171e0:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80171e2:	f246 0308 	movw	r3, #24584	; 0x6008
 80171e6:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80171e8:	7dfb      	ldrb	r3, [r7, #23]
 80171ea:	b29c      	uxth	r4, r3
 80171ec:	68b8      	ldr	r0, [r7, #8]
 80171ee:	f7f9 f9f4 	bl	80105da <lwip_htonl>
 80171f2:	4602      	mov	r2, r0
 80171f4:	8abb      	ldrh	r3, [r7, #20]
 80171f6:	9303      	str	r3, [sp, #12]
 80171f8:	2314      	movs	r3, #20
 80171fa:	9302      	str	r3, [sp, #8]
 80171fc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80171fe:	9301      	str	r3, [sp, #4]
 8017200:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8017202:	9300      	str	r3, [sp, #0]
 8017204:	4613      	mov	r3, r2
 8017206:	2200      	movs	r2, #0
 8017208:	4621      	mov	r1, r4
 801720a:	6878      	ldr	r0, [r7, #4]
 801720c:	f7ff fe92 	bl	8016f34 <tcp_output_alloc_header_common>
 8017210:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8017212:	693b      	ldr	r3, [r7, #16]
 8017214:	2b00      	cmp	r3, #0
 8017216:	d00c      	beq.n	8017232 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8017218:	7dfb      	ldrb	r3, [r7, #23]
 801721a:	2200      	movs	r2, #0
 801721c:	6939      	ldr	r1, [r7, #16]
 801721e:	68f8      	ldr	r0, [r7, #12]
 8017220:	f7ff ff38 	bl	8017094 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8017224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017226:	683a      	ldr	r2, [r7, #0]
 8017228:	6939      	ldr	r1, [r7, #16]
 801722a:	68f8      	ldr	r0, [r7, #12]
 801722c:	f7ff ff72 	bl	8017114 <tcp_output_control_segment>
 8017230:	e000      	b.n	8017234 <tcp_rst+0x8c>
    return;
 8017232:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8017234:	371c      	adds	r7, #28
 8017236:	46bd      	mov	sp, r7
 8017238:	bd90      	pop	{r4, r7, pc}
 801723a:	bf00      	nop
 801723c:	08020ebc 	.word	0x08020ebc
 8017240:	08021640 	.word	0x08021640
 8017244:	08020f10 	.word	0x08020f10
 8017248:	0802165c 	.word	0x0802165c

0801724c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801724c:	b590      	push	{r4, r7, lr}
 801724e:	b087      	sub	sp, #28
 8017250:	af00      	add	r7, sp, #0
 8017252:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8017254:	2300      	movs	r3, #0
 8017256:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8017258:	2300      	movs	r3, #0
 801725a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801725c:	687b      	ldr	r3, [r7, #4]
 801725e:	2b00      	cmp	r3, #0
 8017260:	d106      	bne.n	8017270 <tcp_send_empty_ack+0x24>
 8017262:	4b28      	ldr	r3, [pc, #160]	; (8017304 <tcp_send_empty_ack+0xb8>)
 8017264:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8017268:	4927      	ldr	r1, [pc, #156]	; (8017308 <tcp_send_empty_ack+0xbc>)
 801726a:	4828      	ldr	r0, [pc, #160]	; (801730c <tcp_send_empty_ack+0xc0>)
 801726c:	f006 f908 	bl	801d480 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8017270:	7dfb      	ldrb	r3, [r7, #23]
 8017272:	009b      	lsls	r3, r3, #2
 8017274:	b2db      	uxtb	r3, r3
 8017276:	f003 0304 	and.w	r3, r3, #4
 801727a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801727c:	7d7b      	ldrb	r3, [r7, #21]
 801727e:	b29c      	uxth	r4, r3
 8017280:	687b      	ldr	r3, [r7, #4]
 8017282:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017284:	4618      	mov	r0, r3
 8017286:	f7f9 f9a8 	bl	80105da <lwip_htonl>
 801728a:	4603      	mov	r3, r0
 801728c:	2200      	movs	r2, #0
 801728e:	4621      	mov	r1, r4
 8017290:	6878      	ldr	r0, [r7, #4]
 8017292:	f7ff fec1 	bl	8017018 <tcp_output_alloc_header>
 8017296:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8017298:	693b      	ldr	r3, [r7, #16]
 801729a:	2b00      	cmp	r3, #0
 801729c:	d109      	bne.n	80172b2 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801729e:	687b      	ldr	r3, [r7, #4]
 80172a0:	8b5b      	ldrh	r3, [r3, #26]
 80172a2:	f043 0303 	orr.w	r3, r3, #3
 80172a6:	b29a      	uxth	r2, r3
 80172a8:	687b      	ldr	r3, [r7, #4]
 80172aa:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80172ac:	f06f 0301 	mvn.w	r3, #1
 80172b0:	e023      	b.n	80172fa <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80172b2:	7dbb      	ldrb	r3, [r7, #22]
 80172b4:	7dfa      	ldrb	r2, [r7, #23]
 80172b6:	6939      	ldr	r1, [r7, #16]
 80172b8:	6878      	ldr	r0, [r7, #4]
 80172ba:	f7ff feeb 	bl	8017094 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80172be:	687a      	ldr	r2, [r7, #4]
 80172c0:	687b      	ldr	r3, [r7, #4]
 80172c2:	3304      	adds	r3, #4
 80172c4:	6939      	ldr	r1, [r7, #16]
 80172c6:	6878      	ldr	r0, [r7, #4]
 80172c8:	f7ff ff24 	bl	8017114 <tcp_output_control_segment>
 80172cc:	4603      	mov	r3, r0
 80172ce:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80172d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80172d4:	2b00      	cmp	r3, #0
 80172d6:	d007      	beq.n	80172e8 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80172d8:	687b      	ldr	r3, [r7, #4]
 80172da:	8b5b      	ldrh	r3, [r3, #26]
 80172dc:	f043 0303 	orr.w	r3, r3, #3
 80172e0:	b29a      	uxth	r2, r3
 80172e2:	687b      	ldr	r3, [r7, #4]
 80172e4:	835a      	strh	r2, [r3, #26]
 80172e6:	e006      	b.n	80172f6 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80172e8:	687b      	ldr	r3, [r7, #4]
 80172ea:	8b5b      	ldrh	r3, [r3, #26]
 80172ec:	f023 0303 	bic.w	r3, r3, #3
 80172f0:	b29a      	uxth	r2, r3
 80172f2:	687b      	ldr	r3, [r7, #4]
 80172f4:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80172f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80172fa:	4618      	mov	r0, r3
 80172fc:	371c      	adds	r7, #28
 80172fe:	46bd      	mov	sp, r7
 8017300:	bd90      	pop	{r4, r7, pc}
 8017302:	bf00      	nop
 8017304:	08020ebc 	.word	0x08020ebc
 8017308:	08021678 	.word	0x08021678
 801730c:	08020f10 	.word	0x08020f10

08017310 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8017310:	b590      	push	{r4, r7, lr}
 8017312:	b087      	sub	sp, #28
 8017314:	af00      	add	r7, sp, #0
 8017316:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8017318:	2300      	movs	r3, #0
 801731a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801731c:	687b      	ldr	r3, [r7, #4]
 801731e:	2b00      	cmp	r3, #0
 8017320:	d106      	bne.n	8017330 <tcp_keepalive+0x20>
 8017322:	4b18      	ldr	r3, [pc, #96]	; (8017384 <tcp_keepalive+0x74>)
 8017324:	f640 0224 	movw	r2, #2084	; 0x824
 8017328:	4917      	ldr	r1, [pc, #92]	; (8017388 <tcp_keepalive+0x78>)
 801732a:	4818      	ldr	r0, [pc, #96]	; (801738c <tcp_keepalive+0x7c>)
 801732c:	f006 f8a8 	bl	801d480 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8017330:	7dfb      	ldrb	r3, [r7, #23]
 8017332:	b29c      	uxth	r4, r3
 8017334:	687b      	ldr	r3, [r7, #4]
 8017336:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017338:	3b01      	subs	r3, #1
 801733a:	4618      	mov	r0, r3
 801733c:	f7f9 f94d 	bl	80105da <lwip_htonl>
 8017340:	4603      	mov	r3, r0
 8017342:	2200      	movs	r2, #0
 8017344:	4621      	mov	r1, r4
 8017346:	6878      	ldr	r0, [r7, #4]
 8017348:	f7ff fe66 	bl	8017018 <tcp_output_alloc_header>
 801734c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801734e:	693b      	ldr	r3, [r7, #16]
 8017350:	2b00      	cmp	r3, #0
 8017352:	d102      	bne.n	801735a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8017354:	f04f 33ff 	mov.w	r3, #4294967295
 8017358:	e010      	b.n	801737c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801735a:	7dfb      	ldrb	r3, [r7, #23]
 801735c:	2200      	movs	r2, #0
 801735e:	6939      	ldr	r1, [r7, #16]
 8017360:	6878      	ldr	r0, [r7, #4]
 8017362:	f7ff fe97 	bl	8017094 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8017366:	687a      	ldr	r2, [r7, #4]
 8017368:	687b      	ldr	r3, [r7, #4]
 801736a:	3304      	adds	r3, #4
 801736c:	6939      	ldr	r1, [r7, #16]
 801736e:	6878      	ldr	r0, [r7, #4]
 8017370:	f7ff fed0 	bl	8017114 <tcp_output_control_segment>
 8017374:	4603      	mov	r3, r0
 8017376:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8017378:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801737c:	4618      	mov	r0, r3
 801737e:	371c      	adds	r7, #28
 8017380:	46bd      	mov	sp, r7
 8017382:	bd90      	pop	{r4, r7, pc}
 8017384:	08020ebc 	.word	0x08020ebc
 8017388:	08021698 	.word	0x08021698
 801738c:	08020f10 	.word	0x08020f10

08017390 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8017390:	b590      	push	{r4, r7, lr}
 8017392:	b08b      	sub	sp, #44	; 0x2c
 8017394:	af00      	add	r7, sp, #0
 8017396:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8017398:	2300      	movs	r3, #0
 801739a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801739e:	687b      	ldr	r3, [r7, #4]
 80173a0:	2b00      	cmp	r3, #0
 80173a2:	d106      	bne.n	80173b2 <tcp_zero_window_probe+0x22>
 80173a4:	4b4c      	ldr	r3, [pc, #304]	; (80174d8 <tcp_zero_window_probe+0x148>)
 80173a6:	f640 024f 	movw	r2, #2127	; 0x84f
 80173aa:	494c      	ldr	r1, [pc, #304]	; (80174dc <tcp_zero_window_probe+0x14c>)
 80173ac:	484c      	ldr	r0, [pc, #304]	; (80174e0 <tcp_zero_window_probe+0x150>)
 80173ae:	f006 f867 	bl	801d480 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80173b2:	687b      	ldr	r3, [r7, #4]
 80173b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80173b6:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80173b8:	6a3b      	ldr	r3, [r7, #32]
 80173ba:	2b00      	cmp	r3, #0
 80173bc:	d101      	bne.n	80173c2 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80173be:	2300      	movs	r3, #0
 80173c0:	e086      	b.n	80174d0 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80173c2:	687b      	ldr	r3, [r7, #4]
 80173c4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80173c8:	2bff      	cmp	r3, #255	; 0xff
 80173ca:	d007      	beq.n	80173dc <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80173cc:	687b      	ldr	r3, [r7, #4]
 80173ce:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80173d2:	3301      	adds	r3, #1
 80173d4:	b2da      	uxtb	r2, r3
 80173d6:	687b      	ldr	r3, [r7, #4]
 80173d8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80173dc:	6a3b      	ldr	r3, [r7, #32]
 80173de:	68db      	ldr	r3, [r3, #12]
 80173e0:	899b      	ldrh	r3, [r3, #12]
 80173e2:	b29b      	uxth	r3, r3
 80173e4:	4618      	mov	r0, r3
 80173e6:	f7f9 f8e3 	bl	80105b0 <lwip_htons>
 80173ea:	4603      	mov	r3, r0
 80173ec:	b2db      	uxtb	r3, r3
 80173ee:	f003 0301 	and.w	r3, r3, #1
 80173f2:	2b00      	cmp	r3, #0
 80173f4:	d005      	beq.n	8017402 <tcp_zero_window_probe+0x72>
 80173f6:	6a3b      	ldr	r3, [r7, #32]
 80173f8:	891b      	ldrh	r3, [r3, #8]
 80173fa:	2b00      	cmp	r3, #0
 80173fc:	d101      	bne.n	8017402 <tcp_zero_window_probe+0x72>
 80173fe:	2301      	movs	r3, #1
 8017400:	e000      	b.n	8017404 <tcp_zero_window_probe+0x74>
 8017402:	2300      	movs	r3, #0
 8017404:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8017406:	7ffb      	ldrb	r3, [r7, #31]
 8017408:	2b00      	cmp	r3, #0
 801740a:	bf0c      	ite	eq
 801740c:	2301      	moveq	r3, #1
 801740e:	2300      	movne	r3, #0
 8017410:	b2db      	uxtb	r3, r3
 8017412:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8017414:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017418:	b299      	uxth	r1, r3
 801741a:	6a3b      	ldr	r3, [r7, #32]
 801741c:	68db      	ldr	r3, [r3, #12]
 801741e:	685b      	ldr	r3, [r3, #4]
 8017420:	8bba      	ldrh	r2, [r7, #28]
 8017422:	6878      	ldr	r0, [r7, #4]
 8017424:	f7ff fdf8 	bl	8017018 <tcp_output_alloc_header>
 8017428:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801742a:	69bb      	ldr	r3, [r7, #24]
 801742c:	2b00      	cmp	r3, #0
 801742e:	d102      	bne.n	8017436 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8017430:	f04f 33ff 	mov.w	r3, #4294967295
 8017434:	e04c      	b.n	80174d0 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8017436:	69bb      	ldr	r3, [r7, #24]
 8017438:	685b      	ldr	r3, [r3, #4]
 801743a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801743c:	7ffb      	ldrb	r3, [r7, #31]
 801743e:	2b00      	cmp	r3, #0
 8017440:	d011      	beq.n	8017466 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8017442:	697b      	ldr	r3, [r7, #20]
 8017444:	899b      	ldrh	r3, [r3, #12]
 8017446:	b29b      	uxth	r3, r3
 8017448:	b21b      	sxth	r3, r3
 801744a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801744e:	b21c      	sxth	r4, r3
 8017450:	2011      	movs	r0, #17
 8017452:	f7f9 f8ad 	bl	80105b0 <lwip_htons>
 8017456:	4603      	mov	r3, r0
 8017458:	b21b      	sxth	r3, r3
 801745a:	4323      	orrs	r3, r4
 801745c:	b21b      	sxth	r3, r3
 801745e:	b29a      	uxth	r2, r3
 8017460:	697b      	ldr	r3, [r7, #20]
 8017462:	819a      	strh	r2, [r3, #12]
 8017464:	e010      	b.n	8017488 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8017466:	69bb      	ldr	r3, [r7, #24]
 8017468:	685b      	ldr	r3, [r3, #4]
 801746a:	3314      	adds	r3, #20
 801746c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801746e:	6a3b      	ldr	r3, [r7, #32]
 8017470:	6858      	ldr	r0, [r3, #4]
 8017472:	6a3b      	ldr	r3, [r7, #32]
 8017474:	685b      	ldr	r3, [r3, #4]
 8017476:	891a      	ldrh	r2, [r3, #8]
 8017478:	6a3b      	ldr	r3, [r7, #32]
 801747a:	891b      	ldrh	r3, [r3, #8]
 801747c:	1ad3      	subs	r3, r2, r3
 801747e:	b29b      	uxth	r3, r3
 8017480:	2201      	movs	r2, #1
 8017482:	6939      	ldr	r1, [r7, #16]
 8017484:	f7fa fe52 	bl	801212c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8017488:	6a3b      	ldr	r3, [r7, #32]
 801748a:	68db      	ldr	r3, [r3, #12]
 801748c:	685b      	ldr	r3, [r3, #4]
 801748e:	4618      	mov	r0, r3
 8017490:	f7f9 f8a3 	bl	80105da <lwip_htonl>
 8017494:	4603      	mov	r3, r0
 8017496:	3301      	adds	r3, #1
 8017498:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801749a:	687b      	ldr	r3, [r7, #4]
 801749c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801749e:	68fb      	ldr	r3, [r7, #12]
 80174a0:	1ad3      	subs	r3, r2, r3
 80174a2:	2b00      	cmp	r3, #0
 80174a4:	da02      	bge.n	80174ac <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80174a6:	687b      	ldr	r3, [r7, #4]
 80174a8:	68fa      	ldr	r2, [r7, #12]
 80174aa:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80174ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80174b0:	2200      	movs	r2, #0
 80174b2:	69b9      	ldr	r1, [r7, #24]
 80174b4:	6878      	ldr	r0, [r7, #4]
 80174b6:	f7ff fded 	bl	8017094 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80174ba:	687a      	ldr	r2, [r7, #4]
 80174bc:	687b      	ldr	r3, [r7, #4]
 80174be:	3304      	adds	r3, #4
 80174c0:	69b9      	ldr	r1, [r7, #24]
 80174c2:	6878      	ldr	r0, [r7, #4]
 80174c4:	f7ff fe26 	bl	8017114 <tcp_output_control_segment>
 80174c8:	4603      	mov	r3, r0
 80174ca:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80174cc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80174d0:	4618      	mov	r0, r3
 80174d2:	372c      	adds	r7, #44	; 0x2c
 80174d4:	46bd      	mov	sp, r7
 80174d6:	bd90      	pop	{r4, r7, pc}
 80174d8:	08020ebc 	.word	0x08020ebc
 80174dc:	080216b4 	.word	0x080216b4
 80174e0:	08020f10 	.word	0x08020f10

080174e4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80174e4:	b580      	push	{r7, lr}
 80174e6:	b082      	sub	sp, #8
 80174e8:	af00      	add	r7, sp, #0
 80174ea:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80174ec:	f7fa ff0c 	bl	8012308 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80174f0:	4b0a      	ldr	r3, [pc, #40]	; (801751c <tcpip_tcp_timer+0x38>)
 80174f2:	681b      	ldr	r3, [r3, #0]
 80174f4:	2b00      	cmp	r3, #0
 80174f6:	d103      	bne.n	8017500 <tcpip_tcp_timer+0x1c>
 80174f8:	4b09      	ldr	r3, [pc, #36]	; (8017520 <tcpip_tcp_timer+0x3c>)
 80174fa:	681b      	ldr	r3, [r3, #0]
 80174fc:	2b00      	cmp	r3, #0
 80174fe:	d005      	beq.n	801750c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8017500:	2200      	movs	r2, #0
 8017502:	4908      	ldr	r1, [pc, #32]	; (8017524 <tcpip_tcp_timer+0x40>)
 8017504:	20fa      	movs	r0, #250	; 0xfa
 8017506:	f000 f8f3 	bl	80176f0 <sys_timeout>
 801750a:	e003      	b.n	8017514 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801750c:	4b06      	ldr	r3, [pc, #24]	; (8017528 <tcpip_tcp_timer+0x44>)
 801750e:	2200      	movs	r2, #0
 8017510:	601a      	str	r2, [r3, #0]
  }
}
 8017512:	bf00      	nop
 8017514:	bf00      	nop
 8017516:	3708      	adds	r7, #8
 8017518:	46bd      	mov	sp, r7
 801751a:	bd80      	pop	{r7, pc}
 801751c:	2001b7d8 	.word	0x2001b7d8
 8017520:	2001b7e8 	.word	0x2001b7e8
 8017524:	080174e5 	.word	0x080174e5
 8017528:	200137ec 	.word	0x200137ec

0801752c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801752c:	b580      	push	{r7, lr}
 801752e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8017530:	4b0a      	ldr	r3, [pc, #40]	; (801755c <tcp_timer_needed+0x30>)
 8017532:	681b      	ldr	r3, [r3, #0]
 8017534:	2b00      	cmp	r3, #0
 8017536:	d10f      	bne.n	8017558 <tcp_timer_needed+0x2c>
 8017538:	4b09      	ldr	r3, [pc, #36]	; (8017560 <tcp_timer_needed+0x34>)
 801753a:	681b      	ldr	r3, [r3, #0]
 801753c:	2b00      	cmp	r3, #0
 801753e:	d103      	bne.n	8017548 <tcp_timer_needed+0x1c>
 8017540:	4b08      	ldr	r3, [pc, #32]	; (8017564 <tcp_timer_needed+0x38>)
 8017542:	681b      	ldr	r3, [r3, #0]
 8017544:	2b00      	cmp	r3, #0
 8017546:	d007      	beq.n	8017558 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8017548:	4b04      	ldr	r3, [pc, #16]	; (801755c <tcp_timer_needed+0x30>)
 801754a:	2201      	movs	r2, #1
 801754c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801754e:	2200      	movs	r2, #0
 8017550:	4905      	ldr	r1, [pc, #20]	; (8017568 <tcp_timer_needed+0x3c>)
 8017552:	20fa      	movs	r0, #250	; 0xfa
 8017554:	f000 f8cc 	bl	80176f0 <sys_timeout>
  }
}
 8017558:	bf00      	nop
 801755a:	bd80      	pop	{r7, pc}
 801755c:	200137ec 	.word	0x200137ec
 8017560:	2001b7d8 	.word	0x2001b7d8
 8017564:	2001b7e8 	.word	0x2001b7e8
 8017568:	080174e5 	.word	0x080174e5

0801756c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801756c:	b580      	push	{r7, lr}
 801756e:	b086      	sub	sp, #24
 8017570:	af00      	add	r7, sp, #0
 8017572:	60f8      	str	r0, [r7, #12]
 8017574:	60b9      	str	r1, [r7, #8]
 8017576:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8017578:	200a      	movs	r0, #10
 801757a:	f7f9 fccf 	bl	8010f1c <memp_malloc>
 801757e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8017580:	693b      	ldr	r3, [r7, #16]
 8017582:	2b00      	cmp	r3, #0
 8017584:	d109      	bne.n	801759a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8017586:	693b      	ldr	r3, [r7, #16]
 8017588:	2b00      	cmp	r3, #0
 801758a:	d151      	bne.n	8017630 <sys_timeout_abs+0xc4>
 801758c:	4b2a      	ldr	r3, [pc, #168]	; (8017638 <sys_timeout_abs+0xcc>)
 801758e:	22be      	movs	r2, #190	; 0xbe
 8017590:	492a      	ldr	r1, [pc, #168]	; (801763c <sys_timeout_abs+0xd0>)
 8017592:	482b      	ldr	r0, [pc, #172]	; (8017640 <sys_timeout_abs+0xd4>)
 8017594:	f005 ff74 	bl	801d480 <iprintf>
    return;
 8017598:	e04a      	b.n	8017630 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801759a:	693b      	ldr	r3, [r7, #16]
 801759c:	2200      	movs	r2, #0
 801759e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80175a0:	693b      	ldr	r3, [r7, #16]
 80175a2:	68ba      	ldr	r2, [r7, #8]
 80175a4:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80175a6:	693b      	ldr	r3, [r7, #16]
 80175a8:	687a      	ldr	r2, [r7, #4]
 80175aa:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80175ac:	693b      	ldr	r3, [r7, #16]
 80175ae:	68fa      	ldr	r2, [r7, #12]
 80175b0:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80175b2:	4b24      	ldr	r3, [pc, #144]	; (8017644 <sys_timeout_abs+0xd8>)
 80175b4:	681b      	ldr	r3, [r3, #0]
 80175b6:	2b00      	cmp	r3, #0
 80175b8:	d103      	bne.n	80175c2 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80175ba:	4a22      	ldr	r2, [pc, #136]	; (8017644 <sys_timeout_abs+0xd8>)
 80175bc:	693b      	ldr	r3, [r7, #16]
 80175be:	6013      	str	r3, [r2, #0]
    return;
 80175c0:	e037      	b.n	8017632 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80175c2:	693b      	ldr	r3, [r7, #16]
 80175c4:	685a      	ldr	r2, [r3, #4]
 80175c6:	4b1f      	ldr	r3, [pc, #124]	; (8017644 <sys_timeout_abs+0xd8>)
 80175c8:	681b      	ldr	r3, [r3, #0]
 80175ca:	685b      	ldr	r3, [r3, #4]
 80175cc:	1ad3      	subs	r3, r2, r3
 80175ce:	0fdb      	lsrs	r3, r3, #31
 80175d0:	f003 0301 	and.w	r3, r3, #1
 80175d4:	b2db      	uxtb	r3, r3
 80175d6:	2b00      	cmp	r3, #0
 80175d8:	d007      	beq.n	80175ea <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80175da:	4b1a      	ldr	r3, [pc, #104]	; (8017644 <sys_timeout_abs+0xd8>)
 80175dc:	681a      	ldr	r2, [r3, #0]
 80175de:	693b      	ldr	r3, [r7, #16]
 80175e0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80175e2:	4a18      	ldr	r2, [pc, #96]	; (8017644 <sys_timeout_abs+0xd8>)
 80175e4:	693b      	ldr	r3, [r7, #16]
 80175e6:	6013      	str	r3, [r2, #0]
 80175e8:	e023      	b.n	8017632 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80175ea:	4b16      	ldr	r3, [pc, #88]	; (8017644 <sys_timeout_abs+0xd8>)
 80175ec:	681b      	ldr	r3, [r3, #0]
 80175ee:	617b      	str	r3, [r7, #20]
 80175f0:	e01a      	b.n	8017628 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80175f2:	697b      	ldr	r3, [r7, #20]
 80175f4:	681b      	ldr	r3, [r3, #0]
 80175f6:	2b00      	cmp	r3, #0
 80175f8:	d00b      	beq.n	8017612 <sys_timeout_abs+0xa6>
 80175fa:	693b      	ldr	r3, [r7, #16]
 80175fc:	685a      	ldr	r2, [r3, #4]
 80175fe:	697b      	ldr	r3, [r7, #20]
 8017600:	681b      	ldr	r3, [r3, #0]
 8017602:	685b      	ldr	r3, [r3, #4]
 8017604:	1ad3      	subs	r3, r2, r3
 8017606:	0fdb      	lsrs	r3, r3, #31
 8017608:	f003 0301 	and.w	r3, r3, #1
 801760c:	b2db      	uxtb	r3, r3
 801760e:	2b00      	cmp	r3, #0
 8017610:	d007      	beq.n	8017622 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8017612:	697b      	ldr	r3, [r7, #20]
 8017614:	681a      	ldr	r2, [r3, #0]
 8017616:	693b      	ldr	r3, [r7, #16]
 8017618:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801761a:	697b      	ldr	r3, [r7, #20]
 801761c:	693a      	ldr	r2, [r7, #16]
 801761e:	601a      	str	r2, [r3, #0]
        break;
 8017620:	e007      	b.n	8017632 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8017622:	697b      	ldr	r3, [r7, #20]
 8017624:	681b      	ldr	r3, [r3, #0]
 8017626:	617b      	str	r3, [r7, #20]
 8017628:	697b      	ldr	r3, [r7, #20]
 801762a:	2b00      	cmp	r3, #0
 801762c:	d1e1      	bne.n	80175f2 <sys_timeout_abs+0x86>
 801762e:	e000      	b.n	8017632 <sys_timeout_abs+0xc6>
    return;
 8017630:	bf00      	nop
      }
    }
  }
}
 8017632:	3718      	adds	r7, #24
 8017634:	46bd      	mov	sp, r7
 8017636:	bd80      	pop	{r7, pc}
 8017638:	080216d8 	.word	0x080216d8
 801763c:	0802170c 	.word	0x0802170c
 8017640:	0802174c 	.word	0x0802174c
 8017644:	200137e4 	.word	0x200137e4

08017648 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8017648:	b580      	push	{r7, lr}
 801764a:	b086      	sub	sp, #24
 801764c:	af00      	add	r7, sp, #0
 801764e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8017650:	687b      	ldr	r3, [r7, #4]
 8017652:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8017654:	697b      	ldr	r3, [r7, #20]
 8017656:	685b      	ldr	r3, [r3, #4]
 8017658:	4798      	blx	r3

  now = sys_now();
 801765a:	f7f4 fd07 	bl	800c06c <sys_now>
 801765e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8017660:	697b      	ldr	r3, [r7, #20]
 8017662:	681a      	ldr	r2, [r3, #0]
 8017664:	4b0f      	ldr	r3, [pc, #60]	; (80176a4 <lwip_cyclic_timer+0x5c>)
 8017666:	681b      	ldr	r3, [r3, #0]
 8017668:	4413      	add	r3, r2
 801766a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801766c:	68fa      	ldr	r2, [r7, #12]
 801766e:	693b      	ldr	r3, [r7, #16]
 8017670:	1ad3      	subs	r3, r2, r3
 8017672:	0fdb      	lsrs	r3, r3, #31
 8017674:	f003 0301 	and.w	r3, r3, #1
 8017678:	b2db      	uxtb	r3, r3
 801767a:	2b00      	cmp	r3, #0
 801767c:	d009      	beq.n	8017692 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801767e:	697b      	ldr	r3, [r7, #20]
 8017680:	681a      	ldr	r2, [r3, #0]
 8017682:	693b      	ldr	r3, [r7, #16]
 8017684:	4413      	add	r3, r2
 8017686:	687a      	ldr	r2, [r7, #4]
 8017688:	4907      	ldr	r1, [pc, #28]	; (80176a8 <lwip_cyclic_timer+0x60>)
 801768a:	4618      	mov	r0, r3
 801768c:	f7ff ff6e 	bl	801756c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8017690:	e004      	b.n	801769c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8017692:	687a      	ldr	r2, [r7, #4]
 8017694:	4904      	ldr	r1, [pc, #16]	; (80176a8 <lwip_cyclic_timer+0x60>)
 8017696:	68f8      	ldr	r0, [r7, #12]
 8017698:	f7ff ff68 	bl	801756c <sys_timeout_abs>
}
 801769c:	bf00      	nop
 801769e:	3718      	adds	r7, #24
 80176a0:	46bd      	mov	sp, r7
 80176a2:	bd80      	pop	{r7, pc}
 80176a4:	200137e8 	.word	0x200137e8
 80176a8:	08017649 	.word	0x08017649

080176ac <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80176ac:	b580      	push	{r7, lr}
 80176ae:	b082      	sub	sp, #8
 80176b0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80176b2:	2301      	movs	r3, #1
 80176b4:	607b      	str	r3, [r7, #4]
 80176b6:	e00e      	b.n	80176d6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80176b8:	4a0b      	ldr	r2, [pc, #44]	; (80176e8 <sys_timeouts_init+0x3c>)
 80176ba:	687b      	ldr	r3, [r7, #4]
 80176bc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80176c0:	687b      	ldr	r3, [r7, #4]
 80176c2:	00db      	lsls	r3, r3, #3
 80176c4:	4a08      	ldr	r2, [pc, #32]	; (80176e8 <sys_timeouts_init+0x3c>)
 80176c6:	4413      	add	r3, r2
 80176c8:	461a      	mov	r2, r3
 80176ca:	4908      	ldr	r1, [pc, #32]	; (80176ec <sys_timeouts_init+0x40>)
 80176cc:	f000 f810 	bl	80176f0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80176d0:	687b      	ldr	r3, [r7, #4]
 80176d2:	3301      	adds	r3, #1
 80176d4:	607b      	str	r3, [r7, #4]
 80176d6:	687b      	ldr	r3, [r7, #4]
 80176d8:	2b04      	cmp	r3, #4
 80176da:	d9ed      	bls.n	80176b8 <sys_timeouts_init+0xc>
  }
}
 80176dc:	bf00      	nop
 80176de:	bf00      	nop
 80176e0:	3708      	adds	r7, #8
 80176e2:	46bd      	mov	sp, r7
 80176e4:	bd80      	pop	{r7, pc}
 80176e6:	bf00      	nop
 80176e8:	08022760 	.word	0x08022760
 80176ec:	08017649 	.word	0x08017649

080176f0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80176f0:	b580      	push	{r7, lr}
 80176f2:	b086      	sub	sp, #24
 80176f4:	af00      	add	r7, sp, #0
 80176f6:	60f8      	str	r0, [r7, #12]
 80176f8:	60b9      	str	r1, [r7, #8]
 80176fa:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80176fc:	68fb      	ldr	r3, [r7, #12]
 80176fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8017702:	d306      	bcc.n	8017712 <sys_timeout+0x22>
 8017704:	4b0a      	ldr	r3, [pc, #40]	; (8017730 <sys_timeout+0x40>)
 8017706:	f240 1229 	movw	r2, #297	; 0x129
 801770a:	490a      	ldr	r1, [pc, #40]	; (8017734 <sys_timeout+0x44>)
 801770c:	480a      	ldr	r0, [pc, #40]	; (8017738 <sys_timeout+0x48>)
 801770e:	f005 feb7 	bl	801d480 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8017712:	f7f4 fcab 	bl	800c06c <sys_now>
 8017716:	4602      	mov	r2, r0
 8017718:	68fb      	ldr	r3, [r7, #12]
 801771a:	4413      	add	r3, r2
 801771c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801771e:	687a      	ldr	r2, [r7, #4]
 8017720:	68b9      	ldr	r1, [r7, #8]
 8017722:	6978      	ldr	r0, [r7, #20]
 8017724:	f7ff ff22 	bl	801756c <sys_timeout_abs>
#endif
}
 8017728:	bf00      	nop
 801772a:	3718      	adds	r7, #24
 801772c:	46bd      	mov	sp, r7
 801772e:	bd80      	pop	{r7, pc}
 8017730:	080216d8 	.word	0x080216d8
 8017734:	08021774 	.word	0x08021774
 8017738:	0802174c 	.word	0x0802174c

0801773c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801773c:	b580      	push	{r7, lr}
 801773e:	b084      	sub	sp, #16
 8017740:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8017742:	f7f4 fc93 	bl	800c06c <sys_now>
 8017746:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8017748:	4b17      	ldr	r3, [pc, #92]	; (80177a8 <sys_check_timeouts+0x6c>)
 801774a:	681b      	ldr	r3, [r3, #0]
 801774c:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801774e:	68bb      	ldr	r3, [r7, #8]
 8017750:	2b00      	cmp	r3, #0
 8017752:	d022      	beq.n	801779a <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8017754:	68bb      	ldr	r3, [r7, #8]
 8017756:	685b      	ldr	r3, [r3, #4]
 8017758:	68fa      	ldr	r2, [r7, #12]
 801775a:	1ad3      	subs	r3, r2, r3
 801775c:	0fdb      	lsrs	r3, r3, #31
 801775e:	f003 0301 	and.w	r3, r3, #1
 8017762:	b2db      	uxtb	r3, r3
 8017764:	2b00      	cmp	r3, #0
 8017766:	d11a      	bne.n	801779e <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8017768:	68bb      	ldr	r3, [r7, #8]
 801776a:	681b      	ldr	r3, [r3, #0]
 801776c:	4a0e      	ldr	r2, [pc, #56]	; (80177a8 <sys_check_timeouts+0x6c>)
 801776e:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8017770:	68bb      	ldr	r3, [r7, #8]
 8017772:	689b      	ldr	r3, [r3, #8]
 8017774:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8017776:	68bb      	ldr	r3, [r7, #8]
 8017778:	68db      	ldr	r3, [r3, #12]
 801777a:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801777c:	68bb      	ldr	r3, [r7, #8]
 801777e:	685b      	ldr	r3, [r3, #4]
 8017780:	4a0a      	ldr	r2, [pc, #40]	; (80177ac <sys_check_timeouts+0x70>)
 8017782:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8017784:	68b9      	ldr	r1, [r7, #8]
 8017786:	200a      	movs	r0, #10
 8017788:	f7f9 fc1a 	bl	8010fc0 <memp_free>
    if (handler != NULL) {
 801778c:	687b      	ldr	r3, [r7, #4]
 801778e:	2b00      	cmp	r3, #0
 8017790:	d0da      	beq.n	8017748 <sys_check_timeouts+0xc>
      handler(arg);
 8017792:	687b      	ldr	r3, [r7, #4]
 8017794:	6838      	ldr	r0, [r7, #0]
 8017796:	4798      	blx	r3
  do {
 8017798:	e7d6      	b.n	8017748 <sys_check_timeouts+0xc>
      return;
 801779a:	bf00      	nop
 801779c:	e000      	b.n	80177a0 <sys_check_timeouts+0x64>
      return;
 801779e:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80177a0:	3710      	adds	r7, #16
 80177a2:	46bd      	mov	sp, r7
 80177a4:	bd80      	pop	{r7, pc}
 80177a6:	bf00      	nop
 80177a8:	200137e4 	.word	0x200137e4
 80177ac:	200137e8 	.word	0x200137e8

080177b0 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 80177b0:	b580      	push	{r7, lr}
 80177b2:	b082      	sub	sp, #8
 80177b4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 80177b6:	4b16      	ldr	r3, [pc, #88]	; (8017810 <sys_timeouts_sleeptime+0x60>)
 80177b8:	681b      	ldr	r3, [r3, #0]
 80177ba:	2b00      	cmp	r3, #0
 80177bc:	d102      	bne.n	80177c4 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 80177be:	f04f 33ff 	mov.w	r3, #4294967295
 80177c2:	e020      	b.n	8017806 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 80177c4:	f7f4 fc52 	bl	800c06c <sys_now>
 80177c8:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 80177ca:	4b11      	ldr	r3, [pc, #68]	; (8017810 <sys_timeouts_sleeptime+0x60>)
 80177cc:	681b      	ldr	r3, [r3, #0]
 80177ce:	685a      	ldr	r2, [r3, #4]
 80177d0:	687b      	ldr	r3, [r7, #4]
 80177d2:	1ad3      	subs	r3, r2, r3
 80177d4:	0fdb      	lsrs	r3, r3, #31
 80177d6:	f003 0301 	and.w	r3, r3, #1
 80177da:	b2db      	uxtb	r3, r3
 80177dc:	2b00      	cmp	r3, #0
 80177de:	d001      	beq.n	80177e4 <sys_timeouts_sleeptime+0x34>
    return 0;
 80177e0:	2300      	movs	r3, #0
 80177e2:	e010      	b.n	8017806 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 80177e4:	4b0a      	ldr	r3, [pc, #40]	; (8017810 <sys_timeouts_sleeptime+0x60>)
 80177e6:	681b      	ldr	r3, [r3, #0]
 80177e8:	685a      	ldr	r2, [r3, #4]
 80177ea:	687b      	ldr	r3, [r7, #4]
 80177ec:	1ad3      	subs	r3, r2, r3
 80177ee:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 80177f0:	683b      	ldr	r3, [r7, #0]
 80177f2:	2b00      	cmp	r3, #0
 80177f4:	da06      	bge.n	8017804 <sys_timeouts_sleeptime+0x54>
 80177f6:	4b07      	ldr	r3, [pc, #28]	; (8017814 <sys_timeouts_sleeptime+0x64>)
 80177f8:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80177fc:	4906      	ldr	r1, [pc, #24]	; (8017818 <sys_timeouts_sleeptime+0x68>)
 80177fe:	4807      	ldr	r0, [pc, #28]	; (801781c <sys_timeouts_sleeptime+0x6c>)
 8017800:	f005 fe3e 	bl	801d480 <iprintf>
    return ret;
 8017804:	683b      	ldr	r3, [r7, #0]
  }
}
 8017806:	4618      	mov	r0, r3
 8017808:	3708      	adds	r7, #8
 801780a:	46bd      	mov	sp, r7
 801780c:	bd80      	pop	{r7, pc}
 801780e:	bf00      	nop
 8017810:	200137e4 	.word	0x200137e4
 8017814:	080216d8 	.word	0x080216d8
 8017818:	080217ac 	.word	0x080217ac
 801781c:	0802174c 	.word	0x0802174c

08017820 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8017820:	b580      	push	{r7, lr}
 8017822:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8017824:	f005 feba 	bl	801d59c <rand>
 8017828:	4603      	mov	r3, r0
 801782a:	b29b      	uxth	r3, r3
 801782c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8017830:	b29b      	uxth	r3, r3
 8017832:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8017836:	b29a      	uxth	r2, r3
 8017838:	4b01      	ldr	r3, [pc, #4]	; (8017840 <udp_init+0x20>)
 801783a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801783c:	bf00      	nop
 801783e:	bd80      	pop	{r7, pc}
 8017840:	1000001c 	.word	0x1000001c

08017844 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8017844:	b480      	push	{r7}
 8017846:	b083      	sub	sp, #12
 8017848:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801784a:	2300      	movs	r3, #0
 801784c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801784e:	4b17      	ldr	r3, [pc, #92]	; (80178ac <udp_new_port+0x68>)
 8017850:	881b      	ldrh	r3, [r3, #0]
 8017852:	1c5a      	adds	r2, r3, #1
 8017854:	b291      	uxth	r1, r2
 8017856:	4a15      	ldr	r2, [pc, #84]	; (80178ac <udp_new_port+0x68>)
 8017858:	8011      	strh	r1, [r2, #0]
 801785a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801785e:	4293      	cmp	r3, r2
 8017860:	d103      	bne.n	801786a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8017862:	4b12      	ldr	r3, [pc, #72]	; (80178ac <udp_new_port+0x68>)
 8017864:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8017868:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801786a:	4b11      	ldr	r3, [pc, #68]	; (80178b0 <udp_new_port+0x6c>)
 801786c:	681b      	ldr	r3, [r3, #0]
 801786e:	603b      	str	r3, [r7, #0]
 8017870:	e011      	b.n	8017896 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8017872:	683b      	ldr	r3, [r7, #0]
 8017874:	8a5a      	ldrh	r2, [r3, #18]
 8017876:	4b0d      	ldr	r3, [pc, #52]	; (80178ac <udp_new_port+0x68>)
 8017878:	881b      	ldrh	r3, [r3, #0]
 801787a:	429a      	cmp	r2, r3
 801787c:	d108      	bne.n	8017890 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801787e:	88fb      	ldrh	r3, [r7, #6]
 8017880:	3301      	adds	r3, #1
 8017882:	80fb      	strh	r3, [r7, #6]
 8017884:	88fb      	ldrh	r3, [r7, #6]
 8017886:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801788a:	d3e0      	bcc.n	801784e <udp_new_port+0xa>
        return 0;
 801788c:	2300      	movs	r3, #0
 801788e:	e007      	b.n	80178a0 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017890:	683b      	ldr	r3, [r7, #0]
 8017892:	68db      	ldr	r3, [r3, #12]
 8017894:	603b      	str	r3, [r7, #0]
 8017896:	683b      	ldr	r3, [r7, #0]
 8017898:	2b00      	cmp	r3, #0
 801789a:	d1ea      	bne.n	8017872 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801789c:	4b03      	ldr	r3, [pc, #12]	; (80178ac <udp_new_port+0x68>)
 801789e:	881b      	ldrh	r3, [r3, #0]
}
 80178a0:	4618      	mov	r0, r3
 80178a2:	370c      	adds	r7, #12
 80178a4:	46bd      	mov	sp, r7
 80178a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178aa:	4770      	bx	lr
 80178ac:	1000001c 	.word	0x1000001c
 80178b0:	2001b7f0 	.word	0x2001b7f0

080178b4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80178b4:	b580      	push	{r7, lr}
 80178b6:	b084      	sub	sp, #16
 80178b8:	af00      	add	r7, sp, #0
 80178ba:	60f8      	str	r0, [r7, #12]
 80178bc:	60b9      	str	r1, [r7, #8]
 80178be:	4613      	mov	r3, r2
 80178c0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80178c2:	68fb      	ldr	r3, [r7, #12]
 80178c4:	2b00      	cmp	r3, #0
 80178c6:	d105      	bne.n	80178d4 <udp_input_local_match+0x20>
 80178c8:	4b27      	ldr	r3, [pc, #156]	; (8017968 <udp_input_local_match+0xb4>)
 80178ca:	2287      	movs	r2, #135	; 0x87
 80178cc:	4927      	ldr	r1, [pc, #156]	; (801796c <udp_input_local_match+0xb8>)
 80178ce:	4828      	ldr	r0, [pc, #160]	; (8017970 <udp_input_local_match+0xbc>)
 80178d0:	f005 fdd6 	bl	801d480 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80178d4:	68bb      	ldr	r3, [r7, #8]
 80178d6:	2b00      	cmp	r3, #0
 80178d8:	d105      	bne.n	80178e6 <udp_input_local_match+0x32>
 80178da:	4b23      	ldr	r3, [pc, #140]	; (8017968 <udp_input_local_match+0xb4>)
 80178dc:	2288      	movs	r2, #136	; 0x88
 80178de:	4925      	ldr	r1, [pc, #148]	; (8017974 <udp_input_local_match+0xc0>)
 80178e0:	4823      	ldr	r0, [pc, #140]	; (8017970 <udp_input_local_match+0xbc>)
 80178e2:	f005 fdcd 	bl	801d480 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80178e6:	68fb      	ldr	r3, [r7, #12]
 80178e8:	7a1b      	ldrb	r3, [r3, #8]
 80178ea:	2b00      	cmp	r3, #0
 80178ec:	d00b      	beq.n	8017906 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80178ee:	68fb      	ldr	r3, [r7, #12]
 80178f0:	7a1a      	ldrb	r2, [r3, #8]
 80178f2:	4b21      	ldr	r3, [pc, #132]	; (8017978 <udp_input_local_match+0xc4>)
 80178f4:	685b      	ldr	r3, [r3, #4]
 80178f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80178fa:	3301      	adds	r3, #1
 80178fc:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80178fe:	429a      	cmp	r2, r3
 8017900:	d001      	beq.n	8017906 <udp_input_local_match+0x52>
    return 0;
 8017902:	2300      	movs	r3, #0
 8017904:	e02b      	b.n	801795e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8017906:	79fb      	ldrb	r3, [r7, #7]
 8017908:	2b00      	cmp	r3, #0
 801790a:	d018      	beq.n	801793e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801790c:	68fb      	ldr	r3, [r7, #12]
 801790e:	2b00      	cmp	r3, #0
 8017910:	d013      	beq.n	801793a <udp_input_local_match+0x86>
 8017912:	68fb      	ldr	r3, [r7, #12]
 8017914:	681b      	ldr	r3, [r3, #0]
 8017916:	2b00      	cmp	r3, #0
 8017918:	d00f      	beq.n	801793a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801791a:	4b17      	ldr	r3, [pc, #92]	; (8017978 <udp_input_local_match+0xc4>)
 801791c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801791e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017922:	d00a      	beq.n	801793a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8017924:	68fb      	ldr	r3, [r7, #12]
 8017926:	681a      	ldr	r2, [r3, #0]
 8017928:	4b13      	ldr	r3, [pc, #76]	; (8017978 <udp_input_local_match+0xc4>)
 801792a:	695b      	ldr	r3, [r3, #20]
 801792c:	405a      	eors	r2, r3
 801792e:	68bb      	ldr	r3, [r7, #8]
 8017930:	3308      	adds	r3, #8
 8017932:	681b      	ldr	r3, [r3, #0]
 8017934:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8017936:	2b00      	cmp	r3, #0
 8017938:	d110      	bne.n	801795c <udp_input_local_match+0xa8>
          return 1;
 801793a:	2301      	movs	r3, #1
 801793c:	e00f      	b.n	801795e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801793e:	68fb      	ldr	r3, [r7, #12]
 8017940:	2b00      	cmp	r3, #0
 8017942:	d009      	beq.n	8017958 <udp_input_local_match+0xa4>
 8017944:	68fb      	ldr	r3, [r7, #12]
 8017946:	681b      	ldr	r3, [r3, #0]
 8017948:	2b00      	cmp	r3, #0
 801794a:	d005      	beq.n	8017958 <udp_input_local_match+0xa4>
 801794c:	68fb      	ldr	r3, [r7, #12]
 801794e:	681a      	ldr	r2, [r3, #0]
 8017950:	4b09      	ldr	r3, [pc, #36]	; (8017978 <udp_input_local_match+0xc4>)
 8017952:	695b      	ldr	r3, [r3, #20]
 8017954:	429a      	cmp	r2, r3
 8017956:	d101      	bne.n	801795c <udp_input_local_match+0xa8>
        return 1;
 8017958:	2301      	movs	r3, #1
 801795a:	e000      	b.n	801795e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801795c:	2300      	movs	r3, #0
}
 801795e:	4618      	mov	r0, r3
 8017960:	3710      	adds	r7, #16
 8017962:	46bd      	mov	sp, r7
 8017964:	bd80      	pop	{r7, pc}
 8017966:	bf00      	nop
 8017968:	080217c0 	.word	0x080217c0
 801796c:	080217f0 	.word	0x080217f0
 8017970:	08021814 	.word	0x08021814
 8017974:	0802183c 	.word	0x0802183c
 8017978:	200172e4 	.word	0x200172e4

0801797c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801797c:	b590      	push	{r4, r7, lr}
 801797e:	b08d      	sub	sp, #52	; 0x34
 8017980:	af02      	add	r7, sp, #8
 8017982:	6078      	str	r0, [r7, #4]
 8017984:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8017986:	2300      	movs	r3, #0
 8017988:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801798a:	687b      	ldr	r3, [r7, #4]
 801798c:	2b00      	cmp	r3, #0
 801798e:	d105      	bne.n	801799c <udp_input+0x20>
 8017990:	4b7c      	ldr	r3, [pc, #496]	; (8017b84 <udp_input+0x208>)
 8017992:	22cf      	movs	r2, #207	; 0xcf
 8017994:	497c      	ldr	r1, [pc, #496]	; (8017b88 <udp_input+0x20c>)
 8017996:	487d      	ldr	r0, [pc, #500]	; (8017b8c <udp_input+0x210>)
 8017998:	f005 fd72 	bl	801d480 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801799c:	683b      	ldr	r3, [r7, #0]
 801799e:	2b00      	cmp	r3, #0
 80179a0:	d105      	bne.n	80179ae <udp_input+0x32>
 80179a2:	4b78      	ldr	r3, [pc, #480]	; (8017b84 <udp_input+0x208>)
 80179a4:	22d0      	movs	r2, #208	; 0xd0
 80179a6:	497a      	ldr	r1, [pc, #488]	; (8017b90 <udp_input+0x214>)
 80179a8:	4878      	ldr	r0, [pc, #480]	; (8017b8c <udp_input+0x210>)
 80179aa:	f005 fd69 	bl	801d480 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80179ae:	687b      	ldr	r3, [r7, #4]
 80179b0:	895b      	ldrh	r3, [r3, #10]
 80179b2:	2b07      	cmp	r3, #7
 80179b4:	d803      	bhi.n	80179be <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80179b6:	6878      	ldr	r0, [r7, #4]
 80179b8:	f7fa f9b2 	bl	8011d20 <pbuf_free>
    goto end;
 80179bc:	e0de      	b.n	8017b7c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80179be:	687b      	ldr	r3, [r7, #4]
 80179c0:	685b      	ldr	r3, [r3, #4]
 80179c2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80179c4:	4b73      	ldr	r3, [pc, #460]	; (8017b94 <udp_input+0x218>)
 80179c6:	695b      	ldr	r3, [r3, #20]
 80179c8:	4a72      	ldr	r2, [pc, #456]	; (8017b94 <udp_input+0x218>)
 80179ca:	6812      	ldr	r2, [r2, #0]
 80179cc:	4611      	mov	r1, r2
 80179ce:	4618      	mov	r0, r3
 80179d0:	f003 fe06 	bl	801b5e0 <ip4_addr_isbroadcast_u32>
 80179d4:	4603      	mov	r3, r0
 80179d6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80179d8:	697b      	ldr	r3, [r7, #20]
 80179da:	881b      	ldrh	r3, [r3, #0]
 80179dc:	b29b      	uxth	r3, r3
 80179de:	4618      	mov	r0, r3
 80179e0:	f7f8 fde6 	bl	80105b0 <lwip_htons>
 80179e4:	4603      	mov	r3, r0
 80179e6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80179e8:	697b      	ldr	r3, [r7, #20]
 80179ea:	885b      	ldrh	r3, [r3, #2]
 80179ec:	b29b      	uxth	r3, r3
 80179ee:	4618      	mov	r0, r3
 80179f0:	f7f8 fdde 	bl	80105b0 <lwip_htons>
 80179f4:	4603      	mov	r3, r0
 80179f6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80179f8:	2300      	movs	r3, #0
 80179fa:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80179fc:	2300      	movs	r3, #0
 80179fe:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8017a00:	2300      	movs	r3, #0
 8017a02:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017a04:	4b64      	ldr	r3, [pc, #400]	; (8017b98 <udp_input+0x21c>)
 8017a06:	681b      	ldr	r3, [r3, #0]
 8017a08:	627b      	str	r3, [r7, #36]	; 0x24
 8017a0a:	e054      	b.n	8017ab6 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8017a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a0e:	8a5b      	ldrh	r3, [r3, #18]
 8017a10:	89fa      	ldrh	r2, [r7, #14]
 8017a12:	429a      	cmp	r2, r3
 8017a14:	d14a      	bne.n	8017aac <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8017a16:	7cfb      	ldrb	r3, [r7, #19]
 8017a18:	461a      	mov	r2, r3
 8017a1a:	6839      	ldr	r1, [r7, #0]
 8017a1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017a1e:	f7ff ff49 	bl	80178b4 <udp_input_local_match>
 8017a22:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8017a24:	2b00      	cmp	r3, #0
 8017a26:	d041      	beq.n	8017aac <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8017a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a2a:	7c1b      	ldrb	r3, [r3, #16]
 8017a2c:	f003 0304 	and.w	r3, r3, #4
 8017a30:	2b00      	cmp	r3, #0
 8017a32:	d11d      	bne.n	8017a70 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8017a34:	69fb      	ldr	r3, [r7, #28]
 8017a36:	2b00      	cmp	r3, #0
 8017a38:	d102      	bne.n	8017a40 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8017a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a3c:	61fb      	str	r3, [r7, #28]
 8017a3e:	e017      	b.n	8017a70 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8017a40:	7cfb      	ldrb	r3, [r7, #19]
 8017a42:	2b00      	cmp	r3, #0
 8017a44:	d014      	beq.n	8017a70 <udp_input+0xf4>
 8017a46:	4b53      	ldr	r3, [pc, #332]	; (8017b94 <udp_input+0x218>)
 8017a48:	695b      	ldr	r3, [r3, #20]
 8017a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017a4e:	d10f      	bne.n	8017a70 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8017a50:	69fb      	ldr	r3, [r7, #28]
 8017a52:	681a      	ldr	r2, [r3, #0]
 8017a54:	683b      	ldr	r3, [r7, #0]
 8017a56:	3304      	adds	r3, #4
 8017a58:	681b      	ldr	r3, [r3, #0]
 8017a5a:	429a      	cmp	r2, r3
 8017a5c:	d008      	beq.n	8017a70 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8017a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a60:	681a      	ldr	r2, [r3, #0]
 8017a62:	683b      	ldr	r3, [r7, #0]
 8017a64:	3304      	adds	r3, #4
 8017a66:	681b      	ldr	r3, [r3, #0]
 8017a68:	429a      	cmp	r2, r3
 8017a6a:	d101      	bne.n	8017a70 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8017a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a6e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8017a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a72:	8a9b      	ldrh	r3, [r3, #20]
 8017a74:	8a3a      	ldrh	r2, [r7, #16]
 8017a76:	429a      	cmp	r2, r3
 8017a78:	d118      	bne.n	8017aac <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8017a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a7c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8017a7e:	2b00      	cmp	r3, #0
 8017a80:	d005      	beq.n	8017a8e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8017a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a84:	685a      	ldr	r2, [r3, #4]
 8017a86:	4b43      	ldr	r3, [pc, #268]	; (8017b94 <udp_input+0x218>)
 8017a88:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8017a8a:	429a      	cmp	r2, r3
 8017a8c:	d10e      	bne.n	8017aac <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8017a8e:	6a3b      	ldr	r3, [r7, #32]
 8017a90:	2b00      	cmp	r3, #0
 8017a92:	d014      	beq.n	8017abe <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8017a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a96:	68da      	ldr	r2, [r3, #12]
 8017a98:	6a3b      	ldr	r3, [r7, #32]
 8017a9a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8017a9c:	4b3e      	ldr	r3, [pc, #248]	; (8017b98 <udp_input+0x21c>)
 8017a9e:	681a      	ldr	r2, [r3, #0]
 8017aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017aa2:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8017aa4:	4a3c      	ldr	r2, [pc, #240]	; (8017b98 <udp_input+0x21c>)
 8017aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017aa8:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8017aaa:	e008      	b.n	8017abe <udp_input+0x142>
      }
    }

    prev = pcb;
 8017aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017aae:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ab2:	68db      	ldr	r3, [r3, #12]
 8017ab4:	627b      	str	r3, [r7, #36]	; 0x24
 8017ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ab8:	2b00      	cmp	r3, #0
 8017aba:	d1a7      	bne.n	8017a0c <udp_input+0x90>
 8017abc:	e000      	b.n	8017ac0 <udp_input+0x144>
        break;
 8017abe:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8017ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ac2:	2b00      	cmp	r3, #0
 8017ac4:	d101      	bne.n	8017aca <udp_input+0x14e>
    pcb = uncon_pcb;
 8017ac6:	69fb      	ldr	r3, [r7, #28]
 8017ac8:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8017aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017acc:	2b00      	cmp	r3, #0
 8017ace:	d002      	beq.n	8017ad6 <udp_input+0x15a>
    for_us = 1;
 8017ad0:	2301      	movs	r3, #1
 8017ad2:	76fb      	strb	r3, [r7, #27]
 8017ad4:	e00a      	b.n	8017aec <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8017ad6:	683b      	ldr	r3, [r7, #0]
 8017ad8:	3304      	adds	r3, #4
 8017ada:	681a      	ldr	r2, [r3, #0]
 8017adc:	4b2d      	ldr	r3, [pc, #180]	; (8017b94 <udp_input+0x218>)
 8017ade:	695b      	ldr	r3, [r3, #20]
 8017ae0:	429a      	cmp	r2, r3
 8017ae2:	bf0c      	ite	eq
 8017ae4:	2301      	moveq	r3, #1
 8017ae6:	2300      	movne	r3, #0
 8017ae8:	b2db      	uxtb	r3, r3
 8017aea:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8017aec:	7efb      	ldrb	r3, [r7, #27]
 8017aee:	2b00      	cmp	r3, #0
 8017af0:	d041      	beq.n	8017b76 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8017af2:	2108      	movs	r1, #8
 8017af4:	6878      	ldr	r0, [r7, #4]
 8017af6:	f7fa f88d 	bl	8011c14 <pbuf_remove_header>
 8017afa:	4603      	mov	r3, r0
 8017afc:	2b00      	cmp	r3, #0
 8017afe:	d00a      	beq.n	8017b16 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8017b00:	4b20      	ldr	r3, [pc, #128]	; (8017b84 <udp_input+0x208>)
 8017b02:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8017b06:	4925      	ldr	r1, [pc, #148]	; (8017b9c <udp_input+0x220>)
 8017b08:	4820      	ldr	r0, [pc, #128]	; (8017b8c <udp_input+0x210>)
 8017b0a:	f005 fcb9 	bl	801d480 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8017b0e:	6878      	ldr	r0, [r7, #4]
 8017b10:	f7fa f906 	bl	8011d20 <pbuf_free>
      goto end;
 8017b14:	e032      	b.n	8017b7c <udp_input+0x200>
    }

    if (pcb != NULL) {
 8017b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b18:	2b00      	cmp	r3, #0
 8017b1a:	d012      	beq.n	8017b42 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8017b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b1e:	699b      	ldr	r3, [r3, #24]
 8017b20:	2b00      	cmp	r3, #0
 8017b22:	d00a      	beq.n	8017b3a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8017b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b26:	699c      	ldr	r4, [r3, #24]
 8017b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b2a:	69d8      	ldr	r0, [r3, #28]
 8017b2c:	8a3b      	ldrh	r3, [r7, #16]
 8017b2e:	9300      	str	r3, [sp, #0]
 8017b30:	4b1b      	ldr	r3, [pc, #108]	; (8017ba0 <udp_input+0x224>)
 8017b32:	687a      	ldr	r2, [r7, #4]
 8017b34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017b36:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8017b38:	e021      	b.n	8017b7e <udp_input+0x202>
        pbuf_free(p);
 8017b3a:	6878      	ldr	r0, [r7, #4]
 8017b3c:	f7fa f8f0 	bl	8011d20 <pbuf_free>
        goto end;
 8017b40:	e01c      	b.n	8017b7c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8017b42:	7cfb      	ldrb	r3, [r7, #19]
 8017b44:	2b00      	cmp	r3, #0
 8017b46:	d112      	bne.n	8017b6e <udp_input+0x1f2>
 8017b48:	4b12      	ldr	r3, [pc, #72]	; (8017b94 <udp_input+0x218>)
 8017b4a:	695b      	ldr	r3, [r3, #20]
 8017b4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017b50:	2be0      	cmp	r3, #224	; 0xe0
 8017b52:	d00c      	beq.n	8017b6e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8017b54:	4b0f      	ldr	r3, [pc, #60]	; (8017b94 <udp_input+0x218>)
 8017b56:	899b      	ldrh	r3, [r3, #12]
 8017b58:	3308      	adds	r3, #8
 8017b5a:	b29b      	uxth	r3, r3
 8017b5c:	b21b      	sxth	r3, r3
 8017b5e:	4619      	mov	r1, r3
 8017b60:	6878      	ldr	r0, [r7, #4]
 8017b62:	f7fa f8ca 	bl	8011cfa <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8017b66:	2103      	movs	r1, #3
 8017b68:	6878      	ldr	r0, [r7, #4]
 8017b6a:	f003 f9fb 	bl	801af64 <icmp_dest_unreach>
      pbuf_free(p);
 8017b6e:	6878      	ldr	r0, [r7, #4]
 8017b70:	f7fa f8d6 	bl	8011d20 <pbuf_free>
  return;
 8017b74:	e003      	b.n	8017b7e <udp_input+0x202>
    pbuf_free(p);
 8017b76:	6878      	ldr	r0, [r7, #4]
 8017b78:	f7fa f8d2 	bl	8011d20 <pbuf_free>
  return;
 8017b7c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8017b7e:	372c      	adds	r7, #44	; 0x2c
 8017b80:	46bd      	mov	sp, r7
 8017b82:	bd90      	pop	{r4, r7, pc}
 8017b84:	080217c0 	.word	0x080217c0
 8017b88:	08021864 	.word	0x08021864
 8017b8c:	08021814 	.word	0x08021814
 8017b90:	0802187c 	.word	0x0802187c
 8017b94:	200172e4 	.word	0x200172e4
 8017b98:	2001b7f0 	.word	0x2001b7f0
 8017b9c:	08021898 	.word	0x08021898
 8017ba0:	200172f4 	.word	0x200172f4

08017ba4 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8017ba4:	b580      	push	{r7, lr}
 8017ba6:	b088      	sub	sp, #32
 8017ba8:	af02      	add	r7, sp, #8
 8017baa:	60f8      	str	r0, [r7, #12]
 8017bac:	60b9      	str	r1, [r7, #8]
 8017bae:	607a      	str	r2, [r7, #4]
 8017bb0:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8017bb2:	68fb      	ldr	r3, [r7, #12]
 8017bb4:	2b00      	cmp	r3, #0
 8017bb6:	d109      	bne.n	8017bcc <udp_sendto_if+0x28>
 8017bb8:	4b2e      	ldr	r3, [pc, #184]	; (8017c74 <udp_sendto_if+0xd0>)
 8017bba:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017bbe:	492e      	ldr	r1, [pc, #184]	; (8017c78 <udp_sendto_if+0xd4>)
 8017bc0:	482e      	ldr	r0, [pc, #184]	; (8017c7c <udp_sendto_if+0xd8>)
 8017bc2:	f005 fc5d 	bl	801d480 <iprintf>
 8017bc6:	f06f 030f 	mvn.w	r3, #15
 8017bca:	e04f      	b.n	8017c6c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8017bcc:	68bb      	ldr	r3, [r7, #8]
 8017bce:	2b00      	cmp	r3, #0
 8017bd0:	d109      	bne.n	8017be6 <udp_sendto_if+0x42>
 8017bd2:	4b28      	ldr	r3, [pc, #160]	; (8017c74 <udp_sendto_if+0xd0>)
 8017bd4:	f240 2281 	movw	r2, #641	; 0x281
 8017bd8:	4929      	ldr	r1, [pc, #164]	; (8017c80 <udp_sendto_if+0xdc>)
 8017bda:	4828      	ldr	r0, [pc, #160]	; (8017c7c <udp_sendto_if+0xd8>)
 8017bdc:	f005 fc50 	bl	801d480 <iprintf>
 8017be0:	f06f 030f 	mvn.w	r3, #15
 8017be4:	e042      	b.n	8017c6c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8017be6:	687b      	ldr	r3, [r7, #4]
 8017be8:	2b00      	cmp	r3, #0
 8017bea:	d109      	bne.n	8017c00 <udp_sendto_if+0x5c>
 8017bec:	4b21      	ldr	r3, [pc, #132]	; (8017c74 <udp_sendto_if+0xd0>)
 8017bee:	f240 2282 	movw	r2, #642	; 0x282
 8017bf2:	4924      	ldr	r1, [pc, #144]	; (8017c84 <udp_sendto_if+0xe0>)
 8017bf4:	4821      	ldr	r0, [pc, #132]	; (8017c7c <udp_sendto_if+0xd8>)
 8017bf6:	f005 fc43 	bl	801d480 <iprintf>
 8017bfa:	f06f 030f 	mvn.w	r3, #15
 8017bfe:	e035      	b.n	8017c6c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8017c00:	6a3b      	ldr	r3, [r7, #32]
 8017c02:	2b00      	cmp	r3, #0
 8017c04:	d109      	bne.n	8017c1a <udp_sendto_if+0x76>
 8017c06:	4b1b      	ldr	r3, [pc, #108]	; (8017c74 <udp_sendto_if+0xd0>)
 8017c08:	f240 2283 	movw	r2, #643	; 0x283
 8017c0c:	491e      	ldr	r1, [pc, #120]	; (8017c88 <udp_sendto_if+0xe4>)
 8017c0e:	481b      	ldr	r0, [pc, #108]	; (8017c7c <udp_sendto_if+0xd8>)
 8017c10:	f005 fc36 	bl	801d480 <iprintf>
 8017c14:	f06f 030f 	mvn.w	r3, #15
 8017c18:	e028      	b.n	8017c6c <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8017c1a:	68fb      	ldr	r3, [r7, #12]
 8017c1c:	2b00      	cmp	r3, #0
 8017c1e:	d009      	beq.n	8017c34 <udp_sendto_if+0x90>
 8017c20:	68fb      	ldr	r3, [r7, #12]
 8017c22:	681b      	ldr	r3, [r3, #0]
 8017c24:	2b00      	cmp	r3, #0
 8017c26:	d005      	beq.n	8017c34 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8017c28:	68fb      	ldr	r3, [r7, #12]
 8017c2a:	681b      	ldr	r3, [r3, #0]
 8017c2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8017c30:	2be0      	cmp	r3, #224	; 0xe0
 8017c32:	d103      	bne.n	8017c3c <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8017c34:	6a3b      	ldr	r3, [r7, #32]
 8017c36:	3304      	adds	r3, #4
 8017c38:	617b      	str	r3, [r7, #20]
 8017c3a:	e00b      	b.n	8017c54 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8017c3c:	68fb      	ldr	r3, [r7, #12]
 8017c3e:	681a      	ldr	r2, [r3, #0]
 8017c40:	6a3b      	ldr	r3, [r7, #32]
 8017c42:	3304      	adds	r3, #4
 8017c44:	681b      	ldr	r3, [r3, #0]
 8017c46:	429a      	cmp	r2, r3
 8017c48:	d002      	beq.n	8017c50 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8017c4a:	f06f 0303 	mvn.w	r3, #3
 8017c4e:	e00d      	b.n	8017c6c <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8017c50:	68fb      	ldr	r3, [r7, #12]
 8017c52:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8017c54:	887a      	ldrh	r2, [r7, #2]
 8017c56:	697b      	ldr	r3, [r7, #20]
 8017c58:	9301      	str	r3, [sp, #4]
 8017c5a:	6a3b      	ldr	r3, [r7, #32]
 8017c5c:	9300      	str	r3, [sp, #0]
 8017c5e:	4613      	mov	r3, r2
 8017c60:	687a      	ldr	r2, [r7, #4]
 8017c62:	68b9      	ldr	r1, [r7, #8]
 8017c64:	68f8      	ldr	r0, [r7, #12]
 8017c66:	f000 f811 	bl	8017c8c <udp_sendto_if_src>
 8017c6a:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8017c6c:	4618      	mov	r0, r3
 8017c6e:	3718      	adds	r7, #24
 8017c70:	46bd      	mov	sp, r7
 8017c72:	bd80      	pop	{r7, pc}
 8017c74:	080217c0 	.word	0x080217c0
 8017c78:	08021934 	.word	0x08021934
 8017c7c:	08021814 	.word	0x08021814
 8017c80:	08021950 	.word	0x08021950
 8017c84:	0802196c 	.word	0x0802196c
 8017c88:	0802198c 	.word	0x0802198c

08017c8c <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8017c8c:	b580      	push	{r7, lr}
 8017c8e:	b08c      	sub	sp, #48	; 0x30
 8017c90:	af04      	add	r7, sp, #16
 8017c92:	60f8      	str	r0, [r7, #12]
 8017c94:	60b9      	str	r1, [r7, #8]
 8017c96:	607a      	str	r2, [r7, #4]
 8017c98:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8017c9a:	68fb      	ldr	r3, [r7, #12]
 8017c9c:	2b00      	cmp	r3, #0
 8017c9e:	d109      	bne.n	8017cb4 <udp_sendto_if_src+0x28>
 8017ca0:	4b65      	ldr	r3, [pc, #404]	; (8017e38 <udp_sendto_if_src+0x1ac>)
 8017ca2:	f240 22d1 	movw	r2, #721	; 0x2d1
 8017ca6:	4965      	ldr	r1, [pc, #404]	; (8017e3c <udp_sendto_if_src+0x1b0>)
 8017ca8:	4865      	ldr	r0, [pc, #404]	; (8017e40 <udp_sendto_if_src+0x1b4>)
 8017caa:	f005 fbe9 	bl	801d480 <iprintf>
 8017cae:	f06f 030f 	mvn.w	r3, #15
 8017cb2:	e0bc      	b.n	8017e2e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8017cb4:	68bb      	ldr	r3, [r7, #8]
 8017cb6:	2b00      	cmp	r3, #0
 8017cb8:	d109      	bne.n	8017cce <udp_sendto_if_src+0x42>
 8017cba:	4b5f      	ldr	r3, [pc, #380]	; (8017e38 <udp_sendto_if_src+0x1ac>)
 8017cbc:	f240 22d2 	movw	r2, #722	; 0x2d2
 8017cc0:	4960      	ldr	r1, [pc, #384]	; (8017e44 <udp_sendto_if_src+0x1b8>)
 8017cc2:	485f      	ldr	r0, [pc, #380]	; (8017e40 <udp_sendto_if_src+0x1b4>)
 8017cc4:	f005 fbdc 	bl	801d480 <iprintf>
 8017cc8:	f06f 030f 	mvn.w	r3, #15
 8017ccc:	e0af      	b.n	8017e2e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8017cce:	687b      	ldr	r3, [r7, #4]
 8017cd0:	2b00      	cmp	r3, #0
 8017cd2:	d109      	bne.n	8017ce8 <udp_sendto_if_src+0x5c>
 8017cd4:	4b58      	ldr	r3, [pc, #352]	; (8017e38 <udp_sendto_if_src+0x1ac>)
 8017cd6:	f240 22d3 	movw	r2, #723	; 0x2d3
 8017cda:	495b      	ldr	r1, [pc, #364]	; (8017e48 <udp_sendto_if_src+0x1bc>)
 8017cdc:	4858      	ldr	r0, [pc, #352]	; (8017e40 <udp_sendto_if_src+0x1b4>)
 8017cde:	f005 fbcf 	bl	801d480 <iprintf>
 8017ce2:	f06f 030f 	mvn.w	r3, #15
 8017ce6:	e0a2      	b.n	8017e2e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8017ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017cea:	2b00      	cmp	r3, #0
 8017cec:	d109      	bne.n	8017d02 <udp_sendto_if_src+0x76>
 8017cee:	4b52      	ldr	r3, [pc, #328]	; (8017e38 <udp_sendto_if_src+0x1ac>)
 8017cf0:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8017cf4:	4955      	ldr	r1, [pc, #340]	; (8017e4c <udp_sendto_if_src+0x1c0>)
 8017cf6:	4852      	ldr	r0, [pc, #328]	; (8017e40 <udp_sendto_if_src+0x1b4>)
 8017cf8:	f005 fbc2 	bl	801d480 <iprintf>
 8017cfc:	f06f 030f 	mvn.w	r3, #15
 8017d00:	e095      	b.n	8017e2e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8017d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d04:	2b00      	cmp	r3, #0
 8017d06:	d109      	bne.n	8017d1c <udp_sendto_if_src+0x90>
 8017d08:	4b4b      	ldr	r3, [pc, #300]	; (8017e38 <udp_sendto_if_src+0x1ac>)
 8017d0a:	f240 22d5 	movw	r2, #725	; 0x2d5
 8017d0e:	4950      	ldr	r1, [pc, #320]	; (8017e50 <udp_sendto_if_src+0x1c4>)
 8017d10:	484b      	ldr	r0, [pc, #300]	; (8017e40 <udp_sendto_if_src+0x1b4>)
 8017d12:	f005 fbb5 	bl	801d480 <iprintf>
 8017d16:	f06f 030f 	mvn.w	r3, #15
 8017d1a:	e088      	b.n	8017e2e <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8017d1c:	68fb      	ldr	r3, [r7, #12]
 8017d1e:	8a5b      	ldrh	r3, [r3, #18]
 8017d20:	2b00      	cmp	r3, #0
 8017d22:	d10f      	bne.n	8017d44 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8017d24:	68f9      	ldr	r1, [r7, #12]
 8017d26:	68fb      	ldr	r3, [r7, #12]
 8017d28:	8a5b      	ldrh	r3, [r3, #18]
 8017d2a:	461a      	mov	r2, r3
 8017d2c:	68f8      	ldr	r0, [r7, #12]
 8017d2e:	f000 f893 	bl	8017e58 <udp_bind>
 8017d32:	4603      	mov	r3, r0
 8017d34:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8017d36:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8017d3a:	2b00      	cmp	r3, #0
 8017d3c:	d002      	beq.n	8017d44 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8017d3e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8017d42:	e074      	b.n	8017e2e <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8017d44:	68bb      	ldr	r3, [r7, #8]
 8017d46:	891b      	ldrh	r3, [r3, #8]
 8017d48:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8017d4c:	4293      	cmp	r3, r2
 8017d4e:	d902      	bls.n	8017d56 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8017d50:	f04f 33ff 	mov.w	r3, #4294967295
 8017d54:	e06b      	b.n	8017e2e <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8017d56:	2108      	movs	r1, #8
 8017d58:	68b8      	ldr	r0, [r7, #8]
 8017d5a:	f7f9 ff4b 	bl	8011bf4 <pbuf_add_header>
 8017d5e:	4603      	mov	r3, r0
 8017d60:	2b00      	cmp	r3, #0
 8017d62:	d015      	beq.n	8017d90 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8017d64:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017d68:	2108      	movs	r1, #8
 8017d6a:	2022      	movs	r0, #34	; 0x22
 8017d6c:	f7f9 fcf4 	bl	8011758 <pbuf_alloc>
 8017d70:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8017d72:	69fb      	ldr	r3, [r7, #28]
 8017d74:	2b00      	cmp	r3, #0
 8017d76:	d102      	bne.n	8017d7e <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8017d78:	f04f 33ff 	mov.w	r3, #4294967295
 8017d7c:	e057      	b.n	8017e2e <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8017d7e:	68bb      	ldr	r3, [r7, #8]
 8017d80:	891b      	ldrh	r3, [r3, #8]
 8017d82:	2b00      	cmp	r3, #0
 8017d84:	d006      	beq.n	8017d94 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8017d86:	68b9      	ldr	r1, [r7, #8]
 8017d88:	69f8      	ldr	r0, [r7, #28]
 8017d8a:	f7fa f8ed 	bl	8011f68 <pbuf_chain>
 8017d8e:	e001      	b.n	8017d94 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8017d90:	68bb      	ldr	r3, [r7, #8]
 8017d92:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8017d94:	69fb      	ldr	r3, [r7, #28]
 8017d96:	895b      	ldrh	r3, [r3, #10]
 8017d98:	2b07      	cmp	r3, #7
 8017d9a:	d806      	bhi.n	8017daa <udp_sendto_if_src+0x11e>
 8017d9c:	4b26      	ldr	r3, [pc, #152]	; (8017e38 <udp_sendto_if_src+0x1ac>)
 8017d9e:	f240 320d 	movw	r2, #781	; 0x30d
 8017da2:	492c      	ldr	r1, [pc, #176]	; (8017e54 <udp_sendto_if_src+0x1c8>)
 8017da4:	4826      	ldr	r0, [pc, #152]	; (8017e40 <udp_sendto_if_src+0x1b4>)
 8017da6:	f005 fb6b 	bl	801d480 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8017daa:	69fb      	ldr	r3, [r7, #28]
 8017dac:	685b      	ldr	r3, [r3, #4]
 8017dae:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8017db0:	68fb      	ldr	r3, [r7, #12]
 8017db2:	8a5b      	ldrh	r3, [r3, #18]
 8017db4:	4618      	mov	r0, r3
 8017db6:	f7f8 fbfb 	bl	80105b0 <lwip_htons>
 8017dba:	4603      	mov	r3, r0
 8017dbc:	461a      	mov	r2, r3
 8017dbe:	697b      	ldr	r3, [r7, #20]
 8017dc0:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8017dc2:	887b      	ldrh	r3, [r7, #2]
 8017dc4:	4618      	mov	r0, r3
 8017dc6:	f7f8 fbf3 	bl	80105b0 <lwip_htons>
 8017dca:	4603      	mov	r3, r0
 8017dcc:	461a      	mov	r2, r3
 8017dce:	697b      	ldr	r3, [r7, #20]
 8017dd0:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8017dd2:	697b      	ldr	r3, [r7, #20]
 8017dd4:	2200      	movs	r2, #0
 8017dd6:	719a      	strb	r2, [r3, #6]
 8017dd8:	2200      	movs	r2, #0
 8017dda:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8017ddc:	69fb      	ldr	r3, [r7, #28]
 8017dde:	891b      	ldrh	r3, [r3, #8]
 8017de0:	4618      	mov	r0, r3
 8017de2:	f7f8 fbe5 	bl	80105b0 <lwip_htons>
 8017de6:	4603      	mov	r3, r0
 8017de8:	461a      	mov	r2, r3
 8017dea:	697b      	ldr	r3, [r7, #20]
 8017dec:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8017dee:	2311      	movs	r3, #17
 8017df0:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8017df2:	68fb      	ldr	r3, [r7, #12]
 8017df4:	7adb      	ldrb	r3, [r3, #11]
 8017df6:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8017df8:	68fb      	ldr	r3, [r7, #12]
 8017dfa:	7a9b      	ldrb	r3, [r3, #10]
 8017dfc:	7cb9      	ldrb	r1, [r7, #18]
 8017dfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017e00:	9202      	str	r2, [sp, #8]
 8017e02:	7cfa      	ldrb	r2, [r7, #19]
 8017e04:	9201      	str	r2, [sp, #4]
 8017e06:	9300      	str	r3, [sp, #0]
 8017e08:	460b      	mov	r3, r1
 8017e0a:	687a      	ldr	r2, [r7, #4]
 8017e0c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017e0e:	69f8      	ldr	r0, [r7, #28]
 8017e10:	f003 fb38 	bl	801b484 <ip4_output_if_src>
 8017e14:	4603      	mov	r3, r0
 8017e16:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8017e18:	69fa      	ldr	r2, [r7, #28]
 8017e1a:	68bb      	ldr	r3, [r7, #8]
 8017e1c:	429a      	cmp	r2, r3
 8017e1e:	d004      	beq.n	8017e2a <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8017e20:	69f8      	ldr	r0, [r7, #28]
 8017e22:	f7f9 ff7d 	bl	8011d20 <pbuf_free>
    q = NULL;
 8017e26:	2300      	movs	r3, #0
 8017e28:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8017e2a:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8017e2e:	4618      	mov	r0, r3
 8017e30:	3720      	adds	r7, #32
 8017e32:	46bd      	mov	sp, r7
 8017e34:	bd80      	pop	{r7, pc}
 8017e36:	bf00      	nop
 8017e38:	080217c0 	.word	0x080217c0
 8017e3c:	080219ac 	.word	0x080219ac
 8017e40:	08021814 	.word	0x08021814
 8017e44:	080219cc 	.word	0x080219cc
 8017e48:	080219ec 	.word	0x080219ec
 8017e4c:	08021a10 	.word	0x08021a10
 8017e50:	08021a34 	.word	0x08021a34
 8017e54:	08021a58 	.word	0x08021a58

08017e58 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8017e58:	b580      	push	{r7, lr}
 8017e5a:	b086      	sub	sp, #24
 8017e5c:	af00      	add	r7, sp, #0
 8017e5e:	60f8      	str	r0, [r7, #12]
 8017e60:	60b9      	str	r1, [r7, #8]
 8017e62:	4613      	mov	r3, r2
 8017e64:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8017e66:	68bb      	ldr	r3, [r7, #8]
 8017e68:	2b00      	cmp	r3, #0
 8017e6a:	d101      	bne.n	8017e70 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8017e6c:	4b39      	ldr	r3, [pc, #228]	; (8017f54 <udp_bind+0xfc>)
 8017e6e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8017e70:	68fb      	ldr	r3, [r7, #12]
 8017e72:	2b00      	cmp	r3, #0
 8017e74:	d109      	bne.n	8017e8a <udp_bind+0x32>
 8017e76:	4b38      	ldr	r3, [pc, #224]	; (8017f58 <udp_bind+0x100>)
 8017e78:	f240 32b7 	movw	r2, #951	; 0x3b7
 8017e7c:	4937      	ldr	r1, [pc, #220]	; (8017f5c <udp_bind+0x104>)
 8017e7e:	4838      	ldr	r0, [pc, #224]	; (8017f60 <udp_bind+0x108>)
 8017e80:	f005 fafe 	bl	801d480 <iprintf>
 8017e84:	f06f 030f 	mvn.w	r3, #15
 8017e88:	e060      	b.n	8017f4c <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8017e8a:	2300      	movs	r3, #0
 8017e8c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8017e8e:	4b35      	ldr	r3, [pc, #212]	; (8017f64 <udp_bind+0x10c>)
 8017e90:	681b      	ldr	r3, [r3, #0]
 8017e92:	617b      	str	r3, [r7, #20]
 8017e94:	e009      	b.n	8017eaa <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8017e96:	68fa      	ldr	r2, [r7, #12]
 8017e98:	697b      	ldr	r3, [r7, #20]
 8017e9a:	429a      	cmp	r2, r3
 8017e9c:	d102      	bne.n	8017ea4 <udp_bind+0x4c>
      rebind = 1;
 8017e9e:	2301      	movs	r3, #1
 8017ea0:	74fb      	strb	r3, [r7, #19]
      break;
 8017ea2:	e005      	b.n	8017eb0 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8017ea4:	697b      	ldr	r3, [r7, #20]
 8017ea6:	68db      	ldr	r3, [r3, #12]
 8017ea8:	617b      	str	r3, [r7, #20]
 8017eaa:	697b      	ldr	r3, [r7, #20]
 8017eac:	2b00      	cmp	r3, #0
 8017eae:	d1f2      	bne.n	8017e96 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8017eb0:	88fb      	ldrh	r3, [r7, #6]
 8017eb2:	2b00      	cmp	r3, #0
 8017eb4:	d109      	bne.n	8017eca <udp_bind+0x72>
    port = udp_new_port();
 8017eb6:	f7ff fcc5 	bl	8017844 <udp_new_port>
 8017eba:	4603      	mov	r3, r0
 8017ebc:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8017ebe:	88fb      	ldrh	r3, [r7, #6]
 8017ec0:	2b00      	cmp	r3, #0
 8017ec2:	d12c      	bne.n	8017f1e <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8017ec4:	f06f 0307 	mvn.w	r3, #7
 8017ec8:	e040      	b.n	8017f4c <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8017eca:	4b26      	ldr	r3, [pc, #152]	; (8017f64 <udp_bind+0x10c>)
 8017ecc:	681b      	ldr	r3, [r3, #0]
 8017ece:	617b      	str	r3, [r7, #20]
 8017ed0:	e022      	b.n	8017f18 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8017ed2:	68fa      	ldr	r2, [r7, #12]
 8017ed4:	697b      	ldr	r3, [r7, #20]
 8017ed6:	429a      	cmp	r2, r3
 8017ed8:	d01b      	beq.n	8017f12 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8017eda:	697b      	ldr	r3, [r7, #20]
 8017edc:	8a5b      	ldrh	r3, [r3, #18]
 8017ede:	88fa      	ldrh	r2, [r7, #6]
 8017ee0:	429a      	cmp	r2, r3
 8017ee2:	d116      	bne.n	8017f12 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8017ee4:	697b      	ldr	r3, [r7, #20]
 8017ee6:	681a      	ldr	r2, [r3, #0]
 8017ee8:	68bb      	ldr	r3, [r7, #8]
 8017eea:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8017eec:	429a      	cmp	r2, r3
 8017eee:	d00d      	beq.n	8017f0c <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8017ef0:	68bb      	ldr	r3, [r7, #8]
 8017ef2:	2b00      	cmp	r3, #0
 8017ef4:	d00a      	beq.n	8017f0c <udp_bind+0xb4>
 8017ef6:	68bb      	ldr	r3, [r7, #8]
 8017ef8:	681b      	ldr	r3, [r3, #0]
 8017efa:	2b00      	cmp	r3, #0
 8017efc:	d006      	beq.n	8017f0c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8017efe:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8017f00:	2b00      	cmp	r3, #0
 8017f02:	d003      	beq.n	8017f0c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8017f04:	697b      	ldr	r3, [r7, #20]
 8017f06:	681b      	ldr	r3, [r3, #0]
 8017f08:	2b00      	cmp	r3, #0
 8017f0a:	d102      	bne.n	8017f12 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8017f0c:	f06f 0307 	mvn.w	r3, #7
 8017f10:	e01c      	b.n	8017f4c <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8017f12:	697b      	ldr	r3, [r7, #20]
 8017f14:	68db      	ldr	r3, [r3, #12]
 8017f16:	617b      	str	r3, [r7, #20]
 8017f18:	697b      	ldr	r3, [r7, #20]
 8017f1a:	2b00      	cmp	r3, #0
 8017f1c:	d1d9      	bne.n	8017ed2 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8017f1e:	68bb      	ldr	r3, [r7, #8]
 8017f20:	2b00      	cmp	r3, #0
 8017f22:	d002      	beq.n	8017f2a <udp_bind+0xd2>
 8017f24:	68bb      	ldr	r3, [r7, #8]
 8017f26:	681b      	ldr	r3, [r3, #0]
 8017f28:	e000      	b.n	8017f2c <udp_bind+0xd4>
 8017f2a:	2300      	movs	r3, #0
 8017f2c:	68fa      	ldr	r2, [r7, #12]
 8017f2e:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8017f30:	68fb      	ldr	r3, [r7, #12]
 8017f32:	88fa      	ldrh	r2, [r7, #6]
 8017f34:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8017f36:	7cfb      	ldrb	r3, [r7, #19]
 8017f38:	2b00      	cmp	r3, #0
 8017f3a:	d106      	bne.n	8017f4a <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8017f3c:	4b09      	ldr	r3, [pc, #36]	; (8017f64 <udp_bind+0x10c>)
 8017f3e:	681a      	ldr	r2, [r3, #0]
 8017f40:	68fb      	ldr	r3, [r7, #12]
 8017f42:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8017f44:	4a07      	ldr	r2, [pc, #28]	; (8017f64 <udp_bind+0x10c>)
 8017f46:	68fb      	ldr	r3, [r7, #12]
 8017f48:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8017f4a:	2300      	movs	r3, #0
}
 8017f4c:	4618      	mov	r0, r3
 8017f4e:	3718      	adds	r7, #24
 8017f50:	46bd      	mov	sp, r7
 8017f52:	bd80      	pop	{r7, pc}
 8017f54:	08022788 	.word	0x08022788
 8017f58:	080217c0 	.word	0x080217c0
 8017f5c:	08021a88 	.word	0x08021a88
 8017f60:	08021814 	.word	0x08021814
 8017f64:	2001b7f0 	.word	0x2001b7f0

08017f68 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8017f68:	b580      	push	{r7, lr}
 8017f6a:	b086      	sub	sp, #24
 8017f6c:	af00      	add	r7, sp, #0
 8017f6e:	60f8      	str	r0, [r7, #12]
 8017f70:	60b9      	str	r1, [r7, #8]
 8017f72:	4613      	mov	r3, r2
 8017f74:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8017f76:	68fb      	ldr	r3, [r7, #12]
 8017f78:	2b00      	cmp	r3, #0
 8017f7a:	d109      	bne.n	8017f90 <udp_connect+0x28>
 8017f7c:	4b2c      	ldr	r3, [pc, #176]	; (8018030 <udp_connect+0xc8>)
 8017f7e:	f240 4235 	movw	r2, #1077	; 0x435
 8017f82:	492c      	ldr	r1, [pc, #176]	; (8018034 <udp_connect+0xcc>)
 8017f84:	482c      	ldr	r0, [pc, #176]	; (8018038 <udp_connect+0xd0>)
 8017f86:	f005 fa7b 	bl	801d480 <iprintf>
 8017f8a:	f06f 030f 	mvn.w	r3, #15
 8017f8e:	e04b      	b.n	8018028 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8017f90:	68bb      	ldr	r3, [r7, #8]
 8017f92:	2b00      	cmp	r3, #0
 8017f94:	d109      	bne.n	8017faa <udp_connect+0x42>
 8017f96:	4b26      	ldr	r3, [pc, #152]	; (8018030 <udp_connect+0xc8>)
 8017f98:	f240 4236 	movw	r2, #1078	; 0x436
 8017f9c:	4927      	ldr	r1, [pc, #156]	; (801803c <udp_connect+0xd4>)
 8017f9e:	4826      	ldr	r0, [pc, #152]	; (8018038 <udp_connect+0xd0>)
 8017fa0:	f005 fa6e 	bl	801d480 <iprintf>
 8017fa4:	f06f 030f 	mvn.w	r3, #15
 8017fa8:	e03e      	b.n	8018028 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8017faa:	68fb      	ldr	r3, [r7, #12]
 8017fac:	8a5b      	ldrh	r3, [r3, #18]
 8017fae:	2b00      	cmp	r3, #0
 8017fb0:	d10f      	bne.n	8017fd2 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8017fb2:	68f9      	ldr	r1, [r7, #12]
 8017fb4:	68fb      	ldr	r3, [r7, #12]
 8017fb6:	8a5b      	ldrh	r3, [r3, #18]
 8017fb8:	461a      	mov	r2, r3
 8017fba:	68f8      	ldr	r0, [r7, #12]
 8017fbc:	f7ff ff4c 	bl	8017e58 <udp_bind>
 8017fc0:	4603      	mov	r3, r0
 8017fc2:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8017fc4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017fc8:	2b00      	cmp	r3, #0
 8017fca:	d002      	beq.n	8017fd2 <udp_connect+0x6a>
      return err;
 8017fcc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017fd0:	e02a      	b.n	8018028 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8017fd2:	68bb      	ldr	r3, [r7, #8]
 8017fd4:	2b00      	cmp	r3, #0
 8017fd6:	d002      	beq.n	8017fde <udp_connect+0x76>
 8017fd8:	68bb      	ldr	r3, [r7, #8]
 8017fda:	681b      	ldr	r3, [r3, #0]
 8017fdc:	e000      	b.n	8017fe0 <udp_connect+0x78>
 8017fde:	2300      	movs	r3, #0
 8017fe0:	68fa      	ldr	r2, [r7, #12]
 8017fe2:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8017fe4:	68fb      	ldr	r3, [r7, #12]
 8017fe6:	88fa      	ldrh	r2, [r7, #6]
 8017fe8:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8017fea:	68fb      	ldr	r3, [r7, #12]
 8017fec:	7c1b      	ldrb	r3, [r3, #16]
 8017fee:	f043 0304 	orr.w	r3, r3, #4
 8017ff2:	b2da      	uxtb	r2, r3
 8017ff4:	68fb      	ldr	r3, [r7, #12]
 8017ff6:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8017ff8:	4b11      	ldr	r3, [pc, #68]	; (8018040 <udp_connect+0xd8>)
 8017ffa:	681b      	ldr	r3, [r3, #0]
 8017ffc:	617b      	str	r3, [r7, #20]
 8017ffe:	e008      	b.n	8018012 <udp_connect+0xaa>
    if (pcb == ipcb) {
 8018000:	68fa      	ldr	r2, [r7, #12]
 8018002:	697b      	ldr	r3, [r7, #20]
 8018004:	429a      	cmp	r2, r3
 8018006:	d101      	bne.n	801800c <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8018008:	2300      	movs	r3, #0
 801800a:	e00d      	b.n	8018028 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801800c:	697b      	ldr	r3, [r7, #20]
 801800e:	68db      	ldr	r3, [r3, #12]
 8018010:	617b      	str	r3, [r7, #20]
 8018012:	697b      	ldr	r3, [r7, #20]
 8018014:	2b00      	cmp	r3, #0
 8018016:	d1f3      	bne.n	8018000 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8018018:	4b09      	ldr	r3, [pc, #36]	; (8018040 <udp_connect+0xd8>)
 801801a:	681a      	ldr	r2, [r3, #0]
 801801c:	68fb      	ldr	r3, [r7, #12]
 801801e:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8018020:	4a07      	ldr	r2, [pc, #28]	; (8018040 <udp_connect+0xd8>)
 8018022:	68fb      	ldr	r3, [r7, #12]
 8018024:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8018026:	2300      	movs	r3, #0
}
 8018028:	4618      	mov	r0, r3
 801802a:	3718      	adds	r7, #24
 801802c:	46bd      	mov	sp, r7
 801802e:	bd80      	pop	{r7, pc}
 8018030:	080217c0 	.word	0x080217c0
 8018034:	08021aa0 	.word	0x08021aa0
 8018038:	08021814 	.word	0x08021814
 801803c:	08021abc 	.word	0x08021abc
 8018040:	2001b7f0 	.word	0x2001b7f0

08018044 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8018044:	b580      	push	{r7, lr}
 8018046:	b084      	sub	sp, #16
 8018048:	af00      	add	r7, sp, #0
 801804a:	60f8      	str	r0, [r7, #12]
 801804c:	60b9      	str	r1, [r7, #8]
 801804e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8018050:	68fb      	ldr	r3, [r7, #12]
 8018052:	2b00      	cmp	r3, #0
 8018054:	d107      	bne.n	8018066 <udp_recv+0x22>
 8018056:	4b08      	ldr	r3, [pc, #32]	; (8018078 <udp_recv+0x34>)
 8018058:	f240 428a 	movw	r2, #1162	; 0x48a
 801805c:	4907      	ldr	r1, [pc, #28]	; (801807c <udp_recv+0x38>)
 801805e:	4808      	ldr	r0, [pc, #32]	; (8018080 <udp_recv+0x3c>)
 8018060:	f005 fa0e 	bl	801d480 <iprintf>
 8018064:	e005      	b.n	8018072 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8018066:	68fb      	ldr	r3, [r7, #12]
 8018068:	68ba      	ldr	r2, [r7, #8]
 801806a:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801806c:	68fb      	ldr	r3, [r7, #12]
 801806e:	687a      	ldr	r2, [r7, #4]
 8018070:	61da      	str	r2, [r3, #28]
}
 8018072:	3710      	adds	r7, #16
 8018074:	46bd      	mov	sp, r7
 8018076:	bd80      	pop	{r7, pc}
 8018078:	080217c0 	.word	0x080217c0
 801807c:	08021af4 	.word	0x08021af4
 8018080:	08021814 	.word	0x08021814

08018084 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8018084:	b580      	push	{r7, lr}
 8018086:	b084      	sub	sp, #16
 8018088:	af00      	add	r7, sp, #0
 801808a:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801808c:	687b      	ldr	r3, [r7, #4]
 801808e:	2b00      	cmp	r3, #0
 8018090:	d107      	bne.n	80180a2 <udp_remove+0x1e>
 8018092:	4b19      	ldr	r3, [pc, #100]	; (80180f8 <udp_remove+0x74>)
 8018094:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8018098:	4918      	ldr	r1, [pc, #96]	; (80180fc <udp_remove+0x78>)
 801809a:	4819      	ldr	r0, [pc, #100]	; (8018100 <udp_remove+0x7c>)
 801809c:	f005 f9f0 	bl	801d480 <iprintf>
 80180a0:	e026      	b.n	80180f0 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 80180a2:	4b18      	ldr	r3, [pc, #96]	; (8018104 <udp_remove+0x80>)
 80180a4:	681b      	ldr	r3, [r3, #0]
 80180a6:	687a      	ldr	r2, [r7, #4]
 80180a8:	429a      	cmp	r2, r3
 80180aa:	d105      	bne.n	80180b8 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 80180ac:	4b15      	ldr	r3, [pc, #84]	; (8018104 <udp_remove+0x80>)
 80180ae:	681b      	ldr	r3, [r3, #0]
 80180b0:	68db      	ldr	r3, [r3, #12]
 80180b2:	4a14      	ldr	r2, [pc, #80]	; (8018104 <udp_remove+0x80>)
 80180b4:	6013      	str	r3, [r2, #0]
 80180b6:	e017      	b.n	80180e8 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80180b8:	4b12      	ldr	r3, [pc, #72]	; (8018104 <udp_remove+0x80>)
 80180ba:	681b      	ldr	r3, [r3, #0]
 80180bc:	60fb      	str	r3, [r7, #12]
 80180be:	e010      	b.n	80180e2 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80180c0:	68fb      	ldr	r3, [r7, #12]
 80180c2:	68db      	ldr	r3, [r3, #12]
 80180c4:	2b00      	cmp	r3, #0
 80180c6:	d009      	beq.n	80180dc <udp_remove+0x58>
 80180c8:	68fb      	ldr	r3, [r7, #12]
 80180ca:	68db      	ldr	r3, [r3, #12]
 80180cc:	687a      	ldr	r2, [r7, #4]
 80180ce:	429a      	cmp	r2, r3
 80180d0:	d104      	bne.n	80180dc <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 80180d2:	687b      	ldr	r3, [r7, #4]
 80180d4:	68da      	ldr	r2, [r3, #12]
 80180d6:	68fb      	ldr	r3, [r7, #12]
 80180d8:	60da      	str	r2, [r3, #12]
        break;
 80180da:	e005      	b.n	80180e8 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80180dc:	68fb      	ldr	r3, [r7, #12]
 80180de:	68db      	ldr	r3, [r3, #12]
 80180e0:	60fb      	str	r3, [r7, #12]
 80180e2:	68fb      	ldr	r3, [r7, #12]
 80180e4:	2b00      	cmp	r3, #0
 80180e6:	d1eb      	bne.n	80180c0 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80180e8:	6879      	ldr	r1, [r7, #4]
 80180ea:	2000      	movs	r0, #0
 80180ec:	f7f8 ff68 	bl	8010fc0 <memp_free>
}
 80180f0:	3710      	adds	r7, #16
 80180f2:	46bd      	mov	sp, r7
 80180f4:	bd80      	pop	{r7, pc}
 80180f6:	bf00      	nop
 80180f8:	080217c0 	.word	0x080217c0
 80180fc:	08021b0c 	.word	0x08021b0c
 8018100:	08021814 	.word	0x08021814
 8018104:	2001b7f0 	.word	0x2001b7f0

08018108 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8018108:	b580      	push	{r7, lr}
 801810a:	b082      	sub	sp, #8
 801810c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801810e:	2000      	movs	r0, #0
 8018110:	f7f8 ff04 	bl	8010f1c <memp_malloc>
 8018114:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8018116:	687b      	ldr	r3, [r7, #4]
 8018118:	2b00      	cmp	r3, #0
 801811a:	d007      	beq.n	801812c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801811c:	2220      	movs	r2, #32
 801811e:	2100      	movs	r1, #0
 8018120:	6878      	ldr	r0, [r7, #4]
 8018122:	f004 fb01 	bl	801c728 <memset>
    pcb->ttl = UDP_TTL;
 8018126:	687b      	ldr	r3, [r7, #4]
 8018128:	22ff      	movs	r2, #255	; 0xff
 801812a:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801812c:	687b      	ldr	r3, [r7, #4]
}
 801812e:	4618      	mov	r0, r3
 8018130:	3708      	adds	r7, #8
 8018132:	46bd      	mov	sp, r7
 8018134:	bd80      	pop	{r7, pc}
	...

08018138 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8018138:	b480      	push	{r7}
 801813a:	b085      	sub	sp, #20
 801813c:	af00      	add	r7, sp, #0
 801813e:	6078      	str	r0, [r7, #4]
 8018140:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8018142:	687b      	ldr	r3, [r7, #4]
 8018144:	2b00      	cmp	r3, #0
 8018146:	d01e      	beq.n	8018186 <udp_netif_ip_addr_changed+0x4e>
 8018148:	687b      	ldr	r3, [r7, #4]
 801814a:	681b      	ldr	r3, [r3, #0]
 801814c:	2b00      	cmp	r3, #0
 801814e:	d01a      	beq.n	8018186 <udp_netif_ip_addr_changed+0x4e>
 8018150:	683b      	ldr	r3, [r7, #0]
 8018152:	2b00      	cmp	r3, #0
 8018154:	d017      	beq.n	8018186 <udp_netif_ip_addr_changed+0x4e>
 8018156:	683b      	ldr	r3, [r7, #0]
 8018158:	681b      	ldr	r3, [r3, #0]
 801815a:	2b00      	cmp	r3, #0
 801815c:	d013      	beq.n	8018186 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801815e:	4b0d      	ldr	r3, [pc, #52]	; (8018194 <udp_netif_ip_addr_changed+0x5c>)
 8018160:	681b      	ldr	r3, [r3, #0]
 8018162:	60fb      	str	r3, [r7, #12]
 8018164:	e00c      	b.n	8018180 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8018166:	68fb      	ldr	r3, [r7, #12]
 8018168:	681a      	ldr	r2, [r3, #0]
 801816a:	687b      	ldr	r3, [r7, #4]
 801816c:	681b      	ldr	r3, [r3, #0]
 801816e:	429a      	cmp	r2, r3
 8018170:	d103      	bne.n	801817a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8018172:	683b      	ldr	r3, [r7, #0]
 8018174:	681a      	ldr	r2, [r3, #0]
 8018176:	68fb      	ldr	r3, [r7, #12]
 8018178:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801817a:	68fb      	ldr	r3, [r7, #12]
 801817c:	68db      	ldr	r3, [r3, #12]
 801817e:	60fb      	str	r3, [r7, #12]
 8018180:	68fb      	ldr	r3, [r7, #12]
 8018182:	2b00      	cmp	r3, #0
 8018184:	d1ef      	bne.n	8018166 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8018186:	bf00      	nop
 8018188:	3714      	adds	r7, #20
 801818a:	46bd      	mov	sp, r7
 801818c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018190:	4770      	bx	lr
 8018192:	bf00      	nop
 8018194:	2001b7f0 	.word	0x2001b7f0

08018198 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8018198:	b580      	push	{r7, lr}
 801819a:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 801819c:	4b20      	ldr	r3, [pc, #128]	; (8018220 <dhcp_inc_pcb_refcount+0x88>)
 801819e:	781b      	ldrb	r3, [r3, #0]
 80181a0:	2b00      	cmp	r3, #0
 80181a2:	d133      	bne.n	801820c <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 80181a4:	4b1f      	ldr	r3, [pc, #124]	; (8018224 <dhcp_inc_pcb_refcount+0x8c>)
 80181a6:	681b      	ldr	r3, [r3, #0]
 80181a8:	2b00      	cmp	r3, #0
 80181aa:	d005      	beq.n	80181b8 <dhcp_inc_pcb_refcount+0x20>
 80181ac:	4b1e      	ldr	r3, [pc, #120]	; (8018228 <dhcp_inc_pcb_refcount+0x90>)
 80181ae:	22e5      	movs	r2, #229	; 0xe5
 80181b0:	491e      	ldr	r1, [pc, #120]	; (801822c <dhcp_inc_pcb_refcount+0x94>)
 80181b2:	481f      	ldr	r0, [pc, #124]	; (8018230 <dhcp_inc_pcb_refcount+0x98>)
 80181b4:	f005 f964 	bl	801d480 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 80181b8:	f7ff ffa6 	bl	8018108 <udp_new>
 80181bc:	4603      	mov	r3, r0
 80181be:	4a19      	ldr	r2, [pc, #100]	; (8018224 <dhcp_inc_pcb_refcount+0x8c>)
 80181c0:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 80181c2:	4b18      	ldr	r3, [pc, #96]	; (8018224 <dhcp_inc_pcb_refcount+0x8c>)
 80181c4:	681b      	ldr	r3, [r3, #0]
 80181c6:	2b00      	cmp	r3, #0
 80181c8:	d102      	bne.n	80181d0 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 80181ca:	f04f 33ff 	mov.w	r3, #4294967295
 80181ce:	e024      	b.n	801821a <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 80181d0:	4b14      	ldr	r3, [pc, #80]	; (8018224 <dhcp_inc_pcb_refcount+0x8c>)
 80181d2:	681b      	ldr	r3, [r3, #0]
 80181d4:	7a5a      	ldrb	r2, [r3, #9]
 80181d6:	4b13      	ldr	r3, [pc, #76]	; (8018224 <dhcp_inc_pcb_refcount+0x8c>)
 80181d8:	681b      	ldr	r3, [r3, #0]
 80181da:	f042 0220 	orr.w	r2, r2, #32
 80181de:	b2d2      	uxtb	r2, r2
 80181e0:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 80181e2:	4b10      	ldr	r3, [pc, #64]	; (8018224 <dhcp_inc_pcb_refcount+0x8c>)
 80181e4:	681b      	ldr	r3, [r3, #0]
 80181e6:	2244      	movs	r2, #68	; 0x44
 80181e8:	4912      	ldr	r1, [pc, #72]	; (8018234 <dhcp_inc_pcb_refcount+0x9c>)
 80181ea:	4618      	mov	r0, r3
 80181ec:	f7ff fe34 	bl	8017e58 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 80181f0:	4b0c      	ldr	r3, [pc, #48]	; (8018224 <dhcp_inc_pcb_refcount+0x8c>)
 80181f2:	681b      	ldr	r3, [r3, #0]
 80181f4:	2243      	movs	r2, #67	; 0x43
 80181f6:	490f      	ldr	r1, [pc, #60]	; (8018234 <dhcp_inc_pcb_refcount+0x9c>)
 80181f8:	4618      	mov	r0, r3
 80181fa:	f7ff feb5 	bl	8017f68 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 80181fe:	4b09      	ldr	r3, [pc, #36]	; (8018224 <dhcp_inc_pcb_refcount+0x8c>)
 8018200:	681b      	ldr	r3, [r3, #0]
 8018202:	2200      	movs	r2, #0
 8018204:	490c      	ldr	r1, [pc, #48]	; (8018238 <dhcp_inc_pcb_refcount+0xa0>)
 8018206:	4618      	mov	r0, r3
 8018208:	f7ff ff1c 	bl	8018044 <udp_recv>
  }

  dhcp_pcb_refcount++;
 801820c:	4b04      	ldr	r3, [pc, #16]	; (8018220 <dhcp_inc_pcb_refcount+0x88>)
 801820e:	781b      	ldrb	r3, [r3, #0]
 8018210:	3301      	adds	r3, #1
 8018212:	b2da      	uxtb	r2, r3
 8018214:	4b02      	ldr	r3, [pc, #8]	; (8018220 <dhcp_inc_pcb_refcount+0x88>)
 8018216:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8018218:	2300      	movs	r3, #0
}
 801821a:	4618      	mov	r0, r3
 801821c:	bd80      	pop	{r7, pc}
 801821e:	bf00      	nop
 8018220:	200137f4 	.word	0x200137f4
 8018224:	200137f0 	.word	0x200137f0
 8018228:	08021b24 	.word	0x08021b24
 801822c:	08021b5c 	.word	0x08021b5c
 8018230:	08021b84 	.word	0x08021b84
 8018234:	08022788 	.word	0x08022788
 8018238:	08019acd 	.word	0x08019acd

0801823c <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 801823c:	b580      	push	{r7, lr}
 801823e:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8018240:	4b0e      	ldr	r3, [pc, #56]	; (801827c <dhcp_dec_pcb_refcount+0x40>)
 8018242:	781b      	ldrb	r3, [r3, #0]
 8018244:	2b00      	cmp	r3, #0
 8018246:	d105      	bne.n	8018254 <dhcp_dec_pcb_refcount+0x18>
 8018248:	4b0d      	ldr	r3, [pc, #52]	; (8018280 <dhcp_dec_pcb_refcount+0x44>)
 801824a:	22ff      	movs	r2, #255	; 0xff
 801824c:	490d      	ldr	r1, [pc, #52]	; (8018284 <dhcp_dec_pcb_refcount+0x48>)
 801824e:	480e      	ldr	r0, [pc, #56]	; (8018288 <dhcp_dec_pcb_refcount+0x4c>)
 8018250:	f005 f916 	bl	801d480 <iprintf>
  dhcp_pcb_refcount--;
 8018254:	4b09      	ldr	r3, [pc, #36]	; (801827c <dhcp_dec_pcb_refcount+0x40>)
 8018256:	781b      	ldrb	r3, [r3, #0]
 8018258:	3b01      	subs	r3, #1
 801825a:	b2da      	uxtb	r2, r3
 801825c:	4b07      	ldr	r3, [pc, #28]	; (801827c <dhcp_dec_pcb_refcount+0x40>)
 801825e:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8018260:	4b06      	ldr	r3, [pc, #24]	; (801827c <dhcp_dec_pcb_refcount+0x40>)
 8018262:	781b      	ldrb	r3, [r3, #0]
 8018264:	2b00      	cmp	r3, #0
 8018266:	d107      	bne.n	8018278 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8018268:	4b08      	ldr	r3, [pc, #32]	; (801828c <dhcp_dec_pcb_refcount+0x50>)
 801826a:	681b      	ldr	r3, [r3, #0]
 801826c:	4618      	mov	r0, r3
 801826e:	f7ff ff09 	bl	8018084 <udp_remove>
    dhcp_pcb = NULL;
 8018272:	4b06      	ldr	r3, [pc, #24]	; (801828c <dhcp_dec_pcb_refcount+0x50>)
 8018274:	2200      	movs	r2, #0
 8018276:	601a      	str	r2, [r3, #0]
  }
}
 8018278:	bf00      	nop
 801827a:	bd80      	pop	{r7, pc}
 801827c:	200137f4 	.word	0x200137f4
 8018280:	08021b24 	.word	0x08021b24
 8018284:	08021bac 	.word	0x08021bac
 8018288:	08021b84 	.word	0x08021b84
 801828c:	200137f0 	.word	0x200137f0

08018290 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8018290:	b580      	push	{r7, lr}
 8018292:	b084      	sub	sp, #16
 8018294:	af00      	add	r7, sp, #0
 8018296:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8018298:	687b      	ldr	r3, [r7, #4]
 801829a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801829c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801829e:	210c      	movs	r1, #12
 80182a0:	68f8      	ldr	r0, [r7, #12]
 80182a2:	f001 f855 	bl	8019350 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80182a6:	4b06      	ldr	r3, [pc, #24]	; (80182c0 <dhcp_handle_nak+0x30>)
 80182a8:	4a05      	ldr	r2, [pc, #20]	; (80182c0 <dhcp_handle_nak+0x30>)
 80182aa:	4905      	ldr	r1, [pc, #20]	; (80182c0 <dhcp_handle_nak+0x30>)
 80182ac:	6878      	ldr	r0, [r7, #4]
 80182ae:	f7f9 f829 	bl	8011304 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 80182b2:	6878      	ldr	r0, [r7, #4]
 80182b4:	f000 fc48 	bl	8018b48 <dhcp_discover>
}
 80182b8:	bf00      	nop
 80182ba:	3710      	adds	r7, #16
 80182bc:	46bd      	mov	sp, r7
 80182be:	bd80      	pop	{r7, pc}
 80182c0:	08022788 	.word	0x08022788

080182c4 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 80182c4:	b580      	push	{r7, lr}
 80182c6:	b084      	sub	sp, #16
 80182c8:	af00      	add	r7, sp, #0
 80182ca:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80182cc:	687b      	ldr	r3, [r7, #4]
 80182ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80182d0:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 80182d2:	2108      	movs	r1, #8
 80182d4:	68f8      	ldr	r0, [r7, #12]
 80182d6:	f001 f83b 	bl	8019350 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 80182da:	68fb      	ldr	r3, [r7, #12]
 80182dc:	331c      	adds	r3, #28
 80182de:	2200      	movs	r2, #0
 80182e0:	4619      	mov	r1, r3
 80182e2:	6878      	ldr	r0, [r7, #4]
 80182e4:	f002 fb3c 	bl	801a960 <etharp_query>
 80182e8:	4603      	mov	r3, r0
 80182ea:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 80182ec:	68fb      	ldr	r3, [r7, #12]
 80182ee:	799b      	ldrb	r3, [r3, #6]
 80182f0:	2bff      	cmp	r3, #255	; 0xff
 80182f2:	d005      	beq.n	8018300 <dhcp_check+0x3c>
    dhcp->tries++;
 80182f4:	68fb      	ldr	r3, [r7, #12]
 80182f6:	799b      	ldrb	r3, [r3, #6]
 80182f8:	3301      	adds	r3, #1
 80182fa:	b2da      	uxtb	r2, r3
 80182fc:	68fb      	ldr	r3, [r7, #12]
 80182fe:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8018300:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8018304:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8018306:	893b      	ldrh	r3, [r7, #8]
 8018308:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801830c:	4a06      	ldr	r2, [pc, #24]	; (8018328 <dhcp_check+0x64>)
 801830e:	fb82 1203 	smull	r1, r2, r2, r3
 8018312:	1152      	asrs	r2, r2, #5
 8018314:	17db      	asrs	r3, r3, #31
 8018316:	1ad3      	subs	r3, r2, r3
 8018318:	b29a      	uxth	r2, r3
 801831a:	68fb      	ldr	r3, [r7, #12]
 801831c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 801831e:	bf00      	nop
 8018320:	3710      	adds	r7, #16
 8018322:	46bd      	mov	sp, r7
 8018324:	bd80      	pop	{r7, pc}
 8018326:	bf00      	nop
 8018328:	10624dd3 	.word	0x10624dd3

0801832c <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 801832c:	b580      	push	{r7, lr}
 801832e:	b084      	sub	sp, #16
 8018330:	af00      	add	r7, sp, #0
 8018332:	6078      	str	r0, [r7, #4]
 8018334:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8018336:	687b      	ldr	r3, [r7, #4]
 8018338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801833a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 801833c:	4b0c      	ldr	r3, [pc, #48]	; (8018370 <dhcp_handle_offer+0x44>)
 801833e:	789b      	ldrb	r3, [r3, #2]
 8018340:	2b00      	cmp	r3, #0
 8018342:	d011      	beq.n	8018368 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8018344:	68fb      	ldr	r3, [r7, #12]
 8018346:	2200      	movs	r2, #0
 8018348:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 801834a:	4b0a      	ldr	r3, [pc, #40]	; (8018374 <dhcp_handle_offer+0x48>)
 801834c:	689b      	ldr	r3, [r3, #8]
 801834e:	4618      	mov	r0, r3
 8018350:	f7f8 f943 	bl	80105da <lwip_htonl>
 8018354:	4602      	mov	r2, r0
 8018356:	68fb      	ldr	r3, [r7, #12]
 8018358:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801835a:	683b      	ldr	r3, [r7, #0]
 801835c:	691a      	ldr	r2, [r3, #16]
 801835e:	68fb      	ldr	r3, [r7, #12]
 8018360:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8018362:	6878      	ldr	r0, [r7, #4]
 8018364:	f000 f808 	bl	8018378 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8018368:	bf00      	nop
 801836a:	3710      	adds	r7, #16
 801836c:	46bd      	mov	sp, r7
 801836e:	bd80      	pop	{r7, pc}
 8018370:	2001b7f4 	.word	0x2001b7f4
 8018374:	2001b7fc 	.word	0x2001b7fc

08018378 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8018378:	b5b0      	push	{r4, r5, r7, lr}
 801837a:	b08a      	sub	sp, #40	; 0x28
 801837c:	af02      	add	r7, sp, #8
 801837e:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8018380:	687b      	ldr	r3, [r7, #4]
 8018382:	2b00      	cmp	r3, #0
 8018384:	d109      	bne.n	801839a <dhcp_select+0x22>
 8018386:	4b71      	ldr	r3, [pc, #452]	; (801854c <dhcp_select+0x1d4>)
 8018388:	f240 1277 	movw	r2, #375	; 0x177
 801838c:	4970      	ldr	r1, [pc, #448]	; (8018550 <dhcp_select+0x1d8>)
 801838e:	4871      	ldr	r0, [pc, #452]	; (8018554 <dhcp_select+0x1dc>)
 8018390:	f005 f876 	bl	801d480 <iprintf>
 8018394:	f06f 030f 	mvn.w	r3, #15
 8018398:	e0d3      	b.n	8018542 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 801839a:	687b      	ldr	r3, [r7, #4]
 801839c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801839e:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 80183a0:	69bb      	ldr	r3, [r7, #24]
 80183a2:	2b00      	cmp	r3, #0
 80183a4:	d109      	bne.n	80183ba <dhcp_select+0x42>
 80183a6:	4b69      	ldr	r3, [pc, #420]	; (801854c <dhcp_select+0x1d4>)
 80183a8:	f240 1279 	movw	r2, #377	; 0x179
 80183ac:	496a      	ldr	r1, [pc, #424]	; (8018558 <dhcp_select+0x1e0>)
 80183ae:	4869      	ldr	r0, [pc, #420]	; (8018554 <dhcp_select+0x1dc>)
 80183b0:	f005 f866 	bl	801d480 <iprintf>
 80183b4:	f06f 0305 	mvn.w	r3, #5
 80183b8:	e0c3      	b.n	8018542 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 80183ba:	2101      	movs	r1, #1
 80183bc:	69b8      	ldr	r0, [r7, #24]
 80183be:	f000 ffc7 	bl	8019350 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80183c2:	f107 030c 	add.w	r3, r7, #12
 80183c6:	2203      	movs	r2, #3
 80183c8:	69b9      	ldr	r1, [r7, #24]
 80183ca:	6878      	ldr	r0, [r7, #4]
 80183cc:	f001 fc4c 	bl	8019c68 <dhcp_create_msg>
 80183d0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80183d2:	697b      	ldr	r3, [r7, #20]
 80183d4:	2b00      	cmp	r3, #0
 80183d6:	f000 8085 	beq.w	80184e4 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80183da:	697b      	ldr	r3, [r7, #20]
 80183dc:	685b      	ldr	r3, [r3, #4]
 80183de:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80183e0:	89b8      	ldrh	r0, [r7, #12]
 80183e2:	693b      	ldr	r3, [r7, #16]
 80183e4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80183e8:	2302      	movs	r3, #2
 80183ea:	2239      	movs	r2, #57	; 0x39
 80183ec:	f000 ffca 	bl	8019384 <dhcp_option>
 80183f0:	4603      	mov	r3, r0
 80183f2:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80183f4:	89b8      	ldrh	r0, [r7, #12]
 80183f6:	693b      	ldr	r3, [r7, #16]
 80183f8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80183fc:	687b      	ldr	r3, [r7, #4]
 80183fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018400:	461a      	mov	r2, r3
 8018402:	f001 f819 	bl	8019438 <dhcp_option_short>
 8018406:	4603      	mov	r3, r0
 8018408:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801840a:	89b8      	ldrh	r0, [r7, #12]
 801840c:	693b      	ldr	r3, [r7, #16]
 801840e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8018412:	2304      	movs	r3, #4
 8018414:	2232      	movs	r2, #50	; 0x32
 8018416:	f000 ffb5 	bl	8019384 <dhcp_option>
 801841a:	4603      	mov	r3, r0
 801841c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801841e:	89bc      	ldrh	r4, [r7, #12]
 8018420:	693b      	ldr	r3, [r7, #16]
 8018422:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8018426:	69bb      	ldr	r3, [r7, #24]
 8018428:	69db      	ldr	r3, [r3, #28]
 801842a:	4618      	mov	r0, r3
 801842c:	f7f8 f8d5 	bl	80105da <lwip_htonl>
 8018430:	4603      	mov	r3, r0
 8018432:	461a      	mov	r2, r3
 8018434:	4629      	mov	r1, r5
 8018436:	4620      	mov	r0, r4
 8018438:	f001 f830 	bl	801949c <dhcp_option_long>
 801843c:	4603      	mov	r3, r0
 801843e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8018440:	89b8      	ldrh	r0, [r7, #12]
 8018442:	693b      	ldr	r3, [r7, #16]
 8018444:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8018448:	2304      	movs	r3, #4
 801844a:	2236      	movs	r2, #54	; 0x36
 801844c:	f000 ff9a 	bl	8019384 <dhcp_option>
 8018450:	4603      	mov	r3, r0
 8018452:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8018454:	89bc      	ldrh	r4, [r7, #12]
 8018456:	693b      	ldr	r3, [r7, #16]
 8018458:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801845c:	69bb      	ldr	r3, [r7, #24]
 801845e:	699b      	ldr	r3, [r3, #24]
 8018460:	4618      	mov	r0, r3
 8018462:	f7f8 f8ba 	bl	80105da <lwip_htonl>
 8018466:	4603      	mov	r3, r0
 8018468:	461a      	mov	r2, r3
 801846a:	4629      	mov	r1, r5
 801846c:	4620      	mov	r0, r4
 801846e:	f001 f815 	bl	801949c <dhcp_option_long>
 8018472:	4603      	mov	r3, r0
 8018474:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8018476:	89b8      	ldrh	r0, [r7, #12]
 8018478:	693b      	ldr	r3, [r7, #16]
 801847a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801847e:	2303      	movs	r3, #3
 8018480:	2237      	movs	r2, #55	; 0x37
 8018482:	f000 ff7f 	bl	8019384 <dhcp_option>
 8018486:	4603      	mov	r3, r0
 8018488:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801848a:	2300      	movs	r3, #0
 801848c:	77bb      	strb	r3, [r7, #30]
 801848e:	e00e      	b.n	80184ae <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8018490:	89b8      	ldrh	r0, [r7, #12]
 8018492:	693b      	ldr	r3, [r7, #16]
 8018494:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8018498:	7fbb      	ldrb	r3, [r7, #30]
 801849a:	4a30      	ldr	r2, [pc, #192]	; (801855c <dhcp_select+0x1e4>)
 801849c:	5cd3      	ldrb	r3, [r2, r3]
 801849e:	461a      	mov	r2, r3
 80184a0:	f000 ffa4 	bl	80193ec <dhcp_option_byte>
 80184a4:	4603      	mov	r3, r0
 80184a6:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80184a8:	7fbb      	ldrb	r3, [r7, #30]
 80184aa:	3301      	adds	r3, #1
 80184ac:	77bb      	strb	r3, [r7, #30]
 80184ae:	7fbb      	ldrb	r3, [r7, #30]
 80184b0:	2b02      	cmp	r3, #2
 80184b2:	d9ed      	bls.n	8018490 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80184b4:	89b8      	ldrh	r0, [r7, #12]
 80184b6:	693b      	ldr	r3, [r7, #16]
 80184b8:	33f0      	adds	r3, #240	; 0xf0
 80184ba:	697a      	ldr	r2, [r7, #20]
 80184bc:	4619      	mov	r1, r3
 80184be:	f001 fca9 	bl	8019e14 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80184c2:	4b27      	ldr	r3, [pc, #156]	; (8018560 <dhcp_select+0x1e8>)
 80184c4:	6818      	ldr	r0, [r3, #0]
 80184c6:	4b27      	ldr	r3, [pc, #156]	; (8018564 <dhcp_select+0x1ec>)
 80184c8:	9301      	str	r3, [sp, #4]
 80184ca:	687b      	ldr	r3, [r7, #4]
 80184cc:	9300      	str	r3, [sp, #0]
 80184ce:	2343      	movs	r3, #67	; 0x43
 80184d0:	4a25      	ldr	r2, [pc, #148]	; (8018568 <dhcp_select+0x1f0>)
 80184d2:	6979      	ldr	r1, [r7, #20]
 80184d4:	f7ff fbda 	bl	8017c8c <udp_sendto_if_src>
 80184d8:	4603      	mov	r3, r0
 80184da:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80184dc:	6978      	ldr	r0, [r7, #20]
 80184de:	f7f9 fc1f 	bl	8011d20 <pbuf_free>
 80184e2:	e001      	b.n	80184e8 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80184e4:	23ff      	movs	r3, #255	; 0xff
 80184e6:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80184e8:	69bb      	ldr	r3, [r7, #24]
 80184ea:	799b      	ldrb	r3, [r3, #6]
 80184ec:	2bff      	cmp	r3, #255	; 0xff
 80184ee:	d005      	beq.n	80184fc <dhcp_select+0x184>
    dhcp->tries++;
 80184f0:	69bb      	ldr	r3, [r7, #24]
 80184f2:	799b      	ldrb	r3, [r3, #6]
 80184f4:	3301      	adds	r3, #1
 80184f6:	b2da      	uxtb	r2, r3
 80184f8:	69bb      	ldr	r3, [r7, #24]
 80184fa:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80184fc:	69bb      	ldr	r3, [r7, #24]
 80184fe:	799b      	ldrb	r3, [r3, #6]
 8018500:	2b05      	cmp	r3, #5
 8018502:	d80d      	bhi.n	8018520 <dhcp_select+0x1a8>
 8018504:	69bb      	ldr	r3, [r7, #24]
 8018506:	799b      	ldrb	r3, [r3, #6]
 8018508:	461a      	mov	r2, r3
 801850a:	2301      	movs	r3, #1
 801850c:	4093      	lsls	r3, r2
 801850e:	b29b      	uxth	r3, r3
 8018510:	461a      	mov	r2, r3
 8018512:	0152      	lsls	r2, r2, #5
 8018514:	1ad2      	subs	r2, r2, r3
 8018516:	0092      	lsls	r2, r2, #2
 8018518:	4413      	add	r3, r2
 801851a:	00db      	lsls	r3, r3, #3
 801851c:	b29b      	uxth	r3, r3
 801851e:	e001      	b.n	8018524 <dhcp_select+0x1ac>
 8018520:	f64e 2360 	movw	r3, #60000	; 0xea60
 8018524:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8018526:	89fb      	ldrh	r3, [r7, #14]
 8018528:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801852c:	4a0f      	ldr	r2, [pc, #60]	; (801856c <dhcp_select+0x1f4>)
 801852e:	fb82 1203 	smull	r1, r2, r2, r3
 8018532:	1152      	asrs	r2, r2, #5
 8018534:	17db      	asrs	r3, r3, #31
 8018536:	1ad3      	subs	r3, r2, r3
 8018538:	b29a      	uxth	r2, r3
 801853a:	69bb      	ldr	r3, [r7, #24]
 801853c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801853e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8018542:	4618      	mov	r0, r3
 8018544:	3720      	adds	r7, #32
 8018546:	46bd      	mov	sp, r7
 8018548:	bdb0      	pop	{r4, r5, r7, pc}
 801854a:	bf00      	nop
 801854c:	08021b24 	.word	0x08021b24
 8018550:	08021bd0 	.word	0x08021bd0
 8018554:	08021b84 	.word	0x08021b84
 8018558:	08021bec 	.word	0x08021bec
 801855c:	10000020 	.word	0x10000020
 8018560:	200137f0 	.word	0x200137f0
 8018564:	08022788 	.word	0x08022788
 8018568:	0802278c 	.word	0x0802278c
 801856c:	10624dd3 	.word	0x10624dd3

08018570 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8018570:	b580      	push	{r7, lr}
 8018572:	b082      	sub	sp, #8
 8018574:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8018576:	4b27      	ldr	r3, [pc, #156]	; (8018614 <dhcp_coarse_tmr+0xa4>)
 8018578:	681b      	ldr	r3, [r3, #0]
 801857a:	607b      	str	r3, [r7, #4]
 801857c:	e042      	b.n	8018604 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801857e:	687b      	ldr	r3, [r7, #4]
 8018580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018582:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8018584:	683b      	ldr	r3, [r7, #0]
 8018586:	2b00      	cmp	r3, #0
 8018588:	d039      	beq.n	80185fe <dhcp_coarse_tmr+0x8e>
 801858a:	683b      	ldr	r3, [r7, #0]
 801858c:	795b      	ldrb	r3, [r3, #5]
 801858e:	2b00      	cmp	r3, #0
 8018590:	d035      	beq.n	80185fe <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8018592:	683b      	ldr	r3, [r7, #0]
 8018594:	8a9b      	ldrh	r3, [r3, #20]
 8018596:	2b00      	cmp	r3, #0
 8018598:	d012      	beq.n	80185c0 <dhcp_coarse_tmr+0x50>
 801859a:	683b      	ldr	r3, [r7, #0]
 801859c:	8a5b      	ldrh	r3, [r3, #18]
 801859e:	3301      	adds	r3, #1
 80185a0:	b29a      	uxth	r2, r3
 80185a2:	683b      	ldr	r3, [r7, #0]
 80185a4:	825a      	strh	r2, [r3, #18]
 80185a6:	683b      	ldr	r3, [r7, #0]
 80185a8:	8a5a      	ldrh	r2, [r3, #18]
 80185aa:	683b      	ldr	r3, [r7, #0]
 80185ac:	8a9b      	ldrh	r3, [r3, #20]
 80185ae:	429a      	cmp	r2, r3
 80185b0:	d106      	bne.n	80185c0 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 80185b2:	6878      	ldr	r0, [r7, #4]
 80185b4:	f000 fe32 	bl	801921c <dhcp_release_and_stop>
        dhcp_start(netif);
 80185b8:	6878      	ldr	r0, [r7, #4]
 80185ba:	f000 f969 	bl	8018890 <dhcp_start>
 80185be:	e01e      	b.n	80185fe <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 80185c0:	683b      	ldr	r3, [r7, #0]
 80185c2:	8a1b      	ldrh	r3, [r3, #16]
 80185c4:	2b00      	cmp	r3, #0
 80185c6:	d00b      	beq.n	80185e0 <dhcp_coarse_tmr+0x70>
 80185c8:	683b      	ldr	r3, [r7, #0]
 80185ca:	8a1b      	ldrh	r3, [r3, #16]
 80185cc:	1e5a      	subs	r2, r3, #1
 80185ce:	b291      	uxth	r1, r2
 80185d0:	683a      	ldr	r2, [r7, #0]
 80185d2:	8211      	strh	r1, [r2, #16]
 80185d4:	2b01      	cmp	r3, #1
 80185d6:	d103      	bne.n	80185e0 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 80185d8:	6878      	ldr	r0, [r7, #4]
 80185da:	f000 f8c6 	bl	801876a <dhcp_t2_timeout>
 80185de:	e00e      	b.n	80185fe <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 80185e0:	683b      	ldr	r3, [r7, #0]
 80185e2:	89db      	ldrh	r3, [r3, #14]
 80185e4:	2b00      	cmp	r3, #0
 80185e6:	d00a      	beq.n	80185fe <dhcp_coarse_tmr+0x8e>
 80185e8:	683b      	ldr	r3, [r7, #0]
 80185ea:	89db      	ldrh	r3, [r3, #14]
 80185ec:	1e5a      	subs	r2, r3, #1
 80185ee:	b291      	uxth	r1, r2
 80185f0:	683a      	ldr	r2, [r7, #0]
 80185f2:	81d1      	strh	r1, [r2, #14]
 80185f4:	2b01      	cmp	r3, #1
 80185f6:	d102      	bne.n	80185fe <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 80185f8:	6878      	ldr	r0, [r7, #4]
 80185fa:	f000 f888 	bl	801870e <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 80185fe:	687b      	ldr	r3, [r7, #4]
 8018600:	681b      	ldr	r3, [r3, #0]
 8018602:	607b      	str	r3, [r7, #4]
 8018604:	687b      	ldr	r3, [r7, #4]
 8018606:	2b00      	cmp	r3, #0
 8018608:	d1b9      	bne.n	801857e <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 801860a:	bf00      	nop
 801860c:	bf00      	nop
 801860e:	3708      	adds	r7, #8
 8018610:	46bd      	mov	sp, r7
 8018612:	bd80      	pop	{r7, pc}
 8018614:	2001b7c8 	.word	0x2001b7c8

08018618 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8018618:	b580      	push	{r7, lr}
 801861a:	b082      	sub	sp, #8
 801861c:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 801861e:	4b16      	ldr	r3, [pc, #88]	; (8018678 <dhcp_fine_tmr+0x60>)
 8018620:	681b      	ldr	r3, [r3, #0]
 8018622:	607b      	str	r3, [r7, #4]
 8018624:	e020      	b.n	8018668 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8018626:	687b      	ldr	r3, [r7, #4]
 8018628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801862a:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 801862c:	683b      	ldr	r3, [r7, #0]
 801862e:	2b00      	cmp	r3, #0
 8018630:	d017      	beq.n	8018662 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8018632:	683b      	ldr	r3, [r7, #0]
 8018634:	891b      	ldrh	r3, [r3, #8]
 8018636:	2b01      	cmp	r3, #1
 8018638:	d906      	bls.n	8018648 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 801863a:	683b      	ldr	r3, [r7, #0]
 801863c:	891b      	ldrh	r3, [r3, #8]
 801863e:	3b01      	subs	r3, #1
 8018640:	b29a      	uxth	r2, r3
 8018642:	683b      	ldr	r3, [r7, #0]
 8018644:	811a      	strh	r2, [r3, #8]
 8018646:	e00c      	b.n	8018662 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8018648:	683b      	ldr	r3, [r7, #0]
 801864a:	891b      	ldrh	r3, [r3, #8]
 801864c:	2b01      	cmp	r3, #1
 801864e:	d108      	bne.n	8018662 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8018650:	683b      	ldr	r3, [r7, #0]
 8018652:	891b      	ldrh	r3, [r3, #8]
 8018654:	3b01      	subs	r3, #1
 8018656:	b29a      	uxth	r2, r3
 8018658:	683b      	ldr	r3, [r7, #0]
 801865a:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 801865c:	6878      	ldr	r0, [r7, #4]
 801865e:	f000 f80d 	bl	801867c <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8018662:	687b      	ldr	r3, [r7, #4]
 8018664:	681b      	ldr	r3, [r3, #0]
 8018666:	607b      	str	r3, [r7, #4]
 8018668:	687b      	ldr	r3, [r7, #4]
 801866a:	2b00      	cmp	r3, #0
 801866c:	d1db      	bne.n	8018626 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 801866e:	bf00      	nop
 8018670:	bf00      	nop
 8018672:	3708      	adds	r7, #8
 8018674:	46bd      	mov	sp, r7
 8018676:	bd80      	pop	{r7, pc}
 8018678:	2001b7c8 	.word	0x2001b7c8

0801867c <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 801867c:	b580      	push	{r7, lr}
 801867e:	b084      	sub	sp, #16
 8018680:	af00      	add	r7, sp, #0
 8018682:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8018684:	687b      	ldr	r3, [r7, #4]
 8018686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018688:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 801868a:	68fb      	ldr	r3, [r7, #12]
 801868c:	795b      	ldrb	r3, [r3, #5]
 801868e:	2b0c      	cmp	r3, #12
 8018690:	d003      	beq.n	801869a <dhcp_timeout+0x1e>
 8018692:	68fb      	ldr	r3, [r7, #12]
 8018694:	795b      	ldrb	r3, [r3, #5]
 8018696:	2b06      	cmp	r3, #6
 8018698:	d103      	bne.n	80186a2 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 801869a:	6878      	ldr	r0, [r7, #4]
 801869c:	f000 fa54 	bl	8018b48 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 80186a0:	e031      	b.n	8018706 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 80186a2:	68fb      	ldr	r3, [r7, #12]
 80186a4:	795b      	ldrb	r3, [r3, #5]
 80186a6:	2b01      	cmp	r3, #1
 80186a8:	d10e      	bne.n	80186c8 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 80186aa:	68fb      	ldr	r3, [r7, #12]
 80186ac:	799b      	ldrb	r3, [r3, #6]
 80186ae:	2b05      	cmp	r3, #5
 80186b0:	d803      	bhi.n	80186ba <dhcp_timeout+0x3e>
      dhcp_select(netif);
 80186b2:	6878      	ldr	r0, [r7, #4]
 80186b4:	f7ff fe60 	bl	8018378 <dhcp_select>
}
 80186b8:	e025      	b.n	8018706 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 80186ba:	6878      	ldr	r0, [r7, #4]
 80186bc:	f000 fdae 	bl	801921c <dhcp_release_and_stop>
      dhcp_start(netif);
 80186c0:	6878      	ldr	r0, [r7, #4]
 80186c2:	f000 f8e5 	bl	8018890 <dhcp_start>
}
 80186c6:	e01e      	b.n	8018706 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 80186c8:	68fb      	ldr	r3, [r7, #12]
 80186ca:	795b      	ldrb	r3, [r3, #5]
 80186cc:	2b08      	cmp	r3, #8
 80186ce:	d10b      	bne.n	80186e8 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 80186d0:	68fb      	ldr	r3, [r7, #12]
 80186d2:	799b      	ldrb	r3, [r3, #6]
 80186d4:	2b01      	cmp	r3, #1
 80186d6:	d803      	bhi.n	80186e0 <dhcp_timeout+0x64>
      dhcp_check(netif);
 80186d8:	6878      	ldr	r0, [r7, #4]
 80186da:	f7ff fdf3 	bl	80182c4 <dhcp_check>
}
 80186de:	e012      	b.n	8018706 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 80186e0:	6878      	ldr	r0, [r7, #4]
 80186e2:	f000 fad3 	bl	8018c8c <dhcp_bind>
}
 80186e6:	e00e      	b.n	8018706 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 80186e8:	68fb      	ldr	r3, [r7, #12]
 80186ea:	795b      	ldrb	r3, [r3, #5]
 80186ec:	2b03      	cmp	r3, #3
 80186ee:	d10a      	bne.n	8018706 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 80186f0:	68fb      	ldr	r3, [r7, #12]
 80186f2:	799b      	ldrb	r3, [r3, #6]
 80186f4:	2b01      	cmp	r3, #1
 80186f6:	d803      	bhi.n	8018700 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 80186f8:	6878      	ldr	r0, [r7, #4]
 80186fa:	f000 fcd9 	bl	80190b0 <dhcp_reboot>
}
 80186fe:	e002      	b.n	8018706 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8018700:	6878      	ldr	r0, [r7, #4]
 8018702:	f000 fa21 	bl	8018b48 <dhcp_discover>
}
 8018706:	bf00      	nop
 8018708:	3710      	adds	r7, #16
 801870a:	46bd      	mov	sp, r7
 801870c:	bd80      	pop	{r7, pc}

0801870e <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 801870e:	b580      	push	{r7, lr}
 8018710:	b084      	sub	sp, #16
 8018712:	af00      	add	r7, sp, #0
 8018714:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8018716:	687b      	ldr	r3, [r7, #4]
 8018718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801871a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801871c:	68fb      	ldr	r3, [r7, #12]
 801871e:	795b      	ldrb	r3, [r3, #5]
 8018720:	2b01      	cmp	r3, #1
 8018722:	d007      	beq.n	8018734 <dhcp_t1_timeout+0x26>
 8018724:	68fb      	ldr	r3, [r7, #12]
 8018726:	795b      	ldrb	r3, [r3, #5]
 8018728:	2b0a      	cmp	r3, #10
 801872a:	d003      	beq.n	8018734 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 801872c:	68fb      	ldr	r3, [r7, #12]
 801872e:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8018730:	2b05      	cmp	r3, #5
 8018732:	d116      	bne.n	8018762 <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8018734:	6878      	ldr	r0, [r7, #4]
 8018736:	f000 fb83 	bl	8018e40 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801873a:	68fb      	ldr	r3, [r7, #12]
 801873c:	899b      	ldrh	r3, [r3, #12]
 801873e:	461a      	mov	r2, r3
 8018740:	68fb      	ldr	r3, [r7, #12]
 8018742:	8a5b      	ldrh	r3, [r3, #18]
 8018744:	1ad3      	subs	r3, r2, r3
 8018746:	2b01      	cmp	r3, #1
 8018748:	dd0b      	ble.n	8018762 <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 801874a:	68fb      	ldr	r3, [r7, #12]
 801874c:	899b      	ldrh	r3, [r3, #12]
 801874e:	461a      	mov	r2, r3
 8018750:	68fb      	ldr	r3, [r7, #12]
 8018752:	8a5b      	ldrh	r3, [r3, #18]
 8018754:	1ad3      	subs	r3, r2, r3
 8018756:	0fda      	lsrs	r2, r3, #31
 8018758:	4413      	add	r3, r2
 801875a:	105b      	asrs	r3, r3, #1
 801875c:	b29a      	uxth	r2, r3
 801875e:	68fb      	ldr	r3, [r7, #12]
 8018760:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8018762:	bf00      	nop
 8018764:	3710      	adds	r7, #16
 8018766:	46bd      	mov	sp, r7
 8018768:	bd80      	pop	{r7, pc}

0801876a <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 801876a:	b580      	push	{r7, lr}
 801876c:	b084      	sub	sp, #16
 801876e:	af00      	add	r7, sp, #0
 8018770:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8018772:	687b      	ldr	r3, [r7, #4]
 8018774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018776:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8018778:	68fb      	ldr	r3, [r7, #12]
 801877a:	795b      	ldrb	r3, [r3, #5]
 801877c:	2b01      	cmp	r3, #1
 801877e:	d00b      	beq.n	8018798 <dhcp_t2_timeout+0x2e>
 8018780:	68fb      	ldr	r3, [r7, #12]
 8018782:	795b      	ldrb	r3, [r3, #5]
 8018784:	2b0a      	cmp	r3, #10
 8018786:	d007      	beq.n	8018798 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8018788:	68fb      	ldr	r3, [r7, #12]
 801878a:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801878c:	2b05      	cmp	r3, #5
 801878e:	d003      	beq.n	8018798 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8018790:	68fb      	ldr	r3, [r7, #12]
 8018792:	795b      	ldrb	r3, [r3, #5]
 8018794:	2b04      	cmp	r3, #4
 8018796:	d116      	bne.n	80187c6 <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8018798:	6878      	ldr	r0, [r7, #4]
 801879a:	f000 fbed 	bl	8018f78 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801879e:	68fb      	ldr	r3, [r7, #12]
 80187a0:	8a9b      	ldrh	r3, [r3, #20]
 80187a2:	461a      	mov	r2, r3
 80187a4:	68fb      	ldr	r3, [r7, #12]
 80187a6:	8a5b      	ldrh	r3, [r3, #18]
 80187a8:	1ad3      	subs	r3, r2, r3
 80187aa:	2b01      	cmp	r3, #1
 80187ac:	dd0b      	ble.n	80187c6 <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 80187ae:	68fb      	ldr	r3, [r7, #12]
 80187b0:	8a9b      	ldrh	r3, [r3, #20]
 80187b2:	461a      	mov	r2, r3
 80187b4:	68fb      	ldr	r3, [r7, #12]
 80187b6:	8a5b      	ldrh	r3, [r3, #18]
 80187b8:	1ad3      	subs	r3, r2, r3
 80187ba:	0fda      	lsrs	r2, r3, #31
 80187bc:	4413      	add	r3, r2
 80187be:	105b      	asrs	r3, r3, #1
 80187c0:	b29a      	uxth	r2, r3
 80187c2:	68fb      	ldr	r3, [r7, #12]
 80187c4:	821a      	strh	r2, [r3, #16]
    }
  }
}
 80187c6:	bf00      	nop
 80187c8:	3710      	adds	r7, #16
 80187ca:	46bd      	mov	sp, r7
 80187cc:	bd80      	pop	{r7, pc}
	...

080187d0 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 80187d0:	b580      	push	{r7, lr}
 80187d2:	b084      	sub	sp, #16
 80187d4:	af00      	add	r7, sp, #0
 80187d6:	6078      	str	r0, [r7, #4]
 80187d8:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80187da:	687b      	ldr	r3, [r7, #4]
 80187dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80187de:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80187e0:	68fb      	ldr	r3, [r7, #12]
 80187e2:	2200      	movs	r2, #0
 80187e4:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80187e6:	68fb      	ldr	r3, [r7, #12]
 80187e8:	2200      	movs	r2, #0
 80187ea:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 80187ec:	4b26      	ldr	r3, [pc, #152]	; (8018888 <dhcp_handle_ack+0xb8>)
 80187ee:	78db      	ldrb	r3, [r3, #3]
 80187f0:	2b00      	cmp	r3, #0
 80187f2:	d003      	beq.n	80187fc <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 80187f4:	4b25      	ldr	r3, [pc, #148]	; (801888c <dhcp_handle_ack+0xbc>)
 80187f6:	68da      	ldr	r2, [r3, #12]
 80187f8:	68fb      	ldr	r3, [r7, #12]
 80187fa:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 80187fc:	4b22      	ldr	r3, [pc, #136]	; (8018888 <dhcp_handle_ack+0xb8>)
 80187fe:	791b      	ldrb	r3, [r3, #4]
 8018800:	2b00      	cmp	r3, #0
 8018802:	d004      	beq.n	801880e <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8018804:	4b21      	ldr	r3, [pc, #132]	; (801888c <dhcp_handle_ack+0xbc>)
 8018806:	691a      	ldr	r2, [r3, #16]
 8018808:	68fb      	ldr	r3, [r7, #12]
 801880a:	62da      	str	r2, [r3, #44]	; 0x2c
 801880c:	e004      	b.n	8018818 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 801880e:	68fb      	ldr	r3, [r7, #12]
 8018810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018812:	085a      	lsrs	r2, r3, #1
 8018814:	68fb      	ldr	r3, [r7, #12]
 8018816:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8018818:	4b1b      	ldr	r3, [pc, #108]	; (8018888 <dhcp_handle_ack+0xb8>)
 801881a:	795b      	ldrb	r3, [r3, #5]
 801881c:	2b00      	cmp	r3, #0
 801881e:	d004      	beq.n	801882a <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8018820:	4b1a      	ldr	r3, [pc, #104]	; (801888c <dhcp_handle_ack+0xbc>)
 8018822:	695a      	ldr	r2, [r3, #20]
 8018824:	68fb      	ldr	r3, [r7, #12]
 8018826:	631a      	str	r2, [r3, #48]	; 0x30
 8018828:	e007      	b.n	801883a <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 801882a:	68fb      	ldr	r3, [r7, #12]
 801882c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801882e:	4613      	mov	r3, r2
 8018830:	00db      	lsls	r3, r3, #3
 8018832:	1a9b      	subs	r3, r3, r2
 8018834:	08da      	lsrs	r2, r3, #3
 8018836:	68fb      	ldr	r3, [r7, #12]
 8018838:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801883a:	683b      	ldr	r3, [r7, #0]
 801883c:	691a      	ldr	r2, [r3, #16]
 801883e:	68fb      	ldr	r3, [r7, #12]
 8018840:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8018842:	4b11      	ldr	r3, [pc, #68]	; (8018888 <dhcp_handle_ack+0xb8>)
 8018844:	799b      	ldrb	r3, [r3, #6]
 8018846:	2b00      	cmp	r3, #0
 8018848:	d00b      	beq.n	8018862 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 801884a:	4b10      	ldr	r3, [pc, #64]	; (801888c <dhcp_handle_ack+0xbc>)
 801884c:	699b      	ldr	r3, [r3, #24]
 801884e:	4618      	mov	r0, r3
 8018850:	f7f7 fec3 	bl	80105da <lwip_htonl>
 8018854:	4602      	mov	r2, r0
 8018856:	68fb      	ldr	r3, [r7, #12]
 8018858:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 801885a:	68fb      	ldr	r3, [r7, #12]
 801885c:	2201      	movs	r2, #1
 801885e:	71da      	strb	r2, [r3, #7]
 8018860:	e002      	b.n	8018868 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8018862:	68fb      	ldr	r3, [r7, #12]
 8018864:	2200      	movs	r2, #0
 8018866:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8018868:	4b07      	ldr	r3, [pc, #28]	; (8018888 <dhcp_handle_ack+0xb8>)
 801886a:	79db      	ldrb	r3, [r3, #7]
 801886c:	2b00      	cmp	r3, #0
 801886e:	d007      	beq.n	8018880 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8018870:	4b06      	ldr	r3, [pc, #24]	; (801888c <dhcp_handle_ack+0xbc>)
 8018872:	69db      	ldr	r3, [r3, #28]
 8018874:	4618      	mov	r0, r3
 8018876:	f7f7 feb0 	bl	80105da <lwip_htonl>
 801887a:	4602      	mov	r2, r0
 801887c:	68fb      	ldr	r3, [r7, #12]
 801887e:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8018880:	bf00      	nop
 8018882:	3710      	adds	r7, #16
 8018884:	46bd      	mov	sp, r7
 8018886:	bd80      	pop	{r7, pc}
 8018888:	2001b7f4 	.word	0x2001b7f4
 801888c:	2001b7fc 	.word	0x2001b7fc

08018890 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8018890:	b580      	push	{r7, lr}
 8018892:	b084      	sub	sp, #16
 8018894:	af00      	add	r7, sp, #0
 8018896:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8018898:	687b      	ldr	r3, [r7, #4]
 801889a:	2b00      	cmp	r3, #0
 801889c:	d109      	bne.n	80188b2 <dhcp_start+0x22>
 801889e:	4b37      	ldr	r3, [pc, #220]	; (801897c <dhcp_start+0xec>)
 80188a0:	f240 22e7 	movw	r2, #743	; 0x2e7
 80188a4:	4936      	ldr	r1, [pc, #216]	; (8018980 <dhcp_start+0xf0>)
 80188a6:	4837      	ldr	r0, [pc, #220]	; (8018984 <dhcp_start+0xf4>)
 80188a8:	f004 fdea 	bl	801d480 <iprintf>
 80188ac:	f06f 030f 	mvn.w	r3, #15
 80188b0:	e060      	b.n	8018974 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 80188b2:	687b      	ldr	r3, [r7, #4]
 80188b4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80188b8:	f003 0301 	and.w	r3, r3, #1
 80188bc:	2b00      	cmp	r3, #0
 80188be:	d109      	bne.n	80188d4 <dhcp_start+0x44>
 80188c0:	4b2e      	ldr	r3, [pc, #184]	; (801897c <dhcp_start+0xec>)
 80188c2:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 80188c6:	4930      	ldr	r1, [pc, #192]	; (8018988 <dhcp_start+0xf8>)
 80188c8:	482e      	ldr	r0, [pc, #184]	; (8018984 <dhcp_start+0xf4>)
 80188ca:	f004 fdd9 	bl	801d480 <iprintf>
 80188ce:	f06f 030f 	mvn.w	r3, #15
 80188d2:	e04f      	b.n	8018974 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 80188d4:	687b      	ldr	r3, [r7, #4]
 80188d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80188d8:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 80188da:	687b      	ldr	r3, [r7, #4]
 80188dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80188de:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 80188e2:	d202      	bcs.n	80188ea <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 80188e4:	f04f 33ff 	mov.w	r3, #4294967295
 80188e8:	e044      	b.n	8018974 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 80188ea:	68fb      	ldr	r3, [r7, #12]
 80188ec:	2b00      	cmp	r3, #0
 80188ee:	d10d      	bne.n	801890c <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 80188f0:	2034      	movs	r0, #52	; 0x34
 80188f2:	f7f8 f991 	bl	8010c18 <mem_malloc>
 80188f6:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 80188f8:	68fb      	ldr	r3, [r7, #12]
 80188fa:	2b00      	cmp	r3, #0
 80188fc:	d102      	bne.n	8018904 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 80188fe:	f04f 33ff 	mov.w	r3, #4294967295
 8018902:	e037      	b.n	8018974 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8018904:	687b      	ldr	r3, [r7, #4]
 8018906:	68fa      	ldr	r2, [r7, #12]
 8018908:	625a      	str	r2, [r3, #36]	; 0x24
 801890a:	e005      	b.n	8018918 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 801890c:	68fb      	ldr	r3, [r7, #12]
 801890e:	791b      	ldrb	r3, [r3, #4]
 8018910:	2b00      	cmp	r3, #0
 8018912:	d001      	beq.n	8018918 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8018914:	f7ff fc92 	bl	801823c <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8018918:	2234      	movs	r2, #52	; 0x34
 801891a:	2100      	movs	r1, #0
 801891c:	68f8      	ldr	r0, [r7, #12]
 801891e:	f003 ff03 	bl	801c728 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8018922:	f7ff fc39 	bl	8018198 <dhcp_inc_pcb_refcount>
 8018926:	4603      	mov	r3, r0
 8018928:	2b00      	cmp	r3, #0
 801892a:	d002      	beq.n	8018932 <dhcp_start+0xa2>
    return ERR_MEM;
 801892c:	f04f 33ff 	mov.w	r3, #4294967295
 8018930:	e020      	b.n	8018974 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 8018932:	68fb      	ldr	r3, [r7, #12]
 8018934:	2201      	movs	r2, #1
 8018936:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8018938:	687b      	ldr	r3, [r7, #4]
 801893a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801893e:	f003 0304 	and.w	r3, r3, #4
 8018942:	2b00      	cmp	r3, #0
 8018944:	d105      	bne.n	8018952 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8018946:	2102      	movs	r1, #2
 8018948:	68f8      	ldr	r0, [r7, #12]
 801894a:	f000 fd01 	bl	8019350 <dhcp_set_state>
    return ERR_OK;
 801894e:	2300      	movs	r3, #0
 8018950:	e010      	b.n	8018974 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8018952:	6878      	ldr	r0, [r7, #4]
 8018954:	f000 f8f8 	bl	8018b48 <dhcp_discover>
 8018958:	4603      	mov	r3, r0
 801895a:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 801895c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8018960:	2b00      	cmp	r3, #0
 8018962:	d005      	beq.n	8018970 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8018964:	6878      	ldr	r0, [r7, #4]
 8018966:	f000 fc59 	bl	801921c <dhcp_release_and_stop>
    return ERR_MEM;
 801896a:	f04f 33ff 	mov.w	r3, #4294967295
 801896e:	e001      	b.n	8018974 <dhcp_start+0xe4>
  }
  return result;
 8018970:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8018974:	4618      	mov	r0, r3
 8018976:	3710      	adds	r7, #16
 8018978:	46bd      	mov	sp, r7
 801897a:	bd80      	pop	{r7, pc}
 801897c:	08021b24 	.word	0x08021b24
 8018980:	08021c08 	.word	0x08021c08
 8018984:	08021b84 	.word	0x08021b84
 8018988:	08021c4c 	.word	0x08021c4c

0801898c <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 801898c:	b580      	push	{r7, lr}
 801898e:	b084      	sub	sp, #16
 8018990:	af00      	add	r7, sp, #0
 8018992:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8018994:	687b      	ldr	r3, [r7, #4]
 8018996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018998:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 801899a:	68fb      	ldr	r3, [r7, #12]
 801899c:	2b00      	cmp	r3, #0
 801899e:	d025      	beq.n	80189ec <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 80189a0:	68fb      	ldr	r3, [r7, #12]
 80189a2:	795b      	ldrb	r3, [r3, #5]
 80189a4:	2b0a      	cmp	r3, #10
 80189a6:	d008      	beq.n	80189ba <dhcp_network_changed+0x2e>
 80189a8:	2b0a      	cmp	r3, #10
 80189aa:	dc0d      	bgt.n	80189c8 <dhcp_network_changed+0x3c>
 80189ac:	2b00      	cmp	r3, #0
 80189ae:	d01f      	beq.n	80189f0 <dhcp_network_changed+0x64>
 80189b0:	2b00      	cmp	r3, #0
 80189b2:	db09      	blt.n	80189c8 <dhcp_network_changed+0x3c>
 80189b4:	3b03      	subs	r3, #3
 80189b6:	2b02      	cmp	r3, #2
 80189b8:	d806      	bhi.n	80189c8 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 80189ba:	68fb      	ldr	r3, [r7, #12]
 80189bc:	2200      	movs	r2, #0
 80189be:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 80189c0:	6878      	ldr	r0, [r7, #4]
 80189c2:	f000 fb75 	bl	80190b0 <dhcp_reboot>
      break;
 80189c6:	e014      	b.n	80189f2 <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 80189c8:	68fb      	ldr	r3, [r7, #12]
 80189ca:	795b      	ldrb	r3, [r3, #5]
 80189cc:	2b0c      	cmp	r3, #12
 80189ce:	d906      	bls.n	80189de <dhcp_network_changed+0x52>
 80189d0:	4b09      	ldr	r3, [pc, #36]	; (80189f8 <dhcp_network_changed+0x6c>)
 80189d2:	f240 326d 	movw	r2, #877	; 0x36d
 80189d6:	4909      	ldr	r1, [pc, #36]	; (80189fc <dhcp_network_changed+0x70>)
 80189d8:	4809      	ldr	r0, [pc, #36]	; (8018a00 <dhcp_network_changed+0x74>)
 80189da:	f004 fd51 	bl	801d480 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 80189de:	68fb      	ldr	r3, [r7, #12]
 80189e0:	2200      	movs	r2, #0
 80189e2:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 80189e4:	6878      	ldr	r0, [r7, #4]
 80189e6:	f000 f8af 	bl	8018b48 <dhcp_discover>
      break;
 80189ea:	e002      	b.n	80189f2 <dhcp_network_changed+0x66>
    return;
 80189ec:	bf00      	nop
 80189ee:	e000      	b.n	80189f2 <dhcp_network_changed+0x66>
      break;
 80189f0:	bf00      	nop
  }
}
 80189f2:	3710      	adds	r7, #16
 80189f4:	46bd      	mov	sp, r7
 80189f6:	bd80      	pop	{r7, pc}
 80189f8:	08021b24 	.word	0x08021b24
 80189fc:	08021c70 	.word	0x08021c70
 8018a00:	08021b84 	.word	0x08021b84

08018a04 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8018a04:	b580      	push	{r7, lr}
 8018a06:	b084      	sub	sp, #16
 8018a08:	af00      	add	r7, sp, #0
 8018a0a:	6078      	str	r0, [r7, #4]
 8018a0c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8018a0e:	687b      	ldr	r3, [r7, #4]
 8018a10:	2b00      	cmp	r3, #0
 8018a12:	d107      	bne.n	8018a24 <dhcp_arp_reply+0x20>
 8018a14:	4b0e      	ldr	r3, [pc, #56]	; (8018a50 <dhcp_arp_reply+0x4c>)
 8018a16:	f240 328b 	movw	r2, #907	; 0x38b
 8018a1a:	490e      	ldr	r1, [pc, #56]	; (8018a54 <dhcp_arp_reply+0x50>)
 8018a1c:	480e      	ldr	r0, [pc, #56]	; (8018a58 <dhcp_arp_reply+0x54>)
 8018a1e:	f004 fd2f 	bl	801d480 <iprintf>
 8018a22:	e012      	b.n	8018a4a <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8018a24:	687b      	ldr	r3, [r7, #4]
 8018a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a28:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8018a2a:	68fb      	ldr	r3, [r7, #12]
 8018a2c:	2b00      	cmp	r3, #0
 8018a2e:	d00c      	beq.n	8018a4a <dhcp_arp_reply+0x46>
 8018a30:	68fb      	ldr	r3, [r7, #12]
 8018a32:	795b      	ldrb	r3, [r3, #5]
 8018a34:	2b08      	cmp	r3, #8
 8018a36:	d108      	bne.n	8018a4a <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8018a38:	683b      	ldr	r3, [r7, #0]
 8018a3a:	681a      	ldr	r2, [r3, #0]
 8018a3c:	68fb      	ldr	r3, [r7, #12]
 8018a3e:	69db      	ldr	r3, [r3, #28]
 8018a40:	429a      	cmp	r2, r3
 8018a42:	d102      	bne.n	8018a4a <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8018a44:	6878      	ldr	r0, [r7, #4]
 8018a46:	f000 f809 	bl	8018a5c <dhcp_decline>
    }
  }
}
 8018a4a:	3710      	adds	r7, #16
 8018a4c:	46bd      	mov	sp, r7
 8018a4e:	bd80      	pop	{r7, pc}
 8018a50:	08021b24 	.word	0x08021b24
 8018a54:	08021c08 	.word	0x08021c08
 8018a58:	08021b84 	.word	0x08021b84

08018a5c <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8018a5c:	b5b0      	push	{r4, r5, r7, lr}
 8018a5e:	b08a      	sub	sp, #40	; 0x28
 8018a60:	af02      	add	r7, sp, #8
 8018a62:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8018a64:	687b      	ldr	r3, [r7, #4]
 8018a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a68:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8018a6a:	210c      	movs	r1, #12
 8018a6c:	69b8      	ldr	r0, [r7, #24]
 8018a6e:	f000 fc6f 	bl	8019350 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8018a72:	f107 030c 	add.w	r3, r7, #12
 8018a76:	2204      	movs	r2, #4
 8018a78:	69b9      	ldr	r1, [r7, #24]
 8018a7a:	6878      	ldr	r0, [r7, #4]
 8018a7c:	f001 f8f4 	bl	8019c68 <dhcp_create_msg>
 8018a80:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8018a82:	697b      	ldr	r3, [r7, #20]
 8018a84:	2b00      	cmp	r3, #0
 8018a86:	d035      	beq.n	8018af4 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8018a88:	697b      	ldr	r3, [r7, #20]
 8018a8a:	685b      	ldr	r3, [r3, #4]
 8018a8c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8018a8e:	89b8      	ldrh	r0, [r7, #12]
 8018a90:	693b      	ldr	r3, [r7, #16]
 8018a92:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8018a96:	2304      	movs	r3, #4
 8018a98:	2232      	movs	r2, #50	; 0x32
 8018a9a:	f000 fc73 	bl	8019384 <dhcp_option>
 8018a9e:	4603      	mov	r3, r0
 8018aa0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8018aa2:	89bc      	ldrh	r4, [r7, #12]
 8018aa4:	693b      	ldr	r3, [r7, #16]
 8018aa6:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8018aaa:	69bb      	ldr	r3, [r7, #24]
 8018aac:	69db      	ldr	r3, [r3, #28]
 8018aae:	4618      	mov	r0, r3
 8018ab0:	f7f7 fd93 	bl	80105da <lwip_htonl>
 8018ab4:	4603      	mov	r3, r0
 8018ab6:	461a      	mov	r2, r3
 8018ab8:	4629      	mov	r1, r5
 8018aba:	4620      	mov	r0, r4
 8018abc:	f000 fcee 	bl	801949c <dhcp_option_long>
 8018ac0:	4603      	mov	r3, r0
 8018ac2:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8018ac4:	89b8      	ldrh	r0, [r7, #12]
 8018ac6:	693b      	ldr	r3, [r7, #16]
 8018ac8:	33f0      	adds	r3, #240	; 0xf0
 8018aca:	697a      	ldr	r2, [r7, #20]
 8018acc:	4619      	mov	r1, r3
 8018ace:	f001 f9a1 	bl	8019e14 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8018ad2:	4b19      	ldr	r3, [pc, #100]	; (8018b38 <dhcp_decline+0xdc>)
 8018ad4:	6818      	ldr	r0, [r3, #0]
 8018ad6:	4b19      	ldr	r3, [pc, #100]	; (8018b3c <dhcp_decline+0xe0>)
 8018ad8:	9301      	str	r3, [sp, #4]
 8018ada:	687b      	ldr	r3, [r7, #4]
 8018adc:	9300      	str	r3, [sp, #0]
 8018ade:	2343      	movs	r3, #67	; 0x43
 8018ae0:	4a17      	ldr	r2, [pc, #92]	; (8018b40 <dhcp_decline+0xe4>)
 8018ae2:	6979      	ldr	r1, [r7, #20]
 8018ae4:	f7ff f8d2 	bl	8017c8c <udp_sendto_if_src>
 8018ae8:	4603      	mov	r3, r0
 8018aea:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8018aec:	6978      	ldr	r0, [r7, #20]
 8018aee:	f7f9 f917 	bl	8011d20 <pbuf_free>
 8018af2:	e001      	b.n	8018af8 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8018af4:	23ff      	movs	r3, #255	; 0xff
 8018af6:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8018af8:	69bb      	ldr	r3, [r7, #24]
 8018afa:	799b      	ldrb	r3, [r3, #6]
 8018afc:	2bff      	cmp	r3, #255	; 0xff
 8018afe:	d005      	beq.n	8018b0c <dhcp_decline+0xb0>
    dhcp->tries++;
 8018b00:	69bb      	ldr	r3, [r7, #24]
 8018b02:	799b      	ldrb	r3, [r3, #6]
 8018b04:	3301      	adds	r3, #1
 8018b06:	b2da      	uxtb	r2, r3
 8018b08:	69bb      	ldr	r3, [r7, #24]
 8018b0a:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8018b0c:	f242 7310 	movw	r3, #10000	; 0x2710
 8018b10:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8018b12:	89fb      	ldrh	r3, [r7, #14]
 8018b14:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8018b18:	4a0a      	ldr	r2, [pc, #40]	; (8018b44 <dhcp_decline+0xe8>)
 8018b1a:	fb82 1203 	smull	r1, r2, r2, r3
 8018b1e:	1152      	asrs	r2, r2, #5
 8018b20:	17db      	asrs	r3, r3, #31
 8018b22:	1ad3      	subs	r3, r2, r3
 8018b24:	b29a      	uxth	r2, r3
 8018b26:	69bb      	ldr	r3, [r7, #24]
 8018b28:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8018b2a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8018b2e:	4618      	mov	r0, r3
 8018b30:	3720      	adds	r7, #32
 8018b32:	46bd      	mov	sp, r7
 8018b34:	bdb0      	pop	{r4, r5, r7, pc}
 8018b36:	bf00      	nop
 8018b38:	200137f0 	.word	0x200137f0
 8018b3c:	08022788 	.word	0x08022788
 8018b40:	0802278c 	.word	0x0802278c
 8018b44:	10624dd3 	.word	0x10624dd3

08018b48 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8018b48:	b580      	push	{r7, lr}
 8018b4a:	b08a      	sub	sp, #40	; 0x28
 8018b4c:	af02      	add	r7, sp, #8
 8018b4e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8018b50:	687b      	ldr	r3, [r7, #4]
 8018b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b54:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8018b56:	2300      	movs	r3, #0
 8018b58:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8018b5a:	69bb      	ldr	r3, [r7, #24]
 8018b5c:	2200      	movs	r2, #0
 8018b5e:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8018b60:	2106      	movs	r1, #6
 8018b62:	69b8      	ldr	r0, [r7, #24]
 8018b64:	f000 fbf4 	bl	8019350 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8018b68:	f107 0308 	add.w	r3, r7, #8
 8018b6c:	2201      	movs	r2, #1
 8018b6e:	69b9      	ldr	r1, [r7, #24]
 8018b70:	6878      	ldr	r0, [r7, #4]
 8018b72:	f001 f879 	bl	8019c68 <dhcp_create_msg>
 8018b76:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8018b78:	693b      	ldr	r3, [r7, #16]
 8018b7a:	2b00      	cmp	r3, #0
 8018b7c:	d04b      	beq.n	8018c16 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8018b7e:	693b      	ldr	r3, [r7, #16]
 8018b80:	685b      	ldr	r3, [r3, #4]
 8018b82:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8018b84:	8938      	ldrh	r0, [r7, #8]
 8018b86:	68fb      	ldr	r3, [r7, #12]
 8018b88:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8018b8c:	2302      	movs	r3, #2
 8018b8e:	2239      	movs	r2, #57	; 0x39
 8018b90:	f000 fbf8 	bl	8019384 <dhcp_option>
 8018b94:	4603      	mov	r3, r0
 8018b96:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8018b98:	8938      	ldrh	r0, [r7, #8]
 8018b9a:	68fb      	ldr	r3, [r7, #12]
 8018b9c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8018ba0:	687b      	ldr	r3, [r7, #4]
 8018ba2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018ba4:	461a      	mov	r2, r3
 8018ba6:	f000 fc47 	bl	8019438 <dhcp_option_short>
 8018baa:	4603      	mov	r3, r0
 8018bac:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8018bae:	8938      	ldrh	r0, [r7, #8]
 8018bb0:	68fb      	ldr	r3, [r7, #12]
 8018bb2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8018bb6:	2303      	movs	r3, #3
 8018bb8:	2237      	movs	r2, #55	; 0x37
 8018bba:	f000 fbe3 	bl	8019384 <dhcp_option>
 8018bbe:	4603      	mov	r3, r0
 8018bc0:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8018bc2:	2300      	movs	r3, #0
 8018bc4:	77fb      	strb	r3, [r7, #31]
 8018bc6:	e00e      	b.n	8018be6 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8018bc8:	8938      	ldrh	r0, [r7, #8]
 8018bca:	68fb      	ldr	r3, [r7, #12]
 8018bcc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8018bd0:	7ffb      	ldrb	r3, [r7, #31]
 8018bd2:	4a29      	ldr	r2, [pc, #164]	; (8018c78 <dhcp_discover+0x130>)
 8018bd4:	5cd3      	ldrb	r3, [r2, r3]
 8018bd6:	461a      	mov	r2, r3
 8018bd8:	f000 fc08 	bl	80193ec <dhcp_option_byte>
 8018bdc:	4603      	mov	r3, r0
 8018bde:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8018be0:	7ffb      	ldrb	r3, [r7, #31]
 8018be2:	3301      	adds	r3, #1
 8018be4:	77fb      	strb	r3, [r7, #31]
 8018be6:	7ffb      	ldrb	r3, [r7, #31]
 8018be8:	2b02      	cmp	r3, #2
 8018bea:	d9ed      	bls.n	8018bc8 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8018bec:	8938      	ldrh	r0, [r7, #8]
 8018bee:	68fb      	ldr	r3, [r7, #12]
 8018bf0:	33f0      	adds	r3, #240	; 0xf0
 8018bf2:	693a      	ldr	r2, [r7, #16]
 8018bf4:	4619      	mov	r1, r3
 8018bf6:	f001 f90d 	bl	8019e14 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8018bfa:	4b20      	ldr	r3, [pc, #128]	; (8018c7c <dhcp_discover+0x134>)
 8018bfc:	6818      	ldr	r0, [r3, #0]
 8018bfe:	4b20      	ldr	r3, [pc, #128]	; (8018c80 <dhcp_discover+0x138>)
 8018c00:	9301      	str	r3, [sp, #4]
 8018c02:	687b      	ldr	r3, [r7, #4]
 8018c04:	9300      	str	r3, [sp, #0]
 8018c06:	2343      	movs	r3, #67	; 0x43
 8018c08:	4a1e      	ldr	r2, [pc, #120]	; (8018c84 <dhcp_discover+0x13c>)
 8018c0a:	6939      	ldr	r1, [r7, #16]
 8018c0c:	f7ff f83e 	bl	8017c8c <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8018c10:	6938      	ldr	r0, [r7, #16]
 8018c12:	f7f9 f885 	bl	8011d20 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8018c16:	69bb      	ldr	r3, [r7, #24]
 8018c18:	799b      	ldrb	r3, [r3, #6]
 8018c1a:	2bff      	cmp	r3, #255	; 0xff
 8018c1c:	d005      	beq.n	8018c2a <dhcp_discover+0xe2>
    dhcp->tries++;
 8018c1e:	69bb      	ldr	r3, [r7, #24]
 8018c20:	799b      	ldrb	r3, [r3, #6]
 8018c22:	3301      	adds	r3, #1
 8018c24:	b2da      	uxtb	r2, r3
 8018c26:	69bb      	ldr	r3, [r7, #24]
 8018c28:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8018c2a:	69bb      	ldr	r3, [r7, #24]
 8018c2c:	799b      	ldrb	r3, [r3, #6]
 8018c2e:	2b05      	cmp	r3, #5
 8018c30:	d80d      	bhi.n	8018c4e <dhcp_discover+0x106>
 8018c32:	69bb      	ldr	r3, [r7, #24]
 8018c34:	799b      	ldrb	r3, [r3, #6]
 8018c36:	461a      	mov	r2, r3
 8018c38:	2301      	movs	r3, #1
 8018c3a:	4093      	lsls	r3, r2
 8018c3c:	b29b      	uxth	r3, r3
 8018c3e:	461a      	mov	r2, r3
 8018c40:	0152      	lsls	r2, r2, #5
 8018c42:	1ad2      	subs	r2, r2, r3
 8018c44:	0092      	lsls	r2, r2, #2
 8018c46:	4413      	add	r3, r2
 8018c48:	00db      	lsls	r3, r3, #3
 8018c4a:	b29b      	uxth	r3, r3
 8018c4c:	e001      	b.n	8018c52 <dhcp_discover+0x10a>
 8018c4e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8018c52:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8018c54:	897b      	ldrh	r3, [r7, #10]
 8018c56:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8018c5a:	4a0b      	ldr	r2, [pc, #44]	; (8018c88 <dhcp_discover+0x140>)
 8018c5c:	fb82 1203 	smull	r1, r2, r2, r3
 8018c60:	1152      	asrs	r2, r2, #5
 8018c62:	17db      	asrs	r3, r3, #31
 8018c64:	1ad3      	subs	r3, r2, r3
 8018c66:	b29a      	uxth	r2, r3
 8018c68:	69bb      	ldr	r3, [r7, #24]
 8018c6a:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8018c6c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8018c70:	4618      	mov	r0, r3
 8018c72:	3720      	adds	r7, #32
 8018c74:	46bd      	mov	sp, r7
 8018c76:	bd80      	pop	{r7, pc}
 8018c78:	10000020 	.word	0x10000020
 8018c7c:	200137f0 	.word	0x200137f0
 8018c80:	08022788 	.word	0x08022788
 8018c84:	0802278c 	.word	0x0802278c
 8018c88:	10624dd3 	.word	0x10624dd3

08018c8c <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8018c8c:	b580      	push	{r7, lr}
 8018c8e:	b088      	sub	sp, #32
 8018c90:	af00      	add	r7, sp, #0
 8018c92:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8018c94:	687b      	ldr	r3, [r7, #4]
 8018c96:	2b00      	cmp	r3, #0
 8018c98:	d107      	bne.n	8018caa <dhcp_bind+0x1e>
 8018c9a:	4b64      	ldr	r3, [pc, #400]	; (8018e2c <dhcp_bind+0x1a0>)
 8018c9c:	f240 4215 	movw	r2, #1045	; 0x415
 8018ca0:	4963      	ldr	r1, [pc, #396]	; (8018e30 <dhcp_bind+0x1a4>)
 8018ca2:	4864      	ldr	r0, [pc, #400]	; (8018e34 <dhcp_bind+0x1a8>)
 8018ca4:	f004 fbec 	bl	801d480 <iprintf>
 8018ca8:	e0bc      	b.n	8018e24 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8018caa:	687b      	ldr	r3, [r7, #4]
 8018cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018cae:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8018cb0:	69bb      	ldr	r3, [r7, #24]
 8018cb2:	2b00      	cmp	r3, #0
 8018cb4:	d107      	bne.n	8018cc6 <dhcp_bind+0x3a>
 8018cb6:	4b5d      	ldr	r3, [pc, #372]	; (8018e2c <dhcp_bind+0x1a0>)
 8018cb8:	f240 4217 	movw	r2, #1047	; 0x417
 8018cbc:	495e      	ldr	r1, [pc, #376]	; (8018e38 <dhcp_bind+0x1ac>)
 8018cbe:	485d      	ldr	r0, [pc, #372]	; (8018e34 <dhcp_bind+0x1a8>)
 8018cc0:	f004 fbde 	bl	801d480 <iprintf>
 8018cc4:	e0ae      	b.n	8018e24 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8018cc6:	69bb      	ldr	r3, [r7, #24]
 8018cc8:	2200      	movs	r2, #0
 8018cca:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8018ccc:	69bb      	ldr	r3, [r7, #24]
 8018cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018cd4:	d019      	beq.n	8018d0a <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8018cd6:	69bb      	ldr	r3, [r7, #24]
 8018cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018cda:	331e      	adds	r3, #30
 8018cdc:	4a57      	ldr	r2, [pc, #348]	; (8018e3c <dhcp_bind+0x1b0>)
 8018cde:	fba2 2303 	umull	r2, r3, r2, r3
 8018ce2:	095b      	lsrs	r3, r3, #5
 8018ce4:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8018ce6:	69fb      	ldr	r3, [r7, #28]
 8018ce8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018cec:	d302      	bcc.n	8018cf4 <dhcp_bind+0x68>
      timeout = 0xffff;
 8018cee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018cf2:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8018cf4:	69fb      	ldr	r3, [r7, #28]
 8018cf6:	b29a      	uxth	r2, r3
 8018cf8:	69bb      	ldr	r3, [r7, #24]
 8018cfa:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8018cfc:	69bb      	ldr	r3, [r7, #24]
 8018cfe:	8a9b      	ldrh	r3, [r3, #20]
 8018d00:	2b00      	cmp	r3, #0
 8018d02:	d102      	bne.n	8018d0a <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8018d04:	69bb      	ldr	r3, [r7, #24]
 8018d06:	2201      	movs	r2, #1
 8018d08:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8018d0a:	69bb      	ldr	r3, [r7, #24]
 8018d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018d12:	d01d      	beq.n	8018d50 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8018d14:	69bb      	ldr	r3, [r7, #24]
 8018d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018d18:	331e      	adds	r3, #30
 8018d1a:	4a48      	ldr	r2, [pc, #288]	; (8018e3c <dhcp_bind+0x1b0>)
 8018d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8018d20:	095b      	lsrs	r3, r3, #5
 8018d22:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8018d24:	69fb      	ldr	r3, [r7, #28]
 8018d26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018d2a:	d302      	bcc.n	8018d32 <dhcp_bind+0xa6>
      timeout = 0xffff;
 8018d2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018d30:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 8018d32:	69fb      	ldr	r3, [r7, #28]
 8018d34:	b29a      	uxth	r2, r3
 8018d36:	69bb      	ldr	r3, [r7, #24]
 8018d38:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8018d3a:	69bb      	ldr	r3, [r7, #24]
 8018d3c:	895b      	ldrh	r3, [r3, #10]
 8018d3e:	2b00      	cmp	r3, #0
 8018d40:	d102      	bne.n	8018d48 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 8018d42:	69bb      	ldr	r3, [r7, #24]
 8018d44:	2201      	movs	r2, #1
 8018d46:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8018d48:	69bb      	ldr	r3, [r7, #24]
 8018d4a:	895a      	ldrh	r2, [r3, #10]
 8018d4c:	69bb      	ldr	r3, [r7, #24]
 8018d4e:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8018d50:	69bb      	ldr	r3, [r7, #24]
 8018d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018d58:	d01d      	beq.n	8018d96 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8018d5a:	69bb      	ldr	r3, [r7, #24]
 8018d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018d5e:	331e      	adds	r3, #30
 8018d60:	4a36      	ldr	r2, [pc, #216]	; (8018e3c <dhcp_bind+0x1b0>)
 8018d62:	fba2 2303 	umull	r2, r3, r2, r3
 8018d66:	095b      	lsrs	r3, r3, #5
 8018d68:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8018d6a:	69fb      	ldr	r3, [r7, #28]
 8018d6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018d70:	d302      	bcc.n	8018d78 <dhcp_bind+0xec>
      timeout = 0xffff;
 8018d72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018d76:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8018d78:	69fb      	ldr	r3, [r7, #28]
 8018d7a:	b29a      	uxth	r2, r3
 8018d7c:	69bb      	ldr	r3, [r7, #24]
 8018d7e:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8018d80:	69bb      	ldr	r3, [r7, #24]
 8018d82:	899b      	ldrh	r3, [r3, #12]
 8018d84:	2b00      	cmp	r3, #0
 8018d86:	d102      	bne.n	8018d8e <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8018d88:	69bb      	ldr	r3, [r7, #24]
 8018d8a:	2201      	movs	r2, #1
 8018d8c:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8018d8e:	69bb      	ldr	r3, [r7, #24]
 8018d90:	899a      	ldrh	r2, [r3, #12]
 8018d92:	69bb      	ldr	r3, [r7, #24]
 8018d94:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8018d96:	69bb      	ldr	r3, [r7, #24]
 8018d98:	895a      	ldrh	r2, [r3, #10]
 8018d9a:	69bb      	ldr	r3, [r7, #24]
 8018d9c:	899b      	ldrh	r3, [r3, #12]
 8018d9e:	429a      	cmp	r2, r3
 8018da0:	d306      	bcc.n	8018db0 <dhcp_bind+0x124>
 8018da2:	69bb      	ldr	r3, [r7, #24]
 8018da4:	899b      	ldrh	r3, [r3, #12]
 8018da6:	2b00      	cmp	r3, #0
 8018da8:	d002      	beq.n	8018db0 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 8018daa:	69bb      	ldr	r3, [r7, #24]
 8018dac:	2200      	movs	r2, #0
 8018dae:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8018db0:	69bb      	ldr	r3, [r7, #24]
 8018db2:	79db      	ldrb	r3, [r3, #7]
 8018db4:	2b00      	cmp	r3, #0
 8018db6:	d003      	beq.n	8018dc0 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8018db8:	69bb      	ldr	r3, [r7, #24]
 8018dba:	6a1b      	ldr	r3, [r3, #32]
 8018dbc:	613b      	str	r3, [r7, #16]
 8018dbe:	e014      	b.n	8018dea <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8018dc0:	69bb      	ldr	r3, [r7, #24]
 8018dc2:	331c      	adds	r3, #28
 8018dc4:	781b      	ldrb	r3, [r3, #0]
 8018dc6:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8018dc8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8018dcc:	2b00      	cmp	r3, #0
 8018dce:	db02      	blt.n	8018dd6 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8018dd0:	23ff      	movs	r3, #255	; 0xff
 8018dd2:	613b      	str	r3, [r7, #16]
 8018dd4:	e009      	b.n	8018dea <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 8018dd6:	7dfb      	ldrb	r3, [r7, #23]
 8018dd8:	2bbf      	cmp	r3, #191	; 0xbf
 8018dda:	d903      	bls.n	8018de4 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8018ddc:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8018de0:	613b      	str	r3, [r7, #16]
 8018de2:	e002      	b.n	8018dea <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8018de4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018de8:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8018dea:	69bb      	ldr	r3, [r7, #24]
 8018dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018dee:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8018df0:	68fb      	ldr	r3, [r7, #12]
 8018df2:	2b00      	cmp	r3, #0
 8018df4:	d108      	bne.n	8018e08 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8018df6:	69bb      	ldr	r3, [r7, #24]
 8018df8:	69da      	ldr	r2, [r3, #28]
 8018dfa:	693b      	ldr	r3, [r7, #16]
 8018dfc:	4013      	ands	r3, r2
 8018dfe:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8018e00:	68fb      	ldr	r3, [r7, #12]
 8018e02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8018e06:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8018e08:	210a      	movs	r1, #10
 8018e0a:	69b8      	ldr	r0, [r7, #24]
 8018e0c:	f000 faa0 	bl	8019350 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8018e10:	69bb      	ldr	r3, [r7, #24]
 8018e12:	f103 011c 	add.w	r1, r3, #28
 8018e16:	f107 030c 	add.w	r3, r7, #12
 8018e1a:	f107 0210 	add.w	r2, r7, #16
 8018e1e:	6878      	ldr	r0, [r7, #4]
 8018e20:	f7f8 fa70 	bl	8011304 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8018e24:	3720      	adds	r7, #32
 8018e26:	46bd      	mov	sp, r7
 8018e28:	bd80      	pop	{r7, pc}
 8018e2a:	bf00      	nop
 8018e2c:	08021b24 	.word	0x08021b24
 8018e30:	08021c84 	.word	0x08021c84
 8018e34:	08021b84 	.word	0x08021b84
 8018e38:	08021ca0 	.word	0x08021ca0
 8018e3c:	88888889 	.word	0x88888889

08018e40 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8018e40:	b580      	push	{r7, lr}
 8018e42:	b08a      	sub	sp, #40	; 0x28
 8018e44:	af02      	add	r7, sp, #8
 8018e46:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8018e48:	687b      	ldr	r3, [r7, #4]
 8018e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018e4c:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8018e4e:	2105      	movs	r1, #5
 8018e50:	69b8      	ldr	r0, [r7, #24]
 8018e52:	f000 fa7d 	bl	8019350 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8018e56:	f107 030c 	add.w	r3, r7, #12
 8018e5a:	2203      	movs	r2, #3
 8018e5c:	69b9      	ldr	r1, [r7, #24]
 8018e5e:	6878      	ldr	r0, [r7, #4]
 8018e60:	f000 ff02 	bl	8019c68 <dhcp_create_msg>
 8018e64:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8018e66:	697b      	ldr	r3, [r7, #20]
 8018e68:	2b00      	cmp	r3, #0
 8018e6a:	d04e      	beq.n	8018f0a <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8018e6c:	697b      	ldr	r3, [r7, #20]
 8018e6e:	685b      	ldr	r3, [r3, #4]
 8018e70:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8018e72:	89b8      	ldrh	r0, [r7, #12]
 8018e74:	693b      	ldr	r3, [r7, #16]
 8018e76:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8018e7a:	2302      	movs	r3, #2
 8018e7c:	2239      	movs	r2, #57	; 0x39
 8018e7e:	f000 fa81 	bl	8019384 <dhcp_option>
 8018e82:	4603      	mov	r3, r0
 8018e84:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8018e86:	89b8      	ldrh	r0, [r7, #12]
 8018e88:	693b      	ldr	r3, [r7, #16]
 8018e8a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8018e8e:	687b      	ldr	r3, [r7, #4]
 8018e90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018e92:	461a      	mov	r2, r3
 8018e94:	f000 fad0 	bl	8019438 <dhcp_option_short>
 8018e98:	4603      	mov	r3, r0
 8018e9a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8018e9c:	89b8      	ldrh	r0, [r7, #12]
 8018e9e:	693b      	ldr	r3, [r7, #16]
 8018ea0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8018ea4:	2303      	movs	r3, #3
 8018ea6:	2237      	movs	r2, #55	; 0x37
 8018ea8:	f000 fa6c 	bl	8019384 <dhcp_option>
 8018eac:	4603      	mov	r3, r0
 8018eae:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8018eb0:	2300      	movs	r3, #0
 8018eb2:	77bb      	strb	r3, [r7, #30]
 8018eb4:	e00e      	b.n	8018ed4 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8018eb6:	89b8      	ldrh	r0, [r7, #12]
 8018eb8:	693b      	ldr	r3, [r7, #16]
 8018eba:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8018ebe:	7fbb      	ldrb	r3, [r7, #30]
 8018ec0:	4a2a      	ldr	r2, [pc, #168]	; (8018f6c <dhcp_renew+0x12c>)
 8018ec2:	5cd3      	ldrb	r3, [r2, r3]
 8018ec4:	461a      	mov	r2, r3
 8018ec6:	f000 fa91 	bl	80193ec <dhcp_option_byte>
 8018eca:	4603      	mov	r3, r0
 8018ecc:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8018ece:	7fbb      	ldrb	r3, [r7, #30]
 8018ed0:	3301      	adds	r3, #1
 8018ed2:	77bb      	strb	r3, [r7, #30]
 8018ed4:	7fbb      	ldrb	r3, [r7, #30]
 8018ed6:	2b02      	cmp	r3, #2
 8018ed8:	d9ed      	bls.n	8018eb6 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8018eda:	89b8      	ldrh	r0, [r7, #12]
 8018edc:	693b      	ldr	r3, [r7, #16]
 8018ede:	33f0      	adds	r3, #240	; 0xf0
 8018ee0:	697a      	ldr	r2, [r7, #20]
 8018ee2:	4619      	mov	r1, r3
 8018ee4:	f000 ff96 	bl	8019e14 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8018ee8:	4b21      	ldr	r3, [pc, #132]	; (8018f70 <dhcp_renew+0x130>)
 8018eea:	6818      	ldr	r0, [r3, #0]
 8018eec:	69bb      	ldr	r3, [r7, #24]
 8018eee:	f103 0218 	add.w	r2, r3, #24
 8018ef2:	687b      	ldr	r3, [r7, #4]
 8018ef4:	9300      	str	r3, [sp, #0]
 8018ef6:	2343      	movs	r3, #67	; 0x43
 8018ef8:	6979      	ldr	r1, [r7, #20]
 8018efa:	f7fe fe53 	bl	8017ba4 <udp_sendto_if>
 8018efe:	4603      	mov	r3, r0
 8018f00:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8018f02:	6978      	ldr	r0, [r7, #20]
 8018f04:	f7f8 ff0c 	bl	8011d20 <pbuf_free>
 8018f08:	e001      	b.n	8018f0e <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8018f0a:	23ff      	movs	r3, #255	; 0xff
 8018f0c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8018f0e:	69bb      	ldr	r3, [r7, #24]
 8018f10:	799b      	ldrb	r3, [r3, #6]
 8018f12:	2bff      	cmp	r3, #255	; 0xff
 8018f14:	d005      	beq.n	8018f22 <dhcp_renew+0xe2>
    dhcp->tries++;
 8018f16:	69bb      	ldr	r3, [r7, #24]
 8018f18:	799b      	ldrb	r3, [r3, #6]
 8018f1a:	3301      	adds	r3, #1
 8018f1c:	b2da      	uxtb	r2, r3
 8018f1e:	69bb      	ldr	r3, [r7, #24]
 8018f20:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8018f22:	69bb      	ldr	r3, [r7, #24]
 8018f24:	799b      	ldrb	r3, [r3, #6]
 8018f26:	2b09      	cmp	r3, #9
 8018f28:	d80a      	bhi.n	8018f40 <dhcp_renew+0x100>
 8018f2a:	69bb      	ldr	r3, [r7, #24]
 8018f2c:	799b      	ldrb	r3, [r3, #6]
 8018f2e:	b29b      	uxth	r3, r3
 8018f30:	461a      	mov	r2, r3
 8018f32:	0152      	lsls	r2, r2, #5
 8018f34:	1ad2      	subs	r2, r2, r3
 8018f36:	0092      	lsls	r2, r2, #2
 8018f38:	4413      	add	r3, r2
 8018f3a:	011b      	lsls	r3, r3, #4
 8018f3c:	b29b      	uxth	r3, r3
 8018f3e:	e001      	b.n	8018f44 <dhcp_renew+0x104>
 8018f40:	f644 6320 	movw	r3, #20000	; 0x4e20
 8018f44:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8018f46:	89fb      	ldrh	r3, [r7, #14]
 8018f48:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8018f4c:	4a09      	ldr	r2, [pc, #36]	; (8018f74 <dhcp_renew+0x134>)
 8018f4e:	fb82 1203 	smull	r1, r2, r2, r3
 8018f52:	1152      	asrs	r2, r2, #5
 8018f54:	17db      	asrs	r3, r3, #31
 8018f56:	1ad3      	subs	r3, r2, r3
 8018f58:	b29a      	uxth	r2, r3
 8018f5a:	69bb      	ldr	r3, [r7, #24]
 8018f5c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8018f5e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8018f62:	4618      	mov	r0, r3
 8018f64:	3720      	adds	r7, #32
 8018f66:	46bd      	mov	sp, r7
 8018f68:	bd80      	pop	{r7, pc}
 8018f6a:	bf00      	nop
 8018f6c:	10000020 	.word	0x10000020
 8018f70:	200137f0 	.word	0x200137f0
 8018f74:	10624dd3 	.word	0x10624dd3

08018f78 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8018f78:	b580      	push	{r7, lr}
 8018f7a:	b08a      	sub	sp, #40	; 0x28
 8018f7c:	af02      	add	r7, sp, #8
 8018f7e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8018f80:	687b      	ldr	r3, [r7, #4]
 8018f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018f84:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8018f86:	2104      	movs	r1, #4
 8018f88:	69b8      	ldr	r0, [r7, #24]
 8018f8a:	f000 f9e1 	bl	8019350 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8018f8e:	f107 030c 	add.w	r3, r7, #12
 8018f92:	2203      	movs	r2, #3
 8018f94:	69b9      	ldr	r1, [r7, #24]
 8018f96:	6878      	ldr	r0, [r7, #4]
 8018f98:	f000 fe66 	bl	8019c68 <dhcp_create_msg>
 8018f9c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8018f9e:	697b      	ldr	r3, [r7, #20]
 8018fa0:	2b00      	cmp	r3, #0
 8018fa2:	d04c      	beq.n	801903e <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8018fa4:	697b      	ldr	r3, [r7, #20]
 8018fa6:	685b      	ldr	r3, [r3, #4]
 8018fa8:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8018faa:	89b8      	ldrh	r0, [r7, #12]
 8018fac:	693b      	ldr	r3, [r7, #16]
 8018fae:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8018fb2:	2302      	movs	r3, #2
 8018fb4:	2239      	movs	r2, #57	; 0x39
 8018fb6:	f000 f9e5 	bl	8019384 <dhcp_option>
 8018fba:	4603      	mov	r3, r0
 8018fbc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8018fbe:	89b8      	ldrh	r0, [r7, #12]
 8018fc0:	693b      	ldr	r3, [r7, #16]
 8018fc2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8018fc6:	687b      	ldr	r3, [r7, #4]
 8018fc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018fca:	461a      	mov	r2, r3
 8018fcc:	f000 fa34 	bl	8019438 <dhcp_option_short>
 8018fd0:	4603      	mov	r3, r0
 8018fd2:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8018fd4:	89b8      	ldrh	r0, [r7, #12]
 8018fd6:	693b      	ldr	r3, [r7, #16]
 8018fd8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8018fdc:	2303      	movs	r3, #3
 8018fde:	2237      	movs	r2, #55	; 0x37
 8018fe0:	f000 f9d0 	bl	8019384 <dhcp_option>
 8018fe4:	4603      	mov	r3, r0
 8018fe6:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8018fe8:	2300      	movs	r3, #0
 8018fea:	77bb      	strb	r3, [r7, #30]
 8018fec:	e00e      	b.n	801900c <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8018fee:	89b8      	ldrh	r0, [r7, #12]
 8018ff0:	693b      	ldr	r3, [r7, #16]
 8018ff2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8018ff6:	7fbb      	ldrb	r3, [r7, #30]
 8018ff8:	4a29      	ldr	r2, [pc, #164]	; (80190a0 <dhcp_rebind+0x128>)
 8018ffa:	5cd3      	ldrb	r3, [r2, r3]
 8018ffc:	461a      	mov	r2, r3
 8018ffe:	f000 f9f5 	bl	80193ec <dhcp_option_byte>
 8019002:	4603      	mov	r3, r0
 8019004:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8019006:	7fbb      	ldrb	r3, [r7, #30]
 8019008:	3301      	adds	r3, #1
 801900a:	77bb      	strb	r3, [r7, #30]
 801900c:	7fbb      	ldrb	r3, [r7, #30]
 801900e:	2b02      	cmp	r3, #2
 8019010:	d9ed      	bls.n	8018fee <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8019012:	89b8      	ldrh	r0, [r7, #12]
 8019014:	693b      	ldr	r3, [r7, #16]
 8019016:	33f0      	adds	r3, #240	; 0xf0
 8019018:	697a      	ldr	r2, [r7, #20]
 801901a:	4619      	mov	r1, r3
 801901c:	f000 fefa 	bl	8019e14 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8019020:	4b20      	ldr	r3, [pc, #128]	; (80190a4 <dhcp_rebind+0x12c>)
 8019022:	6818      	ldr	r0, [r3, #0]
 8019024:	687b      	ldr	r3, [r7, #4]
 8019026:	9300      	str	r3, [sp, #0]
 8019028:	2343      	movs	r3, #67	; 0x43
 801902a:	4a1f      	ldr	r2, [pc, #124]	; (80190a8 <dhcp_rebind+0x130>)
 801902c:	6979      	ldr	r1, [r7, #20]
 801902e:	f7fe fdb9 	bl	8017ba4 <udp_sendto_if>
 8019032:	4603      	mov	r3, r0
 8019034:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8019036:	6978      	ldr	r0, [r7, #20]
 8019038:	f7f8 fe72 	bl	8011d20 <pbuf_free>
 801903c:	e001      	b.n	8019042 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801903e:	23ff      	movs	r3, #255	; 0xff
 8019040:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8019042:	69bb      	ldr	r3, [r7, #24]
 8019044:	799b      	ldrb	r3, [r3, #6]
 8019046:	2bff      	cmp	r3, #255	; 0xff
 8019048:	d005      	beq.n	8019056 <dhcp_rebind+0xde>
    dhcp->tries++;
 801904a:	69bb      	ldr	r3, [r7, #24]
 801904c:	799b      	ldrb	r3, [r3, #6]
 801904e:	3301      	adds	r3, #1
 8019050:	b2da      	uxtb	r2, r3
 8019052:	69bb      	ldr	r3, [r7, #24]
 8019054:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8019056:	69bb      	ldr	r3, [r7, #24]
 8019058:	799b      	ldrb	r3, [r3, #6]
 801905a:	2b09      	cmp	r3, #9
 801905c:	d80a      	bhi.n	8019074 <dhcp_rebind+0xfc>
 801905e:	69bb      	ldr	r3, [r7, #24]
 8019060:	799b      	ldrb	r3, [r3, #6]
 8019062:	b29b      	uxth	r3, r3
 8019064:	461a      	mov	r2, r3
 8019066:	0152      	lsls	r2, r2, #5
 8019068:	1ad2      	subs	r2, r2, r3
 801906a:	0092      	lsls	r2, r2, #2
 801906c:	4413      	add	r3, r2
 801906e:	00db      	lsls	r3, r3, #3
 8019070:	b29b      	uxth	r3, r3
 8019072:	e001      	b.n	8019078 <dhcp_rebind+0x100>
 8019074:	f242 7310 	movw	r3, #10000	; 0x2710
 8019078:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801907a:	89fb      	ldrh	r3, [r7, #14]
 801907c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8019080:	4a0a      	ldr	r2, [pc, #40]	; (80190ac <dhcp_rebind+0x134>)
 8019082:	fb82 1203 	smull	r1, r2, r2, r3
 8019086:	1152      	asrs	r2, r2, #5
 8019088:	17db      	asrs	r3, r3, #31
 801908a:	1ad3      	subs	r3, r2, r3
 801908c:	b29a      	uxth	r2, r3
 801908e:	69bb      	ldr	r3, [r7, #24]
 8019090:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8019092:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8019096:	4618      	mov	r0, r3
 8019098:	3720      	adds	r7, #32
 801909a:	46bd      	mov	sp, r7
 801909c:	bd80      	pop	{r7, pc}
 801909e:	bf00      	nop
 80190a0:	10000020 	.word	0x10000020
 80190a4:	200137f0 	.word	0x200137f0
 80190a8:	0802278c 	.word	0x0802278c
 80190ac:	10624dd3 	.word	0x10624dd3

080190b0 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 80190b0:	b5b0      	push	{r4, r5, r7, lr}
 80190b2:	b08a      	sub	sp, #40	; 0x28
 80190b4:	af02      	add	r7, sp, #8
 80190b6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80190b8:	687b      	ldr	r3, [r7, #4]
 80190ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80190bc:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 80190be:	2103      	movs	r1, #3
 80190c0:	69b8      	ldr	r0, [r7, #24]
 80190c2:	f000 f945 	bl	8019350 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80190c6:	f107 030c 	add.w	r3, r7, #12
 80190ca:	2203      	movs	r2, #3
 80190cc:	69b9      	ldr	r1, [r7, #24]
 80190ce:	6878      	ldr	r0, [r7, #4]
 80190d0:	f000 fdca 	bl	8019c68 <dhcp_create_msg>
 80190d4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80190d6:	697b      	ldr	r3, [r7, #20]
 80190d8:	2b00      	cmp	r3, #0
 80190da:	d066      	beq.n	80191aa <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80190dc:	697b      	ldr	r3, [r7, #20]
 80190de:	685b      	ldr	r3, [r3, #4]
 80190e0:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80190e2:	89b8      	ldrh	r0, [r7, #12]
 80190e4:	693b      	ldr	r3, [r7, #16]
 80190e6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80190ea:	2302      	movs	r3, #2
 80190ec:	2239      	movs	r2, #57	; 0x39
 80190ee:	f000 f949 	bl	8019384 <dhcp_option>
 80190f2:	4603      	mov	r3, r0
 80190f4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 80190f6:	89b8      	ldrh	r0, [r7, #12]
 80190f8:	693b      	ldr	r3, [r7, #16]
 80190fa:	33f0      	adds	r3, #240	; 0xf0
 80190fc:	f44f 7210 	mov.w	r2, #576	; 0x240
 8019100:	4619      	mov	r1, r3
 8019102:	f000 f999 	bl	8019438 <dhcp_option_short>
 8019106:	4603      	mov	r3, r0
 8019108:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801910a:	89b8      	ldrh	r0, [r7, #12]
 801910c:	693b      	ldr	r3, [r7, #16]
 801910e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8019112:	2304      	movs	r3, #4
 8019114:	2232      	movs	r2, #50	; 0x32
 8019116:	f000 f935 	bl	8019384 <dhcp_option>
 801911a:	4603      	mov	r3, r0
 801911c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801911e:	89bc      	ldrh	r4, [r7, #12]
 8019120:	693b      	ldr	r3, [r7, #16]
 8019122:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8019126:	69bb      	ldr	r3, [r7, #24]
 8019128:	69db      	ldr	r3, [r3, #28]
 801912a:	4618      	mov	r0, r3
 801912c:	f7f7 fa55 	bl	80105da <lwip_htonl>
 8019130:	4603      	mov	r3, r0
 8019132:	461a      	mov	r2, r3
 8019134:	4629      	mov	r1, r5
 8019136:	4620      	mov	r0, r4
 8019138:	f000 f9b0 	bl	801949c <dhcp_option_long>
 801913c:	4603      	mov	r3, r0
 801913e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8019140:	89b8      	ldrh	r0, [r7, #12]
 8019142:	693b      	ldr	r3, [r7, #16]
 8019144:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8019148:	2303      	movs	r3, #3
 801914a:	2237      	movs	r2, #55	; 0x37
 801914c:	f000 f91a 	bl	8019384 <dhcp_option>
 8019150:	4603      	mov	r3, r0
 8019152:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8019154:	2300      	movs	r3, #0
 8019156:	77bb      	strb	r3, [r7, #30]
 8019158:	e00e      	b.n	8019178 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801915a:	89b8      	ldrh	r0, [r7, #12]
 801915c:	693b      	ldr	r3, [r7, #16]
 801915e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8019162:	7fbb      	ldrb	r3, [r7, #30]
 8019164:	4a29      	ldr	r2, [pc, #164]	; (801920c <dhcp_reboot+0x15c>)
 8019166:	5cd3      	ldrb	r3, [r2, r3]
 8019168:	461a      	mov	r2, r3
 801916a:	f000 f93f 	bl	80193ec <dhcp_option_byte>
 801916e:	4603      	mov	r3, r0
 8019170:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8019172:	7fbb      	ldrb	r3, [r7, #30]
 8019174:	3301      	adds	r3, #1
 8019176:	77bb      	strb	r3, [r7, #30]
 8019178:	7fbb      	ldrb	r3, [r7, #30]
 801917a:	2b02      	cmp	r3, #2
 801917c:	d9ed      	bls.n	801915a <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801917e:	89b8      	ldrh	r0, [r7, #12]
 8019180:	693b      	ldr	r3, [r7, #16]
 8019182:	33f0      	adds	r3, #240	; 0xf0
 8019184:	697a      	ldr	r2, [r7, #20]
 8019186:	4619      	mov	r1, r3
 8019188:	f000 fe44 	bl	8019e14 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801918c:	4b20      	ldr	r3, [pc, #128]	; (8019210 <dhcp_reboot+0x160>)
 801918e:	6818      	ldr	r0, [r3, #0]
 8019190:	687b      	ldr	r3, [r7, #4]
 8019192:	9300      	str	r3, [sp, #0]
 8019194:	2343      	movs	r3, #67	; 0x43
 8019196:	4a1f      	ldr	r2, [pc, #124]	; (8019214 <dhcp_reboot+0x164>)
 8019198:	6979      	ldr	r1, [r7, #20]
 801919a:	f7fe fd03 	bl	8017ba4 <udp_sendto_if>
 801919e:	4603      	mov	r3, r0
 80191a0:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80191a2:	6978      	ldr	r0, [r7, #20]
 80191a4:	f7f8 fdbc 	bl	8011d20 <pbuf_free>
 80191a8:	e001      	b.n	80191ae <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80191aa:	23ff      	movs	r3, #255	; 0xff
 80191ac:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80191ae:	69bb      	ldr	r3, [r7, #24]
 80191b0:	799b      	ldrb	r3, [r3, #6]
 80191b2:	2bff      	cmp	r3, #255	; 0xff
 80191b4:	d005      	beq.n	80191c2 <dhcp_reboot+0x112>
    dhcp->tries++;
 80191b6:	69bb      	ldr	r3, [r7, #24]
 80191b8:	799b      	ldrb	r3, [r3, #6]
 80191ba:	3301      	adds	r3, #1
 80191bc:	b2da      	uxtb	r2, r3
 80191be:	69bb      	ldr	r3, [r7, #24]
 80191c0:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80191c2:	69bb      	ldr	r3, [r7, #24]
 80191c4:	799b      	ldrb	r3, [r3, #6]
 80191c6:	2b09      	cmp	r3, #9
 80191c8:	d80a      	bhi.n	80191e0 <dhcp_reboot+0x130>
 80191ca:	69bb      	ldr	r3, [r7, #24]
 80191cc:	799b      	ldrb	r3, [r3, #6]
 80191ce:	b29b      	uxth	r3, r3
 80191d0:	461a      	mov	r2, r3
 80191d2:	0152      	lsls	r2, r2, #5
 80191d4:	1ad2      	subs	r2, r2, r3
 80191d6:	0092      	lsls	r2, r2, #2
 80191d8:	4413      	add	r3, r2
 80191da:	00db      	lsls	r3, r3, #3
 80191dc:	b29b      	uxth	r3, r3
 80191de:	e001      	b.n	80191e4 <dhcp_reboot+0x134>
 80191e0:	f242 7310 	movw	r3, #10000	; 0x2710
 80191e4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80191e6:	89fb      	ldrh	r3, [r7, #14]
 80191e8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80191ec:	4a0a      	ldr	r2, [pc, #40]	; (8019218 <dhcp_reboot+0x168>)
 80191ee:	fb82 1203 	smull	r1, r2, r2, r3
 80191f2:	1152      	asrs	r2, r2, #5
 80191f4:	17db      	asrs	r3, r3, #31
 80191f6:	1ad3      	subs	r3, r2, r3
 80191f8:	b29a      	uxth	r2, r3
 80191fa:	69bb      	ldr	r3, [r7, #24]
 80191fc:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80191fe:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8019202:	4618      	mov	r0, r3
 8019204:	3720      	adds	r7, #32
 8019206:	46bd      	mov	sp, r7
 8019208:	bdb0      	pop	{r4, r5, r7, pc}
 801920a:	bf00      	nop
 801920c:	10000020 	.word	0x10000020
 8019210:	200137f0 	.word	0x200137f0
 8019214:	0802278c 	.word	0x0802278c
 8019218:	10624dd3 	.word	0x10624dd3

0801921c <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 801921c:	b5b0      	push	{r4, r5, r7, lr}
 801921e:	b08a      	sub	sp, #40	; 0x28
 8019220:	af02      	add	r7, sp, #8
 8019222:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019224:	687b      	ldr	r3, [r7, #4]
 8019226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019228:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 801922a:	69fb      	ldr	r3, [r7, #28]
 801922c:	2b00      	cmp	r3, #0
 801922e:	f000 8084 	beq.w	801933a <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8019232:	69fb      	ldr	r3, [r7, #28]
 8019234:	795b      	ldrb	r3, [r3, #5]
 8019236:	2b00      	cmp	r3, #0
 8019238:	f000 8081 	beq.w	801933e <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 801923c:	69fb      	ldr	r3, [r7, #28]
 801923e:	699b      	ldr	r3, [r3, #24]
 8019240:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8019242:	69fb      	ldr	r3, [r7, #28]
 8019244:	2200      	movs	r2, #0
 8019246:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8019248:	69fb      	ldr	r3, [r7, #28]
 801924a:	2200      	movs	r2, #0
 801924c:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801924e:	69fb      	ldr	r3, [r7, #28]
 8019250:	2200      	movs	r2, #0
 8019252:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8019254:	69fb      	ldr	r3, [r7, #28]
 8019256:	2200      	movs	r2, #0
 8019258:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 801925a:	69fb      	ldr	r3, [r7, #28]
 801925c:	2200      	movs	r2, #0
 801925e:	631a      	str	r2, [r3, #48]	; 0x30
 8019260:	69fb      	ldr	r3, [r7, #28]
 8019262:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8019264:	69fb      	ldr	r3, [r7, #28]
 8019266:	62da      	str	r2, [r3, #44]	; 0x2c
 8019268:	69fb      	ldr	r3, [r7, #28]
 801926a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801926c:	69fb      	ldr	r3, [r7, #28]
 801926e:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8019270:	69fb      	ldr	r3, [r7, #28]
 8019272:	2200      	movs	r2, #0
 8019274:	829a      	strh	r2, [r3, #20]
 8019276:	69fb      	ldr	r3, [r7, #28]
 8019278:	8a9a      	ldrh	r2, [r3, #20]
 801927a:	69fb      	ldr	r3, [r7, #28]
 801927c:	825a      	strh	r2, [r3, #18]
 801927e:	69fb      	ldr	r3, [r7, #28]
 8019280:	8a5a      	ldrh	r2, [r3, #18]
 8019282:	69fb      	ldr	r3, [r7, #28]
 8019284:	821a      	strh	r2, [r3, #16]
 8019286:	69fb      	ldr	r3, [r7, #28]
 8019288:	8a1a      	ldrh	r2, [r3, #16]
 801928a:	69fb      	ldr	r3, [r7, #28]
 801928c:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 801928e:	6878      	ldr	r0, [r7, #4]
 8019290:	f000 fdee 	bl	8019e70 <dhcp_supplied_address>
 8019294:	4603      	mov	r3, r0
 8019296:	2b00      	cmp	r3, #0
 8019298:	d03b      	beq.n	8019312 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 801929a:	f107 030e 	add.w	r3, r7, #14
 801929e:	2207      	movs	r2, #7
 80192a0:	69f9      	ldr	r1, [r7, #28]
 80192a2:	6878      	ldr	r0, [r7, #4]
 80192a4:	f000 fce0 	bl	8019c68 <dhcp_create_msg>
 80192a8:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 80192aa:	69bb      	ldr	r3, [r7, #24]
 80192ac:	2b00      	cmp	r3, #0
 80192ae:	d030      	beq.n	8019312 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80192b0:	69bb      	ldr	r3, [r7, #24]
 80192b2:	685b      	ldr	r3, [r3, #4]
 80192b4:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80192b6:	89f8      	ldrh	r0, [r7, #14]
 80192b8:	697b      	ldr	r3, [r7, #20]
 80192ba:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80192be:	2304      	movs	r3, #4
 80192c0:	2236      	movs	r2, #54	; 0x36
 80192c2:	f000 f85f 	bl	8019384 <dhcp_option>
 80192c6:	4603      	mov	r3, r0
 80192c8:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 80192ca:	89fc      	ldrh	r4, [r7, #14]
 80192cc:	697b      	ldr	r3, [r7, #20]
 80192ce:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80192d2:	693b      	ldr	r3, [r7, #16]
 80192d4:	4618      	mov	r0, r3
 80192d6:	f7f7 f980 	bl	80105da <lwip_htonl>
 80192da:	4603      	mov	r3, r0
 80192dc:	461a      	mov	r2, r3
 80192de:	4629      	mov	r1, r5
 80192e0:	4620      	mov	r0, r4
 80192e2:	f000 f8db 	bl	801949c <dhcp_option_long>
 80192e6:	4603      	mov	r3, r0
 80192e8:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80192ea:	89f8      	ldrh	r0, [r7, #14]
 80192ec:	697b      	ldr	r3, [r7, #20]
 80192ee:	33f0      	adds	r3, #240	; 0xf0
 80192f0:	69ba      	ldr	r2, [r7, #24]
 80192f2:	4619      	mov	r1, r3
 80192f4:	f000 fd8e 	bl	8019e14 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80192f8:	4b13      	ldr	r3, [pc, #76]	; (8019348 <dhcp_release_and_stop+0x12c>)
 80192fa:	6818      	ldr	r0, [r3, #0]
 80192fc:	f107 0210 	add.w	r2, r7, #16
 8019300:	687b      	ldr	r3, [r7, #4]
 8019302:	9300      	str	r3, [sp, #0]
 8019304:	2343      	movs	r3, #67	; 0x43
 8019306:	69b9      	ldr	r1, [r7, #24]
 8019308:	f7fe fc4c 	bl	8017ba4 <udp_sendto_if>
      pbuf_free(p_out);
 801930c:	69b8      	ldr	r0, [r7, #24]
 801930e:	f7f8 fd07 	bl	8011d20 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8019312:	4b0e      	ldr	r3, [pc, #56]	; (801934c <dhcp_release_and_stop+0x130>)
 8019314:	4a0d      	ldr	r2, [pc, #52]	; (801934c <dhcp_release_and_stop+0x130>)
 8019316:	490d      	ldr	r1, [pc, #52]	; (801934c <dhcp_release_and_stop+0x130>)
 8019318:	6878      	ldr	r0, [r7, #4]
 801931a:	f7f7 fff3 	bl	8011304 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 801931e:	2100      	movs	r1, #0
 8019320:	69f8      	ldr	r0, [r7, #28]
 8019322:	f000 f815 	bl	8019350 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8019326:	69fb      	ldr	r3, [r7, #28]
 8019328:	791b      	ldrb	r3, [r3, #4]
 801932a:	2b00      	cmp	r3, #0
 801932c:	d008      	beq.n	8019340 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801932e:	f7fe ff85 	bl	801823c <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8019332:	69fb      	ldr	r3, [r7, #28]
 8019334:	2200      	movs	r2, #0
 8019336:	711a      	strb	r2, [r3, #4]
 8019338:	e002      	b.n	8019340 <dhcp_release_and_stop+0x124>
    return;
 801933a:	bf00      	nop
 801933c:	e000      	b.n	8019340 <dhcp_release_and_stop+0x124>
    return;
 801933e:	bf00      	nop
  }
}
 8019340:	3720      	adds	r7, #32
 8019342:	46bd      	mov	sp, r7
 8019344:	bdb0      	pop	{r4, r5, r7, pc}
 8019346:	bf00      	nop
 8019348:	200137f0 	.word	0x200137f0
 801934c:	08022788 	.word	0x08022788

08019350 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8019350:	b480      	push	{r7}
 8019352:	b083      	sub	sp, #12
 8019354:	af00      	add	r7, sp, #0
 8019356:	6078      	str	r0, [r7, #4]
 8019358:	460b      	mov	r3, r1
 801935a:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 801935c:	687b      	ldr	r3, [r7, #4]
 801935e:	795b      	ldrb	r3, [r3, #5]
 8019360:	78fa      	ldrb	r2, [r7, #3]
 8019362:	429a      	cmp	r2, r3
 8019364:	d008      	beq.n	8019378 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8019366:	687b      	ldr	r3, [r7, #4]
 8019368:	78fa      	ldrb	r2, [r7, #3]
 801936a:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 801936c:	687b      	ldr	r3, [r7, #4]
 801936e:	2200      	movs	r2, #0
 8019370:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8019372:	687b      	ldr	r3, [r7, #4]
 8019374:	2200      	movs	r2, #0
 8019376:	811a      	strh	r2, [r3, #8]
  }
}
 8019378:	bf00      	nop
 801937a:	370c      	adds	r7, #12
 801937c:	46bd      	mov	sp, r7
 801937e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019382:	4770      	bx	lr

08019384 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8019384:	b580      	push	{r7, lr}
 8019386:	b082      	sub	sp, #8
 8019388:	af00      	add	r7, sp, #0
 801938a:	6039      	str	r1, [r7, #0]
 801938c:	4611      	mov	r1, r2
 801938e:	461a      	mov	r2, r3
 8019390:	4603      	mov	r3, r0
 8019392:	80fb      	strh	r3, [r7, #6]
 8019394:	460b      	mov	r3, r1
 8019396:	717b      	strb	r3, [r7, #5]
 8019398:	4613      	mov	r3, r2
 801939a:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801939c:	88fa      	ldrh	r2, [r7, #6]
 801939e:	793b      	ldrb	r3, [r7, #4]
 80193a0:	4413      	add	r3, r2
 80193a2:	3302      	adds	r3, #2
 80193a4:	2b44      	cmp	r3, #68	; 0x44
 80193a6:	d906      	bls.n	80193b6 <dhcp_option+0x32>
 80193a8:	4b0d      	ldr	r3, [pc, #52]	; (80193e0 <dhcp_option+0x5c>)
 80193aa:	f240 529a 	movw	r2, #1434	; 0x59a
 80193ae:	490d      	ldr	r1, [pc, #52]	; (80193e4 <dhcp_option+0x60>)
 80193b0:	480d      	ldr	r0, [pc, #52]	; (80193e8 <dhcp_option+0x64>)
 80193b2:	f004 f865 	bl	801d480 <iprintf>
  options[options_out_len++] = option_type;
 80193b6:	88fb      	ldrh	r3, [r7, #6]
 80193b8:	1c5a      	adds	r2, r3, #1
 80193ba:	80fa      	strh	r2, [r7, #6]
 80193bc:	461a      	mov	r2, r3
 80193be:	683b      	ldr	r3, [r7, #0]
 80193c0:	4413      	add	r3, r2
 80193c2:	797a      	ldrb	r2, [r7, #5]
 80193c4:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 80193c6:	88fb      	ldrh	r3, [r7, #6]
 80193c8:	1c5a      	adds	r2, r3, #1
 80193ca:	80fa      	strh	r2, [r7, #6]
 80193cc:	461a      	mov	r2, r3
 80193ce:	683b      	ldr	r3, [r7, #0]
 80193d0:	4413      	add	r3, r2
 80193d2:	793a      	ldrb	r2, [r7, #4]
 80193d4:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80193d6:	88fb      	ldrh	r3, [r7, #6]
}
 80193d8:	4618      	mov	r0, r3
 80193da:	3708      	adds	r7, #8
 80193dc:	46bd      	mov	sp, r7
 80193de:	bd80      	pop	{r7, pc}
 80193e0:	08021b24 	.word	0x08021b24
 80193e4:	08021cb8 	.word	0x08021cb8
 80193e8:	08021b84 	.word	0x08021b84

080193ec <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 80193ec:	b580      	push	{r7, lr}
 80193ee:	b082      	sub	sp, #8
 80193f0:	af00      	add	r7, sp, #0
 80193f2:	4603      	mov	r3, r0
 80193f4:	6039      	str	r1, [r7, #0]
 80193f6:	80fb      	strh	r3, [r7, #6]
 80193f8:	4613      	mov	r3, r2
 80193fa:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 80193fc:	88fb      	ldrh	r3, [r7, #6]
 80193fe:	2b43      	cmp	r3, #67	; 0x43
 8019400:	d906      	bls.n	8019410 <dhcp_option_byte+0x24>
 8019402:	4b0a      	ldr	r3, [pc, #40]	; (801942c <dhcp_option_byte+0x40>)
 8019404:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8019408:	4909      	ldr	r1, [pc, #36]	; (8019430 <dhcp_option_byte+0x44>)
 801940a:	480a      	ldr	r0, [pc, #40]	; (8019434 <dhcp_option_byte+0x48>)
 801940c:	f004 f838 	bl	801d480 <iprintf>
  options[options_out_len++] = value;
 8019410:	88fb      	ldrh	r3, [r7, #6]
 8019412:	1c5a      	adds	r2, r3, #1
 8019414:	80fa      	strh	r2, [r7, #6]
 8019416:	461a      	mov	r2, r3
 8019418:	683b      	ldr	r3, [r7, #0]
 801941a:	4413      	add	r3, r2
 801941c:	797a      	ldrb	r2, [r7, #5]
 801941e:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8019420:	88fb      	ldrh	r3, [r7, #6]
}
 8019422:	4618      	mov	r0, r3
 8019424:	3708      	adds	r7, #8
 8019426:	46bd      	mov	sp, r7
 8019428:	bd80      	pop	{r7, pc}
 801942a:	bf00      	nop
 801942c:	08021b24 	.word	0x08021b24
 8019430:	08021cfc 	.word	0x08021cfc
 8019434:	08021b84 	.word	0x08021b84

08019438 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8019438:	b580      	push	{r7, lr}
 801943a:	b082      	sub	sp, #8
 801943c:	af00      	add	r7, sp, #0
 801943e:	4603      	mov	r3, r0
 8019440:	6039      	str	r1, [r7, #0]
 8019442:	80fb      	strh	r3, [r7, #6]
 8019444:	4613      	mov	r3, r2
 8019446:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8019448:	88fb      	ldrh	r3, [r7, #6]
 801944a:	3302      	adds	r3, #2
 801944c:	2b44      	cmp	r3, #68	; 0x44
 801944e:	d906      	bls.n	801945e <dhcp_option_short+0x26>
 8019450:	4b0f      	ldr	r3, [pc, #60]	; (8019490 <dhcp_option_short+0x58>)
 8019452:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8019456:	490f      	ldr	r1, [pc, #60]	; (8019494 <dhcp_option_short+0x5c>)
 8019458:	480f      	ldr	r0, [pc, #60]	; (8019498 <dhcp_option_short+0x60>)
 801945a:	f004 f811 	bl	801d480 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 801945e:	88bb      	ldrh	r3, [r7, #4]
 8019460:	0a1b      	lsrs	r3, r3, #8
 8019462:	b29a      	uxth	r2, r3
 8019464:	88fb      	ldrh	r3, [r7, #6]
 8019466:	1c59      	adds	r1, r3, #1
 8019468:	80f9      	strh	r1, [r7, #6]
 801946a:	4619      	mov	r1, r3
 801946c:	683b      	ldr	r3, [r7, #0]
 801946e:	440b      	add	r3, r1
 8019470:	b2d2      	uxtb	r2, r2
 8019472:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8019474:	88fb      	ldrh	r3, [r7, #6]
 8019476:	1c5a      	adds	r2, r3, #1
 8019478:	80fa      	strh	r2, [r7, #6]
 801947a:	461a      	mov	r2, r3
 801947c:	683b      	ldr	r3, [r7, #0]
 801947e:	4413      	add	r3, r2
 8019480:	88ba      	ldrh	r2, [r7, #4]
 8019482:	b2d2      	uxtb	r2, r2
 8019484:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8019486:	88fb      	ldrh	r3, [r7, #6]
}
 8019488:	4618      	mov	r0, r3
 801948a:	3708      	adds	r7, #8
 801948c:	46bd      	mov	sp, r7
 801948e:	bd80      	pop	{r7, pc}
 8019490:	08021b24 	.word	0x08021b24
 8019494:	08021d34 	.word	0x08021d34
 8019498:	08021b84 	.word	0x08021b84

0801949c <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 801949c:	b580      	push	{r7, lr}
 801949e:	b084      	sub	sp, #16
 80194a0:	af00      	add	r7, sp, #0
 80194a2:	4603      	mov	r3, r0
 80194a4:	60b9      	str	r1, [r7, #8]
 80194a6:	607a      	str	r2, [r7, #4]
 80194a8:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 80194aa:	89fb      	ldrh	r3, [r7, #14]
 80194ac:	3304      	adds	r3, #4
 80194ae:	2b44      	cmp	r3, #68	; 0x44
 80194b0:	d906      	bls.n	80194c0 <dhcp_option_long+0x24>
 80194b2:	4b19      	ldr	r3, [pc, #100]	; (8019518 <dhcp_option_long+0x7c>)
 80194b4:	f240 52b7 	movw	r2, #1463	; 0x5b7
 80194b8:	4918      	ldr	r1, [pc, #96]	; (801951c <dhcp_option_long+0x80>)
 80194ba:	4819      	ldr	r0, [pc, #100]	; (8019520 <dhcp_option_long+0x84>)
 80194bc:	f003 ffe0 	bl	801d480 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 80194c0:	687b      	ldr	r3, [r7, #4]
 80194c2:	0e1a      	lsrs	r2, r3, #24
 80194c4:	89fb      	ldrh	r3, [r7, #14]
 80194c6:	1c59      	adds	r1, r3, #1
 80194c8:	81f9      	strh	r1, [r7, #14]
 80194ca:	4619      	mov	r1, r3
 80194cc:	68bb      	ldr	r3, [r7, #8]
 80194ce:	440b      	add	r3, r1
 80194d0:	b2d2      	uxtb	r2, r2
 80194d2:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 80194d4:	687b      	ldr	r3, [r7, #4]
 80194d6:	0c1a      	lsrs	r2, r3, #16
 80194d8:	89fb      	ldrh	r3, [r7, #14]
 80194da:	1c59      	adds	r1, r3, #1
 80194dc:	81f9      	strh	r1, [r7, #14]
 80194de:	4619      	mov	r1, r3
 80194e0:	68bb      	ldr	r3, [r7, #8]
 80194e2:	440b      	add	r3, r1
 80194e4:	b2d2      	uxtb	r2, r2
 80194e6:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 80194e8:	687b      	ldr	r3, [r7, #4]
 80194ea:	0a1a      	lsrs	r2, r3, #8
 80194ec:	89fb      	ldrh	r3, [r7, #14]
 80194ee:	1c59      	adds	r1, r3, #1
 80194f0:	81f9      	strh	r1, [r7, #14]
 80194f2:	4619      	mov	r1, r3
 80194f4:	68bb      	ldr	r3, [r7, #8]
 80194f6:	440b      	add	r3, r1
 80194f8:	b2d2      	uxtb	r2, r2
 80194fa:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 80194fc:	89fb      	ldrh	r3, [r7, #14]
 80194fe:	1c5a      	adds	r2, r3, #1
 8019500:	81fa      	strh	r2, [r7, #14]
 8019502:	461a      	mov	r2, r3
 8019504:	68bb      	ldr	r3, [r7, #8]
 8019506:	4413      	add	r3, r2
 8019508:	687a      	ldr	r2, [r7, #4]
 801950a:	b2d2      	uxtb	r2, r2
 801950c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801950e:	89fb      	ldrh	r3, [r7, #14]
}
 8019510:	4618      	mov	r0, r3
 8019512:	3710      	adds	r7, #16
 8019514:	46bd      	mov	sp, r7
 8019516:	bd80      	pop	{r7, pc}
 8019518:	08021b24 	.word	0x08021b24
 801951c:	08021d70 	.word	0x08021d70
 8019520:	08021b84 	.word	0x08021b84

08019524 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8019524:	b580      	push	{r7, lr}
 8019526:	b090      	sub	sp, #64	; 0x40
 8019528:	af00      	add	r7, sp, #0
 801952a:	6078      	str	r0, [r7, #4]
 801952c:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 801952e:	2300      	movs	r3, #0
 8019530:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 8019532:	2300      	movs	r3, #0
 8019534:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8019536:	2208      	movs	r2, #8
 8019538:	2100      	movs	r1, #0
 801953a:	48b5      	ldr	r0, [pc, #724]	; (8019810 <dhcp_parse_reply+0x2ec>)
 801953c:	f003 f8f4 	bl	801c728 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8019540:	687b      	ldr	r3, [r7, #4]
 8019542:	895b      	ldrh	r3, [r3, #10]
 8019544:	2b2b      	cmp	r3, #43	; 0x2b
 8019546:	d802      	bhi.n	801954e <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8019548:	f06f 0301 	mvn.w	r3, #1
 801954c:	e2a7      	b.n	8019a9e <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 801954e:	687b      	ldr	r3, [r7, #4]
 8019550:	685b      	ldr	r3, [r3, #4]
 8019552:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8019554:	23f0      	movs	r3, #240	; 0xf0
 8019556:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8019558:	687b      	ldr	r3, [r7, #4]
 801955a:	891b      	ldrh	r3, [r3, #8]
 801955c:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 801955e:	687b      	ldr	r3, [r7, #4]
 8019560:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8019562:	e00c      	b.n	801957e <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8019564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019566:	895b      	ldrh	r3, [r3, #10]
 8019568:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801956a:	1ad3      	subs	r3, r2, r3
 801956c:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 801956e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019570:	895b      	ldrh	r3, [r3, #10]
 8019572:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8019574:	1ad3      	subs	r3, r2, r3
 8019576:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 8019578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801957a:	681b      	ldr	r3, [r3, #0]
 801957c:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 801957e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019580:	2b00      	cmp	r3, #0
 8019582:	d004      	beq.n	801958e <dhcp_parse_reply+0x6a>
 8019584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019586:	895b      	ldrh	r3, [r3, #10]
 8019588:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801958a:	429a      	cmp	r2, r3
 801958c:	d2ea      	bcs.n	8019564 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 801958e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019590:	2b00      	cmp	r3, #0
 8019592:	d102      	bne.n	801959a <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8019594:	f06f 0301 	mvn.w	r3, #1
 8019598:	e281      	b.n	8019a9e <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 801959a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801959c:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 801959e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80195a0:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 80195a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80195a4:	685b      	ldr	r3, [r3, #4]
 80195a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80195a8:	e239      	b.n	8019a1e <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 80195aa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80195ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80195ae:	4413      	add	r3, r2
 80195b0:	781b      	ldrb	r3, [r3, #0]
 80195b2:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 80195b4:	2300      	movs	r3, #0
 80195b6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 80195ba:	f04f 33ff 	mov.w	r3, #4294967295
 80195be:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 80195c0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80195c2:	3302      	adds	r3, #2
 80195c4:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 80195c6:	8bfa      	ldrh	r2, [r7, #30]
 80195c8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80195ca:	429a      	cmp	r2, r3
 80195cc:	d202      	bcs.n	80195d4 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 80195ce:	f06f 0301 	mvn.w	r3, #1
 80195d2:	e264      	b.n	8019a9e <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 80195d4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80195d6:	3301      	adds	r3, #1
 80195d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80195da:	8952      	ldrh	r2, [r2, #10]
 80195dc:	4293      	cmp	r3, r2
 80195de:	da07      	bge.n	80195f0 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 80195e0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80195e2:	3301      	adds	r3, #1
 80195e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80195e6:	4413      	add	r3, r2
 80195e8:	781b      	ldrb	r3, [r3, #0]
 80195ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80195ee:	e00b      	b.n	8019608 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 80195f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80195f2:	681b      	ldr	r3, [r3, #0]
 80195f4:	2b00      	cmp	r3, #0
 80195f6:	d004      	beq.n	8019602 <dhcp_parse_reply+0xde>
 80195f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80195fa:	681b      	ldr	r3, [r3, #0]
 80195fc:	685b      	ldr	r3, [r3, #4]
 80195fe:	781b      	ldrb	r3, [r3, #0]
 8019600:	e000      	b.n	8019604 <dhcp_parse_reply+0xe0>
 8019602:	2300      	movs	r3, #0
 8019604:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8019608:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801960c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8019610:	7dfb      	ldrb	r3, [r7, #23]
 8019612:	2b3b      	cmp	r3, #59	; 0x3b
 8019614:	f200 812c 	bhi.w	8019870 <dhcp_parse_reply+0x34c>
 8019618:	a201      	add	r2, pc, #4	; (adr r2, 8019620 <dhcp_parse_reply+0xfc>)
 801961a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801961e:	bf00      	nop
 8019620:	08019711 	.word	0x08019711
 8019624:	08019721 	.word	0x08019721
 8019628:	08019871 	.word	0x08019871
 801962c:	08019743 	.word	0x08019743
 8019630:	08019871 	.word	0x08019871
 8019634:	08019871 	.word	0x08019871
 8019638:	08019871 	.word	0x08019871
 801963c:	08019871 	.word	0x08019871
 8019640:	08019871 	.word	0x08019871
 8019644:	08019871 	.word	0x08019871
 8019648:	08019871 	.word	0x08019871
 801964c:	08019871 	.word	0x08019871
 8019650:	08019871 	.word	0x08019871
 8019654:	08019871 	.word	0x08019871
 8019658:	08019871 	.word	0x08019871
 801965c:	08019871 	.word	0x08019871
 8019660:	08019871 	.word	0x08019871
 8019664:	08019871 	.word	0x08019871
 8019668:	08019871 	.word	0x08019871
 801966c:	08019871 	.word	0x08019871
 8019670:	08019871 	.word	0x08019871
 8019674:	08019871 	.word	0x08019871
 8019678:	08019871 	.word	0x08019871
 801967c:	08019871 	.word	0x08019871
 8019680:	08019871 	.word	0x08019871
 8019684:	08019871 	.word	0x08019871
 8019688:	08019871 	.word	0x08019871
 801968c:	08019871 	.word	0x08019871
 8019690:	08019871 	.word	0x08019871
 8019694:	08019871 	.word	0x08019871
 8019698:	08019871 	.word	0x08019871
 801969c:	08019871 	.word	0x08019871
 80196a0:	08019871 	.word	0x08019871
 80196a4:	08019871 	.word	0x08019871
 80196a8:	08019871 	.word	0x08019871
 80196ac:	08019871 	.word	0x08019871
 80196b0:	08019871 	.word	0x08019871
 80196b4:	08019871 	.word	0x08019871
 80196b8:	08019871 	.word	0x08019871
 80196bc:	08019871 	.word	0x08019871
 80196c0:	08019871 	.word	0x08019871
 80196c4:	08019871 	.word	0x08019871
 80196c8:	08019871 	.word	0x08019871
 80196cc:	08019871 	.word	0x08019871
 80196d0:	08019871 	.word	0x08019871
 80196d4:	08019871 	.word	0x08019871
 80196d8:	08019871 	.word	0x08019871
 80196dc:	08019871 	.word	0x08019871
 80196e0:	08019871 	.word	0x08019871
 80196e4:	08019871 	.word	0x08019871
 80196e8:	08019871 	.word	0x08019871
 80196ec:	0801976f 	.word	0x0801976f
 80196f0:	08019791 	.word	0x08019791
 80196f4:	080197cd 	.word	0x080197cd
 80196f8:	080197ef 	.word	0x080197ef
 80196fc:	08019871 	.word	0x08019871
 8019700:	08019871 	.word	0x08019871
 8019704:	08019871 	.word	0x08019871
 8019708:	0801982d 	.word	0x0801982d
 801970c:	0801984f 	.word	0x0801984f
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8019710:	2300      	movs	r3, #0
 8019712:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8019716:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801971a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 801971e:	e0ab      	b.n	8019878 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8019720:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019724:	2b04      	cmp	r3, #4
 8019726:	d009      	beq.n	801973c <dhcp_parse_reply+0x218>
 8019728:	4b3a      	ldr	r3, [pc, #232]	; (8019814 <dhcp_parse_reply+0x2f0>)
 801972a:	f240 622e 	movw	r2, #1582	; 0x62e
 801972e:	493a      	ldr	r1, [pc, #232]	; (8019818 <dhcp_parse_reply+0x2f4>)
 8019730:	483a      	ldr	r0, [pc, #232]	; (801981c <dhcp_parse_reply+0x2f8>)
 8019732:	f003 fea5 	bl	801d480 <iprintf>
 8019736:	f06f 0305 	mvn.w	r3, #5
 801973a:	e1b0      	b.n	8019a9e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 801973c:	2306      	movs	r3, #6
 801973e:	623b      	str	r3, [r7, #32]
        break;
 8019740:	e09a      	b.n	8019878 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8019742:	2304      	movs	r3, #4
 8019744:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8019748:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801974c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019750:	429a      	cmp	r2, r3
 8019752:	d209      	bcs.n	8019768 <dhcp_parse_reply+0x244>
 8019754:	4b2f      	ldr	r3, [pc, #188]	; (8019814 <dhcp_parse_reply+0x2f0>)
 8019756:	f240 6233 	movw	r2, #1587	; 0x633
 801975a:	4931      	ldr	r1, [pc, #196]	; (8019820 <dhcp_parse_reply+0x2fc>)
 801975c:	482f      	ldr	r0, [pc, #188]	; (801981c <dhcp_parse_reply+0x2f8>)
 801975e:	f003 fe8f 	bl	801d480 <iprintf>
 8019762:	f06f 0305 	mvn.w	r3, #5
 8019766:	e19a      	b.n	8019a9e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8019768:	2307      	movs	r3, #7
 801976a:	623b      	str	r3, [r7, #32]
        break;
 801976c:	e084      	b.n	8019878 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801976e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019772:	2b04      	cmp	r3, #4
 8019774:	d009      	beq.n	801978a <dhcp_parse_reply+0x266>
 8019776:	4b27      	ldr	r3, [pc, #156]	; (8019814 <dhcp_parse_reply+0x2f0>)
 8019778:	f240 6241 	movw	r2, #1601	; 0x641
 801977c:	4926      	ldr	r1, [pc, #152]	; (8019818 <dhcp_parse_reply+0x2f4>)
 801977e:	4827      	ldr	r0, [pc, #156]	; (801981c <dhcp_parse_reply+0x2f8>)
 8019780:	f003 fe7e 	bl	801d480 <iprintf>
 8019784:	f06f 0305 	mvn.w	r3, #5
 8019788:	e189      	b.n	8019a9e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 801978a:	2303      	movs	r3, #3
 801978c:	623b      	str	r3, [r7, #32]
        break;
 801978e:	e073      	b.n	8019878 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8019790:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019794:	2b01      	cmp	r3, #1
 8019796:	d009      	beq.n	80197ac <dhcp_parse_reply+0x288>
 8019798:	4b1e      	ldr	r3, [pc, #120]	; (8019814 <dhcp_parse_reply+0x2f0>)
 801979a:	f240 624f 	movw	r2, #1615	; 0x64f
 801979e:	4921      	ldr	r1, [pc, #132]	; (8019824 <dhcp_parse_reply+0x300>)
 80197a0:	481e      	ldr	r0, [pc, #120]	; (801981c <dhcp_parse_reply+0x2f8>)
 80197a2:	f003 fe6d 	bl	801d480 <iprintf>
 80197a6:	f06f 0305 	mvn.w	r3, #5
 80197aa:	e178      	b.n	8019a9e <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 80197ac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80197ae:	2bf0      	cmp	r3, #240	; 0xf0
 80197b0:	d009      	beq.n	80197c6 <dhcp_parse_reply+0x2a2>
 80197b2:	4b18      	ldr	r3, [pc, #96]	; (8019814 <dhcp_parse_reply+0x2f0>)
 80197b4:	f240 6251 	movw	r2, #1617	; 0x651
 80197b8:	491b      	ldr	r1, [pc, #108]	; (8019828 <dhcp_parse_reply+0x304>)
 80197ba:	4818      	ldr	r0, [pc, #96]	; (801981c <dhcp_parse_reply+0x2f8>)
 80197bc:	f003 fe60 	bl	801d480 <iprintf>
 80197c0:	f06f 0305 	mvn.w	r3, #5
 80197c4:	e16b      	b.n	8019a9e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 80197c6:	2300      	movs	r3, #0
 80197c8:	623b      	str	r3, [r7, #32]
        break;
 80197ca:	e055      	b.n	8019878 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80197cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80197d0:	2b01      	cmp	r3, #1
 80197d2:	d009      	beq.n	80197e8 <dhcp_parse_reply+0x2c4>
 80197d4:	4b0f      	ldr	r3, [pc, #60]	; (8019814 <dhcp_parse_reply+0x2f0>)
 80197d6:	f240 6255 	movw	r2, #1621	; 0x655
 80197da:	4912      	ldr	r1, [pc, #72]	; (8019824 <dhcp_parse_reply+0x300>)
 80197dc:	480f      	ldr	r0, [pc, #60]	; (801981c <dhcp_parse_reply+0x2f8>)
 80197de:	f003 fe4f 	bl	801d480 <iprintf>
 80197e2:	f06f 0305 	mvn.w	r3, #5
 80197e6:	e15a      	b.n	8019a9e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 80197e8:	2301      	movs	r3, #1
 80197ea:	623b      	str	r3, [r7, #32]
        break;
 80197ec:	e044      	b.n	8019878 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80197ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80197f2:	2b04      	cmp	r3, #4
 80197f4:	d009      	beq.n	801980a <dhcp_parse_reply+0x2e6>
 80197f6:	4b07      	ldr	r3, [pc, #28]	; (8019814 <dhcp_parse_reply+0x2f0>)
 80197f8:	f240 6259 	movw	r2, #1625	; 0x659
 80197fc:	4906      	ldr	r1, [pc, #24]	; (8019818 <dhcp_parse_reply+0x2f4>)
 80197fe:	4807      	ldr	r0, [pc, #28]	; (801981c <dhcp_parse_reply+0x2f8>)
 8019800:	f003 fe3e 	bl	801d480 <iprintf>
 8019804:	f06f 0305 	mvn.w	r3, #5
 8019808:	e149      	b.n	8019a9e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 801980a:	2302      	movs	r3, #2
 801980c:	623b      	str	r3, [r7, #32]
        break;
 801980e:	e033      	b.n	8019878 <dhcp_parse_reply+0x354>
 8019810:	2001b7f4 	.word	0x2001b7f4
 8019814:	08021b24 	.word	0x08021b24
 8019818:	08021dac 	.word	0x08021dac
 801981c:	08021b84 	.word	0x08021b84
 8019820:	08021db8 	.word	0x08021db8
 8019824:	08021dcc 	.word	0x08021dcc
 8019828:	08021dd8 	.word	0x08021dd8
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801982c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019830:	2b04      	cmp	r3, #4
 8019832:	d009      	beq.n	8019848 <dhcp_parse_reply+0x324>
 8019834:	4b9c      	ldr	r3, [pc, #624]	; (8019aa8 <dhcp_parse_reply+0x584>)
 8019836:	f240 625d 	movw	r2, #1629	; 0x65d
 801983a:	499c      	ldr	r1, [pc, #624]	; (8019aac <dhcp_parse_reply+0x588>)
 801983c:	489c      	ldr	r0, [pc, #624]	; (8019ab0 <dhcp_parse_reply+0x58c>)
 801983e:	f003 fe1f 	bl	801d480 <iprintf>
 8019842:	f06f 0305 	mvn.w	r3, #5
 8019846:	e12a      	b.n	8019a9e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 8019848:	2304      	movs	r3, #4
 801984a:	623b      	str	r3, [r7, #32]
        break;
 801984c:	e014      	b.n	8019878 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801984e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019852:	2b04      	cmp	r3, #4
 8019854:	d009      	beq.n	801986a <dhcp_parse_reply+0x346>
 8019856:	4b94      	ldr	r3, [pc, #592]	; (8019aa8 <dhcp_parse_reply+0x584>)
 8019858:	f240 6261 	movw	r2, #1633	; 0x661
 801985c:	4993      	ldr	r1, [pc, #588]	; (8019aac <dhcp_parse_reply+0x588>)
 801985e:	4894      	ldr	r0, [pc, #592]	; (8019ab0 <dhcp_parse_reply+0x58c>)
 8019860:	f003 fe0e 	bl	801d480 <iprintf>
 8019864:	f06f 0305 	mvn.w	r3, #5
 8019868:	e119      	b.n	8019a9e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 801986a:	2305      	movs	r3, #5
 801986c:	623b      	str	r3, [r7, #32]
        break;
 801986e:	e003      	b.n	8019878 <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 8019870:	2300      	movs	r3, #0
 8019872:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8019876:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8019878:	7dfb      	ldrb	r3, [r7, #23]
 801987a:	2b00      	cmp	r3, #0
 801987c:	d103      	bne.n	8019886 <dhcp_parse_reply+0x362>
      offset++;
 801987e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8019880:	3301      	adds	r3, #1
 8019882:	877b      	strh	r3, [r7, #58]	; 0x3a
 8019884:	e0a1      	b.n	80199ca <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8019886:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8019888:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801988c:	4413      	add	r3, r2
 801988e:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8019892:	4293      	cmp	r3, r2
 8019894:	dd02      	ble.n	801989c <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 8019896:	f06f 0301 	mvn.w	r3, #1
 801989a:	e100      	b.n	8019a9e <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 801989c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80198a0:	b29a      	uxth	r2, r3
 80198a2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80198a4:	4413      	add	r3, r2
 80198a6:	b29b      	uxth	r3, r3
 80198a8:	3302      	adds	r3, #2
 80198aa:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 80198ac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80198b0:	2b00      	cmp	r3, #0
 80198b2:	f000 808a 	beq.w	80199ca <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 80198b6:	2300      	movs	r3, #0
 80198b8:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 80198ba:	6a3b      	ldr	r3, [r7, #32]
 80198bc:	2b00      	cmp	r3, #0
 80198be:	db02      	blt.n	80198c6 <dhcp_parse_reply+0x3a2>
 80198c0:	6a3b      	ldr	r3, [r7, #32]
 80198c2:	2b07      	cmp	r3, #7
 80198c4:	dd06      	ble.n	80198d4 <dhcp_parse_reply+0x3b0>
 80198c6:	4b78      	ldr	r3, [pc, #480]	; (8019aa8 <dhcp_parse_reply+0x584>)
 80198c8:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 80198cc:	4979      	ldr	r1, [pc, #484]	; (8019ab4 <dhcp_parse_reply+0x590>)
 80198ce:	4878      	ldr	r0, [pc, #480]	; (8019ab0 <dhcp_parse_reply+0x58c>)
 80198d0:	f003 fdd6 	bl	801d480 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 80198d4:	4a78      	ldr	r2, [pc, #480]	; (8019ab8 <dhcp_parse_reply+0x594>)
 80198d6:	6a3b      	ldr	r3, [r7, #32]
 80198d8:	4413      	add	r3, r2
 80198da:	781b      	ldrb	r3, [r3, #0]
 80198dc:	2b00      	cmp	r3, #0
 80198de:	d174      	bne.n	80199ca <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 80198e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80198e4:	2b04      	cmp	r3, #4
 80198e6:	bf28      	it	cs
 80198e8:	2304      	movcs	r3, #4
 80198ea:	b2db      	uxtb	r3, r3
 80198ec:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 80198ee:	8bfb      	ldrh	r3, [r7, #30]
 80198f0:	8aba      	ldrh	r2, [r7, #20]
 80198f2:	f107 0108 	add.w	r1, r7, #8
 80198f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80198f8:	f7f8 fc18 	bl	801212c <pbuf_copy_partial>
 80198fc:	4603      	mov	r3, r0
 80198fe:	461a      	mov	r2, r3
 8019900:	8abb      	ldrh	r3, [r7, #20]
 8019902:	4293      	cmp	r3, r2
 8019904:	d002      	beq.n	801990c <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 8019906:	f06f 0301 	mvn.w	r3, #1
 801990a:	e0c8      	b.n	8019a9e <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 801990c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019910:	2b04      	cmp	r3, #4
 8019912:	d933      	bls.n	801997c <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8019914:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019918:	f003 0303 	and.w	r3, r3, #3
 801991c:	b2db      	uxtb	r3, r3
 801991e:	2b00      	cmp	r3, #0
 8019920:	d009      	beq.n	8019936 <dhcp_parse_reply+0x412>
 8019922:	4b61      	ldr	r3, [pc, #388]	; (8019aa8 <dhcp_parse_reply+0x584>)
 8019924:	f240 6281 	movw	r2, #1665	; 0x681
 8019928:	4964      	ldr	r1, [pc, #400]	; (8019abc <dhcp_parse_reply+0x598>)
 801992a:	4861      	ldr	r0, [pc, #388]	; (8019ab0 <dhcp_parse_reply+0x58c>)
 801992c:	f003 fda8 	bl	801d480 <iprintf>
 8019930:	f06f 0305 	mvn.w	r3, #5
 8019934:	e0b3      	b.n	8019a9e <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 8019936:	4a60      	ldr	r2, [pc, #384]	; (8019ab8 <dhcp_parse_reply+0x594>)
 8019938:	6a3b      	ldr	r3, [r7, #32]
 801993a:	4413      	add	r3, r2
 801993c:	2201      	movs	r2, #1
 801993e:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8019940:	68bb      	ldr	r3, [r7, #8]
 8019942:	4618      	mov	r0, r3
 8019944:	f7f6 fe49 	bl	80105da <lwip_htonl>
 8019948:	4602      	mov	r2, r0
 801994a:	495d      	ldr	r1, [pc, #372]	; (8019ac0 <dhcp_parse_reply+0x59c>)
 801994c:	6a3b      	ldr	r3, [r7, #32]
 801994e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8019952:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019956:	3b04      	subs	r3, #4
 8019958:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 801995c:	8bfb      	ldrh	r3, [r7, #30]
 801995e:	3304      	adds	r3, #4
 8019960:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8019962:	8a7a      	ldrh	r2, [r7, #18]
 8019964:	8bfb      	ldrh	r3, [r7, #30]
 8019966:	429a      	cmp	r2, r3
 8019968:	d202      	bcs.n	8019970 <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 801996a:	f06f 0301 	mvn.w	r3, #1
 801996e:	e096      	b.n	8019a9e <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 8019970:	8a7b      	ldrh	r3, [r7, #18]
 8019972:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8019974:	6a3b      	ldr	r3, [r7, #32]
 8019976:	3301      	adds	r3, #1
 8019978:	623b      	str	r3, [r7, #32]
            goto decode_next;
 801997a:	e79e      	b.n	80198ba <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 801997c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019980:	2b04      	cmp	r3, #4
 8019982:	d106      	bne.n	8019992 <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 8019984:	68bb      	ldr	r3, [r7, #8]
 8019986:	4618      	mov	r0, r3
 8019988:	f7f6 fe27 	bl	80105da <lwip_htonl>
 801998c:	4603      	mov	r3, r0
 801998e:	60bb      	str	r3, [r7, #8]
 8019990:	e011      	b.n	80199b6 <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8019992:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019996:	2b01      	cmp	r3, #1
 8019998:	d009      	beq.n	80199ae <dhcp_parse_reply+0x48a>
 801999a:	4b43      	ldr	r3, [pc, #268]	; (8019aa8 <dhcp_parse_reply+0x584>)
 801999c:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 80199a0:	4948      	ldr	r1, [pc, #288]	; (8019ac4 <dhcp_parse_reply+0x5a0>)
 80199a2:	4843      	ldr	r0, [pc, #268]	; (8019ab0 <dhcp_parse_reply+0x58c>)
 80199a4:	f003 fd6c 	bl	801d480 <iprintf>
 80199a8:	f06f 0305 	mvn.w	r3, #5
 80199ac:	e077      	b.n	8019a9e <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 80199ae:	f107 0308 	add.w	r3, r7, #8
 80199b2:	781b      	ldrb	r3, [r3, #0]
 80199b4:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 80199b6:	4a40      	ldr	r2, [pc, #256]	; (8019ab8 <dhcp_parse_reply+0x594>)
 80199b8:	6a3b      	ldr	r3, [r7, #32]
 80199ba:	4413      	add	r3, r2
 80199bc:	2201      	movs	r2, #1
 80199be:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 80199c0:	68ba      	ldr	r2, [r7, #8]
 80199c2:	493f      	ldr	r1, [pc, #252]	; (8019ac0 <dhcp_parse_reply+0x59c>)
 80199c4:	6a3b      	ldr	r3, [r7, #32]
 80199c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 80199ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80199cc:	895b      	ldrh	r3, [r3, #10]
 80199ce:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80199d0:	429a      	cmp	r2, r3
 80199d2:	d324      	bcc.n	8019a1e <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 80199d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80199d6:	895b      	ldrh	r3, [r3, #10]
 80199d8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80199da:	1ad3      	subs	r3, r2, r3
 80199dc:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 80199de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80199e0:	895b      	ldrh	r3, [r3, #10]
 80199e2:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80199e4:	1ad3      	subs	r3, r2, r3
 80199e6:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 80199e8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80199ea:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80199ec:	429a      	cmp	r2, r3
 80199ee:	d213      	bcs.n	8019a18 <dhcp_parse_reply+0x4f4>
        q = q->next;
 80199f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80199f2:	681b      	ldr	r3, [r3, #0]
 80199f4:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 80199f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80199f8:	2b00      	cmp	r3, #0
 80199fa:	d109      	bne.n	8019a10 <dhcp_parse_reply+0x4ec>
 80199fc:	4b2a      	ldr	r3, [pc, #168]	; (8019aa8 <dhcp_parse_reply+0x584>)
 80199fe:	f240 629d 	movw	r2, #1693	; 0x69d
 8019a02:	4931      	ldr	r1, [pc, #196]	; (8019ac8 <dhcp_parse_reply+0x5a4>)
 8019a04:	482a      	ldr	r0, [pc, #168]	; (8019ab0 <dhcp_parse_reply+0x58c>)
 8019a06:	f003 fd3b 	bl	801d480 <iprintf>
 8019a0a:	f06f 0305 	mvn.w	r3, #5
 8019a0e:	e046      	b.n	8019a9e <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 8019a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a12:	685b      	ldr	r3, [r3, #4]
 8019a14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8019a16:	e002      	b.n	8019a1e <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8019a18:	f06f 0301 	mvn.w	r3, #1
 8019a1c:	e03f      	b.n	8019a9e <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8019a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a20:	2b00      	cmp	r3, #0
 8019a22:	d00a      	beq.n	8019a3a <dhcp_parse_reply+0x516>
 8019a24:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8019a26:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8019a28:	429a      	cmp	r2, r3
 8019a2a:	d206      	bcs.n	8019a3a <dhcp_parse_reply+0x516>
 8019a2c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8019a2e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8019a30:	4413      	add	r3, r2
 8019a32:	781b      	ldrb	r3, [r3, #0]
 8019a34:	2bff      	cmp	r3, #255	; 0xff
 8019a36:	f47f adb8 	bne.w	80195aa <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8019a3a:	4b1f      	ldr	r3, [pc, #124]	; (8019ab8 <dhcp_parse_reply+0x594>)
 8019a3c:	781b      	ldrb	r3, [r3, #0]
 8019a3e:	2b00      	cmp	r3, #0
 8019a40:	d018      	beq.n	8019a74 <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8019a42:	4b1f      	ldr	r3, [pc, #124]	; (8019ac0 <dhcp_parse_reply+0x59c>)
 8019a44:	681b      	ldr	r3, [r3, #0]
 8019a46:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8019a48:	4b1b      	ldr	r3, [pc, #108]	; (8019ab8 <dhcp_parse_reply+0x594>)
 8019a4a:	2200      	movs	r2, #0
 8019a4c:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8019a4e:	68fb      	ldr	r3, [r7, #12]
 8019a50:	2b01      	cmp	r3, #1
 8019a52:	d102      	bne.n	8019a5a <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 8019a54:	2301      	movs	r3, #1
 8019a56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019a58:	e00c      	b.n	8019a74 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8019a5a:	68fb      	ldr	r3, [r7, #12]
 8019a5c:	2b02      	cmp	r3, #2
 8019a5e:	d102      	bne.n	8019a66 <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 8019a60:	2301      	movs	r3, #1
 8019a62:	62bb      	str	r3, [r7, #40]	; 0x28
 8019a64:	e006      	b.n	8019a74 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8019a66:	68fb      	ldr	r3, [r7, #12]
 8019a68:	2b03      	cmp	r3, #3
 8019a6a:	d103      	bne.n	8019a74 <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 8019a6c:	2301      	movs	r3, #1
 8019a6e:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 8019a70:	2301      	movs	r3, #1
 8019a72:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8019a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019a76:	2b00      	cmp	r3, #0
 8019a78:	d006      	beq.n	8019a88 <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8019a7a:	2300      	movs	r3, #0
 8019a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 8019a7e:	236c      	movs	r3, #108	; 0x6c
 8019a80:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8019a82:	23ec      	movs	r3, #236	; 0xec
 8019a84:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8019a86:	e56a      	b.n	801955e <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8019a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019a8a:	2b00      	cmp	r3, #0
 8019a8c:	d006      	beq.n	8019a9c <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 8019a8e:	2300      	movs	r3, #0
 8019a90:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 8019a92:	232c      	movs	r3, #44	; 0x2c
 8019a94:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8019a96:	236c      	movs	r3, #108	; 0x6c
 8019a98:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 8019a9a:	e560      	b.n	801955e <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8019a9c:	2300      	movs	r3, #0
}
 8019a9e:	4618      	mov	r0, r3
 8019aa0:	3740      	adds	r7, #64	; 0x40
 8019aa2:	46bd      	mov	sp, r7
 8019aa4:	bd80      	pop	{r7, pc}
 8019aa6:	bf00      	nop
 8019aa8:	08021b24 	.word	0x08021b24
 8019aac:	08021dac 	.word	0x08021dac
 8019ab0:	08021b84 	.word	0x08021b84
 8019ab4:	08021df0 	.word	0x08021df0
 8019ab8:	2001b7f4 	.word	0x2001b7f4
 8019abc:	08021e04 	.word	0x08021e04
 8019ac0:	2001b7fc 	.word	0x2001b7fc
 8019ac4:	08021e1c 	.word	0x08021e1c
 8019ac8:	08021e30 	.word	0x08021e30

08019acc <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8019acc:	b580      	push	{r7, lr}
 8019ace:	b08a      	sub	sp, #40	; 0x28
 8019ad0:	af00      	add	r7, sp, #0
 8019ad2:	60f8      	str	r0, [r7, #12]
 8019ad4:	60b9      	str	r1, [r7, #8]
 8019ad6:	607a      	str	r2, [r7, #4]
 8019ad8:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8019ada:	4b60      	ldr	r3, [pc, #384]	; (8019c5c <dhcp_recv+0x190>)
 8019adc:	685b      	ldr	r3, [r3, #4]
 8019ade:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019ae0:	6a3b      	ldr	r3, [r7, #32]
 8019ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019ae4:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8019ae6:	687b      	ldr	r3, [r7, #4]
 8019ae8:	685b      	ldr	r3, [r3, #4]
 8019aea:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8019aec:	69fb      	ldr	r3, [r7, #28]
 8019aee:	2b00      	cmp	r3, #0
 8019af0:	f000 809d 	beq.w	8019c2e <dhcp_recv+0x162>
 8019af4:	69fb      	ldr	r3, [r7, #28]
 8019af6:	791b      	ldrb	r3, [r3, #4]
 8019af8:	2b00      	cmp	r3, #0
 8019afa:	f000 8098 	beq.w	8019c2e <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8019afe:	687b      	ldr	r3, [r7, #4]
 8019b00:	895b      	ldrh	r3, [r3, #10]
 8019b02:	2b2b      	cmp	r3, #43	; 0x2b
 8019b04:	f240 8095 	bls.w	8019c32 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8019b08:	69bb      	ldr	r3, [r7, #24]
 8019b0a:	781b      	ldrb	r3, [r3, #0]
 8019b0c:	2b02      	cmp	r3, #2
 8019b0e:	f040 8092 	bne.w	8019c36 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8019b12:	2300      	movs	r3, #0
 8019b14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8019b18:	e012      	b.n	8019b40 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8019b1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019b1e:	6a3a      	ldr	r2, [r7, #32]
 8019b20:	4413      	add	r3, r2
 8019b22:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8019b26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019b2a:	69b9      	ldr	r1, [r7, #24]
 8019b2c:	440b      	add	r3, r1
 8019b2e:	7f1b      	ldrb	r3, [r3, #28]
 8019b30:	429a      	cmp	r2, r3
 8019b32:	f040 8082 	bne.w	8019c3a <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8019b36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019b3a:	3301      	adds	r3, #1
 8019b3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8019b40:	6a3b      	ldr	r3, [r7, #32]
 8019b42:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8019b46:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8019b4a:	429a      	cmp	r2, r3
 8019b4c:	d203      	bcs.n	8019b56 <dhcp_recv+0x8a>
 8019b4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019b52:	2b05      	cmp	r3, #5
 8019b54:	d9e1      	bls.n	8019b1a <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8019b56:	69bb      	ldr	r3, [r7, #24]
 8019b58:	685b      	ldr	r3, [r3, #4]
 8019b5a:	4618      	mov	r0, r3
 8019b5c:	f7f6 fd3d 	bl	80105da <lwip_htonl>
 8019b60:	4602      	mov	r2, r0
 8019b62:	69fb      	ldr	r3, [r7, #28]
 8019b64:	681b      	ldr	r3, [r3, #0]
 8019b66:	429a      	cmp	r2, r3
 8019b68:	d169      	bne.n	8019c3e <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8019b6a:	69f9      	ldr	r1, [r7, #28]
 8019b6c:	6878      	ldr	r0, [r7, #4]
 8019b6e:	f7ff fcd9 	bl	8019524 <dhcp_parse_reply>
 8019b72:	4603      	mov	r3, r0
 8019b74:	2b00      	cmp	r3, #0
 8019b76:	d164      	bne.n	8019c42 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8019b78:	4b39      	ldr	r3, [pc, #228]	; (8019c60 <dhcp_recv+0x194>)
 8019b7a:	785b      	ldrb	r3, [r3, #1]
 8019b7c:	2b00      	cmp	r3, #0
 8019b7e:	d062      	beq.n	8019c46 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8019b80:	687b      	ldr	r3, [r7, #4]
 8019b82:	685b      	ldr	r3, [r3, #4]
 8019b84:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8019b86:	4b37      	ldr	r3, [pc, #220]	; (8019c64 <dhcp_recv+0x198>)
 8019b88:	685b      	ldr	r3, [r3, #4]
 8019b8a:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8019b8c:	7cfb      	ldrb	r3, [r7, #19]
 8019b8e:	2b05      	cmp	r3, #5
 8019b90:	d12a      	bne.n	8019be8 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8019b92:	69fb      	ldr	r3, [r7, #28]
 8019b94:	795b      	ldrb	r3, [r3, #5]
 8019b96:	2b01      	cmp	r3, #1
 8019b98:	d112      	bne.n	8019bc0 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 8019b9a:	6979      	ldr	r1, [r7, #20]
 8019b9c:	6a38      	ldr	r0, [r7, #32]
 8019b9e:	f7fe fe17 	bl	80187d0 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8019ba2:	6a3b      	ldr	r3, [r7, #32]
 8019ba4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8019ba8:	f003 0308 	and.w	r3, r3, #8
 8019bac:	2b00      	cmp	r3, #0
 8019bae:	d003      	beq.n	8019bb8 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8019bb0:	6a38      	ldr	r0, [r7, #32]
 8019bb2:	f7fe fb87 	bl	80182c4 <dhcp_check>
 8019bb6:	e049      	b.n	8019c4c <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8019bb8:	6a38      	ldr	r0, [r7, #32]
 8019bba:	f7ff f867 	bl	8018c8c <dhcp_bind>
 8019bbe:	e045      	b.n	8019c4c <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8019bc0:	69fb      	ldr	r3, [r7, #28]
 8019bc2:	795b      	ldrb	r3, [r3, #5]
 8019bc4:	2b03      	cmp	r3, #3
 8019bc6:	d007      	beq.n	8019bd8 <dhcp_recv+0x10c>
 8019bc8:	69fb      	ldr	r3, [r7, #28]
 8019bca:	795b      	ldrb	r3, [r3, #5]
 8019bcc:	2b04      	cmp	r3, #4
 8019bce:	d003      	beq.n	8019bd8 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8019bd0:	69fb      	ldr	r3, [r7, #28]
 8019bd2:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8019bd4:	2b05      	cmp	r3, #5
 8019bd6:	d139      	bne.n	8019c4c <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 8019bd8:	6979      	ldr	r1, [r7, #20]
 8019bda:	6a38      	ldr	r0, [r7, #32]
 8019bdc:	f7fe fdf8 	bl	80187d0 <dhcp_handle_ack>
      dhcp_bind(netif);
 8019be0:	6a38      	ldr	r0, [r7, #32]
 8019be2:	f7ff f853 	bl	8018c8c <dhcp_bind>
 8019be6:	e031      	b.n	8019c4c <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8019be8:	7cfb      	ldrb	r3, [r7, #19]
 8019bea:	2b06      	cmp	r3, #6
 8019bec:	d113      	bne.n	8019c16 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8019bee:	69fb      	ldr	r3, [r7, #28]
 8019bf0:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8019bf2:	2b03      	cmp	r3, #3
 8019bf4:	d00b      	beq.n	8019c0e <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8019bf6:	69fb      	ldr	r3, [r7, #28]
 8019bf8:	795b      	ldrb	r3, [r3, #5]
 8019bfa:	2b01      	cmp	r3, #1
 8019bfc:	d007      	beq.n	8019c0e <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8019bfe:	69fb      	ldr	r3, [r7, #28]
 8019c00:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8019c02:	2b04      	cmp	r3, #4
 8019c04:	d003      	beq.n	8019c0e <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8019c06:	69fb      	ldr	r3, [r7, #28]
 8019c08:	795b      	ldrb	r3, [r3, #5]
 8019c0a:	2b05      	cmp	r3, #5
 8019c0c:	d103      	bne.n	8019c16 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8019c0e:	6a38      	ldr	r0, [r7, #32]
 8019c10:	f7fe fb3e 	bl	8018290 <dhcp_handle_nak>
 8019c14:	e01a      	b.n	8019c4c <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8019c16:	7cfb      	ldrb	r3, [r7, #19]
 8019c18:	2b02      	cmp	r3, #2
 8019c1a:	d116      	bne.n	8019c4a <dhcp_recv+0x17e>
 8019c1c:	69fb      	ldr	r3, [r7, #28]
 8019c1e:	795b      	ldrb	r3, [r3, #5]
 8019c20:	2b06      	cmp	r3, #6
 8019c22:	d112      	bne.n	8019c4a <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8019c24:	6979      	ldr	r1, [r7, #20]
 8019c26:	6a38      	ldr	r0, [r7, #32]
 8019c28:	f7fe fb80 	bl	801832c <dhcp_handle_offer>
 8019c2c:	e00e      	b.n	8019c4c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8019c2e:	bf00      	nop
 8019c30:	e00c      	b.n	8019c4c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8019c32:	bf00      	nop
 8019c34:	e00a      	b.n	8019c4c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8019c36:	bf00      	nop
 8019c38:	e008      	b.n	8019c4c <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 8019c3a:	bf00      	nop
 8019c3c:	e006      	b.n	8019c4c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8019c3e:	bf00      	nop
 8019c40:	e004      	b.n	8019c4c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8019c42:	bf00      	nop
 8019c44:	e002      	b.n	8019c4c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8019c46:	bf00      	nop
 8019c48:	e000      	b.n	8019c4c <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 8019c4a:	bf00      	nop
  pbuf_free(p);
 8019c4c:	6878      	ldr	r0, [r7, #4]
 8019c4e:	f7f8 f867 	bl	8011d20 <pbuf_free>
}
 8019c52:	bf00      	nop
 8019c54:	3728      	adds	r7, #40	; 0x28
 8019c56:	46bd      	mov	sp, r7
 8019c58:	bd80      	pop	{r7, pc}
 8019c5a:	bf00      	nop
 8019c5c:	200172e4 	.word	0x200172e4
 8019c60:	2001b7f4 	.word	0x2001b7f4
 8019c64:	2001b7fc 	.word	0x2001b7fc

08019c68 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8019c68:	b580      	push	{r7, lr}
 8019c6a:	b088      	sub	sp, #32
 8019c6c:	af00      	add	r7, sp, #0
 8019c6e:	60f8      	str	r0, [r7, #12]
 8019c70:	60b9      	str	r1, [r7, #8]
 8019c72:	603b      	str	r3, [r7, #0]
 8019c74:	4613      	mov	r3, r2
 8019c76:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8019c78:	68fb      	ldr	r3, [r7, #12]
 8019c7a:	2b00      	cmp	r3, #0
 8019c7c:	d108      	bne.n	8019c90 <dhcp_create_msg+0x28>
 8019c7e:	4b5f      	ldr	r3, [pc, #380]	; (8019dfc <dhcp_create_msg+0x194>)
 8019c80:	f240 7269 	movw	r2, #1897	; 0x769
 8019c84:	495e      	ldr	r1, [pc, #376]	; (8019e00 <dhcp_create_msg+0x198>)
 8019c86:	485f      	ldr	r0, [pc, #380]	; (8019e04 <dhcp_create_msg+0x19c>)
 8019c88:	f003 fbfa 	bl	801d480 <iprintf>
 8019c8c:	2300      	movs	r3, #0
 8019c8e:	e0b1      	b.n	8019df4 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8019c90:	68bb      	ldr	r3, [r7, #8]
 8019c92:	2b00      	cmp	r3, #0
 8019c94:	d108      	bne.n	8019ca8 <dhcp_create_msg+0x40>
 8019c96:	4b59      	ldr	r3, [pc, #356]	; (8019dfc <dhcp_create_msg+0x194>)
 8019c98:	f240 726a 	movw	r2, #1898	; 0x76a
 8019c9c:	495a      	ldr	r1, [pc, #360]	; (8019e08 <dhcp_create_msg+0x1a0>)
 8019c9e:	4859      	ldr	r0, [pc, #356]	; (8019e04 <dhcp_create_msg+0x19c>)
 8019ca0:	f003 fbee 	bl	801d480 <iprintf>
 8019ca4:	2300      	movs	r3, #0
 8019ca6:	e0a5      	b.n	8019df4 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8019ca8:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019cac:	f44f 719a 	mov.w	r1, #308	; 0x134
 8019cb0:	2036      	movs	r0, #54	; 0x36
 8019cb2:	f7f7 fd51 	bl	8011758 <pbuf_alloc>
 8019cb6:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8019cb8:	69bb      	ldr	r3, [r7, #24]
 8019cba:	2b00      	cmp	r3, #0
 8019cbc:	d101      	bne.n	8019cc2 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 8019cbe:	2300      	movs	r3, #0
 8019cc0:	e098      	b.n	8019df4 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8019cc2:	69bb      	ldr	r3, [r7, #24]
 8019cc4:	895b      	ldrh	r3, [r3, #10]
 8019cc6:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8019cca:	d206      	bcs.n	8019cda <dhcp_create_msg+0x72>
 8019ccc:	4b4b      	ldr	r3, [pc, #300]	; (8019dfc <dhcp_create_msg+0x194>)
 8019cce:	f240 7271 	movw	r2, #1905	; 0x771
 8019cd2:	494e      	ldr	r1, [pc, #312]	; (8019e0c <dhcp_create_msg+0x1a4>)
 8019cd4:	484b      	ldr	r0, [pc, #300]	; (8019e04 <dhcp_create_msg+0x19c>)
 8019cd6:	f003 fbd3 	bl	801d480 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8019cda:	79fb      	ldrb	r3, [r7, #7]
 8019cdc:	2b03      	cmp	r3, #3
 8019cde:	d103      	bne.n	8019ce8 <dhcp_create_msg+0x80>
 8019ce0:	68bb      	ldr	r3, [r7, #8]
 8019ce2:	795b      	ldrb	r3, [r3, #5]
 8019ce4:	2b03      	cmp	r3, #3
 8019ce6:	d10d      	bne.n	8019d04 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8019ce8:	68bb      	ldr	r3, [r7, #8]
 8019cea:	799b      	ldrb	r3, [r3, #6]
 8019cec:	2b00      	cmp	r3, #0
 8019cee:	d105      	bne.n	8019cfc <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8019cf0:	f003 fc54 	bl	801d59c <rand>
 8019cf4:	4603      	mov	r3, r0
 8019cf6:	461a      	mov	r2, r3
 8019cf8:	4b45      	ldr	r3, [pc, #276]	; (8019e10 <dhcp_create_msg+0x1a8>)
 8019cfa:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8019cfc:	4b44      	ldr	r3, [pc, #272]	; (8019e10 <dhcp_create_msg+0x1a8>)
 8019cfe:	681a      	ldr	r2, [r3, #0]
 8019d00:	68bb      	ldr	r3, [r7, #8]
 8019d02:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8019d04:	69bb      	ldr	r3, [r7, #24]
 8019d06:	685b      	ldr	r3, [r3, #4]
 8019d08:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8019d0a:	f44f 729a 	mov.w	r2, #308	; 0x134
 8019d0e:	2100      	movs	r1, #0
 8019d10:	6978      	ldr	r0, [r7, #20]
 8019d12:	f002 fd09 	bl	801c728 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8019d16:	697b      	ldr	r3, [r7, #20]
 8019d18:	2201      	movs	r2, #1
 8019d1a:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8019d1c:	697b      	ldr	r3, [r7, #20]
 8019d1e:	2201      	movs	r2, #1
 8019d20:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 8019d22:	68fb      	ldr	r3, [r7, #12]
 8019d24:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8019d28:	697b      	ldr	r3, [r7, #20]
 8019d2a:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8019d2c:	68bb      	ldr	r3, [r7, #8]
 8019d2e:	681b      	ldr	r3, [r3, #0]
 8019d30:	4618      	mov	r0, r3
 8019d32:	f7f6 fc52 	bl	80105da <lwip_htonl>
 8019d36:	4602      	mov	r2, r0
 8019d38:	697b      	ldr	r3, [r7, #20]
 8019d3a:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8019d3c:	79fb      	ldrb	r3, [r7, #7]
 8019d3e:	2b08      	cmp	r3, #8
 8019d40:	d010      	beq.n	8019d64 <dhcp_create_msg+0xfc>
 8019d42:	79fb      	ldrb	r3, [r7, #7]
 8019d44:	2b04      	cmp	r3, #4
 8019d46:	d00d      	beq.n	8019d64 <dhcp_create_msg+0xfc>
 8019d48:	79fb      	ldrb	r3, [r7, #7]
 8019d4a:	2b07      	cmp	r3, #7
 8019d4c:	d00a      	beq.n	8019d64 <dhcp_create_msg+0xfc>
 8019d4e:	79fb      	ldrb	r3, [r7, #7]
 8019d50:	2b03      	cmp	r3, #3
 8019d52:	d10c      	bne.n	8019d6e <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8019d54:	68bb      	ldr	r3, [r7, #8]
 8019d56:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8019d58:	2b05      	cmp	r3, #5
 8019d5a:	d003      	beq.n	8019d64 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8019d5c:	68bb      	ldr	r3, [r7, #8]
 8019d5e:	795b      	ldrb	r3, [r3, #5]
 8019d60:	2b04      	cmp	r3, #4
 8019d62:	d104      	bne.n	8019d6e <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8019d64:	68fb      	ldr	r3, [r7, #12]
 8019d66:	3304      	adds	r3, #4
 8019d68:	681a      	ldr	r2, [r3, #0]
 8019d6a:	697b      	ldr	r3, [r7, #20]
 8019d6c:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8019d6e:	2300      	movs	r3, #0
 8019d70:	83fb      	strh	r3, [r7, #30]
 8019d72:	e00c      	b.n	8019d8e <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8019d74:	8bfa      	ldrh	r2, [r7, #30]
 8019d76:	8bfb      	ldrh	r3, [r7, #30]
 8019d78:	68f9      	ldr	r1, [r7, #12]
 8019d7a:	440a      	add	r2, r1
 8019d7c:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 8019d80:	697a      	ldr	r2, [r7, #20]
 8019d82:	4413      	add	r3, r2
 8019d84:	460a      	mov	r2, r1
 8019d86:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8019d88:	8bfb      	ldrh	r3, [r7, #30]
 8019d8a:	3301      	adds	r3, #1
 8019d8c:	83fb      	strh	r3, [r7, #30]
 8019d8e:	8bfb      	ldrh	r3, [r7, #30]
 8019d90:	2b05      	cmp	r3, #5
 8019d92:	d9ef      	bls.n	8019d74 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8019d94:	697b      	ldr	r3, [r7, #20]
 8019d96:	2200      	movs	r2, #0
 8019d98:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8019d9c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8019da0:	2200      	movs	r2, #0
 8019da2:	f062 027d 	orn	r2, r2, #125	; 0x7d
 8019da6:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 8019daa:	2200      	movs	r2, #0
 8019dac:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8019db0:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8019db4:	2200      	movs	r2, #0
 8019db6:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8019dba:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8019dbe:	697b      	ldr	r3, [r7, #20]
 8019dc0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8019dc4:	2301      	movs	r3, #1
 8019dc6:	2235      	movs	r2, #53	; 0x35
 8019dc8:	2000      	movs	r0, #0
 8019dca:	f7ff fadb 	bl	8019384 <dhcp_option>
 8019dce:	4603      	mov	r3, r0
 8019dd0:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8019dd2:	697b      	ldr	r3, [r7, #20]
 8019dd4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8019dd8:	79fa      	ldrb	r2, [r7, #7]
 8019dda:	8a7b      	ldrh	r3, [r7, #18]
 8019ddc:	4618      	mov	r0, r3
 8019dde:	f7ff fb05 	bl	80193ec <dhcp_option_byte>
 8019de2:	4603      	mov	r3, r0
 8019de4:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 8019de6:	683b      	ldr	r3, [r7, #0]
 8019de8:	2b00      	cmp	r3, #0
 8019dea:	d002      	beq.n	8019df2 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 8019dec:	683b      	ldr	r3, [r7, #0]
 8019dee:	8a7a      	ldrh	r2, [r7, #18]
 8019df0:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 8019df2:	69bb      	ldr	r3, [r7, #24]
}
 8019df4:	4618      	mov	r0, r3
 8019df6:	3720      	adds	r7, #32
 8019df8:	46bd      	mov	sp, r7
 8019dfa:	bd80      	pop	{r7, pc}
 8019dfc:	08021b24 	.word	0x08021b24
 8019e00:	08021e44 	.word	0x08021e44
 8019e04:	08021b84 	.word	0x08021b84
 8019e08:	08021e64 	.word	0x08021e64
 8019e0c:	08021e84 	.word	0x08021e84
 8019e10:	200137f8 	.word	0x200137f8

08019e14 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8019e14:	b580      	push	{r7, lr}
 8019e16:	b084      	sub	sp, #16
 8019e18:	af00      	add	r7, sp, #0
 8019e1a:	4603      	mov	r3, r0
 8019e1c:	60b9      	str	r1, [r7, #8]
 8019e1e:	607a      	str	r2, [r7, #4]
 8019e20:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 8019e22:	89fb      	ldrh	r3, [r7, #14]
 8019e24:	1c5a      	adds	r2, r3, #1
 8019e26:	81fa      	strh	r2, [r7, #14]
 8019e28:	461a      	mov	r2, r3
 8019e2a:	68bb      	ldr	r3, [r7, #8]
 8019e2c:	4413      	add	r3, r2
 8019e2e:	22ff      	movs	r2, #255	; 0xff
 8019e30:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8019e32:	e007      	b.n	8019e44 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8019e34:	89fb      	ldrh	r3, [r7, #14]
 8019e36:	1c5a      	adds	r2, r3, #1
 8019e38:	81fa      	strh	r2, [r7, #14]
 8019e3a:	461a      	mov	r2, r3
 8019e3c:	68bb      	ldr	r3, [r7, #8]
 8019e3e:	4413      	add	r3, r2
 8019e40:	2200      	movs	r2, #0
 8019e42:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8019e44:	89fb      	ldrh	r3, [r7, #14]
 8019e46:	2b43      	cmp	r3, #67	; 0x43
 8019e48:	d904      	bls.n	8019e54 <dhcp_option_trailer+0x40>
 8019e4a:	89fb      	ldrh	r3, [r7, #14]
 8019e4c:	f003 0303 	and.w	r3, r3, #3
 8019e50:	2b00      	cmp	r3, #0
 8019e52:	d002      	beq.n	8019e5a <dhcp_option_trailer+0x46>
 8019e54:	89fb      	ldrh	r3, [r7, #14]
 8019e56:	2b43      	cmp	r3, #67	; 0x43
 8019e58:	d9ec      	bls.n	8019e34 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8019e5a:	89fb      	ldrh	r3, [r7, #14]
 8019e5c:	33f0      	adds	r3, #240	; 0xf0
 8019e5e:	b29b      	uxth	r3, r3
 8019e60:	4619      	mov	r1, r3
 8019e62:	6878      	ldr	r0, [r7, #4]
 8019e64:	f7f7 fdd6 	bl	8011a14 <pbuf_realloc>
}
 8019e68:	bf00      	nop
 8019e6a:	3710      	adds	r7, #16
 8019e6c:	46bd      	mov	sp, r7
 8019e6e:	bd80      	pop	{r7, pc}

08019e70 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8019e70:	b480      	push	{r7}
 8019e72:	b085      	sub	sp, #20
 8019e74:	af00      	add	r7, sp, #0
 8019e76:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8019e78:	687b      	ldr	r3, [r7, #4]
 8019e7a:	2b00      	cmp	r3, #0
 8019e7c:	d017      	beq.n	8019eae <dhcp_supplied_address+0x3e>
 8019e7e:	687b      	ldr	r3, [r7, #4]
 8019e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019e82:	2b00      	cmp	r3, #0
 8019e84:	d013      	beq.n	8019eae <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8019e86:	687b      	ldr	r3, [r7, #4]
 8019e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019e8a:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8019e8c:	68fb      	ldr	r3, [r7, #12]
 8019e8e:	795b      	ldrb	r3, [r3, #5]
 8019e90:	2b0a      	cmp	r3, #10
 8019e92:	d007      	beq.n	8019ea4 <dhcp_supplied_address+0x34>
 8019e94:	68fb      	ldr	r3, [r7, #12]
 8019e96:	795b      	ldrb	r3, [r3, #5]
 8019e98:	2b05      	cmp	r3, #5
 8019e9a:	d003      	beq.n	8019ea4 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8019e9c:	68fb      	ldr	r3, [r7, #12]
 8019e9e:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8019ea0:	2b04      	cmp	r3, #4
 8019ea2:	d101      	bne.n	8019ea8 <dhcp_supplied_address+0x38>
 8019ea4:	2301      	movs	r3, #1
 8019ea6:	e000      	b.n	8019eaa <dhcp_supplied_address+0x3a>
 8019ea8:	2300      	movs	r3, #0
 8019eaa:	b2db      	uxtb	r3, r3
 8019eac:	e000      	b.n	8019eb0 <dhcp_supplied_address+0x40>
  }
  return 0;
 8019eae:	2300      	movs	r3, #0
}
 8019eb0:	4618      	mov	r0, r3
 8019eb2:	3714      	adds	r7, #20
 8019eb4:	46bd      	mov	sp, r7
 8019eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019eba:	4770      	bx	lr

08019ebc <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8019ebc:	b580      	push	{r7, lr}
 8019ebe:	b082      	sub	sp, #8
 8019ec0:	af00      	add	r7, sp, #0
 8019ec2:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8019ec4:	4915      	ldr	r1, [pc, #84]	; (8019f1c <etharp_free_entry+0x60>)
 8019ec6:	687a      	ldr	r2, [r7, #4]
 8019ec8:	4613      	mov	r3, r2
 8019eca:	005b      	lsls	r3, r3, #1
 8019ecc:	4413      	add	r3, r2
 8019ece:	00db      	lsls	r3, r3, #3
 8019ed0:	440b      	add	r3, r1
 8019ed2:	681b      	ldr	r3, [r3, #0]
 8019ed4:	2b00      	cmp	r3, #0
 8019ed6:	d013      	beq.n	8019f00 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8019ed8:	4910      	ldr	r1, [pc, #64]	; (8019f1c <etharp_free_entry+0x60>)
 8019eda:	687a      	ldr	r2, [r7, #4]
 8019edc:	4613      	mov	r3, r2
 8019ede:	005b      	lsls	r3, r3, #1
 8019ee0:	4413      	add	r3, r2
 8019ee2:	00db      	lsls	r3, r3, #3
 8019ee4:	440b      	add	r3, r1
 8019ee6:	681b      	ldr	r3, [r3, #0]
 8019ee8:	4618      	mov	r0, r3
 8019eea:	f7f7 ff19 	bl	8011d20 <pbuf_free>
    arp_table[i].q = NULL;
 8019eee:	490b      	ldr	r1, [pc, #44]	; (8019f1c <etharp_free_entry+0x60>)
 8019ef0:	687a      	ldr	r2, [r7, #4]
 8019ef2:	4613      	mov	r3, r2
 8019ef4:	005b      	lsls	r3, r3, #1
 8019ef6:	4413      	add	r3, r2
 8019ef8:	00db      	lsls	r3, r3, #3
 8019efa:	440b      	add	r3, r1
 8019efc:	2200      	movs	r2, #0
 8019efe:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8019f00:	4906      	ldr	r1, [pc, #24]	; (8019f1c <etharp_free_entry+0x60>)
 8019f02:	687a      	ldr	r2, [r7, #4]
 8019f04:	4613      	mov	r3, r2
 8019f06:	005b      	lsls	r3, r3, #1
 8019f08:	4413      	add	r3, r2
 8019f0a:	00db      	lsls	r3, r3, #3
 8019f0c:	440b      	add	r3, r1
 8019f0e:	3314      	adds	r3, #20
 8019f10:	2200      	movs	r2, #0
 8019f12:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8019f14:	bf00      	nop
 8019f16:	3708      	adds	r7, #8
 8019f18:	46bd      	mov	sp, r7
 8019f1a:	bd80      	pop	{r7, pc}
 8019f1c:	200137fc 	.word	0x200137fc

08019f20 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8019f20:	b580      	push	{r7, lr}
 8019f22:	b082      	sub	sp, #8
 8019f24:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8019f26:	2300      	movs	r3, #0
 8019f28:	607b      	str	r3, [r7, #4]
 8019f2a:	e096      	b.n	801a05a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8019f2c:	494f      	ldr	r1, [pc, #316]	; (801a06c <etharp_tmr+0x14c>)
 8019f2e:	687a      	ldr	r2, [r7, #4]
 8019f30:	4613      	mov	r3, r2
 8019f32:	005b      	lsls	r3, r3, #1
 8019f34:	4413      	add	r3, r2
 8019f36:	00db      	lsls	r3, r3, #3
 8019f38:	440b      	add	r3, r1
 8019f3a:	3314      	adds	r3, #20
 8019f3c:	781b      	ldrb	r3, [r3, #0]
 8019f3e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8019f40:	78fb      	ldrb	r3, [r7, #3]
 8019f42:	2b00      	cmp	r3, #0
 8019f44:	f000 8086 	beq.w	801a054 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8019f48:	4948      	ldr	r1, [pc, #288]	; (801a06c <etharp_tmr+0x14c>)
 8019f4a:	687a      	ldr	r2, [r7, #4]
 8019f4c:	4613      	mov	r3, r2
 8019f4e:	005b      	lsls	r3, r3, #1
 8019f50:	4413      	add	r3, r2
 8019f52:	00db      	lsls	r3, r3, #3
 8019f54:	440b      	add	r3, r1
 8019f56:	3312      	adds	r3, #18
 8019f58:	881b      	ldrh	r3, [r3, #0]
 8019f5a:	3301      	adds	r3, #1
 8019f5c:	b298      	uxth	r0, r3
 8019f5e:	4943      	ldr	r1, [pc, #268]	; (801a06c <etharp_tmr+0x14c>)
 8019f60:	687a      	ldr	r2, [r7, #4]
 8019f62:	4613      	mov	r3, r2
 8019f64:	005b      	lsls	r3, r3, #1
 8019f66:	4413      	add	r3, r2
 8019f68:	00db      	lsls	r3, r3, #3
 8019f6a:	440b      	add	r3, r1
 8019f6c:	3312      	adds	r3, #18
 8019f6e:	4602      	mov	r2, r0
 8019f70:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8019f72:	493e      	ldr	r1, [pc, #248]	; (801a06c <etharp_tmr+0x14c>)
 8019f74:	687a      	ldr	r2, [r7, #4]
 8019f76:	4613      	mov	r3, r2
 8019f78:	005b      	lsls	r3, r3, #1
 8019f7a:	4413      	add	r3, r2
 8019f7c:	00db      	lsls	r3, r3, #3
 8019f7e:	440b      	add	r3, r1
 8019f80:	3312      	adds	r3, #18
 8019f82:	881b      	ldrh	r3, [r3, #0]
 8019f84:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8019f88:	d215      	bcs.n	8019fb6 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8019f8a:	4938      	ldr	r1, [pc, #224]	; (801a06c <etharp_tmr+0x14c>)
 8019f8c:	687a      	ldr	r2, [r7, #4]
 8019f8e:	4613      	mov	r3, r2
 8019f90:	005b      	lsls	r3, r3, #1
 8019f92:	4413      	add	r3, r2
 8019f94:	00db      	lsls	r3, r3, #3
 8019f96:	440b      	add	r3, r1
 8019f98:	3314      	adds	r3, #20
 8019f9a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8019f9c:	2b01      	cmp	r3, #1
 8019f9e:	d10e      	bne.n	8019fbe <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8019fa0:	4932      	ldr	r1, [pc, #200]	; (801a06c <etharp_tmr+0x14c>)
 8019fa2:	687a      	ldr	r2, [r7, #4]
 8019fa4:	4613      	mov	r3, r2
 8019fa6:	005b      	lsls	r3, r3, #1
 8019fa8:	4413      	add	r3, r2
 8019faa:	00db      	lsls	r3, r3, #3
 8019fac:	440b      	add	r3, r1
 8019fae:	3312      	adds	r3, #18
 8019fb0:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8019fb2:	2b04      	cmp	r3, #4
 8019fb4:	d903      	bls.n	8019fbe <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8019fb6:	6878      	ldr	r0, [r7, #4]
 8019fb8:	f7ff ff80 	bl	8019ebc <etharp_free_entry>
 8019fbc:	e04a      	b.n	801a054 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8019fbe:	492b      	ldr	r1, [pc, #172]	; (801a06c <etharp_tmr+0x14c>)
 8019fc0:	687a      	ldr	r2, [r7, #4]
 8019fc2:	4613      	mov	r3, r2
 8019fc4:	005b      	lsls	r3, r3, #1
 8019fc6:	4413      	add	r3, r2
 8019fc8:	00db      	lsls	r3, r3, #3
 8019fca:	440b      	add	r3, r1
 8019fcc:	3314      	adds	r3, #20
 8019fce:	781b      	ldrb	r3, [r3, #0]
 8019fd0:	2b03      	cmp	r3, #3
 8019fd2:	d10a      	bne.n	8019fea <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8019fd4:	4925      	ldr	r1, [pc, #148]	; (801a06c <etharp_tmr+0x14c>)
 8019fd6:	687a      	ldr	r2, [r7, #4]
 8019fd8:	4613      	mov	r3, r2
 8019fda:	005b      	lsls	r3, r3, #1
 8019fdc:	4413      	add	r3, r2
 8019fde:	00db      	lsls	r3, r3, #3
 8019fe0:	440b      	add	r3, r1
 8019fe2:	3314      	adds	r3, #20
 8019fe4:	2204      	movs	r2, #4
 8019fe6:	701a      	strb	r2, [r3, #0]
 8019fe8:	e034      	b.n	801a054 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8019fea:	4920      	ldr	r1, [pc, #128]	; (801a06c <etharp_tmr+0x14c>)
 8019fec:	687a      	ldr	r2, [r7, #4]
 8019fee:	4613      	mov	r3, r2
 8019ff0:	005b      	lsls	r3, r3, #1
 8019ff2:	4413      	add	r3, r2
 8019ff4:	00db      	lsls	r3, r3, #3
 8019ff6:	440b      	add	r3, r1
 8019ff8:	3314      	adds	r3, #20
 8019ffa:	781b      	ldrb	r3, [r3, #0]
 8019ffc:	2b04      	cmp	r3, #4
 8019ffe:	d10a      	bne.n	801a016 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801a000:	491a      	ldr	r1, [pc, #104]	; (801a06c <etharp_tmr+0x14c>)
 801a002:	687a      	ldr	r2, [r7, #4]
 801a004:	4613      	mov	r3, r2
 801a006:	005b      	lsls	r3, r3, #1
 801a008:	4413      	add	r3, r2
 801a00a:	00db      	lsls	r3, r3, #3
 801a00c:	440b      	add	r3, r1
 801a00e:	3314      	adds	r3, #20
 801a010:	2202      	movs	r2, #2
 801a012:	701a      	strb	r2, [r3, #0]
 801a014:	e01e      	b.n	801a054 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801a016:	4915      	ldr	r1, [pc, #84]	; (801a06c <etharp_tmr+0x14c>)
 801a018:	687a      	ldr	r2, [r7, #4]
 801a01a:	4613      	mov	r3, r2
 801a01c:	005b      	lsls	r3, r3, #1
 801a01e:	4413      	add	r3, r2
 801a020:	00db      	lsls	r3, r3, #3
 801a022:	440b      	add	r3, r1
 801a024:	3314      	adds	r3, #20
 801a026:	781b      	ldrb	r3, [r3, #0]
 801a028:	2b01      	cmp	r3, #1
 801a02a:	d113      	bne.n	801a054 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801a02c:	490f      	ldr	r1, [pc, #60]	; (801a06c <etharp_tmr+0x14c>)
 801a02e:	687a      	ldr	r2, [r7, #4]
 801a030:	4613      	mov	r3, r2
 801a032:	005b      	lsls	r3, r3, #1
 801a034:	4413      	add	r3, r2
 801a036:	00db      	lsls	r3, r3, #3
 801a038:	440b      	add	r3, r1
 801a03a:	3308      	adds	r3, #8
 801a03c:	6818      	ldr	r0, [r3, #0]
 801a03e:	687a      	ldr	r2, [r7, #4]
 801a040:	4613      	mov	r3, r2
 801a042:	005b      	lsls	r3, r3, #1
 801a044:	4413      	add	r3, r2
 801a046:	00db      	lsls	r3, r3, #3
 801a048:	4a08      	ldr	r2, [pc, #32]	; (801a06c <etharp_tmr+0x14c>)
 801a04a:	4413      	add	r3, r2
 801a04c:	3304      	adds	r3, #4
 801a04e:	4619      	mov	r1, r3
 801a050:	f000 fe72 	bl	801ad38 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a054:	687b      	ldr	r3, [r7, #4]
 801a056:	3301      	adds	r3, #1
 801a058:	607b      	str	r3, [r7, #4]
 801a05a:	687b      	ldr	r3, [r7, #4]
 801a05c:	2b09      	cmp	r3, #9
 801a05e:	f77f af65 	ble.w	8019f2c <etharp_tmr+0xc>
      }
    }
  }
}
 801a062:	bf00      	nop
 801a064:	bf00      	nop
 801a066:	3708      	adds	r7, #8
 801a068:	46bd      	mov	sp, r7
 801a06a:	bd80      	pop	{r7, pc}
 801a06c:	200137fc 	.word	0x200137fc

0801a070 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801a070:	b580      	push	{r7, lr}
 801a072:	b08a      	sub	sp, #40	; 0x28
 801a074:	af00      	add	r7, sp, #0
 801a076:	60f8      	str	r0, [r7, #12]
 801a078:	460b      	mov	r3, r1
 801a07a:	607a      	str	r2, [r7, #4]
 801a07c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801a07e:	230a      	movs	r3, #10
 801a080:	84fb      	strh	r3, [r7, #38]	; 0x26
 801a082:	230a      	movs	r3, #10
 801a084:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801a086:	230a      	movs	r3, #10
 801a088:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801a08a:	2300      	movs	r3, #0
 801a08c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801a08e:	230a      	movs	r3, #10
 801a090:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801a092:	2300      	movs	r3, #0
 801a094:	83bb      	strh	r3, [r7, #28]
 801a096:	2300      	movs	r3, #0
 801a098:	837b      	strh	r3, [r7, #26]
 801a09a:	2300      	movs	r3, #0
 801a09c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a09e:	2300      	movs	r3, #0
 801a0a0:	843b      	strh	r3, [r7, #32]
 801a0a2:	e0ae      	b.n	801a202 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801a0a4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a0a8:	49a6      	ldr	r1, [pc, #664]	; (801a344 <etharp_find_entry+0x2d4>)
 801a0aa:	4613      	mov	r3, r2
 801a0ac:	005b      	lsls	r3, r3, #1
 801a0ae:	4413      	add	r3, r2
 801a0b0:	00db      	lsls	r3, r3, #3
 801a0b2:	440b      	add	r3, r1
 801a0b4:	3314      	adds	r3, #20
 801a0b6:	781b      	ldrb	r3, [r3, #0]
 801a0b8:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801a0ba:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801a0be:	2b0a      	cmp	r3, #10
 801a0c0:	d105      	bne.n	801a0ce <etharp_find_entry+0x5e>
 801a0c2:	7dfb      	ldrb	r3, [r7, #23]
 801a0c4:	2b00      	cmp	r3, #0
 801a0c6:	d102      	bne.n	801a0ce <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801a0c8:	8c3b      	ldrh	r3, [r7, #32]
 801a0ca:	847b      	strh	r3, [r7, #34]	; 0x22
 801a0cc:	e095      	b.n	801a1fa <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801a0ce:	7dfb      	ldrb	r3, [r7, #23]
 801a0d0:	2b00      	cmp	r3, #0
 801a0d2:	f000 8092 	beq.w	801a1fa <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801a0d6:	7dfb      	ldrb	r3, [r7, #23]
 801a0d8:	2b01      	cmp	r3, #1
 801a0da:	d009      	beq.n	801a0f0 <etharp_find_entry+0x80>
 801a0dc:	7dfb      	ldrb	r3, [r7, #23]
 801a0de:	2b01      	cmp	r3, #1
 801a0e0:	d806      	bhi.n	801a0f0 <etharp_find_entry+0x80>
 801a0e2:	4b99      	ldr	r3, [pc, #612]	; (801a348 <etharp_find_entry+0x2d8>)
 801a0e4:	f240 1223 	movw	r2, #291	; 0x123
 801a0e8:	4998      	ldr	r1, [pc, #608]	; (801a34c <etharp_find_entry+0x2dc>)
 801a0ea:	4899      	ldr	r0, [pc, #612]	; (801a350 <etharp_find_entry+0x2e0>)
 801a0ec:	f003 f9c8 	bl	801d480 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801a0f0:	68fb      	ldr	r3, [r7, #12]
 801a0f2:	2b00      	cmp	r3, #0
 801a0f4:	d020      	beq.n	801a138 <etharp_find_entry+0xc8>
 801a0f6:	68fb      	ldr	r3, [r7, #12]
 801a0f8:	6819      	ldr	r1, [r3, #0]
 801a0fa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a0fe:	4891      	ldr	r0, [pc, #580]	; (801a344 <etharp_find_entry+0x2d4>)
 801a100:	4613      	mov	r3, r2
 801a102:	005b      	lsls	r3, r3, #1
 801a104:	4413      	add	r3, r2
 801a106:	00db      	lsls	r3, r3, #3
 801a108:	4403      	add	r3, r0
 801a10a:	3304      	adds	r3, #4
 801a10c:	681b      	ldr	r3, [r3, #0]
 801a10e:	4299      	cmp	r1, r3
 801a110:	d112      	bne.n	801a138 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801a112:	687b      	ldr	r3, [r7, #4]
 801a114:	2b00      	cmp	r3, #0
 801a116:	d00c      	beq.n	801a132 <etharp_find_entry+0xc2>
 801a118:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a11c:	4989      	ldr	r1, [pc, #548]	; (801a344 <etharp_find_entry+0x2d4>)
 801a11e:	4613      	mov	r3, r2
 801a120:	005b      	lsls	r3, r3, #1
 801a122:	4413      	add	r3, r2
 801a124:	00db      	lsls	r3, r3, #3
 801a126:	440b      	add	r3, r1
 801a128:	3308      	adds	r3, #8
 801a12a:	681b      	ldr	r3, [r3, #0]
 801a12c:	687a      	ldr	r2, [r7, #4]
 801a12e:	429a      	cmp	r2, r3
 801a130:	d102      	bne.n	801a138 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801a132:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a136:	e100      	b.n	801a33a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801a138:	7dfb      	ldrb	r3, [r7, #23]
 801a13a:	2b01      	cmp	r3, #1
 801a13c:	d140      	bne.n	801a1c0 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801a13e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a142:	4980      	ldr	r1, [pc, #512]	; (801a344 <etharp_find_entry+0x2d4>)
 801a144:	4613      	mov	r3, r2
 801a146:	005b      	lsls	r3, r3, #1
 801a148:	4413      	add	r3, r2
 801a14a:	00db      	lsls	r3, r3, #3
 801a14c:	440b      	add	r3, r1
 801a14e:	681b      	ldr	r3, [r3, #0]
 801a150:	2b00      	cmp	r3, #0
 801a152:	d01a      	beq.n	801a18a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801a154:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a158:	497a      	ldr	r1, [pc, #488]	; (801a344 <etharp_find_entry+0x2d4>)
 801a15a:	4613      	mov	r3, r2
 801a15c:	005b      	lsls	r3, r3, #1
 801a15e:	4413      	add	r3, r2
 801a160:	00db      	lsls	r3, r3, #3
 801a162:	440b      	add	r3, r1
 801a164:	3312      	adds	r3, #18
 801a166:	881b      	ldrh	r3, [r3, #0]
 801a168:	8bba      	ldrh	r2, [r7, #28]
 801a16a:	429a      	cmp	r2, r3
 801a16c:	d845      	bhi.n	801a1fa <etharp_find_entry+0x18a>
            old_queue = i;
 801a16e:	8c3b      	ldrh	r3, [r7, #32]
 801a170:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801a172:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a176:	4973      	ldr	r1, [pc, #460]	; (801a344 <etharp_find_entry+0x2d4>)
 801a178:	4613      	mov	r3, r2
 801a17a:	005b      	lsls	r3, r3, #1
 801a17c:	4413      	add	r3, r2
 801a17e:	00db      	lsls	r3, r3, #3
 801a180:	440b      	add	r3, r1
 801a182:	3312      	adds	r3, #18
 801a184:	881b      	ldrh	r3, [r3, #0]
 801a186:	83bb      	strh	r3, [r7, #28]
 801a188:	e037      	b.n	801a1fa <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801a18a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a18e:	496d      	ldr	r1, [pc, #436]	; (801a344 <etharp_find_entry+0x2d4>)
 801a190:	4613      	mov	r3, r2
 801a192:	005b      	lsls	r3, r3, #1
 801a194:	4413      	add	r3, r2
 801a196:	00db      	lsls	r3, r3, #3
 801a198:	440b      	add	r3, r1
 801a19a:	3312      	adds	r3, #18
 801a19c:	881b      	ldrh	r3, [r3, #0]
 801a19e:	8b7a      	ldrh	r2, [r7, #26]
 801a1a0:	429a      	cmp	r2, r3
 801a1a2:	d82a      	bhi.n	801a1fa <etharp_find_entry+0x18a>
            old_pending = i;
 801a1a4:	8c3b      	ldrh	r3, [r7, #32]
 801a1a6:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 801a1a8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a1ac:	4965      	ldr	r1, [pc, #404]	; (801a344 <etharp_find_entry+0x2d4>)
 801a1ae:	4613      	mov	r3, r2
 801a1b0:	005b      	lsls	r3, r3, #1
 801a1b2:	4413      	add	r3, r2
 801a1b4:	00db      	lsls	r3, r3, #3
 801a1b6:	440b      	add	r3, r1
 801a1b8:	3312      	adds	r3, #18
 801a1ba:	881b      	ldrh	r3, [r3, #0]
 801a1bc:	837b      	strh	r3, [r7, #26]
 801a1be:	e01c      	b.n	801a1fa <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801a1c0:	7dfb      	ldrb	r3, [r7, #23]
 801a1c2:	2b01      	cmp	r3, #1
 801a1c4:	d919      	bls.n	801a1fa <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801a1c6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a1ca:	495e      	ldr	r1, [pc, #376]	; (801a344 <etharp_find_entry+0x2d4>)
 801a1cc:	4613      	mov	r3, r2
 801a1ce:	005b      	lsls	r3, r3, #1
 801a1d0:	4413      	add	r3, r2
 801a1d2:	00db      	lsls	r3, r3, #3
 801a1d4:	440b      	add	r3, r1
 801a1d6:	3312      	adds	r3, #18
 801a1d8:	881b      	ldrh	r3, [r3, #0]
 801a1da:	8b3a      	ldrh	r2, [r7, #24]
 801a1dc:	429a      	cmp	r2, r3
 801a1de:	d80c      	bhi.n	801a1fa <etharp_find_entry+0x18a>
            old_stable = i;
 801a1e0:	8c3b      	ldrh	r3, [r7, #32]
 801a1e2:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 801a1e4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a1e8:	4956      	ldr	r1, [pc, #344]	; (801a344 <etharp_find_entry+0x2d4>)
 801a1ea:	4613      	mov	r3, r2
 801a1ec:	005b      	lsls	r3, r3, #1
 801a1ee:	4413      	add	r3, r2
 801a1f0:	00db      	lsls	r3, r3, #3
 801a1f2:	440b      	add	r3, r1
 801a1f4:	3312      	adds	r3, #18
 801a1f6:	881b      	ldrh	r3, [r3, #0]
 801a1f8:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a1fa:	8c3b      	ldrh	r3, [r7, #32]
 801a1fc:	3301      	adds	r3, #1
 801a1fe:	b29b      	uxth	r3, r3
 801a200:	843b      	strh	r3, [r7, #32]
 801a202:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a206:	2b09      	cmp	r3, #9
 801a208:	f77f af4c 	ble.w	801a0a4 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801a20c:	7afb      	ldrb	r3, [r7, #11]
 801a20e:	f003 0302 	and.w	r3, r3, #2
 801a212:	2b00      	cmp	r3, #0
 801a214:	d108      	bne.n	801a228 <etharp_find_entry+0x1b8>
 801a216:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801a21a:	2b0a      	cmp	r3, #10
 801a21c:	d107      	bne.n	801a22e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801a21e:	7afb      	ldrb	r3, [r7, #11]
 801a220:	f003 0301 	and.w	r3, r3, #1
 801a224:	2b00      	cmp	r3, #0
 801a226:	d102      	bne.n	801a22e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801a228:	f04f 33ff 	mov.w	r3, #4294967295
 801a22c:	e085      	b.n	801a33a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801a22e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801a232:	2b09      	cmp	r3, #9
 801a234:	dc02      	bgt.n	801a23c <etharp_find_entry+0x1cc>
    i = empty;
 801a236:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801a238:	843b      	strh	r3, [r7, #32]
 801a23a:	e039      	b.n	801a2b0 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801a23c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801a240:	2b09      	cmp	r3, #9
 801a242:	dc14      	bgt.n	801a26e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801a244:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a246:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801a248:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a24c:	493d      	ldr	r1, [pc, #244]	; (801a344 <etharp_find_entry+0x2d4>)
 801a24e:	4613      	mov	r3, r2
 801a250:	005b      	lsls	r3, r3, #1
 801a252:	4413      	add	r3, r2
 801a254:	00db      	lsls	r3, r3, #3
 801a256:	440b      	add	r3, r1
 801a258:	681b      	ldr	r3, [r3, #0]
 801a25a:	2b00      	cmp	r3, #0
 801a25c:	d018      	beq.n	801a290 <etharp_find_entry+0x220>
 801a25e:	4b3a      	ldr	r3, [pc, #232]	; (801a348 <etharp_find_entry+0x2d8>)
 801a260:	f240 126d 	movw	r2, #365	; 0x16d
 801a264:	493b      	ldr	r1, [pc, #236]	; (801a354 <etharp_find_entry+0x2e4>)
 801a266:	483a      	ldr	r0, [pc, #232]	; (801a350 <etharp_find_entry+0x2e0>)
 801a268:	f003 f90a 	bl	801d480 <iprintf>
 801a26c:	e010      	b.n	801a290 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801a26e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801a272:	2b09      	cmp	r3, #9
 801a274:	dc02      	bgt.n	801a27c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801a276:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801a278:	843b      	strh	r3, [r7, #32]
 801a27a:	e009      	b.n	801a290 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801a27c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801a280:	2b09      	cmp	r3, #9
 801a282:	dc02      	bgt.n	801a28a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801a284:	8bfb      	ldrh	r3, [r7, #30]
 801a286:	843b      	strh	r3, [r7, #32]
 801a288:	e002      	b.n	801a290 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801a28a:	f04f 33ff 	mov.w	r3, #4294967295
 801a28e:	e054      	b.n	801a33a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801a290:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a294:	2b09      	cmp	r3, #9
 801a296:	dd06      	ble.n	801a2a6 <etharp_find_entry+0x236>
 801a298:	4b2b      	ldr	r3, [pc, #172]	; (801a348 <etharp_find_entry+0x2d8>)
 801a29a:	f240 127f 	movw	r2, #383	; 0x17f
 801a29e:	492e      	ldr	r1, [pc, #184]	; (801a358 <etharp_find_entry+0x2e8>)
 801a2a0:	482b      	ldr	r0, [pc, #172]	; (801a350 <etharp_find_entry+0x2e0>)
 801a2a2:	f003 f8ed 	bl	801d480 <iprintf>
    etharp_free_entry(i);
 801a2a6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a2aa:	4618      	mov	r0, r3
 801a2ac:	f7ff fe06 	bl	8019ebc <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801a2b0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a2b4:	2b09      	cmp	r3, #9
 801a2b6:	dd06      	ble.n	801a2c6 <etharp_find_entry+0x256>
 801a2b8:	4b23      	ldr	r3, [pc, #140]	; (801a348 <etharp_find_entry+0x2d8>)
 801a2ba:	f240 1283 	movw	r2, #387	; 0x183
 801a2be:	4926      	ldr	r1, [pc, #152]	; (801a358 <etharp_find_entry+0x2e8>)
 801a2c0:	4823      	ldr	r0, [pc, #140]	; (801a350 <etharp_find_entry+0x2e0>)
 801a2c2:	f003 f8dd 	bl	801d480 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801a2c6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a2ca:	491e      	ldr	r1, [pc, #120]	; (801a344 <etharp_find_entry+0x2d4>)
 801a2cc:	4613      	mov	r3, r2
 801a2ce:	005b      	lsls	r3, r3, #1
 801a2d0:	4413      	add	r3, r2
 801a2d2:	00db      	lsls	r3, r3, #3
 801a2d4:	440b      	add	r3, r1
 801a2d6:	3314      	adds	r3, #20
 801a2d8:	781b      	ldrb	r3, [r3, #0]
 801a2da:	2b00      	cmp	r3, #0
 801a2dc:	d006      	beq.n	801a2ec <etharp_find_entry+0x27c>
 801a2de:	4b1a      	ldr	r3, [pc, #104]	; (801a348 <etharp_find_entry+0x2d8>)
 801a2e0:	f44f 72c2 	mov.w	r2, #388	; 0x184
 801a2e4:	491d      	ldr	r1, [pc, #116]	; (801a35c <etharp_find_entry+0x2ec>)
 801a2e6:	481a      	ldr	r0, [pc, #104]	; (801a350 <etharp_find_entry+0x2e0>)
 801a2e8:	f003 f8ca 	bl	801d480 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801a2ec:	68fb      	ldr	r3, [r7, #12]
 801a2ee:	2b00      	cmp	r3, #0
 801a2f0:	d00b      	beq.n	801a30a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801a2f2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a2f6:	68fb      	ldr	r3, [r7, #12]
 801a2f8:	6819      	ldr	r1, [r3, #0]
 801a2fa:	4812      	ldr	r0, [pc, #72]	; (801a344 <etharp_find_entry+0x2d4>)
 801a2fc:	4613      	mov	r3, r2
 801a2fe:	005b      	lsls	r3, r3, #1
 801a300:	4413      	add	r3, r2
 801a302:	00db      	lsls	r3, r3, #3
 801a304:	4403      	add	r3, r0
 801a306:	3304      	adds	r3, #4
 801a308:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801a30a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a30e:	490d      	ldr	r1, [pc, #52]	; (801a344 <etharp_find_entry+0x2d4>)
 801a310:	4613      	mov	r3, r2
 801a312:	005b      	lsls	r3, r3, #1
 801a314:	4413      	add	r3, r2
 801a316:	00db      	lsls	r3, r3, #3
 801a318:	440b      	add	r3, r1
 801a31a:	3312      	adds	r3, #18
 801a31c:	2200      	movs	r2, #0
 801a31e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801a320:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a324:	4907      	ldr	r1, [pc, #28]	; (801a344 <etharp_find_entry+0x2d4>)
 801a326:	4613      	mov	r3, r2
 801a328:	005b      	lsls	r3, r3, #1
 801a32a:	4413      	add	r3, r2
 801a32c:	00db      	lsls	r3, r3, #3
 801a32e:	440b      	add	r3, r1
 801a330:	3308      	adds	r3, #8
 801a332:	687a      	ldr	r2, [r7, #4]
 801a334:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801a336:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801a33a:	4618      	mov	r0, r3
 801a33c:	3728      	adds	r7, #40	; 0x28
 801a33e:	46bd      	mov	sp, r7
 801a340:	bd80      	pop	{r7, pc}
 801a342:	bf00      	nop
 801a344:	200137fc 	.word	0x200137fc
 801a348:	08021ec4 	.word	0x08021ec4
 801a34c:	08021efc 	.word	0x08021efc
 801a350:	08021f3c 	.word	0x08021f3c
 801a354:	08021f64 	.word	0x08021f64
 801a358:	08021f7c 	.word	0x08021f7c
 801a35c:	08021f90 	.word	0x08021f90

0801a360 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801a360:	b580      	push	{r7, lr}
 801a362:	b088      	sub	sp, #32
 801a364:	af02      	add	r7, sp, #8
 801a366:	60f8      	str	r0, [r7, #12]
 801a368:	60b9      	str	r1, [r7, #8]
 801a36a:	607a      	str	r2, [r7, #4]
 801a36c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801a36e:	68fb      	ldr	r3, [r7, #12]
 801a370:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801a374:	2b06      	cmp	r3, #6
 801a376:	d006      	beq.n	801a386 <etharp_update_arp_entry+0x26>
 801a378:	4b48      	ldr	r3, [pc, #288]	; (801a49c <etharp_update_arp_entry+0x13c>)
 801a37a:	f240 12a9 	movw	r2, #425	; 0x1a9
 801a37e:	4948      	ldr	r1, [pc, #288]	; (801a4a0 <etharp_update_arp_entry+0x140>)
 801a380:	4848      	ldr	r0, [pc, #288]	; (801a4a4 <etharp_update_arp_entry+0x144>)
 801a382:	f003 f87d 	bl	801d480 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801a386:	68bb      	ldr	r3, [r7, #8]
 801a388:	2b00      	cmp	r3, #0
 801a38a:	d012      	beq.n	801a3b2 <etharp_update_arp_entry+0x52>
 801a38c:	68bb      	ldr	r3, [r7, #8]
 801a38e:	681b      	ldr	r3, [r3, #0]
 801a390:	2b00      	cmp	r3, #0
 801a392:	d00e      	beq.n	801a3b2 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801a394:	68bb      	ldr	r3, [r7, #8]
 801a396:	681b      	ldr	r3, [r3, #0]
 801a398:	68f9      	ldr	r1, [r7, #12]
 801a39a:	4618      	mov	r0, r3
 801a39c:	f001 f920 	bl	801b5e0 <ip4_addr_isbroadcast_u32>
 801a3a0:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801a3a2:	2b00      	cmp	r3, #0
 801a3a4:	d105      	bne.n	801a3b2 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801a3a6:	68bb      	ldr	r3, [r7, #8]
 801a3a8:	681b      	ldr	r3, [r3, #0]
 801a3aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801a3ae:	2be0      	cmp	r3, #224	; 0xe0
 801a3b0:	d102      	bne.n	801a3b8 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801a3b2:	f06f 030f 	mvn.w	r3, #15
 801a3b6:	e06c      	b.n	801a492 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801a3b8:	78fb      	ldrb	r3, [r7, #3]
 801a3ba:	68fa      	ldr	r2, [r7, #12]
 801a3bc:	4619      	mov	r1, r3
 801a3be:	68b8      	ldr	r0, [r7, #8]
 801a3c0:	f7ff fe56 	bl	801a070 <etharp_find_entry>
 801a3c4:	4603      	mov	r3, r0
 801a3c6:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801a3c8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801a3cc:	2b00      	cmp	r3, #0
 801a3ce:	da02      	bge.n	801a3d6 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801a3d0:	8afb      	ldrh	r3, [r7, #22]
 801a3d2:	b25b      	sxtb	r3, r3
 801a3d4:	e05d      	b.n	801a492 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801a3d6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a3da:	4933      	ldr	r1, [pc, #204]	; (801a4a8 <etharp_update_arp_entry+0x148>)
 801a3dc:	4613      	mov	r3, r2
 801a3de:	005b      	lsls	r3, r3, #1
 801a3e0:	4413      	add	r3, r2
 801a3e2:	00db      	lsls	r3, r3, #3
 801a3e4:	440b      	add	r3, r1
 801a3e6:	3314      	adds	r3, #20
 801a3e8:	2202      	movs	r2, #2
 801a3ea:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801a3ec:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a3f0:	492d      	ldr	r1, [pc, #180]	; (801a4a8 <etharp_update_arp_entry+0x148>)
 801a3f2:	4613      	mov	r3, r2
 801a3f4:	005b      	lsls	r3, r3, #1
 801a3f6:	4413      	add	r3, r2
 801a3f8:	00db      	lsls	r3, r3, #3
 801a3fa:	440b      	add	r3, r1
 801a3fc:	3308      	adds	r3, #8
 801a3fe:	68fa      	ldr	r2, [r7, #12]
 801a400:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801a402:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a406:	4613      	mov	r3, r2
 801a408:	005b      	lsls	r3, r3, #1
 801a40a:	4413      	add	r3, r2
 801a40c:	00db      	lsls	r3, r3, #3
 801a40e:	3308      	adds	r3, #8
 801a410:	4a25      	ldr	r2, [pc, #148]	; (801a4a8 <etharp_update_arp_entry+0x148>)
 801a412:	4413      	add	r3, r2
 801a414:	3304      	adds	r3, #4
 801a416:	2206      	movs	r2, #6
 801a418:	6879      	ldr	r1, [r7, #4]
 801a41a:	4618      	mov	r0, r3
 801a41c:	f002 f976 	bl	801c70c <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801a420:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a424:	4920      	ldr	r1, [pc, #128]	; (801a4a8 <etharp_update_arp_entry+0x148>)
 801a426:	4613      	mov	r3, r2
 801a428:	005b      	lsls	r3, r3, #1
 801a42a:	4413      	add	r3, r2
 801a42c:	00db      	lsls	r3, r3, #3
 801a42e:	440b      	add	r3, r1
 801a430:	3312      	adds	r3, #18
 801a432:	2200      	movs	r2, #0
 801a434:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801a436:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a43a:	491b      	ldr	r1, [pc, #108]	; (801a4a8 <etharp_update_arp_entry+0x148>)
 801a43c:	4613      	mov	r3, r2
 801a43e:	005b      	lsls	r3, r3, #1
 801a440:	4413      	add	r3, r2
 801a442:	00db      	lsls	r3, r3, #3
 801a444:	440b      	add	r3, r1
 801a446:	681b      	ldr	r3, [r3, #0]
 801a448:	2b00      	cmp	r3, #0
 801a44a:	d021      	beq.n	801a490 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801a44c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a450:	4915      	ldr	r1, [pc, #84]	; (801a4a8 <etharp_update_arp_entry+0x148>)
 801a452:	4613      	mov	r3, r2
 801a454:	005b      	lsls	r3, r3, #1
 801a456:	4413      	add	r3, r2
 801a458:	00db      	lsls	r3, r3, #3
 801a45a:	440b      	add	r3, r1
 801a45c:	681b      	ldr	r3, [r3, #0]
 801a45e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801a460:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a464:	4910      	ldr	r1, [pc, #64]	; (801a4a8 <etharp_update_arp_entry+0x148>)
 801a466:	4613      	mov	r3, r2
 801a468:	005b      	lsls	r3, r3, #1
 801a46a:	4413      	add	r3, r2
 801a46c:	00db      	lsls	r3, r3, #3
 801a46e:	440b      	add	r3, r1
 801a470:	2200      	movs	r2, #0
 801a472:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801a474:	68fb      	ldr	r3, [r7, #12]
 801a476:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801a47a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801a47e:	9300      	str	r3, [sp, #0]
 801a480:	687b      	ldr	r3, [r7, #4]
 801a482:	6939      	ldr	r1, [r7, #16]
 801a484:	68f8      	ldr	r0, [r7, #12]
 801a486:	f001 ffb9 	bl	801c3fc <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801a48a:	6938      	ldr	r0, [r7, #16]
 801a48c:	f7f7 fc48 	bl	8011d20 <pbuf_free>
  }
  return ERR_OK;
 801a490:	2300      	movs	r3, #0
}
 801a492:	4618      	mov	r0, r3
 801a494:	3718      	adds	r7, #24
 801a496:	46bd      	mov	sp, r7
 801a498:	bd80      	pop	{r7, pc}
 801a49a:	bf00      	nop
 801a49c:	08021ec4 	.word	0x08021ec4
 801a4a0:	08021fbc 	.word	0x08021fbc
 801a4a4:	08021f3c 	.word	0x08021f3c
 801a4a8:	200137fc 	.word	0x200137fc

0801a4ac <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801a4ac:	b580      	push	{r7, lr}
 801a4ae:	b084      	sub	sp, #16
 801a4b0:	af00      	add	r7, sp, #0
 801a4b2:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a4b4:	2300      	movs	r3, #0
 801a4b6:	60fb      	str	r3, [r7, #12]
 801a4b8:	e01e      	b.n	801a4f8 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801a4ba:	4913      	ldr	r1, [pc, #76]	; (801a508 <etharp_cleanup_netif+0x5c>)
 801a4bc:	68fa      	ldr	r2, [r7, #12]
 801a4be:	4613      	mov	r3, r2
 801a4c0:	005b      	lsls	r3, r3, #1
 801a4c2:	4413      	add	r3, r2
 801a4c4:	00db      	lsls	r3, r3, #3
 801a4c6:	440b      	add	r3, r1
 801a4c8:	3314      	adds	r3, #20
 801a4ca:	781b      	ldrb	r3, [r3, #0]
 801a4cc:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801a4ce:	7afb      	ldrb	r3, [r7, #11]
 801a4d0:	2b00      	cmp	r3, #0
 801a4d2:	d00e      	beq.n	801a4f2 <etharp_cleanup_netif+0x46>
 801a4d4:	490c      	ldr	r1, [pc, #48]	; (801a508 <etharp_cleanup_netif+0x5c>)
 801a4d6:	68fa      	ldr	r2, [r7, #12]
 801a4d8:	4613      	mov	r3, r2
 801a4da:	005b      	lsls	r3, r3, #1
 801a4dc:	4413      	add	r3, r2
 801a4de:	00db      	lsls	r3, r3, #3
 801a4e0:	440b      	add	r3, r1
 801a4e2:	3308      	adds	r3, #8
 801a4e4:	681b      	ldr	r3, [r3, #0]
 801a4e6:	687a      	ldr	r2, [r7, #4]
 801a4e8:	429a      	cmp	r2, r3
 801a4ea:	d102      	bne.n	801a4f2 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801a4ec:	68f8      	ldr	r0, [r7, #12]
 801a4ee:	f7ff fce5 	bl	8019ebc <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a4f2:	68fb      	ldr	r3, [r7, #12]
 801a4f4:	3301      	adds	r3, #1
 801a4f6:	60fb      	str	r3, [r7, #12]
 801a4f8:	68fb      	ldr	r3, [r7, #12]
 801a4fa:	2b09      	cmp	r3, #9
 801a4fc:	dddd      	ble.n	801a4ba <etharp_cleanup_netif+0xe>
    }
  }
}
 801a4fe:	bf00      	nop
 801a500:	bf00      	nop
 801a502:	3710      	adds	r7, #16
 801a504:	46bd      	mov	sp, r7
 801a506:	bd80      	pop	{r7, pc}
 801a508:	200137fc 	.word	0x200137fc

0801a50c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801a50c:	b5b0      	push	{r4, r5, r7, lr}
 801a50e:	b08a      	sub	sp, #40	; 0x28
 801a510:	af04      	add	r7, sp, #16
 801a512:	6078      	str	r0, [r7, #4]
 801a514:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801a516:	683b      	ldr	r3, [r7, #0]
 801a518:	2b00      	cmp	r3, #0
 801a51a:	d107      	bne.n	801a52c <etharp_input+0x20>
 801a51c:	4b3f      	ldr	r3, [pc, #252]	; (801a61c <etharp_input+0x110>)
 801a51e:	f240 228a 	movw	r2, #650	; 0x28a
 801a522:	493f      	ldr	r1, [pc, #252]	; (801a620 <etharp_input+0x114>)
 801a524:	483f      	ldr	r0, [pc, #252]	; (801a624 <etharp_input+0x118>)
 801a526:	f002 ffab 	bl	801d480 <iprintf>
 801a52a:	e074      	b.n	801a616 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 801a52c:	687b      	ldr	r3, [r7, #4]
 801a52e:	685b      	ldr	r3, [r3, #4]
 801a530:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801a532:	693b      	ldr	r3, [r7, #16]
 801a534:	881b      	ldrh	r3, [r3, #0]
 801a536:	b29b      	uxth	r3, r3
 801a538:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801a53c:	d10c      	bne.n	801a558 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801a53e:	693b      	ldr	r3, [r7, #16]
 801a540:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801a542:	2b06      	cmp	r3, #6
 801a544:	d108      	bne.n	801a558 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801a546:	693b      	ldr	r3, [r7, #16]
 801a548:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801a54a:	2b04      	cmp	r3, #4
 801a54c:	d104      	bne.n	801a558 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801a54e:	693b      	ldr	r3, [r7, #16]
 801a550:	885b      	ldrh	r3, [r3, #2]
 801a552:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801a554:	2b08      	cmp	r3, #8
 801a556:	d003      	beq.n	801a560 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801a558:	6878      	ldr	r0, [r7, #4]
 801a55a:	f7f7 fbe1 	bl	8011d20 <pbuf_free>
    return;
 801a55e:	e05a      	b.n	801a616 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801a560:	693b      	ldr	r3, [r7, #16]
 801a562:	330e      	adds	r3, #14
 801a564:	681b      	ldr	r3, [r3, #0]
 801a566:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801a568:	693b      	ldr	r3, [r7, #16]
 801a56a:	3318      	adds	r3, #24
 801a56c:	681b      	ldr	r3, [r3, #0]
 801a56e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801a570:	683b      	ldr	r3, [r7, #0]
 801a572:	3304      	adds	r3, #4
 801a574:	681b      	ldr	r3, [r3, #0]
 801a576:	2b00      	cmp	r3, #0
 801a578:	d102      	bne.n	801a580 <etharp_input+0x74>
    for_us = 0;
 801a57a:	2300      	movs	r3, #0
 801a57c:	75fb      	strb	r3, [r7, #23]
 801a57e:	e009      	b.n	801a594 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801a580:	68ba      	ldr	r2, [r7, #8]
 801a582:	683b      	ldr	r3, [r7, #0]
 801a584:	3304      	adds	r3, #4
 801a586:	681b      	ldr	r3, [r3, #0]
 801a588:	429a      	cmp	r2, r3
 801a58a:	bf0c      	ite	eq
 801a58c:	2301      	moveq	r3, #1
 801a58e:	2300      	movne	r3, #0
 801a590:	b2db      	uxtb	r3, r3
 801a592:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801a594:	693b      	ldr	r3, [r7, #16]
 801a596:	f103 0208 	add.w	r2, r3, #8
 801a59a:	7dfb      	ldrb	r3, [r7, #23]
 801a59c:	2b00      	cmp	r3, #0
 801a59e:	d001      	beq.n	801a5a4 <etharp_input+0x98>
 801a5a0:	2301      	movs	r3, #1
 801a5a2:	e000      	b.n	801a5a6 <etharp_input+0x9a>
 801a5a4:	2302      	movs	r3, #2
 801a5a6:	f107 010c 	add.w	r1, r7, #12
 801a5aa:	6838      	ldr	r0, [r7, #0]
 801a5ac:	f7ff fed8 	bl	801a360 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801a5b0:	693b      	ldr	r3, [r7, #16]
 801a5b2:	88db      	ldrh	r3, [r3, #6]
 801a5b4:	b29b      	uxth	r3, r3
 801a5b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801a5ba:	d003      	beq.n	801a5c4 <etharp_input+0xb8>
 801a5bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a5c0:	d01e      	beq.n	801a600 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801a5c2:	e025      	b.n	801a610 <etharp_input+0x104>
      if (for_us) {
 801a5c4:	7dfb      	ldrb	r3, [r7, #23]
 801a5c6:	2b00      	cmp	r3, #0
 801a5c8:	d021      	beq.n	801a60e <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801a5ca:	683b      	ldr	r3, [r7, #0]
 801a5cc:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 801a5d0:	693b      	ldr	r3, [r7, #16]
 801a5d2:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801a5d6:	683b      	ldr	r3, [r7, #0]
 801a5d8:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 801a5dc:	683b      	ldr	r3, [r7, #0]
 801a5de:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801a5e0:	693a      	ldr	r2, [r7, #16]
 801a5e2:	3208      	adds	r2, #8
        etharp_raw(netif,
 801a5e4:	2102      	movs	r1, #2
 801a5e6:	9103      	str	r1, [sp, #12]
 801a5e8:	f107 010c 	add.w	r1, r7, #12
 801a5ec:	9102      	str	r1, [sp, #8]
 801a5ee:	9201      	str	r2, [sp, #4]
 801a5f0:	9300      	str	r3, [sp, #0]
 801a5f2:	462b      	mov	r3, r5
 801a5f4:	4622      	mov	r2, r4
 801a5f6:	4601      	mov	r1, r0
 801a5f8:	6838      	ldr	r0, [r7, #0]
 801a5fa:	f000 faef 	bl	801abdc <etharp_raw>
      break;
 801a5fe:	e006      	b.n	801a60e <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 801a600:	f107 030c 	add.w	r3, r7, #12
 801a604:	4619      	mov	r1, r3
 801a606:	6838      	ldr	r0, [r7, #0]
 801a608:	f7fe f9fc 	bl	8018a04 <dhcp_arp_reply>
      break;
 801a60c:	e000      	b.n	801a610 <etharp_input+0x104>
      break;
 801a60e:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801a610:	6878      	ldr	r0, [r7, #4]
 801a612:	f7f7 fb85 	bl	8011d20 <pbuf_free>
}
 801a616:	3718      	adds	r7, #24
 801a618:	46bd      	mov	sp, r7
 801a61a:	bdb0      	pop	{r4, r5, r7, pc}
 801a61c:	08021ec4 	.word	0x08021ec4
 801a620:	08022014 	.word	0x08022014
 801a624:	08021f3c 	.word	0x08021f3c

0801a628 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801a628:	b580      	push	{r7, lr}
 801a62a:	b086      	sub	sp, #24
 801a62c:	af02      	add	r7, sp, #8
 801a62e:	60f8      	str	r0, [r7, #12]
 801a630:	60b9      	str	r1, [r7, #8]
 801a632:	4613      	mov	r3, r2
 801a634:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801a636:	79fa      	ldrb	r2, [r7, #7]
 801a638:	4944      	ldr	r1, [pc, #272]	; (801a74c <etharp_output_to_arp_index+0x124>)
 801a63a:	4613      	mov	r3, r2
 801a63c:	005b      	lsls	r3, r3, #1
 801a63e:	4413      	add	r3, r2
 801a640:	00db      	lsls	r3, r3, #3
 801a642:	440b      	add	r3, r1
 801a644:	3314      	adds	r3, #20
 801a646:	781b      	ldrb	r3, [r3, #0]
 801a648:	2b01      	cmp	r3, #1
 801a64a:	d806      	bhi.n	801a65a <etharp_output_to_arp_index+0x32>
 801a64c:	4b40      	ldr	r3, [pc, #256]	; (801a750 <etharp_output_to_arp_index+0x128>)
 801a64e:	f240 22ee 	movw	r2, #750	; 0x2ee
 801a652:	4940      	ldr	r1, [pc, #256]	; (801a754 <etharp_output_to_arp_index+0x12c>)
 801a654:	4840      	ldr	r0, [pc, #256]	; (801a758 <etharp_output_to_arp_index+0x130>)
 801a656:	f002 ff13 	bl	801d480 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801a65a:	79fa      	ldrb	r2, [r7, #7]
 801a65c:	493b      	ldr	r1, [pc, #236]	; (801a74c <etharp_output_to_arp_index+0x124>)
 801a65e:	4613      	mov	r3, r2
 801a660:	005b      	lsls	r3, r3, #1
 801a662:	4413      	add	r3, r2
 801a664:	00db      	lsls	r3, r3, #3
 801a666:	440b      	add	r3, r1
 801a668:	3314      	adds	r3, #20
 801a66a:	781b      	ldrb	r3, [r3, #0]
 801a66c:	2b02      	cmp	r3, #2
 801a66e:	d153      	bne.n	801a718 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801a670:	79fa      	ldrb	r2, [r7, #7]
 801a672:	4936      	ldr	r1, [pc, #216]	; (801a74c <etharp_output_to_arp_index+0x124>)
 801a674:	4613      	mov	r3, r2
 801a676:	005b      	lsls	r3, r3, #1
 801a678:	4413      	add	r3, r2
 801a67a:	00db      	lsls	r3, r3, #3
 801a67c:	440b      	add	r3, r1
 801a67e:	3312      	adds	r3, #18
 801a680:	881b      	ldrh	r3, [r3, #0]
 801a682:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801a686:	d919      	bls.n	801a6bc <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801a688:	79fa      	ldrb	r2, [r7, #7]
 801a68a:	4613      	mov	r3, r2
 801a68c:	005b      	lsls	r3, r3, #1
 801a68e:	4413      	add	r3, r2
 801a690:	00db      	lsls	r3, r3, #3
 801a692:	4a2e      	ldr	r2, [pc, #184]	; (801a74c <etharp_output_to_arp_index+0x124>)
 801a694:	4413      	add	r3, r2
 801a696:	3304      	adds	r3, #4
 801a698:	4619      	mov	r1, r3
 801a69a:	68f8      	ldr	r0, [r7, #12]
 801a69c:	f000 fb4c 	bl	801ad38 <etharp_request>
 801a6a0:	4603      	mov	r3, r0
 801a6a2:	2b00      	cmp	r3, #0
 801a6a4:	d138      	bne.n	801a718 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801a6a6:	79fa      	ldrb	r2, [r7, #7]
 801a6a8:	4928      	ldr	r1, [pc, #160]	; (801a74c <etharp_output_to_arp_index+0x124>)
 801a6aa:	4613      	mov	r3, r2
 801a6ac:	005b      	lsls	r3, r3, #1
 801a6ae:	4413      	add	r3, r2
 801a6b0:	00db      	lsls	r3, r3, #3
 801a6b2:	440b      	add	r3, r1
 801a6b4:	3314      	adds	r3, #20
 801a6b6:	2203      	movs	r2, #3
 801a6b8:	701a      	strb	r2, [r3, #0]
 801a6ba:	e02d      	b.n	801a718 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801a6bc:	79fa      	ldrb	r2, [r7, #7]
 801a6be:	4923      	ldr	r1, [pc, #140]	; (801a74c <etharp_output_to_arp_index+0x124>)
 801a6c0:	4613      	mov	r3, r2
 801a6c2:	005b      	lsls	r3, r3, #1
 801a6c4:	4413      	add	r3, r2
 801a6c6:	00db      	lsls	r3, r3, #3
 801a6c8:	440b      	add	r3, r1
 801a6ca:	3312      	adds	r3, #18
 801a6cc:	881b      	ldrh	r3, [r3, #0]
 801a6ce:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801a6d2:	d321      	bcc.n	801a718 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801a6d4:	79fa      	ldrb	r2, [r7, #7]
 801a6d6:	4613      	mov	r3, r2
 801a6d8:	005b      	lsls	r3, r3, #1
 801a6da:	4413      	add	r3, r2
 801a6dc:	00db      	lsls	r3, r3, #3
 801a6de:	4a1b      	ldr	r2, [pc, #108]	; (801a74c <etharp_output_to_arp_index+0x124>)
 801a6e0:	4413      	add	r3, r2
 801a6e2:	1d19      	adds	r1, r3, #4
 801a6e4:	79fa      	ldrb	r2, [r7, #7]
 801a6e6:	4613      	mov	r3, r2
 801a6e8:	005b      	lsls	r3, r3, #1
 801a6ea:	4413      	add	r3, r2
 801a6ec:	00db      	lsls	r3, r3, #3
 801a6ee:	3308      	adds	r3, #8
 801a6f0:	4a16      	ldr	r2, [pc, #88]	; (801a74c <etharp_output_to_arp_index+0x124>)
 801a6f2:	4413      	add	r3, r2
 801a6f4:	3304      	adds	r3, #4
 801a6f6:	461a      	mov	r2, r3
 801a6f8:	68f8      	ldr	r0, [r7, #12]
 801a6fa:	f000 fafb 	bl	801acf4 <etharp_request_dst>
 801a6fe:	4603      	mov	r3, r0
 801a700:	2b00      	cmp	r3, #0
 801a702:	d109      	bne.n	801a718 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801a704:	79fa      	ldrb	r2, [r7, #7]
 801a706:	4911      	ldr	r1, [pc, #68]	; (801a74c <etharp_output_to_arp_index+0x124>)
 801a708:	4613      	mov	r3, r2
 801a70a:	005b      	lsls	r3, r3, #1
 801a70c:	4413      	add	r3, r2
 801a70e:	00db      	lsls	r3, r3, #3
 801a710:	440b      	add	r3, r1
 801a712:	3314      	adds	r3, #20
 801a714:	2203      	movs	r2, #3
 801a716:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801a718:	68fb      	ldr	r3, [r7, #12]
 801a71a:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 801a71e:	79fa      	ldrb	r2, [r7, #7]
 801a720:	4613      	mov	r3, r2
 801a722:	005b      	lsls	r3, r3, #1
 801a724:	4413      	add	r3, r2
 801a726:	00db      	lsls	r3, r3, #3
 801a728:	3308      	adds	r3, #8
 801a72a:	4a08      	ldr	r2, [pc, #32]	; (801a74c <etharp_output_to_arp_index+0x124>)
 801a72c:	4413      	add	r3, r2
 801a72e:	3304      	adds	r3, #4
 801a730:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801a734:	9200      	str	r2, [sp, #0]
 801a736:	460a      	mov	r2, r1
 801a738:	68b9      	ldr	r1, [r7, #8]
 801a73a:	68f8      	ldr	r0, [r7, #12]
 801a73c:	f001 fe5e 	bl	801c3fc <ethernet_output>
 801a740:	4603      	mov	r3, r0
}
 801a742:	4618      	mov	r0, r3
 801a744:	3710      	adds	r7, #16
 801a746:	46bd      	mov	sp, r7
 801a748:	bd80      	pop	{r7, pc}
 801a74a:	bf00      	nop
 801a74c:	200137fc 	.word	0x200137fc
 801a750:	08021ec4 	.word	0x08021ec4
 801a754:	08022034 	.word	0x08022034
 801a758:	08021f3c 	.word	0x08021f3c

0801a75c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801a75c:	b580      	push	{r7, lr}
 801a75e:	b08a      	sub	sp, #40	; 0x28
 801a760:	af02      	add	r7, sp, #8
 801a762:	60f8      	str	r0, [r7, #12]
 801a764:	60b9      	str	r1, [r7, #8]
 801a766:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801a768:	687b      	ldr	r3, [r7, #4]
 801a76a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801a76c:	68fb      	ldr	r3, [r7, #12]
 801a76e:	2b00      	cmp	r3, #0
 801a770:	d106      	bne.n	801a780 <etharp_output+0x24>
 801a772:	4b73      	ldr	r3, [pc, #460]	; (801a940 <etharp_output+0x1e4>)
 801a774:	f240 321e 	movw	r2, #798	; 0x31e
 801a778:	4972      	ldr	r1, [pc, #456]	; (801a944 <etharp_output+0x1e8>)
 801a77a:	4873      	ldr	r0, [pc, #460]	; (801a948 <etharp_output+0x1ec>)
 801a77c:	f002 fe80 	bl	801d480 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801a780:	68bb      	ldr	r3, [r7, #8]
 801a782:	2b00      	cmp	r3, #0
 801a784:	d106      	bne.n	801a794 <etharp_output+0x38>
 801a786:	4b6e      	ldr	r3, [pc, #440]	; (801a940 <etharp_output+0x1e4>)
 801a788:	f240 321f 	movw	r2, #799	; 0x31f
 801a78c:	496f      	ldr	r1, [pc, #444]	; (801a94c <etharp_output+0x1f0>)
 801a78e:	486e      	ldr	r0, [pc, #440]	; (801a948 <etharp_output+0x1ec>)
 801a790:	f002 fe76 	bl	801d480 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801a794:	687b      	ldr	r3, [r7, #4]
 801a796:	2b00      	cmp	r3, #0
 801a798:	d106      	bne.n	801a7a8 <etharp_output+0x4c>
 801a79a:	4b69      	ldr	r3, [pc, #420]	; (801a940 <etharp_output+0x1e4>)
 801a79c:	f44f 7248 	mov.w	r2, #800	; 0x320
 801a7a0:	496b      	ldr	r1, [pc, #428]	; (801a950 <etharp_output+0x1f4>)
 801a7a2:	4869      	ldr	r0, [pc, #420]	; (801a948 <etharp_output+0x1ec>)
 801a7a4:	f002 fe6c 	bl	801d480 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801a7a8:	687b      	ldr	r3, [r7, #4]
 801a7aa:	681b      	ldr	r3, [r3, #0]
 801a7ac:	68f9      	ldr	r1, [r7, #12]
 801a7ae:	4618      	mov	r0, r3
 801a7b0:	f000 ff16 	bl	801b5e0 <ip4_addr_isbroadcast_u32>
 801a7b4:	4603      	mov	r3, r0
 801a7b6:	2b00      	cmp	r3, #0
 801a7b8:	d002      	beq.n	801a7c0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801a7ba:	4b66      	ldr	r3, [pc, #408]	; (801a954 <etharp_output+0x1f8>)
 801a7bc:	61fb      	str	r3, [r7, #28]
 801a7be:	e0af      	b.n	801a920 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801a7c0:	687b      	ldr	r3, [r7, #4]
 801a7c2:	681b      	ldr	r3, [r3, #0]
 801a7c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801a7c8:	2be0      	cmp	r3, #224	; 0xe0
 801a7ca:	d118      	bne.n	801a7fe <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801a7cc:	2301      	movs	r3, #1
 801a7ce:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801a7d0:	2300      	movs	r3, #0
 801a7d2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801a7d4:	235e      	movs	r3, #94	; 0x5e
 801a7d6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801a7d8:	687b      	ldr	r3, [r7, #4]
 801a7da:	3301      	adds	r3, #1
 801a7dc:	781b      	ldrb	r3, [r3, #0]
 801a7de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801a7e2:	b2db      	uxtb	r3, r3
 801a7e4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801a7e6:	687b      	ldr	r3, [r7, #4]
 801a7e8:	3302      	adds	r3, #2
 801a7ea:	781b      	ldrb	r3, [r3, #0]
 801a7ec:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801a7ee:	687b      	ldr	r3, [r7, #4]
 801a7f0:	3303      	adds	r3, #3
 801a7f2:	781b      	ldrb	r3, [r3, #0]
 801a7f4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801a7f6:	f107 0310 	add.w	r3, r7, #16
 801a7fa:	61fb      	str	r3, [r7, #28]
 801a7fc:	e090      	b.n	801a920 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801a7fe:	687b      	ldr	r3, [r7, #4]
 801a800:	681a      	ldr	r2, [r3, #0]
 801a802:	68fb      	ldr	r3, [r7, #12]
 801a804:	3304      	adds	r3, #4
 801a806:	681b      	ldr	r3, [r3, #0]
 801a808:	405a      	eors	r2, r3
 801a80a:	68fb      	ldr	r3, [r7, #12]
 801a80c:	3308      	adds	r3, #8
 801a80e:	681b      	ldr	r3, [r3, #0]
 801a810:	4013      	ands	r3, r2
 801a812:	2b00      	cmp	r3, #0
 801a814:	d012      	beq.n	801a83c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801a816:	687b      	ldr	r3, [r7, #4]
 801a818:	681b      	ldr	r3, [r3, #0]
 801a81a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801a81c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801a820:	4293      	cmp	r3, r2
 801a822:	d00b      	beq.n	801a83c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801a824:	68fb      	ldr	r3, [r7, #12]
 801a826:	330c      	adds	r3, #12
 801a828:	681b      	ldr	r3, [r3, #0]
 801a82a:	2b00      	cmp	r3, #0
 801a82c:	d003      	beq.n	801a836 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801a82e:	68fb      	ldr	r3, [r7, #12]
 801a830:	330c      	adds	r3, #12
 801a832:	61bb      	str	r3, [r7, #24]
 801a834:	e002      	b.n	801a83c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801a836:	f06f 0303 	mvn.w	r3, #3
 801a83a:	e07d      	b.n	801a938 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801a83c:	4b46      	ldr	r3, [pc, #280]	; (801a958 <etharp_output+0x1fc>)
 801a83e:	781b      	ldrb	r3, [r3, #0]
 801a840:	4619      	mov	r1, r3
 801a842:	4a46      	ldr	r2, [pc, #280]	; (801a95c <etharp_output+0x200>)
 801a844:	460b      	mov	r3, r1
 801a846:	005b      	lsls	r3, r3, #1
 801a848:	440b      	add	r3, r1
 801a84a:	00db      	lsls	r3, r3, #3
 801a84c:	4413      	add	r3, r2
 801a84e:	3314      	adds	r3, #20
 801a850:	781b      	ldrb	r3, [r3, #0]
 801a852:	2b01      	cmp	r3, #1
 801a854:	d925      	bls.n	801a8a2 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801a856:	4b40      	ldr	r3, [pc, #256]	; (801a958 <etharp_output+0x1fc>)
 801a858:	781b      	ldrb	r3, [r3, #0]
 801a85a:	4619      	mov	r1, r3
 801a85c:	4a3f      	ldr	r2, [pc, #252]	; (801a95c <etharp_output+0x200>)
 801a85e:	460b      	mov	r3, r1
 801a860:	005b      	lsls	r3, r3, #1
 801a862:	440b      	add	r3, r1
 801a864:	00db      	lsls	r3, r3, #3
 801a866:	4413      	add	r3, r2
 801a868:	3308      	adds	r3, #8
 801a86a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801a86c:	68fa      	ldr	r2, [r7, #12]
 801a86e:	429a      	cmp	r2, r3
 801a870:	d117      	bne.n	801a8a2 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801a872:	69bb      	ldr	r3, [r7, #24]
 801a874:	681a      	ldr	r2, [r3, #0]
 801a876:	4b38      	ldr	r3, [pc, #224]	; (801a958 <etharp_output+0x1fc>)
 801a878:	781b      	ldrb	r3, [r3, #0]
 801a87a:	4618      	mov	r0, r3
 801a87c:	4937      	ldr	r1, [pc, #220]	; (801a95c <etharp_output+0x200>)
 801a87e:	4603      	mov	r3, r0
 801a880:	005b      	lsls	r3, r3, #1
 801a882:	4403      	add	r3, r0
 801a884:	00db      	lsls	r3, r3, #3
 801a886:	440b      	add	r3, r1
 801a888:	3304      	adds	r3, #4
 801a88a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801a88c:	429a      	cmp	r2, r3
 801a88e:	d108      	bne.n	801a8a2 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801a890:	4b31      	ldr	r3, [pc, #196]	; (801a958 <etharp_output+0x1fc>)
 801a892:	781b      	ldrb	r3, [r3, #0]
 801a894:	461a      	mov	r2, r3
 801a896:	68b9      	ldr	r1, [r7, #8]
 801a898:	68f8      	ldr	r0, [r7, #12]
 801a89a:	f7ff fec5 	bl	801a628 <etharp_output_to_arp_index>
 801a89e:	4603      	mov	r3, r0
 801a8a0:	e04a      	b.n	801a938 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801a8a2:	2300      	movs	r3, #0
 801a8a4:	75fb      	strb	r3, [r7, #23]
 801a8a6:	e031      	b.n	801a90c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801a8a8:	7dfa      	ldrb	r2, [r7, #23]
 801a8aa:	492c      	ldr	r1, [pc, #176]	; (801a95c <etharp_output+0x200>)
 801a8ac:	4613      	mov	r3, r2
 801a8ae:	005b      	lsls	r3, r3, #1
 801a8b0:	4413      	add	r3, r2
 801a8b2:	00db      	lsls	r3, r3, #3
 801a8b4:	440b      	add	r3, r1
 801a8b6:	3314      	adds	r3, #20
 801a8b8:	781b      	ldrb	r3, [r3, #0]
 801a8ba:	2b01      	cmp	r3, #1
 801a8bc:	d923      	bls.n	801a906 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801a8be:	7dfa      	ldrb	r2, [r7, #23]
 801a8c0:	4926      	ldr	r1, [pc, #152]	; (801a95c <etharp_output+0x200>)
 801a8c2:	4613      	mov	r3, r2
 801a8c4:	005b      	lsls	r3, r3, #1
 801a8c6:	4413      	add	r3, r2
 801a8c8:	00db      	lsls	r3, r3, #3
 801a8ca:	440b      	add	r3, r1
 801a8cc:	3308      	adds	r3, #8
 801a8ce:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801a8d0:	68fa      	ldr	r2, [r7, #12]
 801a8d2:	429a      	cmp	r2, r3
 801a8d4:	d117      	bne.n	801a906 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801a8d6:	69bb      	ldr	r3, [r7, #24]
 801a8d8:	6819      	ldr	r1, [r3, #0]
 801a8da:	7dfa      	ldrb	r2, [r7, #23]
 801a8dc:	481f      	ldr	r0, [pc, #124]	; (801a95c <etharp_output+0x200>)
 801a8de:	4613      	mov	r3, r2
 801a8e0:	005b      	lsls	r3, r3, #1
 801a8e2:	4413      	add	r3, r2
 801a8e4:	00db      	lsls	r3, r3, #3
 801a8e6:	4403      	add	r3, r0
 801a8e8:	3304      	adds	r3, #4
 801a8ea:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801a8ec:	4299      	cmp	r1, r3
 801a8ee:	d10a      	bne.n	801a906 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801a8f0:	4a19      	ldr	r2, [pc, #100]	; (801a958 <etharp_output+0x1fc>)
 801a8f2:	7dfb      	ldrb	r3, [r7, #23]
 801a8f4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801a8f6:	7dfb      	ldrb	r3, [r7, #23]
 801a8f8:	461a      	mov	r2, r3
 801a8fa:	68b9      	ldr	r1, [r7, #8]
 801a8fc:	68f8      	ldr	r0, [r7, #12]
 801a8fe:	f7ff fe93 	bl	801a628 <etharp_output_to_arp_index>
 801a902:	4603      	mov	r3, r0
 801a904:	e018      	b.n	801a938 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801a906:	7dfb      	ldrb	r3, [r7, #23]
 801a908:	3301      	adds	r3, #1
 801a90a:	75fb      	strb	r3, [r7, #23]
 801a90c:	7dfb      	ldrb	r3, [r7, #23]
 801a90e:	2b09      	cmp	r3, #9
 801a910:	d9ca      	bls.n	801a8a8 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801a912:	68ba      	ldr	r2, [r7, #8]
 801a914:	69b9      	ldr	r1, [r7, #24]
 801a916:	68f8      	ldr	r0, [r7, #12]
 801a918:	f000 f822 	bl	801a960 <etharp_query>
 801a91c:	4603      	mov	r3, r0
 801a91e:	e00b      	b.n	801a938 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801a920:	68fb      	ldr	r3, [r7, #12]
 801a922:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801a926:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801a92a:	9300      	str	r3, [sp, #0]
 801a92c:	69fb      	ldr	r3, [r7, #28]
 801a92e:	68b9      	ldr	r1, [r7, #8]
 801a930:	68f8      	ldr	r0, [r7, #12]
 801a932:	f001 fd63 	bl	801c3fc <ethernet_output>
 801a936:	4603      	mov	r3, r0
}
 801a938:	4618      	mov	r0, r3
 801a93a:	3720      	adds	r7, #32
 801a93c:	46bd      	mov	sp, r7
 801a93e:	bd80      	pop	{r7, pc}
 801a940:	08021ec4 	.word	0x08021ec4
 801a944:	08022014 	.word	0x08022014
 801a948:	08021f3c 	.word	0x08021f3c
 801a94c:	08022064 	.word	0x08022064
 801a950:	08022004 	.word	0x08022004
 801a954:	08022790 	.word	0x08022790
 801a958:	200138ec 	.word	0x200138ec
 801a95c:	200137fc 	.word	0x200137fc

0801a960 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801a960:	b580      	push	{r7, lr}
 801a962:	b08c      	sub	sp, #48	; 0x30
 801a964:	af02      	add	r7, sp, #8
 801a966:	60f8      	str	r0, [r7, #12]
 801a968:	60b9      	str	r1, [r7, #8]
 801a96a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801a96c:	68fb      	ldr	r3, [r7, #12]
 801a96e:	332a      	adds	r3, #42	; 0x2a
 801a970:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801a972:	23ff      	movs	r3, #255	; 0xff
 801a974:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801a978:	2300      	movs	r3, #0
 801a97a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801a97c:	68bb      	ldr	r3, [r7, #8]
 801a97e:	681b      	ldr	r3, [r3, #0]
 801a980:	68f9      	ldr	r1, [r7, #12]
 801a982:	4618      	mov	r0, r3
 801a984:	f000 fe2c 	bl	801b5e0 <ip4_addr_isbroadcast_u32>
 801a988:	4603      	mov	r3, r0
 801a98a:	2b00      	cmp	r3, #0
 801a98c:	d10c      	bne.n	801a9a8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801a98e:	68bb      	ldr	r3, [r7, #8]
 801a990:	681b      	ldr	r3, [r3, #0]
 801a992:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801a996:	2be0      	cmp	r3, #224	; 0xe0
 801a998:	d006      	beq.n	801a9a8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801a99a:	68bb      	ldr	r3, [r7, #8]
 801a99c:	2b00      	cmp	r3, #0
 801a99e:	d003      	beq.n	801a9a8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801a9a0:	68bb      	ldr	r3, [r7, #8]
 801a9a2:	681b      	ldr	r3, [r3, #0]
 801a9a4:	2b00      	cmp	r3, #0
 801a9a6:	d102      	bne.n	801a9ae <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801a9a8:	f06f 030f 	mvn.w	r3, #15
 801a9ac:	e101      	b.n	801abb2 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801a9ae:	68fa      	ldr	r2, [r7, #12]
 801a9b0:	2101      	movs	r1, #1
 801a9b2:	68b8      	ldr	r0, [r7, #8]
 801a9b4:	f7ff fb5c 	bl	801a070 <etharp_find_entry>
 801a9b8:	4603      	mov	r3, r0
 801a9ba:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801a9bc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801a9c0:	2b00      	cmp	r3, #0
 801a9c2:	da02      	bge.n	801a9ca <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801a9c4:	8a7b      	ldrh	r3, [r7, #18]
 801a9c6:	b25b      	sxtb	r3, r3
 801a9c8:	e0f3      	b.n	801abb2 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801a9ca:	8a7b      	ldrh	r3, [r7, #18]
 801a9cc:	2b7e      	cmp	r3, #126	; 0x7e
 801a9ce:	d906      	bls.n	801a9de <etharp_query+0x7e>
 801a9d0:	4b7a      	ldr	r3, [pc, #488]	; (801abbc <etharp_query+0x25c>)
 801a9d2:	f240 32c1 	movw	r2, #961	; 0x3c1
 801a9d6:	497a      	ldr	r1, [pc, #488]	; (801abc0 <etharp_query+0x260>)
 801a9d8:	487a      	ldr	r0, [pc, #488]	; (801abc4 <etharp_query+0x264>)
 801a9da:	f002 fd51 	bl	801d480 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801a9de:	8a7b      	ldrh	r3, [r7, #18]
 801a9e0:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801a9e2:	7c7a      	ldrb	r2, [r7, #17]
 801a9e4:	4978      	ldr	r1, [pc, #480]	; (801abc8 <etharp_query+0x268>)
 801a9e6:	4613      	mov	r3, r2
 801a9e8:	005b      	lsls	r3, r3, #1
 801a9ea:	4413      	add	r3, r2
 801a9ec:	00db      	lsls	r3, r3, #3
 801a9ee:	440b      	add	r3, r1
 801a9f0:	3314      	adds	r3, #20
 801a9f2:	781b      	ldrb	r3, [r3, #0]
 801a9f4:	2b00      	cmp	r3, #0
 801a9f6:	d115      	bne.n	801aa24 <etharp_query+0xc4>
    is_new_entry = 1;
 801a9f8:	2301      	movs	r3, #1
 801a9fa:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801a9fc:	7c7a      	ldrb	r2, [r7, #17]
 801a9fe:	4972      	ldr	r1, [pc, #456]	; (801abc8 <etharp_query+0x268>)
 801aa00:	4613      	mov	r3, r2
 801aa02:	005b      	lsls	r3, r3, #1
 801aa04:	4413      	add	r3, r2
 801aa06:	00db      	lsls	r3, r3, #3
 801aa08:	440b      	add	r3, r1
 801aa0a:	3314      	adds	r3, #20
 801aa0c:	2201      	movs	r2, #1
 801aa0e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801aa10:	7c7a      	ldrb	r2, [r7, #17]
 801aa12:	496d      	ldr	r1, [pc, #436]	; (801abc8 <etharp_query+0x268>)
 801aa14:	4613      	mov	r3, r2
 801aa16:	005b      	lsls	r3, r3, #1
 801aa18:	4413      	add	r3, r2
 801aa1a:	00db      	lsls	r3, r3, #3
 801aa1c:	440b      	add	r3, r1
 801aa1e:	3308      	adds	r3, #8
 801aa20:	68fa      	ldr	r2, [r7, #12]
 801aa22:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801aa24:	7c7a      	ldrb	r2, [r7, #17]
 801aa26:	4968      	ldr	r1, [pc, #416]	; (801abc8 <etharp_query+0x268>)
 801aa28:	4613      	mov	r3, r2
 801aa2a:	005b      	lsls	r3, r3, #1
 801aa2c:	4413      	add	r3, r2
 801aa2e:	00db      	lsls	r3, r3, #3
 801aa30:	440b      	add	r3, r1
 801aa32:	3314      	adds	r3, #20
 801aa34:	781b      	ldrb	r3, [r3, #0]
 801aa36:	2b01      	cmp	r3, #1
 801aa38:	d011      	beq.n	801aa5e <etharp_query+0xfe>
 801aa3a:	7c7a      	ldrb	r2, [r7, #17]
 801aa3c:	4962      	ldr	r1, [pc, #392]	; (801abc8 <etharp_query+0x268>)
 801aa3e:	4613      	mov	r3, r2
 801aa40:	005b      	lsls	r3, r3, #1
 801aa42:	4413      	add	r3, r2
 801aa44:	00db      	lsls	r3, r3, #3
 801aa46:	440b      	add	r3, r1
 801aa48:	3314      	adds	r3, #20
 801aa4a:	781b      	ldrb	r3, [r3, #0]
 801aa4c:	2b01      	cmp	r3, #1
 801aa4e:	d806      	bhi.n	801aa5e <etharp_query+0xfe>
 801aa50:	4b5a      	ldr	r3, [pc, #360]	; (801abbc <etharp_query+0x25c>)
 801aa52:	f240 32cd 	movw	r2, #973	; 0x3cd
 801aa56:	495d      	ldr	r1, [pc, #372]	; (801abcc <etharp_query+0x26c>)
 801aa58:	485a      	ldr	r0, [pc, #360]	; (801abc4 <etharp_query+0x264>)
 801aa5a:	f002 fd11 	bl	801d480 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801aa5e:	6a3b      	ldr	r3, [r7, #32]
 801aa60:	2b00      	cmp	r3, #0
 801aa62:	d102      	bne.n	801aa6a <etharp_query+0x10a>
 801aa64:	687b      	ldr	r3, [r7, #4]
 801aa66:	2b00      	cmp	r3, #0
 801aa68:	d10c      	bne.n	801aa84 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801aa6a:	68b9      	ldr	r1, [r7, #8]
 801aa6c:	68f8      	ldr	r0, [r7, #12]
 801aa6e:	f000 f963 	bl	801ad38 <etharp_request>
 801aa72:	4603      	mov	r3, r0
 801aa74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801aa78:	687b      	ldr	r3, [r7, #4]
 801aa7a:	2b00      	cmp	r3, #0
 801aa7c:	d102      	bne.n	801aa84 <etharp_query+0x124>
      return result;
 801aa7e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801aa82:	e096      	b.n	801abb2 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801aa84:	687b      	ldr	r3, [r7, #4]
 801aa86:	2b00      	cmp	r3, #0
 801aa88:	d106      	bne.n	801aa98 <etharp_query+0x138>
 801aa8a:	4b4c      	ldr	r3, [pc, #304]	; (801abbc <etharp_query+0x25c>)
 801aa8c:	f240 32e1 	movw	r2, #993	; 0x3e1
 801aa90:	494f      	ldr	r1, [pc, #316]	; (801abd0 <etharp_query+0x270>)
 801aa92:	484c      	ldr	r0, [pc, #304]	; (801abc4 <etharp_query+0x264>)
 801aa94:	f002 fcf4 	bl	801d480 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801aa98:	7c7a      	ldrb	r2, [r7, #17]
 801aa9a:	494b      	ldr	r1, [pc, #300]	; (801abc8 <etharp_query+0x268>)
 801aa9c:	4613      	mov	r3, r2
 801aa9e:	005b      	lsls	r3, r3, #1
 801aaa0:	4413      	add	r3, r2
 801aaa2:	00db      	lsls	r3, r3, #3
 801aaa4:	440b      	add	r3, r1
 801aaa6:	3314      	adds	r3, #20
 801aaa8:	781b      	ldrb	r3, [r3, #0]
 801aaaa:	2b01      	cmp	r3, #1
 801aaac:	d917      	bls.n	801aade <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801aaae:	4a49      	ldr	r2, [pc, #292]	; (801abd4 <etharp_query+0x274>)
 801aab0:	7c7b      	ldrb	r3, [r7, #17]
 801aab2:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801aab4:	7c7a      	ldrb	r2, [r7, #17]
 801aab6:	4613      	mov	r3, r2
 801aab8:	005b      	lsls	r3, r3, #1
 801aaba:	4413      	add	r3, r2
 801aabc:	00db      	lsls	r3, r3, #3
 801aabe:	3308      	adds	r3, #8
 801aac0:	4a41      	ldr	r2, [pc, #260]	; (801abc8 <etharp_query+0x268>)
 801aac2:	4413      	add	r3, r2
 801aac4:	3304      	adds	r3, #4
 801aac6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801aaca:	9200      	str	r2, [sp, #0]
 801aacc:	697a      	ldr	r2, [r7, #20]
 801aace:	6879      	ldr	r1, [r7, #4]
 801aad0:	68f8      	ldr	r0, [r7, #12]
 801aad2:	f001 fc93 	bl	801c3fc <ethernet_output>
 801aad6:	4603      	mov	r3, r0
 801aad8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801aadc:	e067      	b.n	801abae <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801aade:	7c7a      	ldrb	r2, [r7, #17]
 801aae0:	4939      	ldr	r1, [pc, #228]	; (801abc8 <etharp_query+0x268>)
 801aae2:	4613      	mov	r3, r2
 801aae4:	005b      	lsls	r3, r3, #1
 801aae6:	4413      	add	r3, r2
 801aae8:	00db      	lsls	r3, r3, #3
 801aaea:	440b      	add	r3, r1
 801aaec:	3314      	adds	r3, #20
 801aaee:	781b      	ldrb	r3, [r3, #0]
 801aaf0:	2b01      	cmp	r3, #1
 801aaf2:	d15c      	bne.n	801abae <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801aaf4:	2300      	movs	r3, #0
 801aaf6:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801aaf8:	687b      	ldr	r3, [r7, #4]
 801aafa:	61fb      	str	r3, [r7, #28]
    while (p) {
 801aafc:	e01c      	b.n	801ab38 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801aafe:	69fb      	ldr	r3, [r7, #28]
 801ab00:	895a      	ldrh	r2, [r3, #10]
 801ab02:	69fb      	ldr	r3, [r7, #28]
 801ab04:	891b      	ldrh	r3, [r3, #8]
 801ab06:	429a      	cmp	r2, r3
 801ab08:	d10a      	bne.n	801ab20 <etharp_query+0x1c0>
 801ab0a:	69fb      	ldr	r3, [r7, #28]
 801ab0c:	681b      	ldr	r3, [r3, #0]
 801ab0e:	2b00      	cmp	r3, #0
 801ab10:	d006      	beq.n	801ab20 <etharp_query+0x1c0>
 801ab12:	4b2a      	ldr	r3, [pc, #168]	; (801abbc <etharp_query+0x25c>)
 801ab14:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801ab18:	492f      	ldr	r1, [pc, #188]	; (801abd8 <etharp_query+0x278>)
 801ab1a:	482a      	ldr	r0, [pc, #168]	; (801abc4 <etharp_query+0x264>)
 801ab1c:	f002 fcb0 	bl	801d480 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801ab20:	69fb      	ldr	r3, [r7, #28]
 801ab22:	7b1b      	ldrb	r3, [r3, #12]
 801ab24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801ab28:	2b00      	cmp	r3, #0
 801ab2a:	d002      	beq.n	801ab32 <etharp_query+0x1d2>
        copy_needed = 1;
 801ab2c:	2301      	movs	r3, #1
 801ab2e:	61bb      	str	r3, [r7, #24]
        break;
 801ab30:	e005      	b.n	801ab3e <etharp_query+0x1de>
      }
      p = p->next;
 801ab32:	69fb      	ldr	r3, [r7, #28]
 801ab34:	681b      	ldr	r3, [r3, #0]
 801ab36:	61fb      	str	r3, [r7, #28]
    while (p) {
 801ab38:	69fb      	ldr	r3, [r7, #28]
 801ab3a:	2b00      	cmp	r3, #0
 801ab3c:	d1df      	bne.n	801aafe <etharp_query+0x19e>
    }
    if (copy_needed) {
 801ab3e:	69bb      	ldr	r3, [r7, #24]
 801ab40:	2b00      	cmp	r3, #0
 801ab42:	d007      	beq.n	801ab54 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801ab44:	687a      	ldr	r2, [r7, #4]
 801ab46:	f44f 7120 	mov.w	r1, #640	; 0x280
 801ab4a:	200e      	movs	r0, #14
 801ab4c:	f7f7 fb60 	bl	8012210 <pbuf_clone>
 801ab50:	61f8      	str	r0, [r7, #28]
 801ab52:	e004      	b.n	801ab5e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801ab54:	687b      	ldr	r3, [r7, #4]
 801ab56:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801ab58:	69f8      	ldr	r0, [r7, #28]
 801ab5a:	f7f7 f987 	bl	8011e6c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801ab5e:	69fb      	ldr	r3, [r7, #28]
 801ab60:	2b00      	cmp	r3, #0
 801ab62:	d021      	beq.n	801aba8 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801ab64:	7c7a      	ldrb	r2, [r7, #17]
 801ab66:	4918      	ldr	r1, [pc, #96]	; (801abc8 <etharp_query+0x268>)
 801ab68:	4613      	mov	r3, r2
 801ab6a:	005b      	lsls	r3, r3, #1
 801ab6c:	4413      	add	r3, r2
 801ab6e:	00db      	lsls	r3, r3, #3
 801ab70:	440b      	add	r3, r1
 801ab72:	681b      	ldr	r3, [r3, #0]
 801ab74:	2b00      	cmp	r3, #0
 801ab76:	d00a      	beq.n	801ab8e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801ab78:	7c7a      	ldrb	r2, [r7, #17]
 801ab7a:	4913      	ldr	r1, [pc, #76]	; (801abc8 <etharp_query+0x268>)
 801ab7c:	4613      	mov	r3, r2
 801ab7e:	005b      	lsls	r3, r3, #1
 801ab80:	4413      	add	r3, r2
 801ab82:	00db      	lsls	r3, r3, #3
 801ab84:	440b      	add	r3, r1
 801ab86:	681b      	ldr	r3, [r3, #0]
 801ab88:	4618      	mov	r0, r3
 801ab8a:	f7f7 f8c9 	bl	8011d20 <pbuf_free>
      }
      arp_table[i].q = p;
 801ab8e:	7c7a      	ldrb	r2, [r7, #17]
 801ab90:	490d      	ldr	r1, [pc, #52]	; (801abc8 <etharp_query+0x268>)
 801ab92:	4613      	mov	r3, r2
 801ab94:	005b      	lsls	r3, r3, #1
 801ab96:	4413      	add	r3, r2
 801ab98:	00db      	lsls	r3, r3, #3
 801ab9a:	440b      	add	r3, r1
 801ab9c:	69fa      	ldr	r2, [r7, #28]
 801ab9e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801aba0:	2300      	movs	r3, #0
 801aba2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801aba6:	e002      	b.n	801abae <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801aba8:	23ff      	movs	r3, #255	; 0xff
 801abaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801abae:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801abb2:	4618      	mov	r0, r3
 801abb4:	3728      	adds	r7, #40	; 0x28
 801abb6:	46bd      	mov	sp, r7
 801abb8:	bd80      	pop	{r7, pc}
 801abba:	bf00      	nop
 801abbc:	08021ec4 	.word	0x08021ec4
 801abc0:	08022070 	.word	0x08022070
 801abc4:	08021f3c 	.word	0x08021f3c
 801abc8:	200137fc 	.word	0x200137fc
 801abcc:	08022080 	.word	0x08022080
 801abd0:	08022064 	.word	0x08022064
 801abd4:	200138ec 	.word	0x200138ec
 801abd8:	080220a8 	.word	0x080220a8

0801abdc <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801abdc:	b580      	push	{r7, lr}
 801abde:	b08a      	sub	sp, #40	; 0x28
 801abe0:	af02      	add	r7, sp, #8
 801abe2:	60f8      	str	r0, [r7, #12]
 801abe4:	60b9      	str	r1, [r7, #8]
 801abe6:	607a      	str	r2, [r7, #4]
 801abe8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801abea:	2300      	movs	r3, #0
 801abec:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801abee:	68fb      	ldr	r3, [r7, #12]
 801abf0:	2b00      	cmp	r3, #0
 801abf2:	d106      	bne.n	801ac02 <etharp_raw+0x26>
 801abf4:	4b3a      	ldr	r3, [pc, #232]	; (801ace0 <etharp_raw+0x104>)
 801abf6:	f240 4257 	movw	r2, #1111	; 0x457
 801abfa:	493a      	ldr	r1, [pc, #232]	; (801ace4 <etharp_raw+0x108>)
 801abfc:	483a      	ldr	r0, [pc, #232]	; (801ace8 <etharp_raw+0x10c>)
 801abfe:	f002 fc3f 	bl	801d480 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801ac02:	f44f 7220 	mov.w	r2, #640	; 0x280
 801ac06:	211c      	movs	r1, #28
 801ac08:	200e      	movs	r0, #14
 801ac0a:	f7f6 fda5 	bl	8011758 <pbuf_alloc>
 801ac0e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801ac10:	69bb      	ldr	r3, [r7, #24]
 801ac12:	2b00      	cmp	r3, #0
 801ac14:	d102      	bne.n	801ac1c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801ac16:	f04f 33ff 	mov.w	r3, #4294967295
 801ac1a:	e05d      	b.n	801acd8 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801ac1c:	69bb      	ldr	r3, [r7, #24]
 801ac1e:	895b      	ldrh	r3, [r3, #10]
 801ac20:	2b1b      	cmp	r3, #27
 801ac22:	d806      	bhi.n	801ac32 <etharp_raw+0x56>
 801ac24:	4b2e      	ldr	r3, [pc, #184]	; (801ace0 <etharp_raw+0x104>)
 801ac26:	f240 4262 	movw	r2, #1122	; 0x462
 801ac2a:	4930      	ldr	r1, [pc, #192]	; (801acec <etharp_raw+0x110>)
 801ac2c:	482e      	ldr	r0, [pc, #184]	; (801ace8 <etharp_raw+0x10c>)
 801ac2e:	f002 fc27 	bl	801d480 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801ac32:	69bb      	ldr	r3, [r7, #24]
 801ac34:	685b      	ldr	r3, [r3, #4]
 801ac36:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801ac38:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801ac3a:	4618      	mov	r0, r3
 801ac3c:	f7f5 fcb8 	bl	80105b0 <lwip_htons>
 801ac40:	4603      	mov	r3, r0
 801ac42:	461a      	mov	r2, r3
 801ac44:	697b      	ldr	r3, [r7, #20]
 801ac46:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801ac48:	68fb      	ldr	r3, [r7, #12]
 801ac4a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801ac4e:	2b06      	cmp	r3, #6
 801ac50:	d006      	beq.n	801ac60 <etharp_raw+0x84>
 801ac52:	4b23      	ldr	r3, [pc, #140]	; (801ace0 <etharp_raw+0x104>)
 801ac54:	f240 4269 	movw	r2, #1129	; 0x469
 801ac58:	4925      	ldr	r1, [pc, #148]	; (801acf0 <etharp_raw+0x114>)
 801ac5a:	4823      	ldr	r0, [pc, #140]	; (801ace8 <etharp_raw+0x10c>)
 801ac5c:	f002 fc10 	bl	801d480 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801ac60:	697b      	ldr	r3, [r7, #20]
 801ac62:	3308      	adds	r3, #8
 801ac64:	2206      	movs	r2, #6
 801ac66:	6839      	ldr	r1, [r7, #0]
 801ac68:	4618      	mov	r0, r3
 801ac6a:	f001 fd4f 	bl	801c70c <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801ac6e:	697b      	ldr	r3, [r7, #20]
 801ac70:	3312      	adds	r3, #18
 801ac72:	2206      	movs	r2, #6
 801ac74:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801ac76:	4618      	mov	r0, r3
 801ac78:	f001 fd48 	bl	801c70c <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801ac7c:	697b      	ldr	r3, [r7, #20]
 801ac7e:	330e      	adds	r3, #14
 801ac80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801ac82:	6812      	ldr	r2, [r2, #0]
 801ac84:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801ac86:	697b      	ldr	r3, [r7, #20]
 801ac88:	3318      	adds	r3, #24
 801ac8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ac8c:	6812      	ldr	r2, [r2, #0]
 801ac8e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801ac90:	697b      	ldr	r3, [r7, #20]
 801ac92:	2200      	movs	r2, #0
 801ac94:	701a      	strb	r2, [r3, #0]
 801ac96:	2200      	movs	r2, #0
 801ac98:	f042 0201 	orr.w	r2, r2, #1
 801ac9c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801ac9e:	697b      	ldr	r3, [r7, #20]
 801aca0:	2200      	movs	r2, #0
 801aca2:	f042 0208 	orr.w	r2, r2, #8
 801aca6:	709a      	strb	r2, [r3, #2]
 801aca8:	2200      	movs	r2, #0
 801acaa:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801acac:	697b      	ldr	r3, [r7, #20]
 801acae:	2206      	movs	r2, #6
 801acb0:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801acb2:	697b      	ldr	r3, [r7, #20]
 801acb4:	2204      	movs	r2, #4
 801acb6:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801acb8:	f640 0306 	movw	r3, #2054	; 0x806
 801acbc:	9300      	str	r3, [sp, #0]
 801acbe:	687b      	ldr	r3, [r7, #4]
 801acc0:	68ba      	ldr	r2, [r7, #8]
 801acc2:	69b9      	ldr	r1, [r7, #24]
 801acc4:	68f8      	ldr	r0, [r7, #12]
 801acc6:	f001 fb99 	bl	801c3fc <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801acca:	69b8      	ldr	r0, [r7, #24]
 801accc:	f7f7 f828 	bl	8011d20 <pbuf_free>
  p = NULL;
 801acd0:	2300      	movs	r3, #0
 801acd2:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801acd4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801acd8:	4618      	mov	r0, r3
 801acda:	3720      	adds	r7, #32
 801acdc:	46bd      	mov	sp, r7
 801acde:	bd80      	pop	{r7, pc}
 801ace0:	08021ec4 	.word	0x08021ec4
 801ace4:	08022014 	.word	0x08022014
 801ace8:	08021f3c 	.word	0x08021f3c
 801acec:	080220c4 	.word	0x080220c4
 801acf0:	080220f8 	.word	0x080220f8

0801acf4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801acf4:	b580      	push	{r7, lr}
 801acf6:	b088      	sub	sp, #32
 801acf8:	af04      	add	r7, sp, #16
 801acfa:	60f8      	str	r0, [r7, #12]
 801acfc:	60b9      	str	r1, [r7, #8]
 801acfe:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801ad00:	68fb      	ldr	r3, [r7, #12]
 801ad02:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801ad06:	68fb      	ldr	r3, [r7, #12]
 801ad08:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 801ad0c:	68fb      	ldr	r3, [r7, #12]
 801ad0e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801ad10:	2201      	movs	r2, #1
 801ad12:	9203      	str	r2, [sp, #12]
 801ad14:	68ba      	ldr	r2, [r7, #8]
 801ad16:	9202      	str	r2, [sp, #8]
 801ad18:	4a06      	ldr	r2, [pc, #24]	; (801ad34 <etharp_request_dst+0x40>)
 801ad1a:	9201      	str	r2, [sp, #4]
 801ad1c:	9300      	str	r3, [sp, #0]
 801ad1e:	4603      	mov	r3, r0
 801ad20:	687a      	ldr	r2, [r7, #4]
 801ad22:	68f8      	ldr	r0, [r7, #12]
 801ad24:	f7ff ff5a 	bl	801abdc <etharp_raw>
 801ad28:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801ad2a:	4618      	mov	r0, r3
 801ad2c:	3710      	adds	r7, #16
 801ad2e:	46bd      	mov	sp, r7
 801ad30:	bd80      	pop	{r7, pc}
 801ad32:	bf00      	nop
 801ad34:	08022798 	.word	0x08022798

0801ad38 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801ad38:	b580      	push	{r7, lr}
 801ad3a:	b082      	sub	sp, #8
 801ad3c:	af00      	add	r7, sp, #0
 801ad3e:	6078      	str	r0, [r7, #4]
 801ad40:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801ad42:	4a05      	ldr	r2, [pc, #20]	; (801ad58 <etharp_request+0x20>)
 801ad44:	6839      	ldr	r1, [r7, #0]
 801ad46:	6878      	ldr	r0, [r7, #4]
 801ad48:	f7ff ffd4 	bl	801acf4 <etharp_request_dst>
 801ad4c:	4603      	mov	r3, r0
}
 801ad4e:	4618      	mov	r0, r3
 801ad50:	3708      	adds	r7, #8
 801ad52:	46bd      	mov	sp, r7
 801ad54:	bd80      	pop	{r7, pc}
 801ad56:	bf00      	nop
 801ad58:	08022790 	.word	0x08022790

0801ad5c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801ad5c:	b580      	push	{r7, lr}
 801ad5e:	b08e      	sub	sp, #56	; 0x38
 801ad60:	af04      	add	r7, sp, #16
 801ad62:	6078      	str	r0, [r7, #4]
 801ad64:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801ad66:	4b79      	ldr	r3, [pc, #484]	; (801af4c <icmp_input+0x1f0>)
 801ad68:	689b      	ldr	r3, [r3, #8]
 801ad6a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801ad6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad6e:	781b      	ldrb	r3, [r3, #0]
 801ad70:	f003 030f 	and.w	r3, r3, #15
 801ad74:	b2db      	uxtb	r3, r3
 801ad76:	009b      	lsls	r3, r3, #2
 801ad78:	b2db      	uxtb	r3, r3
 801ad7a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 801ad7c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801ad7e:	2b13      	cmp	r3, #19
 801ad80:	f240 80cd 	bls.w	801af1e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801ad84:	687b      	ldr	r3, [r7, #4]
 801ad86:	895b      	ldrh	r3, [r3, #10]
 801ad88:	2b03      	cmp	r3, #3
 801ad8a:	f240 80ca 	bls.w	801af22 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801ad8e:	687b      	ldr	r3, [r7, #4]
 801ad90:	685b      	ldr	r3, [r3, #4]
 801ad92:	781b      	ldrb	r3, [r3, #0]
 801ad94:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801ad98:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801ad9c:	2b00      	cmp	r3, #0
 801ad9e:	f000 80b7 	beq.w	801af10 <icmp_input+0x1b4>
 801ada2:	2b08      	cmp	r3, #8
 801ada4:	f040 80b7 	bne.w	801af16 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801ada8:	4b69      	ldr	r3, [pc, #420]	; (801af50 <icmp_input+0x1f4>)
 801adaa:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801adac:	4b67      	ldr	r3, [pc, #412]	; (801af4c <icmp_input+0x1f0>)
 801adae:	695b      	ldr	r3, [r3, #20]
 801adb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801adb4:	2be0      	cmp	r3, #224	; 0xe0
 801adb6:	f000 80bb 	beq.w	801af30 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801adba:	4b64      	ldr	r3, [pc, #400]	; (801af4c <icmp_input+0x1f0>)
 801adbc:	695b      	ldr	r3, [r3, #20]
 801adbe:	4a63      	ldr	r2, [pc, #396]	; (801af4c <icmp_input+0x1f0>)
 801adc0:	6812      	ldr	r2, [r2, #0]
 801adc2:	4611      	mov	r1, r2
 801adc4:	4618      	mov	r0, r3
 801adc6:	f000 fc0b 	bl	801b5e0 <ip4_addr_isbroadcast_u32>
 801adca:	4603      	mov	r3, r0
 801adcc:	2b00      	cmp	r3, #0
 801adce:	f040 80b1 	bne.w	801af34 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801add2:	687b      	ldr	r3, [r7, #4]
 801add4:	891b      	ldrh	r3, [r3, #8]
 801add6:	2b07      	cmp	r3, #7
 801add8:	f240 80a5 	bls.w	801af26 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801addc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801adde:	330e      	adds	r3, #14
 801ade0:	4619      	mov	r1, r3
 801ade2:	6878      	ldr	r0, [r7, #4]
 801ade4:	f7f6 ff06 	bl	8011bf4 <pbuf_add_header>
 801ade8:	4603      	mov	r3, r0
 801adea:	2b00      	cmp	r3, #0
 801adec:	d04b      	beq.n	801ae86 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801adee:	687b      	ldr	r3, [r7, #4]
 801adf0:	891a      	ldrh	r2, [r3, #8]
 801adf2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801adf4:	4413      	add	r3, r2
 801adf6:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801adf8:	687b      	ldr	r3, [r7, #4]
 801adfa:	891b      	ldrh	r3, [r3, #8]
 801adfc:	8b7a      	ldrh	r2, [r7, #26]
 801adfe:	429a      	cmp	r2, r3
 801ae00:	f0c0 809a 	bcc.w	801af38 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801ae04:	8b7b      	ldrh	r3, [r7, #26]
 801ae06:	f44f 7220 	mov.w	r2, #640	; 0x280
 801ae0a:	4619      	mov	r1, r3
 801ae0c:	200e      	movs	r0, #14
 801ae0e:	f7f6 fca3 	bl	8011758 <pbuf_alloc>
 801ae12:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801ae14:	697b      	ldr	r3, [r7, #20]
 801ae16:	2b00      	cmp	r3, #0
 801ae18:	f000 8090 	beq.w	801af3c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801ae1c:	697b      	ldr	r3, [r7, #20]
 801ae1e:	895b      	ldrh	r3, [r3, #10]
 801ae20:	461a      	mov	r2, r3
 801ae22:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801ae24:	3308      	adds	r3, #8
 801ae26:	429a      	cmp	r2, r3
 801ae28:	d203      	bcs.n	801ae32 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801ae2a:	6978      	ldr	r0, [r7, #20]
 801ae2c:	f7f6 ff78 	bl	8011d20 <pbuf_free>
          goto icmperr;
 801ae30:	e085      	b.n	801af3e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801ae32:	697b      	ldr	r3, [r7, #20]
 801ae34:	685b      	ldr	r3, [r3, #4]
 801ae36:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801ae38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801ae3a:	4618      	mov	r0, r3
 801ae3c:	f001 fc66 	bl	801c70c <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801ae40:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801ae42:	4619      	mov	r1, r3
 801ae44:	6978      	ldr	r0, [r7, #20]
 801ae46:	f7f6 fee5 	bl	8011c14 <pbuf_remove_header>
 801ae4a:	4603      	mov	r3, r0
 801ae4c:	2b00      	cmp	r3, #0
 801ae4e:	d009      	beq.n	801ae64 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801ae50:	4b40      	ldr	r3, [pc, #256]	; (801af54 <icmp_input+0x1f8>)
 801ae52:	22b6      	movs	r2, #182	; 0xb6
 801ae54:	4940      	ldr	r1, [pc, #256]	; (801af58 <icmp_input+0x1fc>)
 801ae56:	4841      	ldr	r0, [pc, #260]	; (801af5c <icmp_input+0x200>)
 801ae58:	f002 fb12 	bl	801d480 <iprintf>
          pbuf_free(r);
 801ae5c:	6978      	ldr	r0, [r7, #20]
 801ae5e:	f7f6 ff5f 	bl	8011d20 <pbuf_free>
          goto icmperr;
 801ae62:	e06c      	b.n	801af3e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801ae64:	6879      	ldr	r1, [r7, #4]
 801ae66:	6978      	ldr	r0, [r7, #20]
 801ae68:	f7f7 f88e 	bl	8011f88 <pbuf_copy>
 801ae6c:	4603      	mov	r3, r0
 801ae6e:	2b00      	cmp	r3, #0
 801ae70:	d003      	beq.n	801ae7a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801ae72:	6978      	ldr	r0, [r7, #20]
 801ae74:	f7f6 ff54 	bl	8011d20 <pbuf_free>
          goto icmperr;
 801ae78:	e061      	b.n	801af3e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801ae7a:	6878      	ldr	r0, [r7, #4]
 801ae7c:	f7f6 ff50 	bl	8011d20 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801ae80:	697b      	ldr	r3, [r7, #20]
 801ae82:	607b      	str	r3, [r7, #4]
 801ae84:	e00f      	b.n	801aea6 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801ae86:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801ae88:	330e      	adds	r3, #14
 801ae8a:	4619      	mov	r1, r3
 801ae8c:	6878      	ldr	r0, [r7, #4]
 801ae8e:	f7f6 fec1 	bl	8011c14 <pbuf_remove_header>
 801ae92:	4603      	mov	r3, r0
 801ae94:	2b00      	cmp	r3, #0
 801ae96:	d006      	beq.n	801aea6 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801ae98:	4b2e      	ldr	r3, [pc, #184]	; (801af54 <icmp_input+0x1f8>)
 801ae9a:	22c7      	movs	r2, #199	; 0xc7
 801ae9c:	4930      	ldr	r1, [pc, #192]	; (801af60 <icmp_input+0x204>)
 801ae9e:	482f      	ldr	r0, [pc, #188]	; (801af5c <icmp_input+0x200>)
 801aea0:	f002 faee 	bl	801d480 <iprintf>
          goto icmperr;
 801aea4:	e04b      	b.n	801af3e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801aea6:	687b      	ldr	r3, [r7, #4]
 801aea8:	685b      	ldr	r3, [r3, #4]
 801aeaa:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801aeac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801aeae:	4619      	mov	r1, r3
 801aeb0:	6878      	ldr	r0, [r7, #4]
 801aeb2:	f7f6 fe9f 	bl	8011bf4 <pbuf_add_header>
 801aeb6:	4603      	mov	r3, r0
 801aeb8:	2b00      	cmp	r3, #0
 801aeba:	d12b      	bne.n	801af14 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801aebc:	687b      	ldr	r3, [r7, #4]
 801aebe:	685b      	ldr	r3, [r3, #4]
 801aec0:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801aec2:	69fb      	ldr	r3, [r7, #28]
 801aec4:	681a      	ldr	r2, [r3, #0]
 801aec6:	68fb      	ldr	r3, [r7, #12]
 801aec8:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801aeca:	4b20      	ldr	r3, [pc, #128]	; (801af4c <icmp_input+0x1f0>)
 801aecc:	691a      	ldr	r2, [r3, #16]
 801aece:	68fb      	ldr	r3, [r7, #12]
 801aed0:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801aed2:	693b      	ldr	r3, [r7, #16]
 801aed4:	2200      	movs	r2, #0
 801aed6:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801aed8:	693b      	ldr	r3, [r7, #16]
 801aeda:	2200      	movs	r2, #0
 801aedc:	709a      	strb	r2, [r3, #2]
 801aede:	2200      	movs	r2, #0
 801aee0:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801aee2:	68fb      	ldr	r3, [r7, #12]
 801aee4:	22ff      	movs	r2, #255	; 0xff
 801aee6:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801aee8:	68fb      	ldr	r3, [r7, #12]
 801aeea:	2200      	movs	r2, #0
 801aeec:	729a      	strb	r2, [r3, #10]
 801aeee:	2200      	movs	r2, #0
 801aef0:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801aef2:	683b      	ldr	r3, [r7, #0]
 801aef4:	9302      	str	r3, [sp, #8]
 801aef6:	2301      	movs	r3, #1
 801aef8:	9301      	str	r3, [sp, #4]
 801aefa:	2300      	movs	r3, #0
 801aefc:	9300      	str	r3, [sp, #0]
 801aefe:	23ff      	movs	r3, #255	; 0xff
 801af00:	2200      	movs	r2, #0
 801af02:	69f9      	ldr	r1, [r7, #28]
 801af04:	6878      	ldr	r0, [r7, #4]
 801af06:	f000 fa93 	bl	801b430 <ip4_output_if>
 801af0a:	4603      	mov	r3, r0
 801af0c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801af0e:	e001      	b.n	801af14 <icmp_input+0x1b8>
      break;
 801af10:	bf00      	nop
 801af12:	e000      	b.n	801af16 <icmp_input+0x1ba>
      break;
 801af14:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801af16:	6878      	ldr	r0, [r7, #4]
 801af18:	f7f6 ff02 	bl	8011d20 <pbuf_free>
  return;
 801af1c:	e013      	b.n	801af46 <icmp_input+0x1ea>
    goto lenerr;
 801af1e:	bf00      	nop
 801af20:	e002      	b.n	801af28 <icmp_input+0x1cc>
    goto lenerr;
 801af22:	bf00      	nop
 801af24:	e000      	b.n	801af28 <icmp_input+0x1cc>
        goto lenerr;
 801af26:	bf00      	nop
lenerr:
  pbuf_free(p);
 801af28:	6878      	ldr	r0, [r7, #4]
 801af2a:	f7f6 fef9 	bl	8011d20 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801af2e:	e00a      	b.n	801af46 <icmp_input+0x1ea>
        goto icmperr;
 801af30:	bf00      	nop
 801af32:	e004      	b.n	801af3e <icmp_input+0x1e2>
        goto icmperr;
 801af34:	bf00      	nop
 801af36:	e002      	b.n	801af3e <icmp_input+0x1e2>
          goto icmperr;
 801af38:	bf00      	nop
 801af3a:	e000      	b.n	801af3e <icmp_input+0x1e2>
          goto icmperr;
 801af3c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801af3e:	6878      	ldr	r0, [r7, #4]
 801af40:	f7f6 feee 	bl	8011d20 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801af44:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801af46:	3728      	adds	r7, #40	; 0x28
 801af48:	46bd      	mov	sp, r7
 801af4a:	bd80      	pop	{r7, pc}
 801af4c:	200172e4 	.word	0x200172e4
 801af50:	200172f8 	.word	0x200172f8
 801af54:	0802213c 	.word	0x0802213c
 801af58:	08022174 	.word	0x08022174
 801af5c:	080221ac 	.word	0x080221ac
 801af60:	080221d4 	.word	0x080221d4

0801af64 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801af64:	b580      	push	{r7, lr}
 801af66:	b082      	sub	sp, #8
 801af68:	af00      	add	r7, sp, #0
 801af6a:	6078      	str	r0, [r7, #4]
 801af6c:	460b      	mov	r3, r1
 801af6e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801af70:	78fb      	ldrb	r3, [r7, #3]
 801af72:	461a      	mov	r2, r3
 801af74:	2103      	movs	r1, #3
 801af76:	6878      	ldr	r0, [r7, #4]
 801af78:	f000 f814 	bl	801afa4 <icmp_send_response>
}
 801af7c:	bf00      	nop
 801af7e:	3708      	adds	r7, #8
 801af80:	46bd      	mov	sp, r7
 801af82:	bd80      	pop	{r7, pc}

0801af84 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801af84:	b580      	push	{r7, lr}
 801af86:	b082      	sub	sp, #8
 801af88:	af00      	add	r7, sp, #0
 801af8a:	6078      	str	r0, [r7, #4]
 801af8c:	460b      	mov	r3, r1
 801af8e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801af90:	78fb      	ldrb	r3, [r7, #3]
 801af92:	461a      	mov	r2, r3
 801af94:	210b      	movs	r1, #11
 801af96:	6878      	ldr	r0, [r7, #4]
 801af98:	f000 f804 	bl	801afa4 <icmp_send_response>
}
 801af9c:	bf00      	nop
 801af9e:	3708      	adds	r7, #8
 801afa0:	46bd      	mov	sp, r7
 801afa2:	bd80      	pop	{r7, pc}

0801afa4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801afa4:	b580      	push	{r7, lr}
 801afa6:	b08c      	sub	sp, #48	; 0x30
 801afa8:	af04      	add	r7, sp, #16
 801afaa:	6078      	str	r0, [r7, #4]
 801afac:	460b      	mov	r3, r1
 801afae:	70fb      	strb	r3, [r7, #3]
 801afb0:	4613      	mov	r3, r2
 801afb2:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801afb4:	f44f 7220 	mov.w	r2, #640	; 0x280
 801afb8:	2124      	movs	r1, #36	; 0x24
 801afba:	2022      	movs	r0, #34	; 0x22
 801afbc:	f7f6 fbcc 	bl	8011758 <pbuf_alloc>
 801afc0:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801afc2:	69fb      	ldr	r3, [r7, #28]
 801afc4:	2b00      	cmp	r3, #0
 801afc6:	d04c      	beq.n	801b062 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801afc8:	69fb      	ldr	r3, [r7, #28]
 801afca:	895b      	ldrh	r3, [r3, #10]
 801afcc:	2b23      	cmp	r3, #35	; 0x23
 801afce:	d806      	bhi.n	801afde <icmp_send_response+0x3a>
 801afd0:	4b26      	ldr	r3, [pc, #152]	; (801b06c <icmp_send_response+0xc8>)
 801afd2:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801afd6:	4926      	ldr	r1, [pc, #152]	; (801b070 <icmp_send_response+0xcc>)
 801afd8:	4826      	ldr	r0, [pc, #152]	; (801b074 <icmp_send_response+0xd0>)
 801afda:	f002 fa51 	bl	801d480 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801afde:	687b      	ldr	r3, [r7, #4]
 801afe0:	685b      	ldr	r3, [r3, #4]
 801afe2:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801afe4:	69fb      	ldr	r3, [r7, #28]
 801afe6:	685b      	ldr	r3, [r3, #4]
 801afe8:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801afea:	697b      	ldr	r3, [r7, #20]
 801afec:	78fa      	ldrb	r2, [r7, #3]
 801afee:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801aff0:	697b      	ldr	r3, [r7, #20]
 801aff2:	78ba      	ldrb	r2, [r7, #2]
 801aff4:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801aff6:	697b      	ldr	r3, [r7, #20]
 801aff8:	2200      	movs	r2, #0
 801affa:	711a      	strb	r2, [r3, #4]
 801affc:	2200      	movs	r2, #0
 801affe:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801b000:	697b      	ldr	r3, [r7, #20]
 801b002:	2200      	movs	r2, #0
 801b004:	719a      	strb	r2, [r3, #6]
 801b006:	2200      	movs	r2, #0
 801b008:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801b00a:	69fb      	ldr	r3, [r7, #28]
 801b00c:	685b      	ldr	r3, [r3, #4]
 801b00e:	f103 0008 	add.w	r0, r3, #8
 801b012:	687b      	ldr	r3, [r7, #4]
 801b014:	685b      	ldr	r3, [r3, #4]
 801b016:	221c      	movs	r2, #28
 801b018:	4619      	mov	r1, r3
 801b01a:	f001 fb77 	bl	801c70c <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801b01e:	69bb      	ldr	r3, [r7, #24]
 801b020:	68db      	ldr	r3, [r3, #12]
 801b022:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801b024:	f107 030c 	add.w	r3, r7, #12
 801b028:	4618      	mov	r0, r3
 801b02a:	f000 f825 	bl	801b078 <ip4_route>
 801b02e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801b030:	693b      	ldr	r3, [r7, #16]
 801b032:	2b00      	cmp	r3, #0
 801b034:	d011      	beq.n	801b05a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801b036:	697b      	ldr	r3, [r7, #20]
 801b038:	2200      	movs	r2, #0
 801b03a:	709a      	strb	r2, [r3, #2]
 801b03c:	2200      	movs	r2, #0
 801b03e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801b040:	f107 020c 	add.w	r2, r7, #12
 801b044:	693b      	ldr	r3, [r7, #16]
 801b046:	9302      	str	r3, [sp, #8]
 801b048:	2301      	movs	r3, #1
 801b04a:	9301      	str	r3, [sp, #4]
 801b04c:	2300      	movs	r3, #0
 801b04e:	9300      	str	r3, [sp, #0]
 801b050:	23ff      	movs	r3, #255	; 0xff
 801b052:	2100      	movs	r1, #0
 801b054:	69f8      	ldr	r0, [r7, #28]
 801b056:	f000 f9eb 	bl	801b430 <ip4_output_if>
  }
  pbuf_free(q);
 801b05a:	69f8      	ldr	r0, [r7, #28]
 801b05c:	f7f6 fe60 	bl	8011d20 <pbuf_free>
 801b060:	e000      	b.n	801b064 <icmp_send_response+0xc0>
    return;
 801b062:	bf00      	nop
}
 801b064:	3720      	adds	r7, #32
 801b066:	46bd      	mov	sp, r7
 801b068:	bd80      	pop	{r7, pc}
 801b06a:	bf00      	nop
 801b06c:	0802213c 	.word	0x0802213c
 801b070:	08022208 	.word	0x08022208
 801b074:	080221ac 	.word	0x080221ac

0801b078 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801b078:	b480      	push	{r7}
 801b07a:	b085      	sub	sp, #20
 801b07c:	af00      	add	r7, sp, #0
 801b07e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801b080:	4b33      	ldr	r3, [pc, #204]	; (801b150 <ip4_route+0xd8>)
 801b082:	681b      	ldr	r3, [r3, #0]
 801b084:	60fb      	str	r3, [r7, #12]
 801b086:	e036      	b.n	801b0f6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801b088:	68fb      	ldr	r3, [r7, #12]
 801b08a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801b08e:	f003 0301 	and.w	r3, r3, #1
 801b092:	b2db      	uxtb	r3, r3
 801b094:	2b00      	cmp	r3, #0
 801b096:	d02b      	beq.n	801b0f0 <ip4_route+0x78>
 801b098:	68fb      	ldr	r3, [r7, #12]
 801b09a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801b09e:	089b      	lsrs	r3, r3, #2
 801b0a0:	f003 0301 	and.w	r3, r3, #1
 801b0a4:	b2db      	uxtb	r3, r3
 801b0a6:	2b00      	cmp	r3, #0
 801b0a8:	d022      	beq.n	801b0f0 <ip4_route+0x78>
 801b0aa:	68fb      	ldr	r3, [r7, #12]
 801b0ac:	3304      	adds	r3, #4
 801b0ae:	681b      	ldr	r3, [r3, #0]
 801b0b0:	2b00      	cmp	r3, #0
 801b0b2:	d01d      	beq.n	801b0f0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801b0b4:	687b      	ldr	r3, [r7, #4]
 801b0b6:	681a      	ldr	r2, [r3, #0]
 801b0b8:	68fb      	ldr	r3, [r7, #12]
 801b0ba:	3304      	adds	r3, #4
 801b0bc:	681b      	ldr	r3, [r3, #0]
 801b0be:	405a      	eors	r2, r3
 801b0c0:	68fb      	ldr	r3, [r7, #12]
 801b0c2:	3308      	adds	r3, #8
 801b0c4:	681b      	ldr	r3, [r3, #0]
 801b0c6:	4013      	ands	r3, r2
 801b0c8:	2b00      	cmp	r3, #0
 801b0ca:	d101      	bne.n	801b0d0 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801b0cc:	68fb      	ldr	r3, [r7, #12]
 801b0ce:	e038      	b.n	801b142 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801b0d0:	68fb      	ldr	r3, [r7, #12]
 801b0d2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801b0d6:	f003 0302 	and.w	r3, r3, #2
 801b0da:	2b00      	cmp	r3, #0
 801b0dc:	d108      	bne.n	801b0f0 <ip4_route+0x78>
 801b0de:	687b      	ldr	r3, [r7, #4]
 801b0e0:	681a      	ldr	r2, [r3, #0]
 801b0e2:	68fb      	ldr	r3, [r7, #12]
 801b0e4:	330c      	adds	r3, #12
 801b0e6:	681b      	ldr	r3, [r3, #0]
 801b0e8:	429a      	cmp	r2, r3
 801b0ea:	d101      	bne.n	801b0f0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801b0ec:	68fb      	ldr	r3, [r7, #12]
 801b0ee:	e028      	b.n	801b142 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801b0f0:	68fb      	ldr	r3, [r7, #12]
 801b0f2:	681b      	ldr	r3, [r3, #0]
 801b0f4:	60fb      	str	r3, [r7, #12]
 801b0f6:	68fb      	ldr	r3, [r7, #12]
 801b0f8:	2b00      	cmp	r3, #0
 801b0fa:	d1c5      	bne.n	801b088 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801b0fc:	4b15      	ldr	r3, [pc, #84]	; (801b154 <ip4_route+0xdc>)
 801b0fe:	681b      	ldr	r3, [r3, #0]
 801b100:	2b00      	cmp	r3, #0
 801b102:	d01a      	beq.n	801b13a <ip4_route+0xc2>
 801b104:	4b13      	ldr	r3, [pc, #76]	; (801b154 <ip4_route+0xdc>)
 801b106:	681b      	ldr	r3, [r3, #0]
 801b108:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801b10c:	f003 0301 	and.w	r3, r3, #1
 801b110:	2b00      	cmp	r3, #0
 801b112:	d012      	beq.n	801b13a <ip4_route+0xc2>
 801b114:	4b0f      	ldr	r3, [pc, #60]	; (801b154 <ip4_route+0xdc>)
 801b116:	681b      	ldr	r3, [r3, #0]
 801b118:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801b11c:	f003 0304 	and.w	r3, r3, #4
 801b120:	2b00      	cmp	r3, #0
 801b122:	d00a      	beq.n	801b13a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801b124:	4b0b      	ldr	r3, [pc, #44]	; (801b154 <ip4_route+0xdc>)
 801b126:	681b      	ldr	r3, [r3, #0]
 801b128:	3304      	adds	r3, #4
 801b12a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801b12c:	2b00      	cmp	r3, #0
 801b12e:	d004      	beq.n	801b13a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801b130:	687b      	ldr	r3, [r7, #4]
 801b132:	681b      	ldr	r3, [r3, #0]
 801b134:	b2db      	uxtb	r3, r3
 801b136:	2b7f      	cmp	r3, #127	; 0x7f
 801b138:	d101      	bne.n	801b13e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801b13a:	2300      	movs	r3, #0
 801b13c:	e001      	b.n	801b142 <ip4_route+0xca>
  }

  return netif_default;
 801b13e:	4b05      	ldr	r3, [pc, #20]	; (801b154 <ip4_route+0xdc>)
 801b140:	681b      	ldr	r3, [r3, #0]
}
 801b142:	4618      	mov	r0, r3
 801b144:	3714      	adds	r7, #20
 801b146:	46bd      	mov	sp, r7
 801b148:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b14c:	4770      	bx	lr
 801b14e:	bf00      	nop
 801b150:	2001b7c8 	.word	0x2001b7c8
 801b154:	2001b7cc 	.word	0x2001b7cc

0801b158 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801b158:	b580      	push	{r7, lr}
 801b15a:	b082      	sub	sp, #8
 801b15c:	af00      	add	r7, sp, #0
 801b15e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801b160:	687b      	ldr	r3, [r7, #4]
 801b162:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801b166:	f003 0301 	and.w	r3, r3, #1
 801b16a:	b2db      	uxtb	r3, r3
 801b16c:	2b00      	cmp	r3, #0
 801b16e:	d016      	beq.n	801b19e <ip4_input_accept+0x46>
 801b170:	687b      	ldr	r3, [r7, #4]
 801b172:	3304      	adds	r3, #4
 801b174:	681b      	ldr	r3, [r3, #0]
 801b176:	2b00      	cmp	r3, #0
 801b178:	d011      	beq.n	801b19e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801b17a:	4b0b      	ldr	r3, [pc, #44]	; (801b1a8 <ip4_input_accept+0x50>)
 801b17c:	695a      	ldr	r2, [r3, #20]
 801b17e:	687b      	ldr	r3, [r7, #4]
 801b180:	3304      	adds	r3, #4
 801b182:	681b      	ldr	r3, [r3, #0]
 801b184:	429a      	cmp	r2, r3
 801b186:	d008      	beq.n	801b19a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801b188:	4b07      	ldr	r3, [pc, #28]	; (801b1a8 <ip4_input_accept+0x50>)
 801b18a:	695b      	ldr	r3, [r3, #20]
 801b18c:	6879      	ldr	r1, [r7, #4]
 801b18e:	4618      	mov	r0, r3
 801b190:	f000 fa26 	bl	801b5e0 <ip4_addr_isbroadcast_u32>
 801b194:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801b196:	2b00      	cmp	r3, #0
 801b198:	d001      	beq.n	801b19e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801b19a:	2301      	movs	r3, #1
 801b19c:	e000      	b.n	801b1a0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801b19e:	2300      	movs	r3, #0
}
 801b1a0:	4618      	mov	r0, r3
 801b1a2:	3708      	adds	r7, #8
 801b1a4:	46bd      	mov	sp, r7
 801b1a6:	bd80      	pop	{r7, pc}
 801b1a8:	200172e4 	.word	0x200172e4

0801b1ac <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801b1ac:	b580      	push	{r7, lr}
 801b1ae:	b088      	sub	sp, #32
 801b1b0:	af00      	add	r7, sp, #0
 801b1b2:	6078      	str	r0, [r7, #4]
 801b1b4:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 801b1b6:	2301      	movs	r3, #1
 801b1b8:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801b1ba:	687b      	ldr	r3, [r7, #4]
 801b1bc:	685b      	ldr	r3, [r3, #4]
 801b1be:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 801b1c0:	69fb      	ldr	r3, [r7, #28]
 801b1c2:	781b      	ldrb	r3, [r3, #0]
 801b1c4:	091b      	lsrs	r3, r3, #4
 801b1c6:	b2db      	uxtb	r3, r3
 801b1c8:	2b04      	cmp	r3, #4
 801b1ca:	d004      	beq.n	801b1d6 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801b1cc:	6878      	ldr	r0, [r7, #4]
 801b1ce:	f7f6 fda7 	bl	8011d20 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801b1d2:	2300      	movs	r3, #0
 801b1d4:	e123      	b.n	801b41e <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801b1d6:	69fb      	ldr	r3, [r7, #28]
 801b1d8:	781b      	ldrb	r3, [r3, #0]
 801b1da:	f003 030f 	and.w	r3, r3, #15
 801b1de:	b2db      	uxtb	r3, r3
 801b1e0:	009b      	lsls	r3, r3, #2
 801b1e2:	b2db      	uxtb	r3, r3
 801b1e4:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801b1e6:	69fb      	ldr	r3, [r7, #28]
 801b1e8:	885b      	ldrh	r3, [r3, #2]
 801b1ea:	b29b      	uxth	r3, r3
 801b1ec:	4618      	mov	r0, r3
 801b1ee:	f7f5 f9df 	bl	80105b0 <lwip_htons>
 801b1f2:	4603      	mov	r3, r0
 801b1f4:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801b1f6:	687b      	ldr	r3, [r7, #4]
 801b1f8:	891b      	ldrh	r3, [r3, #8]
 801b1fa:	8a3a      	ldrh	r2, [r7, #16]
 801b1fc:	429a      	cmp	r2, r3
 801b1fe:	d204      	bcs.n	801b20a <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 801b200:	8a3b      	ldrh	r3, [r7, #16]
 801b202:	4619      	mov	r1, r3
 801b204:	6878      	ldr	r0, [r7, #4]
 801b206:	f7f6 fc05 	bl	8011a14 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801b20a:	687b      	ldr	r3, [r7, #4]
 801b20c:	895b      	ldrh	r3, [r3, #10]
 801b20e:	8a7a      	ldrh	r2, [r7, #18]
 801b210:	429a      	cmp	r2, r3
 801b212:	d807      	bhi.n	801b224 <ip4_input+0x78>
 801b214:	687b      	ldr	r3, [r7, #4]
 801b216:	891b      	ldrh	r3, [r3, #8]
 801b218:	8a3a      	ldrh	r2, [r7, #16]
 801b21a:	429a      	cmp	r2, r3
 801b21c:	d802      	bhi.n	801b224 <ip4_input+0x78>
 801b21e:	8a7b      	ldrh	r3, [r7, #18]
 801b220:	2b13      	cmp	r3, #19
 801b222:	d804      	bhi.n	801b22e <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801b224:	6878      	ldr	r0, [r7, #4]
 801b226:	f7f6 fd7b 	bl	8011d20 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801b22a:	2300      	movs	r3, #0
 801b22c:	e0f7      	b.n	801b41e <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801b22e:	69fb      	ldr	r3, [r7, #28]
 801b230:	691b      	ldr	r3, [r3, #16]
 801b232:	4a7d      	ldr	r2, [pc, #500]	; (801b428 <ip4_input+0x27c>)
 801b234:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801b236:	69fb      	ldr	r3, [r7, #28]
 801b238:	68db      	ldr	r3, [r3, #12]
 801b23a:	4a7b      	ldr	r2, [pc, #492]	; (801b428 <ip4_input+0x27c>)
 801b23c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801b23e:	4b7a      	ldr	r3, [pc, #488]	; (801b428 <ip4_input+0x27c>)
 801b240:	695b      	ldr	r3, [r3, #20]
 801b242:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801b246:	2be0      	cmp	r3, #224	; 0xe0
 801b248:	d112      	bne.n	801b270 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801b24a:	683b      	ldr	r3, [r7, #0]
 801b24c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801b250:	f003 0301 	and.w	r3, r3, #1
 801b254:	b2db      	uxtb	r3, r3
 801b256:	2b00      	cmp	r3, #0
 801b258:	d007      	beq.n	801b26a <ip4_input+0xbe>
 801b25a:	683b      	ldr	r3, [r7, #0]
 801b25c:	3304      	adds	r3, #4
 801b25e:	681b      	ldr	r3, [r3, #0]
 801b260:	2b00      	cmp	r3, #0
 801b262:	d002      	beq.n	801b26a <ip4_input+0xbe>
      netif = inp;
 801b264:	683b      	ldr	r3, [r7, #0]
 801b266:	61bb      	str	r3, [r7, #24]
 801b268:	e02a      	b.n	801b2c0 <ip4_input+0x114>
    } else {
      netif = NULL;
 801b26a:	2300      	movs	r3, #0
 801b26c:	61bb      	str	r3, [r7, #24]
 801b26e:	e027      	b.n	801b2c0 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801b270:	6838      	ldr	r0, [r7, #0]
 801b272:	f7ff ff71 	bl	801b158 <ip4_input_accept>
 801b276:	4603      	mov	r3, r0
 801b278:	2b00      	cmp	r3, #0
 801b27a:	d002      	beq.n	801b282 <ip4_input+0xd6>
      netif = inp;
 801b27c:	683b      	ldr	r3, [r7, #0]
 801b27e:	61bb      	str	r3, [r7, #24]
 801b280:	e01e      	b.n	801b2c0 <ip4_input+0x114>
    } else {
      netif = NULL;
 801b282:	2300      	movs	r3, #0
 801b284:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801b286:	4b68      	ldr	r3, [pc, #416]	; (801b428 <ip4_input+0x27c>)
 801b288:	695b      	ldr	r3, [r3, #20]
 801b28a:	b2db      	uxtb	r3, r3
 801b28c:	2b7f      	cmp	r3, #127	; 0x7f
 801b28e:	d017      	beq.n	801b2c0 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801b290:	4b66      	ldr	r3, [pc, #408]	; (801b42c <ip4_input+0x280>)
 801b292:	681b      	ldr	r3, [r3, #0]
 801b294:	61bb      	str	r3, [r7, #24]
 801b296:	e00e      	b.n	801b2b6 <ip4_input+0x10a>
          if (netif == inp) {
 801b298:	69ba      	ldr	r2, [r7, #24]
 801b29a:	683b      	ldr	r3, [r7, #0]
 801b29c:	429a      	cmp	r2, r3
 801b29e:	d006      	beq.n	801b2ae <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801b2a0:	69b8      	ldr	r0, [r7, #24]
 801b2a2:	f7ff ff59 	bl	801b158 <ip4_input_accept>
 801b2a6:	4603      	mov	r3, r0
 801b2a8:	2b00      	cmp	r3, #0
 801b2aa:	d108      	bne.n	801b2be <ip4_input+0x112>
 801b2ac:	e000      	b.n	801b2b0 <ip4_input+0x104>
            continue;
 801b2ae:	bf00      	nop
        NETIF_FOREACH(netif) {
 801b2b0:	69bb      	ldr	r3, [r7, #24]
 801b2b2:	681b      	ldr	r3, [r3, #0]
 801b2b4:	61bb      	str	r3, [r7, #24]
 801b2b6:	69bb      	ldr	r3, [r7, #24]
 801b2b8:	2b00      	cmp	r3, #0
 801b2ba:	d1ed      	bne.n	801b298 <ip4_input+0xec>
 801b2bc:	e000      	b.n	801b2c0 <ip4_input+0x114>
            break;
 801b2be:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 801b2c0:	69bb      	ldr	r3, [r7, #24]
 801b2c2:	2b00      	cmp	r3, #0
 801b2c4:	d111      	bne.n	801b2ea <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 801b2c6:	69fb      	ldr	r3, [r7, #28]
 801b2c8:	7a5b      	ldrb	r3, [r3, #9]
 801b2ca:	2b11      	cmp	r3, #17
 801b2cc:	d10d      	bne.n	801b2ea <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 801b2ce:	8a7b      	ldrh	r3, [r7, #18]
 801b2d0:	69fa      	ldr	r2, [r7, #28]
 801b2d2:	4413      	add	r3, r2
 801b2d4:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 801b2d6:	68fb      	ldr	r3, [r7, #12]
 801b2d8:	885b      	ldrh	r3, [r3, #2]
 801b2da:	b29b      	uxth	r3, r3
 801b2dc:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 801b2e0:	d103      	bne.n	801b2ea <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 801b2e2:	683b      	ldr	r3, [r7, #0]
 801b2e4:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 801b2e6:	2300      	movs	r3, #0
 801b2e8:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 801b2ea:	697b      	ldr	r3, [r7, #20]
 801b2ec:	2b00      	cmp	r3, #0
 801b2ee:	d017      	beq.n	801b320 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 801b2f0:	4b4d      	ldr	r3, [pc, #308]	; (801b428 <ip4_input+0x27c>)
 801b2f2:	691b      	ldr	r3, [r3, #16]
 801b2f4:	2b00      	cmp	r3, #0
 801b2f6:	d013      	beq.n	801b320 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801b2f8:	4b4b      	ldr	r3, [pc, #300]	; (801b428 <ip4_input+0x27c>)
 801b2fa:	691b      	ldr	r3, [r3, #16]
 801b2fc:	6839      	ldr	r1, [r7, #0]
 801b2fe:	4618      	mov	r0, r3
 801b300:	f000 f96e 	bl	801b5e0 <ip4_addr_isbroadcast_u32>
 801b304:	4603      	mov	r3, r0
 801b306:	2b00      	cmp	r3, #0
 801b308:	d105      	bne.n	801b316 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801b30a:	4b47      	ldr	r3, [pc, #284]	; (801b428 <ip4_input+0x27c>)
 801b30c:	691b      	ldr	r3, [r3, #16]
 801b30e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801b312:	2be0      	cmp	r3, #224	; 0xe0
 801b314:	d104      	bne.n	801b320 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801b316:	6878      	ldr	r0, [r7, #4]
 801b318:	f7f6 fd02 	bl	8011d20 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801b31c:	2300      	movs	r3, #0
 801b31e:	e07e      	b.n	801b41e <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801b320:	69bb      	ldr	r3, [r7, #24]
 801b322:	2b00      	cmp	r3, #0
 801b324:	d104      	bne.n	801b330 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801b326:	6878      	ldr	r0, [r7, #4]
 801b328:	f7f6 fcfa 	bl	8011d20 <pbuf_free>
    return ERR_OK;
 801b32c:	2300      	movs	r3, #0
 801b32e:	e076      	b.n	801b41e <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801b330:	69fb      	ldr	r3, [r7, #28]
 801b332:	88db      	ldrh	r3, [r3, #6]
 801b334:	b29b      	uxth	r3, r3
 801b336:	461a      	mov	r2, r3
 801b338:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801b33c:	4013      	ands	r3, r2
 801b33e:	2b00      	cmp	r3, #0
 801b340:	d00b      	beq.n	801b35a <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801b342:	6878      	ldr	r0, [r7, #4]
 801b344:	f000 fc92 	bl	801bc6c <ip4_reass>
 801b348:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801b34a:	687b      	ldr	r3, [r7, #4]
 801b34c:	2b00      	cmp	r3, #0
 801b34e:	d101      	bne.n	801b354 <ip4_input+0x1a8>
      return ERR_OK;
 801b350:	2300      	movs	r3, #0
 801b352:	e064      	b.n	801b41e <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801b354:	687b      	ldr	r3, [r7, #4]
 801b356:	685b      	ldr	r3, [r3, #4]
 801b358:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801b35a:	4a33      	ldr	r2, [pc, #204]	; (801b428 <ip4_input+0x27c>)
 801b35c:	69bb      	ldr	r3, [r7, #24]
 801b35e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801b360:	4a31      	ldr	r2, [pc, #196]	; (801b428 <ip4_input+0x27c>)
 801b362:	683b      	ldr	r3, [r7, #0]
 801b364:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801b366:	4a30      	ldr	r2, [pc, #192]	; (801b428 <ip4_input+0x27c>)
 801b368:	69fb      	ldr	r3, [r7, #28]
 801b36a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801b36c:	69fb      	ldr	r3, [r7, #28]
 801b36e:	781b      	ldrb	r3, [r3, #0]
 801b370:	f003 030f 	and.w	r3, r3, #15
 801b374:	b2db      	uxtb	r3, r3
 801b376:	009b      	lsls	r3, r3, #2
 801b378:	b2db      	uxtb	r3, r3
 801b37a:	b29a      	uxth	r2, r3
 801b37c:	4b2a      	ldr	r3, [pc, #168]	; (801b428 <ip4_input+0x27c>)
 801b37e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801b380:	8a7b      	ldrh	r3, [r7, #18]
 801b382:	4619      	mov	r1, r3
 801b384:	6878      	ldr	r0, [r7, #4]
 801b386:	f7f6 fc45 	bl	8011c14 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801b38a:	69fb      	ldr	r3, [r7, #28]
 801b38c:	7a5b      	ldrb	r3, [r3, #9]
 801b38e:	2b11      	cmp	r3, #17
 801b390:	d006      	beq.n	801b3a0 <ip4_input+0x1f4>
 801b392:	2b11      	cmp	r3, #17
 801b394:	dc13      	bgt.n	801b3be <ip4_input+0x212>
 801b396:	2b01      	cmp	r3, #1
 801b398:	d00c      	beq.n	801b3b4 <ip4_input+0x208>
 801b39a:	2b06      	cmp	r3, #6
 801b39c:	d005      	beq.n	801b3aa <ip4_input+0x1fe>
 801b39e:	e00e      	b.n	801b3be <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801b3a0:	6839      	ldr	r1, [r7, #0]
 801b3a2:	6878      	ldr	r0, [r7, #4]
 801b3a4:	f7fc faea 	bl	801797c <udp_input>
        break;
 801b3a8:	e026      	b.n	801b3f8 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801b3aa:	6839      	ldr	r1, [r7, #0]
 801b3ac:	6878      	ldr	r0, [r7, #4]
 801b3ae:	f7f8 fafb 	bl	80139a8 <tcp_input>
        break;
 801b3b2:	e021      	b.n	801b3f8 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801b3b4:	6839      	ldr	r1, [r7, #0]
 801b3b6:	6878      	ldr	r0, [r7, #4]
 801b3b8:	f7ff fcd0 	bl	801ad5c <icmp_input>
        break;
 801b3bc:	e01c      	b.n	801b3f8 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801b3be:	4b1a      	ldr	r3, [pc, #104]	; (801b428 <ip4_input+0x27c>)
 801b3c0:	695b      	ldr	r3, [r3, #20]
 801b3c2:	69b9      	ldr	r1, [r7, #24]
 801b3c4:	4618      	mov	r0, r3
 801b3c6:	f000 f90b 	bl	801b5e0 <ip4_addr_isbroadcast_u32>
 801b3ca:	4603      	mov	r3, r0
 801b3cc:	2b00      	cmp	r3, #0
 801b3ce:	d10f      	bne.n	801b3f0 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801b3d0:	4b15      	ldr	r3, [pc, #84]	; (801b428 <ip4_input+0x27c>)
 801b3d2:	695b      	ldr	r3, [r3, #20]
 801b3d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801b3d8:	2be0      	cmp	r3, #224	; 0xe0
 801b3da:	d009      	beq.n	801b3f0 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801b3dc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801b3e0:	4619      	mov	r1, r3
 801b3e2:	6878      	ldr	r0, [r7, #4]
 801b3e4:	f7f6 fc89 	bl	8011cfa <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801b3e8:	2102      	movs	r1, #2
 801b3ea:	6878      	ldr	r0, [r7, #4]
 801b3ec:	f7ff fdba 	bl	801af64 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801b3f0:	6878      	ldr	r0, [r7, #4]
 801b3f2:	f7f6 fc95 	bl	8011d20 <pbuf_free>
        break;
 801b3f6:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801b3f8:	4b0b      	ldr	r3, [pc, #44]	; (801b428 <ip4_input+0x27c>)
 801b3fa:	2200      	movs	r2, #0
 801b3fc:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801b3fe:	4b0a      	ldr	r3, [pc, #40]	; (801b428 <ip4_input+0x27c>)
 801b400:	2200      	movs	r2, #0
 801b402:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801b404:	4b08      	ldr	r3, [pc, #32]	; (801b428 <ip4_input+0x27c>)
 801b406:	2200      	movs	r2, #0
 801b408:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801b40a:	4b07      	ldr	r3, [pc, #28]	; (801b428 <ip4_input+0x27c>)
 801b40c:	2200      	movs	r2, #0
 801b40e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801b410:	4b05      	ldr	r3, [pc, #20]	; (801b428 <ip4_input+0x27c>)
 801b412:	2200      	movs	r2, #0
 801b414:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801b416:	4b04      	ldr	r3, [pc, #16]	; (801b428 <ip4_input+0x27c>)
 801b418:	2200      	movs	r2, #0
 801b41a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801b41c:	2300      	movs	r3, #0
}
 801b41e:	4618      	mov	r0, r3
 801b420:	3720      	adds	r7, #32
 801b422:	46bd      	mov	sp, r7
 801b424:	bd80      	pop	{r7, pc}
 801b426:	bf00      	nop
 801b428:	200172e4 	.word	0x200172e4
 801b42c:	2001b7c8 	.word	0x2001b7c8

0801b430 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801b430:	b580      	push	{r7, lr}
 801b432:	b08a      	sub	sp, #40	; 0x28
 801b434:	af04      	add	r7, sp, #16
 801b436:	60f8      	str	r0, [r7, #12]
 801b438:	60b9      	str	r1, [r7, #8]
 801b43a:	607a      	str	r2, [r7, #4]
 801b43c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801b43e:	68bb      	ldr	r3, [r7, #8]
 801b440:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801b442:	687b      	ldr	r3, [r7, #4]
 801b444:	2b00      	cmp	r3, #0
 801b446:	d009      	beq.n	801b45c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801b448:	68bb      	ldr	r3, [r7, #8]
 801b44a:	2b00      	cmp	r3, #0
 801b44c:	d003      	beq.n	801b456 <ip4_output_if+0x26>
 801b44e:	68bb      	ldr	r3, [r7, #8]
 801b450:	681b      	ldr	r3, [r3, #0]
 801b452:	2b00      	cmp	r3, #0
 801b454:	d102      	bne.n	801b45c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801b456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b458:	3304      	adds	r3, #4
 801b45a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801b45c:	78fa      	ldrb	r2, [r7, #3]
 801b45e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b460:	9302      	str	r3, [sp, #8]
 801b462:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801b466:	9301      	str	r3, [sp, #4]
 801b468:	f897 3020 	ldrb.w	r3, [r7, #32]
 801b46c:	9300      	str	r3, [sp, #0]
 801b46e:	4613      	mov	r3, r2
 801b470:	687a      	ldr	r2, [r7, #4]
 801b472:	6979      	ldr	r1, [r7, #20]
 801b474:	68f8      	ldr	r0, [r7, #12]
 801b476:	f000 f805 	bl	801b484 <ip4_output_if_src>
 801b47a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801b47c:	4618      	mov	r0, r3
 801b47e:	3718      	adds	r7, #24
 801b480:	46bd      	mov	sp, r7
 801b482:	bd80      	pop	{r7, pc}

0801b484 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801b484:	b580      	push	{r7, lr}
 801b486:	b088      	sub	sp, #32
 801b488:	af00      	add	r7, sp, #0
 801b48a:	60f8      	str	r0, [r7, #12]
 801b48c:	60b9      	str	r1, [r7, #8]
 801b48e:	607a      	str	r2, [r7, #4]
 801b490:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801b492:	68fb      	ldr	r3, [r7, #12]
 801b494:	7b9b      	ldrb	r3, [r3, #14]
 801b496:	2b01      	cmp	r3, #1
 801b498:	d006      	beq.n	801b4a8 <ip4_output_if_src+0x24>
 801b49a:	4b4b      	ldr	r3, [pc, #300]	; (801b5c8 <ip4_output_if_src+0x144>)
 801b49c:	f44f 7255 	mov.w	r2, #852	; 0x354
 801b4a0:	494a      	ldr	r1, [pc, #296]	; (801b5cc <ip4_output_if_src+0x148>)
 801b4a2:	484b      	ldr	r0, [pc, #300]	; (801b5d0 <ip4_output_if_src+0x14c>)
 801b4a4:	f001 ffec 	bl	801d480 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801b4a8:	687b      	ldr	r3, [r7, #4]
 801b4aa:	2b00      	cmp	r3, #0
 801b4ac:	d060      	beq.n	801b570 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801b4ae:	2314      	movs	r3, #20
 801b4b0:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801b4b2:	2114      	movs	r1, #20
 801b4b4:	68f8      	ldr	r0, [r7, #12]
 801b4b6:	f7f6 fb9d 	bl	8011bf4 <pbuf_add_header>
 801b4ba:	4603      	mov	r3, r0
 801b4bc:	2b00      	cmp	r3, #0
 801b4be:	d002      	beq.n	801b4c6 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801b4c0:	f06f 0301 	mvn.w	r3, #1
 801b4c4:	e07c      	b.n	801b5c0 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801b4c6:	68fb      	ldr	r3, [r7, #12]
 801b4c8:	685b      	ldr	r3, [r3, #4]
 801b4ca:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801b4cc:	68fb      	ldr	r3, [r7, #12]
 801b4ce:	895b      	ldrh	r3, [r3, #10]
 801b4d0:	2b13      	cmp	r3, #19
 801b4d2:	d806      	bhi.n	801b4e2 <ip4_output_if_src+0x5e>
 801b4d4:	4b3c      	ldr	r3, [pc, #240]	; (801b5c8 <ip4_output_if_src+0x144>)
 801b4d6:	f44f 7262 	mov.w	r2, #904	; 0x388
 801b4da:	493e      	ldr	r1, [pc, #248]	; (801b5d4 <ip4_output_if_src+0x150>)
 801b4dc:	483c      	ldr	r0, [pc, #240]	; (801b5d0 <ip4_output_if_src+0x14c>)
 801b4de:	f001 ffcf 	bl	801d480 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801b4e2:	69fb      	ldr	r3, [r7, #28]
 801b4e4:	78fa      	ldrb	r2, [r7, #3]
 801b4e6:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801b4e8:	69fb      	ldr	r3, [r7, #28]
 801b4ea:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801b4ee:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801b4f0:	687b      	ldr	r3, [r7, #4]
 801b4f2:	681a      	ldr	r2, [r3, #0]
 801b4f4:	69fb      	ldr	r3, [r7, #28]
 801b4f6:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801b4f8:	8b7b      	ldrh	r3, [r7, #26]
 801b4fa:	089b      	lsrs	r3, r3, #2
 801b4fc:	b29b      	uxth	r3, r3
 801b4fe:	b2db      	uxtb	r3, r3
 801b500:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b504:	b2da      	uxtb	r2, r3
 801b506:	69fb      	ldr	r3, [r7, #28]
 801b508:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801b50a:	69fb      	ldr	r3, [r7, #28]
 801b50c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801b510:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801b512:	68fb      	ldr	r3, [r7, #12]
 801b514:	891b      	ldrh	r3, [r3, #8]
 801b516:	4618      	mov	r0, r3
 801b518:	f7f5 f84a 	bl	80105b0 <lwip_htons>
 801b51c:	4603      	mov	r3, r0
 801b51e:	461a      	mov	r2, r3
 801b520:	69fb      	ldr	r3, [r7, #28]
 801b522:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801b524:	69fb      	ldr	r3, [r7, #28]
 801b526:	2200      	movs	r2, #0
 801b528:	719a      	strb	r2, [r3, #6]
 801b52a:	2200      	movs	r2, #0
 801b52c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801b52e:	4b2a      	ldr	r3, [pc, #168]	; (801b5d8 <ip4_output_if_src+0x154>)
 801b530:	881b      	ldrh	r3, [r3, #0]
 801b532:	4618      	mov	r0, r3
 801b534:	f7f5 f83c 	bl	80105b0 <lwip_htons>
 801b538:	4603      	mov	r3, r0
 801b53a:	461a      	mov	r2, r3
 801b53c:	69fb      	ldr	r3, [r7, #28]
 801b53e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801b540:	4b25      	ldr	r3, [pc, #148]	; (801b5d8 <ip4_output_if_src+0x154>)
 801b542:	881b      	ldrh	r3, [r3, #0]
 801b544:	3301      	adds	r3, #1
 801b546:	b29a      	uxth	r2, r3
 801b548:	4b23      	ldr	r3, [pc, #140]	; (801b5d8 <ip4_output_if_src+0x154>)
 801b54a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801b54c:	68bb      	ldr	r3, [r7, #8]
 801b54e:	2b00      	cmp	r3, #0
 801b550:	d104      	bne.n	801b55c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801b552:	4b22      	ldr	r3, [pc, #136]	; (801b5dc <ip4_output_if_src+0x158>)
 801b554:	681a      	ldr	r2, [r3, #0]
 801b556:	69fb      	ldr	r3, [r7, #28]
 801b558:	60da      	str	r2, [r3, #12]
 801b55a:	e003      	b.n	801b564 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801b55c:	68bb      	ldr	r3, [r7, #8]
 801b55e:	681a      	ldr	r2, [r3, #0]
 801b560:	69fb      	ldr	r3, [r7, #28]
 801b562:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801b564:	69fb      	ldr	r3, [r7, #28]
 801b566:	2200      	movs	r2, #0
 801b568:	729a      	strb	r2, [r3, #10]
 801b56a:	2200      	movs	r2, #0
 801b56c:	72da      	strb	r2, [r3, #11]
 801b56e:	e00f      	b.n	801b590 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801b570:	68fb      	ldr	r3, [r7, #12]
 801b572:	895b      	ldrh	r3, [r3, #10]
 801b574:	2b13      	cmp	r3, #19
 801b576:	d802      	bhi.n	801b57e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801b578:	f06f 0301 	mvn.w	r3, #1
 801b57c:	e020      	b.n	801b5c0 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801b57e:	68fb      	ldr	r3, [r7, #12]
 801b580:	685b      	ldr	r3, [r3, #4]
 801b582:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801b584:	69fb      	ldr	r3, [r7, #28]
 801b586:	691b      	ldr	r3, [r3, #16]
 801b588:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801b58a:	f107 0314 	add.w	r3, r7, #20
 801b58e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801b590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b592:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b594:	2b00      	cmp	r3, #0
 801b596:	d00c      	beq.n	801b5b2 <ip4_output_if_src+0x12e>
 801b598:	68fb      	ldr	r3, [r7, #12]
 801b59a:	891a      	ldrh	r2, [r3, #8]
 801b59c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b59e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b5a0:	429a      	cmp	r2, r3
 801b5a2:	d906      	bls.n	801b5b2 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801b5a4:	687a      	ldr	r2, [r7, #4]
 801b5a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801b5a8:	68f8      	ldr	r0, [r7, #12]
 801b5aa:	f000 fd53 	bl	801c054 <ip4_frag>
 801b5ae:	4603      	mov	r3, r0
 801b5b0:	e006      	b.n	801b5c0 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801b5b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b5b4:	695b      	ldr	r3, [r3, #20]
 801b5b6:	687a      	ldr	r2, [r7, #4]
 801b5b8:	68f9      	ldr	r1, [r7, #12]
 801b5ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801b5bc:	4798      	blx	r3
 801b5be:	4603      	mov	r3, r0
}
 801b5c0:	4618      	mov	r0, r3
 801b5c2:	3720      	adds	r7, #32
 801b5c4:	46bd      	mov	sp, r7
 801b5c6:	bd80      	pop	{r7, pc}
 801b5c8:	08022234 	.word	0x08022234
 801b5cc:	08022268 	.word	0x08022268
 801b5d0:	08022274 	.word	0x08022274
 801b5d4:	0802229c 	.word	0x0802229c
 801b5d8:	200138ee 	.word	0x200138ee
 801b5dc:	08022788 	.word	0x08022788

0801b5e0 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801b5e0:	b480      	push	{r7}
 801b5e2:	b085      	sub	sp, #20
 801b5e4:	af00      	add	r7, sp, #0
 801b5e6:	6078      	str	r0, [r7, #4]
 801b5e8:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801b5ea:	687b      	ldr	r3, [r7, #4]
 801b5ec:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801b5ee:	687b      	ldr	r3, [r7, #4]
 801b5f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b5f4:	d002      	beq.n	801b5fc <ip4_addr_isbroadcast_u32+0x1c>
 801b5f6:	687b      	ldr	r3, [r7, #4]
 801b5f8:	2b00      	cmp	r3, #0
 801b5fa:	d101      	bne.n	801b600 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801b5fc:	2301      	movs	r3, #1
 801b5fe:	e02a      	b.n	801b656 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801b600:	683b      	ldr	r3, [r7, #0]
 801b602:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801b606:	f003 0302 	and.w	r3, r3, #2
 801b60a:	2b00      	cmp	r3, #0
 801b60c:	d101      	bne.n	801b612 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801b60e:	2300      	movs	r3, #0
 801b610:	e021      	b.n	801b656 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801b612:	683b      	ldr	r3, [r7, #0]
 801b614:	3304      	adds	r3, #4
 801b616:	681b      	ldr	r3, [r3, #0]
 801b618:	687a      	ldr	r2, [r7, #4]
 801b61a:	429a      	cmp	r2, r3
 801b61c:	d101      	bne.n	801b622 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801b61e:	2300      	movs	r3, #0
 801b620:	e019      	b.n	801b656 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801b622:	68fa      	ldr	r2, [r7, #12]
 801b624:	683b      	ldr	r3, [r7, #0]
 801b626:	3304      	adds	r3, #4
 801b628:	681b      	ldr	r3, [r3, #0]
 801b62a:	405a      	eors	r2, r3
 801b62c:	683b      	ldr	r3, [r7, #0]
 801b62e:	3308      	adds	r3, #8
 801b630:	681b      	ldr	r3, [r3, #0]
 801b632:	4013      	ands	r3, r2
 801b634:	2b00      	cmp	r3, #0
 801b636:	d10d      	bne.n	801b654 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801b638:	683b      	ldr	r3, [r7, #0]
 801b63a:	3308      	adds	r3, #8
 801b63c:	681b      	ldr	r3, [r3, #0]
 801b63e:	43da      	mvns	r2, r3
 801b640:	687b      	ldr	r3, [r7, #4]
 801b642:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801b644:	683b      	ldr	r3, [r7, #0]
 801b646:	3308      	adds	r3, #8
 801b648:	681b      	ldr	r3, [r3, #0]
 801b64a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801b64c:	429a      	cmp	r2, r3
 801b64e:	d101      	bne.n	801b654 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801b650:	2301      	movs	r3, #1
 801b652:	e000      	b.n	801b656 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801b654:	2300      	movs	r3, #0
  }
}
 801b656:	4618      	mov	r0, r3
 801b658:	3714      	adds	r7, #20
 801b65a:	46bd      	mov	sp, r7
 801b65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b660:	4770      	bx	lr
	...

0801b664 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801b664:	b580      	push	{r7, lr}
 801b666:	b084      	sub	sp, #16
 801b668:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801b66a:	2300      	movs	r3, #0
 801b66c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801b66e:	4b12      	ldr	r3, [pc, #72]	; (801b6b8 <ip_reass_tmr+0x54>)
 801b670:	681b      	ldr	r3, [r3, #0]
 801b672:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801b674:	e018      	b.n	801b6a8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801b676:	68fb      	ldr	r3, [r7, #12]
 801b678:	7fdb      	ldrb	r3, [r3, #31]
 801b67a:	2b00      	cmp	r3, #0
 801b67c:	d00b      	beq.n	801b696 <ip_reass_tmr+0x32>
      r->timer--;
 801b67e:	68fb      	ldr	r3, [r7, #12]
 801b680:	7fdb      	ldrb	r3, [r3, #31]
 801b682:	3b01      	subs	r3, #1
 801b684:	b2da      	uxtb	r2, r3
 801b686:	68fb      	ldr	r3, [r7, #12]
 801b688:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801b68a:	68fb      	ldr	r3, [r7, #12]
 801b68c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801b68e:	68fb      	ldr	r3, [r7, #12]
 801b690:	681b      	ldr	r3, [r3, #0]
 801b692:	60fb      	str	r3, [r7, #12]
 801b694:	e008      	b.n	801b6a8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801b696:	68fb      	ldr	r3, [r7, #12]
 801b698:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801b69a:	68fb      	ldr	r3, [r7, #12]
 801b69c:	681b      	ldr	r3, [r3, #0]
 801b69e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801b6a0:	68b9      	ldr	r1, [r7, #8]
 801b6a2:	6878      	ldr	r0, [r7, #4]
 801b6a4:	f000 f80a 	bl	801b6bc <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801b6a8:	68fb      	ldr	r3, [r7, #12]
 801b6aa:	2b00      	cmp	r3, #0
 801b6ac:	d1e3      	bne.n	801b676 <ip_reass_tmr+0x12>
    }
  }
}
 801b6ae:	bf00      	nop
 801b6b0:	bf00      	nop
 801b6b2:	3710      	adds	r7, #16
 801b6b4:	46bd      	mov	sp, r7
 801b6b6:	bd80      	pop	{r7, pc}
 801b6b8:	200138f0 	.word	0x200138f0

0801b6bc <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801b6bc:	b580      	push	{r7, lr}
 801b6be:	b088      	sub	sp, #32
 801b6c0:	af00      	add	r7, sp, #0
 801b6c2:	6078      	str	r0, [r7, #4]
 801b6c4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801b6c6:	2300      	movs	r3, #0
 801b6c8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801b6ca:	683a      	ldr	r2, [r7, #0]
 801b6cc:	687b      	ldr	r3, [r7, #4]
 801b6ce:	429a      	cmp	r2, r3
 801b6d0:	d105      	bne.n	801b6de <ip_reass_free_complete_datagram+0x22>
 801b6d2:	4b45      	ldr	r3, [pc, #276]	; (801b7e8 <ip_reass_free_complete_datagram+0x12c>)
 801b6d4:	22ab      	movs	r2, #171	; 0xab
 801b6d6:	4945      	ldr	r1, [pc, #276]	; (801b7ec <ip_reass_free_complete_datagram+0x130>)
 801b6d8:	4845      	ldr	r0, [pc, #276]	; (801b7f0 <ip_reass_free_complete_datagram+0x134>)
 801b6da:	f001 fed1 	bl	801d480 <iprintf>
  if (prev != NULL) {
 801b6de:	683b      	ldr	r3, [r7, #0]
 801b6e0:	2b00      	cmp	r3, #0
 801b6e2:	d00a      	beq.n	801b6fa <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801b6e4:	683b      	ldr	r3, [r7, #0]
 801b6e6:	681b      	ldr	r3, [r3, #0]
 801b6e8:	687a      	ldr	r2, [r7, #4]
 801b6ea:	429a      	cmp	r2, r3
 801b6ec:	d005      	beq.n	801b6fa <ip_reass_free_complete_datagram+0x3e>
 801b6ee:	4b3e      	ldr	r3, [pc, #248]	; (801b7e8 <ip_reass_free_complete_datagram+0x12c>)
 801b6f0:	22ad      	movs	r2, #173	; 0xad
 801b6f2:	4940      	ldr	r1, [pc, #256]	; (801b7f4 <ip_reass_free_complete_datagram+0x138>)
 801b6f4:	483e      	ldr	r0, [pc, #248]	; (801b7f0 <ip_reass_free_complete_datagram+0x134>)
 801b6f6:	f001 fec3 	bl	801d480 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801b6fa:	687b      	ldr	r3, [r7, #4]
 801b6fc:	685b      	ldr	r3, [r3, #4]
 801b6fe:	685b      	ldr	r3, [r3, #4]
 801b700:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801b702:	697b      	ldr	r3, [r7, #20]
 801b704:	889b      	ldrh	r3, [r3, #4]
 801b706:	b29b      	uxth	r3, r3
 801b708:	2b00      	cmp	r3, #0
 801b70a:	d12a      	bne.n	801b762 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801b70c:	687b      	ldr	r3, [r7, #4]
 801b70e:	685b      	ldr	r3, [r3, #4]
 801b710:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801b712:	697b      	ldr	r3, [r7, #20]
 801b714:	681a      	ldr	r2, [r3, #0]
 801b716:	687b      	ldr	r3, [r7, #4]
 801b718:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801b71a:	69bb      	ldr	r3, [r7, #24]
 801b71c:	6858      	ldr	r0, [r3, #4]
 801b71e:	687b      	ldr	r3, [r7, #4]
 801b720:	3308      	adds	r3, #8
 801b722:	2214      	movs	r2, #20
 801b724:	4619      	mov	r1, r3
 801b726:	f000 fff1 	bl	801c70c <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801b72a:	2101      	movs	r1, #1
 801b72c:	69b8      	ldr	r0, [r7, #24]
 801b72e:	f7ff fc29 	bl	801af84 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801b732:	69b8      	ldr	r0, [r7, #24]
 801b734:	f7f6 fb82 	bl	8011e3c <pbuf_clen>
 801b738:	4603      	mov	r3, r0
 801b73a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801b73c:	8bfa      	ldrh	r2, [r7, #30]
 801b73e:	8a7b      	ldrh	r3, [r7, #18]
 801b740:	4413      	add	r3, r2
 801b742:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801b746:	db05      	blt.n	801b754 <ip_reass_free_complete_datagram+0x98>
 801b748:	4b27      	ldr	r3, [pc, #156]	; (801b7e8 <ip_reass_free_complete_datagram+0x12c>)
 801b74a:	22bc      	movs	r2, #188	; 0xbc
 801b74c:	492a      	ldr	r1, [pc, #168]	; (801b7f8 <ip_reass_free_complete_datagram+0x13c>)
 801b74e:	4828      	ldr	r0, [pc, #160]	; (801b7f0 <ip_reass_free_complete_datagram+0x134>)
 801b750:	f001 fe96 	bl	801d480 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801b754:	8bfa      	ldrh	r2, [r7, #30]
 801b756:	8a7b      	ldrh	r3, [r7, #18]
 801b758:	4413      	add	r3, r2
 801b75a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801b75c:	69b8      	ldr	r0, [r7, #24]
 801b75e:	f7f6 fadf 	bl	8011d20 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801b762:	687b      	ldr	r3, [r7, #4]
 801b764:	685b      	ldr	r3, [r3, #4]
 801b766:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801b768:	e01f      	b.n	801b7aa <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801b76a:	69bb      	ldr	r3, [r7, #24]
 801b76c:	685b      	ldr	r3, [r3, #4]
 801b76e:	617b      	str	r3, [r7, #20]
    pcur = p;
 801b770:	69bb      	ldr	r3, [r7, #24]
 801b772:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801b774:	697b      	ldr	r3, [r7, #20]
 801b776:	681b      	ldr	r3, [r3, #0]
 801b778:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801b77a:	68f8      	ldr	r0, [r7, #12]
 801b77c:	f7f6 fb5e 	bl	8011e3c <pbuf_clen>
 801b780:	4603      	mov	r3, r0
 801b782:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801b784:	8bfa      	ldrh	r2, [r7, #30]
 801b786:	8a7b      	ldrh	r3, [r7, #18]
 801b788:	4413      	add	r3, r2
 801b78a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801b78e:	db05      	blt.n	801b79c <ip_reass_free_complete_datagram+0xe0>
 801b790:	4b15      	ldr	r3, [pc, #84]	; (801b7e8 <ip_reass_free_complete_datagram+0x12c>)
 801b792:	22cc      	movs	r2, #204	; 0xcc
 801b794:	4918      	ldr	r1, [pc, #96]	; (801b7f8 <ip_reass_free_complete_datagram+0x13c>)
 801b796:	4816      	ldr	r0, [pc, #88]	; (801b7f0 <ip_reass_free_complete_datagram+0x134>)
 801b798:	f001 fe72 	bl	801d480 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801b79c:	8bfa      	ldrh	r2, [r7, #30]
 801b79e:	8a7b      	ldrh	r3, [r7, #18]
 801b7a0:	4413      	add	r3, r2
 801b7a2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801b7a4:	68f8      	ldr	r0, [r7, #12]
 801b7a6:	f7f6 fabb 	bl	8011d20 <pbuf_free>
  while (p != NULL) {
 801b7aa:	69bb      	ldr	r3, [r7, #24]
 801b7ac:	2b00      	cmp	r3, #0
 801b7ae:	d1dc      	bne.n	801b76a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801b7b0:	6839      	ldr	r1, [r7, #0]
 801b7b2:	6878      	ldr	r0, [r7, #4]
 801b7b4:	f000 f8c2 	bl	801b93c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801b7b8:	4b10      	ldr	r3, [pc, #64]	; (801b7fc <ip_reass_free_complete_datagram+0x140>)
 801b7ba:	881b      	ldrh	r3, [r3, #0]
 801b7bc:	8bfa      	ldrh	r2, [r7, #30]
 801b7be:	429a      	cmp	r2, r3
 801b7c0:	d905      	bls.n	801b7ce <ip_reass_free_complete_datagram+0x112>
 801b7c2:	4b09      	ldr	r3, [pc, #36]	; (801b7e8 <ip_reass_free_complete_datagram+0x12c>)
 801b7c4:	22d2      	movs	r2, #210	; 0xd2
 801b7c6:	490e      	ldr	r1, [pc, #56]	; (801b800 <ip_reass_free_complete_datagram+0x144>)
 801b7c8:	4809      	ldr	r0, [pc, #36]	; (801b7f0 <ip_reass_free_complete_datagram+0x134>)
 801b7ca:	f001 fe59 	bl	801d480 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801b7ce:	4b0b      	ldr	r3, [pc, #44]	; (801b7fc <ip_reass_free_complete_datagram+0x140>)
 801b7d0:	881a      	ldrh	r2, [r3, #0]
 801b7d2:	8bfb      	ldrh	r3, [r7, #30]
 801b7d4:	1ad3      	subs	r3, r2, r3
 801b7d6:	b29a      	uxth	r2, r3
 801b7d8:	4b08      	ldr	r3, [pc, #32]	; (801b7fc <ip_reass_free_complete_datagram+0x140>)
 801b7da:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801b7dc:	8bfb      	ldrh	r3, [r7, #30]
}
 801b7de:	4618      	mov	r0, r3
 801b7e0:	3720      	adds	r7, #32
 801b7e2:	46bd      	mov	sp, r7
 801b7e4:	bd80      	pop	{r7, pc}
 801b7e6:	bf00      	nop
 801b7e8:	080222cc 	.word	0x080222cc
 801b7ec:	08022308 	.word	0x08022308
 801b7f0:	08022314 	.word	0x08022314
 801b7f4:	0802233c 	.word	0x0802233c
 801b7f8:	08022350 	.word	0x08022350
 801b7fc:	200138f4 	.word	0x200138f4
 801b800:	08022370 	.word	0x08022370

0801b804 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801b804:	b580      	push	{r7, lr}
 801b806:	b08a      	sub	sp, #40	; 0x28
 801b808:	af00      	add	r7, sp, #0
 801b80a:	6078      	str	r0, [r7, #4]
 801b80c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801b80e:	2300      	movs	r3, #0
 801b810:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801b812:	2300      	movs	r3, #0
 801b814:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801b816:	2300      	movs	r3, #0
 801b818:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801b81a:	2300      	movs	r3, #0
 801b81c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801b81e:	2300      	movs	r3, #0
 801b820:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801b822:	4b28      	ldr	r3, [pc, #160]	; (801b8c4 <ip_reass_remove_oldest_datagram+0xc0>)
 801b824:	681b      	ldr	r3, [r3, #0]
 801b826:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801b828:	e030      	b.n	801b88c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801b82a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b82c:	695a      	ldr	r2, [r3, #20]
 801b82e:	687b      	ldr	r3, [r7, #4]
 801b830:	68db      	ldr	r3, [r3, #12]
 801b832:	429a      	cmp	r2, r3
 801b834:	d10c      	bne.n	801b850 <ip_reass_remove_oldest_datagram+0x4c>
 801b836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b838:	699a      	ldr	r2, [r3, #24]
 801b83a:	687b      	ldr	r3, [r7, #4]
 801b83c:	691b      	ldr	r3, [r3, #16]
 801b83e:	429a      	cmp	r2, r3
 801b840:	d106      	bne.n	801b850 <ip_reass_remove_oldest_datagram+0x4c>
 801b842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b844:	899a      	ldrh	r2, [r3, #12]
 801b846:	687b      	ldr	r3, [r7, #4]
 801b848:	889b      	ldrh	r3, [r3, #4]
 801b84a:	b29b      	uxth	r3, r3
 801b84c:	429a      	cmp	r2, r3
 801b84e:	d014      	beq.n	801b87a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801b850:	693b      	ldr	r3, [r7, #16]
 801b852:	3301      	adds	r3, #1
 801b854:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801b856:	6a3b      	ldr	r3, [r7, #32]
 801b858:	2b00      	cmp	r3, #0
 801b85a:	d104      	bne.n	801b866 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801b85c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b85e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801b860:	69fb      	ldr	r3, [r7, #28]
 801b862:	61bb      	str	r3, [r7, #24]
 801b864:	e009      	b.n	801b87a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801b866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b868:	7fda      	ldrb	r2, [r3, #31]
 801b86a:	6a3b      	ldr	r3, [r7, #32]
 801b86c:	7fdb      	ldrb	r3, [r3, #31]
 801b86e:	429a      	cmp	r2, r3
 801b870:	d803      	bhi.n	801b87a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801b872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b874:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801b876:	69fb      	ldr	r3, [r7, #28]
 801b878:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801b87a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b87c:	681b      	ldr	r3, [r3, #0]
 801b87e:	2b00      	cmp	r3, #0
 801b880:	d001      	beq.n	801b886 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801b882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b884:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801b886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b888:	681b      	ldr	r3, [r3, #0]
 801b88a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801b88c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b88e:	2b00      	cmp	r3, #0
 801b890:	d1cb      	bne.n	801b82a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801b892:	6a3b      	ldr	r3, [r7, #32]
 801b894:	2b00      	cmp	r3, #0
 801b896:	d008      	beq.n	801b8aa <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801b898:	69b9      	ldr	r1, [r7, #24]
 801b89a:	6a38      	ldr	r0, [r7, #32]
 801b89c:	f7ff ff0e 	bl	801b6bc <ip_reass_free_complete_datagram>
 801b8a0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801b8a2:	697a      	ldr	r2, [r7, #20]
 801b8a4:	68fb      	ldr	r3, [r7, #12]
 801b8a6:	4413      	add	r3, r2
 801b8a8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801b8aa:	697a      	ldr	r2, [r7, #20]
 801b8ac:	683b      	ldr	r3, [r7, #0]
 801b8ae:	429a      	cmp	r2, r3
 801b8b0:	da02      	bge.n	801b8b8 <ip_reass_remove_oldest_datagram+0xb4>
 801b8b2:	693b      	ldr	r3, [r7, #16]
 801b8b4:	2b01      	cmp	r3, #1
 801b8b6:	dcac      	bgt.n	801b812 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801b8b8:	697b      	ldr	r3, [r7, #20]
}
 801b8ba:	4618      	mov	r0, r3
 801b8bc:	3728      	adds	r7, #40	; 0x28
 801b8be:	46bd      	mov	sp, r7
 801b8c0:	bd80      	pop	{r7, pc}
 801b8c2:	bf00      	nop
 801b8c4:	200138f0 	.word	0x200138f0

0801b8c8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801b8c8:	b580      	push	{r7, lr}
 801b8ca:	b084      	sub	sp, #16
 801b8cc:	af00      	add	r7, sp, #0
 801b8ce:	6078      	str	r0, [r7, #4]
 801b8d0:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801b8d2:	2004      	movs	r0, #4
 801b8d4:	f7f5 fb22 	bl	8010f1c <memp_malloc>
 801b8d8:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801b8da:	68fb      	ldr	r3, [r7, #12]
 801b8dc:	2b00      	cmp	r3, #0
 801b8de:	d110      	bne.n	801b902 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801b8e0:	6839      	ldr	r1, [r7, #0]
 801b8e2:	6878      	ldr	r0, [r7, #4]
 801b8e4:	f7ff ff8e 	bl	801b804 <ip_reass_remove_oldest_datagram>
 801b8e8:	4602      	mov	r2, r0
 801b8ea:	683b      	ldr	r3, [r7, #0]
 801b8ec:	4293      	cmp	r3, r2
 801b8ee:	dc03      	bgt.n	801b8f8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801b8f0:	2004      	movs	r0, #4
 801b8f2:	f7f5 fb13 	bl	8010f1c <memp_malloc>
 801b8f6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801b8f8:	68fb      	ldr	r3, [r7, #12]
 801b8fa:	2b00      	cmp	r3, #0
 801b8fc:	d101      	bne.n	801b902 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801b8fe:	2300      	movs	r3, #0
 801b900:	e016      	b.n	801b930 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801b902:	2220      	movs	r2, #32
 801b904:	2100      	movs	r1, #0
 801b906:	68f8      	ldr	r0, [r7, #12]
 801b908:	f000 ff0e 	bl	801c728 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801b90c:	68fb      	ldr	r3, [r7, #12]
 801b90e:	220f      	movs	r2, #15
 801b910:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801b912:	4b09      	ldr	r3, [pc, #36]	; (801b938 <ip_reass_enqueue_new_datagram+0x70>)
 801b914:	681a      	ldr	r2, [r3, #0]
 801b916:	68fb      	ldr	r3, [r7, #12]
 801b918:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801b91a:	4a07      	ldr	r2, [pc, #28]	; (801b938 <ip_reass_enqueue_new_datagram+0x70>)
 801b91c:	68fb      	ldr	r3, [r7, #12]
 801b91e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801b920:	68fb      	ldr	r3, [r7, #12]
 801b922:	3308      	adds	r3, #8
 801b924:	2214      	movs	r2, #20
 801b926:	6879      	ldr	r1, [r7, #4]
 801b928:	4618      	mov	r0, r3
 801b92a:	f000 feef 	bl	801c70c <memcpy>
  return ipr;
 801b92e:	68fb      	ldr	r3, [r7, #12]
}
 801b930:	4618      	mov	r0, r3
 801b932:	3710      	adds	r7, #16
 801b934:	46bd      	mov	sp, r7
 801b936:	bd80      	pop	{r7, pc}
 801b938:	200138f0 	.word	0x200138f0

0801b93c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801b93c:	b580      	push	{r7, lr}
 801b93e:	b082      	sub	sp, #8
 801b940:	af00      	add	r7, sp, #0
 801b942:	6078      	str	r0, [r7, #4]
 801b944:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801b946:	4b10      	ldr	r3, [pc, #64]	; (801b988 <ip_reass_dequeue_datagram+0x4c>)
 801b948:	681b      	ldr	r3, [r3, #0]
 801b94a:	687a      	ldr	r2, [r7, #4]
 801b94c:	429a      	cmp	r2, r3
 801b94e:	d104      	bne.n	801b95a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801b950:	687b      	ldr	r3, [r7, #4]
 801b952:	681b      	ldr	r3, [r3, #0]
 801b954:	4a0c      	ldr	r2, [pc, #48]	; (801b988 <ip_reass_dequeue_datagram+0x4c>)
 801b956:	6013      	str	r3, [r2, #0]
 801b958:	e00d      	b.n	801b976 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801b95a:	683b      	ldr	r3, [r7, #0]
 801b95c:	2b00      	cmp	r3, #0
 801b95e:	d106      	bne.n	801b96e <ip_reass_dequeue_datagram+0x32>
 801b960:	4b0a      	ldr	r3, [pc, #40]	; (801b98c <ip_reass_dequeue_datagram+0x50>)
 801b962:	f240 1245 	movw	r2, #325	; 0x145
 801b966:	490a      	ldr	r1, [pc, #40]	; (801b990 <ip_reass_dequeue_datagram+0x54>)
 801b968:	480a      	ldr	r0, [pc, #40]	; (801b994 <ip_reass_dequeue_datagram+0x58>)
 801b96a:	f001 fd89 	bl	801d480 <iprintf>
    prev->next = ipr->next;
 801b96e:	687b      	ldr	r3, [r7, #4]
 801b970:	681a      	ldr	r2, [r3, #0]
 801b972:	683b      	ldr	r3, [r7, #0]
 801b974:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801b976:	6879      	ldr	r1, [r7, #4]
 801b978:	2004      	movs	r0, #4
 801b97a:	f7f5 fb21 	bl	8010fc0 <memp_free>
}
 801b97e:	bf00      	nop
 801b980:	3708      	adds	r7, #8
 801b982:	46bd      	mov	sp, r7
 801b984:	bd80      	pop	{r7, pc}
 801b986:	bf00      	nop
 801b988:	200138f0 	.word	0x200138f0
 801b98c:	080222cc 	.word	0x080222cc
 801b990:	08022394 	.word	0x08022394
 801b994:	08022314 	.word	0x08022314

0801b998 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801b998:	b580      	push	{r7, lr}
 801b99a:	b08c      	sub	sp, #48	; 0x30
 801b99c:	af00      	add	r7, sp, #0
 801b99e:	60f8      	str	r0, [r7, #12]
 801b9a0:	60b9      	str	r1, [r7, #8]
 801b9a2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801b9a4:	2300      	movs	r3, #0
 801b9a6:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801b9a8:	2301      	movs	r3, #1
 801b9aa:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801b9ac:	68bb      	ldr	r3, [r7, #8]
 801b9ae:	685b      	ldr	r3, [r3, #4]
 801b9b0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801b9b2:	69fb      	ldr	r3, [r7, #28]
 801b9b4:	885b      	ldrh	r3, [r3, #2]
 801b9b6:	b29b      	uxth	r3, r3
 801b9b8:	4618      	mov	r0, r3
 801b9ba:	f7f4 fdf9 	bl	80105b0 <lwip_htons>
 801b9be:	4603      	mov	r3, r0
 801b9c0:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801b9c2:	69fb      	ldr	r3, [r7, #28]
 801b9c4:	781b      	ldrb	r3, [r3, #0]
 801b9c6:	f003 030f 	and.w	r3, r3, #15
 801b9ca:	b2db      	uxtb	r3, r3
 801b9cc:	009b      	lsls	r3, r3, #2
 801b9ce:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801b9d0:	7e7b      	ldrb	r3, [r7, #25]
 801b9d2:	b29b      	uxth	r3, r3
 801b9d4:	8b7a      	ldrh	r2, [r7, #26]
 801b9d6:	429a      	cmp	r2, r3
 801b9d8:	d202      	bcs.n	801b9e0 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801b9da:	f04f 33ff 	mov.w	r3, #4294967295
 801b9de:	e135      	b.n	801bc4c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801b9e0:	7e7b      	ldrb	r3, [r7, #25]
 801b9e2:	b29b      	uxth	r3, r3
 801b9e4:	8b7a      	ldrh	r2, [r7, #26]
 801b9e6:	1ad3      	subs	r3, r2, r3
 801b9e8:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801b9ea:	69fb      	ldr	r3, [r7, #28]
 801b9ec:	88db      	ldrh	r3, [r3, #6]
 801b9ee:	b29b      	uxth	r3, r3
 801b9f0:	4618      	mov	r0, r3
 801b9f2:	f7f4 fddd 	bl	80105b0 <lwip_htons>
 801b9f6:	4603      	mov	r3, r0
 801b9f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b9fc:	b29b      	uxth	r3, r3
 801b9fe:	00db      	lsls	r3, r3, #3
 801ba00:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801ba02:	68bb      	ldr	r3, [r7, #8]
 801ba04:	685b      	ldr	r3, [r3, #4]
 801ba06:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801ba08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ba0a:	2200      	movs	r2, #0
 801ba0c:	701a      	strb	r2, [r3, #0]
 801ba0e:	2200      	movs	r2, #0
 801ba10:	705a      	strb	r2, [r3, #1]
 801ba12:	2200      	movs	r2, #0
 801ba14:	709a      	strb	r2, [r3, #2]
 801ba16:	2200      	movs	r2, #0
 801ba18:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801ba1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ba1c:	8afa      	ldrh	r2, [r7, #22]
 801ba1e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801ba20:	8afa      	ldrh	r2, [r7, #22]
 801ba22:	8b7b      	ldrh	r3, [r7, #26]
 801ba24:	4413      	add	r3, r2
 801ba26:	b29a      	uxth	r2, r3
 801ba28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ba2a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801ba2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ba2e:	88db      	ldrh	r3, [r3, #6]
 801ba30:	b29b      	uxth	r3, r3
 801ba32:	8afa      	ldrh	r2, [r7, #22]
 801ba34:	429a      	cmp	r2, r3
 801ba36:	d902      	bls.n	801ba3e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801ba38:	f04f 33ff 	mov.w	r3, #4294967295
 801ba3c:	e106      	b.n	801bc4c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801ba3e:	68fb      	ldr	r3, [r7, #12]
 801ba40:	685b      	ldr	r3, [r3, #4]
 801ba42:	627b      	str	r3, [r7, #36]	; 0x24
 801ba44:	e068      	b.n	801bb18 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801ba46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ba48:	685b      	ldr	r3, [r3, #4]
 801ba4a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801ba4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ba4e:	889b      	ldrh	r3, [r3, #4]
 801ba50:	b29a      	uxth	r2, r3
 801ba52:	693b      	ldr	r3, [r7, #16]
 801ba54:	889b      	ldrh	r3, [r3, #4]
 801ba56:	b29b      	uxth	r3, r3
 801ba58:	429a      	cmp	r2, r3
 801ba5a:	d235      	bcs.n	801bac8 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801ba5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ba5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ba60:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801ba62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ba64:	2b00      	cmp	r3, #0
 801ba66:	d020      	beq.n	801baaa <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801ba68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ba6a:	889b      	ldrh	r3, [r3, #4]
 801ba6c:	b29a      	uxth	r2, r3
 801ba6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ba70:	88db      	ldrh	r3, [r3, #6]
 801ba72:	b29b      	uxth	r3, r3
 801ba74:	429a      	cmp	r2, r3
 801ba76:	d307      	bcc.n	801ba88 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801ba78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ba7a:	88db      	ldrh	r3, [r3, #6]
 801ba7c:	b29a      	uxth	r2, r3
 801ba7e:	693b      	ldr	r3, [r7, #16]
 801ba80:	889b      	ldrh	r3, [r3, #4]
 801ba82:	b29b      	uxth	r3, r3
 801ba84:	429a      	cmp	r2, r3
 801ba86:	d902      	bls.n	801ba8e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801ba88:	f04f 33ff 	mov.w	r3, #4294967295
 801ba8c:	e0de      	b.n	801bc4c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801ba8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ba90:	68ba      	ldr	r2, [r7, #8]
 801ba92:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801ba94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ba96:	88db      	ldrh	r3, [r3, #6]
 801ba98:	b29a      	uxth	r2, r3
 801ba9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ba9c:	889b      	ldrh	r3, [r3, #4]
 801ba9e:	b29b      	uxth	r3, r3
 801baa0:	429a      	cmp	r2, r3
 801baa2:	d03d      	beq.n	801bb20 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801baa4:	2300      	movs	r3, #0
 801baa6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801baa8:	e03a      	b.n	801bb20 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801baaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801baac:	88db      	ldrh	r3, [r3, #6]
 801baae:	b29a      	uxth	r2, r3
 801bab0:	693b      	ldr	r3, [r7, #16]
 801bab2:	889b      	ldrh	r3, [r3, #4]
 801bab4:	b29b      	uxth	r3, r3
 801bab6:	429a      	cmp	r2, r3
 801bab8:	d902      	bls.n	801bac0 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801baba:	f04f 33ff 	mov.w	r3, #4294967295
 801babe:	e0c5      	b.n	801bc4c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801bac0:	68fb      	ldr	r3, [r7, #12]
 801bac2:	68ba      	ldr	r2, [r7, #8]
 801bac4:	605a      	str	r2, [r3, #4]
      break;
 801bac6:	e02b      	b.n	801bb20 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801bac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801baca:	889b      	ldrh	r3, [r3, #4]
 801bacc:	b29a      	uxth	r2, r3
 801bace:	693b      	ldr	r3, [r7, #16]
 801bad0:	889b      	ldrh	r3, [r3, #4]
 801bad2:	b29b      	uxth	r3, r3
 801bad4:	429a      	cmp	r2, r3
 801bad6:	d102      	bne.n	801bade <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801bad8:	f04f 33ff 	mov.w	r3, #4294967295
 801badc:	e0b6      	b.n	801bc4c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801bade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bae0:	889b      	ldrh	r3, [r3, #4]
 801bae2:	b29a      	uxth	r2, r3
 801bae4:	693b      	ldr	r3, [r7, #16]
 801bae6:	88db      	ldrh	r3, [r3, #6]
 801bae8:	b29b      	uxth	r3, r3
 801baea:	429a      	cmp	r2, r3
 801baec:	d202      	bcs.n	801baf4 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801baee:	f04f 33ff 	mov.w	r3, #4294967295
 801baf2:	e0ab      	b.n	801bc4c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801baf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801baf6:	2b00      	cmp	r3, #0
 801baf8:	d009      	beq.n	801bb0e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801bafa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bafc:	88db      	ldrh	r3, [r3, #6]
 801bafe:	b29a      	uxth	r2, r3
 801bb00:	693b      	ldr	r3, [r7, #16]
 801bb02:	889b      	ldrh	r3, [r3, #4]
 801bb04:	b29b      	uxth	r3, r3
 801bb06:	429a      	cmp	r2, r3
 801bb08:	d001      	beq.n	801bb0e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801bb0a:	2300      	movs	r3, #0
 801bb0c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801bb0e:	693b      	ldr	r3, [r7, #16]
 801bb10:	681b      	ldr	r3, [r3, #0]
 801bb12:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801bb14:	693b      	ldr	r3, [r7, #16]
 801bb16:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801bb18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bb1a:	2b00      	cmp	r3, #0
 801bb1c:	d193      	bne.n	801ba46 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801bb1e:	e000      	b.n	801bb22 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801bb20:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801bb22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bb24:	2b00      	cmp	r3, #0
 801bb26:	d12d      	bne.n	801bb84 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801bb28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bb2a:	2b00      	cmp	r3, #0
 801bb2c:	d01c      	beq.n	801bb68 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801bb2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bb30:	88db      	ldrh	r3, [r3, #6]
 801bb32:	b29a      	uxth	r2, r3
 801bb34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bb36:	889b      	ldrh	r3, [r3, #4]
 801bb38:	b29b      	uxth	r3, r3
 801bb3a:	429a      	cmp	r2, r3
 801bb3c:	d906      	bls.n	801bb4c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801bb3e:	4b45      	ldr	r3, [pc, #276]	; (801bc54 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801bb40:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801bb44:	4944      	ldr	r1, [pc, #272]	; (801bc58 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801bb46:	4845      	ldr	r0, [pc, #276]	; (801bc5c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801bb48:	f001 fc9a 	bl	801d480 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801bb4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bb4e:	68ba      	ldr	r2, [r7, #8]
 801bb50:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801bb52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bb54:	88db      	ldrh	r3, [r3, #6]
 801bb56:	b29a      	uxth	r2, r3
 801bb58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bb5a:	889b      	ldrh	r3, [r3, #4]
 801bb5c:	b29b      	uxth	r3, r3
 801bb5e:	429a      	cmp	r2, r3
 801bb60:	d010      	beq.n	801bb84 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801bb62:	2300      	movs	r3, #0
 801bb64:	623b      	str	r3, [r7, #32]
 801bb66:	e00d      	b.n	801bb84 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801bb68:	68fb      	ldr	r3, [r7, #12]
 801bb6a:	685b      	ldr	r3, [r3, #4]
 801bb6c:	2b00      	cmp	r3, #0
 801bb6e:	d006      	beq.n	801bb7e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801bb70:	4b38      	ldr	r3, [pc, #224]	; (801bc54 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801bb72:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801bb76:	493a      	ldr	r1, [pc, #232]	; (801bc60 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801bb78:	4838      	ldr	r0, [pc, #224]	; (801bc5c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801bb7a:	f001 fc81 	bl	801d480 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801bb7e:	68fb      	ldr	r3, [r7, #12]
 801bb80:	68ba      	ldr	r2, [r7, #8]
 801bb82:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801bb84:	687b      	ldr	r3, [r7, #4]
 801bb86:	2b00      	cmp	r3, #0
 801bb88:	d105      	bne.n	801bb96 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801bb8a:	68fb      	ldr	r3, [r7, #12]
 801bb8c:	7f9b      	ldrb	r3, [r3, #30]
 801bb8e:	f003 0301 	and.w	r3, r3, #1
 801bb92:	2b00      	cmp	r3, #0
 801bb94:	d059      	beq.n	801bc4a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801bb96:	6a3b      	ldr	r3, [r7, #32]
 801bb98:	2b00      	cmp	r3, #0
 801bb9a:	d04f      	beq.n	801bc3c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801bb9c:	68fb      	ldr	r3, [r7, #12]
 801bb9e:	685b      	ldr	r3, [r3, #4]
 801bba0:	2b00      	cmp	r3, #0
 801bba2:	d006      	beq.n	801bbb2 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801bba4:	68fb      	ldr	r3, [r7, #12]
 801bba6:	685b      	ldr	r3, [r3, #4]
 801bba8:	685b      	ldr	r3, [r3, #4]
 801bbaa:	889b      	ldrh	r3, [r3, #4]
 801bbac:	b29b      	uxth	r3, r3
 801bbae:	2b00      	cmp	r3, #0
 801bbb0:	d002      	beq.n	801bbb8 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801bbb2:	2300      	movs	r3, #0
 801bbb4:	623b      	str	r3, [r7, #32]
 801bbb6:	e041      	b.n	801bc3c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801bbb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bbba:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801bbbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bbbe:	681b      	ldr	r3, [r3, #0]
 801bbc0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801bbc2:	e012      	b.n	801bbea <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801bbc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bbc6:	685b      	ldr	r3, [r3, #4]
 801bbc8:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801bbca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bbcc:	88db      	ldrh	r3, [r3, #6]
 801bbce:	b29a      	uxth	r2, r3
 801bbd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bbd2:	889b      	ldrh	r3, [r3, #4]
 801bbd4:	b29b      	uxth	r3, r3
 801bbd6:	429a      	cmp	r2, r3
 801bbd8:	d002      	beq.n	801bbe0 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801bbda:	2300      	movs	r3, #0
 801bbdc:	623b      	str	r3, [r7, #32]
            break;
 801bbde:	e007      	b.n	801bbf0 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801bbe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bbe2:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801bbe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bbe6:	681b      	ldr	r3, [r3, #0]
 801bbe8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801bbea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bbec:	2b00      	cmp	r3, #0
 801bbee:	d1e9      	bne.n	801bbc4 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801bbf0:	6a3b      	ldr	r3, [r7, #32]
 801bbf2:	2b00      	cmp	r3, #0
 801bbf4:	d022      	beq.n	801bc3c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801bbf6:	68fb      	ldr	r3, [r7, #12]
 801bbf8:	685b      	ldr	r3, [r3, #4]
 801bbfa:	2b00      	cmp	r3, #0
 801bbfc:	d106      	bne.n	801bc0c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801bbfe:	4b15      	ldr	r3, [pc, #84]	; (801bc54 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801bc00:	f240 12df 	movw	r2, #479	; 0x1df
 801bc04:	4917      	ldr	r1, [pc, #92]	; (801bc64 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801bc06:	4815      	ldr	r0, [pc, #84]	; (801bc5c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801bc08:	f001 fc3a 	bl	801d480 <iprintf>
          LWIP_ASSERT("sanity check",
 801bc0c:	68fb      	ldr	r3, [r7, #12]
 801bc0e:	685b      	ldr	r3, [r3, #4]
 801bc10:	685b      	ldr	r3, [r3, #4]
 801bc12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801bc14:	429a      	cmp	r2, r3
 801bc16:	d106      	bne.n	801bc26 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801bc18:	4b0e      	ldr	r3, [pc, #56]	; (801bc54 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801bc1a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801bc1e:	4911      	ldr	r1, [pc, #68]	; (801bc64 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801bc20:	480e      	ldr	r0, [pc, #56]	; (801bc5c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801bc22:	f001 fc2d 	bl	801d480 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801bc26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bc28:	681b      	ldr	r3, [r3, #0]
 801bc2a:	2b00      	cmp	r3, #0
 801bc2c:	d006      	beq.n	801bc3c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801bc2e:	4b09      	ldr	r3, [pc, #36]	; (801bc54 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801bc30:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801bc34:	490c      	ldr	r1, [pc, #48]	; (801bc68 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801bc36:	4809      	ldr	r0, [pc, #36]	; (801bc5c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801bc38:	f001 fc22 	bl	801d480 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801bc3c:	6a3b      	ldr	r3, [r7, #32]
 801bc3e:	2b00      	cmp	r3, #0
 801bc40:	bf14      	ite	ne
 801bc42:	2301      	movne	r3, #1
 801bc44:	2300      	moveq	r3, #0
 801bc46:	b2db      	uxtb	r3, r3
 801bc48:	e000      	b.n	801bc4c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801bc4a:	2300      	movs	r3, #0
}
 801bc4c:	4618      	mov	r0, r3
 801bc4e:	3730      	adds	r7, #48	; 0x30
 801bc50:	46bd      	mov	sp, r7
 801bc52:	bd80      	pop	{r7, pc}
 801bc54:	080222cc 	.word	0x080222cc
 801bc58:	080223b0 	.word	0x080223b0
 801bc5c:	08022314 	.word	0x08022314
 801bc60:	080223d0 	.word	0x080223d0
 801bc64:	08022408 	.word	0x08022408
 801bc68:	08022418 	.word	0x08022418

0801bc6c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801bc6c:	b580      	push	{r7, lr}
 801bc6e:	b08e      	sub	sp, #56	; 0x38
 801bc70:	af00      	add	r7, sp, #0
 801bc72:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801bc74:	687b      	ldr	r3, [r7, #4]
 801bc76:	685b      	ldr	r3, [r3, #4]
 801bc78:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801bc7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bc7c:	781b      	ldrb	r3, [r3, #0]
 801bc7e:	f003 030f 	and.w	r3, r3, #15
 801bc82:	b2db      	uxtb	r3, r3
 801bc84:	009b      	lsls	r3, r3, #2
 801bc86:	b2db      	uxtb	r3, r3
 801bc88:	2b14      	cmp	r3, #20
 801bc8a:	f040 8171 	bne.w	801bf70 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801bc8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bc90:	88db      	ldrh	r3, [r3, #6]
 801bc92:	b29b      	uxth	r3, r3
 801bc94:	4618      	mov	r0, r3
 801bc96:	f7f4 fc8b 	bl	80105b0 <lwip_htons>
 801bc9a:	4603      	mov	r3, r0
 801bc9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801bca0:	b29b      	uxth	r3, r3
 801bca2:	00db      	lsls	r3, r3, #3
 801bca4:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801bca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bca8:	885b      	ldrh	r3, [r3, #2]
 801bcaa:	b29b      	uxth	r3, r3
 801bcac:	4618      	mov	r0, r3
 801bcae:	f7f4 fc7f 	bl	80105b0 <lwip_htons>
 801bcb2:	4603      	mov	r3, r0
 801bcb4:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801bcb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bcb8:	781b      	ldrb	r3, [r3, #0]
 801bcba:	f003 030f 	and.w	r3, r3, #15
 801bcbe:	b2db      	uxtb	r3, r3
 801bcc0:	009b      	lsls	r3, r3, #2
 801bcc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801bcc6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801bcca:	b29b      	uxth	r3, r3
 801bccc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801bcce:	429a      	cmp	r2, r3
 801bcd0:	f0c0 8150 	bcc.w	801bf74 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801bcd4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801bcd8:	b29b      	uxth	r3, r3
 801bcda:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801bcdc:	1ad3      	subs	r3, r2, r3
 801bcde:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801bce0:	6878      	ldr	r0, [r7, #4]
 801bce2:	f7f6 f8ab 	bl	8011e3c <pbuf_clen>
 801bce6:	4603      	mov	r3, r0
 801bce8:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801bcea:	4b8c      	ldr	r3, [pc, #560]	; (801bf1c <ip4_reass+0x2b0>)
 801bcec:	881b      	ldrh	r3, [r3, #0]
 801bcee:	461a      	mov	r2, r3
 801bcf0:	8c3b      	ldrh	r3, [r7, #32]
 801bcf2:	4413      	add	r3, r2
 801bcf4:	2b0a      	cmp	r3, #10
 801bcf6:	dd10      	ble.n	801bd1a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801bcf8:	8c3b      	ldrh	r3, [r7, #32]
 801bcfa:	4619      	mov	r1, r3
 801bcfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801bcfe:	f7ff fd81 	bl	801b804 <ip_reass_remove_oldest_datagram>
 801bd02:	4603      	mov	r3, r0
 801bd04:	2b00      	cmp	r3, #0
 801bd06:	f000 8137 	beq.w	801bf78 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801bd0a:	4b84      	ldr	r3, [pc, #528]	; (801bf1c <ip4_reass+0x2b0>)
 801bd0c:	881b      	ldrh	r3, [r3, #0]
 801bd0e:	461a      	mov	r2, r3
 801bd10:	8c3b      	ldrh	r3, [r7, #32]
 801bd12:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801bd14:	2b0a      	cmp	r3, #10
 801bd16:	f300 812f 	bgt.w	801bf78 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801bd1a:	4b81      	ldr	r3, [pc, #516]	; (801bf20 <ip4_reass+0x2b4>)
 801bd1c:	681b      	ldr	r3, [r3, #0]
 801bd1e:	633b      	str	r3, [r7, #48]	; 0x30
 801bd20:	e015      	b.n	801bd4e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801bd22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bd24:	695a      	ldr	r2, [r3, #20]
 801bd26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bd28:	68db      	ldr	r3, [r3, #12]
 801bd2a:	429a      	cmp	r2, r3
 801bd2c:	d10c      	bne.n	801bd48 <ip4_reass+0xdc>
 801bd2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bd30:	699a      	ldr	r2, [r3, #24]
 801bd32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bd34:	691b      	ldr	r3, [r3, #16]
 801bd36:	429a      	cmp	r2, r3
 801bd38:	d106      	bne.n	801bd48 <ip4_reass+0xdc>
 801bd3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bd3c:	899a      	ldrh	r2, [r3, #12]
 801bd3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bd40:	889b      	ldrh	r3, [r3, #4]
 801bd42:	b29b      	uxth	r3, r3
 801bd44:	429a      	cmp	r2, r3
 801bd46:	d006      	beq.n	801bd56 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801bd48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bd4a:	681b      	ldr	r3, [r3, #0]
 801bd4c:	633b      	str	r3, [r7, #48]	; 0x30
 801bd4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bd50:	2b00      	cmp	r3, #0
 801bd52:	d1e6      	bne.n	801bd22 <ip4_reass+0xb6>
 801bd54:	e000      	b.n	801bd58 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801bd56:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801bd58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bd5a:	2b00      	cmp	r3, #0
 801bd5c:	d109      	bne.n	801bd72 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801bd5e:	8c3b      	ldrh	r3, [r7, #32]
 801bd60:	4619      	mov	r1, r3
 801bd62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801bd64:	f7ff fdb0 	bl	801b8c8 <ip_reass_enqueue_new_datagram>
 801bd68:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801bd6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bd6c:	2b00      	cmp	r3, #0
 801bd6e:	d11c      	bne.n	801bdaa <ip4_reass+0x13e>
      goto nullreturn;
 801bd70:	e105      	b.n	801bf7e <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801bd72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bd74:	88db      	ldrh	r3, [r3, #6]
 801bd76:	b29b      	uxth	r3, r3
 801bd78:	4618      	mov	r0, r3
 801bd7a:	f7f4 fc19 	bl	80105b0 <lwip_htons>
 801bd7e:	4603      	mov	r3, r0
 801bd80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801bd84:	2b00      	cmp	r3, #0
 801bd86:	d110      	bne.n	801bdaa <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801bd88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bd8a:	89db      	ldrh	r3, [r3, #14]
 801bd8c:	4618      	mov	r0, r3
 801bd8e:	f7f4 fc0f 	bl	80105b0 <lwip_htons>
 801bd92:	4603      	mov	r3, r0
 801bd94:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801bd98:	2b00      	cmp	r3, #0
 801bd9a:	d006      	beq.n	801bdaa <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801bd9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bd9e:	3308      	adds	r3, #8
 801bda0:	2214      	movs	r2, #20
 801bda2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801bda4:	4618      	mov	r0, r3
 801bda6:	f000 fcb1 	bl	801c70c <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801bdaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bdac:	88db      	ldrh	r3, [r3, #6]
 801bdae:	b29b      	uxth	r3, r3
 801bdb0:	f003 0320 	and.w	r3, r3, #32
 801bdb4:	2b00      	cmp	r3, #0
 801bdb6:	bf0c      	ite	eq
 801bdb8:	2301      	moveq	r3, #1
 801bdba:	2300      	movne	r3, #0
 801bdbc:	b2db      	uxtb	r3, r3
 801bdbe:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801bdc0:	69fb      	ldr	r3, [r7, #28]
 801bdc2:	2b00      	cmp	r3, #0
 801bdc4:	d00e      	beq.n	801bde4 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801bdc6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801bdc8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801bdca:	4413      	add	r3, r2
 801bdcc:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801bdce:	8b7a      	ldrh	r2, [r7, #26]
 801bdd0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801bdd2:	429a      	cmp	r2, r3
 801bdd4:	f0c0 80a0 	bcc.w	801bf18 <ip4_reass+0x2ac>
 801bdd8:	8b7b      	ldrh	r3, [r7, #26]
 801bdda:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801bdde:	4293      	cmp	r3, r2
 801bde0:	f200 809a 	bhi.w	801bf18 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801bde4:	69fa      	ldr	r2, [r7, #28]
 801bde6:	6879      	ldr	r1, [r7, #4]
 801bde8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801bdea:	f7ff fdd5 	bl	801b998 <ip_reass_chain_frag_into_datagram_and_validate>
 801bdee:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801bdf0:	697b      	ldr	r3, [r7, #20]
 801bdf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bdf6:	f000 809b 	beq.w	801bf30 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801bdfa:	4b48      	ldr	r3, [pc, #288]	; (801bf1c <ip4_reass+0x2b0>)
 801bdfc:	881a      	ldrh	r2, [r3, #0]
 801bdfe:	8c3b      	ldrh	r3, [r7, #32]
 801be00:	4413      	add	r3, r2
 801be02:	b29a      	uxth	r2, r3
 801be04:	4b45      	ldr	r3, [pc, #276]	; (801bf1c <ip4_reass+0x2b0>)
 801be06:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801be08:	69fb      	ldr	r3, [r7, #28]
 801be0a:	2b00      	cmp	r3, #0
 801be0c:	d00d      	beq.n	801be2a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801be0e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801be10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801be12:	4413      	add	r3, r2
 801be14:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801be16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801be18:	8a7a      	ldrh	r2, [r7, #18]
 801be1a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801be1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801be1e:	7f9b      	ldrb	r3, [r3, #30]
 801be20:	f043 0301 	orr.w	r3, r3, #1
 801be24:	b2da      	uxtb	r2, r3
 801be26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801be28:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801be2a:	697b      	ldr	r3, [r7, #20]
 801be2c:	2b01      	cmp	r3, #1
 801be2e:	d171      	bne.n	801bf14 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801be30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801be32:	8b9b      	ldrh	r3, [r3, #28]
 801be34:	3314      	adds	r3, #20
 801be36:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801be38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801be3a:	685b      	ldr	r3, [r3, #4]
 801be3c:	685b      	ldr	r3, [r3, #4]
 801be3e:	681b      	ldr	r3, [r3, #0]
 801be40:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801be42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801be44:	685b      	ldr	r3, [r3, #4]
 801be46:	685b      	ldr	r3, [r3, #4]
 801be48:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801be4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801be4c:	3308      	adds	r3, #8
 801be4e:	2214      	movs	r2, #20
 801be50:	4619      	mov	r1, r3
 801be52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801be54:	f000 fc5a 	bl	801c70c <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801be58:	8a3b      	ldrh	r3, [r7, #16]
 801be5a:	4618      	mov	r0, r3
 801be5c:	f7f4 fba8 	bl	80105b0 <lwip_htons>
 801be60:	4603      	mov	r3, r0
 801be62:	461a      	mov	r2, r3
 801be64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801be66:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801be68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801be6a:	2200      	movs	r2, #0
 801be6c:	719a      	strb	r2, [r3, #6]
 801be6e:	2200      	movs	r2, #0
 801be70:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801be72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801be74:	2200      	movs	r2, #0
 801be76:	729a      	strb	r2, [r3, #10]
 801be78:	2200      	movs	r2, #0
 801be7a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801be7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801be7e:	685b      	ldr	r3, [r3, #4]
 801be80:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801be82:	e00d      	b.n	801bea0 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801be84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801be86:	685b      	ldr	r3, [r3, #4]
 801be88:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801be8a:	2114      	movs	r1, #20
 801be8c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801be8e:	f7f5 fec1 	bl	8011c14 <pbuf_remove_header>
      pbuf_cat(p, r);
 801be92:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801be94:	6878      	ldr	r0, [r7, #4]
 801be96:	f7f6 f811 	bl	8011ebc <pbuf_cat>
      r = iprh->next_pbuf;
 801be9a:	68fb      	ldr	r3, [r7, #12]
 801be9c:	681b      	ldr	r3, [r3, #0]
 801be9e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801bea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bea2:	2b00      	cmp	r3, #0
 801bea4:	d1ee      	bne.n	801be84 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801bea6:	4b1e      	ldr	r3, [pc, #120]	; (801bf20 <ip4_reass+0x2b4>)
 801bea8:	681b      	ldr	r3, [r3, #0]
 801beaa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801beac:	429a      	cmp	r2, r3
 801beae:	d102      	bne.n	801beb6 <ip4_reass+0x24a>
      ipr_prev = NULL;
 801beb0:	2300      	movs	r3, #0
 801beb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 801beb4:	e010      	b.n	801bed8 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801beb6:	4b1a      	ldr	r3, [pc, #104]	; (801bf20 <ip4_reass+0x2b4>)
 801beb8:	681b      	ldr	r3, [r3, #0]
 801beba:	62fb      	str	r3, [r7, #44]	; 0x2c
 801bebc:	e007      	b.n	801bece <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801bebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bec0:	681b      	ldr	r3, [r3, #0]
 801bec2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801bec4:	429a      	cmp	r2, r3
 801bec6:	d006      	beq.n	801bed6 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801bec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801beca:	681b      	ldr	r3, [r3, #0]
 801becc:	62fb      	str	r3, [r7, #44]	; 0x2c
 801bece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bed0:	2b00      	cmp	r3, #0
 801bed2:	d1f4      	bne.n	801bebe <ip4_reass+0x252>
 801bed4:	e000      	b.n	801bed8 <ip4_reass+0x26c>
          break;
 801bed6:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801bed8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801beda:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801bedc:	f7ff fd2e 	bl	801b93c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801bee0:	6878      	ldr	r0, [r7, #4]
 801bee2:	f7f5 ffab 	bl	8011e3c <pbuf_clen>
 801bee6:	4603      	mov	r3, r0
 801bee8:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801beea:	4b0c      	ldr	r3, [pc, #48]	; (801bf1c <ip4_reass+0x2b0>)
 801beec:	881b      	ldrh	r3, [r3, #0]
 801beee:	8c3a      	ldrh	r2, [r7, #32]
 801bef0:	429a      	cmp	r2, r3
 801bef2:	d906      	bls.n	801bf02 <ip4_reass+0x296>
 801bef4:	4b0b      	ldr	r3, [pc, #44]	; (801bf24 <ip4_reass+0x2b8>)
 801bef6:	f240 229b 	movw	r2, #667	; 0x29b
 801befa:	490b      	ldr	r1, [pc, #44]	; (801bf28 <ip4_reass+0x2bc>)
 801befc:	480b      	ldr	r0, [pc, #44]	; (801bf2c <ip4_reass+0x2c0>)
 801befe:	f001 fabf 	bl	801d480 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801bf02:	4b06      	ldr	r3, [pc, #24]	; (801bf1c <ip4_reass+0x2b0>)
 801bf04:	881a      	ldrh	r2, [r3, #0]
 801bf06:	8c3b      	ldrh	r3, [r7, #32]
 801bf08:	1ad3      	subs	r3, r2, r3
 801bf0a:	b29a      	uxth	r2, r3
 801bf0c:	4b03      	ldr	r3, [pc, #12]	; (801bf1c <ip4_reass+0x2b0>)
 801bf0e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801bf10:	687b      	ldr	r3, [r7, #4]
 801bf12:	e038      	b.n	801bf86 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801bf14:	2300      	movs	r3, #0
 801bf16:	e036      	b.n	801bf86 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801bf18:	bf00      	nop
 801bf1a:	e00a      	b.n	801bf32 <ip4_reass+0x2c6>
 801bf1c:	200138f4 	.word	0x200138f4
 801bf20:	200138f0 	.word	0x200138f0
 801bf24:	080222cc 	.word	0x080222cc
 801bf28:	0802243c 	.word	0x0802243c
 801bf2c:	08022314 	.word	0x08022314
    goto nullreturn_ipr;
 801bf30:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801bf32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bf34:	2b00      	cmp	r3, #0
 801bf36:	d106      	bne.n	801bf46 <ip4_reass+0x2da>
 801bf38:	4b15      	ldr	r3, [pc, #84]	; (801bf90 <ip4_reass+0x324>)
 801bf3a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801bf3e:	4915      	ldr	r1, [pc, #84]	; (801bf94 <ip4_reass+0x328>)
 801bf40:	4815      	ldr	r0, [pc, #84]	; (801bf98 <ip4_reass+0x32c>)
 801bf42:	f001 fa9d 	bl	801d480 <iprintf>
  if (ipr->p == NULL) {
 801bf46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bf48:	685b      	ldr	r3, [r3, #4]
 801bf4a:	2b00      	cmp	r3, #0
 801bf4c:	d116      	bne.n	801bf7c <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801bf4e:	4b13      	ldr	r3, [pc, #76]	; (801bf9c <ip4_reass+0x330>)
 801bf50:	681b      	ldr	r3, [r3, #0]
 801bf52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801bf54:	429a      	cmp	r2, r3
 801bf56:	d006      	beq.n	801bf66 <ip4_reass+0x2fa>
 801bf58:	4b0d      	ldr	r3, [pc, #52]	; (801bf90 <ip4_reass+0x324>)
 801bf5a:	f240 22ab 	movw	r2, #683	; 0x2ab
 801bf5e:	4910      	ldr	r1, [pc, #64]	; (801bfa0 <ip4_reass+0x334>)
 801bf60:	480d      	ldr	r0, [pc, #52]	; (801bf98 <ip4_reass+0x32c>)
 801bf62:	f001 fa8d 	bl	801d480 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801bf66:	2100      	movs	r1, #0
 801bf68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801bf6a:	f7ff fce7 	bl	801b93c <ip_reass_dequeue_datagram>
 801bf6e:	e006      	b.n	801bf7e <ip4_reass+0x312>
    goto nullreturn;
 801bf70:	bf00      	nop
 801bf72:	e004      	b.n	801bf7e <ip4_reass+0x312>
    goto nullreturn;
 801bf74:	bf00      	nop
 801bf76:	e002      	b.n	801bf7e <ip4_reass+0x312>
      goto nullreturn;
 801bf78:	bf00      	nop
 801bf7a:	e000      	b.n	801bf7e <ip4_reass+0x312>
  }

nullreturn:
 801bf7c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801bf7e:	6878      	ldr	r0, [r7, #4]
 801bf80:	f7f5 fece 	bl	8011d20 <pbuf_free>
  return NULL;
 801bf84:	2300      	movs	r3, #0
}
 801bf86:	4618      	mov	r0, r3
 801bf88:	3738      	adds	r7, #56	; 0x38
 801bf8a:	46bd      	mov	sp, r7
 801bf8c:	bd80      	pop	{r7, pc}
 801bf8e:	bf00      	nop
 801bf90:	080222cc 	.word	0x080222cc
 801bf94:	08022458 	.word	0x08022458
 801bf98:	08022314 	.word	0x08022314
 801bf9c:	200138f0 	.word	0x200138f0
 801bfa0:	08022464 	.word	0x08022464

0801bfa4 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801bfa4:	b580      	push	{r7, lr}
 801bfa6:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801bfa8:	2005      	movs	r0, #5
 801bfaa:	f7f4 ffb7 	bl	8010f1c <memp_malloc>
 801bfae:	4603      	mov	r3, r0
}
 801bfb0:	4618      	mov	r0, r3
 801bfb2:	bd80      	pop	{r7, pc}

0801bfb4 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801bfb4:	b580      	push	{r7, lr}
 801bfb6:	b082      	sub	sp, #8
 801bfb8:	af00      	add	r7, sp, #0
 801bfba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801bfbc:	687b      	ldr	r3, [r7, #4]
 801bfbe:	2b00      	cmp	r3, #0
 801bfc0:	d106      	bne.n	801bfd0 <ip_frag_free_pbuf_custom_ref+0x1c>
 801bfc2:	4b07      	ldr	r3, [pc, #28]	; (801bfe0 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801bfc4:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801bfc8:	4906      	ldr	r1, [pc, #24]	; (801bfe4 <ip_frag_free_pbuf_custom_ref+0x30>)
 801bfca:	4807      	ldr	r0, [pc, #28]	; (801bfe8 <ip_frag_free_pbuf_custom_ref+0x34>)
 801bfcc:	f001 fa58 	bl	801d480 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801bfd0:	6879      	ldr	r1, [r7, #4]
 801bfd2:	2005      	movs	r0, #5
 801bfd4:	f7f4 fff4 	bl	8010fc0 <memp_free>
}
 801bfd8:	bf00      	nop
 801bfda:	3708      	adds	r7, #8
 801bfdc:	46bd      	mov	sp, r7
 801bfde:	bd80      	pop	{r7, pc}
 801bfe0:	080222cc 	.word	0x080222cc
 801bfe4:	08022484 	.word	0x08022484
 801bfe8:	08022314 	.word	0x08022314

0801bfec <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801bfec:	b580      	push	{r7, lr}
 801bfee:	b084      	sub	sp, #16
 801bff0:	af00      	add	r7, sp, #0
 801bff2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801bff4:	687b      	ldr	r3, [r7, #4]
 801bff6:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801bff8:	68fb      	ldr	r3, [r7, #12]
 801bffa:	2b00      	cmp	r3, #0
 801bffc:	d106      	bne.n	801c00c <ipfrag_free_pbuf_custom+0x20>
 801bffe:	4b11      	ldr	r3, [pc, #68]	; (801c044 <ipfrag_free_pbuf_custom+0x58>)
 801c000:	f240 22ce 	movw	r2, #718	; 0x2ce
 801c004:	4910      	ldr	r1, [pc, #64]	; (801c048 <ipfrag_free_pbuf_custom+0x5c>)
 801c006:	4811      	ldr	r0, [pc, #68]	; (801c04c <ipfrag_free_pbuf_custom+0x60>)
 801c008:	f001 fa3a 	bl	801d480 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801c00c:	68fa      	ldr	r2, [r7, #12]
 801c00e:	687b      	ldr	r3, [r7, #4]
 801c010:	429a      	cmp	r2, r3
 801c012:	d006      	beq.n	801c022 <ipfrag_free_pbuf_custom+0x36>
 801c014:	4b0b      	ldr	r3, [pc, #44]	; (801c044 <ipfrag_free_pbuf_custom+0x58>)
 801c016:	f240 22cf 	movw	r2, #719	; 0x2cf
 801c01a:	490d      	ldr	r1, [pc, #52]	; (801c050 <ipfrag_free_pbuf_custom+0x64>)
 801c01c:	480b      	ldr	r0, [pc, #44]	; (801c04c <ipfrag_free_pbuf_custom+0x60>)
 801c01e:	f001 fa2f 	bl	801d480 <iprintf>
  if (pcr->original != NULL) {
 801c022:	68fb      	ldr	r3, [r7, #12]
 801c024:	695b      	ldr	r3, [r3, #20]
 801c026:	2b00      	cmp	r3, #0
 801c028:	d004      	beq.n	801c034 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801c02a:	68fb      	ldr	r3, [r7, #12]
 801c02c:	695b      	ldr	r3, [r3, #20]
 801c02e:	4618      	mov	r0, r3
 801c030:	f7f5 fe76 	bl	8011d20 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801c034:	68f8      	ldr	r0, [r7, #12]
 801c036:	f7ff ffbd 	bl	801bfb4 <ip_frag_free_pbuf_custom_ref>
}
 801c03a:	bf00      	nop
 801c03c:	3710      	adds	r7, #16
 801c03e:	46bd      	mov	sp, r7
 801c040:	bd80      	pop	{r7, pc}
 801c042:	bf00      	nop
 801c044:	080222cc 	.word	0x080222cc
 801c048:	08022490 	.word	0x08022490
 801c04c:	08022314 	.word	0x08022314
 801c050:	0802249c 	.word	0x0802249c

0801c054 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801c054:	b580      	push	{r7, lr}
 801c056:	b094      	sub	sp, #80	; 0x50
 801c058:	af02      	add	r7, sp, #8
 801c05a:	60f8      	str	r0, [r7, #12]
 801c05c:	60b9      	str	r1, [r7, #8]
 801c05e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801c060:	2300      	movs	r3, #0
 801c062:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801c066:	68bb      	ldr	r3, [r7, #8]
 801c068:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801c06a:	3b14      	subs	r3, #20
 801c06c:	2b00      	cmp	r3, #0
 801c06e:	da00      	bge.n	801c072 <ip4_frag+0x1e>
 801c070:	3307      	adds	r3, #7
 801c072:	10db      	asrs	r3, r3, #3
 801c074:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801c076:	2314      	movs	r3, #20
 801c078:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801c07a:	68fb      	ldr	r3, [r7, #12]
 801c07c:	685b      	ldr	r3, [r3, #4]
 801c07e:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801c080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c082:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801c084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c086:	781b      	ldrb	r3, [r3, #0]
 801c088:	f003 030f 	and.w	r3, r3, #15
 801c08c:	b2db      	uxtb	r3, r3
 801c08e:	009b      	lsls	r3, r3, #2
 801c090:	b2db      	uxtb	r3, r3
 801c092:	2b14      	cmp	r3, #20
 801c094:	d002      	beq.n	801c09c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801c096:	f06f 0305 	mvn.w	r3, #5
 801c09a:	e110      	b.n	801c2be <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801c09c:	68fb      	ldr	r3, [r7, #12]
 801c09e:	895b      	ldrh	r3, [r3, #10]
 801c0a0:	2b13      	cmp	r3, #19
 801c0a2:	d809      	bhi.n	801c0b8 <ip4_frag+0x64>
 801c0a4:	4b88      	ldr	r3, [pc, #544]	; (801c2c8 <ip4_frag+0x274>)
 801c0a6:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801c0aa:	4988      	ldr	r1, [pc, #544]	; (801c2cc <ip4_frag+0x278>)
 801c0ac:	4888      	ldr	r0, [pc, #544]	; (801c2d0 <ip4_frag+0x27c>)
 801c0ae:	f001 f9e7 	bl	801d480 <iprintf>
 801c0b2:	f06f 0305 	mvn.w	r3, #5
 801c0b6:	e102      	b.n	801c2be <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801c0b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c0ba:	88db      	ldrh	r3, [r3, #6]
 801c0bc:	b29b      	uxth	r3, r3
 801c0be:	4618      	mov	r0, r3
 801c0c0:	f7f4 fa76 	bl	80105b0 <lwip_htons>
 801c0c4:	4603      	mov	r3, r0
 801c0c6:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801c0c8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801c0ca:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c0ce:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801c0d2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801c0d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801c0d8:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801c0da:	68fb      	ldr	r3, [r7, #12]
 801c0dc:	891b      	ldrh	r3, [r3, #8]
 801c0de:	3b14      	subs	r3, #20
 801c0e0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801c0e4:	e0e1      	b.n	801c2aa <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801c0e6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801c0e8:	00db      	lsls	r3, r3, #3
 801c0ea:	b29b      	uxth	r3, r3
 801c0ec:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801c0f0:	4293      	cmp	r3, r2
 801c0f2:	bf28      	it	cs
 801c0f4:	4613      	movcs	r3, r2
 801c0f6:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801c0f8:	f44f 7220 	mov.w	r2, #640	; 0x280
 801c0fc:	2114      	movs	r1, #20
 801c0fe:	200e      	movs	r0, #14
 801c100:	f7f5 fb2a 	bl	8011758 <pbuf_alloc>
 801c104:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801c106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c108:	2b00      	cmp	r3, #0
 801c10a:	f000 80d5 	beq.w	801c2b8 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801c10e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c110:	895b      	ldrh	r3, [r3, #10]
 801c112:	2b13      	cmp	r3, #19
 801c114:	d806      	bhi.n	801c124 <ip4_frag+0xd0>
 801c116:	4b6c      	ldr	r3, [pc, #432]	; (801c2c8 <ip4_frag+0x274>)
 801c118:	f44f 7249 	mov.w	r2, #804	; 0x324
 801c11c:	496d      	ldr	r1, [pc, #436]	; (801c2d4 <ip4_frag+0x280>)
 801c11e:	486c      	ldr	r0, [pc, #432]	; (801c2d0 <ip4_frag+0x27c>)
 801c120:	f001 f9ae 	bl	801d480 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801c124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c126:	685b      	ldr	r3, [r3, #4]
 801c128:	2214      	movs	r2, #20
 801c12a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801c12c:	4618      	mov	r0, r3
 801c12e:	f000 faed 	bl	801c70c <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801c132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c134:	685b      	ldr	r3, [r3, #4]
 801c136:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801c138:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801c13a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801c13e:	e064      	b.n	801c20a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801c140:	68fb      	ldr	r3, [r7, #12]
 801c142:	895a      	ldrh	r2, [r3, #10]
 801c144:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801c146:	1ad3      	subs	r3, r2, r3
 801c148:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801c14a:	68fb      	ldr	r3, [r7, #12]
 801c14c:	895b      	ldrh	r3, [r3, #10]
 801c14e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801c150:	429a      	cmp	r2, r3
 801c152:	d906      	bls.n	801c162 <ip4_frag+0x10e>
 801c154:	4b5c      	ldr	r3, [pc, #368]	; (801c2c8 <ip4_frag+0x274>)
 801c156:	f240 322d 	movw	r2, #813	; 0x32d
 801c15a:	495f      	ldr	r1, [pc, #380]	; (801c2d8 <ip4_frag+0x284>)
 801c15c:	485c      	ldr	r0, [pc, #368]	; (801c2d0 <ip4_frag+0x27c>)
 801c15e:	f001 f98f 	bl	801d480 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801c162:	8bfa      	ldrh	r2, [r7, #30]
 801c164:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801c168:	4293      	cmp	r3, r2
 801c16a:	bf28      	it	cs
 801c16c:	4613      	movcs	r3, r2
 801c16e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801c172:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801c176:	2b00      	cmp	r3, #0
 801c178:	d105      	bne.n	801c186 <ip4_frag+0x132>
        poff = 0;
 801c17a:	2300      	movs	r3, #0
 801c17c:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801c17e:	68fb      	ldr	r3, [r7, #12]
 801c180:	681b      	ldr	r3, [r3, #0]
 801c182:	60fb      	str	r3, [r7, #12]
        continue;
 801c184:	e041      	b.n	801c20a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801c186:	f7ff ff0d 	bl	801bfa4 <ip_frag_alloc_pbuf_custom_ref>
 801c18a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801c18c:	69bb      	ldr	r3, [r7, #24]
 801c18e:	2b00      	cmp	r3, #0
 801c190:	d103      	bne.n	801c19a <ip4_frag+0x146>
        pbuf_free(rambuf);
 801c192:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801c194:	f7f5 fdc4 	bl	8011d20 <pbuf_free>
        goto memerr;
 801c198:	e08f      	b.n	801c2ba <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801c19a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801c19c:	68fb      	ldr	r3, [r7, #12]
 801c19e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801c1a0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801c1a2:	4413      	add	r3, r2
 801c1a4:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801c1a8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801c1ac:	9201      	str	r2, [sp, #4]
 801c1ae:	9300      	str	r3, [sp, #0]
 801c1b0:	4603      	mov	r3, r0
 801c1b2:	2241      	movs	r2, #65	; 0x41
 801c1b4:	2000      	movs	r0, #0
 801c1b6:	f7f5 fbf9 	bl	80119ac <pbuf_alloced_custom>
 801c1ba:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801c1bc:	697b      	ldr	r3, [r7, #20]
 801c1be:	2b00      	cmp	r3, #0
 801c1c0:	d106      	bne.n	801c1d0 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801c1c2:	69b8      	ldr	r0, [r7, #24]
 801c1c4:	f7ff fef6 	bl	801bfb4 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801c1c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801c1ca:	f7f5 fda9 	bl	8011d20 <pbuf_free>
        goto memerr;
 801c1ce:	e074      	b.n	801c2ba <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801c1d0:	68f8      	ldr	r0, [r7, #12]
 801c1d2:	f7f5 fe4b 	bl	8011e6c <pbuf_ref>
      pcr->original = p;
 801c1d6:	69bb      	ldr	r3, [r7, #24]
 801c1d8:	68fa      	ldr	r2, [r7, #12]
 801c1da:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801c1dc:	69bb      	ldr	r3, [r7, #24]
 801c1de:	4a3f      	ldr	r2, [pc, #252]	; (801c2dc <ip4_frag+0x288>)
 801c1e0:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801c1e2:	6979      	ldr	r1, [r7, #20]
 801c1e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801c1e6:	f7f5 fe69 	bl	8011ebc <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801c1ea:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801c1ee:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801c1f2:	1ad3      	subs	r3, r2, r3
 801c1f4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801c1f8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801c1fc:	2b00      	cmp	r3, #0
 801c1fe:	d004      	beq.n	801c20a <ip4_frag+0x1b6>
        poff = 0;
 801c200:	2300      	movs	r3, #0
 801c202:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801c204:	68fb      	ldr	r3, [r7, #12]
 801c206:	681b      	ldr	r3, [r3, #0]
 801c208:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801c20a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801c20e:	2b00      	cmp	r3, #0
 801c210:	d196      	bne.n	801c140 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801c212:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801c214:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801c218:	4413      	add	r3, r2
 801c21a:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801c21c:	68bb      	ldr	r3, [r7, #8]
 801c21e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801c220:	f1a3 0213 	sub.w	r2, r3, #19
 801c224:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801c228:	429a      	cmp	r2, r3
 801c22a:	bfcc      	ite	gt
 801c22c:	2301      	movgt	r3, #1
 801c22e:	2300      	movle	r3, #0
 801c230:	b2db      	uxtb	r3, r3
 801c232:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801c234:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801c238:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c23c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801c23e:	6a3b      	ldr	r3, [r7, #32]
 801c240:	2b00      	cmp	r3, #0
 801c242:	d002      	beq.n	801c24a <ip4_frag+0x1f6>
 801c244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c246:	2b00      	cmp	r3, #0
 801c248:	d003      	beq.n	801c252 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801c24a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801c24c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801c250:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801c252:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801c254:	4618      	mov	r0, r3
 801c256:	f7f4 f9ab 	bl	80105b0 <lwip_htons>
 801c25a:	4603      	mov	r3, r0
 801c25c:	461a      	mov	r2, r3
 801c25e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c260:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801c262:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801c264:	3314      	adds	r3, #20
 801c266:	b29b      	uxth	r3, r3
 801c268:	4618      	mov	r0, r3
 801c26a:	f7f4 f9a1 	bl	80105b0 <lwip_htons>
 801c26e:	4603      	mov	r3, r0
 801c270:	461a      	mov	r2, r3
 801c272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c274:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801c276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c278:	2200      	movs	r2, #0
 801c27a:	729a      	strb	r2, [r3, #10]
 801c27c:	2200      	movs	r2, #0
 801c27e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801c280:	68bb      	ldr	r3, [r7, #8]
 801c282:	695b      	ldr	r3, [r3, #20]
 801c284:	687a      	ldr	r2, [r7, #4]
 801c286:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801c288:	68b8      	ldr	r0, [r7, #8]
 801c28a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801c28c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801c28e:	f7f5 fd47 	bl	8011d20 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801c292:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801c296:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801c298:	1ad3      	subs	r3, r2, r3
 801c29a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801c29e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801c2a2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801c2a4:	4413      	add	r3, r2
 801c2a6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801c2aa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801c2ae:	2b00      	cmp	r3, #0
 801c2b0:	f47f af19 	bne.w	801c0e6 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801c2b4:	2300      	movs	r3, #0
 801c2b6:	e002      	b.n	801c2be <ip4_frag+0x26a>
      goto memerr;
 801c2b8:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801c2ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 801c2be:	4618      	mov	r0, r3
 801c2c0:	3748      	adds	r7, #72	; 0x48
 801c2c2:	46bd      	mov	sp, r7
 801c2c4:	bd80      	pop	{r7, pc}
 801c2c6:	bf00      	nop
 801c2c8:	080222cc 	.word	0x080222cc
 801c2cc:	080224a8 	.word	0x080224a8
 801c2d0:	08022314 	.word	0x08022314
 801c2d4:	080224c4 	.word	0x080224c4
 801c2d8:	080224e4 	.word	0x080224e4
 801c2dc:	0801bfed 	.word	0x0801bfed

0801c2e0 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801c2e0:	b580      	push	{r7, lr}
 801c2e2:	b086      	sub	sp, #24
 801c2e4:	af00      	add	r7, sp, #0
 801c2e6:	6078      	str	r0, [r7, #4]
 801c2e8:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801c2ea:	230e      	movs	r3, #14
 801c2ec:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801c2ee:	687b      	ldr	r3, [r7, #4]
 801c2f0:	895b      	ldrh	r3, [r3, #10]
 801c2f2:	2b0e      	cmp	r3, #14
 801c2f4:	d96e      	bls.n	801c3d4 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801c2f6:	687b      	ldr	r3, [r7, #4]
 801c2f8:	7bdb      	ldrb	r3, [r3, #15]
 801c2fa:	2b00      	cmp	r3, #0
 801c2fc:	d106      	bne.n	801c30c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801c2fe:	683b      	ldr	r3, [r7, #0]
 801c300:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801c304:	3301      	adds	r3, #1
 801c306:	b2da      	uxtb	r2, r3
 801c308:	687b      	ldr	r3, [r7, #4]
 801c30a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801c30c:	687b      	ldr	r3, [r7, #4]
 801c30e:	685b      	ldr	r3, [r3, #4]
 801c310:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801c312:	693b      	ldr	r3, [r7, #16]
 801c314:	7b1a      	ldrb	r2, [r3, #12]
 801c316:	7b5b      	ldrb	r3, [r3, #13]
 801c318:	021b      	lsls	r3, r3, #8
 801c31a:	4313      	orrs	r3, r2
 801c31c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801c31e:	693b      	ldr	r3, [r7, #16]
 801c320:	781b      	ldrb	r3, [r3, #0]
 801c322:	f003 0301 	and.w	r3, r3, #1
 801c326:	2b00      	cmp	r3, #0
 801c328:	d023      	beq.n	801c372 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801c32a:	693b      	ldr	r3, [r7, #16]
 801c32c:	781b      	ldrb	r3, [r3, #0]
 801c32e:	2b01      	cmp	r3, #1
 801c330:	d10f      	bne.n	801c352 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801c332:	693b      	ldr	r3, [r7, #16]
 801c334:	785b      	ldrb	r3, [r3, #1]
 801c336:	2b00      	cmp	r3, #0
 801c338:	d11b      	bne.n	801c372 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801c33a:	693b      	ldr	r3, [r7, #16]
 801c33c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801c33e:	2b5e      	cmp	r3, #94	; 0x5e
 801c340:	d117      	bne.n	801c372 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801c342:	687b      	ldr	r3, [r7, #4]
 801c344:	7b5b      	ldrb	r3, [r3, #13]
 801c346:	f043 0310 	orr.w	r3, r3, #16
 801c34a:	b2da      	uxtb	r2, r3
 801c34c:	687b      	ldr	r3, [r7, #4]
 801c34e:	735a      	strb	r2, [r3, #13]
 801c350:	e00f      	b.n	801c372 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801c352:	693b      	ldr	r3, [r7, #16]
 801c354:	2206      	movs	r2, #6
 801c356:	4928      	ldr	r1, [pc, #160]	; (801c3f8 <ethernet_input+0x118>)
 801c358:	4618      	mov	r0, r3
 801c35a:	f000 f9c7 	bl	801c6ec <memcmp>
 801c35e:	4603      	mov	r3, r0
 801c360:	2b00      	cmp	r3, #0
 801c362:	d106      	bne.n	801c372 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801c364:	687b      	ldr	r3, [r7, #4]
 801c366:	7b5b      	ldrb	r3, [r3, #13]
 801c368:	f043 0308 	orr.w	r3, r3, #8
 801c36c:	b2da      	uxtb	r2, r3
 801c36e:	687b      	ldr	r3, [r7, #4]
 801c370:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801c372:	89fb      	ldrh	r3, [r7, #14]
 801c374:	2b08      	cmp	r3, #8
 801c376:	d003      	beq.n	801c380 <ethernet_input+0xa0>
 801c378:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801c37c:	d014      	beq.n	801c3a8 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801c37e:	e032      	b.n	801c3e6 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801c380:	683b      	ldr	r3, [r7, #0]
 801c382:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801c386:	f003 0308 	and.w	r3, r3, #8
 801c38a:	2b00      	cmp	r3, #0
 801c38c:	d024      	beq.n	801c3d8 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801c38e:	8afb      	ldrh	r3, [r7, #22]
 801c390:	4619      	mov	r1, r3
 801c392:	6878      	ldr	r0, [r7, #4]
 801c394:	f7f5 fc3e 	bl	8011c14 <pbuf_remove_header>
 801c398:	4603      	mov	r3, r0
 801c39a:	2b00      	cmp	r3, #0
 801c39c:	d11e      	bne.n	801c3dc <ethernet_input+0xfc>
        ip4_input(p, netif);
 801c39e:	6839      	ldr	r1, [r7, #0]
 801c3a0:	6878      	ldr	r0, [r7, #4]
 801c3a2:	f7fe ff03 	bl	801b1ac <ip4_input>
      break;
 801c3a6:	e013      	b.n	801c3d0 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801c3a8:	683b      	ldr	r3, [r7, #0]
 801c3aa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801c3ae:	f003 0308 	and.w	r3, r3, #8
 801c3b2:	2b00      	cmp	r3, #0
 801c3b4:	d014      	beq.n	801c3e0 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801c3b6:	8afb      	ldrh	r3, [r7, #22]
 801c3b8:	4619      	mov	r1, r3
 801c3ba:	6878      	ldr	r0, [r7, #4]
 801c3bc:	f7f5 fc2a 	bl	8011c14 <pbuf_remove_header>
 801c3c0:	4603      	mov	r3, r0
 801c3c2:	2b00      	cmp	r3, #0
 801c3c4:	d10e      	bne.n	801c3e4 <ethernet_input+0x104>
        etharp_input(p, netif);
 801c3c6:	6839      	ldr	r1, [r7, #0]
 801c3c8:	6878      	ldr	r0, [r7, #4]
 801c3ca:	f7fe f89f 	bl	801a50c <etharp_input>
      break;
 801c3ce:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801c3d0:	2300      	movs	r3, #0
 801c3d2:	e00c      	b.n	801c3ee <ethernet_input+0x10e>
    goto free_and_return;
 801c3d4:	bf00      	nop
 801c3d6:	e006      	b.n	801c3e6 <ethernet_input+0x106>
        goto free_and_return;
 801c3d8:	bf00      	nop
 801c3da:	e004      	b.n	801c3e6 <ethernet_input+0x106>
        goto free_and_return;
 801c3dc:	bf00      	nop
 801c3de:	e002      	b.n	801c3e6 <ethernet_input+0x106>
        goto free_and_return;
 801c3e0:	bf00      	nop
 801c3e2:	e000      	b.n	801c3e6 <ethernet_input+0x106>
        goto free_and_return;
 801c3e4:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801c3e6:	6878      	ldr	r0, [r7, #4]
 801c3e8:	f7f5 fc9a 	bl	8011d20 <pbuf_free>
  return ERR_OK;
 801c3ec:	2300      	movs	r3, #0
}
 801c3ee:	4618      	mov	r0, r3
 801c3f0:	3718      	adds	r7, #24
 801c3f2:	46bd      	mov	sp, r7
 801c3f4:	bd80      	pop	{r7, pc}
 801c3f6:	bf00      	nop
 801c3f8:	08022790 	.word	0x08022790

0801c3fc <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801c3fc:	b580      	push	{r7, lr}
 801c3fe:	b086      	sub	sp, #24
 801c400:	af00      	add	r7, sp, #0
 801c402:	60f8      	str	r0, [r7, #12]
 801c404:	60b9      	str	r1, [r7, #8]
 801c406:	607a      	str	r2, [r7, #4]
 801c408:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801c40a:	8c3b      	ldrh	r3, [r7, #32]
 801c40c:	4618      	mov	r0, r3
 801c40e:	f7f4 f8cf 	bl	80105b0 <lwip_htons>
 801c412:	4603      	mov	r3, r0
 801c414:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801c416:	210e      	movs	r1, #14
 801c418:	68b8      	ldr	r0, [r7, #8]
 801c41a:	f7f5 fbeb 	bl	8011bf4 <pbuf_add_header>
 801c41e:	4603      	mov	r3, r0
 801c420:	2b00      	cmp	r3, #0
 801c422:	d125      	bne.n	801c470 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801c424:	68bb      	ldr	r3, [r7, #8]
 801c426:	685b      	ldr	r3, [r3, #4]
 801c428:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801c42a:	693b      	ldr	r3, [r7, #16]
 801c42c:	8afa      	ldrh	r2, [r7, #22]
 801c42e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801c430:	693b      	ldr	r3, [r7, #16]
 801c432:	2206      	movs	r2, #6
 801c434:	6839      	ldr	r1, [r7, #0]
 801c436:	4618      	mov	r0, r3
 801c438:	f000 f968 	bl	801c70c <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801c43c:	693b      	ldr	r3, [r7, #16]
 801c43e:	3306      	adds	r3, #6
 801c440:	2206      	movs	r2, #6
 801c442:	6879      	ldr	r1, [r7, #4]
 801c444:	4618      	mov	r0, r3
 801c446:	f000 f961 	bl	801c70c <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801c44a:	68fb      	ldr	r3, [r7, #12]
 801c44c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801c450:	2b06      	cmp	r3, #6
 801c452:	d006      	beq.n	801c462 <ethernet_output+0x66>
 801c454:	4b0a      	ldr	r3, [pc, #40]	; (801c480 <ethernet_output+0x84>)
 801c456:	f44f 7299 	mov.w	r2, #306	; 0x132
 801c45a:	490a      	ldr	r1, [pc, #40]	; (801c484 <ethernet_output+0x88>)
 801c45c:	480a      	ldr	r0, [pc, #40]	; (801c488 <ethernet_output+0x8c>)
 801c45e:	f001 f80f 	bl	801d480 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801c462:	68fb      	ldr	r3, [r7, #12]
 801c464:	699b      	ldr	r3, [r3, #24]
 801c466:	68b9      	ldr	r1, [r7, #8]
 801c468:	68f8      	ldr	r0, [r7, #12]
 801c46a:	4798      	blx	r3
 801c46c:	4603      	mov	r3, r0
 801c46e:	e002      	b.n	801c476 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801c470:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801c472:	f06f 0301 	mvn.w	r3, #1
}
 801c476:	4618      	mov	r0, r3
 801c478:	3718      	adds	r7, #24
 801c47a:	46bd      	mov	sp, r7
 801c47c:	bd80      	pop	{r7, pc}
 801c47e:	bf00      	nop
 801c480:	080224f4 	.word	0x080224f4
 801c484:	0802252c 	.word	0x0802252c
 801c488:	08022560 	.word	0x08022560

0801c48c <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801c48c:	b580      	push	{r7, lr}
 801c48e:	b082      	sub	sp, #8
 801c490:	af00      	add	r7, sp, #0
 801c492:	6078      	str	r0, [r7, #4]
 801c494:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801c496:	683b      	ldr	r3, [r7, #0]
 801c498:	2200      	movs	r2, #0
 801c49a:	2104      	movs	r1, #4
 801c49c:	4618      	mov	r0, r3
 801c49e:	f7f0 fa29 	bl	800c8f4 <osMessageQueueNew>
 801c4a2:	4602      	mov	r2, r0
 801c4a4:	687b      	ldr	r3, [r7, #4]
 801c4a6:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801c4a8:	687b      	ldr	r3, [r7, #4]
 801c4aa:	681b      	ldr	r3, [r3, #0]
 801c4ac:	2b00      	cmp	r3, #0
 801c4ae:	d102      	bne.n	801c4b6 <sys_mbox_new+0x2a>
    return ERR_MEM;
 801c4b0:	f04f 33ff 	mov.w	r3, #4294967295
 801c4b4:	e000      	b.n	801c4b8 <sys_mbox_new+0x2c>

  return ERR_OK;
 801c4b6:	2300      	movs	r3, #0
}
 801c4b8:	4618      	mov	r0, r3
 801c4ba:	3708      	adds	r7, #8
 801c4bc:	46bd      	mov	sp, r7
 801c4be:	bd80      	pop	{r7, pc}

0801c4c0 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801c4c0:	b580      	push	{r7, lr}
 801c4c2:	b084      	sub	sp, #16
 801c4c4:	af00      	add	r7, sp, #0
 801c4c6:	6078      	str	r0, [r7, #4]
 801c4c8:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 801c4ca:	687b      	ldr	r3, [r7, #4]
 801c4cc:	6818      	ldr	r0, [r3, #0]
 801c4ce:	4639      	mov	r1, r7
 801c4d0:	2300      	movs	r3, #0
 801c4d2:	2200      	movs	r2, #0
 801c4d4:	f7f0 fa82 	bl	800c9dc <osMessageQueuePut>
 801c4d8:	4603      	mov	r3, r0
 801c4da:	2b00      	cmp	r3, #0
 801c4dc:	d102      	bne.n	801c4e4 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 801c4de:	2300      	movs	r3, #0
 801c4e0:	73fb      	strb	r3, [r7, #15]
 801c4e2:	e001      	b.n	801c4e8 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801c4e4:	23ff      	movs	r3, #255	; 0xff
 801c4e6:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801c4e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801c4ec:	4618      	mov	r0, r3
 801c4ee:	3710      	adds	r7, #16
 801c4f0:	46bd      	mov	sp, r7
 801c4f2:	bd80      	pop	{r7, pc}

0801c4f4 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801c4f4:	b580      	push	{r7, lr}
 801c4f6:	b086      	sub	sp, #24
 801c4f8:	af00      	add	r7, sp, #0
 801c4fa:	60f8      	str	r0, [r7, #12]
 801c4fc:	60b9      	str	r1, [r7, #8]
 801c4fe:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 801c500:	f7ef fefc 	bl	800c2fc <osKernelGetTickCount>
 801c504:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 801c506:	687b      	ldr	r3, [r7, #4]
 801c508:	2b00      	cmp	r3, #0
 801c50a:	d013      	beq.n	801c534 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 801c50c:	68fb      	ldr	r3, [r7, #12]
 801c50e:	6818      	ldr	r0, [r3, #0]
 801c510:	687b      	ldr	r3, [r7, #4]
 801c512:	2200      	movs	r2, #0
 801c514:	68b9      	ldr	r1, [r7, #8]
 801c516:	f7f0 fac1 	bl	800ca9c <osMessageQueueGet>
 801c51a:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 801c51c:	693b      	ldr	r3, [r7, #16]
 801c51e:	2b00      	cmp	r3, #0
 801c520:	d105      	bne.n	801c52e <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 801c522:	f7ef feeb 	bl	800c2fc <osKernelGetTickCount>
 801c526:	4602      	mov	r2, r0
 801c528:	697b      	ldr	r3, [r7, #20]
 801c52a:	1ad3      	subs	r3, r2, r3
 801c52c:	e00f      	b.n	801c54e <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801c52e:	f04f 33ff 	mov.w	r3, #4294967295
 801c532:	e00c      	b.n	801c54e <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 801c534:	68fb      	ldr	r3, [r7, #12]
 801c536:	6818      	ldr	r0, [r3, #0]
 801c538:	f04f 33ff 	mov.w	r3, #4294967295
 801c53c:	2200      	movs	r2, #0
 801c53e:	68b9      	ldr	r1, [r7, #8]
 801c540:	f7f0 faac 	bl	800ca9c <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 801c544:	f7ef feda 	bl	800c2fc <osKernelGetTickCount>
 801c548:	4602      	mov	r2, r0
 801c54a:	697b      	ldr	r3, [r7, #20]
 801c54c:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801c54e:	4618      	mov	r0, r3
 801c550:	3718      	adds	r7, #24
 801c552:	46bd      	mov	sp, r7
 801c554:	bd80      	pop	{r7, pc}

0801c556 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801c556:	b480      	push	{r7}
 801c558:	b083      	sub	sp, #12
 801c55a:	af00      	add	r7, sp, #0
 801c55c:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801c55e:	687b      	ldr	r3, [r7, #4]
 801c560:	681b      	ldr	r3, [r3, #0]
 801c562:	2b00      	cmp	r3, #0
 801c564:	d101      	bne.n	801c56a <sys_mbox_valid+0x14>
    return 0;
 801c566:	2300      	movs	r3, #0
 801c568:	e000      	b.n	801c56c <sys_mbox_valid+0x16>
  else
    return 1;
 801c56a:	2301      	movs	r3, #1
}
 801c56c:	4618      	mov	r0, r3
 801c56e:	370c      	adds	r7, #12
 801c570:	46bd      	mov	sp, r7
 801c572:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c576:	4770      	bx	lr

0801c578 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801c578:	b580      	push	{r7, lr}
 801c57a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 801c57c:	2000      	movs	r0, #0
 801c57e:	f7ef ff8b 	bl	800c498 <osMutexNew>
 801c582:	4603      	mov	r3, r0
 801c584:	4a01      	ldr	r2, [pc, #4]	; (801c58c <sys_init+0x14>)
 801c586:	6013      	str	r3, [r2, #0]
#endif
}
 801c588:	bf00      	nop
 801c58a:	bd80      	pop	{r7, pc}
 801c58c:	2001b81c 	.word	0x2001b81c

0801c590 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801c590:	b580      	push	{r7, lr}
 801c592:	b082      	sub	sp, #8
 801c594:	af00      	add	r7, sp, #0
 801c596:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 801c598:	2000      	movs	r0, #0
 801c59a:	f7ef ff7d 	bl	800c498 <osMutexNew>
 801c59e:	4602      	mov	r2, r0
 801c5a0:	687b      	ldr	r3, [r7, #4]
 801c5a2:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 801c5a4:	687b      	ldr	r3, [r7, #4]
 801c5a6:	681b      	ldr	r3, [r3, #0]
 801c5a8:	2b00      	cmp	r3, #0
 801c5aa:	d102      	bne.n	801c5b2 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801c5ac:	f04f 33ff 	mov.w	r3, #4294967295
 801c5b0:	e000      	b.n	801c5b4 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801c5b2:	2300      	movs	r3, #0
}
 801c5b4:	4618      	mov	r0, r3
 801c5b6:	3708      	adds	r7, #8
 801c5b8:	46bd      	mov	sp, r7
 801c5ba:	bd80      	pop	{r7, pc}

0801c5bc <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801c5bc:	b580      	push	{r7, lr}
 801c5be:	b082      	sub	sp, #8
 801c5c0:	af00      	add	r7, sp, #0
 801c5c2:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 801c5c4:	687b      	ldr	r3, [r7, #4]
 801c5c6:	681b      	ldr	r3, [r3, #0]
 801c5c8:	f04f 31ff 	mov.w	r1, #4294967295
 801c5cc:	4618      	mov	r0, r3
 801c5ce:	f7ef ffe9 	bl	800c5a4 <osMutexAcquire>
#endif
}
 801c5d2:	bf00      	nop
 801c5d4:	3708      	adds	r7, #8
 801c5d6:	46bd      	mov	sp, r7
 801c5d8:	bd80      	pop	{r7, pc}

0801c5da <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801c5da:	b580      	push	{r7, lr}
 801c5dc:	b082      	sub	sp, #8
 801c5de:	af00      	add	r7, sp, #0
 801c5e0:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801c5e2:	687b      	ldr	r3, [r7, #4]
 801c5e4:	681b      	ldr	r3, [r3, #0]
 801c5e6:	4618      	mov	r0, r3
 801c5e8:	f7f0 f827 	bl	800c63a <osMutexRelease>
}
 801c5ec:	bf00      	nop
 801c5ee:	3708      	adds	r7, #8
 801c5f0:	46bd      	mov	sp, r7
 801c5f2:	bd80      	pop	{r7, pc}

0801c5f4 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801c5f4:	b580      	push	{r7, lr}
 801c5f6:	b08e      	sub	sp, #56	; 0x38
 801c5f8:	af00      	add	r7, sp, #0
 801c5fa:	60f8      	str	r0, [r7, #12]
 801c5fc:	60b9      	str	r1, [r7, #8]
 801c5fe:	607a      	str	r2, [r7, #4]
 801c600:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 801c602:	f107 0314 	add.w	r3, r7, #20
 801c606:	2224      	movs	r2, #36	; 0x24
 801c608:	2100      	movs	r1, #0
 801c60a:	4618      	mov	r0, r3
 801c60c:	f000 f88c 	bl	801c728 <memset>
 801c610:	68fb      	ldr	r3, [r7, #12]
 801c612:	617b      	str	r3, [r7, #20]
 801c614:	683b      	ldr	r3, [r7, #0]
 801c616:	62bb      	str	r3, [r7, #40]	; 0x28
 801c618:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c61a:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 801c61c:	f107 0314 	add.w	r3, r7, #20
 801c620:	461a      	mov	r2, r3
 801c622:	6879      	ldr	r1, [r7, #4]
 801c624:	68b8      	ldr	r0, [r7, #8]
 801c626:	f7ef fe7e 	bl	800c326 <osThreadNew>
 801c62a:	4603      	mov	r3, r0
#endif
}
 801c62c:	4618      	mov	r0, r3
 801c62e:	3738      	adds	r7, #56	; 0x38
 801c630:	46bd      	mov	sp, r7
 801c632:	bd80      	pop	{r7, pc}

0801c634 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801c634:	b580      	push	{r7, lr}
 801c636:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 801c638:	4b04      	ldr	r3, [pc, #16]	; (801c64c <sys_arch_protect+0x18>)
 801c63a:	681b      	ldr	r3, [r3, #0]
 801c63c:	f04f 31ff 	mov.w	r1, #4294967295
 801c640:	4618      	mov	r0, r3
 801c642:	f7ef ffaf 	bl	800c5a4 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 801c646:	2301      	movs	r3, #1
}
 801c648:	4618      	mov	r0, r3
 801c64a:	bd80      	pop	{r7, pc}
 801c64c:	2001b81c 	.word	0x2001b81c

0801c650 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801c650:	b580      	push	{r7, lr}
 801c652:	b082      	sub	sp, #8
 801c654:	af00      	add	r7, sp, #0
 801c656:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801c658:	4b04      	ldr	r3, [pc, #16]	; (801c66c <sys_arch_unprotect+0x1c>)
 801c65a:	681b      	ldr	r3, [r3, #0]
 801c65c:	4618      	mov	r0, r3
 801c65e:	f7ef ffec 	bl	800c63a <osMutexRelease>
}
 801c662:	bf00      	nop
 801c664:	3708      	adds	r7, #8
 801c666:	46bd      	mov	sp, r7
 801c668:	bd80      	pop	{r7, pc}
 801c66a:	bf00      	nop
 801c66c:	2001b81c 	.word	0x2001b81c

0801c670 <fiprintf>:
 801c670:	b40e      	push	{r1, r2, r3}
 801c672:	b503      	push	{r0, r1, lr}
 801c674:	4601      	mov	r1, r0
 801c676:	ab03      	add	r3, sp, #12
 801c678:	4805      	ldr	r0, [pc, #20]	; (801c690 <fiprintf+0x20>)
 801c67a:	f853 2b04 	ldr.w	r2, [r3], #4
 801c67e:	6800      	ldr	r0, [r0, #0]
 801c680:	9301      	str	r3, [sp, #4]
 801c682:	f000 f963 	bl	801c94c <_vfiprintf_r>
 801c686:	b002      	add	sp, #8
 801c688:	f85d eb04 	ldr.w	lr, [sp], #4
 801c68c:	b003      	add	sp, #12
 801c68e:	4770      	bx	lr
 801c690:	10000024 	.word	0x10000024

0801c694 <__libc_init_array>:
 801c694:	b570      	push	{r4, r5, r6, lr}
 801c696:	4d0d      	ldr	r5, [pc, #52]	; (801c6cc <__libc_init_array+0x38>)
 801c698:	4c0d      	ldr	r4, [pc, #52]	; (801c6d0 <__libc_init_array+0x3c>)
 801c69a:	1b64      	subs	r4, r4, r5
 801c69c:	10a4      	asrs	r4, r4, #2
 801c69e:	2600      	movs	r6, #0
 801c6a0:	42a6      	cmp	r6, r4
 801c6a2:	d109      	bne.n	801c6b8 <__libc_init_array+0x24>
 801c6a4:	4d0b      	ldr	r5, [pc, #44]	; (801c6d4 <__libc_init_array+0x40>)
 801c6a6:	4c0c      	ldr	r4, [pc, #48]	; (801c6d8 <__libc_init_array+0x44>)
 801c6a8:	f002 fe00 	bl	801f2ac <_init>
 801c6ac:	1b64      	subs	r4, r4, r5
 801c6ae:	10a4      	asrs	r4, r4, #2
 801c6b0:	2600      	movs	r6, #0
 801c6b2:	42a6      	cmp	r6, r4
 801c6b4:	d105      	bne.n	801c6c2 <__libc_init_array+0x2e>
 801c6b6:	bd70      	pop	{r4, r5, r6, pc}
 801c6b8:	f855 3b04 	ldr.w	r3, [r5], #4
 801c6bc:	4798      	blx	r3
 801c6be:	3601      	adds	r6, #1
 801c6c0:	e7ee      	b.n	801c6a0 <__libc_init_array+0xc>
 801c6c2:	f855 3b04 	ldr.w	r3, [r5], #4
 801c6c6:	4798      	blx	r3
 801c6c8:	3601      	adds	r6, #1
 801c6ca:	e7f2      	b.n	801c6b2 <__libc_init_array+0x1e>
 801c6cc:	08022bdc 	.word	0x08022bdc
 801c6d0:	08022bdc 	.word	0x08022bdc
 801c6d4:	08022bdc 	.word	0x08022bdc
 801c6d8:	08022be0 	.word	0x08022be0

0801c6dc <malloc>:
 801c6dc:	4b02      	ldr	r3, [pc, #8]	; (801c6e8 <malloc+0xc>)
 801c6de:	4601      	mov	r1, r0
 801c6e0:	6818      	ldr	r0, [r3, #0]
 801c6e2:	f000 b895 	b.w	801c810 <_malloc_r>
 801c6e6:	bf00      	nop
 801c6e8:	10000024 	.word	0x10000024

0801c6ec <memcmp>:
 801c6ec:	b510      	push	{r4, lr}
 801c6ee:	3901      	subs	r1, #1
 801c6f0:	4402      	add	r2, r0
 801c6f2:	4290      	cmp	r0, r2
 801c6f4:	d101      	bne.n	801c6fa <memcmp+0xe>
 801c6f6:	2000      	movs	r0, #0
 801c6f8:	e005      	b.n	801c706 <memcmp+0x1a>
 801c6fa:	7803      	ldrb	r3, [r0, #0]
 801c6fc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801c700:	42a3      	cmp	r3, r4
 801c702:	d001      	beq.n	801c708 <memcmp+0x1c>
 801c704:	1b18      	subs	r0, r3, r4
 801c706:	bd10      	pop	{r4, pc}
 801c708:	3001      	adds	r0, #1
 801c70a:	e7f2      	b.n	801c6f2 <memcmp+0x6>

0801c70c <memcpy>:
 801c70c:	440a      	add	r2, r1
 801c70e:	4291      	cmp	r1, r2
 801c710:	f100 33ff 	add.w	r3, r0, #4294967295
 801c714:	d100      	bne.n	801c718 <memcpy+0xc>
 801c716:	4770      	bx	lr
 801c718:	b510      	push	{r4, lr}
 801c71a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c71e:	f803 4f01 	strb.w	r4, [r3, #1]!
 801c722:	4291      	cmp	r1, r2
 801c724:	d1f9      	bne.n	801c71a <memcpy+0xe>
 801c726:	bd10      	pop	{r4, pc}

0801c728 <memset>:
 801c728:	4402      	add	r2, r0
 801c72a:	4603      	mov	r3, r0
 801c72c:	4293      	cmp	r3, r2
 801c72e:	d100      	bne.n	801c732 <memset+0xa>
 801c730:	4770      	bx	lr
 801c732:	f803 1b01 	strb.w	r1, [r3], #1
 801c736:	e7f9      	b.n	801c72c <memset+0x4>

0801c738 <_free_r>:
 801c738:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c73a:	2900      	cmp	r1, #0
 801c73c:	d044      	beq.n	801c7c8 <_free_r+0x90>
 801c73e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c742:	9001      	str	r0, [sp, #4]
 801c744:	2b00      	cmp	r3, #0
 801c746:	f1a1 0404 	sub.w	r4, r1, #4
 801c74a:	bfb8      	it	lt
 801c74c:	18e4      	addlt	r4, r4, r3
 801c74e:	f002 f97b 	bl	801ea48 <__malloc_lock>
 801c752:	4a1e      	ldr	r2, [pc, #120]	; (801c7cc <_free_r+0x94>)
 801c754:	9801      	ldr	r0, [sp, #4]
 801c756:	6813      	ldr	r3, [r2, #0]
 801c758:	b933      	cbnz	r3, 801c768 <_free_r+0x30>
 801c75a:	6063      	str	r3, [r4, #4]
 801c75c:	6014      	str	r4, [r2, #0]
 801c75e:	b003      	add	sp, #12
 801c760:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c764:	f002 b976 	b.w	801ea54 <__malloc_unlock>
 801c768:	42a3      	cmp	r3, r4
 801c76a:	d908      	bls.n	801c77e <_free_r+0x46>
 801c76c:	6825      	ldr	r5, [r4, #0]
 801c76e:	1961      	adds	r1, r4, r5
 801c770:	428b      	cmp	r3, r1
 801c772:	bf01      	itttt	eq
 801c774:	6819      	ldreq	r1, [r3, #0]
 801c776:	685b      	ldreq	r3, [r3, #4]
 801c778:	1949      	addeq	r1, r1, r5
 801c77a:	6021      	streq	r1, [r4, #0]
 801c77c:	e7ed      	b.n	801c75a <_free_r+0x22>
 801c77e:	461a      	mov	r2, r3
 801c780:	685b      	ldr	r3, [r3, #4]
 801c782:	b10b      	cbz	r3, 801c788 <_free_r+0x50>
 801c784:	42a3      	cmp	r3, r4
 801c786:	d9fa      	bls.n	801c77e <_free_r+0x46>
 801c788:	6811      	ldr	r1, [r2, #0]
 801c78a:	1855      	adds	r5, r2, r1
 801c78c:	42a5      	cmp	r5, r4
 801c78e:	d10b      	bne.n	801c7a8 <_free_r+0x70>
 801c790:	6824      	ldr	r4, [r4, #0]
 801c792:	4421      	add	r1, r4
 801c794:	1854      	adds	r4, r2, r1
 801c796:	42a3      	cmp	r3, r4
 801c798:	6011      	str	r1, [r2, #0]
 801c79a:	d1e0      	bne.n	801c75e <_free_r+0x26>
 801c79c:	681c      	ldr	r4, [r3, #0]
 801c79e:	685b      	ldr	r3, [r3, #4]
 801c7a0:	6053      	str	r3, [r2, #4]
 801c7a2:	4421      	add	r1, r4
 801c7a4:	6011      	str	r1, [r2, #0]
 801c7a6:	e7da      	b.n	801c75e <_free_r+0x26>
 801c7a8:	d902      	bls.n	801c7b0 <_free_r+0x78>
 801c7aa:	230c      	movs	r3, #12
 801c7ac:	6003      	str	r3, [r0, #0]
 801c7ae:	e7d6      	b.n	801c75e <_free_r+0x26>
 801c7b0:	6825      	ldr	r5, [r4, #0]
 801c7b2:	1961      	adds	r1, r4, r5
 801c7b4:	428b      	cmp	r3, r1
 801c7b6:	bf04      	itt	eq
 801c7b8:	6819      	ldreq	r1, [r3, #0]
 801c7ba:	685b      	ldreq	r3, [r3, #4]
 801c7bc:	6063      	str	r3, [r4, #4]
 801c7be:	bf04      	itt	eq
 801c7c0:	1949      	addeq	r1, r1, r5
 801c7c2:	6021      	streq	r1, [r4, #0]
 801c7c4:	6054      	str	r4, [r2, #4]
 801c7c6:	e7ca      	b.n	801c75e <_free_r+0x26>
 801c7c8:	b003      	add	sp, #12
 801c7ca:	bd30      	pop	{r4, r5, pc}
 801c7cc:	200138f8 	.word	0x200138f8

0801c7d0 <sbrk_aligned>:
 801c7d0:	b570      	push	{r4, r5, r6, lr}
 801c7d2:	4e0e      	ldr	r6, [pc, #56]	; (801c80c <sbrk_aligned+0x3c>)
 801c7d4:	460c      	mov	r4, r1
 801c7d6:	6831      	ldr	r1, [r6, #0]
 801c7d8:	4605      	mov	r5, r0
 801c7da:	b911      	cbnz	r1, 801c7e2 <sbrk_aligned+0x12>
 801c7dc:	f000 ff1c 	bl	801d618 <_sbrk_r>
 801c7e0:	6030      	str	r0, [r6, #0]
 801c7e2:	4621      	mov	r1, r4
 801c7e4:	4628      	mov	r0, r5
 801c7e6:	f000 ff17 	bl	801d618 <_sbrk_r>
 801c7ea:	1c43      	adds	r3, r0, #1
 801c7ec:	d00a      	beq.n	801c804 <sbrk_aligned+0x34>
 801c7ee:	1cc4      	adds	r4, r0, #3
 801c7f0:	f024 0403 	bic.w	r4, r4, #3
 801c7f4:	42a0      	cmp	r0, r4
 801c7f6:	d007      	beq.n	801c808 <sbrk_aligned+0x38>
 801c7f8:	1a21      	subs	r1, r4, r0
 801c7fa:	4628      	mov	r0, r5
 801c7fc:	f000 ff0c 	bl	801d618 <_sbrk_r>
 801c800:	3001      	adds	r0, #1
 801c802:	d101      	bne.n	801c808 <sbrk_aligned+0x38>
 801c804:	f04f 34ff 	mov.w	r4, #4294967295
 801c808:	4620      	mov	r0, r4
 801c80a:	bd70      	pop	{r4, r5, r6, pc}
 801c80c:	200138fc 	.word	0x200138fc

0801c810 <_malloc_r>:
 801c810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c814:	1ccd      	adds	r5, r1, #3
 801c816:	f025 0503 	bic.w	r5, r5, #3
 801c81a:	3508      	adds	r5, #8
 801c81c:	2d0c      	cmp	r5, #12
 801c81e:	bf38      	it	cc
 801c820:	250c      	movcc	r5, #12
 801c822:	2d00      	cmp	r5, #0
 801c824:	4607      	mov	r7, r0
 801c826:	db01      	blt.n	801c82c <_malloc_r+0x1c>
 801c828:	42a9      	cmp	r1, r5
 801c82a:	d905      	bls.n	801c838 <_malloc_r+0x28>
 801c82c:	230c      	movs	r3, #12
 801c82e:	603b      	str	r3, [r7, #0]
 801c830:	2600      	movs	r6, #0
 801c832:	4630      	mov	r0, r6
 801c834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c838:	4e2e      	ldr	r6, [pc, #184]	; (801c8f4 <_malloc_r+0xe4>)
 801c83a:	f002 f905 	bl	801ea48 <__malloc_lock>
 801c83e:	6833      	ldr	r3, [r6, #0]
 801c840:	461c      	mov	r4, r3
 801c842:	bb34      	cbnz	r4, 801c892 <_malloc_r+0x82>
 801c844:	4629      	mov	r1, r5
 801c846:	4638      	mov	r0, r7
 801c848:	f7ff ffc2 	bl	801c7d0 <sbrk_aligned>
 801c84c:	1c43      	adds	r3, r0, #1
 801c84e:	4604      	mov	r4, r0
 801c850:	d14d      	bne.n	801c8ee <_malloc_r+0xde>
 801c852:	6834      	ldr	r4, [r6, #0]
 801c854:	4626      	mov	r6, r4
 801c856:	2e00      	cmp	r6, #0
 801c858:	d140      	bne.n	801c8dc <_malloc_r+0xcc>
 801c85a:	6823      	ldr	r3, [r4, #0]
 801c85c:	4631      	mov	r1, r6
 801c85e:	4638      	mov	r0, r7
 801c860:	eb04 0803 	add.w	r8, r4, r3
 801c864:	f000 fed8 	bl	801d618 <_sbrk_r>
 801c868:	4580      	cmp	r8, r0
 801c86a:	d13a      	bne.n	801c8e2 <_malloc_r+0xd2>
 801c86c:	6821      	ldr	r1, [r4, #0]
 801c86e:	3503      	adds	r5, #3
 801c870:	1a6d      	subs	r5, r5, r1
 801c872:	f025 0503 	bic.w	r5, r5, #3
 801c876:	3508      	adds	r5, #8
 801c878:	2d0c      	cmp	r5, #12
 801c87a:	bf38      	it	cc
 801c87c:	250c      	movcc	r5, #12
 801c87e:	4629      	mov	r1, r5
 801c880:	4638      	mov	r0, r7
 801c882:	f7ff ffa5 	bl	801c7d0 <sbrk_aligned>
 801c886:	3001      	adds	r0, #1
 801c888:	d02b      	beq.n	801c8e2 <_malloc_r+0xd2>
 801c88a:	6823      	ldr	r3, [r4, #0]
 801c88c:	442b      	add	r3, r5
 801c88e:	6023      	str	r3, [r4, #0]
 801c890:	e00e      	b.n	801c8b0 <_malloc_r+0xa0>
 801c892:	6822      	ldr	r2, [r4, #0]
 801c894:	1b52      	subs	r2, r2, r5
 801c896:	d41e      	bmi.n	801c8d6 <_malloc_r+0xc6>
 801c898:	2a0b      	cmp	r2, #11
 801c89a:	d916      	bls.n	801c8ca <_malloc_r+0xba>
 801c89c:	1961      	adds	r1, r4, r5
 801c89e:	42a3      	cmp	r3, r4
 801c8a0:	6025      	str	r5, [r4, #0]
 801c8a2:	bf18      	it	ne
 801c8a4:	6059      	strne	r1, [r3, #4]
 801c8a6:	6863      	ldr	r3, [r4, #4]
 801c8a8:	bf08      	it	eq
 801c8aa:	6031      	streq	r1, [r6, #0]
 801c8ac:	5162      	str	r2, [r4, r5]
 801c8ae:	604b      	str	r3, [r1, #4]
 801c8b0:	4638      	mov	r0, r7
 801c8b2:	f104 060b 	add.w	r6, r4, #11
 801c8b6:	f002 f8cd 	bl	801ea54 <__malloc_unlock>
 801c8ba:	f026 0607 	bic.w	r6, r6, #7
 801c8be:	1d23      	adds	r3, r4, #4
 801c8c0:	1af2      	subs	r2, r6, r3
 801c8c2:	d0b6      	beq.n	801c832 <_malloc_r+0x22>
 801c8c4:	1b9b      	subs	r3, r3, r6
 801c8c6:	50a3      	str	r3, [r4, r2]
 801c8c8:	e7b3      	b.n	801c832 <_malloc_r+0x22>
 801c8ca:	6862      	ldr	r2, [r4, #4]
 801c8cc:	42a3      	cmp	r3, r4
 801c8ce:	bf0c      	ite	eq
 801c8d0:	6032      	streq	r2, [r6, #0]
 801c8d2:	605a      	strne	r2, [r3, #4]
 801c8d4:	e7ec      	b.n	801c8b0 <_malloc_r+0xa0>
 801c8d6:	4623      	mov	r3, r4
 801c8d8:	6864      	ldr	r4, [r4, #4]
 801c8da:	e7b2      	b.n	801c842 <_malloc_r+0x32>
 801c8dc:	4634      	mov	r4, r6
 801c8de:	6876      	ldr	r6, [r6, #4]
 801c8e0:	e7b9      	b.n	801c856 <_malloc_r+0x46>
 801c8e2:	230c      	movs	r3, #12
 801c8e4:	603b      	str	r3, [r7, #0]
 801c8e6:	4638      	mov	r0, r7
 801c8e8:	f002 f8b4 	bl	801ea54 <__malloc_unlock>
 801c8ec:	e7a1      	b.n	801c832 <_malloc_r+0x22>
 801c8ee:	6025      	str	r5, [r4, #0]
 801c8f0:	e7de      	b.n	801c8b0 <_malloc_r+0xa0>
 801c8f2:	bf00      	nop
 801c8f4:	200138f8 	.word	0x200138f8

0801c8f8 <__sfputc_r>:
 801c8f8:	6893      	ldr	r3, [r2, #8]
 801c8fa:	3b01      	subs	r3, #1
 801c8fc:	2b00      	cmp	r3, #0
 801c8fe:	b410      	push	{r4}
 801c900:	6093      	str	r3, [r2, #8]
 801c902:	da08      	bge.n	801c916 <__sfputc_r+0x1e>
 801c904:	6994      	ldr	r4, [r2, #24]
 801c906:	42a3      	cmp	r3, r4
 801c908:	db01      	blt.n	801c90e <__sfputc_r+0x16>
 801c90a:	290a      	cmp	r1, #10
 801c90c:	d103      	bne.n	801c916 <__sfputc_r+0x1e>
 801c90e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c912:	f000 bed5 	b.w	801d6c0 <__swbuf_r>
 801c916:	6813      	ldr	r3, [r2, #0]
 801c918:	1c58      	adds	r0, r3, #1
 801c91a:	6010      	str	r0, [r2, #0]
 801c91c:	7019      	strb	r1, [r3, #0]
 801c91e:	4608      	mov	r0, r1
 801c920:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c924:	4770      	bx	lr

0801c926 <__sfputs_r>:
 801c926:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c928:	4606      	mov	r6, r0
 801c92a:	460f      	mov	r7, r1
 801c92c:	4614      	mov	r4, r2
 801c92e:	18d5      	adds	r5, r2, r3
 801c930:	42ac      	cmp	r4, r5
 801c932:	d101      	bne.n	801c938 <__sfputs_r+0x12>
 801c934:	2000      	movs	r0, #0
 801c936:	e007      	b.n	801c948 <__sfputs_r+0x22>
 801c938:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c93c:	463a      	mov	r2, r7
 801c93e:	4630      	mov	r0, r6
 801c940:	f7ff ffda 	bl	801c8f8 <__sfputc_r>
 801c944:	1c43      	adds	r3, r0, #1
 801c946:	d1f3      	bne.n	801c930 <__sfputs_r+0xa>
 801c948:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801c94c <_vfiprintf_r>:
 801c94c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c950:	460d      	mov	r5, r1
 801c952:	b09d      	sub	sp, #116	; 0x74
 801c954:	4614      	mov	r4, r2
 801c956:	4698      	mov	r8, r3
 801c958:	4606      	mov	r6, r0
 801c95a:	b118      	cbz	r0, 801c964 <_vfiprintf_r+0x18>
 801c95c:	6983      	ldr	r3, [r0, #24]
 801c95e:	b90b      	cbnz	r3, 801c964 <_vfiprintf_r+0x18>
 801c960:	f001 ff42 	bl	801e7e8 <__sinit>
 801c964:	4b89      	ldr	r3, [pc, #548]	; (801cb8c <_vfiprintf_r+0x240>)
 801c966:	429d      	cmp	r5, r3
 801c968:	d11b      	bne.n	801c9a2 <_vfiprintf_r+0x56>
 801c96a:	6875      	ldr	r5, [r6, #4]
 801c96c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c96e:	07d9      	lsls	r1, r3, #31
 801c970:	d405      	bmi.n	801c97e <_vfiprintf_r+0x32>
 801c972:	89ab      	ldrh	r3, [r5, #12]
 801c974:	059a      	lsls	r2, r3, #22
 801c976:	d402      	bmi.n	801c97e <_vfiprintf_r+0x32>
 801c978:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c97a:	f001 ffd8 	bl	801e92e <__retarget_lock_acquire_recursive>
 801c97e:	89ab      	ldrh	r3, [r5, #12]
 801c980:	071b      	lsls	r3, r3, #28
 801c982:	d501      	bpl.n	801c988 <_vfiprintf_r+0x3c>
 801c984:	692b      	ldr	r3, [r5, #16]
 801c986:	b9eb      	cbnz	r3, 801c9c4 <_vfiprintf_r+0x78>
 801c988:	4629      	mov	r1, r5
 801c98a:	4630      	mov	r0, r6
 801c98c:	f000 fefc 	bl	801d788 <__swsetup_r>
 801c990:	b1c0      	cbz	r0, 801c9c4 <_vfiprintf_r+0x78>
 801c992:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c994:	07dc      	lsls	r4, r3, #31
 801c996:	d50e      	bpl.n	801c9b6 <_vfiprintf_r+0x6a>
 801c998:	f04f 30ff 	mov.w	r0, #4294967295
 801c99c:	b01d      	add	sp, #116	; 0x74
 801c99e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c9a2:	4b7b      	ldr	r3, [pc, #492]	; (801cb90 <_vfiprintf_r+0x244>)
 801c9a4:	429d      	cmp	r5, r3
 801c9a6:	d101      	bne.n	801c9ac <_vfiprintf_r+0x60>
 801c9a8:	68b5      	ldr	r5, [r6, #8]
 801c9aa:	e7df      	b.n	801c96c <_vfiprintf_r+0x20>
 801c9ac:	4b79      	ldr	r3, [pc, #484]	; (801cb94 <_vfiprintf_r+0x248>)
 801c9ae:	429d      	cmp	r5, r3
 801c9b0:	bf08      	it	eq
 801c9b2:	68f5      	ldreq	r5, [r6, #12]
 801c9b4:	e7da      	b.n	801c96c <_vfiprintf_r+0x20>
 801c9b6:	89ab      	ldrh	r3, [r5, #12]
 801c9b8:	0598      	lsls	r0, r3, #22
 801c9ba:	d4ed      	bmi.n	801c998 <_vfiprintf_r+0x4c>
 801c9bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c9be:	f001 ffb7 	bl	801e930 <__retarget_lock_release_recursive>
 801c9c2:	e7e9      	b.n	801c998 <_vfiprintf_r+0x4c>
 801c9c4:	2300      	movs	r3, #0
 801c9c6:	9309      	str	r3, [sp, #36]	; 0x24
 801c9c8:	2320      	movs	r3, #32
 801c9ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801c9ce:	f8cd 800c 	str.w	r8, [sp, #12]
 801c9d2:	2330      	movs	r3, #48	; 0x30
 801c9d4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801cb98 <_vfiprintf_r+0x24c>
 801c9d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801c9dc:	f04f 0901 	mov.w	r9, #1
 801c9e0:	4623      	mov	r3, r4
 801c9e2:	469a      	mov	sl, r3
 801c9e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c9e8:	b10a      	cbz	r2, 801c9ee <_vfiprintf_r+0xa2>
 801c9ea:	2a25      	cmp	r2, #37	; 0x25
 801c9ec:	d1f9      	bne.n	801c9e2 <_vfiprintf_r+0x96>
 801c9ee:	ebba 0b04 	subs.w	fp, sl, r4
 801c9f2:	d00b      	beq.n	801ca0c <_vfiprintf_r+0xc0>
 801c9f4:	465b      	mov	r3, fp
 801c9f6:	4622      	mov	r2, r4
 801c9f8:	4629      	mov	r1, r5
 801c9fa:	4630      	mov	r0, r6
 801c9fc:	f7ff ff93 	bl	801c926 <__sfputs_r>
 801ca00:	3001      	adds	r0, #1
 801ca02:	f000 80aa 	beq.w	801cb5a <_vfiprintf_r+0x20e>
 801ca06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ca08:	445a      	add	r2, fp
 801ca0a:	9209      	str	r2, [sp, #36]	; 0x24
 801ca0c:	f89a 3000 	ldrb.w	r3, [sl]
 801ca10:	2b00      	cmp	r3, #0
 801ca12:	f000 80a2 	beq.w	801cb5a <_vfiprintf_r+0x20e>
 801ca16:	2300      	movs	r3, #0
 801ca18:	f04f 32ff 	mov.w	r2, #4294967295
 801ca1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ca20:	f10a 0a01 	add.w	sl, sl, #1
 801ca24:	9304      	str	r3, [sp, #16]
 801ca26:	9307      	str	r3, [sp, #28]
 801ca28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801ca2c:	931a      	str	r3, [sp, #104]	; 0x68
 801ca2e:	4654      	mov	r4, sl
 801ca30:	2205      	movs	r2, #5
 801ca32:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ca36:	4858      	ldr	r0, [pc, #352]	; (801cb98 <_vfiprintf_r+0x24c>)
 801ca38:	f7e3 fbd2 	bl	80001e0 <memchr>
 801ca3c:	9a04      	ldr	r2, [sp, #16]
 801ca3e:	b9d8      	cbnz	r0, 801ca78 <_vfiprintf_r+0x12c>
 801ca40:	06d1      	lsls	r1, r2, #27
 801ca42:	bf44      	itt	mi
 801ca44:	2320      	movmi	r3, #32
 801ca46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ca4a:	0713      	lsls	r3, r2, #28
 801ca4c:	bf44      	itt	mi
 801ca4e:	232b      	movmi	r3, #43	; 0x2b
 801ca50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ca54:	f89a 3000 	ldrb.w	r3, [sl]
 801ca58:	2b2a      	cmp	r3, #42	; 0x2a
 801ca5a:	d015      	beq.n	801ca88 <_vfiprintf_r+0x13c>
 801ca5c:	9a07      	ldr	r2, [sp, #28]
 801ca5e:	4654      	mov	r4, sl
 801ca60:	2000      	movs	r0, #0
 801ca62:	f04f 0c0a 	mov.w	ip, #10
 801ca66:	4621      	mov	r1, r4
 801ca68:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ca6c:	3b30      	subs	r3, #48	; 0x30
 801ca6e:	2b09      	cmp	r3, #9
 801ca70:	d94e      	bls.n	801cb10 <_vfiprintf_r+0x1c4>
 801ca72:	b1b0      	cbz	r0, 801caa2 <_vfiprintf_r+0x156>
 801ca74:	9207      	str	r2, [sp, #28]
 801ca76:	e014      	b.n	801caa2 <_vfiprintf_r+0x156>
 801ca78:	eba0 0308 	sub.w	r3, r0, r8
 801ca7c:	fa09 f303 	lsl.w	r3, r9, r3
 801ca80:	4313      	orrs	r3, r2
 801ca82:	9304      	str	r3, [sp, #16]
 801ca84:	46a2      	mov	sl, r4
 801ca86:	e7d2      	b.n	801ca2e <_vfiprintf_r+0xe2>
 801ca88:	9b03      	ldr	r3, [sp, #12]
 801ca8a:	1d19      	adds	r1, r3, #4
 801ca8c:	681b      	ldr	r3, [r3, #0]
 801ca8e:	9103      	str	r1, [sp, #12]
 801ca90:	2b00      	cmp	r3, #0
 801ca92:	bfbb      	ittet	lt
 801ca94:	425b      	neglt	r3, r3
 801ca96:	f042 0202 	orrlt.w	r2, r2, #2
 801ca9a:	9307      	strge	r3, [sp, #28]
 801ca9c:	9307      	strlt	r3, [sp, #28]
 801ca9e:	bfb8      	it	lt
 801caa0:	9204      	strlt	r2, [sp, #16]
 801caa2:	7823      	ldrb	r3, [r4, #0]
 801caa4:	2b2e      	cmp	r3, #46	; 0x2e
 801caa6:	d10c      	bne.n	801cac2 <_vfiprintf_r+0x176>
 801caa8:	7863      	ldrb	r3, [r4, #1]
 801caaa:	2b2a      	cmp	r3, #42	; 0x2a
 801caac:	d135      	bne.n	801cb1a <_vfiprintf_r+0x1ce>
 801caae:	9b03      	ldr	r3, [sp, #12]
 801cab0:	1d1a      	adds	r2, r3, #4
 801cab2:	681b      	ldr	r3, [r3, #0]
 801cab4:	9203      	str	r2, [sp, #12]
 801cab6:	2b00      	cmp	r3, #0
 801cab8:	bfb8      	it	lt
 801caba:	f04f 33ff 	movlt.w	r3, #4294967295
 801cabe:	3402      	adds	r4, #2
 801cac0:	9305      	str	r3, [sp, #20]
 801cac2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801cba8 <_vfiprintf_r+0x25c>
 801cac6:	7821      	ldrb	r1, [r4, #0]
 801cac8:	2203      	movs	r2, #3
 801caca:	4650      	mov	r0, sl
 801cacc:	f7e3 fb88 	bl	80001e0 <memchr>
 801cad0:	b140      	cbz	r0, 801cae4 <_vfiprintf_r+0x198>
 801cad2:	2340      	movs	r3, #64	; 0x40
 801cad4:	eba0 000a 	sub.w	r0, r0, sl
 801cad8:	fa03 f000 	lsl.w	r0, r3, r0
 801cadc:	9b04      	ldr	r3, [sp, #16]
 801cade:	4303      	orrs	r3, r0
 801cae0:	3401      	adds	r4, #1
 801cae2:	9304      	str	r3, [sp, #16]
 801cae4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cae8:	482c      	ldr	r0, [pc, #176]	; (801cb9c <_vfiprintf_r+0x250>)
 801caea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801caee:	2206      	movs	r2, #6
 801caf0:	f7e3 fb76 	bl	80001e0 <memchr>
 801caf4:	2800      	cmp	r0, #0
 801caf6:	d03f      	beq.n	801cb78 <_vfiprintf_r+0x22c>
 801caf8:	4b29      	ldr	r3, [pc, #164]	; (801cba0 <_vfiprintf_r+0x254>)
 801cafa:	bb1b      	cbnz	r3, 801cb44 <_vfiprintf_r+0x1f8>
 801cafc:	9b03      	ldr	r3, [sp, #12]
 801cafe:	3307      	adds	r3, #7
 801cb00:	f023 0307 	bic.w	r3, r3, #7
 801cb04:	3308      	adds	r3, #8
 801cb06:	9303      	str	r3, [sp, #12]
 801cb08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cb0a:	443b      	add	r3, r7
 801cb0c:	9309      	str	r3, [sp, #36]	; 0x24
 801cb0e:	e767      	b.n	801c9e0 <_vfiprintf_r+0x94>
 801cb10:	fb0c 3202 	mla	r2, ip, r2, r3
 801cb14:	460c      	mov	r4, r1
 801cb16:	2001      	movs	r0, #1
 801cb18:	e7a5      	b.n	801ca66 <_vfiprintf_r+0x11a>
 801cb1a:	2300      	movs	r3, #0
 801cb1c:	3401      	adds	r4, #1
 801cb1e:	9305      	str	r3, [sp, #20]
 801cb20:	4619      	mov	r1, r3
 801cb22:	f04f 0c0a 	mov.w	ip, #10
 801cb26:	4620      	mov	r0, r4
 801cb28:	f810 2b01 	ldrb.w	r2, [r0], #1
 801cb2c:	3a30      	subs	r2, #48	; 0x30
 801cb2e:	2a09      	cmp	r2, #9
 801cb30:	d903      	bls.n	801cb3a <_vfiprintf_r+0x1ee>
 801cb32:	2b00      	cmp	r3, #0
 801cb34:	d0c5      	beq.n	801cac2 <_vfiprintf_r+0x176>
 801cb36:	9105      	str	r1, [sp, #20]
 801cb38:	e7c3      	b.n	801cac2 <_vfiprintf_r+0x176>
 801cb3a:	fb0c 2101 	mla	r1, ip, r1, r2
 801cb3e:	4604      	mov	r4, r0
 801cb40:	2301      	movs	r3, #1
 801cb42:	e7f0      	b.n	801cb26 <_vfiprintf_r+0x1da>
 801cb44:	ab03      	add	r3, sp, #12
 801cb46:	9300      	str	r3, [sp, #0]
 801cb48:	462a      	mov	r2, r5
 801cb4a:	4b16      	ldr	r3, [pc, #88]	; (801cba4 <_vfiprintf_r+0x258>)
 801cb4c:	a904      	add	r1, sp, #16
 801cb4e:	4630      	mov	r0, r6
 801cb50:	f000 f8cc 	bl	801ccec <_printf_float>
 801cb54:	4607      	mov	r7, r0
 801cb56:	1c78      	adds	r0, r7, #1
 801cb58:	d1d6      	bne.n	801cb08 <_vfiprintf_r+0x1bc>
 801cb5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801cb5c:	07d9      	lsls	r1, r3, #31
 801cb5e:	d405      	bmi.n	801cb6c <_vfiprintf_r+0x220>
 801cb60:	89ab      	ldrh	r3, [r5, #12]
 801cb62:	059a      	lsls	r2, r3, #22
 801cb64:	d402      	bmi.n	801cb6c <_vfiprintf_r+0x220>
 801cb66:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801cb68:	f001 fee2 	bl	801e930 <__retarget_lock_release_recursive>
 801cb6c:	89ab      	ldrh	r3, [r5, #12]
 801cb6e:	065b      	lsls	r3, r3, #25
 801cb70:	f53f af12 	bmi.w	801c998 <_vfiprintf_r+0x4c>
 801cb74:	9809      	ldr	r0, [sp, #36]	; 0x24
 801cb76:	e711      	b.n	801c99c <_vfiprintf_r+0x50>
 801cb78:	ab03      	add	r3, sp, #12
 801cb7a:	9300      	str	r3, [sp, #0]
 801cb7c:	462a      	mov	r2, r5
 801cb7e:	4b09      	ldr	r3, [pc, #36]	; (801cba4 <_vfiprintf_r+0x258>)
 801cb80:	a904      	add	r1, sp, #16
 801cb82:	4630      	mov	r0, r6
 801cb84:	f000 fb56 	bl	801d234 <_printf_i>
 801cb88:	e7e4      	b.n	801cb54 <_vfiprintf_r+0x208>
 801cb8a:	bf00      	nop
 801cb8c:	08022a30 	.word	0x08022a30
 801cb90:	08022a50 	.word	0x08022a50
 801cb94:	08022a10 	.word	0x08022a10
 801cb98:	080228a4 	.word	0x080228a4
 801cb9c:	080228ae 	.word	0x080228ae
 801cba0:	0801cced 	.word	0x0801cced
 801cba4:	0801c927 	.word	0x0801c927
 801cba8:	080228aa 	.word	0x080228aa

0801cbac <__cvt>:
 801cbac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801cbb0:	ec55 4b10 	vmov	r4, r5, d0
 801cbb4:	2d00      	cmp	r5, #0
 801cbb6:	460e      	mov	r6, r1
 801cbb8:	4619      	mov	r1, r3
 801cbba:	462b      	mov	r3, r5
 801cbbc:	bfbb      	ittet	lt
 801cbbe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801cbc2:	461d      	movlt	r5, r3
 801cbc4:	2300      	movge	r3, #0
 801cbc6:	232d      	movlt	r3, #45	; 0x2d
 801cbc8:	700b      	strb	r3, [r1, #0]
 801cbca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801cbcc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801cbd0:	4691      	mov	r9, r2
 801cbd2:	f023 0820 	bic.w	r8, r3, #32
 801cbd6:	bfbc      	itt	lt
 801cbd8:	4622      	movlt	r2, r4
 801cbda:	4614      	movlt	r4, r2
 801cbdc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801cbe0:	d005      	beq.n	801cbee <__cvt+0x42>
 801cbe2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801cbe6:	d100      	bne.n	801cbea <__cvt+0x3e>
 801cbe8:	3601      	adds	r6, #1
 801cbea:	2102      	movs	r1, #2
 801cbec:	e000      	b.n	801cbf0 <__cvt+0x44>
 801cbee:	2103      	movs	r1, #3
 801cbf0:	ab03      	add	r3, sp, #12
 801cbf2:	9301      	str	r3, [sp, #4]
 801cbf4:	ab02      	add	r3, sp, #8
 801cbf6:	9300      	str	r3, [sp, #0]
 801cbf8:	ec45 4b10 	vmov	d0, r4, r5
 801cbfc:	4653      	mov	r3, sl
 801cbfe:	4632      	mov	r2, r6
 801cc00:	f000 feea 	bl	801d9d8 <_dtoa_r>
 801cc04:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801cc08:	4607      	mov	r7, r0
 801cc0a:	d102      	bne.n	801cc12 <__cvt+0x66>
 801cc0c:	f019 0f01 	tst.w	r9, #1
 801cc10:	d022      	beq.n	801cc58 <__cvt+0xac>
 801cc12:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801cc16:	eb07 0906 	add.w	r9, r7, r6
 801cc1a:	d110      	bne.n	801cc3e <__cvt+0x92>
 801cc1c:	783b      	ldrb	r3, [r7, #0]
 801cc1e:	2b30      	cmp	r3, #48	; 0x30
 801cc20:	d10a      	bne.n	801cc38 <__cvt+0x8c>
 801cc22:	2200      	movs	r2, #0
 801cc24:	2300      	movs	r3, #0
 801cc26:	4620      	mov	r0, r4
 801cc28:	4629      	mov	r1, r5
 801cc2a:	f7e3 ff4d 	bl	8000ac8 <__aeabi_dcmpeq>
 801cc2e:	b918      	cbnz	r0, 801cc38 <__cvt+0x8c>
 801cc30:	f1c6 0601 	rsb	r6, r6, #1
 801cc34:	f8ca 6000 	str.w	r6, [sl]
 801cc38:	f8da 3000 	ldr.w	r3, [sl]
 801cc3c:	4499      	add	r9, r3
 801cc3e:	2200      	movs	r2, #0
 801cc40:	2300      	movs	r3, #0
 801cc42:	4620      	mov	r0, r4
 801cc44:	4629      	mov	r1, r5
 801cc46:	f7e3 ff3f 	bl	8000ac8 <__aeabi_dcmpeq>
 801cc4a:	b108      	cbz	r0, 801cc50 <__cvt+0xa4>
 801cc4c:	f8cd 900c 	str.w	r9, [sp, #12]
 801cc50:	2230      	movs	r2, #48	; 0x30
 801cc52:	9b03      	ldr	r3, [sp, #12]
 801cc54:	454b      	cmp	r3, r9
 801cc56:	d307      	bcc.n	801cc68 <__cvt+0xbc>
 801cc58:	9b03      	ldr	r3, [sp, #12]
 801cc5a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801cc5c:	1bdb      	subs	r3, r3, r7
 801cc5e:	4638      	mov	r0, r7
 801cc60:	6013      	str	r3, [r2, #0]
 801cc62:	b004      	add	sp, #16
 801cc64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cc68:	1c59      	adds	r1, r3, #1
 801cc6a:	9103      	str	r1, [sp, #12]
 801cc6c:	701a      	strb	r2, [r3, #0]
 801cc6e:	e7f0      	b.n	801cc52 <__cvt+0xa6>

0801cc70 <__exponent>:
 801cc70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801cc72:	4603      	mov	r3, r0
 801cc74:	2900      	cmp	r1, #0
 801cc76:	bfb8      	it	lt
 801cc78:	4249      	neglt	r1, r1
 801cc7a:	f803 2b02 	strb.w	r2, [r3], #2
 801cc7e:	bfb4      	ite	lt
 801cc80:	222d      	movlt	r2, #45	; 0x2d
 801cc82:	222b      	movge	r2, #43	; 0x2b
 801cc84:	2909      	cmp	r1, #9
 801cc86:	7042      	strb	r2, [r0, #1]
 801cc88:	dd2a      	ble.n	801cce0 <__exponent+0x70>
 801cc8a:	f10d 0407 	add.w	r4, sp, #7
 801cc8e:	46a4      	mov	ip, r4
 801cc90:	270a      	movs	r7, #10
 801cc92:	46a6      	mov	lr, r4
 801cc94:	460a      	mov	r2, r1
 801cc96:	fb91 f6f7 	sdiv	r6, r1, r7
 801cc9a:	fb07 1516 	mls	r5, r7, r6, r1
 801cc9e:	3530      	adds	r5, #48	; 0x30
 801cca0:	2a63      	cmp	r2, #99	; 0x63
 801cca2:	f104 34ff 	add.w	r4, r4, #4294967295
 801cca6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801ccaa:	4631      	mov	r1, r6
 801ccac:	dcf1      	bgt.n	801cc92 <__exponent+0x22>
 801ccae:	3130      	adds	r1, #48	; 0x30
 801ccb0:	f1ae 0502 	sub.w	r5, lr, #2
 801ccb4:	f804 1c01 	strb.w	r1, [r4, #-1]
 801ccb8:	1c44      	adds	r4, r0, #1
 801ccba:	4629      	mov	r1, r5
 801ccbc:	4561      	cmp	r1, ip
 801ccbe:	d30a      	bcc.n	801ccd6 <__exponent+0x66>
 801ccc0:	f10d 0209 	add.w	r2, sp, #9
 801ccc4:	eba2 020e 	sub.w	r2, r2, lr
 801ccc8:	4565      	cmp	r5, ip
 801ccca:	bf88      	it	hi
 801cccc:	2200      	movhi	r2, #0
 801ccce:	4413      	add	r3, r2
 801ccd0:	1a18      	subs	r0, r3, r0
 801ccd2:	b003      	add	sp, #12
 801ccd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ccd6:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ccda:	f804 2f01 	strb.w	r2, [r4, #1]!
 801ccde:	e7ed      	b.n	801ccbc <__exponent+0x4c>
 801cce0:	2330      	movs	r3, #48	; 0x30
 801cce2:	3130      	adds	r1, #48	; 0x30
 801cce4:	7083      	strb	r3, [r0, #2]
 801cce6:	70c1      	strb	r1, [r0, #3]
 801cce8:	1d03      	adds	r3, r0, #4
 801ccea:	e7f1      	b.n	801ccd0 <__exponent+0x60>

0801ccec <_printf_float>:
 801ccec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ccf0:	ed2d 8b02 	vpush	{d8}
 801ccf4:	b08d      	sub	sp, #52	; 0x34
 801ccf6:	460c      	mov	r4, r1
 801ccf8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801ccfc:	4616      	mov	r6, r2
 801ccfe:	461f      	mov	r7, r3
 801cd00:	4605      	mov	r5, r0
 801cd02:	f001 fe0f 	bl	801e924 <_localeconv_r>
 801cd06:	f8d0 a000 	ldr.w	sl, [r0]
 801cd0a:	4650      	mov	r0, sl
 801cd0c:	f7e3 fa60 	bl	80001d0 <strlen>
 801cd10:	2300      	movs	r3, #0
 801cd12:	930a      	str	r3, [sp, #40]	; 0x28
 801cd14:	6823      	ldr	r3, [r4, #0]
 801cd16:	9305      	str	r3, [sp, #20]
 801cd18:	f8d8 3000 	ldr.w	r3, [r8]
 801cd1c:	f894 b018 	ldrb.w	fp, [r4, #24]
 801cd20:	3307      	adds	r3, #7
 801cd22:	f023 0307 	bic.w	r3, r3, #7
 801cd26:	f103 0208 	add.w	r2, r3, #8
 801cd2a:	f8c8 2000 	str.w	r2, [r8]
 801cd2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cd32:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801cd36:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801cd3a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801cd3e:	9307      	str	r3, [sp, #28]
 801cd40:	f8cd 8018 	str.w	r8, [sp, #24]
 801cd44:	ee08 0a10 	vmov	s16, r0
 801cd48:	4b9f      	ldr	r3, [pc, #636]	; (801cfc8 <_printf_float+0x2dc>)
 801cd4a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801cd4e:	f04f 32ff 	mov.w	r2, #4294967295
 801cd52:	f7e3 feeb 	bl	8000b2c <__aeabi_dcmpun>
 801cd56:	bb88      	cbnz	r0, 801cdbc <_printf_float+0xd0>
 801cd58:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801cd5c:	4b9a      	ldr	r3, [pc, #616]	; (801cfc8 <_printf_float+0x2dc>)
 801cd5e:	f04f 32ff 	mov.w	r2, #4294967295
 801cd62:	f7e3 fec5 	bl	8000af0 <__aeabi_dcmple>
 801cd66:	bb48      	cbnz	r0, 801cdbc <_printf_float+0xd0>
 801cd68:	2200      	movs	r2, #0
 801cd6a:	2300      	movs	r3, #0
 801cd6c:	4640      	mov	r0, r8
 801cd6e:	4649      	mov	r1, r9
 801cd70:	f7e3 feb4 	bl	8000adc <__aeabi_dcmplt>
 801cd74:	b110      	cbz	r0, 801cd7c <_printf_float+0x90>
 801cd76:	232d      	movs	r3, #45	; 0x2d
 801cd78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801cd7c:	4b93      	ldr	r3, [pc, #588]	; (801cfcc <_printf_float+0x2e0>)
 801cd7e:	4894      	ldr	r0, [pc, #592]	; (801cfd0 <_printf_float+0x2e4>)
 801cd80:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801cd84:	bf94      	ite	ls
 801cd86:	4698      	movls	r8, r3
 801cd88:	4680      	movhi	r8, r0
 801cd8a:	2303      	movs	r3, #3
 801cd8c:	6123      	str	r3, [r4, #16]
 801cd8e:	9b05      	ldr	r3, [sp, #20]
 801cd90:	f023 0204 	bic.w	r2, r3, #4
 801cd94:	6022      	str	r2, [r4, #0]
 801cd96:	f04f 0900 	mov.w	r9, #0
 801cd9a:	9700      	str	r7, [sp, #0]
 801cd9c:	4633      	mov	r3, r6
 801cd9e:	aa0b      	add	r2, sp, #44	; 0x2c
 801cda0:	4621      	mov	r1, r4
 801cda2:	4628      	mov	r0, r5
 801cda4:	f000 f9d8 	bl	801d158 <_printf_common>
 801cda8:	3001      	adds	r0, #1
 801cdaa:	f040 8090 	bne.w	801cece <_printf_float+0x1e2>
 801cdae:	f04f 30ff 	mov.w	r0, #4294967295
 801cdb2:	b00d      	add	sp, #52	; 0x34
 801cdb4:	ecbd 8b02 	vpop	{d8}
 801cdb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cdbc:	4642      	mov	r2, r8
 801cdbe:	464b      	mov	r3, r9
 801cdc0:	4640      	mov	r0, r8
 801cdc2:	4649      	mov	r1, r9
 801cdc4:	f7e3 feb2 	bl	8000b2c <__aeabi_dcmpun>
 801cdc8:	b140      	cbz	r0, 801cddc <_printf_float+0xf0>
 801cdca:	464b      	mov	r3, r9
 801cdcc:	2b00      	cmp	r3, #0
 801cdce:	bfbc      	itt	lt
 801cdd0:	232d      	movlt	r3, #45	; 0x2d
 801cdd2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801cdd6:	487f      	ldr	r0, [pc, #508]	; (801cfd4 <_printf_float+0x2e8>)
 801cdd8:	4b7f      	ldr	r3, [pc, #508]	; (801cfd8 <_printf_float+0x2ec>)
 801cdda:	e7d1      	b.n	801cd80 <_printf_float+0x94>
 801cddc:	6863      	ldr	r3, [r4, #4]
 801cdde:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801cde2:	9206      	str	r2, [sp, #24]
 801cde4:	1c5a      	adds	r2, r3, #1
 801cde6:	d13f      	bne.n	801ce68 <_printf_float+0x17c>
 801cde8:	2306      	movs	r3, #6
 801cdea:	6063      	str	r3, [r4, #4]
 801cdec:	9b05      	ldr	r3, [sp, #20]
 801cdee:	6861      	ldr	r1, [r4, #4]
 801cdf0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801cdf4:	2300      	movs	r3, #0
 801cdf6:	9303      	str	r3, [sp, #12]
 801cdf8:	ab0a      	add	r3, sp, #40	; 0x28
 801cdfa:	e9cd b301 	strd	fp, r3, [sp, #4]
 801cdfe:	ab09      	add	r3, sp, #36	; 0x24
 801ce00:	ec49 8b10 	vmov	d0, r8, r9
 801ce04:	9300      	str	r3, [sp, #0]
 801ce06:	6022      	str	r2, [r4, #0]
 801ce08:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801ce0c:	4628      	mov	r0, r5
 801ce0e:	f7ff fecd 	bl	801cbac <__cvt>
 801ce12:	9b06      	ldr	r3, [sp, #24]
 801ce14:	9909      	ldr	r1, [sp, #36]	; 0x24
 801ce16:	2b47      	cmp	r3, #71	; 0x47
 801ce18:	4680      	mov	r8, r0
 801ce1a:	d108      	bne.n	801ce2e <_printf_float+0x142>
 801ce1c:	1cc8      	adds	r0, r1, #3
 801ce1e:	db02      	blt.n	801ce26 <_printf_float+0x13a>
 801ce20:	6863      	ldr	r3, [r4, #4]
 801ce22:	4299      	cmp	r1, r3
 801ce24:	dd41      	ble.n	801ceaa <_printf_float+0x1be>
 801ce26:	f1ab 0b02 	sub.w	fp, fp, #2
 801ce2a:	fa5f fb8b 	uxtb.w	fp, fp
 801ce2e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801ce32:	d820      	bhi.n	801ce76 <_printf_float+0x18a>
 801ce34:	3901      	subs	r1, #1
 801ce36:	465a      	mov	r2, fp
 801ce38:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801ce3c:	9109      	str	r1, [sp, #36]	; 0x24
 801ce3e:	f7ff ff17 	bl	801cc70 <__exponent>
 801ce42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ce44:	1813      	adds	r3, r2, r0
 801ce46:	2a01      	cmp	r2, #1
 801ce48:	4681      	mov	r9, r0
 801ce4a:	6123      	str	r3, [r4, #16]
 801ce4c:	dc02      	bgt.n	801ce54 <_printf_float+0x168>
 801ce4e:	6822      	ldr	r2, [r4, #0]
 801ce50:	07d2      	lsls	r2, r2, #31
 801ce52:	d501      	bpl.n	801ce58 <_printf_float+0x16c>
 801ce54:	3301      	adds	r3, #1
 801ce56:	6123      	str	r3, [r4, #16]
 801ce58:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801ce5c:	2b00      	cmp	r3, #0
 801ce5e:	d09c      	beq.n	801cd9a <_printf_float+0xae>
 801ce60:	232d      	movs	r3, #45	; 0x2d
 801ce62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ce66:	e798      	b.n	801cd9a <_printf_float+0xae>
 801ce68:	9a06      	ldr	r2, [sp, #24]
 801ce6a:	2a47      	cmp	r2, #71	; 0x47
 801ce6c:	d1be      	bne.n	801cdec <_printf_float+0x100>
 801ce6e:	2b00      	cmp	r3, #0
 801ce70:	d1bc      	bne.n	801cdec <_printf_float+0x100>
 801ce72:	2301      	movs	r3, #1
 801ce74:	e7b9      	b.n	801cdea <_printf_float+0xfe>
 801ce76:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801ce7a:	d118      	bne.n	801ceae <_printf_float+0x1c2>
 801ce7c:	2900      	cmp	r1, #0
 801ce7e:	6863      	ldr	r3, [r4, #4]
 801ce80:	dd0b      	ble.n	801ce9a <_printf_float+0x1ae>
 801ce82:	6121      	str	r1, [r4, #16]
 801ce84:	b913      	cbnz	r3, 801ce8c <_printf_float+0x1a0>
 801ce86:	6822      	ldr	r2, [r4, #0]
 801ce88:	07d0      	lsls	r0, r2, #31
 801ce8a:	d502      	bpl.n	801ce92 <_printf_float+0x1a6>
 801ce8c:	3301      	adds	r3, #1
 801ce8e:	440b      	add	r3, r1
 801ce90:	6123      	str	r3, [r4, #16]
 801ce92:	65a1      	str	r1, [r4, #88]	; 0x58
 801ce94:	f04f 0900 	mov.w	r9, #0
 801ce98:	e7de      	b.n	801ce58 <_printf_float+0x16c>
 801ce9a:	b913      	cbnz	r3, 801cea2 <_printf_float+0x1b6>
 801ce9c:	6822      	ldr	r2, [r4, #0]
 801ce9e:	07d2      	lsls	r2, r2, #31
 801cea0:	d501      	bpl.n	801cea6 <_printf_float+0x1ba>
 801cea2:	3302      	adds	r3, #2
 801cea4:	e7f4      	b.n	801ce90 <_printf_float+0x1a4>
 801cea6:	2301      	movs	r3, #1
 801cea8:	e7f2      	b.n	801ce90 <_printf_float+0x1a4>
 801ceaa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801ceae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ceb0:	4299      	cmp	r1, r3
 801ceb2:	db05      	blt.n	801cec0 <_printf_float+0x1d4>
 801ceb4:	6823      	ldr	r3, [r4, #0]
 801ceb6:	6121      	str	r1, [r4, #16]
 801ceb8:	07d8      	lsls	r0, r3, #31
 801ceba:	d5ea      	bpl.n	801ce92 <_printf_float+0x1a6>
 801cebc:	1c4b      	adds	r3, r1, #1
 801cebe:	e7e7      	b.n	801ce90 <_printf_float+0x1a4>
 801cec0:	2900      	cmp	r1, #0
 801cec2:	bfd4      	ite	le
 801cec4:	f1c1 0202 	rsble	r2, r1, #2
 801cec8:	2201      	movgt	r2, #1
 801ceca:	4413      	add	r3, r2
 801cecc:	e7e0      	b.n	801ce90 <_printf_float+0x1a4>
 801cece:	6823      	ldr	r3, [r4, #0]
 801ced0:	055a      	lsls	r2, r3, #21
 801ced2:	d407      	bmi.n	801cee4 <_printf_float+0x1f8>
 801ced4:	6923      	ldr	r3, [r4, #16]
 801ced6:	4642      	mov	r2, r8
 801ced8:	4631      	mov	r1, r6
 801ceda:	4628      	mov	r0, r5
 801cedc:	47b8      	blx	r7
 801cede:	3001      	adds	r0, #1
 801cee0:	d12c      	bne.n	801cf3c <_printf_float+0x250>
 801cee2:	e764      	b.n	801cdae <_printf_float+0xc2>
 801cee4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801cee8:	f240 80e0 	bls.w	801d0ac <_printf_float+0x3c0>
 801ceec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801cef0:	2200      	movs	r2, #0
 801cef2:	2300      	movs	r3, #0
 801cef4:	f7e3 fde8 	bl	8000ac8 <__aeabi_dcmpeq>
 801cef8:	2800      	cmp	r0, #0
 801cefa:	d034      	beq.n	801cf66 <_printf_float+0x27a>
 801cefc:	4a37      	ldr	r2, [pc, #220]	; (801cfdc <_printf_float+0x2f0>)
 801cefe:	2301      	movs	r3, #1
 801cf00:	4631      	mov	r1, r6
 801cf02:	4628      	mov	r0, r5
 801cf04:	47b8      	blx	r7
 801cf06:	3001      	adds	r0, #1
 801cf08:	f43f af51 	beq.w	801cdae <_printf_float+0xc2>
 801cf0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801cf10:	429a      	cmp	r2, r3
 801cf12:	db02      	blt.n	801cf1a <_printf_float+0x22e>
 801cf14:	6823      	ldr	r3, [r4, #0]
 801cf16:	07d8      	lsls	r0, r3, #31
 801cf18:	d510      	bpl.n	801cf3c <_printf_float+0x250>
 801cf1a:	ee18 3a10 	vmov	r3, s16
 801cf1e:	4652      	mov	r2, sl
 801cf20:	4631      	mov	r1, r6
 801cf22:	4628      	mov	r0, r5
 801cf24:	47b8      	blx	r7
 801cf26:	3001      	adds	r0, #1
 801cf28:	f43f af41 	beq.w	801cdae <_printf_float+0xc2>
 801cf2c:	f04f 0800 	mov.w	r8, #0
 801cf30:	f104 091a 	add.w	r9, r4, #26
 801cf34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cf36:	3b01      	subs	r3, #1
 801cf38:	4543      	cmp	r3, r8
 801cf3a:	dc09      	bgt.n	801cf50 <_printf_float+0x264>
 801cf3c:	6823      	ldr	r3, [r4, #0]
 801cf3e:	079b      	lsls	r3, r3, #30
 801cf40:	f100 8105 	bmi.w	801d14e <_printf_float+0x462>
 801cf44:	68e0      	ldr	r0, [r4, #12]
 801cf46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cf48:	4298      	cmp	r0, r3
 801cf4a:	bfb8      	it	lt
 801cf4c:	4618      	movlt	r0, r3
 801cf4e:	e730      	b.n	801cdb2 <_printf_float+0xc6>
 801cf50:	2301      	movs	r3, #1
 801cf52:	464a      	mov	r2, r9
 801cf54:	4631      	mov	r1, r6
 801cf56:	4628      	mov	r0, r5
 801cf58:	47b8      	blx	r7
 801cf5a:	3001      	adds	r0, #1
 801cf5c:	f43f af27 	beq.w	801cdae <_printf_float+0xc2>
 801cf60:	f108 0801 	add.w	r8, r8, #1
 801cf64:	e7e6      	b.n	801cf34 <_printf_float+0x248>
 801cf66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cf68:	2b00      	cmp	r3, #0
 801cf6a:	dc39      	bgt.n	801cfe0 <_printf_float+0x2f4>
 801cf6c:	4a1b      	ldr	r2, [pc, #108]	; (801cfdc <_printf_float+0x2f0>)
 801cf6e:	2301      	movs	r3, #1
 801cf70:	4631      	mov	r1, r6
 801cf72:	4628      	mov	r0, r5
 801cf74:	47b8      	blx	r7
 801cf76:	3001      	adds	r0, #1
 801cf78:	f43f af19 	beq.w	801cdae <_printf_float+0xc2>
 801cf7c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801cf80:	4313      	orrs	r3, r2
 801cf82:	d102      	bne.n	801cf8a <_printf_float+0x29e>
 801cf84:	6823      	ldr	r3, [r4, #0]
 801cf86:	07d9      	lsls	r1, r3, #31
 801cf88:	d5d8      	bpl.n	801cf3c <_printf_float+0x250>
 801cf8a:	ee18 3a10 	vmov	r3, s16
 801cf8e:	4652      	mov	r2, sl
 801cf90:	4631      	mov	r1, r6
 801cf92:	4628      	mov	r0, r5
 801cf94:	47b8      	blx	r7
 801cf96:	3001      	adds	r0, #1
 801cf98:	f43f af09 	beq.w	801cdae <_printf_float+0xc2>
 801cf9c:	f04f 0900 	mov.w	r9, #0
 801cfa0:	f104 0a1a 	add.w	sl, r4, #26
 801cfa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cfa6:	425b      	negs	r3, r3
 801cfa8:	454b      	cmp	r3, r9
 801cfaa:	dc01      	bgt.n	801cfb0 <_printf_float+0x2c4>
 801cfac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cfae:	e792      	b.n	801ced6 <_printf_float+0x1ea>
 801cfb0:	2301      	movs	r3, #1
 801cfb2:	4652      	mov	r2, sl
 801cfb4:	4631      	mov	r1, r6
 801cfb6:	4628      	mov	r0, r5
 801cfb8:	47b8      	blx	r7
 801cfba:	3001      	adds	r0, #1
 801cfbc:	f43f aef7 	beq.w	801cdae <_printf_float+0xc2>
 801cfc0:	f109 0901 	add.w	r9, r9, #1
 801cfc4:	e7ee      	b.n	801cfa4 <_printf_float+0x2b8>
 801cfc6:	bf00      	nop
 801cfc8:	7fefffff 	.word	0x7fefffff
 801cfcc:	080228b5 	.word	0x080228b5
 801cfd0:	080228b9 	.word	0x080228b9
 801cfd4:	080228c1 	.word	0x080228c1
 801cfd8:	080228bd 	.word	0x080228bd
 801cfdc:	080228c5 	.word	0x080228c5
 801cfe0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801cfe2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801cfe4:	429a      	cmp	r2, r3
 801cfe6:	bfa8      	it	ge
 801cfe8:	461a      	movge	r2, r3
 801cfea:	2a00      	cmp	r2, #0
 801cfec:	4691      	mov	r9, r2
 801cfee:	dc37      	bgt.n	801d060 <_printf_float+0x374>
 801cff0:	f04f 0b00 	mov.w	fp, #0
 801cff4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801cff8:	f104 021a 	add.w	r2, r4, #26
 801cffc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801cffe:	9305      	str	r3, [sp, #20]
 801d000:	eba3 0309 	sub.w	r3, r3, r9
 801d004:	455b      	cmp	r3, fp
 801d006:	dc33      	bgt.n	801d070 <_printf_float+0x384>
 801d008:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801d00c:	429a      	cmp	r2, r3
 801d00e:	db3b      	blt.n	801d088 <_printf_float+0x39c>
 801d010:	6823      	ldr	r3, [r4, #0]
 801d012:	07da      	lsls	r2, r3, #31
 801d014:	d438      	bmi.n	801d088 <_printf_float+0x39c>
 801d016:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d018:	9a05      	ldr	r2, [sp, #20]
 801d01a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801d01c:	1a9a      	subs	r2, r3, r2
 801d01e:	eba3 0901 	sub.w	r9, r3, r1
 801d022:	4591      	cmp	r9, r2
 801d024:	bfa8      	it	ge
 801d026:	4691      	movge	r9, r2
 801d028:	f1b9 0f00 	cmp.w	r9, #0
 801d02c:	dc35      	bgt.n	801d09a <_printf_float+0x3ae>
 801d02e:	f04f 0800 	mov.w	r8, #0
 801d032:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801d036:	f104 0a1a 	add.w	sl, r4, #26
 801d03a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801d03e:	1a9b      	subs	r3, r3, r2
 801d040:	eba3 0309 	sub.w	r3, r3, r9
 801d044:	4543      	cmp	r3, r8
 801d046:	f77f af79 	ble.w	801cf3c <_printf_float+0x250>
 801d04a:	2301      	movs	r3, #1
 801d04c:	4652      	mov	r2, sl
 801d04e:	4631      	mov	r1, r6
 801d050:	4628      	mov	r0, r5
 801d052:	47b8      	blx	r7
 801d054:	3001      	adds	r0, #1
 801d056:	f43f aeaa 	beq.w	801cdae <_printf_float+0xc2>
 801d05a:	f108 0801 	add.w	r8, r8, #1
 801d05e:	e7ec      	b.n	801d03a <_printf_float+0x34e>
 801d060:	4613      	mov	r3, r2
 801d062:	4631      	mov	r1, r6
 801d064:	4642      	mov	r2, r8
 801d066:	4628      	mov	r0, r5
 801d068:	47b8      	blx	r7
 801d06a:	3001      	adds	r0, #1
 801d06c:	d1c0      	bne.n	801cff0 <_printf_float+0x304>
 801d06e:	e69e      	b.n	801cdae <_printf_float+0xc2>
 801d070:	2301      	movs	r3, #1
 801d072:	4631      	mov	r1, r6
 801d074:	4628      	mov	r0, r5
 801d076:	9205      	str	r2, [sp, #20]
 801d078:	47b8      	blx	r7
 801d07a:	3001      	adds	r0, #1
 801d07c:	f43f ae97 	beq.w	801cdae <_printf_float+0xc2>
 801d080:	9a05      	ldr	r2, [sp, #20]
 801d082:	f10b 0b01 	add.w	fp, fp, #1
 801d086:	e7b9      	b.n	801cffc <_printf_float+0x310>
 801d088:	ee18 3a10 	vmov	r3, s16
 801d08c:	4652      	mov	r2, sl
 801d08e:	4631      	mov	r1, r6
 801d090:	4628      	mov	r0, r5
 801d092:	47b8      	blx	r7
 801d094:	3001      	adds	r0, #1
 801d096:	d1be      	bne.n	801d016 <_printf_float+0x32a>
 801d098:	e689      	b.n	801cdae <_printf_float+0xc2>
 801d09a:	9a05      	ldr	r2, [sp, #20]
 801d09c:	464b      	mov	r3, r9
 801d09e:	4442      	add	r2, r8
 801d0a0:	4631      	mov	r1, r6
 801d0a2:	4628      	mov	r0, r5
 801d0a4:	47b8      	blx	r7
 801d0a6:	3001      	adds	r0, #1
 801d0a8:	d1c1      	bne.n	801d02e <_printf_float+0x342>
 801d0aa:	e680      	b.n	801cdae <_printf_float+0xc2>
 801d0ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d0ae:	2a01      	cmp	r2, #1
 801d0b0:	dc01      	bgt.n	801d0b6 <_printf_float+0x3ca>
 801d0b2:	07db      	lsls	r3, r3, #31
 801d0b4:	d538      	bpl.n	801d128 <_printf_float+0x43c>
 801d0b6:	2301      	movs	r3, #1
 801d0b8:	4642      	mov	r2, r8
 801d0ba:	4631      	mov	r1, r6
 801d0bc:	4628      	mov	r0, r5
 801d0be:	47b8      	blx	r7
 801d0c0:	3001      	adds	r0, #1
 801d0c2:	f43f ae74 	beq.w	801cdae <_printf_float+0xc2>
 801d0c6:	ee18 3a10 	vmov	r3, s16
 801d0ca:	4652      	mov	r2, sl
 801d0cc:	4631      	mov	r1, r6
 801d0ce:	4628      	mov	r0, r5
 801d0d0:	47b8      	blx	r7
 801d0d2:	3001      	adds	r0, #1
 801d0d4:	f43f ae6b 	beq.w	801cdae <_printf_float+0xc2>
 801d0d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801d0dc:	2200      	movs	r2, #0
 801d0de:	2300      	movs	r3, #0
 801d0e0:	f7e3 fcf2 	bl	8000ac8 <__aeabi_dcmpeq>
 801d0e4:	b9d8      	cbnz	r0, 801d11e <_printf_float+0x432>
 801d0e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d0e8:	f108 0201 	add.w	r2, r8, #1
 801d0ec:	3b01      	subs	r3, #1
 801d0ee:	4631      	mov	r1, r6
 801d0f0:	4628      	mov	r0, r5
 801d0f2:	47b8      	blx	r7
 801d0f4:	3001      	adds	r0, #1
 801d0f6:	d10e      	bne.n	801d116 <_printf_float+0x42a>
 801d0f8:	e659      	b.n	801cdae <_printf_float+0xc2>
 801d0fa:	2301      	movs	r3, #1
 801d0fc:	4652      	mov	r2, sl
 801d0fe:	4631      	mov	r1, r6
 801d100:	4628      	mov	r0, r5
 801d102:	47b8      	blx	r7
 801d104:	3001      	adds	r0, #1
 801d106:	f43f ae52 	beq.w	801cdae <_printf_float+0xc2>
 801d10a:	f108 0801 	add.w	r8, r8, #1
 801d10e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d110:	3b01      	subs	r3, #1
 801d112:	4543      	cmp	r3, r8
 801d114:	dcf1      	bgt.n	801d0fa <_printf_float+0x40e>
 801d116:	464b      	mov	r3, r9
 801d118:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801d11c:	e6dc      	b.n	801ced8 <_printf_float+0x1ec>
 801d11e:	f04f 0800 	mov.w	r8, #0
 801d122:	f104 0a1a 	add.w	sl, r4, #26
 801d126:	e7f2      	b.n	801d10e <_printf_float+0x422>
 801d128:	2301      	movs	r3, #1
 801d12a:	4642      	mov	r2, r8
 801d12c:	e7df      	b.n	801d0ee <_printf_float+0x402>
 801d12e:	2301      	movs	r3, #1
 801d130:	464a      	mov	r2, r9
 801d132:	4631      	mov	r1, r6
 801d134:	4628      	mov	r0, r5
 801d136:	47b8      	blx	r7
 801d138:	3001      	adds	r0, #1
 801d13a:	f43f ae38 	beq.w	801cdae <_printf_float+0xc2>
 801d13e:	f108 0801 	add.w	r8, r8, #1
 801d142:	68e3      	ldr	r3, [r4, #12]
 801d144:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801d146:	1a5b      	subs	r3, r3, r1
 801d148:	4543      	cmp	r3, r8
 801d14a:	dcf0      	bgt.n	801d12e <_printf_float+0x442>
 801d14c:	e6fa      	b.n	801cf44 <_printf_float+0x258>
 801d14e:	f04f 0800 	mov.w	r8, #0
 801d152:	f104 0919 	add.w	r9, r4, #25
 801d156:	e7f4      	b.n	801d142 <_printf_float+0x456>

0801d158 <_printf_common>:
 801d158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d15c:	4616      	mov	r6, r2
 801d15e:	4699      	mov	r9, r3
 801d160:	688a      	ldr	r2, [r1, #8]
 801d162:	690b      	ldr	r3, [r1, #16]
 801d164:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801d168:	4293      	cmp	r3, r2
 801d16a:	bfb8      	it	lt
 801d16c:	4613      	movlt	r3, r2
 801d16e:	6033      	str	r3, [r6, #0]
 801d170:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801d174:	4607      	mov	r7, r0
 801d176:	460c      	mov	r4, r1
 801d178:	b10a      	cbz	r2, 801d17e <_printf_common+0x26>
 801d17a:	3301      	adds	r3, #1
 801d17c:	6033      	str	r3, [r6, #0]
 801d17e:	6823      	ldr	r3, [r4, #0]
 801d180:	0699      	lsls	r1, r3, #26
 801d182:	bf42      	ittt	mi
 801d184:	6833      	ldrmi	r3, [r6, #0]
 801d186:	3302      	addmi	r3, #2
 801d188:	6033      	strmi	r3, [r6, #0]
 801d18a:	6825      	ldr	r5, [r4, #0]
 801d18c:	f015 0506 	ands.w	r5, r5, #6
 801d190:	d106      	bne.n	801d1a0 <_printf_common+0x48>
 801d192:	f104 0a19 	add.w	sl, r4, #25
 801d196:	68e3      	ldr	r3, [r4, #12]
 801d198:	6832      	ldr	r2, [r6, #0]
 801d19a:	1a9b      	subs	r3, r3, r2
 801d19c:	42ab      	cmp	r3, r5
 801d19e:	dc26      	bgt.n	801d1ee <_printf_common+0x96>
 801d1a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801d1a4:	1e13      	subs	r3, r2, #0
 801d1a6:	6822      	ldr	r2, [r4, #0]
 801d1a8:	bf18      	it	ne
 801d1aa:	2301      	movne	r3, #1
 801d1ac:	0692      	lsls	r2, r2, #26
 801d1ae:	d42b      	bmi.n	801d208 <_printf_common+0xb0>
 801d1b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801d1b4:	4649      	mov	r1, r9
 801d1b6:	4638      	mov	r0, r7
 801d1b8:	47c0      	blx	r8
 801d1ba:	3001      	adds	r0, #1
 801d1bc:	d01e      	beq.n	801d1fc <_printf_common+0xa4>
 801d1be:	6823      	ldr	r3, [r4, #0]
 801d1c0:	68e5      	ldr	r5, [r4, #12]
 801d1c2:	6832      	ldr	r2, [r6, #0]
 801d1c4:	f003 0306 	and.w	r3, r3, #6
 801d1c8:	2b04      	cmp	r3, #4
 801d1ca:	bf08      	it	eq
 801d1cc:	1aad      	subeq	r5, r5, r2
 801d1ce:	68a3      	ldr	r3, [r4, #8]
 801d1d0:	6922      	ldr	r2, [r4, #16]
 801d1d2:	bf0c      	ite	eq
 801d1d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801d1d8:	2500      	movne	r5, #0
 801d1da:	4293      	cmp	r3, r2
 801d1dc:	bfc4      	itt	gt
 801d1de:	1a9b      	subgt	r3, r3, r2
 801d1e0:	18ed      	addgt	r5, r5, r3
 801d1e2:	2600      	movs	r6, #0
 801d1e4:	341a      	adds	r4, #26
 801d1e6:	42b5      	cmp	r5, r6
 801d1e8:	d11a      	bne.n	801d220 <_printf_common+0xc8>
 801d1ea:	2000      	movs	r0, #0
 801d1ec:	e008      	b.n	801d200 <_printf_common+0xa8>
 801d1ee:	2301      	movs	r3, #1
 801d1f0:	4652      	mov	r2, sl
 801d1f2:	4649      	mov	r1, r9
 801d1f4:	4638      	mov	r0, r7
 801d1f6:	47c0      	blx	r8
 801d1f8:	3001      	adds	r0, #1
 801d1fa:	d103      	bne.n	801d204 <_printf_common+0xac>
 801d1fc:	f04f 30ff 	mov.w	r0, #4294967295
 801d200:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d204:	3501      	adds	r5, #1
 801d206:	e7c6      	b.n	801d196 <_printf_common+0x3e>
 801d208:	18e1      	adds	r1, r4, r3
 801d20a:	1c5a      	adds	r2, r3, #1
 801d20c:	2030      	movs	r0, #48	; 0x30
 801d20e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801d212:	4422      	add	r2, r4
 801d214:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801d218:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801d21c:	3302      	adds	r3, #2
 801d21e:	e7c7      	b.n	801d1b0 <_printf_common+0x58>
 801d220:	2301      	movs	r3, #1
 801d222:	4622      	mov	r2, r4
 801d224:	4649      	mov	r1, r9
 801d226:	4638      	mov	r0, r7
 801d228:	47c0      	blx	r8
 801d22a:	3001      	adds	r0, #1
 801d22c:	d0e6      	beq.n	801d1fc <_printf_common+0xa4>
 801d22e:	3601      	adds	r6, #1
 801d230:	e7d9      	b.n	801d1e6 <_printf_common+0x8e>
	...

0801d234 <_printf_i>:
 801d234:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801d238:	7e0f      	ldrb	r7, [r1, #24]
 801d23a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801d23c:	2f78      	cmp	r7, #120	; 0x78
 801d23e:	4691      	mov	r9, r2
 801d240:	4680      	mov	r8, r0
 801d242:	460c      	mov	r4, r1
 801d244:	469a      	mov	sl, r3
 801d246:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801d24a:	d807      	bhi.n	801d25c <_printf_i+0x28>
 801d24c:	2f62      	cmp	r7, #98	; 0x62
 801d24e:	d80a      	bhi.n	801d266 <_printf_i+0x32>
 801d250:	2f00      	cmp	r7, #0
 801d252:	f000 80d8 	beq.w	801d406 <_printf_i+0x1d2>
 801d256:	2f58      	cmp	r7, #88	; 0x58
 801d258:	f000 80a3 	beq.w	801d3a2 <_printf_i+0x16e>
 801d25c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801d260:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801d264:	e03a      	b.n	801d2dc <_printf_i+0xa8>
 801d266:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801d26a:	2b15      	cmp	r3, #21
 801d26c:	d8f6      	bhi.n	801d25c <_printf_i+0x28>
 801d26e:	a101      	add	r1, pc, #4	; (adr r1, 801d274 <_printf_i+0x40>)
 801d270:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801d274:	0801d2cd 	.word	0x0801d2cd
 801d278:	0801d2e1 	.word	0x0801d2e1
 801d27c:	0801d25d 	.word	0x0801d25d
 801d280:	0801d25d 	.word	0x0801d25d
 801d284:	0801d25d 	.word	0x0801d25d
 801d288:	0801d25d 	.word	0x0801d25d
 801d28c:	0801d2e1 	.word	0x0801d2e1
 801d290:	0801d25d 	.word	0x0801d25d
 801d294:	0801d25d 	.word	0x0801d25d
 801d298:	0801d25d 	.word	0x0801d25d
 801d29c:	0801d25d 	.word	0x0801d25d
 801d2a0:	0801d3ed 	.word	0x0801d3ed
 801d2a4:	0801d311 	.word	0x0801d311
 801d2a8:	0801d3cf 	.word	0x0801d3cf
 801d2ac:	0801d25d 	.word	0x0801d25d
 801d2b0:	0801d25d 	.word	0x0801d25d
 801d2b4:	0801d40f 	.word	0x0801d40f
 801d2b8:	0801d25d 	.word	0x0801d25d
 801d2bc:	0801d311 	.word	0x0801d311
 801d2c0:	0801d25d 	.word	0x0801d25d
 801d2c4:	0801d25d 	.word	0x0801d25d
 801d2c8:	0801d3d7 	.word	0x0801d3d7
 801d2cc:	682b      	ldr	r3, [r5, #0]
 801d2ce:	1d1a      	adds	r2, r3, #4
 801d2d0:	681b      	ldr	r3, [r3, #0]
 801d2d2:	602a      	str	r2, [r5, #0]
 801d2d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801d2d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801d2dc:	2301      	movs	r3, #1
 801d2de:	e0a3      	b.n	801d428 <_printf_i+0x1f4>
 801d2e0:	6820      	ldr	r0, [r4, #0]
 801d2e2:	6829      	ldr	r1, [r5, #0]
 801d2e4:	0606      	lsls	r6, r0, #24
 801d2e6:	f101 0304 	add.w	r3, r1, #4
 801d2ea:	d50a      	bpl.n	801d302 <_printf_i+0xce>
 801d2ec:	680e      	ldr	r6, [r1, #0]
 801d2ee:	602b      	str	r3, [r5, #0]
 801d2f0:	2e00      	cmp	r6, #0
 801d2f2:	da03      	bge.n	801d2fc <_printf_i+0xc8>
 801d2f4:	232d      	movs	r3, #45	; 0x2d
 801d2f6:	4276      	negs	r6, r6
 801d2f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801d2fc:	485e      	ldr	r0, [pc, #376]	; (801d478 <_printf_i+0x244>)
 801d2fe:	230a      	movs	r3, #10
 801d300:	e019      	b.n	801d336 <_printf_i+0x102>
 801d302:	680e      	ldr	r6, [r1, #0]
 801d304:	602b      	str	r3, [r5, #0]
 801d306:	f010 0f40 	tst.w	r0, #64	; 0x40
 801d30a:	bf18      	it	ne
 801d30c:	b236      	sxthne	r6, r6
 801d30e:	e7ef      	b.n	801d2f0 <_printf_i+0xbc>
 801d310:	682b      	ldr	r3, [r5, #0]
 801d312:	6820      	ldr	r0, [r4, #0]
 801d314:	1d19      	adds	r1, r3, #4
 801d316:	6029      	str	r1, [r5, #0]
 801d318:	0601      	lsls	r1, r0, #24
 801d31a:	d501      	bpl.n	801d320 <_printf_i+0xec>
 801d31c:	681e      	ldr	r6, [r3, #0]
 801d31e:	e002      	b.n	801d326 <_printf_i+0xf2>
 801d320:	0646      	lsls	r6, r0, #25
 801d322:	d5fb      	bpl.n	801d31c <_printf_i+0xe8>
 801d324:	881e      	ldrh	r6, [r3, #0]
 801d326:	4854      	ldr	r0, [pc, #336]	; (801d478 <_printf_i+0x244>)
 801d328:	2f6f      	cmp	r7, #111	; 0x6f
 801d32a:	bf0c      	ite	eq
 801d32c:	2308      	moveq	r3, #8
 801d32e:	230a      	movne	r3, #10
 801d330:	2100      	movs	r1, #0
 801d332:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801d336:	6865      	ldr	r5, [r4, #4]
 801d338:	60a5      	str	r5, [r4, #8]
 801d33a:	2d00      	cmp	r5, #0
 801d33c:	bfa2      	ittt	ge
 801d33e:	6821      	ldrge	r1, [r4, #0]
 801d340:	f021 0104 	bicge.w	r1, r1, #4
 801d344:	6021      	strge	r1, [r4, #0]
 801d346:	b90e      	cbnz	r6, 801d34c <_printf_i+0x118>
 801d348:	2d00      	cmp	r5, #0
 801d34a:	d04d      	beq.n	801d3e8 <_printf_i+0x1b4>
 801d34c:	4615      	mov	r5, r2
 801d34e:	fbb6 f1f3 	udiv	r1, r6, r3
 801d352:	fb03 6711 	mls	r7, r3, r1, r6
 801d356:	5dc7      	ldrb	r7, [r0, r7]
 801d358:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801d35c:	4637      	mov	r7, r6
 801d35e:	42bb      	cmp	r3, r7
 801d360:	460e      	mov	r6, r1
 801d362:	d9f4      	bls.n	801d34e <_printf_i+0x11a>
 801d364:	2b08      	cmp	r3, #8
 801d366:	d10b      	bne.n	801d380 <_printf_i+0x14c>
 801d368:	6823      	ldr	r3, [r4, #0]
 801d36a:	07de      	lsls	r6, r3, #31
 801d36c:	d508      	bpl.n	801d380 <_printf_i+0x14c>
 801d36e:	6923      	ldr	r3, [r4, #16]
 801d370:	6861      	ldr	r1, [r4, #4]
 801d372:	4299      	cmp	r1, r3
 801d374:	bfde      	ittt	le
 801d376:	2330      	movle	r3, #48	; 0x30
 801d378:	f805 3c01 	strble.w	r3, [r5, #-1]
 801d37c:	f105 35ff 	addle.w	r5, r5, #4294967295
 801d380:	1b52      	subs	r2, r2, r5
 801d382:	6122      	str	r2, [r4, #16]
 801d384:	f8cd a000 	str.w	sl, [sp]
 801d388:	464b      	mov	r3, r9
 801d38a:	aa03      	add	r2, sp, #12
 801d38c:	4621      	mov	r1, r4
 801d38e:	4640      	mov	r0, r8
 801d390:	f7ff fee2 	bl	801d158 <_printf_common>
 801d394:	3001      	adds	r0, #1
 801d396:	d14c      	bne.n	801d432 <_printf_i+0x1fe>
 801d398:	f04f 30ff 	mov.w	r0, #4294967295
 801d39c:	b004      	add	sp, #16
 801d39e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d3a2:	4835      	ldr	r0, [pc, #212]	; (801d478 <_printf_i+0x244>)
 801d3a4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801d3a8:	6829      	ldr	r1, [r5, #0]
 801d3aa:	6823      	ldr	r3, [r4, #0]
 801d3ac:	f851 6b04 	ldr.w	r6, [r1], #4
 801d3b0:	6029      	str	r1, [r5, #0]
 801d3b2:	061d      	lsls	r5, r3, #24
 801d3b4:	d514      	bpl.n	801d3e0 <_printf_i+0x1ac>
 801d3b6:	07df      	lsls	r7, r3, #31
 801d3b8:	bf44      	itt	mi
 801d3ba:	f043 0320 	orrmi.w	r3, r3, #32
 801d3be:	6023      	strmi	r3, [r4, #0]
 801d3c0:	b91e      	cbnz	r6, 801d3ca <_printf_i+0x196>
 801d3c2:	6823      	ldr	r3, [r4, #0]
 801d3c4:	f023 0320 	bic.w	r3, r3, #32
 801d3c8:	6023      	str	r3, [r4, #0]
 801d3ca:	2310      	movs	r3, #16
 801d3cc:	e7b0      	b.n	801d330 <_printf_i+0xfc>
 801d3ce:	6823      	ldr	r3, [r4, #0]
 801d3d0:	f043 0320 	orr.w	r3, r3, #32
 801d3d4:	6023      	str	r3, [r4, #0]
 801d3d6:	2378      	movs	r3, #120	; 0x78
 801d3d8:	4828      	ldr	r0, [pc, #160]	; (801d47c <_printf_i+0x248>)
 801d3da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801d3de:	e7e3      	b.n	801d3a8 <_printf_i+0x174>
 801d3e0:	0659      	lsls	r1, r3, #25
 801d3e2:	bf48      	it	mi
 801d3e4:	b2b6      	uxthmi	r6, r6
 801d3e6:	e7e6      	b.n	801d3b6 <_printf_i+0x182>
 801d3e8:	4615      	mov	r5, r2
 801d3ea:	e7bb      	b.n	801d364 <_printf_i+0x130>
 801d3ec:	682b      	ldr	r3, [r5, #0]
 801d3ee:	6826      	ldr	r6, [r4, #0]
 801d3f0:	6961      	ldr	r1, [r4, #20]
 801d3f2:	1d18      	adds	r0, r3, #4
 801d3f4:	6028      	str	r0, [r5, #0]
 801d3f6:	0635      	lsls	r5, r6, #24
 801d3f8:	681b      	ldr	r3, [r3, #0]
 801d3fa:	d501      	bpl.n	801d400 <_printf_i+0x1cc>
 801d3fc:	6019      	str	r1, [r3, #0]
 801d3fe:	e002      	b.n	801d406 <_printf_i+0x1d2>
 801d400:	0670      	lsls	r0, r6, #25
 801d402:	d5fb      	bpl.n	801d3fc <_printf_i+0x1c8>
 801d404:	8019      	strh	r1, [r3, #0]
 801d406:	2300      	movs	r3, #0
 801d408:	6123      	str	r3, [r4, #16]
 801d40a:	4615      	mov	r5, r2
 801d40c:	e7ba      	b.n	801d384 <_printf_i+0x150>
 801d40e:	682b      	ldr	r3, [r5, #0]
 801d410:	1d1a      	adds	r2, r3, #4
 801d412:	602a      	str	r2, [r5, #0]
 801d414:	681d      	ldr	r5, [r3, #0]
 801d416:	6862      	ldr	r2, [r4, #4]
 801d418:	2100      	movs	r1, #0
 801d41a:	4628      	mov	r0, r5
 801d41c:	f7e2 fee0 	bl	80001e0 <memchr>
 801d420:	b108      	cbz	r0, 801d426 <_printf_i+0x1f2>
 801d422:	1b40      	subs	r0, r0, r5
 801d424:	6060      	str	r0, [r4, #4]
 801d426:	6863      	ldr	r3, [r4, #4]
 801d428:	6123      	str	r3, [r4, #16]
 801d42a:	2300      	movs	r3, #0
 801d42c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801d430:	e7a8      	b.n	801d384 <_printf_i+0x150>
 801d432:	6923      	ldr	r3, [r4, #16]
 801d434:	462a      	mov	r2, r5
 801d436:	4649      	mov	r1, r9
 801d438:	4640      	mov	r0, r8
 801d43a:	47d0      	blx	sl
 801d43c:	3001      	adds	r0, #1
 801d43e:	d0ab      	beq.n	801d398 <_printf_i+0x164>
 801d440:	6823      	ldr	r3, [r4, #0]
 801d442:	079b      	lsls	r3, r3, #30
 801d444:	d413      	bmi.n	801d46e <_printf_i+0x23a>
 801d446:	68e0      	ldr	r0, [r4, #12]
 801d448:	9b03      	ldr	r3, [sp, #12]
 801d44a:	4298      	cmp	r0, r3
 801d44c:	bfb8      	it	lt
 801d44e:	4618      	movlt	r0, r3
 801d450:	e7a4      	b.n	801d39c <_printf_i+0x168>
 801d452:	2301      	movs	r3, #1
 801d454:	4632      	mov	r2, r6
 801d456:	4649      	mov	r1, r9
 801d458:	4640      	mov	r0, r8
 801d45a:	47d0      	blx	sl
 801d45c:	3001      	adds	r0, #1
 801d45e:	d09b      	beq.n	801d398 <_printf_i+0x164>
 801d460:	3501      	adds	r5, #1
 801d462:	68e3      	ldr	r3, [r4, #12]
 801d464:	9903      	ldr	r1, [sp, #12]
 801d466:	1a5b      	subs	r3, r3, r1
 801d468:	42ab      	cmp	r3, r5
 801d46a:	dcf2      	bgt.n	801d452 <_printf_i+0x21e>
 801d46c:	e7eb      	b.n	801d446 <_printf_i+0x212>
 801d46e:	2500      	movs	r5, #0
 801d470:	f104 0619 	add.w	r6, r4, #25
 801d474:	e7f5      	b.n	801d462 <_printf_i+0x22e>
 801d476:	bf00      	nop
 801d478:	080228c7 	.word	0x080228c7
 801d47c:	080228d8 	.word	0x080228d8

0801d480 <iprintf>:
 801d480:	b40f      	push	{r0, r1, r2, r3}
 801d482:	4b0a      	ldr	r3, [pc, #40]	; (801d4ac <iprintf+0x2c>)
 801d484:	b513      	push	{r0, r1, r4, lr}
 801d486:	681c      	ldr	r4, [r3, #0]
 801d488:	b124      	cbz	r4, 801d494 <iprintf+0x14>
 801d48a:	69a3      	ldr	r3, [r4, #24]
 801d48c:	b913      	cbnz	r3, 801d494 <iprintf+0x14>
 801d48e:	4620      	mov	r0, r4
 801d490:	f001 f9aa 	bl	801e7e8 <__sinit>
 801d494:	ab05      	add	r3, sp, #20
 801d496:	9a04      	ldr	r2, [sp, #16]
 801d498:	68a1      	ldr	r1, [r4, #8]
 801d49a:	9301      	str	r3, [sp, #4]
 801d49c:	4620      	mov	r0, r4
 801d49e:	f7ff fa55 	bl	801c94c <_vfiprintf_r>
 801d4a2:	b002      	add	sp, #8
 801d4a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d4a8:	b004      	add	sp, #16
 801d4aa:	4770      	bx	lr
 801d4ac:	10000024 	.word	0x10000024

0801d4b0 <_puts_r>:
 801d4b0:	b570      	push	{r4, r5, r6, lr}
 801d4b2:	460e      	mov	r6, r1
 801d4b4:	4605      	mov	r5, r0
 801d4b6:	b118      	cbz	r0, 801d4c0 <_puts_r+0x10>
 801d4b8:	6983      	ldr	r3, [r0, #24]
 801d4ba:	b90b      	cbnz	r3, 801d4c0 <_puts_r+0x10>
 801d4bc:	f001 f994 	bl	801e7e8 <__sinit>
 801d4c0:	69ab      	ldr	r3, [r5, #24]
 801d4c2:	68ac      	ldr	r4, [r5, #8]
 801d4c4:	b913      	cbnz	r3, 801d4cc <_puts_r+0x1c>
 801d4c6:	4628      	mov	r0, r5
 801d4c8:	f001 f98e 	bl	801e7e8 <__sinit>
 801d4cc:	4b2c      	ldr	r3, [pc, #176]	; (801d580 <_puts_r+0xd0>)
 801d4ce:	429c      	cmp	r4, r3
 801d4d0:	d120      	bne.n	801d514 <_puts_r+0x64>
 801d4d2:	686c      	ldr	r4, [r5, #4]
 801d4d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d4d6:	07db      	lsls	r3, r3, #31
 801d4d8:	d405      	bmi.n	801d4e6 <_puts_r+0x36>
 801d4da:	89a3      	ldrh	r3, [r4, #12]
 801d4dc:	0598      	lsls	r0, r3, #22
 801d4de:	d402      	bmi.n	801d4e6 <_puts_r+0x36>
 801d4e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d4e2:	f001 fa24 	bl	801e92e <__retarget_lock_acquire_recursive>
 801d4e6:	89a3      	ldrh	r3, [r4, #12]
 801d4e8:	0719      	lsls	r1, r3, #28
 801d4ea:	d51d      	bpl.n	801d528 <_puts_r+0x78>
 801d4ec:	6923      	ldr	r3, [r4, #16]
 801d4ee:	b1db      	cbz	r3, 801d528 <_puts_r+0x78>
 801d4f0:	3e01      	subs	r6, #1
 801d4f2:	68a3      	ldr	r3, [r4, #8]
 801d4f4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801d4f8:	3b01      	subs	r3, #1
 801d4fa:	60a3      	str	r3, [r4, #8]
 801d4fc:	bb39      	cbnz	r1, 801d54e <_puts_r+0x9e>
 801d4fe:	2b00      	cmp	r3, #0
 801d500:	da38      	bge.n	801d574 <_puts_r+0xc4>
 801d502:	4622      	mov	r2, r4
 801d504:	210a      	movs	r1, #10
 801d506:	4628      	mov	r0, r5
 801d508:	f000 f8da 	bl	801d6c0 <__swbuf_r>
 801d50c:	3001      	adds	r0, #1
 801d50e:	d011      	beq.n	801d534 <_puts_r+0x84>
 801d510:	250a      	movs	r5, #10
 801d512:	e011      	b.n	801d538 <_puts_r+0x88>
 801d514:	4b1b      	ldr	r3, [pc, #108]	; (801d584 <_puts_r+0xd4>)
 801d516:	429c      	cmp	r4, r3
 801d518:	d101      	bne.n	801d51e <_puts_r+0x6e>
 801d51a:	68ac      	ldr	r4, [r5, #8]
 801d51c:	e7da      	b.n	801d4d4 <_puts_r+0x24>
 801d51e:	4b1a      	ldr	r3, [pc, #104]	; (801d588 <_puts_r+0xd8>)
 801d520:	429c      	cmp	r4, r3
 801d522:	bf08      	it	eq
 801d524:	68ec      	ldreq	r4, [r5, #12]
 801d526:	e7d5      	b.n	801d4d4 <_puts_r+0x24>
 801d528:	4621      	mov	r1, r4
 801d52a:	4628      	mov	r0, r5
 801d52c:	f000 f92c 	bl	801d788 <__swsetup_r>
 801d530:	2800      	cmp	r0, #0
 801d532:	d0dd      	beq.n	801d4f0 <_puts_r+0x40>
 801d534:	f04f 35ff 	mov.w	r5, #4294967295
 801d538:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d53a:	07da      	lsls	r2, r3, #31
 801d53c:	d405      	bmi.n	801d54a <_puts_r+0x9a>
 801d53e:	89a3      	ldrh	r3, [r4, #12]
 801d540:	059b      	lsls	r3, r3, #22
 801d542:	d402      	bmi.n	801d54a <_puts_r+0x9a>
 801d544:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d546:	f001 f9f3 	bl	801e930 <__retarget_lock_release_recursive>
 801d54a:	4628      	mov	r0, r5
 801d54c:	bd70      	pop	{r4, r5, r6, pc}
 801d54e:	2b00      	cmp	r3, #0
 801d550:	da04      	bge.n	801d55c <_puts_r+0xac>
 801d552:	69a2      	ldr	r2, [r4, #24]
 801d554:	429a      	cmp	r2, r3
 801d556:	dc06      	bgt.n	801d566 <_puts_r+0xb6>
 801d558:	290a      	cmp	r1, #10
 801d55a:	d004      	beq.n	801d566 <_puts_r+0xb6>
 801d55c:	6823      	ldr	r3, [r4, #0]
 801d55e:	1c5a      	adds	r2, r3, #1
 801d560:	6022      	str	r2, [r4, #0]
 801d562:	7019      	strb	r1, [r3, #0]
 801d564:	e7c5      	b.n	801d4f2 <_puts_r+0x42>
 801d566:	4622      	mov	r2, r4
 801d568:	4628      	mov	r0, r5
 801d56a:	f000 f8a9 	bl	801d6c0 <__swbuf_r>
 801d56e:	3001      	adds	r0, #1
 801d570:	d1bf      	bne.n	801d4f2 <_puts_r+0x42>
 801d572:	e7df      	b.n	801d534 <_puts_r+0x84>
 801d574:	6823      	ldr	r3, [r4, #0]
 801d576:	250a      	movs	r5, #10
 801d578:	1c5a      	adds	r2, r3, #1
 801d57a:	6022      	str	r2, [r4, #0]
 801d57c:	701d      	strb	r5, [r3, #0]
 801d57e:	e7db      	b.n	801d538 <_puts_r+0x88>
 801d580:	08022a30 	.word	0x08022a30
 801d584:	08022a50 	.word	0x08022a50
 801d588:	08022a10 	.word	0x08022a10

0801d58c <puts>:
 801d58c:	4b02      	ldr	r3, [pc, #8]	; (801d598 <puts+0xc>)
 801d58e:	4601      	mov	r1, r0
 801d590:	6818      	ldr	r0, [r3, #0]
 801d592:	f7ff bf8d 	b.w	801d4b0 <_puts_r>
 801d596:	bf00      	nop
 801d598:	10000024 	.word	0x10000024

0801d59c <rand>:
 801d59c:	4b16      	ldr	r3, [pc, #88]	; (801d5f8 <rand+0x5c>)
 801d59e:	b510      	push	{r4, lr}
 801d5a0:	681c      	ldr	r4, [r3, #0]
 801d5a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801d5a4:	b9b3      	cbnz	r3, 801d5d4 <rand+0x38>
 801d5a6:	2018      	movs	r0, #24
 801d5a8:	f7ff f898 	bl	801c6dc <malloc>
 801d5ac:	63a0      	str	r0, [r4, #56]	; 0x38
 801d5ae:	b928      	cbnz	r0, 801d5bc <rand+0x20>
 801d5b0:	4602      	mov	r2, r0
 801d5b2:	4b12      	ldr	r3, [pc, #72]	; (801d5fc <rand+0x60>)
 801d5b4:	4812      	ldr	r0, [pc, #72]	; (801d600 <rand+0x64>)
 801d5b6:	214e      	movs	r1, #78	; 0x4e
 801d5b8:	f000 f954 	bl	801d864 <__assert_func>
 801d5bc:	4a11      	ldr	r2, [pc, #68]	; (801d604 <rand+0x68>)
 801d5be:	4b12      	ldr	r3, [pc, #72]	; (801d608 <rand+0x6c>)
 801d5c0:	e9c0 2300 	strd	r2, r3, [r0]
 801d5c4:	4b11      	ldr	r3, [pc, #68]	; (801d60c <rand+0x70>)
 801d5c6:	6083      	str	r3, [r0, #8]
 801d5c8:	230b      	movs	r3, #11
 801d5ca:	8183      	strh	r3, [r0, #12]
 801d5cc:	2201      	movs	r2, #1
 801d5ce:	2300      	movs	r3, #0
 801d5d0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801d5d4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 801d5d6:	4a0e      	ldr	r2, [pc, #56]	; (801d610 <rand+0x74>)
 801d5d8:	6920      	ldr	r0, [r4, #16]
 801d5da:	6963      	ldr	r3, [r4, #20]
 801d5dc:	490d      	ldr	r1, [pc, #52]	; (801d614 <rand+0x78>)
 801d5de:	4342      	muls	r2, r0
 801d5e0:	fb01 2203 	mla	r2, r1, r3, r2
 801d5e4:	fba0 0101 	umull	r0, r1, r0, r1
 801d5e8:	1c43      	adds	r3, r0, #1
 801d5ea:	eb42 0001 	adc.w	r0, r2, r1
 801d5ee:	e9c4 3004 	strd	r3, r0, [r4, #16]
 801d5f2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801d5f6:	bd10      	pop	{r4, pc}
 801d5f8:	10000024 	.word	0x10000024
 801d5fc:	080228e9 	.word	0x080228e9
 801d600:	08022900 	.word	0x08022900
 801d604:	abcd330e 	.word	0xabcd330e
 801d608:	e66d1234 	.word	0xe66d1234
 801d60c:	0005deec 	.word	0x0005deec
 801d610:	5851f42d 	.word	0x5851f42d
 801d614:	4c957f2d 	.word	0x4c957f2d

0801d618 <_sbrk_r>:
 801d618:	b538      	push	{r3, r4, r5, lr}
 801d61a:	4d06      	ldr	r5, [pc, #24]	; (801d634 <_sbrk_r+0x1c>)
 801d61c:	2300      	movs	r3, #0
 801d61e:	4604      	mov	r4, r0
 801d620:	4608      	mov	r0, r1
 801d622:	602b      	str	r3, [r5, #0]
 801d624:	f7e7 fa92 	bl	8004b4c <_sbrk>
 801d628:	1c43      	adds	r3, r0, #1
 801d62a:	d102      	bne.n	801d632 <_sbrk_r+0x1a>
 801d62c:	682b      	ldr	r3, [r5, #0]
 801d62e:	b103      	cbz	r3, 801d632 <_sbrk_r+0x1a>
 801d630:	6023      	str	r3, [r4, #0]
 801d632:	bd38      	pop	{r3, r4, r5, pc}
 801d634:	20013900 	.word	0x20013900

0801d638 <__sread>:
 801d638:	b510      	push	{r4, lr}
 801d63a:	460c      	mov	r4, r1
 801d63c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d640:	f001 fda8 	bl	801f194 <_read_r>
 801d644:	2800      	cmp	r0, #0
 801d646:	bfab      	itete	ge
 801d648:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801d64a:	89a3      	ldrhlt	r3, [r4, #12]
 801d64c:	181b      	addge	r3, r3, r0
 801d64e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801d652:	bfac      	ite	ge
 801d654:	6563      	strge	r3, [r4, #84]	; 0x54
 801d656:	81a3      	strhlt	r3, [r4, #12]
 801d658:	bd10      	pop	{r4, pc}

0801d65a <__swrite>:
 801d65a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d65e:	461f      	mov	r7, r3
 801d660:	898b      	ldrh	r3, [r1, #12]
 801d662:	05db      	lsls	r3, r3, #23
 801d664:	4605      	mov	r5, r0
 801d666:	460c      	mov	r4, r1
 801d668:	4616      	mov	r6, r2
 801d66a:	d505      	bpl.n	801d678 <__swrite+0x1e>
 801d66c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d670:	2302      	movs	r3, #2
 801d672:	2200      	movs	r2, #0
 801d674:	f001 f95e 	bl	801e934 <_lseek_r>
 801d678:	89a3      	ldrh	r3, [r4, #12]
 801d67a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d67e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801d682:	81a3      	strh	r3, [r4, #12]
 801d684:	4632      	mov	r2, r6
 801d686:	463b      	mov	r3, r7
 801d688:	4628      	mov	r0, r5
 801d68a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d68e:	f000 b869 	b.w	801d764 <_write_r>

0801d692 <__sseek>:
 801d692:	b510      	push	{r4, lr}
 801d694:	460c      	mov	r4, r1
 801d696:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d69a:	f001 f94b 	bl	801e934 <_lseek_r>
 801d69e:	1c43      	adds	r3, r0, #1
 801d6a0:	89a3      	ldrh	r3, [r4, #12]
 801d6a2:	bf15      	itete	ne
 801d6a4:	6560      	strne	r0, [r4, #84]	; 0x54
 801d6a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801d6aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801d6ae:	81a3      	strheq	r3, [r4, #12]
 801d6b0:	bf18      	it	ne
 801d6b2:	81a3      	strhne	r3, [r4, #12]
 801d6b4:	bd10      	pop	{r4, pc}

0801d6b6 <__sclose>:
 801d6b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d6ba:	f000 b8f1 	b.w	801d8a0 <_close_r>
	...

0801d6c0 <__swbuf_r>:
 801d6c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d6c2:	460e      	mov	r6, r1
 801d6c4:	4614      	mov	r4, r2
 801d6c6:	4605      	mov	r5, r0
 801d6c8:	b118      	cbz	r0, 801d6d2 <__swbuf_r+0x12>
 801d6ca:	6983      	ldr	r3, [r0, #24]
 801d6cc:	b90b      	cbnz	r3, 801d6d2 <__swbuf_r+0x12>
 801d6ce:	f001 f88b 	bl	801e7e8 <__sinit>
 801d6d2:	4b21      	ldr	r3, [pc, #132]	; (801d758 <__swbuf_r+0x98>)
 801d6d4:	429c      	cmp	r4, r3
 801d6d6:	d12b      	bne.n	801d730 <__swbuf_r+0x70>
 801d6d8:	686c      	ldr	r4, [r5, #4]
 801d6da:	69a3      	ldr	r3, [r4, #24]
 801d6dc:	60a3      	str	r3, [r4, #8]
 801d6de:	89a3      	ldrh	r3, [r4, #12]
 801d6e0:	071a      	lsls	r2, r3, #28
 801d6e2:	d52f      	bpl.n	801d744 <__swbuf_r+0x84>
 801d6e4:	6923      	ldr	r3, [r4, #16]
 801d6e6:	b36b      	cbz	r3, 801d744 <__swbuf_r+0x84>
 801d6e8:	6923      	ldr	r3, [r4, #16]
 801d6ea:	6820      	ldr	r0, [r4, #0]
 801d6ec:	1ac0      	subs	r0, r0, r3
 801d6ee:	6963      	ldr	r3, [r4, #20]
 801d6f0:	b2f6      	uxtb	r6, r6
 801d6f2:	4283      	cmp	r3, r0
 801d6f4:	4637      	mov	r7, r6
 801d6f6:	dc04      	bgt.n	801d702 <__swbuf_r+0x42>
 801d6f8:	4621      	mov	r1, r4
 801d6fa:	4628      	mov	r0, r5
 801d6fc:	f000 ffe0 	bl	801e6c0 <_fflush_r>
 801d700:	bb30      	cbnz	r0, 801d750 <__swbuf_r+0x90>
 801d702:	68a3      	ldr	r3, [r4, #8]
 801d704:	3b01      	subs	r3, #1
 801d706:	60a3      	str	r3, [r4, #8]
 801d708:	6823      	ldr	r3, [r4, #0]
 801d70a:	1c5a      	adds	r2, r3, #1
 801d70c:	6022      	str	r2, [r4, #0]
 801d70e:	701e      	strb	r6, [r3, #0]
 801d710:	6963      	ldr	r3, [r4, #20]
 801d712:	3001      	adds	r0, #1
 801d714:	4283      	cmp	r3, r0
 801d716:	d004      	beq.n	801d722 <__swbuf_r+0x62>
 801d718:	89a3      	ldrh	r3, [r4, #12]
 801d71a:	07db      	lsls	r3, r3, #31
 801d71c:	d506      	bpl.n	801d72c <__swbuf_r+0x6c>
 801d71e:	2e0a      	cmp	r6, #10
 801d720:	d104      	bne.n	801d72c <__swbuf_r+0x6c>
 801d722:	4621      	mov	r1, r4
 801d724:	4628      	mov	r0, r5
 801d726:	f000 ffcb 	bl	801e6c0 <_fflush_r>
 801d72a:	b988      	cbnz	r0, 801d750 <__swbuf_r+0x90>
 801d72c:	4638      	mov	r0, r7
 801d72e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d730:	4b0a      	ldr	r3, [pc, #40]	; (801d75c <__swbuf_r+0x9c>)
 801d732:	429c      	cmp	r4, r3
 801d734:	d101      	bne.n	801d73a <__swbuf_r+0x7a>
 801d736:	68ac      	ldr	r4, [r5, #8]
 801d738:	e7cf      	b.n	801d6da <__swbuf_r+0x1a>
 801d73a:	4b09      	ldr	r3, [pc, #36]	; (801d760 <__swbuf_r+0xa0>)
 801d73c:	429c      	cmp	r4, r3
 801d73e:	bf08      	it	eq
 801d740:	68ec      	ldreq	r4, [r5, #12]
 801d742:	e7ca      	b.n	801d6da <__swbuf_r+0x1a>
 801d744:	4621      	mov	r1, r4
 801d746:	4628      	mov	r0, r5
 801d748:	f000 f81e 	bl	801d788 <__swsetup_r>
 801d74c:	2800      	cmp	r0, #0
 801d74e:	d0cb      	beq.n	801d6e8 <__swbuf_r+0x28>
 801d750:	f04f 37ff 	mov.w	r7, #4294967295
 801d754:	e7ea      	b.n	801d72c <__swbuf_r+0x6c>
 801d756:	bf00      	nop
 801d758:	08022a30 	.word	0x08022a30
 801d75c:	08022a50 	.word	0x08022a50
 801d760:	08022a10 	.word	0x08022a10

0801d764 <_write_r>:
 801d764:	b538      	push	{r3, r4, r5, lr}
 801d766:	4d07      	ldr	r5, [pc, #28]	; (801d784 <_write_r+0x20>)
 801d768:	4604      	mov	r4, r0
 801d76a:	4608      	mov	r0, r1
 801d76c:	4611      	mov	r1, r2
 801d76e:	2200      	movs	r2, #0
 801d770:	602a      	str	r2, [r5, #0]
 801d772:	461a      	mov	r2, r3
 801d774:	f7e6 ff51 	bl	800461a <_write>
 801d778:	1c43      	adds	r3, r0, #1
 801d77a:	d102      	bne.n	801d782 <_write_r+0x1e>
 801d77c:	682b      	ldr	r3, [r5, #0]
 801d77e:	b103      	cbz	r3, 801d782 <_write_r+0x1e>
 801d780:	6023      	str	r3, [r4, #0]
 801d782:	bd38      	pop	{r3, r4, r5, pc}
 801d784:	20013900 	.word	0x20013900

0801d788 <__swsetup_r>:
 801d788:	4b32      	ldr	r3, [pc, #200]	; (801d854 <__swsetup_r+0xcc>)
 801d78a:	b570      	push	{r4, r5, r6, lr}
 801d78c:	681d      	ldr	r5, [r3, #0]
 801d78e:	4606      	mov	r6, r0
 801d790:	460c      	mov	r4, r1
 801d792:	b125      	cbz	r5, 801d79e <__swsetup_r+0x16>
 801d794:	69ab      	ldr	r3, [r5, #24]
 801d796:	b913      	cbnz	r3, 801d79e <__swsetup_r+0x16>
 801d798:	4628      	mov	r0, r5
 801d79a:	f001 f825 	bl	801e7e8 <__sinit>
 801d79e:	4b2e      	ldr	r3, [pc, #184]	; (801d858 <__swsetup_r+0xd0>)
 801d7a0:	429c      	cmp	r4, r3
 801d7a2:	d10f      	bne.n	801d7c4 <__swsetup_r+0x3c>
 801d7a4:	686c      	ldr	r4, [r5, #4]
 801d7a6:	89a3      	ldrh	r3, [r4, #12]
 801d7a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801d7ac:	0719      	lsls	r1, r3, #28
 801d7ae:	d42c      	bmi.n	801d80a <__swsetup_r+0x82>
 801d7b0:	06dd      	lsls	r5, r3, #27
 801d7b2:	d411      	bmi.n	801d7d8 <__swsetup_r+0x50>
 801d7b4:	2309      	movs	r3, #9
 801d7b6:	6033      	str	r3, [r6, #0]
 801d7b8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801d7bc:	81a3      	strh	r3, [r4, #12]
 801d7be:	f04f 30ff 	mov.w	r0, #4294967295
 801d7c2:	e03e      	b.n	801d842 <__swsetup_r+0xba>
 801d7c4:	4b25      	ldr	r3, [pc, #148]	; (801d85c <__swsetup_r+0xd4>)
 801d7c6:	429c      	cmp	r4, r3
 801d7c8:	d101      	bne.n	801d7ce <__swsetup_r+0x46>
 801d7ca:	68ac      	ldr	r4, [r5, #8]
 801d7cc:	e7eb      	b.n	801d7a6 <__swsetup_r+0x1e>
 801d7ce:	4b24      	ldr	r3, [pc, #144]	; (801d860 <__swsetup_r+0xd8>)
 801d7d0:	429c      	cmp	r4, r3
 801d7d2:	bf08      	it	eq
 801d7d4:	68ec      	ldreq	r4, [r5, #12]
 801d7d6:	e7e6      	b.n	801d7a6 <__swsetup_r+0x1e>
 801d7d8:	0758      	lsls	r0, r3, #29
 801d7da:	d512      	bpl.n	801d802 <__swsetup_r+0x7a>
 801d7dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d7de:	b141      	cbz	r1, 801d7f2 <__swsetup_r+0x6a>
 801d7e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d7e4:	4299      	cmp	r1, r3
 801d7e6:	d002      	beq.n	801d7ee <__swsetup_r+0x66>
 801d7e8:	4630      	mov	r0, r6
 801d7ea:	f7fe ffa5 	bl	801c738 <_free_r>
 801d7ee:	2300      	movs	r3, #0
 801d7f0:	6363      	str	r3, [r4, #52]	; 0x34
 801d7f2:	89a3      	ldrh	r3, [r4, #12]
 801d7f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801d7f8:	81a3      	strh	r3, [r4, #12]
 801d7fa:	2300      	movs	r3, #0
 801d7fc:	6063      	str	r3, [r4, #4]
 801d7fe:	6923      	ldr	r3, [r4, #16]
 801d800:	6023      	str	r3, [r4, #0]
 801d802:	89a3      	ldrh	r3, [r4, #12]
 801d804:	f043 0308 	orr.w	r3, r3, #8
 801d808:	81a3      	strh	r3, [r4, #12]
 801d80a:	6923      	ldr	r3, [r4, #16]
 801d80c:	b94b      	cbnz	r3, 801d822 <__swsetup_r+0x9a>
 801d80e:	89a3      	ldrh	r3, [r4, #12]
 801d810:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801d814:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801d818:	d003      	beq.n	801d822 <__swsetup_r+0x9a>
 801d81a:	4621      	mov	r1, r4
 801d81c:	4630      	mov	r0, r6
 801d81e:	f001 f8c1 	bl	801e9a4 <__smakebuf_r>
 801d822:	89a0      	ldrh	r0, [r4, #12]
 801d824:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801d828:	f010 0301 	ands.w	r3, r0, #1
 801d82c:	d00a      	beq.n	801d844 <__swsetup_r+0xbc>
 801d82e:	2300      	movs	r3, #0
 801d830:	60a3      	str	r3, [r4, #8]
 801d832:	6963      	ldr	r3, [r4, #20]
 801d834:	425b      	negs	r3, r3
 801d836:	61a3      	str	r3, [r4, #24]
 801d838:	6923      	ldr	r3, [r4, #16]
 801d83a:	b943      	cbnz	r3, 801d84e <__swsetup_r+0xc6>
 801d83c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801d840:	d1ba      	bne.n	801d7b8 <__swsetup_r+0x30>
 801d842:	bd70      	pop	{r4, r5, r6, pc}
 801d844:	0781      	lsls	r1, r0, #30
 801d846:	bf58      	it	pl
 801d848:	6963      	ldrpl	r3, [r4, #20]
 801d84a:	60a3      	str	r3, [r4, #8]
 801d84c:	e7f4      	b.n	801d838 <__swsetup_r+0xb0>
 801d84e:	2000      	movs	r0, #0
 801d850:	e7f7      	b.n	801d842 <__swsetup_r+0xba>
 801d852:	bf00      	nop
 801d854:	10000024 	.word	0x10000024
 801d858:	08022a30 	.word	0x08022a30
 801d85c:	08022a50 	.word	0x08022a50
 801d860:	08022a10 	.word	0x08022a10

0801d864 <__assert_func>:
 801d864:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801d866:	4614      	mov	r4, r2
 801d868:	461a      	mov	r2, r3
 801d86a:	4b09      	ldr	r3, [pc, #36]	; (801d890 <__assert_func+0x2c>)
 801d86c:	681b      	ldr	r3, [r3, #0]
 801d86e:	4605      	mov	r5, r0
 801d870:	68d8      	ldr	r0, [r3, #12]
 801d872:	b14c      	cbz	r4, 801d888 <__assert_func+0x24>
 801d874:	4b07      	ldr	r3, [pc, #28]	; (801d894 <__assert_func+0x30>)
 801d876:	9100      	str	r1, [sp, #0]
 801d878:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801d87c:	4906      	ldr	r1, [pc, #24]	; (801d898 <__assert_func+0x34>)
 801d87e:	462b      	mov	r3, r5
 801d880:	f7fe fef6 	bl	801c670 <fiprintf>
 801d884:	f001 fca5 	bl	801f1d2 <abort>
 801d888:	4b04      	ldr	r3, [pc, #16]	; (801d89c <__assert_func+0x38>)
 801d88a:	461c      	mov	r4, r3
 801d88c:	e7f3      	b.n	801d876 <__assert_func+0x12>
 801d88e:	bf00      	nop
 801d890:	10000024 	.word	0x10000024
 801d894:	0802295b 	.word	0x0802295b
 801d898:	08022968 	.word	0x08022968
 801d89c:	08022996 	.word	0x08022996

0801d8a0 <_close_r>:
 801d8a0:	b538      	push	{r3, r4, r5, lr}
 801d8a2:	4d06      	ldr	r5, [pc, #24]	; (801d8bc <_close_r+0x1c>)
 801d8a4:	2300      	movs	r3, #0
 801d8a6:	4604      	mov	r4, r0
 801d8a8:	4608      	mov	r0, r1
 801d8aa:	602b      	str	r3, [r5, #0]
 801d8ac:	f7e7 f919 	bl	8004ae2 <_close>
 801d8b0:	1c43      	adds	r3, r0, #1
 801d8b2:	d102      	bne.n	801d8ba <_close_r+0x1a>
 801d8b4:	682b      	ldr	r3, [r5, #0]
 801d8b6:	b103      	cbz	r3, 801d8ba <_close_r+0x1a>
 801d8b8:	6023      	str	r3, [r4, #0]
 801d8ba:	bd38      	pop	{r3, r4, r5, pc}
 801d8bc:	20013900 	.word	0x20013900

0801d8c0 <quorem>:
 801d8c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d8c4:	6903      	ldr	r3, [r0, #16]
 801d8c6:	690c      	ldr	r4, [r1, #16]
 801d8c8:	42a3      	cmp	r3, r4
 801d8ca:	4607      	mov	r7, r0
 801d8cc:	f2c0 8081 	blt.w	801d9d2 <quorem+0x112>
 801d8d0:	3c01      	subs	r4, #1
 801d8d2:	f101 0814 	add.w	r8, r1, #20
 801d8d6:	f100 0514 	add.w	r5, r0, #20
 801d8da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801d8de:	9301      	str	r3, [sp, #4]
 801d8e0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801d8e4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801d8e8:	3301      	adds	r3, #1
 801d8ea:	429a      	cmp	r2, r3
 801d8ec:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801d8f0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801d8f4:	fbb2 f6f3 	udiv	r6, r2, r3
 801d8f8:	d331      	bcc.n	801d95e <quorem+0x9e>
 801d8fa:	f04f 0e00 	mov.w	lr, #0
 801d8fe:	4640      	mov	r0, r8
 801d900:	46ac      	mov	ip, r5
 801d902:	46f2      	mov	sl, lr
 801d904:	f850 2b04 	ldr.w	r2, [r0], #4
 801d908:	b293      	uxth	r3, r2
 801d90a:	fb06 e303 	mla	r3, r6, r3, lr
 801d90e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801d912:	b29b      	uxth	r3, r3
 801d914:	ebaa 0303 	sub.w	r3, sl, r3
 801d918:	f8dc a000 	ldr.w	sl, [ip]
 801d91c:	0c12      	lsrs	r2, r2, #16
 801d91e:	fa13 f38a 	uxtah	r3, r3, sl
 801d922:	fb06 e202 	mla	r2, r6, r2, lr
 801d926:	9300      	str	r3, [sp, #0]
 801d928:	9b00      	ldr	r3, [sp, #0]
 801d92a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801d92e:	b292      	uxth	r2, r2
 801d930:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801d934:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801d938:	f8bd 3000 	ldrh.w	r3, [sp]
 801d93c:	4581      	cmp	r9, r0
 801d93e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801d942:	f84c 3b04 	str.w	r3, [ip], #4
 801d946:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801d94a:	d2db      	bcs.n	801d904 <quorem+0x44>
 801d94c:	f855 300b 	ldr.w	r3, [r5, fp]
 801d950:	b92b      	cbnz	r3, 801d95e <quorem+0x9e>
 801d952:	9b01      	ldr	r3, [sp, #4]
 801d954:	3b04      	subs	r3, #4
 801d956:	429d      	cmp	r5, r3
 801d958:	461a      	mov	r2, r3
 801d95a:	d32e      	bcc.n	801d9ba <quorem+0xfa>
 801d95c:	613c      	str	r4, [r7, #16]
 801d95e:	4638      	mov	r0, r7
 801d960:	f001 fb00 	bl	801ef64 <__mcmp>
 801d964:	2800      	cmp	r0, #0
 801d966:	db24      	blt.n	801d9b2 <quorem+0xf2>
 801d968:	3601      	adds	r6, #1
 801d96a:	4628      	mov	r0, r5
 801d96c:	f04f 0c00 	mov.w	ip, #0
 801d970:	f858 2b04 	ldr.w	r2, [r8], #4
 801d974:	f8d0 e000 	ldr.w	lr, [r0]
 801d978:	b293      	uxth	r3, r2
 801d97a:	ebac 0303 	sub.w	r3, ip, r3
 801d97e:	0c12      	lsrs	r2, r2, #16
 801d980:	fa13 f38e 	uxtah	r3, r3, lr
 801d984:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801d988:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801d98c:	b29b      	uxth	r3, r3
 801d98e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801d992:	45c1      	cmp	r9, r8
 801d994:	f840 3b04 	str.w	r3, [r0], #4
 801d998:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801d99c:	d2e8      	bcs.n	801d970 <quorem+0xb0>
 801d99e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801d9a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801d9a6:	b922      	cbnz	r2, 801d9b2 <quorem+0xf2>
 801d9a8:	3b04      	subs	r3, #4
 801d9aa:	429d      	cmp	r5, r3
 801d9ac:	461a      	mov	r2, r3
 801d9ae:	d30a      	bcc.n	801d9c6 <quorem+0x106>
 801d9b0:	613c      	str	r4, [r7, #16]
 801d9b2:	4630      	mov	r0, r6
 801d9b4:	b003      	add	sp, #12
 801d9b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d9ba:	6812      	ldr	r2, [r2, #0]
 801d9bc:	3b04      	subs	r3, #4
 801d9be:	2a00      	cmp	r2, #0
 801d9c0:	d1cc      	bne.n	801d95c <quorem+0x9c>
 801d9c2:	3c01      	subs	r4, #1
 801d9c4:	e7c7      	b.n	801d956 <quorem+0x96>
 801d9c6:	6812      	ldr	r2, [r2, #0]
 801d9c8:	3b04      	subs	r3, #4
 801d9ca:	2a00      	cmp	r2, #0
 801d9cc:	d1f0      	bne.n	801d9b0 <quorem+0xf0>
 801d9ce:	3c01      	subs	r4, #1
 801d9d0:	e7eb      	b.n	801d9aa <quorem+0xea>
 801d9d2:	2000      	movs	r0, #0
 801d9d4:	e7ee      	b.n	801d9b4 <quorem+0xf4>
	...

0801d9d8 <_dtoa_r>:
 801d9d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d9dc:	ed2d 8b04 	vpush	{d8-d9}
 801d9e0:	ec57 6b10 	vmov	r6, r7, d0
 801d9e4:	b093      	sub	sp, #76	; 0x4c
 801d9e6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801d9e8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801d9ec:	9106      	str	r1, [sp, #24]
 801d9ee:	ee10 aa10 	vmov	sl, s0
 801d9f2:	4604      	mov	r4, r0
 801d9f4:	9209      	str	r2, [sp, #36]	; 0x24
 801d9f6:	930c      	str	r3, [sp, #48]	; 0x30
 801d9f8:	46bb      	mov	fp, r7
 801d9fa:	b975      	cbnz	r5, 801da1a <_dtoa_r+0x42>
 801d9fc:	2010      	movs	r0, #16
 801d9fe:	f7fe fe6d 	bl	801c6dc <malloc>
 801da02:	4602      	mov	r2, r0
 801da04:	6260      	str	r0, [r4, #36]	; 0x24
 801da06:	b920      	cbnz	r0, 801da12 <_dtoa_r+0x3a>
 801da08:	4ba7      	ldr	r3, [pc, #668]	; (801dca8 <_dtoa_r+0x2d0>)
 801da0a:	21ea      	movs	r1, #234	; 0xea
 801da0c:	48a7      	ldr	r0, [pc, #668]	; (801dcac <_dtoa_r+0x2d4>)
 801da0e:	f7ff ff29 	bl	801d864 <__assert_func>
 801da12:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801da16:	6005      	str	r5, [r0, #0]
 801da18:	60c5      	str	r5, [r0, #12]
 801da1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801da1c:	6819      	ldr	r1, [r3, #0]
 801da1e:	b151      	cbz	r1, 801da36 <_dtoa_r+0x5e>
 801da20:	685a      	ldr	r2, [r3, #4]
 801da22:	604a      	str	r2, [r1, #4]
 801da24:	2301      	movs	r3, #1
 801da26:	4093      	lsls	r3, r2
 801da28:	608b      	str	r3, [r1, #8]
 801da2a:	4620      	mov	r0, r4
 801da2c:	f001 f858 	bl	801eae0 <_Bfree>
 801da30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801da32:	2200      	movs	r2, #0
 801da34:	601a      	str	r2, [r3, #0]
 801da36:	1e3b      	subs	r3, r7, #0
 801da38:	bfaa      	itet	ge
 801da3a:	2300      	movge	r3, #0
 801da3c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 801da40:	f8c8 3000 	strge.w	r3, [r8]
 801da44:	4b9a      	ldr	r3, [pc, #616]	; (801dcb0 <_dtoa_r+0x2d8>)
 801da46:	bfbc      	itt	lt
 801da48:	2201      	movlt	r2, #1
 801da4a:	f8c8 2000 	strlt.w	r2, [r8]
 801da4e:	ea33 030b 	bics.w	r3, r3, fp
 801da52:	d11b      	bne.n	801da8c <_dtoa_r+0xb4>
 801da54:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801da56:	f242 730f 	movw	r3, #9999	; 0x270f
 801da5a:	6013      	str	r3, [r2, #0]
 801da5c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801da60:	4333      	orrs	r3, r6
 801da62:	f000 8592 	beq.w	801e58a <_dtoa_r+0xbb2>
 801da66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801da68:	b963      	cbnz	r3, 801da84 <_dtoa_r+0xac>
 801da6a:	4b92      	ldr	r3, [pc, #584]	; (801dcb4 <_dtoa_r+0x2dc>)
 801da6c:	e022      	b.n	801dab4 <_dtoa_r+0xdc>
 801da6e:	4b92      	ldr	r3, [pc, #584]	; (801dcb8 <_dtoa_r+0x2e0>)
 801da70:	9301      	str	r3, [sp, #4]
 801da72:	3308      	adds	r3, #8
 801da74:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801da76:	6013      	str	r3, [r2, #0]
 801da78:	9801      	ldr	r0, [sp, #4]
 801da7a:	b013      	add	sp, #76	; 0x4c
 801da7c:	ecbd 8b04 	vpop	{d8-d9}
 801da80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801da84:	4b8b      	ldr	r3, [pc, #556]	; (801dcb4 <_dtoa_r+0x2dc>)
 801da86:	9301      	str	r3, [sp, #4]
 801da88:	3303      	adds	r3, #3
 801da8a:	e7f3      	b.n	801da74 <_dtoa_r+0x9c>
 801da8c:	2200      	movs	r2, #0
 801da8e:	2300      	movs	r3, #0
 801da90:	4650      	mov	r0, sl
 801da92:	4659      	mov	r1, fp
 801da94:	f7e3 f818 	bl	8000ac8 <__aeabi_dcmpeq>
 801da98:	ec4b ab19 	vmov	d9, sl, fp
 801da9c:	4680      	mov	r8, r0
 801da9e:	b158      	cbz	r0, 801dab8 <_dtoa_r+0xe0>
 801daa0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801daa2:	2301      	movs	r3, #1
 801daa4:	6013      	str	r3, [r2, #0]
 801daa6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801daa8:	2b00      	cmp	r3, #0
 801daaa:	f000 856b 	beq.w	801e584 <_dtoa_r+0xbac>
 801daae:	4883      	ldr	r0, [pc, #524]	; (801dcbc <_dtoa_r+0x2e4>)
 801dab0:	6018      	str	r0, [r3, #0]
 801dab2:	1e43      	subs	r3, r0, #1
 801dab4:	9301      	str	r3, [sp, #4]
 801dab6:	e7df      	b.n	801da78 <_dtoa_r+0xa0>
 801dab8:	ec4b ab10 	vmov	d0, sl, fp
 801dabc:	aa10      	add	r2, sp, #64	; 0x40
 801dabe:	a911      	add	r1, sp, #68	; 0x44
 801dac0:	4620      	mov	r0, r4
 801dac2:	f001 faf5 	bl	801f0b0 <__d2b>
 801dac6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801daca:	ee08 0a10 	vmov	s16, r0
 801dace:	2d00      	cmp	r5, #0
 801dad0:	f000 8084 	beq.w	801dbdc <_dtoa_r+0x204>
 801dad4:	ee19 3a90 	vmov	r3, s19
 801dad8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801dadc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801dae0:	4656      	mov	r6, sl
 801dae2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801dae6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801daea:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801daee:	4b74      	ldr	r3, [pc, #464]	; (801dcc0 <_dtoa_r+0x2e8>)
 801daf0:	2200      	movs	r2, #0
 801daf2:	4630      	mov	r0, r6
 801daf4:	4639      	mov	r1, r7
 801daf6:	f7e2 fbc7 	bl	8000288 <__aeabi_dsub>
 801dafa:	a365      	add	r3, pc, #404	; (adr r3, 801dc90 <_dtoa_r+0x2b8>)
 801dafc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801db00:	f7e2 fd7a 	bl	80005f8 <__aeabi_dmul>
 801db04:	a364      	add	r3, pc, #400	; (adr r3, 801dc98 <_dtoa_r+0x2c0>)
 801db06:	e9d3 2300 	ldrd	r2, r3, [r3]
 801db0a:	f7e2 fbbf 	bl	800028c <__adddf3>
 801db0e:	4606      	mov	r6, r0
 801db10:	4628      	mov	r0, r5
 801db12:	460f      	mov	r7, r1
 801db14:	f7e2 fd06 	bl	8000524 <__aeabi_i2d>
 801db18:	a361      	add	r3, pc, #388	; (adr r3, 801dca0 <_dtoa_r+0x2c8>)
 801db1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801db1e:	f7e2 fd6b 	bl	80005f8 <__aeabi_dmul>
 801db22:	4602      	mov	r2, r0
 801db24:	460b      	mov	r3, r1
 801db26:	4630      	mov	r0, r6
 801db28:	4639      	mov	r1, r7
 801db2a:	f7e2 fbaf 	bl	800028c <__adddf3>
 801db2e:	4606      	mov	r6, r0
 801db30:	460f      	mov	r7, r1
 801db32:	f7e3 f811 	bl	8000b58 <__aeabi_d2iz>
 801db36:	2200      	movs	r2, #0
 801db38:	9000      	str	r0, [sp, #0]
 801db3a:	2300      	movs	r3, #0
 801db3c:	4630      	mov	r0, r6
 801db3e:	4639      	mov	r1, r7
 801db40:	f7e2 ffcc 	bl	8000adc <__aeabi_dcmplt>
 801db44:	b150      	cbz	r0, 801db5c <_dtoa_r+0x184>
 801db46:	9800      	ldr	r0, [sp, #0]
 801db48:	f7e2 fcec 	bl	8000524 <__aeabi_i2d>
 801db4c:	4632      	mov	r2, r6
 801db4e:	463b      	mov	r3, r7
 801db50:	f7e2 ffba 	bl	8000ac8 <__aeabi_dcmpeq>
 801db54:	b910      	cbnz	r0, 801db5c <_dtoa_r+0x184>
 801db56:	9b00      	ldr	r3, [sp, #0]
 801db58:	3b01      	subs	r3, #1
 801db5a:	9300      	str	r3, [sp, #0]
 801db5c:	9b00      	ldr	r3, [sp, #0]
 801db5e:	2b16      	cmp	r3, #22
 801db60:	d85a      	bhi.n	801dc18 <_dtoa_r+0x240>
 801db62:	9a00      	ldr	r2, [sp, #0]
 801db64:	4b57      	ldr	r3, [pc, #348]	; (801dcc4 <_dtoa_r+0x2ec>)
 801db66:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801db6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801db6e:	ec51 0b19 	vmov	r0, r1, d9
 801db72:	f7e2 ffb3 	bl	8000adc <__aeabi_dcmplt>
 801db76:	2800      	cmp	r0, #0
 801db78:	d050      	beq.n	801dc1c <_dtoa_r+0x244>
 801db7a:	9b00      	ldr	r3, [sp, #0]
 801db7c:	3b01      	subs	r3, #1
 801db7e:	9300      	str	r3, [sp, #0]
 801db80:	2300      	movs	r3, #0
 801db82:	930b      	str	r3, [sp, #44]	; 0x2c
 801db84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801db86:	1b5d      	subs	r5, r3, r5
 801db88:	1e6b      	subs	r3, r5, #1
 801db8a:	9305      	str	r3, [sp, #20]
 801db8c:	bf45      	ittet	mi
 801db8e:	f1c5 0301 	rsbmi	r3, r5, #1
 801db92:	9304      	strmi	r3, [sp, #16]
 801db94:	2300      	movpl	r3, #0
 801db96:	2300      	movmi	r3, #0
 801db98:	bf4c      	ite	mi
 801db9a:	9305      	strmi	r3, [sp, #20]
 801db9c:	9304      	strpl	r3, [sp, #16]
 801db9e:	9b00      	ldr	r3, [sp, #0]
 801dba0:	2b00      	cmp	r3, #0
 801dba2:	db3d      	blt.n	801dc20 <_dtoa_r+0x248>
 801dba4:	9b05      	ldr	r3, [sp, #20]
 801dba6:	9a00      	ldr	r2, [sp, #0]
 801dba8:	920a      	str	r2, [sp, #40]	; 0x28
 801dbaa:	4413      	add	r3, r2
 801dbac:	9305      	str	r3, [sp, #20]
 801dbae:	2300      	movs	r3, #0
 801dbb0:	9307      	str	r3, [sp, #28]
 801dbb2:	9b06      	ldr	r3, [sp, #24]
 801dbb4:	2b09      	cmp	r3, #9
 801dbb6:	f200 8089 	bhi.w	801dccc <_dtoa_r+0x2f4>
 801dbba:	2b05      	cmp	r3, #5
 801dbbc:	bfc4      	itt	gt
 801dbbe:	3b04      	subgt	r3, #4
 801dbc0:	9306      	strgt	r3, [sp, #24]
 801dbc2:	9b06      	ldr	r3, [sp, #24]
 801dbc4:	f1a3 0302 	sub.w	r3, r3, #2
 801dbc8:	bfcc      	ite	gt
 801dbca:	2500      	movgt	r5, #0
 801dbcc:	2501      	movle	r5, #1
 801dbce:	2b03      	cmp	r3, #3
 801dbd0:	f200 8087 	bhi.w	801dce2 <_dtoa_r+0x30a>
 801dbd4:	e8df f003 	tbb	[pc, r3]
 801dbd8:	59383a2d 	.word	0x59383a2d
 801dbdc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801dbe0:	441d      	add	r5, r3
 801dbe2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801dbe6:	2b20      	cmp	r3, #32
 801dbe8:	bfc1      	itttt	gt
 801dbea:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801dbee:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801dbf2:	fa0b f303 	lslgt.w	r3, fp, r3
 801dbf6:	fa26 f000 	lsrgt.w	r0, r6, r0
 801dbfa:	bfda      	itte	le
 801dbfc:	f1c3 0320 	rsble	r3, r3, #32
 801dc00:	fa06 f003 	lslle.w	r0, r6, r3
 801dc04:	4318      	orrgt	r0, r3
 801dc06:	f7e2 fc7d 	bl	8000504 <__aeabi_ui2d>
 801dc0a:	2301      	movs	r3, #1
 801dc0c:	4606      	mov	r6, r0
 801dc0e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801dc12:	3d01      	subs	r5, #1
 801dc14:	930e      	str	r3, [sp, #56]	; 0x38
 801dc16:	e76a      	b.n	801daee <_dtoa_r+0x116>
 801dc18:	2301      	movs	r3, #1
 801dc1a:	e7b2      	b.n	801db82 <_dtoa_r+0x1aa>
 801dc1c:	900b      	str	r0, [sp, #44]	; 0x2c
 801dc1e:	e7b1      	b.n	801db84 <_dtoa_r+0x1ac>
 801dc20:	9b04      	ldr	r3, [sp, #16]
 801dc22:	9a00      	ldr	r2, [sp, #0]
 801dc24:	1a9b      	subs	r3, r3, r2
 801dc26:	9304      	str	r3, [sp, #16]
 801dc28:	4253      	negs	r3, r2
 801dc2a:	9307      	str	r3, [sp, #28]
 801dc2c:	2300      	movs	r3, #0
 801dc2e:	930a      	str	r3, [sp, #40]	; 0x28
 801dc30:	e7bf      	b.n	801dbb2 <_dtoa_r+0x1da>
 801dc32:	2300      	movs	r3, #0
 801dc34:	9308      	str	r3, [sp, #32]
 801dc36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dc38:	2b00      	cmp	r3, #0
 801dc3a:	dc55      	bgt.n	801dce8 <_dtoa_r+0x310>
 801dc3c:	2301      	movs	r3, #1
 801dc3e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801dc42:	461a      	mov	r2, r3
 801dc44:	9209      	str	r2, [sp, #36]	; 0x24
 801dc46:	e00c      	b.n	801dc62 <_dtoa_r+0x28a>
 801dc48:	2301      	movs	r3, #1
 801dc4a:	e7f3      	b.n	801dc34 <_dtoa_r+0x25c>
 801dc4c:	2300      	movs	r3, #0
 801dc4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801dc50:	9308      	str	r3, [sp, #32]
 801dc52:	9b00      	ldr	r3, [sp, #0]
 801dc54:	4413      	add	r3, r2
 801dc56:	9302      	str	r3, [sp, #8]
 801dc58:	3301      	adds	r3, #1
 801dc5a:	2b01      	cmp	r3, #1
 801dc5c:	9303      	str	r3, [sp, #12]
 801dc5e:	bfb8      	it	lt
 801dc60:	2301      	movlt	r3, #1
 801dc62:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801dc64:	2200      	movs	r2, #0
 801dc66:	6042      	str	r2, [r0, #4]
 801dc68:	2204      	movs	r2, #4
 801dc6a:	f102 0614 	add.w	r6, r2, #20
 801dc6e:	429e      	cmp	r6, r3
 801dc70:	6841      	ldr	r1, [r0, #4]
 801dc72:	d93d      	bls.n	801dcf0 <_dtoa_r+0x318>
 801dc74:	4620      	mov	r0, r4
 801dc76:	f000 fef3 	bl	801ea60 <_Balloc>
 801dc7a:	9001      	str	r0, [sp, #4]
 801dc7c:	2800      	cmp	r0, #0
 801dc7e:	d13b      	bne.n	801dcf8 <_dtoa_r+0x320>
 801dc80:	4b11      	ldr	r3, [pc, #68]	; (801dcc8 <_dtoa_r+0x2f0>)
 801dc82:	4602      	mov	r2, r0
 801dc84:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801dc88:	e6c0      	b.n	801da0c <_dtoa_r+0x34>
 801dc8a:	2301      	movs	r3, #1
 801dc8c:	e7df      	b.n	801dc4e <_dtoa_r+0x276>
 801dc8e:	bf00      	nop
 801dc90:	636f4361 	.word	0x636f4361
 801dc94:	3fd287a7 	.word	0x3fd287a7
 801dc98:	8b60c8b3 	.word	0x8b60c8b3
 801dc9c:	3fc68a28 	.word	0x3fc68a28
 801dca0:	509f79fb 	.word	0x509f79fb
 801dca4:	3fd34413 	.word	0x3fd34413
 801dca8:	080228e9 	.word	0x080228e9
 801dcac:	080229a4 	.word	0x080229a4
 801dcb0:	7ff00000 	.word	0x7ff00000
 801dcb4:	080229a0 	.word	0x080229a0
 801dcb8:	08022997 	.word	0x08022997
 801dcbc:	080228c6 	.word	0x080228c6
 801dcc0:	3ff80000 	.word	0x3ff80000
 801dcc4:	08022b00 	.word	0x08022b00
 801dcc8:	080229ff 	.word	0x080229ff
 801dccc:	2501      	movs	r5, #1
 801dcce:	2300      	movs	r3, #0
 801dcd0:	9306      	str	r3, [sp, #24]
 801dcd2:	9508      	str	r5, [sp, #32]
 801dcd4:	f04f 33ff 	mov.w	r3, #4294967295
 801dcd8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801dcdc:	2200      	movs	r2, #0
 801dcde:	2312      	movs	r3, #18
 801dce0:	e7b0      	b.n	801dc44 <_dtoa_r+0x26c>
 801dce2:	2301      	movs	r3, #1
 801dce4:	9308      	str	r3, [sp, #32]
 801dce6:	e7f5      	b.n	801dcd4 <_dtoa_r+0x2fc>
 801dce8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dcea:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801dcee:	e7b8      	b.n	801dc62 <_dtoa_r+0x28a>
 801dcf0:	3101      	adds	r1, #1
 801dcf2:	6041      	str	r1, [r0, #4]
 801dcf4:	0052      	lsls	r2, r2, #1
 801dcf6:	e7b8      	b.n	801dc6a <_dtoa_r+0x292>
 801dcf8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801dcfa:	9a01      	ldr	r2, [sp, #4]
 801dcfc:	601a      	str	r2, [r3, #0]
 801dcfe:	9b03      	ldr	r3, [sp, #12]
 801dd00:	2b0e      	cmp	r3, #14
 801dd02:	f200 809d 	bhi.w	801de40 <_dtoa_r+0x468>
 801dd06:	2d00      	cmp	r5, #0
 801dd08:	f000 809a 	beq.w	801de40 <_dtoa_r+0x468>
 801dd0c:	9b00      	ldr	r3, [sp, #0]
 801dd0e:	2b00      	cmp	r3, #0
 801dd10:	dd32      	ble.n	801dd78 <_dtoa_r+0x3a0>
 801dd12:	4ab7      	ldr	r2, [pc, #732]	; (801dff0 <_dtoa_r+0x618>)
 801dd14:	f003 030f 	and.w	r3, r3, #15
 801dd18:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801dd1c:	e9d3 8900 	ldrd	r8, r9, [r3]
 801dd20:	9b00      	ldr	r3, [sp, #0]
 801dd22:	05d8      	lsls	r0, r3, #23
 801dd24:	ea4f 1723 	mov.w	r7, r3, asr #4
 801dd28:	d516      	bpl.n	801dd58 <_dtoa_r+0x380>
 801dd2a:	4bb2      	ldr	r3, [pc, #712]	; (801dff4 <_dtoa_r+0x61c>)
 801dd2c:	ec51 0b19 	vmov	r0, r1, d9
 801dd30:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801dd34:	f7e2 fd8a 	bl	800084c <__aeabi_ddiv>
 801dd38:	f007 070f 	and.w	r7, r7, #15
 801dd3c:	4682      	mov	sl, r0
 801dd3e:	468b      	mov	fp, r1
 801dd40:	2503      	movs	r5, #3
 801dd42:	4eac      	ldr	r6, [pc, #688]	; (801dff4 <_dtoa_r+0x61c>)
 801dd44:	b957      	cbnz	r7, 801dd5c <_dtoa_r+0x384>
 801dd46:	4642      	mov	r2, r8
 801dd48:	464b      	mov	r3, r9
 801dd4a:	4650      	mov	r0, sl
 801dd4c:	4659      	mov	r1, fp
 801dd4e:	f7e2 fd7d 	bl	800084c <__aeabi_ddiv>
 801dd52:	4682      	mov	sl, r0
 801dd54:	468b      	mov	fp, r1
 801dd56:	e028      	b.n	801ddaa <_dtoa_r+0x3d2>
 801dd58:	2502      	movs	r5, #2
 801dd5a:	e7f2      	b.n	801dd42 <_dtoa_r+0x36a>
 801dd5c:	07f9      	lsls	r1, r7, #31
 801dd5e:	d508      	bpl.n	801dd72 <_dtoa_r+0x39a>
 801dd60:	4640      	mov	r0, r8
 801dd62:	4649      	mov	r1, r9
 801dd64:	e9d6 2300 	ldrd	r2, r3, [r6]
 801dd68:	f7e2 fc46 	bl	80005f8 <__aeabi_dmul>
 801dd6c:	3501      	adds	r5, #1
 801dd6e:	4680      	mov	r8, r0
 801dd70:	4689      	mov	r9, r1
 801dd72:	107f      	asrs	r7, r7, #1
 801dd74:	3608      	adds	r6, #8
 801dd76:	e7e5      	b.n	801dd44 <_dtoa_r+0x36c>
 801dd78:	f000 809b 	beq.w	801deb2 <_dtoa_r+0x4da>
 801dd7c:	9b00      	ldr	r3, [sp, #0]
 801dd7e:	4f9d      	ldr	r7, [pc, #628]	; (801dff4 <_dtoa_r+0x61c>)
 801dd80:	425e      	negs	r6, r3
 801dd82:	4b9b      	ldr	r3, [pc, #620]	; (801dff0 <_dtoa_r+0x618>)
 801dd84:	f006 020f 	and.w	r2, r6, #15
 801dd88:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801dd8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dd90:	ec51 0b19 	vmov	r0, r1, d9
 801dd94:	f7e2 fc30 	bl	80005f8 <__aeabi_dmul>
 801dd98:	1136      	asrs	r6, r6, #4
 801dd9a:	4682      	mov	sl, r0
 801dd9c:	468b      	mov	fp, r1
 801dd9e:	2300      	movs	r3, #0
 801dda0:	2502      	movs	r5, #2
 801dda2:	2e00      	cmp	r6, #0
 801dda4:	d17a      	bne.n	801de9c <_dtoa_r+0x4c4>
 801dda6:	2b00      	cmp	r3, #0
 801dda8:	d1d3      	bne.n	801dd52 <_dtoa_r+0x37a>
 801ddaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ddac:	2b00      	cmp	r3, #0
 801ddae:	f000 8082 	beq.w	801deb6 <_dtoa_r+0x4de>
 801ddb2:	4b91      	ldr	r3, [pc, #580]	; (801dff8 <_dtoa_r+0x620>)
 801ddb4:	2200      	movs	r2, #0
 801ddb6:	4650      	mov	r0, sl
 801ddb8:	4659      	mov	r1, fp
 801ddba:	f7e2 fe8f 	bl	8000adc <__aeabi_dcmplt>
 801ddbe:	2800      	cmp	r0, #0
 801ddc0:	d079      	beq.n	801deb6 <_dtoa_r+0x4de>
 801ddc2:	9b03      	ldr	r3, [sp, #12]
 801ddc4:	2b00      	cmp	r3, #0
 801ddc6:	d076      	beq.n	801deb6 <_dtoa_r+0x4de>
 801ddc8:	9b02      	ldr	r3, [sp, #8]
 801ddca:	2b00      	cmp	r3, #0
 801ddcc:	dd36      	ble.n	801de3c <_dtoa_r+0x464>
 801ddce:	9b00      	ldr	r3, [sp, #0]
 801ddd0:	4650      	mov	r0, sl
 801ddd2:	4659      	mov	r1, fp
 801ddd4:	1e5f      	subs	r7, r3, #1
 801ddd6:	2200      	movs	r2, #0
 801ddd8:	4b88      	ldr	r3, [pc, #544]	; (801dffc <_dtoa_r+0x624>)
 801ddda:	f7e2 fc0d 	bl	80005f8 <__aeabi_dmul>
 801ddde:	9e02      	ldr	r6, [sp, #8]
 801dde0:	4682      	mov	sl, r0
 801dde2:	468b      	mov	fp, r1
 801dde4:	3501      	adds	r5, #1
 801dde6:	4628      	mov	r0, r5
 801dde8:	f7e2 fb9c 	bl	8000524 <__aeabi_i2d>
 801ddec:	4652      	mov	r2, sl
 801ddee:	465b      	mov	r3, fp
 801ddf0:	f7e2 fc02 	bl	80005f8 <__aeabi_dmul>
 801ddf4:	4b82      	ldr	r3, [pc, #520]	; (801e000 <_dtoa_r+0x628>)
 801ddf6:	2200      	movs	r2, #0
 801ddf8:	f7e2 fa48 	bl	800028c <__adddf3>
 801ddfc:	46d0      	mov	r8, sl
 801ddfe:	46d9      	mov	r9, fp
 801de00:	4682      	mov	sl, r0
 801de02:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801de06:	2e00      	cmp	r6, #0
 801de08:	d158      	bne.n	801debc <_dtoa_r+0x4e4>
 801de0a:	4b7e      	ldr	r3, [pc, #504]	; (801e004 <_dtoa_r+0x62c>)
 801de0c:	2200      	movs	r2, #0
 801de0e:	4640      	mov	r0, r8
 801de10:	4649      	mov	r1, r9
 801de12:	f7e2 fa39 	bl	8000288 <__aeabi_dsub>
 801de16:	4652      	mov	r2, sl
 801de18:	465b      	mov	r3, fp
 801de1a:	4680      	mov	r8, r0
 801de1c:	4689      	mov	r9, r1
 801de1e:	f7e2 fe7b 	bl	8000b18 <__aeabi_dcmpgt>
 801de22:	2800      	cmp	r0, #0
 801de24:	f040 8295 	bne.w	801e352 <_dtoa_r+0x97a>
 801de28:	4652      	mov	r2, sl
 801de2a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801de2e:	4640      	mov	r0, r8
 801de30:	4649      	mov	r1, r9
 801de32:	f7e2 fe53 	bl	8000adc <__aeabi_dcmplt>
 801de36:	2800      	cmp	r0, #0
 801de38:	f040 8289 	bne.w	801e34e <_dtoa_r+0x976>
 801de3c:	ec5b ab19 	vmov	sl, fp, d9
 801de40:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801de42:	2b00      	cmp	r3, #0
 801de44:	f2c0 8148 	blt.w	801e0d8 <_dtoa_r+0x700>
 801de48:	9a00      	ldr	r2, [sp, #0]
 801de4a:	2a0e      	cmp	r2, #14
 801de4c:	f300 8144 	bgt.w	801e0d8 <_dtoa_r+0x700>
 801de50:	4b67      	ldr	r3, [pc, #412]	; (801dff0 <_dtoa_r+0x618>)
 801de52:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801de56:	e9d3 8900 	ldrd	r8, r9, [r3]
 801de5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801de5c:	2b00      	cmp	r3, #0
 801de5e:	f280 80d5 	bge.w	801e00c <_dtoa_r+0x634>
 801de62:	9b03      	ldr	r3, [sp, #12]
 801de64:	2b00      	cmp	r3, #0
 801de66:	f300 80d1 	bgt.w	801e00c <_dtoa_r+0x634>
 801de6a:	f040 826f 	bne.w	801e34c <_dtoa_r+0x974>
 801de6e:	4b65      	ldr	r3, [pc, #404]	; (801e004 <_dtoa_r+0x62c>)
 801de70:	2200      	movs	r2, #0
 801de72:	4640      	mov	r0, r8
 801de74:	4649      	mov	r1, r9
 801de76:	f7e2 fbbf 	bl	80005f8 <__aeabi_dmul>
 801de7a:	4652      	mov	r2, sl
 801de7c:	465b      	mov	r3, fp
 801de7e:	f7e2 fe41 	bl	8000b04 <__aeabi_dcmpge>
 801de82:	9e03      	ldr	r6, [sp, #12]
 801de84:	4637      	mov	r7, r6
 801de86:	2800      	cmp	r0, #0
 801de88:	f040 8245 	bne.w	801e316 <_dtoa_r+0x93e>
 801de8c:	9d01      	ldr	r5, [sp, #4]
 801de8e:	2331      	movs	r3, #49	; 0x31
 801de90:	f805 3b01 	strb.w	r3, [r5], #1
 801de94:	9b00      	ldr	r3, [sp, #0]
 801de96:	3301      	adds	r3, #1
 801de98:	9300      	str	r3, [sp, #0]
 801de9a:	e240      	b.n	801e31e <_dtoa_r+0x946>
 801de9c:	07f2      	lsls	r2, r6, #31
 801de9e:	d505      	bpl.n	801deac <_dtoa_r+0x4d4>
 801dea0:	e9d7 2300 	ldrd	r2, r3, [r7]
 801dea4:	f7e2 fba8 	bl	80005f8 <__aeabi_dmul>
 801dea8:	3501      	adds	r5, #1
 801deaa:	2301      	movs	r3, #1
 801deac:	1076      	asrs	r6, r6, #1
 801deae:	3708      	adds	r7, #8
 801deb0:	e777      	b.n	801dda2 <_dtoa_r+0x3ca>
 801deb2:	2502      	movs	r5, #2
 801deb4:	e779      	b.n	801ddaa <_dtoa_r+0x3d2>
 801deb6:	9f00      	ldr	r7, [sp, #0]
 801deb8:	9e03      	ldr	r6, [sp, #12]
 801deba:	e794      	b.n	801dde6 <_dtoa_r+0x40e>
 801debc:	9901      	ldr	r1, [sp, #4]
 801debe:	4b4c      	ldr	r3, [pc, #304]	; (801dff0 <_dtoa_r+0x618>)
 801dec0:	4431      	add	r1, r6
 801dec2:	910d      	str	r1, [sp, #52]	; 0x34
 801dec4:	9908      	ldr	r1, [sp, #32]
 801dec6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801deca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801dece:	2900      	cmp	r1, #0
 801ded0:	d043      	beq.n	801df5a <_dtoa_r+0x582>
 801ded2:	494d      	ldr	r1, [pc, #308]	; (801e008 <_dtoa_r+0x630>)
 801ded4:	2000      	movs	r0, #0
 801ded6:	f7e2 fcb9 	bl	800084c <__aeabi_ddiv>
 801deda:	4652      	mov	r2, sl
 801dedc:	465b      	mov	r3, fp
 801dede:	f7e2 f9d3 	bl	8000288 <__aeabi_dsub>
 801dee2:	9d01      	ldr	r5, [sp, #4]
 801dee4:	4682      	mov	sl, r0
 801dee6:	468b      	mov	fp, r1
 801dee8:	4649      	mov	r1, r9
 801deea:	4640      	mov	r0, r8
 801deec:	f7e2 fe34 	bl	8000b58 <__aeabi_d2iz>
 801def0:	4606      	mov	r6, r0
 801def2:	f7e2 fb17 	bl	8000524 <__aeabi_i2d>
 801def6:	4602      	mov	r2, r0
 801def8:	460b      	mov	r3, r1
 801defa:	4640      	mov	r0, r8
 801defc:	4649      	mov	r1, r9
 801defe:	f7e2 f9c3 	bl	8000288 <__aeabi_dsub>
 801df02:	3630      	adds	r6, #48	; 0x30
 801df04:	f805 6b01 	strb.w	r6, [r5], #1
 801df08:	4652      	mov	r2, sl
 801df0a:	465b      	mov	r3, fp
 801df0c:	4680      	mov	r8, r0
 801df0e:	4689      	mov	r9, r1
 801df10:	f7e2 fde4 	bl	8000adc <__aeabi_dcmplt>
 801df14:	2800      	cmp	r0, #0
 801df16:	d163      	bne.n	801dfe0 <_dtoa_r+0x608>
 801df18:	4642      	mov	r2, r8
 801df1a:	464b      	mov	r3, r9
 801df1c:	4936      	ldr	r1, [pc, #216]	; (801dff8 <_dtoa_r+0x620>)
 801df1e:	2000      	movs	r0, #0
 801df20:	f7e2 f9b2 	bl	8000288 <__aeabi_dsub>
 801df24:	4652      	mov	r2, sl
 801df26:	465b      	mov	r3, fp
 801df28:	f7e2 fdd8 	bl	8000adc <__aeabi_dcmplt>
 801df2c:	2800      	cmp	r0, #0
 801df2e:	f040 80b5 	bne.w	801e09c <_dtoa_r+0x6c4>
 801df32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801df34:	429d      	cmp	r5, r3
 801df36:	d081      	beq.n	801de3c <_dtoa_r+0x464>
 801df38:	4b30      	ldr	r3, [pc, #192]	; (801dffc <_dtoa_r+0x624>)
 801df3a:	2200      	movs	r2, #0
 801df3c:	4650      	mov	r0, sl
 801df3e:	4659      	mov	r1, fp
 801df40:	f7e2 fb5a 	bl	80005f8 <__aeabi_dmul>
 801df44:	4b2d      	ldr	r3, [pc, #180]	; (801dffc <_dtoa_r+0x624>)
 801df46:	4682      	mov	sl, r0
 801df48:	468b      	mov	fp, r1
 801df4a:	4640      	mov	r0, r8
 801df4c:	4649      	mov	r1, r9
 801df4e:	2200      	movs	r2, #0
 801df50:	f7e2 fb52 	bl	80005f8 <__aeabi_dmul>
 801df54:	4680      	mov	r8, r0
 801df56:	4689      	mov	r9, r1
 801df58:	e7c6      	b.n	801dee8 <_dtoa_r+0x510>
 801df5a:	4650      	mov	r0, sl
 801df5c:	4659      	mov	r1, fp
 801df5e:	f7e2 fb4b 	bl	80005f8 <__aeabi_dmul>
 801df62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801df64:	9d01      	ldr	r5, [sp, #4]
 801df66:	930f      	str	r3, [sp, #60]	; 0x3c
 801df68:	4682      	mov	sl, r0
 801df6a:	468b      	mov	fp, r1
 801df6c:	4649      	mov	r1, r9
 801df6e:	4640      	mov	r0, r8
 801df70:	f7e2 fdf2 	bl	8000b58 <__aeabi_d2iz>
 801df74:	4606      	mov	r6, r0
 801df76:	f7e2 fad5 	bl	8000524 <__aeabi_i2d>
 801df7a:	3630      	adds	r6, #48	; 0x30
 801df7c:	4602      	mov	r2, r0
 801df7e:	460b      	mov	r3, r1
 801df80:	4640      	mov	r0, r8
 801df82:	4649      	mov	r1, r9
 801df84:	f7e2 f980 	bl	8000288 <__aeabi_dsub>
 801df88:	f805 6b01 	strb.w	r6, [r5], #1
 801df8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801df8e:	429d      	cmp	r5, r3
 801df90:	4680      	mov	r8, r0
 801df92:	4689      	mov	r9, r1
 801df94:	f04f 0200 	mov.w	r2, #0
 801df98:	d124      	bne.n	801dfe4 <_dtoa_r+0x60c>
 801df9a:	4b1b      	ldr	r3, [pc, #108]	; (801e008 <_dtoa_r+0x630>)
 801df9c:	4650      	mov	r0, sl
 801df9e:	4659      	mov	r1, fp
 801dfa0:	f7e2 f974 	bl	800028c <__adddf3>
 801dfa4:	4602      	mov	r2, r0
 801dfa6:	460b      	mov	r3, r1
 801dfa8:	4640      	mov	r0, r8
 801dfaa:	4649      	mov	r1, r9
 801dfac:	f7e2 fdb4 	bl	8000b18 <__aeabi_dcmpgt>
 801dfb0:	2800      	cmp	r0, #0
 801dfb2:	d173      	bne.n	801e09c <_dtoa_r+0x6c4>
 801dfb4:	4652      	mov	r2, sl
 801dfb6:	465b      	mov	r3, fp
 801dfb8:	4913      	ldr	r1, [pc, #76]	; (801e008 <_dtoa_r+0x630>)
 801dfba:	2000      	movs	r0, #0
 801dfbc:	f7e2 f964 	bl	8000288 <__aeabi_dsub>
 801dfc0:	4602      	mov	r2, r0
 801dfc2:	460b      	mov	r3, r1
 801dfc4:	4640      	mov	r0, r8
 801dfc6:	4649      	mov	r1, r9
 801dfc8:	f7e2 fd88 	bl	8000adc <__aeabi_dcmplt>
 801dfcc:	2800      	cmp	r0, #0
 801dfce:	f43f af35 	beq.w	801de3c <_dtoa_r+0x464>
 801dfd2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801dfd4:	1e6b      	subs	r3, r5, #1
 801dfd6:	930f      	str	r3, [sp, #60]	; 0x3c
 801dfd8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801dfdc:	2b30      	cmp	r3, #48	; 0x30
 801dfde:	d0f8      	beq.n	801dfd2 <_dtoa_r+0x5fa>
 801dfe0:	9700      	str	r7, [sp, #0]
 801dfe2:	e049      	b.n	801e078 <_dtoa_r+0x6a0>
 801dfe4:	4b05      	ldr	r3, [pc, #20]	; (801dffc <_dtoa_r+0x624>)
 801dfe6:	f7e2 fb07 	bl	80005f8 <__aeabi_dmul>
 801dfea:	4680      	mov	r8, r0
 801dfec:	4689      	mov	r9, r1
 801dfee:	e7bd      	b.n	801df6c <_dtoa_r+0x594>
 801dff0:	08022b00 	.word	0x08022b00
 801dff4:	08022ad8 	.word	0x08022ad8
 801dff8:	3ff00000 	.word	0x3ff00000
 801dffc:	40240000 	.word	0x40240000
 801e000:	401c0000 	.word	0x401c0000
 801e004:	40140000 	.word	0x40140000
 801e008:	3fe00000 	.word	0x3fe00000
 801e00c:	9d01      	ldr	r5, [sp, #4]
 801e00e:	4656      	mov	r6, sl
 801e010:	465f      	mov	r7, fp
 801e012:	4642      	mov	r2, r8
 801e014:	464b      	mov	r3, r9
 801e016:	4630      	mov	r0, r6
 801e018:	4639      	mov	r1, r7
 801e01a:	f7e2 fc17 	bl	800084c <__aeabi_ddiv>
 801e01e:	f7e2 fd9b 	bl	8000b58 <__aeabi_d2iz>
 801e022:	4682      	mov	sl, r0
 801e024:	f7e2 fa7e 	bl	8000524 <__aeabi_i2d>
 801e028:	4642      	mov	r2, r8
 801e02a:	464b      	mov	r3, r9
 801e02c:	f7e2 fae4 	bl	80005f8 <__aeabi_dmul>
 801e030:	4602      	mov	r2, r0
 801e032:	460b      	mov	r3, r1
 801e034:	4630      	mov	r0, r6
 801e036:	4639      	mov	r1, r7
 801e038:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801e03c:	f7e2 f924 	bl	8000288 <__aeabi_dsub>
 801e040:	f805 6b01 	strb.w	r6, [r5], #1
 801e044:	9e01      	ldr	r6, [sp, #4]
 801e046:	9f03      	ldr	r7, [sp, #12]
 801e048:	1bae      	subs	r6, r5, r6
 801e04a:	42b7      	cmp	r7, r6
 801e04c:	4602      	mov	r2, r0
 801e04e:	460b      	mov	r3, r1
 801e050:	d135      	bne.n	801e0be <_dtoa_r+0x6e6>
 801e052:	f7e2 f91b 	bl	800028c <__adddf3>
 801e056:	4642      	mov	r2, r8
 801e058:	464b      	mov	r3, r9
 801e05a:	4606      	mov	r6, r0
 801e05c:	460f      	mov	r7, r1
 801e05e:	f7e2 fd5b 	bl	8000b18 <__aeabi_dcmpgt>
 801e062:	b9d0      	cbnz	r0, 801e09a <_dtoa_r+0x6c2>
 801e064:	4642      	mov	r2, r8
 801e066:	464b      	mov	r3, r9
 801e068:	4630      	mov	r0, r6
 801e06a:	4639      	mov	r1, r7
 801e06c:	f7e2 fd2c 	bl	8000ac8 <__aeabi_dcmpeq>
 801e070:	b110      	cbz	r0, 801e078 <_dtoa_r+0x6a0>
 801e072:	f01a 0f01 	tst.w	sl, #1
 801e076:	d110      	bne.n	801e09a <_dtoa_r+0x6c2>
 801e078:	4620      	mov	r0, r4
 801e07a:	ee18 1a10 	vmov	r1, s16
 801e07e:	f000 fd2f 	bl	801eae0 <_Bfree>
 801e082:	2300      	movs	r3, #0
 801e084:	9800      	ldr	r0, [sp, #0]
 801e086:	702b      	strb	r3, [r5, #0]
 801e088:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e08a:	3001      	adds	r0, #1
 801e08c:	6018      	str	r0, [r3, #0]
 801e08e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801e090:	2b00      	cmp	r3, #0
 801e092:	f43f acf1 	beq.w	801da78 <_dtoa_r+0xa0>
 801e096:	601d      	str	r5, [r3, #0]
 801e098:	e4ee      	b.n	801da78 <_dtoa_r+0xa0>
 801e09a:	9f00      	ldr	r7, [sp, #0]
 801e09c:	462b      	mov	r3, r5
 801e09e:	461d      	mov	r5, r3
 801e0a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801e0a4:	2a39      	cmp	r2, #57	; 0x39
 801e0a6:	d106      	bne.n	801e0b6 <_dtoa_r+0x6de>
 801e0a8:	9a01      	ldr	r2, [sp, #4]
 801e0aa:	429a      	cmp	r2, r3
 801e0ac:	d1f7      	bne.n	801e09e <_dtoa_r+0x6c6>
 801e0ae:	9901      	ldr	r1, [sp, #4]
 801e0b0:	2230      	movs	r2, #48	; 0x30
 801e0b2:	3701      	adds	r7, #1
 801e0b4:	700a      	strb	r2, [r1, #0]
 801e0b6:	781a      	ldrb	r2, [r3, #0]
 801e0b8:	3201      	adds	r2, #1
 801e0ba:	701a      	strb	r2, [r3, #0]
 801e0bc:	e790      	b.n	801dfe0 <_dtoa_r+0x608>
 801e0be:	4ba6      	ldr	r3, [pc, #664]	; (801e358 <_dtoa_r+0x980>)
 801e0c0:	2200      	movs	r2, #0
 801e0c2:	f7e2 fa99 	bl	80005f8 <__aeabi_dmul>
 801e0c6:	2200      	movs	r2, #0
 801e0c8:	2300      	movs	r3, #0
 801e0ca:	4606      	mov	r6, r0
 801e0cc:	460f      	mov	r7, r1
 801e0ce:	f7e2 fcfb 	bl	8000ac8 <__aeabi_dcmpeq>
 801e0d2:	2800      	cmp	r0, #0
 801e0d4:	d09d      	beq.n	801e012 <_dtoa_r+0x63a>
 801e0d6:	e7cf      	b.n	801e078 <_dtoa_r+0x6a0>
 801e0d8:	9a08      	ldr	r2, [sp, #32]
 801e0da:	2a00      	cmp	r2, #0
 801e0dc:	f000 80d7 	beq.w	801e28e <_dtoa_r+0x8b6>
 801e0e0:	9a06      	ldr	r2, [sp, #24]
 801e0e2:	2a01      	cmp	r2, #1
 801e0e4:	f300 80ba 	bgt.w	801e25c <_dtoa_r+0x884>
 801e0e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e0ea:	2a00      	cmp	r2, #0
 801e0ec:	f000 80b2 	beq.w	801e254 <_dtoa_r+0x87c>
 801e0f0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801e0f4:	9e07      	ldr	r6, [sp, #28]
 801e0f6:	9d04      	ldr	r5, [sp, #16]
 801e0f8:	9a04      	ldr	r2, [sp, #16]
 801e0fa:	441a      	add	r2, r3
 801e0fc:	9204      	str	r2, [sp, #16]
 801e0fe:	9a05      	ldr	r2, [sp, #20]
 801e100:	2101      	movs	r1, #1
 801e102:	441a      	add	r2, r3
 801e104:	4620      	mov	r0, r4
 801e106:	9205      	str	r2, [sp, #20]
 801e108:	f000 fda2 	bl	801ec50 <__i2b>
 801e10c:	4607      	mov	r7, r0
 801e10e:	2d00      	cmp	r5, #0
 801e110:	dd0c      	ble.n	801e12c <_dtoa_r+0x754>
 801e112:	9b05      	ldr	r3, [sp, #20]
 801e114:	2b00      	cmp	r3, #0
 801e116:	dd09      	ble.n	801e12c <_dtoa_r+0x754>
 801e118:	42ab      	cmp	r3, r5
 801e11a:	9a04      	ldr	r2, [sp, #16]
 801e11c:	bfa8      	it	ge
 801e11e:	462b      	movge	r3, r5
 801e120:	1ad2      	subs	r2, r2, r3
 801e122:	9204      	str	r2, [sp, #16]
 801e124:	9a05      	ldr	r2, [sp, #20]
 801e126:	1aed      	subs	r5, r5, r3
 801e128:	1ad3      	subs	r3, r2, r3
 801e12a:	9305      	str	r3, [sp, #20]
 801e12c:	9b07      	ldr	r3, [sp, #28]
 801e12e:	b31b      	cbz	r3, 801e178 <_dtoa_r+0x7a0>
 801e130:	9b08      	ldr	r3, [sp, #32]
 801e132:	2b00      	cmp	r3, #0
 801e134:	f000 80af 	beq.w	801e296 <_dtoa_r+0x8be>
 801e138:	2e00      	cmp	r6, #0
 801e13a:	dd13      	ble.n	801e164 <_dtoa_r+0x78c>
 801e13c:	4639      	mov	r1, r7
 801e13e:	4632      	mov	r2, r6
 801e140:	4620      	mov	r0, r4
 801e142:	f000 fe45 	bl	801edd0 <__pow5mult>
 801e146:	ee18 2a10 	vmov	r2, s16
 801e14a:	4601      	mov	r1, r0
 801e14c:	4607      	mov	r7, r0
 801e14e:	4620      	mov	r0, r4
 801e150:	f000 fd94 	bl	801ec7c <__multiply>
 801e154:	ee18 1a10 	vmov	r1, s16
 801e158:	4680      	mov	r8, r0
 801e15a:	4620      	mov	r0, r4
 801e15c:	f000 fcc0 	bl	801eae0 <_Bfree>
 801e160:	ee08 8a10 	vmov	s16, r8
 801e164:	9b07      	ldr	r3, [sp, #28]
 801e166:	1b9a      	subs	r2, r3, r6
 801e168:	d006      	beq.n	801e178 <_dtoa_r+0x7a0>
 801e16a:	ee18 1a10 	vmov	r1, s16
 801e16e:	4620      	mov	r0, r4
 801e170:	f000 fe2e 	bl	801edd0 <__pow5mult>
 801e174:	ee08 0a10 	vmov	s16, r0
 801e178:	2101      	movs	r1, #1
 801e17a:	4620      	mov	r0, r4
 801e17c:	f000 fd68 	bl	801ec50 <__i2b>
 801e180:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e182:	2b00      	cmp	r3, #0
 801e184:	4606      	mov	r6, r0
 801e186:	f340 8088 	ble.w	801e29a <_dtoa_r+0x8c2>
 801e18a:	461a      	mov	r2, r3
 801e18c:	4601      	mov	r1, r0
 801e18e:	4620      	mov	r0, r4
 801e190:	f000 fe1e 	bl	801edd0 <__pow5mult>
 801e194:	9b06      	ldr	r3, [sp, #24]
 801e196:	2b01      	cmp	r3, #1
 801e198:	4606      	mov	r6, r0
 801e19a:	f340 8081 	ble.w	801e2a0 <_dtoa_r+0x8c8>
 801e19e:	f04f 0800 	mov.w	r8, #0
 801e1a2:	6933      	ldr	r3, [r6, #16]
 801e1a4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801e1a8:	6918      	ldr	r0, [r3, #16]
 801e1aa:	f000 fd01 	bl	801ebb0 <__hi0bits>
 801e1ae:	f1c0 0020 	rsb	r0, r0, #32
 801e1b2:	9b05      	ldr	r3, [sp, #20]
 801e1b4:	4418      	add	r0, r3
 801e1b6:	f010 001f 	ands.w	r0, r0, #31
 801e1ba:	f000 8092 	beq.w	801e2e2 <_dtoa_r+0x90a>
 801e1be:	f1c0 0320 	rsb	r3, r0, #32
 801e1c2:	2b04      	cmp	r3, #4
 801e1c4:	f340 808a 	ble.w	801e2dc <_dtoa_r+0x904>
 801e1c8:	f1c0 001c 	rsb	r0, r0, #28
 801e1cc:	9b04      	ldr	r3, [sp, #16]
 801e1ce:	4403      	add	r3, r0
 801e1d0:	9304      	str	r3, [sp, #16]
 801e1d2:	9b05      	ldr	r3, [sp, #20]
 801e1d4:	4403      	add	r3, r0
 801e1d6:	4405      	add	r5, r0
 801e1d8:	9305      	str	r3, [sp, #20]
 801e1da:	9b04      	ldr	r3, [sp, #16]
 801e1dc:	2b00      	cmp	r3, #0
 801e1de:	dd07      	ble.n	801e1f0 <_dtoa_r+0x818>
 801e1e0:	ee18 1a10 	vmov	r1, s16
 801e1e4:	461a      	mov	r2, r3
 801e1e6:	4620      	mov	r0, r4
 801e1e8:	f000 fe4c 	bl	801ee84 <__lshift>
 801e1ec:	ee08 0a10 	vmov	s16, r0
 801e1f0:	9b05      	ldr	r3, [sp, #20]
 801e1f2:	2b00      	cmp	r3, #0
 801e1f4:	dd05      	ble.n	801e202 <_dtoa_r+0x82a>
 801e1f6:	4631      	mov	r1, r6
 801e1f8:	461a      	mov	r2, r3
 801e1fa:	4620      	mov	r0, r4
 801e1fc:	f000 fe42 	bl	801ee84 <__lshift>
 801e200:	4606      	mov	r6, r0
 801e202:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e204:	2b00      	cmp	r3, #0
 801e206:	d06e      	beq.n	801e2e6 <_dtoa_r+0x90e>
 801e208:	ee18 0a10 	vmov	r0, s16
 801e20c:	4631      	mov	r1, r6
 801e20e:	f000 fea9 	bl	801ef64 <__mcmp>
 801e212:	2800      	cmp	r0, #0
 801e214:	da67      	bge.n	801e2e6 <_dtoa_r+0x90e>
 801e216:	9b00      	ldr	r3, [sp, #0]
 801e218:	3b01      	subs	r3, #1
 801e21a:	ee18 1a10 	vmov	r1, s16
 801e21e:	9300      	str	r3, [sp, #0]
 801e220:	220a      	movs	r2, #10
 801e222:	2300      	movs	r3, #0
 801e224:	4620      	mov	r0, r4
 801e226:	f000 fc7d 	bl	801eb24 <__multadd>
 801e22a:	9b08      	ldr	r3, [sp, #32]
 801e22c:	ee08 0a10 	vmov	s16, r0
 801e230:	2b00      	cmp	r3, #0
 801e232:	f000 81b1 	beq.w	801e598 <_dtoa_r+0xbc0>
 801e236:	2300      	movs	r3, #0
 801e238:	4639      	mov	r1, r7
 801e23a:	220a      	movs	r2, #10
 801e23c:	4620      	mov	r0, r4
 801e23e:	f000 fc71 	bl	801eb24 <__multadd>
 801e242:	9b02      	ldr	r3, [sp, #8]
 801e244:	2b00      	cmp	r3, #0
 801e246:	4607      	mov	r7, r0
 801e248:	f300 808e 	bgt.w	801e368 <_dtoa_r+0x990>
 801e24c:	9b06      	ldr	r3, [sp, #24]
 801e24e:	2b02      	cmp	r3, #2
 801e250:	dc51      	bgt.n	801e2f6 <_dtoa_r+0x91e>
 801e252:	e089      	b.n	801e368 <_dtoa_r+0x990>
 801e254:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e256:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801e25a:	e74b      	b.n	801e0f4 <_dtoa_r+0x71c>
 801e25c:	9b03      	ldr	r3, [sp, #12]
 801e25e:	1e5e      	subs	r6, r3, #1
 801e260:	9b07      	ldr	r3, [sp, #28]
 801e262:	42b3      	cmp	r3, r6
 801e264:	bfbf      	itttt	lt
 801e266:	9b07      	ldrlt	r3, [sp, #28]
 801e268:	9607      	strlt	r6, [sp, #28]
 801e26a:	1af2      	sublt	r2, r6, r3
 801e26c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801e26e:	bfb6      	itet	lt
 801e270:	189b      	addlt	r3, r3, r2
 801e272:	1b9e      	subge	r6, r3, r6
 801e274:	930a      	strlt	r3, [sp, #40]	; 0x28
 801e276:	9b03      	ldr	r3, [sp, #12]
 801e278:	bfb8      	it	lt
 801e27a:	2600      	movlt	r6, #0
 801e27c:	2b00      	cmp	r3, #0
 801e27e:	bfb7      	itett	lt
 801e280:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801e284:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 801e288:	1a9d      	sublt	r5, r3, r2
 801e28a:	2300      	movlt	r3, #0
 801e28c:	e734      	b.n	801e0f8 <_dtoa_r+0x720>
 801e28e:	9e07      	ldr	r6, [sp, #28]
 801e290:	9d04      	ldr	r5, [sp, #16]
 801e292:	9f08      	ldr	r7, [sp, #32]
 801e294:	e73b      	b.n	801e10e <_dtoa_r+0x736>
 801e296:	9a07      	ldr	r2, [sp, #28]
 801e298:	e767      	b.n	801e16a <_dtoa_r+0x792>
 801e29a:	9b06      	ldr	r3, [sp, #24]
 801e29c:	2b01      	cmp	r3, #1
 801e29e:	dc18      	bgt.n	801e2d2 <_dtoa_r+0x8fa>
 801e2a0:	f1ba 0f00 	cmp.w	sl, #0
 801e2a4:	d115      	bne.n	801e2d2 <_dtoa_r+0x8fa>
 801e2a6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801e2aa:	b993      	cbnz	r3, 801e2d2 <_dtoa_r+0x8fa>
 801e2ac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801e2b0:	0d1b      	lsrs	r3, r3, #20
 801e2b2:	051b      	lsls	r3, r3, #20
 801e2b4:	b183      	cbz	r3, 801e2d8 <_dtoa_r+0x900>
 801e2b6:	9b04      	ldr	r3, [sp, #16]
 801e2b8:	3301      	adds	r3, #1
 801e2ba:	9304      	str	r3, [sp, #16]
 801e2bc:	9b05      	ldr	r3, [sp, #20]
 801e2be:	3301      	adds	r3, #1
 801e2c0:	9305      	str	r3, [sp, #20]
 801e2c2:	f04f 0801 	mov.w	r8, #1
 801e2c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e2c8:	2b00      	cmp	r3, #0
 801e2ca:	f47f af6a 	bne.w	801e1a2 <_dtoa_r+0x7ca>
 801e2ce:	2001      	movs	r0, #1
 801e2d0:	e76f      	b.n	801e1b2 <_dtoa_r+0x7da>
 801e2d2:	f04f 0800 	mov.w	r8, #0
 801e2d6:	e7f6      	b.n	801e2c6 <_dtoa_r+0x8ee>
 801e2d8:	4698      	mov	r8, r3
 801e2da:	e7f4      	b.n	801e2c6 <_dtoa_r+0x8ee>
 801e2dc:	f43f af7d 	beq.w	801e1da <_dtoa_r+0x802>
 801e2e0:	4618      	mov	r0, r3
 801e2e2:	301c      	adds	r0, #28
 801e2e4:	e772      	b.n	801e1cc <_dtoa_r+0x7f4>
 801e2e6:	9b03      	ldr	r3, [sp, #12]
 801e2e8:	2b00      	cmp	r3, #0
 801e2ea:	dc37      	bgt.n	801e35c <_dtoa_r+0x984>
 801e2ec:	9b06      	ldr	r3, [sp, #24]
 801e2ee:	2b02      	cmp	r3, #2
 801e2f0:	dd34      	ble.n	801e35c <_dtoa_r+0x984>
 801e2f2:	9b03      	ldr	r3, [sp, #12]
 801e2f4:	9302      	str	r3, [sp, #8]
 801e2f6:	9b02      	ldr	r3, [sp, #8]
 801e2f8:	b96b      	cbnz	r3, 801e316 <_dtoa_r+0x93e>
 801e2fa:	4631      	mov	r1, r6
 801e2fc:	2205      	movs	r2, #5
 801e2fe:	4620      	mov	r0, r4
 801e300:	f000 fc10 	bl	801eb24 <__multadd>
 801e304:	4601      	mov	r1, r0
 801e306:	4606      	mov	r6, r0
 801e308:	ee18 0a10 	vmov	r0, s16
 801e30c:	f000 fe2a 	bl	801ef64 <__mcmp>
 801e310:	2800      	cmp	r0, #0
 801e312:	f73f adbb 	bgt.w	801de8c <_dtoa_r+0x4b4>
 801e316:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e318:	9d01      	ldr	r5, [sp, #4]
 801e31a:	43db      	mvns	r3, r3
 801e31c:	9300      	str	r3, [sp, #0]
 801e31e:	f04f 0800 	mov.w	r8, #0
 801e322:	4631      	mov	r1, r6
 801e324:	4620      	mov	r0, r4
 801e326:	f000 fbdb 	bl	801eae0 <_Bfree>
 801e32a:	2f00      	cmp	r7, #0
 801e32c:	f43f aea4 	beq.w	801e078 <_dtoa_r+0x6a0>
 801e330:	f1b8 0f00 	cmp.w	r8, #0
 801e334:	d005      	beq.n	801e342 <_dtoa_r+0x96a>
 801e336:	45b8      	cmp	r8, r7
 801e338:	d003      	beq.n	801e342 <_dtoa_r+0x96a>
 801e33a:	4641      	mov	r1, r8
 801e33c:	4620      	mov	r0, r4
 801e33e:	f000 fbcf 	bl	801eae0 <_Bfree>
 801e342:	4639      	mov	r1, r7
 801e344:	4620      	mov	r0, r4
 801e346:	f000 fbcb 	bl	801eae0 <_Bfree>
 801e34a:	e695      	b.n	801e078 <_dtoa_r+0x6a0>
 801e34c:	2600      	movs	r6, #0
 801e34e:	4637      	mov	r7, r6
 801e350:	e7e1      	b.n	801e316 <_dtoa_r+0x93e>
 801e352:	9700      	str	r7, [sp, #0]
 801e354:	4637      	mov	r7, r6
 801e356:	e599      	b.n	801de8c <_dtoa_r+0x4b4>
 801e358:	40240000 	.word	0x40240000
 801e35c:	9b08      	ldr	r3, [sp, #32]
 801e35e:	2b00      	cmp	r3, #0
 801e360:	f000 80ca 	beq.w	801e4f8 <_dtoa_r+0xb20>
 801e364:	9b03      	ldr	r3, [sp, #12]
 801e366:	9302      	str	r3, [sp, #8]
 801e368:	2d00      	cmp	r5, #0
 801e36a:	dd05      	ble.n	801e378 <_dtoa_r+0x9a0>
 801e36c:	4639      	mov	r1, r7
 801e36e:	462a      	mov	r2, r5
 801e370:	4620      	mov	r0, r4
 801e372:	f000 fd87 	bl	801ee84 <__lshift>
 801e376:	4607      	mov	r7, r0
 801e378:	f1b8 0f00 	cmp.w	r8, #0
 801e37c:	d05b      	beq.n	801e436 <_dtoa_r+0xa5e>
 801e37e:	6879      	ldr	r1, [r7, #4]
 801e380:	4620      	mov	r0, r4
 801e382:	f000 fb6d 	bl	801ea60 <_Balloc>
 801e386:	4605      	mov	r5, r0
 801e388:	b928      	cbnz	r0, 801e396 <_dtoa_r+0x9be>
 801e38a:	4b87      	ldr	r3, [pc, #540]	; (801e5a8 <_dtoa_r+0xbd0>)
 801e38c:	4602      	mov	r2, r0
 801e38e:	f240 21ea 	movw	r1, #746	; 0x2ea
 801e392:	f7ff bb3b 	b.w	801da0c <_dtoa_r+0x34>
 801e396:	693a      	ldr	r2, [r7, #16]
 801e398:	3202      	adds	r2, #2
 801e39a:	0092      	lsls	r2, r2, #2
 801e39c:	f107 010c 	add.w	r1, r7, #12
 801e3a0:	300c      	adds	r0, #12
 801e3a2:	f7fe f9b3 	bl	801c70c <memcpy>
 801e3a6:	2201      	movs	r2, #1
 801e3a8:	4629      	mov	r1, r5
 801e3aa:	4620      	mov	r0, r4
 801e3ac:	f000 fd6a 	bl	801ee84 <__lshift>
 801e3b0:	9b01      	ldr	r3, [sp, #4]
 801e3b2:	f103 0901 	add.w	r9, r3, #1
 801e3b6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801e3ba:	4413      	add	r3, r2
 801e3bc:	9305      	str	r3, [sp, #20]
 801e3be:	f00a 0301 	and.w	r3, sl, #1
 801e3c2:	46b8      	mov	r8, r7
 801e3c4:	9304      	str	r3, [sp, #16]
 801e3c6:	4607      	mov	r7, r0
 801e3c8:	4631      	mov	r1, r6
 801e3ca:	ee18 0a10 	vmov	r0, s16
 801e3ce:	f7ff fa77 	bl	801d8c0 <quorem>
 801e3d2:	4641      	mov	r1, r8
 801e3d4:	9002      	str	r0, [sp, #8]
 801e3d6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801e3da:	ee18 0a10 	vmov	r0, s16
 801e3de:	f000 fdc1 	bl	801ef64 <__mcmp>
 801e3e2:	463a      	mov	r2, r7
 801e3e4:	9003      	str	r0, [sp, #12]
 801e3e6:	4631      	mov	r1, r6
 801e3e8:	4620      	mov	r0, r4
 801e3ea:	f000 fdd7 	bl	801ef9c <__mdiff>
 801e3ee:	68c2      	ldr	r2, [r0, #12]
 801e3f0:	f109 3bff 	add.w	fp, r9, #4294967295
 801e3f4:	4605      	mov	r5, r0
 801e3f6:	bb02      	cbnz	r2, 801e43a <_dtoa_r+0xa62>
 801e3f8:	4601      	mov	r1, r0
 801e3fa:	ee18 0a10 	vmov	r0, s16
 801e3fe:	f000 fdb1 	bl	801ef64 <__mcmp>
 801e402:	4602      	mov	r2, r0
 801e404:	4629      	mov	r1, r5
 801e406:	4620      	mov	r0, r4
 801e408:	9207      	str	r2, [sp, #28]
 801e40a:	f000 fb69 	bl	801eae0 <_Bfree>
 801e40e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801e412:	ea43 0102 	orr.w	r1, r3, r2
 801e416:	9b04      	ldr	r3, [sp, #16]
 801e418:	430b      	orrs	r3, r1
 801e41a:	464d      	mov	r5, r9
 801e41c:	d10f      	bne.n	801e43e <_dtoa_r+0xa66>
 801e41e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801e422:	d02a      	beq.n	801e47a <_dtoa_r+0xaa2>
 801e424:	9b03      	ldr	r3, [sp, #12]
 801e426:	2b00      	cmp	r3, #0
 801e428:	dd02      	ble.n	801e430 <_dtoa_r+0xa58>
 801e42a:	9b02      	ldr	r3, [sp, #8]
 801e42c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 801e430:	f88b a000 	strb.w	sl, [fp]
 801e434:	e775      	b.n	801e322 <_dtoa_r+0x94a>
 801e436:	4638      	mov	r0, r7
 801e438:	e7ba      	b.n	801e3b0 <_dtoa_r+0x9d8>
 801e43a:	2201      	movs	r2, #1
 801e43c:	e7e2      	b.n	801e404 <_dtoa_r+0xa2c>
 801e43e:	9b03      	ldr	r3, [sp, #12]
 801e440:	2b00      	cmp	r3, #0
 801e442:	db04      	blt.n	801e44e <_dtoa_r+0xa76>
 801e444:	9906      	ldr	r1, [sp, #24]
 801e446:	430b      	orrs	r3, r1
 801e448:	9904      	ldr	r1, [sp, #16]
 801e44a:	430b      	orrs	r3, r1
 801e44c:	d122      	bne.n	801e494 <_dtoa_r+0xabc>
 801e44e:	2a00      	cmp	r2, #0
 801e450:	ddee      	ble.n	801e430 <_dtoa_r+0xa58>
 801e452:	ee18 1a10 	vmov	r1, s16
 801e456:	2201      	movs	r2, #1
 801e458:	4620      	mov	r0, r4
 801e45a:	f000 fd13 	bl	801ee84 <__lshift>
 801e45e:	4631      	mov	r1, r6
 801e460:	ee08 0a10 	vmov	s16, r0
 801e464:	f000 fd7e 	bl	801ef64 <__mcmp>
 801e468:	2800      	cmp	r0, #0
 801e46a:	dc03      	bgt.n	801e474 <_dtoa_r+0xa9c>
 801e46c:	d1e0      	bne.n	801e430 <_dtoa_r+0xa58>
 801e46e:	f01a 0f01 	tst.w	sl, #1
 801e472:	d0dd      	beq.n	801e430 <_dtoa_r+0xa58>
 801e474:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801e478:	d1d7      	bne.n	801e42a <_dtoa_r+0xa52>
 801e47a:	2339      	movs	r3, #57	; 0x39
 801e47c:	f88b 3000 	strb.w	r3, [fp]
 801e480:	462b      	mov	r3, r5
 801e482:	461d      	mov	r5, r3
 801e484:	3b01      	subs	r3, #1
 801e486:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801e48a:	2a39      	cmp	r2, #57	; 0x39
 801e48c:	d071      	beq.n	801e572 <_dtoa_r+0xb9a>
 801e48e:	3201      	adds	r2, #1
 801e490:	701a      	strb	r2, [r3, #0]
 801e492:	e746      	b.n	801e322 <_dtoa_r+0x94a>
 801e494:	2a00      	cmp	r2, #0
 801e496:	dd07      	ble.n	801e4a8 <_dtoa_r+0xad0>
 801e498:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801e49c:	d0ed      	beq.n	801e47a <_dtoa_r+0xaa2>
 801e49e:	f10a 0301 	add.w	r3, sl, #1
 801e4a2:	f88b 3000 	strb.w	r3, [fp]
 801e4a6:	e73c      	b.n	801e322 <_dtoa_r+0x94a>
 801e4a8:	9b05      	ldr	r3, [sp, #20]
 801e4aa:	f809 ac01 	strb.w	sl, [r9, #-1]
 801e4ae:	4599      	cmp	r9, r3
 801e4b0:	d047      	beq.n	801e542 <_dtoa_r+0xb6a>
 801e4b2:	ee18 1a10 	vmov	r1, s16
 801e4b6:	2300      	movs	r3, #0
 801e4b8:	220a      	movs	r2, #10
 801e4ba:	4620      	mov	r0, r4
 801e4bc:	f000 fb32 	bl	801eb24 <__multadd>
 801e4c0:	45b8      	cmp	r8, r7
 801e4c2:	ee08 0a10 	vmov	s16, r0
 801e4c6:	f04f 0300 	mov.w	r3, #0
 801e4ca:	f04f 020a 	mov.w	r2, #10
 801e4ce:	4641      	mov	r1, r8
 801e4d0:	4620      	mov	r0, r4
 801e4d2:	d106      	bne.n	801e4e2 <_dtoa_r+0xb0a>
 801e4d4:	f000 fb26 	bl	801eb24 <__multadd>
 801e4d8:	4680      	mov	r8, r0
 801e4da:	4607      	mov	r7, r0
 801e4dc:	f109 0901 	add.w	r9, r9, #1
 801e4e0:	e772      	b.n	801e3c8 <_dtoa_r+0x9f0>
 801e4e2:	f000 fb1f 	bl	801eb24 <__multadd>
 801e4e6:	4639      	mov	r1, r7
 801e4e8:	4680      	mov	r8, r0
 801e4ea:	2300      	movs	r3, #0
 801e4ec:	220a      	movs	r2, #10
 801e4ee:	4620      	mov	r0, r4
 801e4f0:	f000 fb18 	bl	801eb24 <__multadd>
 801e4f4:	4607      	mov	r7, r0
 801e4f6:	e7f1      	b.n	801e4dc <_dtoa_r+0xb04>
 801e4f8:	9b03      	ldr	r3, [sp, #12]
 801e4fa:	9302      	str	r3, [sp, #8]
 801e4fc:	9d01      	ldr	r5, [sp, #4]
 801e4fe:	ee18 0a10 	vmov	r0, s16
 801e502:	4631      	mov	r1, r6
 801e504:	f7ff f9dc 	bl	801d8c0 <quorem>
 801e508:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801e50c:	9b01      	ldr	r3, [sp, #4]
 801e50e:	f805 ab01 	strb.w	sl, [r5], #1
 801e512:	1aea      	subs	r2, r5, r3
 801e514:	9b02      	ldr	r3, [sp, #8]
 801e516:	4293      	cmp	r3, r2
 801e518:	dd09      	ble.n	801e52e <_dtoa_r+0xb56>
 801e51a:	ee18 1a10 	vmov	r1, s16
 801e51e:	2300      	movs	r3, #0
 801e520:	220a      	movs	r2, #10
 801e522:	4620      	mov	r0, r4
 801e524:	f000 fafe 	bl	801eb24 <__multadd>
 801e528:	ee08 0a10 	vmov	s16, r0
 801e52c:	e7e7      	b.n	801e4fe <_dtoa_r+0xb26>
 801e52e:	9b02      	ldr	r3, [sp, #8]
 801e530:	2b00      	cmp	r3, #0
 801e532:	bfc8      	it	gt
 801e534:	461d      	movgt	r5, r3
 801e536:	9b01      	ldr	r3, [sp, #4]
 801e538:	bfd8      	it	le
 801e53a:	2501      	movle	r5, #1
 801e53c:	441d      	add	r5, r3
 801e53e:	f04f 0800 	mov.w	r8, #0
 801e542:	ee18 1a10 	vmov	r1, s16
 801e546:	2201      	movs	r2, #1
 801e548:	4620      	mov	r0, r4
 801e54a:	f000 fc9b 	bl	801ee84 <__lshift>
 801e54e:	4631      	mov	r1, r6
 801e550:	ee08 0a10 	vmov	s16, r0
 801e554:	f000 fd06 	bl	801ef64 <__mcmp>
 801e558:	2800      	cmp	r0, #0
 801e55a:	dc91      	bgt.n	801e480 <_dtoa_r+0xaa8>
 801e55c:	d102      	bne.n	801e564 <_dtoa_r+0xb8c>
 801e55e:	f01a 0f01 	tst.w	sl, #1
 801e562:	d18d      	bne.n	801e480 <_dtoa_r+0xaa8>
 801e564:	462b      	mov	r3, r5
 801e566:	461d      	mov	r5, r3
 801e568:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801e56c:	2a30      	cmp	r2, #48	; 0x30
 801e56e:	d0fa      	beq.n	801e566 <_dtoa_r+0xb8e>
 801e570:	e6d7      	b.n	801e322 <_dtoa_r+0x94a>
 801e572:	9a01      	ldr	r2, [sp, #4]
 801e574:	429a      	cmp	r2, r3
 801e576:	d184      	bne.n	801e482 <_dtoa_r+0xaaa>
 801e578:	9b00      	ldr	r3, [sp, #0]
 801e57a:	3301      	adds	r3, #1
 801e57c:	9300      	str	r3, [sp, #0]
 801e57e:	2331      	movs	r3, #49	; 0x31
 801e580:	7013      	strb	r3, [r2, #0]
 801e582:	e6ce      	b.n	801e322 <_dtoa_r+0x94a>
 801e584:	4b09      	ldr	r3, [pc, #36]	; (801e5ac <_dtoa_r+0xbd4>)
 801e586:	f7ff ba95 	b.w	801dab4 <_dtoa_r+0xdc>
 801e58a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801e58c:	2b00      	cmp	r3, #0
 801e58e:	f47f aa6e 	bne.w	801da6e <_dtoa_r+0x96>
 801e592:	4b07      	ldr	r3, [pc, #28]	; (801e5b0 <_dtoa_r+0xbd8>)
 801e594:	f7ff ba8e 	b.w	801dab4 <_dtoa_r+0xdc>
 801e598:	9b02      	ldr	r3, [sp, #8]
 801e59a:	2b00      	cmp	r3, #0
 801e59c:	dcae      	bgt.n	801e4fc <_dtoa_r+0xb24>
 801e59e:	9b06      	ldr	r3, [sp, #24]
 801e5a0:	2b02      	cmp	r3, #2
 801e5a2:	f73f aea8 	bgt.w	801e2f6 <_dtoa_r+0x91e>
 801e5a6:	e7a9      	b.n	801e4fc <_dtoa_r+0xb24>
 801e5a8:	080229ff 	.word	0x080229ff
 801e5ac:	080228c5 	.word	0x080228c5
 801e5b0:	08022997 	.word	0x08022997

0801e5b4 <__sflush_r>:
 801e5b4:	898a      	ldrh	r2, [r1, #12]
 801e5b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e5ba:	4605      	mov	r5, r0
 801e5bc:	0710      	lsls	r0, r2, #28
 801e5be:	460c      	mov	r4, r1
 801e5c0:	d458      	bmi.n	801e674 <__sflush_r+0xc0>
 801e5c2:	684b      	ldr	r3, [r1, #4]
 801e5c4:	2b00      	cmp	r3, #0
 801e5c6:	dc05      	bgt.n	801e5d4 <__sflush_r+0x20>
 801e5c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801e5ca:	2b00      	cmp	r3, #0
 801e5cc:	dc02      	bgt.n	801e5d4 <__sflush_r+0x20>
 801e5ce:	2000      	movs	r0, #0
 801e5d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e5d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e5d6:	2e00      	cmp	r6, #0
 801e5d8:	d0f9      	beq.n	801e5ce <__sflush_r+0x1a>
 801e5da:	2300      	movs	r3, #0
 801e5dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801e5e0:	682f      	ldr	r7, [r5, #0]
 801e5e2:	602b      	str	r3, [r5, #0]
 801e5e4:	d032      	beq.n	801e64c <__sflush_r+0x98>
 801e5e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801e5e8:	89a3      	ldrh	r3, [r4, #12]
 801e5ea:	075a      	lsls	r2, r3, #29
 801e5ec:	d505      	bpl.n	801e5fa <__sflush_r+0x46>
 801e5ee:	6863      	ldr	r3, [r4, #4]
 801e5f0:	1ac0      	subs	r0, r0, r3
 801e5f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801e5f4:	b10b      	cbz	r3, 801e5fa <__sflush_r+0x46>
 801e5f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801e5f8:	1ac0      	subs	r0, r0, r3
 801e5fa:	2300      	movs	r3, #0
 801e5fc:	4602      	mov	r2, r0
 801e5fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e600:	6a21      	ldr	r1, [r4, #32]
 801e602:	4628      	mov	r0, r5
 801e604:	47b0      	blx	r6
 801e606:	1c43      	adds	r3, r0, #1
 801e608:	89a3      	ldrh	r3, [r4, #12]
 801e60a:	d106      	bne.n	801e61a <__sflush_r+0x66>
 801e60c:	6829      	ldr	r1, [r5, #0]
 801e60e:	291d      	cmp	r1, #29
 801e610:	d82c      	bhi.n	801e66c <__sflush_r+0xb8>
 801e612:	4a2a      	ldr	r2, [pc, #168]	; (801e6bc <__sflush_r+0x108>)
 801e614:	40ca      	lsrs	r2, r1
 801e616:	07d6      	lsls	r6, r2, #31
 801e618:	d528      	bpl.n	801e66c <__sflush_r+0xb8>
 801e61a:	2200      	movs	r2, #0
 801e61c:	6062      	str	r2, [r4, #4]
 801e61e:	04d9      	lsls	r1, r3, #19
 801e620:	6922      	ldr	r2, [r4, #16]
 801e622:	6022      	str	r2, [r4, #0]
 801e624:	d504      	bpl.n	801e630 <__sflush_r+0x7c>
 801e626:	1c42      	adds	r2, r0, #1
 801e628:	d101      	bne.n	801e62e <__sflush_r+0x7a>
 801e62a:	682b      	ldr	r3, [r5, #0]
 801e62c:	b903      	cbnz	r3, 801e630 <__sflush_r+0x7c>
 801e62e:	6560      	str	r0, [r4, #84]	; 0x54
 801e630:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e632:	602f      	str	r7, [r5, #0]
 801e634:	2900      	cmp	r1, #0
 801e636:	d0ca      	beq.n	801e5ce <__sflush_r+0x1a>
 801e638:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e63c:	4299      	cmp	r1, r3
 801e63e:	d002      	beq.n	801e646 <__sflush_r+0x92>
 801e640:	4628      	mov	r0, r5
 801e642:	f7fe f879 	bl	801c738 <_free_r>
 801e646:	2000      	movs	r0, #0
 801e648:	6360      	str	r0, [r4, #52]	; 0x34
 801e64a:	e7c1      	b.n	801e5d0 <__sflush_r+0x1c>
 801e64c:	6a21      	ldr	r1, [r4, #32]
 801e64e:	2301      	movs	r3, #1
 801e650:	4628      	mov	r0, r5
 801e652:	47b0      	blx	r6
 801e654:	1c41      	adds	r1, r0, #1
 801e656:	d1c7      	bne.n	801e5e8 <__sflush_r+0x34>
 801e658:	682b      	ldr	r3, [r5, #0]
 801e65a:	2b00      	cmp	r3, #0
 801e65c:	d0c4      	beq.n	801e5e8 <__sflush_r+0x34>
 801e65e:	2b1d      	cmp	r3, #29
 801e660:	d001      	beq.n	801e666 <__sflush_r+0xb2>
 801e662:	2b16      	cmp	r3, #22
 801e664:	d101      	bne.n	801e66a <__sflush_r+0xb6>
 801e666:	602f      	str	r7, [r5, #0]
 801e668:	e7b1      	b.n	801e5ce <__sflush_r+0x1a>
 801e66a:	89a3      	ldrh	r3, [r4, #12]
 801e66c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e670:	81a3      	strh	r3, [r4, #12]
 801e672:	e7ad      	b.n	801e5d0 <__sflush_r+0x1c>
 801e674:	690f      	ldr	r7, [r1, #16]
 801e676:	2f00      	cmp	r7, #0
 801e678:	d0a9      	beq.n	801e5ce <__sflush_r+0x1a>
 801e67a:	0793      	lsls	r3, r2, #30
 801e67c:	680e      	ldr	r6, [r1, #0]
 801e67e:	bf08      	it	eq
 801e680:	694b      	ldreq	r3, [r1, #20]
 801e682:	600f      	str	r7, [r1, #0]
 801e684:	bf18      	it	ne
 801e686:	2300      	movne	r3, #0
 801e688:	eba6 0807 	sub.w	r8, r6, r7
 801e68c:	608b      	str	r3, [r1, #8]
 801e68e:	f1b8 0f00 	cmp.w	r8, #0
 801e692:	dd9c      	ble.n	801e5ce <__sflush_r+0x1a>
 801e694:	6a21      	ldr	r1, [r4, #32]
 801e696:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801e698:	4643      	mov	r3, r8
 801e69a:	463a      	mov	r2, r7
 801e69c:	4628      	mov	r0, r5
 801e69e:	47b0      	blx	r6
 801e6a0:	2800      	cmp	r0, #0
 801e6a2:	dc06      	bgt.n	801e6b2 <__sflush_r+0xfe>
 801e6a4:	89a3      	ldrh	r3, [r4, #12]
 801e6a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e6aa:	81a3      	strh	r3, [r4, #12]
 801e6ac:	f04f 30ff 	mov.w	r0, #4294967295
 801e6b0:	e78e      	b.n	801e5d0 <__sflush_r+0x1c>
 801e6b2:	4407      	add	r7, r0
 801e6b4:	eba8 0800 	sub.w	r8, r8, r0
 801e6b8:	e7e9      	b.n	801e68e <__sflush_r+0xda>
 801e6ba:	bf00      	nop
 801e6bc:	20400001 	.word	0x20400001

0801e6c0 <_fflush_r>:
 801e6c0:	b538      	push	{r3, r4, r5, lr}
 801e6c2:	690b      	ldr	r3, [r1, #16]
 801e6c4:	4605      	mov	r5, r0
 801e6c6:	460c      	mov	r4, r1
 801e6c8:	b913      	cbnz	r3, 801e6d0 <_fflush_r+0x10>
 801e6ca:	2500      	movs	r5, #0
 801e6cc:	4628      	mov	r0, r5
 801e6ce:	bd38      	pop	{r3, r4, r5, pc}
 801e6d0:	b118      	cbz	r0, 801e6da <_fflush_r+0x1a>
 801e6d2:	6983      	ldr	r3, [r0, #24]
 801e6d4:	b90b      	cbnz	r3, 801e6da <_fflush_r+0x1a>
 801e6d6:	f000 f887 	bl	801e7e8 <__sinit>
 801e6da:	4b14      	ldr	r3, [pc, #80]	; (801e72c <_fflush_r+0x6c>)
 801e6dc:	429c      	cmp	r4, r3
 801e6de:	d11b      	bne.n	801e718 <_fflush_r+0x58>
 801e6e0:	686c      	ldr	r4, [r5, #4]
 801e6e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e6e6:	2b00      	cmp	r3, #0
 801e6e8:	d0ef      	beq.n	801e6ca <_fflush_r+0xa>
 801e6ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801e6ec:	07d0      	lsls	r0, r2, #31
 801e6ee:	d404      	bmi.n	801e6fa <_fflush_r+0x3a>
 801e6f0:	0599      	lsls	r1, r3, #22
 801e6f2:	d402      	bmi.n	801e6fa <_fflush_r+0x3a>
 801e6f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e6f6:	f000 f91a 	bl	801e92e <__retarget_lock_acquire_recursive>
 801e6fa:	4628      	mov	r0, r5
 801e6fc:	4621      	mov	r1, r4
 801e6fe:	f7ff ff59 	bl	801e5b4 <__sflush_r>
 801e702:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e704:	07da      	lsls	r2, r3, #31
 801e706:	4605      	mov	r5, r0
 801e708:	d4e0      	bmi.n	801e6cc <_fflush_r+0xc>
 801e70a:	89a3      	ldrh	r3, [r4, #12]
 801e70c:	059b      	lsls	r3, r3, #22
 801e70e:	d4dd      	bmi.n	801e6cc <_fflush_r+0xc>
 801e710:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e712:	f000 f90d 	bl	801e930 <__retarget_lock_release_recursive>
 801e716:	e7d9      	b.n	801e6cc <_fflush_r+0xc>
 801e718:	4b05      	ldr	r3, [pc, #20]	; (801e730 <_fflush_r+0x70>)
 801e71a:	429c      	cmp	r4, r3
 801e71c:	d101      	bne.n	801e722 <_fflush_r+0x62>
 801e71e:	68ac      	ldr	r4, [r5, #8]
 801e720:	e7df      	b.n	801e6e2 <_fflush_r+0x22>
 801e722:	4b04      	ldr	r3, [pc, #16]	; (801e734 <_fflush_r+0x74>)
 801e724:	429c      	cmp	r4, r3
 801e726:	bf08      	it	eq
 801e728:	68ec      	ldreq	r4, [r5, #12]
 801e72a:	e7da      	b.n	801e6e2 <_fflush_r+0x22>
 801e72c:	08022a30 	.word	0x08022a30
 801e730:	08022a50 	.word	0x08022a50
 801e734:	08022a10 	.word	0x08022a10

0801e738 <std>:
 801e738:	2300      	movs	r3, #0
 801e73a:	b510      	push	{r4, lr}
 801e73c:	4604      	mov	r4, r0
 801e73e:	e9c0 3300 	strd	r3, r3, [r0]
 801e742:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801e746:	6083      	str	r3, [r0, #8]
 801e748:	8181      	strh	r1, [r0, #12]
 801e74a:	6643      	str	r3, [r0, #100]	; 0x64
 801e74c:	81c2      	strh	r2, [r0, #14]
 801e74e:	6183      	str	r3, [r0, #24]
 801e750:	4619      	mov	r1, r3
 801e752:	2208      	movs	r2, #8
 801e754:	305c      	adds	r0, #92	; 0x5c
 801e756:	f7fd ffe7 	bl	801c728 <memset>
 801e75a:	4b05      	ldr	r3, [pc, #20]	; (801e770 <std+0x38>)
 801e75c:	6263      	str	r3, [r4, #36]	; 0x24
 801e75e:	4b05      	ldr	r3, [pc, #20]	; (801e774 <std+0x3c>)
 801e760:	62a3      	str	r3, [r4, #40]	; 0x28
 801e762:	4b05      	ldr	r3, [pc, #20]	; (801e778 <std+0x40>)
 801e764:	62e3      	str	r3, [r4, #44]	; 0x2c
 801e766:	4b05      	ldr	r3, [pc, #20]	; (801e77c <std+0x44>)
 801e768:	6224      	str	r4, [r4, #32]
 801e76a:	6323      	str	r3, [r4, #48]	; 0x30
 801e76c:	bd10      	pop	{r4, pc}
 801e76e:	bf00      	nop
 801e770:	0801d639 	.word	0x0801d639
 801e774:	0801d65b 	.word	0x0801d65b
 801e778:	0801d693 	.word	0x0801d693
 801e77c:	0801d6b7 	.word	0x0801d6b7

0801e780 <_cleanup_r>:
 801e780:	4901      	ldr	r1, [pc, #4]	; (801e788 <_cleanup_r+0x8>)
 801e782:	f000 b8af 	b.w	801e8e4 <_fwalk_reent>
 801e786:	bf00      	nop
 801e788:	0801e6c1 	.word	0x0801e6c1

0801e78c <__sfmoreglue>:
 801e78c:	b570      	push	{r4, r5, r6, lr}
 801e78e:	2268      	movs	r2, #104	; 0x68
 801e790:	1e4d      	subs	r5, r1, #1
 801e792:	4355      	muls	r5, r2
 801e794:	460e      	mov	r6, r1
 801e796:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801e79a:	f7fe f839 	bl	801c810 <_malloc_r>
 801e79e:	4604      	mov	r4, r0
 801e7a0:	b140      	cbz	r0, 801e7b4 <__sfmoreglue+0x28>
 801e7a2:	2100      	movs	r1, #0
 801e7a4:	e9c0 1600 	strd	r1, r6, [r0]
 801e7a8:	300c      	adds	r0, #12
 801e7aa:	60a0      	str	r0, [r4, #8]
 801e7ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801e7b0:	f7fd ffba 	bl	801c728 <memset>
 801e7b4:	4620      	mov	r0, r4
 801e7b6:	bd70      	pop	{r4, r5, r6, pc}

0801e7b8 <__sfp_lock_acquire>:
 801e7b8:	4801      	ldr	r0, [pc, #4]	; (801e7c0 <__sfp_lock_acquire+0x8>)
 801e7ba:	f000 b8b8 	b.w	801e92e <__retarget_lock_acquire_recursive>
 801e7be:	bf00      	nop
 801e7c0:	20013905 	.word	0x20013905

0801e7c4 <__sfp_lock_release>:
 801e7c4:	4801      	ldr	r0, [pc, #4]	; (801e7cc <__sfp_lock_release+0x8>)
 801e7c6:	f000 b8b3 	b.w	801e930 <__retarget_lock_release_recursive>
 801e7ca:	bf00      	nop
 801e7cc:	20013905 	.word	0x20013905

0801e7d0 <__sinit_lock_acquire>:
 801e7d0:	4801      	ldr	r0, [pc, #4]	; (801e7d8 <__sinit_lock_acquire+0x8>)
 801e7d2:	f000 b8ac 	b.w	801e92e <__retarget_lock_acquire_recursive>
 801e7d6:	bf00      	nop
 801e7d8:	20013906 	.word	0x20013906

0801e7dc <__sinit_lock_release>:
 801e7dc:	4801      	ldr	r0, [pc, #4]	; (801e7e4 <__sinit_lock_release+0x8>)
 801e7de:	f000 b8a7 	b.w	801e930 <__retarget_lock_release_recursive>
 801e7e2:	bf00      	nop
 801e7e4:	20013906 	.word	0x20013906

0801e7e8 <__sinit>:
 801e7e8:	b510      	push	{r4, lr}
 801e7ea:	4604      	mov	r4, r0
 801e7ec:	f7ff fff0 	bl	801e7d0 <__sinit_lock_acquire>
 801e7f0:	69a3      	ldr	r3, [r4, #24]
 801e7f2:	b11b      	cbz	r3, 801e7fc <__sinit+0x14>
 801e7f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e7f8:	f7ff bff0 	b.w	801e7dc <__sinit_lock_release>
 801e7fc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801e800:	6523      	str	r3, [r4, #80]	; 0x50
 801e802:	4b13      	ldr	r3, [pc, #76]	; (801e850 <__sinit+0x68>)
 801e804:	4a13      	ldr	r2, [pc, #76]	; (801e854 <__sinit+0x6c>)
 801e806:	681b      	ldr	r3, [r3, #0]
 801e808:	62a2      	str	r2, [r4, #40]	; 0x28
 801e80a:	42a3      	cmp	r3, r4
 801e80c:	bf04      	itt	eq
 801e80e:	2301      	moveq	r3, #1
 801e810:	61a3      	streq	r3, [r4, #24]
 801e812:	4620      	mov	r0, r4
 801e814:	f000 f820 	bl	801e858 <__sfp>
 801e818:	6060      	str	r0, [r4, #4]
 801e81a:	4620      	mov	r0, r4
 801e81c:	f000 f81c 	bl	801e858 <__sfp>
 801e820:	60a0      	str	r0, [r4, #8]
 801e822:	4620      	mov	r0, r4
 801e824:	f000 f818 	bl	801e858 <__sfp>
 801e828:	2200      	movs	r2, #0
 801e82a:	60e0      	str	r0, [r4, #12]
 801e82c:	2104      	movs	r1, #4
 801e82e:	6860      	ldr	r0, [r4, #4]
 801e830:	f7ff ff82 	bl	801e738 <std>
 801e834:	68a0      	ldr	r0, [r4, #8]
 801e836:	2201      	movs	r2, #1
 801e838:	2109      	movs	r1, #9
 801e83a:	f7ff ff7d 	bl	801e738 <std>
 801e83e:	68e0      	ldr	r0, [r4, #12]
 801e840:	2202      	movs	r2, #2
 801e842:	2112      	movs	r1, #18
 801e844:	f7ff ff78 	bl	801e738 <std>
 801e848:	2301      	movs	r3, #1
 801e84a:	61a3      	str	r3, [r4, #24]
 801e84c:	e7d2      	b.n	801e7f4 <__sinit+0xc>
 801e84e:	bf00      	nop
 801e850:	080228a0 	.word	0x080228a0
 801e854:	0801e781 	.word	0x0801e781

0801e858 <__sfp>:
 801e858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e85a:	4607      	mov	r7, r0
 801e85c:	f7ff ffac 	bl	801e7b8 <__sfp_lock_acquire>
 801e860:	4b1e      	ldr	r3, [pc, #120]	; (801e8dc <__sfp+0x84>)
 801e862:	681e      	ldr	r6, [r3, #0]
 801e864:	69b3      	ldr	r3, [r6, #24]
 801e866:	b913      	cbnz	r3, 801e86e <__sfp+0x16>
 801e868:	4630      	mov	r0, r6
 801e86a:	f7ff ffbd 	bl	801e7e8 <__sinit>
 801e86e:	3648      	adds	r6, #72	; 0x48
 801e870:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801e874:	3b01      	subs	r3, #1
 801e876:	d503      	bpl.n	801e880 <__sfp+0x28>
 801e878:	6833      	ldr	r3, [r6, #0]
 801e87a:	b30b      	cbz	r3, 801e8c0 <__sfp+0x68>
 801e87c:	6836      	ldr	r6, [r6, #0]
 801e87e:	e7f7      	b.n	801e870 <__sfp+0x18>
 801e880:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801e884:	b9d5      	cbnz	r5, 801e8bc <__sfp+0x64>
 801e886:	4b16      	ldr	r3, [pc, #88]	; (801e8e0 <__sfp+0x88>)
 801e888:	60e3      	str	r3, [r4, #12]
 801e88a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801e88e:	6665      	str	r5, [r4, #100]	; 0x64
 801e890:	f000 f84c 	bl	801e92c <__retarget_lock_init_recursive>
 801e894:	f7ff ff96 	bl	801e7c4 <__sfp_lock_release>
 801e898:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801e89c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801e8a0:	6025      	str	r5, [r4, #0]
 801e8a2:	61a5      	str	r5, [r4, #24]
 801e8a4:	2208      	movs	r2, #8
 801e8a6:	4629      	mov	r1, r5
 801e8a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801e8ac:	f7fd ff3c 	bl	801c728 <memset>
 801e8b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801e8b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801e8b8:	4620      	mov	r0, r4
 801e8ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e8bc:	3468      	adds	r4, #104	; 0x68
 801e8be:	e7d9      	b.n	801e874 <__sfp+0x1c>
 801e8c0:	2104      	movs	r1, #4
 801e8c2:	4638      	mov	r0, r7
 801e8c4:	f7ff ff62 	bl	801e78c <__sfmoreglue>
 801e8c8:	4604      	mov	r4, r0
 801e8ca:	6030      	str	r0, [r6, #0]
 801e8cc:	2800      	cmp	r0, #0
 801e8ce:	d1d5      	bne.n	801e87c <__sfp+0x24>
 801e8d0:	f7ff ff78 	bl	801e7c4 <__sfp_lock_release>
 801e8d4:	230c      	movs	r3, #12
 801e8d6:	603b      	str	r3, [r7, #0]
 801e8d8:	e7ee      	b.n	801e8b8 <__sfp+0x60>
 801e8da:	bf00      	nop
 801e8dc:	080228a0 	.word	0x080228a0
 801e8e0:	ffff0001 	.word	0xffff0001

0801e8e4 <_fwalk_reent>:
 801e8e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e8e8:	4606      	mov	r6, r0
 801e8ea:	4688      	mov	r8, r1
 801e8ec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801e8f0:	2700      	movs	r7, #0
 801e8f2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801e8f6:	f1b9 0901 	subs.w	r9, r9, #1
 801e8fa:	d505      	bpl.n	801e908 <_fwalk_reent+0x24>
 801e8fc:	6824      	ldr	r4, [r4, #0]
 801e8fe:	2c00      	cmp	r4, #0
 801e900:	d1f7      	bne.n	801e8f2 <_fwalk_reent+0xe>
 801e902:	4638      	mov	r0, r7
 801e904:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e908:	89ab      	ldrh	r3, [r5, #12]
 801e90a:	2b01      	cmp	r3, #1
 801e90c:	d907      	bls.n	801e91e <_fwalk_reent+0x3a>
 801e90e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801e912:	3301      	adds	r3, #1
 801e914:	d003      	beq.n	801e91e <_fwalk_reent+0x3a>
 801e916:	4629      	mov	r1, r5
 801e918:	4630      	mov	r0, r6
 801e91a:	47c0      	blx	r8
 801e91c:	4307      	orrs	r7, r0
 801e91e:	3568      	adds	r5, #104	; 0x68
 801e920:	e7e9      	b.n	801e8f6 <_fwalk_reent+0x12>
	...

0801e924 <_localeconv_r>:
 801e924:	4800      	ldr	r0, [pc, #0]	; (801e928 <_localeconv_r+0x4>)
 801e926:	4770      	bx	lr
 801e928:	10000178 	.word	0x10000178

0801e92c <__retarget_lock_init_recursive>:
 801e92c:	4770      	bx	lr

0801e92e <__retarget_lock_acquire_recursive>:
 801e92e:	4770      	bx	lr

0801e930 <__retarget_lock_release_recursive>:
 801e930:	4770      	bx	lr
	...

0801e934 <_lseek_r>:
 801e934:	b538      	push	{r3, r4, r5, lr}
 801e936:	4d07      	ldr	r5, [pc, #28]	; (801e954 <_lseek_r+0x20>)
 801e938:	4604      	mov	r4, r0
 801e93a:	4608      	mov	r0, r1
 801e93c:	4611      	mov	r1, r2
 801e93e:	2200      	movs	r2, #0
 801e940:	602a      	str	r2, [r5, #0]
 801e942:	461a      	mov	r2, r3
 801e944:	f7e6 f8f4 	bl	8004b30 <_lseek>
 801e948:	1c43      	adds	r3, r0, #1
 801e94a:	d102      	bne.n	801e952 <_lseek_r+0x1e>
 801e94c:	682b      	ldr	r3, [r5, #0]
 801e94e:	b103      	cbz	r3, 801e952 <_lseek_r+0x1e>
 801e950:	6023      	str	r3, [r4, #0]
 801e952:	bd38      	pop	{r3, r4, r5, pc}
 801e954:	20013900 	.word	0x20013900

0801e958 <__swhatbuf_r>:
 801e958:	b570      	push	{r4, r5, r6, lr}
 801e95a:	460e      	mov	r6, r1
 801e95c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e960:	2900      	cmp	r1, #0
 801e962:	b096      	sub	sp, #88	; 0x58
 801e964:	4614      	mov	r4, r2
 801e966:	461d      	mov	r5, r3
 801e968:	da08      	bge.n	801e97c <__swhatbuf_r+0x24>
 801e96a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801e96e:	2200      	movs	r2, #0
 801e970:	602a      	str	r2, [r5, #0]
 801e972:	061a      	lsls	r2, r3, #24
 801e974:	d410      	bmi.n	801e998 <__swhatbuf_r+0x40>
 801e976:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801e97a:	e00e      	b.n	801e99a <__swhatbuf_r+0x42>
 801e97c:	466a      	mov	r2, sp
 801e97e:	f000 fc2f 	bl	801f1e0 <_fstat_r>
 801e982:	2800      	cmp	r0, #0
 801e984:	dbf1      	blt.n	801e96a <__swhatbuf_r+0x12>
 801e986:	9a01      	ldr	r2, [sp, #4]
 801e988:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801e98c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801e990:	425a      	negs	r2, r3
 801e992:	415a      	adcs	r2, r3
 801e994:	602a      	str	r2, [r5, #0]
 801e996:	e7ee      	b.n	801e976 <__swhatbuf_r+0x1e>
 801e998:	2340      	movs	r3, #64	; 0x40
 801e99a:	2000      	movs	r0, #0
 801e99c:	6023      	str	r3, [r4, #0]
 801e99e:	b016      	add	sp, #88	; 0x58
 801e9a0:	bd70      	pop	{r4, r5, r6, pc}
	...

0801e9a4 <__smakebuf_r>:
 801e9a4:	898b      	ldrh	r3, [r1, #12]
 801e9a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801e9a8:	079d      	lsls	r5, r3, #30
 801e9aa:	4606      	mov	r6, r0
 801e9ac:	460c      	mov	r4, r1
 801e9ae:	d507      	bpl.n	801e9c0 <__smakebuf_r+0x1c>
 801e9b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801e9b4:	6023      	str	r3, [r4, #0]
 801e9b6:	6123      	str	r3, [r4, #16]
 801e9b8:	2301      	movs	r3, #1
 801e9ba:	6163      	str	r3, [r4, #20]
 801e9bc:	b002      	add	sp, #8
 801e9be:	bd70      	pop	{r4, r5, r6, pc}
 801e9c0:	ab01      	add	r3, sp, #4
 801e9c2:	466a      	mov	r2, sp
 801e9c4:	f7ff ffc8 	bl	801e958 <__swhatbuf_r>
 801e9c8:	9900      	ldr	r1, [sp, #0]
 801e9ca:	4605      	mov	r5, r0
 801e9cc:	4630      	mov	r0, r6
 801e9ce:	f7fd ff1f 	bl	801c810 <_malloc_r>
 801e9d2:	b948      	cbnz	r0, 801e9e8 <__smakebuf_r+0x44>
 801e9d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e9d8:	059a      	lsls	r2, r3, #22
 801e9da:	d4ef      	bmi.n	801e9bc <__smakebuf_r+0x18>
 801e9dc:	f023 0303 	bic.w	r3, r3, #3
 801e9e0:	f043 0302 	orr.w	r3, r3, #2
 801e9e4:	81a3      	strh	r3, [r4, #12]
 801e9e6:	e7e3      	b.n	801e9b0 <__smakebuf_r+0xc>
 801e9e8:	4b0d      	ldr	r3, [pc, #52]	; (801ea20 <__smakebuf_r+0x7c>)
 801e9ea:	62b3      	str	r3, [r6, #40]	; 0x28
 801e9ec:	89a3      	ldrh	r3, [r4, #12]
 801e9ee:	6020      	str	r0, [r4, #0]
 801e9f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e9f4:	81a3      	strh	r3, [r4, #12]
 801e9f6:	9b00      	ldr	r3, [sp, #0]
 801e9f8:	6163      	str	r3, [r4, #20]
 801e9fa:	9b01      	ldr	r3, [sp, #4]
 801e9fc:	6120      	str	r0, [r4, #16]
 801e9fe:	b15b      	cbz	r3, 801ea18 <__smakebuf_r+0x74>
 801ea00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ea04:	4630      	mov	r0, r6
 801ea06:	f000 fbfd 	bl	801f204 <_isatty_r>
 801ea0a:	b128      	cbz	r0, 801ea18 <__smakebuf_r+0x74>
 801ea0c:	89a3      	ldrh	r3, [r4, #12]
 801ea0e:	f023 0303 	bic.w	r3, r3, #3
 801ea12:	f043 0301 	orr.w	r3, r3, #1
 801ea16:	81a3      	strh	r3, [r4, #12]
 801ea18:	89a0      	ldrh	r0, [r4, #12]
 801ea1a:	4305      	orrs	r5, r0
 801ea1c:	81a5      	strh	r5, [r4, #12]
 801ea1e:	e7cd      	b.n	801e9bc <__smakebuf_r+0x18>
 801ea20:	0801e781 	.word	0x0801e781

0801ea24 <__ascii_mbtowc>:
 801ea24:	b082      	sub	sp, #8
 801ea26:	b901      	cbnz	r1, 801ea2a <__ascii_mbtowc+0x6>
 801ea28:	a901      	add	r1, sp, #4
 801ea2a:	b142      	cbz	r2, 801ea3e <__ascii_mbtowc+0x1a>
 801ea2c:	b14b      	cbz	r3, 801ea42 <__ascii_mbtowc+0x1e>
 801ea2e:	7813      	ldrb	r3, [r2, #0]
 801ea30:	600b      	str	r3, [r1, #0]
 801ea32:	7812      	ldrb	r2, [r2, #0]
 801ea34:	1e10      	subs	r0, r2, #0
 801ea36:	bf18      	it	ne
 801ea38:	2001      	movne	r0, #1
 801ea3a:	b002      	add	sp, #8
 801ea3c:	4770      	bx	lr
 801ea3e:	4610      	mov	r0, r2
 801ea40:	e7fb      	b.n	801ea3a <__ascii_mbtowc+0x16>
 801ea42:	f06f 0001 	mvn.w	r0, #1
 801ea46:	e7f8      	b.n	801ea3a <__ascii_mbtowc+0x16>

0801ea48 <__malloc_lock>:
 801ea48:	4801      	ldr	r0, [pc, #4]	; (801ea50 <__malloc_lock+0x8>)
 801ea4a:	f7ff bf70 	b.w	801e92e <__retarget_lock_acquire_recursive>
 801ea4e:	bf00      	nop
 801ea50:	20013904 	.word	0x20013904

0801ea54 <__malloc_unlock>:
 801ea54:	4801      	ldr	r0, [pc, #4]	; (801ea5c <__malloc_unlock+0x8>)
 801ea56:	f7ff bf6b 	b.w	801e930 <__retarget_lock_release_recursive>
 801ea5a:	bf00      	nop
 801ea5c:	20013904 	.word	0x20013904

0801ea60 <_Balloc>:
 801ea60:	b570      	push	{r4, r5, r6, lr}
 801ea62:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801ea64:	4604      	mov	r4, r0
 801ea66:	460d      	mov	r5, r1
 801ea68:	b976      	cbnz	r6, 801ea88 <_Balloc+0x28>
 801ea6a:	2010      	movs	r0, #16
 801ea6c:	f7fd fe36 	bl	801c6dc <malloc>
 801ea70:	4602      	mov	r2, r0
 801ea72:	6260      	str	r0, [r4, #36]	; 0x24
 801ea74:	b920      	cbnz	r0, 801ea80 <_Balloc+0x20>
 801ea76:	4b18      	ldr	r3, [pc, #96]	; (801ead8 <_Balloc+0x78>)
 801ea78:	4818      	ldr	r0, [pc, #96]	; (801eadc <_Balloc+0x7c>)
 801ea7a:	2166      	movs	r1, #102	; 0x66
 801ea7c:	f7fe fef2 	bl	801d864 <__assert_func>
 801ea80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801ea84:	6006      	str	r6, [r0, #0]
 801ea86:	60c6      	str	r6, [r0, #12]
 801ea88:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801ea8a:	68f3      	ldr	r3, [r6, #12]
 801ea8c:	b183      	cbz	r3, 801eab0 <_Balloc+0x50>
 801ea8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ea90:	68db      	ldr	r3, [r3, #12]
 801ea92:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801ea96:	b9b8      	cbnz	r0, 801eac8 <_Balloc+0x68>
 801ea98:	2101      	movs	r1, #1
 801ea9a:	fa01 f605 	lsl.w	r6, r1, r5
 801ea9e:	1d72      	adds	r2, r6, #5
 801eaa0:	0092      	lsls	r2, r2, #2
 801eaa2:	4620      	mov	r0, r4
 801eaa4:	f000 fb60 	bl	801f168 <_calloc_r>
 801eaa8:	b160      	cbz	r0, 801eac4 <_Balloc+0x64>
 801eaaa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801eaae:	e00e      	b.n	801eace <_Balloc+0x6e>
 801eab0:	2221      	movs	r2, #33	; 0x21
 801eab2:	2104      	movs	r1, #4
 801eab4:	4620      	mov	r0, r4
 801eab6:	f000 fb57 	bl	801f168 <_calloc_r>
 801eaba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801eabc:	60f0      	str	r0, [r6, #12]
 801eabe:	68db      	ldr	r3, [r3, #12]
 801eac0:	2b00      	cmp	r3, #0
 801eac2:	d1e4      	bne.n	801ea8e <_Balloc+0x2e>
 801eac4:	2000      	movs	r0, #0
 801eac6:	bd70      	pop	{r4, r5, r6, pc}
 801eac8:	6802      	ldr	r2, [r0, #0]
 801eaca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801eace:	2300      	movs	r3, #0
 801ead0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801ead4:	e7f7      	b.n	801eac6 <_Balloc+0x66>
 801ead6:	bf00      	nop
 801ead8:	080228e9 	.word	0x080228e9
 801eadc:	08022a7a 	.word	0x08022a7a

0801eae0 <_Bfree>:
 801eae0:	b570      	push	{r4, r5, r6, lr}
 801eae2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801eae4:	4605      	mov	r5, r0
 801eae6:	460c      	mov	r4, r1
 801eae8:	b976      	cbnz	r6, 801eb08 <_Bfree+0x28>
 801eaea:	2010      	movs	r0, #16
 801eaec:	f7fd fdf6 	bl	801c6dc <malloc>
 801eaf0:	4602      	mov	r2, r0
 801eaf2:	6268      	str	r0, [r5, #36]	; 0x24
 801eaf4:	b920      	cbnz	r0, 801eb00 <_Bfree+0x20>
 801eaf6:	4b09      	ldr	r3, [pc, #36]	; (801eb1c <_Bfree+0x3c>)
 801eaf8:	4809      	ldr	r0, [pc, #36]	; (801eb20 <_Bfree+0x40>)
 801eafa:	218a      	movs	r1, #138	; 0x8a
 801eafc:	f7fe feb2 	bl	801d864 <__assert_func>
 801eb00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801eb04:	6006      	str	r6, [r0, #0]
 801eb06:	60c6      	str	r6, [r0, #12]
 801eb08:	b13c      	cbz	r4, 801eb1a <_Bfree+0x3a>
 801eb0a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801eb0c:	6862      	ldr	r2, [r4, #4]
 801eb0e:	68db      	ldr	r3, [r3, #12]
 801eb10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801eb14:	6021      	str	r1, [r4, #0]
 801eb16:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801eb1a:	bd70      	pop	{r4, r5, r6, pc}
 801eb1c:	080228e9 	.word	0x080228e9
 801eb20:	08022a7a 	.word	0x08022a7a

0801eb24 <__multadd>:
 801eb24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801eb28:	690d      	ldr	r5, [r1, #16]
 801eb2a:	4607      	mov	r7, r0
 801eb2c:	460c      	mov	r4, r1
 801eb2e:	461e      	mov	r6, r3
 801eb30:	f101 0c14 	add.w	ip, r1, #20
 801eb34:	2000      	movs	r0, #0
 801eb36:	f8dc 3000 	ldr.w	r3, [ip]
 801eb3a:	b299      	uxth	r1, r3
 801eb3c:	fb02 6101 	mla	r1, r2, r1, r6
 801eb40:	0c1e      	lsrs	r6, r3, #16
 801eb42:	0c0b      	lsrs	r3, r1, #16
 801eb44:	fb02 3306 	mla	r3, r2, r6, r3
 801eb48:	b289      	uxth	r1, r1
 801eb4a:	3001      	adds	r0, #1
 801eb4c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801eb50:	4285      	cmp	r5, r0
 801eb52:	f84c 1b04 	str.w	r1, [ip], #4
 801eb56:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801eb5a:	dcec      	bgt.n	801eb36 <__multadd+0x12>
 801eb5c:	b30e      	cbz	r6, 801eba2 <__multadd+0x7e>
 801eb5e:	68a3      	ldr	r3, [r4, #8]
 801eb60:	42ab      	cmp	r3, r5
 801eb62:	dc19      	bgt.n	801eb98 <__multadd+0x74>
 801eb64:	6861      	ldr	r1, [r4, #4]
 801eb66:	4638      	mov	r0, r7
 801eb68:	3101      	adds	r1, #1
 801eb6a:	f7ff ff79 	bl	801ea60 <_Balloc>
 801eb6e:	4680      	mov	r8, r0
 801eb70:	b928      	cbnz	r0, 801eb7e <__multadd+0x5a>
 801eb72:	4602      	mov	r2, r0
 801eb74:	4b0c      	ldr	r3, [pc, #48]	; (801eba8 <__multadd+0x84>)
 801eb76:	480d      	ldr	r0, [pc, #52]	; (801ebac <__multadd+0x88>)
 801eb78:	21b5      	movs	r1, #181	; 0xb5
 801eb7a:	f7fe fe73 	bl	801d864 <__assert_func>
 801eb7e:	6922      	ldr	r2, [r4, #16]
 801eb80:	3202      	adds	r2, #2
 801eb82:	f104 010c 	add.w	r1, r4, #12
 801eb86:	0092      	lsls	r2, r2, #2
 801eb88:	300c      	adds	r0, #12
 801eb8a:	f7fd fdbf 	bl	801c70c <memcpy>
 801eb8e:	4621      	mov	r1, r4
 801eb90:	4638      	mov	r0, r7
 801eb92:	f7ff ffa5 	bl	801eae0 <_Bfree>
 801eb96:	4644      	mov	r4, r8
 801eb98:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801eb9c:	3501      	adds	r5, #1
 801eb9e:	615e      	str	r6, [r3, #20]
 801eba0:	6125      	str	r5, [r4, #16]
 801eba2:	4620      	mov	r0, r4
 801eba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801eba8:	080229ff 	.word	0x080229ff
 801ebac:	08022a7a 	.word	0x08022a7a

0801ebb0 <__hi0bits>:
 801ebb0:	0c03      	lsrs	r3, r0, #16
 801ebb2:	041b      	lsls	r3, r3, #16
 801ebb4:	b9d3      	cbnz	r3, 801ebec <__hi0bits+0x3c>
 801ebb6:	0400      	lsls	r0, r0, #16
 801ebb8:	2310      	movs	r3, #16
 801ebba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801ebbe:	bf04      	itt	eq
 801ebc0:	0200      	lsleq	r0, r0, #8
 801ebc2:	3308      	addeq	r3, #8
 801ebc4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801ebc8:	bf04      	itt	eq
 801ebca:	0100      	lsleq	r0, r0, #4
 801ebcc:	3304      	addeq	r3, #4
 801ebce:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801ebd2:	bf04      	itt	eq
 801ebd4:	0080      	lsleq	r0, r0, #2
 801ebd6:	3302      	addeq	r3, #2
 801ebd8:	2800      	cmp	r0, #0
 801ebda:	db05      	blt.n	801ebe8 <__hi0bits+0x38>
 801ebdc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801ebe0:	f103 0301 	add.w	r3, r3, #1
 801ebe4:	bf08      	it	eq
 801ebe6:	2320      	moveq	r3, #32
 801ebe8:	4618      	mov	r0, r3
 801ebea:	4770      	bx	lr
 801ebec:	2300      	movs	r3, #0
 801ebee:	e7e4      	b.n	801ebba <__hi0bits+0xa>

0801ebf0 <__lo0bits>:
 801ebf0:	6803      	ldr	r3, [r0, #0]
 801ebf2:	f013 0207 	ands.w	r2, r3, #7
 801ebf6:	4601      	mov	r1, r0
 801ebf8:	d00b      	beq.n	801ec12 <__lo0bits+0x22>
 801ebfa:	07da      	lsls	r2, r3, #31
 801ebfc:	d423      	bmi.n	801ec46 <__lo0bits+0x56>
 801ebfe:	0798      	lsls	r0, r3, #30
 801ec00:	bf49      	itett	mi
 801ec02:	085b      	lsrmi	r3, r3, #1
 801ec04:	089b      	lsrpl	r3, r3, #2
 801ec06:	2001      	movmi	r0, #1
 801ec08:	600b      	strmi	r3, [r1, #0]
 801ec0a:	bf5c      	itt	pl
 801ec0c:	600b      	strpl	r3, [r1, #0]
 801ec0e:	2002      	movpl	r0, #2
 801ec10:	4770      	bx	lr
 801ec12:	b298      	uxth	r0, r3
 801ec14:	b9a8      	cbnz	r0, 801ec42 <__lo0bits+0x52>
 801ec16:	0c1b      	lsrs	r3, r3, #16
 801ec18:	2010      	movs	r0, #16
 801ec1a:	b2da      	uxtb	r2, r3
 801ec1c:	b90a      	cbnz	r2, 801ec22 <__lo0bits+0x32>
 801ec1e:	3008      	adds	r0, #8
 801ec20:	0a1b      	lsrs	r3, r3, #8
 801ec22:	071a      	lsls	r2, r3, #28
 801ec24:	bf04      	itt	eq
 801ec26:	091b      	lsreq	r3, r3, #4
 801ec28:	3004      	addeq	r0, #4
 801ec2a:	079a      	lsls	r2, r3, #30
 801ec2c:	bf04      	itt	eq
 801ec2e:	089b      	lsreq	r3, r3, #2
 801ec30:	3002      	addeq	r0, #2
 801ec32:	07da      	lsls	r2, r3, #31
 801ec34:	d403      	bmi.n	801ec3e <__lo0bits+0x4e>
 801ec36:	085b      	lsrs	r3, r3, #1
 801ec38:	f100 0001 	add.w	r0, r0, #1
 801ec3c:	d005      	beq.n	801ec4a <__lo0bits+0x5a>
 801ec3e:	600b      	str	r3, [r1, #0]
 801ec40:	4770      	bx	lr
 801ec42:	4610      	mov	r0, r2
 801ec44:	e7e9      	b.n	801ec1a <__lo0bits+0x2a>
 801ec46:	2000      	movs	r0, #0
 801ec48:	4770      	bx	lr
 801ec4a:	2020      	movs	r0, #32
 801ec4c:	4770      	bx	lr
	...

0801ec50 <__i2b>:
 801ec50:	b510      	push	{r4, lr}
 801ec52:	460c      	mov	r4, r1
 801ec54:	2101      	movs	r1, #1
 801ec56:	f7ff ff03 	bl	801ea60 <_Balloc>
 801ec5a:	4602      	mov	r2, r0
 801ec5c:	b928      	cbnz	r0, 801ec6a <__i2b+0x1a>
 801ec5e:	4b05      	ldr	r3, [pc, #20]	; (801ec74 <__i2b+0x24>)
 801ec60:	4805      	ldr	r0, [pc, #20]	; (801ec78 <__i2b+0x28>)
 801ec62:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801ec66:	f7fe fdfd 	bl	801d864 <__assert_func>
 801ec6a:	2301      	movs	r3, #1
 801ec6c:	6144      	str	r4, [r0, #20]
 801ec6e:	6103      	str	r3, [r0, #16]
 801ec70:	bd10      	pop	{r4, pc}
 801ec72:	bf00      	nop
 801ec74:	080229ff 	.word	0x080229ff
 801ec78:	08022a7a 	.word	0x08022a7a

0801ec7c <__multiply>:
 801ec7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ec80:	4691      	mov	r9, r2
 801ec82:	690a      	ldr	r2, [r1, #16]
 801ec84:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801ec88:	429a      	cmp	r2, r3
 801ec8a:	bfb8      	it	lt
 801ec8c:	460b      	movlt	r3, r1
 801ec8e:	460c      	mov	r4, r1
 801ec90:	bfbc      	itt	lt
 801ec92:	464c      	movlt	r4, r9
 801ec94:	4699      	movlt	r9, r3
 801ec96:	6927      	ldr	r7, [r4, #16]
 801ec98:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801ec9c:	68a3      	ldr	r3, [r4, #8]
 801ec9e:	6861      	ldr	r1, [r4, #4]
 801eca0:	eb07 060a 	add.w	r6, r7, sl
 801eca4:	42b3      	cmp	r3, r6
 801eca6:	b085      	sub	sp, #20
 801eca8:	bfb8      	it	lt
 801ecaa:	3101      	addlt	r1, #1
 801ecac:	f7ff fed8 	bl	801ea60 <_Balloc>
 801ecb0:	b930      	cbnz	r0, 801ecc0 <__multiply+0x44>
 801ecb2:	4602      	mov	r2, r0
 801ecb4:	4b44      	ldr	r3, [pc, #272]	; (801edc8 <__multiply+0x14c>)
 801ecb6:	4845      	ldr	r0, [pc, #276]	; (801edcc <__multiply+0x150>)
 801ecb8:	f240 115d 	movw	r1, #349	; 0x15d
 801ecbc:	f7fe fdd2 	bl	801d864 <__assert_func>
 801ecc0:	f100 0514 	add.w	r5, r0, #20
 801ecc4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801ecc8:	462b      	mov	r3, r5
 801ecca:	2200      	movs	r2, #0
 801eccc:	4543      	cmp	r3, r8
 801ecce:	d321      	bcc.n	801ed14 <__multiply+0x98>
 801ecd0:	f104 0314 	add.w	r3, r4, #20
 801ecd4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801ecd8:	f109 0314 	add.w	r3, r9, #20
 801ecdc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801ece0:	9202      	str	r2, [sp, #8]
 801ece2:	1b3a      	subs	r2, r7, r4
 801ece4:	3a15      	subs	r2, #21
 801ece6:	f022 0203 	bic.w	r2, r2, #3
 801ecea:	3204      	adds	r2, #4
 801ecec:	f104 0115 	add.w	r1, r4, #21
 801ecf0:	428f      	cmp	r7, r1
 801ecf2:	bf38      	it	cc
 801ecf4:	2204      	movcc	r2, #4
 801ecf6:	9201      	str	r2, [sp, #4]
 801ecf8:	9a02      	ldr	r2, [sp, #8]
 801ecfa:	9303      	str	r3, [sp, #12]
 801ecfc:	429a      	cmp	r2, r3
 801ecfe:	d80c      	bhi.n	801ed1a <__multiply+0x9e>
 801ed00:	2e00      	cmp	r6, #0
 801ed02:	dd03      	ble.n	801ed0c <__multiply+0x90>
 801ed04:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801ed08:	2b00      	cmp	r3, #0
 801ed0a:	d05a      	beq.n	801edc2 <__multiply+0x146>
 801ed0c:	6106      	str	r6, [r0, #16]
 801ed0e:	b005      	add	sp, #20
 801ed10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ed14:	f843 2b04 	str.w	r2, [r3], #4
 801ed18:	e7d8      	b.n	801eccc <__multiply+0x50>
 801ed1a:	f8b3 a000 	ldrh.w	sl, [r3]
 801ed1e:	f1ba 0f00 	cmp.w	sl, #0
 801ed22:	d024      	beq.n	801ed6e <__multiply+0xf2>
 801ed24:	f104 0e14 	add.w	lr, r4, #20
 801ed28:	46a9      	mov	r9, r5
 801ed2a:	f04f 0c00 	mov.w	ip, #0
 801ed2e:	f85e 2b04 	ldr.w	r2, [lr], #4
 801ed32:	f8d9 1000 	ldr.w	r1, [r9]
 801ed36:	fa1f fb82 	uxth.w	fp, r2
 801ed3a:	b289      	uxth	r1, r1
 801ed3c:	fb0a 110b 	mla	r1, sl, fp, r1
 801ed40:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801ed44:	f8d9 2000 	ldr.w	r2, [r9]
 801ed48:	4461      	add	r1, ip
 801ed4a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801ed4e:	fb0a c20b 	mla	r2, sl, fp, ip
 801ed52:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801ed56:	b289      	uxth	r1, r1
 801ed58:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801ed5c:	4577      	cmp	r7, lr
 801ed5e:	f849 1b04 	str.w	r1, [r9], #4
 801ed62:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801ed66:	d8e2      	bhi.n	801ed2e <__multiply+0xb2>
 801ed68:	9a01      	ldr	r2, [sp, #4]
 801ed6a:	f845 c002 	str.w	ip, [r5, r2]
 801ed6e:	9a03      	ldr	r2, [sp, #12]
 801ed70:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801ed74:	3304      	adds	r3, #4
 801ed76:	f1b9 0f00 	cmp.w	r9, #0
 801ed7a:	d020      	beq.n	801edbe <__multiply+0x142>
 801ed7c:	6829      	ldr	r1, [r5, #0]
 801ed7e:	f104 0c14 	add.w	ip, r4, #20
 801ed82:	46ae      	mov	lr, r5
 801ed84:	f04f 0a00 	mov.w	sl, #0
 801ed88:	f8bc b000 	ldrh.w	fp, [ip]
 801ed8c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801ed90:	fb09 220b 	mla	r2, r9, fp, r2
 801ed94:	4492      	add	sl, r2
 801ed96:	b289      	uxth	r1, r1
 801ed98:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801ed9c:	f84e 1b04 	str.w	r1, [lr], #4
 801eda0:	f85c 2b04 	ldr.w	r2, [ip], #4
 801eda4:	f8be 1000 	ldrh.w	r1, [lr]
 801eda8:	0c12      	lsrs	r2, r2, #16
 801edaa:	fb09 1102 	mla	r1, r9, r2, r1
 801edae:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801edb2:	4567      	cmp	r7, ip
 801edb4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801edb8:	d8e6      	bhi.n	801ed88 <__multiply+0x10c>
 801edba:	9a01      	ldr	r2, [sp, #4]
 801edbc:	50a9      	str	r1, [r5, r2]
 801edbe:	3504      	adds	r5, #4
 801edc0:	e79a      	b.n	801ecf8 <__multiply+0x7c>
 801edc2:	3e01      	subs	r6, #1
 801edc4:	e79c      	b.n	801ed00 <__multiply+0x84>
 801edc6:	bf00      	nop
 801edc8:	080229ff 	.word	0x080229ff
 801edcc:	08022a7a 	.word	0x08022a7a

0801edd0 <__pow5mult>:
 801edd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801edd4:	4615      	mov	r5, r2
 801edd6:	f012 0203 	ands.w	r2, r2, #3
 801edda:	4606      	mov	r6, r0
 801eddc:	460f      	mov	r7, r1
 801edde:	d007      	beq.n	801edf0 <__pow5mult+0x20>
 801ede0:	4c25      	ldr	r4, [pc, #148]	; (801ee78 <__pow5mult+0xa8>)
 801ede2:	3a01      	subs	r2, #1
 801ede4:	2300      	movs	r3, #0
 801ede6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801edea:	f7ff fe9b 	bl	801eb24 <__multadd>
 801edee:	4607      	mov	r7, r0
 801edf0:	10ad      	asrs	r5, r5, #2
 801edf2:	d03d      	beq.n	801ee70 <__pow5mult+0xa0>
 801edf4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801edf6:	b97c      	cbnz	r4, 801ee18 <__pow5mult+0x48>
 801edf8:	2010      	movs	r0, #16
 801edfa:	f7fd fc6f 	bl	801c6dc <malloc>
 801edfe:	4602      	mov	r2, r0
 801ee00:	6270      	str	r0, [r6, #36]	; 0x24
 801ee02:	b928      	cbnz	r0, 801ee10 <__pow5mult+0x40>
 801ee04:	4b1d      	ldr	r3, [pc, #116]	; (801ee7c <__pow5mult+0xac>)
 801ee06:	481e      	ldr	r0, [pc, #120]	; (801ee80 <__pow5mult+0xb0>)
 801ee08:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801ee0c:	f7fe fd2a 	bl	801d864 <__assert_func>
 801ee10:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801ee14:	6004      	str	r4, [r0, #0]
 801ee16:	60c4      	str	r4, [r0, #12]
 801ee18:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801ee1c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801ee20:	b94c      	cbnz	r4, 801ee36 <__pow5mult+0x66>
 801ee22:	f240 2171 	movw	r1, #625	; 0x271
 801ee26:	4630      	mov	r0, r6
 801ee28:	f7ff ff12 	bl	801ec50 <__i2b>
 801ee2c:	2300      	movs	r3, #0
 801ee2e:	f8c8 0008 	str.w	r0, [r8, #8]
 801ee32:	4604      	mov	r4, r0
 801ee34:	6003      	str	r3, [r0, #0]
 801ee36:	f04f 0900 	mov.w	r9, #0
 801ee3a:	07eb      	lsls	r3, r5, #31
 801ee3c:	d50a      	bpl.n	801ee54 <__pow5mult+0x84>
 801ee3e:	4639      	mov	r1, r7
 801ee40:	4622      	mov	r2, r4
 801ee42:	4630      	mov	r0, r6
 801ee44:	f7ff ff1a 	bl	801ec7c <__multiply>
 801ee48:	4639      	mov	r1, r7
 801ee4a:	4680      	mov	r8, r0
 801ee4c:	4630      	mov	r0, r6
 801ee4e:	f7ff fe47 	bl	801eae0 <_Bfree>
 801ee52:	4647      	mov	r7, r8
 801ee54:	106d      	asrs	r5, r5, #1
 801ee56:	d00b      	beq.n	801ee70 <__pow5mult+0xa0>
 801ee58:	6820      	ldr	r0, [r4, #0]
 801ee5a:	b938      	cbnz	r0, 801ee6c <__pow5mult+0x9c>
 801ee5c:	4622      	mov	r2, r4
 801ee5e:	4621      	mov	r1, r4
 801ee60:	4630      	mov	r0, r6
 801ee62:	f7ff ff0b 	bl	801ec7c <__multiply>
 801ee66:	6020      	str	r0, [r4, #0]
 801ee68:	f8c0 9000 	str.w	r9, [r0]
 801ee6c:	4604      	mov	r4, r0
 801ee6e:	e7e4      	b.n	801ee3a <__pow5mult+0x6a>
 801ee70:	4638      	mov	r0, r7
 801ee72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ee76:	bf00      	nop
 801ee78:	08022bc8 	.word	0x08022bc8
 801ee7c:	080228e9 	.word	0x080228e9
 801ee80:	08022a7a 	.word	0x08022a7a

0801ee84 <__lshift>:
 801ee84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ee88:	460c      	mov	r4, r1
 801ee8a:	6849      	ldr	r1, [r1, #4]
 801ee8c:	6923      	ldr	r3, [r4, #16]
 801ee8e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801ee92:	68a3      	ldr	r3, [r4, #8]
 801ee94:	4607      	mov	r7, r0
 801ee96:	4691      	mov	r9, r2
 801ee98:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801ee9c:	f108 0601 	add.w	r6, r8, #1
 801eea0:	42b3      	cmp	r3, r6
 801eea2:	db0b      	blt.n	801eebc <__lshift+0x38>
 801eea4:	4638      	mov	r0, r7
 801eea6:	f7ff fddb 	bl	801ea60 <_Balloc>
 801eeaa:	4605      	mov	r5, r0
 801eeac:	b948      	cbnz	r0, 801eec2 <__lshift+0x3e>
 801eeae:	4602      	mov	r2, r0
 801eeb0:	4b2a      	ldr	r3, [pc, #168]	; (801ef5c <__lshift+0xd8>)
 801eeb2:	482b      	ldr	r0, [pc, #172]	; (801ef60 <__lshift+0xdc>)
 801eeb4:	f240 11d9 	movw	r1, #473	; 0x1d9
 801eeb8:	f7fe fcd4 	bl	801d864 <__assert_func>
 801eebc:	3101      	adds	r1, #1
 801eebe:	005b      	lsls	r3, r3, #1
 801eec0:	e7ee      	b.n	801eea0 <__lshift+0x1c>
 801eec2:	2300      	movs	r3, #0
 801eec4:	f100 0114 	add.w	r1, r0, #20
 801eec8:	f100 0210 	add.w	r2, r0, #16
 801eecc:	4618      	mov	r0, r3
 801eece:	4553      	cmp	r3, sl
 801eed0:	db37      	blt.n	801ef42 <__lshift+0xbe>
 801eed2:	6920      	ldr	r0, [r4, #16]
 801eed4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801eed8:	f104 0314 	add.w	r3, r4, #20
 801eedc:	f019 091f 	ands.w	r9, r9, #31
 801eee0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801eee4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801eee8:	d02f      	beq.n	801ef4a <__lshift+0xc6>
 801eeea:	f1c9 0e20 	rsb	lr, r9, #32
 801eeee:	468a      	mov	sl, r1
 801eef0:	f04f 0c00 	mov.w	ip, #0
 801eef4:	681a      	ldr	r2, [r3, #0]
 801eef6:	fa02 f209 	lsl.w	r2, r2, r9
 801eefa:	ea42 020c 	orr.w	r2, r2, ip
 801eefe:	f84a 2b04 	str.w	r2, [sl], #4
 801ef02:	f853 2b04 	ldr.w	r2, [r3], #4
 801ef06:	4298      	cmp	r0, r3
 801ef08:	fa22 fc0e 	lsr.w	ip, r2, lr
 801ef0c:	d8f2      	bhi.n	801eef4 <__lshift+0x70>
 801ef0e:	1b03      	subs	r3, r0, r4
 801ef10:	3b15      	subs	r3, #21
 801ef12:	f023 0303 	bic.w	r3, r3, #3
 801ef16:	3304      	adds	r3, #4
 801ef18:	f104 0215 	add.w	r2, r4, #21
 801ef1c:	4290      	cmp	r0, r2
 801ef1e:	bf38      	it	cc
 801ef20:	2304      	movcc	r3, #4
 801ef22:	f841 c003 	str.w	ip, [r1, r3]
 801ef26:	f1bc 0f00 	cmp.w	ip, #0
 801ef2a:	d001      	beq.n	801ef30 <__lshift+0xac>
 801ef2c:	f108 0602 	add.w	r6, r8, #2
 801ef30:	3e01      	subs	r6, #1
 801ef32:	4638      	mov	r0, r7
 801ef34:	612e      	str	r6, [r5, #16]
 801ef36:	4621      	mov	r1, r4
 801ef38:	f7ff fdd2 	bl	801eae0 <_Bfree>
 801ef3c:	4628      	mov	r0, r5
 801ef3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ef42:	f842 0f04 	str.w	r0, [r2, #4]!
 801ef46:	3301      	adds	r3, #1
 801ef48:	e7c1      	b.n	801eece <__lshift+0x4a>
 801ef4a:	3904      	subs	r1, #4
 801ef4c:	f853 2b04 	ldr.w	r2, [r3], #4
 801ef50:	f841 2f04 	str.w	r2, [r1, #4]!
 801ef54:	4298      	cmp	r0, r3
 801ef56:	d8f9      	bhi.n	801ef4c <__lshift+0xc8>
 801ef58:	e7ea      	b.n	801ef30 <__lshift+0xac>
 801ef5a:	bf00      	nop
 801ef5c:	080229ff 	.word	0x080229ff
 801ef60:	08022a7a 	.word	0x08022a7a

0801ef64 <__mcmp>:
 801ef64:	b530      	push	{r4, r5, lr}
 801ef66:	6902      	ldr	r2, [r0, #16]
 801ef68:	690c      	ldr	r4, [r1, #16]
 801ef6a:	1b12      	subs	r2, r2, r4
 801ef6c:	d10e      	bne.n	801ef8c <__mcmp+0x28>
 801ef6e:	f100 0314 	add.w	r3, r0, #20
 801ef72:	3114      	adds	r1, #20
 801ef74:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801ef78:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801ef7c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801ef80:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801ef84:	42a5      	cmp	r5, r4
 801ef86:	d003      	beq.n	801ef90 <__mcmp+0x2c>
 801ef88:	d305      	bcc.n	801ef96 <__mcmp+0x32>
 801ef8a:	2201      	movs	r2, #1
 801ef8c:	4610      	mov	r0, r2
 801ef8e:	bd30      	pop	{r4, r5, pc}
 801ef90:	4283      	cmp	r3, r0
 801ef92:	d3f3      	bcc.n	801ef7c <__mcmp+0x18>
 801ef94:	e7fa      	b.n	801ef8c <__mcmp+0x28>
 801ef96:	f04f 32ff 	mov.w	r2, #4294967295
 801ef9a:	e7f7      	b.n	801ef8c <__mcmp+0x28>

0801ef9c <__mdiff>:
 801ef9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801efa0:	460c      	mov	r4, r1
 801efa2:	4606      	mov	r6, r0
 801efa4:	4611      	mov	r1, r2
 801efa6:	4620      	mov	r0, r4
 801efa8:	4690      	mov	r8, r2
 801efaa:	f7ff ffdb 	bl	801ef64 <__mcmp>
 801efae:	1e05      	subs	r5, r0, #0
 801efb0:	d110      	bne.n	801efd4 <__mdiff+0x38>
 801efb2:	4629      	mov	r1, r5
 801efb4:	4630      	mov	r0, r6
 801efb6:	f7ff fd53 	bl	801ea60 <_Balloc>
 801efba:	b930      	cbnz	r0, 801efca <__mdiff+0x2e>
 801efbc:	4b3a      	ldr	r3, [pc, #232]	; (801f0a8 <__mdiff+0x10c>)
 801efbe:	4602      	mov	r2, r0
 801efc0:	f240 2132 	movw	r1, #562	; 0x232
 801efc4:	4839      	ldr	r0, [pc, #228]	; (801f0ac <__mdiff+0x110>)
 801efc6:	f7fe fc4d 	bl	801d864 <__assert_func>
 801efca:	2301      	movs	r3, #1
 801efcc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801efd0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801efd4:	bfa4      	itt	ge
 801efd6:	4643      	movge	r3, r8
 801efd8:	46a0      	movge	r8, r4
 801efda:	4630      	mov	r0, r6
 801efdc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801efe0:	bfa6      	itte	ge
 801efe2:	461c      	movge	r4, r3
 801efe4:	2500      	movge	r5, #0
 801efe6:	2501      	movlt	r5, #1
 801efe8:	f7ff fd3a 	bl	801ea60 <_Balloc>
 801efec:	b920      	cbnz	r0, 801eff8 <__mdiff+0x5c>
 801efee:	4b2e      	ldr	r3, [pc, #184]	; (801f0a8 <__mdiff+0x10c>)
 801eff0:	4602      	mov	r2, r0
 801eff2:	f44f 7110 	mov.w	r1, #576	; 0x240
 801eff6:	e7e5      	b.n	801efc4 <__mdiff+0x28>
 801eff8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801effc:	6926      	ldr	r6, [r4, #16]
 801effe:	60c5      	str	r5, [r0, #12]
 801f000:	f104 0914 	add.w	r9, r4, #20
 801f004:	f108 0514 	add.w	r5, r8, #20
 801f008:	f100 0e14 	add.w	lr, r0, #20
 801f00c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801f010:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801f014:	f108 0210 	add.w	r2, r8, #16
 801f018:	46f2      	mov	sl, lr
 801f01a:	2100      	movs	r1, #0
 801f01c:	f859 3b04 	ldr.w	r3, [r9], #4
 801f020:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801f024:	fa1f f883 	uxth.w	r8, r3
 801f028:	fa11 f18b 	uxtah	r1, r1, fp
 801f02c:	0c1b      	lsrs	r3, r3, #16
 801f02e:	eba1 0808 	sub.w	r8, r1, r8
 801f032:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801f036:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801f03a:	fa1f f888 	uxth.w	r8, r8
 801f03e:	1419      	asrs	r1, r3, #16
 801f040:	454e      	cmp	r6, r9
 801f042:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801f046:	f84a 3b04 	str.w	r3, [sl], #4
 801f04a:	d8e7      	bhi.n	801f01c <__mdiff+0x80>
 801f04c:	1b33      	subs	r3, r6, r4
 801f04e:	3b15      	subs	r3, #21
 801f050:	f023 0303 	bic.w	r3, r3, #3
 801f054:	3304      	adds	r3, #4
 801f056:	3415      	adds	r4, #21
 801f058:	42a6      	cmp	r6, r4
 801f05a:	bf38      	it	cc
 801f05c:	2304      	movcc	r3, #4
 801f05e:	441d      	add	r5, r3
 801f060:	4473      	add	r3, lr
 801f062:	469e      	mov	lr, r3
 801f064:	462e      	mov	r6, r5
 801f066:	4566      	cmp	r6, ip
 801f068:	d30e      	bcc.n	801f088 <__mdiff+0xec>
 801f06a:	f10c 0203 	add.w	r2, ip, #3
 801f06e:	1b52      	subs	r2, r2, r5
 801f070:	f022 0203 	bic.w	r2, r2, #3
 801f074:	3d03      	subs	r5, #3
 801f076:	45ac      	cmp	ip, r5
 801f078:	bf38      	it	cc
 801f07a:	2200      	movcc	r2, #0
 801f07c:	441a      	add	r2, r3
 801f07e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801f082:	b17b      	cbz	r3, 801f0a4 <__mdiff+0x108>
 801f084:	6107      	str	r7, [r0, #16]
 801f086:	e7a3      	b.n	801efd0 <__mdiff+0x34>
 801f088:	f856 8b04 	ldr.w	r8, [r6], #4
 801f08c:	fa11 f288 	uxtah	r2, r1, r8
 801f090:	1414      	asrs	r4, r2, #16
 801f092:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801f096:	b292      	uxth	r2, r2
 801f098:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801f09c:	f84e 2b04 	str.w	r2, [lr], #4
 801f0a0:	1421      	asrs	r1, r4, #16
 801f0a2:	e7e0      	b.n	801f066 <__mdiff+0xca>
 801f0a4:	3f01      	subs	r7, #1
 801f0a6:	e7ea      	b.n	801f07e <__mdiff+0xe2>
 801f0a8:	080229ff 	.word	0x080229ff
 801f0ac:	08022a7a 	.word	0x08022a7a

0801f0b0 <__d2b>:
 801f0b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801f0b4:	4689      	mov	r9, r1
 801f0b6:	2101      	movs	r1, #1
 801f0b8:	ec57 6b10 	vmov	r6, r7, d0
 801f0bc:	4690      	mov	r8, r2
 801f0be:	f7ff fccf 	bl	801ea60 <_Balloc>
 801f0c2:	4604      	mov	r4, r0
 801f0c4:	b930      	cbnz	r0, 801f0d4 <__d2b+0x24>
 801f0c6:	4602      	mov	r2, r0
 801f0c8:	4b25      	ldr	r3, [pc, #148]	; (801f160 <__d2b+0xb0>)
 801f0ca:	4826      	ldr	r0, [pc, #152]	; (801f164 <__d2b+0xb4>)
 801f0cc:	f240 310a 	movw	r1, #778	; 0x30a
 801f0d0:	f7fe fbc8 	bl	801d864 <__assert_func>
 801f0d4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801f0d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801f0dc:	bb35      	cbnz	r5, 801f12c <__d2b+0x7c>
 801f0de:	2e00      	cmp	r6, #0
 801f0e0:	9301      	str	r3, [sp, #4]
 801f0e2:	d028      	beq.n	801f136 <__d2b+0x86>
 801f0e4:	4668      	mov	r0, sp
 801f0e6:	9600      	str	r6, [sp, #0]
 801f0e8:	f7ff fd82 	bl	801ebf0 <__lo0bits>
 801f0ec:	9900      	ldr	r1, [sp, #0]
 801f0ee:	b300      	cbz	r0, 801f132 <__d2b+0x82>
 801f0f0:	9a01      	ldr	r2, [sp, #4]
 801f0f2:	f1c0 0320 	rsb	r3, r0, #32
 801f0f6:	fa02 f303 	lsl.w	r3, r2, r3
 801f0fa:	430b      	orrs	r3, r1
 801f0fc:	40c2      	lsrs	r2, r0
 801f0fe:	6163      	str	r3, [r4, #20]
 801f100:	9201      	str	r2, [sp, #4]
 801f102:	9b01      	ldr	r3, [sp, #4]
 801f104:	61a3      	str	r3, [r4, #24]
 801f106:	2b00      	cmp	r3, #0
 801f108:	bf14      	ite	ne
 801f10a:	2202      	movne	r2, #2
 801f10c:	2201      	moveq	r2, #1
 801f10e:	6122      	str	r2, [r4, #16]
 801f110:	b1d5      	cbz	r5, 801f148 <__d2b+0x98>
 801f112:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801f116:	4405      	add	r5, r0
 801f118:	f8c9 5000 	str.w	r5, [r9]
 801f11c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801f120:	f8c8 0000 	str.w	r0, [r8]
 801f124:	4620      	mov	r0, r4
 801f126:	b003      	add	sp, #12
 801f128:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f12c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801f130:	e7d5      	b.n	801f0de <__d2b+0x2e>
 801f132:	6161      	str	r1, [r4, #20]
 801f134:	e7e5      	b.n	801f102 <__d2b+0x52>
 801f136:	a801      	add	r0, sp, #4
 801f138:	f7ff fd5a 	bl	801ebf0 <__lo0bits>
 801f13c:	9b01      	ldr	r3, [sp, #4]
 801f13e:	6163      	str	r3, [r4, #20]
 801f140:	2201      	movs	r2, #1
 801f142:	6122      	str	r2, [r4, #16]
 801f144:	3020      	adds	r0, #32
 801f146:	e7e3      	b.n	801f110 <__d2b+0x60>
 801f148:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801f14c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801f150:	f8c9 0000 	str.w	r0, [r9]
 801f154:	6918      	ldr	r0, [r3, #16]
 801f156:	f7ff fd2b 	bl	801ebb0 <__hi0bits>
 801f15a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801f15e:	e7df      	b.n	801f120 <__d2b+0x70>
 801f160:	080229ff 	.word	0x080229ff
 801f164:	08022a7a 	.word	0x08022a7a

0801f168 <_calloc_r>:
 801f168:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801f16a:	fba1 2402 	umull	r2, r4, r1, r2
 801f16e:	b94c      	cbnz	r4, 801f184 <_calloc_r+0x1c>
 801f170:	4611      	mov	r1, r2
 801f172:	9201      	str	r2, [sp, #4]
 801f174:	f7fd fb4c 	bl	801c810 <_malloc_r>
 801f178:	9a01      	ldr	r2, [sp, #4]
 801f17a:	4605      	mov	r5, r0
 801f17c:	b930      	cbnz	r0, 801f18c <_calloc_r+0x24>
 801f17e:	4628      	mov	r0, r5
 801f180:	b003      	add	sp, #12
 801f182:	bd30      	pop	{r4, r5, pc}
 801f184:	220c      	movs	r2, #12
 801f186:	6002      	str	r2, [r0, #0]
 801f188:	2500      	movs	r5, #0
 801f18a:	e7f8      	b.n	801f17e <_calloc_r+0x16>
 801f18c:	4621      	mov	r1, r4
 801f18e:	f7fd facb 	bl	801c728 <memset>
 801f192:	e7f4      	b.n	801f17e <_calloc_r+0x16>

0801f194 <_read_r>:
 801f194:	b538      	push	{r3, r4, r5, lr}
 801f196:	4d07      	ldr	r5, [pc, #28]	; (801f1b4 <_read_r+0x20>)
 801f198:	4604      	mov	r4, r0
 801f19a:	4608      	mov	r0, r1
 801f19c:	4611      	mov	r1, r2
 801f19e:	2200      	movs	r2, #0
 801f1a0:	602a      	str	r2, [r5, #0]
 801f1a2:	461a      	mov	r2, r3
 801f1a4:	f7e5 fc80 	bl	8004aa8 <_read>
 801f1a8:	1c43      	adds	r3, r0, #1
 801f1aa:	d102      	bne.n	801f1b2 <_read_r+0x1e>
 801f1ac:	682b      	ldr	r3, [r5, #0]
 801f1ae:	b103      	cbz	r3, 801f1b2 <_read_r+0x1e>
 801f1b0:	6023      	str	r3, [r4, #0]
 801f1b2:	bd38      	pop	{r3, r4, r5, pc}
 801f1b4:	20013900 	.word	0x20013900

0801f1b8 <__ascii_wctomb>:
 801f1b8:	b149      	cbz	r1, 801f1ce <__ascii_wctomb+0x16>
 801f1ba:	2aff      	cmp	r2, #255	; 0xff
 801f1bc:	bf85      	ittet	hi
 801f1be:	238a      	movhi	r3, #138	; 0x8a
 801f1c0:	6003      	strhi	r3, [r0, #0]
 801f1c2:	700a      	strbls	r2, [r1, #0]
 801f1c4:	f04f 30ff 	movhi.w	r0, #4294967295
 801f1c8:	bf98      	it	ls
 801f1ca:	2001      	movls	r0, #1
 801f1cc:	4770      	bx	lr
 801f1ce:	4608      	mov	r0, r1
 801f1d0:	4770      	bx	lr

0801f1d2 <abort>:
 801f1d2:	b508      	push	{r3, lr}
 801f1d4:	2006      	movs	r0, #6
 801f1d6:	f000 f84d 	bl	801f274 <raise>
 801f1da:	2001      	movs	r0, #1
 801f1dc:	f7e5 fc5a 	bl	8004a94 <_exit>

0801f1e0 <_fstat_r>:
 801f1e0:	b538      	push	{r3, r4, r5, lr}
 801f1e2:	4d07      	ldr	r5, [pc, #28]	; (801f200 <_fstat_r+0x20>)
 801f1e4:	2300      	movs	r3, #0
 801f1e6:	4604      	mov	r4, r0
 801f1e8:	4608      	mov	r0, r1
 801f1ea:	4611      	mov	r1, r2
 801f1ec:	602b      	str	r3, [r5, #0]
 801f1ee:	f7e5 fc84 	bl	8004afa <_fstat>
 801f1f2:	1c43      	adds	r3, r0, #1
 801f1f4:	d102      	bne.n	801f1fc <_fstat_r+0x1c>
 801f1f6:	682b      	ldr	r3, [r5, #0]
 801f1f8:	b103      	cbz	r3, 801f1fc <_fstat_r+0x1c>
 801f1fa:	6023      	str	r3, [r4, #0]
 801f1fc:	bd38      	pop	{r3, r4, r5, pc}
 801f1fe:	bf00      	nop
 801f200:	20013900 	.word	0x20013900

0801f204 <_isatty_r>:
 801f204:	b538      	push	{r3, r4, r5, lr}
 801f206:	4d06      	ldr	r5, [pc, #24]	; (801f220 <_isatty_r+0x1c>)
 801f208:	2300      	movs	r3, #0
 801f20a:	4604      	mov	r4, r0
 801f20c:	4608      	mov	r0, r1
 801f20e:	602b      	str	r3, [r5, #0]
 801f210:	f7e5 fc83 	bl	8004b1a <_isatty>
 801f214:	1c43      	adds	r3, r0, #1
 801f216:	d102      	bne.n	801f21e <_isatty_r+0x1a>
 801f218:	682b      	ldr	r3, [r5, #0]
 801f21a:	b103      	cbz	r3, 801f21e <_isatty_r+0x1a>
 801f21c:	6023      	str	r3, [r4, #0]
 801f21e:	bd38      	pop	{r3, r4, r5, pc}
 801f220:	20013900 	.word	0x20013900

0801f224 <_raise_r>:
 801f224:	291f      	cmp	r1, #31
 801f226:	b538      	push	{r3, r4, r5, lr}
 801f228:	4604      	mov	r4, r0
 801f22a:	460d      	mov	r5, r1
 801f22c:	d904      	bls.n	801f238 <_raise_r+0x14>
 801f22e:	2316      	movs	r3, #22
 801f230:	6003      	str	r3, [r0, #0]
 801f232:	f04f 30ff 	mov.w	r0, #4294967295
 801f236:	bd38      	pop	{r3, r4, r5, pc}
 801f238:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801f23a:	b112      	cbz	r2, 801f242 <_raise_r+0x1e>
 801f23c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801f240:	b94b      	cbnz	r3, 801f256 <_raise_r+0x32>
 801f242:	4620      	mov	r0, r4
 801f244:	f000 f830 	bl	801f2a8 <_getpid_r>
 801f248:	462a      	mov	r2, r5
 801f24a:	4601      	mov	r1, r0
 801f24c:	4620      	mov	r0, r4
 801f24e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f252:	f000 b817 	b.w	801f284 <_kill_r>
 801f256:	2b01      	cmp	r3, #1
 801f258:	d00a      	beq.n	801f270 <_raise_r+0x4c>
 801f25a:	1c59      	adds	r1, r3, #1
 801f25c:	d103      	bne.n	801f266 <_raise_r+0x42>
 801f25e:	2316      	movs	r3, #22
 801f260:	6003      	str	r3, [r0, #0]
 801f262:	2001      	movs	r0, #1
 801f264:	e7e7      	b.n	801f236 <_raise_r+0x12>
 801f266:	2400      	movs	r4, #0
 801f268:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801f26c:	4628      	mov	r0, r5
 801f26e:	4798      	blx	r3
 801f270:	2000      	movs	r0, #0
 801f272:	e7e0      	b.n	801f236 <_raise_r+0x12>

0801f274 <raise>:
 801f274:	4b02      	ldr	r3, [pc, #8]	; (801f280 <raise+0xc>)
 801f276:	4601      	mov	r1, r0
 801f278:	6818      	ldr	r0, [r3, #0]
 801f27a:	f7ff bfd3 	b.w	801f224 <_raise_r>
 801f27e:	bf00      	nop
 801f280:	10000024 	.word	0x10000024

0801f284 <_kill_r>:
 801f284:	b538      	push	{r3, r4, r5, lr}
 801f286:	4d07      	ldr	r5, [pc, #28]	; (801f2a4 <_kill_r+0x20>)
 801f288:	2300      	movs	r3, #0
 801f28a:	4604      	mov	r4, r0
 801f28c:	4608      	mov	r0, r1
 801f28e:	4611      	mov	r1, r2
 801f290:	602b      	str	r3, [r5, #0]
 801f292:	f7e5 fbed 	bl	8004a70 <_kill>
 801f296:	1c43      	adds	r3, r0, #1
 801f298:	d102      	bne.n	801f2a0 <_kill_r+0x1c>
 801f29a:	682b      	ldr	r3, [r5, #0]
 801f29c:	b103      	cbz	r3, 801f2a0 <_kill_r+0x1c>
 801f29e:	6023      	str	r3, [r4, #0]
 801f2a0:	bd38      	pop	{r3, r4, r5, pc}
 801f2a2:	bf00      	nop
 801f2a4:	20013900 	.word	0x20013900

0801f2a8 <_getpid_r>:
 801f2a8:	f7e5 bbda 	b.w	8004a60 <_getpid>

0801f2ac <_init>:
 801f2ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f2ae:	bf00      	nop
 801f2b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f2b2:	bc08      	pop	{r3}
 801f2b4:	469e      	mov	lr, r3
 801f2b6:	4770      	bx	lr

0801f2b8 <_fini>:
 801f2b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f2ba:	bf00      	nop
 801f2bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f2be:	bc08      	pop	{r3}
 801f2c0:	469e      	mov	lr, r3
 801f2c2:	4770      	bx	lr
