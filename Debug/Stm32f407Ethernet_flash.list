
Stm32f407Ethernet_flash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002a978  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000068a8  0802ab08  0802ab08  0003ab08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080313b0  080313b0  00050244  2**0
                  CONTENTS
  4 .ARM          00000008  080313b0  080313b0  000413b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080313b8  080313b8  00050244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080313b8  080313b8  000413b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080313bc  080313bc  000413bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000244  10000000  080313c0  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000244  10000244  00050244  2**0
                  CONTENTS
 10 .bss          0001c144  20000000  20000000  00060000  2**3
                  ALLOC
 11 ._user_heap_stack 00002204  10000244  10000244  00050244  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00050244  2**0
                  CONTENTS, READONLY
 13 .debug_info   0005a618  00000000  00000000  00050274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000cde8  00000000  00000000  000aa88c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003818  00000000  00000000  000b7678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000035d8  00000000  00000000  000bae90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003dfad  00000000  00000000  000be468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0005d142  00000000  00000000  000fc415  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fdc75  00000000  00000000  00159557  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  002571cc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000fbf0  00000000  00000000  0025721c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000000 	.word	0x20000000
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0802aaf0 	.word	0x0802aaf0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000004 	.word	0x20000004
 80001cc:	0802aaf0 	.word	0x0802aaf0

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1c:	f000 b9aa 	b.w	8000f74 <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f83c 	bl	8000ca4 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2lz>:
 8000c38:	b538      	push	{r3, r4, r5, lr}
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	4604      	mov	r4, r0
 8000c40:	460d      	mov	r5, r1
 8000c42:	f7ff ff5b 	bl	8000afc <__aeabi_dcmplt>
 8000c46:	b928      	cbnz	r0, 8000c54 <__aeabi_d2lz+0x1c>
 8000c48:	4620      	mov	r0, r4
 8000c4a:	4629      	mov	r1, r5
 8000c4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c50:	f000 b80a 	b.w	8000c68 <__aeabi_d2ulz>
 8000c54:	4620      	mov	r0, r4
 8000c56:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c5a:	f000 f805 	bl	8000c68 <__aeabi_d2ulz>
 8000c5e:	4240      	negs	r0, r0
 8000c60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c64:	bd38      	pop	{r3, r4, r5, pc}
 8000c66:	bf00      	nop

08000c68 <__aeabi_d2ulz>:
 8000c68:	b5d0      	push	{r4, r6, r7, lr}
 8000c6a:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <__aeabi_d2ulz+0x34>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	4606      	mov	r6, r0
 8000c70:	460f      	mov	r7, r1
 8000c72:	f7ff fcd1 	bl	8000618 <__aeabi_dmul>
 8000c76:	f7ff ffa7 	bl	8000bc8 <__aeabi_d2uiz>
 8000c7a:	4604      	mov	r4, r0
 8000c7c:	f7ff fc52 	bl	8000524 <__aeabi_ui2d>
 8000c80:	4b07      	ldr	r3, [pc, #28]	; (8000ca0 <__aeabi_d2ulz+0x38>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	f7ff fcc8 	bl	8000618 <__aeabi_dmul>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	460b      	mov	r3, r1
 8000c8c:	4630      	mov	r0, r6
 8000c8e:	4639      	mov	r1, r7
 8000c90:	f7ff fb0a 	bl	80002a8 <__aeabi_dsub>
 8000c94:	f7ff ff98 	bl	8000bc8 <__aeabi_d2uiz>
 8000c98:	4621      	mov	r1, r4
 8000c9a:	bdd0      	pop	{r4, r6, r7, pc}
 8000c9c:	3df00000 	.word	0x3df00000
 8000ca0:	41f00000 	.word	0x41f00000

08000ca4 <__udivmoddi4>:
 8000ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ca8:	9d08      	ldr	r5, [sp, #32]
 8000caa:	4604      	mov	r4, r0
 8000cac:	468e      	mov	lr, r1
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d14d      	bne.n	8000d4e <__udivmoddi4+0xaa>
 8000cb2:	428a      	cmp	r2, r1
 8000cb4:	4694      	mov	ip, r2
 8000cb6:	d969      	bls.n	8000d8c <__udivmoddi4+0xe8>
 8000cb8:	fab2 f282 	clz	r2, r2
 8000cbc:	b152      	cbz	r2, 8000cd4 <__udivmoddi4+0x30>
 8000cbe:	fa01 f302 	lsl.w	r3, r1, r2
 8000cc2:	f1c2 0120 	rsb	r1, r2, #32
 8000cc6:	fa20 f101 	lsr.w	r1, r0, r1
 8000cca:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cce:	ea41 0e03 	orr.w	lr, r1, r3
 8000cd2:	4094      	lsls	r4, r2
 8000cd4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd8:	0c21      	lsrs	r1, r4, #16
 8000cda:	fbbe f6f8 	udiv	r6, lr, r8
 8000cde:	fa1f f78c 	uxth.w	r7, ip
 8000ce2:	fb08 e316 	mls	r3, r8, r6, lr
 8000ce6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cea:	fb06 f107 	mul.w	r1, r6, r7
 8000cee:	4299      	cmp	r1, r3
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x64>
 8000cf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cfa:	f080 811f 	bcs.w	8000f3c <__udivmoddi4+0x298>
 8000cfe:	4299      	cmp	r1, r3
 8000d00:	f240 811c 	bls.w	8000f3c <__udivmoddi4+0x298>
 8000d04:	3e02      	subs	r6, #2
 8000d06:	4463      	add	r3, ip
 8000d08:	1a5b      	subs	r3, r3, r1
 8000d0a:	b2a4      	uxth	r4, r4
 8000d0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d10:	fb08 3310 	mls	r3, r8, r0, r3
 8000d14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d18:	fb00 f707 	mul.w	r7, r0, r7
 8000d1c:	42a7      	cmp	r7, r4
 8000d1e:	d90a      	bls.n	8000d36 <__udivmoddi4+0x92>
 8000d20:	eb1c 0404 	adds.w	r4, ip, r4
 8000d24:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d28:	f080 810a 	bcs.w	8000f40 <__udivmoddi4+0x29c>
 8000d2c:	42a7      	cmp	r7, r4
 8000d2e:	f240 8107 	bls.w	8000f40 <__udivmoddi4+0x29c>
 8000d32:	4464      	add	r4, ip
 8000d34:	3802      	subs	r0, #2
 8000d36:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d3a:	1be4      	subs	r4, r4, r7
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	b11d      	cbz	r5, 8000d48 <__udivmoddi4+0xa4>
 8000d40:	40d4      	lsrs	r4, r2
 8000d42:	2300      	movs	r3, #0
 8000d44:	e9c5 4300 	strd	r4, r3, [r5]
 8000d48:	4631      	mov	r1, r6
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d909      	bls.n	8000d66 <__udivmoddi4+0xc2>
 8000d52:	2d00      	cmp	r5, #0
 8000d54:	f000 80ef 	beq.w	8000f36 <__udivmoddi4+0x292>
 8000d58:	2600      	movs	r6, #0
 8000d5a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d5e:	4630      	mov	r0, r6
 8000d60:	4631      	mov	r1, r6
 8000d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d66:	fab3 f683 	clz	r6, r3
 8000d6a:	2e00      	cmp	r6, #0
 8000d6c:	d14a      	bne.n	8000e04 <__udivmoddi4+0x160>
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d302      	bcc.n	8000d78 <__udivmoddi4+0xd4>
 8000d72:	4282      	cmp	r2, r0
 8000d74:	f200 80f9 	bhi.w	8000f6a <__udivmoddi4+0x2c6>
 8000d78:	1a84      	subs	r4, r0, r2
 8000d7a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d7e:	2001      	movs	r0, #1
 8000d80:	469e      	mov	lr, r3
 8000d82:	2d00      	cmp	r5, #0
 8000d84:	d0e0      	beq.n	8000d48 <__udivmoddi4+0xa4>
 8000d86:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d8a:	e7dd      	b.n	8000d48 <__udivmoddi4+0xa4>
 8000d8c:	b902      	cbnz	r2, 8000d90 <__udivmoddi4+0xec>
 8000d8e:	deff      	udf	#255	; 0xff
 8000d90:	fab2 f282 	clz	r2, r2
 8000d94:	2a00      	cmp	r2, #0
 8000d96:	f040 8092 	bne.w	8000ebe <__udivmoddi4+0x21a>
 8000d9a:	eba1 010c 	sub.w	r1, r1, ip
 8000d9e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da2:	fa1f fe8c 	uxth.w	lr, ip
 8000da6:	2601      	movs	r6, #1
 8000da8:	0c20      	lsrs	r0, r4, #16
 8000daa:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dae:	fb07 1113 	mls	r1, r7, r3, r1
 8000db2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000db6:	fb0e f003 	mul.w	r0, lr, r3
 8000dba:	4288      	cmp	r0, r1
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x12c>
 8000dbe:	eb1c 0101 	adds.w	r1, ip, r1
 8000dc2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dc6:	d202      	bcs.n	8000dce <__udivmoddi4+0x12a>
 8000dc8:	4288      	cmp	r0, r1
 8000dca:	f200 80cb 	bhi.w	8000f64 <__udivmoddi4+0x2c0>
 8000dce:	4643      	mov	r3, r8
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd8:	fb07 1110 	mls	r1, r7, r0, r1
 8000ddc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000de0:	fb0e fe00 	mul.w	lr, lr, r0
 8000de4:	45a6      	cmp	lr, r4
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x156>
 8000de8:	eb1c 0404 	adds.w	r4, ip, r4
 8000dec:	f100 31ff 	add.w	r1, r0, #4294967295
 8000df0:	d202      	bcs.n	8000df8 <__udivmoddi4+0x154>
 8000df2:	45a6      	cmp	lr, r4
 8000df4:	f200 80bb 	bhi.w	8000f6e <__udivmoddi4+0x2ca>
 8000df8:	4608      	mov	r0, r1
 8000dfa:	eba4 040e 	sub.w	r4, r4, lr
 8000dfe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e02:	e79c      	b.n	8000d3e <__udivmoddi4+0x9a>
 8000e04:	f1c6 0720 	rsb	r7, r6, #32
 8000e08:	40b3      	lsls	r3, r6
 8000e0a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e0e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e12:	fa20 f407 	lsr.w	r4, r0, r7
 8000e16:	fa01 f306 	lsl.w	r3, r1, r6
 8000e1a:	431c      	orrs	r4, r3
 8000e1c:	40f9      	lsrs	r1, r7
 8000e1e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e22:	fa00 f306 	lsl.w	r3, r0, r6
 8000e26:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e2a:	0c20      	lsrs	r0, r4, #16
 8000e2c:	fa1f fe8c 	uxth.w	lr, ip
 8000e30:	fb09 1118 	mls	r1, r9, r8, r1
 8000e34:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e38:	fb08 f00e 	mul.w	r0, r8, lr
 8000e3c:	4288      	cmp	r0, r1
 8000e3e:	fa02 f206 	lsl.w	r2, r2, r6
 8000e42:	d90b      	bls.n	8000e5c <__udivmoddi4+0x1b8>
 8000e44:	eb1c 0101 	adds.w	r1, ip, r1
 8000e48:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e4c:	f080 8088 	bcs.w	8000f60 <__udivmoddi4+0x2bc>
 8000e50:	4288      	cmp	r0, r1
 8000e52:	f240 8085 	bls.w	8000f60 <__udivmoddi4+0x2bc>
 8000e56:	f1a8 0802 	sub.w	r8, r8, #2
 8000e5a:	4461      	add	r1, ip
 8000e5c:	1a09      	subs	r1, r1, r0
 8000e5e:	b2a4      	uxth	r4, r4
 8000e60:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e64:	fb09 1110 	mls	r1, r9, r0, r1
 8000e68:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e6c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e70:	458e      	cmp	lr, r1
 8000e72:	d908      	bls.n	8000e86 <__udivmoddi4+0x1e2>
 8000e74:	eb1c 0101 	adds.w	r1, ip, r1
 8000e78:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e7c:	d26c      	bcs.n	8000f58 <__udivmoddi4+0x2b4>
 8000e7e:	458e      	cmp	lr, r1
 8000e80:	d96a      	bls.n	8000f58 <__udivmoddi4+0x2b4>
 8000e82:	3802      	subs	r0, #2
 8000e84:	4461      	add	r1, ip
 8000e86:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e8a:	fba0 9402 	umull	r9, r4, r0, r2
 8000e8e:	eba1 010e 	sub.w	r1, r1, lr
 8000e92:	42a1      	cmp	r1, r4
 8000e94:	46c8      	mov	r8, r9
 8000e96:	46a6      	mov	lr, r4
 8000e98:	d356      	bcc.n	8000f48 <__udivmoddi4+0x2a4>
 8000e9a:	d053      	beq.n	8000f44 <__udivmoddi4+0x2a0>
 8000e9c:	b15d      	cbz	r5, 8000eb6 <__udivmoddi4+0x212>
 8000e9e:	ebb3 0208 	subs.w	r2, r3, r8
 8000ea2:	eb61 010e 	sbc.w	r1, r1, lr
 8000ea6:	fa01 f707 	lsl.w	r7, r1, r7
 8000eaa:	fa22 f306 	lsr.w	r3, r2, r6
 8000eae:	40f1      	lsrs	r1, r6
 8000eb0:	431f      	orrs	r7, r3
 8000eb2:	e9c5 7100 	strd	r7, r1, [r5]
 8000eb6:	2600      	movs	r6, #0
 8000eb8:	4631      	mov	r1, r6
 8000eba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ebe:	f1c2 0320 	rsb	r3, r2, #32
 8000ec2:	40d8      	lsrs	r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa21 f303 	lsr.w	r3, r1, r3
 8000ecc:	4091      	lsls	r1, r2
 8000ece:	4301      	orrs	r1, r0
 8000ed0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed4:	fa1f fe8c 	uxth.w	lr, ip
 8000ed8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000edc:	fb07 3610 	mls	r6, r7, r0, r3
 8000ee0:	0c0b      	lsrs	r3, r1, #16
 8000ee2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000ee6:	fb00 f60e 	mul.w	r6, r0, lr
 8000eea:	429e      	cmp	r6, r3
 8000eec:	fa04 f402 	lsl.w	r4, r4, r2
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x260>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000efa:	d22f      	bcs.n	8000f5c <__udivmoddi4+0x2b8>
 8000efc:	429e      	cmp	r6, r3
 8000efe:	d92d      	bls.n	8000f5c <__udivmoddi4+0x2b8>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1b9b      	subs	r3, r3, r6
 8000f06:	b289      	uxth	r1, r1
 8000f08:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f0c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f10:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f14:	fb06 f30e 	mul.w	r3, r6, lr
 8000f18:	428b      	cmp	r3, r1
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x28a>
 8000f1c:	eb1c 0101 	adds.w	r1, ip, r1
 8000f20:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f24:	d216      	bcs.n	8000f54 <__udivmoddi4+0x2b0>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	d914      	bls.n	8000f54 <__udivmoddi4+0x2b0>
 8000f2a:	3e02      	subs	r6, #2
 8000f2c:	4461      	add	r1, ip
 8000f2e:	1ac9      	subs	r1, r1, r3
 8000f30:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f34:	e738      	b.n	8000da8 <__udivmoddi4+0x104>
 8000f36:	462e      	mov	r6, r5
 8000f38:	4628      	mov	r0, r5
 8000f3a:	e705      	b.n	8000d48 <__udivmoddi4+0xa4>
 8000f3c:	4606      	mov	r6, r0
 8000f3e:	e6e3      	b.n	8000d08 <__udivmoddi4+0x64>
 8000f40:	4618      	mov	r0, r3
 8000f42:	e6f8      	b.n	8000d36 <__udivmoddi4+0x92>
 8000f44:	454b      	cmp	r3, r9
 8000f46:	d2a9      	bcs.n	8000e9c <__udivmoddi4+0x1f8>
 8000f48:	ebb9 0802 	subs.w	r8, r9, r2
 8000f4c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f50:	3801      	subs	r0, #1
 8000f52:	e7a3      	b.n	8000e9c <__udivmoddi4+0x1f8>
 8000f54:	4646      	mov	r6, r8
 8000f56:	e7ea      	b.n	8000f2e <__udivmoddi4+0x28a>
 8000f58:	4620      	mov	r0, r4
 8000f5a:	e794      	b.n	8000e86 <__udivmoddi4+0x1e2>
 8000f5c:	4640      	mov	r0, r8
 8000f5e:	e7d1      	b.n	8000f04 <__udivmoddi4+0x260>
 8000f60:	46d0      	mov	r8, sl
 8000f62:	e77b      	b.n	8000e5c <__udivmoddi4+0x1b8>
 8000f64:	3b02      	subs	r3, #2
 8000f66:	4461      	add	r1, ip
 8000f68:	e732      	b.n	8000dd0 <__udivmoddi4+0x12c>
 8000f6a:	4630      	mov	r0, r6
 8000f6c:	e709      	b.n	8000d82 <__udivmoddi4+0xde>
 8000f6e:	4464      	add	r4, ip
 8000f70:	3802      	subs	r0, #2
 8000f72:	e742      	b.n	8000dfa <__udivmoddi4+0x156>

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <DS18B20_IsValid>:
  * @brief  The function is used to check valid DS18B20 ROM
  * @retval Return in OK = 1, Failed = 0
  * @param  ROM		Pointer to ROM number
  */
uint8_t DS18B20_IsValid(uint8_t *ROM)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
	/* Checks if first byte is equal to DS18B20's family code */
	return (*ROM == DS18B20_FAMILY_CODE) ? 1 : 0;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	2b28      	cmp	r3, #40	; 0x28
 8000f86:	bf0c      	ite	eq
 8000f88:	2301      	moveq	r3, #1
 8000f8a:	2300      	movne	r3, #0
 8000f8c:	b2db      	uxtb	r3, r3
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr

08000f9a <DS18B20_SetResolution>:
  * @param  ROM			Pointer to ROM number
  * @param  Resolution	Resolution in 9 - 12
  */
uint8_t DS18B20_SetResolution(OneWire_t* OW, uint8_t *ROM,
		DS18B20_Res_t Resolution)
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b086      	sub	sp, #24
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	60f8      	str	r0, [r7, #12]
 8000fa2:	60b9      	str	r1, [r7, #8]
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	71fb      	strb	r3, [r7, #7]
	uint8_t th, tl, conf;

	/* Check valid ROM */
	if (!DS18B20_IsValid(ROM)) return 0;
 8000fa8:	68b8      	ldr	r0, [r7, #8]
 8000faa:	f7ff ffe5 	bl	8000f78 <DS18B20_IsValid>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d101      	bne.n	8000fb8 <DS18B20_SetResolution+0x1e>
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	e074      	b.n	80010a2 <DS18B20_SetResolution+0x108>

	/* Reset line */
	OneWire_Reset(OW);
 8000fb8:	68f8      	ldr	r0, [r7, #12]
 8000fba:	f000 fbce 	bl	800175a <OneWire_Reset>

	/* Select ROM number */
	OneWire_SelectWithPointer(OW, ROM);
 8000fbe:	68b9      	ldr	r1, [r7, #8]
 8000fc0:	68f8      	ldr	r0, [r7, #12]
 8000fc2:	f000 fd02 	bl	80019ca <OneWire_SelectWithPointer>

	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OW, DS18B20_CMD_READSCRATCHPAD);
 8000fc6:	21be      	movs	r1, #190	; 0xbe
 8000fc8:	68f8      	ldr	r0, [r7, #12]
 8000fca:	f000 fb87 	bl	80016dc <OneWire_WriteByte>

	/* Ignore first 2 bytes */
	OneWire_ReadByte(OW);
 8000fce:	68f8      	ldr	r0, [r7, #12]
 8000fd0:	f000 fba2 	bl	8001718 <OneWire_ReadByte>
	OneWire_ReadByte(OW);
 8000fd4:	68f8      	ldr	r0, [r7, #12]
 8000fd6:	f000 fb9f 	bl	8001718 <OneWire_ReadByte>

	th = OneWire_ReadByte(OW);
 8000fda:	68f8      	ldr	r0, [r7, #12]
 8000fdc:	f000 fb9c 	bl	8001718 <OneWire_ReadByte>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	75bb      	strb	r3, [r7, #22]
	tl = OneWire_ReadByte(OW);
 8000fe4:	68f8      	ldr	r0, [r7, #12]
 8000fe6:	f000 fb97 	bl	8001718 <OneWire_ReadByte>
 8000fea:	4603      	mov	r3, r0
 8000fec:	757b      	strb	r3, [r7, #21]
	conf = OneWire_ReadByte(OW);
 8000fee:	68f8      	ldr	r0, [r7, #12]
 8000ff0:	f000 fb92 	bl	8001718 <OneWire_ReadByte>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	75fb      	strb	r3, [r7, #23]

	if (Resolution == DS18B20_Resolution_9bits) {
 8000ff8:	79fb      	ldrb	r3, [r7, #7]
 8000ffa:	2b09      	cmp	r3, #9
 8000ffc:	d108      	bne.n	8001010 <DS18B20_SetResolution+0x76>
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8000ffe:	7dfb      	ldrb	r3, [r7, #23]
 8001000:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001004:	75fb      	strb	r3, [r7, #23]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8001006:	7dfb      	ldrb	r3, [r7, #23]
 8001008:	f023 0320 	bic.w	r3, r3, #32
 800100c:	75fb      	strb	r3, [r7, #23]
 800100e:	e022      	b.n	8001056 <DS18B20_SetResolution+0xbc>
	} else if (Resolution == DS18B20_Resolution_10bits) {
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	2b0a      	cmp	r3, #10
 8001014:	d108      	bne.n	8001028 <DS18B20_SetResolution+0x8e>
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8001016:	7dfb      	ldrb	r3, [r7, #23]
 8001018:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800101c:	75fb      	strb	r3, [r7, #23]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 800101e:	7dfb      	ldrb	r3, [r7, #23]
 8001020:	f043 0320 	orr.w	r3, r3, #32
 8001024:	75fb      	strb	r3, [r7, #23]
 8001026:	e016      	b.n	8001056 <DS18B20_SetResolution+0xbc>
	} else if (Resolution == DS18B20_Resolution_11bits) {
 8001028:	79fb      	ldrb	r3, [r7, #7]
 800102a:	2b0b      	cmp	r3, #11
 800102c:	d108      	bne.n	8001040 <DS18B20_SetResolution+0xa6>
		conf |= 1 << DS18B20_RESOLUTION_R1;
 800102e:	7dfb      	ldrb	r3, [r7, #23]
 8001030:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001034:	75fb      	strb	r3, [r7, #23]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8001036:	7dfb      	ldrb	r3, [r7, #23]
 8001038:	f023 0320 	bic.w	r3, r3, #32
 800103c:	75fb      	strb	r3, [r7, #23]
 800103e:	e00a      	b.n	8001056 <DS18B20_SetResolution+0xbc>
	} else if (Resolution == DS18B20_Resolution_12bits) {
 8001040:	79fb      	ldrb	r3, [r7, #7]
 8001042:	2b0c      	cmp	r3, #12
 8001044:	d107      	bne.n	8001056 <DS18B20_SetResolution+0xbc>
		conf |= 1 << DS18B20_RESOLUTION_R1;
 8001046:	7dfb      	ldrb	r3, [r7, #23]
 8001048:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800104c:	75fb      	strb	r3, [r7, #23]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 800104e:	7dfb      	ldrb	r3, [r7, #23]
 8001050:	f043 0320 	orr.w	r3, r3, #32
 8001054:	75fb      	strb	r3, [r7, #23]
	}

	/* Reset line */
	OneWire_Reset(OW);
 8001056:	68f8      	ldr	r0, [r7, #12]
 8001058:	f000 fb7f 	bl	800175a <OneWire_Reset>

	/* Select ROM number */
	OneWire_SelectWithPointer(OW, ROM);
 800105c:	68b9      	ldr	r1, [r7, #8]
 800105e:	68f8      	ldr	r0, [r7, #12]
 8001060:	f000 fcb3 	bl	80019ca <OneWire_SelectWithPointer>

	/* Write scratchpad command by onewire protocol, only th, tl and conf
	 * register can be written */
	OneWire_WriteByte(OW, DS18B20_CMD_WRITESCRATCHPAD);
 8001064:	214e      	movs	r1, #78	; 0x4e
 8001066:	68f8      	ldr	r0, [r7, #12]
 8001068:	f000 fb38 	bl	80016dc <OneWire_WriteByte>

	/* Write bytes */
	OneWire_WriteByte(OW, th);
 800106c:	7dbb      	ldrb	r3, [r7, #22]
 800106e:	4619      	mov	r1, r3
 8001070:	68f8      	ldr	r0, [r7, #12]
 8001072:	f000 fb33 	bl	80016dc <OneWire_WriteByte>
	OneWire_WriteByte(OW, tl);
 8001076:	7d7b      	ldrb	r3, [r7, #21]
 8001078:	4619      	mov	r1, r3
 800107a:	68f8      	ldr	r0, [r7, #12]
 800107c:	f000 fb2e 	bl	80016dc <OneWire_WriteByte>
	OneWire_WriteByte(OW, conf);
 8001080:	7dfb      	ldrb	r3, [r7, #23]
 8001082:	4619      	mov	r1, r3
 8001084:	68f8      	ldr	r0, [r7, #12]
 8001086:	f000 fb29 	bl	80016dc <OneWire_WriteByte>

	/* Reset line */
	OneWire_Reset(OW);
 800108a:	68f8      	ldr	r0, [r7, #12]
 800108c:	f000 fb65 	bl	800175a <OneWire_Reset>

	/* Select ROM number */
	OneWire_SelectWithPointer(OW, ROM);
 8001090:	68b9      	ldr	r1, [r7, #8]
 8001092:	68f8      	ldr	r0, [r7, #12]
 8001094:	f000 fc99 	bl	80019ca <OneWire_SelectWithPointer>

	/* Copy scratchpad to EEPROM of DS18B20 */
	OneWire_WriteByte(OW, DS18B20_CMD_COPYSCRATCHPAD);
 8001098:	2148      	movs	r1, #72	; 0x48
 800109a:	68f8      	ldr	r0, [r7, #12]
 800109c:	f000 fb1e 	bl	80016dc <OneWire_WriteByte>

	return 1;
 80010a0:	2301      	movs	r3, #1
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3718      	adds	r7, #24
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <DS18B20_StartAll>:
/**
  * @brief  The function is used as start all ROM device
  * @param  OW			OneWire HandleTypedef
  */
void DS18B20_StartAll(OneWire_t* OW)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b082      	sub	sp, #8
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
	/* Reset pulse */
	OneWire_Reset(OW);
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f000 fb51 	bl	800175a <OneWire_Reset>

	/* Skip rom */
	OneWire_WriteByte(OW, ONEWIRE_CMD_SKIPROM);
 80010b8:	21cc      	movs	r1, #204	; 0xcc
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f000 fb0e 	bl	80016dc <OneWire_WriteByte>

	/* Start conversion on all connected devices */
	OneWire_WriteByte(OW, DS18B20_CMD_CONVERT);
 80010c0:	2144      	movs	r1, #68	; 0x44
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f000 fb0a 	bl	80016dc <OneWire_WriteByte>
}
 80010c8:	bf00      	nop
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <DS18B20_Read>:
  * @param  OW				OneWire HandleTypedef
  * @param  ROM				Pointer to ROM number
  * @param  Destination		Pointer to return value
  */
uint8_t DS18B20_Read(OneWire_t* OW, uint8_t *ROM, float *Destination)
{
 80010d0:	b590      	push	{r4, r7, lr}
 80010d2:	b08b      	sub	sp, #44	; 0x2c
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	60f8      	str	r0, [r7, #12]
 80010d8:	60b9      	str	r1, [r7, #8]
 80010da:	607a      	str	r2, [r7, #4]
	uint16_t temperature;
	uint8_t resolution;
	int8_t digit, minus = 0;
 80010dc:	2300      	movs	r3, #0
 80010de:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	float decimal;
	uint8_t i = 0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	77fb      	strb	r3, [r7, #31]
	uint8_t data[9];
	uint8_t crc;

	/* Check if device is DS18B20 */
	if (!DS18B20_IsValid(ROM))
 80010e6:	68b8      	ldr	r0, [r7, #8]
 80010e8:	f7ff ff46 	bl	8000f78 <DS18B20_IsValid>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d105      	bne.n	80010fe <DS18B20_Read+0x2e>
	{
		device->error_ds18b20 = true;
 80010f2:	4b79      	ldr	r3, [pc, #484]	; (80012d8 <DS18B20_Read+0x208>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	2201      	movs	r2, #1
 80010f8:	71da      	strb	r2, [r3, #7]
		return 0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	e0e8      	b.n	80012d0 <DS18B20_Read+0x200>
	}

	/* Wait until line is released, then coversion is completed */
	while(!OneWire_ReadBit(OW)) {};
 80010fe:	bf00      	nop
 8001100:	68f8      	ldr	r0, [r7, #12]
 8001102:	f000 fac3 	bl	800168c <OneWire_ReadBit>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d0f9      	beq.n	8001100 <DS18B20_Read+0x30>

	/* Reset line */
	OneWire_Reset(OW);
 800110c:	68f8      	ldr	r0, [r7, #12]
 800110e:	f000 fb24 	bl	800175a <OneWire_Reset>

	/* Select ROM number */
	OneWire_SelectWithPointer(OW, ROM);
 8001112:	68b9      	ldr	r1, [r7, #8]
 8001114:	68f8      	ldr	r0, [r7, #12]
 8001116:	f000 fc58 	bl	80019ca <OneWire_SelectWithPointer>

	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OW, DS18B20_CMD_READSCRATCHPAD);
 800111a:	21be      	movs	r1, #190	; 0xbe
 800111c:	68f8      	ldr	r0, [r7, #12]
 800111e:	f000 fadd 	bl	80016dc <OneWire_WriteByte>

	/* Get data */
	for (i = 0; i < 9; i++) {
 8001122:	2300      	movs	r3, #0
 8001124:	77fb      	strb	r3, [r7, #31]
 8001126:	e00d      	b.n	8001144 <DS18B20_Read+0x74>
		/* Read byte by byte */
		data[i] = OneWire_ReadByte(OW);
 8001128:	7ffc      	ldrb	r4, [r7, #31]
 800112a:	68f8      	ldr	r0, [r7, #12]
 800112c:	f000 faf4 	bl	8001718 <OneWire_ReadByte>
 8001130:	4603      	mov	r3, r0
 8001132:	461a      	mov	r2, r3
 8001134:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8001138:	443b      	add	r3, r7
 800113a:	f803 2c14 	strb.w	r2, [r3, #-20]
	for (i = 0; i < 9; i++) {
 800113e:	7ffb      	ldrb	r3, [r7, #31]
 8001140:	3301      	adds	r3, #1
 8001142:	77fb      	strb	r3, [r7, #31]
 8001144:	7ffb      	ldrb	r3, [r7, #31]
 8001146:	2b08      	cmp	r3, #8
 8001148:	d9ee      	bls.n	8001128 <DS18B20_Read+0x58>
	}

	/* Calculate CRC */
	crc = OneWire_CRC8(data, 8);
 800114a:	f107 0314 	add.w	r3, r7, #20
 800114e:	2108      	movs	r1, #8
 8001150:	4618      	mov	r0, r3
 8001152:	f000 fc59 	bl	8001a08 <OneWire_CRC8>
 8001156:	4603      	mov	r3, r0
 8001158:	77bb      	strb	r3, [r7, #30]

	/* Check if CRC is ok */
	if (crc != data[8]) {
 800115a:	7f3b      	ldrb	r3, [r7, #28]
 800115c:	7fba      	ldrb	r2, [r7, #30]
 800115e:	429a      	cmp	r2, r3
 8001160:	d001      	beq.n	8001166 <DS18B20_Read+0x96>
		/* CRC invalid */
		return 0;
 8001162:	2300      	movs	r3, #0
 8001164:	e0b4      	b.n	80012d0 <DS18B20_Read+0x200>
	}

	/* First two bytes of scratchpad are temperature values */
	temperature = data[0] | (data[1] << 8);
 8001166:	7d3b      	ldrb	r3, [r7, #20]
 8001168:	b21a      	sxth	r2, r3
 800116a:	7d7b      	ldrb	r3, [r7, #21]
 800116c:	021b      	lsls	r3, r3, #8
 800116e:	b21b      	sxth	r3, r3
 8001170:	4313      	orrs	r3, r2
 8001172:	b21b      	sxth	r3, r3
 8001174:	84fb      	strh	r3, [r7, #38]	; 0x26

	/* Reset line */
	OneWire_Reset(OW);
 8001176:	68f8      	ldr	r0, [r7, #12]
 8001178:	f000 faef 	bl	800175a <OneWire_Reset>

	/* Check if temperature is negative */
	if (temperature & 0x8000) {
 800117c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001180:	2b00      	cmp	r3, #0
 8001182:	da05      	bge.n	8001190 <DS18B20_Read+0xc0>
		/* Two's complement, temperature is negative */
		temperature = ~temperature + 1;
 8001184:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001186:	425b      	negs	r3, r3
 8001188:	84fb      	strh	r3, [r7, #38]	; 0x26
		minus = 1;
 800118a:	2301      	movs	r3, #1
 800118c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	}

	/* Get sensor resolution */
	resolution = ((data[4] & 0x60) >> 5) + 9;
 8001190:	7e3b      	ldrb	r3, [r7, #24]
 8001192:	115b      	asrs	r3, r3, #5
 8001194:	b2db      	uxtb	r3, r3
 8001196:	f003 0303 	and.w	r3, r3, #3
 800119a:	b2db      	uxtb	r3, r3
 800119c:	3309      	adds	r3, #9
 800119e:	777b      	strb	r3, [r7, #29]

	/* Store temperature integer digits and decimal digits */
	digit = temperature >> 4;
 80011a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80011a2:	091b      	lsrs	r3, r3, #4
 80011a4:	b29b      	uxth	r3, r3
 80011a6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	digit |= ((temperature >> 8) & 0x7) << 4;
 80011aa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80011ac:	0a1b      	lsrs	r3, r3, #8
 80011ae:	b29b      	uxth	r3, r3
 80011b0:	011b      	lsls	r3, r3, #4
 80011b2:	b25b      	sxtb	r3, r3
 80011b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80011b8:	b25a      	sxtb	r2, r3
 80011ba:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80011be:	4313      	orrs	r3, r2
 80011c0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	/* Store decimal digits */
	switch (resolution) {
 80011c4:	7f7b      	ldrb	r3, [r7, #29]
 80011c6:	3b09      	subs	r3, #9
 80011c8:	2b03      	cmp	r3, #3
 80011ca:	d859      	bhi.n	8001280 <DS18B20_Read+0x1b0>
 80011cc:	a201      	add	r2, pc, #4	; (adr r2, 80011d4 <DS18B20_Read+0x104>)
 80011ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011d2:	bf00      	nop
 80011d4:	080011e5 	.word	0x080011e5
 80011d8:	0800120d 	.word	0x0800120d
 80011dc:	08001235 	.word	0x08001235
 80011e0:	0800125d 	.word	0x0800125d
		case 9: {
			decimal = (temperature >> 3) & 0x01;
 80011e4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80011e6:	08db      	lsrs	r3, r3, #3
 80011e8:	b29b      	uxth	r3, r3
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	ee07 3a90 	vmov	s15, r3
 80011f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011f6:	edc7 7a08 	vstr	s15, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_9BIT;
 80011fa:	edd7 7a08 	vldr	s15, [r7, #32]
 80011fe:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001202:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001206:	edc7 7a08 	vstr	s15, [r7, #32]
		} break;
 800120a:	e03e      	b.n	800128a <DS18B20_Read+0x1ba>
		case 10: {
			decimal = (temperature >> 2) & 0x03;
 800120c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800120e:	089b      	lsrs	r3, r3, #2
 8001210:	b29b      	uxth	r3, r3
 8001212:	f003 0303 	and.w	r3, r3, #3
 8001216:	ee07 3a90 	vmov	s15, r3
 800121a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800121e:	edc7 7a08 	vstr	s15, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_10BIT;
 8001222:	edd7 7a08 	vldr	s15, [r7, #32]
 8001226:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 800122a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800122e:	edc7 7a08 	vstr	s15, [r7, #32]
		} break;
 8001232:	e02a      	b.n	800128a <DS18B20_Read+0x1ba>
		case 11: {
			decimal = (temperature >> 1) & 0x07;
 8001234:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001236:	085b      	lsrs	r3, r3, #1
 8001238:	b29b      	uxth	r3, r3
 800123a:	f003 0307 	and.w	r3, r3, #7
 800123e:	ee07 3a90 	vmov	s15, r3
 8001242:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001246:	edc7 7a08 	vstr	s15, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_11BIT;
 800124a:	edd7 7a08 	vldr	s15, [r7, #32]
 800124e:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 8001252:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001256:	edc7 7a08 	vstr	s15, [r7, #32]
		} break;
 800125a:	e016      	b.n	800128a <DS18B20_Read+0x1ba>
		case 12: {
			decimal = temperature & 0x0F;
 800125c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800125e:	f003 030f 	and.w	r3, r3, #15
 8001262:	ee07 3a90 	vmov	s15, r3
 8001266:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800126a:	edc7 7a08 	vstr	s15, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_12BIT;
 800126e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001272:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80012dc <DS18B20_Read+0x20c>
 8001276:	ee67 7a87 	vmul.f32	s15, s15, s14
 800127a:	edc7 7a08 	vstr	s15, [r7, #32]
		} break;
 800127e:	e004      	b.n	800128a <DS18B20_Read+0x1ba>
		default: {
			decimal = 0xFF;
 8001280:	4b17      	ldr	r3, [pc, #92]	; (80012e0 <DS18B20_Read+0x210>)
 8001282:	623b      	str	r3, [r7, #32]
			digit = 0;
 8001284:	2300      	movs	r3, #0
 8001286:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		}
	}

	/* Check for negative part */
	decimal = digit + decimal;
 800128a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800128e:	ee07 3a90 	vmov	s15, r3
 8001292:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001296:	ed97 7a08 	vldr	s14, [r7, #32]
 800129a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800129e:	edc7 7a08 	vstr	s15, [r7, #32]
	if (minus) {
 80012a2:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d007      	beq.n	80012ba <DS18B20_Read+0x1ea>
		decimal = 0 - decimal;
 80012aa:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80012e4 <DS18B20_Read+0x214>
 80012ae:	edd7 7a08 	vldr	s15, [r7, #32]
 80012b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012b6:	edc7 7a08 	vstr	s15, [r7, #32]
	}

	/* Set to pointer */
	*Destination = decimal;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6a3a      	ldr	r2, [r7, #32]
 80012be:	601a      	str	r2, [r3, #0]

	/* Return 1, temperature valid */
	return decimal;
 80012c0:	edd7 7a08 	vldr	s15, [r7, #32]
 80012c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012c8:	edc7 7a00 	vstr	s15, [r7]
 80012cc:	783b      	ldrb	r3, [r7, #0]
 80012ce:	b2db      	uxtb	r3, r3
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	372c      	adds	r7, #44	; 0x2c
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd90      	pop	{r4, r7, pc}
 80012d8:	20013e2c 	.word	0x20013e2c
 80012dc:	3d800000 	.word	0x3d800000
 80012e0:	437f0000 	.word	0x437f0000
 80012e4:	00000000 	.word	0x00000000

080012e8 <DS18B20_SetTempAlarm>:
  * @param  Low		Low temperature alarm, value > -55, 0 = reset
  * @param  High	High temperature alarm,, value < 125, 0 = reset
  */
uint8_t DS18B20_SetTempAlarm(OneWire_t* OW, uint8_t *ROM, int8_t Low,
		int8_t High)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b086      	sub	sp, #24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	60f8      	str	r0, [r7, #12]
 80012f0:	60b9      	str	r1, [r7, #8]
 80012f2:	4611      	mov	r1, r2
 80012f4:	461a      	mov	r2, r3
 80012f6:	460b      	mov	r3, r1
 80012f8:	71fb      	strb	r3, [r7, #7]
 80012fa:	4613      	mov	r3, r2
 80012fc:	71bb      	strb	r3, [r7, #6]
	uint8_t tl, th, conf;

	/* Check if device is DS18B20 */
	if (!DS18B20_IsValid(ROM)) return 0;
 80012fe:	68b8      	ldr	r0, [r7, #8]
 8001300:	f7ff fe3a 	bl	8000f78 <DS18B20_IsValid>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d101      	bne.n	800130e <DS18B20_SetTempAlarm+0x26>
 800130a:	2300      	movs	r3, #0
 800130c:	e065      	b.n	80013da <DS18B20_SetTempAlarm+0xf2>

	Low = ((Low < -55) || (Low == 0)) ? -55 : Low;
 800130e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001312:	f113 0f37 	cmn.w	r3, #55	; 0x37
 8001316:	db06      	blt.n	8001326 <DS18B20_SetTempAlarm+0x3e>
 8001318:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d002      	beq.n	8001326 <DS18B20_SetTempAlarm+0x3e>
 8001320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001324:	e001      	b.n	800132a <DS18B20_SetTempAlarm+0x42>
 8001326:	f06f 0336 	mvn.w	r3, #54	; 0x36
 800132a:	71fb      	strb	r3, [r7, #7]
	High = ((High > 125) || (High == 0)) ? 125 : High;
 800132c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001330:	2b7d      	cmp	r3, #125	; 0x7d
 8001332:	dc06      	bgt.n	8001342 <DS18B20_SetTempAlarm+0x5a>
 8001334:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d002      	beq.n	8001342 <DS18B20_SetTempAlarm+0x5a>
 800133c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001340:	e000      	b.n	8001344 <DS18B20_SetTempAlarm+0x5c>
 8001342:	237d      	movs	r3, #125	; 0x7d
 8001344:	71bb      	strb	r3, [r7, #6]

	/* Reset line */
	OneWire_Reset(OW);
 8001346:	68f8      	ldr	r0, [r7, #12]
 8001348:	f000 fa07 	bl	800175a <OneWire_Reset>

	/* Select ROM number */
	OneWire_SelectWithPointer(OW, ROM);
 800134c:	68b9      	ldr	r1, [r7, #8]
 800134e:	68f8      	ldr	r0, [r7, #12]
 8001350:	f000 fb3b 	bl	80019ca <OneWire_SelectWithPointer>

	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OW, DS18B20_CMD_READSCRATCHPAD);
 8001354:	21be      	movs	r1, #190	; 0xbe
 8001356:	68f8      	ldr	r0, [r7, #12]
 8001358:	f000 f9c0 	bl	80016dc <OneWire_WriteByte>

	/* Ignore first 2 bytes */
	OneWire_ReadByte(OW);
 800135c:	68f8      	ldr	r0, [r7, #12]
 800135e:	f000 f9db 	bl	8001718 <OneWire_ReadByte>
	OneWire_ReadByte(OW);
 8001362:	68f8      	ldr	r0, [r7, #12]
 8001364:	f000 f9d8 	bl	8001718 <OneWire_ReadByte>

	th = OneWire_ReadByte(OW);
 8001368:	68f8      	ldr	r0, [r7, #12]
 800136a:	f000 f9d5 	bl	8001718 <OneWire_ReadByte>
 800136e:	4603      	mov	r3, r0
 8001370:	75fb      	strb	r3, [r7, #23]
	tl = OneWire_ReadByte(OW);
 8001372:	68f8      	ldr	r0, [r7, #12]
 8001374:	f000 f9d0 	bl	8001718 <OneWire_ReadByte>
 8001378:	4603      	mov	r3, r0
 800137a:	75bb      	strb	r3, [r7, #22]
	conf = OneWire_ReadByte(OW);
 800137c:	68f8      	ldr	r0, [r7, #12]
 800137e:	f000 f9cb 	bl	8001718 <OneWire_ReadByte>
 8001382:	4603      	mov	r3, r0
 8001384:	757b      	strb	r3, [r7, #21]

	th = (uint8_t)High;
 8001386:	79bb      	ldrb	r3, [r7, #6]
 8001388:	75fb      	strb	r3, [r7, #23]
	tl = (uint8_t)Low;
 800138a:	79fb      	ldrb	r3, [r7, #7]
 800138c:	75bb      	strb	r3, [r7, #22]

	/* Reset line */
	OneWire_Reset(OW);
 800138e:	68f8      	ldr	r0, [r7, #12]
 8001390:	f000 f9e3 	bl	800175a <OneWire_Reset>

	/* Select ROM number */
	OneWire_SelectWithPointer(OW, ROM);
 8001394:	68b9      	ldr	r1, [r7, #8]
 8001396:	68f8      	ldr	r0, [r7, #12]
 8001398:	f000 fb17 	bl	80019ca <OneWire_SelectWithPointer>

	/* Write scratchpad command by onewire protocol, only th, tl and conf
	 * register can be written */
	OneWire_WriteByte(OW, DS18B20_CMD_WRITESCRATCHPAD);
 800139c:	214e      	movs	r1, #78	; 0x4e
 800139e:	68f8      	ldr	r0, [r7, #12]
 80013a0:	f000 f99c 	bl	80016dc <OneWire_WriteByte>

	/* Write bytes */
	OneWire_WriteByte(OW, th);
 80013a4:	7dfb      	ldrb	r3, [r7, #23]
 80013a6:	4619      	mov	r1, r3
 80013a8:	68f8      	ldr	r0, [r7, #12]
 80013aa:	f000 f997 	bl	80016dc <OneWire_WriteByte>
	OneWire_WriteByte(OW, tl);
 80013ae:	7dbb      	ldrb	r3, [r7, #22]
 80013b0:	4619      	mov	r1, r3
 80013b2:	68f8      	ldr	r0, [r7, #12]
 80013b4:	f000 f992 	bl	80016dc <OneWire_WriteByte>
	OneWire_WriteByte(OW, conf);
 80013b8:	7d7b      	ldrb	r3, [r7, #21]
 80013ba:	4619      	mov	r1, r3
 80013bc:	68f8      	ldr	r0, [r7, #12]
 80013be:	f000 f98d 	bl	80016dc <OneWire_WriteByte>

	/* Reset line */
	OneWire_Reset(OW);
 80013c2:	68f8      	ldr	r0, [r7, #12]
 80013c4:	f000 f9c9 	bl	800175a <OneWire_Reset>

	/* Select ROM number */
	OneWire_SelectWithPointer(OW, ROM);
 80013c8:	68b9      	ldr	r1, [r7, #8]
 80013ca:	68f8      	ldr	r0, [r7, #12]
 80013cc:	f000 fafd 	bl	80019ca <OneWire_SelectWithPointer>

	/* Copy scratchpad to EEPROM of DS18B20 */
	OneWire_WriteByte(OW, DS18B20_CMD_COPYSCRATCHPAD);
 80013d0:	2148      	movs	r1, #72	; 0x48
 80013d2:	68f8      	ldr	r0, [r7, #12]
 80013d4:	f000 f982 	bl	80016dc <OneWire_WriteByte>

	return 1;
 80013d8:	2301      	movs	r3, #1
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3718      	adds	r7, #24
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <DS18B20_AlarmSearch>:
  * @retval status of search, OK = 1, Failed = 0
  * @param  DS		DS18B20 HandleTypedef
  * @param  OW		OneWire HandleTypedef
  */
uint8_t DS18B20_AlarmSearch(DS18B20_Drv_t *DS, OneWire_t* OW)
{
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b084      	sub	sp, #16
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]
 80013ea:	6039      	str	r1, [r7, #0]
	uint8_t t = 0;
 80013ec:	2300      	movs	r3, #0
 80013ee:	73fb      	strb	r3, [r7, #15]

	/* Reset Alarm in DS */
	for(uint8_t i = 0; i < DS18B20_MaxCnt; i++)
 80013f0:	2300      	movs	r3, #0
 80013f2:	73bb      	strb	r3, [r7, #14]
 80013f4:	e014      	b.n	8001420 <DS18B20_AlarmSearch+0x3e>
	{
		for(uint8_t j = 0; j < 8; j++)
 80013f6:	2300      	movs	r3, #0
 80013f8:	737b      	strb	r3, [r7, #13]
 80013fa:	e00b      	b.n	8001414 <DS18B20_AlarmSearch+0x32>
		{
			DS->AlmAddr[i][j] = 0;
 80013fc:	7bba      	ldrb	r2, [r7, #14]
 80013fe:	7b7b      	ldrb	r3, [r7, #13]
 8001400:	6879      	ldr	r1, [r7, #4]
 8001402:	00d2      	lsls	r2, r2, #3
 8001404:	440a      	add	r2, r1
 8001406:	4413      	add	r3, r2
 8001408:	3310      	adds	r3, #16
 800140a:	2200      	movs	r2, #0
 800140c:	701a      	strb	r2, [r3, #0]
		for(uint8_t j = 0; j < 8; j++)
 800140e:	7b7b      	ldrb	r3, [r7, #13]
 8001410:	3301      	adds	r3, #1
 8001412:	737b      	strb	r3, [r7, #13]
 8001414:	7b7b      	ldrb	r3, [r7, #13]
 8001416:	2b07      	cmp	r3, #7
 8001418:	d9f0      	bls.n	80013fc <DS18B20_AlarmSearch+0x1a>
	for(uint8_t i = 0; i < DS18B20_MaxCnt; i++)
 800141a:	7bbb      	ldrb	r3, [r7, #14]
 800141c:	3301      	adds	r3, #1
 800141e:	73bb      	strb	r3, [r7, #14]
 8001420:	7bbb      	ldrb	r3, [r7, #14]
 8001422:	2b01      	cmp	r3, #1
 8001424:	d9e7      	bls.n	80013f6 <DS18B20_AlarmSearch+0x14>
		}
	}

	/* Start alarm search */
	while (OneWire_Search(OW, DS18B20_CMD_ALARM_SEARCH))
 8001426:	e00b      	b.n	8001440 <DS18B20_AlarmSearch+0x5e>
	{
		/* Store ROM of device which has alarm flag set */
		OneWire_GetDevRom(OW, DS->AlmAddr[t]);
 8001428:	7bfb      	ldrb	r3, [r7, #15]
 800142a:	3302      	adds	r3, #2
 800142c:	00db      	lsls	r3, r3, #3
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	4413      	add	r3, r2
 8001432:	4619      	mov	r1, r3
 8001434:	6838      	ldr	r0, [r7, #0]
 8001436:	f000 fa7b 	bl	8001930 <OneWire_GetDevRom>
		t++;
 800143a:	7bfb      	ldrb	r3, [r7, #15]
 800143c:	3301      	adds	r3, #1
 800143e:	73fb      	strb	r3, [r7, #15]
	while (OneWire_Search(OW, DS18B20_CMD_ALARM_SEARCH))
 8001440:	21ec      	movs	r1, #236	; 0xec
 8001442:	6838      	ldr	r0, [r7, #0]
 8001444:	f000 f9ae 	bl	80017a4 <OneWire_Search>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d1ec      	bne.n	8001428 <DS18B20_AlarmSearch+0x46>
	}
	return (t > 0) ? 1 : 0;
 800144e:	7bfb      	ldrb	r3, [r7, #15]
 8001450:	2b00      	cmp	r3, #0
 8001452:	bf14      	ite	ne
 8001454:	2301      	movne	r3, #1
 8001456:	2300      	moveq	r3, #0
 8001458:	b2db      	uxtb	r3, r3
}
 800145a:	4618      	mov	r0, r3
 800145c:	3710      	adds	r7, #16
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <DS18B20_Init>:
  * @retval Rom detect status, OK = 1, No Rom detected = 0
  * @param  DS			DS18B20 HandleTypedef
  * @param  OW			OneWire HandleTypedef
  */
uint8_t DS18B20_Init(DS18B20_Drv_t *DS, OneWire_t *OW)
{
 8001462:	b580      	push	{r7, lr}
 8001464:	b082      	sub	sp, #8
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
 800146a:	6039      	str	r1, [r7, #0]
	/* Initialize OneWire and reset all data */
	OneWire_Init(OW);
 800146c:	6838      	ldr	r0, [r7, #0]
 800146e:	f000 fa7c 	bl	800196a <OneWire_Init>

	/* Search all OneWire devices ROM */
	while(1)
	{
		/* Start searching for OneWire devices along the line */
		if(OneWire_Search(OW, ONEWIRE_CMD_SEARCHROM) != 1) break;
 8001472:	21f0      	movs	r1, #240	; 0xf0
 8001474:	6838      	ldr	r0, [r7, #0]
 8001476:	f000 f995 	bl	80017a4 <OneWire_Search>
 800147a:	4603      	mov	r3, r0
 800147c:	2b01      	cmp	r3, #1
 800147e:	d121      	bne.n	80014c4 <DS18B20_Init+0x62>

		/* Get device ROM */
		OneWire_GetDevRom(OW, DS->DevAddr[OW->RomCnt]);
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	7adb      	ldrb	r3, [r3, #11]
 8001484:	00db      	lsls	r3, r3, #3
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	4413      	add	r3, r2
 800148a:	4619      	mov	r1, r3
 800148c:	6838      	ldr	r0, [r7, #0]
 800148e:	f000 fa4f 	bl	8001930 <OneWire_GetDevRom>

		/* Set ROM Resolution */
		DS18B20_SetResolution(OW, &OW->RomCnt, DS->Resolution);
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	f103 010b 	add.w	r1, r3, #11
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800149e:	461a      	mov	r2, r3
 80014a0:	6838      	ldr	r0, [r7, #0]
 80014a2:	f7ff fd7a 	bl	8000f9a <DS18B20_SetResolution>

		/* Reset Temperature Alarm */
		DS18B20_SetTempAlarm(OW, &OW->RomCnt, 0, 0);
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	f103 010b 	add.w	r1, r3, #11
 80014ac:	2300      	movs	r3, #0
 80014ae:	2200      	movs	r2, #0
 80014b0:	6838      	ldr	r0, [r7, #0]
 80014b2:	f7ff ff19 	bl	80012e8 <DS18B20_SetTempAlarm>

		OW->RomCnt++;
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	7adb      	ldrb	r3, [r3, #11]
 80014ba:	3301      	adds	r3, #1
 80014bc:	b2da      	uxtb	r2, r3
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	72da      	strb	r2, [r3, #11]
		if(OneWire_Search(OW, ONEWIRE_CMD_SEARCHROM) != 1) break;
 80014c2:	e7d6      	b.n	8001472 <DS18B20_Init+0x10>
 80014c4:	bf00      	nop
	}

	return (OW->RomCnt != 0) ? 1 : 0;
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	7adb      	ldrb	r3, [r3, #11]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	bf14      	ite	ne
 80014ce:	2301      	movne	r3, #1
 80014d0:	2300      	moveq	r3, #0
 80014d2:	b2db      	uxtb	r3, r3
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3708      	adds	r7, #8
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}

080014dc <DwtInit>:

/**
  * @brief  Initialize DWT
  */
void DwtInit(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
	SysCClk 		= (SystemCoreClock / 1000000);	// Calculate in us
 80014e0:	4b10      	ldr	r3, [pc, #64]	; (8001524 <DwtInit+0x48>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a10      	ldr	r2, [pc, #64]	; (8001528 <DwtInit+0x4c>)
 80014e6:	fba2 2303 	umull	r2, r3, r2, r3
 80014ea:	0c9b      	lsrs	r3, r3, #18
 80014ec:	4a0f      	ldr	r2, [pc, #60]	; (800152c <DwtInit+0x50>)
 80014ee:	6013      	str	r3, [r2, #0]
	DWT_LAR			|= DWT_LAR_UNLOCK;
 80014f0:	4b0f      	ldr	r3, [pc, #60]	; (8001530 <DwtInit+0x54>)
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	490e      	ldr	r1, [pc, #56]	; (8001530 <DwtInit+0x54>)
 80014f6:	4b0f      	ldr	r3, [pc, #60]	; (8001534 <DwtInit+0x58>)
 80014f8:	4313      	orrs	r3, r2
 80014fa:	600b      	str	r3, [r1, #0]
	DEM_CR			|= (uint32_t)DEM_CR_TRCENA;
 80014fc:	4b0e      	ldr	r3, [pc, #56]	; (8001538 <DwtInit+0x5c>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a0d      	ldr	r2, [pc, #52]	; (8001538 <DwtInit+0x5c>)
 8001502:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001506:	6013      	str	r3, [r2, #0]
	DWT_CYCCNT		= (uint32_t)0u;					// Reset the clock counter
 8001508:	4b0c      	ldr	r3, [pc, #48]	; (800153c <DwtInit+0x60>)
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
	DWT_CR			|= (uint32_t)DWT_CR_CYCCNTENA;
 800150e:	4b0c      	ldr	r3, [pc, #48]	; (8001540 <DwtInit+0x64>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a0b      	ldr	r2, [pc, #44]	; (8001540 <DwtInit+0x64>)
 8001514:	f043 0301 	orr.w	r3, r3, #1
 8001518:	6013      	str	r3, [r2, #0]
}
 800151a:	bf00      	nop
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr
 8001524:	10000050 	.word	0x10000050
 8001528:	431bde83 	.word	0x431bde83
 800152c:	2000001c 	.word	0x2000001c
 8001530:	e0001fb0 	.word	0xe0001fb0
 8001534:	c5acce55 	.word	0xc5acce55
 8001538:	e000edfc 	.word	0xe000edfc
 800153c:	e0001004 	.word	0xe0001004
 8001540:	e0001000 	.word	0xe0001000

08001544 <DwtDelay_us>:
/**
  * @brief  Function to delay in microsecond
  * @param	usec	Period in microsecond
  */
inline void DwtDelay_us(uint32_t usec)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
	start = DWT_CYCCNT;
 800154c:	4b0b      	ldr	r3, [pc, #44]	; (800157c <DwtDelay_us+0x38>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a0b      	ldr	r2, [pc, #44]	; (8001580 <DwtDelay_us+0x3c>)
 8001552:	6013      	str	r3, [r2, #0]
	while(((DWT_CYCCNT - start) / SysCClk) < usec) {};
 8001554:	bf00      	nop
 8001556:	4b09      	ldr	r3, [pc, #36]	; (800157c <DwtDelay_us+0x38>)
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	4b09      	ldr	r3, [pc, #36]	; (8001580 <DwtDelay_us+0x3c>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	1ad2      	subs	r2, r2, r3
 8001560:	4b08      	ldr	r3, [pc, #32]	; (8001584 <DwtDelay_us+0x40>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	fbb2 f3f3 	udiv	r3, r2, r3
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	429a      	cmp	r2, r3
 800156c:	d8f3      	bhi.n	8001556 <DwtDelay_us+0x12>
}
 800156e:	bf00      	nop
 8001570:	bf00      	nop
 8001572:	370c      	adds	r7, #12
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr
 800157c:	e0001004 	.word	0xe0001004
 8001580:	20000020 	.word	0x20000020
 8001584:	2000001c 	.word	0x2000001c

08001588 <OneWire_Pin_Mode>:
  * @brief  The internal function is used as gpio pin mode
  * @param  OW		OneWire HandleTypedef
  * @param  Mode	Input or Output
  */
static void OneWire_Pin_Mode(OneWire_t* OW, PinMode Mode)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b088      	sub	sp, #32
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	460b      	mov	r3, r1
 8001592:	70fb      	strb	r3, [r7, #3]
		LL_GPIO_SetPinMode(OW->DataPort, OW->DataPin, LL_GPIO_MODE_INPUT);
	}else{
		LL_GPIO_SetPinMode(OW->DataPort, OW->DataPin, LL_GPIO_MODE_OUTPUT);
	}
#else
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001594:	f107 030c 	add.w	r3, r7, #12
 8001598:	2200      	movs	r2, #0
 800159a:	601a      	str	r2, [r3, #0]
 800159c:	605a      	str	r2, [r3, #4]
 800159e:	609a      	str	r2, [r3, #8]
 80015a0:	60da      	str	r2, [r3, #12]
 80015a2:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = OW->DataPin;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	899b      	ldrh	r3, [r3, #12]
 80015a8:	60fb      	str	r3, [r7, #12]
	if(Mode == Input)
 80015aa:	78fb      	ldrb	r3, [r7, #3]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d102      	bne.n	80015b6 <OneWire_Pin_Mode+0x2e>
	{
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015b0:	2300      	movs	r3, #0
 80015b2:	613b      	str	r3, [r7, #16]
 80015b4:	e001      	b.n	80015ba <OneWire_Pin_Mode+0x32>
	}else{
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b6:	2301      	movs	r3, #1
 80015b8:	613b      	str	r3, [r7, #16]
	}
	HAL_GPIO_Init(OW->DataPort, &GPIO_InitStruct);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	691b      	ldr	r3, [r3, #16]
 80015be:	f107 020c 	add.w	r2, r7, #12
 80015c2:	4611      	mov	r1, r2
 80015c4:	4618      	mov	r0, r3
 80015c6:	f00b fda7 	bl	800d118 <HAL_GPIO_Init>
#endif
}
 80015ca:	bf00      	nop
 80015cc:	3720      	adds	r7, #32
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <OneWire_Pin_Level>:
  * @brief  The internal function is used as gpio pin level
  * @param  OW		OneWire HandleTypedef
  * @param  Mode	Level: Set/High = 1, Reset/Low = 0
  */
static void OneWire_Pin_Level(OneWire_t* OW, uint8_t Level)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b082      	sub	sp, #8
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
 80015da:	460b      	mov	r3, r1
 80015dc:	70fb      	strb	r3, [r7, #3]
		LL_GPIO_SetOutputPin(OW->DataPort, OW->DataPin);
	}else{
		LL_GPIO_ResetOutputPin(OW->DataPort, OW->DataPin);
	}
#else
	HAL_GPIO_WritePin(OW->DataPort, OW->DataPin, Level);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6918      	ldr	r0, [r3, #16]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	899b      	ldrh	r3, [r3, #12]
 80015e6:	78fa      	ldrb	r2, [r7, #3]
 80015e8:	4619      	mov	r1, r3
 80015ea:	f00b ff49 	bl	800d480 <HAL_GPIO_WritePin>
#endif
}
 80015ee:	bf00      	nop
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <OneWire_Pin_Read>:
  * @brief  The internal function is used to read data pin
  * @retval Pin level status
  * @param  OW		OneWire HandleTypedef
  */
static uint8_t OneWire_Pin_Read(OneWire_t* OW)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b082      	sub	sp, #8
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
#ifdef LL_Driver
	return ((OW->DataPort->IDR & OW->DataPin) != 0x00U) ? 1 : 0;
#else
	return HAL_GPIO_ReadPin(OW->DataPort, OW->DataPin);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	691a      	ldr	r2, [r3, #16]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	899b      	ldrh	r3, [r3, #12]
 8001606:	4619      	mov	r1, r3
 8001608:	4610      	mov	r0, r2
 800160a:	f00b ff21 	bl	800d450 <HAL_GPIO_ReadPin>
 800160e:	4603      	mov	r3, r0
#endif
}
 8001610:	4618      	mov	r0, r3
 8001612:	3708      	adds	r7, #8
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}

08001618 <OneWire_WriteBit>:
  * @brief  The internal function is used to write bit
  * @param  OW		OneWire HandleTypedef
  * @param  bit		bit in 0 or 1
  */
static void OneWire_WriteBit(OneWire_t* OW, uint8_t bit)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	460b      	mov	r3, r1
 8001622:	70fb      	strb	r3, [r7, #3]
	if(bit)
 8001624:	78fb      	ldrb	r3, [r7, #3]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d016      	beq.n	8001658 <OneWire_WriteBit+0x40>
	{
		/* Set line low */
		OneWire_Pin_Level(OW, 0);
 800162a:	2100      	movs	r1, #0
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f7ff ffd0 	bl	80015d2 <OneWire_Pin_Level>
		OneWire_Pin_Mode(OW, Output);
 8001632:	2101      	movs	r1, #1
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	f7ff ffa7 	bl	8001588 <OneWire_Pin_Mode>
		DwtDelay_us(10);
 800163a:	200a      	movs	r0, #10
 800163c:	f7ff ff82 	bl	8001544 <DwtDelay_us>

		/* Bit high */
		OneWire_Pin_Mode(OW, Input);
 8001640:	2100      	movs	r1, #0
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f7ff ffa0 	bl	8001588 <OneWire_Pin_Mode>

		/* Wait for 55 us and release the line */
		DwtDelay_us(55);
 8001648:	2037      	movs	r0, #55	; 0x37
 800164a:	f7ff ff7b 	bl	8001544 <DwtDelay_us>
		OneWire_Pin_Mode(OW, Input);
 800164e:	2100      	movs	r1, #0
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f7ff ff99 	bl	8001588 <OneWire_Pin_Mode>

		/* Wait for 5 us and release the line */
		DwtDelay_us(5);
		OneWire_Pin_Mode(OW, Input);
	}
}
 8001656:	e015      	b.n	8001684 <OneWire_WriteBit+0x6c>
		OneWire_Pin_Level(OW, 0);
 8001658:	2100      	movs	r1, #0
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f7ff ffb9 	bl	80015d2 <OneWire_Pin_Level>
		OneWire_Pin_Mode(OW, Output);
 8001660:	2101      	movs	r1, #1
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f7ff ff90 	bl	8001588 <OneWire_Pin_Mode>
		DwtDelay_us(65);
 8001668:	2041      	movs	r0, #65	; 0x41
 800166a:	f7ff ff6b 	bl	8001544 <DwtDelay_us>
		OneWire_Pin_Mode(OW, Input);
 800166e:	2100      	movs	r1, #0
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f7ff ff89 	bl	8001588 <OneWire_Pin_Mode>
		DwtDelay_us(5);
 8001676:	2005      	movs	r0, #5
 8001678:	f7ff ff64 	bl	8001544 <DwtDelay_us>
		OneWire_Pin_Mode(OW, Input);
 800167c:	2100      	movs	r1, #0
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f7ff ff82 	bl	8001588 <OneWire_Pin_Mode>
}
 8001684:	bf00      	nop
 8001686:	3708      	adds	r7, #8
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}

0800168c <OneWire_ReadBit>:
  * @brief  The function is used to read bit
  * @retval bit
  * @param  OW		OneWire HandleTypedef
  */
uint8_t OneWire_ReadBit(OneWire_t* OW)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
	uint8_t bit = 0;
 8001694:	2300      	movs	r3, #0
 8001696:	73fb      	strb	r3, [r7, #15]

	/* Line low */
	OneWire_Pin_Level(OW, 0);
 8001698:	2100      	movs	r1, #0
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f7ff ff99 	bl	80015d2 <OneWire_Pin_Level>
	OneWire_Pin_Mode(OW, Output);
 80016a0:	2101      	movs	r1, #1
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f7ff ff70 	bl	8001588 <OneWire_Pin_Mode>
	DwtDelay_us(3);
 80016a8:	2003      	movs	r0, #3
 80016aa:	f7ff ff4b 	bl	8001544 <DwtDelay_us>

	/* Release line */
	OneWire_Pin_Mode(OW, Input);
 80016ae:	2100      	movs	r1, #0
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f7ff ff69 	bl	8001588 <OneWire_Pin_Mode>
	DwtDelay_us(10);
 80016b6:	200a      	movs	r0, #10
 80016b8:	f7ff ff44 	bl	8001544 <DwtDelay_us>

	/* Read line value */
	if (OneWire_Pin_Read(OW))
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f7ff ff9a 	bl	80015f6 <OneWire_Pin_Read>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <OneWire_ReadBit+0x40>
	{
		/* Bit is HIGH */
		bit = 1;
 80016c8:	2301      	movs	r3, #1
 80016ca:	73fb      	strb	r3, [r7, #15]
	}

	/* Wait 50us to complete 60us period */
	DwtDelay_us(50);
 80016cc:	2032      	movs	r0, #50	; 0x32
 80016ce:	f7ff ff39 	bl	8001544 <DwtDelay_us>

	/* Return bit value */
	return bit;
 80016d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3710      	adds	r7, #16
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}

080016dc <OneWire_WriteByte>:
  * @brief  The function is used to write byte
  * @param  OW		OneWire HandleTypedef
  * @param  byte	byte to write
  */
void OneWire_WriteByte(OneWire_t* OW, uint8_t byte)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	460b      	mov	r3, r1
 80016e6:	70fb      	strb	r3, [r7, #3]
	uint8_t bit = 8;
 80016e8:	2308      	movs	r3, #8
 80016ea:	73fb      	strb	r3, [r7, #15]
	/* Write 8 bits */
	while (bit--) {
 80016ec:	e00a      	b.n	8001704 <OneWire_WriteByte+0x28>
		/* LSB bit is first */
		OneWire_WriteBit(OW, byte & 0x01);
 80016ee:	78fb      	ldrb	r3, [r7, #3]
 80016f0:	f003 0301 	and.w	r3, r3, #1
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	4619      	mov	r1, r3
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f7ff ff8d 	bl	8001618 <OneWire_WriteBit>
		byte >>= 1;
 80016fe:	78fb      	ldrb	r3, [r7, #3]
 8001700:	085b      	lsrs	r3, r3, #1
 8001702:	70fb      	strb	r3, [r7, #3]
	while (bit--) {
 8001704:	7bfb      	ldrb	r3, [r7, #15]
 8001706:	1e5a      	subs	r2, r3, #1
 8001708:	73fa      	strb	r2, [r7, #15]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d1ef      	bne.n	80016ee <OneWire_WriteByte+0x12>
	}
}
 800170e:	bf00      	nop
 8001710:	bf00      	nop
 8001712:	3710      	adds	r7, #16
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}

08001718 <OneWire_ReadByte>:
  * @brief  The function is used to read byte
  * @retval byte from device
  * @param  OW		OneWire HandleTypedef
  */
uint8_t OneWire_ReadByte(OneWire_t* OW)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
	uint8_t bit = 8, byte = 0;
 8001720:	2308      	movs	r3, #8
 8001722:	73fb      	strb	r3, [r7, #15]
 8001724:	2300      	movs	r3, #0
 8001726:	73bb      	strb	r3, [r7, #14]
	while (bit--) {
 8001728:	e00d      	b.n	8001746 <OneWire_ReadByte+0x2e>
		byte >>= 1;
 800172a:	7bbb      	ldrb	r3, [r7, #14]
 800172c:	085b      	lsrs	r3, r3, #1
 800172e:	73bb      	strb	r3, [r7, #14]
		byte |= (OneWire_ReadBit(OW) << 7);
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f7ff ffab 	bl	800168c <OneWire_ReadBit>
 8001736:	4603      	mov	r3, r0
 8001738:	01db      	lsls	r3, r3, #7
 800173a:	b25a      	sxtb	r2, r3
 800173c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001740:	4313      	orrs	r3, r2
 8001742:	b25b      	sxtb	r3, r3
 8001744:	73bb      	strb	r3, [r7, #14]
	while (bit--) {
 8001746:	7bfb      	ldrb	r3, [r7, #15]
 8001748:	1e5a      	subs	r2, r3, #1
 800174a:	73fa      	strb	r2, [r7, #15]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d1ec      	bne.n	800172a <OneWire_ReadByte+0x12>
	}

	return byte;
 8001750:	7bbb      	ldrb	r3, [r7, #14]
}
 8001752:	4618      	mov	r0, r3
 8001754:	3710      	adds	r7, #16
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <OneWire_Reset>:
  * @brief  The function is used to reset device
  * @retval respond from device
  * @param  OW		OneWire HandleTypedef
  */
uint8_t OneWire_Reset(OneWire_t* OW)
{
 800175a:	b580      	push	{r7, lr}
 800175c:	b084      	sub	sp, #16
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
	/* Line low, and wait 480us */
	OneWire_Pin_Level(OW, 0);
 8001762:	2100      	movs	r1, #0
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f7ff ff34 	bl	80015d2 <OneWire_Pin_Level>
	OneWire_Pin_Mode(OW, Output);
 800176a:	2101      	movs	r1, #1
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f7ff ff0b 	bl	8001588 <OneWire_Pin_Mode>
	DwtDelay_us(480);
 8001772:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8001776:	f7ff fee5 	bl	8001544 <DwtDelay_us>

	/* Release line and wait for 70us */
	OneWire_Pin_Mode(OW, Input);
 800177a:	2100      	movs	r1, #0
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f7ff ff03 	bl	8001588 <OneWire_Pin_Mode>
	DwtDelay_us(70);
 8001782:	2046      	movs	r0, #70	; 0x46
 8001784:	f7ff fede 	bl	8001544 <DwtDelay_us>

	/* Check bit value */
	uint8_t rslt = OneWire_Pin_Read(OW);
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f7ff ff34 	bl	80015f6 <OneWire_Pin_Read>
 800178e:	4603      	mov	r3, r0
 8001790:	73fb      	strb	r3, [r7, #15]

	/* Delay for 410 us */
	DwtDelay_us(410);
 8001792:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 8001796:	f7ff fed5 	bl	8001544 <DwtDelay_us>

	return rslt;
 800179a:	7bfb      	ldrb	r3, [r7, #15]
}
 800179c:	4618      	mov	r0, r3
 800179e:	3710      	adds	r7, #16
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <OneWire_Search>:
  * @brief  The function is used to search device
  * @retval Search result
  * @param  OW		OneWire HandleTypedef
  */
uint8_t OneWire_Search(OneWire_t* OW, uint8_t Cmd)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	460b      	mov	r3, r1
 80017ae:	70fb      	strb	r3, [r7, #3]
	uint8_t id_bit_number 	= 1;
 80017b0:	2301      	movs	r3, #1
 80017b2:	73fb      	strb	r3, [r7, #15]
	uint8_t last_zero 		= 0;
 80017b4:	2300      	movs	r3, #0
 80017b6:	73bb      	strb	r3, [r7, #14]
	uint8_t rom_byte_number = 0;
 80017b8:	2300      	movs	r3, #0
 80017ba:	737b      	strb	r3, [r7, #13]
	uint8_t search_result 	= 0;
 80017bc:	2300      	movs	r3, #0
 80017be:	733b      	strb	r3, [r7, #12]
	uint8_t rom_byte_mask 	= 1;
 80017c0:	2301      	movs	r3, #1
 80017c2:	72fb      	strb	r3, [r7, #11]
	uint8_t id_bit, cmp_id_bit, search_direction;

	/* if the last call was not the last one */
	if (!OW->LastDeviceFlag)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	789b      	ldrb	r3, [r3, #2]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	f040 809a 	bne.w	8001902 <OneWire_Search+0x15e>
	{
		if (OneWire_Reset(OW))
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f7ff ffc3 	bl	800175a <OneWire_Reset>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d00a      	beq.n	80017f0 <OneWire_Search+0x4c>
		{
			OW->LastDiscrepancy = 0;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2200      	movs	r2, #0
 80017de:	701a      	strb	r2, [r3, #0]
			OW->LastDeviceFlag = 0;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2200      	movs	r2, #0
 80017e4:	709a      	strb	r2, [r3, #2]
			OW->LastFamilyDiscrepancy = 0;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2200      	movs	r2, #0
 80017ea:	705a      	strb	r2, [r3, #1]
			return 0;
 80017ec:	2300      	movs	r3, #0
 80017ee:	e09b      	b.n	8001928 <OneWire_Search+0x184>
		}

		// issue the search command
		OneWire_WriteByte(OW, Cmd);
 80017f0:	78fb      	ldrb	r3, [r7, #3]
 80017f2:	4619      	mov	r1, r3
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f7ff ff71 	bl	80016dc <OneWire_WriteByte>

		// loop to do the search
		do {
			// read a bit and its complement
			id_bit = OneWire_ReadBit(OW);
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f7ff ff46 	bl	800168c <OneWire_ReadBit>
 8001800:	4603      	mov	r3, r0
 8001802:	727b      	strb	r3, [r7, #9]
			cmp_id_bit = OneWire_ReadBit(OW);
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f7ff ff41 	bl	800168c <OneWire_ReadBit>
 800180a:	4603      	mov	r3, r0
 800180c:	723b      	strb	r3, [r7, #8]

			// check for no devices on 1-wire
			if ((id_bit == 1) && (cmp_id_bit == 1))
 800180e:	7a7b      	ldrb	r3, [r7, #9]
 8001810:	2b01      	cmp	r3, #1
 8001812:	d102      	bne.n	800181a <OneWire_Search+0x76>
 8001814:	7a3b      	ldrb	r3, [r7, #8]
 8001816:	2b01      	cmp	r3, #1
 8001818:	d064      	beq.n	80018e4 <OneWire_Search+0x140>
			{
				break;
			} else {
				// all devices coupled have 0 or 1
				if (id_bit != cmp_id_bit)
 800181a:	7a7a      	ldrb	r2, [r7, #9]
 800181c:	7a3b      	ldrb	r3, [r7, #8]
 800181e:	429a      	cmp	r2, r3
 8001820:	d002      	beq.n	8001828 <OneWire_Search+0x84>
				{
					search_direction = id_bit;  // bit write value for search
 8001822:	7a7b      	ldrb	r3, [r7, #9]
 8001824:	72bb      	strb	r3, [r7, #10]
 8001826:	e026      	b.n	8001876 <OneWire_Search+0xd2>
				} else {
					/* if this discrepancy if before the Last Discrepancy
					 * on a previous next then pick the same as last time */
					if (id_bit_number < OW->LastDiscrepancy)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	7bfa      	ldrb	r2, [r7, #15]
 800182e:	429a      	cmp	r2, r3
 8001830:	d20d      	bcs.n	800184e <OneWire_Search+0xaa>
					{
						search_direction = ((OW->RomByte[rom_byte_number] & rom_byte_mask) > 0);
 8001832:	7b7b      	ldrb	r3, [r7, #13]
 8001834:	687a      	ldr	r2, [r7, #4]
 8001836:	4413      	add	r3, r2
 8001838:	78da      	ldrb	r2, [r3, #3]
 800183a:	7afb      	ldrb	r3, [r7, #11]
 800183c:	4013      	ands	r3, r2
 800183e:	b2db      	uxtb	r3, r3
 8001840:	2b00      	cmp	r3, #0
 8001842:	bf14      	ite	ne
 8001844:	2301      	movne	r3, #1
 8001846:	2300      	moveq	r3, #0
 8001848:	b2db      	uxtb	r3, r3
 800184a:	72bb      	strb	r3, [r7, #10]
 800184c:	e008      	b.n	8001860 <OneWire_Search+0xbc>
					} else {
						// if equal to last pick 1, if not then pick 0
						search_direction = (id_bit_number == OW->LastDiscrepancy);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	7bfa      	ldrb	r2, [r7, #15]
 8001854:	429a      	cmp	r2, r3
 8001856:	bf0c      	ite	eq
 8001858:	2301      	moveq	r3, #1
 800185a:	2300      	movne	r3, #0
 800185c:	b2db      	uxtb	r3, r3
 800185e:	72bb      	strb	r3, [r7, #10]
					}

					// if 0 was picked then record its position in LastZero
					if (search_direction == 0)
 8001860:	7abb      	ldrb	r3, [r7, #10]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d107      	bne.n	8001876 <OneWire_Search+0xd2>
					{
						last_zero = id_bit_number;
 8001866:	7bfb      	ldrb	r3, [r7, #15]
 8001868:	73bb      	strb	r3, [r7, #14]

						// check for Last discrepancy in family
						if (last_zero < 9)
 800186a:	7bbb      	ldrb	r3, [r7, #14]
 800186c:	2b08      	cmp	r3, #8
 800186e:	d802      	bhi.n	8001876 <OneWire_Search+0xd2>
						{
							OW->LastFamilyDiscrepancy = last_zero;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	7bba      	ldrb	r2, [r7, #14]
 8001874:	705a      	strb	r2, [r3, #1]
					}
				}

				/* set or clear the bit in the ROM byte rom_byte_number
				 * with mask rom_byte_mask */
				if (search_direction == 1)
 8001876:	7abb      	ldrb	r3, [r7, #10]
 8001878:	2b01      	cmp	r3, #1
 800187a:	d10c      	bne.n	8001896 <OneWire_Search+0xf2>
				{
					OW->RomByte[rom_byte_number] |= rom_byte_mask;
 800187c:	7b7b      	ldrb	r3, [r7, #13]
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	4413      	add	r3, r2
 8001882:	78d9      	ldrb	r1, [r3, #3]
 8001884:	7b7b      	ldrb	r3, [r7, #13]
 8001886:	7afa      	ldrb	r2, [r7, #11]
 8001888:	430a      	orrs	r2, r1
 800188a:	b2d1      	uxtb	r1, r2
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	4413      	add	r3, r2
 8001890:	460a      	mov	r2, r1
 8001892:	70da      	strb	r2, [r3, #3]
 8001894:	e010      	b.n	80018b8 <OneWire_Search+0x114>
				} else {
					OW->RomByte[rom_byte_number] &= ~rom_byte_mask;
 8001896:	7b7b      	ldrb	r3, [r7, #13]
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	4413      	add	r3, r2
 800189c:	78db      	ldrb	r3, [r3, #3]
 800189e:	b25a      	sxtb	r2, r3
 80018a0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80018a4:	43db      	mvns	r3, r3
 80018a6:	b25b      	sxtb	r3, r3
 80018a8:	4013      	ands	r3, r2
 80018aa:	b25a      	sxtb	r2, r3
 80018ac:	7b7b      	ldrb	r3, [r7, #13]
 80018ae:	b2d1      	uxtb	r1, r2
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	4413      	add	r3, r2
 80018b4:	460a      	mov	r2, r1
 80018b6:	70da      	strb	r2, [r3, #3]
				}

				// serial number search direction write bit
				OneWire_WriteBit(OW, search_direction);
 80018b8:	7abb      	ldrb	r3, [r7, #10]
 80018ba:	4619      	mov	r1, r3
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f7ff feab 	bl	8001618 <OneWire_WriteBit>

				/* increment the byte counter id_bit_number and shift the
				 * mask rom_byte_mask */
				id_bit_number++;
 80018c2:	7bfb      	ldrb	r3, [r7, #15]
 80018c4:	3301      	adds	r3, #1
 80018c6:	73fb      	strb	r3, [r7, #15]
				rom_byte_mask <<= 1;
 80018c8:	7afb      	ldrb	r3, [r7, #11]
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	72fb      	strb	r3, [r7, #11]

				/* if the mask is 0 then go to new SerialNum byte
				 * rom_byte_number and reset mask */
				if (rom_byte_mask == 0)
 80018ce:	7afb      	ldrb	r3, [r7, #11]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d104      	bne.n	80018de <OneWire_Search+0x13a>
				{
					rom_byte_number++;
 80018d4:	7b7b      	ldrb	r3, [r7, #13]
 80018d6:	3301      	adds	r3, #1
 80018d8:	737b      	strb	r3, [r7, #13]
					rom_byte_mask = 1;
 80018da:	2301      	movs	r3, #1
 80018dc:	72fb      	strb	r3, [r7, #11]
				}
			}
		} while (rom_byte_number < 8);  /* loop until through all ROM bytes 0-7
 80018de:	7b7b      	ldrb	r3, [r7, #13]
 80018e0:	2b07      	cmp	r3, #7
 80018e2:	d98a      	bls.n	80017fa <OneWire_Search+0x56>
		if the search was successful then */

		if (!(id_bit_number < 65))
 80018e4:	7bfb      	ldrb	r3, [r7, #15]
 80018e6:	2b40      	cmp	r3, #64	; 0x40
 80018e8:	d90b      	bls.n	8001902 <OneWire_Search+0x15e>
		{
			/* search successful so set LastDiscrepancy, LastDeviceFlag,
			 * search_result */
			OW->LastDiscrepancy = last_zero;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	7bba      	ldrb	r2, [r7, #14]
 80018ee:	701a      	strb	r2, [r3, #0]
			// check for last device
			if (OW->LastDiscrepancy == 0) {
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d102      	bne.n	80018fe <OneWire_Search+0x15a>
				OW->LastDeviceFlag = 1;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2201      	movs	r2, #1
 80018fc:	709a      	strb	r2, [r3, #2]
			}
			search_result = 1;
 80018fe:	2301      	movs	r3, #1
 8001900:	733b      	strb	r3, [r7, #12]
		}
	}

	/* if no device found then reset counters so next 'search' will be like a
	 * first */
	if (!search_result || !OW->RomByte[0])
 8001902:	7b3b      	ldrb	r3, [r7, #12]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d003      	beq.n	8001910 <OneWire_Search+0x16c>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	78db      	ldrb	r3, [r3, #3]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d10a      	bne.n	8001926 <OneWire_Search+0x182>
	{
		OW->LastDiscrepancy = 0;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2200      	movs	r2, #0
 8001914:	701a      	strb	r2, [r3, #0]
		OW->LastDeviceFlag = 0;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2200      	movs	r2, #0
 800191a:	709a      	strb	r2, [r3, #2]
		OW->LastFamilyDiscrepancy = 0;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2200      	movs	r2, #0
 8001920:	705a      	strb	r2, [r3, #1]
		search_result = 0;
 8001922:	2300      	movs	r3, #0
 8001924:	733b      	strb	r3, [r7, #12]
	}

	return search_result;
 8001926:	7b3b      	ldrb	r3, [r7, #12]
}
 8001928:	4618      	mov	r0, r3
 800192a:	3710      	adds	r7, #16
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <OneWire_GetDevRom>:
  * @brief  The function is used get ROM full address
  * @param  OW		OneWire HandleTypedef
  * @param  ROM		Pointer to device ROM
  */
void OneWire_GetDevRom(OneWire_t* OW, uint8_t *ROM)
{
 8001930:	b480      	push	{r7}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
	for (uint8_t i = 0; i < 8; i++) {
 800193a:	2300      	movs	r3, #0
 800193c:	73fb      	strb	r3, [r7, #15]
 800193e:	e00a      	b.n	8001956 <OneWire_GetDevRom+0x26>
		*(ROM + i) = OW->RomByte[i];
 8001940:	7bfa      	ldrb	r2, [r7, #15]
 8001942:	7bfb      	ldrb	r3, [r7, #15]
 8001944:	6839      	ldr	r1, [r7, #0]
 8001946:	440b      	add	r3, r1
 8001948:	6879      	ldr	r1, [r7, #4]
 800194a:	440a      	add	r2, r1
 800194c:	78d2      	ldrb	r2, [r2, #3]
 800194e:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 8; i++) {
 8001950:	7bfb      	ldrb	r3, [r7, #15]
 8001952:	3301      	adds	r3, #1
 8001954:	73fb      	strb	r3, [r7, #15]
 8001956:	7bfb      	ldrb	r3, [r7, #15]
 8001958:	2b07      	cmp	r3, #7
 800195a:	d9f1      	bls.n	8001940 <OneWire_GetDevRom+0x10>
	}
}
 800195c:	bf00      	nop
 800195e:	bf00      	nop
 8001960:	3714      	adds	r7, #20
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr

0800196a <OneWire_Init>:
/**
  * @brief  The function is used to initialize OneWire Communication
  * @param  OW		OneWire HandleTypedef
  */
void OneWire_Init(OneWire_t* OW)
{
 800196a:	b580      	push	{r7, lr}
 800196c:	b082      	sub	sp, #8
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
	OneWire_Pin_Mode(OW, Output);
 8001972:	2101      	movs	r1, #1
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f7ff fe07 	bl	8001588 <OneWire_Pin_Mode>
	OneWire_Pin_Level(OW, 1);
 800197a:	2101      	movs	r1, #1
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f7ff fe28 	bl	80015d2 <OneWire_Pin_Level>
	DwtDelay_us(1000);
 8001982:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001986:	f7ff fddd 	bl	8001544 <DwtDelay_us>
	OneWire_Pin_Level(OW, 0);
 800198a:	2100      	movs	r1, #0
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f7ff fe20 	bl	80015d2 <OneWire_Pin_Level>
	DwtDelay_us(1000);
 8001992:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001996:	f7ff fdd5 	bl	8001544 <DwtDelay_us>
	OneWire_Pin_Level(OW, 1);
 800199a:	2101      	movs	r1, #1
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f7ff fe18 	bl	80015d2 <OneWire_Pin_Level>
	DwtDelay_us(2000);
 80019a2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80019a6:	f7ff fdcd 	bl	8001544 <DwtDelay_us>

	/* Reset the search state */
	OW->LastDiscrepancy 		= 0;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2200      	movs	r2, #0
 80019ae:	701a      	strb	r2, [r3, #0]
	OW->LastDeviceFlag 			= 0;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2200      	movs	r2, #0
 80019b4:	709a      	strb	r2, [r3, #2]
	OW->LastFamilyDiscrepancy 	= 0;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2200      	movs	r2, #0
 80019ba:	705a      	strb	r2, [r3, #1]
	OW->RomCnt 					= 0;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2200      	movs	r2, #0
 80019c0:	72da      	strb	r2, [r3, #11]
}
 80019c2:	bf00      	nop
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <OneWire_SelectWithPointer>:
  * @brief  The function is used selected specific device ROM
  * @param  OW		OneWire HandleTypedef
  * @param  ROM		Pointer to device ROM
  */
void OneWire_SelectWithPointer(OneWire_t* OW, uint8_t *ROM)
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b084      	sub	sp, #16
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
 80019d2:	6039      	str	r1, [r7, #0]
	OneWire_WriteByte(OW, ONEWIRE_CMD_MATCHROM);
 80019d4:	2155      	movs	r1, #85	; 0x55
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f7ff fe80 	bl	80016dc <OneWire_WriteByte>

	for (uint8_t i = 0; i < 8; i++)
 80019dc:	2300      	movs	r3, #0
 80019de:	73fb      	strb	r3, [r7, #15]
 80019e0:	e00a      	b.n	80019f8 <OneWire_SelectWithPointer+0x2e>
	{
		OneWire_WriteByte(OW, *(ROM + i));
 80019e2:	7bfb      	ldrb	r3, [r7, #15]
 80019e4:	683a      	ldr	r2, [r7, #0]
 80019e6:	4413      	add	r3, r2
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	4619      	mov	r1, r3
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f7ff fe75 	bl	80016dc <OneWire_WriteByte>
	for (uint8_t i = 0; i < 8; i++)
 80019f2:	7bfb      	ldrb	r3, [r7, #15]
 80019f4:	3301      	adds	r3, #1
 80019f6:	73fb      	strb	r3, [r7, #15]
 80019f8:	7bfb      	ldrb	r3, [r7, #15]
 80019fa:	2b07      	cmp	r3, #7
 80019fc:	d9f1      	bls.n	80019e2 <OneWire_SelectWithPointer+0x18>
	}
}
 80019fe:	bf00      	nop
 8001a00:	bf00      	nop
 8001a02:	3710      	adds	r7, #16
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <OneWire_CRC8>:
  * @brief  The function is used check CRC
  * @param  Addr	Pointer to address
  * @param  ROM		Number of byte
  */
uint8_t OneWire_CRC8(uint8_t *Addr, uint8_t Len)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b085      	sub	sp, #20
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	460b      	mov	r3, r1
 8001a12:	70fb      	strb	r3, [r7, #3]
	uint8_t crc = 0;
 8001a14:	2300      	movs	r3, #0
 8001a16:	73fb      	strb	r3, [r7, #15]
	uint8_t inbyte, i, mix;

	while (Len--)
 8001a18:	e026      	b.n	8001a68 <OneWire_CRC8+0x60>
	{
		inbyte = *Addr++;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	1c5a      	adds	r2, r3, #1
 8001a1e:	607a      	str	r2, [r7, #4]
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	73bb      	strb	r3, [r7, #14]

		for (i = 8; i; i--)
 8001a24:	2308      	movs	r3, #8
 8001a26:	737b      	strb	r3, [r7, #13]
 8001a28:	e01b      	b.n	8001a62 <OneWire_CRC8+0x5a>
		{
			mix = (crc ^ inbyte) & 0x01;
 8001a2a:	7bfa      	ldrb	r2, [r7, #15]
 8001a2c:	7bbb      	ldrb	r3, [r7, #14]
 8001a2e:	4053      	eors	r3, r2
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	733b      	strb	r3, [r7, #12]
			crc >>= 1;
 8001a38:	7bfb      	ldrb	r3, [r7, #15]
 8001a3a:	085b      	lsrs	r3, r3, #1
 8001a3c:	73fb      	strb	r3, [r7, #15]
			crc ^= (mix) ? 0x8C : 0;
 8001a3e:	7b3b      	ldrb	r3, [r7, #12]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d002      	beq.n	8001a4a <OneWire_CRC8+0x42>
 8001a44:	f06f 0273 	mvn.w	r2, #115	; 0x73
 8001a48:	e000      	b.n	8001a4c <OneWire_CRC8+0x44>
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a50:	4053      	eors	r3, r2
 8001a52:	b25b      	sxtb	r3, r3
 8001a54:	73fb      	strb	r3, [r7, #15]
			inbyte >>= 1;
 8001a56:	7bbb      	ldrb	r3, [r7, #14]
 8001a58:	085b      	lsrs	r3, r3, #1
 8001a5a:	73bb      	strb	r3, [r7, #14]
		for (i = 8; i; i--)
 8001a5c:	7b7b      	ldrb	r3, [r7, #13]
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	737b      	strb	r3, [r7, #13]
 8001a62:	7b7b      	ldrb	r3, [r7, #13]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d1e0      	bne.n	8001a2a <OneWire_CRC8+0x22>
	while (Len--)
 8001a68:	78fb      	ldrb	r3, [r7, #3]
 8001a6a:	1e5a      	subs	r2, r3, #1
 8001a6c:	70fa      	strb	r2, [r7, #3]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d1d3      	bne.n	8001a1a <OneWire_CRC8+0x12>
		}
	}
	return crc;
 8001a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3714      	adds	r7, #20
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <GetSector>:
 *  Sector 4 as 64KB
 *  Sector 5 to Sector 7 each 128KB
 */

static uint32_t GetSector(uint32_t Address)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b085      	sub	sp, #20
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	60fb      	str	r3, [r7, #12]

  if((Address < 0x08003FFF) && (Address >= 0x08000000))
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	4a44      	ldr	r2, [pc, #272]	; (8001ba0 <GetSector+0x120>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d806      	bhi.n	8001aa2 <GetSector+0x22>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001a9a:	d302      	bcc.n	8001aa2 <GetSector+0x22>
  {
    sector = FLASH_SECTOR_0;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	60fb      	str	r3, [r7, #12]
 8001aa0:	e077      	b.n	8001b92 <GetSector+0x112>
  }
  else if((Address < 0x08007FFF) && (Address >= 0x08004000))
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4a3f      	ldr	r2, [pc, #252]	; (8001ba4 <GetSector+0x124>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d806      	bhi.n	8001ab8 <GetSector+0x38>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a3e      	ldr	r2, [pc, #248]	; (8001ba8 <GetSector+0x128>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d302      	bcc.n	8001ab8 <GetSector+0x38>
  {
    sector = FLASH_SECTOR_1;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	60fb      	str	r3, [r7, #12]
 8001ab6:	e06c      	b.n	8001b92 <GetSector+0x112>
  }
  else if((Address < 0x0800BFFF) && (Address >= 0x08008000))
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	4a3c      	ldr	r2, [pc, #240]	; (8001bac <GetSector+0x12c>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d806      	bhi.n	8001ace <GetSector+0x4e>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	4a3b      	ldr	r2, [pc, #236]	; (8001bb0 <GetSector+0x130>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d302      	bcc.n	8001ace <GetSector+0x4e>
  {
    sector = FLASH_SECTOR_2;
 8001ac8:	2302      	movs	r3, #2
 8001aca:	60fb      	str	r3, [r7, #12]
 8001acc:	e061      	b.n	8001b92 <GetSector+0x112>
  }
  else if((Address < 0x0800FFFF) && (Address >= 0x0800C000))
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4a38      	ldr	r2, [pc, #224]	; (8001bb4 <GetSector+0x134>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d206      	bcs.n	8001ae4 <GetSector+0x64>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a37      	ldr	r2, [pc, #220]	; (8001bb8 <GetSector+0x138>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d302      	bcc.n	8001ae4 <GetSector+0x64>
  {
    sector = FLASH_SECTOR_3;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	60fb      	str	r3, [r7, #12]
 8001ae2:	e056      	b.n	8001b92 <GetSector+0x112>
  }
  else if((Address < 0x0801FFFF) && (Address >= 0x08010000))
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	4a35      	ldr	r2, [pc, #212]	; (8001bbc <GetSector+0x13c>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d206      	bcs.n	8001afa <GetSector+0x7a>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	4a31      	ldr	r2, [pc, #196]	; (8001bb4 <GetSector+0x134>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d902      	bls.n	8001afa <GetSector+0x7a>
  {
    sector = FLASH_SECTOR_4;
 8001af4:	2304      	movs	r3, #4
 8001af6:	60fb      	str	r3, [r7, #12]
 8001af8:	e04b      	b.n	8001b92 <GetSector+0x112>
  }
  else if((Address < 0x0803FFFF) && (Address >= 0x08020000))
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a30      	ldr	r2, [pc, #192]	; (8001bc0 <GetSector+0x140>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d206      	bcs.n	8001b10 <GetSector+0x90>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4a2d      	ldr	r2, [pc, #180]	; (8001bbc <GetSector+0x13c>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d902      	bls.n	8001b10 <GetSector+0x90>
  {
    sector = FLASH_SECTOR_5;
 8001b0a:	2305      	movs	r3, #5
 8001b0c:	60fb      	str	r3, [r7, #12]
 8001b0e:	e040      	b.n	8001b92 <GetSector+0x112>
  }
  else if((Address < 0x0805FFFF) && (Address >= 0x08040000))
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	4a2c      	ldr	r2, [pc, #176]	; (8001bc4 <GetSector+0x144>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d206      	bcs.n	8001b26 <GetSector+0xa6>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	4a29      	ldr	r2, [pc, #164]	; (8001bc0 <GetSector+0x140>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d902      	bls.n	8001b26 <GetSector+0xa6>
  {
    sector = FLASH_SECTOR_6;
 8001b20:	2306      	movs	r3, #6
 8001b22:	60fb      	str	r3, [r7, #12]
 8001b24:	e035      	b.n	8001b92 <GetSector+0x112>
  }
  else if((Address < 0x0807FFFF) && (Address >= 0x08060000))
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4a27      	ldr	r2, [pc, #156]	; (8001bc8 <GetSector+0x148>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d206      	bcs.n	8001b3c <GetSector+0xbc>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4a24      	ldr	r2, [pc, #144]	; (8001bc4 <GetSector+0x144>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d902      	bls.n	8001b3c <GetSector+0xbc>
  {
    sector = FLASH_SECTOR_7;
 8001b36:	2307      	movs	r3, #7
 8001b38:	60fb      	str	r3, [r7, #12]
 8001b3a:	e02a      	b.n	8001b92 <GetSector+0x112>
  }
  else if((Address < 0x0809FFFF) && (Address >= 0x08080000))
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	4a23      	ldr	r2, [pc, #140]	; (8001bcc <GetSector+0x14c>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d206      	bcs.n	8001b52 <GetSector+0xd2>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	4a20      	ldr	r2, [pc, #128]	; (8001bc8 <GetSector+0x148>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d902      	bls.n	8001b52 <GetSector+0xd2>
  {
    sector = FLASH_SECTOR_8;
 8001b4c:	2308      	movs	r3, #8
 8001b4e:	60fb      	str	r3, [r7, #12]
 8001b50:	e01f      	b.n	8001b92 <GetSector+0x112>
  }
  else if((Address < 0x080BFFFF) && (Address >= 0x080A0000))
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4a1e      	ldr	r2, [pc, #120]	; (8001bd0 <GetSector+0x150>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d206      	bcs.n	8001b68 <GetSector+0xe8>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4a1b      	ldr	r2, [pc, #108]	; (8001bcc <GetSector+0x14c>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d902      	bls.n	8001b68 <GetSector+0xe8>
  {
    sector = FLASH_SECTOR_9;
 8001b62:	2309      	movs	r3, #9
 8001b64:	60fb      	str	r3, [r7, #12]
 8001b66:	e014      	b.n	8001b92 <GetSector+0x112>
  }
  else if((Address < 0x080DFFFF) && (Address >= 0x080C0000))
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	4a1a      	ldr	r2, [pc, #104]	; (8001bd4 <GetSector+0x154>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d806      	bhi.n	8001b7e <GetSector+0xfe>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	4a17      	ldr	r2, [pc, #92]	; (8001bd0 <GetSector+0x150>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d902      	bls.n	8001b7e <GetSector+0xfe>
  {
    sector = FLASH_SECTOR_10;
 8001b78:	230a      	movs	r3, #10
 8001b7a:	60fb      	str	r3, [r7, #12]
 8001b7c:	e009      	b.n	8001b92 <GetSector+0x112>
  }
  else if((Address < 0x080FFFFF) && (Address >= 0x080E0000))
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a15      	ldr	r2, [pc, #84]	; (8001bd8 <GetSector+0x158>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d805      	bhi.n	8001b92 <GetSector+0x112>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a14      	ldr	r2, [pc, #80]	; (8001bdc <GetSector+0x15c>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d901      	bls.n	8001b92 <GetSector+0x112>
  {
    sector = FLASH_SECTOR_11;
 8001b8e:	230b      	movs	r3, #11
 8001b90:	60fb      	str	r3, [r7, #12]
//  }
//  else if((Address < 0x081FFFFF) && (Address >= 0x081E0000))
//  {
//    sector = FLASH_SECTOR_23;
//  }
  return sector;
 8001b92:	68fb      	ldr	r3, [r7, #12]
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3714      	adds	r7, #20
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr
 8001ba0:	08003ffe 	.word	0x08003ffe
 8001ba4:	08007ffe 	.word	0x08007ffe
 8001ba8:	08004000 	.word	0x08004000
 8001bac:	0800bffe 	.word	0x0800bffe
 8001bb0:	08008000 	.word	0x08008000
 8001bb4:	0800ffff 	.word	0x0800ffff
 8001bb8:	0800c000 	.word	0x0800c000
 8001bbc:	0801ffff 	.word	0x0801ffff
 8001bc0:	0803ffff 	.word	0x0803ffff
 8001bc4:	0805ffff 	.word	0x0805ffff
 8001bc8:	0807ffff 	.word	0x0807ffff
 8001bcc:	0809ffff 	.word	0x0809ffff
 8001bd0:	080bffff 	.word	0x080bffff
 8001bd4:	080dfffe 	.word	0x080dfffe
 8001bd8:	080ffffe 	.word	0x080ffffe
 8001bdc:	080dffff 	.word	0x080dffff

08001be0 <Flash_Write_Data>:
   return float_variable;
}


uint32_t Flash_Write_Data (uint32_t StartSectorAddress, uint32_t *Data, uint16_t numberofwords)
{
 8001be0:	b5b0      	push	{r4, r5, r7, lr}
 8001be2:	b08a      	sub	sp, #40	; 0x28
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	60b9      	str	r1, [r7, #8]
 8001bea:	4613      	mov	r3, r2
 8001bec:	80fb      	strh	r3, [r7, #6]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SECTORError;
	int sofar=0;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	627b      	str	r3, [r7, #36]	; 0x24


	 /* Unlock the Flash to enable the flash control register access *************/
	  HAL_FLASH_Unlock();
 8001bf2:	f00b f801 	bl	800cbf8 <HAL_FLASH_Unlock>

	  /* Erase the user Flash area */

	  /* Get the number of sector to erase from 1st sector */

	  uint32_t StartSector = GetSector(StartSectorAddress);
 8001bf6:	68f8      	ldr	r0, [r7, #12]
 8001bf8:	f7ff ff42 	bl	8001a80 <GetSector>
 8001bfc:	6238      	str	r0, [r7, #32]
	  uint32_t EndSectorAddress = StartSectorAddress + numberofwords*4;
 8001bfe:	88fb      	ldrh	r3, [r7, #6]
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	461a      	mov	r2, r3
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	4413      	add	r3, r2
 8001c08:	61fb      	str	r3, [r7, #28]
	  uint32_t EndSector = GetSector(EndSectorAddress);
 8001c0a:	69f8      	ldr	r0, [r7, #28]
 8001c0c:	f7ff ff38 	bl	8001a80 <GetSector>
 8001c10:	61b8      	str	r0, [r7, #24]

	  /* Fill EraseInit structure*/
	  EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 8001c12:	4b21      	ldr	r3, [pc, #132]	; (8001c98 <Flash_Write_Data+0xb8>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]
	  EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8001c18:	4b1f      	ldr	r3, [pc, #124]	; (8001c98 <Flash_Write_Data+0xb8>)
 8001c1a:	2202      	movs	r2, #2
 8001c1c:	611a      	str	r2, [r3, #16]
	  EraseInitStruct.Sector        = StartSector;
 8001c1e:	4a1e      	ldr	r2, [pc, #120]	; (8001c98 <Flash_Write_Data+0xb8>)
 8001c20:	6a3b      	ldr	r3, [r7, #32]
 8001c22:	6093      	str	r3, [r2, #8]
	  EraseInitStruct.NbSectors     = (EndSector - StartSector) + 1;
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	6a3b      	ldr	r3, [r7, #32]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	4a1a      	ldr	r2, [pc, #104]	; (8001c98 <Flash_Write_Data+0xb8>)
 8001c2e:	60d3      	str	r3, [r2, #12]

	  /* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
	     you have to make sure that these data are rewritten before they are accessed during code
	     execution. If this cannot be done safely, it is recommended to flush the caches by setting the
	     DCRST and ICRST bits in the FLASH_CR register. */
	  if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 8001c30:	f107 0314 	add.w	r3, r7, #20
 8001c34:	4619      	mov	r1, r3
 8001c36:	4818      	ldr	r0, [pc, #96]	; (8001c98 <Flash_Write_Data+0xb8>)
 8001c38:	f00b f94c 	bl	800ced4 <HAL_FLASHEx_Erase>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d01f      	beq.n	8001c82 <Flash_Write_Data+0xa2>
	  {
		  return HAL_FLASH_GetError ();
 8001c42:	f00b f80b 	bl	800cc5c <HAL_FLASH_GetError>
 8001c46:	4603      	mov	r3, r0
 8001c48:	e022      	b.n	8001c90 <Flash_Write_Data+0xb0>
	  /* Program the user Flash area word by word
	    (area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/

	   while (sofar<numberofwords)
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartSectorAddress, Data[sofar]) == HAL_OK)
 8001c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	68ba      	ldr	r2, [r7, #8]
 8001c50:	4413      	add	r3, r2
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2200      	movs	r2, #0
 8001c56:	461c      	mov	r4, r3
 8001c58:	4615      	mov	r5, r2
 8001c5a:	4622      	mov	r2, r4
 8001c5c:	462b      	mov	r3, r5
 8001c5e:	68f9      	ldr	r1, [r7, #12]
 8001c60:	2002      	movs	r0, #2
 8001c62:	f00a ff75 	bl	800cb50 <HAL_FLASH_Program>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d106      	bne.n	8001c7a <Flash_Write_Data+0x9a>
	     {
	    	 StartSectorAddress += 4;  // use StartPageAddress += 2 for half word and 8 for double word
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	3304      	adds	r3, #4
 8001c70:	60fb      	str	r3, [r7, #12]
	    	 sofar++;
 8001c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c74:	3301      	adds	r3, #1
 8001c76:	627b      	str	r3, [r7, #36]	; 0x24
 8001c78:	e003      	b.n	8001c82 <Flash_Write_Data+0xa2>
	     }
	     else
	     {
	       /* Error occurred while writing data in Flash memory*/
	    	 return HAL_FLASH_GetError ();
 8001c7a:	f00a ffef 	bl	800cc5c <HAL_FLASH_GetError>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	e006      	b.n	8001c90 <Flash_Write_Data+0xb0>
	   while (sofar<numberofwords)
 8001c82:	88fb      	ldrh	r3, [r7, #6]
 8001c84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c86:	429a      	cmp	r2, r3
 8001c88:	dbdf      	blt.n	8001c4a <Flash_Write_Data+0x6a>
	     }
	   }

	  /* Lock the Flash to disable the flash control register access (recommended
	     to protect the FLASH memory against possible unwanted operation) *********/
	  HAL_FLASH_Lock();
 8001c8a:	f00a ffd7 	bl	800cc3c <HAL_FLASH_Lock>

	   return 0;
 8001c8e:	2300      	movs	r3, #0
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3728      	adds	r7, #40	; 0x28
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bdb0      	pop	{r4, r5, r7, pc}
 8001c98:	20000024 	.word	0x20000024

08001c9c <Flash_Read_Data>:


void Flash_Read_Data (uint32_t StartSectorAddress, uint32_t *RxBuf, uint16_t numberofwords)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b085      	sub	sp, #20
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	60b9      	str	r1, [r7, #8]
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	80fb      	strh	r3, [r7, #6]
	while (1)
	{

		*RxBuf = *(__IO uint32_t *)StartSectorAddress;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	601a      	str	r2, [r3, #0]
		StartSectorAddress += 4;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	3304      	adds	r3, #4
 8001cb6:	60fb      	str	r3, [r7, #12]
		RxBuf++;
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	3304      	adds	r3, #4
 8001cbc:	60bb      	str	r3, [r7, #8]
		if (!(numberofwords--)) break;
 8001cbe:	88fb      	ldrh	r3, [r7, #6]
 8001cc0:	1e5a      	subs	r2, r3, #1
 8001cc2:	80fa      	strh	r2, [r7, #6]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d000      	beq.n	8001cca <Flash_Read_Data+0x2e>
		*RxBuf = *(__IO uint32_t *)StartSectorAddress;
 8001cc8:	e7ef      	b.n	8001caa <Flash_Read_Data+0xe>
		if (!(numberofwords--)) break;
 8001cca:	bf00      	nop
	}
}
 8001ccc:	bf00      	nop
 8001cce:	3714      	adds	r7, #20
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <RingAdd>:


/* Ring Buffer functions */
// This function must be called only after disabling USART RX interrupt or inside of the RX interrupt
void RingAdd(modbusRingBuffer_t *xRingBuffer, uint8_t u8Val)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	70fb      	strb	r3, [r7, #3]

	xRingBuffer->uxBuffer[xRingBuffer->u8end] = u8Val;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8001cea:	4619      	mov	r1, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	78fa      	ldrb	r2, [r7, #3]
 8001cf0:	545a      	strb	r2, [r3, r1]
	xRingBuffer->u8end = (xRingBuffer->u8end + 1) % MAX_BUFFER;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	425a      	negs	r2, r3
 8001cfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d00:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001d04:	bf58      	it	pl
 8001d06:	4253      	negpl	r3, r2
 8001d08:	b2da      	uxtb	r2, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	if (xRingBuffer->u8available == MAX_BUFFER)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8001d16:	2b80      	cmp	r3, #128	; 0x80
 8001d18:	d113      	bne.n	8001d42 <RingAdd+0x6a>
	{
		xRingBuffer->overflow = true;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8001d28:	3301      	adds	r3, #1
 8001d2a:	425a      	negs	r2, r3
 8001d2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d30:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001d34:	bf58      	it	pl
 8001d36:	4253      	negpl	r3, r2
 8001d38:	b2da      	uxtb	r2, r3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	{
		xRingBuffer->overflow = false;
		xRingBuffer->u8available++;
	}

}
 8001d40:	e00b      	b.n	8001d5a <RingAdd+0x82>
		xRingBuffer->overflow = false;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2200      	movs	r2, #0
 8001d46:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
		xRingBuffer->u8available++;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8001d50:	3301      	adds	r3, #1
 8001d52:	b2da      	uxtb	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
}
 8001d5a:	bf00      	nop
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr

08001d66 <RingGetAllBytes>:

// This function must be called only after disabling USART RX interrupt
uint8_t RingGetAllBytes(modbusRingBuffer_t *xRingBuffer, uint8_t *buffer)
{
 8001d66:	b580      	push	{r7, lr}
 8001d68:	b082      	sub	sp, #8
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
 8001d6e:	6039      	str	r1, [r7, #0]
	return RingGetNBytes(xRingBuffer, buffer, xRingBuffer->u8available);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8001d76:	461a      	mov	r2, r3
 8001d78:	6839      	ldr	r1, [r7, #0]
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f000 f805 	bl	8001d8a <RingGetNBytes>
 8001d80:	4603      	mov	r3, r0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <RingGetNBytes>:

// This function must be called only after disabling USART RX interrupt
uint8_t RingGetNBytes(modbusRingBuffer_t *xRingBuffer, uint8_t *buffer, uint8_t uNumber)
{
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b086      	sub	sp, #24
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	60f8      	str	r0, [r7, #12]
 8001d92:	60b9      	str	r1, [r7, #8]
 8001d94:	4613      	mov	r3, r2
 8001d96:	71fb      	strb	r3, [r7, #7]
	uint8_t uCounter;
	if(xRingBuffer->u8available == 0  || uNumber == 0 ) return 0;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d002      	beq.n	8001da8 <RingGetNBytes+0x1e>
 8001da2:	79fb      	ldrb	r3, [r7, #7]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d101      	bne.n	8001dac <RingGetNBytes+0x22>
 8001da8:	2300      	movs	r3, #0
 8001daa:	e03e      	b.n	8001e2a <RingGetNBytes+0xa0>
	if(uNumber > MAX_BUFFER) return 0;
 8001dac:	79fb      	ldrb	r3, [r7, #7]
 8001dae:	2b80      	cmp	r3, #128	; 0x80
 8001db0:	d901      	bls.n	8001db6 <RingGetNBytes+0x2c>
 8001db2:	2300      	movs	r3, #0
 8001db4:	e039      	b.n	8001e2a <RingGetNBytes+0xa0>

	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 8001db6:	2300      	movs	r3, #0
 8001db8:	75fb      	strb	r3, [r7, #23]
 8001dba:	e01b      	b.n	8001df4 <RingGetNBytes+0x6a>
	{
		buffer[uCounter] = xRingBuffer->uxBuffer[xRingBuffer->u8start];
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	7dfb      	ldrb	r3, [r7, #23]
 8001dc6:	68ba      	ldr	r2, [r7, #8]
 8001dc8:	4413      	add	r3, r2
 8001dca:	68fa      	ldr	r2, [r7, #12]
 8001dcc:	5c52      	ldrb	r2, [r2, r1]
 8001dce:	701a      	strb	r2, [r3, #0]
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	425a      	negs	r2, r3
 8001dda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001dde:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001de2:	bf58      	it	pl
 8001de4:	4253      	negpl	r3, r2
 8001de6:	b2da      	uxtb	r2, r3
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 8001dee:	7dfb      	ldrb	r3, [r7, #23]
 8001df0:	3301      	adds	r3, #1
 8001df2:	75fb      	strb	r3, [r7, #23]
 8001df4:	7dfa      	ldrb	r2, [r7, #23]
 8001df6:	79fb      	ldrb	r3, [r7, #7]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d205      	bcs.n	8001e08 <RingGetNBytes+0x7e>
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8001e02:	7dfa      	ldrb	r2, [r7, #23]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d3d9      	bcc.n	8001dbc <RingGetNBytes+0x32>
	}
	xRingBuffer->u8available = xRingBuffer->u8available - uCounter;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	f893 2082 	ldrb.w	r2, [r3, #130]	; 0x82
 8001e0e:	7dfb      	ldrb	r3, [r7, #23]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	b2da      	uxtb	r2, r3
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
	xRingBuffer->overflow = false;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
	RingClear(xRingBuffer);
 8001e22:	68f8      	ldr	r0, [r7, #12]
 8001e24:	f000 f805 	bl	8001e32 <RingClear>

	return uCounter;
 8001e28:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3718      	adds	r7, #24
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <RingClear>:
{
return xRingBuffer->u8available;
}

void RingClear(modbusRingBuffer_t *xRingBuffer)
{
 8001e32:	b480      	push	{r7}
 8001e34:	b083      	sub	sp, #12
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
xRingBuffer->u8start = 0;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
xRingBuffer->u8end = 0;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
xRingBuffer->u8available = 0;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
xRingBuffer->overflow = false;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
}
 8001e5a:	bf00      	nop
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
	...

08001e68 <ModbusInit>:
 * of the modbus handler
 *
 * @param modH   modbus handler
 */
void ModbusInit(modbusHandler_t * modH)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af02      	add	r7, sp, #8
 8001e6e:	6078      	str	r0, [r7, #4]

  if (numberHandlers < MAX_M_HANDLERS)
 8001e70:	4b42      	ldr	r3, [pc, #264]	; (8001f7c <ModbusInit+0x114>)
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d87d      	bhi.n	8001f74 <ModbusInit+0x10c>
  {

	  //Initialize the ring buffer

	  RingClear(&modH->xBufferRX);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	33bc      	adds	r3, #188	; 0xbc
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7ff ffd8 	bl	8001e32 <RingClear>

	  if(modH->uModbusType == MB_SLAVE)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	2b03      	cmp	r3, #3
 8001e88:	d109      	bne.n	8001e9e <ModbusInit+0x36>
		  }
		  else{
			  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusSlave, modH, &myTaskModbusA_attributes);
		  }
#else
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusSlave, modH, &myTaskModbusA_attributes);
 8001e8a:	4a3d      	ldr	r2, [pc, #244]	; (8001f80 <ModbusInit+0x118>)
 8001e8c:	6879      	ldr	r1, [r7, #4]
 8001e8e:	483d      	ldr	r0, [pc, #244]	; (8001f84 <ModbusInit+0x11c>)
 8001e90:	f00f fee5 	bl	8011c5e <osThreadNew>
 8001e94:	4602      	mov	r2, r0
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 8001e9c:	e033      	b.n	8001f06 <ModbusInit+0x9e>
#endif


	  }
	  else if (modH->uModbusType == MB_MASTER)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	2b04      	cmp	r3, #4
 8001ea4:	d12e      	bne.n	8001f04 <ModbusInit+0x9c>
		  else
		  {
		     modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusMaster, modH, &myTaskModbusB_attributes);
		  }
#else
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusMaster, modH, &myTaskModbusB_attributes);
 8001ea6:	4a38      	ldr	r2, [pc, #224]	; (8001f88 <ModbusInit+0x120>)
 8001ea8:	6879      	ldr	r1, [r7, #4]
 8001eaa:	4838      	ldr	r0, [pc, #224]	; (8001f8c <ModbusInit+0x124>)
 8001eac:	f00f fed7 	bl	8011c5e <osThreadNew>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif



		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
				  	  	modH->u16timeOut ,     		// The timer period in ticks.
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	; 0xa2
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 8001ebe:	4619      	mov	r1, r3
						pdFALSE,         // The timers will auto-reload themselves when they expire.
						( void * )modH->xTimerTimeout,     // Assign each timer a unique id equal to its array index.
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 8001ec6:	4a32      	ldr	r2, [pc, #200]	; (8001f90 <ModbusInit+0x128>)
 8001ec8:	9200      	str	r2, [sp, #0]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	4831      	ldr	r0, [pc, #196]	; (8001f94 <ModbusInit+0x12c>)
 8001ece:	f012 fecd 	bl	8014c6c <xTimerCreate>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
						(TimerCallbackFunction_t) vTimerCallbackTimeout  // Each timer calls the same callback when it expires.
                  	  	);

		  if(modH->xTimerTimeout == NULL)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d100      	bne.n	8001ee6 <ModbusInit+0x7e>
		  {
			  while(1); //error creating timer, check heap and stack size
 8001ee4:	e7fe      	b.n	8001ee4 <ModbusInit+0x7c>
		  }


		  modH->QueueTelegramHandle = osMessageQueueNew (MAX_TELEGRAMS, sizeof(modbus_t), &QueueTelegram_attributes);
 8001ee6:	4a2c      	ldr	r2, [pc, #176]	; (8001f98 <ModbusInit+0x130>)
 8001ee8:	2110      	movs	r1, #16
 8001eea:	2002      	movs	r0, #2
 8001eec:	f010 f99e 	bl	801222c <osMessageQueueNew>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

		  if(modH->QueueTelegramHandle == NULL)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d101      	bne.n	8001f06 <ModbusInit+0x9e>
		  {
			  while(1); //error creating queue for telegrams, check heap and stack size
 8001f02:	e7fe      	b.n	8001f02 <ModbusInit+0x9a>
		  }

	  }
	  else
	  {
		  while(1); //Error Modbus type not supported choose a valid Type
 8001f04:	e7fe      	b.n	8001f04 <ModbusInit+0x9c>
	  }

	  if  (modH->myTaskModbusAHandle == NULL)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d100      	bne.n	8001f12 <ModbusInit+0xaa>
	  {
		  while(1); //Error creating Modbus task, check heap and stack size
 8001f10:	e7fe      	b.n	8001f10 <ModbusInit+0xa8>


	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
		  	  	  	  	  	  	  	T35 ,     // The timer period in ticks.
                                    pdFALSE,         // The timers will auto-reload themselves when they expire.
									( void * )modH->xTimerT35,     // Assign each timer a unique id equal to its array index.
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
 8001f18:	4a20      	ldr	r2, [pc, #128]	; (8001f9c <ModbusInit+0x134>)
 8001f1a:	9200      	str	r2, [sp, #0]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	2102      	movs	r1, #2
 8001f20:	481f      	ldr	r0, [pc, #124]	; (8001fa0 <ModbusInit+0x138>)
 8001f22:	f012 fea3 	bl	8014c6c <xTimerCreate>
 8001f26:	4602      	mov	r2, r0
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
                                    (TimerCallbackFunction_t) vTimerCallbackT35     // Each timer calls the same callback when it expires.
                                    );
	  if (modH->xTimerT35 == NULL)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d100      	bne.n	8001f3a <ModbusInit+0xd2>
	  {
		  while(1); //Error creating the timer, check heap and stack size
 8001f38:	e7fe      	b.n	8001f38 <ModbusInit+0xd0>
	  }


	  modH->ModBusSphrHandle = osSemaphoreNew(1, 1, &ModBusSphr_attributes);
 8001f3a:	4a1a      	ldr	r2, [pc, #104]	; (8001fa4 <ModbusInit+0x13c>)
 8001f3c:	2101      	movs	r1, #1
 8001f3e:	2001      	movs	r0, #1
 8001f40:	f010 f854 	bl	8011fec <osSemaphoreNew>
 8001f44:	4602      	mov	r2, r0
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

	  if(modH->ModBusSphrHandle == NULL)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d100      	bne.n	8001f58 <ModbusInit+0xf0>
	  {
		  while(1); //Error creating the semaphore, check heap and stack size
 8001f56:	e7fe      	b.n	8001f56 <ModbusInit+0xee>
	  }

	  mHandlers[numberHandlers] = modH;
 8001f58:	4b08      	ldr	r3, [pc, #32]	; (8001f7c <ModbusInit+0x114>)
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	4a12      	ldr	r2, [pc, #72]	; (8001fa8 <ModbusInit+0x140>)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	  numberHandlers++;
 8001f66:	4b05      	ldr	r3, [pc, #20]	; (8001f7c <ModbusInit+0x114>)
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	b2da      	uxtb	r2, r3
 8001f6e:	4b03      	ldr	r3, [pc, #12]	; (8001f7c <ModbusInit+0x114>)
 8001f70:	701a      	strb	r2, [r3, #0]
  else
  {
	  while(1); //error no more Modbus handlers supported
  }

}
 8001f72:	e000      	b.n	8001f76 <ModbusInit+0x10e>
	  while(1); //error no more Modbus handlers supported
 8001f74:	e7fe      	b.n	8001f74 <ModbusInit+0x10c>
}
 8001f76:	3708      	adds	r7, #8
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	20000038 	.word	0x20000038
 8001f80:	0802f698 	.word	0x0802f698
 8001f84:	080021c5 	.word	0x080021c5
 8001f88:	0802f6bc 	.word	0x0802f6bc
 8001f8c:	08002689 	.word	0x08002689
 8001f90:	08002169 	.word	0x08002169
 8001f94:	0802ab4c 	.word	0x0802ab4c
 8001f98:	0802f680 	.word	0x0802f680
 8001f9c:	080020e5 	.word	0x080020e5
 8001fa0:	0802ab5c 	.word	0x0802ab5c
 8001fa4:	0802f6e0 	.word	0x0802f6e0
 8001fa8:	20013e38 	.word	0x20013e38

08001fac <ModbusStart>:
 * ModbusRtu's own begin() functions.)
 *
 * @ingroup setup
 */
void ModbusStart(modbusHandler_t * modH)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]

	if(modH->xTypeHW != USART_HW && modH->xTypeHW != TCP_HW && modH->xTypeHW != USB_CDC_HW  && modH->xTypeHW != USART_HW_DMA )
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d00f      	beq.n	8001fde <ModbusStart+0x32>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8001fc4:	2b03      	cmp	r3, #3
 8001fc6:	d00a      	beq.n	8001fde <ModbusStart+0x32>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d005      	beq.n	8001fde <ModbusStart+0x32>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8001fd8:	2b04      	cmp	r3, #4
 8001fda:	d000      	beq.n	8001fde <ModbusStart+0x32>
	{

		while(1); //ERROR select the type of hardware
 8001fdc:	e7fe      	b.n	8001fdc <ModbusStart+0x30>
		while(1); //ERROR To use USART_HW_DMA you need to enable it in the ModbusConfig.h file
	}



	if (modH->xTypeHW == USART_HW || modH->xTypeHW ==  USART_HW_DMA )
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d004      	beq.n	8001ff2 <ModbusStart+0x46>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8001fee:	2b04      	cmp	r3, #4
 8001ff0:	d15a      	bne.n	80020a8 <ModbusStart+0xfc>
	{

	      if (modH->EN_Port != NULL )
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d007      	beq.n	800200a <ModbusStart+0x5e>
          {
              // return RS485 transceiver to transmit mode
	    	  HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	68d8      	ldr	r0, [r3, #12]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	8a1b      	ldrh	r3, [r3, #16]
 8002002:	2200      	movs	r2, #0
 8002004:	4619      	mov	r1, r3
 8002006:	f00b fa3b 	bl	800d480 <HAL_GPIO_WritePin>
          }

          if (modH->uModbusType == MB_SLAVE &&  modH->u16regs == NULL )
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	2b03      	cmp	r3, #3
 8002010:	d105      	bne.n	800201e <ModbusStart+0x72>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002018:	2b00      	cmp	r3, #0
 800201a:	d100      	bne.n	800201e <ModbusStart+0x72>
          {
          	while(1); //ERROR define the DATA pointer shared through Modbus
 800201c:	e7fe      	b.n	800201c <ModbusStart+0x70>
          }

          //check that port is initialized
          while (HAL_UART_GetState(modH->port) != HAL_UART_STATE_READY)
 800201e:	bf00      	nop
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	4618      	mov	r0, r3
 8002026:	f00e fa65 	bl	80104f4 <HAL_UART_GetState>
 800202a:	4603      	mov	r3, r0
 800202c:	2b20      	cmp	r3, #32
 800202e:	d1f7      	bne.n	8002020 <ModbusStart+0x74>
          {

          }

#if ENABLE_USART_DMA ==1
          if( modH->xTypeHW == USART_HW_DMA )
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8002036:	2b04      	cmp	r3, #4
 8002038:	d118      	bne.n	800206c <ModbusStart+0xc0>
          {


        	  if(HAL_UARTEx_ReceiveToIdle_DMA(modH->port, modH->xBufferRX.uxBuffer, MAX_BUFFER ) != HAL_OK)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6858      	ldr	r0, [r3, #4]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	33bc      	adds	r3, #188	; 0xbc
 8002042:	2280      	movs	r2, #128	; 0x80
 8002044:	4619      	mov	r1, r3
 8002046:	f00d fe2a 	bl	800fc9e <HAL_UARTEx_ReceiveToIdle_DMA>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d000      	beq.n	8002052 <ModbusStart+0xa6>
        	   {
        	         while(1)
 8002050:	e7fe      	b.n	8002050 <ModbusStart+0xa4>
        	         {
        	                    	  //error in your initialization code
        	         }
        	   }
        	  __HAL_DMA_DISABLE_IT(modH->port->hdmarx, DMA_IT_HT); // we don't need half-transfer interrupt
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f022 0208 	bic.w	r2, r2, #8
 8002068:	601a      	str	r2, [r3, #0]
 800206a:	e00b      	b.n	8002084 <ModbusStart+0xd8>

          }
          else{

        	  // Receive data from serial port for Modbus using interrupt
        	  if(HAL_UART_Receive_IT(modH->port, &modH->dataRX, 1) != HAL_OK)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6858      	ldr	r0, [r3, #4]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	33a6      	adds	r3, #166	; 0xa6
 8002074:	2201      	movs	r2, #1
 8002076:	4619      	mov	r1, r3
 8002078:	f00d fce4 	bl	800fa44 <HAL_UART_Receive_IT>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d000      	beq.n	8002084 <ModbusStart+0xd8>
        	  {
        	           while(1)
 8002082:	e7fe      	b.n	8002082 <ModbusStart+0xd6>
                 }
          }

#endif

          if(modH->u8id !=0 && modH->uModbusType == MB_MASTER )
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	7a1b      	ldrb	r3, [r3, #8]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d004      	beq.n	8002096 <ModbusStart+0xea>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	2b04      	cmp	r3, #4
 8002092:	d100      	bne.n	8002096 <ModbusStart+0xea>
          {
        	  while(1)
 8002094:	e7fe      	b.n	8002094 <ModbusStart+0xe8>
        	     	  //error Master ID must be zero
        	  }

          }

          if(modH->u8id ==0 && modH->uModbusType == MB_SLAVE )
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	7a1b      	ldrb	r3, [r3, #8]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d104      	bne.n	80020a8 <ModbusStart+0xfc>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	2b03      	cmp	r3, #3
 80020a4:	d100      	bne.n	80020a8 <ModbusStart+0xfc>
          {
             	  while(1)
 80020a6:	e7fe      	b.n	80020a6 <ModbusStart+0xfa>


#endif


    modH->u8lastRec = modH->u8BufferSize = 0;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2200      	movs	r2, #0
 80020ac:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f893 2093 	ldrb.w	r2, [r3, #147]	; 0x93
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
    modH->u16InCnt = modH->u16OutCnt = modH->u16errCnt = 0;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f8b3 20a0 	ldrh.w	r2, [r3, #160]	; 0xa0
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f8b3 209e 	ldrh.w	r2, [r3, #158]	; 0x9e
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

}
 80020dc:	bf00      	nop
 80020de:	3708      	adds	r7, #8
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <vTimerCallbackT35>:
}
#endif


void vTimerCallbackT35(TimerHandle_t *pxTimer)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b086      	sub	sp, #24
 80020e8:	af02      	add	r7, sp, #8
 80020ea:	6078      	str	r0, [r7, #4]
	//Notify that a stream has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 80020ec:	2300      	movs	r3, #0
 80020ee:	60fb      	str	r3, [r7, #12]
 80020f0:	e02a      	b.n	8002148 <vTimerCallbackT35+0x64>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerT35 ==  pxTimer ){
 80020f2:	4a1b      	ldr	r2, [pc, #108]	; (8002160 <vTimerCallbackT35+0x7c>)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	429a      	cmp	r2, r3
 8002102:	d11e      	bne.n	8002142 <vTimerCallbackT35+0x5e>
			if(mHandlers[i]->uModbusType == MB_MASTER)
 8002104:	4a16      	ldr	r2, [pc, #88]	; (8002160 <vTimerCallbackT35+0x7c>)
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	2b04      	cmp	r3, #4
 8002110:	d10c      	bne.n	800212c <vTimerCallbackT35+0x48>
			{
				xTimerStop(mHandlers[i]->xTimerTimeout,0);
 8002112:	4a13      	ldr	r2, [pc, #76]	; (8002160 <vTimerCallbackT35+0x7c>)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800211a:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
 800211e:	2300      	movs	r3, #0
 8002120:	9300      	str	r3, [sp, #0]
 8002122:	2300      	movs	r3, #0
 8002124:	2200      	movs	r2, #0
 8002126:	2103      	movs	r1, #3
 8002128:	f012 fdfc 	bl	8014d24 <xTimerGenericCommand>
			}
			xTaskNotify(mHandlers[i]->myTaskModbusAHandle, 0, eSetValueWithOverwrite);
 800212c:	4a0c      	ldr	r2, [pc, #48]	; (8002160 <vTimerCallbackT35+0x7c>)
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002134:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
 8002138:	2300      	movs	r3, #0
 800213a:	2203      	movs	r2, #3
 800213c:	2100      	movs	r1, #0
 800213e:	f012 fb65 	bl	801480c <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	3301      	adds	r3, #1
 8002146:	60fb      	str	r3, [r7, #12]
 8002148:	4b06      	ldr	r3, [pc, #24]	; (8002164 <vTimerCallbackT35+0x80>)
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	461a      	mov	r2, r3
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	4293      	cmp	r3, r2
 8002152:	dbce      	blt.n	80020f2 <vTimerCallbackT35+0xe>
		}

	}
}
 8002154:	bf00      	nop
 8002156:	bf00      	nop
 8002158:	3710      	adds	r7, #16
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	20013e38 	.word	0x20013e38
 8002164:	20000038 	.word	0x20000038

08002168 <vTimerCallbackTimeout>:

void vTimerCallbackTimeout(TimerHandle_t *pxTimer)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
	//Notify that a stream has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 8002170:	2300      	movs	r3, #0
 8002172:	60fb      	str	r3, [r7, #12]
 8002174:	e017      	b.n	80021a6 <vTimerCallbackTimeout+0x3e>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerTimeout ==  pxTimer ){
 8002176:	4a11      	ldr	r2, [pc, #68]	; (80021bc <vTimerCallbackTimeout+0x54>)
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800217e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	429a      	cmp	r2, r3
 8002186:	d10b      	bne.n	80021a0 <vTimerCallbackTimeout+0x38>
				xTaskNotify(mHandlers[i]->myTaskModbusAHandle, ERR_TIME_OUT, eSetValueWithOverwrite);
 8002188:	4a0c      	ldr	r2, [pc, #48]	; (80021bc <vTimerCallbackTimeout+0x54>)
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002190:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
 8002194:	2300      	movs	r3, #0
 8002196:	2203      	movs	r2, #3
 8002198:	f06f 0107 	mvn.w	r1, #7
 800219c:	f012 fb36 	bl	801480c <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	3301      	adds	r3, #1
 80021a4:	60fb      	str	r3, [r7, #12]
 80021a6:	4b06      	ldr	r3, [pc, #24]	; (80021c0 <vTimerCallbackTimeout+0x58>)
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	461a      	mov	r2, r3
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	4293      	cmp	r3, r2
 80021b0:	dbe1      	blt.n	8002176 <vTimerCallbackTimeout+0xe>
		}

	}

}
 80021b2:	bf00      	nop
 80021b4:	bf00      	nop
 80021b6:	3710      	adds	r7, #16
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	20013e38 	.word	0x20013e38
 80021c0:	20000038 	.word	0x20000038

080021c4 <StartTaskModbusSlave>:
#endif



void StartTaskModbusSlave(void *argument)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]

  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	60fb      	str	r3, [r7, #12]
#endif

  for(;;)
  {

	modH->i8lastError = 0;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2200      	movs	r2, #0
 80021d4:	749a      	strb	r2, [r3, #18]

	  }
#endif


   if(modH->xTypeHW == USART_HW || modH->xTypeHW == USART_HW_DMA)
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d004      	beq.n	80021ea <StartTaskModbusSlave+0x26>
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 80021e6:	2b04      	cmp	r3, #4
 80021e8:	d117      	bne.n	800221a <StartTaskModbusSlave+0x56>
   {

	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY); /* Block until a Modbus Frame arrives */
 80021ea:	f04f 31ff 	mov.w	r1, #4294967295
 80021ee:	2001      	movs	r0, #1
 80021f0:	f012 fac4 	bl	801477c <ulTaskNotifyTake>

	  if (getRxBuffer(modH) == ERR_BUFF_OVERFLOW)
 80021f4:	68f8      	ldr	r0, [r7, #12]
 80021f6:	f000 fc15 	bl	8002a24 <getRxBuffer>
 80021fa:	4603      	mov	r3, r0
 80021fc:	f113 0f03 	cmn.w	r3, #3
 8002200:	d10b      	bne.n	800221a <StartTaskModbusSlave+0x56>
	  {
	      modH->i8lastError = ERR_BUFF_OVERFLOW;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	22fd      	movs	r2, #253	; 0xfd
 8002206:	749a      	strb	r2, [r3, #18]
	   	  modH->u16errCnt++;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 800220e:	3301      	adds	r3, #1
 8002210:	b29a      	uxth	r2, r3
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
		  continue;
 8002218:	e0a1      	b.n	800235e <StartTaskModbusSlave+0x19a>
	  }

   }

   if (modH->u8BufferSize < 7)
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002220:	2b06      	cmp	r3, #6
 8002222:	d80b      	bhi.n	800223c <StartTaskModbusSlave+0x78>
   {
      //The size of the frame is invalid
      modH->i8lastError = ERR_BAD_SIZE;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	22fa      	movs	r2, #250	; 0xfa
 8002228:	749a      	strb	r2, [r3, #18]
      modH->u16errCnt++;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8002230:	3301      	adds	r3, #1
 8002232:	b29a      	uxth	r2, r3
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0

	  continue;
 800223a:	e090      	b.n	800235e <StartTaskModbusSlave+0x19a>
    }


   // check slave id
    if ( modH->u8Buffer[ID] !=  modH->u8id)
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	7cda      	ldrb	r2, [r3, #19]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	7a1b      	ldrb	r3, [r3, #8]
 8002244:	429a      	cmp	r2, r3
 8002246:	f040 8089 	bne.w	800235c <StartTaskModbusSlave+0x198>
    	}
#endif
	 }

	  // validate message: CRC, FCT, address and size
    uint8_t u8exception = validateRequest(modH);
 800224a:	68f8      	ldr	r0, [r7, #12]
 800224c:	f000 fc34 	bl	8002ab8 <validateRequest>
 8002250:	4603      	mov	r3, r0
 8002252:	72fb      	strb	r3, [r7, #11]
	if (u8exception > 0)
 8002254:	7afb      	ldrb	r3, [r7, #11]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d00c      	beq.n	8002274 <StartTaskModbusSlave+0xb0>
	{
	    if (u8exception != ERR_TIME_OUT)
		{
		    buildException( u8exception, modH);
 800225a:	7afb      	ldrb	r3, [r7, #11]
 800225c:	68f9      	ldr	r1, [r7, #12]
 800225e:	4618      	mov	r0, r3
 8002260:	f000 fdce 	bl	8002e00 <buildException>
			sendTxBuffer(modH);
 8002264:	68f8      	ldr	r0, [r7, #12]
 8002266:	f000 fdea 	bl	8002e3e <sendTxBuffer>
		}
		modH->i8lastError = u8exception;
 800226a:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	749a      	strb	r2, [r3, #18]
		//return u8exception

		continue;
 8002272:	e074      	b.n	800235e <StartTaskModbusSlave+0x19a>
	 }

	 modH->i8lastError = 0;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2200      	movs	r2, #0
 8002278:	749a      	strb	r2, [r3, #18]
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002280:	f04f 31ff 	mov.w	r1, #4294967295
 8002284:	4618      	mov	r0, r3
 8002286:	f010 ff4f 	bl	8013128 <xQueueSemaphoreTake>

	 // process message
	 switch(modH->u8Buffer[ FUNC ] )
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	7d1b      	ldrb	r3, [r3, #20]
 800228e:	3b01      	subs	r3, #1
 8002290:	2b0f      	cmp	r3, #15
 8002292:	d859      	bhi.n	8002348 <StartTaskModbusSlave+0x184>
 8002294:	a201      	add	r2, pc, #4	; (adr r2, 800229c <StartTaskModbusSlave+0xd8>)
 8002296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800229a:	bf00      	nop
 800229c:	080022dd 	.word	0x080022dd
 80022a0:	080022dd 	.word	0x080022dd
 80022a4:	080022ef 	.word	0x080022ef
 80022a8:	080022ef 	.word	0x080022ef
 80022ac:	08002301 	.word	0x08002301
 80022b0:	08002313 	.word	0x08002313
 80022b4:	08002349 	.word	0x08002349
 80022b8:	08002349 	.word	0x08002349
 80022bc:	08002349 	.word	0x08002349
 80022c0:	08002349 	.word	0x08002349
 80022c4:	08002349 	.word	0x08002349
 80022c8:	08002349 	.word	0x08002349
 80022cc:	08002349 	.word	0x08002349
 80022d0:	08002349 	.word	0x08002349
 80022d4:	08002325 	.word	0x08002325
 80022d8:	08002337 	.word	0x08002337
	 {
			case MB_FC_READ_COILS:
			case MB_FC_READ_DISCRETE_INPUT:
				modH->i8state = process_FC1(modH);
 80022dc:	68f8      	ldr	r0, [r7, #12]
 80022de:	f000 fe50 	bl	8002f82 <process_FC1>
 80022e2:	4603      	mov	r3, r0
 80022e4:	461a      	mov	r2, r3
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 80022ec:	e02d      	b.n	800234a <StartTaskModbusSlave+0x186>
			case MB_FC_READ_INPUT_REGISTER:
			case MB_FC_READ_REGISTERS :
				modH->i8state = process_FC3(modH);
 80022ee:	68f8      	ldr	r0, [r7, #12]
 80022f0:	f000 fefc 	bl	80030ec <process_FC3>
 80022f4:	4603      	mov	r3, r0
 80022f6:	461a      	mov	r2, r3
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 80022fe:	e024      	b.n	800234a <StartTaskModbusSlave+0x186>
			case MB_FC_WRITE_COIL:
				modH->i8state = process_FC5(modH);
 8002300:	68f8      	ldr	r0, [r7, #12]
 8002302:	f000 ff5e 	bl	80031c2 <process_FC5>
 8002306:	4603      	mov	r3, r0
 8002308:	461a      	mov	r2, r3
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 8002310:	e01b      	b.n	800234a <StartTaskModbusSlave+0x186>
			case MB_FC_WRITE_REGISTER :
				modH->i8state = process_FC6(modH);
 8002312:	68f8      	ldr	r0, [r7, #12]
 8002314:	f000 ffae 	bl	8003274 <process_FC6>
 8002318:	4603      	mov	r3, r0
 800231a:	461a      	mov	r2, r3
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 8002322:	e012      	b.n	800234a <StartTaskModbusSlave+0x186>
			case MB_FC_WRITE_MULTIPLE_COILS:
				modH->i8state = process_FC15(modH);
 8002324:	68f8      	ldr	r0, [r7, #12]
 8002326:	f000 ffd7 	bl	80032d8 <process_FC15>
 800232a:	4603      	mov	r3, r0
 800232c:	461a      	mov	r2, r3
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 8002334:	e009      	b.n	800234a <StartTaskModbusSlave+0x186>
			case MB_FC_WRITE_MULTIPLE_REGISTERS :
				modH->i8state = process_FC16(modH);
 8002336:	68f8      	ldr	r0, [r7, #12]
 8002338:	f001 f85c 	bl	80033f4 <process_FC16>
 800233c:	4603      	mov	r3, r0
 800233e:	461a      	mov	r2, r3
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 8002346:	e000      	b.n	800234a <StartTaskModbusSlave+0x186>
			default:
				break;
 8002348:	bf00      	nop
	 }


	 xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 8002350:	2300      	movs	r3, #0
 8002352:	2200      	movs	r2, #0
 8002354:	2100      	movs	r1, #0
 8002356:	f010 fbe1 	bl	8012b1c <xQueueGenericSend>

	 continue;
 800235a:	e000      	b.n	800235e <StartTaskModbusSlave+0x19a>
    	continue; // continue this is not for us
 800235c:	bf00      	nop
  {
 800235e:	e737      	b.n	80021d0 <StartTaskModbusSlave+0xc>

08002360 <ModbusQuery>:
}



void ModbusQuery(modbusHandler_t * modH, modbus_t telegram )
{
 8002360:	b084      	sub	sp, #16
 8002362:	b580      	push	{r7, lr}
 8002364:	b082      	sub	sp, #8
 8002366:	af00      	add	r7, sp, #0
 8002368:	6078      	str	r0, [r7, #4]
 800236a:	f107 0014 	add.w	r0, r7, #20
 800236e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	//Add the telegram to the TX tail Queue of Modbus
	if (modH->uModbusType == MB_MASTER)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	2b04      	cmp	r3, #4
 8002378:	d10d      	bne.n	8002396 <ModbusQuery+0x36>
	{
	telegram.u32CurrentTask = (uint32_t *) osThreadGetId();
 800237a:	f00f fd03 	bl	8011d84 <osThreadGetId>
 800237e:	4603      	mov	r3, r0
 8002380:	623b      	str	r3, [r7, #32]
	xQueueSendToBack(modH->QueueTelegramHandle, &telegram, 0);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f8d3 00a8 	ldr.w	r0, [r3, #168]	; 0xa8
 8002388:	f107 0114 	add.w	r1, r7, #20
 800238c:	2300      	movs	r3, #0
 800238e:	2200      	movs	r2, #0
 8002390:	f010 fbc4 	bl	8012b1c <xQueueGenericSend>
	}
	else
		printf("error a slave cannot send queries as a master\n");
//		while(1);// error a slave cannot send queries as a master

}
 8002394:	e002      	b.n	800239c <ModbusQuery+0x3c>
		printf("error a slave cannot send queries as a master\n");
 8002396:	4805      	ldr	r0, [pc, #20]	; (80023ac <ModbusQuery+0x4c>)
 8002398:	f024 fb1e 	bl	80269d8 <puts>
}
 800239c:	bf00      	nop
 800239e:	3708      	adds	r7, #8
 80023a0:	46bd      	mov	sp, r7
 80023a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80023a6:	b004      	add	sp, #16
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	0802ab68 	.word	0x0802ab68

080023b0 <SendQuery>:
 * @param modH  modbus handler
 * @param modbus_t  modbus telegram structure (id, fct, ...)
 * @ingroup loop
 */
int8_t SendQuery(modbusHandler_t *modH ,  modbus_t telegram )
{
 80023b0:	b084      	sub	sp, #16
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b084      	sub	sp, #16
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	6078      	str	r0, [r7, #4]
 80023ba:	f107 001c 	add.w	r0, r7, #28
 80023be:	e880 000e 	stmia.w	r0, {r1, r2, r3}


	uint8_t u8regsno, u8bytesno;
	uint8_t  error = 0;
 80023c2:	2300      	movs	r3, #0
 80023c4:	73bb      	strb	r3, [r7, #14]
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80023cc:	f04f 31ff 	mov.w	r1, #4294967295
 80023d0:	4618      	mov	r0, r3
 80023d2:	f010 fea9 	bl	8013128 <xQueueSemaphoreTake>

	if (modH->u8id!=0) error = ERR_NOT_MASTER;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	7a1b      	ldrb	r3, [r3, #8]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d001      	beq.n	80023e2 <SendQuery+0x32>
 80023de:	23ff      	movs	r3, #255	; 0xff
 80023e0:	73bb      	strb	r3, [r7, #14]
	if (modH->i8state != COM_IDLE) error = ERR_POLLING ;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f993 30a7 	ldrsb.w	r3, [r3, #167]	; 0xa7
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d001      	beq.n	80023f0 <SendQuery+0x40>
 80023ec:	23fe      	movs	r3, #254	; 0xfe
 80023ee:	73bb      	strb	r3, [r7, #14]
	if ((telegram.u8id==0) || (telegram.u8id>247)) error = ERR_BAD_SLAVE_ID;
 80023f0:	7f3b      	ldrb	r3, [r7, #28]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d002      	beq.n	80023fc <SendQuery+0x4c>
 80023f6:	7f3b      	ldrb	r3, [r7, #28]
 80023f8:	2bf7      	cmp	r3, #247	; 0xf7
 80023fa:	d901      	bls.n	8002400 <SendQuery+0x50>
 80023fc:	23f7      	movs	r3, #247	; 0xf7
 80023fe:	73bb      	strb	r3, [r7, #14]


	if(error)
 8002400:	7bbb      	ldrb	r3, [r7, #14]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d00e      	beq.n	8002424 <SendQuery+0x74>
	{
		 modH->i8lastError = error;
 8002406:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	749a      	strb	r2, [r3, #18]
		 xSemaphoreGive(modH->ModBusSphrHandle);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 8002414:	2300      	movs	r3, #0
 8002416:	2200      	movs	r2, #0
 8002418:	2100      	movs	r1, #0
 800241a:	f010 fb7f 	bl	8012b1c <xQueueGenericSend>
		 return error;
 800241e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002422:	e129      	b.n	8002678 <SendQuery+0x2c8>
	}


	modH->u16regs = telegram.u16reg;
 8002424:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

	// telegram header
	modH->u8Buffer[ ID ]         = telegram.u8id;
 800242c:	7f3a      	ldrb	r2, [r7, #28]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	74da      	strb	r2, [r3, #19]
	modH->u8Buffer[ FUNC ]       = telegram.u8fct;
 8002432:	7f7a      	ldrb	r2, [r7, #29]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	751a      	strb	r2, [r3, #20]
	modH->u8Buffer[ ADD_HI ]     = highByte(telegram.u16RegAdd );
 8002438:	8bfb      	ldrh	r3, [r7, #30]
 800243a:	0a1b      	lsrs	r3, r3, #8
 800243c:	b29b      	uxth	r3, r3
 800243e:	b2da      	uxtb	r2, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	755a      	strb	r2, [r3, #21]
	modH->u8Buffer[ ADD_LO ]     = lowByte( telegram.u16RegAdd );
 8002444:	8bfb      	ldrh	r3, [r7, #30]
 8002446:	b2da      	uxtb	r2, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	759a      	strb	r2, [r3, #22]

	switch( telegram.u8fct )
 800244c:	7f7b      	ldrb	r3, [r7, #29]
 800244e:	3b01      	subs	r3, #1
 8002450:	2b0f      	cmp	r3, #15
 8002452:	f200 80fe 	bhi.w	8002652 <SendQuery+0x2a2>
 8002456:	a201      	add	r2, pc, #4	; (adr r2, 800245c <SendQuery+0xac>)
 8002458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800245c:	0800249d 	.word	0x0800249d
 8002460:	0800249d 	.word	0x0800249d
 8002464:	0800249d 	.word	0x0800249d
 8002468:	0800249d 	.word	0x0800249d
 800246c:	080024bb 	.word	0x080024bb
 8002470:	080024dd 	.word	0x080024dd
 8002474:	08002653 	.word	0x08002653
 8002478:	08002653 	.word	0x08002653
 800247c:	08002653 	.word	0x08002653
 8002480:	08002653 	.word	0x08002653
 8002484:	08002653 	.word	0x08002653
 8002488:	08002653 	.word	0x08002653
 800248c:	08002653 	.word	0x08002653
 8002490:	08002653 	.word	0x08002653
 8002494:	080024ff 	.word	0x080024ff
 8002498:	080025bd 	.word	0x080025bd
	{
	case MB_FC_READ_COILS:
	case MB_FC_READ_DISCRETE_INPUT:
	case MB_FC_READ_REGISTERS:
	case MB_FC_READ_INPUT_REGISTER:
	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 800249c:	8c3b      	ldrh	r3, [r7, #32]
 800249e:	0a1b      	lsrs	r3, r3, #8
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	b2da      	uxtb	r2, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 80024a8:	8c3b      	ldrh	r3, [r7, #32]
 80024aa:	b2da      	uxtb	r2, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2206      	movs	r2, #6
 80024b4:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    break;
 80024b8:	e0cb      	b.n	8002652 <SendQuery+0x2a2>
	case MB_FC_WRITE_COIL:
	    modH->u8Buffer[ NB_HI ]      = (( telegram.u16reg[0]> 0) ? 0xff : 0);
 80024ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024bc:	881b      	ldrh	r3, [r3, #0]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <SendQuery+0x116>
 80024c2:	22ff      	movs	r2, #255	; 0xff
 80024c4:	e000      	b.n	80024c8 <SendQuery+0x118>
 80024c6:	2200      	movs	r2, #0
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = 0;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2206      	movs	r2, #6
 80024d6:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    break;
 80024da:	e0ba      	b.n	8002652 <SendQuery+0x2a2>
	case MB_FC_WRITE_REGISTER:
	    modH->u8Buffer[ NB_HI ]      = highByte( telegram.u16reg[0]);
 80024dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024de:	881b      	ldrh	r3, [r3, #0]
 80024e0:	0a1b      	lsrs	r3, r3, #8
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	b2da      	uxtb	r2, r3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16reg[0]);
 80024ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ec:	881b      	ldrh	r3, [r3, #0]
 80024ee:	b2da      	uxtb	r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2206      	movs	r2, #6
 80024f8:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    break;
 80024fc:	e0a9      	b.n	8002652 <SendQuery+0x2a2>
	case MB_FC_WRITE_MULTIPLE_COILS: // TODO: implement "sending coils"
	    u8regsno = telegram.u16CoilsNo / 16;
 80024fe:	8c3b      	ldrh	r3, [r7, #32]
 8002500:	091b      	lsrs	r3, r3, #4
 8002502:	b29b      	uxth	r3, r3
 8002504:	727b      	strb	r3, [r7, #9]
	    u8bytesno = u8regsno * 2;
 8002506:	7a7b      	ldrb	r3, [r7, #9]
 8002508:	005b      	lsls	r3, r3, #1
 800250a:	73fb      	strb	r3, [r7, #15]
	    if ((telegram.u16CoilsNo % 16) != 0)
 800250c:	8c3b      	ldrh	r3, [r7, #32]
 800250e:	f003 030f 	and.w	r3, r3, #15
 8002512:	b29b      	uxth	r3, r3
 8002514:	2b00      	cmp	r3, #0
 8002516:	d005      	beq.n	8002524 <SendQuery+0x174>
	    {
	        u8bytesno++;
 8002518:	7bfb      	ldrb	r3, [r7, #15]
 800251a:	3301      	adds	r3, #1
 800251c:	73fb      	strb	r3, [r7, #15]
	        u8regsno++;
 800251e:	7a7b      	ldrb	r3, [r7, #9]
 8002520:	3301      	adds	r3, #1
 8002522:	727b      	strb	r3, [r7, #9]
	    }

	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 8002524:	8c3b      	ldrh	r3, [r7, #32]
 8002526:	0a1b      	lsrs	r3, r3, #8
 8002528:	b29b      	uxth	r3, r3
 800252a:	b2da      	uxtb	r2, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 8002530:	8c3b      	ldrh	r3, [r7, #32]
 8002532:	b2da      	uxtb	r2, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	761a      	strb	r2, [r3, #24]
	    modH->u8Buffer[ BYTE_CNT ]    = u8bytesno;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	7bfa      	ldrb	r2, [r7, #15]
 800253c:	765a      	strb	r2, [r3, #25]
	    modH->u8BufferSize = 7;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2207      	movs	r2, #7
 8002542:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

	    for (uint16_t i = 0; i < u8bytesno; i++)
 8002546:	2300      	movs	r3, #0
 8002548:	81bb      	strh	r3, [r7, #12]
 800254a:	e031      	b.n	80025b0 <SendQuery+0x200>
	    {
	        if(i%2)
 800254c:	89bb      	ldrh	r3, [r7, #12]
 800254e:	f003 0301 	and.w	r3, r3, #1
 8002552:	b29b      	uxth	r3, r3
 8002554:	2b00      	cmp	r3, #0
 8002556:	d00f      	beq.n	8002578 <SendQuery+0x1c8>
	        {
	        	modH->u8Buffer[ modH->u8BufferSize ] = lowByte( telegram.u16reg[ i/2 ] );
 8002558:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800255a:	89bb      	ldrh	r3, [r7, #12]
 800255c:	085b      	lsrs	r3, r3, #1
 800255e:	b29b      	uxth	r3, r3
 8002560:	005b      	lsls	r3, r3, #1
 8002562:	4413      	add	r3, r2
 8002564:	881a      	ldrh	r2, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800256c:	4619      	mov	r1, r3
 800256e:	b2d2      	uxtb	r2, r2
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	440b      	add	r3, r1
 8002574:	74da      	strb	r2, [r3, #19]
 8002576:	e010      	b.n	800259a <SendQuery+0x1ea>
	        }
	        else
	        {
	        	modH->u8Buffer[  modH->u8BufferSize ] = highByte( telegram.u16reg[ i/2 ] );
 8002578:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800257a:	89bb      	ldrh	r3, [r7, #12]
 800257c:	085b      	lsrs	r3, r3, #1
 800257e:	b29b      	uxth	r3, r3
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	4413      	add	r3, r2
 8002584:	881b      	ldrh	r3, [r3, #0]
 8002586:	0a1b      	lsrs	r3, r3, #8
 8002588:	b29a      	uxth	r2, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002590:	4619      	mov	r1, r3
 8002592:	b2d2      	uxtb	r2, r2
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	440b      	add	r3, r1
 8002598:	74da      	strb	r2, [r3, #19]

	        }
	        modH->u8BufferSize++;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80025a0:	3301      	adds	r3, #1
 80025a2:	b2da      	uxtb	r2, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    for (uint16_t i = 0; i < u8bytesno; i++)
 80025aa:	89bb      	ldrh	r3, [r7, #12]
 80025ac:	3301      	adds	r3, #1
 80025ae:	81bb      	strh	r3, [r7, #12]
 80025b0:	7bfb      	ldrb	r3, [r7, #15]
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	89ba      	ldrh	r2, [r7, #12]
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d3c8      	bcc.n	800254c <SendQuery+0x19c>
	    }
	    break;
 80025ba:	e04a      	b.n	8002652 <SendQuery+0x2a2>

	case MB_FC_WRITE_MULTIPLE_REGISTERS:
	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 80025bc:	8c3b      	ldrh	r3, [r7, #32]
 80025be:	0a1b      	lsrs	r3, r3, #8
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	b2da      	uxtb	r2, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 80025c8:	8c3b      	ldrh	r3, [r7, #32]
 80025ca:	b2da      	uxtb	r2, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	761a      	strb	r2, [r3, #24]
	    modH->u8Buffer[ BYTE_CNT ]    = (uint8_t) ( telegram.u16CoilsNo * 2 );
 80025d0:	8c3b      	ldrh	r3, [r7, #32]
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	005b      	lsls	r3, r3, #1
 80025d6:	b2da      	uxtb	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	765a      	strb	r2, [r3, #25]
	    modH->u8BufferSize = 7;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2207      	movs	r2, #7
 80025e0:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 80025e4:	2300      	movs	r3, #0
 80025e6:	817b      	strh	r3, [r7, #10]
 80025e8:	e02e      	b.n	8002648 <SendQuery+0x298>
	    {

	        modH->u8Buffer[  modH->u8BufferSize ] = highByte(  telegram.u16reg[ i ] );
 80025ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025ec:	897b      	ldrh	r3, [r7, #10]
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	4413      	add	r3, r2
 80025f2:	881b      	ldrh	r3, [r3, #0]
 80025f4:	0a1b      	lsrs	r3, r3, #8
 80025f6:	b29a      	uxth	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80025fe:	4619      	mov	r1, r3
 8002600:	b2d2      	uxtb	r2, r2
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	440b      	add	r3, r1
 8002606:	74da      	strb	r2, [r3, #19]
	        modH->u8BufferSize++;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800260e:	3301      	adds	r3, #1
 8002610:	b2da      	uxtb	r2, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	        modH->u8Buffer[  modH->u8BufferSize ] = lowByte( telegram.u16reg[ i ] );
 8002618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800261a:	897b      	ldrh	r3, [r7, #10]
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	4413      	add	r3, r2
 8002620:	881a      	ldrh	r2, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002628:	4619      	mov	r1, r3
 800262a:	b2d2      	uxtb	r2, r2
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	440b      	add	r3, r1
 8002630:	74da      	strb	r2, [r3, #19]
	        modH->u8BufferSize++;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002638:	3301      	adds	r3, #1
 800263a:	b2da      	uxtb	r2, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 8002642:	897b      	ldrh	r3, [r7, #10]
 8002644:	3301      	adds	r3, #1
 8002646:	817b      	strh	r3, [r7, #10]
 8002648:	8c3b      	ldrh	r3, [r7, #32]
 800264a:	897a      	ldrh	r2, [r7, #10]
 800264c:	429a      	cmp	r2, r3
 800264e:	d3cc      	bcc.n	80025ea <SendQuery+0x23a>
	    }
	    break;
 8002650:	bf00      	nop
	}


	sendTxBuffer(modH);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f000 fbf3 	bl	8002e3e <sendTxBuffer>

	xSemaphoreGive(modH->ModBusSphrHandle);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 800265e:	2300      	movs	r3, #0
 8002660:	2200      	movs	r2, #0
 8002662:	2100      	movs	r1, #0
 8002664:	f010 fa5a 	bl	8012b1c <xQueueGenericSend>

	modH->i8state = COM_WAITING;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
	modH->i8lastError = 0;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	749a      	strb	r2, [r3, #18]
	return 0;
 8002676:	2300      	movs	r3, #0


}
 8002678:	4618      	mov	r0, r3
 800267a:	3710      	adds	r7, #16
 800267c:	46bd      	mov	sp, r7
 800267e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002682:	b004      	add	sp, #16
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop

08002688 <StartTaskModbusMaster>:
}

#endif

void StartTaskModbusMaster(void *argument)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b08c      	sub	sp, #48	; 0x30
 800268c:	af02      	add	r7, sp, #8
 800268e:	6078      	str	r0, [r7, #4]

  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	627b      	str	r3, [r7, #36]	; 0x24


  for(;;)
  {
	  /*Wait indefinitely for a telegram to send */
	  xQueueReceive(modH->QueueTelegramHandle, &telegram, portMAX_DELAY);
 8002694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002696:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800269a:	f107 010c 	add.w	r1, r7, #12
 800269e:	f04f 32ff 	mov.w	r2, #4294967295
 80026a2:	4618      	mov	r0, r3
 80026a4:	f010 fc60 	bl	8012f68 <xQueueReceive>
       /* Block until a Modbus Frame arrives or query timeouts*/
   	   ulNotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
     }
#else
     // This is the case for implementations with only USART support
     SendQuery(modH, telegram);
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	9300      	str	r3, [sp, #0]
 80026ac:	f107 030c 	add.w	r3, r7, #12
 80026b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80026b4:	f7ff fe7c 	bl	80023b0 <SendQuery>
     /* Block indefinitely until a Modbus Frame arrives or query timeouts*/
     ulNotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80026b8:	f04f 31ff 	mov.w	r1, #4294967295
 80026bc:	2001      	movs	r0, #1
 80026be:	f012 f85d 	bl	801477c <ulTaskNotifyTake>
 80026c2:	6238      	str	r0, [r7, #32]

#endif

	  // notify the task the request timeout
      modH->i8lastError = 0;
 80026c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c6:	2200      	movs	r2, #0
 80026c8:	749a      	strb	r2, [r3, #18]
      if(ulNotificationValue)
 80026ca:	6a3b      	ldr	r3, [r7, #32]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d018      	beq.n	8002702 <StartTaskModbusMaster+0x7a>
      {
    	  modH->i8state = COM_IDLE;
 80026d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d2:	2200      	movs	r2, #0
 80026d4:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
    	  modH->i8lastError = ERR_TIME_OUT;
 80026d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026da:	22f8      	movs	r2, #248	; 0xf8
 80026dc:	749a      	strb	r2, [r3, #18]
    	  modH->u16errCnt++;
 80026de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e0:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 80026e4:	3301      	adds	r3, #1
 80026e6:	b29a      	uxth	r2, r3
 80026e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ea:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
    	  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 80026ee:	69b8      	ldr	r0, [r7, #24]
 80026f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f2:	f993 3012 	ldrsb.w	r3, [r3, #18]
 80026f6:	4619      	mov	r1, r3
 80026f8:	2300      	movs	r3, #0
 80026fa:	2203      	movs	r2, #3
 80026fc:	f012 f886 	bl	801480c <xTaskGenericNotify>
    	  continue;
 8002700:	e09a      	b.n	8002838 <StartTaskModbusMaster+0x1b0>
      {
    	  getRxBuffer(modH);
      }

#else
      getRxBuffer(modH);
 8002702:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002704:	f000 f98e 	bl	8002a24 <getRxBuffer>
#endif



	  if ( modH->u8BufferSize < 6){
 8002708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800270e:	2b05      	cmp	r3, #5
 8002710:	d818      	bhi.n	8002744 <StartTaskModbusMaster+0xbc>

		  modH->i8state = COM_IDLE;
 8002712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002714:	2200      	movs	r2, #0
 8002716:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
		  modH->i8lastError = ERR_BAD_SIZE;
 800271a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271c:	22fa      	movs	r2, #250	; 0xfa
 800271e:	749a      	strb	r2, [r3, #18]
		  modH->u16errCnt++;
 8002720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002722:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8002726:	3301      	adds	r3, #1
 8002728:	b29a      	uxth	r2, r3
 800272a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272c:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
		  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 8002730:	69b8      	ldr	r0, [r7, #24]
 8002732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002734:	f993 3012 	ldrsb.w	r3, [r3, #18]
 8002738:	4619      	mov	r1, r3
 800273a:	2300      	movs	r3, #0
 800273c:	2203      	movs	r2, #3
 800273e:	f012 f865 	bl	801480c <xTaskGenericNotify>
		  continue;
 8002742:	e079      	b.n	8002838 <StartTaskModbusMaster+0x1b0>
	  }

	  xTimerStop(modH->xTimerTimeout,0); // cancel timeout timer
 8002744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002746:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
 800274a:	2300      	movs	r3, #0
 800274c:	9300      	str	r3, [sp, #0]
 800274e:	2300      	movs	r3, #0
 8002750:	2200      	movs	r2, #0
 8002752:	2103      	movs	r1, #3
 8002754:	f012 fae6 	bl	8014d24 <xTimerGenericCommand>


	  // validate message: id, CRC, FCT, exception
	  int8_t u8exception = validateAnswer(modH);
 8002758:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800275a:	f000 f8f5 	bl	8002948 <validateAnswer>
 800275e:	4603      	mov	r3, r0
 8002760:	77fb      	strb	r3, [r7, #31]
	  if (u8exception != 0)
 8002762:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d010      	beq.n	800278c <StartTaskModbusMaster+0x104>
	  {
		 modH->i8state = COM_IDLE;
 800276a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276c:	2200      	movs	r2, #0
 800276e:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
         modH->i8lastError = u8exception;
 8002772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002774:	7ffa      	ldrb	r2, [r7, #31]
 8002776:	749a      	strb	r2, [r3, #18]
		 xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 8002778:	69b8      	ldr	r0, [r7, #24]
 800277a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277c:	f993 3012 	ldrsb.w	r3, [r3, #18]
 8002780:	4619      	mov	r1, r3
 8002782:	2300      	movs	r3, #0
 8002784:	2203      	movs	r2, #3
 8002786:	f012 f841 	bl	801480c <xTaskGenericNotify>
	     continue;
 800278a:	e055      	b.n	8002838 <StartTaskModbusMaster+0x1b0>
	  }

	  modH->i8lastError = u8exception;
 800278c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278e:	7ffa      	ldrb	r2, [r7, #31]
 8002790:	749a      	strb	r2, [r3, #18]

	  xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 8002792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002794:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002798:	f04f 31ff 	mov.w	r1, #4294967295
 800279c:	4618      	mov	r0, r3
 800279e:	f010 fcc3 	bl	8013128 <xQueueSemaphoreTake>
	  // process answer
	  switch( modH->u8Buffer[ FUNC ] )
 80027a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a4:	7d1b      	ldrb	r3, [r3, #20]
 80027a6:	3b01      	subs	r3, #1
 80027a8:	2b0f      	cmp	r3, #15
 80027aa:	d82b      	bhi.n	8002804 <StartTaskModbusMaster+0x17c>
 80027ac:	a201      	add	r2, pc, #4	; (adr r2, 80027b4 <StartTaskModbusMaster+0x12c>)
 80027ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027b2:	bf00      	nop
 80027b4:	080027f5 	.word	0x080027f5
 80027b8:	080027f5 	.word	0x080027f5
 80027bc:	080027fd 	.word	0x080027fd
 80027c0:	080027fd 	.word	0x080027fd
 80027c4:	08002805 	.word	0x08002805
 80027c8:	08002805 	.word	0x08002805
 80027cc:	08002805 	.word	0x08002805
 80027d0:	08002805 	.word	0x08002805
 80027d4:	08002805 	.word	0x08002805
 80027d8:	08002805 	.word	0x08002805
 80027dc:	08002805 	.word	0x08002805
 80027e0:	08002805 	.word	0x08002805
 80027e4:	08002805 	.word	0x08002805
 80027e8:	08002805 	.word	0x08002805
 80027ec:	08002805 	.word	0x08002805
 80027f0:	08002805 	.word	0x08002805
	  {
	  case MB_FC_READ_COILS:
	  case MB_FC_READ_DISCRETE_INPUT:
	      //call get_FC1 to transfer the incoming message to u16regs buffer
	      get_FC1(modH);
 80027f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80027f6:	f000 f821 	bl	800283c <get_FC1>
	      break;
 80027fa:	e004      	b.n	8002806 <StartTaskModbusMaster+0x17e>
	  case MB_FC_READ_INPUT_REGISTER:
	  case MB_FC_READ_REGISTERS :
	      // call get_FC3 to transfer the incoming message to u16regs buffer
	      get_FC3(modH);
 80027fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80027fe:	f000 f874 	bl	80028ea <get_FC3>
	      break;
 8002802:	e000      	b.n	8002806 <StartTaskModbusMaster+0x17e>
	  case MB_FC_WRITE_MULTIPLE_COILS:
	  case MB_FC_WRITE_MULTIPLE_REGISTERS :
	      // nothing to do
	      break;
	  default:
	      break;
 8002804:	bf00      	nop
	  }
	  modH->i8state = COM_IDLE;
 8002806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002808:	2200      	movs	r2, #0
 800280a:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7

	  if (modH->i8lastError ==0) // no error the error_OK, we need to use a different value than 0 to detect the timeout
 800280e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002810:	f993 3012 	ldrsb.w	r3, [r3, #18]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d10e      	bne.n	8002836 <StartTaskModbusMaster+0x1ae>
	  {
		  xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 8002818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281a:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 800281e:	2300      	movs	r3, #0
 8002820:	2200      	movs	r2, #0
 8002822:	2100      	movs	r1, #0
 8002824:	f010 f97a 	bl	8012b1c <xQueueGenericSend>
		  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, ERR_OK_QUERY, eSetValueWithOverwrite);
 8002828:	69b8      	ldr	r0, [r7, #24]
 800282a:	2300      	movs	r3, #0
 800282c:	2203      	movs	r2, #3
 800282e:	f06f 010a 	mvn.w	r1, #10
 8002832:	f011 ffeb 	bl	801480c <xTaskGenericNotify>
	  }


	  continue;
 8002836:	bf00      	nop
  {
 8002838:	e72c      	b.n	8002694 <StartTaskModbusMaster+0xc>
 800283a:	bf00      	nop

0800283c <get_FC1>:
 * This method puts the slave answer into master data buffer
 *
 * @ingroup register
 */
void get_FC1(modbusHandler_t *modH)
{
 800283c:	b590      	push	{r4, r7, lr}
 800283e:	b085      	sub	sp, #20
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
    uint8_t u8byte, i;
    u8byte = 3;
 8002844:	2303      	movs	r3, #3
 8002846:	73bb      	strb	r3, [r7, #14]
     for (i=0; i< modH->u8Buffer[2]; i++) {
 8002848:	2300      	movs	r3, #0
 800284a:	73fb      	strb	r3, [r7, #15]
 800284c:	e043      	b.n	80028d6 <get_FC1+0x9a>

        if(i%2)
 800284e:	7bfb      	ldrb	r3, [r7, #15]
 8002850:	f003 0301 	and.w	r3, r3, #1
 8002854:	b2db      	uxtb	r3, r3
 8002856:	2b00      	cmp	r3, #0
 8002858:	d01c      	beq.n	8002894 <get_FC1+0x58>
        {
        	modH->u16regs[i/2]= word(modH->u8Buffer[i+u8byte], lowByte(modH->u16regs[i/2]));
 800285a:	7bfa      	ldrb	r2, [r7, #15]
 800285c:	7bbb      	ldrb	r3, [r7, #14]
 800285e:	4413      	add	r3, r2
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	4413      	add	r3, r2
 8002864:	7cd8      	ldrb	r0, [r3, #19]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800286c:	7bfb      	ldrb	r3, [r7, #15]
 800286e:	085b      	lsrs	r3, r3, #1
 8002870:	b2db      	uxtb	r3, r3
 8002872:	005b      	lsls	r3, r3, #1
 8002874:	4413      	add	r3, r2
 8002876:	881b      	ldrh	r3, [r3, #0]
 8002878:	b2d9      	uxtb	r1, r3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8002880:	7bfb      	ldrb	r3, [r7, #15]
 8002882:	085b      	lsrs	r3, r3, #1
 8002884:	b2db      	uxtb	r3, r3
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	18d4      	adds	r4, r2, r3
 800288a:	f000 fa5f 	bl	8002d4c <word>
 800288e:	4603      	mov	r3, r0
 8002890:	8023      	strh	r3, [r4, #0]
 8002892:	e01d      	b.n	80028d0 <get_FC1+0x94>
        }
        else
        {

        	modH->u16regs[i/2]= word(highByte(modH->u16regs[i/2]), modH->u8Buffer[i+u8byte]);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800289a:	7bfb      	ldrb	r3, [r7, #15]
 800289c:	085b      	lsrs	r3, r3, #1
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	005b      	lsls	r3, r3, #1
 80028a2:	4413      	add	r3, r2
 80028a4:	881b      	ldrh	r3, [r3, #0]
 80028a6:	0a1b      	lsrs	r3, r3, #8
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	b2d8      	uxtb	r0, r3
 80028ac:	7bfa      	ldrb	r2, [r7, #15]
 80028ae:	7bbb      	ldrb	r3, [r7, #14]
 80028b0:	4413      	add	r3, r2
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	4413      	add	r3, r2
 80028b6:	7cd9      	ldrb	r1, [r3, #19]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80028be:	7bfb      	ldrb	r3, [r7, #15]
 80028c0:	085b      	lsrs	r3, r3, #1
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	18d4      	adds	r4, r2, r3
 80028c8:	f000 fa40 	bl	8002d4c <word>
 80028cc:	4603      	mov	r3, r0
 80028ce:	8023      	strh	r3, [r4, #0]
     for (i=0; i< modH->u8Buffer[2]; i++) {
 80028d0:	7bfb      	ldrb	r3, [r7, #15]
 80028d2:	3301      	adds	r3, #1
 80028d4:	73fb      	strb	r3, [r7, #15]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	7d5b      	ldrb	r3, [r3, #21]
 80028da:	7bfa      	ldrb	r2, [r7, #15]
 80028dc:	429a      	cmp	r2, r3
 80028de:	d3b6      	bcc.n	800284e <get_FC1+0x12>
        }

     }
}
 80028e0:	bf00      	nop
 80028e2:	bf00      	nop
 80028e4:	3714      	adds	r7, #20
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd90      	pop	{r4, r7, pc}

080028ea <get_FC3>:
 * This method puts the slave answer into master data buffer
 *
 * @ingroup register
 */
void get_FC3(modbusHandler_t *modH)
{
 80028ea:	b590      	push	{r4, r7, lr}
 80028ec:	b085      	sub	sp, #20
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	6078      	str	r0, [r7, #4]
    uint8_t u8byte, i;
    u8byte = 3;
 80028f2:	2303      	movs	r3, #3
 80028f4:	73fb      	strb	r3, [r7, #15]

    for (i=0; i< modH->u8Buffer[ 2 ] /2; i++)
 80028f6:	2300      	movs	r3, #0
 80028f8:	73bb      	strb	r3, [r7, #14]
 80028fa:	e018      	b.n	800292e <get_FC3+0x44>
    {
    	modH->u16regs[ i ] = word(modH->u8Buffer[ u8byte ], modH->u8Buffer[ u8byte +1 ]);
 80028fc:	7bfb      	ldrb	r3, [r7, #15]
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	4413      	add	r3, r2
 8002902:	7cd8      	ldrb	r0, [r3, #19]
 8002904:	7bfb      	ldrb	r3, [r7, #15]
 8002906:	3301      	adds	r3, #1
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	4413      	add	r3, r2
 800290c:	7cd9      	ldrb	r1, [r3, #19]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8002914:	7bbb      	ldrb	r3, [r7, #14]
 8002916:	005b      	lsls	r3, r3, #1
 8002918:	18d4      	adds	r4, r2, r3
 800291a:	f000 fa17 	bl	8002d4c <word>
 800291e:	4603      	mov	r3, r0
 8002920:	8023      	strh	r3, [r4, #0]
        u8byte += 2;
 8002922:	7bfb      	ldrb	r3, [r7, #15]
 8002924:	3302      	adds	r3, #2
 8002926:	73fb      	strb	r3, [r7, #15]
    for (i=0; i< modH->u8Buffer[ 2 ] /2; i++)
 8002928:	7bbb      	ldrb	r3, [r7, #14]
 800292a:	3301      	adds	r3, #1
 800292c:	73bb      	strb	r3, [r7, #14]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	7d5b      	ldrb	r3, [r3, #21]
 8002932:	085b      	lsrs	r3, r3, #1
 8002934:	b2db      	uxtb	r3, r3
 8002936:	7bba      	ldrb	r2, [r7, #14]
 8002938:	429a      	cmp	r2, r3
 800293a:	d3df      	bcc.n	80028fc <get_FC3+0x12>
    }
}
 800293c:	bf00      	nop
 800293e:	bf00      	nop
 8002940:	3714      	adds	r7, #20
 8002942:	46bd      	mov	sp, r7
 8002944:	bd90      	pop	{r4, r7, pc}
	...

08002948 <validateAnswer>:
 *
 * @return 0 if OK, EXCEPTION if anything fails
 * @ingroup buffer
 */
uint8_t validateAnswer(modbusHandler_t *modH)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
#if ENABLE_TCP ==1
	if(modH->xTypeHW != TCP_HW)
	{
#endif
	uint16_t u16MsgCRC =
        ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002956:	3b02      	subs	r3, #2
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	4413      	add	r3, r2
 800295c:	7cdb      	ldrb	r3, [r3, #19]
 800295e:	021b      	lsls	r3, r3, #8
         | modH->u8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 8002960:	b21a      	sxth	r2, r3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002968:	3b01      	subs	r3, #1
 800296a:	6879      	ldr	r1, [r7, #4]
 800296c:	440b      	add	r3, r1
 800296e:	7cdb      	ldrb	r3, [r3, #19]
 8002970:	b21b      	sxth	r3, r3
 8002972:	4313      	orrs	r3, r2
 8002974:	b21b      	sxth	r3, r3
	uint16_t u16MsgCRC =
 8002976:	81bb      	strh	r3, [r7, #12]
    if ( calcCRC(modH->u8Buffer,  modH->u8BufferSize-2) != u16MsgCRC )
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f103 0213 	add.w	r2, r3, #19
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002984:	3b02      	subs	r3, #2
 8002986:	b2db      	uxtb	r3, r3
 8002988:	4619      	mov	r1, r3
 800298a:	4610      	mov	r0, r2
 800298c:	f000 f9f1 	bl	8002d72 <calcCRC>
 8002990:	4603      	mov	r3, r0
 8002992:	461a      	mov	r2, r3
 8002994:	89bb      	ldrh	r3, [r7, #12]
 8002996:	4293      	cmp	r3, r2
 8002998:	d009      	beq.n	80029ae <validateAnswer+0x66>
    {
    	modH->u16errCnt ++;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 80029a0:	3301      	adds	r3, #1
 80029a2:	b29a      	uxth	r2, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
        return ERR_BAD_CRC;
 80029aa:	23fc      	movs	r3, #252	; 0xfc
 80029ac:	e034      	b.n	8002a18 <validateAnswer+0xd0>
	}
#endif


    // check exception
    if ((modH->u8Buffer[ FUNC ] & 0x80) != 0)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	7d1b      	ldrb	r3, [r3, #20]
 80029b2:	b25b      	sxtb	r3, r3
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	da09      	bge.n	80029cc <validateAnswer+0x84>
    {
    	modH->u16errCnt ++;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 80029be:	3301      	adds	r3, #1
 80029c0:	b29a      	uxth	r2, r3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
        return ERR_EXCEPTION;
 80029c8:	23fb      	movs	r3, #251	; 0xfb
 80029ca:	e025      	b.n	8002a18 <validateAnswer+0xd0>
    }

    // check fct code
    bool isSupported = false;
 80029cc:	2300      	movs	r3, #0
 80029ce:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 80029d0:	2300      	movs	r3, #0
 80029d2:	73bb      	strb	r3, [r7, #14]
 80029d4:	e00c      	b.n	80029f0 <validateAnswer+0xa8>
    {
        if (fctsupported[i] == modH->u8Buffer[FUNC])
 80029d6:	7bbb      	ldrb	r3, [r7, #14]
 80029d8:	4a11      	ldr	r2, [pc, #68]	; (8002a20 <validateAnswer+0xd8>)
 80029da:	5cd2      	ldrb	r2, [r2, r3]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	7d1b      	ldrb	r3, [r3, #20]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d102      	bne.n	80029ea <validateAnswer+0xa2>
        {
            isSupported = 1;
 80029e4:	2301      	movs	r3, #1
 80029e6:	73fb      	strb	r3, [r7, #15]
            break;
 80029e8:	e005      	b.n	80029f6 <validateAnswer+0xae>
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 80029ea:	7bbb      	ldrb	r3, [r7, #14]
 80029ec:	3301      	adds	r3, #1
 80029ee:	73bb      	strb	r3, [r7, #14]
 80029f0:	7bbb      	ldrb	r3, [r7, #14]
 80029f2:	2b07      	cmp	r3, #7
 80029f4:	d9ef      	bls.n	80029d6 <validateAnswer+0x8e>
        }
    }
    if (!isSupported)
 80029f6:	7bfb      	ldrb	r3, [r7, #15]
 80029f8:	f083 0301 	eor.w	r3, r3, #1
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d009      	beq.n	8002a16 <validateAnswer+0xce>
    {
    	modH->u16errCnt ++;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8002a08:	3301      	adds	r3, #1
 8002a0a:	b29a      	uxth	r2, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
        return EXC_FUNC_CODE;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e000      	b.n	8002a18 <validateAnswer+0xd0>
    }

    return 0; // OK, no exception code thrown
 8002a16:	2300      	movs	r3, #0
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3710      	adds	r7, #16
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	0802f6f0 	.word	0x0802f6f0

08002a24 <getRxBuffer>:
 *
 * @return buffer size if OK, ERR_BUFF_OVERFLOW if u8BufferSize >= MAX_BUFFER
 * @ingroup buffer
 */
int16_t getRxBuffer(modbusHandler_t *modH)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]

    int16_t i16result;

    if(modH->xTypeHW == USART_HW)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d104      	bne.n	8002a40 <getRxBuffer+0x1c>
    {
    	HAL_UART_AbortReceive_IT(modH->port); // disable interrupts to avoid race conditions on serial port
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f00d f994 	bl	800fd68 <HAL_UART_AbortReceive_IT>
    }

	if (modH->xBufferRX.overflow)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d008      	beq.n	8002a5c <getRxBuffer+0x38>
    {
       	RingClear(&modH->xBufferRX); // clean up the overflowed buffer
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	33bc      	adds	r3, #188	; 0xbc
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7ff f9ef 	bl	8001e32 <RingClear>
       	i16result =  ERR_BUFF_OVERFLOW;
 8002a54:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 8002a58:	81fb      	strh	r3, [r7, #14]
 8002a5a:	e019      	b.n	8002a90 <getRxBuffer+0x6c>
    }
	else
	{
		modH->u8BufferSize = RingGetAllBytes(&modH->xBufferRX, modH->u8Buffer);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f103 02bc 	add.w	r2, r3, #188	; 0xbc
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	3313      	adds	r3, #19
 8002a66:	4619      	mov	r1, r3
 8002a68:	4610      	mov	r0, r2
 8002a6a:	f7ff f97c 	bl	8001d66 <RingGetAllBytes>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	461a      	mov	r2, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
		modH->u16InCnt++;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8002a7e:	3301      	adds	r3, #1
 8002a80:	b29a      	uxth	r2, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
		i16result = modH->u8BufferSize;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002a8e:	81fb      	strh	r3, [r7, #14]
	}

	if(modH->xTypeHW == USART_HW)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d107      	bne.n	8002aaa <getRxBuffer+0x86>
	{
		HAL_UART_Receive_IT(modH->port, &modH->dataRX, 1);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6858      	ldr	r0, [r3, #4]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	33a6      	adds	r3, #166	; 0xa6
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	f00c ffcd 	bl	800fa44 <HAL_UART_Receive_IT>
	}

    return i16result;
 8002aaa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3710      	adds	r7, #16
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
	...

08002ab8 <validateRequest>:
 *
 * @return 0 if OK, EXCEPTION if anything fails
 * @ingroup modH Modbus handler
 */
uint8_t validateRequest(modbusHandler_t *modH)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
	    		return ERR_BAD_CRC;
	    		}
	    }
#else
	    uint16_t u16MsgCRC;
	    u16MsgCRC= ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002ac6:	3b02      	subs	r3, #2
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	4413      	add	r3, r2
 8002acc:	7cdb      	ldrb	r3, [r3, #19]
 8002ace:	021b      	lsls	r3, r3, #8
	    		   	         | modH->u8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 8002ad0:	b21a      	sxth	r2, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002ad8:	3b01      	subs	r3, #1
 8002ada:	6879      	ldr	r1, [r7, #4]
 8002adc:	440b      	add	r3, r1
 8002ade:	7cdb      	ldrb	r3, [r3, #19]
 8002ae0:	b21b      	sxth	r3, r3
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	b21b      	sxth	r3, r3
	    u16MsgCRC= ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 8002ae6:	813b      	strh	r3, [r7, #8]


	    if ( calcCRC( modH->u8Buffer,  modH->u8BufferSize-2 ) != u16MsgCRC )
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f103 0213 	add.w	r2, r3, #19
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002af4:	3b02      	subs	r3, #2
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	4619      	mov	r1, r3
 8002afa:	4610      	mov	r0, r2
 8002afc:	f000 f939 	bl	8002d72 <calcCRC>
 8002b00:	4603      	mov	r3, r0
 8002b02:	461a      	mov	r2, r3
 8002b04:	893b      	ldrh	r3, [r7, #8]
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d009      	beq.n	8002b1e <validateRequest+0x66>
	    {
	       		modH->u16errCnt ++;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8002b10:	3301      	adds	r3, #1
 8002b12:	b29a      	uxth	r2, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
	       		return ERR_BAD_CRC;
 8002b1a:	23fc      	movs	r3, #252	; 0xfc
 8002b1c:	e10f      	b.n	8002d3e <validateRequest+0x286>


#endif

	    // check fct code
	    bool isSupported = false;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	73fb      	strb	r3, [r7, #15]
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 8002b22:	2300      	movs	r3, #0
 8002b24:	73bb      	strb	r3, [r7, #14]
 8002b26:	e00c      	b.n	8002b42 <validateRequest+0x8a>
	    {
	        if (fctsupported[i] == modH->u8Buffer[FUNC])
 8002b28:	7bbb      	ldrb	r3, [r7, #14]
 8002b2a:	4a87      	ldr	r2, [pc, #540]	; (8002d48 <validateRequest+0x290>)
 8002b2c:	5cd2      	ldrb	r2, [r2, r3]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	7d1b      	ldrb	r3, [r3, #20]
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d102      	bne.n	8002b3c <validateRequest+0x84>
	        {
	            isSupported = 1;
 8002b36:	2301      	movs	r3, #1
 8002b38:	73fb      	strb	r3, [r7, #15]
	            break;
 8002b3a:	e005      	b.n	8002b48 <validateRequest+0x90>
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 8002b3c:	7bbb      	ldrb	r3, [r7, #14]
 8002b3e:	3301      	adds	r3, #1
 8002b40:	73bb      	strb	r3, [r7, #14]
 8002b42:	7bbb      	ldrb	r3, [r7, #14]
 8002b44:	2b07      	cmp	r3, #7
 8002b46:	d9ef      	bls.n	8002b28 <validateRequest+0x70>
	        }
	    }
	    if (!isSupported)
 8002b48:	7bfb      	ldrb	r3, [r7, #15]
 8002b4a:	f083 0301 	eor.w	r3, r3, #1
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d009      	beq.n	8002b68 <validateRequest+0xb0>
	    {
	    	modH->u16errCnt ++;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	b29a      	uxth	r2, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
	        return EXC_FUNC_CODE;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e0ea      	b.n	8002d3e <validateRequest+0x286>
	    }

	    // check start address & nb range
	    uint16_t u16AdRegs = 0;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	81bb      	strh	r3, [r7, #12]
	    uint16_t u16NRegs = 0;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	817b      	strh	r3, [r7, #10]

	    //uint8_t u8regs;
	    switch ( modH->u8Buffer[ FUNC ] )
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	7d1b      	ldrb	r3, [r3, #20]
 8002b74:	3b01      	subs	r3, #1
 8002b76:	2b0f      	cmp	r3, #15
 8002b78:	f200 80e0 	bhi.w	8002d3c <validateRequest+0x284>
 8002b7c:	a201      	add	r2, pc, #4	; (adr r2, 8002b84 <validateRequest+0xcc>)
 8002b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b82:	bf00      	nop
 8002b84:	08002bc5 	.word	0x08002bc5
 8002b88:	08002bc5 	.word	0x08002bc5
 8002b8c:	08002cdd 	.word	0x08002cdd
 8002b90:	08002cdd 	.word	0x08002cdd
 8002b94:	08002c71 	.word	0x08002c71
 8002b98:	08002cb9 	.word	0x08002cb9
 8002b9c:	08002d3d 	.word	0x08002d3d
 8002ba0:	08002d3d 	.word	0x08002d3d
 8002ba4:	08002d3d 	.word	0x08002d3d
 8002ba8:	08002d3d 	.word	0x08002d3d
 8002bac:	08002d3d 	.word	0x08002d3d
 8002bb0:	08002d3d 	.word	0x08002d3d
 8002bb4:	08002d3d 	.word	0x08002d3d
 8002bb8:	08002d3d 	.word	0x08002d3d
 8002bbc:	08002bc5 	.word	0x08002bc5
 8002bc0:	08002cdd 	.word	0x08002cdd
	    {
	    case MB_FC_READ_COILS:
	    case MB_FC_READ_DISCRETE_INPUT:
	    case MB_FC_WRITE_MULTIPLE_COILS:
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) / 16;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	7d5a      	ldrb	r2, [r3, #21]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	7d9b      	ldrb	r3, [r3, #22]
 8002bcc:	4619      	mov	r1, r3
 8002bce:	4610      	mov	r0, r2
 8002bd0:	f000 f8bc 	bl	8002d4c <word>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	091b      	lsrs	r3, r3, #4
 8002bd8:	81bb      	strh	r3, [r7, #12]
	    	u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) /16;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	7dda      	ldrb	r2, [r3, #23]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	7e1b      	ldrb	r3, [r3, #24]
 8002be2:	4619      	mov	r1, r3
 8002be4:	4610      	mov	r0, r2
 8002be6:	f000 f8b1 	bl	8002d4c <word>
 8002bea:	4603      	mov	r3, r0
 8002bec:	091b      	lsrs	r3, r3, #4
 8002bee:	817b      	strh	r3, [r7, #10]
	    	if(word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) % 16) u16NRegs++; // check for incomplete words
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	7dda      	ldrb	r2, [r3, #23]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	7e1b      	ldrb	r3, [r3, #24]
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	4610      	mov	r0, r2
 8002bfc:	f000 f8a6 	bl	8002d4c <word>
 8002c00:	4603      	mov	r3, r0
 8002c02:	f003 030f 	and.w	r3, r3, #15
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d002      	beq.n	8002c12 <validateRequest+0x15a>
 8002c0c:	897b      	ldrh	r3, [r7, #10]
 8002c0e:	3301      	adds	r3, #1
 8002c10:	817b      	strh	r3, [r7, #10]
	    	// verify address range
	    	if((u16AdRegs + u16NRegs) > modH->u16regsize) return EXC_ADDR_RANGE;
 8002c12:	89ba      	ldrh	r2, [r7, #12]
 8002c14:	897b      	ldrh	r3, [r7, #10]
 8002c16:	4413      	add	r3, r2
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	f8b2 20a4 	ldrh.w	r2, [r2, #164]	; 0xa4
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	dd01      	ble.n	8002c26 <validateRequest+0x16e>
 8002c22:	2302      	movs	r3, #2
 8002c24:	e08b      	b.n	8002d3e <validateRequest+0x286>

	    	//verify answer frame size in bytes

	    	u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) / 8;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	7dda      	ldrb	r2, [r3, #23]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	7e1b      	ldrb	r3, [r3, #24]
 8002c2e:	4619      	mov	r1, r3
 8002c30:	4610      	mov	r0, r2
 8002c32:	f000 f88b 	bl	8002d4c <word>
 8002c36:	4603      	mov	r3, r0
 8002c38:	08db      	lsrs	r3, r3, #3
 8002c3a:	817b      	strh	r3, [r7, #10]
	    	if(word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) % 8) u16NRegs++;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	7dda      	ldrb	r2, [r3, #23]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	7e1b      	ldrb	r3, [r3, #24]
 8002c44:	4619      	mov	r1, r3
 8002c46:	4610      	mov	r0, r2
 8002c48:	f000 f880 	bl	8002d4c <word>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	f003 0307 	and.w	r3, r3, #7
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d002      	beq.n	8002c5e <validateRequest+0x1a6>
 8002c58:	897b      	ldrh	r3, [r7, #10]
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	817b      	strh	r3, [r7, #10]
	    	u16NRegs = u16NRegs + 5; // adding the header  and CRC ( Slave address + Function code  + number of data bytes to follow + 2-byte CRC )
 8002c5e:	897b      	ldrh	r3, [r7, #10]
 8002c60:	3305      	adds	r3, #5
 8002c62:	817b      	strh	r3, [r7, #10]
	        if(u16NRegs > 256) return EXC_REGS_QUANT;
 8002c64:	897b      	ldrh	r3, [r7, #10]
 8002c66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c6a:	d960      	bls.n	8002d2e <validateRequest+0x276>
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e066      	b.n	8002d3e <validateRequest+0x286>

	        break;
	    case MB_FC_WRITE_COIL:
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) / 16;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	7d5a      	ldrb	r2, [r3, #21]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	7d9b      	ldrb	r3, [r3, #22]
 8002c78:	4619      	mov	r1, r3
 8002c7a:	4610      	mov	r0, r2
 8002c7c:	f000 f866 	bl	8002d4c <word>
 8002c80:	4603      	mov	r3, r0
 8002c82:	091b      	lsrs	r3, r3, #4
 8002c84:	81bb      	strh	r3, [r7, #12]
	    	if(word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) % 16) u16AdRegs++;	// check for incomplete words
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	7d5a      	ldrb	r2, [r3, #21]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	7d9b      	ldrb	r3, [r3, #22]
 8002c8e:	4619      	mov	r1, r3
 8002c90:	4610      	mov	r0, r2
 8002c92:	f000 f85b 	bl	8002d4c <word>
 8002c96:	4603      	mov	r3, r0
 8002c98:	f003 030f 	and.w	r3, r3, #15
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d002      	beq.n	8002ca8 <validateRequest+0x1f0>
 8002ca2:	89bb      	ldrh	r3, [r7, #12]
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	81bb      	strh	r3, [r7, #12]
	        if (u16AdRegs > modH->u16regsize) return EXC_ADDR_RANGE;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 8002cae:	89ba      	ldrh	r2, [r7, #12]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d93e      	bls.n	8002d32 <validateRequest+0x27a>
 8002cb4:	2302      	movs	r3, #2
 8002cb6:	e042      	b.n	8002d3e <validateRequest+0x286>
	        break;
	    case MB_FC_WRITE_REGISTER :
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	7d5a      	ldrb	r2, [r3, #21]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	7d9b      	ldrb	r3, [r3, #22]
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	4610      	mov	r0, r2
 8002cc4:	f000 f842 	bl	8002d4c <word>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	81bb      	strh	r3, [r7, #12]
	        if (u16AdRegs > modH-> u16regsize) return EXC_ADDR_RANGE;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 8002cd2:	89ba      	ldrh	r2, [r7, #12]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d92e      	bls.n	8002d36 <validateRequest+0x27e>
 8002cd8:	2302      	movs	r3, #2
 8002cda:	e030      	b.n	8002d3e <validateRequest+0x286>
	        break;
	    case MB_FC_READ_REGISTERS :
	    case MB_FC_READ_INPUT_REGISTER :
	    case MB_FC_WRITE_MULTIPLE_REGISTERS :
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	7d5a      	ldrb	r2, [r3, #21]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	7d9b      	ldrb	r3, [r3, #22]
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	4610      	mov	r0, r2
 8002ce8:	f000 f830 	bl	8002d4c <word>
 8002cec:	4603      	mov	r3, r0
 8002cee:	81bb      	strh	r3, [r7, #12]
	        u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	7dda      	ldrb	r2, [r3, #23]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	7e1b      	ldrb	r3, [r3, #24]
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	4610      	mov	r0, r2
 8002cfc:	f000 f826 	bl	8002d4c <word>
 8002d00:	4603      	mov	r3, r0
 8002d02:	817b      	strh	r3, [r7, #10]
	        if (( u16AdRegs + u16NRegs ) > modH->u16regsize) return EXC_ADDR_RANGE;
 8002d04:	89ba      	ldrh	r2, [r7, #12]
 8002d06:	897b      	ldrh	r3, [r7, #10]
 8002d08:	4413      	add	r3, r2
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	f8b2 20a4 	ldrh.w	r2, [r2, #164]	; 0xa4
 8002d10:	4293      	cmp	r3, r2
 8002d12:	dd01      	ble.n	8002d18 <validateRequest+0x260>
 8002d14:	2302      	movs	r3, #2
 8002d16:	e012      	b.n	8002d3e <validateRequest+0x286>

	        //verify answer frame size in bytes
	        u16NRegs = u16NRegs*2 + 5; // adding the header  and CRC
 8002d18:	897b      	ldrh	r3, [r7, #10]
 8002d1a:	005b      	lsls	r3, r3, #1
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	3305      	adds	r3, #5
 8002d20:	817b      	strh	r3, [r7, #10]
	        if ( u16NRegs > 256 ) return EXC_REGS_QUANT;
 8002d22:	897b      	ldrh	r3, [r7, #10]
 8002d24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d28:	d907      	bls.n	8002d3a <validateRequest+0x282>
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e007      	b.n	8002d3e <validateRequest+0x286>
	        break;
 8002d2e:	bf00      	nop
 8002d30:	e004      	b.n	8002d3c <validateRequest+0x284>
	        break;
 8002d32:	bf00      	nop
 8002d34:	e002      	b.n	8002d3c <validateRequest+0x284>
	        break;
 8002d36:	bf00      	nop
 8002d38:	e000      	b.n	8002d3c <validateRequest+0x284>
	        break;
 8002d3a:	bf00      	nop
	    }
	    return 0; // OK, no exception code thrown
 8002d3c:	2300      	movs	r3, #0

}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3710      	adds	r7, #16
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	0802f6f0 	.word	0x0802f6f0

08002d4c <word>:
 * @return uint16_t (word)
 * @ingroup H  Most significant byte
 * @ingroup L  Less significant byte
 */
uint16_t word(uint8_t H, uint8_t L)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b085      	sub	sp, #20
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	4603      	mov	r3, r0
 8002d54:	460a      	mov	r2, r1
 8002d56:	71fb      	strb	r3, [r7, #7]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	71bb      	strb	r3, [r7, #6]
	bytesFields W;
	W.u8[0] = L;
 8002d5c:	79bb      	ldrb	r3, [r7, #6]
 8002d5e:	733b      	strb	r3, [r7, #12]
	W.u8[1] = H;
 8002d60:	79fb      	ldrb	r3, [r7, #7]
 8002d62:	737b      	strb	r3, [r7, #13]

	return W.u16[0];
 8002d64:	89bb      	ldrh	r3, [r7, #12]
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3714      	adds	r7, #20
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr

08002d72 <calcCRC>:
 * @return uint16_t calculated CRC value for the message
 * @ingroup Buffer
 * @ingroup u8length
 */
uint16_t calcCRC(uint8_t *Buffer, uint8_t u8length)
{
 8002d72:	b480      	push	{r7}
 8002d74:	b087      	sub	sp, #28
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
 8002d7a:	460b      	mov	r3, r1
 8002d7c:	70fb      	strb	r3, [r7, #3]
    unsigned int temp, temp2, flag;
    temp = 0xFFFF;
 8002d7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d82:	617b      	str	r3, [r7, #20]
    for (unsigned char i = 0; i < u8length; i++)
 8002d84:	2300      	movs	r3, #0
 8002d86:	74fb      	strb	r3, [r7, #19]
 8002d88:	e023      	b.n	8002dd2 <calcCRC+0x60>
    {
        temp = temp ^ Buffer[i];
 8002d8a:	7cfb      	ldrb	r3, [r7, #19]
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	4413      	add	r3, r2
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	461a      	mov	r2, r3
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	4053      	eors	r3, r2
 8002d98:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	74bb      	strb	r3, [r7, #18]
 8002d9e:	e012      	b.n	8002dc6 <calcCRC+0x54>
        {
            flag = temp & 0x0001;
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	60bb      	str	r3, [r7, #8]
            temp >>=1;
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	085b      	lsrs	r3, r3, #1
 8002dac:	617b      	str	r3, [r7, #20]
            if (flag)
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d005      	beq.n	8002dc0 <calcCRC+0x4e>
                temp ^= 0xA001;
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	f483 4320 	eor.w	r3, r3, #40960	; 0xa000
 8002dba:	f083 0301 	eor.w	r3, r3, #1
 8002dbe:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 8002dc0:	7cbb      	ldrb	r3, [r7, #18]
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	74bb      	strb	r3, [r7, #18]
 8002dc6:	7cbb      	ldrb	r3, [r7, #18]
 8002dc8:	2b08      	cmp	r3, #8
 8002dca:	d9e9      	bls.n	8002da0 <calcCRC+0x2e>
    for (unsigned char i = 0; i < u8length; i++)
 8002dcc:	7cfb      	ldrb	r3, [r7, #19]
 8002dce:	3301      	adds	r3, #1
 8002dd0:	74fb      	strb	r3, [r7, #19]
 8002dd2:	7cfa      	ldrb	r2, [r7, #19]
 8002dd4:	78fb      	ldrb	r3, [r7, #3]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d3d7      	bcc.n	8002d8a <calcCRC+0x18>
        }
    }
    // Reverse byte order.
    temp2 = temp >> 8;
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	0a1b      	lsrs	r3, r3, #8
 8002dde:	60fb      	str	r3, [r7, #12]
    temp = (temp << 8) | temp2;
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	021b      	lsls	r3, r3, #8
 8002de4:	68fa      	ldr	r2, [r7, #12]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	617b      	str	r3, [r7, #20]
    temp &= 0xFFFF;
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	617b      	str	r3, [r7, #20]
    // the returned value is already swapped
    // crcLo byte is first & crcHi byte is last
    return temp;
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	b29b      	uxth	r3, r3

}
 8002df4:	4618      	mov	r0, r3
 8002df6:	371c      	adds	r7, #28
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <buildException>:
 *
 * @ingroup u8exception exception number
 * @ingroup modH modbus handler
 */
void buildException( uint8_t u8exception, modbusHandler_t *modH )
{
 8002e00:	b480      	push	{r7}
 8002e02:	b085      	sub	sp, #20
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	4603      	mov	r3, r0
 8002e08:	6039      	str	r1, [r7, #0]
 8002e0a:	71fb      	strb	r3, [r7, #7]
    uint8_t u8func = modH->u8Buffer[ FUNC ];  // get the original FUNC code
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	7d1b      	ldrb	r3, [r3, #20]
 8002e10:	73fb      	strb	r3, [r7, #15]

    modH->u8Buffer[ ID ]      = modH->u8id;
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	7a1a      	ldrb	r2, [r3, #8]
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	74da      	strb	r2, [r3, #19]
    modH->u8Buffer[ FUNC ]    = u8func + 0x80;
 8002e1a:	7bfb      	ldrb	r3, [r7, #15]
 8002e1c:	3b80      	subs	r3, #128	; 0x80
 8002e1e:	b2da      	uxtb	r2, r3
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	751a      	strb	r2, [r3, #20]
    modH->u8Buffer[ 2 ]       = u8exception;
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	79fa      	ldrb	r2, [r7, #7]
 8002e28:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = EXCEPTION_SIZE;
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	2203      	movs	r2, #3
 8002e2e:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
}
 8002e32:	bf00      	nop
 8002e34:	3714      	adds	r7, #20
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr

08002e3e <sendTxBuffer>:
 *
 * @return nothing
 * @ingroup modH Modbus handler
 */
static void sendTxBuffer(modbusHandler_t *modH)
{
 8002e3e:	b590      	push	{r4, r7, lr}
 8002e40:	b087      	sub	sp, #28
 8002e42:	af02      	add	r7, sp, #8
 8002e44:	6078      	str	r0, [r7, #4]
#if  ENABLE_TCP == 1
if(modH->xTypeHW != TCP_HW)
	 {
#endif

	uint16_t u16crc = calcCRC(modH->u8Buffer, modH->u8BufferSize);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f103 0213 	add.w	r2, r3, #19
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002e52:	4619      	mov	r1, r3
 8002e54:	4610      	mov	r0, r2
 8002e56:	f7ff ff8c 	bl	8002d72 <calcCRC>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	81fb      	strh	r3, [r7, #14]
    modH->u8Buffer[ modH->u8BufferSize ] = u16crc >> 8;
 8002e5e:	89fb      	ldrh	r3, [r7, #14]
 8002e60:	0a1b      	lsrs	r3, r3, #8
 8002e62:	b29a      	uxth	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	b2d2      	uxtb	r2, r2
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	440b      	add	r3, r1
 8002e72:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	b2da      	uxtb	r2, r3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    modH->u8Buffer[ modH->u8BufferSize ] = u16crc & 0x00ff;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	89fb      	ldrh	r3, [r7, #14]
 8002e8e:	b2da      	uxtb	r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	440b      	add	r3, r1
 8002e94:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	b2da      	uxtb	r2, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
#if ENABLE_USB_CDC == 1 || ENABLE_TCP == 1
    if(modH->xTypeHW == USART_HW || modH->xTypeHW == USART_HW_DMA )
    {
#endif

    	if (modH->EN_Port != NULL)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d00c      	beq.n	8002ec8 <sendTxBuffer+0x8a>
        {
    		//enable transmitter, disable receiver to avoid echo on RS485 transceivers
    		HAL_HalfDuplex_EnableTransmitter(modH->port);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f00d fab6 	bl	8010424 <HAL_HalfDuplex_EnableTransmitter>
    		HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_SET);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	68d8      	ldr	r0, [r3, #12]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	8a1b      	ldrh	r3, [r3, #16]
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	f00a fadc 	bl	800d480 <HAL_GPIO_WritePin>
//    		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
        }

#if ENABLE_USART_DMA ==1
    	if(modH->xTypeHW == USART_HW)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d10c      	bne.n	8002eec <sendTxBuffer+0xae>
    	{
#endif
    		// transfer buffer to serial line IT
    		HAL_UART_Transmit_IT(modH->port, modH->u8Buffer,  modH->u8BufferSize);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6858      	ldr	r0, [r3, #4]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f103 0113 	add.w	r1, r3, #19
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	f00c fd68 	bl	800f9ba <HAL_UART_Transmit_IT>
 8002eea:	e00b      	b.n	8002f04 <sendTxBuffer+0xc6>
#if ENABLE_USART_DMA ==1
    	}
        else
        {
        	//transfer buffer to serial line DMA
        	HAL_UART_Transmit_DMA(modH->port, modH->u8Buffer, modH->u8BufferSize);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6858      	ldr	r0, [r3, #4]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f103 0113 	add.w	r1, r3, #19
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	461a      	mov	r2, r3
 8002f00:	f00c fdd0 	bl	800faa4 <HAL_UART_Transmit_DMA>

        }
#endif
        ulTaskNotifyTake(pdTRUE, 250); //wait notification from TXE interrupt
 8002f04:	21fa      	movs	r1, #250	; 0xfa
 8002f06:	2001      	movs	r0, #1
 8002f08:	f011 fc38 	bl	801477c <ulTaskNotifyTake>
*/
#if defined(STM32H7)  || defined(STM32F3) || defined(STM32L4)  
          while((modH->port->Instance->ISR & USART_ISR_TC) ==0 )
#else
          // F429, F103, L152 ...
	  while((modH->port->Instance->SR & USART_SR_TC) ==0 )
 8002f0c:	bf00      	nop
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d0f7      	beq.n	8002f0e <sendTxBuffer+0xd0>
         {
 	        //block the task until the the last byte is send out of the shifting buffer in USART
         }


         if (modH->EN_Port != NULL)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d00c      	beq.n	8002f40 <sendTxBuffer+0x102>
         {

             //return RS485 transceiver to receive mode
        	 HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	68d8      	ldr	r0, [r3, #12]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	8a1b      	ldrh	r3, [r3, #16]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	4619      	mov	r1, r3
 8002f32:	f00a faa5 	bl	800d480 <HAL_GPIO_WritePin>
//        	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
        	 //enable receiver, disable transmitter
        	 HAL_HalfDuplex_EnableReceiver(modH->port);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f00d faa6 	bl	801048c <HAL_HalfDuplex_EnableReceiver>

         }

         // set timeout for master query
         if(modH->uModbusType == MB_MASTER )
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	2b04      	cmp	r3, #4
 8002f46:	d10c      	bne.n	8002f62 <sendTxBuffer+0x124>
         {
        	 xTimerReset(modH->xTimerTimeout,0);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 8002f4e:	f010 ff33 	bl	8013db8 <xTaskGetTickCount>
 8002f52:	4602      	mov	r2, r0
 8002f54:	2300      	movs	r3, #0
 8002f56:	9300      	str	r3, [sp, #0]
 8002f58:	2300      	movs	r3, #0
 8002f5a:	2102      	movs	r1, #2
 8002f5c:	4620      	mov	r0, r4
 8002f5e:	f011 fee1 	bl	8014d24 <xTimerGenericCommand>

#endif

#endif

     modH->u8BufferSize = 0;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
     // increase message counter
     modH->u16OutCnt++;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 8002f70:	3301      	adds	r3, #1
 8002f72:	b29a      	uxth	r2, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e


}
 8002f7a:	bf00      	nop
 8002f7c:	3714      	adds	r7, #20
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd90      	pop	{r4, r7, pc}

08002f82 <process_FC1>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC1(modbusHandler_t *modH )
{
 8002f82:	b580      	push	{r7, lr}
 8002f84:	b086      	sub	sp, #24
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
    uint8_t u8currentBit, u8bytesno, u8bitsno;
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	7d5a      	ldrb	r2, [r3, #21]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	7d9b      	ldrb	r3, [r3, #22]
 8002f92:	4619      	mov	r1, r3
 8002f94:	4610      	mov	r0, r2
 8002f96:	f7ff fed9 	bl	8002d4c <word>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	827b      	strh	r3, [r7, #18]
    uint16_t u16Coilno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	7dda      	ldrb	r2, [r3, #23]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	7e1b      	ldrb	r3, [r3, #24]
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	4610      	mov	r0, r2
 8002faa:	f7ff fecf 	bl	8002d4c <word>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	823b      	strh	r3, [r7, #16]

    // put the number of bytes in the outcoming message
    u8bytesno = (uint8_t) (u16Coilno / 8);
 8002fb2:	8a3b      	ldrh	r3, [r7, #16]
 8002fb4:	08db      	lsrs	r3, r3, #3
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	75fb      	strb	r3, [r7, #23]
    if (u16Coilno % 8 != 0) u8bytesno ++;
 8002fba:	8a3b      	ldrh	r3, [r7, #16]
 8002fbc:	f003 0307 	and.w	r3, r3, #7
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d002      	beq.n	8002fcc <process_FC1+0x4a>
 8002fc6:	7dfb      	ldrb	r3, [r7, #23]
 8002fc8:	3301      	adds	r3, #1
 8002fca:	75fb      	strb	r3, [r7, #23]
    modH->u8Buffer[ ADD_HI ]  = u8bytesno;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	7dfa      	ldrb	r2, [r7, #23]
 8002fd0:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = ADD_LO;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2203      	movs	r2, #3
 8002fd6:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    modH->u8Buffer[modH->u8BufferSize + u8bytesno - 1 ] = 0;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	7dfb      	ldrb	r3, [r7, #23]
 8002fe4:	4413      	add	r3, r2
 8002fe6:	3b01      	subs	r3, #1
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	4413      	add	r3, r2
 8002fec:	2200      	movs	r2, #0
 8002fee:	74da      	strb	r2, [r3, #19]

    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	75bb      	strb	r3, [r7, #22]

    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	82bb      	strh	r3, [r7, #20]
 8002ff8:	e058      	b.n	80030ac <process_FC1+0x12a>
    {
        u16coil = u16StartCoil + u16currentCoil;
 8002ffa:	8a7a      	ldrh	r2, [r7, #18]
 8002ffc:	8abb      	ldrh	r3, [r7, #20]
 8002ffe:	4413      	add	r3, r2
 8003000:	81bb      	strh	r3, [r7, #12]
        u16currentRegister =  (u16coil / 16);
 8003002:	89bb      	ldrh	r3, [r7, #12]
 8003004:	091b      	lsrs	r3, r3, #4
 8003006:	817b      	strh	r3, [r7, #10]
        u8currentBit = (uint8_t) (u16coil % 16);
 8003008:	89bb      	ldrh	r3, [r7, #12]
 800300a:	b2db      	uxtb	r3, r3
 800300c:	f003 030f 	and.w	r3, r3, #15
 8003010:	727b      	strb	r3, [r7, #9]

        bitWrite(
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8003018:	897b      	ldrh	r3, [r7, #10]
 800301a:	005b      	lsls	r3, r3, #1
 800301c:	4413      	add	r3, r2
 800301e:	881b      	ldrh	r3, [r3, #0]
 8003020:	461a      	mov	r2, r3
 8003022:	7a7b      	ldrb	r3, [r7, #9]
 8003024:	fa42 f303 	asr.w	r3, r2, r3
 8003028:	f003 0301 	and.w	r3, r3, #1
 800302c:	2b00      	cmp	r3, #0
 800302e:	d014      	beq.n	800305a <process_FC1+0xd8>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8003036:	461a      	mov	r2, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4413      	add	r3, r2
 800303c:	7cda      	ldrb	r2, [r3, #19]
 800303e:	7dbb      	ldrb	r3, [r7, #22]
 8003040:	2101      	movs	r1, #1
 8003042:	fa01 f303 	lsl.w	r3, r1, r3
 8003046:	b2db      	uxtb	r3, r3
 8003048:	6879      	ldr	r1, [r7, #4]
 800304a:	f891 1093 	ldrb.w	r1, [r1, #147]	; 0x93
 800304e:	4313      	orrs	r3, r2
 8003050:	b2da      	uxtb	r2, r3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	440b      	add	r3, r1
 8003056:	74da      	strb	r2, [r3, #19]
 8003058:	e015      	b.n	8003086 <process_FC1+0x104>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8003060:	461a      	mov	r2, r3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4413      	add	r3, r2
 8003066:	7cda      	ldrb	r2, [r3, #19]
 8003068:	7dbb      	ldrb	r3, [r7, #22]
 800306a:	2101      	movs	r1, #1
 800306c:	fa01 f303 	lsl.w	r3, r1, r3
 8003070:	b2db      	uxtb	r3, r3
 8003072:	43db      	mvns	r3, r3
 8003074:	b2db      	uxtb	r3, r3
 8003076:	6879      	ldr	r1, [r7, #4]
 8003078:	f891 1093 	ldrb.w	r1, [r1, #147]	; 0x93
 800307c:	4013      	ands	r3, r2
 800307e:	b2da      	uxtb	r2, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	440b      	add	r3, r1
 8003084:	74da      	strb	r2, [r3, #19]
        	modH->u8Buffer[ modH->u8BufferSize ],
            u8bitsno,
		    bitRead( modH->u16regs[ u16currentRegister ], u8currentBit ) );
        u8bitsno ++;
 8003086:	7dbb      	ldrb	r3, [r7, #22]
 8003088:	3301      	adds	r3, #1
 800308a:	75bb      	strb	r3, [r7, #22]

        if (u8bitsno > 7)
 800308c:	7dbb      	ldrb	r3, [r7, #22]
 800308e:	2b07      	cmp	r3, #7
 8003090:	d909      	bls.n	80030a6 <process_FC1+0x124>
        {
            u8bitsno = 0;
 8003092:	2300      	movs	r3, #0
 8003094:	75bb      	strb	r3, [r7, #22]
            modH->u8BufferSize++;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800309c:	3301      	adds	r3, #1
 800309e:	b2da      	uxtb	r2, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 80030a6:	8abb      	ldrh	r3, [r7, #20]
 80030a8:	3301      	adds	r3, #1
 80030aa:	82bb      	strh	r3, [r7, #20]
 80030ac:	8aba      	ldrh	r2, [r7, #20]
 80030ae:	8a3b      	ldrh	r3, [r7, #16]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d3a2      	bcc.n	8002ffa <process_FC1+0x78>
        }
    }

    // send outcoming message
    if (u16Coilno % 8 != 0) modH->u8BufferSize ++;
 80030b4:	8a3b      	ldrh	r3, [r7, #16]
 80030b6:	f003 0307 	and.w	r3, r3, #7
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d007      	beq.n	80030d0 <process_FC1+0x14e>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80030c6:	3301      	adds	r3, #1
 80030c8:	b2da      	uxtb	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize = modH->u8BufferSize +2;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80030d6:	3302      	adds	r3, #2
 80030d8:	73fb      	strb	r3, [r7, #15]
    sendTxBuffer(modH);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f7ff feaf 	bl	8002e3e <sendTxBuffer>
    return u8CopyBufferSize;
 80030e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3718      	adds	r7, #24
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <process_FC3>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC3(modbusHandler_t *modH)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]

    uint16_t u16StartAdd = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	7d5a      	ldrb	r2, [r3, #21]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	7d9b      	ldrb	r3, [r3, #22]
 80030fc:	4619      	mov	r1, r3
 80030fe:	4610      	mov	r0, r2
 8003100:	f7ff fe24 	bl	8002d4c <word>
 8003104:	4603      	mov	r3, r0
 8003106:	81bb      	strh	r3, [r7, #12]
    uint8_t u8regsno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	7dda      	ldrb	r2, [r3, #23]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	7e1b      	ldrb	r3, [r3, #24]
 8003110:	4619      	mov	r1, r3
 8003112:	4610      	mov	r0, r2
 8003114:	f7ff fe1a 	bl	8002d4c <word>
 8003118:	4603      	mov	r3, r0
 800311a:	72fb      	strb	r3, [r7, #11]
    uint8_t u8CopyBufferSize;
    uint16_t i;

    modH->u8Buffer[ 2 ]       = u8regsno * 2;
 800311c:	7afb      	ldrb	r3, [r7, #11]
 800311e:	005b      	lsls	r3, r3, #1
 8003120:	b2da      	uxtb	r2, r3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = 3;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2203      	movs	r2, #3
 800312a:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

    for (i = u16StartAdd; i < u16StartAdd + u8regsno; i++)
 800312e:	89bb      	ldrh	r3, [r7, #12]
 8003130:	81fb      	strh	r3, [r7, #14]
 8003132:	e032      	b.n	800319a <process_FC3+0xae>
    {
    	modH->u8Buffer[ modH->u8BufferSize ] = highByte(modH->u16regs[i]);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800313a:	89fb      	ldrh	r3, [r7, #14]
 800313c:	005b      	lsls	r3, r3, #1
 800313e:	4413      	add	r3, r2
 8003140:	881b      	ldrh	r3, [r3, #0]
 8003142:	0a1b      	lsrs	r3, r3, #8
 8003144:	b29a      	uxth	r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800314c:	4619      	mov	r1, r3
 800314e:	b2d2      	uxtb	r2, r2
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	440b      	add	r3, r1
 8003154:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800315c:	3301      	adds	r3, #1
 800315e:	b2da      	uxtb	r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    	modH->u8Buffer[ modH->u8BufferSize ] = lowByte(modH->u16regs[i]);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800316c:	89fb      	ldrh	r3, [r7, #14]
 800316e:	005b      	lsls	r3, r3, #1
 8003170:	4413      	add	r3, r2
 8003172:	881a      	ldrh	r2, [r3, #0]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800317a:	4619      	mov	r1, r3
 800317c:	b2d2      	uxtb	r2, r2
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	440b      	add	r3, r1
 8003182:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800318a:	3301      	adds	r3, #1
 800318c:	b2da      	uxtb	r2, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    for (i = u16StartAdd; i < u16StartAdd + u8regsno; i++)
 8003194:	89fb      	ldrh	r3, [r7, #14]
 8003196:	3301      	adds	r3, #1
 8003198:	81fb      	strh	r3, [r7, #14]
 800319a:	89fa      	ldrh	r2, [r7, #14]
 800319c:	89b9      	ldrh	r1, [r7, #12]
 800319e:	7afb      	ldrb	r3, [r7, #11]
 80031a0:	440b      	add	r3, r1
 80031a2:	429a      	cmp	r2, r3
 80031a4:	dbc6      	blt.n	8003134 <process_FC3+0x48>
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80031ac:	3302      	adds	r3, #2
 80031ae:	72bb      	strb	r3, [r7, #10]
    sendTxBuffer(modH);
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f7ff fe44 	bl	8002e3e <sendTxBuffer>

    return u8CopyBufferSize;
 80031b6:	f997 300a 	ldrsb.w	r3, [r7, #10]
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3710      	adds	r7, #16
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <process_FC5>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC5( modbusHandler_t *modH )
{
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b084      	sub	sp, #16
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
    uint8_t u8currentBit;
    uint16_t u16currentRegister;
    uint8_t u8CopyBufferSize;
    uint16_t u16coil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	7d5a      	ldrb	r2, [r3, #21]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	7d9b      	ldrb	r3, [r3, #22]
 80031d2:	4619      	mov	r1, r3
 80031d4:	4610      	mov	r0, r2
 80031d6:	f7ff fdb9 	bl	8002d4c <word>
 80031da:	4603      	mov	r3, r0
 80031dc:	81fb      	strh	r3, [r7, #14]

    // point to the register and its bit
    u16currentRegister = (u16coil / 16);
 80031de:	89fb      	ldrh	r3, [r7, #14]
 80031e0:	091b      	lsrs	r3, r3, #4
 80031e2:	81bb      	strh	r3, [r7, #12]
    u8currentBit = (uint8_t) (u16coil % 16);
 80031e4:	89fb      	ldrh	r3, [r7, #14]
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	f003 030f 	and.w	r3, r3, #15
 80031ec:	72fb      	strb	r3, [r7, #11]

    // write to coil
    bitWrite(
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	7ddb      	ldrb	r3, [r3, #23]
 80031f2:	2bff      	cmp	r3, #255	; 0xff
 80031f4:	d115      	bne.n	8003222 <process_FC5+0x60>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80031fc:	89bb      	ldrh	r3, [r7, #12]
 80031fe:	005b      	lsls	r3, r3, #1
 8003200:	4413      	add	r3, r2
 8003202:	8819      	ldrh	r1, [r3, #0]
 8003204:	7afb      	ldrb	r3, [r7, #11]
 8003206:	2201      	movs	r2, #1
 8003208:	fa02 f303 	lsl.w	r3, r2, r3
 800320c:	b29a      	uxth	r2, r3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
 8003214:	89bb      	ldrh	r3, [r7, #12]
 8003216:	005b      	lsls	r3, r3, #1
 8003218:	4403      	add	r3, r0
 800321a:	430a      	orrs	r2, r1
 800321c:	b292      	uxth	r2, r2
 800321e:	801a      	strh	r2, [r3, #0]
 8003220:	e016      	b.n	8003250 <process_FC5+0x8e>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8003228:	89bb      	ldrh	r3, [r7, #12]
 800322a:	005b      	lsls	r3, r3, #1
 800322c:	4413      	add	r3, r2
 800322e:	8819      	ldrh	r1, [r3, #0]
 8003230:	7afb      	ldrb	r3, [r7, #11]
 8003232:	2201      	movs	r2, #1
 8003234:	fa02 f303 	lsl.w	r3, r2, r3
 8003238:	b29b      	uxth	r3, r3
 800323a:	43db      	mvns	r3, r3
 800323c:	b29a      	uxth	r2, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
 8003244:	89bb      	ldrh	r3, [r7, #12]
 8003246:	005b      	lsls	r3, r3, #1
 8003248:	4403      	add	r3, r0
 800324a:	400a      	ands	r2, r1
 800324c:	b292      	uxth	r2, r2
 800324e:	801a      	strh	r2, [r3, #0]
        u8currentBit,
		modH->u8Buffer[ NB_HI ] == 0xff );


    // send answer to master
    modH->u8BufferSize = 6;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2206      	movs	r2, #6
 8003254:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize =  modH->u8BufferSize +2;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800325e:	3302      	adds	r3, #2
 8003260:	72bb      	strb	r3, [r7, #10]
    sendTxBuffer(modH);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f7ff fdeb 	bl	8002e3e <sendTxBuffer>

    return u8CopyBufferSize;
 8003268:	f997 300a 	ldrsb.w	r3, [r7, #10]
}
 800326c:	4618      	mov	r0, r3
 800326e:	3710      	adds	r7, #16
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <process_FC6>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC6(modbusHandler_t *modH )
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]

    uint16_t u16add = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	7d5a      	ldrb	r2, [r3, #21]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	7d9b      	ldrb	r3, [r3, #22]
 8003284:	4619      	mov	r1, r3
 8003286:	4610      	mov	r0, r2
 8003288:	f7ff fd60 	bl	8002d4c <word>
 800328c:	4603      	mov	r3, r0
 800328e:	81fb      	strh	r3, [r7, #14]
    uint8_t u8CopyBufferSize;
    uint16_t u16val = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	7dda      	ldrb	r2, [r3, #23]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	7e1b      	ldrb	r3, [r3, #24]
 8003298:	4619      	mov	r1, r3
 800329a:	4610      	mov	r0, r2
 800329c:	f7ff fd56 	bl	8002d4c <word>
 80032a0:	4603      	mov	r3, r0
 80032a2:	81bb      	strh	r3, [r7, #12]

    modH->u16regs[ u16add ] = u16val;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80032aa:	89fb      	ldrh	r3, [r7, #14]
 80032ac:	005b      	lsls	r3, r3, #1
 80032ae:	4413      	add	r3, r2
 80032b0:	89ba      	ldrh	r2, [r7, #12]
 80032b2:	801a      	strh	r2, [r3, #0]

    // keep the same header
    modH->u8BufferSize = RESPONSE_SIZE;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2206      	movs	r2, #6
 80032b8:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

    u8CopyBufferSize = modH->u8BufferSize + 2;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80032c2:	3302      	adds	r3, #2
 80032c4:	72fb      	strb	r3, [r7, #11]
    sendTxBuffer(modH);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f7ff fdb9 	bl	8002e3e <sendTxBuffer>

    return u8CopyBufferSize;
 80032cc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3710      	adds	r7, #16
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <process_FC15>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC15( modbusHandler_t *modH )
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b086      	sub	sp, #24
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;
    bool bTemp;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	7d5a      	ldrb	r2, [r3, #21]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	7d9b      	ldrb	r3, [r3, #22]
 80032e8:	4619      	mov	r1, r3
 80032ea:	4610      	mov	r0, r2
 80032ec:	f7ff fd2e 	bl	8002d4c <word>
 80032f0:	4603      	mov	r3, r0
 80032f2:	827b      	strh	r3, [r7, #18]
    uint16_t u16Coilno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	7dda      	ldrb	r2, [r3, #23]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	7e1b      	ldrb	r3, [r3, #24]
 80032fc:	4619      	mov	r1, r3
 80032fe:	4610      	mov	r0, r2
 8003300:	f7ff fd24 	bl	8002d4c <word>
 8003304:	4603      	mov	r3, r0
 8003306:	823b      	strh	r3, [r7, #16]


    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 8003308:	2300      	movs	r3, #0
 800330a:	75bb      	strb	r3, [r7, #22]
    u8frameByte = 7;
 800330c:	2307      	movs	r3, #7
 800330e:	75fb      	strb	r3, [r7, #23]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8003310:	2300      	movs	r3, #0
 8003312:	82bb      	strh	r3, [r7, #20]
 8003314:	e058      	b.n	80033c8 <process_FC15+0xf0>
    {

        u16coil = u16StartCoil + u16currentCoil;
 8003316:	8a7a      	ldrh	r2, [r7, #18]
 8003318:	8abb      	ldrh	r3, [r7, #20]
 800331a:	4413      	add	r3, r2
 800331c:	81bb      	strh	r3, [r7, #12]
        u16currentRegister = (u16coil / 16);
 800331e:	89bb      	ldrh	r3, [r7, #12]
 8003320:	091b      	lsrs	r3, r3, #4
 8003322:	817b      	strh	r3, [r7, #10]
        u8currentBit = (uint8_t) (u16coil % 16);
 8003324:	89bb      	ldrh	r3, [r7, #12]
 8003326:	b2db      	uxtb	r3, r3
 8003328:	f003 030f 	and.w	r3, r3, #15
 800332c:	727b      	strb	r3, [r7, #9]

        bTemp = bitRead(
 800332e:	7dfb      	ldrb	r3, [r7, #23]
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	4413      	add	r3, r2
 8003334:	7cdb      	ldrb	r3, [r3, #19]
 8003336:	461a      	mov	r2, r3
 8003338:	7dbb      	ldrb	r3, [r7, #22]
 800333a:	fa42 f303 	asr.w	r3, r2, r3
 800333e:	f003 0301 	and.w	r3, r3, #1
 8003342:	2b00      	cmp	r3, #0
 8003344:	bf14      	ite	ne
 8003346:	2301      	movne	r3, #1
 8003348:	2300      	moveq	r3, #0
 800334a:	723b      	strb	r3, [r7, #8]
        			modH->u8Buffer[ u8frameByte ],
                    u8bitsno );

        bitWrite(
 800334c:	7a3b      	ldrb	r3, [r7, #8]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d015      	beq.n	800337e <process_FC15+0xa6>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8003358:	897b      	ldrh	r3, [r7, #10]
 800335a:	005b      	lsls	r3, r3, #1
 800335c:	4413      	add	r3, r2
 800335e:	8819      	ldrh	r1, [r3, #0]
 8003360:	7a7b      	ldrb	r3, [r7, #9]
 8003362:	2201      	movs	r2, #1
 8003364:	fa02 f303 	lsl.w	r3, r2, r3
 8003368:	b29a      	uxth	r2, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
 8003370:	897b      	ldrh	r3, [r7, #10]
 8003372:	005b      	lsls	r3, r3, #1
 8003374:	4403      	add	r3, r0
 8003376:	430a      	orrs	r2, r1
 8003378:	b292      	uxth	r2, r2
 800337a:	801a      	strh	r2, [r3, #0]
 800337c:	e016      	b.n	80033ac <process_FC15+0xd4>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8003384:	897b      	ldrh	r3, [r7, #10]
 8003386:	005b      	lsls	r3, r3, #1
 8003388:	4413      	add	r3, r2
 800338a:	8819      	ldrh	r1, [r3, #0]
 800338c:	7a7b      	ldrb	r3, [r7, #9]
 800338e:	2201      	movs	r2, #1
 8003390:	fa02 f303 	lsl.w	r3, r2, r3
 8003394:	b29b      	uxth	r3, r3
 8003396:	43db      	mvns	r3, r3
 8003398:	b29a      	uxth	r2, r3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
 80033a0:	897b      	ldrh	r3, [r7, #10]
 80033a2:	005b      	lsls	r3, r3, #1
 80033a4:	4403      	add	r3, r0
 80033a6:	400a      	ands	r2, r1
 80033a8:	b292      	uxth	r2, r2
 80033aa:	801a      	strh	r2, [r3, #0]
            modH->u16regs[ u16currentRegister ],
            u8currentBit,
            bTemp );

        u8bitsno ++;
 80033ac:	7dbb      	ldrb	r3, [r7, #22]
 80033ae:	3301      	adds	r3, #1
 80033b0:	75bb      	strb	r3, [r7, #22]

        if (u8bitsno > 7)
 80033b2:	7dbb      	ldrb	r3, [r7, #22]
 80033b4:	2b07      	cmp	r3, #7
 80033b6:	d904      	bls.n	80033c2 <process_FC15+0xea>
        {
            u8bitsno = 0;
 80033b8:	2300      	movs	r3, #0
 80033ba:	75bb      	strb	r3, [r7, #22]
            u8frameByte++;
 80033bc:	7dfb      	ldrb	r3, [r7, #23]
 80033be:	3301      	adds	r3, #1
 80033c0:	75fb      	strb	r3, [r7, #23]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 80033c2:	8abb      	ldrh	r3, [r7, #20]
 80033c4:	3301      	adds	r3, #1
 80033c6:	82bb      	strh	r3, [r7, #20]
 80033c8:	8aba      	ldrh	r2, [r7, #20]
 80033ca:	8a3b      	ldrh	r3, [r7, #16]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d3a2      	bcc.n	8003316 <process_FC15+0x3e>
        }
    }

    // send outcoming message
    // it's just a copy of the incomping frame until 6th byte
    modH->u8BufferSize         = 6;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2206      	movs	r2, #6
 80033d4:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize = modH->u8BufferSize +2;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80033de:	3302      	adds	r3, #2
 80033e0:	73fb      	strb	r3, [r7, #15]
    sendTxBuffer(modH);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f7ff fd2b 	bl	8002e3e <sendTxBuffer>
    return u8CopyBufferSize;
 80033e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3718      	adds	r7, #24
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <process_FC16>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC16(modbusHandler_t *modH )
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b086      	sub	sp, #24
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
    uint16_t u16StartAdd = modH->u8Buffer[ ADD_HI ] << 8 | modH->u8Buffer[ ADD_LO ];
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	7d5b      	ldrb	r3, [r3, #21]
 8003400:	021b      	lsls	r3, r3, #8
 8003402:	b21a      	sxth	r2, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	7d9b      	ldrb	r3, [r3, #22]
 8003408:	b21b      	sxth	r3, r3
 800340a:	4313      	orrs	r3, r2
 800340c:	b21b      	sxth	r3, r3
 800340e:	82bb      	strh	r3, [r7, #20]
    uint16_t u16regsno = modH->u8Buffer[ NB_HI ] << 8 | modH->u8Buffer[ NB_LO ];
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	7ddb      	ldrb	r3, [r3, #23]
 8003414:	021b      	lsls	r3, r3, #8
 8003416:	b21a      	sxth	r2, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	7e1b      	ldrb	r3, [r3, #24]
 800341c:	b21b      	sxth	r3, r3
 800341e:	4313      	orrs	r3, r2
 8003420:	b21b      	sxth	r3, r3
 8003422:	827b      	strh	r3, [r7, #18]
    uint8_t u8CopyBufferSize;
    uint16_t i;
    uint16_t temp;

    // build header
    modH->u8Buffer[ NB_HI ]   = 0;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	75da      	strb	r2, [r3, #23]
    modH->u8Buffer[ NB_LO ]   = (uint8_t) u16regsno; // answer is always 256 or less bytes
 800342a:	8a7b      	ldrh	r3, [r7, #18]
 800342c:	b2da      	uxtb	r2, r3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	761a      	strb	r2, [r3, #24]
    modH->u8BufferSize         = RESPONSE_SIZE;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2206      	movs	r2, #6
 8003436:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

    // write registers
    for (i = 0; i < u16regsno; i++)
 800343a:	2300      	movs	r3, #0
 800343c:	82fb      	strh	r3, [r7, #22]
 800343e:	e01d      	b.n	800347c <process_FC16+0x88>
    {
        temp = word(
        		modH->u8Buffer[ (BYTE_CNT + 1) + i * 2 ],
 8003440:	8afb      	ldrh	r3, [r7, #22]
 8003442:	005b      	lsls	r3, r3, #1
 8003444:	3307      	adds	r3, #7
        temp = word(
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	4413      	add	r3, r2
 800344a:	7cd8      	ldrb	r0, [r3, #19]
				modH->u8Buffer[ (BYTE_CNT + 2) + i * 2 ]);
 800344c:	8afb      	ldrh	r3, [r7, #22]
 800344e:	3304      	adds	r3, #4
 8003450:	005b      	lsls	r3, r3, #1
        temp = word(
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	4413      	add	r3, r2
 8003456:	7cdb      	ldrb	r3, [r3, #19]
 8003458:	4619      	mov	r1, r3
 800345a:	f7ff fc77 	bl	8002d4c <word>
 800345e:	4603      	mov	r3, r0
 8003460:	81fb      	strh	r3, [r7, #14]

        modH->u16regs[ u16StartAdd + i ] = temp;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8003468:	8ab9      	ldrh	r1, [r7, #20]
 800346a:	8afb      	ldrh	r3, [r7, #22]
 800346c:	440b      	add	r3, r1
 800346e:	005b      	lsls	r3, r3, #1
 8003470:	4413      	add	r3, r2
 8003472:	89fa      	ldrh	r2, [r7, #14]
 8003474:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < u16regsno; i++)
 8003476:	8afb      	ldrh	r3, [r7, #22]
 8003478:	3301      	adds	r3, #1
 800347a:	82fb      	strh	r3, [r7, #22]
 800347c:	8afa      	ldrh	r2, [r7, #22]
 800347e:	8a7b      	ldrh	r3, [r7, #18]
 8003480:	429a      	cmp	r2, r3
 8003482:	d3dd      	bcc.n	8003440 <process_FC16+0x4c>
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800348a:	3302      	adds	r3, #2
 800348c:	747b      	strb	r3, [r7, #17]
    sendTxBuffer(modH);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f7ff fcd5 	bl	8002e3e <sendTxBuffer>

    return u8CopyBufferSize;
 8003494:	f997 3011 	ldrsb.w	r3, [r7, #17]
}
 8003498:	4618      	mov	r0, r3
 800349a:	3718      	adds	r7, #24
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}

080034a0 <modbus_master_set_one>:
modbusHandler_t ModbusH2;
int16_t ModbusDATA2[8];
modbus_t telegram;

int8_t modbus_master_set_one(uint8_t slave_id, uint8_t function_code, uint16_t reg_start, uint16_t data) // modbus_parameter: 0-HOLDING, 1-INPUT, 2-COIL, 3-DISCRETE
{
 80034a0:	b590      	push	{r4, r7, lr}
 80034a2:	b087      	sub	sp, #28
 80034a4:	af02      	add	r7, sp, #8
 80034a6:	4604      	mov	r4, r0
 80034a8:	4608      	mov	r0, r1
 80034aa:	4611      	mov	r1, r2
 80034ac:	461a      	mov	r2, r3
 80034ae:	4623      	mov	r3, r4
 80034b0:	71fb      	strb	r3, [r7, #7]
 80034b2:	4603      	mov	r3, r0
 80034b4:	71bb      	strb	r3, [r7, #6]
 80034b6:	460b      	mov	r3, r1
 80034b8:	80bb      	strh	r3, [r7, #4]
 80034ba:	4613      	mov	r3, r2
 80034bc:	807b      	strh	r3, [r7, #2]
	uint32_t u32NotificationValue;

	telegram.u8id = slave_id; // slave address
 80034be:	4a1a      	ldr	r2, [pc, #104]	; (8003528 <modbus_master_set_one+0x88>)
 80034c0:	79fb      	ldrb	r3, [r7, #7]
 80034c2:	7013      	strb	r3, [r2, #0]
	telegram.u8fct = function_code; // function code (this one is registers read)
 80034c4:	4a18      	ldr	r2, [pc, #96]	; (8003528 <modbus_master_set_one+0x88>)
 80034c6:	79bb      	ldrb	r3, [r7, #6]
 80034c8:	7053      	strb	r3, [r2, #1]
	telegram.u16RegAdd = reg_start; // start address in slave
 80034ca:	4a17      	ldr	r2, [pc, #92]	; (8003528 <modbus_master_set_one+0x88>)
 80034cc:	88bb      	ldrh	r3, [r7, #4]
 80034ce:	8053      	strh	r3, [r2, #2]
	telegram.u16CoilsNo = 1; // number of elements (coils or registers) to read
 80034d0:	4b15      	ldr	r3, [pc, #84]	; (8003528 <modbus_master_set_one+0x88>)
 80034d2:	2201      	movs	r2, #1
 80034d4:	809a      	strh	r2, [r3, #4]
	ModbusDATA2[0] = data;
 80034d6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80034da:	4b14      	ldr	r3, [pc, #80]	; (800352c <modbus_master_set_one+0x8c>)
 80034dc:	801a      	strh	r2, [r3, #0]
	telegram.u16reg = ModbusDATA2; // pointer to a memory array
 80034de:	4b12      	ldr	r3, [pc, #72]	; (8003528 <modbus_master_set_one+0x88>)
 80034e0:	4a12      	ldr	r2, [pc, #72]	; (800352c <modbus_master_set_one+0x8c>)
 80034e2:	609a      	str	r2, [r3, #8]

	ModbusQuery(&ModbusH2, telegram);
 80034e4:	4b10      	ldr	r3, [pc, #64]	; (8003528 <modbus_master_set_one+0x88>)
 80034e6:	68da      	ldr	r2, [r3, #12]
 80034e8:	9200      	str	r2, [sp, #0]
 80034ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034ec:	4810      	ldr	r0, [pc, #64]	; (8003530 <modbus_master_set_one+0x90>)
 80034ee:	f7fe ff37 	bl	8002360 <ModbusQuery>
	u32NotificationValue = ulTaskNotifyTake(pdTRUE, 500);
 80034f2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80034f6:	2001      	movs	r0, #1
 80034f8:	f011 f940 	bl	801477c <ulTaskNotifyTake>
 80034fc:	60f8      	str	r0, [r7, #12]
	if (u32NotificationValue == 0)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d102      	bne.n	800350a <modbus_master_set_one+0x6a>
	{
		return -1;
 8003504:	f04f 33ff 	mov.w	r3, #4294967295
 8003508:	e009      	b.n	800351e <modbus_master_set_one+0x7e>
	}
	if (ModbusH2.i8lastError == ERR_TIME_OUT)
 800350a:	4b09      	ldr	r3, [pc, #36]	; (8003530 <modbus_master_set_one+0x90>)
 800350c:	f993 3012 	ldrsb.w	r3, [r3, #18]
 8003510:	f113 0f08 	cmn.w	r3, #8
 8003514:	d102      	bne.n	800351c <modbus_master_set_one+0x7c>
	{
		return -2;
 8003516:	f06f 0301 	mvn.w	r3, #1
 800351a:	e000      	b.n	800351e <modbus_master_set_one+0x7e>
	}
	return 1;
 800351c:	2301      	movs	r3, #1
}
 800351e:	4618      	mov	r0, r3
 8003520:	3714      	adds	r7, #20
 8003522:	46bd      	mov	sp, r7
 8003524:	bd90      	pop	{r4, r7, pc}
 8003526:	bf00      	nop
 8003528:	20013f84 	.word	0x20013f84
 800352c:	20013f94 	.word	0x20013f94
 8003530:	20013e40 	.word	0x20013e40

08003534 <modbus_master_get_one>:

int32_t modbus_master_get_one(uint8_t slave_id, uint8_t function_code, uint16_t reg_start) // modbus_parameter: 0-HOLDING, 1-INPUT, 2-COIL, 3-DISCRETE
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b086      	sub	sp, #24
 8003538:	af02      	add	r7, sp, #8
 800353a:	4603      	mov	r3, r0
 800353c:	71fb      	strb	r3, [r7, #7]
 800353e:	460b      	mov	r3, r1
 8003540:	71bb      	strb	r3, [r7, #6]
 8003542:	4613      	mov	r3, r2
 8003544:	80bb      	strh	r3, [r7, #4]
	uint32_t u32NotificationValue;

	telegram.u8id = slave_id; // slave address
 8003546:	4a19      	ldr	r2, [pc, #100]	; (80035ac <modbus_master_get_one+0x78>)
 8003548:	79fb      	ldrb	r3, [r7, #7]
 800354a:	7013      	strb	r3, [r2, #0]
	telegram.u8fct = function_code; // function code (this one is registers read)
 800354c:	4a17      	ldr	r2, [pc, #92]	; (80035ac <modbus_master_get_one+0x78>)
 800354e:	79bb      	ldrb	r3, [r7, #6]
 8003550:	7053      	strb	r3, [r2, #1]
	telegram.u16RegAdd = reg_start; // start address in slave
 8003552:	4a16      	ldr	r2, [pc, #88]	; (80035ac <modbus_master_get_one+0x78>)
 8003554:	88bb      	ldrh	r3, [r7, #4]
 8003556:	8053      	strh	r3, [r2, #2]
	telegram.u16CoilsNo = 1; // number of elements (coils or registers) to read
 8003558:	4b14      	ldr	r3, [pc, #80]	; (80035ac <modbus_master_get_one+0x78>)
 800355a:	2201      	movs	r2, #1
 800355c:	809a      	strh	r2, [r3, #4]
	telegram.u16reg = ModbusDATA2; // pointer to a memory array
 800355e:	4b13      	ldr	r3, [pc, #76]	; (80035ac <modbus_master_get_one+0x78>)
 8003560:	4a13      	ldr	r2, [pc, #76]	; (80035b0 <modbus_master_get_one+0x7c>)
 8003562:	609a      	str	r2, [r3, #8]

	ModbusQuery(&ModbusH2, telegram);
 8003564:	4b11      	ldr	r3, [pc, #68]	; (80035ac <modbus_master_get_one+0x78>)
 8003566:	68da      	ldr	r2, [r3, #12]
 8003568:	9200      	str	r2, [sp, #0]
 800356a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800356c:	4811      	ldr	r0, [pc, #68]	; (80035b4 <modbus_master_get_one+0x80>)
 800356e:	f7fe fef7 	bl	8002360 <ModbusQuery>
	u32NotificationValue = ulTaskNotifyTake(pdTRUE, 500);
 8003572:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003576:	2001      	movs	r0, #1
 8003578:	f011 f900 	bl	801477c <ulTaskNotifyTake>
 800357c:	60f8      	str	r0, [r7, #12]
	if (u32NotificationValue == 0)
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d102      	bne.n	800358a <modbus_master_get_one+0x56>
	{
		return -1;
 8003584:	f04f 33ff 	mov.w	r3, #4294967295
 8003588:	e00b      	b.n	80035a2 <modbus_master_get_one+0x6e>
	}
	if (ModbusH2.i8lastError == ERR_TIME_OUT)
 800358a:	4b0a      	ldr	r3, [pc, #40]	; (80035b4 <modbus_master_get_one+0x80>)
 800358c:	f993 3012 	ldrsb.w	r3, [r3, #18]
 8003590:	f113 0f08 	cmn.w	r3, #8
 8003594:	d102      	bne.n	800359c <modbus_master_get_one+0x68>
	{
		return -2;
 8003596:	f06f 0301 	mvn.w	r3, #1
 800359a:	e002      	b.n	80035a2 <modbus_master_get_one+0x6e>
	}
	return ModbusDATA2[0];
 800359c:	4b04      	ldr	r3, [pc, #16]	; (80035b0 <modbus_master_get_one+0x7c>)
 800359e:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3710      	adds	r7, #16
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	20013f84 	.word	0x20013f84
 80035b0:	20013f94 	.word	0x20013f94
 80035b4:	20013e40 	.word	0x20013e40

080035b8 <init_modbus_master>:
	return 1;
}

/* Master initialization */
void init_modbus_master()
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	af00      	add	r7, sp, #0
	ModbusH2.uModbusType = MB_MASTER;
 80035bc:	4b13      	ldr	r3, [pc, #76]	; (800360c <init_modbus_master+0x54>)
 80035be:	2204      	movs	r2, #4
 80035c0:	701a      	strb	r2, [r3, #0]
	ModbusH2.port =  &huart5;
 80035c2:	4b12      	ldr	r3, [pc, #72]	; (800360c <init_modbus_master+0x54>)
 80035c4:	4a12      	ldr	r2, [pc, #72]	; (8003610 <init_modbus_master+0x58>)
 80035c6:	605a      	str	r2, [r3, #4]
	ModbusH2.u8id = 0; // For master it must be 0
 80035c8:	4b10      	ldr	r3, [pc, #64]	; (800360c <init_modbus_master+0x54>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	721a      	strb	r2, [r3, #8]
	ModbusH2.u16timeOut = 100;
 80035ce:	4b0f      	ldr	r3, [pc, #60]	; (800360c <init_modbus_master+0x54>)
 80035d0:	2264      	movs	r2, #100	; 0x64
 80035d2:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
	ModbusH2.EN_Port = UART5_DIR_GPIO_Port;
 80035d6:	4b0d      	ldr	r3, [pc, #52]	; (800360c <init_modbus_master+0x54>)
 80035d8:	4a0e      	ldr	r2, [pc, #56]	; (8003614 <init_modbus_master+0x5c>)
 80035da:	60da      	str	r2, [r3, #12]
	ModbusH2.EN_Pin = UART5_DIR_Pin;
 80035dc:	4b0b      	ldr	r3, [pc, #44]	; (800360c <init_modbus_master+0x54>)
 80035de:	2208      	movs	r2, #8
 80035e0:	821a      	strh	r2, [r3, #16]
	ModbusH2.u16regs = ModbusDATA2;
 80035e2:	4b0a      	ldr	r3, [pc, #40]	; (800360c <init_modbus_master+0x54>)
 80035e4:	4a0c      	ldr	r2, [pc, #48]	; (8003618 <init_modbus_master+0x60>)
 80035e6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	ModbusH2.u16regsize= sizeof(ModbusDATA2)/sizeof(ModbusDATA2[0]);
 80035ea:	4b08      	ldr	r3, [pc, #32]	; (800360c <init_modbus_master+0x54>)
 80035ec:	2208      	movs	r2, #8
 80035ee:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
	ModbusH2.xTypeHW = USART_HW_DMA;
 80035f2:	4b06      	ldr	r3, [pc, #24]	; (800360c <init_modbus_master+0x54>)
 80035f4:	2204      	movs	r2, #4
 80035f6:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
	//Initialize Modbus library
	ModbusInit(&ModbusH2);
 80035fa:	4804      	ldr	r0, [pc, #16]	; (800360c <init_modbus_master+0x54>)
 80035fc:	f7fe fc34 	bl	8001e68 <ModbusInit>
	//Start capturing traffic on serial Port
	ModbusStart(&ModbusH2);
 8003600:	4802      	ldr	r0, [pc, #8]	; (800360c <init_modbus_master+0x54>)
 8003602:	f7fe fcd3 	bl	8001fac <ModbusStart>
}
 8003606:	bf00      	nop
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	20013e40 	.word	0x20013e40
 8003610:	200147b0 	.word	0x200147b0
 8003614:	40020c00 	.word	0x40020c00
 8003618:	20013f94 	.word	0x20013f94

0800361c <HAL_UART_TxCpltCallback>:
 * Modbus functionality.
 * @ingroup UartHandle UART HAL handler
 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b086      	sub	sp, #24
 8003620:	af02      	add	r7, sp, #8
 8003622:	6078      	str	r0, [r7, #4]
	/* Modbus RTU TX callback BEGIN */
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8003624:	2300      	movs	r3, #0
 8003626:	60bb      	str	r3, [r7, #8]
	int i;
	for (i = 0; i < numberHandlers; i++ )
 8003628:	2300      	movs	r3, #0
 800362a:	60fb      	str	r3, [r7, #12]
 800362c:	e019      	b.n	8003662 <HAL_UART_TxCpltCallback+0x46>
	{
	   	if (mHandlers[i]->port == huart  )
 800362e:	4a17      	ldr	r2, [pc, #92]	; (800368c <HAL_UART_TxCpltCallback+0x70>)
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	429a      	cmp	r2, r3
 800363c:	d10e      	bne.n	800365c <HAL_UART_TxCpltCallback+0x40>
	   	{
	   		// notify the end of TX
	   		xTaskNotifyFromISR(mHandlers[i]->myTaskModbusAHandle, 0, eNoAction, &xHigherPriorityTaskWoken);
 800363e:	4a13      	ldr	r2, [pc, #76]	; (800368c <HAL_UART_TxCpltCallback+0x70>)
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003646:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
 800364a:	f107 0308 	add.w	r3, r7, #8
 800364e:	9300      	str	r3, [sp, #0]
 8003650:	2300      	movs	r3, #0
 8003652:	2200      	movs	r2, #0
 8003654:	2100      	movs	r1, #0
 8003656:	f011 f991 	bl	801497c <xTaskGenericNotifyFromISR>
	   		break;
 800365a:	e008      	b.n	800366e <HAL_UART_TxCpltCallback+0x52>
	for (i = 0; i < numberHandlers; i++ )
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	3301      	adds	r3, #1
 8003660:	60fb      	str	r3, [r7, #12]
 8003662:	4b0b      	ldr	r3, [pc, #44]	; (8003690 <HAL_UART_TxCpltCallback+0x74>)
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	461a      	mov	r2, r3
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	4293      	cmp	r3, r2
 800366c:	dbdf      	blt.n	800362e <HAL_UART_TxCpltCallback+0x12>
	   	}

	}
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d007      	beq.n	8003684 <HAL_UART_TxCpltCallback+0x68>
 8003674:	4b07      	ldr	r3, [pc, #28]	; (8003694 <HAL_UART_TxCpltCallback+0x78>)
 8003676:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800367a:	601a      	str	r2, [r3, #0]
 800367c:	f3bf 8f4f 	dsb	sy
 8003680:	f3bf 8f6f 	isb	sy
	/*
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 * */

}
 8003684:	bf00      	nop
 8003686:	3710      	adds	r7, #16
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	20013e38 	.word	0x20013e38
 8003690:	20000038 	.word	0x20000038
 8003694:	e000ed04 	.word	0xe000ed04

08003698 <HAL_UART_RxCpltCallback>:
 * user should implement the correct control flow and verification to maintain
 * Modbus functionality.
 * @ingroup UartHandle UART HAL handler
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8003698:	b590      	push	{r4, r7, lr}
 800369a:	b087      	sub	sp, #28
 800369c:	af02      	add	r7, sp, #8
 800369e:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80036a0:	2300      	movs	r3, #0
 80036a2:	60bb      	str	r3, [r7, #8]

	/* Modbus RTU RX callback BEGIN */
    int i;
    for (i = 0; i < numberHandlers; i++ )
 80036a4:	2300      	movs	r3, #0
 80036a6:	60fb      	str	r3, [r7, #12]
 80036a8:	e042      	b.n	8003730 <HAL_UART_RxCpltCallback+0x98>
    {
    	if (mHandlers[i]->port == UartHandle  )
 80036aa:	4a2d      	ldr	r2, [pc, #180]	; (8003760 <HAL_UART_RxCpltCallback+0xc8>)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d137      	bne.n	800372a <HAL_UART_RxCpltCallback+0x92>
    	{

    		if(mHandlers[i]->xTypeHW == USART_HW)
 80036ba:	4a29      	ldr	r2, [pc, #164]	; (8003760 <HAL_UART_RxCpltCallback+0xc8>)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036c2:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d139      	bne.n	800373e <HAL_UART_RxCpltCallback+0xa6>
    		{
    			RingAdd(&mHandlers[i]->xBufferRX, mHandlers[i]->dataRX);
 80036ca:	4a25      	ldr	r2, [pc, #148]	; (8003760 <HAL_UART_RxCpltCallback+0xc8>)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036d2:	f103 02bc 	add.w	r2, r3, #188	; 0xbc
 80036d6:	4922      	ldr	r1, [pc, #136]	; (8003760 <HAL_UART_RxCpltCallback+0xc8>)
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80036de:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 80036e2:	4619      	mov	r1, r3
 80036e4:	4610      	mov	r0, r2
 80036e6:	f7fe faf7 	bl	8001cd8 <RingAdd>
    			HAL_UART_Receive_IT(mHandlers[i]->port, &mHandlers[i]->dataRX, 1);
 80036ea:	4a1d      	ldr	r2, [pc, #116]	; (8003760 <HAL_UART_RxCpltCallback+0xc8>)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036f2:	6858      	ldr	r0, [r3, #4]
 80036f4:	4a1a      	ldr	r2, [pc, #104]	; (8003760 <HAL_UART_RxCpltCallback+0xc8>)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036fc:	33a6      	adds	r3, #166	; 0xa6
 80036fe:	2201      	movs	r2, #1
 8003700:	4619      	mov	r1, r3
 8003702:	f00c f99f 	bl	800fa44 <HAL_UART_Receive_IT>
    			xTimerResetFromISR(mHandlers[i]->xTimerT35, &xHigherPriorityTaskWoken);
 8003706:	4a16      	ldr	r2, [pc, #88]	; (8003760 <HAL_UART_RxCpltCallback+0xc8>)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800370e:	f8d3 40b0 	ldr.w	r4, [r3, #176]	; 0xb0
 8003712:	f010 fb61 	bl	8013dd8 <xTaskGetTickCountFromISR>
 8003716:	4602      	mov	r2, r0
 8003718:	f107 0308 	add.w	r3, r7, #8
 800371c:	2100      	movs	r1, #0
 800371e:	9100      	str	r1, [sp, #0]
 8003720:	2107      	movs	r1, #7
 8003722:	4620      	mov	r0, r4
 8003724:	f011 fafe 	bl	8014d24 <xTimerGenericCommand>
    		}
    		break;
 8003728:	e009      	b.n	800373e <HAL_UART_RxCpltCallback+0xa6>
    for (i = 0; i < numberHandlers; i++ )
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	3301      	adds	r3, #1
 800372e:	60fb      	str	r3, [r7, #12]
 8003730:	4b0c      	ldr	r3, [pc, #48]	; (8003764 <HAL_UART_RxCpltCallback+0xcc>)
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	461a      	mov	r2, r3
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	4293      	cmp	r3, r2
 800373a:	dbb6      	blt.n	80036aa <HAL_UART_RxCpltCallback+0x12>
 800373c:	e000      	b.n	8003740 <HAL_UART_RxCpltCallback+0xa8>
    		break;
 800373e:	bf00      	nop
    	}
    }
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d007      	beq.n	8003756 <HAL_UART_RxCpltCallback+0xbe>
 8003746:	4b08      	ldr	r3, [pc, #32]	; (8003768 <HAL_UART_RxCpltCallback+0xd0>)
 8003748:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800374c:	601a      	str	r2, [r3, #0]
 800374e:	f3bf 8f4f 	dsb	sy
 8003752:	f3bf 8f6f 	isb	sy
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 *
	 * */

}
 8003756:	bf00      	nop
 8003758:	3714      	adds	r7, #20
 800375a:	46bd      	mov	sp, r7
 800375c:	bd90      	pop	{r4, r7, pc}
 800375e:	bf00      	nop
 8003760:	20013e38 	.word	0x20013e38
 8003764:	20000038 	.word	0x20000038
 8003768:	e000ed04 	.word	0xe000ed04

0800376c <HAL_UART_ErrorCallback>:
 * handled by the HAL
 * */


void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]

 int i;

 for (i = 0; i < numberHandlers; i++ )
 8003774:	2300      	movs	r3, #0
 8003776:	60fb      	str	r3, [r7, #12]
 8003778:	e03f      	b.n	80037fa <HAL_UART_ErrorCallback+0x8e>
 {
    	if (mHandlers[i]->port == huart  )
 800377a:	4a26      	ldr	r2, [pc, #152]	; (8003814 <HAL_UART_ErrorCallback+0xa8>)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	429a      	cmp	r2, r3
 8003788:	d134      	bne.n	80037f4 <HAL_UART_ErrorCallback+0x88>
    	{

    		if(mHandlers[i]->xTypeHW == USART_HW_DMA)
 800378a:	4a22      	ldr	r2, [pc, #136]	; (8003814 <HAL_UART_ErrorCallback+0xa8>)
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003792:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8003796:	2b04      	cmp	r3, #4
 8003798:	d136      	bne.n	8003808 <HAL_UART_ErrorCallback+0x9c>
    		{
    			while(HAL_UARTEx_ReceiveToIdle_DMA(mHandlers[i]->port, mHandlers[i]->xBufferRX.uxBuffer, MAX_BUFFER) != HAL_OK)
 800379a:	e007      	b.n	80037ac <HAL_UART_ErrorCallback+0x40>
    		    {
    					HAL_UART_DMAStop(mHandlers[i]->port);
 800379c:	4a1d      	ldr	r2, [pc, #116]	; (8003814 <HAL_UART_ErrorCallback+0xa8>)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	4618      	mov	r0, r3
 80037a8:	f00c f9fa 	bl	800fba0 <HAL_UART_DMAStop>
    			while(HAL_UARTEx_ReceiveToIdle_DMA(mHandlers[i]->port, mHandlers[i]->xBufferRX.uxBuffer, MAX_BUFFER) != HAL_OK)
 80037ac:	4a19      	ldr	r2, [pc, #100]	; (8003814 <HAL_UART_ErrorCallback+0xa8>)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037b4:	6858      	ldr	r0, [r3, #4]
 80037b6:	4a17      	ldr	r2, [pc, #92]	; (8003814 <HAL_UART_ErrorCallback+0xa8>)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037be:	33bc      	adds	r3, #188	; 0xbc
 80037c0:	2280      	movs	r2, #128	; 0x80
 80037c2:	4619      	mov	r1, r3
 80037c4:	f00c fa6b 	bl	800fc9e <HAL_UARTEx_ReceiveToIdle_DMA>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d1e6      	bne.n	800379c <HAL_UART_ErrorCallback+0x30>
   				}
				__HAL_DMA_DISABLE_IT(mHandlers[i]->port->hdmarx, DMA_IT_HT); // we don't need half-transfer interrupt
 80037ce:	4a11      	ldr	r2, [pc, #68]	; (8003814 <HAL_UART_ErrorCallback+0xa8>)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	490d      	ldr	r1, [pc, #52]	; (8003814 <HAL_UART_ErrorCallback+0xa8>)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f022 0208 	bic.w	r2, r2, #8
 80037f0:	601a      	str	r2, [r3, #0]

    		}

    		break;
 80037f2:	e009      	b.n	8003808 <HAL_UART_ErrorCallback+0x9c>
 for (i = 0; i < numberHandlers; i++ )
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	3301      	adds	r3, #1
 80037f8:	60fb      	str	r3, [r7, #12]
 80037fa:	4b07      	ldr	r3, [pc, #28]	; (8003818 <HAL_UART_ErrorCallback+0xac>)
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	461a      	mov	r2, r3
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	4293      	cmp	r3, r2
 8003804:	dbb9      	blt.n	800377a <HAL_UART_ErrorCallback+0xe>
    	}
   }
}
 8003806:	e000      	b.n	800380a <HAL_UART_ErrorCallback+0x9e>
    		break;
 8003808:	bf00      	nop
}
 800380a:	bf00      	nop
 800380c:	3710      	adds	r7, #16
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	20013e38 	.word	0x20013e38
 8003818:	20000038 	.word	0x20000038

0800381c <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b086      	sub	sp, #24
 8003820:	af02      	add	r7, sp, #8
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	460b      	mov	r3, r1
 8003826:	807b      	strh	r3, [r7, #2]
	    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8003828:	2300      	movs	r3, #0
 800382a:	60bb      	str	r3, [r7, #8]
		/* Modbus RTU RX callback BEGIN */
	    int i;
	    for (i = 0; i < numberHandlers; i++ )
 800382c:	2300      	movs	r3, #0
 800382e:	60fb      	str	r3, [r7, #12]
 8003830:	e05f      	b.n	80038f2 <HAL_UARTEx_RxEventCallback+0xd6>
	    {
	    	if (mHandlers[i]->port == huart  )
 8003832:	4a3b      	ldr	r2, [pc, #236]	; (8003920 <HAL_UARTEx_RxEventCallback+0x104>)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	429a      	cmp	r2, r3
 8003840:	d154      	bne.n	80038ec <HAL_UARTEx_RxEventCallback+0xd0>
	    	{


	    		if(mHandlers[i]->xTypeHW == USART_HW_DMA)
 8003842:	4a37      	ldr	r2, [pc, #220]	; (8003920 <HAL_UARTEx_RxEventCallback+0x104>)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800384a:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800384e:	2b04      	cmp	r3, #4
 8003850:	d156      	bne.n	8003900 <HAL_UARTEx_RxEventCallback+0xe4>
	    		{
	    			if(Size) //check if we have received any byte
 8003852:	887b      	ldrh	r3, [r7, #2]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d053      	beq.n	8003900 <HAL_UARTEx_RxEventCallback+0xe4>
	    			{
		    				mHandlers[i]->xBufferRX.u8available = Size;
 8003858:	4a31      	ldr	r2, [pc, #196]	; (8003920 <HAL_UARTEx_RxEventCallback+0x104>)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003860:	887a      	ldrh	r2, [r7, #2]
 8003862:	b2d2      	uxtb	r2, r2
 8003864:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
		    				mHandlers[i]->xBufferRX.overflow = false;
 8003868:	4a2d      	ldr	r2, [pc, #180]	; (8003920 <HAL_UARTEx_RxEventCallback+0x104>)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f

		    				while(HAL_UARTEx_ReceiveToIdle_DMA(mHandlers[i]->port, mHandlers[i]->xBufferRX.uxBuffer, MAX_BUFFER) != HAL_OK)
 8003876:	e007      	b.n	8003888 <HAL_UARTEx_RxEventCallback+0x6c>
		    				{
		    					HAL_UART_DMAStop(mHandlers[i]->port);
 8003878:	4a29      	ldr	r2, [pc, #164]	; (8003920 <HAL_UARTEx_RxEventCallback+0x104>)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	4618      	mov	r0, r3
 8003884:	f00c f98c 	bl	800fba0 <HAL_UART_DMAStop>
		    				while(HAL_UARTEx_ReceiveToIdle_DMA(mHandlers[i]->port, mHandlers[i]->xBufferRX.uxBuffer, MAX_BUFFER) != HAL_OK)
 8003888:	4a25      	ldr	r2, [pc, #148]	; (8003920 <HAL_UARTEx_RxEventCallback+0x104>)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003890:	6858      	ldr	r0, [r3, #4]
 8003892:	4a23      	ldr	r2, [pc, #140]	; (8003920 <HAL_UARTEx_RxEventCallback+0x104>)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800389a:	33bc      	adds	r3, #188	; 0xbc
 800389c:	2280      	movs	r2, #128	; 0x80
 800389e:	4619      	mov	r1, r3
 80038a0:	f00c f9fd 	bl	800fc9e <HAL_UARTEx_ReceiveToIdle_DMA>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d1e6      	bne.n	8003878 <HAL_UARTEx_RxEventCallback+0x5c>

		    				}
		    				__HAL_DMA_DISABLE_IT(mHandlers[i]->port->hdmarx, DMA_IT_HT); // we don't need half-transfer interrupt
 80038aa:	4a1d      	ldr	r2, [pc, #116]	; (8003920 <HAL_UARTEx_RxEventCallback+0x104>)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	4919      	ldr	r1, [pc, #100]	; (8003920 <HAL_UARTEx_RxEventCallback+0x104>)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f022 0208 	bic.w	r2, r2, #8
 80038cc:	601a      	str	r2, [r3, #0]

		    				xTaskNotifyFromISR(mHandlers[i]->myTaskModbusAHandle, 0 , eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 80038ce:	4a14      	ldr	r2, [pc, #80]	; (8003920 <HAL_UARTEx_RxEventCallback+0x104>)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038d6:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
 80038da:	f107 0308 	add.w	r3, r7, #8
 80038de:	9300      	str	r3, [sp, #0]
 80038e0:	2300      	movs	r3, #0
 80038e2:	2203      	movs	r2, #3
 80038e4:	2100      	movs	r1, #0
 80038e6:	f011 f849 	bl	801497c <xTaskGenericNotifyFromISR>
	    			}
	    		}

	    		break;
 80038ea:	e009      	b.n	8003900 <HAL_UARTEx_RxEventCallback+0xe4>
	    for (i = 0; i < numberHandlers; i++ )
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	3301      	adds	r3, #1
 80038f0:	60fb      	str	r3, [r7, #12]
 80038f2:	4b0c      	ldr	r3, [pc, #48]	; (8003924 <HAL_UARTEx_RxEventCallback+0x108>)
 80038f4:	781b      	ldrb	r3, [r3, #0]
 80038f6:	461a      	mov	r2, r3
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	4293      	cmp	r3, r2
 80038fc:	db99      	blt.n	8003832 <HAL_UARTEx_RxEventCallback+0x16>
 80038fe:	e000      	b.n	8003902 <HAL_UARTEx_RxEventCallback+0xe6>
	    		break;
 8003900:	bf00      	nop
	    	}
	    }
	    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d007      	beq.n	8003918 <HAL_UARTEx_RxEventCallback+0xfc>
 8003908:	4b07      	ldr	r3, [pc, #28]	; (8003928 <HAL_UARTEx_RxEventCallback+0x10c>)
 800390a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800390e:	601a      	str	r2, [r3, #0]
 8003910:	f3bf 8f4f 	dsb	sy
 8003914:	f3bf 8f6f 	isb	sy
}
 8003918:	bf00      	nop
 800391a:	3710      	adds	r7, #16
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}
 8003920:	20013e38 	.word	0x20013e38
 8003924:	20000038 	.word	0x20000038
 8003928:	e000ed04 	.word	0xe000ed04

0800392c <cJSON_GetErrorPtr>:
    size_t position;
} error;
static error global_error = { NULL, 0 };

CJSON_PUBLIC(const char *) cJSON_GetErrorPtr(void)
{
 800392c:	b480      	push	{r7}
 800392e:	af00      	add	r7, sp, #0
    return (const char*) (global_error.json + global_error.position);
 8003930:	4b04      	ldr	r3, [pc, #16]	; (8003944 <cJSON_GetErrorPtr+0x18>)
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	4b03      	ldr	r3, [pc, #12]	; (8003944 <cJSON_GetErrorPtr+0x18>)
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	4413      	add	r3, r2
}
 800393a:	4618      	mov	r0, r3
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr
 8003944:	2000003c 	.word	0x2000003c

08003948 <case_insensitive_strcmp>:
    return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 8003948:	b480      	push	{r7}
 800394a:	b085      	sub	sp, #20
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d002      	beq.n	800395e <case_insensitive_strcmp+0x16>
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d101      	bne.n	8003962 <case_insensitive_strcmp+0x1a>
    {
        return 1;
 800395e:	2301      	movs	r3, #1
 8003960:	e056      	b.n	8003a10 <case_insensitive_strcmp+0xc8>
    }

    if (string1 == string2)
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	429a      	cmp	r2, r3
 8003968:	d10d      	bne.n	8003986 <case_insensitive_strcmp+0x3e>
    {
        return 0;
 800396a:	2300      	movs	r3, #0
 800396c:	e050      	b.n	8003a10 <case_insensitive_strcmp+0xc8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d101      	bne.n	800397a <case_insensitive_strcmp+0x32>
        {
            return 0;
 8003976:	2300      	movs	r3, #0
 8003978:	e04a      	b.n	8003a10 <case_insensitive_strcmp+0xc8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	3301      	adds	r3, #1
 800397e:	607b      	str	r3, [r7, #4]
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	3301      	adds	r3, #1
 8003984:	603b      	str	r3, [r7, #0]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	73fb      	strb	r3, [r7, #15]
 800398c:	7bfb      	ldrb	r3, [r7, #15]
 800398e:	3301      	adds	r3, #1
 8003990:	4a22      	ldr	r2, [pc, #136]	; (8003a1c <case_insensitive_strcmp+0xd4>)
 8003992:	4413      	add	r3, r2
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	f003 0303 	and.w	r3, r3, #3
 800399a:	2b01      	cmp	r3, #1
 800399c:	d103      	bne.n	80039a6 <case_insensitive_strcmp+0x5e>
 800399e:	7bfb      	ldrb	r3, [r7, #15]
 80039a0:	f103 0220 	add.w	r2, r3, #32
 80039a4:	e000      	b.n	80039a8 <case_insensitive_strcmp+0x60>
 80039a6:	7bfa      	ldrb	r2, [r7, #15]
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	73bb      	strb	r3, [r7, #14]
 80039ae:	7bbb      	ldrb	r3, [r7, #14]
 80039b0:	3301      	adds	r3, #1
 80039b2:	491a      	ldr	r1, [pc, #104]	; (8003a1c <case_insensitive_strcmp+0xd4>)
 80039b4:	440b      	add	r3, r1
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	f003 0303 	and.w	r3, r3, #3
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d102      	bne.n	80039c6 <case_insensitive_strcmp+0x7e>
 80039c0:	7bbb      	ldrb	r3, [r7, #14]
 80039c2:	3320      	adds	r3, #32
 80039c4:	e000      	b.n	80039c8 <case_insensitive_strcmp+0x80>
 80039c6:	7bbb      	ldrb	r3, [r7, #14]
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d0d0      	beq.n	800396e <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	737b      	strb	r3, [r7, #13]
 80039d2:	7b7b      	ldrb	r3, [r7, #13]
 80039d4:	3301      	adds	r3, #1
 80039d6:	4a11      	ldr	r2, [pc, #68]	; (8003a1c <case_insensitive_strcmp+0xd4>)
 80039d8:	4413      	add	r3, r2
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	f003 0303 	and.w	r3, r3, #3
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d103      	bne.n	80039ec <case_insensitive_strcmp+0xa4>
 80039e4:	7b7b      	ldrb	r3, [r7, #13]
 80039e6:	f103 0220 	add.w	r2, r3, #32
 80039ea:	e000      	b.n	80039ee <case_insensitive_strcmp+0xa6>
 80039ec:	7b7a      	ldrb	r2, [r7, #13]
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	781b      	ldrb	r3, [r3, #0]
 80039f2:	733b      	strb	r3, [r7, #12]
 80039f4:	7b3b      	ldrb	r3, [r7, #12]
 80039f6:	3301      	adds	r3, #1
 80039f8:	4908      	ldr	r1, [pc, #32]	; (8003a1c <case_insensitive_strcmp+0xd4>)
 80039fa:	440b      	add	r3, r1
 80039fc:	781b      	ldrb	r3, [r3, #0]
 80039fe:	f003 0303 	and.w	r3, r3, #3
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d102      	bne.n	8003a0c <case_insensitive_strcmp+0xc4>
 8003a06:	7b3b      	ldrb	r3, [r7, #12]
 8003a08:	3320      	adds	r3, #32
 8003a0a:	e000      	b.n	8003a0e <case_insensitive_strcmp+0xc6>
 8003a0c:	7b3b      	ldrb	r3, [r7, #12]
 8003a0e:	1ad3      	subs	r3, r2, r3
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3714      	adds	r7, #20
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr
 8003a1c:	08030e3a 	.word	0x08030e3a

08003a20 <cJSON_strdup>:
#define static_strlen(string_literal) (sizeof(string_literal) - sizeof(""))

static internal_hooks global_hooks = { internal_malloc, internal_free, internal_realloc };

static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
    size_t length = 0;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	60fb      	str	r3, [r7, #12]
    unsigned char *copy = NULL;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	60bb      	str	r3, [r7, #8]

    if (string == NULL)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d101      	bne.n	8003a3c <cJSON_strdup+0x1c>
    {
        return NULL;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	e015      	b.n	8003a68 <cJSON_strdup+0x48>
    }

    length = strlen((const char*)string) + sizeof("");
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f7fc fbd1 	bl	80001e4 <strlen>
 8003a42:	4603      	mov	r3, r0
 8003a44:	3301      	adds	r3, #1
 8003a46:	60fb      	str	r3, [r7, #12]
    copy = (unsigned char*)hooks->allocate(length);
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68f8      	ldr	r0, [r7, #12]
 8003a4e:	4798      	blx	r3
 8003a50:	60b8      	str	r0, [r7, #8]
    if (copy == NULL)
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d101      	bne.n	8003a5c <cJSON_strdup+0x3c>
    {
        return NULL;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	e005      	b.n	8003a68 <cJSON_strdup+0x48>
    }
    memcpy(copy, string, length);
 8003a5c:	68fa      	ldr	r2, [r7, #12]
 8003a5e:	6879      	ldr	r1, [r7, #4]
 8003a60:	68b8      	ldr	r0, [r7, #8]
 8003a62:	f022 f85f 	bl	8025b24 <memcpy>

    return copy;
 8003a66:	68bb      	ldr	r3, [r7, #8]
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3710      	adds	r7, #16
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2028      	movs	r0, #40	; 0x28
 8003a7e:	4798      	blx	r3
 8003a80:	60f8      	str	r0, [r7, #12]
    if (node)
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d004      	beq.n	8003a92 <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 8003a88:	2228      	movs	r2, #40	; 0x28
 8003a8a:	2100      	movs	r1, #0
 8003a8c:	68f8      	ldr	r0, [r7, #12]
 8003a8e:	f022 f871 	bl	8025b74 <memset>
    }

    return node;
 8003a92:	68fb      	ldr	r3, [r7, #12]
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3710      	adds	r7, #16
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 8003aa8:	e037      	b.n	8003b1a <cJSON_Delete+0x7e>
    {
        next = item->next;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d108      	bne.n	8003ace <cJSON_Delete+0x32>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d004      	beq.n	8003ace <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f7ff ffe7 	bl	8003a9c <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d109      	bne.n	8003aee <cJSON_Delete+0x52>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d005      	beq.n	8003aee <cJSON_Delete+0x52>
        {
            global_hooks.deallocate(item->valuestring);
 8003ae2:	4b12      	ldr	r3, [pc, #72]	; (8003b2c <cJSON_Delete+0x90>)
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	6912      	ldr	r2, [r2, #16]
 8003aea:	4610      	mov	r0, r2
 8003aec:	4798      	blx	r3
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d109      	bne.n	8003b0e <cJSON_Delete+0x72>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a1b      	ldr	r3, [r3, #32]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d005      	beq.n	8003b0e <cJSON_Delete+0x72>
        {
            global_hooks.deallocate(item->string);
 8003b02:	4b0a      	ldr	r3, [pc, #40]	; (8003b2c <cJSON_Delete+0x90>)
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	6a12      	ldr	r2, [r2, #32]
 8003b0a:	4610      	mov	r0, r2
 8003b0c:	4798      	blx	r3
        }
        global_hooks.deallocate(item);
 8003b0e:	4b07      	ldr	r3, [pc, #28]	; (8003b2c <cJSON_Delete+0x90>)
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	4798      	blx	r3
        item = next;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d1c4      	bne.n	8003aaa <cJSON_Delete+0xe>
    }
}
 8003b20:	bf00      	nop
 8003b22:	bf00      	nop
 8003b24:	3710      	adds	r7, #16
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	10000000 	.word	0x10000000

08003b30 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 8003b30:	b480      	push	{r7}
 8003b32:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 8003b34:	232e      	movs	r3, #46	; 0x2e
#endif
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr

08003b40 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b098      	sub	sp, #96	; 0x60
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]
    double number = 0;
 8003b4a:	f04f 0200 	mov.w	r2, #0
 8003b4e:	f04f 0300 	mov.w	r3, #0
 8003b52:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    unsigned char *after_end = NULL;
 8003b56:	2300      	movs	r3, #0
 8003b58:	64bb      	str	r3, [r7, #72]	; 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 8003b5a:	f7ff ffe9 	bl	8003b30 <get_decimal_point>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    size_t i = 0;
 8003b64:	2300      	movs	r3, #0
 8003b66:	65fb      	str	r3, [r7, #92]	; 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d003      	beq.n	8003b76 <parse_number+0x36>
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d101      	bne.n	8003b7a <parse_number+0x3a>
    {
        return false;
 8003b76:	2300      	movs	r3, #0
 8003b78:	e0c6      	b.n	8003d08 <parse_number+0x1c8>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b7e:	e063      	b.n	8003c48 <parse_number+0x108>
    {
        switch (buffer_at_offset(input_buffer)[i])
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	6899      	ldr	r1, [r3, #8]
 8003b88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b8a:	440b      	add	r3, r1
 8003b8c:	4413      	add	r3, r2
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	2b45      	cmp	r3, #69	; 0x45
 8003b92:	dc3d      	bgt.n	8003c10 <parse_number+0xd0>
 8003b94:	2b2b      	cmp	r3, #43	; 0x2b
 8003b96:	db66      	blt.n	8003c66 <parse_number+0x126>
 8003b98:	3b2b      	subs	r3, #43	; 0x2b
 8003b9a:	2b1a      	cmp	r3, #26
 8003b9c:	d863      	bhi.n	8003c66 <parse_number+0x126>
 8003b9e:	a201      	add	r2, pc, #4	; (adr r2, 8003ba4 <parse_number+0x64>)
 8003ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ba4:	08003c15 	.word	0x08003c15
 8003ba8:	08003c67 	.word	0x08003c67
 8003bac:	08003c15 	.word	0x08003c15
 8003bb0:	08003c33 	.word	0x08003c33
 8003bb4:	08003c67 	.word	0x08003c67
 8003bb8:	08003c15 	.word	0x08003c15
 8003bbc:	08003c15 	.word	0x08003c15
 8003bc0:	08003c15 	.word	0x08003c15
 8003bc4:	08003c15 	.word	0x08003c15
 8003bc8:	08003c15 	.word	0x08003c15
 8003bcc:	08003c15 	.word	0x08003c15
 8003bd0:	08003c15 	.word	0x08003c15
 8003bd4:	08003c15 	.word	0x08003c15
 8003bd8:	08003c15 	.word	0x08003c15
 8003bdc:	08003c15 	.word	0x08003c15
 8003be0:	08003c67 	.word	0x08003c67
 8003be4:	08003c67 	.word	0x08003c67
 8003be8:	08003c67 	.word	0x08003c67
 8003bec:	08003c67 	.word	0x08003c67
 8003bf0:	08003c67 	.word	0x08003c67
 8003bf4:	08003c67 	.word	0x08003c67
 8003bf8:	08003c67 	.word	0x08003c67
 8003bfc:	08003c67 	.word	0x08003c67
 8003c00:	08003c67 	.word	0x08003c67
 8003c04:	08003c67 	.word	0x08003c67
 8003c08:	08003c67 	.word	0x08003c67
 8003c0c:	08003c15 	.word	0x08003c15
 8003c10:	2b65      	cmp	r3, #101	; 0x65
 8003c12:	d128      	bne.n	8003c66 <parse_number+0x126>
            case '9':
            case '+':
            case '-':
            case 'e':
            case 'E':
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	6899      	ldr	r1, [r3, #8]
 8003c1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c1e:	440b      	add	r3, r1
 8003c20:	4413      	add	r3, r2
 8003c22:	7819      	ldrb	r1, [r3, #0]
 8003c24:	f107 0208 	add.w	r2, r7, #8
 8003c28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c2a:	4413      	add	r3, r2
 8003c2c:	460a      	mov	r2, r1
 8003c2e:	701a      	strb	r2, [r3, #0]
                break;
 8003c30:	e007      	b.n	8003c42 <parse_number+0x102>

            case '.':
                number_c_string[i] = decimal_point;
 8003c32:	f107 0208 	add.w	r2, r7, #8
 8003c36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c38:	4413      	add	r3, r2
 8003c3a:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8003c3e:	701a      	strb	r2, [r3, #0]
                break;
 8003c40:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 8003c42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c44:	3301      	adds	r3, #1
 8003c46:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c4a:	2b3e      	cmp	r3, #62	; 0x3e
 8003c4c:	d80d      	bhi.n	8003c6a <parse_number+0x12a>
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d00a      	beq.n	8003c6a <parse_number+0x12a>
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	689a      	ldr	r2, [r3, #8]
 8003c58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c5a:	441a      	add	r2, r3
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d38d      	bcc.n	8003b80 <parse_number+0x40>

            default:
                goto loop_end;
        }
    }
loop_end:
 8003c64:	e001      	b.n	8003c6a <parse_number+0x12a>
                goto loop_end;
 8003c66:	bf00      	nop
 8003c68:	e000      	b.n	8003c6c <parse_number+0x12c>
loop_end:
 8003c6a:	bf00      	nop
    number_c_string[i] = '\0';
 8003c6c:	f107 0208 	add.w	r2, r7, #8
 8003c70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c72:	4413      	add	r3, r2
 8003c74:	2200      	movs	r2, #0
 8003c76:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 8003c78:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003c7c:	f107 0308 	add.w	r3, r7, #8
 8003c80:	4611      	mov	r1, r2
 8003c82:	4618      	mov	r0, r3
 8003c84:	f023 fdf2 	bl	802786c <strtod>
 8003c88:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50
    if (number_c_string == after_end)
 8003c8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c8e:	f107 0308 	add.w	r3, r7, #8
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d101      	bne.n	8003c9a <parse_number+0x15a>
    {
        return false; /* parse_error */
 8003c96:	2300      	movs	r3, #0
 8003c98:	e036      	b.n	8003d08 <parse_number+0x1c8>
    }

    item->valuedouble = number;
 8003c9a:	6879      	ldr	r1, [r7, #4]
 8003c9c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003ca0:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 8003ca4:	a31b      	add	r3, pc, #108	; (adr r3, 8003d14 <parse_number+0x1d4>)
 8003ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003caa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003cae:	f7fc ff39 	bl	8000b24 <__aeabi_dcmpge>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d004      	beq.n	8003cc2 <parse_number+0x182>
    {
        item->valueint = INT_MAX;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003cbe:	615a      	str	r2, [r3, #20]
 8003cc0:	e015      	b.n	8003cee <parse_number+0x1ae>
    }
    else if (number <= (double)INT_MIN)
 8003cc2:	f04f 0200 	mov.w	r2, #0
 8003cc6:	4b12      	ldr	r3, [pc, #72]	; (8003d10 <parse_number+0x1d0>)
 8003cc8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003ccc:	f7fc ff20 	bl	8000b10 <__aeabi_dcmple>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d004      	beq.n	8003ce0 <parse_number+0x1a0>
    {
        item->valueint = INT_MIN;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003cdc:	615a      	str	r2, [r3, #20]
 8003cde:	e006      	b.n	8003cee <parse_number+0x1ae>
    }
    else
    {
        item->valueint = (int)number;
 8003ce0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003ce4:	f7fc ff48 	bl	8000b78 <__aeabi_d2iz>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2208      	movs	r2, #8
 8003cf2:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003cfa:	f107 0208 	add.w	r2, r7, #8
 8003cfe:	1a8a      	subs	r2, r1, r2
 8003d00:	441a      	add	r2, r3
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	609a      	str	r2, [r3, #8]
    return true;
 8003d06:	2301      	movs	r3, #1
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3760      	adds	r7, #96	; 0x60
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	c1e00000 	.word	0xc1e00000
 8003d14:	ffc00000 	.word	0xffc00000
 8003d18:	41dfffff 	.word	0x41dfffff

08003d1c <ensure>:
    internal_hooks hooks;
} printbuffer;

/* realloc printbuffer if necessary to have at least "needed" bytes more */
static unsigned char* ensure(printbuffer * const p, size_t needed)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]
    unsigned char *newbuffer = NULL;
 8003d26:	2300      	movs	r3, #0
 8003d28:	60fb      	str	r3, [r7, #12]
    size_t newsize = 0;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	60bb      	str	r3, [r7, #8]

    if ((p == NULL) || (p->buffer == NULL))
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d003      	beq.n	8003d3c <ensure+0x20>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d101      	bne.n	8003d40 <ensure+0x24>
    {
        return NULL;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	e086      	b.n	8003e4e <ensure+0x132>
    }

    if ((p->length > 0) && (p->offset >= p->length))
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d007      	beq.n	8003d58 <ensure+0x3c>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	689a      	ldr	r2, [r3, #8]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d301      	bcc.n	8003d58 <ensure+0x3c>
    {
        /* make sure that offset is valid */
        return NULL;
 8003d54:	2300      	movs	r3, #0
 8003d56:	e07a      	b.n	8003e4e <ensure+0x132>
    }

    if (needed > INT_MAX)
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	da01      	bge.n	8003d62 <ensure+0x46>
    {
        /* sizes bigger than INT_MAX are currently not supported */
        return NULL;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	e075      	b.n	8003e4e <ensure+0x132>
    }

    needed += p->offset + 1;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	689a      	ldr	r2, [r3, #8]
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	4413      	add	r3, r2
 8003d6a:	3301      	adds	r3, #1
 8003d6c:	603b      	str	r3, [r7, #0]
    if (needed <= p->length)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	683a      	ldr	r2, [r7, #0]
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d805      	bhi.n	8003d84 <ensure+0x68>
    {
        return p->buffer + p->offset;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	4413      	add	r3, r2
 8003d82:	e064      	b.n	8003e4e <ensure+0x132>
    }

    if (p->noalloc) {
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	691b      	ldr	r3, [r3, #16]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d001      	beq.n	8003d90 <ensure+0x74>
        return NULL;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	e05e      	b.n	8003e4e <ensure+0x132>
    }

    /* calculate new buffer size */
    if (needed > (INT_MAX / 2))
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d96:	d308      	bcc.n	8003daa <ensure+0x8e>
    {
        /* overflow of int, use INT_MAX if possible */
        if (needed <= INT_MAX)
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	db03      	blt.n	8003da6 <ensure+0x8a>
        {
            newsize = INT_MAX;
 8003d9e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8003da2:	60bb      	str	r3, [r7, #8]
 8003da4:	e004      	b.n	8003db0 <ensure+0x94>
        }
        else
        {
            return NULL;
 8003da6:	2300      	movs	r3, #0
 8003da8:	e051      	b.n	8003e4e <ensure+0x132>
        }
    }
    else
    {
        newsize = needed * 2;
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	005b      	lsls	r3, r3, #1
 8003dae:	60bb      	str	r3, [r7, #8]
    }

    if (p->hooks.reallocate != NULL)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6a1b      	ldr	r3, [r3, #32]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d018      	beq.n	8003dea <ensure+0xce>
    {
        /* reallocate with realloc if available */
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6a1b      	ldr	r3, [r3, #32]
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	6812      	ldr	r2, [r2, #0]
 8003dc0:	68b9      	ldr	r1, [r7, #8]
 8003dc2:	4610      	mov	r0, r2
 8003dc4:	4798      	blx	r3
 8003dc6:	60f8      	str	r0, [r7, #12]
        if (newbuffer == NULL)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d135      	bne.n	8003e3a <ensure+0x11e>
        {
            p->hooks.deallocate(p->buffer);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	69db      	ldr	r3, [r3, #28]
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	6812      	ldr	r2, [r2, #0]
 8003dd6:	4610      	mov	r0, r2
 8003dd8:	4798      	blx	r3
            p->length = 0;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	601a      	str	r2, [r3, #0]

            return NULL;
 8003de6:	2300      	movs	r3, #0
 8003de8:	e031      	b.n	8003e4e <ensure+0x132>
        }
    }
    else
    {
        /* otherwise reallocate manually */
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	699b      	ldr	r3, [r3, #24]
 8003dee:	68b8      	ldr	r0, [r7, #8]
 8003df0:	4798      	blx	r3
 8003df2:	60f8      	str	r0, [r7, #12]
        if (!newbuffer)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d10d      	bne.n	8003e16 <ensure+0xfa>
        {
            p->hooks.deallocate(p->buffer);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	69db      	ldr	r3, [r3, #28]
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	6812      	ldr	r2, [r2, #0]
 8003e02:	4610      	mov	r0, r2
 8003e04:	4798      	blx	r3
            p->length = 0;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	601a      	str	r2, [r3, #0]

            return NULL;
 8003e12:	2300      	movs	r3, #0
 8003e14:	e01b      	b.n	8003e4e <ensure+0x132>
        }
        if (newbuffer)
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d008      	beq.n	8003e2e <ensure+0x112>
        {
            memcpy(newbuffer, p->buffer, p->offset + 1);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6819      	ldr	r1, [r3, #0]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	3301      	adds	r3, #1
 8003e26:	461a      	mov	r2, r3
 8003e28:	68f8      	ldr	r0, [r7, #12]
 8003e2a:	f021 fe7b 	bl	8025b24 <memcpy>
        }
        p->hooks.deallocate(p->buffer);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	69db      	ldr	r3, [r3, #28]
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	6812      	ldr	r2, [r2, #0]
 8003e36:	4610      	mov	r0, r2
 8003e38:	4798      	blx	r3
    }
    p->length = newsize;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	68ba      	ldr	r2, [r7, #8]
 8003e3e:	605a      	str	r2, [r3, #4]
    p->buffer = newbuffer;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	68fa      	ldr	r2, [r7, #12]
 8003e44:	601a      	str	r2, [r3, #0]

    return newbuffer + p->offset;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	68fa      	ldr	r2, [r7, #12]
 8003e4c:	4413      	add	r3, r2
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3710      	adds	r7, #16
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}

08003e56 <update_offset>:

/* calculate the new length of the string in a printbuffer and update the offset */
static void update_offset(printbuffer * const buffer)
{
 8003e56:	b590      	push	{r4, r7, lr}
 8003e58:	b085      	sub	sp, #20
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
    const unsigned char *buffer_pointer = NULL;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	60fb      	str	r3, [r7, #12]
    if ((buffer == NULL) || (buffer->buffer == NULL))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d013      	beq.n	8003e90 <update_offset+0x3a>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d00f      	beq.n	8003e90 <update_offset+0x3a>
    {
        return;
    }
    buffer_pointer = buffer->buffer + buffer->offset;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	4413      	add	r3, r2
 8003e7a:	60fb      	str	r3, [r7, #12]

    buffer->offset += strlen((const char*)buffer_pointer);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	689c      	ldr	r4, [r3, #8]
 8003e80:	68f8      	ldr	r0, [r7, #12]
 8003e82:	f7fc f9af 	bl	80001e4 <strlen>
 8003e86:	4603      	mov	r3, r0
 8003e88:	18e2      	adds	r2, r4, r3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	609a      	str	r2, [r3, #8]
 8003e8e:	e000      	b.n	8003e92 <update_offset+0x3c>
        return;
 8003e90:	bf00      	nop
}
 8003e92:	3714      	adds	r7, #20
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd90      	pop	{r4, r7, pc}

08003e98 <compare_double>:

/* securely comparison of floating-point variables */
static cJSON_bool compare_double(double a, double b)
{
 8003e98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003e9c:	b087      	sub	sp, #28
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	ed87 0b02 	vstr	d0, [r7, #8]
 8003ea4:	ed87 1b00 	vstr	d1, [r7]
    double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
 8003ea8:	68b8      	ldr	r0, [r7, #8]
 8003eaa:	68fe      	ldr	r6, [r7, #12]
 8003eac:	f026 4100 	bic.w	r1, r6, #2147483648	; 0x80000000
 8003eb0:	683a      	ldr	r2, [r7, #0]
 8003eb2:	687e      	ldr	r6, [r7, #4]
 8003eb4:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8003eb8:	f7fc fe3e 	bl	8000b38 <__aeabi_dcmpgt>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d004      	beq.n	8003ecc <compare_double+0x34>
 8003ec2:	68bc      	ldr	r4, [r7, #8]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8003eca:	e003      	b.n	8003ed4 <compare_double+0x3c>
 8003ecc:	683c      	ldr	r4, [r7, #0]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8003ed4:	e9c7 4504 	strd	r4, r5, [r7, #16]
    return (fabs(a - b) <= maxVal * DBL_EPSILON);
 8003ed8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003edc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003ee0:	f7fc f9e2 	bl	80002a8 <__aeabi_dsub>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	460b      	mov	r3, r1
 8003ee8:	4690      	mov	r8, r2
 8003eea:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8003eee:	f04f 0200 	mov.w	r2, #0
 8003ef2:	4b0c      	ldr	r3, [pc, #48]	; (8003f24 <compare_double+0x8c>)
 8003ef4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003ef8:	f7fc fb8e 	bl	8000618 <__aeabi_dmul>
 8003efc:	4602      	mov	r2, r0
 8003efe:	460b      	mov	r3, r1
 8003f00:	2101      	movs	r1, #1
 8003f02:	460c      	mov	r4, r1
 8003f04:	4640      	mov	r0, r8
 8003f06:	4649      	mov	r1, r9
 8003f08:	f7fc fe02 	bl	8000b10 <__aeabi_dcmple>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d101      	bne.n	8003f16 <compare_double+0x7e>
 8003f12:	2300      	movs	r3, #0
 8003f14:	461c      	mov	r4, r3
 8003f16:	b2e3      	uxtb	r3, r4
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	371c      	adds	r7, #28
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003f22:	bf00      	nop
 8003f24:	3cb00000 	.word	0x3cb00000

08003f28 <print_number>:

/* Render the number nicely from the given item into a string. */
static cJSON_bool print_number(const cJSON * const item, printbuffer * const output_buffer)
{
 8003f28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f2a:	b093      	sub	sp, #76	; 0x4c
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8003f32:	2300      	movs	r3, #0
 8003f34:	63fb      	str	r3, [r7, #60]	; 0x3c
    double d = item->valuedouble;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003f3c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    int length = 0;
 8003f40:	2300      	movs	r3, #0
 8003f42:	647b      	str	r3, [r7, #68]	; 0x44
    size_t i = 0;
 8003f44:	2300      	movs	r3, #0
 8003f46:	643b      	str	r3, [r7, #64]	; 0x40
    unsigned char number_buffer[26] = {0}; /* temporary buffer to print the number into */
 8003f48:	2300      	movs	r3, #0
 8003f4a:	617b      	str	r3, [r7, #20]
 8003f4c:	f107 0318 	add.w	r3, r7, #24
 8003f50:	2200      	movs	r2, #0
 8003f52:	601a      	str	r2, [r3, #0]
 8003f54:	605a      	str	r2, [r3, #4]
 8003f56:	609a      	str	r2, [r3, #8]
 8003f58:	60da      	str	r2, [r3, #12]
 8003f5a:	611a      	str	r2, [r3, #16]
 8003f5c:	829a      	strh	r2, [r3, #20]
    unsigned char decimal_point = get_decimal_point();
 8003f5e:	f7ff fde7 	bl	8003b30 <get_decimal_point>
 8003f62:	4603      	mov	r3, r0
 8003f64:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    double test = 0.0;
 8003f68:	f04f 0200 	mov.w	r2, #0
 8003f6c:	f04f 0300 	mov.w	r3, #0
 8003f70:	e9c7 2302 	strd	r2, r3, [r7, #8]

    if (output_buffer == NULL)
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d101      	bne.n	8003f7e <print_number+0x56>
    {
        return false;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	e09c      	b.n	80040b8 <print_number+0x190>
    }

    /* This checks for NaN and Infinity */
    if (isnan(d) || isinf(d))
 8003f7e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003f82:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003f86:	f7fc fde1 	bl	8000b4c <__aeabi_dcmpun>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d121      	bne.n	8003fd4 <print_number+0xac>
 8003f90:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 8003f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f94:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8003f98:	2301      	movs	r3, #1
 8003f9a:	461e      	mov	r6, r3
 8003f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8003fa0:	4b47      	ldr	r3, [pc, #284]	; (80040c0 <print_number+0x198>)
 8003fa2:	4620      	mov	r0, r4
 8003fa4:	4629      	mov	r1, r5
 8003fa6:	f7fc fdd1 	bl	8000b4c <__aeabi_dcmpun>
 8003faa:	4603      	mov	r3, r0
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d10b      	bne.n	8003fc8 <print_number+0xa0>
 8003fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8003fb4:	4b42      	ldr	r3, [pc, #264]	; (80040c0 <print_number+0x198>)
 8003fb6:	4620      	mov	r0, r4
 8003fb8:	4629      	mov	r1, r5
 8003fba:	f7fc fda9 	bl	8000b10 <__aeabi_dcmple>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d101      	bne.n	8003fc8 <print_number+0xa0>
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	461e      	mov	r6, r3
 8003fc8:	b2f3      	uxtb	r3, r6
 8003fca:	f083 0301 	eor.w	r3, r3, #1
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d007      	beq.n	8003fe4 <print_number+0xbc>
    {
        length = sprintf((char*)number_buffer, "null");
 8003fd4:	f107 0314 	add.w	r3, r7, #20
 8003fd8:	493a      	ldr	r1, [pc, #232]	; (80040c4 <print_number+0x19c>)
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f022 fd5a 	bl	8026a94 <siprintf>
 8003fe0:	6478      	str	r0, [r7, #68]	; 0x44
 8003fe2:	e027      	b.n	8004034 <print_number+0x10c>
    }
    else
    {
        /* Try 15 decimal places of precision to avoid nonsignificant nonzero digits */
        length = sprintf((char*)number_buffer, "%1.15g", d);
 8003fe4:	f107 0014 	add.w	r0, r7, #20
 8003fe8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003fec:	4936      	ldr	r1, [pc, #216]	; (80040c8 <print_number+0x1a0>)
 8003fee:	f022 fd51 	bl	8026a94 <siprintf>
 8003ff2:	6478      	str	r0, [r7, #68]	; 0x44

        /* Check whether the original double can be recovered */
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || !compare_double((double)test, d))
 8003ff4:	f107 0208 	add.w	r2, r7, #8
 8003ff8:	f107 0314 	add.w	r3, r7, #20
 8003ffc:	4933      	ldr	r1, [pc, #204]	; (80040cc <print_number+0x1a4>)
 8003ffe:	4618      	mov	r0, r3
 8004000:	f022 fd68 	bl	8026ad4 <siscanf>
 8004004:	4603      	mov	r3, r0
 8004006:	2b01      	cmp	r3, #1
 8004008:	d10c      	bne.n	8004024 <print_number+0xfc>
 800400a:	ed97 7b02 	vldr	d7, [r7, #8]
 800400e:	ed97 1b0c 	vldr	d1, [r7, #48]	; 0x30
 8004012:	eeb0 0a47 	vmov.f32	s0, s14
 8004016:	eef0 0a67 	vmov.f32	s1, s15
 800401a:	f7ff ff3d 	bl	8003e98 <compare_double>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d107      	bne.n	8004034 <print_number+0x10c>
        {
            /* If not, print with 17 decimal places of precision */
            length = sprintf((char*)number_buffer, "%1.17g", d);
 8004024:	f107 0014 	add.w	r0, r7, #20
 8004028:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800402c:	4928      	ldr	r1, [pc, #160]	; (80040d0 <print_number+0x1a8>)
 800402e:	f022 fd31 	bl	8026a94 <siprintf>
 8004032:	6478      	str	r0, [r7, #68]	; 0x44
        }
    }

    /* sprintf failed or buffer overrun occurred */
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
 8004034:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004036:	2b00      	cmp	r3, #0
 8004038:	db02      	blt.n	8004040 <print_number+0x118>
 800403a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800403c:	2b19      	cmp	r3, #25
 800403e:	dd01      	ble.n	8004044 <print_number+0x11c>
    {
        return false;
 8004040:	2300      	movs	r3, #0
 8004042:	e039      	b.n	80040b8 <print_number+0x190>
    }

    /* reserve appropriate space in the output */
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
 8004044:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004046:	3301      	adds	r3, #1
 8004048:	4619      	mov	r1, r3
 800404a:	6838      	ldr	r0, [r7, #0]
 800404c:	f7ff fe66 	bl	8003d1c <ensure>
 8004050:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (output_pointer == NULL)
 8004052:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004054:	2b00      	cmp	r3, #0
 8004056:	d101      	bne.n	800405c <print_number+0x134>
    {
        return false;
 8004058:	2300      	movs	r3, #0
 800405a:	e02d      	b.n	80040b8 <print_number+0x190>
    }

    /* copy the printed number to the output and replace locale
     * dependent decimal point with '.' */
    for (i = 0; i < ((size_t)length); i++)
 800405c:	2300      	movs	r3, #0
 800405e:	643b      	str	r3, [r7, #64]	; 0x40
 8004060:	e01a      	b.n	8004098 <print_number+0x170>
    {
        if (number_buffer[i] == decimal_point)
 8004062:	f107 0214 	add.w	r2, r7, #20
 8004066:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004068:	4413      	add	r3, r2
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8004070:	429a      	cmp	r2, r3
 8004072:	d105      	bne.n	8004080 <print_number+0x158>
        {
            output_pointer[i] = '.';
 8004074:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004076:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004078:	4413      	add	r3, r2
 800407a:	222e      	movs	r2, #46	; 0x2e
 800407c:	701a      	strb	r2, [r3, #0]
            continue;
 800407e:	e008      	b.n	8004092 <print_number+0x16a>
        }

        output_pointer[i] = number_buffer[i];
 8004080:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004082:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004084:	4413      	add	r3, r2
 8004086:	f107 0114 	add.w	r1, r7, #20
 800408a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800408c:	440a      	add	r2, r1
 800408e:	7812      	ldrb	r2, [r2, #0]
 8004090:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < ((size_t)length); i++)
 8004092:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004094:	3301      	adds	r3, #1
 8004096:	643b      	str	r3, [r7, #64]	; 0x40
 8004098:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800409a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800409c:	429a      	cmp	r2, r3
 800409e:	d3e0      	bcc.n	8004062 <print_number+0x13a>
    }
    output_pointer[i] = '\0';
 80040a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80040a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040a4:	4413      	add	r3, r2
 80040a6:	2200      	movs	r2, #0
 80040a8:	701a      	strb	r2, [r3, #0]

    output_buffer->offset += (size_t)length;
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	689a      	ldr	r2, [r3, #8]
 80040ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040b0:	441a      	add	r2, r3
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	609a      	str	r2, [r3, #8]

    return true;
 80040b6:	2301      	movs	r3, #1
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	374c      	adds	r7, #76	; 0x4c
 80040bc:	46bd      	mov	sp, r7
 80040be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040c0:	7fefffff 	.word	0x7fefffff
 80040c4:	0802aba4 	.word	0x0802aba4
 80040c8:	0802abac 	.word	0x0802abac
 80040cc:	0802abb4 	.word	0x0802abb4
 80040d0:	0802abb8 	.word	0x0802abb8

080040d4 <parse_hex4>:

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b085      	sub	sp, #20
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 80040dc:	2300      	movs	r3, #0
 80040de:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 80040e0:	2300      	movs	r3, #0
 80040e2:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 80040e4:	2300      	movs	r3, #0
 80040e6:	60bb      	str	r3, [r7, #8]
 80040e8:	e04c      	b.n	8004184 <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	4413      	add	r3, r2
 80040f0:	781b      	ldrb	r3, [r3, #0]
 80040f2:	2b2f      	cmp	r3, #47	; 0x2f
 80040f4:	d90f      	bls.n	8004116 <parse_hex4+0x42>
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	4413      	add	r3, r2
 80040fc:	781b      	ldrb	r3, [r3, #0]
 80040fe:	2b39      	cmp	r3, #57	; 0x39
 8004100:	d809      	bhi.n	8004116 <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	4413      	add	r3, r2
 8004108:	781b      	ldrb	r3, [r3, #0]
 800410a:	461a      	mov	r2, r3
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	4413      	add	r3, r2
 8004110:	3b30      	subs	r3, #48	; 0x30
 8004112:	60fb      	str	r3, [r7, #12]
 8004114:	e02d      	b.n	8004172 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	4413      	add	r3, r2
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	2b40      	cmp	r3, #64	; 0x40
 8004120:	d90f      	bls.n	8004142 <parse_hex4+0x6e>
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	4413      	add	r3, r2
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	2b46      	cmp	r3, #70	; 0x46
 800412c:	d809      	bhi.n	8004142 <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	4413      	add	r3, r2
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	461a      	mov	r2, r3
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	4413      	add	r3, r2
 800413c:	3b37      	subs	r3, #55	; 0x37
 800413e:	60fb      	str	r3, [r7, #12]
 8004140:	e017      	b.n	8004172 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	4413      	add	r3, r2
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	2b60      	cmp	r3, #96	; 0x60
 800414c:	d90f      	bls.n	800416e <parse_hex4+0x9a>
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	4413      	add	r3, r2
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	2b66      	cmp	r3, #102	; 0x66
 8004158:	d809      	bhi.n	800416e <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	4413      	add	r3, r2
 8004160:	781b      	ldrb	r3, [r3, #0]
 8004162:	461a      	mov	r2, r3
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	4413      	add	r3, r2
 8004168:	3b57      	subs	r3, #87	; 0x57
 800416a:	60fb      	str	r3, [r7, #12]
 800416c:	e001      	b.n	8004172 <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 800416e:	2300      	movs	r3, #0
 8004170:	e00c      	b.n	800418c <parse_hex4+0xb8>
        }

        if (i < 3)
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	2b02      	cmp	r3, #2
 8004176:	d802      	bhi.n	800417e <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	011b      	lsls	r3, r3, #4
 800417c:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	3301      	adds	r3, #1
 8004182:	60bb      	str	r3, [r7, #8]
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	2b03      	cmp	r3, #3
 8004188:	d9af      	bls.n	80040ea <parse_hex4+0x16>
        }
    }

    return h;
 800418a:	68fb      	ldr	r3, [r7, #12]
}
 800418c:	4618      	mov	r0, r3
 800418e:	3714      	adds	r7, #20
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b08a      	sub	sp, #40	; 0x28
 800419c:	af00      	add	r7, sp, #0
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 80041a4:	2300      	movs	r3, #0
 80041a6:	627b      	str	r3, [r7, #36]	; 0x24
    unsigned int first_code = 0;
 80041a8:	2300      	movs	r3, #0
 80041aa:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 80041b0:	2300      	movs	r3, #0
 80041b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    unsigned char utf8_position = 0;
 80041b6:	2300      	movs	r3, #0
 80041b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    unsigned char sequence_length = 0;
 80041bc:	2300      	movs	r3, #0
 80041be:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    unsigned char first_byte_mark = 0;
 80041c2:	2300      	movs	r3, #0
 80041c4:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 80041c8:	68ba      	ldr	r2, [r7, #8]
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	2b05      	cmp	r3, #5
 80041d0:	f340 80b7 	ble.w	8004342 <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	3302      	adds	r3, #2
 80041d8:	4618      	mov	r0, r3
 80041da:	f7ff ff7b 	bl	80040d4 <parse_hex4>
 80041de:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 80041e0:	69fb      	ldr	r3, [r7, #28]
 80041e2:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 80041e6:	d304      	bcc.n	80041f2 <utf16_literal_to_utf8+0x5a>
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 80041ee:	f0c0 80aa 	bcc.w	8004346 <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 80041f8:	d337      	bcc.n	800426a <utf16_literal_to_utf8+0xd2>
 80041fa:	69fb      	ldr	r3, [r7, #28]
 80041fc:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8004200:	d233      	bcs.n	800426a <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	3306      	adds	r3, #6
 8004206:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 8004208:	2300      	movs	r3, #0
 800420a:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 800420c:	230c      	movs	r3, #12
 800420e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

        if ((input_end - second_sequence) < 6)
 8004212:	68ba      	ldr	r2, [r7, #8]
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	2b05      	cmp	r3, #5
 800421a:	f340 8096 	ble.w	800434a <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	2b5c      	cmp	r3, #92	; 0x5c
 8004224:	f040 8093 	bne.w	800434e <utf16_literal_to_utf8+0x1b6>
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	3301      	adds	r3, #1
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	2b75      	cmp	r3, #117	; 0x75
 8004230:	f040 808d 	bne.w	800434e <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	3302      	adds	r3, #2
 8004238:	4618      	mov	r0, r3
 800423a:	f7ff ff4b 	bl	80040d4 <parse_hex4>
 800423e:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8004246:	f0c0 8084 	bcc.w	8004352 <utf16_literal_to_utf8+0x1ba>
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8004250:	d27f      	bcs.n	8004352 <utf16_literal_to_utf8+0x1ba>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	029a      	lsls	r2, r3, #10
 8004256:	4b43      	ldr	r3, [pc, #268]	; (8004364 <utf16_literal_to_utf8+0x1cc>)
 8004258:	4013      	ands	r3, r2
 800425a:	693a      	ldr	r2, [r7, #16]
 800425c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004260:	4313      	orrs	r3, r2
 8004262:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8004266:	627b      	str	r3, [r7, #36]	; 0x24
    {
 8004268:	e004      	b.n	8004274 <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 800426a:	2306      	movs	r3, #6
 800426c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        codepoint = first_code;
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 8004274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004276:	2b7f      	cmp	r3, #127	; 0x7f
 8004278:	d803      	bhi.n	8004282 <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 800427a:	2301      	movs	r3, #1
 800427c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004280:	e01f      	b.n	80042c2 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 8004282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004284:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004288:	d206      	bcs.n	8004298 <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 800428a:	2302      	movs	r3, #2
 800428c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 8004290:	23c0      	movs	r3, #192	; 0xc0
 8004292:	f887 3020 	strb.w	r3, [r7, #32]
 8004296:	e014      	b.n	80042c2 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 8004298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800429e:	d206      	bcs.n	80042ae <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 80042a0:	2303      	movs	r3, #3
 80042a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 80042a6:	23e0      	movs	r3, #224	; 0xe0
 80042a8:	f887 3020 	strb.w	r3, [r7, #32]
 80042ac:	e009      	b.n	80042c2 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 80042ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b0:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 80042b4:	d24f      	bcs.n	8004356 <utf16_literal_to_utf8+0x1be>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 80042b6:	2304      	movs	r3, #4
 80042b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 80042bc:	23f0      	movs	r3, #240	; 0xf0
 80042be:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 80042c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80042c6:	3b01      	subs	r3, #1
 80042c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80042cc:	e015      	b.n	80042fa <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 80042ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042d6:	b2da      	uxtb	r2, r3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6819      	ldr	r1, [r3, #0]
 80042dc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80042e0:	440b      	add	r3, r1
 80042e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80042e6:	b2d2      	uxtb	r2, r2
 80042e8:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 80042ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ec:	099b      	lsrs	r3, r3, #6
 80042ee:	627b      	str	r3, [r7, #36]	; 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 80042f0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80042f4:	3b01      	subs	r3, #1
 80042f6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80042fa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d1e5      	bne.n	80042ce <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 8004302:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004306:	2b01      	cmp	r3, #1
 8004308:	d909      	bls.n	800431e <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 800430a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430c:	b2d9      	uxtb	r1, r3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004316:	430a      	orrs	r2, r1
 8004318:	b2d2      	uxtb	r2, r2
 800431a:	701a      	strb	r2, [r3, #0]
 800431c:	e007      	b.n	800432e <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 800431e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004320:	b2da      	uxtb	r2, r3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800432a:	b2d2      	uxtb	r2, r2
 800432c:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004336:	441a      	add	r2, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	601a      	str	r2, [r3, #0]

    return sequence_length;
 800433c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8004340:	e00b      	b.n	800435a <utf16_literal_to_utf8+0x1c2>
        goto fail;
 8004342:	bf00      	nop
 8004344:	e008      	b.n	8004358 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 8004346:	bf00      	nop
 8004348:	e006      	b.n	8004358 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800434a:	bf00      	nop
 800434c:	e004      	b.n	8004358 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800434e:	bf00      	nop
 8004350:	e002      	b.n	8004358 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8004352:	bf00      	nop
 8004354:	e000      	b.n	8004358 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 8004356:	bf00      	nop

fail:
    return 0;
 8004358:	2300      	movs	r3, #0
}
 800435a:	4618      	mov	r0, r3
 800435c:	3728      	adds	r7, #40	; 0x28
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	000ffc00 	.word	0x000ffc00

08004368 <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b08a      	sub	sp, #40	; 0x28
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	3301      	adds	r3, #1
 800437c:	4413      	add	r3, r2
 800437e:	627b      	str	r3, [r7, #36]	; 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	3301      	adds	r3, #1
 800438a:	4413      	add	r3, r2
 800438c:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 800438e:	2300      	movs	r3, #0
 8004390:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 8004392:	2300      	movs	r3, #0
 8004394:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	4413      	add	r3, r2
 80043a0:	781b      	ldrb	r3, [r3, #0]
 80043a2:	2b22      	cmp	r3, #34	; 0x22
 80043a4:	f040 8102 	bne.w	80045ac <parse_string+0x244>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 80043a8:	2300      	movs	r3, #0
 80043aa:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 80043ac:	2300      	movs	r3, #0
 80043ae:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 80043b0:	e017      	b.n	80043e2 <parse_string+0x7a>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 80043b2:	6a3b      	ldr	r3, [r7, #32]
 80043b4:	781b      	ldrb	r3, [r3, #0]
 80043b6:	2b5c      	cmp	r3, #92	; 0x5c
 80043b8:	d110      	bne.n	80043dc <parse_string+0x74>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 80043ba:	6a3b      	ldr	r3, [r7, #32]
 80043bc:	1c5a      	adds	r2, r3, #1
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	1ad3      	subs	r3, r2, r3
 80043c4:	461a      	mov	r2, r3
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	429a      	cmp	r2, r3
 80043cc:	f080 80f0 	bcs.w	80045b0 <parse_string+0x248>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 80043d0:	69bb      	ldr	r3, [r7, #24]
 80043d2:	3301      	adds	r3, #1
 80043d4:	61bb      	str	r3, [r7, #24]
                input_end++;
 80043d6:	6a3b      	ldr	r3, [r7, #32]
 80043d8:	3301      	adds	r3, #1
 80043da:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 80043dc:	6a3b      	ldr	r3, [r7, #32]
 80043de:	3301      	adds	r3, #1
 80043e0:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	6a3a      	ldr	r2, [r7, #32]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	461a      	mov	r2, r3
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d203      	bcs.n	80043fc <parse_string+0x94>
 80043f4:	6a3b      	ldr	r3, [r7, #32]
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	2b22      	cmp	r3, #34	; 0x22
 80043fa:	d1da      	bne.n	80043b2 <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	6a3a      	ldr	r2, [r7, #32]
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	461a      	mov	r2, r3
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	429a      	cmp	r2, r3
 800440c:	f080 80d2 	bcs.w	80045b4 <parse_string+0x24c>
 8004410:	6a3b      	ldr	r3, [r7, #32]
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	2b22      	cmp	r3, #34	; 0x22
 8004416:	f040 80cd 	bne.w	80045b4 <parse_string+0x24c>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	4413      	add	r3, r2
 8004424:	6a3a      	ldr	r2, [r7, #32]
 8004426:	1ad3      	subs	r3, r2, r3
 8004428:	461a      	mov	r2, r3
 800442a:	69bb      	ldr	r3, [r7, #24]
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	691b      	ldr	r3, [r3, #16]
 8004434:	693a      	ldr	r2, [r7, #16]
 8004436:	3201      	adds	r2, #1
 8004438:	4610      	mov	r0, r2
 800443a:	4798      	blx	r3
 800443c:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	2b00      	cmp	r3, #0
 8004442:	f000 80b9 	beq.w	80045b8 <parse_string+0x250>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 8004446:	69fb      	ldr	r3, [r7, #28]
 8004448:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 800444a:	e093      	b.n	8004574 <parse_string+0x20c>
    {
        if (*input_pointer != '\\')
 800444c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	2b5c      	cmp	r3, #92	; 0x5c
 8004452:	d008      	beq.n	8004466 <parse_string+0xfe>
        {
            *output_pointer++ = *input_pointer++;
 8004454:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004456:	1c53      	adds	r3, r2, #1
 8004458:	627b      	str	r3, [r7, #36]	; 0x24
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	1c59      	adds	r1, r3, #1
 800445e:	60f9      	str	r1, [r7, #12]
 8004460:	7812      	ldrb	r2, [r2, #0]
 8004462:	701a      	strb	r2, [r3, #0]
 8004464:	e086      	b.n	8004574 <parse_string+0x20c>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 8004466:	2302      	movs	r3, #2
 8004468:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 800446a:	6a3a      	ldr	r2, [r7, #32]
 800446c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	2b00      	cmp	r3, #0
 8004472:	f340 80a3 	ble.w	80045bc <parse_string+0x254>
            {
                goto fail;
            }

            switch (input_pointer[1])
 8004476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004478:	3301      	adds	r3, #1
 800447a:	781b      	ldrb	r3, [r3, #0]
 800447c:	2b75      	cmp	r3, #117	; 0x75
 800447e:	f300 809f 	bgt.w	80045c0 <parse_string+0x258>
 8004482:	2b5c      	cmp	r3, #92	; 0x5c
 8004484:	da04      	bge.n	8004490 <parse_string+0x128>
 8004486:	2b22      	cmp	r3, #34	; 0x22
 8004488:	d05c      	beq.n	8004544 <parse_string+0x1dc>
 800448a:	2b2f      	cmp	r3, #47	; 0x2f
 800448c:	d05a      	beq.n	8004544 <parse_string+0x1dc>
                        goto fail;
                    }
                    break;

                default:
                    goto fail;
 800448e:	e097      	b.n	80045c0 <parse_string+0x258>
            switch (input_pointer[1])
 8004490:	3b5c      	subs	r3, #92	; 0x5c
 8004492:	2b19      	cmp	r3, #25
 8004494:	f200 8094 	bhi.w	80045c0 <parse_string+0x258>
 8004498:	a201      	add	r2, pc, #4	; (adr r2, 80044a0 <parse_string+0x138>)
 800449a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800449e:	bf00      	nop
 80044a0:	08004545 	.word	0x08004545
 80044a4:	080045c1 	.word	0x080045c1
 80044a8:	080045c1 	.word	0x080045c1
 80044ac:	080045c1 	.word	0x080045c1
 80044b0:	080045c1 	.word	0x080045c1
 80044b4:	080045c1 	.word	0x080045c1
 80044b8:	08004509 	.word	0x08004509
 80044bc:	080045c1 	.word	0x080045c1
 80044c0:	080045c1 	.word	0x080045c1
 80044c4:	080045c1 	.word	0x080045c1
 80044c8:	08004515 	.word	0x08004515
 80044cc:	080045c1 	.word	0x080045c1
 80044d0:	080045c1 	.word	0x080045c1
 80044d4:	080045c1 	.word	0x080045c1
 80044d8:	080045c1 	.word	0x080045c1
 80044dc:	080045c1 	.word	0x080045c1
 80044e0:	080045c1 	.word	0x080045c1
 80044e4:	080045c1 	.word	0x080045c1
 80044e8:	08004521 	.word	0x08004521
 80044ec:	080045c1 	.word	0x080045c1
 80044f0:	080045c1 	.word	0x080045c1
 80044f4:	080045c1 	.word	0x080045c1
 80044f8:	0800452d 	.word	0x0800452d
 80044fc:	080045c1 	.word	0x080045c1
 8004500:	08004539 	.word	0x08004539
 8004504:	08004553 	.word	0x08004553
                    *output_pointer++ = '\b';
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	1c5a      	adds	r2, r3, #1
 800450c:	60fa      	str	r2, [r7, #12]
 800450e:	2208      	movs	r2, #8
 8004510:	701a      	strb	r2, [r3, #0]
                    break;
 8004512:	e02b      	b.n	800456c <parse_string+0x204>
                    *output_pointer++ = '\f';
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	1c5a      	adds	r2, r3, #1
 8004518:	60fa      	str	r2, [r7, #12]
 800451a:	220c      	movs	r2, #12
 800451c:	701a      	strb	r2, [r3, #0]
                    break;
 800451e:	e025      	b.n	800456c <parse_string+0x204>
                    *output_pointer++ = '\n';
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	1c5a      	adds	r2, r3, #1
 8004524:	60fa      	str	r2, [r7, #12]
 8004526:	220a      	movs	r2, #10
 8004528:	701a      	strb	r2, [r3, #0]
                    break;
 800452a:	e01f      	b.n	800456c <parse_string+0x204>
                    *output_pointer++ = '\r';
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	1c5a      	adds	r2, r3, #1
 8004530:	60fa      	str	r2, [r7, #12]
 8004532:	220d      	movs	r2, #13
 8004534:	701a      	strb	r2, [r3, #0]
                    break;
 8004536:	e019      	b.n	800456c <parse_string+0x204>
                    *output_pointer++ = '\t';
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	1c5a      	adds	r2, r3, #1
 800453c:	60fa      	str	r2, [r7, #12]
 800453e:	2209      	movs	r2, #9
 8004540:	701a      	strb	r2, [r3, #0]
                    break;
 8004542:	e013      	b.n	800456c <parse_string+0x204>
                    *output_pointer++ = input_pointer[1];
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	1c5a      	adds	r2, r3, #1
 8004548:	60fa      	str	r2, [r7, #12]
 800454a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800454c:	7852      	ldrb	r2, [r2, #1]
 800454e:	701a      	strb	r2, [r3, #0]
                    break;
 8004550:	e00c      	b.n	800456c <parse_string+0x204>
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 8004552:	f107 030c 	add.w	r3, r7, #12
 8004556:	461a      	mov	r2, r3
 8004558:	6a39      	ldr	r1, [r7, #32]
 800455a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800455c:	f7ff fe1c 	bl	8004198 <utf16_literal_to_utf8>
 8004560:	4603      	mov	r3, r0
 8004562:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 8004564:	7dfb      	ldrb	r3, [r7, #23]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d02c      	beq.n	80045c4 <parse_string+0x25c>
                    break;
 800456a:	bf00      	nop
            }
            input_pointer += sequence_length;
 800456c:	7dfb      	ldrb	r3, [r7, #23]
 800456e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004570:	4413      	add	r3, r2
 8004572:	627b      	str	r3, [r7, #36]	; 0x24
    while (input_pointer < input_end)
 8004574:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004576:	6a3b      	ldr	r3, [r7, #32]
 8004578:	429a      	cmp	r2, r3
 800457a:	f4ff af67 	bcc.w	800444c <parse_string+0xe4>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2200      	movs	r2, #0
 8004582:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2210      	movs	r2, #16
 8004588:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	69fa      	ldr	r2, [r7, #28]
 800458e:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	6a3a      	ldr	r2, [r7, #32]
 8004596:	1ad3      	subs	r3, r2, r3
 8004598:	461a      	mov	r2, r3
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	1c5a      	adds	r2, r3, #1
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	609a      	str	r2, [r3, #8]

    return true;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e01e      	b.n	80045ea <parse_string+0x282>
        goto fail;
 80045ac:	bf00      	nop
 80045ae:	e00a      	b.n	80045c6 <parse_string+0x25e>
                    goto fail;
 80045b0:	bf00      	nop
 80045b2:	e008      	b.n	80045c6 <parse_string+0x25e>
            goto fail; /* string ended unexpectedly */
 80045b4:	bf00      	nop
 80045b6:	e006      	b.n	80045c6 <parse_string+0x25e>
            goto fail; /* allocation failure */
 80045b8:	bf00      	nop
 80045ba:	e004      	b.n	80045c6 <parse_string+0x25e>
                goto fail;
 80045bc:	bf00      	nop
 80045be:	e002      	b.n	80045c6 <parse_string+0x25e>
                    goto fail;
 80045c0:	bf00      	nop
 80045c2:	e000      	b.n	80045c6 <parse_string+0x25e>
                        goto fail;
 80045c4:	bf00      	nop

fail:
    if (output != NULL)
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d003      	beq.n	80045d4 <parse_string+0x26c>
    {
        input_buffer->hooks.deallocate(output);
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	695b      	ldr	r3, [r3, #20]
 80045d0:	69f8      	ldr	r0, [r7, #28]
 80045d2:	4798      	blx	r3
    }

    if (input_pointer != NULL)
 80045d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d006      	beq.n	80045e8 <parse_string+0x280>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	461a      	mov	r2, r3
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	609a      	str	r2, [r3, #8]
    }

    return false;
 80045e8:	2300      	movs	r3, #0
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3728      	adds	r7, #40	; 0x28
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop

080045f4 <print_string_ptr>:

/* Render the cstring provided to an escaped version that can be printed. */
static cJSON_bool print_string_ptr(const unsigned char * const input, printbuffer * const output_buffer)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b088      	sub	sp, #32
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = NULL;
 80045fe:	2300      	movs	r3, #0
 8004600:	61fb      	str	r3, [r7, #28]
    unsigned char *output = NULL;
 8004602:	2300      	movs	r3, #0
 8004604:	613b      	str	r3, [r7, #16]
    unsigned char *output_pointer = NULL;
 8004606:	2300      	movs	r3, #0
 8004608:	61bb      	str	r3, [r7, #24]
    size_t output_length = 0;
 800460a:	2300      	movs	r3, #0
 800460c:	60fb      	str	r3, [r7, #12]
    /* numbers of additional characters needed for escaping */
    size_t escape_characters = 0;
 800460e:	2300      	movs	r3, #0
 8004610:	617b      	str	r3, [r7, #20]

    if (output_buffer == NULL)
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d101      	bne.n	800461c <print_string_ptr+0x28>
    {
        return false;
 8004618:	2300      	movs	r3, #0
 800461a:	e110      	b.n	800483e <print_string_ptr+0x24a>
    }

    /* empty string */
    if (input == NULL)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d111      	bne.n	8004646 <print_string_ptr+0x52>
    {
        output = ensure(output_buffer, sizeof("\"\""));
 8004622:	2103      	movs	r1, #3
 8004624:	6838      	ldr	r0, [r7, #0]
 8004626:	f7ff fb79 	bl	8003d1c <ensure>
 800462a:	6138      	str	r0, [r7, #16]
        if (output == NULL)
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d101      	bne.n	8004636 <print_string_ptr+0x42>
        {
            return false;
 8004632:	2300      	movs	r3, #0
 8004634:	e103      	b.n	800483e <print_string_ptr+0x24a>
        }
        strcpy((char*)output, "\"\"");
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	4a83      	ldr	r2, [pc, #524]	; (8004848 <print_string_ptr+0x254>)
 800463a:	8811      	ldrh	r1, [r2, #0]
 800463c:	7892      	ldrb	r2, [r2, #2]
 800463e:	8019      	strh	r1, [r3, #0]
 8004640:	709a      	strb	r2, [r3, #2]

        return true;
 8004642:	2301      	movs	r3, #1
 8004644:	e0fb      	b.n	800483e <print_string_ptr+0x24a>
    }

    /* set "flag" to 1 if something needs to be escaped */
    for (input_pointer = input; *input_pointer; input_pointer++)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	61fb      	str	r3, [r7, #28]
 800464a:	e023      	b.n	8004694 <print_string_ptr+0xa0>
    {
        switch (*input_pointer)
 800464c:	69fb      	ldr	r3, [r7, #28]
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	2b22      	cmp	r3, #34	; 0x22
 8004652:	dc0e      	bgt.n	8004672 <print_string_ptr+0x7e>
 8004654:	2b08      	cmp	r3, #8
 8004656:	db12      	blt.n	800467e <print_string_ptr+0x8a>
 8004658:	3b08      	subs	r3, #8
 800465a:	2201      	movs	r2, #1
 800465c:	409a      	lsls	r2, r3
 800465e:	4b7b      	ldr	r3, [pc, #492]	; (800484c <print_string_ptr+0x258>)
 8004660:	4013      	ands	r3, r2
 8004662:	2b00      	cmp	r3, #0
 8004664:	bf14      	ite	ne
 8004666:	2301      	movne	r3, #1
 8004668:	2300      	moveq	r3, #0
 800466a:	b2db      	uxtb	r3, r3
 800466c:	2b00      	cmp	r3, #0
 800466e:	d102      	bne.n	8004676 <print_string_ptr+0x82>
 8004670:	e005      	b.n	800467e <print_string_ptr+0x8a>
 8004672:	2b5c      	cmp	r3, #92	; 0x5c
 8004674:	d103      	bne.n	800467e <print_string_ptr+0x8a>
            case '\f':
            case '\n':
            case '\r':
            case '\t':
                /* one character escape sequence */
                escape_characters++;
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	3301      	adds	r3, #1
 800467a:	617b      	str	r3, [r7, #20]
                break;
 800467c:	e007      	b.n	800468e <print_string_ptr+0x9a>
            default:
                if (*input_pointer < 32)
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	2b1f      	cmp	r3, #31
 8004684:	d802      	bhi.n	800468c <print_string_ptr+0x98>
                {
                    /* UTF-16 escape sequence uXXXX */
                    escape_characters += 5;
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	3305      	adds	r3, #5
 800468a:	617b      	str	r3, [r7, #20]
                }
                break;
 800468c:	bf00      	nop
    for (input_pointer = input; *input_pointer; input_pointer++)
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	3301      	adds	r3, #1
 8004692:	61fb      	str	r3, [r7, #28]
 8004694:	69fb      	ldr	r3, [r7, #28]
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d1d7      	bne.n	800464c <print_string_ptr+0x58>
        }
    }
    output_length = (size_t)(input_pointer - input) + escape_characters;
 800469c:	69fa      	ldr	r2, [r7, #28]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	461a      	mov	r2, r3
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	4413      	add	r3, r2
 80046a8:	60fb      	str	r3, [r7, #12]

    output = ensure(output_buffer, output_length + sizeof("\"\""));
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	3303      	adds	r3, #3
 80046ae:	4619      	mov	r1, r3
 80046b0:	6838      	ldr	r0, [r7, #0]
 80046b2:	f7ff fb33 	bl	8003d1c <ensure>
 80046b6:	6138      	str	r0, [r7, #16]
    if (output == NULL)
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d101      	bne.n	80046c2 <print_string_ptr+0xce>
    {
        return false;
 80046be:	2300      	movs	r3, #0
 80046c0:	e0bd      	b.n	800483e <print_string_ptr+0x24a>
    }

    /* no characters have to be escaped */
    if (escape_characters == 0)
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d117      	bne.n	80046f8 <print_string_ptr+0x104>
    {
        output[0] = '\"';
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	2222      	movs	r2, #34	; 0x22
 80046cc:	701a      	strb	r2, [r3, #0]
        memcpy(output + 1, input, output_length);
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	3301      	adds	r3, #1
 80046d2:	68fa      	ldr	r2, [r7, #12]
 80046d4:	6879      	ldr	r1, [r7, #4]
 80046d6:	4618      	mov	r0, r3
 80046d8:	f021 fa24 	bl	8025b24 <memcpy>
        output[output_length + 1] = '\"';
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	3301      	adds	r3, #1
 80046e0:	693a      	ldr	r2, [r7, #16]
 80046e2:	4413      	add	r3, r2
 80046e4:	2222      	movs	r2, #34	; 0x22
 80046e6:	701a      	strb	r2, [r3, #0]
        output[output_length + 2] = '\0';
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	3302      	adds	r3, #2
 80046ec:	693a      	ldr	r2, [r7, #16]
 80046ee:	4413      	add	r3, r2
 80046f0:	2200      	movs	r2, #0
 80046f2:	701a      	strb	r2, [r3, #0]

        return true;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e0a2      	b.n	800483e <print_string_ptr+0x24a>
    }

    output[0] = '\"';
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	2222      	movs	r2, #34	; 0x22
 80046fc:	701a      	strb	r2, [r3, #0]
    output_pointer = output + 1;
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	3301      	adds	r3, #1
 8004702:	61bb      	str	r3, [r7, #24]
    /* copy the string */
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	61fb      	str	r3, [r7, #28]
 8004708:	e087      	b.n	800481a <print_string_ptr+0x226>
    {
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	781b      	ldrb	r3, [r3, #0]
 800470e:	2b1f      	cmp	r3, #31
 8004710:	d90c      	bls.n	800472c <print_string_ptr+0x138>
 8004712:	69fb      	ldr	r3, [r7, #28]
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	2b22      	cmp	r3, #34	; 0x22
 8004718:	d008      	beq.n	800472c <print_string_ptr+0x138>
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	2b5c      	cmp	r3, #92	; 0x5c
 8004720:	d004      	beq.n	800472c <print_string_ptr+0x138>
        {
            /* normal character, copy */
            *output_pointer = *input_pointer;
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	781a      	ldrb	r2, [r3, #0]
 8004726:	69bb      	ldr	r3, [r7, #24]
 8004728:	701a      	strb	r2, [r3, #0]
 800472a:	e070      	b.n	800480e <print_string_ptr+0x21a>
        }
        else
        {
            /* character needs to be escaped */
            *output_pointer++ = '\\';
 800472c:	69bb      	ldr	r3, [r7, #24]
 800472e:	1c5a      	adds	r2, r3, #1
 8004730:	61ba      	str	r2, [r7, #24]
 8004732:	225c      	movs	r2, #92	; 0x5c
 8004734:	701a      	strb	r2, [r3, #0]
            switch (*input_pointer)
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	781b      	ldrb	r3, [r3, #0]
 800473a:	2b22      	cmp	r3, #34	; 0x22
 800473c:	dc3e      	bgt.n	80047bc <print_string_ptr+0x1c8>
 800473e:	2b08      	cmp	r3, #8
 8004740:	db5a      	blt.n	80047f8 <print_string_ptr+0x204>
 8004742:	3b08      	subs	r3, #8
 8004744:	2b1a      	cmp	r3, #26
 8004746:	d857      	bhi.n	80047f8 <print_string_ptr+0x204>
 8004748:	a201      	add	r2, pc, #4	; (adr r2, 8004750 <print_string_ptr+0x15c>)
 800474a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800474e:	bf00      	nop
 8004750:	080047d1 	.word	0x080047d1
 8004754:	080047f1 	.word	0x080047f1
 8004758:	080047e1 	.word	0x080047e1
 800475c:	080047f9 	.word	0x080047f9
 8004760:	080047d9 	.word	0x080047d9
 8004764:	080047e9 	.word	0x080047e9
 8004768:	080047f9 	.word	0x080047f9
 800476c:	080047f9 	.word	0x080047f9
 8004770:	080047f9 	.word	0x080047f9
 8004774:	080047f9 	.word	0x080047f9
 8004778:	080047f9 	.word	0x080047f9
 800477c:	080047f9 	.word	0x080047f9
 8004780:	080047f9 	.word	0x080047f9
 8004784:	080047f9 	.word	0x080047f9
 8004788:	080047f9 	.word	0x080047f9
 800478c:	080047f9 	.word	0x080047f9
 8004790:	080047f9 	.word	0x080047f9
 8004794:	080047f9 	.word	0x080047f9
 8004798:	080047f9 	.word	0x080047f9
 800479c:	080047f9 	.word	0x080047f9
 80047a0:	080047f9 	.word	0x080047f9
 80047a4:	080047f9 	.word	0x080047f9
 80047a8:	080047f9 	.word	0x080047f9
 80047ac:	080047f9 	.word	0x080047f9
 80047b0:	080047f9 	.word	0x080047f9
 80047b4:	080047f9 	.word	0x080047f9
 80047b8:	080047c9 	.word	0x080047c9
 80047bc:	2b5c      	cmp	r3, #92	; 0x5c
 80047be:	d11b      	bne.n	80047f8 <print_string_ptr+0x204>
            {
                case '\\':
                    *output_pointer = '\\';
 80047c0:	69bb      	ldr	r3, [r7, #24]
 80047c2:	225c      	movs	r2, #92	; 0x5c
 80047c4:	701a      	strb	r2, [r3, #0]
                    break;
 80047c6:	e022      	b.n	800480e <print_string_ptr+0x21a>
                case '\"':
                    *output_pointer = '\"';
 80047c8:	69bb      	ldr	r3, [r7, #24]
 80047ca:	2222      	movs	r2, #34	; 0x22
 80047cc:	701a      	strb	r2, [r3, #0]
                    break;
 80047ce:	e01e      	b.n	800480e <print_string_ptr+0x21a>
                case '\b':
                    *output_pointer = 'b';
 80047d0:	69bb      	ldr	r3, [r7, #24]
 80047d2:	2262      	movs	r2, #98	; 0x62
 80047d4:	701a      	strb	r2, [r3, #0]
                    break;
 80047d6:	e01a      	b.n	800480e <print_string_ptr+0x21a>
                case '\f':
                    *output_pointer = 'f';
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	2266      	movs	r2, #102	; 0x66
 80047dc:	701a      	strb	r2, [r3, #0]
                    break;
 80047de:	e016      	b.n	800480e <print_string_ptr+0x21a>
                case '\n':
                    *output_pointer = 'n';
 80047e0:	69bb      	ldr	r3, [r7, #24]
 80047e2:	226e      	movs	r2, #110	; 0x6e
 80047e4:	701a      	strb	r2, [r3, #0]
                    break;
 80047e6:	e012      	b.n	800480e <print_string_ptr+0x21a>
                case '\r':
                    *output_pointer = 'r';
 80047e8:	69bb      	ldr	r3, [r7, #24]
 80047ea:	2272      	movs	r2, #114	; 0x72
 80047ec:	701a      	strb	r2, [r3, #0]
                    break;
 80047ee:	e00e      	b.n	800480e <print_string_ptr+0x21a>
                case '\t':
                    *output_pointer = 't';
 80047f0:	69bb      	ldr	r3, [r7, #24]
 80047f2:	2274      	movs	r2, #116	; 0x74
 80047f4:	701a      	strb	r2, [r3, #0]
                    break;
 80047f6:	e00a      	b.n	800480e <print_string_ptr+0x21a>
                default:
                    /* escape and print as unicode codepoint */
                    sprintf((char*)output_pointer, "u%04x", *input_pointer);
 80047f8:	69fb      	ldr	r3, [r7, #28]
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	461a      	mov	r2, r3
 80047fe:	4914      	ldr	r1, [pc, #80]	; (8004850 <print_string_ptr+0x25c>)
 8004800:	69b8      	ldr	r0, [r7, #24]
 8004802:	f022 f947 	bl	8026a94 <siprintf>
                    output_pointer += 4;
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	3304      	adds	r3, #4
 800480a:	61bb      	str	r3, [r7, #24]
                    break;
 800480c:	bf00      	nop
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	3301      	adds	r3, #1
 8004812:	61fb      	str	r3, [r7, #28]
 8004814:	69bb      	ldr	r3, [r7, #24]
 8004816:	3301      	adds	r3, #1
 8004818:	61bb      	str	r3, [r7, #24]
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	781b      	ldrb	r3, [r3, #0]
 800481e:	2b00      	cmp	r3, #0
 8004820:	f47f af73 	bne.w	800470a <print_string_ptr+0x116>
            }
        }
    }
    output[output_length + 1] = '\"';
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	3301      	adds	r3, #1
 8004828:	693a      	ldr	r2, [r7, #16]
 800482a:	4413      	add	r3, r2
 800482c:	2222      	movs	r2, #34	; 0x22
 800482e:	701a      	strb	r2, [r3, #0]
    output[output_length + 2] = '\0';
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	3302      	adds	r3, #2
 8004834:	693a      	ldr	r2, [r7, #16]
 8004836:	4413      	add	r3, r2
 8004838:	2200      	movs	r2, #0
 800483a:	701a      	strb	r2, [r3, #0]

    return true;
 800483c:	2301      	movs	r3, #1
}
 800483e:	4618      	mov	r0, r3
 8004840:	3720      	adds	r7, #32
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
 8004846:	bf00      	nop
 8004848:	0802abc0 	.word	0x0802abc0
 800484c:	04000037 	.word	0x04000037
 8004850:	0802abc4 	.word	0x0802abc4

08004854 <print_string>:

/* Invoke print_string_ptr (which is useful) on an item. */
static cJSON_bool print_string(const cJSON * const item, printbuffer * const p)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b082      	sub	sp, #8
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]
    return print_string_ptr((unsigned char*)item->valuestring, p);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	691b      	ldr	r3, [r3, #16]
 8004862:	6839      	ldr	r1, [r7, #0]
 8004864:	4618      	mov	r0, r3
 8004866:	f7ff fec5 	bl	80045f4 <print_string_ptr>
 800486a:	4603      	mov	r3, r0
}
 800486c:	4618      	mov	r0, r3
 800486e:	3708      	adds	r7, #8
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}

08004874 <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d003      	beq.n	800488a <buffer_skip_whitespace+0x16>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d101      	bne.n	800488e <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 800488a:	2300      	movs	r3, #0
 800488c:	e02c      	b.n	80048e8 <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d005      	beq.n	80048a0 <buffer_skip_whitespace+0x2c>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	689a      	ldr	r2, [r3, #8]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	429a      	cmp	r2, r3
 800489e:	d306      	bcc.n	80048ae <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	e021      	b.n	80048e8 <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	1c5a      	adds	r2, r3, #1
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d00d      	beq.n	80048d0 <buffer_skip_whitespace+0x5c>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	689a      	ldr	r2, [r3, #8]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	429a      	cmp	r2, r3
 80048be:	d207      	bcs.n	80048d0 <buffer_skip_whitespace+0x5c>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	4413      	add	r3, r2
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	2b20      	cmp	r3, #32
 80048ce:	d9e9      	bls.n	80048a4 <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	689a      	ldr	r2, [r3, #8]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	429a      	cmp	r2, r3
 80048da:	d104      	bne.n	80048e6 <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	1e5a      	subs	r2, r3, #1
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 80048e6:	687b      	ldr	r3, [r7, #4]
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	370c      	adds	r7, #12
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr

080048f4 <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b082      	sub	sp, #8
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d007      	beq.n	8004912 <skip_utf8_bom+0x1e>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d003      	beq.n	8004912 <skip_utf8_bom+0x1e>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d001      	beq.n	8004916 <skip_utf8_bom+0x22>
    {
        return NULL;
 8004912:	2300      	movs	r3, #0
 8004914:	e01c      	b.n	8004950 <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d018      	beq.n	800494e <skip_utf8_bom+0x5a>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	1d1a      	adds	r2, r3, #4
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	429a      	cmp	r2, r3
 8004928:	d211      	bcs.n	800494e <skip_utf8_bom+0x5a>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	4413      	add	r3, r2
 8004934:	2203      	movs	r2, #3
 8004936:	4908      	ldr	r1, [pc, #32]	; (8004958 <skip_utf8_bom+0x64>)
 8004938:	4618      	mov	r0, r3
 800493a:	f022 f960 	bl	8026bfe <strncmp>
 800493e:	4603      	mov	r3, r0
 8004940:	2b00      	cmp	r3, #0
 8004942:	d104      	bne.n	800494e <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	1cda      	adds	r2, r3, #3
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 800494e:	687b      	ldr	r3, [r7, #4]
}
 8004950:	4618      	mov	r0, r3
 8004952:	3708      	adds	r7, #8
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}
 8004958:	0802abcc 	.word	0x0802abcc

0800495c <cJSON_ParseWithOpts>:

CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b086      	sub	sp, #24
 8004960:	af00      	add	r7, sp, #0
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	60b9      	str	r1, [r7, #8]
 8004966:	607a      	str	r2, [r7, #4]
    size_t buffer_length;

    if (NULL == value)
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d101      	bne.n	8004972 <cJSON_ParseWithOpts+0x16>
    {
        return NULL;
 800496e:	2300      	movs	r3, #0
 8004970:	e00c      	b.n	800498c <cJSON_ParseWithOpts+0x30>
    }

    /* Adding null character size due to require_null_terminated. */
    buffer_length = strlen(value) + sizeof("");
 8004972:	68f8      	ldr	r0, [r7, #12]
 8004974:	f7fb fc36 	bl	80001e4 <strlen>
 8004978:	4603      	mov	r3, r0
 800497a:	3301      	adds	r3, #1
 800497c:	617b      	str	r3, [r7, #20]

    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	68ba      	ldr	r2, [r7, #8]
 8004982:	6979      	ldr	r1, [r7, #20]
 8004984:	68f8      	ldr	r0, [r7, #12]
 8004986:	f000 f805 	bl	8004994 <cJSON_ParseWithLengthOpts>
 800498a:	4603      	mov	r3, r0
}
 800498c:	4618      	mov	r0, r3
 800498e:	3718      	adds	r7, #24
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}

08004994 <cJSON_ParseWithLengthOpts>:

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b08e      	sub	sp, #56	; 0x38
 8004998:	af00      	add	r7, sp, #0
 800499a:	60f8      	str	r0, [r7, #12]
 800499c:	60b9      	str	r1, [r7, #8]
 800499e:	607a      	str	r2, [r7, #4]
 80049a0:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 80049a2:	f107 0318 	add.w	r3, r7, #24
 80049a6:	2200      	movs	r2, #0
 80049a8:	601a      	str	r2, [r3, #0]
 80049aa:	605a      	str	r2, [r3, #4]
 80049ac:	609a      	str	r2, [r3, #8]
 80049ae:	60da      	str	r2, [r3, #12]
 80049b0:	611a      	str	r2, [r3, #16]
 80049b2:	615a      	str	r2, [r3, #20]
 80049b4:	619a      	str	r2, [r3, #24]
    cJSON *item = NULL;
 80049b6:	2300      	movs	r3, #0
 80049b8:	637b      	str	r3, [r7, #52]	; 0x34

    /* reset error position */
    global_error.json = NULL;
 80049ba:	4b41      	ldr	r3, [pc, #260]	; (8004ac0 <cJSON_ParseWithLengthOpts+0x12c>)
 80049bc:	2200      	movs	r2, #0
 80049be:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 80049c0:	4b3f      	ldr	r3, [pc, #252]	; (8004ac0 <cJSON_ParseWithLengthOpts+0x12c>)
 80049c2:	2200      	movs	r2, #0
 80049c4:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d042      	beq.n	8004a52 <cJSON_ParseWithLengthOpts+0xbe>
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d03f      	beq.n	8004a52 <cJSON_ParseWithLengthOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	61bb      	str	r3, [r7, #24]
    buffer.length = buffer_length;
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 80049da:	2300      	movs	r3, #0
 80049dc:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 80049de:	4a39      	ldr	r2, [pc, #228]	; (8004ac4 <cJSON_ParseWithLengthOpts+0x130>)
 80049e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80049e4:	ca07      	ldmia	r2, {r0, r1, r2}
 80049e6:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = cJSON_New_Item(&global_hooks);
 80049ea:	4836      	ldr	r0, [pc, #216]	; (8004ac4 <cJSON_ParseWithLengthOpts+0x130>)
 80049ec:	f7ff f840 	bl	8003a70 <cJSON_New_Item>
 80049f0:	6378      	str	r0, [r7, #52]	; 0x34
    if (item == NULL) /* memory fail */
 80049f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d02e      	beq.n	8004a56 <cJSON_ParseWithLengthOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 80049f8:	f107 0318 	add.w	r3, r7, #24
 80049fc:	4618      	mov	r0, r3
 80049fe:	f7ff ff79 	bl	80048f4 <skip_utf8_bom>
 8004a02:	4603      	mov	r3, r0
 8004a04:	4618      	mov	r0, r3
 8004a06:	f7ff ff35 	bl	8004874 <buffer_skip_whitespace>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	4619      	mov	r1, r3
 8004a0e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004a10:	f000 f8fc 	bl	8004c0c <parse_value>
 8004a14:	4603      	mov	r3, r0
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d01f      	beq.n	8004a5a <cJSON_ParseWithLengthOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d00e      	beq.n	8004a3e <cJSON_ParseWithLengthOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 8004a20:	f107 0318 	add.w	r3, r7, #24
 8004a24:	4618      	mov	r0, r3
 8004a26:	f7ff ff25 	bl	8004874 <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 8004a2a:	6a3a      	ldr	r2, [r7, #32]
 8004a2c:	69fb      	ldr	r3, [r7, #28]
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d215      	bcs.n	8004a5e <cJSON_ParseWithLengthOpts+0xca>
 8004a32:	69ba      	ldr	r2, [r7, #24]
 8004a34:	6a3b      	ldr	r3, [r7, #32]
 8004a36:	4413      	add	r3, r2
 8004a38:	781b      	ldrb	r3, [r3, #0]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d10f      	bne.n	8004a5e <cJSON_ParseWithLengthOpts+0xca>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d004      	beq.n	8004a4e <cJSON_ParseWithLengthOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 8004a44:	69ba      	ldr	r2, [r7, #24]
 8004a46:	6a3b      	ldr	r3, [r7, #32]
 8004a48:	441a      	add	r2, r3
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	601a      	str	r2, [r3, #0]
    }

    return item;
 8004a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a50:	e031      	b.n	8004ab6 <cJSON_ParseWithLengthOpts+0x122>
        goto fail;
 8004a52:	bf00      	nop
 8004a54:	e004      	b.n	8004a60 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 8004a56:	bf00      	nop
 8004a58:	e002      	b.n	8004a60 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 8004a5a:	bf00      	nop
 8004a5c:	e000      	b.n	8004a60 <cJSON_ParseWithLengthOpts+0xcc>
            goto fail;
 8004a5e:	bf00      	nop

fail:
    if (item != NULL)
 8004a60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d002      	beq.n	8004a6c <cJSON_ParseWithLengthOpts+0xd8>
    {
        cJSON_Delete(item);
 8004a66:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004a68:	f7ff f818 	bl	8003a9c <cJSON_Delete>
    }

    if (value != NULL)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d020      	beq.n	8004ab4 <cJSON_ParseWithLengthOpts+0x120>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 8004a76:	2300      	movs	r3, #0
 8004a78:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 8004a7a:	6a3a      	ldr	r2, [r7, #32]
 8004a7c:	69fb      	ldr	r3, [r7, #28]
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d202      	bcs.n	8004a88 <cJSON_ParseWithLengthOpts+0xf4>
        {
            local_error.position = buffer.offset;
 8004a82:	6a3b      	ldr	r3, [r7, #32]
 8004a84:	617b      	str	r3, [r7, #20]
 8004a86:	e005      	b.n	8004a94 <cJSON_ParseWithLengthOpts+0x100>
        }
        else if (buffer.length > 0)
 8004a88:	69fb      	ldr	r3, [r7, #28]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d002      	beq.n	8004a94 <cJSON_ParseWithLengthOpts+0x100>
        {
            local_error.position = buffer.length - 1;
 8004a8e:	69fb      	ldr	r3, [r7, #28]
 8004a90:	3b01      	subs	r3, #1
 8004a92:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d004      	beq.n	8004aa4 <cJSON_ParseWithLengthOpts+0x110>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 8004a9a:	693a      	ldr	r2, [r7, #16]
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	441a      	add	r2, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 8004aa4:	4b06      	ldr	r3, [pc, #24]	; (8004ac0 <cJSON_ParseWithLengthOpts+0x12c>)
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	f107 0310 	add.w	r3, r7, #16
 8004aac:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004ab0:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 8004ab4:	2300      	movs	r3, #0
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3738      	adds	r7, #56	; 0x38
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	bf00      	nop
 8004ac0:	2000003c 	.word	0x2000003c
 8004ac4:	10000000 	.word	0x10000000

08004ac8 <cJSON_Parse>:

/* Default options for cJSON_Parse */
CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b082      	sub	sp, #8
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
    return cJSON_ParseWithOpts(value, 0, 0);
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	2100      	movs	r1, #0
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	f7ff ff41 	bl	800495c <cJSON_ParseWithOpts>
 8004ada:	4603      	mov	r3, r0
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3708      	adds	r7, #8
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}

08004ae4 <print>:
}

#define cjson_min(a, b) (((a) < (b)) ? (a) : (b))

static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b08e      	sub	sp, #56	; 0x38
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	60f8      	str	r0, [r7, #12]
 8004aec:	60b9      	str	r1, [r7, #8]
 8004aee:	607a      	str	r2, [r7, #4]
    static const size_t default_buffer_size = 256;
    printbuffer buffer[1];
    unsigned char *printed = NULL;
 8004af0:	2300      	movs	r3, #0
 8004af2:	637b      	str	r3, [r7, #52]	; 0x34

    memset(buffer, 0, sizeof(buffer));
 8004af4:	f107 0310 	add.w	r3, r7, #16
 8004af8:	2224      	movs	r2, #36	; 0x24
 8004afa:	2100      	movs	r1, #0
 8004afc:	4618      	mov	r0, r3
 8004afe:	f021 f839 	bl	8025b74 <memset>

    /* create buffer */
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a38      	ldr	r2, [pc, #224]	; (8004be8 <print+0x104>)
 8004b08:	6812      	ldr	r2, [r2, #0]
 8004b0a:	4610      	mov	r0, r2
 8004b0c:	4798      	blx	r3
 8004b0e:	4603      	mov	r3, r0
 8004b10:	613b      	str	r3, [r7, #16]
    buffer->length = default_buffer_size;
 8004b12:	4b35      	ldr	r3, [pc, #212]	; (8004be8 <print+0x104>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	617b      	str	r3, [r7, #20]
    buffer->format = format;
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	627b      	str	r3, [r7, #36]	; 0x24
    buffer->hooks = *hooks;
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004b22:	ca07      	ldmia	r2, {r0, r1, r2}
 8004b24:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    if (buffer->buffer == NULL)
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d040      	beq.n	8004bb0 <print+0xcc>
    {
        goto fail;
    }

    /* print the value */
    if (!print_value(item, buffer))
 8004b2e:	f107 0310 	add.w	r3, r7, #16
 8004b32:	4619      	mov	r1, r3
 8004b34:	68f8      	ldr	r0, [r7, #12]
 8004b36:	f000 f955 	bl	8004de4 <print_value>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d039      	beq.n	8004bb4 <print+0xd0>
    {
        goto fail;
    }
    update_offset(buffer);
 8004b40:	f107 0310 	add.w	r3, r7, #16
 8004b44:	4618      	mov	r0, r3
 8004b46:	f7ff f986 	bl	8003e56 <update_offset>

    /* check if reallocate is available */
    if (hooks->reallocate != NULL)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d00d      	beq.n	8004b6e <print+0x8a>
    {
        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	6938      	ldr	r0, [r7, #16]
 8004b58:	69ba      	ldr	r2, [r7, #24]
 8004b5a:	3201      	adds	r2, #1
 8004b5c:	4611      	mov	r1, r2
 8004b5e:	4798      	blx	r3
 8004b60:	6378      	str	r0, [r7, #52]	; 0x34
        if (printed == NULL) {
 8004b62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d027      	beq.n	8004bb8 <print+0xd4>
            goto fail;
        }
        buffer->buffer = NULL;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	613b      	str	r3, [r7, #16]
 8004b6c:	e01e      	b.n	8004bac <print+0xc8>
    }
    else /* otherwise copy the JSON over to a new buffer */
    {
        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	69ba      	ldr	r2, [r7, #24]
 8004b74:	3201      	adds	r2, #1
 8004b76:	4610      	mov	r0, r2
 8004b78:	4798      	blx	r3
 8004b7a:	6378      	str	r0, [r7, #52]	; 0x34
        if (printed == NULL)
 8004b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d01c      	beq.n	8004bbc <print+0xd8>
        {
            goto fail;
        }
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
 8004b82:	6939      	ldr	r1, [r7, #16]
 8004b84:	69bb      	ldr	r3, [r7, #24]
 8004b86:	1c5a      	adds	r2, r3, #1
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	bf28      	it	cs
 8004b8e:	4613      	movcs	r3, r2
 8004b90:	461a      	mov	r2, r3
 8004b92:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004b94:	f020 ffc6 	bl	8025b24 <memcpy>
        printed[buffer->offset] = '\0'; /* just to be sure */
 8004b98:	69bb      	ldr	r3, [r7, #24]
 8004b9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b9c:	4413      	add	r3, r2
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	701a      	strb	r2, [r3, #0]

        /* free the buffer */
        hooks->deallocate(buffer->buffer);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	693a      	ldr	r2, [r7, #16]
 8004ba8:	4610      	mov	r0, r2
 8004baa:	4798      	blx	r3
    }

    return printed;
 8004bac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bae:	e016      	b.n	8004bde <print+0xfa>
        goto fail;
 8004bb0:	bf00      	nop
 8004bb2:	e004      	b.n	8004bbe <print+0xda>
        goto fail;
 8004bb4:	bf00      	nop
 8004bb6:	e002      	b.n	8004bbe <print+0xda>
            goto fail;
 8004bb8:	bf00      	nop
 8004bba:	e000      	b.n	8004bbe <print+0xda>
            goto fail;
 8004bbc:	bf00      	nop

fail:
    if (buffer->buffer != NULL)
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d004      	beq.n	8004bce <print+0xea>
    {
        hooks->deallocate(buffer->buffer);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	693a      	ldr	r2, [r7, #16]
 8004bca:	4610      	mov	r0, r2
 8004bcc:	4798      	blx	r3
    }

    if (printed != NULL)
 8004bce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d003      	beq.n	8004bdc <print+0xf8>
    {
        hooks->deallocate(printed);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004bda:	4798      	blx	r3
    }

    return NULL;
 8004bdc:	2300      	movs	r3, #0
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3738      	adds	r7, #56	; 0x38
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}
 8004be6:	bf00      	nop
 8004be8:	0802f6f8 	.word	0x0802f6f8

08004bec <cJSON_Print>:

/* Render a cJSON item/entity/structure to text. */
CJSON_PUBLIC(char *) cJSON_Print(const cJSON *item)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b082      	sub	sp, #8
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
    return (char*)print(item, true, &global_hooks);
 8004bf4:	4a04      	ldr	r2, [pc, #16]	; (8004c08 <cJSON_Print+0x1c>)
 8004bf6:	2101      	movs	r1, #1
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	f7ff ff73 	bl	8004ae4 <print>
 8004bfe:	4603      	mov	r3, r0
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3708      	adds	r7, #8
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}
 8004c08:	10000000 	.word	0x10000000

08004c0c <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b082      	sub	sp, #8
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d003      	beq.n	8004c24 <parse_value+0x18>
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d101      	bne.n	8004c28 <parse_value+0x1c>
    {
        return false; /* no input */
 8004c24:	2300      	movs	r3, #0
 8004c26:	e0d2      	b.n	8004dce <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d01d      	beq.n	8004c6a <parse_value+0x5e>
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	1d1a      	adds	r2, r3, #4
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d816      	bhi.n	8004c6a <parse_value+0x5e>
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	4413      	add	r3, r2
 8004c46:	2204      	movs	r2, #4
 8004c48:	4963      	ldr	r1, [pc, #396]	; (8004dd8 <parse_value+0x1cc>)
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f021 ffd7 	bl	8026bfe <strncmp>
 8004c50:	4603      	mov	r3, r0
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d109      	bne.n	8004c6a <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2204      	movs	r2, #4
 8004c5a:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	1d1a      	adds	r2, r3, #4
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	609a      	str	r2, [r3, #8]
        return true;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e0b1      	b.n	8004dce <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d01d      	beq.n	8004cac <parse_value+0xa0>
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	1d5a      	adds	r2, r3, #5
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d816      	bhi.n	8004cac <parse_value+0xa0>
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	4413      	add	r3, r2
 8004c88:	2205      	movs	r2, #5
 8004c8a:	4954      	ldr	r1, [pc, #336]	; (8004ddc <parse_value+0x1d0>)
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f021 ffb6 	bl	8026bfe <strncmp>
 8004c92:	4603      	mov	r3, r0
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d109      	bne.n	8004cac <parse_value+0xa0>
    {
        item->type = cJSON_False;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	1d5a      	adds	r2, r3, #5
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	609a      	str	r2, [r3, #8]
        return true;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e090      	b.n	8004dce <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d020      	beq.n	8004cf4 <parse_value+0xe8>
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	1d1a      	adds	r2, r3, #4
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d819      	bhi.n	8004cf4 <parse_value+0xe8>
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	4413      	add	r3, r2
 8004cca:	2204      	movs	r2, #4
 8004ccc:	4944      	ldr	r1, [pc, #272]	; (8004de0 <parse_value+0x1d4>)
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f021 ff95 	bl	8026bfe <strncmp>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d10c      	bne.n	8004cf4 <parse_value+0xe8>
    {
        item->type = cJSON_True;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2202      	movs	r2, #2
 8004cde:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	1d1a      	adds	r2, r3, #4
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	609a      	str	r2, [r3, #8]
        return true;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e06c      	b.n	8004dce <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d013      	beq.n	8004d22 <parse_value+0x116>
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	689a      	ldr	r2, [r3, #8]
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d20d      	bcs.n	8004d22 <parse_value+0x116>
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	4413      	add	r3, r2
 8004d10:	781b      	ldrb	r3, [r3, #0]
 8004d12:	2b22      	cmp	r3, #34	; 0x22
 8004d14:	d105      	bne.n	8004d22 <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 8004d16:	6839      	ldr	r1, [r7, #0]
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f7ff fb25 	bl	8004368 <parse_string>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	e055      	b.n	8004dce <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d023      	beq.n	8004d70 <parse_value+0x164>
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	689a      	ldr	r2, [r3, #8]
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d21d      	bcs.n	8004d70 <parse_value+0x164>
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	4413      	add	r3, r2
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	2b2d      	cmp	r3, #45	; 0x2d
 8004d42:	d00f      	beq.n	8004d64 <parse_value+0x158>
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	4413      	add	r3, r2
 8004d4e:	781b      	ldrb	r3, [r3, #0]
 8004d50:	2b2f      	cmp	r3, #47	; 0x2f
 8004d52:	d90d      	bls.n	8004d70 <parse_value+0x164>
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	4413      	add	r3, r2
 8004d5e:	781b      	ldrb	r3, [r3, #0]
 8004d60:	2b39      	cmp	r3, #57	; 0x39
 8004d62:	d805      	bhi.n	8004d70 <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 8004d64:	6839      	ldr	r1, [r7, #0]
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f7fe feea 	bl	8003b40 <parse_number>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	e02e      	b.n	8004dce <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d013      	beq.n	8004d9e <parse_value+0x192>
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	689a      	ldr	r2, [r3, #8]
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d20d      	bcs.n	8004d9e <parse_value+0x192>
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	4413      	add	r3, r2
 8004d8c:	781b      	ldrb	r3, [r3, #0]
 8004d8e:	2b5b      	cmp	r3, #91	; 0x5b
 8004d90:	d105      	bne.n	8004d9e <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 8004d92:	6839      	ldr	r1, [r7, #0]
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f000 f909 	bl	8004fac <parse_array>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	e017      	b.n	8004dce <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d013      	beq.n	8004dcc <parse_value+0x1c0>
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	689a      	ldr	r2, [r3, #8]
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d20d      	bcs.n	8004dcc <parse_value+0x1c0>
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	4413      	add	r3, r2
 8004dba:	781b      	ldrb	r3, [r3, #0]
 8004dbc:	2b7b      	cmp	r3, #123	; 0x7b
 8004dbe:	d105      	bne.n	8004dcc <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 8004dc0:	6839      	ldr	r1, [r7, #0]
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f000 fa3c 	bl	8005240 <parse_object>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	e000      	b.n	8004dce <parse_value+0x1c2>
    }

    return false;
 8004dcc:	2300      	movs	r3, #0
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3708      	adds	r7, #8
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	0802aba4 	.word	0x0802aba4
 8004ddc:	0802abd0 	.word	0x0802abd0
 8004de0:	0802abd8 	.word	0x0802abd8

08004de4 <print_value>:

/* Render a value to text. */
static cJSON_bool print_value(const cJSON * const item, printbuffer * const output_buffer)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b084      	sub	sp, #16
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	6039      	str	r1, [r7, #0]
    unsigned char *output = NULL;
 8004dee:	2300      	movs	r3, #0
 8004df0:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (output_buffer == NULL))
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d002      	beq.n	8004dfe <print_value+0x1a>
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d101      	bne.n	8004e02 <print_value+0x1e>
    {
        return false;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	e0c9      	b.n	8004f96 <print_value+0x1b2>
    }

    switch ((item->type) & 0xFF)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	2b80      	cmp	r3, #128	; 0x80
 8004e0a:	f000 808e 	beq.w	8004f2a <print_value+0x146>
 8004e0e:	2b80      	cmp	r3, #128	; 0x80
 8004e10:	f300 80c0 	bgt.w	8004f94 <print_value+0x1b0>
 8004e14:	2b20      	cmp	r3, #32
 8004e16:	dc49      	bgt.n	8004eac <print_value+0xc8>
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	f340 80bb 	ble.w	8004f94 <print_value+0x1b0>
 8004e1e:	3b01      	subs	r3, #1
 8004e20:	2b1f      	cmp	r3, #31
 8004e22:	f200 80b7 	bhi.w	8004f94 <print_value+0x1b0>
 8004e26:	a201      	add	r2, pc, #4	; (adr r2, 8004e2c <print_value+0x48>)
 8004e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e2c:	08004ed7 	.word	0x08004ed7
 8004e30:	08004efb 	.word	0x08004efb
 8004e34:	08004f95 	.word	0x08004f95
 8004e38:	08004eb3 	.word	0x08004eb3
 8004e3c:	08004f95 	.word	0x08004f95
 8004e40:	08004f95 	.word	0x08004f95
 8004e44:	08004f95 	.word	0x08004f95
 8004e48:	08004f1f 	.word	0x08004f1f
 8004e4c:	08004f95 	.word	0x08004f95
 8004e50:	08004f95 	.word	0x08004f95
 8004e54:	08004f95 	.word	0x08004f95
 8004e58:	08004f95 	.word	0x08004f95
 8004e5c:	08004f95 	.word	0x08004f95
 8004e60:	08004f95 	.word	0x08004f95
 8004e64:	08004f95 	.word	0x08004f95
 8004e68:	08004f71 	.word	0x08004f71
 8004e6c:	08004f95 	.word	0x08004f95
 8004e70:	08004f95 	.word	0x08004f95
 8004e74:	08004f95 	.word	0x08004f95
 8004e78:	08004f95 	.word	0x08004f95
 8004e7c:	08004f95 	.word	0x08004f95
 8004e80:	08004f95 	.word	0x08004f95
 8004e84:	08004f95 	.word	0x08004f95
 8004e88:	08004f95 	.word	0x08004f95
 8004e8c:	08004f95 	.word	0x08004f95
 8004e90:	08004f95 	.word	0x08004f95
 8004e94:	08004f95 	.word	0x08004f95
 8004e98:	08004f95 	.word	0x08004f95
 8004e9c:	08004f95 	.word	0x08004f95
 8004ea0:	08004f95 	.word	0x08004f95
 8004ea4:	08004f95 	.word	0x08004f95
 8004ea8:	08004f7d 	.word	0x08004f7d
 8004eac:	2b40      	cmp	r3, #64	; 0x40
 8004eae:	d06b      	beq.n	8004f88 <print_value+0x1a4>
 8004eb0:	e070      	b.n	8004f94 <print_value+0x1b0>
    {
        case cJSON_NULL:
            output = ensure(output_buffer, 5);
 8004eb2:	2105      	movs	r1, #5
 8004eb4:	6838      	ldr	r0, [r7, #0]
 8004eb6:	f7fe ff31 	bl	8003d1c <ensure>
 8004eba:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d101      	bne.n	8004ec6 <print_value+0xe2>
            {
                return false;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	e067      	b.n	8004f96 <print_value+0x1b2>
            }
            strcpy((char*)output, "null");
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	4a35      	ldr	r2, [pc, #212]	; (8004fa0 <print_value+0x1bc>)
 8004eca:	6810      	ldr	r0, [r2, #0]
 8004ecc:	6018      	str	r0, [r3, #0]
 8004ece:	7912      	ldrb	r2, [r2, #4]
 8004ed0:	711a      	strb	r2, [r3, #4]
            return true;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e05f      	b.n	8004f96 <print_value+0x1b2>

        case cJSON_False:
            output = ensure(output_buffer, 6);
 8004ed6:	2106      	movs	r1, #6
 8004ed8:	6838      	ldr	r0, [r7, #0]
 8004eda:	f7fe ff1f 	bl	8003d1c <ensure>
 8004ede:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d101      	bne.n	8004eea <print_value+0x106>
            {
                return false;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	e055      	b.n	8004f96 <print_value+0x1b2>
            }
            strcpy((char*)output, "false");
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	4a2d      	ldr	r2, [pc, #180]	; (8004fa4 <print_value+0x1c0>)
 8004eee:	6810      	ldr	r0, [r2, #0]
 8004ef0:	6018      	str	r0, [r3, #0]
 8004ef2:	8892      	ldrh	r2, [r2, #4]
 8004ef4:	809a      	strh	r2, [r3, #4]
            return true;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e04d      	b.n	8004f96 <print_value+0x1b2>

        case cJSON_True:
            output = ensure(output_buffer, 5);
 8004efa:	2105      	movs	r1, #5
 8004efc:	6838      	ldr	r0, [r7, #0]
 8004efe:	f7fe ff0d 	bl	8003d1c <ensure>
 8004f02:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d101      	bne.n	8004f0e <print_value+0x12a>
            {
                return false;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	e043      	b.n	8004f96 <print_value+0x1b2>
            }
            strcpy((char*)output, "true");
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	4a25      	ldr	r2, [pc, #148]	; (8004fa8 <print_value+0x1c4>)
 8004f12:	6810      	ldr	r0, [r2, #0]
 8004f14:	6018      	str	r0, [r3, #0]
 8004f16:	7912      	ldrb	r2, [r2, #4]
 8004f18:	711a      	strb	r2, [r3, #4]
            return true;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e03b      	b.n	8004f96 <print_value+0x1b2>

        case cJSON_Number:
            return print_number(item, output_buffer);
 8004f1e:	6839      	ldr	r1, [r7, #0]
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f7ff f801 	bl	8003f28 <print_number>
 8004f26:	4603      	mov	r3, r0
 8004f28:	e035      	b.n	8004f96 <print_value+0x1b2>

        case cJSON_Raw:
        {
            size_t raw_length = 0;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	60bb      	str	r3, [r7, #8]
            if (item->valuestring == NULL)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	691b      	ldr	r3, [r3, #16]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d101      	bne.n	8004f3a <print_value+0x156>
            {
                return false;
 8004f36:	2300      	movs	r3, #0
 8004f38:	e02d      	b.n	8004f96 <print_value+0x1b2>
            }

            raw_length = strlen(item->valuestring) + sizeof("");
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f7fb f950 	bl	80001e4 <strlen>
 8004f44:	4603      	mov	r3, r0
 8004f46:	3301      	adds	r3, #1
 8004f48:	60bb      	str	r3, [r7, #8]
            output = ensure(output_buffer, raw_length);
 8004f4a:	68b9      	ldr	r1, [r7, #8]
 8004f4c:	6838      	ldr	r0, [r7, #0]
 8004f4e:	f7fe fee5 	bl	8003d1c <ensure>
 8004f52:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d101      	bne.n	8004f5e <print_value+0x17a>
            {
                return false;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	e01b      	b.n	8004f96 <print_value+0x1b2>
            }
            memcpy(output, item->valuestring, raw_length);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	691b      	ldr	r3, [r3, #16]
 8004f62:	68ba      	ldr	r2, [r7, #8]
 8004f64:	4619      	mov	r1, r3
 8004f66:	68f8      	ldr	r0, [r7, #12]
 8004f68:	f020 fddc 	bl	8025b24 <memcpy>
            return true;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e012      	b.n	8004f96 <print_value+0x1b2>
        }

        case cJSON_String:
            return print_string(item, output_buffer);
 8004f70:	6839      	ldr	r1, [r7, #0]
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f7ff fc6e 	bl	8004854 <print_string>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	e00c      	b.n	8004f96 <print_value+0x1b2>

        case cJSON_Array:
            return print_array(item, output_buffer);
 8004f7c:	6839      	ldr	r1, [r7, #0]
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f000 f8d8 	bl	8005134 <print_array>
 8004f84:	4603      	mov	r3, r0
 8004f86:	e006      	b.n	8004f96 <print_value+0x1b2>

        case cJSON_Object:
            return print_object(item, output_buffer);
 8004f88:	6839      	ldr	r1, [r7, #0]
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f000 fa57 	bl	800543e <print_object>
 8004f90:	4603      	mov	r3, r0
 8004f92:	e000      	b.n	8004f96 <print_value+0x1b2>

        default:
            return false;
 8004f94:	2300      	movs	r3, #0
    }
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3710      	adds	r7, #16
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	bf00      	nop
 8004fa0:	0802aba4 	.word	0x0802aba4
 8004fa4:	0802abd0 	.word	0x0802abd0
 8004fa8:	0802abd8 	.word	0x0802abd8

08004fac <parse_array>:

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b086      	sub	sp, #24
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	68db      	ldr	r3, [r3, #12]
 8004fc2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004fc6:	d301      	bcc.n	8004fcc <parse_array+0x20>
    {
        return false; /* to deeply nested */
 8004fc8:	2300      	movs	r3, #0
 8004fca:	e0af      	b.n	800512c <parse_array+0x180>
    }
    input_buffer->depth++;
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	1c5a      	adds	r2, r3, #1
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	4413      	add	r3, r2
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	2b5b      	cmp	r3, #91	; 0x5b
 8004fe4:	f040 8094 	bne.w	8005110 <parse_array+0x164>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	1c5a      	adds	r2, r3, #1
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8004ff2:	6838      	ldr	r0, [r7, #0]
 8004ff4:	f7ff fc3e 	bl	8004874 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d00d      	beq.n	800501a <parse_array+0x6e>
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	689a      	ldr	r2, [r3, #8]
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	429a      	cmp	r2, r3
 8005008:	d207      	bcs.n	800501a <parse_array+0x6e>
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	4413      	add	r3, r2
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	2b5d      	cmp	r3, #93	; 0x5d
 8005018:	d061      	beq.n	80050de <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d005      	beq.n	800502c <parse_array+0x80>
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	689a      	ldr	r2, [r3, #8]
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	429a      	cmp	r2, r3
 800502a:	d305      	bcc.n	8005038 <parse_array+0x8c>
    {
        input_buffer->offset--;
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	1e5a      	subs	r2, r3, #1
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	609a      	str	r2, [r3, #8]
        goto fail;
 8005036:	e072      	b.n	800511e <parse_array+0x172>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	1e5a      	subs	r2, r3, #1
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	3310      	adds	r3, #16
 8005046:	4618      	mov	r0, r3
 8005048:	f7fe fd12 	bl	8003a70 <cJSON_New_Item>
 800504c:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d05f      	beq.n	8005114 <parse_array+0x168>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d104      	bne.n	8005064 <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	617b      	str	r3, [r7, #20]
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	613b      	str	r3, [r7, #16]
 8005062:	e007      	b.n	8005074 <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	68fa      	ldr	r2, [r7, #12]
 8005068:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	693a      	ldr	r2, [r7, #16]
 800506e:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	1c5a      	adds	r2, r3, #1
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 800507e:	6838      	ldr	r0, [r7, #0]
 8005080:	f7ff fbf8 	bl	8004874 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8005084:	6839      	ldr	r1, [r7, #0]
 8005086:	6938      	ldr	r0, [r7, #16]
 8005088:	f7ff fdc0 	bl	8004c0c <parse_value>
 800508c:	4603      	mov	r3, r0
 800508e:	2b00      	cmp	r3, #0
 8005090:	d042      	beq.n	8005118 <parse_array+0x16c>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8005092:	6838      	ldr	r0, [r7, #0]
 8005094:	f7ff fbee 	bl	8004874 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d00d      	beq.n	80050ba <parse_array+0x10e>
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	689a      	ldr	r2, [r3, #8]
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d207      	bcs.n	80050ba <parse_array+0x10e>
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	4413      	add	r3, r2
 80050b4:	781b      	ldrb	r3, [r3, #0]
 80050b6:	2b2c      	cmp	r3, #44	; 0x2c
 80050b8:	d0c3      	beq.n	8005042 <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d02d      	beq.n	800511c <parse_array+0x170>
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	689a      	ldr	r2, [r3, #8]
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d227      	bcs.n	800511c <parse_array+0x170>
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	4413      	add	r3, r2
 80050d6:	781b      	ldrb	r3, [r3, #0]
 80050d8:	2b5d      	cmp	r3, #93	; 0x5d
 80050da:	d11f      	bne.n	800511c <parse_array+0x170>
    {
        goto fail; /* expected end of array */
    }

success:
 80050dc:	e000      	b.n	80050e0 <parse_array+0x134>
        goto success;
 80050de:	bf00      	nop
    input_buffer->depth--;
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	1e5a      	subs	r2, r3, #1
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d002      	beq.n	80050f6 <parse_array+0x14a>
        head->prev = current_item;
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	693a      	ldr	r2, [r7, #16]
 80050f4:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2220      	movs	r2, #32
 80050fa:	60da      	str	r2, [r3, #12]
    item->child = head;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	697a      	ldr	r2, [r7, #20]
 8005100:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	1c5a      	adds	r2, r3, #1
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	609a      	str	r2, [r3, #8]

    return true;
 800510c:	2301      	movs	r3, #1
 800510e:	e00d      	b.n	800512c <parse_array+0x180>
        goto fail;
 8005110:	bf00      	nop
 8005112:	e004      	b.n	800511e <parse_array+0x172>
            goto fail; /* allocation failure */
 8005114:	bf00      	nop
 8005116:	e002      	b.n	800511e <parse_array+0x172>
            goto fail; /* failed to parse value */
 8005118:	bf00      	nop
 800511a:	e000      	b.n	800511e <parse_array+0x172>
        goto fail; /* expected end of array */
 800511c:	bf00      	nop

fail:
    if (head != NULL)
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d002      	beq.n	800512a <parse_array+0x17e>
    {
        cJSON_Delete(head);
 8005124:	6978      	ldr	r0, [r7, #20]
 8005126:	f7fe fcb9 	bl	8003a9c <cJSON_Delete>
    }

    return false;
 800512a:	2300      	movs	r3, #0
}
 800512c:	4618      	mov	r0, r3
 800512e:	3718      	adds	r7, #24
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}

08005134 <print_array>:

/* Render an array to text */
static cJSON_bool print_array(const cJSON * const item, printbuffer * const output_buffer)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b086      	sub	sp, #24
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 800513e:	2300      	movs	r3, #0
 8005140:	617b      	str	r3, [r7, #20]
    size_t length = 0;
 8005142:	2300      	movs	r3, #0
 8005144:	60fb      	str	r3, [r7, #12]
    cJSON *current_element = item->child;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	613b      	str	r3, [r7, #16]

    if (output_buffer == NULL)
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d101      	bne.n	8005156 <print_array+0x22>
    {
        return false;
 8005152:	2300      	movs	r3, #0
 8005154:	e070      	b.n	8005238 <print_array+0x104>
    }

    /* Compose the output array. */
    /* opening square bracket */
    output_pointer = ensure(output_buffer, 1);
 8005156:	2101      	movs	r1, #1
 8005158:	6838      	ldr	r0, [r7, #0]
 800515a:	f7fe fddf 	bl	8003d1c <ensure>
 800515e:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d101      	bne.n	800516a <print_array+0x36>
    {
        return false;
 8005166:	2300      	movs	r3, #0
 8005168:	e066      	b.n	8005238 <print_array+0x104>
    }

    *output_pointer = '[';
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	225b      	movs	r2, #91	; 0x5b
 800516e:	701a      	strb	r2, [r3, #0]
    output_buffer->offset++;
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	1c5a      	adds	r2, r3, #1
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	609a      	str	r2, [r3, #8]
    output_buffer->depth++;
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	68db      	ldr	r3, [r3, #12]
 800517e:	1c5a      	adds	r2, r3, #1
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	60da      	str	r2, [r3, #12]

    while (current_element != NULL)
 8005184:	e03d      	b.n	8005202 <print_array+0xce>
    {
        if (!print_value(current_element, output_buffer))
 8005186:	6839      	ldr	r1, [r7, #0]
 8005188:	6938      	ldr	r0, [r7, #16]
 800518a:	f7ff fe2b 	bl	8004de4 <print_value>
 800518e:	4603      	mov	r3, r0
 8005190:	2b00      	cmp	r3, #0
 8005192:	d101      	bne.n	8005198 <print_array+0x64>
        {
            return false;
 8005194:	2300      	movs	r3, #0
 8005196:	e04f      	b.n	8005238 <print_array+0x104>
        }
        update_offset(output_buffer);
 8005198:	6838      	ldr	r0, [r7, #0]
 800519a:	f7fe fe5c 	bl	8003e56 <update_offset>
        if (current_element->next)
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d02a      	beq.n	80051fc <print_array+0xc8>
        {
            length = (size_t) (output_buffer->format ? 2 : 1);
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	695b      	ldr	r3, [r3, #20]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d001      	beq.n	80051b2 <print_array+0x7e>
 80051ae:	2302      	movs	r3, #2
 80051b0:	e000      	b.n	80051b4 <print_array+0x80>
 80051b2:	2301      	movs	r3, #1
 80051b4:	60fb      	str	r3, [r7, #12]
            output_pointer = ensure(output_buffer, length + 1);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	3301      	adds	r3, #1
 80051ba:	4619      	mov	r1, r3
 80051bc:	6838      	ldr	r0, [r7, #0]
 80051be:	f7fe fdad 	bl	8003d1c <ensure>
 80051c2:	6178      	str	r0, [r7, #20]
            if (output_pointer == NULL)
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d101      	bne.n	80051ce <print_array+0x9a>
            {
                return false;
 80051ca:	2300      	movs	r3, #0
 80051cc:	e034      	b.n	8005238 <print_array+0x104>
            }
            *output_pointer++ = ',';
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	1c5a      	adds	r2, r3, #1
 80051d2:	617a      	str	r2, [r7, #20]
 80051d4:	222c      	movs	r2, #44	; 0x2c
 80051d6:	701a      	strb	r2, [r3, #0]
            if(output_buffer->format)
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	695b      	ldr	r3, [r3, #20]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d004      	beq.n	80051ea <print_array+0xb6>
            {
                *output_pointer++ = ' ';
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	1c5a      	adds	r2, r3, #1
 80051e4:	617a      	str	r2, [r7, #20]
 80051e6:	2220      	movs	r2, #32
 80051e8:	701a      	strb	r2, [r3, #0]
            }
            *output_pointer = '\0';
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	2200      	movs	r2, #0
 80051ee:	701a      	strb	r2, [r3, #0]
            output_buffer->offset += length;
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	689a      	ldr	r2, [r3, #8]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	441a      	add	r2, r3
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	609a      	str	r2, [r3, #8]
        }
        current_element = current_element->next;
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	613b      	str	r3, [r7, #16]
    while (current_element != NULL)
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d1be      	bne.n	8005186 <print_array+0x52>
    }

    output_pointer = ensure(output_buffer, 2);
 8005208:	2102      	movs	r1, #2
 800520a:	6838      	ldr	r0, [r7, #0]
 800520c:	f7fe fd86 	bl	8003d1c <ensure>
 8005210:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d101      	bne.n	800521c <print_array+0xe8>
    {
        return false;
 8005218:	2300      	movs	r3, #0
 800521a:	e00d      	b.n	8005238 <print_array+0x104>
    }
    *output_pointer++ = ']';
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	1c5a      	adds	r2, r3, #1
 8005220:	617a      	str	r2, [r7, #20]
 8005222:	225d      	movs	r2, #93	; 0x5d
 8005224:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	2200      	movs	r2, #0
 800522a:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	1e5a      	subs	r2, r3, #1
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	60da      	str	r2, [r3, #12]

    return true;
 8005236:	2301      	movs	r3, #1
}
 8005238:	4618      	mov	r0, r3
 800523a:	3718      	adds	r7, #24
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}

08005240 <parse_object>:

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b086      	sub	sp, #24
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 800524a:	2300      	movs	r3, #0
 800524c:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 800524e:	2300      	movs	r3, #0
 8005250:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	68db      	ldr	r3, [r3, #12]
 8005256:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800525a:	d301      	bcc.n	8005260 <parse_object+0x20>
    {
        return false; /* to deeply nested */
 800525c:	2300      	movs	r3, #0
 800525e:	e0ea      	b.n	8005436 <parse_object+0x1f6>
    }
    input_buffer->depth++;
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	1c5a      	adds	r2, r3, #1
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	2b00      	cmp	r3, #0
 800526e:	f000 80d0 	beq.w	8005412 <parse_object+0x1d2>
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	689a      	ldr	r2, [r3, #8]
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	429a      	cmp	r2, r3
 800527c:	f080 80c9 	bcs.w	8005412 <parse_object+0x1d2>
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	4413      	add	r3, r2
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	2b7b      	cmp	r3, #123	; 0x7b
 800528e:	f040 80c0 	bne.w	8005412 <parse_object+0x1d2>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	1c5a      	adds	r2, r3, #1
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 800529c:	6838      	ldr	r0, [r7, #0]
 800529e:	f7ff fae9 	bl	8004874 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d00e      	beq.n	80052c6 <parse_object+0x86>
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	689a      	ldr	r2, [r3, #8]
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d208      	bcs.n	80052c6 <parse_object+0x86>
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	4413      	add	r3, r2
 80052be:	781b      	ldrb	r3, [r3, #0]
 80052c0:	2b7d      	cmp	r3, #125	; 0x7d
 80052c2:	f000 808d 	beq.w	80053e0 <parse_object+0x1a0>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d005      	beq.n	80052d8 <parse_object+0x98>
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	689a      	ldr	r2, [r3, #8]
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d305      	bcc.n	80052e4 <parse_object+0xa4>
    {
        input_buffer->offset--;
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	1e5a      	subs	r2, r3, #1
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	609a      	str	r2, [r3, #8]
        goto fail;
 80052e2:	e0a1      	b.n	8005428 <parse_object+0x1e8>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	1e5a      	subs	r2, r3, #1
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	3310      	adds	r3, #16
 80052f2:	4618      	mov	r0, r3
 80052f4:	f7fe fbbc 	bl	8003a70 <cJSON_New_Item>
 80052f8:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	f000 808a 	beq.w	8005416 <parse_object+0x1d6>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d104      	bne.n	8005312 <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	617b      	str	r3, [r7, #20]
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	613b      	str	r3, [r7, #16]
 8005310:	e007      	b.n	8005322 <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	68fa      	ldr	r2, [r7, #12]
 8005316:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	693a      	ldr	r2, [r7, #16]
 800531c:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	613b      	str	r3, [r7, #16]
        }

        /* parse the name of the child */
        input_buffer->offset++;
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	1c5a      	adds	r2, r3, #1
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 800532c:	6838      	ldr	r0, [r7, #0]
 800532e:	f7ff faa1 	bl	8004874 <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 8005332:	6839      	ldr	r1, [r7, #0]
 8005334:	6938      	ldr	r0, [r7, #16]
 8005336:	f7ff f817 	bl	8004368 <parse_string>
 800533a:	4603      	mov	r3, r0
 800533c:	2b00      	cmp	r3, #0
 800533e:	d06c      	beq.n	800541a <parse_object+0x1da>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 8005340:	6838      	ldr	r0, [r7, #0]
 8005342:	f7ff fa97 	bl	8004874 <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	691a      	ldr	r2, [r3, #16]
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	2200      	movs	r2, #0
 8005352:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d061      	beq.n	800541e <parse_object+0x1de>
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	689a      	ldr	r2, [r3, #8]
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	429a      	cmp	r2, r3
 8005364:	d25b      	bcs.n	800541e <parse_object+0x1de>
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	681a      	ldr	r2, [r3, #0]
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	4413      	add	r3, r2
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	2b3a      	cmp	r3, #58	; 0x3a
 8005374:	d153      	bne.n	800541e <parse_object+0x1de>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	1c5a      	adds	r2, r3, #1
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8005380:	6838      	ldr	r0, [r7, #0]
 8005382:	f7ff fa77 	bl	8004874 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8005386:	6839      	ldr	r1, [r7, #0]
 8005388:	6938      	ldr	r0, [r7, #16]
 800538a:	f7ff fc3f 	bl	8004c0c <parse_value>
 800538e:	4603      	mov	r3, r0
 8005390:	2b00      	cmp	r3, #0
 8005392:	d046      	beq.n	8005422 <parse_object+0x1e2>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8005394:	6838      	ldr	r0, [r7, #0]
 8005396:	f7ff fa6d 	bl	8004874 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d00d      	beq.n	80053bc <parse_object+0x17c>
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	689a      	ldr	r2, [r3, #8]
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d207      	bcs.n	80053bc <parse_object+0x17c>
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	4413      	add	r3, r2
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	2b2c      	cmp	r3, #44	; 0x2c
 80053ba:	d098      	beq.n	80052ee <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d031      	beq.n	8005426 <parse_object+0x1e6>
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	689a      	ldr	r2, [r3, #8]
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d22b      	bcs.n	8005426 <parse_object+0x1e6>
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	4413      	add	r3, r2
 80053d8:	781b      	ldrb	r3, [r3, #0]
 80053da:	2b7d      	cmp	r3, #125	; 0x7d
 80053dc:	d123      	bne.n	8005426 <parse_object+0x1e6>
    {
        goto fail; /* expected end of object */
    }

success:
 80053de:	e000      	b.n	80053e2 <parse_object+0x1a2>
        goto success; /* empty object */
 80053e0:	bf00      	nop
    input_buffer->depth--;
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	68db      	ldr	r3, [r3, #12]
 80053e6:	1e5a      	subs	r2, r3, #1
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d002      	beq.n	80053f8 <parse_object+0x1b8>
        head->prev = current_item;
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	693a      	ldr	r2, [r7, #16]
 80053f6:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2240      	movs	r2, #64	; 0x40
 80053fc:	60da      	str	r2, [r3, #12]
    item->child = head;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	697a      	ldr	r2, [r7, #20]
 8005402:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	1c5a      	adds	r2, r3, #1
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	609a      	str	r2, [r3, #8]
    return true;
 800540e:	2301      	movs	r3, #1
 8005410:	e011      	b.n	8005436 <parse_object+0x1f6>
        goto fail; /* not an object */
 8005412:	bf00      	nop
 8005414:	e008      	b.n	8005428 <parse_object+0x1e8>
            goto fail; /* allocation failure */
 8005416:	bf00      	nop
 8005418:	e006      	b.n	8005428 <parse_object+0x1e8>
            goto fail; /* failed to parse name */
 800541a:	bf00      	nop
 800541c:	e004      	b.n	8005428 <parse_object+0x1e8>
            goto fail; /* invalid object */
 800541e:	bf00      	nop
 8005420:	e002      	b.n	8005428 <parse_object+0x1e8>
            goto fail; /* failed to parse value */
 8005422:	bf00      	nop
 8005424:	e000      	b.n	8005428 <parse_object+0x1e8>
        goto fail; /* expected end of object */
 8005426:	bf00      	nop

fail:
    if (head != NULL)
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d002      	beq.n	8005434 <parse_object+0x1f4>
    {
        cJSON_Delete(head);
 800542e:	6978      	ldr	r0, [r7, #20]
 8005430:	f7fe fb34 	bl	8003a9c <cJSON_Delete>
    }

    return false;
 8005434:	2300      	movs	r3, #0
}
 8005436:	4618      	mov	r0, r3
 8005438:	3718      	adds	r7, #24
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}

0800543e <print_object>:

/* Render an object to text. */
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer)
{
 800543e:	b580      	push	{r7, lr}
 8005440:	b088      	sub	sp, #32
 8005442:	af00      	add	r7, sp, #0
 8005444:	6078      	str	r0, [r7, #4]
 8005446:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8005448:	2300      	movs	r3, #0
 800544a:	61fb      	str	r3, [r7, #28]
    size_t length = 0;
 800544c:	2300      	movs	r3, #0
 800544e:	60fb      	str	r3, [r7, #12]
    cJSON *current_item = item->child;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	61bb      	str	r3, [r7, #24]

    if (output_buffer == NULL)
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d101      	bne.n	8005460 <print_object+0x22>
    {
        return false;
 800545c:	2300      	movs	r3, #0
 800545e:	e108      	b.n	8005672 <print_object+0x234>
    }

    /* Compose the output: */
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	695b      	ldr	r3, [r3, #20]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d001      	beq.n	800546c <print_object+0x2e>
 8005468:	2302      	movs	r3, #2
 800546a:	e000      	b.n	800546e <print_object+0x30>
 800546c:	2301      	movs	r3, #1
 800546e:	60fb      	str	r3, [r7, #12]
    output_pointer = ensure(output_buffer, length + 1);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	3301      	adds	r3, #1
 8005474:	4619      	mov	r1, r3
 8005476:	6838      	ldr	r0, [r7, #0]
 8005478:	f7fe fc50 	bl	8003d1c <ensure>
 800547c:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 800547e:	69fb      	ldr	r3, [r7, #28]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d101      	bne.n	8005488 <print_object+0x4a>
    {
        return false;
 8005484:	2300      	movs	r3, #0
 8005486:	e0f4      	b.n	8005672 <print_object+0x234>
    }

    *output_pointer++ = '{';
 8005488:	69fb      	ldr	r3, [r7, #28]
 800548a:	1c5a      	adds	r2, r3, #1
 800548c:	61fa      	str	r2, [r7, #28]
 800548e:	227b      	movs	r2, #123	; 0x7b
 8005490:	701a      	strb	r2, [r3, #0]
    output_buffer->depth++;
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	68db      	ldr	r3, [r3, #12]
 8005496:	1c5a      	adds	r2, r3, #1
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	60da      	str	r2, [r3, #12]
    if (output_buffer->format)
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	695b      	ldr	r3, [r3, #20]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d004      	beq.n	80054ae <print_object+0x70>
    {
        *output_pointer++ = '\n';
 80054a4:	69fb      	ldr	r3, [r7, #28]
 80054a6:	1c5a      	adds	r2, r3, #1
 80054a8:	61fa      	str	r2, [r7, #28]
 80054aa:	220a      	movs	r2, #10
 80054ac:	701a      	strb	r2, [r3, #0]
    }
    output_buffer->offset += length;
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	689a      	ldr	r2, [r3, #8]
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	441a      	add	r2, r3
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	609a      	str	r2, [r3, #8]

    while (current_item)
 80054ba:	e0a0      	b.n	80055fe <print_object+0x1c0>
    {
        if (output_buffer->format)
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	695b      	ldr	r3, [r3, #20]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d022      	beq.n	800550a <print_object+0xcc>
        {
            size_t i;
            output_pointer = ensure(output_buffer, output_buffer->depth);
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	68db      	ldr	r3, [r3, #12]
 80054c8:	4619      	mov	r1, r3
 80054ca:	6838      	ldr	r0, [r7, #0]
 80054cc:	f7fe fc26 	bl	8003d1c <ensure>
 80054d0:	61f8      	str	r0, [r7, #28]
            if (output_pointer == NULL)
 80054d2:	69fb      	ldr	r3, [r7, #28]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d101      	bne.n	80054dc <print_object+0x9e>
            {
                return false;
 80054d8:	2300      	movs	r3, #0
 80054da:	e0ca      	b.n	8005672 <print_object+0x234>
            }
            for (i = 0; i < output_buffer->depth; i++)
 80054dc:	2300      	movs	r3, #0
 80054de:	617b      	str	r3, [r7, #20]
 80054e0:	e007      	b.n	80054f2 <print_object+0xb4>
            {
                *output_pointer++ = '\t';
 80054e2:	69fb      	ldr	r3, [r7, #28]
 80054e4:	1c5a      	adds	r2, r3, #1
 80054e6:	61fa      	str	r2, [r7, #28]
 80054e8:	2209      	movs	r2, #9
 80054ea:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < output_buffer->depth; i++)
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	3301      	adds	r3, #1
 80054f0:	617b      	str	r3, [r7, #20]
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	68db      	ldr	r3, [r3, #12]
 80054f6:	697a      	ldr	r2, [r7, #20]
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d3f2      	bcc.n	80054e2 <print_object+0xa4>
            }
            output_buffer->offset += output_buffer->depth;
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	689a      	ldr	r2, [r3, #8]
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	441a      	add	r2, r3
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	609a      	str	r2, [r3, #8]
        }

        /* print key */
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
 800550a:	69bb      	ldr	r3, [r7, #24]
 800550c:	6a1b      	ldr	r3, [r3, #32]
 800550e:	6839      	ldr	r1, [r7, #0]
 8005510:	4618      	mov	r0, r3
 8005512:	f7ff f86f 	bl	80045f4 <print_string_ptr>
 8005516:	4603      	mov	r3, r0
 8005518:	2b00      	cmp	r3, #0
 800551a:	d101      	bne.n	8005520 <print_object+0xe2>
        {
            return false;
 800551c:	2300      	movs	r3, #0
 800551e:	e0a8      	b.n	8005672 <print_object+0x234>
        }
        update_offset(output_buffer);
 8005520:	6838      	ldr	r0, [r7, #0]
 8005522:	f7fe fc98 	bl	8003e56 <update_offset>

        length = (size_t) (output_buffer->format ? 2 : 1);
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	695b      	ldr	r3, [r3, #20]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d001      	beq.n	8005532 <print_object+0xf4>
 800552e:	2302      	movs	r3, #2
 8005530:	e000      	b.n	8005534 <print_object+0xf6>
 8005532:	2301      	movs	r3, #1
 8005534:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length);
 8005536:	68f9      	ldr	r1, [r7, #12]
 8005538:	6838      	ldr	r0, [r7, #0]
 800553a:	f7fe fbef 	bl	8003d1c <ensure>
 800553e:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 8005540:	69fb      	ldr	r3, [r7, #28]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d101      	bne.n	800554a <print_object+0x10c>
        {
            return false;
 8005546:	2300      	movs	r3, #0
 8005548:	e093      	b.n	8005672 <print_object+0x234>
        }
        *output_pointer++ = ':';
 800554a:	69fb      	ldr	r3, [r7, #28]
 800554c:	1c5a      	adds	r2, r3, #1
 800554e:	61fa      	str	r2, [r7, #28]
 8005550:	223a      	movs	r2, #58	; 0x3a
 8005552:	701a      	strb	r2, [r3, #0]
        if (output_buffer->format)
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	695b      	ldr	r3, [r3, #20]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d004      	beq.n	8005566 <print_object+0x128>
        {
            *output_pointer++ = '\t';
 800555c:	69fb      	ldr	r3, [r7, #28]
 800555e:	1c5a      	adds	r2, r3, #1
 8005560:	61fa      	str	r2, [r7, #28]
 8005562:	2209      	movs	r2, #9
 8005564:	701a      	strb	r2, [r3, #0]
        }
        output_buffer->offset += length;
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	689a      	ldr	r2, [r3, #8]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	441a      	add	r2, r3
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	609a      	str	r2, [r3, #8]

        /* print value */
        if (!print_value(current_item, output_buffer))
 8005572:	6839      	ldr	r1, [r7, #0]
 8005574:	69b8      	ldr	r0, [r7, #24]
 8005576:	f7ff fc35 	bl	8004de4 <print_value>
 800557a:	4603      	mov	r3, r0
 800557c:	2b00      	cmp	r3, #0
 800557e:	d101      	bne.n	8005584 <print_object+0x146>
        {
            return false;
 8005580:	2300      	movs	r3, #0
 8005582:	e076      	b.n	8005672 <print_object+0x234>
        }
        update_offset(output_buffer);
 8005584:	6838      	ldr	r0, [r7, #0]
 8005586:	f7fe fc66 	bl	8003e56 <update_offset>

        /* print comma if not last */
        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	695b      	ldr	r3, [r3, #20]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d001      	beq.n	8005596 <print_object+0x158>
 8005592:	2201      	movs	r2, #1
 8005594:	e000      	b.n	8005598 <print_object+0x15a>
 8005596:	2200      	movs	r2, #0
 8005598:	69bb      	ldr	r3, [r7, #24]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d001      	beq.n	80055a4 <print_object+0x166>
 80055a0:	2301      	movs	r3, #1
 80055a2:	e000      	b.n	80055a6 <print_object+0x168>
 80055a4:	2300      	movs	r3, #0
 80055a6:	4413      	add	r3, r2
 80055a8:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length + 1);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	3301      	adds	r3, #1
 80055ae:	4619      	mov	r1, r3
 80055b0:	6838      	ldr	r0, [r7, #0]
 80055b2:	f7fe fbb3 	bl	8003d1c <ensure>
 80055b6:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 80055b8:	69fb      	ldr	r3, [r7, #28]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d101      	bne.n	80055c2 <print_object+0x184>
        {
            return false;
 80055be:	2300      	movs	r3, #0
 80055c0:	e057      	b.n	8005672 <print_object+0x234>
        }
        if (current_item->next)
 80055c2:	69bb      	ldr	r3, [r7, #24]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d004      	beq.n	80055d4 <print_object+0x196>
        {
            *output_pointer++ = ',';
 80055ca:	69fb      	ldr	r3, [r7, #28]
 80055cc:	1c5a      	adds	r2, r3, #1
 80055ce:	61fa      	str	r2, [r7, #28]
 80055d0:	222c      	movs	r2, #44	; 0x2c
 80055d2:	701a      	strb	r2, [r3, #0]
        }

        if (output_buffer->format)
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	695b      	ldr	r3, [r3, #20]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d004      	beq.n	80055e6 <print_object+0x1a8>
        {
            *output_pointer++ = '\n';
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	1c5a      	adds	r2, r3, #1
 80055e0:	61fa      	str	r2, [r7, #28]
 80055e2:	220a      	movs	r2, #10
 80055e4:	701a      	strb	r2, [r3, #0]
        }
        *output_pointer = '\0';
 80055e6:	69fb      	ldr	r3, [r7, #28]
 80055e8:	2200      	movs	r2, #0
 80055ea:	701a      	strb	r2, [r3, #0]
        output_buffer->offset += length;
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	689a      	ldr	r2, [r3, #8]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	441a      	add	r2, r3
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	609a      	str	r2, [r3, #8]

        current_item = current_item->next;
 80055f8:	69bb      	ldr	r3, [r7, #24]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	61bb      	str	r3, [r7, #24]
    while (current_item)
 80055fe:	69bb      	ldr	r3, [r7, #24]
 8005600:	2b00      	cmp	r3, #0
 8005602:	f47f af5b 	bne.w	80054bc <print_object+0x7e>
    }

    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	695b      	ldr	r3, [r3, #20]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d003      	beq.n	8005616 <print_object+0x1d8>
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	68db      	ldr	r3, [r3, #12]
 8005612:	3301      	adds	r3, #1
 8005614:	e000      	b.n	8005618 <print_object+0x1da>
 8005616:	2302      	movs	r3, #2
 8005618:	4619      	mov	r1, r3
 800561a:	6838      	ldr	r0, [r7, #0]
 800561c:	f7fe fb7e 	bl	8003d1c <ensure>
 8005620:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 8005622:	69fb      	ldr	r3, [r7, #28]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d101      	bne.n	800562c <print_object+0x1ee>
    {
        return false;
 8005628:	2300      	movs	r3, #0
 800562a:	e022      	b.n	8005672 <print_object+0x234>
    }
    if (output_buffer->format)
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	695b      	ldr	r3, [r3, #20]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d010      	beq.n	8005656 <print_object+0x218>
    {
        size_t i;
        for (i = 0; i < (output_buffer->depth - 1); i++)
 8005634:	2300      	movs	r3, #0
 8005636:	613b      	str	r3, [r7, #16]
 8005638:	e007      	b.n	800564a <print_object+0x20c>
        {
            *output_pointer++ = '\t';
 800563a:	69fb      	ldr	r3, [r7, #28]
 800563c:	1c5a      	adds	r2, r3, #1
 800563e:	61fa      	str	r2, [r7, #28]
 8005640:	2209      	movs	r2, #9
 8005642:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < (output_buffer->depth - 1); i++)
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	3301      	adds	r3, #1
 8005648:	613b      	str	r3, [r7, #16]
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	3b01      	subs	r3, #1
 8005650:	693a      	ldr	r2, [r7, #16]
 8005652:	429a      	cmp	r2, r3
 8005654:	d3f1      	bcc.n	800563a <print_object+0x1fc>
        }
    }
    *output_pointer++ = '}';
 8005656:	69fb      	ldr	r3, [r7, #28]
 8005658:	1c5a      	adds	r2, r3, #1
 800565a:	61fa      	str	r2, [r7, #28]
 800565c:	227d      	movs	r2, #125	; 0x7d
 800565e:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 8005660:	69fb      	ldr	r3, [r7, #28]
 8005662:	2200      	movs	r2, #0
 8005664:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	1e5a      	subs	r2, r3, #1
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	60da      	str	r2, [r3, #12]

    return true;
 8005670:	2301      	movs	r3, #1
}
 8005672:	4618      	mov	r0, r3
 8005674:	3720      	adds	r7, #32
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}

0800567a <cJSON_GetArraySize>:

/* Get Array size/item / object item. */
CJSON_PUBLIC(int) cJSON_GetArraySize(const cJSON *array)
{
 800567a:	b480      	push	{r7}
 800567c:	b085      	sub	sp, #20
 800567e:	af00      	add	r7, sp, #0
 8005680:	6078      	str	r0, [r7, #4]
    cJSON *child = NULL;
 8005682:	2300      	movs	r3, #0
 8005684:	60fb      	str	r3, [r7, #12]
    size_t size = 0;
 8005686:	2300      	movs	r3, #0
 8005688:	60bb      	str	r3, [r7, #8]

    if (array == NULL)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d101      	bne.n	8005694 <cJSON_GetArraySize+0x1a>
    {
        return 0;
 8005690:	2300      	movs	r3, #0
 8005692:	e00d      	b.n	80056b0 <cJSON_GetArraySize+0x36>
    }

    child = array->child;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	60fb      	str	r3, [r7, #12]

    while(child != NULL)
 800569a:	e005      	b.n	80056a8 <cJSON_GetArraySize+0x2e>
    {
        size++;
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	3301      	adds	r3, #1
 80056a0:	60bb      	str	r3, [r7, #8]
        child = child->next;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	60fb      	str	r3, [r7, #12]
    while(child != NULL)
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d1f6      	bne.n	800569c <cJSON_GetArraySize+0x22>
    }

    /* FIXME: Can overflow here. Cannot be fixed without breaking the API */

    return (int)size;
 80056ae:	68bb      	ldr	r3, [r7, #8]
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3714      	adds	r7, #20
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr

080056bc <get_array_item>:

static cJSON* get_array_item(const cJSON *array, size_t index)
{
 80056bc:	b480      	push	{r7}
 80056be:	b085      	sub	sp, #20
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
 80056c4:	6039      	str	r1, [r7, #0]
    cJSON *current_child = NULL;
 80056c6:	2300      	movs	r3, #0
 80056c8:	60fb      	str	r3, [r7, #12]

    if (array == NULL)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d101      	bne.n	80056d4 <get_array_item+0x18>
    {
        return NULL;
 80056d0:	2300      	movs	r3, #0
 80056d2:	e010      	b.n	80056f6 <get_array_item+0x3a>
    }

    current_child = array->child;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	60fb      	str	r3, [r7, #12]
    while ((current_child != NULL) && (index > 0))
 80056da:	e005      	b.n	80056e8 <get_array_item+0x2c>
    {
        index--;
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	3b01      	subs	r3, #1
 80056e0:	603b      	str	r3, [r7, #0]
        current_child = current_child->next;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	60fb      	str	r3, [r7, #12]
    while ((current_child != NULL) && (index > 0))
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d002      	beq.n	80056f4 <get_array_item+0x38>
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d1f3      	bne.n	80056dc <get_array_item+0x20>
    }

    return current_child;
 80056f4:	68fb      	ldr	r3, [r7, #12]
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3714      	adds	r7, #20
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr

08005702 <cJSON_GetArrayItem>:

CJSON_PUBLIC(cJSON *) cJSON_GetArrayItem(const cJSON *array, int index)
{
 8005702:	b580      	push	{r7, lr}
 8005704:	b082      	sub	sp, #8
 8005706:	af00      	add	r7, sp, #0
 8005708:	6078      	str	r0, [r7, #4]
 800570a:	6039      	str	r1, [r7, #0]
    if (index < 0)
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	2b00      	cmp	r3, #0
 8005710:	da01      	bge.n	8005716 <cJSON_GetArrayItem+0x14>
    {
        return NULL;
 8005712:	2300      	movs	r3, #0
 8005714:	e005      	b.n	8005722 <cJSON_GetArrayItem+0x20>
    }

    return get_array_item(array, (size_t)index);
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	4619      	mov	r1, r3
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f7ff ffce 	bl	80056bc <get_array_item>
 8005720:	4603      	mov	r3, r0
}
 8005722:	4618      	mov	r0, r3
 8005724:	3708      	adds	r7, #8
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}

0800572a <get_object_item>:

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 800572a:	b580      	push	{r7, lr}
 800572c:	b086      	sub	sp, #24
 800572e:	af00      	add	r7, sp, #0
 8005730:	60f8      	str	r0, [r7, #12]
 8005732:	60b9      	str	r1, [r7, #8]
 8005734:	607a      	str	r2, [r7, #4]
    cJSON *current_element = NULL;
 8005736:	2300      	movs	r3, #0
 8005738:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d002      	beq.n	8005746 <get_object_item+0x1c>
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d101      	bne.n	800574a <get_object_item+0x20>
    {
        return NULL;
 8005746:	2300      	movs	r3, #0
 8005748:	e033      	b.n	80057b2 <get_object_item+0x88>
    }

    current_element = object->child;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d017      	beq.n	8005786 <get_object_item+0x5c>
    {
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8005756:	e002      	b.n	800575e <get_object_item+0x34>
        {
            current_element = current_element->next;
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d01c      	beq.n	800579e <get_object_item+0x74>
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	6a1b      	ldr	r3, [r3, #32]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d018      	beq.n	800579e <get_object_item+0x74>
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	6a1b      	ldr	r3, [r3, #32]
 8005770:	4619      	mov	r1, r3
 8005772:	68b8      	ldr	r0, [r7, #8]
 8005774:	f7fa fd2c 	bl	80001d0 <strcmp>
 8005778:	4603      	mov	r3, r0
 800577a:	2b00      	cmp	r3, #0
 800577c:	d1ec      	bne.n	8005758 <get_object_item+0x2e>
 800577e:	e00e      	b.n	800579e <get_object_item+0x74>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d008      	beq.n	800579e <get_object_item+0x74>
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	6a1b      	ldr	r3, [r3, #32]
 8005790:	4619      	mov	r1, r3
 8005792:	68b8      	ldr	r0, [r7, #8]
 8005794:	f7fe f8d8 	bl	8003948 <case_insensitive_strcmp>
 8005798:	4603      	mov	r3, r0
 800579a:	2b00      	cmp	r3, #0
 800579c:	d1f0      	bne.n	8005780 <get_object_item+0x56>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d003      	beq.n	80057ac <get_object_item+0x82>
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	6a1b      	ldr	r3, [r3, #32]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d101      	bne.n	80057b0 <get_object_item+0x86>
        return NULL;
 80057ac:	2300      	movs	r3, #0
 80057ae:	e000      	b.n	80057b2 <get_object_item+0x88>
    }

    return current_element;
 80057b0:	697b      	ldr	r3, [r7, #20]
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3718      	adds	r7, #24
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}

080057ba <cJSON_GetObjectItem>:

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItem(const cJSON * const object, const char * const string)
{
 80057ba:	b580      	push	{r7, lr}
 80057bc:	b082      	sub	sp, #8
 80057be:	af00      	add	r7, sp, #0
 80057c0:	6078      	str	r0, [r7, #4]
 80057c2:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, false);
 80057c4:	2200      	movs	r2, #0
 80057c6:	6839      	ldr	r1, [r7, #0]
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f7ff ffae 	bl	800572a <get_object_item>
 80057ce:	4603      	mov	r3, r0
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3708      	adds	r7, #8
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}

080057d8 <suffix_object>:
    return cJSON_GetObjectItem(object, string) ? 1 : 0;
}

/* Utility for array list handling. */
static void suffix_object(cJSON *prev, cJSON *item)
{
 80057d8:	b480      	push	{r7}
 80057da:	b083      	sub	sp, #12
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	6039      	str	r1, [r7, #0]
    prev->next = item;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	683a      	ldr	r2, [r7, #0]
 80057e6:	601a      	str	r2, [r3, #0]
    item->prev = prev;
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	687a      	ldr	r2, [r7, #4]
 80057ec:	605a      	str	r2, [r3, #4]
}
 80057ee:	bf00      	nop
 80057f0:	370c      	adds	r7, #12
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr

080057fa <add_item_to_array>:
    reference->next = reference->prev = NULL;
    return reference;
}

static cJSON_bool add_item_to_array(cJSON *array, cJSON *item)
{
 80057fa:	b580      	push	{r7, lr}
 80057fc:	b084      	sub	sp, #16
 80057fe:	af00      	add	r7, sp, #0
 8005800:	6078      	str	r0, [r7, #4]
 8005802:	6039      	str	r1, [r7, #0]
    cJSON *child = NULL;
 8005804:	2300      	movs	r3, #0
 8005806:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (array == NULL) || (array == item))
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d006      	beq.n	800581c <add_item_to_array+0x22>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d003      	beq.n	800581c <add_item_to_array+0x22>
 8005814:	687a      	ldr	r2, [r7, #4]
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	429a      	cmp	r2, r3
 800581a:	d101      	bne.n	8005820 <add_item_to_array+0x26>
    {
        return false;
 800581c:	2300      	movs	r3, #0
 800581e:	e01e      	b.n	800585e <add_item_to_array+0x64>
    }

    child = array->child;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	60fb      	str	r3, [r7, #12]
    /*
     * To find the last item in array quickly, we use prev in array
     */
    if (child == NULL)
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d109      	bne.n	8005840 <add_item_to_array+0x46>
    {
        /* list is empty, start new one */
        array->child = item;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	683a      	ldr	r2, [r7, #0]
 8005830:	609a      	str	r2, [r3, #8]
        item->prev = item;
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	683a      	ldr	r2, [r7, #0]
 8005836:	605a      	str	r2, [r3, #4]
        item->next = NULL;
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	2200      	movs	r2, #0
 800583c:	601a      	str	r2, [r3, #0]
 800583e:	e00d      	b.n	800585c <add_item_to_array+0x62>
    }
    else
    {
        /* append to the end */
        if (child->prev)
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d009      	beq.n	800585c <add_item_to_array+0x62>
        {
            suffix_object(child->prev, item);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	6839      	ldr	r1, [r7, #0]
 800584e:	4618      	mov	r0, r3
 8005850:	f7ff ffc2 	bl	80057d8 <suffix_object>
            array->child->prev = item;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	683a      	ldr	r2, [r7, #0]
 800585a:	605a      	str	r2, [r3, #4]
        }
    }

    return true;
 800585c:	2301      	movs	r3, #1
}
 800585e:	4618      	mov	r0, r3
 8005860:	3710      	adds	r7, #16
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}

08005866 <cast_away_const>:
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wcast-qual"
#endif
/* helper function to cast away const */
static void* cast_away_const(const void* string)
{
 8005866:	b480      	push	{r7}
 8005868:	b083      	sub	sp, #12
 800586a:	af00      	add	r7, sp, #0
 800586c:	6078      	str	r0, [r7, #4]
    return (void*)string;
 800586e:	687b      	ldr	r3, [r7, #4]
}
 8005870:	4618      	mov	r0, r3
 8005872:	370c      	adds	r7, #12
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr

0800587c <add_item_to_object>:
    #pragma GCC diagnostic pop
#endif


static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b086      	sub	sp, #24
 8005880:	af00      	add	r7, sp, #0
 8005882:	60f8      	str	r0, [r7, #12]
 8005884:	60b9      	str	r1, [r7, #8]
 8005886:	607a      	str	r2, [r7, #4]
 8005888:	603b      	str	r3, [r7, #0]
    char *new_key = NULL;
 800588a:	2300      	movs	r3, #0
 800588c:	617b      	str	r3, [r7, #20]
    int new_type = cJSON_Invalid;
 800588e:	2300      	movs	r3, #0
 8005890:	613b      	str	r3, [r7, #16]

    if ((object == NULL) || (string == NULL) || (item == NULL) || (object == item))
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d009      	beq.n	80058ac <add_item_to_object+0x30>
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d006      	beq.n	80058ac <add_item_to_object+0x30>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d003      	beq.n	80058ac <add_item_to_object+0x30>
 80058a4:	68fa      	ldr	r2, [r7, #12]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d101      	bne.n	80058b0 <add_item_to_object+0x34>
    {
        return false;
 80058ac:	2300      	movs	r3, #0
 80058ae:	e036      	b.n	800591e <add_item_to_object+0xa2>
    }

    if (constant_key)
 80058b0:	6a3b      	ldr	r3, [r7, #32]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d009      	beq.n	80058ca <add_item_to_object+0x4e>
    {
        new_key = (char*)cast_away_const(string);
 80058b6:	68b8      	ldr	r0, [r7, #8]
 80058b8:	f7ff ffd5 	bl	8005866 <cast_away_const>
 80058bc:	6178      	str	r0, [r7, #20]
        new_type = item->type | cJSON_StringIsConst;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80058c6:	613b      	str	r3, [r7, #16]
 80058c8:	e00e      	b.n	80058e8 <add_item_to_object+0x6c>
    }
    else
    {
        new_key = (char*)cJSON_strdup((const unsigned char*)string, hooks);
 80058ca:	6839      	ldr	r1, [r7, #0]
 80058cc:	68b8      	ldr	r0, [r7, #8]
 80058ce:	f7fe f8a7 	bl	8003a20 <cJSON_strdup>
 80058d2:	6178      	str	r0, [r7, #20]
        if (new_key == NULL)
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d101      	bne.n	80058de <add_item_to_object+0x62>
        {
            return false;
 80058da:	2300      	movs	r3, #0
 80058dc:	e01f      	b.n	800591e <add_item_to_object+0xa2>
        }

        new_type = item->type & ~cJSON_StringIsConst;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	68db      	ldr	r3, [r3, #12]
 80058e2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80058e6:	613b      	str	r3, [r7, #16]
    }

    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	68db      	ldr	r3, [r3, #12]
 80058ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d109      	bne.n	8005908 <add_item_to_object+0x8c>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6a1b      	ldr	r3, [r3, #32]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d005      	beq.n	8005908 <add_item_to_object+0x8c>
    {
        hooks->deallocate(item->string);
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	6a12      	ldr	r2, [r2, #32]
 8005904:	4610      	mov	r0, r2
 8005906:	4798      	blx	r3
    }

    item->string = new_key;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	697a      	ldr	r2, [r7, #20]
 800590c:	621a      	str	r2, [r3, #32]
    item->type = new_type;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	693a      	ldr	r2, [r7, #16]
 8005912:	60da      	str	r2, [r3, #12]

    return add_item_to_array(object, item);
 8005914:	6879      	ldr	r1, [r7, #4]
 8005916:	68f8      	ldr	r0, [r7, #12]
 8005918:	f7ff ff6f 	bl	80057fa <add_item_to_array>
 800591c:	4603      	mov	r3, r0
}
 800591e:	4618      	mov	r0, r3
 8005920:	3718      	adds	r7, #24
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
	...

08005928 <cJSON_AddItemToObject>:

CJSON_PUBLIC(cJSON_bool) cJSON_AddItemToObject(cJSON *object, const char *string, cJSON *item)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b086      	sub	sp, #24
 800592c:	af02      	add	r7, sp, #8
 800592e:	60f8      	str	r0, [r7, #12]
 8005930:	60b9      	str	r1, [r7, #8]
 8005932:	607a      	str	r2, [r7, #4]
    return add_item_to_object(object, string, item, &global_hooks, false);
 8005934:	2300      	movs	r3, #0
 8005936:	9300      	str	r3, [sp, #0]
 8005938:	4b05      	ldr	r3, [pc, #20]	; (8005950 <cJSON_AddItemToObject+0x28>)
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	68b9      	ldr	r1, [r7, #8]
 800593e:	68f8      	ldr	r0, [r7, #12]
 8005940:	f7ff ff9c 	bl	800587c <add_item_to_object>
 8005944:	4603      	mov	r3, r0
}
 8005946:	4618      	mov	r0, r3
 8005948:	3710      	adds	r7, #16
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}
 800594e:	bf00      	nop
 8005950:	10000000 	.word	0x10000000

08005954 <cJSON_AddNumberToObject>:
    cJSON_Delete(bool_item);
    return NULL;
}

CJSON_PUBLIC(cJSON*) cJSON_AddNumberToObject(cJSON * const object, const char * const name, const double number)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b088      	sub	sp, #32
 8005958:	af02      	add	r7, sp, #8
 800595a:	60f8      	str	r0, [r7, #12]
 800595c:	60b9      	str	r1, [r7, #8]
 800595e:	ed87 0b00 	vstr	d0, [r7]
    cJSON *number_item = cJSON_CreateNumber(number);
 8005962:	ed97 0b00 	vldr	d0, [r7]
 8005966:	f000 f83b 	bl	80059e0 <cJSON_CreateNumber>
 800596a:	6178      	str	r0, [r7, #20]
    if (add_item_to_object(object, name, number_item, &global_hooks, false))
 800596c:	2300      	movs	r3, #0
 800596e:	9300      	str	r3, [sp, #0]
 8005970:	4b09      	ldr	r3, [pc, #36]	; (8005998 <cJSON_AddNumberToObject+0x44>)
 8005972:	697a      	ldr	r2, [r7, #20]
 8005974:	68b9      	ldr	r1, [r7, #8]
 8005976:	68f8      	ldr	r0, [r7, #12]
 8005978:	f7ff ff80 	bl	800587c <add_item_to_object>
 800597c:	4603      	mov	r3, r0
 800597e:	2b00      	cmp	r3, #0
 8005980:	d001      	beq.n	8005986 <cJSON_AddNumberToObject+0x32>
    {
        return number_item;
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	e003      	b.n	800598e <cJSON_AddNumberToObject+0x3a>
    }

    cJSON_Delete(number_item);
 8005986:	6978      	ldr	r0, [r7, #20]
 8005988:	f7fe f888 	bl	8003a9c <cJSON_Delete>
    return NULL;
 800598c:	2300      	movs	r3, #0
}
 800598e:	4618      	mov	r0, r3
 8005990:	3718      	adds	r7, #24
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
 8005996:	bf00      	nop
 8005998:	10000000 	.word	0x10000000

0800599c <cJSON_AddStringToObject>:

CJSON_PUBLIC(cJSON*) cJSON_AddStringToObject(cJSON * const object, const char * const name, const char * const string)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b088      	sub	sp, #32
 80059a0:	af02      	add	r7, sp, #8
 80059a2:	60f8      	str	r0, [r7, #12]
 80059a4:	60b9      	str	r1, [r7, #8]
 80059a6:	607a      	str	r2, [r7, #4]
    cJSON *string_item = cJSON_CreateString(string);
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f000 f861 	bl	8005a70 <cJSON_CreateString>
 80059ae:	6178      	str	r0, [r7, #20]
    if (add_item_to_object(object, name, string_item, &global_hooks, false))
 80059b0:	2300      	movs	r3, #0
 80059b2:	9300      	str	r3, [sp, #0]
 80059b4:	4b09      	ldr	r3, [pc, #36]	; (80059dc <cJSON_AddStringToObject+0x40>)
 80059b6:	697a      	ldr	r2, [r7, #20]
 80059b8:	68b9      	ldr	r1, [r7, #8]
 80059ba:	68f8      	ldr	r0, [r7, #12]
 80059bc:	f7ff ff5e 	bl	800587c <add_item_to_object>
 80059c0:	4603      	mov	r3, r0
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d001      	beq.n	80059ca <cJSON_AddStringToObject+0x2e>
    {
        return string_item;
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	e003      	b.n	80059d2 <cJSON_AddStringToObject+0x36>
    }

    cJSON_Delete(string_item);
 80059ca:	6978      	ldr	r0, [r7, #20]
 80059cc:	f7fe f866 	bl	8003a9c <cJSON_Delete>
    return NULL;
 80059d0:	2300      	movs	r3, #0
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3718      	adds	r7, #24
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}
 80059da:	bf00      	nop
 80059dc:	10000000 	.word	0x10000000

080059e0 <cJSON_CreateNumber>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateNumber(double num)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b084      	sub	sp, #16
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	ed87 0b00 	vstr	d0, [r7]
    cJSON *item = cJSON_New_Item(&global_hooks);
 80059ea:	481f      	ldr	r0, [pc, #124]	; (8005a68 <cJSON_CreateNumber+0x88>)
 80059ec:	f7fe f840 	bl	8003a70 <cJSON_New_Item>
 80059f0:	60f8      	str	r0, [r7, #12]
    if(item)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d02c      	beq.n	8005a52 <cJSON_CreateNumber+0x72>
    {
        item->type = cJSON_Number;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2208      	movs	r2, #8
 80059fc:	60da      	str	r2, [r3, #12]
        item->valuedouble = num;
 80059fe:	68f9      	ldr	r1, [r7, #12]
 8005a00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a04:	e9c1 2306 	strd	r2, r3, [r1, #24]

        /* use saturation in case of overflow */
        if (num >= INT_MAX)
 8005a08:	a315      	add	r3, pc, #84	; (adr r3, 8005a60 <cJSON_CreateNumber+0x80>)
 8005a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a0e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a12:	f7fb f887 	bl	8000b24 <__aeabi_dcmpge>
 8005a16:	4603      	mov	r3, r0
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d004      	beq.n	8005a26 <cJSON_CreateNumber+0x46>
        {
            item->valueint = INT_MAX;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8005a22:	615a      	str	r2, [r3, #20]
 8005a24:	e015      	b.n	8005a52 <cJSON_CreateNumber+0x72>
        }
        else if (num <= (double)INT_MIN)
 8005a26:	f04f 0200 	mov.w	r2, #0
 8005a2a:	4b10      	ldr	r3, [pc, #64]	; (8005a6c <cJSON_CreateNumber+0x8c>)
 8005a2c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a30:	f7fb f86e 	bl	8000b10 <__aeabi_dcmple>
 8005a34:	4603      	mov	r3, r0
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d004      	beq.n	8005a44 <cJSON_CreateNumber+0x64>
        {
            item->valueint = INT_MIN;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005a40:	615a      	str	r2, [r3, #20]
 8005a42:	e006      	b.n	8005a52 <cJSON_CreateNumber+0x72>
        }
        else
        {
            item->valueint = (int)num;
 8005a44:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a48:	f7fb f896 	bl	8000b78 <__aeabi_d2iz>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	615a      	str	r2, [r3, #20]
        }
    }

    return item;
 8005a52:	68fb      	ldr	r3, [r7, #12]
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3710      	adds	r7, #16
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}
 8005a5c:	f3af 8000 	nop.w
 8005a60:	ffc00000 	.word	0xffc00000
 8005a64:	41dfffff 	.word	0x41dfffff
 8005a68:	10000000 	.word	0x10000000
 8005a6c:	c1e00000 	.word	0xc1e00000

08005a70 <cJSON_CreateString>:

CJSON_PUBLIC(cJSON *) cJSON_CreateString(const char *string)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b084      	sub	sp, #16
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
    cJSON *item = cJSON_New_Item(&global_hooks);
 8005a78:	480f      	ldr	r0, [pc, #60]	; (8005ab8 <cJSON_CreateString+0x48>)
 8005a7a:	f7fd fff9 	bl	8003a70 <cJSON_New_Item>
 8005a7e:	60f8      	str	r0, [r7, #12]
    if(item)
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d012      	beq.n	8005aac <cJSON_CreateString+0x3c>
    {
        item->type = cJSON_String;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2210      	movs	r2, #16
 8005a8a:	60da      	str	r2, [r3, #12]
        item->valuestring = (char*)cJSON_strdup((const unsigned char*)string, &global_hooks);
 8005a8c:	490a      	ldr	r1, [pc, #40]	; (8005ab8 <cJSON_CreateString+0x48>)
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f7fd ffc6 	bl	8003a20 <cJSON_strdup>
 8005a94:	4602      	mov	r2, r0
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	611a      	str	r2, [r3, #16]
        if(!item->valuestring)
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	691b      	ldr	r3, [r3, #16]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d104      	bne.n	8005aac <cJSON_CreateString+0x3c>
        {
            cJSON_Delete(item);
 8005aa2:	68f8      	ldr	r0, [r7, #12]
 8005aa4:	f7fd fffa 	bl	8003a9c <cJSON_Delete>
            return NULL;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	e000      	b.n	8005aae <cJSON_CreateString+0x3e>
        }
    }

    return item;
 8005aac:	68fb      	ldr	r3, [r7, #12]
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3710      	adds	r7, #16
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}
 8005ab6:	bf00      	nop
 8005ab8:	10000000 	.word	0x10000000

08005abc <cJSON_CreateObject>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b082      	sub	sp, #8
 8005ac0:	af00      	add	r7, sp, #0
    cJSON *item = cJSON_New_Item(&global_hooks);
 8005ac2:	4807      	ldr	r0, [pc, #28]	; (8005ae0 <cJSON_CreateObject+0x24>)
 8005ac4:	f7fd ffd4 	bl	8003a70 <cJSON_New_Item>
 8005ac8:	6078      	str	r0, [r7, #4]
    if (item)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d002      	beq.n	8005ad6 <cJSON_CreateObject+0x1a>
    {
        item->type = cJSON_Object;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2240      	movs	r2, #64	; 0x40
 8005ad4:	60da      	str	r2, [r3, #12]
    }

    return item;
 8005ad6:	687b      	ldr	r3, [r7, #4]
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3708      	adds	r7, #8
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}
 8005ae0:	10000000 	.word	0x10000000

08005ae4 <cJSON_free>:
{
    return global_hooks.allocate(size);
}

CJSON_PUBLIC(void) cJSON_free(void *object)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b082      	sub	sp, #8
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
    global_hooks.deallocate(object);
 8005aec:	4b03      	ldr	r3, [pc, #12]	; (8005afc <cJSON_free+0x18>)
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	4798      	blx	r3
}
 8005af4:	bf00      	nop
 8005af6:	3708      	adds	r7, #8
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}
 8005afc:	10000000 	.word	0x10000000

08005b00 <check_js_param_int>:

    return (delta * dividend + (divisor / 2)) / divisor + out_min;
}

bool check_js_param_int(cJSON *data_json, char *key, int *set_value)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b086      	sub	sp, #24
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	60f8      	str	r0, [r7, #12]
 8005b08:	60b9      	str	r1, [r7, #8]
 8005b0a:	607a      	str	r2, [r7, #4]
    cJSON *param = cJSON_GetObjectItem(data_json, key);
 8005b0c:	68b9      	ldr	r1, [r7, #8]
 8005b0e:	68f8      	ldr	r0, [r7, #12]
 8005b10:	f7ff fe53 	bl	80057ba <cJSON_GetObjectItem>
 8005b14:	6178      	str	r0, [r7, #20]
    if (param != NULL)
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d00c      	beq.n	8005b36 <check_js_param_int+0x36>
    {
        *set_value = param->valueint;
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	695a      	ldr	r2, [r3, #20]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	601a      	str	r2, [r3, #0]
        DEBUG_UTILS("Set param %s = %i\n", key, param->valueint);
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	695b      	ldr	r3, [r3, #20]
 8005b28:	461a      	mov	r2, r3
 8005b2a:	68b9      	ldr	r1, [r7, #8]
 8005b2c:	4804      	ldr	r0, [pc, #16]	; (8005b40 <check_js_param_int+0x40>)
 8005b2e:	f020 fecd 	bl	80268cc <iprintf>
        return true;
 8005b32:	2301      	movs	r3, #1
 8005b34:	e000      	b.n	8005b38 <check_js_param_int+0x38>
    }
    return false;
 8005b36:	2300      	movs	r3, #0
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3718      	adds	r7, #24
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}
 8005b40:	0802abe0 	.word	0x0802abe0

08005b44 <check_js_param_u8>:

bool check_js_param_u8(cJSON *data_json, char *key, uint8_t *set_value)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b086      	sub	sp, #24
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	60f8      	str	r0, [r7, #12]
 8005b4c:	60b9      	str	r1, [r7, #8]
 8005b4e:	607a      	str	r2, [r7, #4]
    cJSON *param = cJSON_GetObjectItem(data_json, key);
 8005b50:	68b9      	ldr	r1, [r7, #8]
 8005b52:	68f8      	ldr	r0, [r7, #12]
 8005b54:	f7ff fe31 	bl	80057ba <cJSON_GetObjectItem>
 8005b58:	6178      	str	r0, [r7, #20]
    if (param != NULL)
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d00d      	beq.n	8005b7c <check_js_param_u8+0x38>
    {
        *set_value = param->valueint;
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	695b      	ldr	r3, [r3, #20]
 8005b64:	b2da      	uxtb	r2, r3
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	701a      	strb	r2, [r3, #0]
        DEBUG_UTILS("Set param %s = %i\n", key, param->valueint);
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	695b      	ldr	r3, [r3, #20]
 8005b6e:	461a      	mov	r2, r3
 8005b70:	68b9      	ldr	r1, [r7, #8]
 8005b72:	4805      	ldr	r0, [pc, #20]	; (8005b88 <check_js_param_u8+0x44>)
 8005b74:	f020 feaa 	bl	80268cc <iprintf>
        return true;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	e000      	b.n	8005b7e <check_js_param_u8+0x3a>
    }
    return false;
 8005b7c:	2300      	movs	r3, #0
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3718      	adds	r7, #24
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}
 8005b86:	bf00      	nop
 8005b88:	0802abe0 	.word	0x0802abe0

08005b8c <check_char_mode>:
bool check_char_mode(cJSON *data_json, char *key, uint8_t *set_value)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b086      	sub	sp, #24
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	60f8      	str	r0, [r7, #12]
 8005b94:	60b9      	str	r1, [r7, #8]
 8005b96:	607a      	str	r2, [r7, #4]
    cJSON *param = cJSON_GetObjectItem(data_json, key);
 8005b98:	68b9      	ldr	r1, [r7, #8]
 8005b9a:	68f8      	ldr	r0, [r7, #12]
 8005b9c:	f7ff fe0d 	bl	80057ba <cJSON_GetObjectItem>
 8005ba0:	6178      	str	r0, [r7, #20]
    if (param != NULL)
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d037      	beq.n	8005c18 <check_char_mode+0x8c>
    {
        if (strcmp(param->valuestring, "inflow") == 0)
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	691b      	ldr	r3, [r3, #16]
 8005bac:	491d      	ldr	r1, [pc, #116]	; (8005c24 <check_char_mode+0x98>)
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f7fa fb0e 	bl	80001d0 <strcmp>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d102      	bne.n	8005bc0 <check_char_mode+0x34>
            *set_value = INFLOW_MODE;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	701a      	strb	r2, [r3, #0]
        if (strcmp(param->valuestring, "smart") == 0)
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	691b      	ldr	r3, [r3, #16]
 8005bc4:	4918      	ldr	r1, [pc, #96]	; (8005c28 <check_char_mode+0x9c>)
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f7fa fb02 	bl	80001d0 <strcmp>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d102      	bne.n	8005bd8 <check_char_mode+0x4c>
            *set_value = SMART_MODE;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	701a      	strb	r2, [r3, #0]
        if (strcmp(param->valuestring, "inflow_max") == 0)
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	691b      	ldr	r3, [r3, #16]
 8005bdc:	4913      	ldr	r1, [pc, #76]	; (8005c2c <check_char_mode+0xa0>)
 8005bde:	4618      	mov	r0, r3
 8005be0:	f7fa faf6 	bl	80001d0 <strcmp>
 8005be4:	4603      	mov	r3, r0
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d10d      	bne.n	8005c06 <check_char_mode+0x7a>
        {
            if (device->mode != INFLOW_MAX_MODE)
 8005bea:	4b11      	ldr	r3, [pc, #68]	; (8005c30 <check_char_mode+0xa4>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	7b1b      	ldrb	r3, [r3, #12]
 8005bf0:	2b02      	cmp	r3, #2
 8005bf2:	d005      	beq.n	8005c00 <check_char_mode+0x74>
                device->last_mode = device->mode;
 8005bf4:	4b0e      	ldr	r3, [pc, #56]	; (8005c30 <check_char_mode+0xa4>)
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	4b0d      	ldr	r3, [pc, #52]	; (8005c30 <check_char_mode+0xa4>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	7b12      	ldrb	r2, [r2, #12]
 8005bfe:	735a      	strb	r2, [r3, #13]
            *set_value = INFLOW_MAX_MODE;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2202      	movs	r2, #2
 8005c04:	701a      	strb	r2, [r3, #0]
        }

        DEBUG_UTILS("Set param %s = %s\n", key, param->valuestring);
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	691b      	ldr	r3, [r3, #16]
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	68b9      	ldr	r1, [r7, #8]
 8005c0e:	4809      	ldr	r0, [pc, #36]	; (8005c34 <check_char_mode+0xa8>)
 8005c10:	f020 fe5c 	bl	80268cc <iprintf>
        return true;
 8005c14:	2301      	movs	r3, #1
 8005c16:	e000      	b.n	8005c1a <check_char_mode+0x8e>
    }
    return false;
 8005c18:	2300      	movs	r3, #0
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3718      	adds	r7, #24
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}
 8005c22:	bf00      	nop
 8005c24:	0802abfc 	.word	0x0802abfc
 8005c28:	0802ac04 	.word	0x0802ac04
 8005c2c:	0802ac0c 	.word	0x0802ac0c
 8005c30:	20013e2c 	.word	0x20013e2c
 8005c34:	0802ac18 	.word	0x0802ac18

08005c38 <check_char_on_off>:
bool check_char_on_off(cJSON *data_json, char *key, uint8_t *set_value)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b086      	sub	sp, #24
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	60f8      	str	r0, [r7, #12]
 8005c40:	60b9      	str	r1, [r7, #8]
 8005c42:	607a      	str	r2, [r7, #4]
    cJSON *param = cJSON_GetObjectItem(data_json, key);
 8005c44:	68b9      	ldr	r1, [r7, #8]
 8005c46:	68f8      	ldr	r0, [r7, #12]
 8005c48:	f7ff fdb7 	bl	80057ba <cJSON_GetObjectItem>
 8005c4c:	6178      	str	r0, [r7, #20]
    if (param != NULL)
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d020      	beq.n	8005c96 <check_char_on_off+0x5e>
    {
        if (strcmp(param->valuestring, "on") == 0)
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	691b      	ldr	r3, [r3, #16]
 8005c58:	4911      	ldr	r1, [pc, #68]	; (8005ca0 <check_char_on_off+0x68>)
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f7fa fab8 	bl	80001d0 <strcmp>
 8005c60:	4603      	mov	r3, r0
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d102      	bne.n	8005c6c <check_char_on_off+0x34>
            *set_value = 1;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2201      	movs	r2, #1
 8005c6a:	701a      	strb	r2, [r3, #0]
        if (strcmp(param->valuestring, "off") == 0)
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	691b      	ldr	r3, [r3, #16]
 8005c70:	490c      	ldr	r1, [pc, #48]	; (8005ca4 <check_char_on_off+0x6c>)
 8005c72:	4618      	mov	r0, r3
 8005c74:	f7fa faac 	bl	80001d0 <strcmp>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d102      	bne.n	8005c84 <check_char_on_off+0x4c>
            *set_value = 0;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2200      	movs	r2, #0
 8005c82:	701a      	strb	r2, [r3, #0]
        DEBUG_UTILS("Set param %s = %s\n", key, param->valuestring);
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	691b      	ldr	r3, [r3, #16]
 8005c88:	461a      	mov	r2, r3
 8005c8a:	68b9      	ldr	r1, [r7, #8]
 8005c8c:	4806      	ldr	r0, [pc, #24]	; (8005ca8 <check_char_on_off+0x70>)
 8005c8e:	f020 fe1d 	bl	80268cc <iprintf>
        return true;
 8005c92:	2301      	movs	r3, #1
 8005c94:	e000      	b.n	8005c98 <check_char_on_off+0x60>
    }
    return false;
 8005c96:	2300      	movs	r3, #0
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3718      	adds	r7, #24
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}
 8005ca0:	0802ac34 	.word	0x0802ac34
 8005ca4:	0802ac38 	.word	0x0802ac38
 8005ca8:	0802ac18 	.word	0x0802ac18

08005cac <check_js_param_double>:

bool check_js_param_double(cJSON *data_json, char *key, double *set_value)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b086      	sub	sp, #24
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	60f8      	str	r0, [r7, #12]
 8005cb4:	60b9      	str	r1, [r7, #8]
 8005cb6:	607a      	str	r2, [r7, #4]
    cJSON *param = cJSON_GetObjectItem(data_json, key);
 8005cb8:	68b9      	ldr	r1, [r7, #8]
 8005cba:	68f8      	ldr	r0, [r7, #12]
 8005cbc:	f7ff fd7d 	bl	80057ba <cJSON_GetObjectItem>
 8005cc0:	6178      	str	r0, [r7, #20]
    if (param != NULL)
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d00e      	beq.n	8005ce6 <check_js_param_double+0x3a>
    {
        *set_value = param->valuedouble;
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8005cce:	6879      	ldr	r1, [r7, #4]
 8005cd0:	e9c1 2300 	strd	r2, r3, [r1]
        DEBUG_UTILS("Set param %s = %0.1f\n", key, param->valuedouble);
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8005cda:	68b9      	ldr	r1, [r7, #8]
 8005cdc:	4804      	ldr	r0, [pc, #16]	; (8005cf0 <check_js_param_double+0x44>)
 8005cde:	f020 fdf5 	bl	80268cc <iprintf>
        return true;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e000      	b.n	8005ce8 <check_js_param_double+0x3c>
    }
    return false;
 8005ce6:	2300      	movs	r3, #0
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3718      	adds	r7, #24
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}
 8005cf0:	0802ac3c 	.word	0x0802ac3c

08005cf4 <check_js_param_char>:
    }
    return false;
}

bool check_js_param_char(cJSON *data_json, char *key, char *set_value)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b086      	sub	sp, #24
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	60f8      	str	r0, [r7, #12]
 8005cfc:	60b9      	str	r1, [r7, #8]
 8005cfe:	607a      	str	r2, [r7, #4]
    cJSON *param = cJSON_GetObjectItem(data_json, key);
 8005d00:	68b9      	ldr	r1, [r7, #8]
 8005d02:	68f8      	ldr	r0, [r7, #12]
 8005d04:	f7ff fd59 	bl	80057ba <cJSON_GetObjectItem>
 8005d08:	6178      	str	r0, [r7, #20]
    if (param != NULL)
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d00e      	beq.n	8005d2e <check_js_param_char+0x3a>
    {
        strcpy(set_value, param->valuestring);
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	691b      	ldr	r3, [r3, #16]
 8005d14:	4619      	mov	r1, r3
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f020 ff69 	bl	8026bee <strcpy>
        DEBUG_UTILS("Set param %s = %s\n", key, param->valuestring);
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	691b      	ldr	r3, [r3, #16]
 8005d20:	461a      	mov	r2, r3
 8005d22:	68b9      	ldr	r1, [r7, #8]
 8005d24:	4804      	ldr	r0, [pc, #16]	; (8005d38 <check_js_param_char+0x44>)
 8005d26:	f020 fdd1 	bl	80268cc <iprintf>
        return true;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e000      	b.n	8005d30 <check_js_param_char+0x3c>
    }
    return false;
 8005d2e:	2300      	movs	r3, #0
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3718      	adds	r7, #24
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}
 8005d38:	0802ac18 	.word	0x0802ac18

08005d3c <CGIForm_Handler>:

char name[30];
tCGI CGI_TAB[2];

const char *CGIForm_Handler(int iIndex, int iNumParams, char *pcParam[], char *pcValue[])
{
 8005d3c:	b590      	push	{r4, r7, lr}
 8005d3e:	b087      	sub	sp, #28
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	60f8      	str	r0, [r7, #12]
 8005d44:	60b9      	str	r1, [r7, #8]
 8005d46:	607a      	str	r2, [r7, #4]
 8005d48:	603b      	str	r3, [r7, #0]
	if (iIndex == 0)
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	f040 80e6 	bne.w	8005f1e <CGIForm_Handler+0x1e2>
	{
		for (int i=0; i<iNumParams; i++)
 8005d52:	2300      	movs	r3, #0
 8005d54:	617b      	str	r3, [r7, #20]
 8005d56:	e0dd      	b.n	8005f14 <CGIForm_Handler+0x1d8>
		{
			if (strcmp(pcParam[i], "mqttBroker") == 0)  // if the fname string is found
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	009b      	lsls	r3, r3, #2
 8005d5c:	687a      	ldr	r2, [r7, #4]
 8005d5e:	4413      	add	r3, r2
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4973      	ldr	r1, [pc, #460]	; (8005f30 <CGIForm_Handler+0x1f4>)
 8005d64:	4618      	mov	r0, r3
 8005d66:	f7fa fa33 	bl	80001d0 <strcmp>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d113      	bne.n	8005d98 <CGIForm_Handler+0x5c>
			{
				memset(name, '\0', 30);
 8005d70:	221e      	movs	r2, #30
 8005d72:	2100      	movs	r1, #0
 8005d74:	486f      	ldr	r0, [pc, #444]	; (8005f34 <CGIForm_Handler+0x1f8>)
 8005d76:	f01f fefd 	bl	8025b74 <memset>
				strcpy(name, pcValue[i]);
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	009b      	lsls	r3, r3, #2
 8005d7e:	683a      	ldr	r2, [r7, #0]
 8005d80:	4413      	add	r3, r2
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4619      	mov	r1, r3
 8005d86:	486b      	ldr	r0, [pc, #428]	; (8005f34 <CGIForm_Handler+0x1f8>)
 8005d88:	f020 ff31 	bl	8026bee <strcpy>
				wireless_params->mqtt_type = USER_MQTT;
 8005d8c:	4b6a      	ldr	r3, [pc, #424]	; (8005f38 <CGIForm_Handler+0x1fc>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	2200      	movs	r2, #0
 8005d92:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8005d96:	e0ba      	b.n	8005f0e <CGIForm_Handler+0x1d2>
			}

			else if (strcmp(pcParam[i], "mqttIP") == 0)  // if the fname string is found
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	009b      	lsls	r3, r3, #2
 8005d9c:	687a      	ldr	r2, [r7, #4]
 8005d9e:	4413      	add	r3, r2
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4966      	ldr	r1, [pc, #408]	; (8005f3c <CGIForm_Handler+0x200>)
 8005da4:	4618      	mov	r0, r3
 8005da6:	f7fa fa13 	bl	80001d0 <strcmp>
 8005daa:	4603      	mov	r3, r0
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d114      	bne.n	8005dda <CGIForm_Handler+0x9e>
			{
				memset(wireless_params->user_mqtt.host, '\0', 16);
 8005db0:	4b61      	ldr	r3, [pc, #388]	; (8005f38 <CGIForm_Handler+0x1fc>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	3324      	adds	r3, #36	; 0x24
 8005db6:	2210      	movs	r2, #16
 8005db8:	2100      	movs	r1, #0
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f01f feda 	bl	8025b74 <memset>
				strcpy(wireless_params->user_mqtt.host, pcValue[i]);
 8005dc0:	4b5d      	ldr	r3, [pc, #372]	; (8005f38 <CGIForm_Handler+0x1fc>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	009b      	lsls	r3, r3, #2
 8005dcc:	683a      	ldr	r2, [r7, #0]
 8005dce:	4413      	add	r3, r2
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4619      	mov	r1, r3
 8005dd4:	f020 ff0b 	bl	8026bee <strcpy>
 8005dd8:	e099      	b.n	8005f0e <CGIForm_Handler+0x1d2>
			}

			else if (strcmp(pcParam[i], "mqttPort") == 0)  // if the fname string is found
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	009b      	lsls	r3, r3, #2
 8005dde:	687a      	ldr	r2, [r7, #4]
 8005de0:	4413      	add	r3, r2
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4956      	ldr	r1, [pc, #344]	; (8005f40 <CGIForm_Handler+0x204>)
 8005de6:	4618      	mov	r0, r3
 8005de8:	f7fa f9f2 	bl	80001d0 <strcmp>
 8005dec:	4603      	mov	r3, r0
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d10c      	bne.n	8005e0c <CGIForm_Handler+0xd0>
			{
				wireless_params->user_mqtt.port = atoi(pcValue[i]);
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	009b      	lsls	r3, r3, #2
 8005df6:	683a      	ldr	r2, [r7, #0]
 8005df8:	4413      	add	r3, r2
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a4e      	ldr	r2, [pc, #312]	; (8005f38 <CGIForm_Handler+0x1fc>)
 8005dfe:	6814      	ldr	r4, [r2, #0]
 8005e00:	4618      	mov	r0, r3
 8005e02:	f01f fe35 	bl	8025a70 <atoi>
 8005e06:	4603      	mov	r3, r0
 8005e08:	6363      	str	r3, [r4, #52]	; 0x34
 8005e0a:	e080      	b.n	8005f0e <CGIForm_Handler+0x1d2>
			}

			else if (strcmp(pcParam[i], "mqttLogin") == 0)  // if the fname string is found
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	4413      	add	r3, r2
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	494b      	ldr	r1, [pc, #300]	; (8005f44 <CGIForm_Handler+0x208>)
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f7fa f9d9 	bl	80001d0 <strcmp>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d112      	bne.n	8005e4a <CGIForm_Handler+0x10e>
			{
				memset(wireless_params->user_mqtt.login, '\0', 12);
 8005e24:	4b44      	ldr	r3, [pc, #272]	; (8005f38 <CGIForm_Handler+0x1fc>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	220c      	movs	r2, #12
 8005e2a:	2100      	movs	r1, #0
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f01f fea1 	bl	8025b74 <memset>
				strcpy(wireless_params->user_mqtt.login, pcValue[i]);
 8005e32:	4b41      	ldr	r3, [pc, #260]	; (8005f38 <CGIForm_Handler+0x1fc>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4618      	mov	r0, r3
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	009b      	lsls	r3, r3, #2
 8005e3c:	683a      	ldr	r2, [r7, #0]
 8005e3e:	4413      	add	r3, r2
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4619      	mov	r1, r3
 8005e44:	f020 fed3 	bl	8026bee <strcpy>
 8005e48:	e061      	b.n	8005f0e <CGIForm_Handler+0x1d2>
			}

			else if (strcmp(pcParam[i], "mqttPassword") == 0)  // if the fname string is found
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	009b      	lsls	r3, r3, #2
 8005e4e:	687a      	ldr	r2, [r7, #4]
 8005e50:	4413      	add	r3, r2
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	493c      	ldr	r1, [pc, #240]	; (8005f48 <CGIForm_Handler+0x20c>)
 8005e56:	4618      	mov	r0, r3
 8005e58:	f7fa f9ba 	bl	80001d0 <strcmp>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d114      	bne.n	8005e8c <CGIForm_Handler+0x150>
			{
				memset(wireless_params->user_mqtt.password, '\0', 12);
 8005e62:	4b35      	ldr	r3, [pc, #212]	; (8005f38 <CGIForm_Handler+0x1fc>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	330c      	adds	r3, #12
 8005e68:	220c      	movs	r2, #12
 8005e6a:	2100      	movs	r1, #0
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f01f fe81 	bl	8025b74 <memset>
				strcpy(wireless_params->user_mqtt.password, pcValue[i]);
 8005e72:	4b31      	ldr	r3, [pc, #196]	; (8005f38 <CGIForm_Handler+0x1fc>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f103 000c 	add.w	r0, r3, #12
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	009b      	lsls	r3, r3, #2
 8005e7e:	683a      	ldr	r2, [r7, #0]
 8005e80:	4413      	add	r3, r2
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4619      	mov	r1, r3
 8005e86:	f020 feb2 	bl	8026bee <strcpy>
 8005e8a:	e040      	b.n	8005f0e <CGIForm_Handler+0x1d2>
			}

			else if (strcmp(pcParam[i], "mqttID") == 0)  // if the fname string is found
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	009b      	lsls	r3, r3, #2
 8005e90:	687a      	ldr	r2, [r7, #4]
 8005e92:	4413      	add	r3, r2
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	492d      	ldr	r1, [pc, #180]	; (8005f4c <CGIForm_Handler+0x210>)
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f7fa f999 	bl	80001d0 <strcmp>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d114      	bne.n	8005ece <CGIForm_Handler+0x192>
			{
				memset(wireless_params->user_mqtt.client_id, '\0', 12);
 8005ea4:	4b24      	ldr	r3, [pc, #144]	; (8005f38 <CGIForm_Handler+0x1fc>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	3318      	adds	r3, #24
 8005eaa:	220c      	movs	r2, #12
 8005eac:	2100      	movs	r1, #0
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f01f fe60 	bl	8025b74 <memset>
				strcpy(wireless_params->user_mqtt.client_id, pcValue[i]);
 8005eb4:	4b20      	ldr	r3, [pc, #128]	; (8005f38 <CGIForm_Handler+0x1fc>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f103 0018 	add.w	r0, r3, #24
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	683a      	ldr	r2, [r7, #0]
 8005ec2:	4413      	add	r3, r2
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4619      	mov	r1, r3
 8005ec8:	f020 fe91 	bl	8026bee <strcpy>
 8005ecc:	e01f      	b.n	8005f0e <CGIForm_Handler+0x1d2>
			}

			else if (strcmp(pcParam[i], "mqttTopic") == 0)  // if the fname string is found
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	4413      	add	r3, r2
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	491d      	ldr	r1, [pc, #116]	; (8005f50 <CGIForm_Handler+0x214>)
 8005eda:	4618      	mov	r0, r3
 8005edc:	f7fa f978 	bl	80001d0 <strcmp>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d113      	bne.n	8005f0e <CGIForm_Handler+0x1d2>
			{
				memset(wireless_params->user_mqtt.topic, '\0', 12);
 8005ee6:	4b14      	ldr	r3, [pc, #80]	; (8005f38 <CGIForm_Handler+0x1fc>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	3338      	adds	r3, #56	; 0x38
 8005eec:	220c      	movs	r2, #12
 8005eee:	2100      	movs	r1, #0
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f01f fe3f 	bl	8025b74 <memset>
				strcpy(wireless_params->user_mqtt.topic, pcValue[i]);
 8005ef6:	4b10      	ldr	r3, [pc, #64]	; (8005f38 <CGIForm_Handler+0x1fc>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	009b      	lsls	r3, r3, #2
 8005f02:	683a      	ldr	r2, [r7, #0]
 8005f04:	4413      	add	r3, r2
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4619      	mov	r1, r3
 8005f0a:	f020 fe70 	bl	8026bee <strcpy>
		for (int i=0; i<iNumParams; i++)
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	3301      	adds	r3, #1
 8005f12:	617b      	str	r3, [r7, #20]
 8005f14:	697a      	ldr	r2, [r7, #20]
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	f6ff af1d 	blt.w	8005d58 <CGIForm_Handler+0x1c>
			}
		}
	}
	write_wireless_params();
 8005f1e:	f003 fa41 	bl	80093a4 <write_wireless_params>
	set_mqtt_parameters();
 8005f22:	f001 f9b7 	bl	8007294 <set_mqtt_parameters>
	return "/cgiform.html";
 8005f26:	4b0b      	ldr	r3, [pc, #44]	; (8005f54 <CGIForm_Handler+0x218>)
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	371c      	adds	r7, #28
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd90      	pop	{r4, r7, pc}
 8005f30:	0802ac74 	.word	0x0802ac74
 8005f34:	200142c4 	.word	0x200142c4
 8005f38:	20013e30 	.word	0x20013e30
 8005f3c:	0802ac80 	.word	0x0802ac80
 8005f40:	0802ac88 	.word	0x0802ac88
 8005f44:	0802ac94 	.word	0x0802ac94
 8005f48:	0802aca0 	.word	0x0802aca0
 8005f4c:	0802acb0 	.word	0x0802acb0
 8005f50:	0802acb8 	.word	0x0802acb8
 8005f54:	0802acc4 	.word	0x0802acc4

08005f58 <CGILED_Handler>:


const char *CGILED_Handler(int iIndex, int iNumParams, char *pcParam[], char *pcValue[])
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b086      	sub	sp, #24
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	60f8      	str	r0, [r7, #12]
 8005f60:	60b9      	str	r1, [r7, #8]
 8005f62:	607a      	str	r2, [r7, #4]
 8005f64:	603b      	str	r3, [r7, #0]
	if (iIndex == 1)
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d145      	bne.n	8005ff8 <CGILED_Handler+0xa0>
	{
		for (int i=0; i<iNumParams; i++)
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	617b      	str	r3, [r7, #20]
 8005f70:	e03e      	b.n	8005ff0 <CGILED_Handler+0x98>
		{
			if (strcmp(pcParam[i], "fname") == 0)  // if the fname string is found
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	009b      	lsls	r3, r3, #2
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	4413      	add	r3, r2
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4921      	ldr	r1, [pc, #132]	; (8006004 <CGILED_Handler+0xac>)
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f7fa f926 	bl	80001d0 <strcmp>
 8005f84:	4603      	mov	r3, r0
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d10e      	bne.n	8005fa8 <CGILED_Handler+0x50>
			{
				memset(name, '\0', 30);
 8005f8a:	221e      	movs	r2, #30
 8005f8c:	2100      	movs	r1, #0
 8005f8e:	481e      	ldr	r0, [pc, #120]	; (8006008 <CGILED_Handler+0xb0>)
 8005f90:	f01f fdf0 	bl	8025b74 <memset>
				strcpy(name, pcValue[i]);
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	683a      	ldr	r2, [r7, #0]
 8005f9a:	4413      	add	r3, r2
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4619      	mov	r1, r3
 8005fa0:	4819      	ldr	r0, [pc, #100]	; (8006008 <CGILED_Handler+0xb0>)
 8005fa2:	f020 fe24 	bl	8026bee <strcpy>
 8005fa6:	e020      	b.n	8005fea <CGILED_Handler+0x92>
			}

			else if (strcmp(pcParam[i], "lname") == 0)  // if the fname string is found
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	687a      	ldr	r2, [r7, #4]
 8005fae:	4413      	add	r3, r2
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4916      	ldr	r1, [pc, #88]	; (800600c <CGILED_Handler+0xb4>)
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f7fa f90b 	bl	80001d0 <strcmp>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d114      	bne.n	8005fea <CGILED_Handler+0x92>
			{
				strcat(name, " ");
 8005fc0:	4811      	ldr	r0, [pc, #68]	; (8006008 <CGILED_Handler+0xb0>)
 8005fc2:	f7fa f90f 	bl	80001e4 <strlen>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	461a      	mov	r2, r3
 8005fca:	4b0f      	ldr	r3, [pc, #60]	; (8006008 <CGILED_Handler+0xb0>)
 8005fcc:	4413      	add	r3, r2
 8005fce:	4910      	ldr	r1, [pc, #64]	; (8006010 <CGILED_Handler+0xb8>)
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	460b      	mov	r3, r1
 8005fd4:	881b      	ldrh	r3, [r3, #0]
 8005fd6:	8013      	strh	r3, [r2, #0]
				strcat(name, pcValue[i]);
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	683a      	ldr	r2, [r7, #0]
 8005fde:	4413      	add	r3, r2
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4619      	mov	r1, r3
 8005fe4:	4808      	ldr	r0, [pc, #32]	; (8006008 <CGILED_Handler+0xb0>)
 8005fe6:	f020 fde6 	bl	8026bb6 <strcat>
		for (int i=0; i<iNumParams; i++)
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	3301      	adds	r3, #1
 8005fee:	617b      	str	r3, [r7, #20]
 8005ff0:	697a      	ldr	r2, [r7, #20]
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	dbbc      	blt.n	8005f72 <CGILED_Handler+0x1a>
			}
		}
	}

	return "/cgiled.html";
 8005ff8:	4b06      	ldr	r3, [pc, #24]	; (8006014 <CGILED_Handler+0xbc>)
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3718      	adds	r7, #24
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}
 8006002:	bf00      	nop
 8006004:	0802acd4 	.word	0x0802acd4
 8006008:	200142c4 	.word	0x200142c4
 800600c:	0802acdc 	.word	0x0802acdc
 8006010:	0802ace4 	.word	0x0802ace4
 8006014:	0802ace8 	.word	0x0802ace8

08006018 <http_server_init>:

void http_server_init()
{ 
 8006018:	b580      	push	{r7, lr}
 800601a:	af00      	add	r7, sp, #0
	httpd_init();
 800601c:	f010 fe00 	bl	8016c20 <httpd_init>

	CGI_TAB[0] = FORM_CGI;
 8006020:	4b09      	ldr	r3, [pc, #36]	; (8006048 <http_server_init+0x30>)
 8006022:	4a0a      	ldr	r2, [pc, #40]	; (800604c <http_server_init+0x34>)
 8006024:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006028:	e883 0003 	stmia.w	r3, {r0, r1}
	CGI_TAB[1] = LED_CGI;
 800602c:	4b06      	ldr	r3, [pc, #24]	; (8006048 <http_server_init+0x30>)
 800602e:	4a08      	ldr	r2, [pc, #32]	; (8006050 <http_server_init+0x38>)
 8006030:	3308      	adds	r3, #8
 8006032:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006036:	e883 0003 	stmia.w	r3, {r0, r1}

//	http_set_cgi_handlers (&FORM_CGI, 1);
	http_set_cgi_handlers (CGI_TAB, 2);
 800603a:	2102      	movs	r1, #2
 800603c:	4802      	ldr	r0, [pc, #8]	; (8006048 <http_server_init+0x30>)
 800603e:	f010 fe0f 	bl	8016c60 <http_set_cgi_handlers>
}
 8006042:	bf00      	nop
 8006044:	bd80      	pop	{r7, pc}
 8006046:	bf00      	nop
 8006048:	200142e4 	.word	0x200142e4
 800604c:	0802f6fc 	.word	0x0802f6fc
 8006050:	0802f704 	.word	0x0802f704

08006054 <temp_cold>:
uint64_t cold_time;
uint64_t hot_time;
uint64_t inflow_max_time;

void temp_cold()
{
 8006054:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006058:	b08a      	sub	sp, #40	; 0x28
 800605a:	af00      	add	r7, sp, #0
    if (device->error_stop_cold == true && ((HAL_GetTick() - cold_time) > 60 * MINUTE))
 800605c:	4b9a      	ldr	r3, [pc, #616]	; (80062c8 <temp_cold+0x274>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	799b      	ldrb	r3, [r3, #6]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d020      	beq.n	80060a8 <temp_cold+0x54>
 8006066:	f004 fea1 	bl	800adac <HAL_GetTick>
 800606a:	4603      	mov	r3, r0
 800606c:	2200      	movs	r2, #0
 800606e:	469a      	mov	sl, r3
 8006070:	4693      	mov	fp, r2
 8006072:	4b96      	ldr	r3, [pc, #600]	; (80062cc <temp_cold+0x278>)
 8006074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006078:	ebba 0402 	subs.w	r4, sl, r2
 800607c:	eb6b 0503 	sbc.w	r5, fp, r3
 8006080:	4b93      	ldr	r3, [pc, #588]	; (80062d0 <temp_cold+0x27c>)
 8006082:	429c      	cmp	r4, r3
 8006084:	f175 0300 	sbcs.w	r3, r5, #0
 8006088:	d30e      	bcc.n	80060a8 <temp_cold+0x54>
    {
    	cold_time = HAL_GetTick();
 800608a:	f004 fe8f 	bl	800adac <HAL_GetTick>
 800608e:	4603      	mov	r3, r0
 8006090:	2200      	movs	r2, #0
 8006092:	623b      	str	r3, [r7, #32]
 8006094:	627a      	str	r2, [r7, #36]	; 0x24
 8006096:	4b8d      	ldr	r3, [pc, #564]	; (80062cc <temp_cold+0x278>)
 8006098:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800609c:	e9c3 1200 	strd	r1, r2, [r3]
        device->error_stop_cold = false;
 80060a0:	4b89      	ldr	r3, [pc, #548]	; (80062c8 <temp_cold+0x274>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	2200      	movs	r2, #0
 80060a6:	719a      	strb	r2, [r3, #6]
    }
    if(device->error_stop_cold == false && ((HAL_GetTick() - cold_time) > device->extra_options.check_time * MINUTE))
 80060a8:	4b87      	ldr	r3, [pc, #540]	; (80062c8 <temp_cold+0x274>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	799b      	ldrb	r3, [r3, #6]
 80060ae:	f083 0301 	eor.w	r3, r3, #1
 80060b2:	b2db      	uxtb	r3, r3
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	f000 8102 	beq.w	80062be <temp_cold+0x26a>
 80060ba:	f004 fe77 	bl	800adac <HAL_GetTick>
 80060be:	4603      	mov	r3, r0
 80060c0:	2200      	movs	r2, #0
 80060c2:	61bb      	str	r3, [r7, #24]
 80060c4:	61fa      	str	r2, [r7, #28]
 80060c6:	4b81      	ldr	r3, [pc, #516]	; (80062cc <temp_cold+0x278>)
 80060c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060cc:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80060d0:	4621      	mov	r1, r4
 80060d2:	ebb1 0802 	subs.w	r8, r1, r2
 80060d6:	4629      	mov	r1, r5
 80060d8:	eb61 0903 	sbc.w	r9, r1, r3
 80060dc:	4b7a      	ldr	r3, [pc, #488]	; (80062c8 <temp_cold+0x274>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	7e9b      	ldrb	r3, [r3, #26]
 80060e2:	461a      	mov	r2, r3
 80060e4:	f64e 2360 	movw	r3, #60000	; 0xea60
 80060e8:	fb02 f303 	mul.w	r3, r2, r3
 80060ec:	17da      	asrs	r2, r3, #31
 80060ee:	613b      	str	r3, [r7, #16]
 80060f0:	617a      	str	r2, [r7, #20]
 80060f2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80060f6:	460b      	mov	r3, r1
 80060f8:	4543      	cmp	r3, r8
 80060fa:	4613      	mov	r3, r2
 80060fc:	eb73 0309 	sbcs.w	r3, r3, r9
 8006100:	f080 80dd 	bcs.w	80062be <temp_cold+0x26a>
    {
    	cold_time = HAL_GetTick();
 8006104:	f004 fe52 	bl	800adac <HAL_GetTick>
 8006108:	4603      	mov	r3, r0
 800610a:	2200      	movs	r2, #0
 800610c:	60bb      	str	r3, [r7, #8]
 800610e:	60fa      	str	r2, [r7, #12]
 8006110:	4b6e      	ldr	r3, [pc, #440]	; (80062cc <temp_cold+0x278>)
 8006112:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006116:	e9c3 1200 	strd	r1, r2, [r3]
        DEBUG_MODES("callback_temp_cold_timer\n");
 800611a:	486e      	ldr	r0, [pc, #440]	; (80062d4 <temp_cold+0x280>)
 800611c:	f020 fc5c 	bl	80269d8 <puts>
        if (device->state == ON	&& damper_state == 2 && sensors_data->out_state && sensors_data->in_state && inflow_max_flag == false &&
 8006120:	4b69      	ldr	r3, [pc, #420]	; (80062c8 <temp_cold+0x274>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	789b      	ldrb	r3, [r3, #2]
 8006126:	2b00      	cmp	r3, #0
 8006128:	f000 8090 	beq.w	800624c <temp_cold+0x1f8>
 800612c:	4b6a      	ldr	r3, [pc, #424]	; (80062d8 <temp_cold+0x284>)
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	2b02      	cmp	r3, #2
 8006132:	f040 808b 	bne.w	800624c <temp_cold+0x1f8>
 8006136:	4b69      	ldr	r3, [pc, #420]	; (80062dc <temp_cold+0x288>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	7f1b      	ldrb	r3, [r3, #28]
 800613c:	2b00      	cmp	r3, #0
 800613e:	f000 8085 	beq.w	800624c <temp_cold+0x1f8>
 8006142:	4b66      	ldr	r3, [pc, #408]	; (80062dc <temp_cold+0x288>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	7f5b      	ldrb	r3, [r3, #29]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d07f      	beq.n	800624c <temp_cold+0x1f8>
 800614c:	4b64      	ldr	r3, [pc, #400]	; (80062e0 <temp_cold+0x28c>)
 800614e:	781b      	ldrb	r3, [r3, #0]
 8006150:	f083 0301 	eor.w	r3, r3, #1
 8006154:	b2db      	uxtb	r3, r3
 8006156:	2b00      	cmp	r3, #0
 8006158:	d078      	beq.n	800624c <temp_cold+0x1f8>
            device->inflow_speed > 0 && (ave < (device->temp_limit - device->extra_options.deviation)) && (ten_power >= 970)) // должно быть 970
 800615a:	4b5b      	ldr	r3, [pc, #364]	; (80062c8 <temp_cold+0x274>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	7b9b      	ldrb	r3, [r3, #14]
        if (device->state == ON	&& damper_state == 2 && sensors_data->out_state && sensors_data->in_state && inflow_max_flag == false &&
 8006160:	2b00      	cmp	r3, #0
 8006162:	d073      	beq.n	800624c <temp_cold+0x1f8>
            device->inflow_speed > 0 && (ave < (device->temp_limit - device->extra_options.deviation)) && (ten_power >= 970)) // должно быть 970
 8006164:	4b5f      	ldr	r3, [pc, #380]	; (80062e4 <temp_cold+0x290>)
 8006166:	781b      	ldrb	r3, [r3, #0]
 8006168:	461a      	mov	r2, r3
 800616a:	4b57      	ldr	r3, [pc, #348]	; (80062c8 <temp_cold+0x274>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	7e1b      	ldrb	r3, [r3, #24]
 8006170:	4619      	mov	r1, r3
 8006172:	4b55      	ldr	r3, [pc, #340]	; (80062c8 <temp_cold+0x274>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	7e5b      	ldrb	r3, [r3, #25]
 8006178:	1acb      	subs	r3, r1, r3
 800617a:	429a      	cmp	r2, r3
 800617c:	da66      	bge.n	800624c <temp_cold+0x1f8>
 800617e:	4b5a      	ldr	r3, [pc, #360]	; (80062e8 <temp_cold+0x294>)
 8006180:	881b      	ldrh	r3, [r3, #0]
 8006182:	f240 32c9 	movw	r2, #969	; 0x3c9
 8006186:	4293      	cmp	r3, r2
 8006188:	d960      	bls.n	800624c <temp_cold+0x1f8>
        {
            if (temp_cold_state == false)
 800618a:	4b58      	ldr	r3, [pc, #352]	; (80062ec <temp_cold+0x298>)
 800618c:	781b      	ldrb	r3, [r3, #0]
 800618e:	f083 0301 	eor.w	r3, r3, #1
 8006192:	b2db      	uxtb	r3, r3
 8006194:	2b00      	cmp	r3, #0
 8006196:	d00e      	beq.n	80061b6 <temp_cold+0x162>
            {
                temp_cold_state = true;
 8006198:	4b54      	ldr	r3, [pc, #336]	; (80062ec <temp_cold+0x298>)
 800619a:	2201      	movs	r2, #1
 800619c:	701a      	strb	r2, [r3, #0]
                cold_speed = device->speed_arr[device->inflow_speed];
 800619e:	4b4a      	ldr	r3, [pc, #296]	; (80062c8 <temp_cold+0x274>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a49      	ldr	r2, [pc, #292]	; (80062c8 <temp_cold+0x274>)
 80061a4:	6812      	ldr	r2, [r2, #0]
 80061a6:	7b92      	ldrb	r2, [r2, #14]
 80061a8:	4413      	add	r3, r2
 80061aa:	7c1a      	ldrb	r2, [r3, #16]
 80061ac:	4b50      	ldr	r3, [pc, #320]	; (80062f0 <temp_cold+0x29c>)
 80061ae:	701a      	strb	r2, [r3, #0]
                DEBUG_MODES("ZAFIKSIROVAL SKOROST\n");
 80061b0:	4850      	ldr	r0, [pc, #320]	; (80062f4 <temp_cold+0x2a0>)
 80061b2:	f020 fc11 	bl	80269d8 <puts>
            }
            if (cold_speed <= device->speed_arr[1])
 80061b6:	4b44      	ldr	r3, [pc, #272]	; (80062c8 <temp_cold+0x274>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	7c5a      	ldrb	r2, [r3, #17]
 80061bc:	4b4c      	ldr	r3, [pc, #304]	; (80062f0 <temp_cold+0x29c>)
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	429a      	cmp	r2, r3
 80061c2:	d32f      	bcc.n	8006224 <temp_cold+0x1d0>
            {
                if (ave < (10 - device->extra_options.deviation)) // должно быть 10
 80061c4:	4b47      	ldr	r3, [pc, #284]	; (80062e4 <temp_cold+0x290>)
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	461a      	mov	r2, r3
 80061ca:	4b3f      	ldr	r3, [pc, #252]	; (80062c8 <temp_cold+0x274>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	7e5b      	ldrb	r3, [r3, #25]
 80061d0:	f1c3 030a 	rsb	r3, r3, #10
 80061d4:	429a      	cmp	r2, r3
 80061d6:	da1c      	bge.n	8006212 <temp_cold+0x1be>
                {
                    device->error_stop_cold = true;
 80061d8:	4b3b      	ldr	r3, [pc, #236]	; (80062c8 <temp_cold+0x274>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	2201      	movs	r2, #1
 80061de:	719a      	strb	r2, [r3, #6]
                    device->error_temp_cold = false;
 80061e0:	4b39      	ldr	r3, [pc, #228]	; (80062c8 <temp_cold+0x274>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	2200      	movs	r2, #0
 80061e6:	711a      	strb	r2, [r3, #4]
                    cold_time = HAL_GetTick();
 80061e8:	f004 fde0 	bl	800adac <HAL_GetTick>
 80061ec:	4603      	mov	r3, r0
 80061ee:	2200      	movs	r2, #0
 80061f0:	603b      	str	r3, [r7, #0]
 80061f2:	607a      	str	r2, [r7, #4]
 80061f4:	4b35      	ldr	r3, [pc, #212]	; (80062cc <temp_cold+0x278>)
 80061f6:	e9d7 1200 	ldrd	r1, r2, [r7]
 80061fa:	e9c3 1200 	strd	r1, r2, [r3]
                    DEBUG_MODES("ERROR_STOP\n");
 80061fe:	483e      	ldr	r0, [pc, #248]	; (80062f8 <temp_cold+0x2a4>)
 8006200:	f020 fbea 	bl	80269d8 <puts>
                    DEBUG_MODES("ERROR_STOP\n");
 8006204:	483c      	ldr	r0, [pc, #240]	; (80062f8 <temp_cold+0x2a4>)
 8006206:	f020 fbe7 	bl	80269d8 <puts>
                    DEBUG_MODES("ERROR_STOP\n");
 800620a:	483b      	ldr	r0, [pc, #236]	; (80062f8 <temp_cold+0x2a4>)
 800620c:	f020 fbe4 	bl	80269d8 <puts>
 8006210:	e014      	b.n	800623c <temp_cold+0x1e8>
                }
                else
                {
                    cold_speed = device->speed_arr[1];
 8006212:	4b2d      	ldr	r3, [pc, #180]	; (80062c8 <temp_cold+0x274>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	7c5a      	ldrb	r2, [r3, #17]
 8006218:	4b35      	ldr	r3, [pc, #212]	; (80062f0 <temp_cold+0x29c>)
 800621a:	701a      	strb	r2, [r3, #0]
                    DEBUG_MODES("PERVAYA SKOROST\n");
 800621c:	4837      	ldr	r0, [pc, #220]	; (80062fc <temp_cold+0x2a8>)
 800621e:	f020 fbdb 	bl	80269d8 <puts>
 8006222:	e00b      	b.n	800623c <temp_cold+0x1e8>
                }
            }
            else
            {
                cold_speed = cold_speed - device->extra_options.step_pwm;
 8006224:	4b32      	ldr	r3, [pc, #200]	; (80062f0 <temp_cold+0x29c>)
 8006226:	781a      	ldrb	r2, [r3, #0]
 8006228:	4b27      	ldr	r3, [pc, #156]	; (80062c8 <temp_cold+0x274>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	7edb      	ldrb	r3, [r3, #27]
 800622e:	1ad3      	subs	r3, r2, r3
 8006230:	b2da      	uxtb	r2, r3
 8006232:	4b2f      	ldr	r3, [pc, #188]	; (80062f0 <temp_cold+0x29c>)
 8006234:	701a      	strb	r2, [r3, #0]
                DEBUG_MODES("UBAVILI NA 5\n");
 8006236:	4832      	ldr	r0, [pc, #200]	; (8006300 <temp_cold+0x2ac>)
 8006238:	f020 fbce 	bl	80269d8 <puts>
            }
            device->error_temp_cold = true;
 800623c:	4b22      	ldr	r3, [pc, #136]	; (80062c8 <temp_cold+0x274>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	2201      	movs	r2, #1
 8006242:	711a      	strb	r2, [r3, #4]
            DEBUG_MODES("error_temp_cold\n");
 8006244:	482f      	ldr	r0, [pc, #188]	; (8006304 <temp_cold+0x2b0>)
 8006246:	f020 fbc7 	bl	80269d8 <puts>
                device->error_temp_cold = false;
                DEBUG_MODES("VSE OK\n");
            }
        }
    }
}
 800624a:	e038      	b.n	80062be <temp_cold+0x26a>
            if (temp_cold_state)
 800624c:	4b27      	ldr	r3, [pc, #156]	; (80062ec <temp_cold+0x298>)
 800624e:	781b      	ldrb	r3, [r3, #0]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d02d      	beq.n	80062b0 <temp_cold+0x25c>
                cold_speed = cold_speed + device->extra_options.step_pwm;
 8006254:	4b1c      	ldr	r3, [pc, #112]	; (80062c8 <temp_cold+0x274>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	7eda      	ldrb	r2, [r3, #27]
 800625a:	4b25      	ldr	r3, [pc, #148]	; (80062f0 <temp_cold+0x29c>)
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	4413      	add	r3, r2
 8006260:	b2da      	uxtb	r2, r3
 8006262:	4b23      	ldr	r3, [pc, #140]	; (80062f0 <temp_cold+0x29c>)
 8006264:	701a      	strb	r2, [r3, #0]
                DEBUG_MODES("PRIBAVILI NA 5\n");
 8006266:	4828      	ldr	r0, [pc, #160]	; (8006308 <temp_cold+0x2b4>)
 8006268:	f020 fbb6 	bl	80269d8 <puts>
                if (cold_speed >= device->speed_arr[device->inflow_speed])
 800626c:	4b16      	ldr	r3, [pc, #88]	; (80062c8 <temp_cold+0x274>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a15      	ldr	r2, [pc, #84]	; (80062c8 <temp_cold+0x274>)
 8006272:	6812      	ldr	r2, [r2, #0]
 8006274:	7b92      	ldrb	r2, [r2, #14]
 8006276:	4413      	add	r3, r2
 8006278:	7c1a      	ldrb	r2, [r3, #16]
 800627a:	4b1d      	ldr	r3, [pc, #116]	; (80062f0 <temp_cold+0x29c>)
 800627c:	781b      	ldrb	r3, [r3, #0]
 800627e:	429a      	cmp	r2, r3
 8006280:	d81d      	bhi.n	80062be <temp_cold+0x26a>
                    cold_speed = device->speed_arr[device->inflow_speed];
 8006282:	4b11      	ldr	r3, [pc, #68]	; (80062c8 <temp_cold+0x274>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a10      	ldr	r2, [pc, #64]	; (80062c8 <temp_cold+0x274>)
 8006288:	6812      	ldr	r2, [r2, #0]
 800628a:	7b92      	ldrb	r2, [r2, #14]
 800628c:	4413      	add	r3, r2
 800628e:	7c1a      	ldrb	r2, [r3, #16]
 8006290:	4b17      	ldr	r3, [pc, #92]	; (80062f0 <temp_cold+0x29c>)
 8006292:	701a      	strb	r2, [r3, #0]
                    temp_cold_state = false;
 8006294:	4b15      	ldr	r3, [pc, #84]	; (80062ec <temp_cold+0x298>)
 8006296:	2200      	movs	r2, #0
 8006298:	701a      	strb	r2, [r3, #0]
                    DEBUG_MODES("SRAVNYALI ISHODNOE ZNACHENIE\n");
 800629a:	481c      	ldr	r0, [pc, #112]	; (800630c <temp_cold+0x2b8>)
 800629c:	f020 fb9c 	bl	80269d8 <puts>
                    device->error_temp_cold = false;
 80062a0:	4b09      	ldr	r3, [pc, #36]	; (80062c8 <temp_cold+0x274>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	2200      	movs	r2, #0
 80062a6:	711a      	strb	r2, [r3, #4]
                    DEBUG_MODES("VSE OK\n");
 80062a8:	4819      	ldr	r0, [pc, #100]	; (8006310 <temp_cold+0x2bc>)
 80062aa:	f020 fb95 	bl	80269d8 <puts>
}
 80062ae:	e006      	b.n	80062be <temp_cold+0x26a>
                device->error_temp_cold = false;
 80062b0:	4b05      	ldr	r3, [pc, #20]	; (80062c8 <temp_cold+0x274>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	2200      	movs	r2, #0
 80062b6:	711a      	strb	r2, [r3, #4]
                DEBUG_MODES("VSE OK\n");
 80062b8:	4815      	ldr	r0, [pc, #84]	; (8006310 <temp_cold+0x2bc>)
 80062ba:	f020 fb8d 	bl	80269d8 <puts>
}
 80062be:	bf00      	nop
 80062c0:	3728      	adds	r7, #40	; 0x28
 80062c2:	46bd      	mov	sp, r7
 80062c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80062c8:	20013e2c 	.word	0x20013e2c
 80062cc:	20014300 	.word	0x20014300
 80062d0:	0036ee81 	.word	0x0036ee81
 80062d4:	0802acf8 	.word	0x0802acf8
 80062d8:	20014309 	.word	0x20014309
 80062dc:	20013e34 	.word	0x20013e34
 80062e0:	20014328 	.word	0x20014328
 80062e4:	1000004e 	.word	0x1000004e
 80062e8:	20013dfe 	.word	0x20013dfe
 80062ec:	20000044 	.word	0x20000044
 80062f0:	20014308 	.word	0x20014308
 80062f4:	0802ad18 	.word	0x0802ad18
 80062f8:	0802ad34 	.word	0x0802ad34
 80062fc:	0802ad48 	.word	0x0802ad48
 8006300:	0802ad60 	.word	0x0802ad60
 8006304:	0802ad74 	.word	0x0802ad74
 8006308:	0802ad8c 	.word	0x0802ad8c
 800630c:	0802ada4 	.word	0x0802ada4
 8006310:	0802adc8 	.word	0x0802adc8

08006314 <temp_hot>:

void temp_hot()
{
 8006314:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006318:	af00      	add	r7, sp, #0
	if (device->error_temp_hot == true && ((HAL_GetTick() - hot_time) > 3 * MINUTE))
 800631a:	4b23      	ldr	r3, [pc, #140]	; (80063a8 <temp_hot+0x94>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	78db      	ldrb	r3, [r3, #3]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d022      	beq.n	800636a <temp_hot+0x56>
 8006324:	f004 fd42 	bl	800adac <HAL_GetTick>
 8006328:	4603      	mov	r3, r0
 800632a:	2200      	movs	r2, #0
 800632c:	4698      	mov	r8, r3
 800632e:	4691      	mov	r9, r2
 8006330:	4b1e      	ldr	r3, [pc, #120]	; (80063ac <temp_hot+0x98>)
 8006332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006336:	ebb8 0402 	subs.w	r4, r8, r2
 800633a:	eb69 0503 	sbc.w	r5, r9, r3
 800633e:	4b1c      	ldr	r3, [pc, #112]	; (80063b0 <temp_hot+0x9c>)
 8006340:	429c      	cmp	r4, r3
 8006342:	f175 0300 	sbcs.w	r3, r5, #0
 8006346:	d310      	bcc.n	800636a <temp_hot+0x56>
	{
	    device->error_stop_hot = true;
 8006348:	4b17      	ldr	r3, [pc, #92]	; (80063a8 <temp_hot+0x94>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	2201      	movs	r2, #1
 800634e:	715a      	strb	r2, [r3, #5]
	    device->error_temp_hot = false;
 8006350:	4b15      	ldr	r3, [pc, #84]	; (80063a8 <temp_hot+0x94>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	2200      	movs	r2, #0
 8006356:	70da      	strb	r2, [r3, #3]
	    DEBUG_MODES("ERROR_STOP\n");
 8006358:	4816      	ldr	r0, [pc, #88]	; (80063b4 <temp_hot+0xa0>)
 800635a:	f020 fb3d 	bl	80269d8 <puts>
	    DEBUG_MODES("ERROR_STOP\n");
 800635e:	4815      	ldr	r0, [pc, #84]	; (80063b4 <temp_hot+0xa0>)
 8006360:	f020 fb3a 	bl	80269d8 <puts>
	    DEBUG_MODES("ERROR_STOP\n");
 8006364:	4813      	ldr	r0, [pc, #76]	; (80063b4 <temp_hot+0xa0>)
 8006366:	f020 fb37 	bl	80269d8 <puts>
	}
    if (device->error_stop_hot == false && ave >= HOT_TEMP) // должно быть 60
 800636a:	4b0f      	ldr	r3, [pc, #60]	; (80063a8 <temp_hot+0x94>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	795b      	ldrb	r3, [r3, #5]
 8006370:	f083 0301 	eor.w	r3, r3, #1
 8006374:	b2db      	uxtb	r3, r3
 8006376:	2b00      	cmp	r3, #0
 8006378:	d013      	beq.n	80063a2 <temp_hot+0x8e>
 800637a:	4b0f      	ldr	r3, [pc, #60]	; (80063b8 <temp_hot+0xa4>)
 800637c:	781b      	ldrb	r3, [r3, #0]
 800637e:	2b3b      	cmp	r3, #59	; 0x3b
 8006380:	d90f      	bls.n	80063a2 <temp_hot+0x8e>
    {
        device->error_temp_hot = true;
 8006382:	4b09      	ldr	r3, [pc, #36]	; (80063a8 <temp_hot+0x94>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	2201      	movs	r2, #1
 8006388:	70da      	strb	r2, [r3, #3]
        hot_time = HAL_GetTick();
 800638a:	f004 fd0f 	bl	800adac <HAL_GetTick>
 800638e:	4603      	mov	r3, r0
 8006390:	2200      	movs	r2, #0
 8006392:	469a      	mov	sl, r3
 8006394:	4693      	mov	fp, r2
 8006396:	4b05      	ldr	r3, [pc, #20]	; (80063ac <temp_hot+0x98>)
 8006398:	e9c3 ab00 	strd	sl, fp, [r3]
        DEBUG_MODES("error_temp_hot\n");
 800639c:	4807      	ldr	r0, [pc, #28]	; (80063bc <temp_hot+0xa8>)
 800639e:	f020 fb1b 	bl	80269d8 <puts>
    }
}
 80063a2:	bf00      	nop
 80063a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80063a8:	20013e2c 	.word	0x20013e2c
 80063ac:	20014310 	.word	0x20014310
 80063b0:	0002bf21 	.word	0x0002bf21
 80063b4:	0802ad34 	.word	0x0802ad34
 80063b8:	1000004e 	.word	0x1000004e
 80063bc:	0802add8 	.word	0x0802add8

080063c0 <inflow_mode>:

void inflow_mode()
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	af00      	add	r7, sp, #0
    if (device->error_temp_hot == false && device->error_temp_cold == false && device->error_stop_hot == false && device->error_stop_cold == false)
 80063c4:	4b36      	ldr	r3, [pc, #216]	; (80064a0 <inflow_mode+0xe0>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	78db      	ldrb	r3, [r3, #3]
 80063ca:	f083 0301 	eor.w	r3, r3, #1
 80063ce:	b2db      	uxtb	r3, r3
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d020      	beq.n	8006416 <inflow_mode+0x56>
 80063d4:	4b32      	ldr	r3, [pc, #200]	; (80064a0 <inflow_mode+0xe0>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	791b      	ldrb	r3, [r3, #4]
 80063da:	f083 0301 	eor.w	r3, r3, #1
 80063de:	b2db      	uxtb	r3, r3
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d018      	beq.n	8006416 <inflow_mode+0x56>
 80063e4:	4b2e      	ldr	r3, [pc, #184]	; (80064a0 <inflow_mode+0xe0>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	795b      	ldrb	r3, [r3, #5]
 80063ea:	f083 0301 	eor.w	r3, r3, #1
 80063ee:	b2db      	uxtb	r3, r3
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d010      	beq.n	8006416 <inflow_mode+0x56>
 80063f4:	4b2a      	ldr	r3, [pc, #168]	; (80064a0 <inflow_mode+0xe0>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	799b      	ldrb	r3, [r3, #6]
 80063fa:	f083 0301 	eor.w	r3, r3, #1
 80063fe:	b2db      	uxtb	r3, r3
 8006400:	2b00      	cmp	r3, #0
 8006402:	d008      	beq.n	8006416 <inflow_mode+0x56>
    {
        inst_speed = device->speed_arr[device->inflow_speed];
 8006404:	4b26      	ldr	r3, [pc, #152]	; (80064a0 <inflow_mode+0xe0>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a25      	ldr	r2, [pc, #148]	; (80064a0 <inflow_mode+0xe0>)
 800640a:	6812      	ldr	r2, [r2, #0]
 800640c:	7b92      	ldrb	r2, [r2, #14]
 800640e:	4413      	add	r3, r2
 8006410:	7c1a      	ldrb	r2, [r3, #16]
 8006412:	4b24      	ldr	r3, [pc, #144]	; (80064a4 <inflow_mode+0xe4>)
 8006414:	701a      	strb	r2, [r3, #0]
    }
    if (device->error_temp_hot == true && device->error_stop_hot == false)
 8006416:	4b22      	ldr	r3, [pc, #136]	; (80064a0 <inflow_mode+0xe0>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	78db      	ldrb	r3, [r3, #3]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d00d      	beq.n	800643c <inflow_mode+0x7c>
 8006420:	4b1f      	ldr	r3, [pc, #124]	; (80064a0 <inflow_mode+0xe0>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	795b      	ldrb	r3, [r3, #5]
 8006426:	f083 0301 	eor.w	r3, r3, #1
 800642a:	b2db      	uxtb	r3, r3
 800642c:	2b00      	cmp	r3, #0
 800642e:	d005      	beq.n	800643c <inflow_mode+0x7c>
    {
        inst_speed = MAXIMUM;
 8006430:	4b1c      	ldr	r3, [pc, #112]	; (80064a4 <inflow_mode+0xe4>)
 8006432:	2264      	movs	r2, #100	; 0x64
 8006434:	701a      	strb	r2, [r3, #0]
        DEBUG_MODES("speed = MAXIMUM\n");
 8006436:	481c      	ldr	r0, [pc, #112]	; (80064a8 <inflow_mode+0xe8>)
 8006438:	f020 face 	bl	80269d8 <puts>
    }
    if (device->error_temp_cold == true && device->error_stop_cold == false)
 800643c:	4b18      	ldr	r3, [pc, #96]	; (80064a0 <inflow_mode+0xe0>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	791b      	ldrb	r3, [r3, #4]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d00e      	beq.n	8006464 <inflow_mode+0xa4>
 8006446:	4b16      	ldr	r3, [pc, #88]	; (80064a0 <inflow_mode+0xe0>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	799b      	ldrb	r3, [r3, #6]
 800644c:	f083 0301 	eor.w	r3, r3, #1
 8006450:	b2db      	uxtb	r3, r3
 8006452:	2b00      	cmp	r3, #0
 8006454:	d006      	beq.n	8006464 <inflow_mode+0xa4>
    {
        inst_speed = cold_speed;
 8006456:	4b15      	ldr	r3, [pc, #84]	; (80064ac <inflow_mode+0xec>)
 8006458:	781a      	ldrb	r2, [r3, #0]
 800645a:	4b12      	ldr	r3, [pc, #72]	; (80064a4 <inflow_mode+0xe4>)
 800645c:	701a      	strb	r2, [r3, #0]
        DEBUG_MODES("speed = cold speed\n");
 800645e:	4814      	ldr	r0, [pc, #80]	; (80064b0 <inflow_mode+0xf0>)
 8006460:	f020 faba 	bl	80269d8 <puts>
    }
    if (device->error_stop_hot || device->error_stop_cold)
 8006464:	4b0e      	ldr	r3, [pc, #56]	; (80064a0 <inflow_mode+0xe0>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	795b      	ldrb	r3, [r3, #5]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d104      	bne.n	8006478 <inflow_mode+0xb8>
 800646e:	4b0c      	ldr	r3, [pc, #48]	; (80064a0 <inflow_mode+0xe0>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	799b      	ldrb	r3, [r3, #6]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d005      	beq.n	8006484 <inflow_mode+0xc4>
    {
        inst_speed = 0;
 8006478:	4b0a      	ldr	r3, [pc, #40]	; (80064a4 <inflow_mode+0xe4>)
 800647a:	2200      	movs	r2, #0
 800647c:	701a      	strb	r2, [r3, #0]
        DEBUG_MODES("finish\n");
 800647e:	480d      	ldr	r0, [pc, #52]	; (80064b4 <inflow_mode+0xf4>)
 8006480:	f020 faaa 	bl	80269d8 <puts>
    }
    DEBUG_MODES("inst_speed %i\n", inst_speed);
 8006484:	4b07      	ldr	r3, [pc, #28]	; (80064a4 <inflow_mode+0xe4>)
 8006486:	781b      	ldrb	r3, [r3, #0]
 8006488:	4619      	mov	r1, r3
 800648a:	480b      	ldr	r0, [pc, #44]	; (80064b8 <inflow_mode+0xf8>)
 800648c:	f020 fa1e 	bl	80268cc <iprintf>
    set_inflow_fan1(inst_speed);
 8006490:	4b04      	ldr	r3, [pc, #16]	; (80064a4 <inflow_mode+0xe4>)
 8006492:	781b      	ldrb	r3, [r3, #0]
 8006494:	4618      	mov	r0, r3
 8006496:	f001 ff71 	bl	800837c <set_inflow_fan1>
}
 800649a:	bf00      	nop
 800649c:	bd80      	pop	{r7, pc}
 800649e:	bf00      	nop
 80064a0:	20013e2c 	.word	0x20013e2c
 80064a4:	20013dfd 	.word	0x20013dfd
 80064a8:	0802adf0 	.word	0x0802adf0
 80064ac:	20014308 	.word	0x20014308
 80064b0:	0802ae08 	.word	0x0802ae08
 80064b4:	0802ae24 	.word	0x0802ae24
 80064b8:	0802ae34 	.word	0x0802ae34

080064bc <inflow_max_mode>:

void inflow_max_mode()
{
 80064bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064c0:	b082      	sub	sp, #8
 80064c2:	af00      	add	r7, sp, #0
    if (!inflow_max_flag)
 80064c4:	4b2d      	ldr	r3, [pc, #180]	; (800657c <inflow_max_mode+0xc0>)
 80064c6:	781b      	ldrb	r3, [r3, #0]
 80064c8:	f083 0301 	eor.w	r3, r3, #1
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d016      	beq.n	8006500 <inflow_max_mode+0x44>
    {
        inflow_max_flag = true;
 80064d2:	4b2a      	ldr	r3, [pc, #168]	; (800657c <inflow_max_mode+0xc0>)
 80064d4:	2201      	movs	r2, #1
 80064d6:	701a      	strb	r2, [r3, #0]
        inflow_max_time = HAL_GetTick();
 80064d8:	f004 fc68 	bl	800adac <HAL_GetTick>
 80064dc:	4603      	mov	r3, r0
 80064de:	2200      	movs	r2, #0
 80064e0:	603b      	str	r3, [r7, #0]
 80064e2:	607a      	str	r2, [r7, #4]
 80064e4:	4b26      	ldr	r3, [pc, #152]	; (8006580 <inflow_max_mode+0xc4>)
 80064e6:	e9d7 1200 	ldrd	r1, r2, [r7]
 80064ea:	e9c3 1200 	strd	r1, r2, [r3]
        set_inflow_fan1(device->speed_arr[7]);
 80064ee:	4b25      	ldr	r3, [pc, #148]	; (8006584 <inflow_max_mode+0xc8>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	7ddb      	ldrb	r3, [r3, #23]
 80064f4:	4618      	mov	r0, r3
 80064f6:	f001 ff41 	bl	800837c <set_inflow_fan1>
        DEBUG_MODES("Start inflow max mode\n");
 80064fa:	4823      	ldr	r0, [pc, #140]	; (8006588 <inflow_max_mode+0xcc>)
 80064fc:	f020 fa6c 	bl	80269d8 <puts>
    }
    if (HAL_GetTick() - inflow_max_time > INFLOW_MAX_MODE_TIME)
 8006500:	f004 fc54 	bl	800adac <HAL_GetTick>
 8006504:	4603      	mov	r3, r0
 8006506:	2200      	movs	r2, #0
 8006508:	469a      	mov	sl, r3
 800650a:	4693      	mov	fp, r2
 800650c:	4b1c      	ldr	r3, [pc, #112]	; (8006580 <inflow_max_mode+0xc4>)
 800650e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006512:	ebba 0402 	subs.w	r4, sl, r2
 8006516:	eb6b 0503 	sbc.w	r5, fp, r3
 800651a:	4b1c      	ldr	r3, [pc, #112]	; (800658c <inflow_max_mode+0xd0>)
 800651c:	429c      	cmp	r4, r3
 800651e:	f175 0300 	sbcs.w	r3, r5, #0
 8006522:	d30c      	bcc.n	800653e <inflow_max_mode+0x82>
    {
        device->mode = device->last_mode;
 8006524:	4b17      	ldr	r3, [pc, #92]	; (8006584 <inflow_max_mode+0xc8>)
 8006526:	681a      	ldr	r2, [r3, #0]
 8006528:	4b16      	ldr	r3, [pc, #88]	; (8006584 <inflow_max_mode+0xc8>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	7b52      	ldrb	r2, [r2, #13]
 800652e:	731a      	strb	r2, [r3, #12]
        DEBUG_MODES("Set last mode = %i\n", device->mode);
 8006530:	4b14      	ldr	r3, [pc, #80]	; (8006584 <inflow_max_mode+0xc8>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	7b1b      	ldrb	r3, [r3, #12]
 8006536:	4619      	mov	r1, r3
 8006538:	4815      	ldr	r0, [pc, #84]	; (8006590 <inflow_max_mode+0xd4>)
 800653a:	f020 f9c7 	bl	80268cc <iprintf>
    }
    if (inflow_max_time > HAL_GetTick())
 800653e:	f004 fc35 	bl	800adac <HAL_GetTick>
 8006542:	4603      	mov	r3, r0
 8006544:	2200      	movs	r2, #0
 8006546:	4698      	mov	r8, r3
 8006548:	4691      	mov	r9, r2
 800654a:	4b0d      	ldr	r3, [pc, #52]	; (8006580 <inflow_max_mode+0xc4>)
 800654c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006550:	4590      	cmp	r8, r2
 8006552:	eb79 0303 	sbcs.w	r3, r9, r3
 8006556:	d20c      	bcs.n	8006572 <inflow_max_mode+0xb6>
    {
        device->mode = device->last_mode;
 8006558:	4b0a      	ldr	r3, [pc, #40]	; (8006584 <inflow_max_mode+0xc8>)
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	4b09      	ldr	r3, [pc, #36]	; (8006584 <inflow_max_mode+0xc8>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	7b52      	ldrb	r2, [r2, #13]
 8006562:	731a      	strb	r2, [r3, #12]
        DEBUG_MODES("TIME RESET Set last mode = %i\n", device->mode);
 8006564:	4b07      	ldr	r3, [pc, #28]	; (8006584 <inflow_max_mode+0xc8>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	7b1b      	ldrb	r3, [r3, #12]
 800656a:	4619      	mov	r1, r3
 800656c:	4809      	ldr	r0, [pc, #36]	; (8006594 <inflow_max_mode+0xd8>)
 800656e:	f020 f9ad 	bl	80268cc <iprintf>
    }

}
 8006572:	bf00      	nop
 8006574:	3708      	adds	r7, #8
 8006576:	46bd      	mov	sp, r7
 8006578:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800657c:	20014328 	.word	0x20014328
 8006580:	20014320 	.word	0x20014320
 8006584:	20013e2c 	.word	0x20013e2c
 8006588:	0802ae4c 	.word	0x0802ae4c
 800658c:	000493e1 	.word	0x000493e1
 8006590:	0802ae6c 	.word	0x0802ae6c
 8006594:	0802ae88 	.word	0x0802ae88

08006598 <mode_handler>:

void mode_handler()
{
 8006598:	b580      	push	{r7, lr}
 800659a:	af00      	add	r7, sp, #0
    switch (device->mode)
 800659c:	4b0d      	ldr	r3, [pc, #52]	; (80065d4 <mode_handler+0x3c>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	7b1b      	ldrb	r3, [r3, #12]
 80065a2:	2b02      	cmp	r3, #2
 80065a4:	d010      	beq.n	80065c8 <mode_handler+0x30>
 80065a6:	2b02      	cmp	r3, #2
 80065a8:	dc11      	bgt.n	80065ce <mode_handler+0x36>
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d002      	beq.n	80065b4 <mode_handler+0x1c>
 80065ae:	2b01      	cmp	r3, #1
 80065b0:	d006      	beq.n	80065c0 <mode_handler+0x28>
        break;
    case INFLOW_MAX_MODE:
        inflow_max_mode();
        break;
    default:
        break;
 80065b2:	e00c      	b.n	80065ce <mode_handler+0x36>
        inflow_max_flag = false;
 80065b4:	4b08      	ldr	r3, [pc, #32]	; (80065d8 <mode_handler+0x40>)
 80065b6:	2200      	movs	r2, #0
 80065b8:	701a      	strb	r2, [r3, #0]
        inflow_mode();
 80065ba:	f7ff ff01 	bl	80063c0 <inflow_mode>
        break;
 80065be:	e007      	b.n	80065d0 <mode_handler+0x38>
        inflow_max_flag = false;
 80065c0:	4b05      	ldr	r3, [pc, #20]	; (80065d8 <mode_handler+0x40>)
 80065c2:	2200      	movs	r2, #0
 80065c4:	701a      	strb	r2, [r3, #0]
        break;
 80065c6:	e003      	b.n	80065d0 <mode_handler+0x38>
        inflow_max_mode();
 80065c8:	f7ff ff78 	bl	80064bc <inflow_max_mode>
        break;
 80065cc:	e000      	b.n	80065d0 <mode_handler+0x38>
        break;
 80065ce:	bf00      	nop
    }
}
 80065d0:	bf00      	nop
 80065d2:	bd80      	pop	{r7, pc}
 80065d4:	20013e2c 	.word	0x20013e2c
 80065d8:	20014328 	.word	0x20014328

080065dc <pcnt_error>:

void pcnt_error()
{
 80065dc:	b480      	push	{r7}
 80065de:	af00      	add	r7, sp, #0
	if(inflow_power1 > 0)
 80065e0:	4b0f      	ldr	r3, [pc, #60]	; (8006620 <pcnt_error+0x44>)
 80065e2:	781b      	ldrb	r3, [r3, #0]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d013      	beq.n	8006610 <pcnt_error+0x34>
	{
		fan_count++;
 80065e8:	4b0e      	ldr	r3, [pc, #56]	; (8006624 <pcnt_error+0x48>)
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	3301      	adds	r3, #1
 80065ee:	b2da      	uxtb	r2, r3
 80065f0:	4b0c      	ldr	r3, [pc, #48]	; (8006624 <pcnt_error+0x48>)
 80065f2:	701a      	strb	r2, [r3, #0]
		if(fan_count == MAX_FAN_COUNT)
 80065f4:	4b0b      	ldr	r3, [pc, #44]	; (8006624 <pcnt_error+0x48>)
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	2b0a      	cmp	r3, #10
 80065fa:	d104      	bne.n	8006606 <pcnt_error+0x2a>
			device->error_fan = true;
 80065fc:	4b0a      	ldr	r3, [pc, #40]	; (8006628 <pcnt_error+0x4c>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	2201      	movs	r2, #1
 8006602:	721a      	strb	r2, [r3, #8]
		else
			device->error_fan = false;
	}
	else
		fan_count = 0;
}
 8006604:	e007      	b.n	8006616 <pcnt_error+0x3a>
			device->error_fan = false;
 8006606:	4b08      	ldr	r3, [pc, #32]	; (8006628 <pcnt_error+0x4c>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	2200      	movs	r2, #0
 800660c:	721a      	strb	r2, [r3, #8]
}
 800660e:	e002      	b.n	8006616 <pcnt_error+0x3a>
		fan_count = 0;
 8006610:	4b04      	ldr	r3, [pc, #16]	; (8006624 <pcnt_error+0x48>)
 8006612:	2200      	movs	r2, #0
 8006614:	701a      	strb	r2, [r3, #0]
}
 8006616:	bf00      	nop
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr
 8006620:	200142f8 	.word	0x200142f8
 8006624:	20014318 	.word	0x20014318
 8006628:	20013e2c 	.word	0x20013e2c

0800662c <inflow_handler>:

void inflow_handler()
{
 800662c:	b580      	push	{r7, lr}
 800662e:	af00      	add	r7, sp, #0
    if (device->state == ON && damper_state == 2)
 8006630:	4b09      	ldr	r3, [pc, #36]	; (8006658 <inflow_handler+0x2c>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	789b      	ldrb	r3, [r3, #2]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d008      	beq.n	800664c <inflow_handler+0x20>
 800663a:	4b08      	ldr	r3, [pc, #32]	; (800665c <inflow_handler+0x30>)
 800663c:	781b      	ldrb	r3, [r3, #0]
 800663e:	2b02      	cmp	r3, #2
 8006640:	d104      	bne.n	800664c <inflow_handler+0x20>
    {
        mode_handler();
 8006642:	f7ff ffa9 	bl	8006598 <mode_handler>
        pcnt_error();
 8006646:	f7ff ffc9 	bl	80065dc <pcnt_error>
 800664a:	e003      	b.n	8006654 <inflow_handler+0x28>
    }
    else
    	set_inflow_fan1(OFF);
 800664c:	2000      	movs	r0, #0
 800664e:	f001 fe95 	bl	800837c <set_inflow_fan1>
}
 8006652:	bf00      	nop
 8006654:	bf00      	nop
 8006656:	bd80      	pop	{r7, pc}
 8006658:	20013e2c 	.word	0x20013e2c
 800665c:	20014309 	.word	0x20014309

08006660 <MainTask>:

void MainTask(void *argument)
{
 8006660:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006662:	b089      	sub	sp, #36	; 0x24
 8006664:	af06      	add	r7, sp, #24
 8006666:	6078      	str	r0, [r7, #4]
    DEBUG_MODES("DEVICE STATE %i\n", device->state);
 8006668:	4b24      	ldr	r3, [pc, #144]	; (80066fc <MainTask+0x9c>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	789b      	ldrb	r3, [r3, #2]
 800666e:	4619      	mov	r1, r3
 8006670:	4823      	ldr	r0, [pc, #140]	; (8006700 <MainTask+0xa0>)
 8006672:	f020 f92b 	bl	80268cc <iprintf>
    DEBUG_MODES("DEVICE MODE %i\n", device->mode);
 8006676:	4b21      	ldr	r3, [pc, #132]	; (80066fc <MainTask+0x9c>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	7b1b      	ldrb	r3, [r3, #12]
 800667c:	4619      	mov	r1, r3
 800667e:	4821      	ldr	r0, [pc, #132]	; (8006704 <MainTask+0xa4>)
 8006680:	f020 f924 	bl	80268cc <iprintf>
    DEBUG_MODES("DEVICE inflow_speed %i\n", device->inflow_speed);
 8006684:	4b1d      	ldr	r3, [pc, #116]	; (80066fc <MainTask+0x9c>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	7b9b      	ldrb	r3, [r3, #14]
 800668a:	4619      	mov	r1, r3
 800668c:	481e      	ldr	r0, [pc, #120]	; (8006708 <MainTask+0xa8>)
 800668e:	f020 f91d 	bl	80268cc <iprintf>
    DEBUG_MODES("speed {%i,%i,%i,%i,%i,%i,%i,%i}\n", device->speed_arr[0], device->speed_arr[1], device->speed_arr[2], device->speed_arr[3], device->speed_arr[4], device->speed_arr[5], device->speed_arr[6], device->speed_arr[7]);
 8006692:	4b1a      	ldr	r3, [pc, #104]	; (80066fc <MainTask+0x9c>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	7c1b      	ldrb	r3, [r3, #16]
 8006698:	461d      	mov	r5, r3
 800669a:	4b18      	ldr	r3, [pc, #96]	; (80066fc <MainTask+0x9c>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	7c5b      	ldrb	r3, [r3, #17]
 80066a0:	461e      	mov	r6, r3
 80066a2:	4b16      	ldr	r3, [pc, #88]	; (80066fc <MainTask+0x9c>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	7c9b      	ldrb	r3, [r3, #18]
 80066a8:	469c      	mov	ip, r3
 80066aa:	4b14      	ldr	r3, [pc, #80]	; (80066fc <MainTask+0x9c>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	7cdb      	ldrb	r3, [r3, #19]
 80066b0:	461a      	mov	r2, r3
 80066b2:	4b12      	ldr	r3, [pc, #72]	; (80066fc <MainTask+0x9c>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	7d1b      	ldrb	r3, [r3, #20]
 80066b8:	4619      	mov	r1, r3
 80066ba:	4b10      	ldr	r3, [pc, #64]	; (80066fc <MainTask+0x9c>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	7d5b      	ldrb	r3, [r3, #21]
 80066c0:	4618      	mov	r0, r3
 80066c2:	4b0e      	ldr	r3, [pc, #56]	; (80066fc <MainTask+0x9c>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	7d9b      	ldrb	r3, [r3, #22]
 80066c8:	461c      	mov	r4, r3
 80066ca:	4b0c      	ldr	r3, [pc, #48]	; (80066fc <MainTask+0x9c>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	7ddb      	ldrb	r3, [r3, #23]
 80066d0:	9304      	str	r3, [sp, #16]
 80066d2:	9403      	str	r4, [sp, #12]
 80066d4:	9002      	str	r0, [sp, #8]
 80066d6:	9101      	str	r1, [sp, #4]
 80066d8:	9200      	str	r2, [sp, #0]
 80066da:	4663      	mov	r3, ip
 80066dc:	4632      	mov	r2, r6
 80066de:	4629      	mov	r1, r5
 80066e0:	480a      	ldr	r0, [pc, #40]	; (800670c <MainTask+0xac>)
 80066e2:	f020 f8f3 	bl	80268cc <iprintf>
    for(;;)
    {
    	temp_hot();  // функция проверки перегрева
 80066e6:	f7ff fe15 	bl	8006314 <temp_hot>
    	temp_cold(); // функция проверки переохлаждения
 80066ea:	f7ff fcb3 	bl	8006054 <temp_cold>
    	inflow_handler();
 80066ee:	f7ff ff9d 	bl	800662c <inflow_handler>
        osDelay(300);
 80066f2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80066f6:	f00b fb50 	bl	8011d9a <osDelay>
    	temp_hot();  // функция проверки перегрева
 80066fa:	e7f4      	b.n	80066e6 <MainTask+0x86>
 80066fc:	20013e2c 	.word	0x20013e2c
 8006700:	0802aeb0 	.word	0x0802aeb0
 8006704:	0802aec8 	.word	0x0802aec8
 8006708:	0802aee0 	.word	0x0802aee0
 800670c:	0802af00 	.word	0x0802af00

08006710 <capabilities>:
#include "../../Inc/cJSON/cJSON.h"
#include "../Storage/storage.h"
#include "../../Inc/cJSON/utils.h"

void capabilities(cJSON *capabilities_js)
{
 8006710:	b5b0      	push	{r4, r5, r7, lr}
 8006712:	b082      	sub	sp, #8
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
    check_char_on_off(capabilities_js, "on_off", &device->state);
 8006718:	4b1a      	ldr	r3, [pc, #104]	; (8006784 <capabilities+0x74>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	3302      	adds	r3, #2
 800671e:	461a      	mov	r2, r3
 8006720:	4919      	ldr	r1, [pc, #100]	; (8006788 <capabilities+0x78>)
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f7ff fa88 	bl	8005c38 <check_char_on_off>
    check_char_mode(capabilities_js, "mode", &device->mode);
 8006728:	4b16      	ldr	r3, [pc, #88]	; (8006784 <capabilities+0x74>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	330c      	adds	r3, #12
 800672e:	461a      	mov	r2, r3
 8006730:	4916      	ldr	r1, [pc, #88]	; (800678c <capabilities+0x7c>)
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f7ff fa2a 	bl	8005b8c <check_char_mode>
    check_js_param_u8(capabilities_js, "speed", &device->inflow_speed);
 8006738:	4b12      	ldr	r3, [pc, #72]	; (8006784 <capabilities+0x74>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	330e      	adds	r3, #14
 800673e:	461a      	mov	r2, r3
 8006740:	4913      	ldr	r1, [pc, #76]	; (8006790 <capabilities+0x80>)
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f7ff f9fe 	bl	8005b44 <check_js_param_u8>
    check_js_param_u8(capabilities_js, "heat", &device->temp_limit);
 8006748:	4b0e      	ldr	r3, [pc, #56]	; (8006784 <capabilities+0x74>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	3318      	adds	r3, #24
 800674e:	461a      	mov	r2, r3
 8006750:	4910      	ldr	r1, [pc, #64]	; (8006794 <capabilities+0x84>)
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f7ff f9f6 	bl	8005b44 <check_js_param_u8>
    device_check = *device;
 8006758:	4b0a      	ldr	r3, [pc, #40]	; (8006784 <capabilities+0x74>)
 800675a:	681a      	ldr	r2, [r3, #0]
 800675c:	4b0e      	ldr	r3, [pc, #56]	; (8006798 <capabilities+0x88>)
 800675e:	6814      	ldr	r4, [r2, #0]
 8006760:	6850      	ldr	r0, [r2, #4]
 8006762:	6891      	ldr	r1, [r2, #8]
 8006764:	68d5      	ldr	r5, [r2, #12]
 8006766:	601c      	str	r4, [r3, #0]
 8006768:	6058      	str	r0, [r3, #4]
 800676a:	6099      	str	r1, [r3, #8]
 800676c:	60dd      	str	r5, [r3, #12]
 800676e:	6914      	ldr	r4, [r2, #16]
 8006770:	6950      	ldr	r0, [r2, #20]
 8006772:	6991      	ldr	r1, [r2, #24]
 8006774:	611c      	str	r4, [r3, #16]
 8006776:	6158      	str	r0, [r3, #20]
 8006778:	6199      	str	r1, [r3, #24]
}
 800677a:	bf00      	nop
 800677c:	3708      	adds	r7, #8
 800677e:	46bd      	mov	sp, r7
 8006780:	bdb0      	pop	{r4, r5, r7, pc}
 8006782:	bf00      	nop
 8006784:	20013e2c 	.word	0x20013e2c
 8006788:	0802af28 	.word	0x0802af28
 800678c:	0802af30 	.word	0x0802af30
 8006790:	0802af38 	.word	0x0802af38
 8006794:	0802af40 	.word	0x0802af40
 8006798:	20013de0 	.word	0x20013de0

0800679c <set_ten_settings>:

void set_ten_settings(cJSON *data_json)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b082      	sub	sp, #8
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
	check_js_param_int(data_json, "temp_limit", &device->temp_limit);
 80067a4:	4b06      	ldr	r3, [pc, #24]	; (80067c0 <set_ten_settings+0x24>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	3318      	adds	r3, #24
 80067aa:	461a      	mov	r2, r3
 80067ac:	4905      	ldr	r1, [pc, #20]	; (80067c4 <set_ten_settings+0x28>)
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f7ff f9a6 	bl	8005b00 <check_js_param_int>
    DEBUG_MQTT("Set ten temp_limit = %i", device->temp_limit);
    write_device_params();
 80067b4:	f002 fe16 	bl	80093e4 <write_device_params>
}
 80067b8:	bf00      	nop
 80067ba:	3708      	adds	r7, #8
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}
 80067c0:	20013e2c 	.word	0x20013e2c
 80067c4:	0802af48 	.word	0x0802af48

080067c8 <settings_handler>:

void settings_handler(cJSON *settings_js)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b084      	sub	sp, #16
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
    cJSON *ten_js = cJSON_GetObjectItem(settings_js, "ten");
 80067d0:	4915      	ldr	r1, [pc, #84]	; (8006828 <settings_handler+0x60>)
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f7fe fff1 	bl	80057ba <cJSON_GetObjectItem>
 80067d8:	60f8      	str	r0, [r7, #12]

    if (ten_js != NULL)
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d002      	beq.n	80067e6 <settings_handler+0x1e>
        set_ten_settings(ten_js);
 80067e0:	68f8      	ldr	r0, [r7, #12]
 80067e2:	f7ff ffdb 	bl	800679c <set_ten_settings>
    if (check_js_param_char(settings_js, "mqtt_ip", &wireless_params->vakio_mqtt.host))
 80067e6:	4b11      	ldr	r3, [pc, #68]	; (800682c <settings_handler+0x64>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	3368      	adds	r3, #104	; 0x68
 80067ec:	461a      	mov	r2, r3
 80067ee:	4910      	ldr	r1, [pc, #64]	; (8006830 <settings_handler+0x68>)
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f7ff fa7f 	bl	8005cf4 <check_js_param_char>
 80067f6:	4603      	mov	r3, r0
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d003      	beq.n	8006804 <settings_handler+0x3c>
    {
        write_wireless_params();
 80067fc:	f002 fdd2 	bl	80093a4 <write_wireless_params>
        set_mqtt_parameters();
 8006800:	f000 fd48 	bl	8007294 <set_mqtt_parameters>
    }
    if (check_js_param_u8(settings_js, "damper", &device->damper))
 8006804:	4b0b      	ldr	r3, [pc, #44]	; (8006834 <settings_handler+0x6c>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	3301      	adds	r3, #1
 800680a:	461a      	mov	r2, r3
 800680c:	490a      	ldr	r1, [pc, #40]	; (8006838 <settings_handler+0x70>)
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f7ff f998 	bl	8005b44 <check_js_param_u8>
 8006814:	4603      	mov	r3, r0
 8006816:	2b00      	cmp	r3, #0
 8006818:	d001      	beq.n	800681e <settings_handler+0x56>
        write_device_params();
 800681a:	f002 fde3 	bl	80093e4 <write_device_params>
}
 800681e:	bf00      	nop
 8006820:	3710      	adds	r7, #16
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}
 8006826:	bf00      	nop
 8006828:	0802af54 	.word	0x0802af54
 800682c:	20013e30 	.word	0x20013e30
 8006830:	0802af58 	.word	0x0802af58
 8006834:	20013e2c 	.word	0x20013e2c
 8006838:	0802af60 	.word	0x0802af60

0800683c <mode_topic_handler>:

void mode_topic_handler(char *data)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b08e      	sub	sp, #56	; 0x38
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
    if (data == NULL)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d10e      	bne.n	8006868 <mode_topic_handler+0x2c>
    {
        const char *error_ptr = cJSON_GetErrorPtr();
 800684a:	f7fd f86f 	bl	800392c <cJSON_GetErrorPtr>
 800684e:	60f8      	str	r0, [r7, #12]
        if (error_ptr != NULL)
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d060      	beq.n	8006918 <mode_topic_handler+0xdc>
        {
            fprintf(stderr, "Error before: %s\n", error_ptr);
 8006856:	4b33      	ldr	r3, [pc, #204]	; (8006924 <mode_topic_handler+0xe8>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	68db      	ldr	r3, [r3, #12]
 800685c:	68fa      	ldr	r2, [r7, #12]
 800685e:	4932      	ldr	r1, [pc, #200]	; (8006928 <mode_topic_handler+0xec>)
 8006860:	4618      	mov	r0, r3
 8006862:	f01f f909 	bl	8025a78 <fiprintf>
        }
        return;
 8006866:	e057      	b.n	8006918 <mode_topic_handler+0xdc>
    }
    cJSON *data_json = cJSON_Parse(data);
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f7fe f92d 	bl	8004ac8 <cJSON_Parse>
 800686e:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (data == NULL)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d10e      	bne.n	8006894 <mode_topic_handler+0x58>
    {
        const char *error_ptr = cJSON_GetErrorPtr();
 8006876:	f7fd f859 	bl	800392c <cJSON_GetErrorPtr>
 800687a:	6138      	str	r0, [r7, #16]
        if (error_ptr != NULL)
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d04c      	beq.n	800691c <mode_topic_handler+0xe0>
        {
            fprintf(stderr, "Error before: %s\n", error_ptr);
 8006882:	4b28      	ldr	r3, [pc, #160]	; (8006924 <mode_topic_handler+0xe8>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	68db      	ldr	r3, [r3, #12]
 8006888:	693a      	ldr	r2, [r7, #16]
 800688a:	4927      	ldr	r1, [pc, #156]	; (8006928 <mode_topic_handler+0xec>)
 800688c:	4618      	mov	r0, r3
 800688e:	f01f f8f3 	bl	8025a78 <fiprintf>
        }
        return;
 8006892:	e043      	b.n	800691c <mode_topic_handler+0xe0>
    }
    cJSON *capabilities_js_arr = cJSON_GetObjectItem(data_json, "capabilities");
 8006894:	4925      	ldr	r1, [pc, #148]	; (800692c <mode_topic_handler+0xf0>)
 8006896:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006898:	f7fe ff8f 	bl	80057ba <cJSON_GetObjectItem>
 800689c:	62b8      	str	r0, [r7, #40]	; 0x28
    cJSON *settings_js_arr = cJSON_GetObjectItem(data_json, "settings");
 800689e:	4924      	ldr	r1, [pc, #144]	; (8006930 <mode_topic_handler+0xf4>)
 80068a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80068a2:	f7fe ff8a 	bl	80057ba <cJSON_GetObjectItem>
 80068a6:	6278      	str	r0, [r7, #36]	; 0x24

    if (settings_js_arr != NULL)
 80068a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d015      	beq.n	80068da <mode_topic_handler+0x9e>
    {
        int js_size = cJSON_GetArraySize(settings_js_arr);
 80068ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80068b0:	f7fe fee3 	bl	800567a <cJSON_GetArraySize>
 80068b4:	6238      	str	r0, [r7, #32]
        DEBUG_MQTT("Get settings_js_arr %i\n", js_size);
        for (int count = 0; count < js_size; count++)
 80068b6:	2300      	movs	r3, #0
 80068b8:	637b      	str	r3, [r7, #52]	; 0x34
 80068ba:	e00a      	b.n	80068d2 <mode_topic_handler+0x96>
        {
            cJSON *settings_js = cJSON_GetArrayItem(settings_js_arr, count);
 80068bc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80068be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80068c0:	f7fe ff1f 	bl	8005702 <cJSON_GetArrayItem>
 80068c4:	61f8      	str	r0, [r7, #28]
            settings_handler(settings_js);
 80068c6:	69f8      	ldr	r0, [r7, #28]
 80068c8:	f7ff ff7e 	bl	80067c8 <settings_handler>
        for (int count = 0; count < js_size; count++)
 80068cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068ce:	3301      	adds	r3, #1
 80068d0:	637b      	str	r3, [r7, #52]	; 0x34
 80068d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80068d4:	6a3b      	ldr	r3, [r7, #32]
 80068d6:	429a      	cmp	r2, r3
 80068d8:	dbf0      	blt.n	80068bc <mode_topic_handler+0x80>
        }
    }

    if (capabilities_js_arr != NULL)
 80068da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d015      	beq.n	800690c <mode_topic_handler+0xd0>
    {
        int js_size = cJSON_GetArraySize(capabilities_js_arr);
 80068e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068e2:	f7fe feca 	bl	800567a <cJSON_GetArraySize>
 80068e6:	61b8      	str	r0, [r7, #24]
        DEBUG_MQTT("Get capabilities %i\n", js_size);
        for (int count = 0; count < js_size; count++)
 80068e8:	2300      	movs	r3, #0
 80068ea:	633b      	str	r3, [r7, #48]	; 0x30
 80068ec:	e00a      	b.n	8006904 <mode_topic_handler+0xc8>
        {
            cJSON *capabilities_js = cJSON_GetArrayItem(capabilities_js_arr, count);
 80068ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80068f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068f2:	f7fe ff06 	bl	8005702 <cJSON_GetArrayItem>
 80068f6:	6178      	str	r0, [r7, #20]
            capabilities(capabilities_js);
 80068f8:	6978      	ldr	r0, [r7, #20]
 80068fa:	f7ff ff09 	bl	8006710 <capabilities>
        for (int count = 0; count < js_size; count++)
 80068fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006900:	3301      	adds	r3, #1
 8006902:	633b      	str	r3, [r7, #48]	; 0x30
 8006904:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006906:	69bb      	ldr	r3, [r7, #24]
 8006908:	429a      	cmp	r2, r3
 800690a:	dbf0      	blt.n	80068ee <mode_topic_handler+0xb2>
        }
    }
    cJSON_Delete(data_json);
 800690c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800690e:	f7fd f8c5 	bl	8003a9c <cJSON_Delete>
    write_device_params();
 8006912:	f002 fd67 	bl	80093e4 <write_device_params>
 8006916:	e002      	b.n	800691e <mode_topic_handler+0xe2>
        return;
 8006918:	bf00      	nop
 800691a:	e000      	b.n	800691e <mode_topic_handler+0xe2>
        return;
 800691c:	bf00      	nop
}
 800691e:	3738      	adds	r7, #56	; 0x38
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}
 8006924:	10000070 	.word	0x10000070
 8006928:	0802af68 	.word	0x0802af68
 800692c:	0802af7c 	.word	0x0802af7c
 8006930:	0802af8c 	.word	0x0802af8c

08006934 <mqtt_pub_request_cb>:
void connect_mqtt(mqtt_client_t *client);
extern struct netif gnetif;
/* Private function prototypes -----------------------------------------------*/

static void mqtt_pub_request_cb(void *arg, err_t result)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b082      	sub	sp, #8
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
 800693c:	460b      	mov	r3, r1
 800693e:	70fb      	strb	r3, [r7, #3]
	if (result != ERR_OK)
 8006940:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d005      	beq.n	8006954 <mqtt_pub_request_cb+0x20>
	{
		DEBUG_MQTT("Publish result: %d\n", result);
 8006948:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800694c:	4619      	mov	r1, r3
 800694e:	4803      	ldr	r0, [pc, #12]	; (800695c <mqtt_pub_request_cb+0x28>)
 8006950:	f01f ffbc 	bl	80268cc <iprintf>
	}
}
 8006954:	bf00      	nop
 8006956:	3708      	adds	r7, #8
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}
 800695c:	0802af98 	.word	0x0802af98

08006960 <publish_message>:
		DEBUG_MQTT("Publish err: %d\n", err);
	}
}

void publish_message(char topic[], char message[])
{
 8006960:	b590      	push	{r4, r7, lr}
 8006962:	b089      	sub	sp, #36	; 0x24
 8006964:	af04      	add	r7, sp, #16
 8006966:	6078      	str	r0, [r7, #4]
 8006968:	6039      	str	r1, [r7, #0]
	void *arg = NULL;
 800696a:	2300      	movs	r3, #0
 800696c:	60fb      	str	r3, [r7, #12]
	err_t err;
	u8_t qos = 1; /* 0 1 or 2, see MQTT specification */
 800696e:	2301      	movs	r3, #1
 8006970:	72fb      	strb	r3, [r7, #11]
	u8_t retain = 0; /* No don't retain such crappy payload... */
 8006972:	2300      	movs	r3, #0
 8006974:	72bb      	strb	r3, [r7, #10]
	err = mqtt_publish(client, topic, message, strlen(message), qos, retain, mqtt_pub_request_cb, arg);
 8006976:	4b12      	ldr	r3, [pc, #72]	; (80069c0 <publish_message+0x60>)
 8006978:	681c      	ldr	r4, [r3, #0]
 800697a:	6838      	ldr	r0, [r7, #0]
 800697c:	f7f9 fc32 	bl	80001e4 <strlen>
 8006980:	4603      	mov	r3, r0
 8006982:	b29a      	uxth	r2, r3
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	9303      	str	r3, [sp, #12]
 8006988:	4b0e      	ldr	r3, [pc, #56]	; (80069c4 <publish_message+0x64>)
 800698a:	9302      	str	r3, [sp, #8]
 800698c:	7abb      	ldrb	r3, [r7, #10]
 800698e:	9301      	str	r3, [sp, #4]
 8006990:	7afb      	ldrb	r3, [r7, #11]
 8006992:	9300      	str	r3, [sp, #0]
 8006994:	4613      	mov	r3, r2
 8006996:	683a      	ldr	r2, [r7, #0]
 8006998:	6879      	ldr	r1, [r7, #4]
 800699a:	4620      	mov	r0, r4
 800699c:	f011 fa70 	bl	8017e80 <mqtt_publish>
 80069a0:	4603      	mov	r3, r0
 80069a2:	727b      	strb	r3, [r7, #9]
	if (err != ERR_OK)
 80069a4:	f997 3009 	ldrsb.w	r3, [r7, #9]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d005      	beq.n	80069b8 <publish_message+0x58>
	{
		DEBUG_MQTT("Publish err: %d\n", err);
 80069ac:	f997 3009 	ldrsb.w	r3, [r7, #9]
 80069b0:	4619      	mov	r1, r3
 80069b2:	4805      	ldr	r0, [pc, #20]	; (80069c8 <publish_message+0x68>)
 80069b4:	f01f ff8a 	bl	80268cc <iprintf>
	}
}
 80069b8:	bf00      	nop
 80069ba:	3714      	adds	r7, #20
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd90      	pop	{r4, r7, pc}
 80069c0:	2001436c 	.word	0x2001436c
 80069c4:	08006935 	.word	0x08006935
 80069c8:	0802afb4 	.word	0x0802afb4

080069cc <mqtt_incoming_publish_cb>:

static int inpub_id;
static void mqtt_incoming_publish_cb(void *arg, const char *topic, u32_t tot_len)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b084      	sub	sp, #16
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	60f8      	str	r0, [r7, #12]
 80069d4:	60b9      	str	r1, [r7, #8]
 80069d6:	607a      	str	r2, [r7, #4]
	DEBUG_MQTT("Incoming publish at topic %s with total length %u\n", topic, (unsigned int) tot_len);
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	68b9      	ldr	r1, [r7, #8]
 80069dc:	4827      	ldr	r0, [pc, #156]	; (8006a7c <mqtt_incoming_publish_cb+0xb0>)
 80069de:	f01f ff75 	bl	80268cc <iprintf>
	/* Decode topic string into a user defined reference */
	if (strcmp(topic, mode_topic) == 0)
 80069e2:	4927      	ldr	r1, [pc, #156]	; (8006a80 <mqtt_incoming_publish_cb+0xb4>)
 80069e4:	68b8      	ldr	r0, [r7, #8]
 80069e6:	f7f9 fbf3 	bl	80001d0 <strcmp>
 80069ea:	4603      	mov	r3, r0
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d103      	bne.n	80069f8 <mqtt_incoming_publish_cb+0x2c>
		inpub_id = 0;
 80069f0:	4b24      	ldr	r3, [pc, #144]	; (8006a84 <mqtt_incoming_publish_cb+0xb8>)
 80069f2:	2200      	movs	r2, #0
 80069f4:	601a      	str	r2, [r3, #0]
 80069f6:	e009      	b.n	8006a0c <mqtt_incoming_publish_cb+0x40>
	else if (strcmp(topic, system_topic) == 0)
 80069f8:	4923      	ldr	r1, [pc, #140]	; (8006a88 <mqtt_incoming_publish_cb+0xbc>)
 80069fa:	68b8      	ldr	r0, [r7, #8]
 80069fc:	f7f9 fbe8 	bl	80001d0 <strcmp>
 8006a00:	4603      	mov	r3, r0
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d102      	bne.n	8006a0c <mqtt_incoming_publish_cb+0x40>
		inpub_id = 1;
 8006a06:	4b1f      	ldr	r3, [pc, #124]	; (8006a84 <mqtt_incoming_publish_cb+0xb8>)
 8006a08:	2201      	movs	r2, #1
 8006a0a:	601a      	str	r2, [r3, #0]
    if (wireless_params->mqtt_type != VAKIO_MQTT)
 8006a0c:	4b1f      	ldr	r3, [pc, #124]	; (8006a8c <mqtt_incoming_publish_cb+0xc0>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006a14:	f083 0301 	eor.w	r3, r3, #1
 8006a18:	b2db      	uxtb	r3, r3
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d02a      	beq.n	8006a74 <mqtt_incoming_publish_cb+0xa8>
    {
        if (strcmp(topic, workmode_topic) == 0)
 8006a1e:	491c      	ldr	r1, [pc, #112]	; (8006a90 <mqtt_incoming_publish_cb+0xc4>)
 8006a20:	68b8      	ldr	r0, [r7, #8]
 8006a22:	f7f9 fbd5 	bl	80001d0 <strcmp>
 8006a26:	4603      	mov	r3, r0
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d103      	bne.n	8006a34 <mqtt_incoming_publish_cb+0x68>
        	inpub_id = 2;
 8006a2c:	4b15      	ldr	r3, [pc, #84]	; (8006a84 <mqtt_incoming_publish_cb+0xb8>)
 8006a2e:	2202      	movs	r2, #2
 8006a30:	601a      	str	r2, [r3, #0]
        else if (strcmp(topic, speed_topic) == 0)
        	inpub_id = 4;
        else if (strcmp(topic, temp_limit_topic) == 0)
        	inpub_id = 5;
    }
}
 8006a32:	e01f      	b.n	8006a74 <mqtt_incoming_publish_cb+0xa8>
        else if (strcmp(topic, state_topic) == 0)
 8006a34:	4917      	ldr	r1, [pc, #92]	; (8006a94 <mqtt_incoming_publish_cb+0xc8>)
 8006a36:	68b8      	ldr	r0, [r7, #8]
 8006a38:	f7f9 fbca 	bl	80001d0 <strcmp>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d103      	bne.n	8006a4a <mqtt_incoming_publish_cb+0x7e>
        	inpub_id = 3;
 8006a42:	4b10      	ldr	r3, [pc, #64]	; (8006a84 <mqtt_incoming_publish_cb+0xb8>)
 8006a44:	2203      	movs	r2, #3
 8006a46:	601a      	str	r2, [r3, #0]
}
 8006a48:	e014      	b.n	8006a74 <mqtt_incoming_publish_cb+0xa8>
        else if (strcmp(topic, speed_topic) == 0)
 8006a4a:	4913      	ldr	r1, [pc, #76]	; (8006a98 <mqtt_incoming_publish_cb+0xcc>)
 8006a4c:	68b8      	ldr	r0, [r7, #8]
 8006a4e:	f7f9 fbbf 	bl	80001d0 <strcmp>
 8006a52:	4603      	mov	r3, r0
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d103      	bne.n	8006a60 <mqtt_incoming_publish_cb+0x94>
        	inpub_id = 4;
 8006a58:	4b0a      	ldr	r3, [pc, #40]	; (8006a84 <mqtt_incoming_publish_cb+0xb8>)
 8006a5a:	2204      	movs	r2, #4
 8006a5c:	601a      	str	r2, [r3, #0]
}
 8006a5e:	e009      	b.n	8006a74 <mqtt_incoming_publish_cb+0xa8>
        else if (strcmp(topic, temp_limit_topic) == 0)
 8006a60:	490e      	ldr	r1, [pc, #56]	; (8006a9c <mqtt_incoming_publish_cb+0xd0>)
 8006a62:	68b8      	ldr	r0, [r7, #8]
 8006a64:	f7f9 fbb4 	bl	80001d0 <strcmp>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d102      	bne.n	8006a74 <mqtt_incoming_publish_cb+0xa8>
        	inpub_id = 5;
 8006a6e:	4b05      	ldr	r3, [pc, #20]	; (8006a84 <mqtt_incoming_publish_cb+0xb8>)
 8006a70:	2205      	movs	r2, #5
 8006a72:	601a      	str	r2, [r3, #0]
}
 8006a74:	bf00      	nop
 8006a76:	3710      	adds	r7, #16
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}
 8006a7c:	0802afcc 	.word	0x0802afcc
 8006a80:	20014134 	.word	0x20014134
 8006a84:	20000048 	.word	0x20000048
 8006a88:	20014224 	.word	0x20014224
 8006a8c:	20013e30 	.word	0x20013e30
 8006a90:	20014184 	.word	0x20014184
 8006a94:	20014044 	.word	0x20014044
 8006a98:	200140e4 	.word	0x200140e4
 8006a9c:	20013fa4 	.word	0x20013fa4

08006aa0 <mqtt_incoming_data_cb>:

static void mqtt_incoming_data_cb(void *arg, const u8_t *data, u16_t len, u8_t flags)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b086      	sub	sp, #24
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	60f8      	str	r0, [r7, #12]
 8006aa8:	60b9      	str	r1, [r7, #8]
 8006aaa:	4611      	mov	r1, r2
 8006aac:	461a      	mov	r2, r3
 8006aae:	460b      	mov	r3, r1
 8006ab0:	80fb      	strh	r3, [r7, #6]
 8006ab2:	4613      	mov	r3, r2
 8006ab4:	717b      	strb	r3, [r7, #5]
	DEBUG_MQTT("Incoming publish payload with length %d, flags %u\n", len, (unsigned int) flags);
 8006ab6:	88fb      	ldrh	r3, [r7, #6]
 8006ab8:	797a      	ldrb	r2, [r7, #5]
 8006aba:	4619      	mov	r1, r3
 8006abc:	4874      	ldr	r0, [pc, #464]	; (8006c90 <mqtt_incoming_data_cb+0x1f0>)
 8006abe:	f01f ff05 	bl	80268cc <iprintf>
	if (flags & MQTT_DATA_FLAG_LAST)
 8006ac2:	797b      	ldrb	r3, [r7, #5]
 8006ac4:	f003 0301 	and.w	r3, r3, #1
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	f000 80dc 	beq.w	8006c86 <mqtt_incoming_data_cb+0x1e6>
	{
		DEBUG_MQTT("mqtt_incoming_data_cb: %s\n", (char*) data);
 8006ace:	68b9      	ldr	r1, [r7, #8]
 8006ad0:	4870      	ldr	r0, [pc, #448]	; (8006c94 <mqtt_incoming_data_cb+0x1f4>)
 8006ad2:	f01f fefb 	bl	80268cc <iprintf>
		if (inpub_id == 0)            //mode_topic
 8006ad6:	4b70      	ldr	r3, [pc, #448]	; (8006c98 <mqtt_incoming_data_cb+0x1f8>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d103      	bne.n	8006ae6 <mqtt_incoming_data_cb+0x46>
			mode_topic_handler(data);
 8006ade:	68b8      	ldr	r0, [r7, #8]
 8006ae0:	f7ff feac 	bl	800683c <mode_topic_handler>
 8006ae4:	e006      	b.n	8006af4 <mqtt_incoming_data_cb+0x54>
		else if (inpub_id == 1)       //system topic
 8006ae6:	4b6c      	ldr	r3, [pc, #432]	; (8006c98 <mqtt_incoming_data_cb+0x1f8>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	2b01      	cmp	r3, #1
 8006aec:	d102      	bne.n	8006af4 <mqtt_incoming_data_cb+0x54>
			system_topic_handler(data);
 8006aee:	68b8      	ldr	r0, [r7, #8]
 8006af0:	f001 fadc 	bl	80080ac <system_topic_handler>
	    if (wireless_params->mqtt_type != VAKIO_MQTT)
 8006af4:	4b69      	ldr	r3, [pc, #420]	; (8006c9c <mqtt_incoming_data_cb+0x1fc>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006afc:	f083 0301 	eor.w	r3, r3, #1
 8006b00:	b2db      	uxtb	r3, r3
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	f000 80b9 	beq.w	8006c7a <mqtt_incoming_data_cb+0x1da>
	    {
            if (inpub_id == 2)        //workmode topic)
 8006b08:	4b63      	ldr	r3, [pc, #396]	; (8006c98 <mqtt_incoming_data_cb+0x1f8>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	2b02      	cmp	r3, #2
 8006b0e:	d12b      	bne.n	8006b68 <mqtt_incoming_data_cb+0xc8>
            {
                if (!iSendMode)
 8006b10:	4b63      	ldr	r3, [pc, #396]	; (8006ca0 <mqtt_incoming_data_cb+0x200>)
 8006b12:	781b      	ldrb	r3, [r3, #0]
 8006b14:	f083 0301 	eor.w	r3, r3, #1
 8006b18:	b2db      	uxtb	r3, r3
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d020      	beq.n	8006b60 <mqtt_incoming_data_cb+0xc0>
                {
                    if (strcmp((char*)data, "inflow_mode") == 0)
 8006b1e:	4961      	ldr	r1, [pc, #388]	; (8006ca4 <mqtt_incoming_data_cb+0x204>)
 8006b20:	68b8      	ldr	r0, [r7, #8]
 8006b22:	f7f9 fb55 	bl	80001d0 <strcmp>
 8006b26:	4603      	mov	r3, r0
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d104      	bne.n	8006b36 <mqtt_incoming_data_cb+0x96>
                        device->mode = INFLOW_MODE;
 8006b2c:	4b5e      	ldr	r3, [pc, #376]	; (8006ca8 <mqtt_incoming_data_cb+0x208>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	2200      	movs	r2, #0
 8006b32:	731a      	strb	r2, [r3, #12]
 8006b34:	e00a      	b.n	8006b4c <mqtt_incoming_data_cb+0xac>
                    else if (strcmp((char*)data, "inflow_max_mode") == 0)
 8006b36:	495d      	ldr	r1, [pc, #372]	; (8006cac <mqtt_incoming_data_cb+0x20c>)
 8006b38:	68b8      	ldr	r0, [r7, #8]
 8006b3a:	f7f9 fb49 	bl	80001d0 <strcmp>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d103      	bne.n	8006b4c <mqtt_incoming_data_cb+0xac>
                        device->mode = INFLOW_MAX_MODE;
 8006b44:	4b58      	ldr	r3, [pc, #352]	; (8006ca8 <mqtt_incoming_data_cb+0x208>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	2202      	movs	r2, #2
 8006b4a:	731a      	strb	r2, [r3, #12]
                    device_check.mode = device->mode;
 8006b4c:	4b56      	ldr	r3, [pc, #344]	; (8006ca8 <mqtt_incoming_data_cb+0x208>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	7b1a      	ldrb	r2, [r3, #12]
 8006b52:	4b57      	ldr	r3, [pc, #348]	; (8006cb0 <mqtt_incoming_data_cb+0x210>)
 8006b54:	731a      	strb	r2, [r3, #12]
                    device_send.mode = device->mode;
 8006b56:	4b54      	ldr	r3, [pc, #336]	; (8006ca8 <mqtt_incoming_data_cb+0x208>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	7b1a      	ldrb	r2, [r3, #12]
 8006b5c:	4b55      	ldr	r3, [pc, #340]	; (8006cb4 <mqtt_incoming_data_cb+0x214>)
 8006b5e:	731a      	strb	r2, [r3, #12]
                }
                iSendMode = false;
 8006b60:	4b4f      	ldr	r3, [pc, #316]	; (8006ca0 <mqtt_incoming_data_cb+0x200>)
 8006b62:	2200      	movs	r2, #0
 8006b64:	701a      	strb	r2, [r3, #0]
 8006b66:	e088      	b.n	8006c7a <mqtt_incoming_data_cb+0x1da>
            }
            else if (inpub_id == 3)   //state topic
 8006b68:	4b4b      	ldr	r3, [pc, #300]	; (8006c98 <mqtt_incoming_data_cb+0x1f8>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	2b03      	cmp	r3, #3
 8006b6e:	d12b      	bne.n	8006bc8 <mqtt_incoming_data_cb+0x128>
            {
                if (!iSendState)
 8006b70:	4b51      	ldr	r3, [pc, #324]	; (8006cb8 <mqtt_incoming_data_cb+0x218>)
 8006b72:	781b      	ldrb	r3, [r3, #0]
 8006b74:	f083 0301 	eor.w	r3, r3, #1
 8006b78:	b2db      	uxtb	r3, r3
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d020      	beq.n	8006bc0 <mqtt_incoming_data_cb+0x120>
                {

                    if (strcmp((char*)data, "on") == 0)
 8006b7e:	494f      	ldr	r1, [pc, #316]	; (8006cbc <mqtt_incoming_data_cb+0x21c>)
 8006b80:	68b8      	ldr	r0, [r7, #8]
 8006b82:	f7f9 fb25 	bl	80001d0 <strcmp>
 8006b86:	4603      	mov	r3, r0
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d104      	bne.n	8006b96 <mqtt_incoming_data_cb+0xf6>
                        device->state = true;
 8006b8c:	4b46      	ldr	r3, [pc, #280]	; (8006ca8 <mqtt_incoming_data_cb+0x208>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	2201      	movs	r2, #1
 8006b92:	709a      	strb	r2, [r3, #2]
 8006b94:	e00a      	b.n	8006bac <mqtt_incoming_data_cb+0x10c>
                    else if (strcmp((char*)data, "off") == 0)
 8006b96:	494a      	ldr	r1, [pc, #296]	; (8006cc0 <mqtt_incoming_data_cb+0x220>)
 8006b98:	68b8      	ldr	r0, [r7, #8]
 8006b9a:	f7f9 fb19 	bl	80001d0 <strcmp>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d103      	bne.n	8006bac <mqtt_incoming_data_cb+0x10c>
                        device->state = false;
 8006ba4:	4b40      	ldr	r3, [pc, #256]	; (8006ca8 <mqtt_incoming_data_cb+0x208>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	709a      	strb	r2, [r3, #2]
                    device_check.state = device->state;
 8006bac:	4b3e      	ldr	r3, [pc, #248]	; (8006ca8 <mqtt_incoming_data_cb+0x208>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	789a      	ldrb	r2, [r3, #2]
 8006bb2:	4b3f      	ldr	r3, [pc, #252]	; (8006cb0 <mqtt_incoming_data_cb+0x210>)
 8006bb4:	709a      	strb	r2, [r3, #2]
                    device_send.state = device->state;
 8006bb6:	4b3c      	ldr	r3, [pc, #240]	; (8006ca8 <mqtt_incoming_data_cb+0x208>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	789a      	ldrb	r2, [r3, #2]
 8006bbc:	4b3d      	ldr	r3, [pc, #244]	; (8006cb4 <mqtt_incoming_data_cb+0x214>)
 8006bbe:	709a      	strb	r2, [r3, #2]
                }
                iSendState = false;
 8006bc0:	4b3d      	ldr	r3, [pc, #244]	; (8006cb8 <mqtt_incoming_data_cb+0x218>)
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	701a      	strb	r2, [r3, #0]
 8006bc6:	e058      	b.n	8006c7a <mqtt_incoming_data_cb+0x1da>
            }
            else if (inpub_id == 4)   //speed topic
 8006bc8:	4b33      	ldr	r3, [pc, #204]	; (8006c98 <mqtt_incoming_data_cb+0x1f8>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	2b04      	cmp	r3, #4
 8006bce:	d123      	bne.n	8006c18 <mqtt_incoming_data_cb+0x178>
            {
                if (!iSendSpeed)
 8006bd0:	4b3c      	ldr	r3, [pc, #240]	; (8006cc4 <mqtt_incoming_data_cb+0x224>)
 8006bd2:	781b      	ldrb	r3, [r3, #0]
 8006bd4:	f083 0301 	eor.w	r3, r3, #1
 8006bd8:	b2db      	uxtb	r3, r3
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d018      	beq.n	8006c10 <mqtt_incoming_data_cb+0x170>
                 {
                     uint8_t speed_ = data[0] - '0';
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	781b      	ldrb	r3, [r3, #0]
 8006be2:	3b30      	subs	r3, #48	; 0x30
 8006be4:	74fb      	strb	r3, [r7, #19]
                     device->inflow_speed = speed_;
 8006be6:	4b30      	ldr	r3, [pc, #192]	; (8006ca8 <mqtt_incoming_data_cb+0x208>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	7cfa      	ldrb	r2, [r7, #19]
 8006bec:	739a      	strb	r2, [r3, #14]
                     if (speed_ > 7)
 8006bee:	7cfb      	ldrb	r3, [r7, #19]
 8006bf0:	2b07      	cmp	r3, #7
 8006bf2:	d903      	bls.n	8006bfc <mqtt_incoming_data_cb+0x15c>
                         device->inflow_speed = 7;
 8006bf4:	4b2c      	ldr	r3, [pc, #176]	; (8006ca8 <mqtt_incoming_data_cb+0x208>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	2207      	movs	r2, #7
 8006bfa:	739a      	strb	r2, [r3, #14]
                     device_check.inflow_speed = device->inflow_speed;
 8006bfc:	4b2a      	ldr	r3, [pc, #168]	; (8006ca8 <mqtt_incoming_data_cb+0x208>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	7b9a      	ldrb	r2, [r3, #14]
 8006c02:	4b2b      	ldr	r3, [pc, #172]	; (8006cb0 <mqtt_incoming_data_cb+0x210>)
 8006c04:	739a      	strb	r2, [r3, #14]
                     device_send.inflow_speed = device->inflow_speed;
 8006c06:	4b28      	ldr	r3, [pc, #160]	; (8006ca8 <mqtt_incoming_data_cb+0x208>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	7b9a      	ldrb	r2, [r3, #14]
 8006c0c:	4b29      	ldr	r3, [pc, #164]	; (8006cb4 <mqtt_incoming_data_cb+0x214>)
 8006c0e:	739a      	strb	r2, [r3, #14]
                 }
                 iSendSpeed = false;
 8006c10:	4b2c      	ldr	r3, [pc, #176]	; (8006cc4 <mqtt_incoming_data_cb+0x224>)
 8006c12:	2200      	movs	r2, #0
 8006c14:	701a      	strb	r2, [r3, #0]
 8006c16:	e030      	b.n	8006c7a <mqtt_incoming_data_cb+0x1da>
            }
            else if (inpub_id == 5)   //temp_limit topic
 8006c18:	4b1f      	ldr	r3, [pc, #124]	; (8006c98 <mqtt_incoming_data_cb+0x1f8>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	2b05      	cmp	r3, #5
 8006c1e:	d12c      	bne.n	8006c7a <mqtt_incoming_data_cb+0x1da>
            {
                if (!iSendTemp)
 8006c20:	4b29      	ldr	r3, [pc, #164]	; (8006cc8 <mqtt_incoming_data_cb+0x228>)
 8006c22:	781b      	ldrb	r3, [r3, #0]
 8006c24:	f083 0301 	eor.w	r3, r3, #1
 8006c28:	b2db      	uxtb	r3, r3
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d022      	beq.n	8006c74 <mqtt_incoming_data_cb+0x1d4>
                {
                    int temp_ = 0;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	617b      	str	r3, [r7, #20]
                    temp_ = atoi((char*)data);
 8006c32:	68b8      	ldr	r0, [r7, #8]
 8006c34:	f01e ff1c 	bl	8025a70 <atoi>
 8006c38:	6178      	str	r0, [r7, #20]
                    device->temp_limit = temp_;
 8006c3a:	4b1b      	ldr	r3, [pc, #108]	; (8006ca8 <mqtt_incoming_data_cb+0x208>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	697a      	ldr	r2, [r7, #20]
 8006c40:	b2d2      	uxtb	r2, r2
 8006c42:	761a      	strb	r2, [r3, #24]
                    if (temp_ > 30)
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	2b1e      	cmp	r3, #30
 8006c48:	dd03      	ble.n	8006c52 <mqtt_incoming_data_cb+0x1b2>
                    	device->temp_limit = 30;
 8006c4a:	4b17      	ldr	r3, [pc, #92]	; (8006ca8 <mqtt_incoming_data_cb+0x208>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	221e      	movs	r2, #30
 8006c50:	761a      	strb	r2, [r3, #24]
                    if (temp_ < 10)
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	2b09      	cmp	r3, #9
 8006c56:	dc03      	bgt.n	8006c60 <mqtt_incoming_data_cb+0x1c0>
                    	device->temp_limit = 10;
 8006c58:	4b13      	ldr	r3, [pc, #76]	; (8006ca8 <mqtt_incoming_data_cb+0x208>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	220a      	movs	r2, #10
 8006c5e:	761a      	strb	r2, [r3, #24]
                    device_check.temp_limit = device->temp_limit;
 8006c60:	4b11      	ldr	r3, [pc, #68]	; (8006ca8 <mqtt_incoming_data_cb+0x208>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	7e1a      	ldrb	r2, [r3, #24]
 8006c66:	4b12      	ldr	r3, [pc, #72]	; (8006cb0 <mqtt_incoming_data_cb+0x210>)
 8006c68:	761a      	strb	r2, [r3, #24]
                    device_send.temp_limit = device->temp_limit;
 8006c6a:	4b0f      	ldr	r3, [pc, #60]	; (8006ca8 <mqtt_incoming_data_cb+0x208>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	7e1a      	ldrb	r2, [r3, #24]
 8006c70:	4b10      	ldr	r3, [pc, #64]	; (8006cb4 <mqtt_incoming_data_cb+0x214>)
 8006c72:	761a      	strb	r2, [r3, #24]
                }
                iSendTemp = false;
 8006c74:	4b14      	ldr	r3, [pc, #80]	; (8006cc8 <mqtt_incoming_data_cb+0x228>)
 8006c76:	2200      	movs	r2, #0
 8006c78:	701a      	strb	r2, [r3, #0]
            }
	    }
	memset((char*)data, 0, len);
 8006c7a:	88fb      	ldrh	r3, [r7, #6]
 8006c7c:	461a      	mov	r2, r3
 8006c7e:	2100      	movs	r1, #0
 8006c80:	68b8      	ldr	r0, [r7, #8]
 8006c82:	f01e ff77 	bl	8025b74 <memset>
	}
	else
	{
		/* Handle fragmented payload, store in buffer, write to file or whatever */
	}
}
 8006c86:	bf00      	nop
 8006c88:	3718      	adds	r7, #24
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}
 8006c8e:	bf00      	nop
 8006c90:	0802b008 	.word	0x0802b008
 8006c94:	0802b044 	.word	0x0802b044
 8006c98:	20000048 	.word	0x20000048
 8006c9c:	20013e30 	.word	0x20013e30
 8006ca0:	20013dde 	.word	0x20013dde
 8006ca4:	0802b068 	.word	0x0802b068
 8006ca8:	20013e2c 	.word	0x20013e2c
 8006cac:	0802b074 	.word	0x0802b074
 8006cb0:	20013de0 	.word	0x20013de0
 8006cb4:	20013e10 	.word	0x20013e10
 8006cb8:	20013ddc 	.word	0x20013ddc
 8006cbc:	0802b084 	.word	0x0802b084
 8006cc0:	0802b088 	.word	0x0802b088
 8006cc4:	20013ddd 	.word	0x20013ddd
 8006cc8:	20013dfc 	.word	0x20013dfc

08006ccc <mqtt_sub_request_cb>:

uint8_t count_sub_request_cb = 0;
bool sub_request_cb = false;
static void mqtt_sub_request_cb(void *arg, err_t result)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b082      	sub	sp, #8
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
 8006cd4:	460b      	mov	r3, r1
 8006cd6:	70fb      	strb	r3, [r7, #3]
	DEBUG_MQTT("Subscribe result: %d\n", result);
 8006cd8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006cdc:	4619      	mov	r1, r3
 8006cde:	480a      	ldr	r0, [pc, #40]	; (8006d08 <mqtt_sub_request_cb+0x3c>)
 8006ce0:	f01f fdf4 	bl	80268cc <iprintf>
	count_sub_request_cb--;
 8006ce4:	4b09      	ldr	r3, [pc, #36]	; (8006d0c <mqtt_sub_request_cb+0x40>)
 8006ce6:	781b      	ldrb	r3, [r3, #0]
 8006ce8:	3b01      	subs	r3, #1
 8006cea:	b2da      	uxtb	r2, r3
 8006cec:	4b07      	ldr	r3, [pc, #28]	; (8006d0c <mqtt_sub_request_cb+0x40>)
 8006cee:	701a      	strb	r2, [r3, #0]
	if (count_sub_request_cb == 0)
 8006cf0:	4b06      	ldr	r3, [pc, #24]	; (8006d0c <mqtt_sub_request_cb+0x40>)
 8006cf2:	781b      	ldrb	r3, [r3, #0]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d102      	bne.n	8006cfe <mqtt_sub_request_cb+0x32>
	{
		sub_request_cb = true;
 8006cf8:	4b05      	ldr	r3, [pc, #20]	; (8006d10 <mqtt_sub_request_cb+0x44>)
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	701a      	strb	r2, [r3, #0]
	}
}
 8006cfe:	bf00      	nop
 8006d00:	3708      	adds	r7, #8
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}
 8006d06:	bf00      	nop
 8006d08:	0802b08c 	.word	0x0802b08c
 8006d0c:	2000004c 	.word	0x2000004c
 8006d10:	2000004d 	.word	0x2000004d

08006d14 <mqtt_connection_cb>:
char speeds_str[4];
char temp_str[4];
char gnetif_str[24];

static void mqtt_connection_cb(mqtt_client_t *client, void *arg, mqtt_connection_status_t status)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b088      	sub	sp, #32
 8006d18:	af02      	add	r7, sp, #8
 8006d1a:	60f8      	str	r0, [r7, #12]
 8006d1c:	60b9      	str	r1, [r7, #8]
 8006d1e:	4613      	mov	r3, r2
 8006d20:	80fb      	strh	r3, [r7, #6]
	err_t err;
	if (status == MQTT_CONNECT_ACCEPTED)
 8006d22:	88fb      	ldrh	r3, [r7, #6]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	f040 80a9 	bne.w	8006e7c <mqtt_connection_cb+0x168>
	{
		DEBUG_MQTT("mqtt_connection_cb: Successfully connected\n");
 8006d2a:	485d      	ldr	r0, [pc, #372]	; (8006ea0 <mqtt_connection_cb+0x18c>)
 8006d2c:	f01f fe54 	bl	80269d8 <puts>
		mqtt_set_inpub_callback(client, mqtt_incoming_publish_cb, mqtt_incoming_data_cb, arg);
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	4a5c      	ldr	r2, [pc, #368]	; (8006ea4 <mqtt_connection_cb+0x190>)
 8006d34:	495c      	ldr	r1, [pc, #368]	; (8006ea8 <mqtt_connection_cb+0x194>)
 8006d36:	68f8      	ldr	r0, [r7, #12]
 8006d38:	f011 fa52 	bl	80181e0 <mqtt_set_inpub_callback>

		/* Subscribe to a topic named "subtopic" with QoS level 1, call mqtt_sub_request_cb with result */
		err = mqtt_subscribe(client, mode_topic, 1, mqtt_sub_request_cb, arg);
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	9301      	str	r3, [sp, #4]
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	9300      	str	r3, [sp, #0]
 8006d44:	4b59      	ldr	r3, [pc, #356]	; (8006eac <mqtt_connection_cb+0x198>)
 8006d46:	2201      	movs	r2, #1
 8006d48:	4959      	ldr	r1, [pc, #356]	; (8006eb0 <mqtt_connection_cb+0x19c>)
 8006d4a:	68f8      	ldr	r0, [r7, #12]
 8006d4c:	f011 f970 	bl	8018030 <mqtt_sub_unsub>
 8006d50:	4603      	mov	r3, r0
 8006d52:	75fb      	strb	r3, [r7, #23]
		if (err == ERR_OK)
 8006d54:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d108      	bne.n	8006d6e <mqtt_connection_cb+0x5a>
		{
			count_sub_request_cb++;
 8006d5c:	4b55      	ldr	r3, [pc, #340]	; (8006eb4 <mqtt_connection_cb+0x1a0>)
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	3301      	adds	r3, #1
 8006d62:	b2da      	uxtb	r2, r3
 8006d64:	4b53      	ldr	r3, [pc, #332]	; (8006eb4 <mqtt_connection_cb+0x1a0>)
 8006d66:	701a      	strb	r2, [r3, #0]
			DEBUG_MQTT("subscribe to mode_topic\n");
 8006d68:	4853      	ldr	r0, [pc, #332]	; (8006eb8 <mqtt_connection_cb+0x1a4>)
 8006d6a:	f01f fe35 	bl	80269d8 <puts>
		}
		err = mqtt_subscribe(client, system_topic, 1, mqtt_sub_request_cb, arg);
 8006d6e:	2301      	movs	r3, #1
 8006d70:	9301      	str	r3, [sp, #4]
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	9300      	str	r3, [sp, #0]
 8006d76:	4b4d      	ldr	r3, [pc, #308]	; (8006eac <mqtt_connection_cb+0x198>)
 8006d78:	2201      	movs	r2, #1
 8006d7a:	4950      	ldr	r1, [pc, #320]	; (8006ebc <mqtt_connection_cb+0x1a8>)
 8006d7c:	68f8      	ldr	r0, [r7, #12]
 8006d7e:	f011 f957 	bl	8018030 <mqtt_sub_unsub>
 8006d82:	4603      	mov	r3, r0
 8006d84:	75fb      	strb	r3, [r7, #23]
		if (err == ERR_OK)
 8006d86:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d108      	bne.n	8006da0 <mqtt_connection_cb+0x8c>
		{
			count_sub_request_cb++;
 8006d8e:	4b49      	ldr	r3, [pc, #292]	; (8006eb4 <mqtt_connection_cb+0x1a0>)
 8006d90:	781b      	ldrb	r3, [r3, #0]
 8006d92:	3301      	adds	r3, #1
 8006d94:	b2da      	uxtb	r2, r3
 8006d96:	4b47      	ldr	r3, [pc, #284]	; (8006eb4 <mqtt_connection_cb+0x1a0>)
 8006d98:	701a      	strb	r2, [r3, #0]
			DEBUG_MQTT("subscribe to system_topic\n");
 8006d9a:	4849      	ldr	r0, [pc, #292]	; (8006ec0 <mqtt_connection_cb+0x1ac>)
 8006d9c:	f01f fe1c 	bl	80269d8 <puts>
		}
		if (wireless_params->mqtt_type != VAKIO_MQTT)
 8006da0:	4b48      	ldr	r3, [pc, #288]	; (8006ec4 <mqtt_connection_cb+0x1b0>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006da8:	f083 0301 	eor.w	r3, r3, #1
 8006dac:	b2db      	uxtb	r3, r3
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d071      	beq.n	8006e96 <mqtt_connection_cb+0x182>
		{
			err = mqtt_subscribe(client, speed_topic, 1, mqtt_sub_request_cb, arg);
 8006db2:	2301      	movs	r3, #1
 8006db4:	9301      	str	r3, [sp, #4]
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	9300      	str	r3, [sp, #0]
 8006dba:	4b3c      	ldr	r3, [pc, #240]	; (8006eac <mqtt_connection_cb+0x198>)
 8006dbc:	2201      	movs	r2, #1
 8006dbe:	4942      	ldr	r1, [pc, #264]	; (8006ec8 <mqtt_connection_cb+0x1b4>)
 8006dc0:	68f8      	ldr	r0, [r7, #12]
 8006dc2:	f011 f935 	bl	8018030 <mqtt_sub_unsub>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	75fb      	strb	r3, [r7, #23]
			if (err == ERR_OK)
 8006dca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d108      	bne.n	8006de4 <mqtt_connection_cb+0xd0>
			{
				count_sub_request_cb++;
 8006dd2:	4b38      	ldr	r3, [pc, #224]	; (8006eb4 <mqtt_connection_cb+0x1a0>)
 8006dd4:	781b      	ldrb	r3, [r3, #0]
 8006dd6:	3301      	adds	r3, #1
 8006dd8:	b2da      	uxtb	r2, r3
 8006dda:	4b36      	ldr	r3, [pc, #216]	; (8006eb4 <mqtt_connection_cb+0x1a0>)
 8006ddc:	701a      	strb	r2, [r3, #0]
				DEBUG_MQTT("subscribe to speed_topic\n");
 8006dde:	483b      	ldr	r0, [pc, #236]	; (8006ecc <mqtt_connection_cb+0x1b8>)
 8006de0:	f01f fdfa 	bl	80269d8 <puts>
			}
			err = mqtt_subscribe(client, temp_limit_topic, 1, mqtt_sub_request_cb, arg);
 8006de4:	2301      	movs	r3, #1
 8006de6:	9301      	str	r3, [sp, #4]
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	9300      	str	r3, [sp, #0]
 8006dec:	4b2f      	ldr	r3, [pc, #188]	; (8006eac <mqtt_connection_cb+0x198>)
 8006dee:	2201      	movs	r2, #1
 8006df0:	4937      	ldr	r1, [pc, #220]	; (8006ed0 <mqtt_connection_cb+0x1bc>)
 8006df2:	68f8      	ldr	r0, [r7, #12]
 8006df4:	f011 f91c 	bl	8018030 <mqtt_sub_unsub>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	75fb      	strb	r3, [r7, #23]
			if (err == ERR_OK)
 8006dfc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d108      	bne.n	8006e16 <mqtt_connection_cb+0x102>
			{
				count_sub_request_cb++;
 8006e04:	4b2b      	ldr	r3, [pc, #172]	; (8006eb4 <mqtt_connection_cb+0x1a0>)
 8006e06:	781b      	ldrb	r3, [r3, #0]
 8006e08:	3301      	adds	r3, #1
 8006e0a:	b2da      	uxtb	r2, r3
 8006e0c:	4b29      	ldr	r3, [pc, #164]	; (8006eb4 <mqtt_connection_cb+0x1a0>)
 8006e0e:	701a      	strb	r2, [r3, #0]
				DEBUG_MQTT("subscribe to temp_limit_topic\n");
 8006e10:	4830      	ldr	r0, [pc, #192]	; (8006ed4 <mqtt_connection_cb+0x1c0>)
 8006e12:	f01f fde1 	bl	80269d8 <puts>
			}
			err = mqtt_subscribe(client, workmode_topic, 1, mqtt_sub_request_cb, arg);
 8006e16:	2301      	movs	r3, #1
 8006e18:	9301      	str	r3, [sp, #4]
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	9300      	str	r3, [sp, #0]
 8006e1e:	4b23      	ldr	r3, [pc, #140]	; (8006eac <mqtt_connection_cb+0x198>)
 8006e20:	2201      	movs	r2, #1
 8006e22:	492d      	ldr	r1, [pc, #180]	; (8006ed8 <mqtt_connection_cb+0x1c4>)
 8006e24:	68f8      	ldr	r0, [r7, #12]
 8006e26:	f011 f903 	bl	8018030 <mqtt_sub_unsub>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	75fb      	strb	r3, [r7, #23]
			if (err == ERR_OK)
 8006e2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d108      	bne.n	8006e48 <mqtt_connection_cb+0x134>
			{
				count_sub_request_cb++;
 8006e36:	4b1f      	ldr	r3, [pc, #124]	; (8006eb4 <mqtt_connection_cb+0x1a0>)
 8006e38:	781b      	ldrb	r3, [r3, #0]
 8006e3a:	3301      	adds	r3, #1
 8006e3c:	b2da      	uxtb	r2, r3
 8006e3e:	4b1d      	ldr	r3, [pc, #116]	; (8006eb4 <mqtt_connection_cb+0x1a0>)
 8006e40:	701a      	strb	r2, [r3, #0]
				DEBUG_MQTT("subscribe to workmode_topic\n");
 8006e42:	4826      	ldr	r0, [pc, #152]	; (8006edc <mqtt_connection_cb+0x1c8>)
 8006e44:	f01f fdc8 	bl	80269d8 <puts>
			}
			err = mqtt_subscribe(client, state_topic, 1, mqtt_sub_request_cb, arg);
 8006e48:	2301      	movs	r3, #1
 8006e4a:	9301      	str	r3, [sp, #4]
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	9300      	str	r3, [sp, #0]
 8006e50:	4b16      	ldr	r3, [pc, #88]	; (8006eac <mqtt_connection_cb+0x198>)
 8006e52:	2201      	movs	r2, #1
 8006e54:	4922      	ldr	r1, [pc, #136]	; (8006ee0 <mqtt_connection_cb+0x1cc>)
 8006e56:	68f8      	ldr	r0, [r7, #12]
 8006e58:	f011 f8ea 	bl	8018030 <mqtt_sub_unsub>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	75fb      	strb	r3, [r7, #23]
			if (err == ERR_OK)
 8006e60:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d116      	bne.n	8006e96 <mqtt_connection_cb+0x182>
			{
				count_sub_request_cb++;
 8006e68:	4b12      	ldr	r3, [pc, #72]	; (8006eb4 <mqtt_connection_cb+0x1a0>)
 8006e6a:	781b      	ldrb	r3, [r3, #0]
 8006e6c:	3301      	adds	r3, #1
 8006e6e:	b2da      	uxtb	r2, r3
 8006e70:	4b10      	ldr	r3, [pc, #64]	; (8006eb4 <mqtt_connection_cb+0x1a0>)
 8006e72:	701a      	strb	r2, [r3, #0]
				DEBUG_MQTT("subscribe to state_topic\n");
 8006e74:	481b      	ldr	r0, [pc, #108]	; (8006ee4 <mqtt_connection_cb+0x1d0>)
 8006e76:	f01f fdaf 	bl	80269d8 <puts>
		DEBUG_MQTT("mqtt_connection_cb: Disconnected, reason: %d\n", status);
		mqtt_status = false;
		mqtt_disconnect(client);
		init_mqtt();
	}
}
 8006e7a:	e00c      	b.n	8006e96 <mqtt_connection_cb+0x182>
		DEBUG_MQTT("mqtt_connection_cb: Disconnected, reason: %d\n", status);
 8006e7c:	88fb      	ldrh	r3, [r7, #6]
 8006e7e:	4619      	mov	r1, r3
 8006e80:	4819      	ldr	r0, [pc, #100]	; (8006ee8 <mqtt_connection_cb+0x1d4>)
 8006e82:	f01f fd23 	bl	80268cc <iprintf>
		mqtt_status = false;
 8006e86:	4b19      	ldr	r3, [pc, #100]	; (8006eec <mqtt_connection_cb+0x1d8>)
 8006e88:	2200      	movs	r2, #0
 8006e8a:	701a      	strb	r2, [r3, #0]
		mqtt_disconnect(client);
 8006e8c:	68f8      	ldr	r0, [r7, #12]
 8006e8e:	f011 fc59 	bl	8018744 <mqtt_disconnect>
		init_mqtt();
 8006e92:	f000 fb31 	bl	80074f8 <init_mqtt>
}
 8006e96:	bf00      	nop
 8006e98:	3718      	adds	r7, #24
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}
 8006e9e:	bf00      	nop
 8006ea0:	0802b0a8 	.word	0x0802b0a8
 8006ea4:	08006aa1 	.word	0x08006aa1
 8006ea8:	080069cd 	.word	0x080069cd
 8006eac:	08006ccd 	.word	0x08006ccd
 8006eb0:	20014134 	.word	0x20014134
 8006eb4:	2000004c 	.word	0x2000004c
 8006eb8:	0802b0dc 	.word	0x0802b0dc
 8006ebc:	20014224 	.word	0x20014224
 8006ec0:	0802b0fc 	.word	0x0802b0fc
 8006ec4:	20013e30 	.word	0x20013e30
 8006ec8:	200140e4 	.word	0x200140e4
 8006ecc:	0802b11c 	.word	0x0802b11c
 8006ed0:	20013fa4 	.word	0x20013fa4
 8006ed4:	0802b13c 	.word	0x0802b13c
 8006ed8:	20014184 	.word	0x20014184
 8006edc:	0802b160 	.word	0x0802b160
 8006ee0:	20014044 	.word	0x20014044
 8006ee4:	0802b184 	.word	0x0802b184
 8006ee8:	0802b1a4 	.word	0x0802b1a4
 8006eec:	20013e08 	.word	0x20013e08

08006ef0 <connect_mqtt>:

void connect_mqtt(mqtt_client_t *client)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b086      	sub	sp, #24
 8006ef4:	af02      	add	r7, sp, #8
 8006ef6:	6078      	str	r0, [r7, #4]
	err_t err;
	err = mqtt_client_connect(client, &ip_addr, mqtt_port, mqtt_connection_cb, 0, &ci);
 8006ef8:	4b12      	ldr	r3, [pc, #72]	; (8006f44 <connect_mqtt+0x54>)
 8006efa:	881a      	ldrh	r2, [r3, #0]
 8006efc:	4b12      	ldr	r3, [pc, #72]	; (8006f48 <connect_mqtt+0x58>)
 8006efe:	9301      	str	r3, [sp, #4]
 8006f00:	2300      	movs	r3, #0
 8006f02:	9300      	str	r3, [sp, #0]
 8006f04:	4b11      	ldr	r3, [pc, #68]	; (8006f4c <connect_mqtt+0x5c>)
 8006f06:	4912      	ldr	r1, [pc, #72]	; (8006f50 <connect_mqtt+0x60>)
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f011 f99b 	bl	8018244 <mqtt_client_connect>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	73fb      	strb	r3, [r7, #15]
	if (err != ERR_OK)
 8006f12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d009      	beq.n	8006f2e <connect_mqtt+0x3e>
	{
		mqtt_status = false;
 8006f1a:	4b0e      	ldr	r3, [pc, #56]	; (8006f54 <connect_mqtt+0x64>)
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	701a      	strb	r2, [r3, #0]
		DEBUG_MQTT("mqtt_connect return %d\n", err);
 8006f20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f24:	4619      	mov	r1, r3
 8006f26:	480c      	ldr	r0, [pc, #48]	; (8006f58 <connect_mqtt+0x68>)
 8006f28:	f01f fcd0 	bl	80268cc <iprintf>
	else
	{
		mqtt_status = true;
		DEBUG_MQTT("client ok\n");
	}
}
 8006f2c:	e005      	b.n	8006f3a <connect_mqtt+0x4a>
		mqtt_status = true;
 8006f2e:	4b09      	ldr	r3, [pc, #36]	; (8006f54 <connect_mqtt+0x64>)
 8006f30:	2201      	movs	r2, #1
 8006f32:	701a      	strb	r2, [r3, #0]
		DEBUG_MQTT("client ok\n");
 8006f34:	4809      	ldr	r0, [pc, #36]	; (8006f5c <connect_mqtt+0x6c>)
 8006f36:	f01f fd4f 	bl	80269d8 <puts>
}
 8006f3a:	bf00      	nop
 8006f3c:	3710      	adds	r7, #16
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}
 8006f42:	bf00      	nop
 8006f44:	20014368 	.word	0x20014368
 8006f48:	2001432c 	.word	0x2001432c
 8006f4c:	08006d15 	.word	0x08006d15
 8006f50:	20014364 	.word	0x20014364
 8006f54:	20013e08 	.word	0x20013e08
 8006f58:	0802b1d8 	.word	0x0802b1d8
 8006f5c:	0802b1f8 	.word	0x0802b1f8

08006f60 <publish_message_topic>:

void publish_message_topic()
{
 8006f60:	b5b0      	push	{r4, r5, r7, lr}
 8006f62:	b084      	sub	sp, #16
 8006f64:	af04      	add	r7, sp, #16
	/* Publish message to a topic*/
    if (wireless_params->mqtt_type != VAKIO_MQTT)
 8006f66:	4b34      	ldr	r3, [pc, #208]	; (8007038 <publish_message_topic+0xd8>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006f6e:	f083 0301 	eor.w	r3, r3, #1
 8006f72:	b2db      	uxtb	r3, r3
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d02d      	beq.n	8006fd4 <publish_message_topic+0x74>
    {
        	publish_message(workmode_topic, modes_str_s[device->mode]);
 8006f78:	4b30      	ldr	r3, [pc, #192]	; (800703c <publish_message_topic+0xdc>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	7b1b      	ldrb	r3, [r3, #12]
 8006f7e:	461a      	mov	r2, r3
 8006f80:	4b2f      	ldr	r3, [pc, #188]	; (8007040 <publish_message_topic+0xe0>)
 8006f82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f86:	4619      	mov	r1, r3
 8006f88:	482e      	ldr	r0, [pc, #184]	; (8007044 <publish_message_topic+0xe4>)
 8006f8a:	f7ff fce9 	bl	8006960 <publish_message>
        	publish_message(state_topic, on_off_str_s[device->state]);
 8006f8e:	4b2b      	ldr	r3, [pc, #172]	; (800703c <publish_message_topic+0xdc>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	789b      	ldrb	r3, [r3, #2]
 8006f94:	461a      	mov	r2, r3
 8006f96:	4b2c      	ldr	r3, [pc, #176]	; (8007048 <publish_message_topic+0xe8>)
 8006f98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f9c:	4619      	mov	r1, r3
 8006f9e:	482b      	ldr	r0, [pc, #172]	; (800704c <publish_message_topic+0xec>)
 8006fa0:	f7ff fcde 	bl	8006960 <publish_message>
            sprintf(speeds_str, "%i", device->inflow_speed);
 8006fa4:	4b25      	ldr	r3, [pc, #148]	; (800703c <publish_message_topic+0xdc>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	7b9b      	ldrb	r3, [r3, #14]
 8006faa:	461a      	mov	r2, r3
 8006fac:	4928      	ldr	r1, [pc, #160]	; (8007050 <publish_message_topic+0xf0>)
 8006fae:	4829      	ldr	r0, [pc, #164]	; (8007054 <publish_message_topic+0xf4>)
 8006fb0:	f01f fd70 	bl	8026a94 <siprintf>
            publish_message(speed_topic, speeds_str);
 8006fb4:	4927      	ldr	r1, [pc, #156]	; (8007054 <publish_message_topic+0xf4>)
 8006fb6:	4828      	ldr	r0, [pc, #160]	; (8007058 <publish_message_topic+0xf8>)
 8006fb8:	f7ff fcd2 	bl	8006960 <publish_message>
            sprintf(temp_str, "%i", device->temp_limit);
 8006fbc:	4b1f      	ldr	r3, [pc, #124]	; (800703c <publish_message_topic+0xdc>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	7e1b      	ldrb	r3, [r3, #24]
 8006fc2:	461a      	mov	r2, r3
 8006fc4:	4922      	ldr	r1, [pc, #136]	; (8007050 <publish_message_topic+0xf0>)
 8006fc6:	4825      	ldr	r0, [pc, #148]	; (800705c <publish_message_topic+0xfc>)
 8006fc8:	f01f fd64 	bl	8026a94 <siprintf>
            publish_message(temp_limit_topic, temp_str);
 8006fcc:	4923      	ldr	r1, [pc, #140]	; (800705c <publish_message_topic+0xfc>)
 8006fce:	4824      	ldr	r0, [pc, #144]	; (8007060 <publish_message_topic+0x100>)
 8006fd0:	f7ff fcc6 	bl	8006960 <publish_message>
    }
        sprintf(gnetif_str, "%x:%x:%x:%x:%x:%x", gnetif.hwaddr[0], gnetif.hwaddr[1], gnetif.hwaddr[2], gnetif.hwaddr[3], gnetif.hwaddr[4], gnetif.hwaddr[5]);
 8006fd4:	4b23      	ldr	r3, [pc, #140]	; (8007064 <publish_message_topic+0x104>)
 8006fd6:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8006fda:	461c      	mov	r4, r3
 8006fdc:	4b21      	ldr	r3, [pc, #132]	; (8007064 <publish_message_topic+0x104>)
 8006fde:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8006fe2:	461d      	mov	r5, r3
 8006fe4:	4b1f      	ldr	r3, [pc, #124]	; (8007064 <publish_message_topic+0x104>)
 8006fe6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006fea:	461a      	mov	r2, r3
 8006fec:	4b1d      	ldr	r3, [pc, #116]	; (8007064 <publish_message_topic+0x104>)
 8006fee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006ff2:	4619      	mov	r1, r3
 8006ff4:	4b1b      	ldr	r3, [pc, #108]	; (8007064 <publish_message_topic+0x104>)
 8006ff6:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	4b19      	ldr	r3, [pc, #100]	; (8007064 <publish_message_topic+0x104>)
 8006ffe:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007002:	9303      	str	r3, [sp, #12]
 8007004:	9002      	str	r0, [sp, #8]
 8007006:	9101      	str	r1, [sp, #4]
 8007008:	9200      	str	r2, [sp, #0]
 800700a:	462b      	mov	r3, r5
 800700c:	4622      	mov	r2, r4
 800700e:	4916      	ldr	r1, [pc, #88]	; (8007068 <publish_message_topic+0x108>)
 8007010:	4816      	ldr	r0, [pc, #88]	; (800706c <publish_message_topic+0x10c>)
 8007012:	f01f fd3f 	bl	8026a94 <siprintf>
        publish_auth(VERSION, gnetif_str, SERIES, SUBTYPE, XTAL_FREQ);
 8007016:	4b16      	ldr	r3, [pc, #88]	; (8007070 <publish_message_topic+0x110>)
 8007018:	9300      	str	r3, [sp, #0]
 800701a:	4b16      	ldr	r3, [pc, #88]	; (8007074 <publish_message_topic+0x114>)
 800701c:	4a16      	ldr	r2, [pc, #88]	; (8007078 <publish_message_topic+0x118>)
 800701e:	4913      	ldr	r1, [pc, #76]	; (800706c <publish_message_topic+0x10c>)
 8007020:	4816      	ldr	r0, [pc, #88]	; (800707c <publish_message_topic+0x11c>)
 8007022:	f000 fa77 	bl	8007514 <publish_auth>
        publish_capabilities();
 8007026:	f000 fabb 	bl	80075a0 <publish_capabilities>
        publish_settings();
 800702a:	f000 fb0b 	bl	8007644 <publish_settings>
        publish_errors();
 800702e:	f000 fb2f 	bl	8007690 <publish_errors>
}
 8007032:	bf00      	nop
 8007034:	46bd      	mov	sp, r7
 8007036:	bdb0      	pop	{r4, r5, r7, pc}
 8007038:	20013e30 	.word	0x20013e30
 800703c:	20013e2c 	.word	0x20013e2c
 8007040:	10000014 	.word	0x10000014
 8007044:	20014184 	.word	0x20014184
 8007048:	1000000c 	.word	0x1000000c
 800704c:	20014044 	.word	0x20014044
 8007050:	0802b208 	.word	0x0802b208
 8007054:	20014360 	.word	0x20014360
 8007058:	200140e4 	.word	0x200140e4
 800705c:	20014370 	.word	0x20014370
 8007060:	20013fa4 	.word	0x20013fa4
 8007064:	200149f0 	.word	0x200149f0
 8007068:	0802b20c 	.word	0x0802b20c
 800706c:	20014348 	.word	0x20014348
 8007070:	0802b238 	.word	0x0802b238
 8007074:	0802b220 	.word	0x0802b220
 8007078:	0802b228 	.word	0x0802b228
 800707c:	0802b230 	.word	0x0802b230

08007080 <start_mqtt>:

void start_mqtt()
{
 8007080:	b580      	push	{r7, lr}
 8007082:	af00      	add	r7, sp, #0
	if(netif_is_link_up(&gnetif))
 8007084:	4b13      	ldr	r3, [pc, #76]	; (80070d4 <start_mqtt+0x54>)
 8007086:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800708a:	089b      	lsrs	r3, r3, #2
 800708c:	f003 0301 	and.w	r3, r3, #1
 8007090:	b2db      	uxtb	r3, r3
 8007092:	2b00      	cmp	r3, #0
 8007094:	d01b      	beq.n	80070ce <start_mqtt+0x4e>
	{
		if(!mqtt_status)
 8007096:	4b10      	ldr	r3, [pc, #64]	; (80070d8 <start_mqtt+0x58>)
 8007098:	781b      	ldrb	r3, [r3, #0]
 800709a:	f083 0301 	eor.w	r3, r3, #1
 800709e:	b2db      	uxtb	r3, r3
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d009      	beq.n	80070b8 <start_mqtt+0x38>
		{
			connect_mqtt(client);
 80070a4:	4b0d      	ldr	r3, [pc, #52]	; (80070dc <start_mqtt+0x5c>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4618      	mov	r0, r3
 80070aa:	f7ff ff21 	bl	8006ef0 <connect_mqtt>
			osDelay(3000);
 80070ae:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80070b2:	f00a fe72 	bl	8011d9a <osDelay>
				publish_message_topic();
			}
			send_server();
		}
	}
}
 80070b6:	e00a      	b.n	80070ce <start_mqtt+0x4e>
			if(sub_request_cb)
 80070b8:	4b09      	ldr	r3, [pc, #36]	; (80070e0 <start_mqtt+0x60>)
 80070ba:	781b      	ldrb	r3, [r3, #0]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d004      	beq.n	80070ca <start_mqtt+0x4a>
				sub_request_cb = false;
 80070c0:	4b07      	ldr	r3, [pc, #28]	; (80070e0 <start_mqtt+0x60>)
 80070c2:	2200      	movs	r2, #0
 80070c4:	701a      	strb	r2, [r3, #0]
				publish_message_topic();
 80070c6:	f7ff ff4b 	bl	8006f60 <publish_message_topic>
			send_server();
 80070ca:	f000 fe0f 	bl	8007cec <send_server>
}
 80070ce:	bf00      	nop
 80070d0:	bd80      	pop	{r7, pc}
 80070d2:	bf00      	nop
 80070d4:	200149f0 	.word	0x200149f0
 80070d8:	20013e08 	.word	0x20013e08
 80070dc:	2001436c 	.word	0x2001436c
 80070e0:	2000004d 	.word	0x2000004d

080070e4 <update_mqtt_parameters>:

void update_mqtt_parameters(char *host, int port, char *username, char *password, char *client_id)
{
 80070e4:	b590      	push	{r4, r7, lr}
 80070e6:	b08f      	sub	sp, #60	; 0x3c
 80070e8:	af02      	add	r7, sp, #8
 80070ea:	60f8      	str	r0, [r7, #12]
 80070ec:	60b9      	str	r1, [r7, #8]
 80070ee:	607a      	str	r2, [r7, #4]
 80070f0:	603b      	str	r3, [r7, #0]
	memset(&ci, 0, sizeof(ci));
 80070f2:	221c      	movs	r2, #28
 80070f4:	2100      	movs	r1, #0
 80070f6:	485a      	ldr	r0, [pc, #360]	; (8007260 <update_mqtt_parameters+0x17c>)
 80070f8:	f01e fd3c 	bl	8025b74 <memset>
	char _host[16];
	memcpy(_host, host, 16);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	f107 0418 	add.w	r4, r7, #24
 8007102:	6818      	ldr	r0, [r3, #0]
 8007104:	6859      	ldr	r1, [r3, #4]
 8007106:	689a      	ldr	r2, [r3, #8]
 8007108:	68db      	ldr	r3, [r3, #12]
 800710a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
	char str[4];
	char sep[4]=".";
 800710c:	232e      	movs	r3, #46	; 0x2e
 800710e:	613b      	str	r3, [r7, #16]
	char *istr;
    istr = strtok (_host,sep);
 8007110:	f107 0210 	add.w	r2, r7, #16
 8007114:	f107 0318 	add.w	r3, r7, #24
 8007118:	4611      	mov	r1, r2
 800711a:	4618      	mov	r0, r3
 800711c:	f020 fbb2 	bl	8027884 <strtok>
 8007120:	62f8      	str	r0, [r7, #44]	; 0x2c
    uint8_t i = 0;
 8007122:	2300      	movs	r3, #0
 8007124:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    while (istr != NULL)
 8007128:	e016      	b.n	8007158 <update_mqtt_parameters+0x74>
    {
	    str[i] = atoi(istr);
 800712a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800712c:	f01e fca0 	bl	8025a70 <atoi>
 8007130:	4602      	mov	r2, r0
 8007132:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007136:	b2d2      	uxtb	r2, r2
 8007138:	3330      	adds	r3, #48	; 0x30
 800713a:	443b      	add	r3, r7
 800713c:	f803 2c1c 	strb.w	r2, [r3, #-28]
	    i++;
 8007140:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007144:	3301      	adds	r3, #1
 8007146:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	    istr = strtok(NULL, sep);
 800714a:	f107 0310 	add.w	r3, r7, #16
 800714e:	4619      	mov	r1, r3
 8007150:	2000      	movs	r0, #0
 8007152:	f020 fb97 	bl	8027884 <strtok>
 8007156:	62f8      	str	r0, [r7, #44]	; 0x2c
    while (istr != NULL)
 8007158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800715a:	2b00      	cmp	r3, #0
 800715c:	d1e5      	bne.n	800712a <update_mqtt_parameters+0x46>
    }
    IP4_ADDR(&ip_addr, str[0], str[1], str[2], str[3]);
 800715e:	7d3b      	ldrb	r3, [r7, #20]
 8007160:	061a      	lsls	r2, r3, #24
 8007162:	7d7b      	ldrb	r3, [r7, #21]
 8007164:	041b      	lsls	r3, r3, #16
 8007166:	431a      	orrs	r2, r3
 8007168:	7dbb      	ldrb	r3, [r7, #22]
 800716a:	021b      	lsls	r3, r3, #8
 800716c:	4313      	orrs	r3, r2
 800716e:	7dfa      	ldrb	r2, [r7, #23]
 8007170:	4313      	orrs	r3, r2
 8007172:	061a      	lsls	r2, r3, #24
 8007174:	7d3b      	ldrb	r3, [r7, #20]
 8007176:	0619      	lsls	r1, r3, #24
 8007178:	7d7b      	ldrb	r3, [r7, #21]
 800717a:	041b      	lsls	r3, r3, #16
 800717c:	4319      	orrs	r1, r3
 800717e:	7dbb      	ldrb	r3, [r7, #22]
 8007180:	021b      	lsls	r3, r3, #8
 8007182:	430b      	orrs	r3, r1
 8007184:	7df9      	ldrb	r1, [r7, #23]
 8007186:	430b      	orrs	r3, r1
 8007188:	021b      	lsls	r3, r3, #8
 800718a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800718e:	431a      	orrs	r2, r3
 8007190:	7d3b      	ldrb	r3, [r7, #20]
 8007192:	0619      	lsls	r1, r3, #24
 8007194:	7d7b      	ldrb	r3, [r7, #21]
 8007196:	041b      	lsls	r3, r3, #16
 8007198:	4319      	orrs	r1, r3
 800719a:	7dbb      	ldrb	r3, [r7, #22]
 800719c:	021b      	lsls	r3, r3, #8
 800719e:	430b      	orrs	r3, r1
 80071a0:	7df9      	ldrb	r1, [r7, #23]
 80071a2:	430b      	orrs	r3, r1
 80071a4:	0a1b      	lsrs	r3, r3, #8
 80071a6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80071aa:	431a      	orrs	r2, r3
 80071ac:	7d3b      	ldrb	r3, [r7, #20]
 80071ae:	0619      	lsls	r1, r3, #24
 80071b0:	7d7b      	ldrb	r3, [r7, #21]
 80071b2:	041b      	lsls	r3, r3, #16
 80071b4:	4319      	orrs	r1, r3
 80071b6:	7dbb      	ldrb	r3, [r7, #22]
 80071b8:	021b      	lsls	r3, r3, #8
 80071ba:	430b      	orrs	r3, r1
 80071bc:	7df9      	ldrb	r1, [r7, #23]
 80071be:	430b      	orrs	r3, r1
 80071c0:	0e1b      	lsrs	r3, r3, #24
 80071c2:	4313      	orrs	r3, r2
 80071c4:	4a27      	ldr	r2, [pc, #156]	; (8007264 <update_mqtt_parameters+0x180>)
 80071c6:	6013      	str	r3, [r2, #0]

	mqtt_port = port;
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	b29a      	uxth	r2, r3
 80071cc:	4b26      	ldr	r3, [pc, #152]	; (8007268 <update_mqtt_parameters+0x184>)
 80071ce:	801a      	strh	r2, [r3, #0]
    ci.client_user = username;
 80071d0:	4a23      	ldr	r2, [pc, #140]	; (8007260 <update_mqtt_parameters+0x17c>)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6053      	str	r3, [r2, #4]
    ci.client_pass = password;
 80071d6:	4a22      	ldr	r2, [pc, #136]	; (8007260 <update_mqtt_parameters+0x17c>)
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	6093      	str	r3, [r2, #8]
    ci.client_id = client_id;
 80071dc:	4a20      	ldr	r2, [pc, #128]	; (8007260 <update_mqtt_parameters+0x17c>)
 80071de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071e0:	6013      	str	r3, [r2, #0]
    ci.keep_alive = 60;
 80071e2:	4b1f      	ldr	r3, [pc, #124]	; (8007260 <update_mqtt_parameters+0x17c>)
 80071e4:	223c      	movs	r2, #60	; 0x3c
 80071e6:	819a      	strh	r2, [r3, #12]
    DEBUG_MQTT("***************UPDATE MQTT***********\n");
 80071e8:	4820      	ldr	r0, [pc, #128]	; (800726c <update_mqtt_parameters+0x188>)
 80071ea:	f01f fbf5 	bl	80269d8 <puts>
    if(wireless_params->mqtt_type)
 80071ee:	4b20      	ldr	r3, [pc, #128]	; (8007270 <update_mqtt_parameters+0x18c>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d003      	beq.n	8007202 <update_mqtt_parameters+0x11e>
    {
    	DEBUG_MQTT("VAKIO mqtt_type\n");
 80071fa:	481e      	ldr	r0, [pc, #120]	; (8007274 <update_mqtt_parameters+0x190>)
 80071fc:	f01f fbec 	bl	80269d8 <puts>
 8007200:	e002      	b.n	8007208 <update_mqtt_parameters+0x124>
    }
    else
    {
    	DEBUG_MQTT("USER mqtt_type\n");
 8007202:	481d      	ldr	r0, [pc, #116]	; (8007278 <update_mqtt_parameters+0x194>)
 8007204:	f01f fbe8 	bl	80269d8 <puts>
    }
    DEBUG_MQTT("host = %i.%i.%i.%i\n", str[0], str[1], str[2], str[3]);
 8007208:	7d3b      	ldrb	r3, [r7, #20]
 800720a:	4619      	mov	r1, r3
 800720c:	7d7b      	ldrb	r3, [r7, #21]
 800720e:	461a      	mov	r2, r3
 8007210:	7dbb      	ldrb	r3, [r7, #22]
 8007212:	4618      	mov	r0, r3
 8007214:	7dfb      	ldrb	r3, [r7, #23]
 8007216:	9300      	str	r3, [sp, #0]
 8007218:	4603      	mov	r3, r0
 800721a:	4818      	ldr	r0, [pc, #96]	; (800727c <update_mqtt_parameters+0x198>)
 800721c:	f01f fb56 	bl	80268cc <iprintf>
    DEBUG_MQTT("login = %s\n", ci.client_user);
 8007220:	4b0f      	ldr	r3, [pc, #60]	; (8007260 <update_mqtt_parameters+0x17c>)
 8007222:	685b      	ldr	r3, [r3, #4]
 8007224:	4619      	mov	r1, r3
 8007226:	4816      	ldr	r0, [pc, #88]	; (8007280 <update_mqtt_parameters+0x19c>)
 8007228:	f01f fb50 	bl	80268cc <iprintf>
    DEBUG_MQTT("password = %s\n", ci.client_pass);
 800722c:	4b0c      	ldr	r3, [pc, #48]	; (8007260 <update_mqtt_parameters+0x17c>)
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	4619      	mov	r1, r3
 8007232:	4814      	ldr	r0, [pc, #80]	; (8007284 <update_mqtt_parameters+0x1a0>)
 8007234:	f01f fb4a 	bl	80268cc <iprintf>
    DEBUG_MQTT("port = %i\n", mqtt_port);
 8007238:	4b0b      	ldr	r3, [pc, #44]	; (8007268 <update_mqtt_parameters+0x184>)
 800723a:	881b      	ldrh	r3, [r3, #0]
 800723c:	4619      	mov	r1, r3
 800723e:	4812      	ldr	r0, [pc, #72]	; (8007288 <update_mqtt_parameters+0x1a4>)
 8007240:	f01f fb44 	bl	80268cc <iprintf>
    DEBUG_MQTT("client_id = %s\n", ci.client_id);
 8007244:	4b06      	ldr	r3, [pc, #24]	; (8007260 <update_mqtt_parameters+0x17c>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4619      	mov	r1, r3
 800724a:	4810      	ldr	r0, [pc, #64]	; (800728c <update_mqtt_parameters+0x1a8>)
 800724c:	f01f fb3e 	bl	80268cc <iprintf>
    DEBUG_MQTT("***********************************\n");
 8007250:	480f      	ldr	r0, [pc, #60]	; (8007290 <update_mqtt_parameters+0x1ac>)
 8007252:	f01f fbc1 	bl	80269d8 <puts>
}
 8007256:	bf00      	nop
 8007258:	3734      	adds	r7, #52	; 0x34
 800725a:	46bd      	mov	sp, r7
 800725c:	bd90      	pop	{r4, r7, pc}
 800725e:	bf00      	nop
 8007260:	2001432c 	.word	0x2001432c
 8007264:	20014364 	.word	0x20014364
 8007268:	20014368 	.word	0x20014368
 800726c:	0802b23c 	.word	0x0802b23c
 8007270:	20013e30 	.word	0x20013e30
 8007274:	0802b268 	.word	0x0802b268
 8007278:	0802b280 	.word	0x0802b280
 800727c:	0802b298 	.word	0x0802b298
 8007280:	0802b2b4 	.word	0x0802b2b4
 8007284:	0802b2c8 	.word	0x0802b2c8
 8007288:	0802b2e0 	.word	0x0802b2e0
 800728c:	0802b2f4 	.word	0x0802b2f4
 8007290:	0802b30c 	.word	0x0802b30c

08007294 <set_mqtt_parameters>:

void set_mqtt_parameters()
{
 8007294:	b590      	push	{r4, r7, lr}
 8007296:	b083      	sub	sp, #12
 8007298:	af02      	add	r7, sp, #8
    // Передаем параметры для подключения в зависимости от выбранного типа mqtt
    if (wireless_params->mqtt_type == VAKIO_MQTT)
 800729a:	4b75      	ldr	r3, [pc, #468]	; (8007470 <set_mqtt_parameters+0x1dc>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d072      	beq.n	800738c <set_mqtt_parameters+0xf8>
    {
        sprintf(wireless_params->vakio_mqtt.client_id, "%s_%s", wireless_params->vakio.device_id, gnetif.hwaddr);
 80072a6:	4b72      	ldr	r3, [pc, #456]	; (8007470 <set_mqtt_parameters+0x1dc>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 80072ae:	4b70      	ldr	r3, [pc, #448]	; (8007470 <set_mqtt_parameters+0x1dc>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f103 0288 	add.w	r2, r3, #136	; 0x88
 80072b6:	4b6f      	ldr	r3, [pc, #444]	; (8007474 <set_mqtt_parameters+0x1e0>)
 80072b8:	496f      	ldr	r1, [pc, #444]	; (8007478 <set_mqtt_parameters+0x1e4>)
 80072ba:	f01f fbeb 	bl	8026a94 <siprintf>
        update_mqtt_parameters(wireless_params->vakio_mqtt.host,
 80072be:	4b6c      	ldr	r3, [pc, #432]	; (8007470 <set_mqtt_parameters+0x1dc>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f103 0068 	add.w	r0, r3, #104	; 0x68
                               wireless_params->vakio_mqtt.port,
 80072c6:	4b6a      	ldr	r3, [pc, #424]	; (8007470 <set_mqtt_parameters+0x1dc>)
 80072c8:	681b      	ldr	r3, [r3, #0]
        update_mqtt_parameters(wireless_params->vakio_mqtt.host,
 80072ca:	6f99      	ldr	r1, [r3, #120]	; 0x78
                               wireless_params->vakio_mqtt.login,
 80072cc:	4b68      	ldr	r3, [pc, #416]	; (8007470 <set_mqtt_parameters+0x1dc>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f103 0244 	add.w	r2, r3, #68	; 0x44
                               wireless_params->vakio_mqtt.password,
 80072d4:	4b66      	ldr	r3, [pc, #408]	; (8007470 <set_mqtt_parameters+0x1dc>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f103 0450 	add.w	r4, r3, #80	; 0x50
                               wireless_params->vakio_mqtt.client_id);
 80072dc:	4b64      	ldr	r3, [pc, #400]	; (8007470 <set_mqtt_parameters+0x1dc>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	335c      	adds	r3, #92	; 0x5c
        update_mqtt_parameters(wireless_params->vakio_mqtt.host,
 80072e2:	9300      	str	r3, [sp, #0]
 80072e4:	4623      	mov	r3, r4
 80072e6:	f7ff fefd 	bl	80070e4 <update_mqtt_parameters>
        DEBUG_MQTT("DEVICE LOGIN %s\n", wireless_params->vakio_mqtt.login);
 80072ea:	4b61      	ldr	r3, [pc, #388]	; (8007470 <set_mqtt_parameters+0x1dc>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	3344      	adds	r3, #68	; 0x44
 80072f0:	4619      	mov	r1, r3
 80072f2:	4862      	ldr	r0, [pc, #392]	; (800747c <set_mqtt_parameters+0x1e8>)
 80072f4:	f01f faea 	bl	80268cc <iprintf>
        DEBUG_MQTT("DEVICE PASSWORD %s\n", wireless_params->vakio_mqtt.password);
 80072f8:	4b5d      	ldr	r3, [pc, #372]	; (8007470 <set_mqtt_parameters+0x1dc>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	3350      	adds	r3, #80	; 0x50
 80072fe:	4619      	mov	r1, r3
 8007300:	485f      	ldr	r0, [pc, #380]	; (8007480 <set_mqtt_parameters+0x1ec>)
 8007302:	f01f fae3 	bl	80268cc <iprintf>
        // Записываем топики для подписки и публикаций
        sprintf(log_pub_topic, "device/%s/%s/VK200/log", wireless_params->vakio.user_id, wireless_params->vakio.device_id);
 8007306:	4b5a      	ldr	r3, [pc, #360]	; (8007470 <set_mqtt_parameters+0x1dc>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f103 0290 	add.w	r2, r3, #144	; 0x90
 800730e:	4b58      	ldr	r3, [pc, #352]	; (8007470 <set_mqtt_parameters+0x1dc>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	3388      	adds	r3, #136	; 0x88
 8007314:	495b      	ldr	r1, [pc, #364]	; (8007484 <set_mqtt_parameters+0x1f0>)
 8007316:	485c      	ldr	r0, [pc, #368]	; (8007488 <set_mqtt_parameters+0x1f4>)
 8007318:	f01f fbbc 	bl	8026a94 <siprintf>
        sprintf(mode_topic, "server/%s/%s/VK200/mode", wireless_params->vakio.user_id, wireless_params->vakio.device_id);
 800731c:	4b54      	ldr	r3, [pc, #336]	; (8007470 <set_mqtt_parameters+0x1dc>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f103 0290 	add.w	r2, r3, #144	; 0x90
 8007324:	4b52      	ldr	r3, [pc, #328]	; (8007470 <set_mqtt_parameters+0x1dc>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	3388      	adds	r3, #136	; 0x88
 800732a:	4958      	ldr	r1, [pc, #352]	; (800748c <set_mqtt_parameters+0x1f8>)
 800732c:	4858      	ldr	r0, [pc, #352]	; (8007490 <set_mqtt_parameters+0x1fc>)
 800732e:	f01f fbb1 	bl	8026a94 <siprintf>
        sprintf(mode_pub_topic, "device/%s/%s/VK200/mode", wireless_params->vakio.user_id, wireless_params->vakio.device_id);
 8007332:	4b4f      	ldr	r3, [pc, #316]	; (8007470 <set_mqtt_parameters+0x1dc>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f103 0290 	add.w	r2, r3, #144	; 0x90
 800733a:	4b4d      	ldr	r3, [pc, #308]	; (8007470 <set_mqtt_parameters+0x1dc>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	3388      	adds	r3, #136	; 0x88
 8007340:	4954      	ldr	r1, [pc, #336]	; (8007494 <set_mqtt_parameters+0x200>)
 8007342:	4855      	ldr	r0, [pc, #340]	; (8007498 <set_mqtt_parameters+0x204>)
 8007344:	f01f fba6 	bl	8026a94 <siprintf>
        sprintf(system_topic, "server/%s/%s/VK200/system", wireless_params->vakio.user_id, wireless_params->vakio.device_id);
 8007348:	4b49      	ldr	r3, [pc, #292]	; (8007470 <set_mqtt_parameters+0x1dc>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f103 0290 	add.w	r2, r3, #144	; 0x90
 8007350:	4b47      	ldr	r3, [pc, #284]	; (8007470 <set_mqtt_parameters+0x1dc>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	3388      	adds	r3, #136	; 0x88
 8007356:	4951      	ldr	r1, [pc, #324]	; (800749c <set_mqtt_parameters+0x208>)
 8007358:	4851      	ldr	r0, [pc, #324]	; (80074a0 <set_mqtt_parameters+0x20c>)
 800735a:	f01f fb9b 	bl	8026a94 <siprintf>
        sprintf(system_pub_topic, "device/%s/%s/VK200/system", wireless_params->vakio.user_id, wireless_params->vakio.device_id);
 800735e:	4b44      	ldr	r3, [pc, #272]	; (8007470 <set_mqtt_parameters+0x1dc>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f103 0290 	add.w	r2, r3, #144	; 0x90
 8007366:	4b42      	ldr	r3, [pc, #264]	; (8007470 <set_mqtt_parameters+0x1dc>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	3388      	adds	r3, #136	; 0x88
 800736c:	494d      	ldr	r1, [pc, #308]	; (80074a4 <set_mqtt_parameters+0x210>)
 800736e:	484e      	ldr	r0, [pc, #312]	; (80074a8 <set_mqtt_parameters+0x214>)
 8007370:	f01f fb90 	bl	8026a94 <siprintf>
        sprintf(temp_log_pub_topic, "device/%s/%s/VK200/temp", wireless_params->vakio.user_id, wireless_params->vakio.device_id);
 8007374:	4b3e      	ldr	r3, [pc, #248]	; (8007470 <set_mqtt_parameters+0x1dc>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f103 0290 	add.w	r2, r3, #144	; 0x90
 800737c:	4b3c      	ldr	r3, [pc, #240]	; (8007470 <set_mqtt_parameters+0x1dc>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	3388      	adds	r3, #136	; 0x88
 8007382:	494a      	ldr	r1, [pc, #296]	; (80074ac <set_mqtt_parameters+0x218>)
 8007384:	484a      	ldr	r0, [pc, #296]	; (80074b0 <set_mqtt_parameters+0x21c>)
 8007386:	f01f fb85 	bl	8026a94 <siprintf>
 800738a:	e05d      	b.n	8007448 <set_mqtt_parameters+0x1b4>
    }
    else
    {
        update_mqtt_parameters(wireless_params->user_mqtt.host,
 800738c:	4b38      	ldr	r3, [pc, #224]	; (8007470 <set_mqtt_parameters+0x1dc>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f103 0024 	add.w	r0, r3, #36	; 0x24
                               wireless_params->user_mqtt.port,
 8007394:	4b36      	ldr	r3, [pc, #216]	; (8007470 <set_mqtt_parameters+0x1dc>)
 8007396:	681b      	ldr	r3, [r3, #0]
        update_mqtt_parameters(wireless_params->user_mqtt.host,
 8007398:	6b59      	ldr	r1, [r3, #52]	; 0x34
                               wireless_params->user_mqtt.login,
 800739a:	4b35      	ldr	r3, [pc, #212]	; (8007470 <set_mqtt_parameters+0x1dc>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	461c      	mov	r4, r3
                               wireless_params->user_mqtt.password,
 80073a0:	4b33      	ldr	r3, [pc, #204]	; (8007470 <set_mqtt_parameters+0x1dc>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f103 020c 	add.w	r2, r3, #12
                               wireless_params->user_mqtt.client_id);
 80073a8:	4b31      	ldr	r3, [pc, #196]	; (8007470 <set_mqtt_parameters+0x1dc>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	3318      	adds	r3, #24
        update_mqtt_parameters(wireless_params->user_mqtt.host,
 80073ae:	9300      	str	r3, [sp, #0]
 80073b0:	4613      	mov	r3, r2
 80073b2:	4622      	mov	r2, r4
 80073b4:	f7ff fe96 	bl	80070e4 <update_mqtt_parameters>
        // Записываем топики для подписки и публикаций
        sprintf(log_pub_topic, "device/%s/VK200/log", wireless_params->user_mqtt.topic);
 80073b8:	4b2d      	ldr	r3, [pc, #180]	; (8007470 <set_mqtt_parameters+0x1dc>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	3338      	adds	r3, #56	; 0x38
 80073be:	461a      	mov	r2, r3
 80073c0:	493c      	ldr	r1, [pc, #240]	; (80074b4 <set_mqtt_parameters+0x220>)
 80073c2:	4831      	ldr	r0, [pc, #196]	; (8007488 <set_mqtt_parameters+0x1f4>)
 80073c4:	f01f fb66 	bl	8026a94 <siprintf>
        sprintf(mode_topic, "server/%s/VK200/mode", wireless_params->user_mqtt.topic);
 80073c8:	4b29      	ldr	r3, [pc, #164]	; (8007470 <set_mqtt_parameters+0x1dc>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	3338      	adds	r3, #56	; 0x38
 80073ce:	461a      	mov	r2, r3
 80073d0:	4939      	ldr	r1, [pc, #228]	; (80074b8 <set_mqtt_parameters+0x224>)
 80073d2:	482f      	ldr	r0, [pc, #188]	; (8007490 <set_mqtt_parameters+0x1fc>)
 80073d4:	f01f fb5e 	bl	8026a94 <siprintf>
        sprintf(mode_pub_topic, "device/%s/VK200/mode", wireless_params->user_mqtt.topic);
 80073d8:	4b25      	ldr	r3, [pc, #148]	; (8007470 <set_mqtt_parameters+0x1dc>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	3338      	adds	r3, #56	; 0x38
 80073de:	461a      	mov	r2, r3
 80073e0:	4936      	ldr	r1, [pc, #216]	; (80074bc <set_mqtt_parameters+0x228>)
 80073e2:	482d      	ldr	r0, [pc, #180]	; (8007498 <set_mqtt_parameters+0x204>)
 80073e4:	f01f fb56 	bl	8026a94 <siprintf>
        sprintf(system_topic, "server/%s/VK200/system", wireless_params->user_mqtt.topic);
 80073e8:	4b21      	ldr	r3, [pc, #132]	; (8007470 <set_mqtt_parameters+0x1dc>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	3338      	adds	r3, #56	; 0x38
 80073ee:	461a      	mov	r2, r3
 80073f0:	4933      	ldr	r1, [pc, #204]	; (80074c0 <set_mqtt_parameters+0x22c>)
 80073f2:	482b      	ldr	r0, [pc, #172]	; (80074a0 <set_mqtt_parameters+0x20c>)
 80073f4:	f01f fb4e 	bl	8026a94 <siprintf>
        sprintf(system_pub_topic, "device/%s/VK200/system", wireless_params->user_mqtt.topic);
 80073f8:	4b1d      	ldr	r3, [pc, #116]	; (8007470 <set_mqtt_parameters+0x1dc>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	3338      	adds	r3, #56	; 0x38
 80073fe:	461a      	mov	r2, r3
 8007400:	4930      	ldr	r1, [pc, #192]	; (80074c4 <set_mqtt_parameters+0x230>)
 8007402:	4829      	ldr	r0, [pc, #164]	; (80074a8 <set_mqtt_parameters+0x214>)
 8007404:	f01f fb46 	bl	8026a94 <siprintf>
        sprintf(workmode_topic, "%s/workmode", wireless_params->user_mqtt.topic);     // изменения
 8007408:	4b19      	ldr	r3, [pc, #100]	; (8007470 <set_mqtt_parameters+0x1dc>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	3338      	adds	r3, #56	; 0x38
 800740e:	461a      	mov	r2, r3
 8007410:	492d      	ldr	r1, [pc, #180]	; (80074c8 <set_mqtt_parameters+0x234>)
 8007412:	482e      	ldr	r0, [pc, #184]	; (80074cc <set_mqtt_parameters+0x238>)
 8007414:	f01f fb3e 	bl	8026a94 <siprintf>
        sprintf(speed_topic, "%s/speed", wireless_params->user_mqtt.topic);           // изменения
 8007418:	4b15      	ldr	r3, [pc, #84]	; (8007470 <set_mqtt_parameters+0x1dc>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	3338      	adds	r3, #56	; 0x38
 800741e:	461a      	mov	r2, r3
 8007420:	492b      	ldr	r1, [pc, #172]	; (80074d0 <set_mqtt_parameters+0x23c>)
 8007422:	482c      	ldr	r0, [pc, #176]	; (80074d4 <set_mqtt_parameters+0x240>)
 8007424:	f01f fb36 	bl	8026a94 <siprintf>
        sprintf(temp_limit_topic, "%s/temp_limit", wireless_params->user_mqtt.topic); // изменения
 8007428:	4b11      	ldr	r3, [pc, #68]	; (8007470 <set_mqtt_parameters+0x1dc>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	3338      	adds	r3, #56	; 0x38
 800742e:	461a      	mov	r2, r3
 8007430:	4929      	ldr	r1, [pc, #164]	; (80074d8 <set_mqtt_parameters+0x244>)
 8007432:	482a      	ldr	r0, [pc, #168]	; (80074dc <set_mqtt_parameters+0x248>)
 8007434:	f01f fb2e 	bl	8026a94 <siprintf>
        sprintf(state_topic, "%s/state", wireless_params->user_mqtt.topic);           // изменения
 8007438:	4b0d      	ldr	r3, [pc, #52]	; (8007470 <set_mqtt_parameters+0x1dc>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	3338      	adds	r3, #56	; 0x38
 800743e:	461a      	mov	r2, r3
 8007440:	4927      	ldr	r1, [pc, #156]	; (80074e0 <set_mqtt_parameters+0x24c>)
 8007442:	4828      	ldr	r0, [pc, #160]	; (80074e4 <set_mqtt_parameters+0x250>)
 8007444:	f01f fb26 	bl	8026a94 <siprintf>
    }
    DEBUG_MQTT("mode_topic %s\n", mode_topic);
 8007448:	4911      	ldr	r1, [pc, #68]	; (8007490 <set_mqtt_parameters+0x1fc>)
 800744a:	4827      	ldr	r0, [pc, #156]	; (80074e8 <set_mqtt_parameters+0x254>)
 800744c:	f01f fa3e 	bl	80268cc <iprintf>
    DEBUG_MQTT("mode_pub_topic %s\n", mode_pub_topic);
 8007450:	4911      	ldr	r1, [pc, #68]	; (8007498 <set_mqtt_parameters+0x204>)
 8007452:	4826      	ldr	r0, [pc, #152]	; (80074ec <set_mqtt_parameters+0x258>)
 8007454:	f01f fa3a 	bl	80268cc <iprintf>
    DEBUG_MQTT("system_topic %s\n", system_topic);
 8007458:	4911      	ldr	r1, [pc, #68]	; (80074a0 <set_mqtt_parameters+0x20c>)
 800745a:	4825      	ldr	r0, [pc, #148]	; (80074f0 <set_mqtt_parameters+0x25c>)
 800745c:	f01f fa36 	bl	80268cc <iprintf>
    DEBUG_MQTT("system_pub_topic %s\n", system_pub_topic);
 8007460:	4911      	ldr	r1, [pc, #68]	; (80074a8 <set_mqtt_parameters+0x214>)
 8007462:	4824      	ldr	r0, [pc, #144]	; (80074f4 <set_mqtt_parameters+0x260>)
 8007464:	f01f fa32 	bl	80268cc <iprintf>
}
 8007468:	bf00      	nop
 800746a:	3704      	adds	r7, #4
 800746c:	46bd      	mov	sp, r7
 800746e:	bd90      	pop	{r4, r7, pc}
 8007470:	20013e30 	.word	0x20013e30
 8007474:	20014a1a 	.word	0x20014a1a
 8007478:	0802b338 	.word	0x0802b338
 800747c:	0802b340 	.word	0x0802b340
 8007480:	0802b358 	.word	0x0802b358
 8007484:	0802b374 	.word	0x0802b374
 8007488:	20014274 	.word	0x20014274
 800748c:	0802b38c 	.word	0x0802b38c
 8007490:	20014134 	.word	0x20014134
 8007494:	0802b3a4 	.word	0x0802b3a4
 8007498:	200141d4 	.word	0x200141d4
 800749c:	0802b3bc 	.word	0x0802b3bc
 80074a0:	20014224 	.word	0x20014224
 80074a4:	0802b3d8 	.word	0x0802b3d8
 80074a8:	20013ff4 	.word	0x20013ff4
 80074ac:	0802b3f4 	.word	0x0802b3f4
 80074b0:	20014094 	.word	0x20014094
 80074b4:	0802b40c 	.word	0x0802b40c
 80074b8:	0802b420 	.word	0x0802b420
 80074bc:	0802b438 	.word	0x0802b438
 80074c0:	0802b450 	.word	0x0802b450
 80074c4:	0802b468 	.word	0x0802b468
 80074c8:	0802b480 	.word	0x0802b480
 80074cc:	20014184 	.word	0x20014184
 80074d0:	0802b48c 	.word	0x0802b48c
 80074d4:	200140e4 	.word	0x200140e4
 80074d8:	0802b498 	.word	0x0802b498
 80074dc:	20013fa4 	.word	0x20013fa4
 80074e0:	0802b4a8 	.word	0x0802b4a8
 80074e4:	20014044 	.word	0x20014044
 80074e8:	0802b4b4 	.word	0x0802b4b4
 80074ec:	0802b4cc 	.word	0x0802b4cc
 80074f0:	0802b4e8 	.word	0x0802b4e8
 80074f4:	0802b500 	.word	0x0802b500

080074f8 <init_mqtt>:
	strcpy(wireless_params->user_mqtt.client_id, "STM32\0");
	strcpy(wireless_params->user_mqtt.topic, "VAKIO");
}

void init_mqtt()
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	af00      	add	r7, sp, #0
	client = mqtt_client_new();
 80074fc:	f010 fe98 	bl	8018230 <mqtt_client_new>
 8007500:	4603      	mov	r3, r0
 8007502:	4a03      	ldr	r2, [pc, #12]	; (8007510 <init_mqtt+0x18>)
 8007504:	6013      	str	r3, [r2, #0]
//	set_user_test();
	set_mqtt_parameters();
 8007506:	f7ff fec5 	bl	8007294 <set_mqtt_parameters>
}
 800750a:	bf00      	nop
 800750c:	bd80      	pop	{r7, pc}
 800750e:	bf00      	nop
 8007510:	2001436c 	.word	0x2001436c

08007514 <publish_auth>:
#include "mqtt_objects.h"
#include <stdlib.h>
#include "cmsis_os.h"

void publish_auth(char *version, char *mac_address, char *series, char *subtype, char *xtal_freq)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b08a      	sub	sp, #40	; 0x28
 8007518:	af04      	add	r7, sp, #16
 800751a:	60f8      	str	r0, [r7, #12]
 800751c:	60b9      	str	r1, [r7, #8]
 800751e:	607a      	str	r2, [r7, #4]
 8007520:	603b      	str	r3, [r7, #0]
    char *message = malloc(256);
 8007522:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007526:	f01e fadd 	bl	8025ae4 <malloc>
 800752a:	4603      	mov	r3, r0
 800752c:	617b      	str	r3, [r7, #20]
    while (message == NULL)
 800752e:	e008      	b.n	8007542 <publish_auth+0x2e>
    {
    	osDelay(10);
 8007530:	200a      	movs	r0, #10
 8007532:	f00a fc32 	bl	8011d9a <osDelay>
        message = malloc(256);
 8007536:	f44f 7080 	mov.w	r0, #256	; 0x100
 800753a:	f01e fad3 	bl	8025ae4 <malloc>
 800753e:	4603      	mov	r3, r0
 8007540:	617b      	str	r3, [r7, #20]
    while (message == NULL)
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d0f3      	beq.n	8007530 <publish_auth+0x1c>
    }
    sprintf(message, "{\"type\": \"auth\", \"auth\":{\"device_mac\":\"%s\",\"version\":\"%s\"}, \"device_subtype\":{\"series\":\"%s\",\"subtype\":\"%s\",\"xtal_freq\":\"%s\"}}", mac_address, version, series, subtype, xtal_freq);
 8007548:	6a3b      	ldr	r3, [r7, #32]
 800754a:	9302      	str	r3, [sp, #8]
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	9301      	str	r3, [sp, #4]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	9300      	str	r3, [sp, #0]
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	68ba      	ldr	r2, [r7, #8]
 8007558:	490c      	ldr	r1, [pc, #48]	; (800758c <publish_auth+0x78>)
 800755a:	6978      	ldr	r0, [r7, #20]
 800755c:	f01f fa9a 	bl	8026a94 <siprintf>
    DEBUG_MQTT("AUTH\n");
 8007560:	480b      	ldr	r0, [pc, #44]	; (8007590 <publish_auth+0x7c>)
 8007562:	f01f fa39 	bl	80269d8 <puts>
    DEBUG_MQTT("%s\n", message);
 8007566:	6979      	ldr	r1, [r7, #20]
 8007568:	480a      	ldr	r0, [pc, #40]	; (8007594 <publish_auth+0x80>)
 800756a:	f01f f9af 	bl	80268cc <iprintf>
    DEBUG_MQTT("system_pub_topic %s\n", system_pub_topic);
 800756e:	490a      	ldr	r1, [pc, #40]	; (8007598 <publish_auth+0x84>)
 8007570:	480a      	ldr	r0, [pc, #40]	; (800759c <publish_auth+0x88>)
 8007572:	f01f f9ab 	bl	80268cc <iprintf>
    publish_message(system_pub_topic, message);
 8007576:	6979      	ldr	r1, [r7, #20]
 8007578:	4807      	ldr	r0, [pc, #28]	; (8007598 <publish_auth+0x84>)
 800757a:	f7ff f9f1 	bl	8006960 <publish_message>
    free(message);
 800757e:	6978      	ldr	r0, [r7, #20]
 8007580:	f01e fab8 	bl	8025af4 <free>
}
 8007584:	bf00      	nop
 8007586:	3718      	adds	r7, #24
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}
 800758c:	0802b544 	.word	0x0802b544
 8007590:	0802b5c4 	.word	0x0802b5c4
 8007594:	0802b5d0 	.word	0x0802b5d0
 8007598:	20013ff4 	.word	0x20013ff4
 800759c:	0802b5dc 	.word	0x0802b5dc

080075a0 <publish_capabilities>:


char *on_off[2] = {"off", "on"};

void publish_capabilities()
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b082      	sub	sp, #8
 80075a4:	af00      	add	r7, sp, #0
    char *capabilities = malloc(300);
 80075a6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80075aa:	f01e fa9b 	bl	8025ae4 <malloc>
 80075ae:	4603      	mov	r3, r0
 80075b0:	607b      	str	r3, [r7, #4]
    while (capabilities == NULL)
 80075b2:	e008      	b.n	80075c6 <publish_capabilities+0x26>
    {
        vTaskDelay(10);
 80075b4:	200a      	movs	r0, #10
 80075b6:	f00c fab9 	bl	8013b2c <vTaskDelay>
        capabilities = malloc(300);
 80075ba:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80075be:	f01e fa91 	bl	8025ae4 <malloc>
 80075c2:	4603      	mov	r3, r0
 80075c4:	607b      	str	r3, [r7, #4]
    while (capabilities == NULL)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d0f3      	beq.n	80075b4 <publish_capabilities+0x14>
    }
    get_str_capabiities(capabilities);
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f000 f8ab 	bl	8007728 <get_str_capabiities>
    publish_message(mode_pub_topic, capabilities);
 80075d2:	6879      	ldr	r1, [r7, #4]
 80075d4:	4804      	ldr	r0, [pc, #16]	; (80075e8 <publish_capabilities+0x48>)
 80075d6:	f7ff f9c3 	bl	8006960 <publish_message>
    free(capabilities);
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f01e fa8a 	bl	8025af4 <free>
}
 80075e0:	bf00      	nop
 80075e2:	3708      	adds	r7, #8
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}
 80075e8:	200141d4 	.word	0x200141d4

080075ec <publish_system>:
    publish_message(temp_log_pub_topic, temp_log);
    free(temp_log);
}

void publish_system()
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b082      	sub	sp, #8
 80075f0:	af00      	add	r7, sp, #0
    char *system = malloc(300);
 80075f2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80075f6:	f01e fa75 	bl	8025ae4 <malloc>
 80075fa:	4603      	mov	r3, r0
 80075fc:	607b      	str	r3, [r7, #4]
    while (system == NULL)
 80075fe:	e008      	b.n	8007612 <publish_system+0x26>
    {
        vTaskDelay(10);
 8007600:	200a      	movs	r0, #10
 8007602:	f00c fa93 	bl	8013b2c <vTaskDelay>
        system = malloc(300);
 8007606:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800760a:	f01e fa6b 	bl	8025ae4 <malloc>
 800760e:	4603      	mov	r3, r0
 8007610:	607b      	str	r3, [r7, #4]
    while (system == NULL)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d0f3      	beq.n	8007600 <publish_system+0x14>
    }
    get_str_system_status(system);
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f000 f9bf 	bl	800799c <get_str_system_status>
    DEBUG_MQTT("Device system %s\n", system);
 800761e:	6879      	ldr	r1, [r7, #4]
 8007620:	4806      	ldr	r0, [pc, #24]	; (800763c <publish_system+0x50>)
 8007622:	f01f f953 	bl	80268cc <iprintf>
    publish_message(log_pub_topic, system);
 8007626:	6879      	ldr	r1, [r7, #4]
 8007628:	4805      	ldr	r0, [pc, #20]	; (8007640 <publish_system+0x54>)
 800762a:	f7ff f999 	bl	8006960 <publish_message>
    free(system);
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f01e fa60 	bl	8025af4 <free>
}
 8007634:	bf00      	nop
 8007636:	3708      	adds	r7, #8
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}
 800763c:	0802b600 	.word	0x0802b600
 8007640:	20014274 	.word	0x20014274

08007644 <publish_settings>:

void publish_settings()
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b082      	sub	sp, #8
 8007648:	af00      	add	r7, sp, #0
    char *settings = malloc(600);
 800764a:	f44f 7016 	mov.w	r0, #600	; 0x258
 800764e:	f01e fa49 	bl	8025ae4 <malloc>
 8007652:	4603      	mov	r3, r0
 8007654:	607b      	str	r3, [r7, #4]
    while (settings == NULL)
 8007656:	e008      	b.n	800766a <publish_settings+0x26>
    {
        vTaskDelay(10);
 8007658:	200a      	movs	r0, #10
 800765a:	f00c fa67 	bl	8013b2c <vTaskDelay>
        settings = malloc(600);
 800765e:	f44f 7016 	mov.w	r0, #600	; 0x258
 8007662:	f01e fa3f 	bl	8025ae4 <malloc>
 8007666:	4603      	mov	r3, r0
 8007668:	607b      	str	r3, [r7, #4]
    while (settings == NULL)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d0f3      	beq.n	8007658 <publish_settings+0x14>
    }
    get_str_settings(settings);
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f000 f8dd 	bl	8007830 <get_str_settings>
    publish_message(mode_pub_topic, settings);
 8007676:	6879      	ldr	r1, [r7, #4]
 8007678:	4804      	ldr	r0, [pc, #16]	; (800768c <publish_settings+0x48>)
 800767a:	f7ff f971 	bl	8006960 <publish_message>
    free(settings);
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f01e fa38 	bl	8025af4 <free>
}
 8007684:	bf00      	nop
 8007686:	3708      	adds	r7, #8
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}
 800768c:	200141d4 	.word	0x200141d4

08007690 <publish_errors>:

void publish_errors()
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b082      	sub	sp, #8
 8007694:	af00      	add	r7, sp, #0
    char *errors = malloc(300);
 8007696:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800769a:	f01e fa23 	bl	8025ae4 <malloc>
 800769e:	4603      	mov	r3, r0
 80076a0:	607b      	str	r3, [r7, #4]
    while (errors == NULL)
 80076a2:	e008      	b.n	80076b6 <publish_errors+0x26>
    {
        vTaskDelay(10);
 80076a4:	200a      	movs	r0, #10
 80076a6:	f00c fa41 	bl	8013b2c <vTaskDelay>
        errors = malloc(300);
 80076aa:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80076ae:	f01e fa19 	bl	8025ae4 <malloc>
 80076b2:	4603      	mov	r3, r0
 80076b4:	607b      	str	r3, [r7, #4]
    while (errors == NULL)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d0f3      	beq.n	80076a4 <publish_errors+0x14>
    }
    get_str_errors(errors);
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f000 f8f7 	bl	80078b0 <get_str_errors>
    publish_message(system_pub_topic, errors);
 80076c2:	6879      	ldr	r1, [r7, #4]
 80076c4:	4804      	ldr	r0, [pc, #16]	; (80076d8 <publish_errors+0x48>)
 80076c6:	f7ff f94b 	bl	8006960 <publish_message>
    free(errors);
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f01e fa12 	bl	8025af4 <free>
}
 80076d0:	bf00      	nop
 80076d2:	3708      	adds	r7, #8
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}
 80076d8:	20013ff4 	.word	0x20013ff4

080076dc <publish_extra_options>:
    DEBUG_MQTT("LOG %s\n", log);
    publish_message_qos0(log_pub_topic, message);
}

void publish_extra_options()
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b082      	sub	sp, #8
 80076e0:	af00      	add	r7, sp, #0

    char *extra = malloc(256);
 80076e2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80076e6:	f01e f9fd 	bl	8025ae4 <malloc>
 80076ea:	4603      	mov	r3, r0
 80076ec:	607b      	str	r3, [r7, #4]
    while (extra == NULL)
 80076ee:	e008      	b.n	8007702 <publish_extra_options+0x26>
    {
        vTaskDelay(10);
 80076f0:	200a      	movs	r0, #10
 80076f2:	f00c fa1b 	bl	8013b2c <vTaskDelay>
        extra = malloc(256);
 80076f6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80076fa:	f01e f9f3 	bl	8025ae4 <malloc>
 80076fe:	4603      	mov	r3, r0
 8007700:	607b      	str	r3, [r7, #4]
    while (extra == NULL)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d0f3      	beq.n	80076f0 <publish_extra_options+0x14>
    }
    get_str_extra_options(extra);
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f000 f9b3 	bl	8007a74 <get_str_extra_options>
    publish_message(log_pub_topic, extra);
 800770e:	6879      	ldr	r1, [r7, #4]
 8007710:	4804      	ldr	r0, [pc, #16]	; (8007724 <publish_extra_options+0x48>)
 8007712:	f7ff f925 	bl	8006960 <publish_message>
    free(extra);
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f01e f9ec 	bl	8025af4 <free>
}
 800771c:	bf00      	nop
 800771e:	3708      	adds	r7, #8
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}
 8007724:	20014274 	.word	0x20014274

08007728 <get_str_capabiities>:

char *on_off_[2] = {"off", "on"};
char *modes[4] = {"inflow", "inflow_max", "smart"};

void get_str_capabiities(char *capabilities_str)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b086      	sub	sp, #24
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
    cJSON *root, *capabilities;
    root = cJSON_CreateObject();
 8007730:	f7fe f9c4 	bl	8005abc <cJSON_CreateObject>
 8007734:	6178      	str	r0, [r7, #20]
    while (root == NULL)
 8007736:	e005      	b.n	8007744 <get_str_capabiities+0x1c>
    {
    	osDelay(10);
 8007738:	200a      	movs	r0, #10
 800773a:	f00a fb2e 	bl	8011d9a <osDelay>
        root = cJSON_CreateObject();
 800773e:	f7fe f9bd 	bl	8005abc <cJSON_CreateObject>
 8007742:	6178      	str	r0, [r7, #20]
    while (root == NULL)
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d0f6      	beq.n	8007738 <get_str_capabiities+0x10>
    }
    capabilities = cJSON_CreateObject();
 800774a:	f7fe f9b7 	bl	8005abc <cJSON_CreateObject>
 800774e:	6138      	str	r0, [r7, #16]
    while (capabilities == NULL)
 8007750:	e005      	b.n	800775e <get_str_capabiities+0x36>
    {
    	osDelay(10);
 8007752:	200a      	movs	r0, #10
 8007754:	f00a fb21 	bl	8011d9a <osDelay>
        capabilities = cJSON_CreateObject();
 8007758:	f7fe f9b0 	bl	8005abc <cJSON_CreateObject>
 800775c:	6138      	str	r0, [r7, #16]
    while (capabilities == NULL)
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d0f6      	beq.n	8007752 <get_str_capabiities+0x2a>
    }
    cJSON_AddItemToObject(root, "capabilities", capabilities);
 8007764:	693a      	ldr	r2, [r7, #16]
 8007766:	492a      	ldr	r1, [pc, #168]	; (8007810 <get_str_capabiities+0xe8>)
 8007768:	6978      	ldr	r0, [r7, #20]
 800776a:	f7fe f8dd 	bl	8005928 <cJSON_AddItemToObject>
    cJSON_AddStringToObject(capabilities, "mode", modes[device->mode]);
 800776e:	4b29      	ldr	r3, [pc, #164]	; (8007814 <get_str_capabiities+0xec>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	7b1b      	ldrb	r3, [r3, #12]
 8007774:	461a      	mov	r2, r3
 8007776:	4b28      	ldr	r3, [pc, #160]	; (8007818 <get_str_capabiities+0xf0>)
 8007778:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800777c:	461a      	mov	r2, r3
 800777e:	4927      	ldr	r1, [pc, #156]	; (800781c <get_str_capabiities+0xf4>)
 8007780:	6938      	ldr	r0, [r7, #16]
 8007782:	f7fe f90b 	bl	800599c <cJSON_AddStringToObject>
    cJSON_AddStringToObject(capabilities, "on_off", on_off_[device->state]);
 8007786:	4b23      	ldr	r3, [pc, #140]	; (8007814 <get_str_capabiities+0xec>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	789b      	ldrb	r3, [r3, #2]
 800778c:	461a      	mov	r2, r3
 800778e:	4b24      	ldr	r3, [pc, #144]	; (8007820 <get_str_capabiities+0xf8>)
 8007790:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007794:	461a      	mov	r2, r3
 8007796:	4923      	ldr	r1, [pc, #140]	; (8007824 <get_str_capabiities+0xfc>)
 8007798:	6938      	ldr	r0, [r7, #16]
 800779a:	f7fe f8ff 	bl	800599c <cJSON_AddStringToObject>
    cJSON_AddNumberToObject(capabilities, "speed", device->inflow_speed);
 800779e:	4b1d      	ldr	r3, [pc, #116]	; (8007814 <get_str_capabiities+0xec>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	7b9b      	ldrb	r3, [r3, #14]
 80077a4:	4618      	mov	r0, r3
 80077a6:	f7f8 febd 	bl	8000524 <__aeabi_ui2d>
 80077aa:	4602      	mov	r2, r0
 80077ac:	460b      	mov	r3, r1
 80077ae:	ec43 2b10 	vmov	d0, r2, r3
 80077b2:	491d      	ldr	r1, [pc, #116]	; (8007828 <get_str_capabiities+0x100>)
 80077b4:	6938      	ldr	r0, [r7, #16]
 80077b6:	f7fe f8cd 	bl	8005954 <cJSON_AddNumberToObject>
    cJSON_AddNumberToObject(capabilities, "heat", device->temp_limit);
 80077ba:	4b16      	ldr	r3, [pc, #88]	; (8007814 <get_str_capabiities+0xec>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	7e1b      	ldrb	r3, [r3, #24]
 80077c0:	4618      	mov	r0, r3
 80077c2:	f7f8 feaf 	bl	8000524 <__aeabi_ui2d>
 80077c6:	4602      	mov	r2, r0
 80077c8:	460b      	mov	r3, r1
 80077ca:	ec43 2b10 	vmov	d0, r2, r3
 80077ce:	4917      	ldr	r1, [pc, #92]	; (800782c <get_str_capabiities+0x104>)
 80077d0:	6938      	ldr	r0, [r7, #16]
 80077d2:	f7fe f8bf 	bl	8005954 <cJSON_AddNumberToObject>
    char *js_str = cJSON_Print(root);
 80077d6:	6978      	ldr	r0, [r7, #20]
 80077d8:	f7fd fa08 	bl	8004bec <cJSON_Print>
 80077dc:	60f8      	str	r0, [r7, #12]
    while (js_str == NULL)
 80077de:	e006      	b.n	80077ee <get_str_capabiities+0xc6>
    {
    	osDelay(10);
 80077e0:	200a      	movs	r0, #10
 80077e2:	f00a fada 	bl	8011d9a <osDelay>
        js_str = cJSON_Print(root);
 80077e6:	6978      	ldr	r0, [r7, #20]
 80077e8:	f7fd fa00 	bl	8004bec <cJSON_Print>
 80077ec:	60f8      	str	r0, [r7, #12]
    while (js_str == NULL)
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d0f5      	beq.n	80077e0 <get_str_capabiities+0xb8>
    }
    strcpy(capabilities_str, js_str);
 80077f4:	68f9      	ldr	r1, [r7, #12]
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f01f f9f9 	bl	8026bee <strcpy>
    cJSON_Delete(root);
 80077fc:	6978      	ldr	r0, [r7, #20]
 80077fe:	f7fc f94d 	bl	8003a9c <cJSON_Delete>
    cJSON_free(js_str);
 8007802:	68f8      	ldr	r0, [r7, #12]
 8007804:	f7fe f96e 	bl	8005ae4 <cJSON_free>
}
 8007808:	bf00      	nop
 800780a:	3718      	adds	r7, #24
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}
 8007810:	0802b668 	.word	0x0802b668
 8007814:	20013e2c 	.word	0x20013e2c
 8007818:	10000024 	.word	0x10000024
 800781c:	0802b678 	.word	0x0802b678
 8007820:	1000001c 	.word	0x1000001c
 8007824:	0802b680 	.word	0x0802b680
 8007828:	0802b688 	.word	0x0802b688
 800782c:	0802b690 	.word	0x0802b690

08007830 <get_str_settings>:

void get_str_settings(char *settings)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b086      	sub	sp, #24
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
    cJSON *root, *settings_js, *ten;
    root = cJSON_CreateObject();
 8007838:	f7fe f940 	bl	8005abc <cJSON_CreateObject>
 800783c:	6178      	str	r0, [r7, #20]
    cJSON_AddItemToObject(root, "settings", settings_js = cJSON_CreateObject());
 800783e:	f7fe f93d 	bl	8005abc <cJSON_CreateObject>
 8007842:	6138      	str	r0, [r7, #16]
 8007844:	693a      	ldr	r2, [r7, #16]
 8007846:	4916      	ldr	r1, [pc, #88]	; (80078a0 <get_str_settings+0x70>)
 8007848:	6978      	ldr	r0, [r7, #20]
 800784a:	f7fe f86d 	bl	8005928 <cJSON_AddItemToObject>
    cJSON_AddItemToObject(settings_js, "ten", ten = cJSON_CreateObject());
 800784e:	f7fe f935 	bl	8005abc <cJSON_CreateObject>
 8007852:	60f8      	str	r0, [r7, #12]
 8007854:	68fa      	ldr	r2, [r7, #12]
 8007856:	4913      	ldr	r1, [pc, #76]	; (80078a4 <get_str_settings+0x74>)
 8007858:	6938      	ldr	r0, [r7, #16]
 800785a:	f7fe f865 	bl	8005928 <cJSON_AddItemToObject>
    cJSON_AddNumberToObject(ten, "temp_limit", device->temp_limit);
 800785e:	4b12      	ldr	r3, [pc, #72]	; (80078a8 <get_str_settings+0x78>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	7e1b      	ldrb	r3, [r3, #24]
 8007864:	4618      	mov	r0, r3
 8007866:	f7f8 fe5d 	bl	8000524 <__aeabi_ui2d>
 800786a:	4602      	mov	r2, r0
 800786c:	460b      	mov	r3, r1
 800786e:	ec43 2b10 	vmov	d0, r2, r3
 8007872:	490e      	ldr	r1, [pc, #56]	; (80078ac <get_str_settings+0x7c>)
 8007874:	68f8      	ldr	r0, [r7, #12]
 8007876:	f7fe f86d 	bl	8005954 <cJSON_AddNumberToObject>

    char *js_str = cJSON_Print(root);
 800787a:	6978      	ldr	r0, [r7, #20]
 800787c:	f7fd f9b6 	bl	8004bec <cJSON_Print>
 8007880:	60b8      	str	r0, [r7, #8]
    strcpy(settings, js_str);
 8007882:	68b9      	ldr	r1, [r7, #8]
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f01f f9b2 	bl	8026bee <strcpy>
    cJSON_Delete(root);
 800788a:	6978      	ldr	r0, [r7, #20]
 800788c:	f7fc f906 	bl	8003a9c <cJSON_Delete>
    cJSON_free(js_str);
 8007890:	68b8      	ldr	r0, [r7, #8]
 8007892:	f7fe f927 	bl	8005ae4 <cJSON_free>
}
 8007896:	bf00      	nop
 8007898:	3718      	adds	r7, #24
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}
 800789e:	bf00      	nop
 80078a0:	0802b698 	.word	0x0802b698
 80078a4:	0802b6a4 	.word	0x0802b6a4
 80078a8:	20013e2c 	.word	0x20013e2c
 80078ac:	0802b6a8 	.word	0x0802b6a8

080078b0 <get_str_errors>:

void get_str_errors(char *errors)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b086      	sub	sp, #24
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
    cJSON *root, *errors_js;
    root = cJSON_CreateObject();
 80078b8:	f7fe f900 	bl	8005abc <cJSON_CreateObject>
 80078bc:	6178      	str	r0, [r7, #20]
    cJSON_AddItemToObject(root, "errors", errors_js = cJSON_CreateObject());
 80078be:	f7fe f8fd 	bl	8005abc <cJSON_CreateObject>
 80078c2:	6138      	str	r0, [r7, #16]
 80078c4:	693a      	ldr	r2, [r7, #16]
 80078c6:	492e      	ldr	r1, [pc, #184]	; (8007980 <get_str_errors+0xd0>)
 80078c8:	6978      	ldr	r0, [r7, #20]
 80078ca:	f7fe f82d 	bl	8005928 <cJSON_AddItemToObject>
    cJSON_AddNumberToObject(errors_js, "temp_hot", device->error_temp_hot);
 80078ce:	4b2d      	ldr	r3, [pc, #180]	; (8007984 <get_str_errors+0xd4>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	78db      	ldrb	r3, [r3, #3]
 80078d4:	4618      	mov	r0, r3
 80078d6:	f7f8 fe25 	bl	8000524 <__aeabi_ui2d>
 80078da:	4602      	mov	r2, r0
 80078dc:	460b      	mov	r3, r1
 80078de:	ec43 2b10 	vmov	d0, r2, r3
 80078e2:	4929      	ldr	r1, [pc, #164]	; (8007988 <get_str_errors+0xd8>)
 80078e4:	6938      	ldr	r0, [r7, #16]
 80078e6:	f7fe f835 	bl	8005954 <cJSON_AddNumberToObject>
    cJSON_AddNumberToObject(errors_js, "temp_cold", device->error_temp_cold);
 80078ea:	4b26      	ldr	r3, [pc, #152]	; (8007984 <get_str_errors+0xd4>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	791b      	ldrb	r3, [r3, #4]
 80078f0:	4618      	mov	r0, r3
 80078f2:	f7f8 fe17 	bl	8000524 <__aeabi_ui2d>
 80078f6:	4602      	mov	r2, r0
 80078f8:	460b      	mov	r3, r1
 80078fa:	ec43 2b10 	vmov	d0, r2, r3
 80078fe:	4923      	ldr	r1, [pc, #140]	; (800798c <get_str_errors+0xdc>)
 8007900:	6938      	ldr	r0, [r7, #16]
 8007902:	f7fe f827 	bl	8005954 <cJSON_AddNumberToObject>
    cJSON_AddNumberToObject(errors_js, "stop_hot", device->error_stop_hot);
 8007906:	4b1f      	ldr	r3, [pc, #124]	; (8007984 <get_str_errors+0xd4>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	795b      	ldrb	r3, [r3, #5]
 800790c:	4618      	mov	r0, r3
 800790e:	f7f8 fe09 	bl	8000524 <__aeabi_ui2d>
 8007912:	4602      	mov	r2, r0
 8007914:	460b      	mov	r3, r1
 8007916:	ec43 2b10 	vmov	d0, r2, r3
 800791a:	491d      	ldr	r1, [pc, #116]	; (8007990 <get_str_errors+0xe0>)
 800791c:	6938      	ldr	r0, [r7, #16]
 800791e:	f7fe f819 	bl	8005954 <cJSON_AddNumberToObject>
    cJSON_AddNumberToObject(errors_js, "stop_cold", device->error_stop_cold);
 8007922:	4b18      	ldr	r3, [pc, #96]	; (8007984 <get_str_errors+0xd4>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	799b      	ldrb	r3, [r3, #6]
 8007928:	4618      	mov	r0, r3
 800792a:	f7f8 fdfb 	bl	8000524 <__aeabi_ui2d>
 800792e:	4602      	mov	r2, r0
 8007930:	460b      	mov	r3, r1
 8007932:	ec43 2b10 	vmov	d0, r2, r3
 8007936:	4917      	ldr	r1, [pc, #92]	; (8007994 <get_str_errors+0xe4>)
 8007938:	6938      	ldr	r0, [r7, #16]
 800793a:	f7fe f80b 	bl	8005954 <cJSON_AddNumberToObject>
    cJSON_AddNumberToObject(errors_js, "ds18_bus", device->error_ds18b20);
 800793e:	4b11      	ldr	r3, [pc, #68]	; (8007984 <get_str_errors+0xd4>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	79db      	ldrb	r3, [r3, #7]
 8007944:	4618      	mov	r0, r3
 8007946:	f7f8 fded 	bl	8000524 <__aeabi_ui2d>
 800794a:	4602      	mov	r2, r0
 800794c:	460b      	mov	r3, r1
 800794e:	ec43 2b10 	vmov	d0, r2, r3
 8007952:	4911      	ldr	r1, [pc, #68]	; (8007998 <get_str_errors+0xe8>)
 8007954:	6938      	ldr	r0, [r7, #16]
 8007956:	f7fd fffd 	bl	8005954 <cJSON_AddNumberToObject>

    char *js_str = cJSON_Print(root);
 800795a:	6978      	ldr	r0, [r7, #20]
 800795c:	f7fd f946 	bl	8004bec <cJSON_Print>
 8007960:	60f8      	str	r0, [r7, #12]
    strcpy(errors, js_str);
 8007962:	68f9      	ldr	r1, [r7, #12]
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f01f f942 	bl	8026bee <strcpy>
    cJSON_Delete(root);
 800796a:	6978      	ldr	r0, [r7, #20]
 800796c:	f7fc f896 	bl	8003a9c <cJSON_Delete>
    cJSON_free(js_str);
 8007970:	68f8      	ldr	r0, [r7, #12]
 8007972:	f7fe f8b7 	bl	8005ae4 <cJSON_free>
}
 8007976:	bf00      	nop
 8007978:	3718      	adds	r7, #24
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}
 800797e:	bf00      	nop
 8007980:	0802b6b4 	.word	0x0802b6b4
 8007984:	20013e2c 	.word	0x20013e2c
 8007988:	0802b6bc 	.word	0x0802b6bc
 800798c:	0802b6c8 	.word	0x0802b6c8
 8007990:	0802b6d4 	.word	0x0802b6d4
 8007994:	0802b6e0 	.word	0x0802b6e0
 8007998:	0802b6ec 	.word	0x0802b6ec

0800799c <get_str_system_status>:

void get_str_system_status(char *system_str)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b084      	sub	sp, #16
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
    cJSON *root;
    root = cJSON_CreateObject();
 80079a4:	f7fe f88a 	bl	8005abc <cJSON_CreateObject>
 80079a8:	60f8      	str	r0, [r7, #12]
    cJSON_AddNumberToObject(root, "ten_power", ten_power);
 80079aa:	4b2b      	ldr	r3, [pc, #172]	; (8007a58 <get_str_system_status+0xbc>)
 80079ac:	881b      	ldrh	r3, [r3, #0]
 80079ae:	4618      	mov	r0, r3
 80079b0:	f7f8 fdb8 	bl	8000524 <__aeabi_ui2d>
 80079b4:	4602      	mov	r2, r0
 80079b6:	460b      	mov	r3, r1
 80079b8:	ec43 2b10 	vmov	d0, r2, r3
 80079bc:	4927      	ldr	r1, [pc, #156]	; (8007a5c <get_str_system_status+0xc0>)
 80079be:	68f8      	ldr	r0, [r7, #12]
 80079c0:	f7fd ffc8 	bl	8005954 <cJSON_AddNumberToObject>
    cJSON_AddNumberToObject(root, "temp_out", sensors_data->out);
 80079c4:	4b26      	ldr	r3, [pc, #152]	; (8007a60 <get_str_system_status+0xc4>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4618      	mov	r0, r3
 80079cc:	f7f8 fdcc 	bl	8000568 <__aeabi_f2d>
 80079d0:	4602      	mov	r2, r0
 80079d2:	460b      	mov	r3, r1
 80079d4:	ec43 2b10 	vmov	d0, r2, r3
 80079d8:	4922      	ldr	r1, [pc, #136]	; (8007a64 <get_str_system_status+0xc8>)
 80079da:	68f8      	ldr	r0, [r7, #12]
 80079dc:	f7fd ffba 	bl	8005954 <cJSON_AddNumberToObject>
    cJSON_AddNumberToObject(root, "temp_in", sensors_data->in);
 80079e0:	4b1f      	ldr	r3, [pc, #124]	; (8007a60 <get_str_system_status+0xc4>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	689b      	ldr	r3, [r3, #8]
 80079e6:	4618      	mov	r0, r3
 80079e8:	f7f8 fdbe 	bl	8000568 <__aeabi_f2d>
 80079ec:	4602      	mov	r2, r0
 80079ee:	460b      	mov	r3, r1
 80079f0:	ec43 2b10 	vmov	d0, r2, r3
 80079f4:	491c      	ldr	r1, [pc, #112]	; (8007a68 <get_str_system_status+0xcc>)
 80079f6:	68f8      	ldr	r0, [r7, #12]
 80079f8:	f7fd ffac 	bl	8005954 <cJSON_AddNumberToObject>
    cJSON_AddNumberToObject(root, "state_out_sensor", sensors_data->out_state);
 80079fc:	4b18      	ldr	r3, [pc, #96]	; (8007a60 <get_str_system_status+0xc4>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	7f1b      	ldrb	r3, [r3, #28]
 8007a02:	4618      	mov	r0, r3
 8007a04:	f7f8 fd8e 	bl	8000524 <__aeabi_ui2d>
 8007a08:	4602      	mov	r2, r0
 8007a0a:	460b      	mov	r3, r1
 8007a0c:	ec43 2b10 	vmov	d0, r2, r3
 8007a10:	4916      	ldr	r1, [pc, #88]	; (8007a6c <get_str_system_status+0xd0>)
 8007a12:	68f8      	ldr	r0, [r7, #12]
 8007a14:	f7fd ff9e 	bl	8005954 <cJSON_AddNumberToObject>
    cJSON_AddNumberToObject(root, "state_in_sensor", sensors_data->in_state);
 8007a18:	4b11      	ldr	r3, [pc, #68]	; (8007a60 <get_str_system_status+0xc4>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	7f5b      	ldrb	r3, [r3, #29]
 8007a1e:	4618      	mov	r0, r3
 8007a20:	f7f8 fd80 	bl	8000524 <__aeabi_ui2d>
 8007a24:	4602      	mov	r2, r0
 8007a26:	460b      	mov	r3, r1
 8007a28:	ec43 2b10 	vmov	d0, r2, r3
 8007a2c:	4910      	ldr	r1, [pc, #64]	; (8007a70 <get_str_system_status+0xd4>)
 8007a2e:	68f8      	ldr	r0, [r7, #12]
 8007a30:	f7fd ff90 	bl	8005954 <cJSON_AddNumberToObject>

    // {"entity_on_off_dependence":"off","entity_dependence":{"device_id_master":0,"mode":"humidity","value":50}}
    char *js_str = cJSON_Print(root);
 8007a34:	68f8      	ldr	r0, [r7, #12]
 8007a36:	f7fd f8d9 	bl	8004bec <cJSON_Print>
 8007a3a:	60b8      	str	r0, [r7, #8]
    strcpy(system_str, js_str);
 8007a3c:	68b9      	ldr	r1, [r7, #8]
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f01f f8d5 	bl	8026bee <strcpy>
    cJSON_Delete(root);
 8007a44:	68f8      	ldr	r0, [r7, #12]
 8007a46:	f7fc f829 	bl	8003a9c <cJSON_Delete>
    cJSON_free(js_str);
 8007a4a:	68b8      	ldr	r0, [r7, #8]
 8007a4c:	f7fe f84a 	bl	8005ae4 <cJSON_free>
}
 8007a50:	bf00      	nop
 8007a52:	3710      	adds	r7, #16
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}
 8007a58:	20013dfe 	.word	0x20013dfe
 8007a5c:	0802b6f8 	.word	0x0802b6f8
 8007a60:	20013e34 	.word	0x20013e34
 8007a64:	0802b704 	.word	0x0802b704
 8007a68:	0802b710 	.word	0x0802b710
 8007a6c:	0802b718 	.word	0x0802b718
 8007a70:	0802b72c 	.word	0x0802b72c

08007a74 <get_str_extra_options>:
    cJSON_Delete(root);
    cJSON_free(js_str);
}

void get_str_extra_options(char *extra)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b086      	sub	sp, #24
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
    cJSON *root, *extra_js;
    root = cJSON_CreateObject();
 8007a7c:	f7fe f81e 	bl	8005abc <cJSON_CreateObject>
 8007a80:	6178      	str	r0, [r7, #20]
    cJSON_AddItemToObject(root, "extra_options", extra_js = cJSON_CreateObject());
 8007a82:	f7fe f81b 	bl	8005abc <cJSON_CreateObject>
 8007a86:	6138      	str	r0, [r7, #16]
 8007a88:	693a      	ldr	r2, [r7, #16]
 8007a8a:	4920      	ldr	r1, [pc, #128]	; (8007b0c <get_str_extra_options+0x98>)
 8007a8c:	6978      	ldr	r0, [r7, #20]
 8007a8e:	f7fd ff4b 	bl	8005928 <cJSON_AddItemToObject>
    cJSON_AddNumberToObject(extra_js, "deviation", device->extra_options.deviation);
 8007a92:	4b1f      	ldr	r3, [pc, #124]	; (8007b10 <get_str_extra_options+0x9c>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	7e5b      	ldrb	r3, [r3, #25]
 8007a98:	4618      	mov	r0, r3
 8007a9a:	f7f8 fd43 	bl	8000524 <__aeabi_ui2d>
 8007a9e:	4602      	mov	r2, r0
 8007aa0:	460b      	mov	r3, r1
 8007aa2:	ec43 2b10 	vmov	d0, r2, r3
 8007aa6:	491b      	ldr	r1, [pc, #108]	; (8007b14 <get_str_extra_options+0xa0>)
 8007aa8:	6938      	ldr	r0, [r7, #16]
 8007aaa:	f7fd ff53 	bl	8005954 <cJSON_AddNumberToObject>
    cJSON_AddNumberToObject(extra_js, "check_time", device->extra_options.check_time);
 8007aae:	4b18      	ldr	r3, [pc, #96]	; (8007b10 <get_str_extra_options+0x9c>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	7e9b      	ldrb	r3, [r3, #26]
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	f7f8 fd35 	bl	8000524 <__aeabi_ui2d>
 8007aba:	4602      	mov	r2, r0
 8007abc:	460b      	mov	r3, r1
 8007abe:	ec43 2b10 	vmov	d0, r2, r3
 8007ac2:	4915      	ldr	r1, [pc, #84]	; (8007b18 <get_str_extra_options+0xa4>)
 8007ac4:	6938      	ldr	r0, [r7, #16]
 8007ac6:	f7fd ff45 	bl	8005954 <cJSON_AddNumberToObject>
    cJSON_AddNumberToObject(extra_js, "step_pwm", device->extra_options.step_pwm);
 8007aca:	4b11      	ldr	r3, [pc, #68]	; (8007b10 <get_str_extra_options+0x9c>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	7edb      	ldrb	r3, [r3, #27]
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f7f8 fd27 	bl	8000524 <__aeabi_ui2d>
 8007ad6:	4602      	mov	r2, r0
 8007ad8:	460b      	mov	r3, r1
 8007ada:	ec43 2b10 	vmov	d0, r2, r3
 8007ade:	490f      	ldr	r1, [pc, #60]	; (8007b1c <get_str_extra_options+0xa8>)
 8007ae0:	6938      	ldr	r0, [r7, #16]
 8007ae2:	f7fd ff37 	bl	8005954 <cJSON_AddNumberToObject>

    char *js_str = cJSON_Print(root);
 8007ae6:	6978      	ldr	r0, [r7, #20]
 8007ae8:	f7fd f880 	bl	8004bec <cJSON_Print>
 8007aec:	60f8      	str	r0, [r7, #12]
    strcpy(extra, js_str);
 8007aee:	68f9      	ldr	r1, [r7, #12]
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f01f f87c 	bl	8026bee <strcpy>
    cJSON_Delete(root);
 8007af6:	6978      	ldr	r0, [r7, #20]
 8007af8:	f7fb ffd0 	bl	8003a9c <cJSON_Delete>
    cJSON_free(js_str);
 8007afc:	68f8      	ldr	r0, [r7, #12]
 8007afe:	f7fd fff1 	bl	8005ae4 <cJSON_free>
}
 8007b02:	bf00      	nop
 8007b04:	3718      	adds	r7, #24
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}
 8007b0a:	bf00      	nop
 8007b0c:	0802b774 	.word	0x0802b774
 8007b10:	20013e2c 	.word	0x20013e2c
 8007b14:	0802b784 	.word	0x0802b784
 8007b18:	0802b790 	.word	0x0802b790
 8007b1c:	0802b79c 	.word	0x0802b79c

08007b20 <publish_from_timer>:
bool send_array_entity[10][5];
bool start_timer_f;
uint32_t  server_time = 0;

void publish_from_timer()
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	af00      	add	r7, sp, #0
    start_timer_f = false;
 8007b24:	4b45      	ldr	r3, [pc, #276]	; (8007c3c <publish_from_timer+0x11c>)
 8007b26:	2200      	movs	r2, #0
 8007b28:	701a      	strb	r2, [r3, #0]
    DEBUG_SEND("Timer done!\n");
    if (wireless_params->mqtt_type != VAKIO_MQTT)
 8007b2a:	4b45      	ldr	r3, [pc, #276]	; (8007c40 <publish_from_timer+0x120>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007b32:	f083 0301 	eor.w	r3, r3, #1
 8007b36:	b2db      	uxtb	r3, r3
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d061      	beq.n	8007c00 <publish_from_timer+0xe0>
    {
        if (device_send.mode != device_check.mode)
 8007b3c:	4b41      	ldr	r3, [pc, #260]	; (8007c44 <publish_from_timer+0x124>)
 8007b3e:	7b1a      	ldrb	r2, [r3, #12]
 8007b40:	4b41      	ldr	r3, [pc, #260]	; (8007c48 <publish_from_timer+0x128>)
 8007b42:	7b1b      	ldrb	r3, [r3, #12]
 8007b44:	429a      	cmp	r2, r3
 8007b46:	d011      	beq.n	8007b6c <publish_from_timer+0x4c>
        {
            iSendMode = true;
 8007b48:	4b40      	ldr	r3, [pc, #256]	; (8007c4c <publish_from_timer+0x12c>)
 8007b4a:	2201      	movs	r2, #1
 8007b4c:	701a      	strb	r2, [r3, #0]
            publish_message(workmode_topic, modes_str_send[device->mode]);
 8007b4e:	4b40      	ldr	r3, [pc, #256]	; (8007c50 <publish_from_timer+0x130>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	7b1b      	ldrb	r3, [r3, #12]
 8007b54:	461a      	mov	r2, r3
 8007b56:	4b3f      	ldr	r3, [pc, #252]	; (8007c54 <publish_from_timer+0x134>)
 8007b58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b5c:	4619      	mov	r1, r3
 8007b5e:	483e      	ldr	r0, [pc, #248]	; (8007c58 <publish_from_timer+0x138>)
 8007b60:	f7fe fefe 	bl	8006960 <publish_message>
            device_send.mode = device_check.mode;
 8007b64:	4b38      	ldr	r3, [pc, #224]	; (8007c48 <publish_from_timer+0x128>)
 8007b66:	7b1a      	ldrb	r2, [r3, #12]
 8007b68:	4b36      	ldr	r3, [pc, #216]	; (8007c44 <publish_from_timer+0x124>)
 8007b6a:	731a      	strb	r2, [r3, #12]
        }
        if (device_send.state != device_check.state)
 8007b6c:	4b35      	ldr	r3, [pc, #212]	; (8007c44 <publish_from_timer+0x124>)
 8007b6e:	789a      	ldrb	r2, [r3, #2]
 8007b70:	4b35      	ldr	r3, [pc, #212]	; (8007c48 <publish_from_timer+0x128>)
 8007b72:	789b      	ldrb	r3, [r3, #2]
 8007b74:	429a      	cmp	r2, r3
 8007b76:	d011      	beq.n	8007b9c <publish_from_timer+0x7c>
        {
            iSendState = true;
 8007b78:	4b38      	ldr	r3, [pc, #224]	; (8007c5c <publish_from_timer+0x13c>)
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	701a      	strb	r2, [r3, #0]
            publish_message(state_topic, on_off_str_send[device->state]);
 8007b7e:	4b34      	ldr	r3, [pc, #208]	; (8007c50 <publish_from_timer+0x130>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	789b      	ldrb	r3, [r3, #2]
 8007b84:	461a      	mov	r2, r3
 8007b86:	4b36      	ldr	r3, [pc, #216]	; (8007c60 <publish_from_timer+0x140>)
 8007b88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b8c:	4619      	mov	r1, r3
 8007b8e:	4835      	ldr	r0, [pc, #212]	; (8007c64 <publish_from_timer+0x144>)
 8007b90:	f7fe fee6 	bl	8006960 <publish_message>
            device_send.state = device_check.state;
 8007b94:	4b2c      	ldr	r3, [pc, #176]	; (8007c48 <publish_from_timer+0x128>)
 8007b96:	789a      	ldrb	r2, [r3, #2]
 8007b98:	4b2a      	ldr	r3, [pc, #168]	; (8007c44 <publish_from_timer+0x124>)
 8007b9a:	709a      	strb	r2, [r3, #2]
        }
        if (device_send.inflow_speed != device_check.inflow_speed)
 8007b9c:	4b29      	ldr	r3, [pc, #164]	; (8007c44 <publish_from_timer+0x124>)
 8007b9e:	7b9a      	ldrb	r2, [r3, #14]
 8007ba0:	4b29      	ldr	r3, [pc, #164]	; (8007c48 <publish_from_timer+0x128>)
 8007ba2:	7b9b      	ldrb	r3, [r3, #14]
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	d012      	beq.n	8007bce <publish_from_timer+0xae>
        {
            iSendSpeed = true;
 8007ba8:	4b2f      	ldr	r3, [pc, #188]	; (8007c68 <publish_from_timer+0x148>)
 8007baa:	2201      	movs	r2, #1
 8007bac:	701a      	strb	r2, [r3, #0]
            sprintf(speeds_str_send, "%i", device->inflow_speed);
 8007bae:	4b28      	ldr	r3, [pc, #160]	; (8007c50 <publish_from_timer+0x130>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	7b9b      	ldrb	r3, [r3, #14]
 8007bb4:	461a      	mov	r2, r3
 8007bb6:	492d      	ldr	r1, [pc, #180]	; (8007c6c <publish_from_timer+0x14c>)
 8007bb8:	482d      	ldr	r0, [pc, #180]	; (8007c70 <publish_from_timer+0x150>)
 8007bba:	f01e ff6b 	bl	8026a94 <siprintf>
            publish_message(speed_topic, speeds_str_send);
 8007bbe:	492c      	ldr	r1, [pc, #176]	; (8007c70 <publish_from_timer+0x150>)
 8007bc0:	482c      	ldr	r0, [pc, #176]	; (8007c74 <publish_from_timer+0x154>)
 8007bc2:	f7fe fecd 	bl	8006960 <publish_message>
            device_send.inflow_speed = device_check.inflow_speed;
 8007bc6:	4b20      	ldr	r3, [pc, #128]	; (8007c48 <publish_from_timer+0x128>)
 8007bc8:	7b9a      	ldrb	r2, [r3, #14]
 8007bca:	4b1e      	ldr	r3, [pc, #120]	; (8007c44 <publish_from_timer+0x124>)
 8007bcc:	739a      	strb	r2, [r3, #14]
        }
        if (device_send.temp_limit != device_check.temp_limit)
 8007bce:	4b1d      	ldr	r3, [pc, #116]	; (8007c44 <publish_from_timer+0x124>)
 8007bd0:	7e1a      	ldrb	r2, [r3, #24]
 8007bd2:	4b1d      	ldr	r3, [pc, #116]	; (8007c48 <publish_from_timer+0x128>)
 8007bd4:	7e1b      	ldrb	r3, [r3, #24]
 8007bd6:	429a      	cmp	r2, r3
 8007bd8:	d012      	beq.n	8007c00 <publish_from_timer+0xe0>
        {
            iSendTemp = true;
 8007bda:	4b27      	ldr	r3, [pc, #156]	; (8007c78 <publish_from_timer+0x158>)
 8007bdc:	2201      	movs	r2, #1
 8007bde:	701a      	strb	r2, [r3, #0]
            sprintf(temp_str_send, "%i", device->temp_limit);
 8007be0:	4b1b      	ldr	r3, [pc, #108]	; (8007c50 <publish_from_timer+0x130>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	7e1b      	ldrb	r3, [r3, #24]
 8007be6:	461a      	mov	r2, r3
 8007be8:	4920      	ldr	r1, [pc, #128]	; (8007c6c <publish_from_timer+0x14c>)
 8007bea:	4824      	ldr	r0, [pc, #144]	; (8007c7c <publish_from_timer+0x15c>)
 8007bec:	f01e ff52 	bl	8026a94 <siprintf>
            publish_message(temp_limit_topic, temp_str_send);
 8007bf0:	4922      	ldr	r1, [pc, #136]	; (8007c7c <publish_from_timer+0x15c>)
 8007bf2:	4823      	ldr	r0, [pc, #140]	; (8007c80 <publish_from_timer+0x160>)
 8007bf4:	f7fe feb4 	bl	8006960 <publish_message>
            device_send.temp_limit = device_check.temp_limit;
 8007bf8:	4b13      	ldr	r3, [pc, #76]	; (8007c48 <publish_from_timer+0x128>)
 8007bfa:	7e1a      	ldrb	r2, [r3, #24]
 8007bfc:	4b11      	ldr	r3, [pc, #68]	; (8007c44 <publish_from_timer+0x124>)
 8007bfe:	761a      	strb	r2, [r3, #24]
        }
    }

    if (send_array_device[CAPABILITIES])
 8007c00:	4b20      	ldr	r3, [pc, #128]	; (8007c84 <publish_from_timer+0x164>)
 8007c02:	781b      	ldrb	r3, [r3, #0]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d004      	beq.n	8007c12 <publish_from_timer+0xf2>
    {
        publish_capabilities();
 8007c08:	f7ff fcca 	bl	80075a0 <publish_capabilities>
        send_array_device[CAPABILITIES] = false;
 8007c0c:	4b1d      	ldr	r3, [pc, #116]	; (8007c84 <publish_from_timer+0x164>)
 8007c0e:	2200      	movs	r2, #0
 8007c10:	701a      	strb	r2, [r3, #0]
    }
    if (send_array_device[SETTINGS])
 8007c12:	4b1c      	ldr	r3, [pc, #112]	; (8007c84 <publish_from_timer+0x164>)
 8007c14:	785b      	ldrb	r3, [r3, #1]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d004      	beq.n	8007c24 <publish_from_timer+0x104>
    {
        send_array_device[SETTINGS] = false;
 8007c1a:	4b1a      	ldr	r3, [pc, #104]	; (8007c84 <publish_from_timer+0x164>)
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	705a      	strb	r2, [r3, #1]
        publish_settings();
 8007c20:	f7ff fd10 	bl	8007644 <publish_settings>
    }
    if (send_array_device[FAULTS])
 8007c24:	4b17      	ldr	r3, [pc, #92]	; (8007c84 <publish_from_timer+0x164>)
 8007c26:	78db      	ldrb	r3, [r3, #3]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d004      	beq.n	8007c36 <publish_from_timer+0x116>
    {
        send_array_device[FAULTS] = false;
 8007c2c:	4b15      	ldr	r3, [pc, #84]	; (8007c84 <publish_from_timer+0x164>)
 8007c2e:	2200      	movs	r2, #0
 8007c30:	70da      	strb	r2, [r3, #3]
        publish_errors();
 8007c32:	f7ff fd2d 	bl	8007690 <publish_errors>
    }
}
 8007c36:	bf00      	nop
 8007c38:	bd80      	pop	{r7, pc}
 8007c3a:	bf00      	nop
 8007c3c:	200143d2 	.word	0x200143d2
 8007c40:	20013e30 	.word	0x20013e30
 8007c44:	20013e10 	.word	0x20013e10
 8007c48:	20013de0 	.word	0x20013de0
 8007c4c:	20013dde 	.word	0x20013dde
 8007c50:	20013e2c 	.word	0x20013e2c
 8007c54:	10000034 	.word	0x10000034
 8007c58:	20014184 	.word	0x20014184
 8007c5c:	20013ddc 	.word	0x20013ddc
 8007c60:	1000003c 	.word	0x1000003c
 8007c64:	20014044 	.word	0x20014044
 8007c68:	20013ddd 	.word	0x20013ddd
 8007c6c:	0802b7cc 	.word	0x0802b7cc
 8007c70:	20014374 	.word	0x20014374
 8007c74:	200140e4 	.word	0x200140e4
 8007c78:	20013dfc 	.word	0x20013dfc
 8007c7c:	20014380 	.word	0x20014380
 8007c80:	20013fa4 	.word	0x20013fa4
 8007c84:	20000050 	.word	0x20000050

08007c88 <check_param_u8>:

bool check_param_u8(uint8_t *param_send, uint8_t *param, char *key)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b086      	sub	sp, #24
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	60f8      	str	r0, [r7, #12]
 8007c90:	60b9      	str	r1, [r7, #8]
 8007c92:	607a      	str	r2, [r7, #4]
    bool check = false;
 8007c94:	2300      	movs	r3, #0
 8007c96:	75fb      	strb	r3, [r7, #23]
    if (*param_send != *param)
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	781a      	ldrb	r2, [r3, #0]
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	781b      	ldrb	r3, [r3, #0]
 8007ca0:	429a      	cmp	r2, r3
 8007ca2:	d01a      	beq.n	8007cda <check_param_u8+0x52>
    {
        DEBUG_SEND(" Param |%s| not equal { %i != %i }\n", key, *param_send, *param);
        *param_send = *param;
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	781a      	ldrb	r2, [r3, #0]
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	701a      	strb	r2, [r3, #0]
        check = true;
 8007cac:	2301      	movs	r3, #1
 8007cae:	75fb      	strb	r3, [r7, #23]
        if (!start_timer_f)
 8007cb0:	4b0c      	ldr	r3, [pc, #48]	; (8007ce4 <check_param_u8+0x5c>)
 8007cb2:	781b      	ldrb	r3, [r3, #0]
 8007cb4:	f083 0301 	eor.w	r3, r3, #1
 8007cb8:	b2db      	uxtb	r3, r3
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d008      	beq.n	8007cd0 <check_param_u8+0x48>
        {
            DEBUG_SEND("Timer start 5 sec\n");
            start_timer_f = true;
 8007cbe:	4b09      	ldr	r3, [pc, #36]	; (8007ce4 <check_param_u8+0x5c>)
 8007cc0:	2201      	movs	r2, #1
 8007cc2:	701a      	strb	r2, [r3, #0]
            server_time = HAL_GetTick();
 8007cc4:	f003 f872 	bl	800adac <HAL_GetTick>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	4a07      	ldr	r2, [pc, #28]	; (8007ce8 <check_param_u8+0x60>)
 8007ccc:	6013      	str	r3, [r2, #0]
 8007cce:	e004      	b.n	8007cda <check_param_u8+0x52>
        }
        else
        {
            DEBUG_SEND("Timer restart 5 sec\n");
            server_time = HAL_GetTick();
 8007cd0:	f003 f86c 	bl	800adac <HAL_GetTick>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	4a04      	ldr	r2, [pc, #16]	; (8007ce8 <check_param_u8+0x60>)
 8007cd8:	6013      	str	r3, [r2, #0]
        }
    }
    return check;
 8007cda:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3718      	adds	r7, #24
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}
 8007ce4:	200143d2 	.word	0x200143d2
 8007ce8:	2000005c 	.word	0x2000005c

08007cec <send_server>:

void send_server()
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	af00      	add	r7, sp, #0
	if (start_timer_f && (HAL_GetTick() - server_time) > 5000)
 8007cf0:	4b42      	ldr	r3, [pc, #264]	; (8007dfc <send_server+0x110>)
 8007cf2:	781b      	ldrb	r3, [r3, #0]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d00b      	beq.n	8007d10 <send_server+0x24>
 8007cf8:	f003 f858 	bl	800adac <HAL_GetTick>
 8007cfc:	4602      	mov	r2, r0
 8007cfe:	4b40      	ldr	r3, [pc, #256]	; (8007e00 <send_server+0x114>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	1ad3      	subs	r3, r2, r3
 8007d04:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d901      	bls.n	8007d10 <send_server+0x24>
		publish_from_timer();
 8007d0c:	f7ff ff08 	bl	8007b20 <publish_from_timer>

    if (check_param_u8(&device_check.state, &device->state, "State") ||
 8007d10:	4b3c      	ldr	r3, [pc, #240]	; (8007e04 <send_server+0x118>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	3302      	adds	r3, #2
 8007d16:	4a3c      	ldr	r2, [pc, #240]	; (8007e08 <send_server+0x11c>)
 8007d18:	4619      	mov	r1, r3
 8007d1a:	483c      	ldr	r0, [pc, #240]	; (8007e0c <send_server+0x120>)
 8007d1c:	f7ff ffb4 	bl	8007c88 <check_param_u8>
 8007d20:	4603      	mov	r3, r0
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d120      	bne.n	8007d68 <send_server+0x7c>
        check_param_u8(&device_check.inflow_speed, &device->inflow_speed, "Speed") ||
 8007d26:	4b37      	ldr	r3, [pc, #220]	; (8007e04 <send_server+0x118>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	330e      	adds	r3, #14
 8007d2c:	4a38      	ldr	r2, [pc, #224]	; (8007e10 <send_server+0x124>)
 8007d2e:	4619      	mov	r1, r3
 8007d30:	4838      	ldr	r0, [pc, #224]	; (8007e14 <send_server+0x128>)
 8007d32:	f7ff ffa9 	bl	8007c88 <check_param_u8>
 8007d36:	4603      	mov	r3, r0
    if (check_param_u8(&device_check.state, &device->state, "State") ||
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d115      	bne.n	8007d68 <send_server+0x7c>
        check_param_u8(&device_check.mode, &device->mode, "Mode") ||
 8007d3c:	4b31      	ldr	r3, [pc, #196]	; (8007e04 <send_server+0x118>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	330c      	adds	r3, #12
 8007d42:	4a35      	ldr	r2, [pc, #212]	; (8007e18 <send_server+0x12c>)
 8007d44:	4619      	mov	r1, r3
 8007d46:	4835      	ldr	r0, [pc, #212]	; (8007e1c <send_server+0x130>)
 8007d48:	f7ff ff9e 	bl	8007c88 <check_param_u8>
 8007d4c:	4603      	mov	r3, r0
        check_param_u8(&device_check.inflow_speed, &device->inflow_speed, "Speed") ||
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d10a      	bne.n	8007d68 <send_server+0x7c>
        check_param_u8(&device_check.temp_limit, &device->temp_limit, "Temp"))
 8007d52:	4b2c      	ldr	r3, [pc, #176]	; (8007e04 <send_server+0x118>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	3318      	adds	r3, #24
 8007d58:	4a31      	ldr	r2, [pc, #196]	; (8007e20 <send_server+0x134>)
 8007d5a:	4619      	mov	r1, r3
 8007d5c:	4831      	ldr	r0, [pc, #196]	; (8007e24 <send_server+0x138>)
 8007d5e:	f7ff ff93 	bl	8007c88 <check_param_u8>
 8007d62:	4603      	mov	r3, r0
        check_param_u8(&device_check.mode, &device->mode, "Mode") ||
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d002      	beq.n	8007d6e <send_server+0x82>

        send_array_device[CAPABILITIES] = true;
 8007d68:	4b2f      	ldr	r3, [pc, #188]	; (8007e28 <send_server+0x13c>)
 8007d6a:	2201      	movs	r2, #1
 8007d6c:	701a      	strb	r2, [r3, #0]

    if (check_param_u8(&device_check.error_temp_hot, &device->error_temp_hot, "temp_hot") ||
 8007d6e:	4b25      	ldr	r3, [pc, #148]	; (8007e04 <send_server+0x118>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	3303      	adds	r3, #3
 8007d74:	4a2d      	ldr	r2, [pc, #180]	; (8007e2c <send_server+0x140>)
 8007d76:	4619      	mov	r1, r3
 8007d78:	482d      	ldr	r0, [pc, #180]	; (8007e30 <send_server+0x144>)
 8007d7a:	f7ff ff85 	bl	8007c88 <check_param_u8>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d136      	bne.n	8007df2 <send_server+0x106>
        check_param_u8(&device_check.error_stop_hot, &device->error_stop_hot, "stop_hot") ||
 8007d84:	4b1f      	ldr	r3, [pc, #124]	; (8007e04 <send_server+0x118>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	3305      	adds	r3, #5
 8007d8a:	4a2a      	ldr	r2, [pc, #168]	; (8007e34 <send_server+0x148>)
 8007d8c:	4619      	mov	r1, r3
 8007d8e:	482a      	ldr	r0, [pc, #168]	; (8007e38 <send_server+0x14c>)
 8007d90:	f7ff ff7a 	bl	8007c88 <check_param_u8>
 8007d94:	4603      	mov	r3, r0
    if (check_param_u8(&device_check.error_temp_hot, &device->error_temp_hot, "temp_hot") ||
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d12b      	bne.n	8007df2 <send_server+0x106>
        check_param_u8(&device_check.error_temp_cold, &device->error_temp_cold, "temp_cold") ||
 8007d9a:	4b1a      	ldr	r3, [pc, #104]	; (8007e04 <send_server+0x118>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	3304      	adds	r3, #4
 8007da0:	4a26      	ldr	r2, [pc, #152]	; (8007e3c <send_server+0x150>)
 8007da2:	4619      	mov	r1, r3
 8007da4:	4826      	ldr	r0, [pc, #152]	; (8007e40 <send_server+0x154>)
 8007da6:	f7ff ff6f 	bl	8007c88 <check_param_u8>
 8007daa:	4603      	mov	r3, r0
        check_param_u8(&device_check.error_stop_hot, &device->error_stop_hot, "stop_hot") ||
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d120      	bne.n	8007df2 <send_server+0x106>
        check_param_u8(&device_check.error_stop_cold, &device->error_stop_cold, "stop_cold") ||
 8007db0:	4b14      	ldr	r3, [pc, #80]	; (8007e04 <send_server+0x118>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	3306      	adds	r3, #6
 8007db6:	4a23      	ldr	r2, [pc, #140]	; (8007e44 <send_server+0x158>)
 8007db8:	4619      	mov	r1, r3
 8007dba:	4823      	ldr	r0, [pc, #140]	; (8007e48 <send_server+0x15c>)
 8007dbc:	f7ff ff64 	bl	8007c88 <check_param_u8>
 8007dc0:	4603      	mov	r3, r0
        check_param_u8(&device_check.error_temp_cold, &device->error_temp_cold, "temp_cold") ||
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d115      	bne.n	8007df2 <send_server+0x106>
        check_param_u8(&device_check.error_ds18b20, &device->error_ds18b20, "ds18b20") ||
 8007dc6:	4b0f      	ldr	r3, [pc, #60]	; (8007e04 <send_server+0x118>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	3307      	adds	r3, #7
 8007dcc:	4a1f      	ldr	r2, [pc, #124]	; (8007e4c <send_server+0x160>)
 8007dce:	4619      	mov	r1, r3
 8007dd0:	481f      	ldr	r0, [pc, #124]	; (8007e50 <send_server+0x164>)
 8007dd2:	f7ff ff59 	bl	8007c88 <check_param_u8>
 8007dd6:	4603      	mov	r3, r0
        check_param_u8(&device_check.error_stop_cold, &device->error_stop_cold, "stop_cold") ||
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d10a      	bne.n	8007df2 <send_server+0x106>
        check_param_u8(&device_check.remote_control.error, &device->remote_control.error, "remote_control"))
 8007ddc:	4b09      	ldr	r3, [pc, #36]	; (8007e04 <send_server+0x118>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	330a      	adds	r3, #10
 8007de2:	4a1c      	ldr	r2, [pc, #112]	; (8007e54 <send_server+0x168>)
 8007de4:	4619      	mov	r1, r3
 8007de6:	481c      	ldr	r0, [pc, #112]	; (8007e58 <send_server+0x16c>)
 8007de8:	f7ff ff4e 	bl	8007c88 <check_param_u8>
 8007dec:	4603      	mov	r3, r0
        check_param_u8(&device_check.error_ds18b20, &device->error_ds18b20, "ds18b20") ||
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d002      	beq.n	8007df8 <send_server+0x10c>

        send_array_device[FAULTS] = true;
 8007df2:	4b0d      	ldr	r3, [pc, #52]	; (8007e28 <send_server+0x13c>)
 8007df4:	2201      	movs	r2, #1
 8007df6:	70da      	strb	r2, [r3, #3]
}
 8007df8:	bf00      	nop
 8007dfa:	bd80      	pop	{r7, pc}
 8007dfc:	200143d2 	.word	0x200143d2
 8007e00:	2000005c 	.word	0x2000005c
 8007e04:	20013e2c 	.word	0x20013e2c
 8007e08:	0802b7d0 	.word	0x0802b7d0
 8007e0c:	20013de2 	.word	0x20013de2
 8007e10:	0802b7d8 	.word	0x0802b7d8
 8007e14:	20013dee 	.word	0x20013dee
 8007e18:	0802b7e0 	.word	0x0802b7e0
 8007e1c:	20013dec 	.word	0x20013dec
 8007e20:	0802b7e8 	.word	0x0802b7e8
 8007e24:	20013df8 	.word	0x20013df8
 8007e28:	20000050 	.word	0x20000050
 8007e2c:	0802b7f0 	.word	0x0802b7f0
 8007e30:	20013de3 	.word	0x20013de3
 8007e34:	0802b7fc 	.word	0x0802b7fc
 8007e38:	20013de5 	.word	0x20013de5
 8007e3c:	0802b808 	.word	0x0802b808
 8007e40:	20013de4 	.word	0x20013de4
 8007e44:	0802b814 	.word	0x0802b814
 8007e48:	20013de6 	.word	0x20013de6
 8007e4c:	0802b820 	.word	0x0802b820
 8007e50:	20013de7 	.word	0x20013de7
 8007e54:	0802b828 	.word	0x0802b828
 8007e58:	20013dea 	.word	0x20013dea

08007e5c <set_sensor_value>:
    check_js_param_u8(data_json, "speed_num", &speed_num);
    check_js_param_u8(data_json, "value", &device->speed_arr[speed_num]);
}

void set_sensor_value(cJSON *data_json)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b082      	sub	sp, #8
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]

    if (check_js_param_double(data_json, "out", &sensors_data->out))
 8007e64:	4b10      	ldr	r3, [pc, #64]	; (8007ea8 <set_sensor_value+0x4c>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	461a      	mov	r2, r3
 8007e6a:	4910      	ldr	r1, [pc, #64]	; (8007eac <set_sensor_value+0x50>)
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f7fd ff1d 	bl	8005cac <check_js_param_double>
 8007e72:	4603      	mov	r3, r0
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d003      	beq.n	8007e80 <set_sensor_value+0x24>
        sensors_data->out_state = true;
 8007e78:	4b0b      	ldr	r3, [pc, #44]	; (8007ea8 <set_sensor_value+0x4c>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	2201      	movs	r2, #1
 8007e7e:	771a      	strb	r2, [r3, #28]
    if (check_js_param_double(data_json, "in", &sensors_data->in))
 8007e80:	4b09      	ldr	r3, [pc, #36]	; (8007ea8 <set_sensor_value+0x4c>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	3308      	adds	r3, #8
 8007e86:	461a      	mov	r2, r3
 8007e88:	4909      	ldr	r1, [pc, #36]	; (8007eb0 <set_sensor_value+0x54>)
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f7fd ff0e 	bl	8005cac <check_js_param_double>
 8007e90:	4603      	mov	r3, r0
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d003      	beq.n	8007e9e <set_sensor_value+0x42>
        sensors_data->in_state = true;
 8007e96:	4b04      	ldr	r3, [pc, #16]	; (8007ea8 <set_sensor_value+0x4c>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	775a      	strb	r2, [r3, #29]
    DEBUG_MQTT("Set out temp %0.1f\n", sensors_data->out);
    DEBUG_MQTT("Set in temp %0.1f\n", sensors_data->in);
}
 8007e9e:	bf00      	nop
 8007ea0:	3708      	adds	r7, #8
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}
 8007ea6:	bf00      	nop
 8007ea8:	20013e34 	.word	0x20013e34
 8007eac:	0802b84c 	.word	0x0802b84c
 8007eb0:	0802b850 	.word	0x0802b850

08007eb4 <firmware_handler>:
    if (error != NULL && state != NULL)
        DEBUG_MQTT("Set error %s state %i\n", error->valuestring, state->valueint);
}

void firmware_handler(cJSON *firmware_js)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b083      	sub	sp, #12
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
//                start_update_firmware_isr();
//        }
//        else
//            start_update_firmware_isr();
//    }
}
 8007ebc:	bf00      	nop
 8007ebe:	370c      	adds	r7, #12
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec6:	4770      	bx	lr

08007ec8 <error_handler>:

void error_handler(cJSON *error_js)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b082      	sub	sp, #8
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
    if (check_js_param_u8(error_js, "temp_hot", &device->error_temp_hot))
 8007ed0:	4b1d      	ldr	r3, [pc, #116]	; (8007f48 <error_handler+0x80>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	3303      	adds	r3, #3
 8007ed6:	461a      	mov	r2, r3
 8007ed8:	491c      	ldr	r1, [pc, #112]	; (8007f4c <error_handler+0x84>)
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f7fd fe32 	bl	8005b44 <check_js_param_u8>
    {
    }
    if (check_js_param_u8(error_js, "stop_hot", &device->error_stop_hot))
 8007ee0:	4b19      	ldr	r3, [pc, #100]	; (8007f48 <error_handler+0x80>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	3305      	adds	r3, #5
 8007ee6:	461a      	mov	r2, r3
 8007ee8:	4919      	ldr	r1, [pc, #100]	; (8007f50 <error_handler+0x88>)
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f7fd fe2a 	bl	8005b44 <check_js_param_u8>
    {
    }
    if (check_js_param_u8(error_js, "temp_cold", &device->error_temp_cold))
 8007ef0:	4b15      	ldr	r3, [pc, #84]	; (8007f48 <error_handler+0x80>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	3304      	adds	r3, #4
 8007ef6:	461a      	mov	r2, r3
 8007ef8:	4916      	ldr	r1, [pc, #88]	; (8007f54 <error_handler+0x8c>)
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f7fd fe22 	bl	8005b44 <check_js_param_u8>
    {
    }
    if (check_js_param_u8(error_js, "stop_cold", &device->error_stop_cold))
 8007f00:	4b11      	ldr	r3, [pc, #68]	; (8007f48 <error_handler+0x80>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	3306      	adds	r3, #6
 8007f06:	461a      	mov	r2, r3
 8007f08:	4913      	ldr	r1, [pc, #76]	; (8007f58 <error_handler+0x90>)
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f7fd fe1a 	bl	8005b44 <check_js_param_u8>
    {
    }
    if (cJSON_GetObjectItem(error_js, "reset_error") != NULL)
 8007f10:	4912      	ldr	r1, [pc, #72]	; (8007f5c <error_handler+0x94>)
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f7fd fc51 	bl	80057ba <cJSON_GetObjectItem>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d00f      	beq.n	8007f3e <error_handler+0x76>
    {
        device->error_temp_hot = false;
 8007f1e:	4b0a      	ldr	r3, [pc, #40]	; (8007f48 <error_handler+0x80>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	2200      	movs	r2, #0
 8007f24:	70da      	strb	r2, [r3, #3]
        device->error_stop_hot = false;
 8007f26:	4b08      	ldr	r3, [pc, #32]	; (8007f48 <error_handler+0x80>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	715a      	strb	r2, [r3, #5]
        device->error_temp_cold = false;
 8007f2e:	4b06      	ldr	r3, [pc, #24]	; (8007f48 <error_handler+0x80>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	2200      	movs	r2, #0
 8007f34:	711a      	strb	r2, [r3, #4]
        device->error_stop_cold = false;
 8007f36:	4b04      	ldr	r3, [pc, #16]	; (8007f48 <error_handler+0x80>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	719a      	strb	r2, [r3, #6]
    }
}
 8007f3e:	bf00      	nop
 8007f40:	3708      	adds	r7, #8
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}
 8007f46:	bf00      	nop
 8007f48:	20013e2c 	.word	0x20013e2c
 8007f4c:	0802b868 	.word	0x0802b868
 8007f50:	0802b874 	.word	0x0802b874
 8007f54:	0802b880 	.word	0x0802b880
 8007f58:	0802b88c 	.word	0x0802b88c
 8007f5c:	0802b898 	.word	0x0802b898

08007f60 <reset_handler>:
void reset_handler(cJSON *reset_js)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b090      	sub	sp, #64	; 0x40
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
    char reset_option[50];
    if (check_js_param_char(reset_js, "wireless", &reset_option))
 8007f68:	f107 030c 	add.w	r3, r7, #12
 8007f6c:	461a      	mov	r2, r3
 8007f6e:	4913      	ldr	r1, [pc, #76]	; (8007fbc <reset_handler+0x5c>)
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f7fd febf 	bl	8005cf4 <check_js_param_char>
 8007f76:	4603      	mov	r3, r0
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d001      	beq.n	8007f80 <reset_handler+0x20>
    {
        first_init_wireless();
 8007f7c:	f001 f960 	bl	8009240 <first_init_wireless>
    }
    if (check_js_param_char(reset_js, "device", &reset_option))
 8007f80:	f107 030c 	add.w	r3, r7, #12
 8007f84:	461a      	mov	r2, r3
 8007f86:	490e      	ldr	r1, [pc, #56]	; (8007fc0 <reset_handler+0x60>)
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f7fd feb3 	bl	8005cf4 <check_js_param_char>
 8007f8e:	4603      	mov	r3, r0
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d001      	beq.n	8007f98 <reset_handler+0x38>
    {
        first_init_device();
 8007f94:	f001 f9ae 	bl	80092f4 <first_init_device>
    }
    if (check_js_param_char(reset_js, "all", &reset_option))
 8007f98:	f107 030c 	add.w	r3, r7, #12
 8007f9c:	461a      	mov	r2, r3
 8007f9e:	4909      	ldr	r1, [pc, #36]	; (8007fc4 <reset_handler+0x64>)
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f7fd fea7 	bl	8005cf4 <check_js_param_char>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d003      	beq.n	8007fb4 <reset_handler+0x54>
    {
        first_init_device();
 8007fac:	f001 f9a2 	bl	80092f4 <first_init_device>
        first_init_wireless();
 8007fb0:	f001 f946 	bl	8009240 <first_init_wireless>
    }
}
 8007fb4:	bf00      	nop
 8007fb6:	3740      	adds	r7, #64	; 0x40
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}
 8007fbc:	0802b8a4 	.word	0x0802b8a4
 8007fc0:	0802b8b0 	.word	0x0802b8b0
 8007fc4:	0802b8b8 	.word	0x0802b8b8

08007fc8 <logging_handler>:

void logging_handler(cJSON *logging_js)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b090      	sub	sp, #64	; 0x40
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
    char log_type[50];
    check_js_param_char(logging_js, "type", log_type);
 8007fd0:	f107 030c 	add.w	r3, r7, #12
 8007fd4:	461a      	mov	r2, r3
 8007fd6:	491b      	ldr	r1, [pc, #108]	; (8008044 <logging_handler+0x7c>)
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f7fd fe8b 	bl	8005cf4 <check_js_param_char>
    if (strcmp("system", log_type) == 0)
 8007fde:	f107 030c 	add.w	r3, r7, #12
 8007fe2:	4619      	mov	r1, r3
 8007fe4:	4818      	ldr	r0, [pc, #96]	; (8008048 <logging_handler+0x80>)
 8007fe6:	f7f8 f8f3 	bl	80001d0 <strcmp>
 8007fea:	4603      	mov	r3, r0
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d102      	bne.n	8007ff6 <logging_handler+0x2e>
    {
        publish_system();
 8007ff0:	f7ff fafc 	bl	80075ec <publish_system>
    }
    else if (strcmp("extra_options", log_type) == 0)
    {
        publish_extra_options();
    }
}
 8007ff4:	e022      	b.n	800803c <logging_handler+0x74>
    else if (strcmp("settings", log_type) == 0)
 8007ff6:	f107 030c 	add.w	r3, r7, #12
 8007ffa:	4619      	mov	r1, r3
 8007ffc:	4813      	ldr	r0, [pc, #76]	; (800804c <logging_handler+0x84>)
 8007ffe:	f7f8 f8e7 	bl	80001d0 <strcmp>
 8008002:	4603      	mov	r3, r0
 8008004:	2b00      	cmp	r3, #0
 8008006:	d102      	bne.n	800800e <logging_handler+0x46>
        publish_settings();
 8008008:	f7ff fb1c 	bl	8007644 <publish_settings>
}
 800800c:	e016      	b.n	800803c <logging_handler+0x74>
    else if (strcmp("capabilities", log_type) == 0)
 800800e:	f107 030c 	add.w	r3, r7, #12
 8008012:	4619      	mov	r1, r3
 8008014:	480e      	ldr	r0, [pc, #56]	; (8008050 <logging_handler+0x88>)
 8008016:	f7f8 f8db 	bl	80001d0 <strcmp>
 800801a:	4603      	mov	r3, r0
 800801c:	2b00      	cmp	r3, #0
 800801e:	d102      	bne.n	8008026 <logging_handler+0x5e>
        publish_capabilities();
 8008020:	f7ff fabe 	bl	80075a0 <publish_capabilities>
}
 8008024:	e00a      	b.n	800803c <logging_handler+0x74>
    else if (strcmp("extra_options", log_type) == 0)
 8008026:	f107 030c 	add.w	r3, r7, #12
 800802a:	4619      	mov	r1, r3
 800802c:	4809      	ldr	r0, [pc, #36]	; (8008054 <logging_handler+0x8c>)
 800802e:	f7f8 f8cf 	bl	80001d0 <strcmp>
 8008032:	4603      	mov	r3, r0
 8008034:	2b00      	cmp	r3, #0
 8008036:	d101      	bne.n	800803c <logging_handler+0x74>
        publish_extra_options();
 8008038:	f7ff fb50 	bl	80076dc <publish_extra_options>
}
 800803c:	bf00      	nop
 800803e:	3740      	adds	r7, #64	; 0x40
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}
 8008044:	0802b8bc 	.word	0x0802b8bc
 8008048:	0802b8c4 	.word	0x0802b8c4
 800804c:	0802b8cc 	.word	0x0802b8cc
 8008050:	0802b8d8 	.word	0x0802b8d8
 8008054:	0802b8e8 	.word	0x0802b8e8

08008058 <set_extra_options_handler>:

void set_extra_options_handler(cJSON *data_json)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b082      	sub	sp, #8
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
    check_js_param_u8(data_json, "deviation", &device->extra_options.deviation);
 8008060:	4b0e      	ldr	r3, [pc, #56]	; (800809c <set_extra_options_handler+0x44>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	3319      	adds	r3, #25
 8008066:	461a      	mov	r2, r3
 8008068:	490d      	ldr	r1, [pc, #52]	; (80080a0 <set_extra_options_handler+0x48>)
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f7fd fd6a 	bl	8005b44 <check_js_param_u8>
    check_js_param_u8(data_json, "check_time", &device->extra_options.check_time);
 8008070:	4b0a      	ldr	r3, [pc, #40]	; (800809c <set_extra_options_handler+0x44>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	331a      	adds	r3, #26
 8008076:	461a      	mov	r2, r3
 8008078:	490a      	ldr	r1, [pc, #40]	; (80080a4 <set_extra_options_handler+0x4c>)
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f7fd fd62 	bl	8005b44 <check_js_param_u8>
    check_js_param_u8(data_json, "step_pwm", &device->extra_options.step_pwm);
 8008080:	4b06      	ldr	r3, [pc, #24]	; (800809c <set_extra_options_handler+0x44>)
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	331b      	adds	r3, #27
 8008086:	461a      	mov	r2, r3
 8008088:	4907      	ldr	r1, [pc, #28]	; (80080a8 <set_extra_options_handler+0x50>)
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f7fd fd5a 	bl	8005b44 <check_js_param_u8>
    DEBUG_MQTT("Set deviation %i\n", device->extra_options.deviation);
    DEBUG_MQTT("Set check_time %i\n", device->extra_options.check_time);
    DEBUG_MQTT("Set step_pwm %i\n", device->extra_options.step_pwm);
    write_device_params();
 8008090:	f001 f9a8 	bl	80093e4 <write_device_params>
}
 8008094:	bf00      	nop
 8008096:	3708      	adds	r7, #8
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}
 800809c:	20013e2c 	.word	0x20013e2c
 80080a0:	0802b8f8 	.word	0x0802b8f8
 80080a4:	0802b904 	.word	0x0802b904
 80080a8:	0802b910 	.word	0x0802b910

080080ac <system_topic_handler>:

void system_topic_handler(char *data)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b094      	sub	sp, #80	; 0x50
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
    if (data == NULL)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d10f      	bne.n	80080da <system_topic_handler+0x2e>
    {
        const char *error_ptr = cJSON_GetErrorPtr();
 80080ba:	f7fb fc37 	bl	800392c <cJSON_GetErrorPtr>
 80080be:	60b8      	str	r0, [r7, #8]
        if (error_ptr != NULL)
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	f000 80a5 	beq.w	8008212 <system_topic_handler+0x166>
        {
            fprintf(stderr, "Error before: %s\n", error_ptr);
 80080c8:	4b55      	ldr	r3, [pc, #340]	; (8008220 <system_topic_handler+0x174>)
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	68db      	ldr	r3, [r3, #12]
 80080ce:	68ba      	ldr	r2, [r7, #8]
 80080d0:	4954      	ldr	r1, [pc, #336]	; (8008224 <system_topic_handler+0x178>)
 80080d2:	4618      	mov	r0, r3
 80080d4:	f01d fcd0 	bl	8025a78 <fiprintf>
        }
        return;
 80080d8:	e09b      	b.n	8008212 <system_topic_handler+0x166>
    }
    cJSON *data_json = cJSON_Parse(data);
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f7fc fcf4 	bl	8004ac8 <cJSON_Parse>
 80080e0:	6438      	str	r0, [r7, #64]	; 0x40
    if (data == NULL)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d10f      	bne.n	8008108 <system_topic_handler+0x5c>
    {
        const char *error_ptr = cJSON_GetErrorPtr();
 80080e8:	f7fb fc20 	bl	800392c <cJSON_GetErrorPtr>
 80080ec:	60f8      	str	r0, [r7, #12]
        if (error_ptr != NULL)
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	f000 8090 	beq.w	8008216 <system_topic_handler+0x16a>
        {
            fprintf(stderr, "Error before: %s\n", error_ptr);
 80080f6:	4b4a      	ldr	r3, [pc, #296]	; (8008220 <system_topic_handler+0x174>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	68db      	ldr	r3, [r3, #12]
 80080fc:	68fa      	ldr	r2, [r7, #12]
 80080fe:	4949      	ldr	r1, [pc, #292]	; (8008224 <system_topic_handler+0x178>)
 8008100:	4618      	mov	r0, r3
 8008102:	f01d fcb9 	bl	8025a78 <fiprintf>
        }
        return;
 8008106:	e086      	b.n	8008216 <system_topic_handler+0x16a>
    }
    // Ищем основные команды
    cJSON *error_js_arr = cJSON_GetObjectItem(data_json, "errors");
 8008108:	4947      	ldr	r1, [pc, #284]	; (8008228 <system_topic_handler+0x17c>)
 800810a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800810c:	f7fd fb55 	bl	80057ba <cJSON_GetObjectItem>
 8008110:	63f8      	str	r0, [r7, #60]	; 0x3c
    cJSON *reset_js_arr = cJSON_GetObjectItem(data_json, "reset");
 8008112:	4946      	ldr	r1, [pc, #280]	; (800822c <system_topic_handler+0x180>)
 8008114:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8008116:	f7fd fb50 	bl	80057ba <cJSON_GetObjectItem>
 800811a:	63b8      	str	r0, [r7, #56]	; 0x38
    cJSON *firmware_js_arr = cJSON_GetObjectItem(data_json, "firmware");
 800811c:	4944      	ldr	r1, [pc, #272]	; (8008230 <system_topic_handler+0x184>)
 800811e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8008120:	f7fd fb4b 	bl	80057ba <cJSON_GetObjectItem>
 8008124:	6378      	str	r0, [r7, #52]	; 0x34
    cJSON *test_sensor_js = cJSON_GetObjectItem(data_json, "test_sensor");
 8008126:	4943      	ldr	r1, [pc, #268]	; (8008234 <system_topic_handler+0x188>)
 8008128:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800812a:	f7fd fb46 	bl	80057ba <cJSON_GetObjectItem>
 800812e:	6338      	str	r0, [r7, #48]	; 0x30
    cJSON *loggin_js = cJSON_GetObjectItem(data_json, "logging");
 8008130:	4941      	ldr	r1, [pc, #260]	; (8008238 <system_topic_handler+0x18c>)
 8008132:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8008134:	f7fd fb41 	bl	80057ba <cJSON_GetObjectItem>
 8008138:	62f8      	str	r0, [r7, #44]	; 0x2c
    cJSON *extra_options_js = cJSON_GetObjectItem(data_json, "extra_options");
 800813a:	4940      	ldr	r1, [pc, #256]	; (800823c <system_topic_handler+0x190>)
 800813c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800813e:	f7fd fb3c 	bl	80057ba <cJSON_GetObjectItem>
 8008142:	62b8      	str	r0, [r7, #40]	; 0x28
    if (loggin_js != NULL)
 8008144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008146:	2b00      	cmp	r3, #0
 8008148:	d002      	beq.n	8008150 <system_topic_handler+0xa4>
        logging_handler(loggin_js);
 800814a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800814c:	f7ff ff3c 	bl	8007fc8 <logging_handler>
    if (test_sensor_js != NULL)
 8008150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008152:	2b00      	cmp	r3, #0
 8008154:	d002      	beq.n	800815c <system_topic_handler+0xb0>
        set_sensor_value(test_sensor_js);
 8008156:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008158:	f7ff fe80 	bl	8007e5c <set_sensor_value>
    if (extra_options_js != NULL)
 800815c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800815e:	2b00      	cmp	r3, #0
 8008160:	d002      	beq.n	8008168 <system_topic_handler+0xbc>
        set_extra_options_handler(extra_options_js);
 8008162:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008164:	f7ff ff78 	bl	8008058 <set_extra_options_handler>
    if (error_js_arr != NULL)
 8008168:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800816a:	2b00      	cmp	r3, #0
 800816c:	d015      	beq.n	800819a <system_topic_handler+0xee>
    {
        int js_size = cJSON_GetArraySize(error_js_arr);
 800816e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008170:	f7fd fa83 	bl	800567a <cJSON_GetArraySize>
 8008174:	6278      	str	r0, [r7, #36]	; 0x24

        DEBUG_MQTT("Get error_js_arr %i\n", js_size);
        for (int count = 0; count < js_size; count++)
 8008176:	2300      	movs	r3, #0
 8008178:	64fb      	str	r3, [r7, #76]	; 0x4c
 800817a:	e00a      	b.n	8008192 <system_topic_handler+0xe6>
        {
            cJSON *error_js = cJSON_GetArrayItem(error_js_arr, count);
 800817c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800817e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008180:	f7fd fabf 	bl	8005702 <cJSON_GetArrayItem>
 8008184:	6238      	str	r0, [r7, #32]
            error_handler(error_js);
 8008186:	6a38      	ldr	r0, [r7, #32]
 8008188:	f7ff fe9e 	bl	8007ec8 <error_handler>
        for (int count = 0; count < js_size; count++)
 800818c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800818e:	3301      	adds	r3, #1
 8008190:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008192:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008196:	429a      	cmp	r2, r3
 8008198:	dbf0      	blt.n	800817c <system_topic_handler+0xd0>
        }
    }
    if (reset_js_arr != NULL)
 800819a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800819c:	2b00      	cmp	r3, #0
 800819e:	d015      	beq.n	80081cc <system_topic_handler+0x120>
    {
        int js_size = cJSON_GetArraySize(reset_js_arr);
 80081a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80081a2:	f7fd fa6a 	bl	800567a <cJSON_GetArraySize>
 80081a6:	61f8      	str	r0, [r7, #28]

        DEBUG_MQTT("Get reset_js_arr %i\n", js_size);
        for (int count = 0; count < js_size; count++)
 80081a8:	2300      	movs	r3, #0
 80081aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80081ac:	e00a      	b.n	80081c4 <system_topic_handler+0x118>
        {
            cJSON *reset_js = cJSON_GetArrayItem(reset_js_arr, count);
 80081ae:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80081b0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80081b2:	f7fd faa6 	bl	8005702 <cJSON_GetArrayItem>
 80081b6:	61b8      	str	r0, [r7, #24]
            reset_handler(reset_js);
 80081b8:	69b8      	ldr	r0, [r7, #24]
 80081ba:	f7ff fed1 	bl	8007f60 <reset_handler>
        for (int count = 0; count < js_size; count++)
 80081be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081c0:	3301      	adds	r3, #1
 80081c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80081c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80081c6:	69fb      	ldr	r3, [r7, #28]
 80081c8:	429a      	cmp	r2, r3
 80081ca:	dbf0      	blt.n	80081ae <system_topic_handler+0x102>
        }
    }
    if (firmware_js_arr != NULL)
 80081cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d015      	beq.n	80081fe <system_topic_handler+0x152>
    {
        int js_size = cJSON_GetArraySize(firmware_js_arr);
 80081d2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80081d4:	f7fd fa51 	bl	800567a <cJSON_GetArraySize>
 80081d8:	6178      	str	r0, [r7, #20]

        DEBUG_MQTT("Get firmware_js_arr %i\n", js_size);
        for (int count = 0; count < js_size; count++)
 80081da:	2300      	movs	r3, #0
 80081dc:	647b      	str	r3, [r7, #68]	; 0x44
 80081de:	e00a      	b.n	80081f6 <system_topic_handler+0x14a>
        {
            cJSON *firmware_js = cJSON_GetArrayItem(firmware_js_arr, count);
 80081e0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80081e2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80081e4:	f7fd fa8d 	bl	8005702 <cJSON_GetArrayItem>
 80081e8:	6138      	str	r0, [r7, #16]
            firmware_handler(firmware_js);
 80081ea:	6938      	ldr	r0, [r7, #16]
 80081ec:	f7ff fe62 	bl	8007eb4 <firmware_handler>
        for (int count = 0; count < js_size; count++)
 80081f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081f2:	3301      	adds	r3, #1
 80081f4:	647b      	str	r3, [r7, #68]	; 0x44
 80081f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80081f8:	697b      	ldr	r3, [r7, #20]
 80081fa:	429a      	cmp	r2, r3
 80081fc:	dbf0      	blt.n	80081e0 <system_topic_handler+0x134>
        }
    }
    if (extra_options_js != NULL)
 80081fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008200:	2b00      	cmp	r3, #0
 8008202:	d002      	beq.n	800820a <system_topic_handler+0x15e>
    {
        set_extra_options_handler(extra_options_js);
 8008204:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008206:	f7ff ff27 	bl	8008058 <set_extra_options_handler>
    }
    cJSON_Delete(data_json);
 800820a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800820c:	f7fb fc46 	bl	8003a9c <cJSON_Delete>
 8008210:	e002      	b.n	8008218 <system_topic_handler+0x16c>
        return;
 8008212:	bf00      	nop
 8008214:	e000      	b.n	8008218 <system_topic_handler+0x16c>
        return;
 8008216:	bf00      	nop
}
 8008218:	3750      	adds	r7, #80	; 0x50
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}
 800821e:	bf00      	nop
 8008220:	10000070 	.word	0x10000070
 8008224:	0802b91c 	.word	0x0802b91c
 8008228:	0802b930 	.word	0x0802b930
 800822c:	0802b938 	.word	0x0802b938
 8008230:	0802b940 	.word	0x0802b940
 8008234:	0802b94c 	.word	0x0802b94c
 8008238:	0802b958 	.word	0x0802b958
 800823c:	0802b8e8 	.word	0x0802b8e8

08008240 <open_damper>:
#define OPENING_TIME (45 * SECOND)

uint32_t damper_time;

void open_damper()
{
 8008240:	b580      	push	{r7, lr}
 8008242:	af00      	add	r7, sp, #0
    if (damper_state == 0)
 8008244:	4b0b      	ldr	r3, [pc, #44]	; (8008274 <open_damper+0x34>)
 8008246:	781b      	ldrb	r3, [r3, #0]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d110      	bne.n	800826e <open_damper+0x2e>
    {
    	damper_state = 1;
 800824c:	4b09      	ldr	r3, [pc, #36]	; (8008274 <open_damper+0x34>)
 800824e:	2201      	movs	r2, #1
 8008250:	701a      	strb	r2, [r3, #0]
    	damper_time = HAL_GetTick();
 8008252:	f002 fdab 	bl	800adac <HAL_GetTick>
 8008256:	4603      	mov	r3, r0
 8008258:	4a07      	ldr	r2, [pc, #28]	; (8008278 <open_damper+0x38>)
 800825a:	6013      	str	r3, [r2, #0]
    	HAL_GPIO_WritePin(RELAY_CH1_GPIO_Port, RELAY_CH1_Pin, GPIO_PIN_SET);
 800825c:	2201      	movs	r2, #1
 800825e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008262:	4806      	ldr	r0, [pc, #24]	; (800827c <open_damper+0x3c>)
 8008264:	f005 f90c 	bl	800d480 <HAL_GPIO_WritePin>
        DEBUG_DAMP("opens damper\n");
 8008268:	4805      	ldr	r0, [pc, #20]	; (8008280 <open_damper+0x40>)
 800826a:	f01e fbb5 	bl	80269d8 <puts>
    }
}
 800826e:	bf00      	nop
 8008270:	bd80      	pop	{r7, pc}
 8008272:	bf00      	nop
 8008274:	20014309 	.word	0x20014309
 8008278:	200143d4 	.word	0x200143d4
 800827c:	40020c00 	.word	0x40020c00
 8008280:	0802b960 	.word	0x0802b960

08008284 <close_damper>:

void close_damper()
{
 8008284:	b580      	push	{r7, lr}
 8008286:	af00      	add	r7, sp, #0
	damper_state = 0;
 8008288:	4b06      	ldr	r3, [pc, #24]	; (80082a4 <close_damper+0x20>)
 800828a:	2200      	movs	r2, #0
 800828c:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(RELAY_CH1_GPIO_Port, RELAY_CH1_Pin, GPIO_PIN_RESET);
 800828e:	2200      	movs	r2, #0
 8008290:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008294:	4804      	ldr	r0, [pc, #16]	; (80082a8 <close_damper+0x24>)
 8008296:	f005 f8f3 	bl	800d480 <HAL_GPIO_WritePin>
	DEBUG_DAMP("close damper\n");
 800829a:	4804      	ldr	r0, [pc, #16]	; (80082ac <close_damper+0x28>)
 800829c:	f01e fb9c 	bl	80269d8 <puts>
}
 80082a0:	bf00      	nop
 80082a2:	bd80      	pop	{r7, pc}
 80082a4:	20014309 	.word	0x20014309
 80082a8:	40020c00 	.word	0x40020c00
 80082ac:	0802b978 	.word	0x0802b978

080082b0 <DamperTask>:

void DamperTask(void *argument)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b082      	sub	sp, #8
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
	damper_state = 0;
 80082b8:	4b2a      	ldr	r3, [pc, #168]	; (8008364 <DamperTask+0xb4>)
 80082ba:	2200      	movs	r2, #0
 80082bc:	701a      	strb	r2, [r3, #0]
    for(;;)
    {
    	if(device->state == ON && device->error_stop_hot == false && device->error_stop_cold == false && device->error_ds18b20 == false &&
 80082be:	4b2a      	ldr	r3, [pc, #168]	; (8008368 <DamperTask+0xb8>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	789b      	ldrb	r3, [r3, #2]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d044      	beq.n	8008352 <DamperTask+0xa2>
 80082c8:	4b27      	ldr	r3, [pc, #156]	; (8008368 <DamperTask+0xb8>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	795b      	ldrb	r3, [r3, #5]
 80082ce:	f083 0301 	eor.w	r3, r3, #1
 80082d2:	b2db      	uxtb	r3, r3
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d03c      	beq.n	8008352 <DamperTask+0xa2>
 80082d8:	4b23      	ldr	r3, [pc, #140]	; (8008368 <DamperTask+0xb8>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	799b      	ldrb	r3, [r3, #6]
 80082de:	f083 0301 	eor.w	r3, r3, #1
 80082e2:	b2db      	uxtb	r3, r3
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d034      	beq.n	8008352 <DamperTask+0xa2>
 80082e8:	4b1f      	ldr	r3, [pc, #124]	; (8008368 <DamperTask+0xb8>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	79db      	ldrb	r3, [r3, #7]
 80082ee:	f083 0301 	eor.w	r3, r3, #1
 80082f2:	b2db      	uxtb	r3, r3
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d02c      	beq.n	8008352 <DamperTask+0xa2>
            sensors_data->out_state && sensors_data->in_state && ds_count == 2 && device->error_fan == false)
 80082f8:	4b1c      	ldr	r3, [pc, #112]	; (800836c <DamperTask+0xbc>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	7f1b      	ldrb	r3, [r3, #28]
    	if(device->state == ON && device->error_stop_hot == false && device->error_stop_cold == false && device->error_ds18b20 == false &&
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d027      	beq.n	8008352 <DamperTask+0xa2>
            sensors_data->out_state && sensors_data->in_state && ds_count == 2 && device->error_fan == false)
 8008302:	4b1a      	ldr	r3, [pc, #104]	; (800836c <DamperTask+0xbc>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	7f5b      	ldrb	r3, [r3, #29]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d022      	beq.n	8008352 <DamperTask+0xa2>
 800830c:	4b18      	ldr	r3, [pc, #96]	; (8008370 <DamperTask+0xc0>)
 800830e:	781b      	ldrb	r3, [r3, #0]
 8008310:	2b02      	cmp	r3, #2
 8008312:	d11e      	bne.n	8008352 <DamperTask+0xa2>
 8008314:	4b14      	ldr	r3, [pc, #80]	; (8008368 <DamperTask+0xb8>)
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	7a1b      	ldrb	r3, [r3, #8]
 800831a:	f083 0301 	eor.w	r3, r3, #1
 800831e:	b2db      	uxtb	r3, r3
 8008320:	2b00      	cmp	r3, #0
 8008322:	d016      	beq.n	8008352 <DamperTask+0xa2>
    	{
    		open_damper();
 8008324:	f7ff ff8c 	bl	8008240 <open_damper>
    		if(damper_state == 1 && ((HAL_GetTick() - damper_time) > OPENING_TIME))
 8008328:	4b0e      	ldr	r3, [pc, #56]	; (8008364 <DamperTask+0xb4>)
 800832a:	781b      	ldrb	r3, [r3, #0]
 800832c:	2b01      	cmp	r3, #1
 800832e:	d113      	bne.n	8008358 <DamperTask+0xa8>
 8008330:	f002 fd3c 	bl	800adac <HAL_GetTick>
 8008334:	4602      	mov	r2, r0
 8008336:	4b0f      	ldr	r3, [pc, #60]	; (8008374 <DamperTask+0xc4>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	1ad3      	subs	r3, r2, r3
 800833c:	f64a 72c8 	movw	r2, #45000	; 0xafc8
 8008340:	4293      	cmp	r3, r2
 8008342:	d909      	bls.n	8008358 <DamperTask+0xa8>
    		{
    			damper_state = 2;
 8008344:	4b07      	ldr	r3, [pc, #28]	; (8008364 <DamperTask+0xb4>)
 8008346:	2202      	movs	r2, #2
 8008348:	701a      	strb	r2, [r3, #0]
    			DEBUG_DAMP("opened damper\n");
 800834a:	480b      	ldr	r0, [pc, #44]	; (8008378 <DamperTask+0xc8>)
 800834c:	f01e fb44 	bl	80269d8 <puts>
    		if(damper_state == 1 && ((HAL_GetTick() - damper_time) > OPENING_TIME))
 8008350:	e002      	b.n	8008358 <DamperTask+0xa8>
    		}
    	}
        else
        	close_damper();
 8008352:	f7ff ff97 	bl	8008284 <close_damper>
 8008356:	e000      	b.n	800835a <DamperTask+0xaa>
    		if(damper_state == 1 && ((HAL_GetTick() - damper_time) > OPENING_TIME))
 8008358:	bf00      	nop
        osDelay(1000);
 800835a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800835e:	f009 fd1c 	bl	8011d9a <osDelay>
    	if(device->state == ON && device->error_stop_hot == false && device->error_stop_cold == false && device->error_ds18b20 == false &&
 8008362:	e7ac      	b.n	80082be <DamperTask+0xe>
 8008364:	20014309 	.word	0x20014309
 8008368:	20013e2c 	.word	0x20013e2c
 800836c:	20013e34 	.word	0x20013e34
 8008370:	20014319 	.word	0x20014319
 8008374:	200143d4 	.word	0x200143d4
 8008378:	0802b990 	.word	0x0802b990

0800837c <set_inflow_fan1>:
#include "fan.h"
#include "tim.h"

void set_inflow_fan1(uint8_t value)
{
 800837c:	b480      	push	{r7}
 800837e:	b083      	sub	sp, #12
 8008380:	af00      	add	r7, sp, #0
 8008382:	4603      	mov	r3, r0
 8008384:	71fb      	strb	r3, [r7, #7]
	inflow_power1 = value;
 8008386:	4a0b      	ldr	r2, [pc, #44]	; (80083b4 <set_inflow_fan1+0x38>)
 8008388:	79fb      	ldrb	r3, [r7, #7]
 800838a:	7013      	strb	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, value * 65535 / 100);
 800838c:	79fa      	ldrb	r2, [r7, #7]
 800838e:	4613      	mov	r3, r2
 8008390:	041b      	lsls	r3, r3, #16
 8008392:	1a9b      	subs	r3, r3, r2
 8008394:	4a08      	ldr	r2, [pc, #32]	; (80083b8 <set_inflow_fan1+0x3c>)
 8008396:	fb82 1203 	smull	r1, r2, r2, r3
 800839a:	1152      	asrs	r2, r2, #5
 800839c:	17db      	asrs	r3, r3, #31
 800839e:	1ad2      	subs	r2, r2, r3
 80083a0:	4b06      	ldr	r3, [pc, #24]	; (80083bc <set_inflow_fan1+0x40>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	639a      	str	r2, [r3, #56]	; 0x38
}
 80083a6:	bf00      	nop
 80083a8:	370c      	adds	r7, #12
 80083aa:	46bd      	mov	sp, r7
 80083ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b0:	4770      	bx	lr
 80083b2:	bf00      	nop
 80083b4:	200142f8 	.word	0x200142f8
 80083b8:	51eb851f 	.word	0x51eb851f
 80083bc:	200145a0 	.word	0x200145a0

080083c0 <link_callback_IP>:
		}
	 }
}

void link_callback_IP()
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	af00      	add	r7, sp, #0
    if (link_IP == true && service_response == 0)
 80083c4:	4b0e      	ldr	r3, [pc, #56]	; (8008400 <link_callback_IP+0x40>)
 80083c6:	781b      	ldrb	r3, [r3, #0]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d007      	beq.n	80083dc <link_callback_IP+0x1c>
 80083cc:	4b0d      	ldr	r3, [pc, #52]	; (8008404 <link_callback_IP+0x44>)
 80083ce:	781b      	ldrb	r3, [r3, #0]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d103      	bne.n	80083dc <link_callback_IP+0x1c>
    	HAL_GPIO_TogglePin(LED_LINK_GPIO_Port, LED_LINK_Pin);
 80083d4:	2120      	movs	r1, #32
 80083d6:	480c      	ldr	r0, [pc, #48]	; (8008408 <link_callback_IP+0x48>)
 80083d8:	f005 f86b 	bl	800d4b2 <HAL_GPIO_TogglePin>
    if (service_response == 3)
 80083dc:	4b09      	ldr	r3, [pc, #36]	; (8008404 <link_callback_IP+0x44>)
 80083de:	781b      	ldrb	r3, [r3, #0]
 80083e0:	2b03      	cmp	r3, #3
 80083e2:	d103      	bne.n	80083ec <link_callback_IP+0x2c>
    	HAL_GPIO_TogglePin(LED_WORK_GPIO_Port, LED_WORK_Pin);
 80083e4:	2140      	movs	r1, #64	; 0x40
 80083e6:	4808      	ldr	r0, [pc, #32]	; (8008408 <link_callback_IP+0x48>)
 80083e8:	f005 f863 	bl	800d4b2 <HAL_GPIO_TogglePin>
    if (service_response == 4)
 80083ec:	4b05      	ldr	r3, [pc, #20]	; (8008404 <link_callback_IP+0x44>)
 80083ee:	781b      	ldrb	r3, [r3, #0]
 80083f0:	2b04      	cmp	r3, #4
 80083f2:	d103      	bne.n	80083fc <link_callback_IP+0x3c>
    	HAL_GPIO_TogglePin(LED_FAILURE_GPIO_Port, LED_FAILURE_Pin);
 80083f4:	2180      	movs	r1, #128	; 0x80
 80083f6:	4804      	ldr	r0, [pc, #16]	; (8008408 <link_callback_IP+0x48>)
 80083f8:	f005 f85b 	bl	800d4b2 <HAL_GPIO_TogglePin>
}
 80083fc:	bf00      	nop
 80083fe:	bd80      	pop	{r7, pc}
 8008400:	200143d8 	.word	0x200143d8
 8008404:	20000064 	.word	0x20000064
 8008408:	40020c00 	.word	0x40020c00

0800840c <start_failure_led>:

void start_failure_led()
{
 800840c:	b580      	push	{r7, lr}
 800840e:	af00      	add	r7, sp, #0
	if (device->error_temp_hot || device->error_temp_cold || device->error_stop_hot || device->error_stop_cold)
 8008410:	4b10      	ldr	r3, [pc, #64]	; (8008454 <start_failure_led+0x48>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	78db      	ldrb	r3, [r3, #3]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d10e      	bne.n	8008438 <start_failure_led+0x2c>
 800841a:	4b0e      	ldr	r3, [pc, #56]	; (8008454 <start_failure_led+0x48>)
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	791b      	ldrb	r3, [r3, #4]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d109      	bne.n	8008438 <start_failure_led+0x2c>
 8008424:	4b0b      	ldr	r3, [pc, #44]	; (8008454 <start_failure_led+0x48>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	795b      	ldrb	r3, [r3, #5]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d104      	bne.n	8008438 <start_failure_led+0x2c>
 800842e:	4b09      	ldr	r3, [pc, #36]	; (8008454 <start_failure_led+0x48>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	799b      	ldrb	r3, [r3, #6]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d005      	beq.n	8008444 <start_failure_led+0x38>
		HAL_GPIO_WritePin(LED_FAILURE_GPIO_Port, LED_FAILURE_Pin, GPIO_PIN_SET);
 8008438:	2201      	movs	r2, #1
 800843a:	2180      	movs	r1, #128	; 0x80
 800843c:	4806      	ldr	r0, [pc, #24]	; (8008458 <start_failure_led+0x4c>)
 800843e:	f005 f81f 	bl	800d480 <HAL_GPIO_WritePin>
 8008442:	e005      	b.n	8008450 <start_failure_led+0x44>
    else
    	HAL_GPIO_WritePin(LED_FAILURE_GPIO_Port, LED_FAILURE_Pin, GPIO_PIN_RESET);
 8008444:	2200      	movs	r2, #0
 8008446:	2180      	movs	r1, #128	; 0x80
 8008448:	4803      	ldr	r0, [pc, #12]	; (8008458 <start_failure_led+0x4c>)
 800844a:	f005 f819 	bl	800d480 <HAL_GPIO_WritePin>
}
 800844e:	bf00      	nop
 8008450:	bf00      	nop
 8008452:	bd80      	pop	{r7, pc}
 8008454:	20013e2c 	.word	0x20013e2c
 8008458:	40020c00 	.word	0x40020c00

0800845c <start_work_led>:

void start_work_led()
{
 800845c:	b580      	push	{r7, lr}
 800845e:	af00      	add	r7, sp, #0
	if(mqtt_status)
 8008460:	4b08      	ldr	r3, [pc, #32]	; (8008484 <start_work_led+0x28>)
 8008462:	781b      	ldrb	r3, [r3, #0]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d005      	beq.n	8008474 <start_work_led+0x18>
		HAL_GPIO_WritePin(LED_WORK_GPIO_Port, LED_WORK_Pin, GPIO_PIN_SET);
 8008468:	2201      	movs	r2, #1
 800846a:	2140      	movs	r1, #64	; 0x40
 800846c:	4806      	ldr	r0, [pc, #24]	; (8008488 <start_work_led+0x2c>)
 800846e:	f005 f807 	bl	800d480 <HAL_GPIO_WritePin>
    else
    	HAL_GPIO_WritePin(LED_WORK_GPIO_Port, LED_WORK_Pin, GPIO_PIN_RESET);
}
 8008472:	e004      	b.n	800847e <start_work_led+0x22>
    	HAL_GPIO_WritePin(LED_WORK_GPIO_Port, LED_WORK_Pin, GPIO_PIN_RESET);
 8008474:	2200      	movs	r2, #0
 8008476:	2140      	movs	r1, #64	; 0x40
 8008478:	4803      	ldr	r0, [pc, #12]	; (8008488 <start_work_led+0x2c>)
 800847a:	f005 f801 	bl	800d480 <HAL_GPIO_WritePin>
}
 800847e:	bf00      	nop
 8008480:	bd80      	pop	{r7, pc}
 8008482:	bf00      	nop
 8008484:	20013e08 	.word	0x20013e08
 8008488:	40020c00 	.word	0x40020c00

0800848c <start_link_led>:

void start_link_led()
{
 800848c:	b580      	push	{r7, lr}
 800848e:	af00      	add	r7, sp, #0
	if(netif_is_link_up(&gnetif))
 8008490:	4b0f      	ldr	r3, [pc, #60]	; (80084d0 <start_link_led+0x44>)
 8008492:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008496:	089b      	lsrs	r3, r3, #2
 8008498:	f003 0301 	and.w	r3, r3, #1
 800849c:	b2db      	uxtb	r3, r3
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d00f      	beq.n	80084c2 <start_link_led+0x36>
    {
        if(mqtt_status)
 80084a2:	4b0c      	ldr	r3, [pc, #48]	; (80084d4 <start_link_led+0x48>)
 80084a4:	781b      	ldrb	r3, [r3, #0]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d007      	beq.n	80084ba <start_link_led+0x2e>
        {
        	link_IP = false;
 80084aa:	4b0b      	ldr	r3, [pc, #44]	; (80084d8 <start_link_led+0x4c>)
 80084ac:	2200      	movs	r2, #0
 80084ae:	701a      	strb	r2, [r3, #0]
        	HAL_GPIO_TogglePin(LED_LINK_GPIO_Port, LED_LINK_Pin);
 80084b0:	2120      	movs	r1, #32
 80084b2:	480a      	ldr	r0, [pc, #40]	; (80084dc <start_link_led+0x50>)
 80084b4:	f004 fffd 	bl	800d4b2 <HAL_GPIO_TogglePin>
        else
        	link_IP = true;
    }
    else
    	HAL_GPIO_WritePin(LED_LINK_GPIO_Port, LED_LINK_Pin, GPIO_PIN_RESET);
}
 80084b8:	e008      	b.n	80084cc <start_link_led+0x40>
        	link_IP = true;
 80084ba:	4b07      	ldr	r3, [pc, #28]	; (80084d8 <start_link_led+0x4c>)
 80084bc:	2201      	movs	r2, #1
 80084be:	701a      	strb	r2, [r3, #0]
}
 80084c0:	e004      	b.n	80084cc <start_link_led+0x40>
    	HAL_GPIO_WritePin(LED_LINK_GPIO_Port, LED_LINK_Pin, GPIO_PIN_RESET);
 80084c2:	2200      	movs	r2, #0
 80084c4:	2120      	movs	r1, #32
 80084c6:	4805      	ldr	r0, [pc, #20]	; (80084dc <start_link_led+0x50>)
 80084c8:	f004 ffda 	bl	800d480 <HAL_GPIO_WritePin>
}
 80084cc:	bf00      	nop
 80084ce:	bd80      	pop	{r7, pc}
 80084d0:	200149f0 	.word	0x200149f0
 80084d4:	20013e08 	.word	0x20013e08
 80084d8:	200143d8 	.word	0x200143d8
 80084dc:	40020c00 	.word	0x40020c00

080084e0 <start_service_led>:

void start_service_led()
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	af00      	add	r7, sp, #0
	if(service_response == 1)//вошли в сервисный режим
 80084e4:	4b23      	ldr	r3, [pc, #140]	; (8008574 <start_service_led+0x94>)
 80084e6:	781b      	ldrb	r3, [r3, #0]
 80084e8:	2b01      	cmp	r3, #1
 80084ea:	d10e      	bne.n	800850a <start_service_led+0x2a>
    {
		DEBUG_LED_BUT_CONTROL("service_response = 1\n");
 80084ec:	4822      	ldr	r0, [pc, #136]	; (8008578 <start_service_led+0x98>)
 80084ee:	f01e fa73 	bl	80269d8 <puts>
		HAL_GPIO_TogglePin(LED_LINK_GPIO_Port, LED_LINK_Pin);
 80084f2:	2120      	movs	r1, #32
 80084f4:	4821      	ldr	r0, [pc, #132]	; (800857c <start_service_led+0x9c>)
 80084f6:	f004 ffdc 	bl	800d4b2 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED_WORK_GPIO_Port, LED_WORK_Pin);
 80084fa:	2140      	movs	r1, #64	; 0x40
 80084fc:	481f      	ldr	r0, [pc, #124]	; (800857c <start_service_led+0x9c>)
 80084fe:	f004 ffd8 	bl	800d4b2 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED_FAILURE_GPIO_Port, LED_FAILURE_Pin);
 8008502:	2180      	movs	r1, #128	; 0x80
 8008504:	481d      	ldr	r0, [pc, #116]	; (800857c <start_service_led+0x9c>)
 8008506:	f004 ffd4 	bl	800d4b2 <HAL_GPIO_TogglePin>
    }
    if(service_response == 3)//сброс ошибок
 800850a:	4b1a      	ldr	r3, [pc, #104]	; (8008574 <start_service_led+0x94>)
 800850c:	781b      	ldrb	r3, [r3, #0]
 800850e:	2b03      	cmp	r3, #3
 8008510:	d10c      	bne.n	800852c <start_service_led+0x4c>
    {
    	DEBUG_LED_BUT_CONTROL("service_response = 3\n");
 8008512:	481b      	ldr	r0, [pc, #108]	; (8008580 <start_service_led+0xa0>)
 8008514:	f01e fa60 	bl	80269d8 <puts>
    	HAL_GPIO_WritePin(LED_LINK_GPIO_Port, LED_LINK_Pin, GPIO_PIN_RESET);
 8008518:	2200      	movs	r2, #0
 800851a:	2120      	movs	r1, #32
 800851c:	4817      	ldr	r0, [pc, #92]	; (800857c <start_service_led+0x9c>)
 800851e:	f004 ffaf 	bl	800d480 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(LED_FAILURE_GPIO_Port, LED_FAILURE_Pin, GPIO_PIN_RESET);
 8008522:	2200      	movs	r2, #0
 8008524:	2180      	movs	r1, #128	; 0x80
 8008526:	4815      	ldr	r0, [pc, #84]	; (800857c <start_service_led+0x9c>)
 8008528:	f004 ffaa 	bl	800d480 <HAL_GPIO_WritePin>
    }
    if(service_response == 4)//сброс памяти
 800852c:	4b11      	ldr	r3, [pc, #68]	; (8008574 <start_service_led+0x94>)
 800852e:	781b      	ldrb	r3, [r3, #0]
 8008530:	2b04      	cmp	r3, #4
 8008532:	d10c      	bne.n	800854e <start_service_led+0x6e>
    {
    	DEBUG_LED_BUT_CONTROL("service_response = 4\n");
 8008534:	4813      	ldr	r0, [pc, #76]	; (8008584 <start_service_led+0xa4>)
 8008536:	f01e fa4f 	bl	80269d8 <puts>
    	HAL_GPIO_WritePin(LED_LINK_GPIO_Port, LED_LINK_Pin, GPIO_PIN_RESET);
 800853a:	2200      	movs	r2, #0
 800853c:	2120      	movs	r1, #32
 800853e:	480f      	ldr	r0, [pc, #60]	; (800857c <start_service_led+0x9c>)
 8008540:	f004 ff9e 	bl	800d480 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(LED_WORK_GPIO_Port, LED_WORK_Pin, GPIO_PIN_RESET);
 8008544:	2200      	movs	r2, #0
 8008546:	2140      	movs	r1, #64	; 0x40
 8008548:	480c      	ldr	r0, [pc, #48]	; (800857c <start_service_led+0x9c>)
 800854a:	f004 ff99 	bl	800d480 <HAL_GPIO_WritePin>
    }
	if((service_response > 0) && ((HAL_GetTick() - timme) > 10000))
 800854e:	4b09      	ldr	r3, [pc, #36]	; (8008574 <start_service_led+0x94>)
 8008550:	781b      	ldrb	r3, [r3, #0]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d00c      	beq.n	8008570 <start_service_led+0x90>
 8008556:	f002 fc29 	bl	800adac <HAL_GetTick>
 800855a:	4602      	mov	r2, r0
 800855c:	4b0a      	ldr	r3, [pc, #40]	; (8008588 <start_service_led+0xa8>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	1ad3      	subs	r3, r2, r3
 8008562:	f242 7210 	movw	r2, #10000	; 0x2710
 8008566:	4293      	cmp	r3, r2
 8008568:	d902      	bls.n	8008570 <start_service_led+0x90>
		service_response = 0;
 800856a:	4b02      	ldr	r3, [pc, #8]	; (8008574 <start_service_led+0x94>)
 800856c:	2200      	movs	r2, #0
 800856e:	701a      	strb	r2, [r3, #0]
}
 8008570:	bf00      	nop
 8008572:	bd80      	pop	{r7, pc}
 8008574:	20000064 	.word	0x20000064
 8008578:	0802b9a8 	.word	0x0802b9a8
 800857c:	40020c00 	.word	0x40020c00
 8008580:	0802b9d4 	.word	0x0802b9d4
 8008584:	0802ba00 	.word	0x0802ba00
 8008588:	20000060 	.word	0x20000060

0800858c <LedsTask>:

void LedsTask(void *argument)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b082      	sub	sp, #8
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
    for (;;)
    {
    	if (service_response == 0)
 8008594:	4b08      	ldr	r3, [pc, #32]	; (80085b8 <LedsTask+0x2c>)
 8008596:	781b      	ldrb	r3, [r3, #0]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d106      	bne.n	80085aa <LedsTask+0x1e>
    	{
            start_link_led();
 800859c:	f7ff ff76 	bl	800848c <start_link_led>
            start_work_led();
 80085a0:	f7ff ff5c 	bl	800845c <start_work_led>
            start_failure_led();
 80085a4:	f7ff ff32 	bl	800840c <start_failure_led>
 80085a8:	e001      	b.n	80085ae <LedsTask+0x22>
    	}
    	else
    		start_service_led();
 80085aa:	f7ff ff99 	bl	80084e0 <start_service_led>
        osDelay(1000);
 80085ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80085b2:	f009 fbf2 	bl	8011d9a <osDelay>
    	if (service_response == 0)
 80085b6:	e7ed      	b.n	8008594 <LedsTask+0x8>
 80085b8:	20000064 	.word	0x20000064

080085bc <constrain>:

float P, I, D, En;
float En1 = 0;

int constrain(int X, int min, int max)
{
 80085bc:	b480      	push	{r7}
 80085be:	b085      	sub	sp, #20
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	60f8      	str	r0, [r7, #12]
 80085c4:	60b9      	str	r1, [r7, #8]
 80085c6:	607a      	str	r2, [r7, #4]
    if (X > max)
 80085c8:	68fa      	ldr	r2, [r7, #12]
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	429a      	cmp	r2, r3
 80085ce:	dd01      	ble.n	80085d4 <constrain+0x18>
    {
        return max;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	e006      	b.n	80085e2 <constrain+0x26>
    }
    else if (X < min)
 80085d4:	68fa      	ldr	r2, [r7, #12]
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	429a      	cmp	r2, r3
 80085da:	da01      	bge.n	80085e0 <constrain+0x24>
    {
        return min;
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	e000      	b.n	80085e2 <constrain+0x26>
    }
    else
    {
        return X;
 80085e0:	68fb      	ldr	r3, [r7, #12]
    }
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3714      	adds	r7, #20
 80085e6:	46bd      	mov	sp, r7
 80085e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ec:	4770      	bx	lr
	...

080085f0 <set_ten_power>:

void set_ten_power(uint16_t power)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b082      	sub	sp, #8
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	4603      	mov	r3, r0
 80085f8:	80fb      	strh	r3, [r7, #6]
	if (_ten_power != power)
 80085fa:	4b17      	ldr	r3, [pc, #92]	; (8008658 <set_ten_power+0x68>)
 80085fc:	881b      	ldrh	r3, [r3, #0]
 80085fe:	88fa      	ldrh	r2, [r7, #6]
 8008600:	429a      	cmp	r2, r3
 8008602:	d025      	beq.n	8008650 <set_ten_power+0x60>
	{
        if (power > 0)
 8008604:	88fb      	ldrh	r3, [r7, #6]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d006      	beq.n	8008618 <set_ten_power+0x28>
        {
        	HAL_GPIO_WritePin (RELAY_CH2_GPIO_Port, RELAY_CH2_Pin, ON);
 800860a:	2201      	movs	r2, #1
 800860c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008610:	4812      	ldr	r0, [pc, #72]	; (800865c <set_ten_power+0x6c>)
 8008612:	f004 ff35 	bl	800d480 <HAL_GPIO_WritePin>
 8008616:	e005      	b.n	8008624 <set_ten_power+0x34>
        }
        else
        {
        	HAL_GPIO_WritePin (RELAY_CH2_GPIO_Port, RELAY_CH2_Pin, OFF);
 8008618:	2200      	movs	r2, #0
 800861a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800861e:	480f      	ldr	r0, [pc, #60]	; (800865c <set_ten_power+0x6c>)
 8008620:	f004 ff2e 	bl	800d480 <HAL_GPIO_WritePin>
        }
        _ten_power = power;
 8008624:	4a0c      	ldr	r2, [pc, #48]	; (8008658 <set_ten_power+0x68>)
 8008626:	88fb      	ldrh	r3, [r7, #6]
 8008628:	8013      	strh	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_2, power * 65535 / 1023);
 800862a:	88fa      	ldrh	r2, [r7, #6]
 800862c:	4613      	mov	r3, r2
 800862e:	041b      	lsls	r3, r3, #16
 8008630:	1a9b      	subs	r3, r3, r2
 8008632:	4a0b      	ldr	r2, [pc, #44]	; (8008660 <set_ten_power+0x70>)
 8008634:	fb82 1203 	smull	r1, r2, r2, r3
 8008638:	441a      	add	r2, r3
 800863a:	1252      	asrs	r2, r2, #9
 800863c:	17db      	asrs	r3, r3, #31
 800863e:	1ad2      	subs	r2, r2, r3
 8008640:	4b08      	ldr	r3, [pc, #32]	; (8008664 <set_ten_power+0x74>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	639a      	str	r2, [r3, #56]	; 0x38
		DEBUG_TEN("Set power = %i \n", power);
 8008646:	88fb      	ldrh	r3, [r7, #6]
 8008648:	4619      	mov	r1, r3
 800864a:	4807      	ldr	r0, [pc, #28]	; (8008668 <set_ten_power+0x78>)
 800864c:	f01e f93e 	bl	80268cc <iprintf>
	}
}
 8008650:	bf00      	nop
 8008652:	3708      	adds	r7, #8
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}
 8008658:	200143e0 	.word	0x200143e0
 800865c:	40020c00 	.word	0x40020c00
 8008660:	80200803 	.word	0x80200803
 8008664:	20014678 	.word	0x20014678
 8008668:	0802ba2c 	.word	0x0802ba2c

0800866c <computePID_true>:

int computePID_true(float Xn, float X0n, float Kp, float Ki, float Kd, float dt, int min, int max)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b088      	sub	sp, #32
 8008670:	af00      	add	r7, sp, #0
 8008672:	ed87 0a07 	vstr	s0, [r7, #28]
 8008676:	edc7 0a06 	vstr	s1, [r7, #24]
 800867a:	ed87 1a05 	vstr	s2, [r7, #20]
 800867e:	edc7 1a04 	vstr	s3, [r7, #16]
 8008682:	ed87 2a03 	vstr	s4, [r7, #12]
 8008686:	edc7 2a02 	vstr	s5, [r7, #8]
 800868a:	6078      	str	r0, [r7, #4]
 800868c:	6039      	str	r1, [r7, #0]
    En = X0n - Xn;
 800868e:	ed97 7a06 	vldr	s14, [r7, #24]
 8008692:	edd7 7a07 	vldr	s15, [r7, #28]
 8008696:	ee77 7a67 	vsub.f32	s15, s14, s15
 800869a:	4b2c      	ldr	r3, [pc, #176]	; (800874c <computePID_true+0xe0>)
 800869c:	edc3 7a00 	vstr	s15, [r3]
    P = Kp * En;
 80086a0:	4b2a      	ldr	r3, [pc, #168]	; (800874c <computePID_true+0xe0>)
 80086a2:	ed93 7a00 	vldr	s14, [r3]
 80086a6:	edd7 7a05 	vldr	s15, [r7, #20]
 80086aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086ae:	4b28      	ldr	r3, [pc, #160]	; (8008750 <computePID_true+0xe4>)
 80086b0:	edc3 7a00 	vstr	s15, [r3]
    I = constrain(I + Ki * En, min, max);
 80086b4:	4b25      	ldr	r3, [pc, #148]	; (800874c <computePID_true+0xe0>)
 80086b6:	ed93 7a00 	vldr	s14, [r3]
 80086ba:	edd7 7a04 	vldr	s15, [r7, #16]
 80086be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80086c2:	4b24      	ldr	r3, [pc, #144]	; (8008754 <computePID_true+0xe8>)
 80086c4:	edd3 7a00 	vldr	s15, [r3]
 80086c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80086cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80086d0:	683a      	ldr	r2, [r7, #0]
 80086d2:	6879      	ldr	r1, [r7, #4]
 80086d4:	ee17 0a90 	vmov	r0, s15
 80086d8:	f7ff ff70 	bl	80085bc <constrain>
 80086dc:	ee07 0a90 	vmov	s15, r0
 80086e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80086e4:	4b1b      	ldr	r3, [pc, #108]	; (8008754 <computePID_true+0xe8>)
 80086e6:	edc3 7a00 	vstr	s15, [r3]
    D = Kd * (En - En1) / dt;
 80086ea:	4b18      	ldr	r3, [pc, #96]	; (800874c <computePID_true+0xe0>)
 80086ec:	ed93 7a00 	vldr	s14, [r3]
 80086f0:	4b19      	ldr	r3, [pc, #100]	; (8008758 <computePID_true+0xec>)
 80086f2:	edd3 7a00 	vldr	s15, [r3]
 80086f6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80086fa:	edd7 7a03 	vldr	s15, [r7, #12]
 80086fe:	ee67 6a27 	vmul.f32	s13, s14, s15
 8008702:	ed97 7a02 	vldr	s14, [r7, #8]
 8008706:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800870a:	4b14      	ldr	r3, [pc, #80]	; (800875c <computePID_true+0xf0>)
 800870c:	edc3 7a00 	vstr	s15, [r3]
    En1 = En;
 8008710:	4b0e      	ldr	r3, [pc, #56]	; (800874c <computePID_true+0xe0>)
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	4a10      	ldr	r2, [pc, #64]	; (8008758 <computePID_true+0xec>)
 8008716:	6013      	str	r3, [r2, #0]
    return constrain(P + I + D, min, max);
 8008718:	4b0d      	ldr	r3, [pc, #52]	; (8008750 <computePID_true+0xe4>)
 800871a:	ed93 7a00 	vldr	s14, [r3]
 800871e:	4b0d      	ldr	r3, [pc, #52]	; (8008754 <computePID_true+0xe8>)
 8008720:	edd3 7a00 	vldr	s15, [r3]
 8008724:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008728:	4b0c      	ldr	r3, [pc, #48]	; (800875c <computePID_true+0xf0>)
 800872a:	edd3 7a00 	vldr	s15, [r3]
 800872e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008732:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008736:	683a      	ldr	r2, [r7, #0]
 8008738:	6879      	ldr	r1, [r7, #4]
 800873a:	ee17 0a90 	vmov	r0, s15
 800873e:	f7ff ff3d 	bl	80085bc <constrain>
 8008742:	4603      	mov	r3, r0
}
 8008744:	4618      	mov	r0, r3
 8008746:	3720      	adds	r7, #32
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}
 800874c:	200143e4 	.word	0x200143e4
 8008750:	200143ec 	.word	0x200143ec
 8008754:	200143e8 	.word	0x200143e8
 8008758:	20000068 	.word	0x20000068
 800875c:	200143dc 	.word	0x200143dc

08008760 <ten_handler>:

void ten_handler()
{
 8008760:	b580      	push	{r7, lr}
 8008762:	af00      	add	r7, sp, #0
	if (device->state == ON && damper_state == 2 && device->inflow_speed > 0 &&
 8008764:	4b2e      	ldr	r3, [pc, #184]	; (8008820 <ten_handler+0xc0>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	789b      	ldrb	r3, [r3, #2]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d044      	beq.n	80087f8 <ten_handler+0x98>
 800876e:	4b2d      	ldr	r3, [pc, #180]	; (8008824 <ten_handler+0xc4>)
 8008770:	781b      	ldrb	r3, [r3, #0]
 8008772:	2b02      	cmp	r3, #2
 8008774:	d140      	bne.n	80087f8 <ten_handler+0x98>
 8008776:	4b2a      	ldr	r3, [pc, #168]	; (8008820 <ten_handler+0xc0>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	7b9b      	ldrb	r3, [r3, #14]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d03b      	beq.n	80087f8 <ten_handler+0x98>
		device->error_temp_hot == false && device->error_stop_hot == false && device->error_stop_cold == false)
 8008780:	4b27      	ldr	r3, [pc, #156]	; (8008820 <ten_handler+0xc0>)
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	78db      	ldrb	r3, [r3, #3]
 8008786:	f083 0301 	eor.w	r3, r3, #1
 800878a:	b2db      	uxtb	r3, r3
	if (device->state == ON && damper_state == 2 && device->inflow_speed > 0 &&
 800878c:	2b00      	cmp	r3, #0
 800878e:	d033      	beq.n	80087f8 <ten_handler+0x98>
		device->error_temp_hot == false && device->error_stop_hot == false && device->error_stop_cold == false)
 8008790:	4b23      	ldr	r3, [pc, #140]	; (8008820 <ten_handler+0xc0>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	795b      	ldrb	r3, [r3, #5]
 8008796:	f083 0301 	eor.w	r3, r3, #1
 800879a:	b2db      	uxtb	r3, r3
 800879c:	2b00      	cmp	r3, #0
 800879e:	d02b      	beq.n	80087f8 <ten_handler+0x98>
 80087a0:	4b1f      	ldr	r3, [pc, #124]	; (8008820 <ten_handler+0xc0>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	799b      	ldrb	r3, [r3, #6]
 80087a6:	f083 0301 	eor.w	r3, r3, #1
 80087aa:	b2db      	uxtb	r3, r3
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d023      	beq.n	80087f8 <ten_handler+0x98>
	{
		ten_power = computePID_true(sensors_data->out, device->temp_limit, 75, 3.0, 13, 1, 0, 1023);
 80087b0:	4b1d      	ldr	r3, [pc, #116]	; (8008828 <ten_handler+0xc8>)
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	edd3 7a00 	vldr	s15, [r3]
 80087b8:	4b19      	ldr	r3, [pc, #100]	; (8008820 <ten_handler+0xc0>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	7e1b      	ldrb	r3, [r3, #24]
 80087be:	ee07 3a10 	vmov	s14, r3
 80087c2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80087c6:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80087ca:	2000      	movs	r0, #0
 80087cc:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 80087d0:	eeb2 2a0a 	vmov.f32	s4, #42	; 0x41500000  13.0
 80087d4:	eef0 1a08 	vmov.f32	s3, #8	; 0x40400000  3.0
 80087d8:	ed9f 1a14 	vldr	s2, [pc, #80]	; 800882c <ten_handler+0xcc>
 80087dc:	eef0 0a47 	vmov.f32	s1, s14
 80087e0:	eeb0 0a67 	vmov.f32	s0, s15
 80087e4:	f7ff ff42 	bl	800866c <computePID_true>
 80087e8:	4603      	mov	r3, r0
 80087ea:	b29a      	uxth	r2, r3
 80087ec:	4b10      	ldr	r3, [pc, #64]	; (8008830 <ten_handler+0xd0>)
 80087ee:	801a      	strh	r2, [r3, #0]
		DEBUG_TEN("work mode\n");
 80087f0:	4810      	ldr	r0, [pc, #64]	; (8008834 <ten_handler+0xd4>)
 80087f2:	f01e f8f1 	bl	80269d8 <puts>
 80087f6:	e005      	b.n	8008804 <ten_handler+0xa4>
	}
	else
	{
		ten_power = 0;
 80087f8:	4b0d      	ldr	r3, [pc, #52]	; (8008830 <ten_handler+0xd0>)
 80087fa:	2200      	movs	r2, #0
 80087fc:	801a      	strh	r2, [r3, #0]
		DEBUG_TEN("ten off\n");
 80087fe:	480e      	ldr	r0, [pc, #56]	; (8008838 <ten_handler+0xd8>)
 8008800:	f01e f8ea 	bl	80269d8 <puts>
	}
	set_ten_power(ten_power);
 8008804:	4b0a      	ldr	r3, [pc, #40]	; (8008830 <ten_handler+0xd0>)
 8008806:	881b      	ldrh	r3, [r3, #0]
 8008808:	4618      	mov	r0, r3
 800880a:	f7ff fef1 	bl	80085f0 <set_ten_power>
	// publish_temp_log();
	DEBUG_TEN("TEN_POWER %i\n", ten_power);
 800880e:	4b08      	ldr	r3, [pc, #32]	; (8008830 <ten_handler+0xd0>)
 8008810:	881b      	ldrh	r3, [r3, #0]
 8008812:	4619      	mov	r1, r3
 8008814:	4809      	ldr	r0, [pc, #36]	; (800883c <ten_handler+0xdc>)
 8008816:	f01e f859 	bl	80268cc <iprintf>
}
 800881a:	bf00      	nop
 800881c:	bd80      	pop	{r7, pc}
 800881e:	bf00      	nop
 8008820:	20013e2c 	.word	0x20013e2c
 8008824:	20014309 	.word	0x20014309
 8008828:	20013e34 	.word	0x20013e34
 800882c:	42960000 	.word	0x42960000
 8008830:	20013dfe 	.word	0x20013dfe
 8008834:	0802ba44 	.word	0x0802ba44
 8008838:	0802ba54 	.word	0x0802ba54
 800883c:	0802ba64 	.word	0x0802ba64

08008840 <modbus_set_holding>:
  .stack_size = 256 * 6,
  .priority = (osPriority_t) osPriorityNormal,
};

int8_t modbus_set_holding(uint8_t slave_id, uint16_t reg_start, uint16_t data)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b082      	sub	sp, #8
 8008844:	af00      	add	r7, sp, #0
 8008846:	4603      	mov	r3, r0
 8008848:	71fb      	strb	r3, [r7, #7]
 800884a:	460b      	mov	r3, r1
 800884c:	80bb      	strh	r3, [r7, #4]
 800884e:	4613      	mov	r3, r2
 8008850:	807b      	strh	r3, [r7, #2]
	return modbus_master_set_one(slave_id, MB_FC_WRITE_MULTIPLE_REGISTERS, reg_start, data);
 8008852:	887b      	ldrh	r3, [r7, #2]
 8008854:	88ba      	ldrh	r2, [r7, #4]
 8008856:	79f8      	ldrb	r0, [r7, #7]
 8008858:	2110      	movs	r1, #16
 800885a:	f7fa fe21 	bl	80034a0 <modbus_master_set_one>
 800885e:	4603      	mov	r3, r0
}
 8008860:	4618      	mov	r0, r3
 8008862:	3708      	adds	r7, #8
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}

08008868 <modbus_get_holding>:

int32_t modbus_get_holding(uint8_t slave_id, uint16_t reg_start)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b082      	sub	sp, #8
 800886c:	af00      	add	r7, sp, #0
 800886e:	4603      	mov	r3, r0
 8008870:	460a      	mov	r2, r1
 8008872:	71fb      	strb	r3, [r7, #7]
 8008874:	4613      	mov	r3, r2
 8008876:	80bb      	strh	r3, [r7, #4]
	return modbus_master_get_one(slave_id, MB_FC_READ_REGISTERS, reg_start);
 8008878:	88ba      	ldrh	r2, [r7, #4]
 800887a:	79fb      	ldrb	r3, [r7, #7]
 800887c:	2103      	movs	r1, #3
 800887e:	4618      	mov	r0, r3
 8008880:	f7fa fe58 	bl	8003534 <modbus_master_get_one>
 8008884:	4603      	mov	r3, r0
}
 8008886:	4618      	mov	r0, r3
 8008888:	3708      	adds	r7, #8
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}
	...

08008890 <rc_receive_temp>:
bool pult_link = true;   // переменная состояния связи пульта
uint8_t count_error = 0; // счетчик количества ошибочных пакетов
uint8_t count_link = 0;  // счетчик попыток соединений после разрыва связи

void rc_receive_temp()
{
 8008890:	b580      	push	{r7, lr}
 8008892:	af00      	add	r7, sp, #0
    new_reg_temp = modbus_get_holding(DEFAUL_PULT_ID, REG_TEMP);
 8008894:	2102      	movs	r1, #2
 8008896:	2001      	movs	r0, #1
 8008898:	f7ff ffe6 	bl	8008868 <modbus_get_holding>
 800889c:	4603      	mov	r3, r0
 800889e:	b21a      	sxth	r2, r3
 80088a0:	4b16      	ldr	r3, [pc, #88]	; (80088fc <rc_receive_temp+0x6c>)
 80088a2:	801a      	strh	r2, [r3, #0]
    DEBUG_RC("new_reg_temp = %i\n", new_reg_temp);
 80088a4:	4b15      	ldr	r3, [pc, #84]	; (80088fc <rc_receive_temp+0x6c>)
 80088a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80088aa:	4619      	mov	r1, r3
 80088ac:	4814      	ldr	r0, [pc, #80]	; (8008900 <rc_receive_temp+0x70>)
 80088ae:	f01e f80d 	bl	80268cc <iprintf>
    if (new_reg_temp >= 0 && reg_temp != new_reg_temp)
 80088b2:	4b12      	ldr	r3, [pc, #72]	; (80088fc <rc_receive_temp+0x6c>)
 80088b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	db1c      	blt.n	80088f6 <rc_receive_temp+0x66>
 80088bc:	4b11      	ldr	r3, [pc, #68]	; (8008904 <rc_receive_temp+0x74>)
 80088be:	781b      	ldrb	r3, [r3, #0]
 80088c0:	461a      	mov	r2, r3
 80088c2:	4b0e      	ldr	r3, [pc, #56]	; (80088fc <rc_receive_temp+0x6c>)
 80088c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80088c8:	429a      	cmp	r2, r3
 80088ca:	d014      	beq.n	80088f6 <rc_receive_temp+0x66>
    {
        reg_temp = new_reg_temp;
 80088cc:	4b0b      	ldr	r3, [pc, #44]	; (80088fc <rc_receive_temp+0x6c>)
 80088ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80088d2:	b2da      	uxtb	r2, r3
 80088d4:	4b0b      	ldr	r3, [pc, #44]	; (8008904 <rc_receive_temp+0x74>)
 80088d6:	701a      	strb	r2, [r3, #0]
        if (reg_temp < 10)
 80088d8:	4b0a      	ldr	r3, [pc, #40]	; (8008904 <rc_receive_temp+0x74>)
 80088da:	781b      	ldrb	r3, [r3, #0]
 80088dc:	2b09      	cmp	r3, #9
 80088de:	d805      	bhi.n	80088ec <rc_receive_temp+0x5c>
        {
            limit_temp = true;
 80088e0:	4b09      	ldr	r3, [pc, #36]	; (8008908 <rc_receive_temp+0x78>)
 80088e2:	2201      	movs	r2, #1
 80088e4:	701a      	strb	r2, [r3, #0]
            reg_temp = 10;
 80088e6:	4b07      	ldr	r3, [pc, #28]	; (8008904 <rc_receive_temp+0x74>)
 80088e8:	220a      	movs	r2, #10
 80088ea:	701a      	strb	r2, [r3, #0]
//        if (reg_temp > 25)
//        {
//            limit_temp = true;
//            reg_temp = 25;
//        }
        device->temp_limit = reg_temp;
 80088ec:	4b07      	ldr	r3, [pc, #28]	; (800890c <rc_receive_temp+0x7c>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	4a04      	ldr	r2, [pc, #16]	; (8008904 <rc_receive_temp+0x74>)
 80088f2:	7812      	ldrb	r2, [r2, #0]
 80088f4:	761a      	strb	r2, [r3, #24]
    }
}
 80088f6:	bf00      	nop
 80088f8:	bd80      	pop	{r7, pc}
 80088fa:	bf00      	nop
 80088fc:	200143f4 	.word	0x200143f4
 8008900:	0802ba8c 	.word	0x0802ba8c
 8008904:	200143fc 	.word	0x200143fc
 8008908:	200143f3 	.word	0x200143f3
 800890c:	20013e2c 	.word	0x20013e2c

08008910 <rc_receive_fan>:

void rc_receive_fan()
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b082      	sub	sp, #8
 8008914:	af00      	add	r7, sp, #0
    new_reg_fan = modbus_get_holding(DEFAUL_PULT_ID, REG_FAN);
 8008916:	2101      	movs	r1, #1
 8008918:	2001      	movs	r0, #1
 800891a:	f7ff ffa5 	bl	8008868 <modbus_get_holding>
 800891e:	4603      	mov	r3, r0
 8008920:	b21a      	sxth	r2, r3
 8008922:	4b46      	ldr	r3, [pc, #280]	; (8008a3c <rc_receive_fan+0x12c>)
 8008924:	801a      	strh	r2, [r3, #0]
    DEBUG_RC("new_reg_fan = %i\n", new_reg_fan);
 8008926:	4b45      	ldr	r3, [pc, #276]	; (8008a3c <rc_receive_fan+0x12c>)
 8008928:	f9b3 3000 	ldrsh.w	r3, [r3]
 800892c:	4619      	mov	r1, r3
 800892e:	4844      	ldr	r0, [pc, #272]	; (8008a40 <rc_receive_fan+0x130>)
 8008930:	f01d ffcc 	bl	80268cc <iprintf>
    if (new_reg_fan >= 0 && reg_fan != new_reg_fan)
 8008934:	4b41      	ldr	r3, [pc, #260]	; (8008a3c <rc_receive_fan+0x12c>)
 8008936:	f9b3 3000 	ldrsh.w	r3, [r3]
 800893a:	2b00      	cmp	r3, #0
 800893c:	db7a      	blt.n	8008a34 <rc_receive_fan+0x124>
 800893e:	4b41      	ldr	r3, [pc, #260]	; (8008a44 <rc_receive_fan+0x134>)
 8008940:	781b      	ldrb	r3, [r3, #0]
 8008942:	461a      	mov	r2, r3
 8008944:	4b3d      	ldr	r3, [pc, #244]	; (8008a3c <rc_receive_fan+0x12c>)
 8008946:	f9b3 3000 	ldrsh.w	r3, [r3]
 800894a:	429a      	cmp	r2, r3
 800894c:	d072      	beq.n	8008a34 <rc_receive_fan+0x124>
    {
        int16_t reg_fan_smart = reg_fan;
 800894e:	4b3d      	ldr	r3, [pc, #244]	; (8008a44 <rc_receive_fan+0x134>)
 8008950:	781b      	ldrb	r3, [r3, #0]
 8008952:	80fb      	strh	r3, [r7, #6]
        reg_fan = new_reg_fan;
 8008954:	4b39      	ldr	r3, [pc, #228]	; (8008a3c <rc_receive_fan+0x12c>)
 8008956:	f9b3 3000 	ldrsh.w	r3, [r3]
 800895a:	b2da      	uxtb	r2, r3
 800895c:	4b39      	ldr	r3, [pc, #228]	; (8008a44 <rc_receive_fan+0x134>)
 800895e:	701a      	strb	r2, [r3, #0]
        if (reg_fan == 0)
 8008960:	4b38      	ldr	r3, [pc, #224]	; (8008a44 <rc_receive_fan+0x134>)
 8008962:	781b      	ldrb	r3, [r3, #0]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d105      	bne.n	8008974 <rc_receive_fan+0x64>
        {
            reg_fan = 1;
 8008968:	4b36      	ldr	r3, [pc, #216]	; (8008a44 <rc_receive_fan+0x134>)
 800896a:	2201      	movs	r2, #1
 800896c:	701a      	strb	r2, [r3, #0]
            limit_fan = true;
 800896e:	4b36      	ldr	r3, [pc, #216]	; (8008a48 <rc_receive_fan+0x138>)
 8008970:	2201      	movs	r2, #1
 8008972:	701a      	strb	r2, [r3, #0]
        }
        if (device->mode == INFLOW_MODE)
 8008974:	4b35      	ldr	r3, [pc, #212]	; (8008a4c <rc_receive_fan+0x13c>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	7b1b      	ldrb	r3, [r3, #12]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d122      	bne.n	80089c4 <rc_receive_fan+0xb4>
        {
            if (reg_fan == 1)
 800897e:	4b31      	ldr	r3, [pc, #196]	; (8008a44 <rc_receive_fan+0x134>)
 8008980:	781b      	ldrb	r3, [r3, #0]
 8008982:	2b01      	cmp	r3, #1
 8008984:	d104      	bne.n	8008990 <rc_receive_fan+0x80>
                device->inflow_speed = 1;
 8008986:	4b31      	ldr	r3, [pc, #196]	; (8008a4c <rc_receive_fan+0x13c>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	2201      	movs	r2, #1
 800898c:	739a      	strb	r2, [r3, #14]
 800898e:	e019      	b.n	80089c4 <rc_receive_fan+0xb4>
            else if (reg_fan == 2)
 8008990:	4b2c      	ldr	r3, [pc, #176]	; (8008a44 <rc_receive_fan+0x134>)
 8008992:	781b      	ldrb	r3, [r3, #0]
 8008994:	2b02      	cmp	r3, #2
 8008996:	d104      	bne.n	80089a2 <rc_receive_fan+0x92>
                device->inflow_speed = 3;
 8008998:	4b2c      	ldr	r3, [pc, #176]	; (8008a4c <rc_receive_fan+0x13c>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	2203      	movs	r2, #3
 800899e:	739a      	strb	r2, [r3, #14]
 80089a0:	e010      	b.n	80089c4 <rc_receive_fan+0xb4>
            else if (reg_fan == 3)
 80089a2:	4b28      	ldr	r3, [pc, #160]	; (8008a44 <rc_receive_fan+0x134>)
 80089a4:	781b      	ldrb	r3, [r3, #0]
 80089a6:	2b03      	cmp	r3, #3
 80089a8:	d104      	bne.n	80089b4 <rc_receive_fan+0xa4>
                device->inflow_speed = 5;
 80089aa:	4b28      	ldr	r3, [pc, #160]	; (8008a4c <rc_receive_fan+0x13c>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	2205      	movs	r2, #5
 80089b0:	739a      	strb	r2, [r3, #14]
 80089b2:	e007      	b.n	80089c4 <rc_receive_fan+0xb4>
            else if (reg_fan == 4)
 80089b4:	4b23      	ldr	r3, [pc, #140]	; (8008a44 <rc_receive_fan+0x134>)
 80089b6:	781b      	ldrb	r3, [r3, #0]
 80089b8:	2b04      	cmp	r3, #4
 80089ba:	d103      	bne.n	80089c4 <rc_receive_fan+0xb4>
                device->inflow_speed = 7;
 80089bc:	4b23      	ldr	r3, [pc, #140]	; (8008a4c <rc_receive_fan+0x13c>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	2207      	movs	r2, #7
 80089c2:	739a      	strb	r2, [r3, #14]
        }
        if (device->mode == SMART_MODE)
 80089c4:	4b21      	ldr	r3, [pc, #132]	; (8008a4c <rc_receive_fan+0x13c>)
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	7b1b      	ldrb	r3, [r3, #12]
 80089ca:	2b01      	cmp	r3, #1
 80089cc:	d106      	bne.n	80089dc <rc_receive_fan+0xcc>
        {
            reg_fan = reg_fan_smart;
 80089ce:	88fb      	ldrh	r3, [r7, #6]
 80089d0:	b2da      	uxtb	r2, r3
 80089d2:	4b1c      	ldr	r3, [pc, #112]	; (8008a44 <rc_receive_fan+0x134>)
 80089d4:	701a      	strb	r2, [r3, #0]
            limit_fan = true;
 80089d6:	4b1c      	ldr	r3, [pc, #112]	; (8008a48 <rc_receive_fan+0x138>)
 80089d8:	2201      	movs	r2, #1
 80089da:	701a      	strb	r2, [r3, #0]
        }
        if (device->mode == INFLOW_MAX_MODE)
 80089dc:	4b1b      	ldr	r3, [pc, #108]	; (8008a4c <rc_receive_fan+0x13c>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	7b1b      	ldrb	r3, [r3, #12]
 80089e2:	2b02      	cmp	r3, #2
 80089e4:	d126      	bne.n	8008a34 <rc_receive_fan+0x124>
        {
            device->mode = INFLOW_MODE;
 80089e6:	4b19      	ldr	r3, [pc, #100]	; (8008a4c <rc_receive_fan+0x13c>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	2200      	movs	r2, #0
 80089ec:	731a      	strb	r2, [r3, #12]
            if (reg_fan == 1)
 80089ee:	4b15      	ldr	r3, [pc, #84]	; (8008a44 <rc_receive_fan+0x134>)
 80089f0:	781b      	ldrb	r3, [r3, #0]
 80089f2:	2b01      	cmp	r3, #1
 80089f4:	d104      	bne.n	8008a00 <rc_receive_fan+0xf0>
                device->inflow_speed = 1;
 80089f6:	4b15      	ldr	r3, [pc, #84]	; (8008a4c <rc_receive_fan+0x13c>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	2201      	movs	r2, #1
 80089fc:	739a      	strb	r2, [r3, #14]
                device->inflow_speed = 5;
            else if (reg_fan == 4)
                device->inflow_speed = 7;
        }
    }
}
 80089fe:	e019      	b.n	8008a34 <rc_receive_fan+0x124>
            else if (reg_fan == 2)
 8008a00:	4b10      	ldr	r3, [pc, #64]	; (8008a44 <rc_receive_fan+0x134>)
 8008a02:	781b      	ldrb	r3, [r3, #0]
 8008a04:	2b02      	cmp	r3, #2
 8008a06:	d104      	bne.n	8008a12 <rc_receive_fan+0x102>
                device->inflow_speed = 3;
 8008a08:	4b10      	ldr	r3, [pc, #64]	; (8008a4c <rc_receive_fan+0x13c>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	2203      	movs	r2, #3
 8008a0e:	739a      	strb	r2, [r3, #14]
}
 8008a10:	e010      	b.n	8008a34 <rc_receive_fan+0x124>
            else if (reg_fan == 3)
 8008a12:	4b0c      	ldr	r3, [pc, #48]	; (8008a44 <rc_receive_fan+0x134>)
 8008a14:	781b      	ldrb	r3, [r3, #0]
 8008a16:	2b03      	cmp	r3, #3
 8008a18:	d104      	bne.n	8008a24 <rc_receive_fan+0x114>
                device->inflow_speed = 5;
 8008a1a:	4b0c      	ldr	r3, [pc, #48]	; (8008a4c <rc_receive_fan+0x13c>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	2205      	movs	r2, #5
 8008a20:	739a      	strb	r2, [r3, #14]
}
 8008a22:	e007      	b.n	8008a34 <rc_receive_fan+0x124>
            else if (reg_fan == 4)
 8008a24:	4b07      	ldr	r3, [pc, #28]	; (8008a44 <rc_receive_fan+0x134>)
 8008a26:	781b      	ldrb	r3, [r3, #0]
 8008a28:	2b04      	cmp	r3, #4
 8008a2a:	d103      	bne.n	8008a34 <rc_receive_fan+0x124>
                device->inflow_speed = 7;
 8008a2c:	4b07      	ldr	r3, [pc, #28]	; (8008a4c <rc_receive_fan+0x13c>)
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	2207      	movs	r2, #7
 8008a32:	739a      	strb	r2, [r3, #14]
}
 8008a34:	bf00      	nop
 8008a36:	3708      	adds	r7, #8
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}
 8008a3c:	20014402 	.word	0x20014402
 8008a40:	0802bab0 	.word	0x0802bab0
 8008a44:	200143fd 	.word	0x200143fd
 8008a48:	200143fe 	.word	0x200143fe
 8008a4c:	20013e2c 	.word	0x20013e2c

08008a50 <rc_receive_work>:

void rc_receive_work()
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	af00      	add	r7, sp, #0
    new_reg_work = modbus_get_holding(DEFAUL_PULT_ID, REG_WORK);
 8008a54:	2107      	movs	r1, #7
 8008a56:	2001      	movs	r0, #1
 8008a58:	f7ff ff06 	bl	8008868 <modbus_get_holding>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	b21a      	sxth	r2, r3
 8008a60:	4b15      	ldr	r3, [pc, #84]	; (8008ab8 <rc_receive_work+0x68>)
 8008a62:	801a      	strh	r2, [r3, #0]
    DEBUG_RC("new_reg_work = %i\n", new_reg_work);
 8008a64:	4b14      	ldr	r3, [pc, #80]	; (8008ab8 <rc_receive_work+0x68>)
 8008a66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008a6a:	4619      	mov	r1, r3
 8008a6c:	4813      	ldr	r0, [pc, #76]	; (8008abc <rc_receive_work+0x6c>)
 8008a6e:	f01d ff2d 	bl	80268cc <iprintf>
    if (new_reg_work >= 0 && reg_work != new_reg_work)
 8008a72:	4b11      	ldr	r3, [pc, #68]	; (8008ab8 <rc_receive_work+0x68>)
 8008a74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	db1a      	blt.n	8008ab2 <rc_receive_work+0x62>
 8008a7c:	4b10      	ldr	r3, [pc, #64]	; (8008ac0 <rc_receive_work+0x70>)
 8008a7e:	781b      	ldrb	r3, [r3, #0]
 8008a80:	461a      	mov	r2, r3
 8008a82:	4b0d      	ldr	r3, [pc, #52]	; (8008ab8 <rc_receive_work+0x68>)
 8008a84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008a88:	429a      	cmp	r2, r3
 8008a8a:	d012      	beq.n	8008ab2 <rc_receive_work+0x62>
    {
        reg_work = new_reg_work;
 8008a8c:	4b0a      	ldr	r3, [pc, #40]	; (8008ab8 <rc_receive_work+0x68>)
 8008a8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008a92:	b2da      	uxtb	r2, r3
 8008a94:	4b0a      	ldr	r3, [pc, #40]	; (8008ac0 <rc_receive_work+0x70>)
 8008a96:	701a      	strb	r2, [r3, #0]
        if (reg_work == 0)
 8008a98:	4b09      	ldr	r3, [pc, #36]	; (8008ac0 <rc_receive_work+0x70>)
 8008a9a:	781b      	ldrb	r3, [r3, #0]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d104      	bne.n	8008aaa <rc_receive_work+0x5a>
            device->mode = INFLOW_MODE;
 8008aa0:	4b08      	ldr	r3, [pc, #32]	; (8008ac4 <rc_receive_work+0x74>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	731a      	strb	r2, [r3, #12]
//                reg_work = 0;
//                limit_work = true;
//            }
        }
    }
}
 8008aa8:	e003      	b.n	8008ab2 <rc_receive_work+0x62>
                device->mode = SMART_MODE;
 8008aaa:	4b06      	ldr	r3, [pc, #24]	; (8008ac4 <rc_receive_work+0x74>)
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	2201      	movs	r2, #1
 8008ab0:	731a      	strb	r2, [r3, #12]
}
 8008ab2:	bf00      	nop
 8008ab4:	bd80      	pop	{r7, pc}
 8008ab6:	bf00      	nop
 8008ab8:	20014400 	.word	0x20014400
 8008abc:	0802bad4 	.word	0x0802bad4
 8008ac0:	20014404 	.word	0x20014404
 8008ac4:	20013e2c 	.word	0x20013e2c

08008ac8 <rc_receive_switch>:

void rc_receive_switch()
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	af00      	add	r7, sp, #0
    new_reg_switch = modbus_get_holding(DEFAUL_PULT_ID, REG_SWITCH);
 8008acc:	2100      	movs	r1, #0
 8008ace:	2001      	movs	r0, #1
 8008ad0:	f7ff feca 	bl	8008868 <modbus_get_holding>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	b21a      	sxth	r2, r3
 8008ad8:	4b25      	ldr	r3, [pc, #148]	; (8008b70 <rc_receive_switch+0xa8>)
 8008ada:	801a      	strh	r2, [r3, #0]
    DEBUG_RC("new_reg_switch = %i\n", new_reg_switch);
 8008adc:	4b24      	ldr	r3, [pc, #144]	; (8008b70 <rc_receive_switch+0xa8>)
 8008ade:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008ae2:	4619      	mov	r1, r3
 8008ae4:	4823      	ldr	r0, [pc, #140]	; (8008b74 <rc_receive_switch+0xac>)
 8008ae6:	f01d fef1 	bl	80268cc <iprintf>
    if (new_reg_switch >= 0)
 8008aea:	4b21      	ldr	r3, [pc, #132]	; (8008b70 <rc_receive_switch+0xa8>)
 8008aec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	db1e      	blt.n	8008b32 <rc_receive_switch+0x6a>
    {
        pult_link = true;
 8008af4:	4b20      	ldr	r3, [pc, #128]	; (8008b78 <rc_receive_switch+0xb0>)
 8008af6:	2201      	movs	r2, #1
 8008af8:	701a      	strb	r2, [r3, #0]
        count_error = 0;
 8008afa:	4b20      	ldr	r3, [pc, #128]	; (8008b7c <rc_receive_switch+0xb4>)
 8008afc:	2200      	movs	r2, #0
 8008afe:	701a      	strb	r2, [r3, #0]
        if (reg_switch != new_reg_switch)
 8008b00:	4b1f      	ldr	r3, [pc, #124]	; (8008b80 <rc_receive_switch+0xb8>)
 8008b02:	781b      	ldrb	r3, [r3, #0]
 8008b04:	461a      	mov	r2, r3
 8008b06:	4b1a      	ldr	r3, [pc, #104]	; (8008b70 <rc_receive_switch+0xa8>)
 8008b08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b0c:	429a      	cmp	r2, r3
 8008b0e:	d02c      	beq.n	8008b6a <rc_receive_switch+0xa2>
        {
            reg_switch = new_reg_switch;
 8008b10:	4b17      	ldr	r3, [pc, #92]	; (8008b70 <rc_receive_switch+0xa8>)
 8008b12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b16:	b2da      	uxtb	r2, r3
 8008b18:	4b19      	ldr	r3, [pc, #100]	; (8008b80 <rc_receive_switch+0xb8>)
 8008b1a:	701a      	strb	r2, [r3, #0]
            device->state = reg_switch;
 8008b1c:	4b18      	ldr	r3, [pc, #96]	; (8008b80 <rc_receive_switch+0xb8>)
 8008b1e:	781a      	ldrb	r2, [r3, #0]
 8008b20:	4b18      	ldr	r3, [pc, #96]	; (8008b84 <rc_receive_switch+0xbc>)
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	2a00      	cmp	r2, #0
 8008b26:	bf14      	ite	ne
 8008b28:	2201      	movne	r2, #1
 8008b2a:	2200      	moveq	r2, #0
 8008b2c:	b2d2      	uxtb	r2, r2
 8008b2e:	709a      	strb	r2, [r3, #2]
            write_device_params(device);
            pult_link = false;
            DEBUG_RC("remote_control communication break\n");
        }
    }
}
 8008b30:	e01b      	b.n	8008b6a <rc_receive_switch+0xa2>
        count_error++;
 8008b32:	4b12      	ldr	r3, [pc, #72]	; (8008b7c <rc_receive_switch+0xb4>)
 8008b34:	781b      	ldrb	r3, [r3, #0]
 8008b36:	3301      	adds	r3, #1
 8008b38:	b2da      	uxtb	r2, r3
 8008b3a:	4b10      	ldr	r3, [pc, #64]	; (8008b7c <rc_receive_switch+0xb4>)
 8008b3c:	701a      	strb	r2, [r3, #0]
        if (count_error == LIMIT_ERROR)
 8008b3e:	4b0f      	ldr	r3, [pc, #60]	; (8008b7c <rc_receive_switch+0xb4>)
 8008b40:	781b      	ldrb	r3, [r3, #0]
 8008b42:	2b03      	cmp	r3, #3
 8008b44:	d111      	bne.n	8008b6a <rc_receive_switch+0xa2>
            count_error = 0;
 8008b46:	4b0d      	ldr	r3, [pc, #52]	; (8008b7c <rc_receive_switch+0xb4>)
 8008b48:	2200      	movs	r2, #0
 8008b4a:	701a      	strb	r2, [r3, #0]
            device->remote_control.error = true;
 8008b4c:	4b0d      	ldr	r3, [pc, #52]	; (8008b84 <rc_receive_switch+0xbc>)
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	2201      	movs	r2, #1
 8008b52:	729a      	strb	r2, [r3, #10]
            write_device_params(device);
 8008b54:	4b0b      	ldr	r3, [pc, #44]	; (8008b84 <rc_receive_switch+0xbc>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	4618      	mov	r0, r3
 8008b5a:	f000 fc43 	bl	80093e4 <write_device_params>
            pult_link = false;
 8008b5e:	4b06      	ldr	r3, [pc, #24]	; (8008b78 <rc_receive_switch+0xb0>)
 8008b60:	2200      	movs	r2, #0
 8008b62:	701a      	strb	r2, [r3, #0]
            DEBUG_RC("remote_control communication break\n");
 8008b64:	4808      	ldr	r0, [pc, #32]	; (8008b88 <rc_receive_switch+0xc0>)
 8008b66:	f01d ff37 	bl	80269d8 <puts>
}
 8008b6a:	bf00      	nop
 8008b6c:	bd80      	pop	{r7, pc}
 8008b6e:	bf00      	nop
 8008b70:	200143f0 	.word	0x200143f0
 8008b74:	0802baf8 	.word	0x0802baf8
 8008b78:	10000044 	.word	0x10000044
 8008b7c:	2000006e 	.word	0x2000006e
 8008b80:	200143f2 	.word	0x200143f2
 8008b84:	20013e2c 	.word	0x20013e2c
 8008b88:	0802bb20 	.word	0x0802bb20

08008b8c <rc_receive_handler>:

void rc_receive_handler()
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	af00      	add	r7, sp, #0
    rc_receive_switch();
 8008b90:	f7ff ff9a 	bl	8008ac8 <rc_receive_switch>
    if (device->state)
 8008b94:	4b06      	ldr	r3, [pc, #24]	; (8008bb0 <rc_receive_handler+0x24>)
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	789b      	ldrb	r3, [r3, #2]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d005      	beq.n	8008baa <rc_receive_handler+0x1e>
    {
        rc_receive_work();
 8008b9e:	f7ff ff57 	bl	8008a50 <rc_receive_work>
        rc_receive_fan();
 8008ba2:	f7ff feb5 	bl	8008910 <rc_receive_fan>
        rc_receive_temp();
 8008ba6:	f7ff fe73 	bl	8008890 <rc_receive_temp>
    }
}
 8008baa:	bf00      	nop
 8008bac:	bd80      	pop	{r7, pc}
 8008bae:	bf00      	nop
 8008bb0:	20013e2c 	.word	0x20013e2c

08008bb4 <check_limit_temp>:

void check_limit_temp()
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	af00      	add	r7, sp, #0
    if (limit_temp)
 8008bb8:	4b08      	ldr	r3, [pc, #32]	; (8008bdc <check_limit_temp+0x28>)
 8008bba:	781b      	ldrb	r3, [r3, #0]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d00a      	beq.n	8008bd6 <check_limit_temp+0x22>
    {
        limit_temp = false;
 8008bc0:	4b06      	ldr	r3, [pc, #24]	; (8008bdc <check_limit_temp+0x28>)
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	701a      	strb	r2, [r3, #0]
        modbus_set_holding(DEFAUL_PULT_ID, REG_TEMP, reg_temp);
 8008bc6:	4b06      	ldr	r3, [pc, #24]	; (8008be0 <check_limit_temp+0x2c>)
 8008bc8:	781b      	ldrb	r3, [r3, #0]
 8008bca:	b29b      	uxth	r3, r3
 8008bcc:	461a      	mov	r2, r3
 8008bce:	2102      	movs	r1, #2
 8008bd0:	2001      	movs	r0, #1
 8008bd2:	f7ff fe35 	bl	8008840 <modbus_set_holding>
    }
}
 8008bd6:	bf00      	nop
 8008bd8:	bd80      	pop	{r7, pc}
 8008bda:	bf00      	nop
 8008bdc:	200143f3 	.word	0x200143f3
 8008be0:	200143fc 	.word	0x200143fc

08008be4 <check_limit_fan>:

void check_limit_fan()
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	af00      	add	r7, sp, #0
    if (limit_fan)
 8008be8:	4b08      	ldr	r3, [pc, #32]	; (8008c0c <check_limit_fan+0x28>)
 8008bea:	781b      	ldrb	r3, [r3, #0]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d00a      	beq.n	8008c06 <check_limit_fan+0x22>
    {
        limit_fan = false;
 8008bf0:	4b06      	ldr	r3, [pc, #24]	; (8008c0c <check_limit_fan+0x28>)
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	701a      	strb	r2, [r3, #0]
        modbus_set_holding(DEFAUL_PULT_ID, REG_FAN, reg_fan);
 8008bf6:	4b06      	ldr	r3, [pc, #24]	; (8008c10 <check_limit_fan+0x2c>)
 8008bf8:	781b      	ldrb	r3, [r3, #0]
 8008bfa:	b29b      	uxth	r3, r3
 8008bfc:	461a      	mov	r2, r3
 8008bfe:	2101      	movs	r1, #1
 8008c00:	2001      	movs	r0, #1
 8008c02:	f7ff fe1d 	bl	8008840 <modbus_set_holding>
    }
}
 8008c06:	bf00      	nop
 8008c08:	bd80      	pop	{r7, pc}
 8008c0a:	bf00      	nop
 8008c0c:	200143fe 	.word	0x200143fe
 8008c10:	200143fd 	.word	0x200143fd

08008c14 <check_limit_work>:

void check_limit_work()
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	af00      	add	r7, sp, #0
    if (limit_work)
 8008c18:	4b08      	ldr	r3, [pc, #32]	; (8008c3c <check_limit_work+0x28>)
 8008c1a:	781b      	ldrb	r3, [r3, #0]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d00a      	beq.n	8008c36 <check_limit_work+0x22>
    {
        limit_work = false;
 8008c20:	4b06      	ldr	r3, [pc, #24]	; (8008c3c <check_limit_work+0x28>)
 8008c22:	2200      	movs	r2, #0
 8008c24:	701a      	strb	r2, [r3, #0]
        modbus_set_holding(DEFAUL_PULT_ID, REG_WORK, reg_work);
 8008c26:	4b06      	ldr	r3, [pc, #24]	; (8008c40 <check_limit_work+0x2c>)
 8008c28:	781b      	ldrb	r3, [r3, #0]
 8008c2a:	b29b      	uxth	r3, r3
 8008c2c:	461a      	mov	r2, r3
 8008c2e:	2107      	movs	r1, #7
 8008c30:	2001      	movs	r0, #1
 8008c32:	f7ff fe05 	bl	8008840 <modbus_set_holding>
    }
}
 8008c36:	bf00      	nop
 8008c38:	bd80      	pop	{r7, pc}
 8008c3a:	bf00      	nop
 8008c3c:	2000006d 	.word	0x2000006d
 8008c40:	20014404 	.word	0x20014404

08008c44 <check_changes>:

void check_changes()
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	af00      	add	r7, sp, #0
    // проверяем изменения вкл/выкл прибора
    if (device->state != reg_switch)
 8008c48:	4b71      	ldr	r3, [pc, #452]	; (8008e10 <check_changes+0x1cc>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	789b      	ldrb	r3, [r3, #2]
 8008c4e:	461a      	mov	r2, r3
 8008c50:	4b70      	ldr	r3, [pc, #448]	; (8008e14 <check_changes+0x1d0>)
 8008c52:	781b      	ldrb	r3, [r3, #0]
 8008c54:	429a      	cmp	r2, r3
 8008c56:	d008      	beq.n	8008c6a <check_changes+0x26>
        modbus_set_holding(DEFAUL_PULT_ID, REG_SWITCH, device->state);
 8008c58:	4b6d      	ldr	r3, [pc, #436]	; (8008e10 <check_changes+0x1cc>)
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	789b      	ldrb	r3, [r3, #2]
 8008c5e:	b29b      	uxth	r3, r3
 8008c60:	461a      	mov	r2, r3
 8008c62:	2100      	movs	r1, #0
 8008c64:	2001      	movs	r0, #1
 8008c66:	f7ff fdeb 	bl	8008840 <modbus_set_holding>
    if (device->state == ON)
 8008c6a:	4b69      	ldr	r3, [pc, #420]	; (8008e10 <check_changes+0x1cc>)
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	789b      	ldrb	r3, [r3, #2]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	f000 80ca 	beq.w	8008e0a <check_changes+0x1c6>
    {
        // проверяем изменения в установке выбранного режима
        if (device->mode != reg_work)
 8008c76:	4b66      	ldr	r3, [pc, #408]	; (8008e10 <check_changes+0x1cc>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	7b1a      	ldrb	r2, [r3, #12]
 8008c7c:	4b66      	ldr	r3, [pc, #408]	; (8008e18 <check_changes+0x1d4>)
 8008c7e:	781b      	ldrb	r3, [r3, #0]
 8008c80:	429a      	cmp	r2, r3
 8008c82:	d02b      	beq.n	8008cdc <check_changes+0x98>
        {
            if (device->mode == INFLOW_MODE)
 8008c84:	4b62      	ldr	r3, [pc, #392]	; (8008e10 <check_changes+0x1cc>)
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	7b1b      	ldrb	r3, [r3, #12]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d107      	bne.n	8008c9e <check_changes+0x5a>
            {
                modbus_set_holding(DEFAUL_PULT_ID, REG_WORK, 0);
 8008c8e:	2200      	movs	r2, #0
 8008c90:	2107      	movs	r1, #7
 8008c92:	2001      	movs	r0, #1
 8008c94:	f7ff fdd4 	bl	8008840 <modbus_set_holding>
                DEBUG_RC("sent a message INFLOW_MODE\n");
 8008c98:	4860      	ldr	r0, [pc, #384]	; (8008e1c <check_changes+0x1d8>)
 8008c9a:	f01d fe9d 	bl	80269d8 <puts>
            }
            if (device->mode == SMART_MODE)
 8008c9e:	4b5c      	ldr	r3, [pc, #368]	; (8008e10 <check_changes+0x1cc>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	7b1b      	ldrb	r3, [r3, #12]
 8008ca4:	2b01      	cmp	r3, #1
 8008ca6:	d107      	bne.n	8008cb8 <check_changes+0x74>
            {
                modbus_set_holding(DEFAUL_PULT_ID, REG_WORK, 1);
 8008ca8:	2201      	movs	r2, #1
 8008caa:	2107      	movs	r1, #7
 8008cac:	2001      	movs	r0, #1
 8008cae:	f7ff fdc7 	bl	8008840 <modbus_set_holding>
                DEBUG_RC("sent a message SMART_MODE\n");
 8008cb2:	485b      	ldr	r0, [pc, #364]	; (8008e20 <check_changes+0x1dc>)
 8008cb4:	f01d fe90 	bl	80269d8 <puts>
            }
            if (device->mode == INFLOW_MAX_MODE)
 8008cb8:	4b55      	ldr	r3, [pc, #340]	; (8008e10 <check_changes+0x1cc>)
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	7b1b      	ldrb	r3, [r3, #12]
 8008cbe:	2b02      	cmp	r3, #2
 8008cc0:	d10c      	bne.n	8008cdc <check_changes+0x98>
            {
                modbus_set_holding(DEFAUL_PULT_ID, REG_WORK, 0);
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	2107      	movs	r1, #7
 8008cc6:	2001      	movs	r0, #1
 8008cc8:	f7ff fdba 	bl	8008840 <modbus_set_holding>
                modbus_set_holding(DEFAUL_PULT_ID, REG_FAN, 4);
 8008ccc:	2204      	movs	r2, #4
 8008cce:	2101      	movs	r1, #1
 8008cd0:	2001      	movs	r0, #1
 8008cd2:	f7ff fdb5 	bl	8008840 <modbus_set_holding>
                DEBUG_RC("sent a message INFLOW_MAX_MODE\n");
 8008cd6:	4853      	ldr	r0, [pc, #332]	; (8008e24 <check_changes+0x1e0>)
 8008cd8:	f01d fe7e 	bl	80269d8 <puts>
            }
        }
        // проверяем изменения в установке скорости режима INFLOW_MODE
        if (device->mode == INFLOW_MODE)
 8008cdc:	4b4c      	ldr	r3, [pc, #304]	; (8008e10 <check_changes+0x1cc>)
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	7b1b      	ldrb	r3, [r3, #12]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d155      	bne.n	8008d92 <check_changes+0x14e>
        {
            // проверяем изменения в установке 1 скорости
            if (device->inflow_speed == 1 && reg_fan != 1)
 8008ce6:	4b4a      	ldr	r3, [pc, #296]	; (8008e10 <check_changes+0x1cc>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	7b9b      	ldrb	r3, [r3, #14]
 8008cec:	2b01      	cmp	r3, #1
 8008cee:	d10c      	bne.n	8008d0a <check_changes+0xc6>
 8008cf0:	4b4d      	ldr	r3, [pc, #308]	; (8008e28 <check_changes+0x1e4>)
 8008cf2:	781b      	ldrb	r3, [r3, #0]
 8008cf4:	2b01      	cmp	r3, #1
 8008cf6:	d008      	beq.n	8008d0a <check_changes+0xc6>
            {
                modbus_set_holding(DEFAUL_PULT_ID, REG_FAN, 1);
 8008cf8:	2201      	movs	r2, #1
 8008cfa:	2101      	movs	r1, #1
 8008cfc:	2001      	movs	r0, #1
 8008cfe:	f7ff fd9f 	bl	8008840 <modbus_set_holding>
                DEBUG_RC("sent a message speed == 1\n");
 8008d02:	484a      	ldr	r0, [pc, #296]	; (8008e2c <check_changes+0x1e8>)
 8008d04:	f01d fe68 	bl	80269d8 <puts>
 8008d08:	e043      	b.n	8008d92 <check_changes+0x14e>
            }
            // проверяем изменения в установке 3 скорости
            else if ((device->inflow_speed == 2 || device->inflow_speed == 3 || device->inflow_speed == 4) && reg_fan != 2)
 8008d0a:	4b41      	ldr	r3, [pc, #260]	; (8008e10 <check_changes+0x1cc>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	7b9b      	ldrb	r3, [r3, #14]
 8008d10:	2b02      	cmp	r3, #2
 8008d12:	d009      	beq.n	8008d28 <check_changes+0xe4>
 8008d14:	4b3e      	ldr	r3, [pc, #248]	; (8008e10 <check_changes+0x1cc>)
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	7b9b      	ldrb	r3, [r3, #14]
 8008d1a:	2b03      	cmp	r3, #3
 8008d1c:	d004      	beq.n	8008d28 <check_changes+0xe4>
 8008d1e:	4b3c      	ldr	r3, [pc, #240]	; (8008e10 <check_changes+0x1cc>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	7b9b      	ldrb	r3, [r3, #14]
 8008d24:	2b04      	cmp	r3, #4
 8008d26:	d10c      	bne.n	8008d42 <check_changes+0xfe>
 8008d28:	4b3f      	ldr	r3, [pc, #252]	; (8008e28 <check_changes+0x1e4>)
 8008d2a:	781b      	ldrb	r3, [r3, #0]
 8008d2c:	2b02      	cmp	r3, #2
 8008d2e:	d008      	beq.n	8008d42 <check_changes+0xfe>
            {
                modbus_set_holding(DEFAUL_PULT_ID, REG_FAN, 2);
 8008d30:	2202      	movs	r2, #2
 8008d32:	2101      	movs	r1, #1
 8008d34:	2001      	movs	r0, #1
 8008d36:	f7ff fd83 	bl	8008840 <modbus_set_holding>
                DEBUG_RC("sent a message speed == 3\n");
 8008d3a:	483d      	ldr	r0, [pc, #244]	; (8008e30 <check_changes+0x1ec>)
 8008d3c:	f01d fe4c 	bl	80269d8 <puts>
 8008d40:	e027      	b.n	8008d92 <check_changes+0x14e>
            }
            // проверяем изменения в установке 5 скорости
            else if ((device->inflow_speed == 5 || device->inflow_speed == 6) && reg_fan != 3)
 8008d42:	4b33      	ldr	r3, [pc, #204]	; (8008e10 <check_changes+0x1cc>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	7b9b      	ldrb	r3, [r3, #14]
 8008d48:	2b05      	cmp	r3, #5
 8008d4a:	d004      	beq.n	8008d56 <check_changes+0x112>
 8008d4c:	4b30      	ldr	r3, [pc, #192]	; (8008e10 <check_changes+0x1cc>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	7b9b      	ldrb	r3, [r3, #14]
 8008d52:	2b06      	cmp	r3, #6
 8008d54:	d10c      	bne.n	8008d70 <check_changes+0x12c>
 8008d56:	4b34      	ldr	r3, [pc, #208]	; (8008e28 <check_changes+0x1e4>)
 8008d58:	781b      	ldrb	r3, [r3, #0]
 8008d5a:	2b03      	cmp	r3, #3
 8008d5c:	d008      	beq.n	8008d70 <check_changes+0x12c>
            {
                modbus_set_holding(DEFAUL_PULT_ID, REG_FAN, 3);
 8008d5e:	2203      	movs	r2, #3
 8008d60:	2101      	movs	r1, #1
 8008d62:	2001      	movs	r0, #1
 8008d64:	f7ff fd6c 	bl	8008840 <modbus_set_holding>
                DEBUG_RC("sent a message speed == 5\n");
 8008d68:	4832      	ldr	r0, [pc, #200]	; (8008e34 <check_changes+0x1f0>)
 8008d6a:	f01d fe35 	bl	80269d8 <puts>
 8008d6e:	e010      	b.n	8008d92 <check_changes+0x14e>
            }
            // проверяем изменения в установке 7 скорости
            else if (device->inflow_speed == 7 && reg_fan != 4)
 8008d70:	4b27      	ldr	r3, [pc, #156]	; (8008e10 <check_changes+0x1cc>)
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	7b9b      	ldrb	r3, [r3, #14]
 8008d76:	2b07      	cmp	r3, #7
 8008d78:	d10b      	bne.n	8008d92 <check_changes+0x14e>
 8008d7a:	4b2b      	ldr	r3, [pc, #172]	; (8008e28 <check_changes+0x1e4>)
 8008d7c:	781b      	ldrb	r3, [r3, #0]
 8008d7e:	2b04      	cmp	r3, #4
 8008d80:	d007      	beq.n	8008d92 <check_changes+0x14e>
            {
                modbus_set_holding(DEFAUL_PULT_ID, REG_FAN, 4);
 8008d82:	2204      	movs	r2, #4
 8008d84:	2101      	movs	r1, #1
 8008d86:	2001      	movs	r0, #1
 8008d88:	f7ff fd5a 	bl	8008840 <modbus_set_holding>
                DEBUG_RC("sent a message speed == 7\n");
 8008d8c:	482a      	ldr	r0, [pc, #168]	; (8008e38 <check_changes+0x1f4>)
 8008d8e:	f01d fe23 	bl	80269d8 <puts>
            }
        }
        // проверяем изменения в установке температуры тена
        if (device->temp_limit != reg_temp)
 8008d92:	4b1f      	ldr	r3, [pc, #124]	; (8008e10 <check_changes+0x1cc>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	7e1a      	ldrb	r2, [r3, #24]
 8008d98:	4b28      	ldr	r3, [pc, #160]	; (8008e3c <check_changes+0x1f8>)
 8008d9a:	781b      	ldrb	r3, [r3, #0]
 8008d9c:	429a      	cmp	r2, r3
 8008d9e:	d00b      	beq.n	8008db8 <check_changes+0x174>
        {
            modbus_set_holding(DEFAUL_PULT_ID, REG_TEMP, device->temp_limit);
 8008da0:	4b1b      	ldr	r3, [pc, #108]	; (8008e10 <check_changes+0x1cc>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	7e1b      	ldrb	r3, [r3, #24]
 8008da6:	b29b      	uxth	r3, r3
 8008da8:	461a      	mov	r2, r3
 8008daa:	2102      	movs	r1, #2
 8008dac:	2001      	movs	r0, #1
 8008dae:	f7ff fd47 	bl	8008840 <modbus_set_holding>
            DEBUG_RC("sent a message ten");
 8008db2:	4823      	ldr	r0, [pc, #140]	; (8008e40 <check_changes+0x1fc>)
 8008db4:	f01d fd8a 	bl	80268cc <iprintf>
        }
        // проверяем изменения в установке значка включения тена
        if (ten_power > 0 && !reg_heater)
 8008db8:	4b22      	ldr	r3, [pc, #136]	; (8008e44 <check_changes+0x200>)
 8008dba:	881b      	ldrh	r3, [r3, #0]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d011      	beq.n	8008de4 <check_changes+0x1a0>
 8008dc0:	4b21      	ldr	r3, [pc, #132]	; (8008e48 <check_changes+0x204>)
 8008dc2:	781b      	ldrb	r3, [r3, #0]
 8008dc4:	f083 0301 	eor.w	r3, r3, #1
 8008dc8:	b2db      	uxtb	r3, r3
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d00a      	beq.n	8008de4 <check_changes+0x1a0>
        {
            reg_heater = true;
 8008dce:	4b1e      	ldr	r3, [pc, #120]	; (8008e48 <check_changes+0x204>)
 8008dd0:	2201      	movs	r2, #1
 8008dd2:	701a      	strb	r2, [r3, #0]
            modbus_set_holding(DEFAUL_PULT_ID, REG_HEATER, ON);
 8008dd4:	2201      	movs	r2, #1
 8008dd6:	210a      	movs	r1, #10
 8008dd8:	2001      	movs	r0, #1
 8008dda:	f7ff fd31 	bl	8008840 <modbus_set_holding>
            DEBUG_RC("sent a message ten.power > 0\n");
 8008dde:	481b      	ldr	r0, [pc, #108]	; (8008e4c <check_changes+0x208>)
 8008de0:	f01d fdfa 	bl	80269d8 <puts>
        }
        if (ten_power == 0 && reg_heater)
 8008de4:	4b17      	ldr	r3, [pc, #92]	; (8008e44 <check_changes+0x200>)
 8008de6:	881b      	ldrh	r3, [r3, #0]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d10e      	bne.n	8008e0a <check_changes+0x1c6>
 8008dec:	4b16      	ldr	r3, [pc, #88]	; (8008e48 <check_changes+0x204>)
 8008dee:	781b      	ldrb	r3, [r3, #0]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d00a      	beq.n	8008e0a <check_changes+0x1c6>
        {
            reg_heater = false;
 8008df4:	4b14      	ldr	r3, [pc, #80]	; (8008e48 <check_changes+0x204>)
 8008df6:	2200      	movs	r2, #0
 8008df8:	701a      	strb	r2, [r3, #0]
            modbus_set_holding(DEFAUL_PULT_ID, REG_HEATER, OFF);
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	210a      	movs	r1, #10
 8008dfe:	2001      	movs	r0, #1
 8008e00:	f7ff fd1e 	bl	8008840 <modbus_set_holding>
            DEBUG_RC("sent a message ten.power = 0\n");
 8008e04:	4812      	ldr	r0, [pc, #72]	; (8008e50 <check_changes+0x20c>)
 8008e06:	f01d fde7 	bl	80269d8 <puts>
        }
    }
}
 8008e0a:	bf00      	nop
 8008e0c:	bd80      	pop	{r7, pc}
 8008e0e:	bf00      	nop
 8008e10:	20013e2c 	.word	0x20013e2c
 8008e14:	200143f2 	.word	0x200143f2
 8008e18:	20014404 	.word	0x20014404
 8008e1c:	0802bb54 	.word	0x0802bb54
 8008e20:	0802bb80 	.word	0x0802bb80
 8008e24:	0802bbac 	.word	0x0802bbac
 8008e28:	200143fd 	.word	0x200143fd
 8008e2c:	0802bbdc 	.word	0x0802bbdc
 8008e30:	0802bc08 	.word	0x0802bc08
 8008e34:	0802bc34 	.word	0x0802bc34
 8008e38:	0802bc60 	.word	0x0802bc60
 8008e3c:	200143fc 	.word	0x200143fc
 8008e40:	0802bc8c 	.word	0x0802bc8c
 8008e44:	20013dfe 	.word	0x20013dfe
 8008e48:	2000006c 	.word	0x2000006c
 8008e4c:	0802bcb0 	.word	0x0802bcb0
 8008e50:	0802bce0 	.word	0x0802bce0

08008e54 <rc_send_handler>:

void rc_send_handler()
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	af00      	add	r7, sp, #0
    check_limit_fan();
 8008e58:	f7ff fec4 	bl	8008be4 <check_limit_fan>
    check_limit_temp();
 8008e5c:	f7ff feaa 	bl	8008bb4 <check_limit_temp>
    check_changes();
 8008e60:	f7ff fef0 	bl	8008c44 <check_changes>
    check_limit_work();
 8008e64:	f7ff fed6 	bl	8008c14 <check_limit_work>
}
 8008e68:	bf00      	nop
 8008e6a:	bd80      	pop	{r7, pc}

08008e6c <try_connect>:

void try_connect()
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	af00      	add	r7, sp, #0
    count_link++;
 8008e70:	4b13      	ldr	r3, [pc, #76]	; (8008ec0 <try_connect+0x54>)
 8008e72:	781b      	ldrb	r3, [r3, #0]
 8008e74:	3301      	adds	r3, #1
 8008e76:	b2da      	uxtb	r2, r3
 8008e78:	4b11      	ldr	r3, [pc, #68]	; (8008ec0 <try_connect+0x54>)
 8008e7a:	701a      	strb	r2, [r3, #0]
    if (count_link == LIMIT_LINK)
 8008e7c:	4b10      	ldr	r3, [pc, #64]	; (8008ec0 <try_connect+0x54>)
 8008e7e:	781b      	ldrb	r3, [r3, #0]
 8008e80:	2b1e      	cmp	r3, #30
 8008e82:	d11b      	bne.n	8008ebc <try_connect+0x50>
    {
        count_link = 0;
 8008e84:	4b0e      	ldr	r3, [pc, #56]	; (8008ec0 <try_connect+0x54>)
 8008e86:	2200      	movs	r2, #0
 8008e88:	701a      	strb	r2, [r3, #0]
        init_modbus_master();
 8008e8a:	f7fa fb95 	bl	80035b8 <init_modbus_master>
        new_reg_switch = modbus_get_holding(DEFAUL_PULT_ID, REG_SWITCH);
 8008e8e:	2100      	movs	r1, #0
 8008e90:	2001      	movs	r0, #1
 8008e92:	f7ff fce9 	bl	8008868 <modbus_get_holding>
 8008e96:	4603      	mov	r3, r0
 8008e98:	b21a      	sxth	r2, r3
 8008e9a:	4b0a      	ldr	r3, [pc, #40]	; (8008ec4 <try_connect+0x58>)
 8008e9c:	801a      	strh	r2, [r3, #0]
        if (new_reg_switch >= 0)
 8008e9e:	4b09      	ldr	r3, [pc, #36]	; (8008ec4 <try_connect+0x58>)
 8008ea0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	db09      	blt.n	8008ebc <try_connect+0x50>
        {
            DEBUG_RC("connect pult\n");
 8008ea8:	4807      	ldr	r0, [pc, #28]	; (8008ec8 <try_connect+0x5c>)
 8008eaa:	f01d fd95 	bl	80269d8 <puts>
            pult_link = true;
 8008eae:	4b07      	ldr	r3, [pc, #28]	; (8008ecc <try_connect+0x60>)
 8008eb0:	2201      	movs	r2, #1
 8008eb2:	701a      	strb	r2, [r3, #0]
            device->remote_control.error = OFF;
 8008eb4:	4b06      	ldr	r3, [pc, #24]	; (8008ed0 <try_connect+0x64>)
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	2200      	movs	r2, #0
 8008eba:	729a      	strb	r2, [r3, #10]
        }
    }
}
 8008ebc:	bf00      	nop
 8008ebe:	bd80      	pop	{r7, pc}
 8008ec0:	2000006f 	.word	0x2000006f
 8008ec4:	200143f0 	.word	0x200143f0
 8008ec8:	0802bd10 	.word	0x0802bd10
 8008ecc:	10000044 	.word	0x10000044
 8008ed0:	20013e2c 	.word	0x20013e2c

08008ed4 <RemoteControlTask>:

void RemoteControlTask(void *argument)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b082      	sub	sp, #8
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
	for (;;)
	{
        if (pult_link)
 8008edc:	4b07      	ldr	r3, [pc, #28]	; (8008efc <RemoteControlTask+0x28>)
 8008ede:	781b      	ldrb	r3, [r3, #0]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d004      	beq.n	8008eee <RemoteControlTask+0x1a>
        {
            rc_receive_handler();
 8008ee4:	f7ff fe52 	bl	8008b8c <rc_receive_handler>
            rc_send_handler();
 8008ee8:	f7ff ffb4 	bl	8008e54 <rc_send_handler>
 8008eec:	e001      	b.n	8008ef2 <RemoteControlTask+0x1e>
        }
        else
        {
        	try_connect();
 8008eee:	f7ff ffbd 	bl	8008e6c <try_connect>
        }
		osDelay(1000);
 8008ef2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008ef6:	f008 ff50 	bl	8011d9a <osDelay>
        if (pult_link)
 8008efa:	e7ef      	b.n	8008edc <RemoteControlTask+0x8>
 8008efc:	10000044 	.word	0x10000044

08008f00 <create_remote_control_task>:
	}
}

void create_remote_control_task()
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	af00      	add	r7, sp, #0
	modbusMasterTaskHandle = osThreadNew(RemoteControlTask, NULL, &modbusMasterTask_attributes);
 8008f04:	4a04      	ldr	r2, [pc, #16]	; (8008f18 <create_remote_control_task+0x18>)
 8008f06:	2100      	movs	r1, #0
 8008f08:	4804      	ldr	r0, [pc, #16]	; (8008f1c <create_remote_control_task+0x1c>)
 8008f0a:	f008 fea8 	bl	8011c5e <osThreadNew>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	4a03      	ldr	r2, [pc, #12]	; (8008f20 <create_remote_control_task+0x20>)
 8008f12:	6013      	str	r3, [r2, #0]
}
 8008f14:	bf00      	nop
 8008f16:	bd80      	pop	{r7, pc}
 8008f18:	0802f70c 	.word	0x0802f70c
 8008f1c:	08008ed5 	.word	0x08008ed5
 8008f20:	200143f8 	.word	0x200143f8

08008f24 <check_remote_control>:

void check_remote_control()
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	af00      	add	r7, sp, #0
	if (modbus_set_holding(DEFAUL_PULT_ID, REG_SWITCH, 0) == 1)
 8008f28:	2200      	movs	r2, #0
 8008f2a:	2100      	movs	r1, #0
 8008f2c:	2001      	movs	r0, #1
 8008f2e:	f7ff fc87 	bl	8008840 <modbus_set_holding>
 8008f32:	4603      	mov	r3, r0
 8008f34:	2b01      	cmp	r3, #1
 8008f36:	d106      	bne.n	8008f46 <check_remote_control+0x22>
	{
		device->remote_control.find = ON;
 8008f38:	4b09      	ldr	r3, [pc, #36]	; (8008f60 <check_remote_control+0x3c>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	2201      	movs	r2, #1
 8008f3e:	725a      	strb	r2, [r3, #9]
		create_remote_control_task();
 8008f40:	f7ff ffde 	bl	8008f00 <create_remote_control_task>
 8008f44:	e008      	b.n	8008f58 <check_remote_control+0x34>
	}
	else
	{
	    if (device->remote_control.find)
 8008f46:	4b06      	ldr	r3, [pc, #24]	; (8008f60 <check_remote_control+0x3c>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	7a5b      	ldrb	r3, [r3, #9]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d003      	beq.n	8008f58 <check_remote_control+0x34>
	    {
	        device->remote_control.error = ON;
 8008f50:	4b03      	ldr	r3, [pc, #12]	; (8008f60 <check_remote_control+0x3c>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	2201      	movs	r2, #1
 8008f56:	729a      	strb	r2, [r3, #10]
	    }
	}
	write_device_params();
 8008f58:	f000 fa44 	bl	80093e4 <write_device_params>
}
 8008f5c:	bf00      	nop
 8008f5e:	bd80      	pop	{r7, pc}
 8008f60:	20013e2c 	.word	0x20013e2c

08008f64 <middle_temp>:
uint8_t point[6] = {25, 25, 25, 25, 25, 25};
uint8_t ave = 25;


void middle_temp()
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b084      	sub	sp, #16
 8008f68:	af00      	add	r7, sp, #0
    float sum = 0.0; // переменная для суммы чисел в массиве
 8008f6a:	f04f 0300 	mov.w	r3, #0
 8008f6e:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < 6; i++)
 8008f70:	2300      	movs	r3, #0
 8008f72:	60bb      	str	r3, [r7, #8]
 8008f74:	e010      	b.n	8008f98 <middle_temp+0x34>
    {
        sum += point[i]; // накапливаем сумму
 8008f76:	4a16      	ldr	r2, [pc, #88]	; (8008fd0 <middle_temp+0x6c>)
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	4413      	add	r3, r2
 8008f7c:	781b      	ldrb	r3, [r3, #0]
 8008f7e:	ee07 3a90 	vmov	s15, r3
 8008f82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008f86:	ed97 7a03 	vldr	s14, [r7, #12]
 8008f8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008f8e:	edc7 7a03 	vstr	s15, [r7, #12]
    for (int i = 0; i < 6; i++)
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	3301      	adds	r3, #1
 8008f96:	60bb      	str	r3, [r7, #8]
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	2b05      	cmp	r3, #5
 8008f9c:	ddeb      	ble.n	8008f76 <middle_temp+0x12>
    }
    ave = (float)sum / 6; // вычисляем среднее арифметическое
 8008f9e:	ed97 7a03 	vldr	s14, [r7, #12]
 8008fa2:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8008fa6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008faa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008fae:	edc7 7a01 	vstr	s15, [r7, #4]
 8008fb2:	793b      	ldrb	r3, [r7, #4]
 8008fb4:	b2da      	uxtb	r2, r3
 8008fb6:	4b07      	ldr	r3, [pc, #28]	; (8008fd4 <middle_temp+0x70>)
 8008fb8:	701a      	strb	r2, [r3, #0]
    DEBUG_DS("AVE =%i\n", ave);
 8008fba:	4b06      	ldr	r3, [pc, #24]	; (8008fd4 <middle_temp+0x70>)
 8008fbc:	781b      	ldrb	r3, [r3, #0]
 8008fbe:	4619      	mov	r1, r3
 8008fc0:	4805      	ldr	r0, [pc, #20]	; (8008fd8 <middle_temp+0x74>)
 8008fc2:	f01d fc83 	bl	80268cc <iprintf>
}
 8008fc6:	bf00      	nop
 8008fc8:	3710      	adds	r7, #16
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bd80      	pop	{r7, pc}
 8008fce:	bf00      	nop
 8008fd0:	10000048 	.word	0x10000048
 8008fd4:	1000004e 	.word	0x1000004e
 8008fd8:	0802bd30 	.word	0x0802bd30

08008fdc <mass_temp>:

void mass_temp()
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b082      	sub	sp, #8
 8008fe0:	af00      	add	r7, sp, #0
    if (count < 6)
 8008fe2:	4b15      	ldr	r3, [pc, #84]	; (8009038 <mass_temp+0x5c>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	2b05      	cmp	r3, #5
 8008fe8:	d806      	bhi.n	8008ff8 <mass_temp+0x1c>
    {
        point[count] = temp[1]; //sensors_data->out;
 8008fea:	4b13      	ldr	r3, [pc, #76]	; (8009038 <mass_temp+0x5c>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	4a13      	ldr	r2, [pc, #76]	; (800903c <mass_temp+0x60>)
 8008ff0:	7851      	ldrb	r1, [r2, #1]
 8008ff2:	4a13      	ldr	r2, [pc, #76]	; (8009040 <mass_temp+0x64>)
 8008ff4:	54d1      	strb	r1, [r2, r3]
 8008ff6:	e013      	b.n	8009020 <mass_temp+0x44>
    }
    else
    {
        for (uint8_t i = 0; i < 5; i++)
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	71fb      	strb	r3, [r7, #7]
 8008ffc:	e009      	b.n	8009012 <mass_temp+0x36>
        {
            point[i] = point[i + 1];
 8008ffe:	79fb      	ldrb	r3, [r7, #7]
 8009000:	1c5a      	adds	r2, r3, #1
 8009002:	79fb      	ldrb	r3, [r7, #7]
 8009004:	490e      	ldr	r1, [pc, #56]	; (8009040 <mass_temp+0x64>)
 8009006:	5c89      	ldrb	r1, [r1, r2]
 8009008:	4a0d      	ldr	r2, [pc, #52]	; (8009040 <mass_temp+0x64>)
 800900a:	54d1      	strb	r1, [r2, r3]
        for (uint8_t i = 0; i < 5; i++)
 800900c:	79fb      	ldrb	r3, [r7, #7]
 800900e:	3301      	adds	r3, #1
 8009010:	71fb      	strb	r3, [r7, #7]
 8009012:	79fb      	ldrb	r3, [r7, #7]
 8009014:	2b04      	cmp	r3, #4
 8009016:	d9f2      	bls.n	8008ffe <mass_temp+0x22>
        }
        point[5] = temp[1]; //sensors_data->out;
 8009018:	4b08      	ldr	r3, [pc, #32]	; (800903c <mass_temp+0x60>)
 800901a:	785a      	ldrb	r2, [r3, #1]
 800901c:	4b08      	ldr	r3, [pc, #32]	; (8009040 <mass_temp+0x64>)
 800901e:	715a      	strb	r2, [r3, #5]
    }
    count++;
 8009020:	4b05      	ldr	r3, [pc, #20]	; (8009038 <mass_temp+0x5c>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	3301      	adds	r3, #1
 8009026:	4a04      	ldr	r2, [pc, #16]	; (8009038 <mass_temp+0x5c>)
 8009028:	6013      	str	r3, [r2, #0]
//    DEBUG_DS("POINT[1]=%i\n", point[1]);
//    DEBUG_DS("POINT[2]=%i\n", point[2]);
//    DEBUG_DS("POINT[3]=%i\n", point[3]);
//    DEBUG_DS("POINT[4]=%i\n", point[4]);
//    DEBUG_DS("POINT[5]=%i\n", point[5]);
    middle_temp();
 800902a:	f7ff ff9b 	bl	8008f64 <middle_temp>
}
 800902e:	bf00      	nop
 8009030:	3708      	adds	r7, #8
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}
 8009036:	bf00      	nop
 8009038:	2001448c 	.word	0x2001448c
 800903c:	2001441c 	.word	0x2001441c
 8009040:	10000048 	.word	0x10000048

08009044 <get_ds_data>:

void get_ds_data()
{
 8009044:	b590      	push	{r4, r7, lr}
 8009046:	b083      	sub	sp, #12
 8009048:	af00      	add	r7, sp, #0
	DS18B20_StartAll(&OW);
 800904a:	4848      	ldr	r0, [pc, #288]	; (800916c <get_ds_data+0x128>)
 800904c:	f7f8 f82d 	bl	80010aa <DS18B20_StartAll>
	/* Read temperature from device and store it to DS data structure */
	ds_count = 0;
 8009050:	4b47      	ldr	r3, [pc, #284]	; (8009170 <get_ds_data+0x12c>)
 8009052:	2200      	movs	r2, #0
 8009054:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < OW.RomCnt; i++)
 8009056:	2300      	movs	r3, #0
 8009058:	71fb      	strb	r3, [r7, #7]
 800905a:	e032      	b.n	80090c2 <get_ds_data+0x7e>
	{
		temp[ds_count] = DS18B20_Read(&OW, DS.DevAddr[i], &DS.Temperature[i]);
 800905c:	79fb      	ldrb	r3, [r7, #7]
 800905e:	00db      	lsls	r3, r3, #3
 8009060:	4a44      	ldr	r2, [pc, #272]	; (8009174 <get_ds_data+0x130>)
 8009062:	1899      	adds	r1, r3, r2
 8009064:	79fb      	ldrb	r3, [r7, #7]
 8009066:	3308      	adds	r3, #8
 8009068:	009b      	lsls	r3, r3, #2
 800906a:	4a42      	ldr	r2, [pc, #264]	; (8009174 <get_ds_data+0x130>)
 800906c:	4413      	add	r3, r2
 800906e:	4a40      	ldr	r2, [pc, #256]	; (8009170 <get_ds_data+0x12c>)
 8009070:	7812      	ldrb	r2, [r2, #0]
 8009072:	4614      	mov	r4, r2
 8009074:	461a      	mov	r2, r3
 8009076:	483d      	ldr	r0, [pc, #244]	; (800916c <get_ds_data+0x128>)
 8009078:	f7f8 f82a 	bl	80010d0 <DS18B20_Read>
 800907c:	4603      	mov	r3, r0
 800907e:	461a      	mov	r2, r3
 8009080:	4b3d      	ldr	r3, [pc, #244]	; (8009178 <get_ds_data+0x134>)
 8009082:	551a      	strb	r2, [r3, r4]
		sensors_data->in = temp[ds_count];
 8009084:	4b3a      	ldr	r3, [pc, #232]	; (8009170 <get_ds_data+0x12c>)
 8009086:	781b      	ldrb	r3, [r3, #0]
 8009088:	461a      	mov	r2, r3
 800908a:	4b3b      	ldr	r3, [pc, #236]	; (8009178 <get_ds_data+0x134>)
 800908c:	5c9a      	ldrb	r2, [r3, r2]
 800908e:	4b3b      	ldr	r3, [pc, #236]	; (800917c <get_ds_data+0x138>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	ee07 2a90 	vmov	s15, r2
 8009096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800909a:	edc3 7a02 	vstr	s15, [r3, #8]
		DEBUG_DS("Temperature1 = %i\n", temp[ds_count]);
 800909e:	4b34      	ldr	r3, [pc, #208]	; (8009170 <get_ds_data+0x12c>)
 80090a0:	781b      	ldrb	r3, [r3, #0]
 80090a2:	461a      	mov	r2, r3
 80090a4:	4b34      	ldr	r3, [pc, #208]	; (8009178 <get_ds_data+0x134>)
 80090a6:	5c9b      	ldrb	r3, [r3, r2]
 80090a8:	4619      	mov	r1, r3
 80090aa:	4835      	ldr	r0, [pc, #212]	; (8009180 <get_ds_data+0x13c>)
 80090ac:	f01d fc0e 	bl	80268cc <iprintf>
		ds_count++;
 80090b0:	4b2f      	ldr	r3, [pc, #188]	; (8009170 <get_ds_data+0x12c>)
 80090b2:	781b      	ldrb	r3, [r3, #0]
 80090b4:	3301      	adds	r3, #1
 80090b6:	b2da      	uxtb	r2, r3
 80090b8:	4b2d      	ldr	r3, [pc, #180]	; (8009170 <get_ds_data+0x12c>)
 80090ba:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < OW.RomCnt; i++)
 80090bc:	79fb      	ldrb	r3, [r7, #7]
 80090be:	3301      	adds	r3, #1
 80090c0:	71fb      	strb	r3, [r7, #7]
 80090c2:	4b2a      	ldr	r3, [pc, #168]	; (800916c <get_ds_data+0x128>)
 80090c4:	7adb      	ldrb	r3, [r3, #11]
 80090c6:	79fa      	ldrb	r2, [r7, #7]
 80090c8:	429a      	cmp	r2, r3
 80090ca:	d3c7      	bcc.n	800905c <get_ds_data+0x18>
	}
	/* Search Alarm triggered and store in DS data structure */
	DS18B20_AlarmSearch(&DS, &OW);
 80090cc:	4927      	ldr	r1, [pc, #156]	; (800916c <get_ds_data+0x128>)
 80090ce:	4829      	ldr	r0, [pc, #164]	; (8009174 <get_ds_data+0x130>)
 80090d0:	f7f8 f987 	bl	80013e2 <DS18B20_AlarmSearch>

	DS18B20_StartAll(&OW2);
 80090d4:	482b      	ldr	r0, [pc, #172]	; (8009184 <get_ds_data+0x140>)
 80090d6:	f7f7 ffe8 	bl	80010aa <DS18B20_StartAll>
	/* Read temperature from device and store it to DS data structure */
	for(uint8_t i = 0; i < OW2.RomCnt; i++)
 80090da:	2300      	movs	r3, #0
 80090dc:	71bb      	strb	r3, [r7, #6]
 80090de:	e032      	b.n	8009146 <get_ds_data+0x102>
	{
		temp[ds_count] = DS18B20_Read(&OW2, DS2.DevAddr[i], &DS2.Temperature[i]);
 80090e0:	79bb      	ldrb	r3, [r7, #6]
 80090e2:	00db      	lsls	r3, r3, #3
 80090e4:	4a28      	ldr	r2, [pc, #160]	; (8009188 <get_ds_data+0x144>)
 80090e6:	1899      	adds	r1, r3, r2
 80090e8:	79bb      	ldrb	r3, [r7, #6]
 80090ea:	3308      	adds	r3, #8
 80090ec:	009b      	lsls	r3, r3, #2
 80090ee:	4a26      	ldr	r2, [pc, #152]	; (8009188 <get_ds_data+0x144>)
 80090f0:	4413      	add	r3, r2
 80090f2:	4a1f      	ldr	r2, [pc, #124]	; (8009170 <get_ds_data+0x12c>)
 80090f4:	7812      	ldrb	r2, [r2, #0]
 80090f6:	4614      	mov	r4, r2
 80090f8:	461a      	mov	r2, r3
 80090fa:	4822      	ldr	r0, [pc, #136]	; (8009184 <get_ds_data+0x140>)
 80090fc:	f7f7 ffe8 	bl	80010d0 <DS18B20_Read>
 8009100:	4603      	mov	r3, r0
 8009102:	461a      	mov	r2, r3
 8009104:	4b1c      	ldr	r3, [pc, #112]	; (8009178 <get_ds_data+0x134>)
 8009106:	551a      	strb	r2, [r3, r4]
		sensors_data->out = temp[ds_count];
 8009108:	4b19      	ldr	r3, [pc, #100]	; (8009170 <get_ds_data+0x12c>)
 800910a:	781b      	ldrb	r3, [r3, #0]
 800910c:	461a      	mov	r2, r3
 800910e:	4b1a      	ldr	r3, [pc, #104]	; (8009178 <get_ds_data+0x134>)
 8009110:	5c9a      	ldrb	r2, [r3, r2]
 8009112:	4b1a      	ldr	r3, [pc, #104]	; (800917c <get_ds_data+0x138>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	ee07 2a90 	vmov	s15, r2
 800911a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800911e:	edc3 7a00 	vstr	s15, [r3]
		DEBUG_DS("Temperature2 = %i\n", temp[ds_count]);
 8009122:	4b13      	ldr	r3, [pc, #76]	; (8009170 <get_ds_data+0x12c>)
 8009124:	781b      	ldrb	r3, [r3, #0]
 8009126:	461a      	mov	r2, r3
 8009128:	4b13      	ldr	r3, [pc, #76]	; (8009178 <get_ds_data+0x134>)
 800912a:	5c9b      	ldrb	r3, [r3, r2]
 800912c:	4619      	mov	r1, r3
 800912e:	4817      	ldr	r0, [pc, #92]	; (800918c <get_ds_data+0x148>)
 8009130:	f01d fbcc 	bl	80268cc <iprintf>
		ds_count++;
 8009134:	4b0e      	ldr	r3, [pc, #56]	; (8009170 <get_ds_data+0x12c>)
 8009136:	781b      	ldrb	r3, [r3, #0]
 8009138:	3301      	adds	r3, #1
 800913a:	b2da      	uxtb	r2, r3
 800913c:	4b0c      	ldr	r3, [pc, #48]	; (8009170 <get_ds_data+0x12c>)
 800913e:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < OW2.RomCnt; i++)
 8009140:	79bb      	ldrb	r3, [r7, #6]
 8009142:	3301      	adds	r3, #1
 8009144:	71bb      	strb	r3, [r7, #6]
 8009146:	4b0f      	ldr	r3, [pc, #60]	; (8009184 <get_ds_data+0x140>)
 8009148:	7adb      	ldrb	r3, [r3, #11]
 800914a:	79ba      	ldrb	r2, [r7, #6]
 800914c:	429a      	cmp	r2, r3
 800914e:	d3c7      	bcc.n	80090e0 <get_ds_data+0x9c>
	}
	DEBUG_DS("ds_count = %i\n", ds_count);
 8009150:	4b07      	ldr	r3, [pc, #28]	; (8009170 <get_ds_data+0x12c>)
 8009152:	781b      	ldrb	r3, [r3, #0]
 8009154:	4619      	mov	r1, r3
 8009156:	480e      	ldr	r0, [pc, #56]	; (8009190 <get_ds_data+0x14c>)
 8009158:	f01d fbb8 	bl	80268cc <iprintf>
	/* Search Alarm triggered and store in DS data structure */
	DS18B20_AlarmSearch(&DS2, &OW2);
 800915c:	4909      	ldr	r1, [pc, #36]	; (8009184 <get_ds_data+0x140>)
 800915e:	480a      	ldr	r0, [pc, #40]	; (8009188 <get_ds_data+0x144>)
 8009160:	f7f8 f93f 	bl	80013e2 <DS18B20_AlarmSearch>
}
 8009164:	bf00      	nop
 8009166:	370c      	adds	r7, #12
 8009168:	46bd      	mov	sp, r7
 800916a:	bd90      	pop	{r4, r7, pc}
 800916c:	20014420 	.word	0x20014420
 8009170:	20014319 	.word	0x20014319
 8009174:	20014460 	.word	0x20014460
 8009178:	2001441c 	.word	0x2001441c
 800917c:	20013e34 	.word	0x20013e34
 8009180:	0802bd44 	.word	0x0802bd44
 8009184:	20014408 	.word	0x20014408
 8009188:	20014434 	.word	0x20014434
 800918c:	0802bd60 	.word	0x0802bd60
 8009190:	0802bd7c 	.word	0x0802bd7c

08009194 <get_ds_data_mass>:

void get_ds_data_mass()
{
 8009194:	b580      	push	{r7, lr}
 8009196:	af00      	add	r7, sp, #0
	get_ds_data();
 8009198:	f7ff ff54 	bl	8009044 <get_ds_data>
	mass_temp();
 800919c:	f7ff ff1e 	bl	8008fdc <mass_temp>
}
 80091a0:	bf00      	nop
 80091a2:	bd80      	pop	{r7, pc}

080091a4 <init_ds_devices>:

void init_ds_devices()
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	af00      	add	r7, sp, #0
	DwtInit();
 80091a8:	f7f8 f998 	bl	80014dc <DwtInit>

	OW.DataPin = DS_Pin;
 80091ac:	4b1d      	ldr	r3, [pc, #116]	; (8009224 <init_ds_devices+0x80>)
 80091ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80091b2:	819a      	strh	r2, [r3, #12]
	OW.DataPort = DS_GPIO_Port;
 80091b4:	4b1b      	ldr	r3, [pc, #108]	; (8009224 <init_ds_devices+0x80>)
 80091b6:	4a1c      	ldr	r2, [pc, #112]	; (8009228 <init_ds_devices+0x84>)
 80091b8:	611a      	str	r2, [r3, #16]
	DS.Resolution = DS18B20_Resolution_12bits;
 80091ba:	4b1c      	ldr	r3, [pc, #112]	; (800922c <init_ds_devices+0x88>)
 80091bc:	220c      	movs	r2, #12
 80091be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	DS18B20_Init(&DS, &OW);
 80091c2:	4918      	ldr	r1, [pc, #96]	; (8009224 <init_ds_devices+0x80>)
 80091c4:	4819      	ldr	r0, [pc, #100]	; (800922c <init_ds_devices+0x88>)
 80091c6:	f7f8 f94c 	bl	8001462 <DS18B20_Init>
	/* Set high temperature alarm on device number 0, 31 Deg C */
	DS18B20_SetTempAlarm(&OW, DS.DevAddr[0], 0, 31);
 80091ca:	231f      	movs	r3, #31
 80091cc:	2200      	movs	r2, #0
 80091ce:	4917      	ldr	r1, [pc, #92]	; (800922c <init_ds_devices+0x88>)
 80091d0:	4814      	ldr	r0, [pc, #80]	; (8009224 <init_ds_devices+0x80>)
 80091d2:	f7f8 f889 	bl	80012e8 <DS18B20_SetTempAlarm>
	if(OW.RomCnt == 1)
 80091d6:	4b13      	ldr	r3, [pc, #76]	; (8009224 <init_ds_devices+0x80>)
 80091d8:	7adb      	ldrb	r3, [r3, #11]
 80091da:	2b01      	cmp	r3, #1
 80091dc:	d103      	bne.n	80091e6 <init_ds_devices+0x42>
		sensors_data->in_state = true;
 80091de:	4b14      	ldr	r3, [pc, #80]	; (8009230 <init_ds_devices+0x8c>)
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	2201      	movs	r2, #1
 80091e4:	775a      	strb	r2, [r3, #29]

	OW2.DataPin = DS_Pin2;
 80091e6:	4b13      	ldr	r3, [pc, #76]	; (8009234 <init_ds_devices+0x90>)
 80091e8:	2240      	movs	r2, #64	; 0x40
 80091ea:	819a      	strh	r2, [r3, #12]
	OW2.DataPort = DS_GPIO_Port2;
 80091ec:	4b11      	ldr	r3, [pc, #68]	; (8009234 <init_ds_devices+0x90>)
 80091ee:	4a12      	ldr	r2, [pc, #72]	; (8009238 <init_ds_devices+0x94>)
 80091f0:	611a      	str	r2, [r3, #16]
	DS2.Resolution = DS18B20_Resolution_12bits;
 80091f2:	4b12      	ldr	r3, [pc, #72]	; (800923c <init_ds_devices+0x98>)
 80091f4:	220c      	movs	r2, #12
 80091f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	/* Set high temperature alarm on device number 0, 31 Deg C */
	DS18B20_Init(&DS2, &OW2);
 80091fa:	490e      	ldr	r1, [pc, #56]	; (8009234 <init_ds_devices+0x90>)
 80091fc:	480f      	ldr	r0, [pc, #60]	; (800923c <init_ds_devices+0x98>)
 80091fe:	f7f8 f930 	bl	8001462 <DS18B20_Init>
	DS18B20_SetTempAlarm(&OW2, DS2.DevAddr[0], 0, 60);
 8009202:	233c      	movs	r3, #60	; 0x3c
 8009204:	2200      	movs	r2, #0
 8009206:	490d      	ldr	r1, [pc, #52]	; (800923c <init_ds_devices+0x98>)
 8009208:	480a      	ldr	r0, [pc, #40]	; (8009234 <init_ds_devices+0x90>)
 800920a:	f7f8 f86d 	bl	80012e8 <DS18B20_SetTempAlarm>
	if(OW2.RomCnt == 1)
 800920e:	4b09      	ldr	r3, [pc, #36]	; (8009234 <init_ds_devices+0x90>)
 8009210:	7adb      	ldrb	r3, [r3, #11]
 8009212:	2b01      	cmp	r3, #1
 8009214:	d103      	bne.n	800921e <init_ds_devices+0x7a>
		sensors_data->out_state = true;
 8009216:	4b06      	ldr	r3, [pc, #24]	; (8009230 <init_ds_devices+0x8c>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	2201      	movs	r2, #1
 800921c:	771a      	strb	r2, [r3, #28]
}
 800921e:	bf00      	nop
 8009220:	bd80      	pop	{r7, pc}
 8009222:	bf00      	nop
 8009224:	20014420 	.word	0x20014420
 8009228:	40020c00 	.word	0x40020c00
 800922c:	20014460 	.word	0x20014460
 8009230:	20013e34 	.word	0x20013e34
 8009234:	20014408 	.word	0x20014408
 8009238:	40020800 	.word	0x40020800
 800923c:	20014434 	.word	0x20014434

08009240 <first_init_wireless>:
#include "storage.h"
#include "main.h"
#include <string.h>

void first_init_wireless()
{
 8009240:	b580      	push	{r7, lr}
 8009242:	af00      	add	r7, sp, #0
	// Настройки брокера Вакио
	wireless_params->vakio_mqtt.host[0] = 0;
 8009244:	4b29      	ldr	r3, [pc, #164]	; (80092ec <first_init_wireless+0xac>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	2200      	movs	r2, #0
 800924a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	wireless_params->vakio_mqtt.login[0] = 0;
 800924e:	4b27      	ldr	r3, [pc, #156]	; (80092ec <first_init_wireless+0xac>)
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	2200      	movs	r2, #0
 8009254:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	wireless_params->vakio_mqtt.password[0] = 0;
 8009258:	4b24      	ldr	r3, [pc, #144]	; (80092ec <first_init_wireless+0xac>)
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	2200      	movs	r2, #0
 800925e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	wireless_params->vakio_mqtt.port = DEFAULT_MQTT_PORT;
 8009262:	4b22      	ldr	r3, [pc, #136]	; (80092ec <first_init_wireless+0xac>)
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	f240 725b 	movw	r2, #1883	; 0x75b
 800926a:	679a      	str	r2, [r3, #120]	; 0x78
	wireless_params->vakio_mqtt.client_id[0] = 0;
 800926c:	4b1f      	ldr	r3, [pc, #124]	; (80092ec <first_init_wireless+0xac>)
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	2200      	movs	r2, #0
 8009272:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

	// Настройки брокера пользователя
	wireless_params->user_mqtt.host[0] = 0;
 8009276:	4b1d      	ldr	r3, [pc, #116]	; (80092ec <first_init_wireless+0xac>)
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	2200      	movs	r2, #0
 800927c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	wireless_params->user_mqtt.login[0] = 0;
 8009280:	4b1a      	ldr	r3, [pc, #104]	; (80092ec <first_init_wireless+0xac>)
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	2200      	movs	r2, #0
 8009286:	701a      	strb	r2, [r3, #0]
	wireless_params->user_mqtt.password[0] = 0;
 8009288:	4b18      	ldr	r3, [pc, #96]	; (80092ec <first_init_wireless+0xac>)
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	2200      	movs	r2, #0
 800928e:	731a      	strb	r2, [r3, #12]
	wireless_params->user_mqtt.port = DEFAULT_MQTT_PORT;
 8009290:	4b16      	ldr	r3, [pc, #88]	; (80092ec <first_init_wireless+0xac>)
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f240 725b 	movw	r2, #1883	; 0x75b
 8009298:	635a      	str	r2, [r3, #52]	; 0x34
	wireless_params->user_mqtt.client_id[0] = 0;
 800929a:	4b14      	ldr	r3, [pc, #80]	; (80092ec <first_init_wireless+0xac>)
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	2200      	movs	r2, #0
 80092a0:	761a      	strb	r2, [r3, #24]
	strcpy(wireless_params->user_mqtt.topic, DEFAULT_USER_TOPIC);
 80092a2:	4b12      	ldr	r3, [pc, #72]	; (80092ec <first_init_wireless+0xac>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	3338      	adds	r3, #56	; 0x38
 80092a8:	4a11      	ldr	r2, [pc, #68]	; (80092f0 <first_init_wireless+0xb0>)
 80092aa:	6810      	ldr	r0, [r2, #0]
 80092ac:	6018      	str	r0, [r3, #0]
 80092ae:	8892      	ldrh	r2, [r2, #4]
 80092b0:	809a      	strh	r2, [r3, #4]

	// Идентификаторы прибора
	wireless_params->vakio.device_id[0] = 0;
 80092b2:	4b0e      	ldr	r3, [pc, #56]	; (80092ec <first_init_wireless+0xac>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	2200      	movs	r2, #0
 80092b8:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
	wireless_params->vakio.user_id[0] = 0;
 80092bc:	4b0b      	ldr	r3, [pc, #44]	; (80092ec <first_init_wireless+0xac>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	2200      	movs	r2, #0
 80092c2:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

	// Тип подключения к брокеру
	wireless_params->mqtt_type = VAKIO_MQTT;
 80092c6:	4b09      	ldr	r3, [pc, #36]	; (80092ec <first_init_wireless+0xac>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	2201      	movs	r2, #1
 80092cc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

	// Айпи сервера
	wireless_params->server_ip[0] = 0;
 80092d0:	4b06      	ldr	r3, [pc, #24]	; (80092ec <first_init_wireless+0xac>)
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	2200      	movs	r2, #0
 80092d6:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
	wireless_params->vakio_mqtt_connect_ip = false;
 80092da:	4b04      	ldr	r3, [pc, #16]	; (80092ec <first_init_wireless+0xac>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	2200      	movs	r2, #0
 80092e0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
	write_wireless_params();
 80092e4:	f000 f85e 	bl	80093a4 <write_wireless_params>
}
 80092e8:	bf00      	nop
 80092ea:	bd80      	pop	{r7, pc}
 80092ec:	20013e30 	.word	0x20013e30
 80092f0:	0802bd94 	.word	0x0802bd94

080092f4 <first_init_device>:

void first_init_device()
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b082      	sub	sp, #8
 80092f8:	af00      	add	r7, sp, #0
	device->check_1_0_0 = CHECK_VALUE_1_0_0;
 80092fa:	4b28      	ldr	r3, [pc, #160]	; (800939c <first_init_device+0xa8>)
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	2201      	movs	r2, #1
 8009300:	72da      	strb	r2, [r3, #11]
	device->state = OFF;
 8009302:	4b26      	ldr	r3, [pc, #152]	; (800939c <first_init_device+0xa8>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	2200      	movs	r2, #0
 8009308:	709a      	strb	r2, [r3, #2]
	device->firmware_flag = false;
 800930a:	4b24      	ldr	r3, [pc, #144]	; (800939c <first_init_device+0xa8>)
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	2200      	movs	r2, #0
 8009310:	701a      	strb	r2, [r3, #0]
	device->error_temp_hot = false;
 8009312:	4b22      	ldr	r3, [pc, #136]	; (800939c <first_init_device+0xa8>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	2200      	movs	r2, #0
 8009318:	70da      	strb	r2, [r3, #3]
	device->error_temp_cold = false;
 800931a:	4b20      	ldr	r3, [pc, #128]	; (800939c <first_init_device+0xa8>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	2200      	movs	r2, #0
 8009320:	711a      	strb	r2, [r3, #4]
	device->error_stop_hot = false;
 8009322:	4b1e      	ldr	r3, [pc, #120]	; (800939c <first_init_device+0xa8>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	2200      	movs	r2, #0
 8009328:	715a      	strb	r2, [r3, #5]
	device->error_stop_cold = false;
 800932a:	4b1c      	ldr	r3, [pc, #112]	; (800939c <first_init_device+0xa8>)
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	2200      	movs	r2, #0
 8009330:	719a      	strb	r2, [r3, #6]
	device->error_fan = false;
 8009332:	4b1a      	ldr	r3, [pc, #104]	; (800939c <first_init_device+0xa8>)
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	2200      	movs	r2, #0
 8009338:	721a      	strb	r2, [r3, #8]
	device->mode = INFLOW_MODE;
 800933a:	4b18      	ldr	r3, [pc, #96]	; (800939c <first_init_device+0xa8>)
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	2200      	movs	r2, #0
 8009340:	731a      	strb	r2, [r3, #12]
	device->last_mode = INFLOW_MODE;
 8009342:	4b16      	ldr	r3, [pc, #88]	; (800939c <first_init_device+0xa8>)
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	2200      	movs	r2, #0
 8009348:	735a      	strb	r2, [r3, #13]
	device->inflow_speed = 1;
 800934a:	4b14      	ldr	r3, [pc, #80]	; (800939c <first_init_device+0xa8>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	2201      	movs	r2, #1
 8009350:	739a      	strb	r2, [r3, #14]
	uint8_t speed_arr[8] = SPEED_ARR_DEFAUL;
 8009352:	4a13      	ldr	r2, [pc, #76]	; (80093a0 <first_init_device+0xac>)
 8009354:	463b      	mov	r3, r7
 8009356:	e892 0003 	ldmia.w	r2, {r0, r1}
 800935a:	e883 0003 	stmia.w	r3, {r0, r1}
	memcpy(device->speed_arr, speed_arr, 8);
 800935e:	4b0f      	ldr	r3, [pc, #60]	; (800939c <first_init_device+0xa8>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	3310      	adds	r3, #16
 8009364:	461a      	mov	r2, r3
 8009366:	463b      	mov	r3, r7
 8009368:	cb03      	ldmia	r3!, {r0, r1}
 800936a:	6010      	str	r0, [r2, #0]
 800936c:	6051      	str	r1, [r2, #4]
	device->remote_control.find = OFF;
 800936e:	4b0b      	ldr	r3, [pc, #44]	; (800939c <first_init_device+0xa8>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	2200      	movs	r2, #0
 8009374:	725a      	strb	r2, [r3, #9]
	device->extra_options.deviation = 3;           // отклонение должно быть 3
 8009376:	4b09      	ldr	r3, [pc, #36]	; (800939c <first_init_device+0xa8>)
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	2203      	movs	r2, #3
 800937c:	765a      	strb	r2, [r3, #25]
	device->extra_options.check_time = 1;          // время проверки должно быть 1-5 минут
 800937e:	4b07      	ldr	r3, [pc, #28]	; (800939c <first_init_device+0xa8>)
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	2201      	movs	r2, #1
 8009384:	769a      	strb	r2, [r3, #26]
	device->extra_options.step_pwm = 5;            // шаг шим должно быть 5
 8009386:	4b05      	ldr	r3, [pc, #20]	; (800939c <first_init_device+0xa8>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	2205      	movs	r2, #5
 800938c:	76da      	strb	r2, [r3, #27]
	write_device_params();
 800938e:	f000 f829 	bl	80093e4 <write_device_params>
}
 8009392:	bf00      	nop
 8009394:	3708      	adds	r7, #8
 8009396:	46bd      	mov	sp, r7
 8009398:	bd80      	pop	{r7, pc}
 800939a:	bf00      	nop
 800939c:	20013e2c 	.word	0x20013e2c
 80093a0:	0802bd9c 	.word	0x0802bd9c

080093a4 <write_wireless_params>:
#define LOCATION_DEVICE 	0x080A0000 //0x081A0000
#define LOCATION_WIRELESS 	0x080C0000 //0x081C0000
#define LOCATION_EXTRA  	0x080E0000 //0x081E0000

void write_wireless_params()
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	af00      	add	r7, sp, #0
	Flash_Write_Data(LOCATION_WIRELESS, wireless_params, sizeof(wireless_parameters_s));
 80093a8:	4b04      	ldr	r3, [pc, #16]	; (80093bc <write_wireless_params+0x18>)
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	22b0      	movs	r2, #176	; 0xb0
 80093ae:	4619      	mov	r1, r3
 80093b0:	4803      	ldr	r0, [pc, #12]	; (80093c0 <write_wireless_params+0x1c>)
 80093b2:	f7f8 fc15 	bl	8001be0 <Flash_Write_Data>
}
 80093b6:	bf00      	nop
 80093b8:	bd80      	pop	{r7, pc}
 80093ba:	bf00      	nop
 80093bc:	20013e30 	.word	0x20013e30
 80093c0:	080c0000 	.word	0x080c0000

080093c4 <read_wireless_params>:

void read_wireless_params()
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	af00      	add	r7, sp, #0
	Flash_Read_Data(LOCATION_WIRELESS, wireless_params, sizeof(wireless_parameters_s));
 80093c8:	4b04      	ldr	r3, [pc, #16]	; (80093dc <read_wireless_params+0x18>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	22b0      	movs	r2, #176	; 0xb0
 80093ce:	4619      	mov	r1, r3
 80093d0:	4803      	ldr	r0, [pc, #12]	; (80093e0 <read_wireless_params+0x1c>)
 80093d2:	f7f8 fc63 	bl	8001c9c <Flash_Read_Data>
}
 80093d6:	bf00      	nop
 80093d8:	bd80      	pop	{r7, pc}
 80093da:	bf00      	nop
 80093dc:	20013e30 	.word	0x20013e30
 80093e0:	080c0000 	.word	0x080c0000

080093e4 <write_device_params>:

void write_device_params()
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	af00      	add	r7, sp, #0
	Flash_Write_Data(LOCATION_DEVICE, device, sizeof(device_s));
 80093e8:	4b04      	ldr	r3, [pc, #16]	; (80093fc <write_device_params+0x18>)
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	221c      	movs	r2, #28
 80093ee:	4619      	mov	r1, r3
 80093f0:	4803      	ldr	r0, [pc, #12]	; (8009400 <write_device_params+0x1c>)
 80093f2:	f7f8 fbf5 	bl	8001be0 <Flash_Write_Data>
}
 80093f6:	bf00      	nop
 80093f8:	bd80      	pop	{r7, pc}
 80093fa:	bf00      	nop
 80093fc:	20013e2c 	.word	0x20013e2c
 8009400:	080a0000 	.word	0x080a0000

08009404 <read_device_params>:

void read_device_params()
{
 8009404:	b580      	push	{r7, lr}
 8009406:	af00      	add	r7, sp, #0
	Flash_Read_Data(LOCATION_DEVICE, device, sizeof(device_s));
 8009408:	4b04      	ldr	r3, [pc, #16]	; (800941c <read_device_params+0x18>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	221c      	movs	r2, #28
 800940e:	4619      	mov	r1, r3
 8009410:	4803      	ldr	r0, [pc, #12]	; (8009420 <read_device_params+0x1c>)
 8009412:	f7f8 fc43 	bl	8001c9c <Flash_Read_Data>
}
 8009416:	bf00      	nop
 8009418:	bd80      	pop	{r7, pc}
 800941a:	bf00      	nop
 800941c:	20013e2c 	.word	0x20013e2c
 8009420:	080a0000 	.word	0x080a0000

08009424 <first_start_init>:

void first_start_init()
{
 8009424:	b580      	push	{r7, lr}
 8009426:	af00      	add	r7, sp, #0
    first_init_device();
 8009428:	f7ff ff64 	bl	80092f4 <first_init_device>
    first_init_wireless();
 800942c:	f7ff ff08 	bl	8009240 <first_init_wireless>
}
 8009430:	bf00      	nop
 8009432:	bd80      	pop	{r7, pc}

08009434 <second_start_init>:

void second_start_init()
{
 8009434:	b580      	push	{r7, lr}
 8009436:	af00      	add	r7, sp, #0
    read_device_params();
 8009438:	f7ff ffe4 	bl	8009404 <read_device_params>
    read_wireless_params();
 800943c:	f7ff ffc2 	bl	80093c4 <read_wireless_params>
}
 8009440:	bf00      	nop
 8009442:	bd80      	pop	{r7, pc}

08009444 <malloc_memory_parameters>:

void malloc_memory_parameters()
{
 8009444:	b580      	push	{r7, lr}
 8009446:	af00      	add	r7, sp, #0
    device = malloc(sizeof(device_s));
 8009448:	201c      	movs	r0, #28
 800944a:	f01c fb4b 	bl	8025ae4 <malloc>
 800944e:	4603      	mov	r3, r0
 8009450:	461a      	mov	r2, r3
 8009452:	4b09      	ldr	r3, [pc, #36]	; (8009478 <malloc_memory_parameters+0x34>)
 8009454:	601a      	str	r2, [r3, #0]
    wireless_params = malloc(sizeof(wireless_parameters_s));
 8009456:	20b0      	movs	r0, #176	; 0xb0
 8009458:	f01c fb44 	bl	8025ae4 <malloc>
 800945c:	4603      	mov	r3, r0
 800945e:	461a      	mov	r2, r3
 8009460:	4b06      	ldr	r3, [pc, #24]	; (800947c <malloc_memory_parameters+0x38>)
 8009462:	601a      	str	r2, [r3, #0]
    sensors_data = malloc(sizeof(sensors_data_s));
 8009464:	2020      	movs	r0, #32
 8009466:	f01c fb3d 	bl	8025ae4 <malloc>
 800946a:	4603      	mov	r3, r0
 800946c:	461a      	mov	r2, r3
 800946e:	4b04      	ldr	r3, [pc, #16]	; (8009480 <malloc_memory_parameters+0x3c>)
 8009470:	601a      	str	r2, [r3, #0]
}
 8009472:	bf00      	nop
 8009474:	bd80      	pop	{r7, pc}
 8009476:	bf00      	nop
 8009478:	20013e2c 	.word	0x20013e2c
 800947c:	20013e30 	.word	0x20013e30
 8009480:	20013e34 	.word	0x20013e34

08009484 <set_default_data>:
	device->check_1_0_0 = CHECK_VALUE_1_0_0 + 1;
	write_device_params();
}

void set_default_data()
{
 8009484:	b480      	push	{r7}
 8009486:	af00      	add	r7, sp, #0
	device->inflow_speed = 1;
 8009488:	4b0c      	ldr	r3, [pc, #48]	; (80094bc <set_default_data+0x38>)
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	2201      	movs	r2, #1
 800948e:	739a      	strb	r2, [r3, #14]
	device->temp_limit = TEN_TEMP_LIMIT;
 8009490:	4b0a      	ldr	r3, [pc, #40]	; (80094bc <set_default_data+0x38>)
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	2219      	movs	r2, #25
 8009496:	761a      	strb	r2, [r3, #24]
    device->remote_control.error = false;
 8009498:	4b08      	ldr	r3, [pc, #32]	; (80094bc <set_default_data+0x38>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	2200      	movs	r2, #0
 800949e:	729a      	strb	r2, [r3, #10]
    sensors_data->out_state = false;
 80094a0:	4b07      	ldr	r3, [pc, #28]	; (80094c0 <set_default_data+0x3c>)
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	2200      	movs	r2, #0
 80094a6:	771a      	strb	r2, [r3, #28]
    sensors_data->in_state = false;
 80094a8:	4b05      	ldr	r3, [pc, #20]	; (80094c0 <set_default_data+0x3c>)
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	2200      	movs	r2, #0
 80094ae:	775a      	strb	r2, [r3, #29]
}
 80094b0:	bf00      	nop
 80094b2:	46bd      	mov	sp, r7
 80094b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b8:	4770      	bx	lr
 80094ba:	bf00      	nop
 80094bc:	20013e2c 	.word	0x20013e2c
 80094c0:	20013e34 	.word	0x20013e34

080094c4 <init_storage>:

void init_storage()
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	af00      	add	r7, sp, #0
	malloc_memory_parameters();
 80094c8:	f7ff ffbc 	bl	8009444 <malloc_memory_parameters>
	read_device_params();
 80094cc:	f7ff ff9a 	bl	8009404 <read_device_params>
	// Проверка на первый запуск устройства
	if (device->check_1_0_0 != CHECK_VALUE_1_0_0)
 80094d0:	4b06      	ldr	r3, [pc, #24]	; (80094ec <init_storage+0x28>)
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	7adb      	ldrb	r3, [r3, #11]
 80094d6:	2b01      	cmp	r3, #1
 80094d8:	d002      	beq.n	80094e0 <init_storage+0x1c>
	{
		first_start_init();
 80094da:	f7ff ffa3 	bl	8009424 <first_start_init>
 80094de:	e001      	b.n	80094e4 <init_storage+0x20>
	}
	else
	{
		second_start_init();
 80094e0:	f7ff ffa8 	bl	8009434 <second_start_init>
	}
	set_default_data();
 80094e4:	f7ff ffce 	bl	8009484 <set_default_data>
}
 80094e8:	bf00      	nop
 80094ea:	bd80      	pop	{r7, pc}
 80094ec:	20013e2c 	.word	0x20013e2c

080094f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b082      	sub	sp, #8
 80094f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80094f6:	2300      	movs	r3, #0
 80094f8:	607b      	str	r3, [r7, #4]
 80094fa:	4b1f      	ldr	r3, [pc, #124]	; (8009578 <MX_DMA_Init+0x88>)
 80094fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094fe:	4a1e      	ldr	r2, [pc, #120]	; (8009578 <MX_DMA_Init+0x88>)
 8009500:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009504:	6313      	str	r3, [r2, #48]	; 0x30
 8009506:	4b1c      	ldr	r3, [pc, #112]	; (8009578 <MX_DMA_Init+0x88>)
 8009508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800950a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800950e:	607b      	str	r3, [r7, #4]
 8009510:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8009512:	2300      	movs	r3, #0
 8009514:	603b      	str	r3, [r7, #0]
 8009516:	4b18      	ldr	r3, [pc, #96]	; (8009578 <MX_DMA_Init+0x88>)
 8009518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800951a:	4a17      	ldr	r2, [pc, #92]	; (8009578 <MX_DMA_Init+0x88>)
 800951c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009520:	6313      	str	r3, [r2, #48]	; 0x30
 8009522:	4b15      	ldr	r3, [pc, #84]	; (8009578 <MX_DMA_Init+0x88>)
 8009524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009526:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800952a:	603b      	str	r3, [r7, #0]
 800952c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 800952e:	2200      	movs	r2, #0
 8009530:	2105      	movs	r1, #5
 8009532:	200b      	movs	r0, #11
 8009534:	f001 fd45 	bl	800afc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8009538:	200b      	movs	r0, #11
 800953a:	f001 fd5e 	bl	800affa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 800953e:	2200      	movs	r2, #0
 8009540:	2105      	movs	r1, #5
 8009542:	202f      	movs	r0, #47	; 0x2f
 8009544:	f001 fd3d 	bl	800afc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8009548:	202f      	movs	r0, #47	; 0x2f
 800954a:	f001 fd56 	bl	800affa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800954e:	2200      	movs	r2, #0
 8009550:	2105      	movs	r1, #5
 8009552:	203a      	movs	r0, #58	; 0x3a
 8009554:	f001 fd35 	bl	800afc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8009558:	203a      	movs	r0, #58	; 0x3a
 800955a:	f001 fd4e 	bl	800affa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 800955e:	2200      	movs	r2, #0
 8009560:	2105      	movs	r1, #5
 8009562:	2046      	movs	r0, #70	; 0x46
 8009564:	f001 fd2d 	bl	800afc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8009568:	2046      	movs	r0, #70	; 0x46
 800956a:	f001 fd46 	bl	800affa <HAL_NVIC_EnableIRQ>

}
 800956e:	bf00      	nop
 8009570:	3708      	adds	r7, #8
 8009572:	46bd      	mov	sp, r7
 8009574:	bd80      	pop	{r7, pc}
 8009576:	bf00      	nop
 8009578:	40023800 	.word	0x40023800

0800957c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800957c:	b580      	push	{r7, lr}
 800957e:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8009580:	4a10      	ldr	r2, [pc, #64]	; (80095c4 <MX_FREERTOS_Init+0x48>)
 8009582:	2100      	movs	r1, #0
 8009584:	4810      	ldr	r0, [pc, #64]	; (80095c8 <MX_FREERTOS_Init+0x4c>)
 8009586:	f008 fb6a 	bl	8011c5e <osThreadNew>
 800958a:	4603      	mov	r3, r0
 800958c:	4a0f      	ldr	r2, [pc, #60]	; (80095cc <MX_FREERTOS_Init+0x50>)
 800958e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  ledsTaskHandle = osThreadNew(LedsTask, NULL, &ledsTask_attributes);
 8009590:	4a0f      	ldr	r2, [pc, #60]	; (80095d0 <MX_FREERTOS_Init+0x54>)
 8009592:	2100      	movs	r1, #0
 8009594:	480f      	ldr	r0, [pc, #60]	; (80095d4 <MX_FREERTOS_Init+0x58>)
 8009596:	f008 fb62 	bl	8011c5e <osThreadNew>
 800959a:	4603      	mov	r3, r0
 800959c:	4a0e      	ldr	r2, [pc, #56]	; (80095d8 <MX_FREERTOS_Init+0x5c>)
 800959e:	6013      	str	r3, [r2, #0]
  damperTaskHandle = osThreadNew(DamperTask, NULL, &damperTask_attributes);
 80095a0:	4a0e      	ldr	r2, [pc, #56]	; (80095dc <MX_FREERTOS_Init+0x60>)
 80095a2:	2100      	movs	r1, #0
 80095a4:	480e      	ldr	r0, [pc, #56]	; (80095e0 <MX_FREERTOS_Init+0x64>)
 80095a6:	f008 fb5a 	bl	8011c5e <osThreadNew>
 80095aa:	4603      	mov	r3, r0
 80095ac:	4a0d      	ldr	r2, [pc, #52]	; (80095e4 <MX_FREERTOS_Init+0x68>)
 80095ae:	6013      	str	r3, [r2, #0]
  mainTaskHandle = osThreadNew(MainTask, NULL, &mainTask_attributes);
 80095b0:	4a0d      	ldr	r2, [pc, #52]	; (80095e8 <MX_FREERTOS_Init+0x6c>)
 80095b2:	2100      	movs	r1, #0
 80095b4:	480d      	ldr	r0, [pc, #52]	; (80095ec <MX_FREERTOS_Init+0x70>)
 80095b6:	f008 fb52 	bl	8011c5e <osThreadNew>
 80095ba:	4603      	mov	r3, r0
 80095bc:	4a0c      	ldr	r2, [pc, #48]	; (80095f0 <MX_FREERTOS_Init+0x74>)
 80095be:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80095c0:	bf00      	nop
 80095c2:	bd80      	pop	{r7, pc}
 80095c4:	0802f79c 	.word	0x0802f79c
 80095c8:	080095f5 	.word	0x080095f5
 80095cc:	20014498 	.word	0x20014498
 80095d0:	0802f730 	.word	0x0802f730
 80095d4:	0800858d 	.word	0x0800858d
 80095d8:	2001449c 	.word	0x2001449c
 80095dc:	0802f754 	.word	0x0802f754
 80095e0:	080082b1 	.word	0x080082b1
 80095e4:	20014490 	.word	0x20014490
 80095e8:	0802f778 	.word	0x0802f778
 80095ec:	08006661 	.word	0x08006661
 80095f0:	20014494 	.word	0x20014494

080095f4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80095f4:	b5b0      	push	{r4, r5, r7, lr}
 80095f6:	b082      	sub	sp, #8
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 80095fc:	f007 fe0e 	bl	801121c <MX_LWIP_Init>
  /* USER CODE BEGIN StartDefaultTask */
  http_server_init();
 8009600:	f7fc fd0a 	bl	8006018 <http_server_init>
  check_remote_control();
 8009604:	f7ff fc8e 	bl	8008f24 <check_remote_control>
  init_mqtt();
 8009608:	f7fd ff76 	bl	80074f8 <init_mqtt>
  device_send = *device;
 800960c:	4b14      	ldr	r3, [pc, #80]	; (8009660 <StartDefaultTask+0x6c>)
 800960e:	681a      	ldr	r2, [r3, #0]
 8009610:	4b14      	ldr	r3, [pc, #80]	; (8009664 <StartDefaultTask+0x70>)
 8009612:	6814      	ldr	r4, [r2, #0]
 8009614:	6850      	ldr	r0, [r2, #4]
 8009616:	6891      	ldr	r1, [r2, #8]
 8009618:	68d5      	ldr	r5, [r2, #12]
 800961a:	601c      	str	r4, [r3, #0]
 800961c:	6058      	str	r0, [r3, #4]
 800961e:	6099      	str	r1, [r3, #8]
 8009620:	60dd      	str	r5, [r3, #12]
 8009622:	6914      	ldr	r4, [r2, #16]
 8009624:	6950      	ldr	r0, [r2, #20]
 8009626:	6991      	ldr	r1, [r2, #24]
 8009628:	611c      	str	r4, [r3, #16]
 800962a:	6158      	str	r0, [r3, #20]
 800962c:	6199      	str	r1, [r3, #24]
  device_check = *device;
 800962e:	4b0c      	ldr	r3, [pc, #48]	; (8009660 <StartDefaultTask+0x6c>)
 8009630:	681a      	ldr	r2, [r3, #0]
 8009632:	4b0d      	ldr	r3, [pc, #52]	; (8009668 <StartDefaultTask+0x74>)
 8009634:	6814      	ldr	r4, [r2, #0]
 8009636:	6850      	ldr	r0, [r2, #4]
 8009638:	6891      	ldr	r1, [r2, #8]
 800963a:	68d5      	ldr	r5, [r2, #12]
 800963c:	601c      	str	r4, [r3, #0]
 800963e:	6058      	str	r0, [r3, #4]
 8009640:	6099      	str	r1, [r3, #8]
 8009642:	60dd      	str	r5, [r3, #12]
 8009644:	6914      	ldr	r4, [r2, #16]
 8009646:	6950      	ldr	r0, [r2, #20]
 8009648:	6991      	ldr	r1, [r2, #24]
 800964a:	611c      	str	r4, [r3, #16]
 800964c:	6158      	str	r0, [r3, #20]
 800964e:	6199      	str	r1, [r3, #24]
  /* Infinite loop */
  for(;;)
  {
	  start_mqtt();
 8009650:	f7fd fd16 	bl	8007080 <start_mqtt>
	  osDelay(1000);
 8009654:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009658:	f008 fb9f 	bl	8011d9a <osDelay>
	  start_mqtt();
 800965c:	e7f8      	b.n	8009650 <StartDefaultTask+0x5c>
 800965e:	bf00      	nop
 8009660:	20013e2c 	.word	0x20013e2c
 8009664:	20013e10 	.word	0x20013e10
 8009668:	20013de0 	.word	0x20013de0

0800966c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b08c      	sub	sp, #48	; 0x30
 8009670:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009672:	f107 031c 	add.w	r3, r7, #28
 8009676:	2200      	movs	r2, #0
 8009678:	601a      	str	r2, [r3, #0]
 800967a:	605a      	str	r2, [r3, #4]
 800967c:	609a      	str	r2, [r3, #8]
 800967e:	60da      	str	r2, [r3, #12]
 8009680:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8009682:	2300      	movs	r3, #0
 8009684:	61bb      	str	r3, [r7, #24]
 8009686:	4b5a      	ldr	r3, [pc, #360]	; (80097f0 <MX_GPIO_Init+0x184>)
 8009688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800968a:	4a59      	ldr	r2, [pc, #356]	; (80097f0 <MX_GPIO_Init+0x184>)
 800968c:	f043 0310 	orr.w	r3, r3, #16
 8009690:	6313      	str	r3, [r2, #48]	; 0x30
 8009692:	4b57      	ldr	r3, [pc, #348]	; (80097f0 <MX_GPIO_Init+0x184>)
 8009694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009696:	f003 0310 	and.w	r3, r3, #16
 800969a:	61bb      	str	r3, [r7, #24]
 800969c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800969e:	2300      	movs	r3, #0
 80096a0:	617b      	str	r3, [r7, #20]
 80096a2:	4b53      	ldr	r3, [pc, #332]	; (80097f0 <MX_GPIO_Init+0x184>)
 80096a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096a6:	4a52      	ldr	r2, [pc, #328]	; (80097f0 <MX_GPIO_Init+0x184>)
 80096a8:	f043 0304 	orr.w	r3, r3, #4
 80096ac:	6313      	str	r3, [r2, #48]	; 0x30
 80096ae:	4b50      	ldr	r3, [pc, #320]	; (80097f0 <MX_GPIO_Init+0x184>)
 80096b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096b2:	f003 0304 	and.w	r3, r3, #4
 80096b6:	617b      	str	r3, [r7, #20]
 80096b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80096ba:	2300      	movs	r3, #0
 80096bc:	613b      	str	r3, [r7, #16]
 80096be:	4b4c      	ldr	r3, [pc, #304]	; (80097f0 <MX_GPIO_Init+0x184>)
 80096c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096c2:	4a4b      	ldr	r2, [pc, #300]	; (80097f0 <MX_GPIO_Init+0x184>)
 80096c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096c8:	6313      	str	r3, [r2, #48]	; 0x30
 80096ca:	4b49      	ldr	r3, [pc, #292]	; (80097f0 <MX_GPIO_Init+0x184>)
 80096cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096d2:	613b      	str	r3, [r7, #16]
 80096d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80096d6:	2300      	movs	r3, #0
 80096d8:	60fb      	str	r3, [r7, #12]
 80096da:	4b45      	ldr	r3, [pc, #276]	; (80097f0 <MX_GPIO_Init+0x184>)
 80096dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096de:	4a44      	ldr	r2, [pc, #272]	; (80097f0 <MX_GPIO_Init+0x184>)
 80096e0:	f043 0301 	orr.w	r3, r3, #1
 80096e4:	6313      	str	r3, [r2, #48]	; 0x30
 80096e6:	4b42      	ldr	r3, [pc, #264]	; (80097f0 <MX_GPIO_Init+0x184>)
 80096e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096ea:	f003 0301 	and.w	r3, r3, #1
 80096ee:	60fb      	str	r3, [r7, #12]
 80096f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80096f2:	2300      	movs	r3, #0
 80096f4:	60bb      	str	r3, [r7, #8]
 80096f6:	4b3e      	ldr	r3, [pc, #248]	; (80097f0 <MX_GPIO_Init+0x184>)
 80096f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096fa:	4a3d      	ldr	r2, [pc, #244]	; (80097f0 <MX_GPIO_Init+0x184>)
 80096fc:	f043 0302 	orr.w	r3, r3, #2
 8009700:	6313      	str	r3, [r2, #48]	; 0x30
 8009702:	4b3b      	ldr	r3, [pc, #236]	; (80097f0 <MX_GPIO_Init+0x184>)
 8009704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009706:	f003 0302 	and.w	r3, r3, #2
 800970a:	60bb      	str	r3, [r7, #8]
 800970c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800970e:	2300      	movs	r3, #0
 8009710:	607b      	str	r3, [r7, #4]
 8009712:	4b37      	ldr	r3, [pc, #220]	; (80097f0 <MX_GPIO_Init+0x184>)
 8009714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009716:	4a36      	ldr	r2, [pc, #216]	; (80097f0 <MX_GPIO_Init+0x184>)
 8009718:	f043 0308 	orr.w	r3, r3, #8
 800971c:	6313      	str	r3, [r2, #48]	; 0x30
 800971e:	4b34      	ldr	r3, [pc, #208]	; (80097f0 <MX_GPIO_Init+0x184>)
 8009720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009722:	f003 0308 	and.w	r3, r3, #8
 8009726:	607b      	str	r3, [r7, #4]
 8009728:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SW_DIP3_Pin|SW_DIP4_Pin|SW_DIP5_Pin|SW_DIP6_Pin
 800972a:	2200      	movs	r2, #0
 800972c:	213f      	movs	r1, #63	; 0x3f
 800972e:	4831      	ldr	r0, [pc, #196]	; (80097f4 <MX_GPIO_Init+0x188>)
 8009730:	f003 fea6 	bl	800d480 <HAL_GPIO_WritePin>
                          |SW_DIP1_Pin|SW_DIP2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|USART1_DIR_Pin, GPIO_PIN_RESET);
 8009734:	2200      	movs	r2, #0
 8009736:	f241 0110 	movw	r1, #4112	; 0x1010
 800973a:	482f      	ldr	r0, [pc, #188]	; (80097f8 <MX_GPIO_Init+0x18c>)
 800973c:	f003 fea0 	bl	800d480 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RELAY_CH1_Pin|RELAY_CH2_Pin|RELAY_CH3_Pin|RELAY_CH4_Pin
 8009740:	2200      	movs	r2, #0
 8009742:	f24f 01e8 	movw	r1, #61672	; 0xf0e8
 8009746:	482d      	ldr	r0, [pc, #180]	; (80097fc <MX_GPIO_Init+0x190>)
 8009748:	f003 fe9a 	bl	800d480 <HAL_GPIO_WritePin>
                          |UART5_DIR_Pin|LED_LINK_Pin|LED_WORK_Pin|LED_FAILURE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SSR_GATE1_GPIO_Port, SSR_GATE1_Pin, GPIO_PIN_RESET);
 800974c:	2200      	movs	r2, #0
 800974e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009752:	482b      	ldr	r0, [pc, #172]	; (8009800 <MX_GPIO_Init+0x194>)
 8009754:	f003 fe94 	bl	800d480 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = SW_DIP3_Pin|SW_DIP4_Pin|SW_DIP5_Pin|SW_DIP6_Pin
 8009758:	233f      	movs	r3, #63	; 0x3f
 800975a:	61fb      	str	r3, [r7, #28]
                          |SW_DIP1_Pin|SW_DIP2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800975c:	2301      	movs	r3, #1
 800975e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009760:	2300      	movs	r3, #0
 8009762:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009764:	2300      	movs	r3, #0
 8009766:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009768:	f107 031c 	add.w	r3, r7, #28
 800976c:	4619      	mov	r1, r3
 800976e:	4821      	ldr	r0, [pc, #132]	; (80097f4 <MX_GPIO_Init+0x188>)
 8009770:	f003 fcd2 	bl	800d118 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|USART1_DIR_Pin;
 8009774:	f241 0310 	movw	r3, #4112	; 0x1010
 8009778:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800977a:	2301      	movs	r3, #1
 800977c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800977e:	2300      	movs	r3, #0
 8009780:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009782:	2300      	movs	r3, #0
 8009784:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009786:	f107 031c 	add.w	r3, r7, #28
 800978a:	4619      	mov	r1, r3
 800978c:	481a      	ldr	r0, [pc, #104]	; (80097f8 <MX_GPIO_Init+0x18c>)
 800978e:	f003 fcc3 	bl	800d118 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SERVICE_BTN_Pin;
 8009792:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009796:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009798:	2300      	movs	r3, #0
 800979a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800979c:	2301      	movs	r3, #1
 800979e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SERVICE_BTN_GPIO_Port, &GPIO_InitStruct);
 80097a0:	f107 031c 	add.w	r3, r7, #28
 80097a4:	4619      	mov	r1, r3
 80097a6:	4815      	ldr	r0, [pc, #84]	; (80097fc <MX_GPIO_Init+0x190>)
 80097a8:	f003 fcb6 	bl	800d118 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = RELAY_CH1_Pin|RELAY_CH2_Pin|RELAY_CH3_Pin|RELAY_CH4_Pin
 80097ac:	f24f 03e8 	movw	r3, #61672	; 0xf0e8
 80097b0:	61fb      	str	r3, [r7, #28]
                          |UART5_DIR_Pin|LED_LINK_Pin|LED_WORK_Pin|LED_FAILURE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80097b2:	2301      	movs	r3, #1
 80097b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097b6:	2300      	movs	r3, #0
 80097b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80097ba:	2300      	movs	r3, #0
 80097bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80097be:	f107 031c 	add.w	r3, r7, #28
 80097c2:	4619      	mov	r1, r3
 80097c4:	480d      	ldr	r0, [pc, #52]	; (80097fc <MX_GPIO_Init+0x190>)
 80097c6:	f003 fca7 	bl	800d118 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SSR_GATE1_Pin;
 80097ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80097ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80097d0:	2301      	movs	r3, #1
 80097d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097d4:	2300      	movs	r3, #0
 80097d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80097d8:	2300      	movs	r3, #0
 80097da:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SSR_GATE1_GPIO_Port, &GPIO_InitStruct);
 80097dc:	f107 031c 	add.w	r3, r7, #28
 80097e0:	4619      	mov	r1, r3
 80097e2:	4807      	ldr	r0, [pc, #28]	; (8009800 <MX_GPIO_Init+0x194>)
 80097e4:	f003 fc98 	bl	800d118 <HAL_GPIO_Init>

}
 80097e8:	bf00      	nop
 80097ea:	3730      	adds	r7, #48	; 0x30
 80097ec:	46bd      	mov	sp, r7
 80097ee:	bd80      	pop	{r7, pc}
 80097f0:	40023800 	.word	0x40023800
 80097f4:	40021000 	.word	0x40021000
 80097f8:	40020000 	.word	0x40020000
 80097fc:	40020c00 	.word	0x40020c00
 8009800:	40020800 	.word	0x40020800

08009804 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8009808:	4b12      	ldr	r3, [pc, #72]	; (8009854 <MX_I2C1_Init+0x50>)
 800980a:	4a13      	ldr	r2, [pc, #76]	; (8009858 <MX_I2C1_Init+0x54>)
 800980c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800980e:	4b11      	ldr	r3, [pc, #68]	; (8009854 <MX_I2C1_Init+0x50>)
 8009810:	4a12      	ldr	r2, [pc, #72]	; (800985c <MX_I2C1_Init+0x58>)
 8009812:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8009814:	4b0f      	ldr	r3, [pc, #60]	; (8009854 <MX_I2C1_Init+0x50>)
 8009816:	2200      	movs	r2, #0
 8009818:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800981a:	4b0e      	ldr	r3, [pc, #56]	; (8009854 <MX_I2C1_Init+0x50>)
 800981c:	2200      	movs	r2, #0
 800981e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8009820:	4b0c      	ldr	r3, [pc, #48]	; (8009854 <MX_I2C1_Init+0x50>)
 8009822:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009826:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8009828:	4b0a      	ldr	r3, [pc, #40]	; (8009854 <MX_I2C1_Init+0x50>)
 800982a:	2200      	movs	r2, #0
 800982c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800982e:	4b09      	ldr	r3, [pc, #36]	; (8009854 <MX_I2C1_Init+0x50>)
 8009830:	2200      	movs	r2, #0
 8009832:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8009834:	4b07      	ldr	r3, [pc, #28]	; (8009854 <MX_I2C1_Init+0x50>)
 8009836:	2200      	movs	r2, #0
 8009838:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800983a:	4b06      	ldr	r3, [pc, #24]	; (8009854 <MX_I2C1_Init+0x50>)
 800983c:	2200      	movs	r2, #0
 800983e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8009840:	4804      	ldr	r0, [pc, #16]	; (8009854 <MX_I2C1_Init+0x50>)
 8009842:	f003 fe51 	bl	800d4e8 <HAL_I2C_Init>
 8009846:	4603      	mov	r3, r0
 8009848:	2b00      	cmp	r3, #0
 800984a:	d001      	beq.n	8009850 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800984c:	f000 fa1e 	bl	8009c8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8009850:	bf00      	nop
 8009852:	bd80      	pop	{r7, pc}
 8009854:	200144f4 	.word	0x200144f4
 8009858:	40005400 	.word	0x40005400
 800985c:	000186a0 	.word	0x000186a0

08009860 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8009864:	4b12      	ldr	r3, [pc, #72]	; (80098b0 <MX_I2C3_Init+0x50>)
 8009866:	4a13      	ldr	r2, [pc, #76]	; (80098b4 <MX_I2C3_Init+0x54>)
 8009868:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800986a:	4b11      	ldr	r3, [pc, #68]	; (80098b0 <MX_I2C3_Init+0x50>)
 800986c:	4a12      	ldr	r2, [pc, #72]	; (80098b8 <MX_I2C3_Init+0x58>)
 800986e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8009870:	4b0f      	ldr	r3, [pc, #60]	; (80098b0 <MX_I2C3_Init+0x50>)
 8009872:	2200      	movs	r2, #0
 8009874:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8009876:	4b0e      	ldr	r3, [pc, #56]	; (80098b0 <MX_I2C3_Init+0x50>)
 8009878:	2200      	movs	r2, #0
 800987a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800987c:	4b0c      	ldr	r3, [pc, #48]	; (80098b0 <MX_I2C3_Init+0x50>)
 800987e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009882:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8009884:	4b0a      	ldr	r3, [pc, #40]	; (80098b0 <MX_I2C3_Init+0x50>)
 8009886:	2200      	movs	r2, #0
 8009888:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800988a:	4b09      	ldr	r3, [pc, #36]	; (80098b0 <MX_I2C3_Init+0x50>)
 800988c:	2200      	movs	r2, #0
 800988e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8009890:	4b07      	ldr	r3, [pc, #28]	; (80098b0 <MX_I2C3_Init+0x50>)
 8009892:	2200      	movs	r2, #0
 8009894:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8009896:	4b06      	ldr	r3, [pc, #24]	; (80098b0 <MX_I2C3_Init+0x50>)
 8009898:	2200      	movs	r2, #0
 800989a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800989c:	4804      	ldr	r0, [pc, #16]	; (80098b0 <MX_I2C3_Init+0x50>)
 800989e:	f003 fe23 	bl	800d4e8 <HAL_I2C_Init>
 80098a2:	4603      	mov	r3, r0
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d001      	beq.n	80098ac <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80098a8:	f000 f9f0 	bl	8009c8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80098ac:	bf00      	nop
 80098ae:	bd80      	pop	{r7, pc}
 80098b0:	200144a0 	.word	0x200144a0
 80098b4:	40005c00 	.word	0x40005c00
 80098b8:	000186a0 	.word	0x000186a0

080098bc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b08c      	sub	sp, #48	; 0x30
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80098c4:	f107 031c 	add.w	r3, r7, #28
 80098c8:	2200      	movs	r2, #0
 80098ca:	601a      	str	r2, [r3, #0]
 80098cc:	605a      	str	r2, [r3, #4]
 80098ce:	609a      	str	r2, [r3, #8]
 80098d0:	60da      	str	r2, [r3, #12]
 80098d2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	4a42      	ldr	r2, [pc, #264]	; (80099e4 <HAL_I2C_MspInit+0x128>)
 80098da:	4293      	cmp	r3, r2
 80098dc:	d12c      	bne.n	8009938 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80098de:	2300      	movs	r3, #0
 80098e0:	61bb      	str	r3, [r7, #24]
 80098e2:	4b41      	ldr	r3, [pc, #260]	; (80099e8 <HAL_I2C_MspInit+0x12c>)
 80098e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098e6:	4a40      	ldr	r2, [pc, #256]	; (80099e8 <HAL_I2C_MspInit+0x12c>)
 80098e8:	f043 0302 	orr.w	r3, r3, #2
 80098ec:	6313      	str	r3, [r2, #48]	; 0x30
 80098ee:	4b3e      	ldr	r3, [pc, #248]	; (80099e8 <HAL_I2C_MspInit+0x12c>)
 80098f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098f2:	f003 0302 	and.w	r3, r3, #2
 80098f6:	61bb      	str	r3, [r7, #24]
 80098f8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80098fa:	23c0      	movs	r3, #192	; 0xc0
 80098fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80098fe:	2312      	movs	r3, #18
 8009900:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009902:	2300      	movs	r3, #0
 8009904:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009906:	2303      	movs	r3, #3
 8009908:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800990a:	2304      	movs	r3, #4
 800990c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800990e:	f107 031c 	add.w	r3, r7, #28
 8009912:	4619      	mov	r1, r3
 8009914:	4835      	ldr	r0, [pc, #212]	; (80099ec <HAL_I2C_MspInit+0x130>)
 8009916:	f003 fbff 	bl	800d118 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800991a:	2300      	movs	r3, #0
 800991c:	617b      	str	r3, [r7, #20]
 800991e:	4b32      	ldr	r3, [pc, #200]	; (80099e8 <HAL_I2C_MspInit+0x12c>)
 8009920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009922:	4a31      	ldr	r2, [pc, #196]	; (80099e8 <HAL_I2C_MspInit+0x12c>)
 8009924:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009928:	6413      	str	r3, [r2, #64]	; 0x40
 800992a:	4b2f      	ldr	r3, [pc, #188]	; (80099e8 <HAL_I2C_MspInit+0x12c>)
 800992c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800992e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009932:	617b      	str	r3, [r7, #20]
 8009934:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8009936:	e050      	b.n	80099da <HAL_I2C_MspInit+0x11e>
  else if(i2cHandle->Instance==I2C3)
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	4a2c      	ldr	r2, [pc, #176]	; (80099f0 <HAL_I2C_MspInit+0x134>)
 800993e:	4293      	cmp	r3, r2
 8009940:	d14b      	bne.n	80099da <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009942:	2300      	movs	r3, #0
 8009944:	613b      	str	r3, [r7, #16]
 8009946:	4b28      	ldr	r3, [pc, #160]	; (80099e8 <HAL_I2C_MspInit+0x12c>)
 8009948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800994a:	4a27      	ldr	r2, [pc, #156]	; (80099e8 <HAL_I2C_MspInit+0x12c>)
 800994c:	f043 0304 	orr.w	r3, r3, #4
 8009950:	6313      	str	r3, [r2, #48]	; 0x30
 8009952:	4b25      	ldr	r3, [pc, #148]	; (80099e8 <HAL_I2C_MspInit+0x12c>)
 8009954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009956:	f003 0304 	and.w	r3, r3, #4
 800995a:	613b      	str	r3, [r7, #16]
 800995c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800995e:	2300      	movs	r3, #0
 8009960:	60fb      	str	r3, [r7, #12]
 8009962:	4b21      	ldr	r3, [pc, #132]	; (80099e8 <HAL_I2C_MspInit+0x12c>)
 8009964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009966:	4a20      	ldr	r2, [pc, #128]	; (80099e8 <HAL_I2C_MspInit+0x12c>)
 8009968:	f043 0301 	orr.w	r3, r3, #1
 800996c:	6313      	str	r3, [r2, #48]	; 0x30
 800996e:	4b1e      	ldr	r3, [pc, #120]	; (80099e8 <HAL_I2C_MspInit+0x12c>)
 8009970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009972:	f003 0301 	and.w	r3, r3, #1
 8009976:	60fb      	str	r3, [r7, #12]
 8009978:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800997a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800997e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009980:	2312      	movs	r3, #18
 8009982:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009984:	2300      	movs	r3, #0
 8009986:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009988:	2303      	movs	r3, #3
 800998a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800998c:	2304      	movs	r3, #4
 800998e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009990:	f107 031c 	add.w	r3, r7, #28
 8009994:	4619      	mov	r1, r3
 8009996:	4817      	ldr	r0, [pc, #92]	; (80099f4 <HAL_I2C_MspInit+0x138>)
 8009998:	f003 fbbe 	bl	800d118 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800999c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80099a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80099a2:	2312      	movs	r3, #18
 80099a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80099a6:	2300      	movs	r3, #0
 80099a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80099aa:	2303      	movs	r3, #3
 80099ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80099ae:	2304      	movs	r3, #4
 80099b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80099b2:	f107 031c 	add.w	r3, r7, #28
 80099b6:	4619      	mov	r1, r3
 80099b8:	480f      	ldr	r0, [pc, #60]	; (80099f8 <HAL_I2C_MspInit+0x13c>)
 80099ba:	f003 fbad 	bl	800d118 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80099be:	2300      	movs	r3, #0
 80099c0:	60bb      	str	r3, [r7, #8]
 80099c2:	4b09      	ldr	r3, [pc, #36]	; (80099e8 <HAL_I2C_MspInit+0x12c>)
 80099c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099c6:	4a08      	ldr	r2, [pc, #32]	; (80099e8 <HAL_I2C_MspInit+0x12c>)
 80099c8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80099cc:	6413      	str	r3, [r2, #64]	; 0x40
 80099ce:	4b06      	ldr	r3, [pc, #24]	; (80099e8 <HAL_I2C_MspInit+0x12c>)
 80099d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80099d6:	60bb      	str	r3, [r7, #8]
 80099d8:	68bb      	ldr	r3, [r7, #8]
}
 80099da:	bf00      	nop
 80099dc:	3730      	adds	r7, #48	; 0x30
 80099de:	46bd      	mov	sp, r7
 80099e0:	bd80      	pop	{r7, pc}
 80099e2:	bf00      	nop
 80099e4:	40005400 	.word	0x40005400
 80099e8:	40023800 	.word	0x40023800
 80099ec:	40020400 	.word	0x40020400
 80099f0:	40005c00 	.word	0x40005c00
 80099f4:	40020800 	.word	0x40020800
 80099f8:	40020000 	.word	0x40020000

080099fc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80099fc:	b480      	push	{r7}
 80099fe:	b083      	sub	sp, #12
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8009a04:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8009a08:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8009a0c:	f003 0301 	and.w	r3, r3, #1
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d013      	beq.n	8009a3c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8009a14:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8009a18:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8009a1c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d00b      	beq.n	8009a3c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8009a24:	e000      	b.n	8009a28 <ITM_SendChar+0x2c>
    {
      __NOP();
 8009a26:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8009a28:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d0f9      	beq.n	8009a26 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8009a32:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8009a36:	687a      	ldr	r2, [r7, #4]
 8009a38:	b2d2      	uxtb	r2, r2
 8009a3a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8009a3c:	687b      	ldr	r3, [r7, #4]
}
 8009a3e:	4618      	mov	r0, r3
 8009a40:	370c      	adds	r7, #12
 8009a42:	46bd      	mov	sp, r7
 8009a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a48:	4770      	bx	lr

08009a4a <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t falling;

int _write(int file, char *ptr, int len)
{
 8009a4a:	b580      	push	{r7, lr}
 8009a4c:	b086      	sub	sp, #24
 8009a4e:	af00      	add	r7, sp, #0
 8009a50:	60f8      	str	r0, [r7, #12]
 8009a52:	60b9      	str	r1, [r7, #8]
 8009a54:	607a      	str	r2, [r7, #4]
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009a56:	2300      	movs	r3, #0
 8009a58:	617b      	str	r3, [r7, #20]
 8009a5a:	e009      	b.n	8009a70 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8009a5c:	68bb      	ldr	r3, [r7, #8]
 8009a5e:	1c5a      	adds	r2, r3, #1
 8009a60:	60ba      	str	r2, [r7, #8]
 8009a62:	781b      	ldrb	r3, [r3, #0]
 8009a64:	4618      	mov	r0, r3
 8009a66:	f7ff ffc9 	bl	80099fc <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009a6a:	697b      	ldr	r3, [r7, #20]
 8009a6c:	3301      	adds	r3, #1
 8009a6e:	617b      	str	r3, [r7, #20]
 8009a70:	697a      	ldr	r2, [r7, #20]
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	429a      	cmp	r2, r3
 8009a76:	dbf1      	blt.n	8009a5c <_write+0x12>
  }
  return len;
 8009a78:	687b      	ldr	r3, [r7, #4]
}
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	3718      	adds	r7, #24
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	bd80      	pop	{r7, pc}
	...

08009a84 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b082      	sub	sp, #8
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM1) // check if the interrupt comes from TIM1
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	4a0b      	ldr	r2, [pc, #44]	; (8009ac0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8009a92:	4293      	cmp	r3, r2
 8009a94:	d101      	bne.n	8009a9a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
      get_ds_data_mass();
 8009a96:	f7ff fb7d 	bl	8009194 <get_ds_data_mass>
//    get_sht_data();
//    get_xgz_data();
//    get_aht_data();
  }
  if (htim->Instance == TIM2) // check if the interrupt comes from TIM2
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009aa2:	d101      	bne.n	8009aa8 <HAL_TIM_PeriodElapsedCallback+0x24>
  {
	  ten_handler();
 8009aa4:	f7fe fe5c 	bl	8008760 <ten_handler>
  }
  if (htim->Instance == TIM12) // check if the interrupt comes from TIM12
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	4a05      	ldr	r2, [pc, #20]	; (8009ac4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8009aae:	4293      	cmp	r3, r2
 8009ab0:	d101      	bne.n	8009ab6 <HAL_TIM_PeriodElapsedCallback+0x32>
  {
      link_callback_IP();
 8009ab2:	f7fe fc85 	bl	80083c0 <link_callback_IP>
  }
}
 8009ab6:	bf00      	nop
 8009ab8:	3708      	adds	r7, #8
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bd80      	pop	{r7, pc}
 8009abe:	bf00      	nop
 8009ac0:	40010000 	.word	0x40010000
 8009ac4:	40001800 	.word	0x40001800

08009ac8 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009ac8:	b480      	push	{r7}
 8009aca:	b083      	sub	sp, #12
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3)
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	4a0b      	ldr	r2, [pc, #44]	; (8009b04 <HAL_TIM_IC_CaptureCallback+0x3c>)
 8009ad6:	4293      	cmp	r3, r2
 8009ad8:	d10e      	bne.n	8009af8 <HAL_TIM_IC_CaptureCallback+0x30>
    {
        if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	7f1b      	ldrb	r3, [r3, #28]
 8009ade:	2b04      	cmp	r3, #4
 8009ae0:	d00a      	beq.n	8009af8 <HAL_TIM_IC_CaptureCallback+0x30>
//			if(falling > 0)
//				device->error_fan = false;
//			else
//				device->error_fan = true;
        }
        else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4) // FALLING с HIGH на LOW
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	7f1b      	ldrb	r3, [r3, #28]
 8009ae6:	2b08      	cmp	r3, #8
 8009ae8:	d106      	bne.n	8009af8 <HAL_TIM_IC_CaptureCallback+0x30>
        {
        	__HAL_TIM_SET_COUNTER(&htim3, 0x0000); // обнуление счётчика
 8009aea:	4b07      	ldr	r3, [pc, #28]	; (8009b08 <HAL_TIM_IC_CaptureCallback+0x40>)
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	2200      	movs	r2, #0
 8009af0:	625a      	str	r2, [r3, #36]	; 0x24
        	fan_count = 0;
 8009af2:	4b06      	ldr	r3, [pc, #24]	; (8009b0c <HAL_TIM_IC_CaptureCallback+0x44>)
 8009af4:	2200      	movs	r2, #0
 8009af6:	701a      	strb	r2, [r3, #0]
        }
    }
}
 8009af8:	bf00      	nop
 8009afa:	370c      	adds	r7, #12
 8009afc:	46bd      	mov	sp, r7
 8009afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b02:	4770      	bx	lr
 8009b04:	40000400 	.word	0x40000400
 8009b08:	200145e8 	.word	0x200145e8
 8009b0c:	20014318 	.word	0x20014318

08009b10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009b14:	f001 f8e4 	bl	800ace0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009b18:	f000 f84e 	bl	8009bb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009b1c:	f7ff fda6 	bl	800966c <MX_GPIO_Init>
  MX_DMA_Init();
 8009b20:	f7ff fce6 	bl	80094f0 <MX_DMA_Init>
  MX_UART5_Init();
 8009b24:	f000 fe84 	bl	800a830 <MX_UART5_Init>
  MX_SPI1_Init();
 8009b28:	f000 f8b6 	bl	8009c98 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8009b2c:	f000 feaa 	bl	800a884 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8009b30:	f7ff fe68 	bl	8009804 <MX_I2C1_Init>
  MX_TIM1_Init();
 8009b34:	f000 fae8 	bl	800a108 <MX_TIM1_Init>
  MX_TIM8_Init();
 8009b38:	f000 fbea 	bl	800a310 <MX_TIM8_Init>
  MX_TIM12_Init();
 8009b3c:	f000 fcb2 	bl	800a4a4 <MX_TIM12_Init>
  MX_I2C3_Init();
 8009b40:	f7ff fe8e 	bl	8009860 <MX_I2C3_Init>
  MX_UART4_Init();
 8009b44:	f000 fe4a 	bl	800a7dc <MX_UART4_Init>
  MX_TIM2_Init();
 8009b48:	f000 fb30 	bl	800a1ac <MX_TIM2_Init>
  MX_TIM9_Init();
 8009b4c:	f000 fc64 	bl	800a418 <MX_TIM9_Init>
  MX_TIM3_Init();
 8009b50:	f000 fb7a 	bl	800a248 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  init_storage();
 8009b54:	f7ff fcb6 	bl	80094c4 <init_storage>
  init_ds_devices();
 8009b58:	f7ff fb24 	bl	80091a4 <init_ds_devices>
//  init_sht_devices();
  HAL_TIM_Base_Start_IT(&htim1);
 8009b5c:	4810      	ldr	r0, [pc, #64]	; (8009ba0 <main+0x90>)
 8009b5e:	f004 fb77 	bl	800e250 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8009b62:	4810      	ldr	r0, [pc, #64]	; (8009ba4 <main+0x94>)
 8009b64:	f004 fb74 	bl	800e250 <HAL_TIM_Base_Start_IT>
  init_modbus_master();
 8009b68:	f7f9 fd26 	bl	80035b8 <init_modbus_master>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8009b6c:	2104      	movs	r1, #4
 8009b6e:	480e      	ldr	r0, [pc, #56]	; (8009ba8 <main+0x98>)
 8009b70:	f004 fc2e 	bl	800e3d0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_2);
 8009b74:	2104      	movs	r1, #4
 8009b76:	480d      	ldr	r0, [pc, #52]	; (8009bac <main+0x9c>)
 8009b78:	f004 fc2a 	bl	800e3d0 <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_3);
 8009b7c:	2108      	movs	r1, #8
 8009b7e:	480c      	ldr	r0, [pc, #48]	; (8009bb0 <main+0xa0>)
 8009b80:	f004 fd3e 	bl	800e600 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_4);
 8009b84:	210c      	movs	r1, #12
 8009b86:	480a      	ldr	r0, [pc, #40]	; (8009bb0 <main+0xa0>)
 8009b88:	f004 fd3a 	bl	800e600 <HAL_TIM_IC_Start_IT>
  HAL_TIM_Base_Start_IT(&htim12);
 8009b8c:	4809      	ldr	r0, [pc, #36]	; (8009bb4 <main+0xa4>)
 8009b8e:	f004 fb5f 	bl	800e250 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8009b92:	f008 f805 	bl	8011ba0 <osKernelInitialize>
  MX_FREERTOS_Init();
 8009b96:	f7ff fcf1 	bl	800957c <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8009b9a:	f008 f825 	bl	8011be8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8009b9e:	e7fe      	b.n	8009b9e <main+0x8e>
 8009ba0:	20014630 	.word	0x20014630
 8009ba4:	200146c0 	.word	0x200146c0
 8009ba8:	200145a0 	.word	0x200145a0
 8009bac:	20014678 	.word	0x20014678
 8009bb0:	200145e8 	.word	0x200145e8
 8009bb4:	20014708 	.word	0x20014708

08009bb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b094      	sub	sp, #80	; 0x50
 8009bbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009bbe:	f107 0320 	add.w	r3, r7, #32
 8009bc2:	2230      	movs	r2, #48	; 0x30
 8009bc4:	2100      	movs	r1, #0
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	f01b ffd4 	bl	8025b74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009bcc:	f107 030c 	add.w	r3, r7, #12
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	601a      	str	r2, [r3, #0]
 8009bd4:	605a      	str	r2, [r3, #4]
 8009bd6:	609a      	str	r2, [r3, #8]
 8009bd8:	60da      	str	r2, [r3, #12]
 8009bda:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8009bdc:	2300      	movs	r3, #0
 8009bde:	60bb      	str	r3, [r7, #8]
 8009be0:	4b28      	ldr	r3, [pc, #160]	; (8009c84 <SystemClock_Config+0xcc>)
 8009be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009be4:	4a27      	ldr	r2, [pc, #156]	; (8009c84 <SystemClock_Config+0xcc>)
 8009be6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009bea:	6413      	str	r3, [r2, #64]	; 0x40
 8009bec:	4b25      	ldr	r3, [pc, #148]	; (8009c84 <SystemClock_Config+0xcc>)
 8009bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009bf4:	60bb      	str	r3, [r7, #8]
 8009bf6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	607b      	str	r3, [r7, #4]
 8009bfc:	4b22      	ldr	r3, [pc, #136]	; (8009c88 <SystemClock_Config+0xd0>)
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	4a21      	ldr	r2, [pc, #132]	; (8009c88 <SystemClock_Config+0xd0>)
 8009c02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009c06:	6013      	str	r3, [r2, #0]
 8009c08:	4b1f      	ldr	r3, [pc, #124]	; (8009c88 <SystemClock_Config+0xd0>)
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009c10:	607b      	str	r3, [r7, #4]
 8009c12:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8009c14:	2301      	movs	r3, #1
 8009c16:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8009c18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009c1c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009c1e:	2302      	movs	r3, #2
 8009c20:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009c22:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009c26:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8009c28:	2304      	movs	r3, #4
 8009c2a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8009c2c:	23a8      	movs	r3, #168	; 0xa8
 8009c2e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8009c30:	2302      	movs	r3, #2
 8009c32:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8009c34:	2304      	movs	r3, #4
 8009c36:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009c38:	f107 0320 	add.w	r3, r7, #32
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	f003 fd97 	bl	800d770 <HAL_RCC_OscConfig>
 8009c42:	4603      	mov	r3, r0
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d001      	beq.n	8009c4c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8009c48:	f000 f820 	bl	8009c8c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009c4c:	230f      	movs	r3, #15
 8009c4e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009c50:	2302      	movs	r3, #2
 8009c52:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009c54:	2300      	movs	r3, #0
 8009c56:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8009c58:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8009c5c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8009c5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009c62:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8009c64:	f107 030c 	add.w	r3, r7, #12
 8009c68:	2105      	movs	r1, #5
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	f003 fff8 	bl	800dc60 <HAL_RCC_ClockConfig>
 8009c70:	4603      	mov	r3, r0
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d001      	beq.n	8009c7a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8009c76:	f000 f809 	bl	8009c8c <Error_Handler>
  }
}
 8009c7a:	bf00      	nop
 8009c7c:	3750      	adds	r7, #80	; 0x50
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	bd80      	pop	{r7, pc}
 8009c82:	bf00      	nop
 8009c84:	40023800 	.word	0x40023800
 8009c88:	40007000 	.word	0x40007000

08009c8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009c8c:	b480      	push	{r7}
 8009c8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8009c90:	b672      	cpsid	i
}
 8009c92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8009c94:	e7fe      	b.n	8009c94 <Error_Handler+0x8>
	...

08009c98 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8009c9c:	4b17      	ldr	r3, [pc, #92]	; (8009cfc <MX_SPI1_Init+0x64>)
 8009c9e:	4a18      	ldr	r2, [pc, #96]	; (8009d00 <MX_SPI1_Init+0x68>)
 8009ca0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8009ca2:	4b16      	ldr	r3, [pc, #88]	; (8009cfc <MX_SPI1_Init+0x64>)
 8009ca4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8009ca8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8009caa:	4b14      	ldr	r3, [pc, #80]	; (8009cfc <MX_SPI1_Init+0x64>)
 8009cac:	2200      	movs	r2, #0
 8009cae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8009cb0:	4b12      	ldr	r3, [pc, #72]	; (8009cfc <MX_SPI1_Init+0x64>)
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8009cb6:	4b11      	ldr	r3, [pc, #68]	; (8009cfc <MX_SPI1_Init+0x64>)
 8009cb8:	2200      	movs	r2, #0
 8009cba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8009cbc:	4b0f      	ldr	r3, [pc, #60]	; (8009cfc <MX_SPI1_Init+0x64>)
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8009cc2:	4b0e      	ldr	r3, [pc, #56]	; (8009cfc <MX_SPI1_Init+0x64>)
 8009cc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009cc8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009cca:	4b0c      	ldr	r3, [pc, #48]	; (8009cfc <MX_SPI1_Init+0x64>)
 8009ccc:	2200      	movs	r2, #0
 8009cce:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8009cd0:	4b0a      	ldr	r3, [pc, #40]	; (8009cfc <MX_SPI1_Init+0x64>)
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8009cd6:	4b09      	ldr	r3, [pc, #36]	; (8009cfc <MX_SPI1_Init+0x64>)
 8009cd8:	2200      	movs	r2, #0
 8009cda:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009cdc:	4b07      	ldr	r3, [pc, #28]	; (8009cfc <MX_SPI1_Init+0x64>)
 8009cde:	2200      	movs	r2, #0
 8009ce0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8009ce2:	4b06      	ldr	r3, [pc, #24]	; (8009cfc <MX_SPI1_Init+0x64>)
 8009ce4:	220a      	movs	r2, #10
 8009ce6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8009ce8:	4804      	ldr	r0, [pc, #16]	; (8009cfc <MX_SPI1_Init+0x64>)
 8009cea:	f004 f9d9 	bl	800e0a0 <HAL_SPI_Init>
 8009cee:	4603      	mov	r3, r0
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d001      	beq.n	8009cf8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8009cf4:	f7ff ffca 	bl	8009c8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8009cf8:	bf00      	nop
 8009cfa:	bd80      	pop	{r7, pc}
 8009cfc:	20014548 	.word	0x20014548
 8009d00:	40013000 	.word	0x40013000

08009d04 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b08a      	sub	sp, #40	; 0x28
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009d0c:	f107 0314 	add.w	r3, r7, #20
 8009d10:	2200      	movs	r2, #0
 8009d12:	601a      	str	r2, [r3, #0]
 8009d14:	605a      	str	r2, [r3, #4]
 8009d16:	609a      	str	r2, [r3, #8]
 8009d18:	60da      	str	r2, [r3, #12]
 8009d1a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	4a28      	ldr	r2, [pc, #160]	; (8009dc4 <HAL_SPI_MspInit+0xc0>)
 8009d22:	4293      	cmp	r3, r2
 8009d24:	d149      	bne.n	8009dba <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8009d26:	2300      	movs	r3, #0
 8009d28:	613b      	str	r3, [r7, #16]
 8009d2a:	4b27      	ldr	r3, [pc, #156]	; (8009dc8 <HAL_SPI_MspInit+0xc4>)
 8009d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d2e:	4a26      	ldr	r2, [pc, #152]	; (8009dc8 <HAL_SPI_MspInit+0xc4>)
 8009d30:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009d34:	6453      	str	r3, [r2, #68]	; 0x44
 8009d36:	4b24      	ldr	r3, [pc, #144]	; (8009dc8 <HAL_SPI_MspInit+0xc4>)
 8009d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009d3e:	613b      	str	r3, [r7, #16]
 8009d40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009d42:	2300      	movs	r3, #0
 8009d44:	60fb      	str	r3, [r7, #12]
 8009d46:	4b20      	ldr	r3, [pc, #128]	; (8009dc8 <HAL_SPI_MspInit+0xc4>)
 8009d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d4a:	4a1f      	ldr	r2, [pc, #124]	; (8009dc8 <HAL_SPI_MspInit+0xc4>)
 8009d4c:	f043 0301 	orr.w	r3, r3, #1
 8009d50:	6313      	str	r3, [r2, #48]	; 0x30
 8009d52:	4b1d      	ldr	r3, [pc, #116]	; (8009dc8 <HAL_SPI_MspInit+0xc4>)
 8009d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d56:	f003 0301 	and.w	r3, r3, #1
 8009d5a:	60fb      	str	r3, [r7, #12]
 8009d5c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009d5e:	2300      	movs	r3, #0
 8009d60:	60bb      	str	r3, [r7, #8]
 8009d62:	4b19      	ldr	r3, [pc, #100]	; (8009dc8 <HAL_SPI_MspInit+0xc4>)
 8009d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d66:	4a18      	ldr	r2, [pc, #96]	; (8009dc8 <HAL_SPI_MspInit+0xc4>)
 8009d68:	f043 0302 	orr.w	r3, r3, #2
 8009d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8009d6e:	4b16      	ldr	r3, [pc, #88]	; (8009dc8 <HAL_SPI_MspInit+0xc4>)
 8009d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d72:	f003 0302 	and.w	r3, r3, #2
 8009d76:	60bb      	str	r3, [r7, #8]
 8009d78:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8009d7a:	2360      	movs	r3, #96	; 0x60
 8009d7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009d7e:	2302      	movs	r3, #2
 8009d80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009d82:	2300      	movs	r3, #0
 8009d84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009d86:	2303      	movs	r3, #3
 8009d88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8009d8a:	2305      	movs	r3, #5
 8009d8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009d8e:	f107 0314 	add.w	r3, r7, #20
 8009d92:	4619      	mov	r1, r3
 8009d94:	480d      	ldr	r0, [pc, #52]	; (8009dcc <HAL_SPI_MspInit+0xc8>)
 8009d96:	f003 f9bf 	bl	800d118 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8009d9a:	2320      	movs	r3, #32
 8009d9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009d9e:	2302      	movs	r3, #2
 8009da0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009da2:	2300      	movs	r3, #0
 8009da4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009da6:	2303      	movs	r3, #3
 8009da8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8009daa:	2305      	movs	r3, #5
 8009dac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009dae:	f107 0314 	add.w	r3, r7, #20
 8009db2:	4619      	mov	r1, r3
 8009db4:	4806      	ldr	r0, [pc, #24]	; (8009dd0 <HAL_SPI_MspInit+0xcc>)
 8009db6:	f003 f9af 	bl	800d118 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8009dba:	bf00      	nop
 8009dbc:	3728      	adds	r7, #40	; 0x28
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	bd80      	pop	{r7, pc}
 8009dc2:	bf00      	nop
 8009dc4:	40013000 	.word	0x40013000
 8009dc8:	40023800 	.word	0x40023800
 8009dcc:	40020000 	.word	0x40020000
 8009dd0:	40020400 	.word	0x40020400

08009dd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b082      	sub	sp, #8
 8009dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009dda:	2300      	movs	r3, #0
 8009ddc:	607b      	str	r3, [r7, #4]
 8009dde:	4b12      	ldr	r3, [pc, #72]	; (8009e28 <HAL_MspInit+0x54>)
 8009de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009de2:	4a11      	ldr	r2, [pc, #68]	; (8009e28 <HAL_MspInit+0x54>)
 8009de4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009de8:	6453      	str	r3, [r2, #68]	; 0x44
 8009dea:	4b0f      	ldr	r3, [pc, #60]	; (8009e28 <HAL_MspInit+0x54>)
 8009dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009dee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009df2:	607b      	str	r3, [r7, #4]
 8009df4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8009df6:	2300      	movs	r3, #0
 8009df8:	603b      	str	r3, [r7, #0]
 8009dfa:	4b0b      	ldr	r3, [pc, #44]	; (8009e28 <HAL_MspInit+0x54>)
 8009dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dfe:	4a0a      	ldr	r2, [pc, #40]	; (8009e28 <HAL_MspInit+0x54>)
 8009e00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009e04:	6413      	str	r3, [r2, #64]	; 0x40
 8009e06:	4b08      	ldr	r3, [pc, #32]	; (8009e28 <HAL_MspInit+0x54>)
 8009e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009e0e:	603b      	str	r3, [r7, #0]
 8009e10:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8009e12:	2200      	movs	r2, #0
 8009e14:	210f      	movs	r1, #15
 8009e16:	f06f 0001 	mvn.w	r0, #1
 8009e1a:	f001 f8d2 	bl	800afc2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009e1e:	bf00      	nop
 8009e20:	3708      	adds	r7, #8
 8009e22:	46bd      	mov	sp, r7
 8009e24:	bd80      	pop	{r7, pc}
 8009e26:	bf00      	nop
 8009e28:	40023800 	.word	0x40023800

08009e2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009e2c:	b480      	push	{r7}
 8009e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8009e30:	e7fe      	b.n	8009e30 <NMI_Handler+0x4>

08009e32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009e32:	b480      	push	{r7}
 8009e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009e36:	e7fe      	b.n	8009e36 <HardFault_Handler+0x4>

08009e38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009e38:	b480      	push	{r7}
 8009e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009e3c:	e7fe      	b.n	8009e3c <MemManage_Handler+0x4>

08009e3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009e3e:	b480      	push	{r7}
 8009e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009e42:	e7fe      	b.n	8009e42 <BusFault_Handler+0x4>

08009e44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009e44:	b480      	push	{r7}
 8009e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009e48:	e7fe      	b.n	8009e48 <UsageFault_Handler+0x4>

08009e4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009e4a:	b480      	push	{r7}
 8009e4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009e4e:	bf00      	nop
 8009e50:	46bd      	mov	sp, r7
 8009e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e56:	4770      	bx	lr

08009e58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009e5c:	f000 ff92 	bl	800ad84 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8009e60:	f00a fb02 	bl	8014468 <xTaskGetSchedulerState>
 8009e64:	4603      	mov	r3, r0
 8009e66:	2b01      	cmp	r3, #1
 8009e68:	d001      	beq.n	8009e6e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8009e6a:	f00b fc1d 	bl	80156a8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009e6e:	bf00      	nop
 8009e70:	bd80      	pop	{r7, pc}
	...

08009e74 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8009e78:	4802      	ldr	r0, [pc, #8]	; (8009e84 <DMA1_Stream0_IRQHandler+0x10>)
 8009e7a:	f001 fa71 	bl	800b360 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8009e7e:	bf00      	nop
 8009e80:	bd80      	pop	{r7, pc}
 8009e82:	bf00      	nop
 8009e84:	200148dc 	.word	0x200148dc

08009e88 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8009e8c:	4803      	ldr	r0, [pc, #12]	; (8009e9c <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8009e8e:	f004 fcdf 	bl	800e850 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8009e92:	4803      	ldr	r0, [pc, #12]	; (8009ea0 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8009e94:	f004 fcdc 	bl	800e850 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8009e98:	bf00      	nop
 8009e9a:	bd80      	pop	{r7, pc}
 8009e9c:	20014630 	.word	0x20014630
 8009ea0:	20014678 	.word	0x20014678

08009ea4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8009ea8:	4802      	ldr	r0, [pc, #8]	; (8009eb4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8009eaa:	f004 fcd1 	bl	800e850 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8009eae:	bf00      	nop
 8009eb0:	bd80      	pop	{r7, pc}
 8009eb2:	bf00      	nop
 8009eb4:	20014630 	.word	0x20014630

08009eb8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8009ebc:	4802      	ldr	r0, [pc, #8]	; (8009ec8 <TIM2_IRQHandler+0x10>)
 8009ebe:	f004 fcc7 	bl	800e850 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8009ec2:	bf00      	nop
 8009ec4:	bd80      	pop	{r7, pc}
 8009ec6:	bf00      	nop
 8009ec8:	200146c0 	.word	0x200146c0

08009ecc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8009ed0:	4802      	ldr	r0, [pc, #8]	; (8009edc <TIM3_IRQHandler+0x10>)
 8009ed2:	f004 fcbd 	bl	800e850 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8009ed6:	bf00      	nop
 8009ed8:	bd80      	pop	{r7, pc}
 8009eda:	bf00      	nop
 8009edc:	200145e8 	.word	0x200145e8

08009ee0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8009ee4:	4802      	ldr	r0, [pc, #8]	; (8009ef0 <USART1_IRQHandler+0x10>)
 8009ee6:	f005 fff1 	bl	800fecc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8009eea:	bf00      	nop
 8009eec:	bd80      	pop	{r7, pc}
 8009eee:	bf00      	nop
 8009ef0:	20014854 	.word	0x20014854

08009ef4 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8009ef8:	4803      	ldr	r0, [pc, #12]	; (8009f08 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 8009efa:	f004 fca9 	bl	800e850 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 8009efe:	4803      	ldr	r0, [pc, #12]	; (8009f0c <TIM8_BRK_TIM12_IRQHandler+0x18>)
 8009f00:	f004 fca6 	bl	800e850 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8009f04:	bf00      	nop
 8009f06:	bd80      	pop	{r7, pc}
 8009f08:	200145a0 	.word	0x200145a0
 8009f0c:	20014708 	.word	0x20014708

08009f10 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8009f14:	4802      	ldr	r0, [pc, #8]	; (8009f20 <DMA1_Stream7_IRQHandler+0x10>)
 8009f16:	f001 fa23 	bl	800b360 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8009f1a:	bf00      	nop
 8009f1c:	bd80      	pop	{r7, pc}
 8009f1e:	bf00      	nop
 8009f20:	2001493c 	.word	0x2001493c

08009f24 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8009f28:	4802      	ldr	r0, [pc, #8]	; (8009f34 <UART4_IRQHandler+0x10>)
 8009f2a:	f005 ffcf 	bl	800fecc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8009f2e:	bf00      	nop
 8009f30:	bd80      	pop	{r7, pc}
 8009f32:	bf00      	nop
 8009f34:	20014898 	.word	0x20014898

08009f38 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8009f3c:	4802      	ldr	r0, [pc, #8]	; (8009f48 <UART5_IRQHandler+0x10>)
 8009f3e:	f005 ffc5 	bl	800fecc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8009f42:	bf00      	nop
 8009f44:	bd80      	pop	{r7, pc}
 8009f46:	bf00      	nop
 8009f48:	200147b0 	.word	0x200147b0

08009f4c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8009f50:	4802      	ldr	r0, [pc, #8]	; (8009f5c <DMA2_Stream2_IRQHandler+0x10>)
 8009f52:	f001 fa05 	bl	800b360 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8009f56:	bf00      	nop
 8009f58:	bd80      	pop	{r7, pc}
 8009f5a:	bf00      	nop
 8009f5c:	200147f4 	.word	0x200147f4

08009f60 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8009f64:	4802      	ldr	r0, [pc, #8]	; (8009f70 <ETH_IRQHandler+0x10>)
 8009f66:	f002 f845 	bl	800bff4 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8009f6a:	bf00      	nop
 8009f6c:	bd80      	pop	{r7, pc}
 8009f6e:	bf00      	nop
 8009f70:	2001630c 	.word	0x2001630c

08009f74 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8009f78:	4802      	ldr	r0, [pc, #8]	; (8009f84 <DMA2_Stream7_IRQHandler+0x10>)
 8009f7a:	f001 f9f1 	bl	800b360 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8009f7e:	bf00      	nop
 8009f80:	bd80      	pop	{r7, pc}
 8009f82:	bf00      	nop
 8009f84:	20014750 	.word	0x20014750

08009f88 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8009f88:	b480      	push	{r7}
 8009f8a:	af00      	add	r7, sp, #0
  return 1;
 8009f8c:	2301      	movs	r3, #1
}
 8009f8e:	4618      	mov	r0, r3
 8009f90:	46bd      	mov	sp, r7
 8009f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f96:	4770      	bx	lr

08009f98 <_kill>:

int _kill(int pid, int sig)
{
 8009f98:	b480      	push	{r7}
 8009f9a:	b083      	sub	sp, #12
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
 8009fa0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8009fa2:	4b05      	ldr	r3, [pc, #20]	; (8009fb8 <_kill+0x20>)
 8009fa4:	2216      	movs	r2, #22
 8009fa6:	601a      	str	r2, [r3, #0]
  return -1;
 8009fa8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009fac:	4618      	mov	r0, r3
 8009fae:	370c      	adds	r7, #12
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb6:	4770      	bx	lr
 8009fb8:	20013d7c 	.word	0x20013d7c

08009fbc <_exit>:

void _exit (int status)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b082      	sub	sp, #8
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8009fc4:	f04f 31ff 	mov.w	r1, #4294967295
 8009fc8:	6878      	ldr	r0, [r7, #4]
 8009fca:	f7ff ffe5 	bl	8009f98 <_kill>
  while (1) {}    /* Make sure we hang here */
 8009fce:	e7fe      	b.n	8009fce <_exit+0x12>

08009fd0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b086      	sub	sp, #24
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	60f8      	str	r0, [r7, #12]
 8009fd8:	60b9      	str	r1, [r7, #8]
 8009fda:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009fdc:	2300      	movs	r3, #0
 8009fde:	617b      	str	r3, [r7, #20]
 8009fe0:	e00a      	b.n	8009ff8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8009fe2:	f3af 8000 	nop.w
 8009fe6:	4601      	mov	r1, r0
 8009fe8:	68bb      	ldr	r3, [r7, #8]
 8009fea:	1c5a      	adds	r2, r3, #1
 8009fec:	60ba      	str	r2, [r7, #8]
 8009fee:	b2ca      	uxtb	r2, r1
 8009ff0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009ff2:	697b      	ldr	r3, [r7, #20]
 8009ff4:	3301      	adds	r3, #1
 8009ff6:	617b      	str	r3, [r7, #20]
 8009ff8:	697a      	ldr	r2, [r7, #20]
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	429a      	cmp	r2, r3
 8009ffe:	dbf0      	blt.n	8009fe2 <_read+0x12>
  }

  return len;
 800a000:	687b      	ldr	r3, [r7, #4]
}
 800a002:	4618      	mov	r0, r3
 800a004:	3718      	adds	r7, #24
 800a006:	46bd      	mov	sp, r7
 800a008:	bd80      	pop	{r7, pc}

0800a00a <_close>:
  }
  return len;
}

int _close(int file)
{
 800a00a:	b480      	push	{r7}
 800a00c:	b083      	sub	sp, #12
 800a00e:	af00      	add	r7, sp, #0
 800a010:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800a012:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a016:	4618      	mov	r0, r3
 800a018:	370c      	adds	r7, #12
 800a01a:	46bd      	mov	sp, r7
 800a01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a020:	4770      	bx	lr

0800a022 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800a022:	b480      	push	{r7}
 800a024:	b083      	sub	sp, #12
 800a026:	af00      	add	r7, sp, #0
 800a028:	6078      	str	r0, [r7, #4]
 800a02a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800a032:	605a      	str	r2, [r3, #4]
  return 0;
 800a034:	2300      	movs	r3, #0
}
 800a036:	4618      	mov	r0, r3
 800a038:	370c      	adds	r7, #12
 800a03a:	46bd      	mov	sp, r7
 800a03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a040:	4770      	bx	lr

0800a042 <_isatty>:

int _isatty(int file)
{
 800a042:	b480      	push	{r7}
 800a044:	b083      	sub	sp, #12
 800a046:	af00      	add	r7, sp, #0
 800a048:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800a04a:	2301      	movs	r3, #1
}
 800a04c:	4618      	mov	r0, r3
 800a04e:	370c      	adds	r7, #12
 800a050:	46bd      	mov	sp, r7
 800a052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a056:	4770      	bx	lr

0800a058 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800a058:	b480      	push	{r7}
 800a05a:	b085      	sub	sp, #20
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	60f8      	str	r0, [r7, #12]
 800a060:	60b9      	str	r1, [r7, #8]
 800a062:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800a064:	2300      	movs	r3, #0
}
 800a066:	4618      	mov	r0, r3
 800a068:	3714      	adds	r7, #20
 800a06a:	46bd      	mov	sp, r7
 800a06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a070:	4770      	bx	lr
	...

0800a074 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800a074:	b480      	push	{r7}
 800a076:	b087      	sub	sp, #28
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800a07c:	4a14      	ldr	r2, [pc, #80]	; (800a0d0 <_sbrk+0x5c>)
 800a07e:	4b15      	ldr	r3, [pc, #84]	; (800a0d4 <_sbrk+0x60>)
 800a080:	1ad3      	subs	r3, r2, r3
 800a082:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800a084:	697b      	ldr	r3, [r7, #20]
 800a086:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800a088:	4b13      	ldr	r3, [pc, #76]	; (800a0d8 <_sbrk+0x64>)
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d102      	bne.n	800a096 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800a090:	4b11      	ldr	r3, [pc, #68]	; (800a0d8 <_sbrk+0x64>)
 800a092:	4a12      	ldr	r2, [pc, #72]	; (800a0dc <_sbrk+0x68>)
 800a094:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800a096:	4b10      	ldr	r3, [pc, #64]	; (800a0d8 <_sbrk+0x64>)
 800a098:	681a      	ldr	r2, [r3, #0]
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	4413      	add	r3, r2
 800a09e:	693a      	ldr	r2, [r7, #16]
 800a0a0:	429a      	cmp	r2, r3
 800a0a2:	d205      	bcs.n	800a0b0 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 800a0a4:	4b0e      	ldr	r3, [pc, #56]	; (800a0e0 <_sbrk+0x6c>)
 800a0a6:	220c      	movs	r2, #12
 800a0a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800a0aa:	f04f 33ff 	mov.w	r3, #4294967295
 800a0ae:	e009      	b.n	800a0c4 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 800a0b0:	4b09      	ldr	r3, [pc, #36]	; (800a0d8 <_sbrk+0x64>)
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800a0b6:	4b08      	ldr	r3, [pc, #32]	; (800a0d8 <_sbrk+0x64>)
 800a0b8:	681a      	ldr	r2, [r3, #0]
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	4413      	add	r3, r2
 800a0be:	4a06      	ldr	r2, [pc, #24]	; (800a0d8 <_sbrk+0x64>)
 800a0c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
}
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	371c      	adds	r7, #28
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ce:	4770      	bx	lr
 800a0d0:	20020000 	.word	0x20020000
 800a0d4:	00002000 	.word	0x00002000
 800a0d8:	20000070 	.word	0x20000070
 800a0dc:	10000248 	.word	0x10000248
 800a0e0:	20013d7c 	.word	0x20013d7c

0800a0e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800a0e4:	b480      	push	{r7}
 800a0e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800a0e8:	4b06      	ldr	r3, [pc, #24]	; (800a104 <SystemInit+0x20>)
 800a0ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0ee:	4a05      	ldr	r2, [pc, #20]	; (800a104 <SystemInit+0x20>)
 800a0f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a0f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800a0f8:	bf00      	nop
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a100:	4770      	bx	lr
 800a102:	bf00      	nop
 800a104:	e000ed00 	.word	0xe000ed00

0800a108 <MX_TIM1_Init>:
TIM_HandleTypeDef htim9;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b086      	sub	sp, #24
 800a10c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a10e:	f107 0308 	add.w	r3, r7, #8
 800a112:	2200      	movs	r2, #0
 800a114:	601a      	str	r2, [r3, #0]
 800a116:	605a      	str	r2, [r3, #4]
 800a118:	609a      	str	r2, [r3, #8]
 800a11a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a11c:	463b      	mov	r3, r7
 800a11e:	2200      	movs	r2, #0
 800a120:	601a      	str	r2, [r3, #0]
 800a122:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800a124:	4b1f      	ldr	r3, [pc, #124]	; (800a1a4 <MX_TIM1_Init+0x9c>)
 800a126:	4a20      	ldr	r2, [pc, #128]	; (800a1a8 <MX_TIM1_Init+0xa0>)
 800a128:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 42000-1;
 800a12a:	4b1e      	ldr	r3, [pc, #120]	; (800a1a4 <MX_TIM1_Init+0x9c>)
 800a12c:	f24a 420f 	movw	r2, #41999	; 0xa40f
 800a130:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a132:	4b1c      	ldr	r3, [pc, #112]	; (800a1a4 <MX_TIM1_Init+0x9c>)
 800a134:	2200      	movs	r2, #0
 800a136:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 800a138:	4b1a      	ldr	r3, [pc, #104]	; (800a1a4 <MX_TIM1_Init+0x9c>)
 800a13a:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800a13e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a140:	4b18      	ldr	r3, [pc, #96]	; (800a1a4 <MX_TIM1_Init+0x9c>)
 800a142:	2200      	movs	r2, #0
 800a144:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800a146:	4b17      	ldr	r3, [pc, #92]	; (800a1a4 <MX_TIM1_Init+0x9c>)
 800a148:	2200      	movs	r2, #0
 800a14a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a14c:	4b15      	ldr	r3, [pc, #84]	; (800a1a4 <MX_TIM1_Init+0x9c>)
 800a14e:	2200      	movs	r2, #0
 800a150:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800a152:	4814      	ldr	r0, [pc, #80]	; (800a1a4 <MX_TIM1_Init+0x9c>)
 800a154:	f004 f82d 	bl	800e1b2 <HAL_TIM_Base_Init>
 800a158:	4603      	mov	r3, r0
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d001      	beq.n	800a162 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800a15e:	f7ff fd95 	bl	8009c8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a162:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a166:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800a168:	f107 0308 	add.w	r3, r7, #8
 800a16c:	4619      	mov	r1, r3
 800a16e:	480d      	ldr	r0, [pc, #52]	; (800a1a4 <MX_TIM1_Init+0x9c>)
 800a170:	f004 fdd4 	bl	800ed1c <HAL_TIM_ConfigClockSource>
 800a174:	4603      	mov	r3, r0
 800a176:	2b00      	cmp	r3, #0
 800a178:	d001      	beq.n	800a17e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800a17a:	f7ff fd87 	bl	8009c8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a17e:	2300      	movs	r3, #0
 800a180:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a182:	2300      	movs	r3, #0
 800a184:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800a186:	463b      	mov	r3, r7
 800a188:	4619      	mov	r1, r3
 800a18a:	4806      	ldr	r0, [pc, #24]	; (800a1a4 <MX_TIM1_Init+0x9c>)
 800a18c:	f005 fae6 	bl	800f75c <HAL_TIMEx_MasterConfigSynchronization>
 800a190:	4603      	mov	r3, r0
 800a192:	2b00      	cmp	r3, #0
 800a194:	d001      	beq.n	800a19a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800a196:	f7ff fd79 	bl	8009c8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800a19a:	bf00      	nop
 800a19c:	3718      	adds	r7, #24
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	bd80      	pop	{r7, pc}
 800a1a2:	bf00      	nop
 800a1a4:	20014630 	.word	0x20014630
 800a1a8:	40010000 	.word	0x40010000

0800a1ac <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b086      	sub	sp, #24
 800a1b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a1b2:	f107 0308 	add.w	r3, r7, #8
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	601a      	str	r2, [r3, #0]
 800a1ba:	605a      	str	r2, [r3, #4]
 800a1bc:	609a      	str	r2, [r3, #8]
 800a1be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a1c0:	463b      	mov	r3, r7
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	601a      	str	r2, [r3, #0]
 800a1c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800a1c8:	4b1e      	ldr	r3, [pc, #120]	; (800a244 <MX_TIM2_Init+0x98>)
 800a1ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800a1ce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400-1;
 800a1d0:	4b1c      	ldr	r3, [pc, #112]	; (800a244 <MX_TIM2_Init+0x98>)
 800a1d2:	f242 02cf 	movw	r2, #8399	; 0x20cf
 800a1d6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a1d8:	4b1a      	ldr	r3, [pc, #104]	; (800a244 <MX_TIM2_Init+0x98>)
 800a1da:	2200      	movs	r2, #0
 800a1dc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50000-1;
 800a1de:	4b19      	ldr	r3, [pc, #100]	; (800a244 <MX_TIM2_Init+0x98>)
 800a1e0:	f24c 324f 	movw	r2, #49999	; 0xc34f
 800a1e4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a1e6:	4b17      	ldr	r3, [pc, #92]	; (800a244 <MX_TIM2_Init+0x98>)
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a1ec:	4b15      	ldr	r3, [pc, #84]	; (800a244 <MX_TIM2_Init+0x98>)
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800a1f2:	4814      	ldr	r0, [pc, #80]	; (800a244 <MX_TIM2_Init+0x98>)
 800a1f4:	f003 ffdd 	bl	800e1b2 <HAL_TIM_Base_Init>
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d001      	beq.n	800a202 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800a1fe:	f7ff fd45 	bl	8009c8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a202:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a206:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800a208:	f107 0308 	add.w	r3, r7, #8
 800a20c:	4619      	mov	r1, r3
 800a20e:	480d      	ldr	r0, [pc, #52]	; (800a244 <MX_TIM2_Init+0x98>)
 800a210:	f004 fd84 	bl	800ed1c <HAL_TIM_ConfigClockSource>
 800a214:	4603      	mov	r3, r0
 800a216:	2b00      	cmp	r3, #0
 800a218:	d001      	beq.n	800a21e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800a21a:	f7ff fd37 	bl	8009c8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a21e:	2300      	movs	r3, #0
 800a220:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a222:	2300      	movs	r3, #0
 800a224:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800a226:	463b      	mov	r3, r7
 800a228:	4619      	mov	r1, r3
 800a22a:	4806      	ldr	r0, [pc, #24]	; (800a244 <MX_TIM2_Init+0x98>)
 800a22c:	f005 fa96 	bl	800f75c <HAL_TIMEx_MasterConfigSynchronization>
 800a230:	4603      	mov	r3, r0
 800a232:	2b00      	cmp	r3, #0
 800a234:	d001      	beq.n	800a23a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800a236:	f7ff fd29 	bl	8009c8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800a23a:	bf00      	nop
 800a23c:	3718      	adds	r7, #24
 800a23e:	46bd      	mov	sp, r7
 800a240:	bd80      	pop	{r7, pc}
 800a242:	bf00      	nop
 800a244:	200146c0 	.word	0x200146c0

0800a248 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b086      	sub	sp, #24
 800a24c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a24e:	f107 0310 	add.w	r3, r7, #16
 800a252:	2200      	movs	r2, #0
 800a254:	601a      	str	r2, [r3, #0]
 800a256:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800a258:	463b      	mov	r3, r7
 800a25a:	2200      	movs	r2, #0
 800a25c:	601a      	str	r2, [r3, #0]
 800a25e:	605a      	str	r2, [r3, #4]
 800a260:	609a      	str	r2, [r3, #8]
 800a262:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800a264:	4b28      	ldr	r3, [pc, #160]	; (800a308 <MX_TIM3_Init+0xc0>)
 800a266:	4a29      	ldr	r2, [pc, #164]	; (800a30c <MX_TIM3_Init+0xc4>)
 800a268:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8400-1;
 800a26a:	4b27      	ldr	r3, [pc, #156]	; (800a308 <MX_TIM3_Init+0xc0>)
 800a26c:	f242 02cf 	movw	r2, #8399	; 0x20cf
 800a270:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a272:	4b25      	ldr	r3, [pc, #148]	; (800a308 <MX_TIM3_Init+0xc0>)
 800a274:	2200      	movs	r2, #0
 800a276:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000-1;
 800a278:	4b23      	ldr	r3, [pc, #140]	; (800a308 <MX_TIM3_Init+0xc0>)
 800a27a:	f24c 324f 	movw	r2, #49999	; 0xc34f
 800a27e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a280:	4b21      	ldr	r3, [pc, #132]	; (800a308 <MX_TIM3_Init+0xc0>)
 800a282:	2200      	movs	r2, #0
 800a284:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a286:	4b20      	ldr	r3, [pc, #128]	; (800a308 <MX_TIM3_Init+0xc0>)
 800a288:	2200      	movs	r2, #0
 800a28a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800a28c:	481e      	ldr	r0, [pc, #120]	; (800a308 <MX_TIM3_Init+0xc0>)
 800a28e:	f004 f967 	bl	800e560 <HAL_TIM_IC_Init>
 800a292:	4603      	mov	r3, r0
 800a294:	2b00      	cmp	r3, #0
 800a296:	d001      	beq.n	800a29c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800a298:	f7ff fcf8 	bl	8009c8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a29c:	2300      	movs	r3, #0
 800a29e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800a2a4:	f107 0310 	add.w	r3, r7, #16
 800a2a8:	4619      	mov	r1, r3
 800a2aa:	4817      	ldr	r0, [pc, #92]	; (800a308 <MX_TIM3_Init+0xc0>)
 800a2ac:	f005 fa56 	bl	800f75c <HAL_TIMEx_MasterConfigSynchronization>
 800a2b0:	4603      	mov	r3, r0
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d001      	beq.n	800a2ba <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 800a2b6:	f7ff fce9 	bl	8009c8c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800a2be:	2301      	movs	r3, #1
 800a2c0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800a2ca:	463b      	mov	r3, r7
 800a2cc:	2208      	movs	r2, #8
 800a2ce:	4619      	mov	r1, r3
 800a2d0:	480d      	ldr	r0, [pc, #52]	; (800a308 <MX_TIM3_Init+0xc0>)
 800a2d2:	f004 fbc5 	bl	800ea60 <HAL_TIM_IC_ConfigChannel>
 800a2d6:	4603      	mov	r3, r0
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d001      	beq.n	800a2e0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800a2dc:	f7ff fcd6 	bl	8009c8c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800a2e0:	2302      	movs	r3, #2
 800a2e2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800a2e4:	2302      	movs	r3, #2
 800a2e6:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 800a2e8:	463b      	mov	r3, r7
 800a2ea:	220c      	movs	r2, #12
 800a2ec:	4619      	mov	r1, r3
 800a2ee:	4806      	ldr	r0, [pc, #24]	; (800a308 <MX_TIM3_Init+0xc0>)
 800a2f0:	f004 fbb6 	bl	800ea60 <HAL_TIM_IC_ConfigChannel>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d001      	beq.n	800a2fe <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 800a2fa:	f7ff fcc7 	bl	8009c8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800a2fe:	bf00      	nop
 800a300:	3718      	adds	r7, #24
 800a302:	46bd      	mov	sp, r7
 800a304:	bd80      	pop	{r7, pc}
 800a306:	bf00      	nop
 800a308:	200145e8 	.word	0x200145e8
 800a30c:	40000400 	.word	0x40000400

0800a310 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b092      	sub	sp, #72	; 0x48
 800a314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a316:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a31a:	2200      	movs	r2, #0
 800a31c:	601a      	str	r2, [r3, #0]
 800a31e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a320:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a324:	2200      	movs	r2, #0
 800a326:	601a      	str	r2, [r3, #0]
 800a328:	605a      	str	r2, [r3, #4]
 800a32a:	609a      	str	r2, [r3, #8]
 800a32c:	60da      	str	r2, [r3, #12]
 800a32e:	611a      	str	r2, [r3, #16]
 800a330:	615a      	str	r2, [r3, #20]
 800a332:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800a334:	1d3b      	adds	r3, r7, #4
 800a336:	2220      	movs	r2, #32
 800a338:	2100      	movs	r1, #0
 800a33a:	4618      	mov	r0, r3
 800a33c:	f01b fc1a 	bl	8025b74 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800a340:	4b33      	ldr	r3, [pc, #204]	; (800a410 <MX_TIM8_Init+0x100>)
 800a342:	4a34      	ldr	r2, [pc, #208]	; (800a414 <MX_TIM8_Init+0x104>)
 800a344:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 3-1;
 800a346:	4b32      	ldr	r3, [pc, #200]	; (800a410 <MX_TIM8_Init+0x100>)
 800a348:	2202      	movs	r2, #2
 800a34a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a34c:	4b30      	ldr	r3, [pc, #192]	; (800a410 <MX_TIM8_Init+0x100>)
 800a34e:	2200      	movs	r2, #0
 800a350:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 56000-1;
 800a352:	4b2f      	ldr	r3, [pc, #188]	; (800a410 <MX_TIM8_Init+0x100>)
 800a354:	f64d 22bf 	movw	r2, #55999	; 0xdabf
 800a358:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a35a:	4b2d      	ldr	r3, [pc, #180]	; (800a410 <MX_TIM8_Init+0x100>)
 800a35c:	2200      	movs	r2, #0
 800a35e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800a360:	4b2b      	ldr	r3, [pc, #172]	; (800a410 <MX_TIM8_Init+0x100>)
 800a362:	2200      	movs	r2, #0
 800a364:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a366:	4b2a      	ldr	r3, [pc, #168]	; (800a410 <MX_TIM8_Init+0x100>)
 800a368:	2200      	movs	r2, #0
 800a36a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800a36c:	4828      	ldr	r0, [pc, #160]	; (800a410 <MX_TIM8_Init+0x100>)
 800a36e:	f003 ffdf 	bl	800e330 <HAL_TIM_PWM_Init>
 800a372:	4603      	mov	r3, r0
 800a374:	2b00      	cmp	r3, #0
 800a376:	d001      	beq.n	800a37c <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 800a378:	f7ff fc88 	bl	8009c8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a37c:	2300      	movs	r3, #0
 800a37e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a380:	2300      	movs	r3, #0
 800a382:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800a384:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a388:	4619      	mov	r1, r3
 800a38a:	4821      	ldr	r0, [pc, #132]	; (800a410 <MX_TIM8_Init+0x100>)
 800a38c:	f005 f9e6 	bl	800f75c <HAL_TIMEx_MasterConfigSynchronization>
 800a390:	4603      	mov	r3, r0
 800a392:	2b00      	cmp	r3, #0
 800a394:	d001      	beq.n	800a39a <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 800a396:	f7ff fc79 	bl	8009c8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a39a:	2360      	movs	r3, #96	; 0x60
 800a39c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800a39e:	2300      	movs	r3, #0
 800a3a0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800a3b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a3ba:	2204      	movs	r2, #4
 800a3bc:	4619      	mov	r1, r3
 800a3be:	4814      	ldr	r0, [pc, #80]	; (800a410 <MX_TIM8_Init+0x100>)
 800a3c0:	f004 fbea 	bl	800eb98 <HAL_TIM_PWM_ConfigChannel>
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d001      	beq.n	800a3ce <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 800a3ca:	f7ff fc5f 	bl	8009c8c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800a3da:	2300      	movs	r3, #0
 800a3dc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800a3de:	2300      	movs	r3, #0
 800a3e0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800a3e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a3e6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800a3ec:	1d3b      	adds	r3, r7, #4
 800a3ee:	4619      	mov	r1, r3
 800a3f0:	4807      	ldr	r0, [pc, #28]	; (800a410 <MX_TIM8_Init+0x100>)
 800a3f2:	f005 fa2f 	bl	800f854 <HAL_TIMEx_ConfigBreakDeadTime>
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d001      	beq.n	800a400 <MX_TIM8_Init+0xf0>
  {
    Error_Handler();
 800a3fc:	f7ff fc46 	bl	8009c8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800a400:	4803      	ldr	r0, [pc, #12]	; (800a410 <MX_TIM8_Init+0x100>)
 800a402:	f000 f989 	bl	800a718 <HAL_TIM_MspPostInit>

}
 800a406:	bf00      	nop
 800a408:	3748      	adds	r7, #72	; 0x48
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}
 800a40e:	bf00      	nop
 800a410:	200145a0 	.word	0x200145a0
 800a414:	40010400 	.word	0x40010400

0800a418 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b088      	sub	sp, #32
 800a41c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM9_Init 0 */
//	  htim9.Init.Prescaler = 3000-1;
//	  htim9.Init.Period = 56000-1;
  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800a41e:	1d3b      	adds	r3, r7, #4
 800a420:	2200      	movs	r2, #0
 800a422:	601a      	str	r2, [r3, #0]
 800a424:	605a      	str	r2, [r3, #4]
 800a426:	609a      	str	r2, [r3, #8]
 800a428:	60da      	str	r2, [r3, #12]
 800a42a:	611a      	str	r2, [r3, #16]
 800a42c:	615a      	str	r2, [r3, #20]
 800a42e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800a430:	4b1a      	ldr	r3, [pc, #104]	; (800a49c <MX_TIM9_Init+0x84>)
 800a432:	4a1b      	ldr	r2, [pc, #108]	; (800a4a0 <MX_TIM9_Init+0x88>)
 800a434:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 3000-1;
 800a436:	4b19      	ldr	r3, [pc, #100]	; (800a49c <MX_TIM9_Init+0x84>)
 800a438:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800a43c:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a43e:	4b17      	ldr	r3, [pc, #92]	; (800a49c <MX_TIM9_Init+0x84>)
 800a440:	2200      	movs	r2, #0
 800a442:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 56000-1;
 800a444:	4b15      	ldr	r3, [pc, #84]	; (800a49c <MX_TIM9_Init+0x84>)
 800a446:	f64d 22bf 	movw	r2, #55999	; 0xdabf
 800a44a:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a44c:	4b13      	ldr	r3, [pc, #76]	; (800a49c <MX_TIM9_Init+0x84>)
 800a44e:	2200      	movs	r2, #0
 800a450:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a452:	4b12      	ldr	r3, [pc, #72]	; (800a49c <MX_TIM9_Init+0x84>)
 800a454:	2200      	movs	r2, #0
 800a456:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 800a458:	4810      	ldr	r0, [pc, #64]	; (800a49c <MX_TIM9_Init+0x84>)
 800a45a:	f003 ff69 	bl	800e330 <HAL_TIM_PWM_Init>
 800a45e:	4603      	mov	r3, r0
 800a460:	2b00      	cmp	r3, #0
 800a462:	d001      	beq.n	800a468 <MX_TIM9_Init+0x50>
  {
    Error_Handler();
 800a464:	f7ff fc12 	bl	8009c8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a468:	2360      	movs	r3, #96	; 0x60
 800a46a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800a46c:	2300      	movs	r3, #0
 800a46e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a470:	2300      	movs	r3, #0
 800a472:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a474:	2300      	movs	r3, #0
 800a476:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800a478:	1d3b      	adds	r3, r7, #4
 800a47a:	2204      	movs	r2, #4
 800a47c:	4619      	mov	r1, r3
 800a47e:	4807      	ldr	r0, [pc, #28]	; (800a49c <MX_TIM9_Init+0x84>)
 800a480:	f004 fb8a 	bl	800eb98 <HAL_TIM_PWM_ConfigChannel>
 800a484:	4603      	mov	r3, r0
 800a486:	2b00      	cmp	r3, #0
 800a488:	d001      	beq.n	800a48e <MX_TIM9_Init+0x76>
  {
    Error_Handler();
 800a48a:	f7ff fbff 	bl	8009c8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 800a48e:	4803      	ldr	r0, [pc, #12]	; (800a49c <MX_TIM9_Init+0x84>)
 800a490:	f000 f942 	bl	800a718 <HAL_TIM_MspPostInit>

}
 800a494:	bf00      	nop
 800a496:	3720      	adds	r7, #32
 800a498:	46bd      	mov	sp, r7
 800a49a:	bd80      	pop	{r7, pc}
 800a49c:	20014678 	.word	0x20014678
 800a4a0:	40014000 	.word	0x40014000

0800a4a4 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b084      	sub	sp, #16
 800a4a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM12_Init 0 */
//	  htim12.Init.Prescaler = 1000;
//	  htim12.Init.Period = 10000;
  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a4aa:	463b      	mov	r3, r7
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	601a      	str	r2, [r3, #0]
 800a4b0:	605a      	str	r2, [r3, #4]
 800a4b2:	609a      	str	r2, [r3, #8]
 800a4b4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800a4b6:	4b16      	ldr	r3, [pc, #88]	; (800a510 <MX_TIM12_Init+0x6c>)
 800a4b8:	4a16      	ldr	r2, [pc, #88]	; (800a514 <MX_TIM12_Init+0x70>)
 800a4ba:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 1000;
 800a4bc:	4b14      	ldr	r3, [pc, #80]	; (800a510 <MX_TIM12_Init+0x6c>)
 800a4be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a4c2:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a4c4:	4b12      	ldr	r3, [pc, #72]	; (800a510 <MX_TIM12_Init+0x6c>)
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 10000;
 800a4ca:	4b11      	ldr	r3, [pc, #68]	; (800a510 <MX_TIM12_Init+0x6c>)
 800a4cc:	f242 7210 	movw	r2, #10000	; 0x2710
 800a4d0:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a4d2:	4b0f      	ldr	r3, [pc, #60]	; (800a510 <MX_TIM12_Init+0x6c>)
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a4d8:	4b0d      	ldr	r3, [pc, #52]	; (800a510 <MX_TIM12_Init+0x6c>)
 800a4da:	2200      	movs	r2, #0
 800a4dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 800a4de:	480c      	ldr	r0, [pc, #48]	; (800a510 <MX_TIM12_Init+0x6c>)
 800a4e0:	f003 fe67 	bl	800e1b2 <HAL_TIM_Base_Init>
 800a4e4:	4603      	mov	r3, r0
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d001      	beq.n	800a4ee <MX_TIM12_Init+0x4a>
  {
    Error_Handler();
 800a4ea:	f7ff fbcf 	bl	8009c8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a4ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a4f2:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 800a4f4:	463b      	mov	r3, r7
 800a4f6:	4619      	mov	r1, r3
 800a4f8:	4805      	ldr	r0, [pc, #20]	; (800a510 <MX_TIM12_Init+0x6c>)
 800a4fa:	f004 fc0f 	bl	800ed1c <HAL_TIM_ConfigClockSource>
 800a4fe:	4603      	mov	r3, r0
 800a500:	2b00      	cmp	r3, #0
 800a502:	d001      	beq.n	800a508 <MX_TIM12_Init+0x64>
  {
    Error_Handler();
 800a504:	f7ff fbc2 	bl	8009c8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 800a508:	bf00      	nop
 800a50a:	3710      	adds	r7, #16
 800a50c:	46bd      	mov	sp, r7
 800a50e:	bd80      	pop	{r7, pc}
 800a510:	20014708 	.word	0x20014708
 800a514:	40001800 	.word	0x40001800

0800a518 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b086      	sub	sp, #24
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	4a2e      	ldr	r2, [pc, #184]	; (800a5e0 <HAL_TIM_Base_MspInit+0xc8>)
 800a526:	4293      	cmp	r3, r2
 800a528:	d11e      	bne.n	800a568 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800a52a:	2300      	movs	r3, #0
 800a52c:	617b      	str	r3, [r7, #20]
 800a52e:	4b2d      	ldr	r3, [pc, #180]	; (800a5e4 <HAL_TIM_Base_MspInit+0xcc>)
 800a530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a532:	4a2c      	ldr	r2, [pc, #176]	; (800a5e4 <HAL_TIM_Base_MspInit+0xcc>)
 800a534:	f043 0301 	orr.w	r3, r3, #1
 800a538:	6453      	str	r3, [r2, #68]	; 0x44
 800a53a:	4b2a      	ldr	r3, [pc, #168]	; (800a5e4 <HAL_TIM_Base_MspInit+0xcc>)
 800a53c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a53e:	f003 0301 	and.w	r3, r3, #1
 800a542:	617b      	str	r3, [r7, #20]
 800a544:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 800a546:	2200      	movs	r2, #0
 800a548:	2105      	movs	r1, #5
 800a54a:	2018      	movs	r0, #24
 800a54c:	f000 fd39 	bl	800afc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800a550:	2018      	movs	r0, #24
 800a552:	f000 fd52 	bl	800affa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 800a556:	2200      	movs	r2, #0
 800a558:	2105      	movs	r1, #5
 800a55a:	2019      	movs	r0, #25
 800a55c:	f000 fd31 	bl	800afc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800a560:	2019      	movs	r0, #25
 800a562:	f000 fd4a 	bl	800affa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 800a566:	e036      	b.n	800a5d6 <HAL_TIM_Base_MspInit+0xbe>
  else if(tim_baseHandle->Instance==TIM2)
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a570:	d116      	bne.n	800a5a0 <HAL_TIM_Base_MspInit+0x88>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800a572:	2300      	movs	r3, #0
 800a574:	613b      	str	r3, [r7, #16]
 800a576:	4b1b      	ldr	r3, [pc, #108]	; (800a5e4 <HAL_TIM_Base_MspInit+0xcc>)
 800a578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a57a:	4a1a      	ldr	r2, [pc, #104]	; (800a5e4 <HAL_TIM_Base_MspInit+0xcc>)
 800a57c:	f043 0301 	orr.w	r3, r3, #1
 800a580:	6413      	str	r3, [r2, #64]	; 0x40
 800a582:	4b18      	ldr	r3, [pc, #96]	; (800a5e4 <HAL_TIM_Base_MspInit+0xcc>)
 800a584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a586:	f003 0301 	and.w	r3, r3, #1
 800a58a:	613b      	str	r3, [r7, #16]
 800a58c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800a58e:	2200      	movs	r2, #0
 800a590:	2105      	movs	r1, #5
 800a592:	201c      	movs	r0, #28
 800a594:	f000 fd15 	bl	800afc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800a598:	201c      	movs	r0, #28
 800a59a:	f000 fd2e 	bl	800affa <HAL_NVIC_EnableIRQ>
}
 800a59e:	e01a      	b.n	800a5d6 <HAL_TIM_Base_MspInit+0xbe>
  else if(tim_baseHandle->Instance==TIM12)
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	4a10      	ldr	r2, [pc, #64]	; (800a5e8 <HAL_TIM_Base_MspInit+0xd0>)
 800a5a6:	4293      	cmp	r3, r2
 800a5a8:	d115      	bne.n	800a5d6 <HAL_TIM_Base_MspInit+0xbe>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	60fb      	str	r3, [r7, #12]
 800a5ae:	4b0d      	ldr	r3, [pc, #52]	; (800a5e4 <HAL_TIM_Base_MspInit+0xcc>)
 800a5b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5b2:	4a0c      	ldr	r2, [pc, #48]	; (800a5e4 <HAL_TIM_Base_MspInit+0xcc>)
 800a5b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a5b8:	6413      	str	r3, [r2, #64]	; 0x40
 800a5ba:	4b0a      	ldr	r3, [pc, #40]	; (800a5e4 <HAL_TIM_Base_MspInit+0xcc>)
 800a5bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5c2:	60fb      	str	r3, [r7, #12]
 800a5c4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 5, 0);
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	2105      	movs	r1, #5
 800a5ca:	202b      	movs	r0, #43	; 0x2b
 800a5cc:	f000 fcf9 	bl	800afc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 800a5d0:	202b      	movs	r0, #43	; 0x2b
 800a5d2:	f000 fd12 	bl	800affa <HAL_NVIC_EnableIRQ>
}
 800a5d6:	bf00      	nop
 800a5d8:	3718      	adds	r7, #24
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	bd80      	pop	{r7, pc}
 800a5de:	bf00      	nop
 800a5e0:	40010000 	.word	0x40010000
 800a5e4:	40023800 	.word	0x40023800
 800a5e8:	40001800 	.word	0x40001800

0800a5ec <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b08a      	sub	sp, #40	; 0x28
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a5f4:	f107 0314 	add.w	r3, r7, #20
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	601a      	str	r2, [r3, #0]
 800a5fc:	605a      	str	r2, [r3, #4]
 800a5fe:	609a      	str	r2, [r3, #8]
 800a600:	60da      	str	r2, [r3, #12]
 800a602:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM3)
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	4a1d      	ldr	r2, [pc, #116]	; (800a680 <HAL_TIM_IC_MspInit+0x94>)
 800a60a:	4293      	cmp	r3, r2
 800a60c:	d133      	bne.n	800a676 <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800a60e:	2300      	movs	r3, #0
 800a610:	613b      	str	r3, [r7, #16]
 800a612:	4b1c      	ldr	r3, [pc, #112]	; (800a684 <HAL_TIM_IC_MspInit+0x98>)
 800a614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a616:	4a1b      	ldr	r2, [pc, #108]	; (800a684 <HAL_TIM_IC_MspInit+0x98>)
 800a618:	f043 0302 	orr.w	r3, r3, #2
 800a61c:	6413      	str	r3, [r2, #64]	; 0x40
 800a61e:	4b19      	ldr	r3, [pc, #100]	; (800a684 <HAL_TIM_IC_MspInit+0x98>)
 800a620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a622:	f003 0302 	and.w	r3, r3, #2
 800a626:	613b      	str	r3, [r7, #16]
 800a628:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a62a:	2300      	movs	r3, #0
 800a62c:	60fb      	str	r3, [r7, #12]
 800a62e:	4b15      	ldr	r3, [pc, #84]	; (800a684 <HAL_TIM_IC_MspInit+0x98>)
 800a630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a632:	4a14      	ldr	r2, [pc, #80]	; (800a684 <HAL_TIM_IC_MspInit+0x98>)
 800a634:	f043 0302 	orr.w	r3, r3, #2
 800a638:	6313      	str	r3, [r2, #48]	; 0x30
 800a63a:	4b12      	ldr	r3, [pc, #72]	; (800a684 <HAL_TIM_IC_MspInit+0x98>)
 800a63c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a63e:	f003 0302 	and.w	r3, r3, #2
 800a642:	60fb      	str	r3, [r7, #12]
 800a644:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800a646:	2301      	movs	r3, #1
 800a648:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a64a:	2302      	movs	r3, #2
 800a64c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a64e:	2301      	movs	r3, #1
 800a650:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a652:	2300      	movs	r3, #0
 800a654:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800a656:	2302      	movs	r3, #2
 800a658:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a65a:	f107 0314 	add.w	r3, r7, #20
 800a65e:	4619      	mov	r1, r3
 800a660:	4809      	ldr	r0, [pc, #36]	; (800a688 <HAL_TIM_IC_MspInit+0x9c>)
 800a662:	f002 fd59 	bl	800d118 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800a666:	2200      	movs	r2, #0
 800a668:	2105      	movs	r1, #5
 800a66a:	201d      	movs	r0, #29
 800a66c:	f000 fca9 	bl	800afc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800a670:	201d      	movs	r0, #29
 800a672:	f000 fcc2 	bl	800affa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800a676:	bf00      	nop
 800a678:	3728      	adds	r7, #40	; 0x28
 800a67a:	46bd      	mov	sp, r7
 800a67c:	bd80      	pop	{r7, pc}
 800a67e:	bf00      	nop
 800a680:	40000400 	.word	0x40000400
 800a684:	40023800 	.word	0x40023800
 800a688:	40020400 	.word	0x40020400

0800a68c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b084      	sub	sp, #16
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM8)
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	4a1c      	ldr	r2, [pc, #112]	; (800a70c <HAL_TIM_PWM_MspInit+0x80>)
 800a69a:	4293      	cmp	r3, r2
 800a69c:	d116      	bne.n	800a6cc <HAL_TIM_PWM_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800a69e:	2300      	movs	r3, #0
 800a6a0:	60fb      	str	r3, [r7, #12]
 800a6a2:	4b1b      	ldr	r3, [pc, #108]	; (800a710 <HAL_TIM_PWM_MspInit+0x84>)
 800a6a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6a6:	4a1a      	ldr	r2, [pc, #104]	; (800a710 <HAL_TIM_PWM_MspInit+0x84>)
 800a6a8:	f043 0302 	orr.w	r3, r3, #2
 800a6ac:	6453      	str	r3, [r2, #68]	; 0x44
 800a6ae:	4b18      	ldr	r3, [pc, #96]	; (800a710 <HAL_TIM_PWM_MspInit+0x84>)
 800a6b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6b2:	f003 0302 	and.w	r3, r3, #2
 800a6b6:	60fb      	str	r3, [r7, #12]
 800a6b8:	68fb      	ldr	r3, [r7, #12]

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 5, 0);
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	2105      	movs	r1, #5
 800a6be:	202b      	movs	r0, #43	; 0x2b
 800a6c0:	f000 fc7f 	bl	800afc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 800a6c4:	202b      	movs	r0, #43	; 0x2b
 800a6c6:	f000 fc98 	bl	800affa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 800a6ca:	e01a      	b.n	800a702 <HAL_TIM_PWM_MspInit+0x76>
  else if(tim_pwmHandle->Instance==TIM9)
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	4a10      	ldr	r2, [pc, #64]	; (800a714 <HAL_TIM_PWM_MspInit+0x88>)
 800a6d2:	4293      	cmp	r3, r2
 800a6d4:	d115      	bne.n	800a702 <HAL_TIM_PWM_MspInit+0x76>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	60bb      	str	r3, [r7, #8]
 800a6da:	4b0d      	ldr	r3, [pc, #52]	; (800a710 <HAL_TIM_PWM_MspInit+0x84>)
 800a6dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6de:	4a0c      	ldr	r2, [pc, #48]	; (800a710 <HAL_TIM_PWM_MspInit+0x84>)
 800a6e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a6e4:	6453      	str	r3, [r2, #68]	; 0x44
 800a6e6:	4b0a      	ldr	r3, [pc, #40]	; (800a710 <HAL_TIM_PWM_MspInit+0x84>)
 800a6e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a6ee:	60bb      	str	r3, [r7, #8]
 800a6f0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	2105      	movs	r1, #5
 800a6f6:	2018      	movs	r0, #24
 800a6f8:	f000 fc63 	bl	800afc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800a6fc:	2018      	movs	r0, #24
 800a6fe:	f000 fc7c 	bl	800affa <HAL_NVIC_EnableIRQ>
}
 800a702:	bf00      	nop
 800a704:	3710      	adds	r7, #16
 800a706:	46bd      	mov	sp, r7
 800a708:	bd80      	pop	{r7, pc}
 800a70a:	bf00      	nop
 800a70c:	40010400 	.word	0x40010400
 800a710:	40023800 	.word	0x40023800
 800a714:	40014000 	.word	0x40014000

0800a718 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b08a      	sub	sp, #40	; 0x28
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a720:	f107 0314 	add.w	r3, r7, #20
 800a724:	2200      	movs	r2, #0
 800a726:	601a      	str	r2, [r3, #0]
 800a728:	605a      	str	r2, [r3, #4]
 800a72a:	609a      	str	r2, [r3, #8]
 800a72c:	60da      	str	r2, [r3, #12]
 800a72e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	4a24      	ldr	r2, [pc, #144]	; (800a7c8 <HAL_TIM_MspPostInit+0xb0>)
 800a736:	4293      	cmp	r3, r2
 800a738:	d11e      	bne.n	800a778 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a73a:	2300      	movs	r3, #0
 800a73c:	613b      	str	r3, [r7, #16]
 800a73e:	4b23      	ldr	r3, [pc, #140]	; (800a7cc <HAL_TIM_MspPostInit+0xb4>)
 800a740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a742:	4a22      	ldr	r2, [pc, #136]	; (800a7cc <HAL_TIM_MspPostInit+0xb4>)
 800a744:	f043 0304 	orr.w	r3, r3, #4
 800a748:	6313      	str	r3, [r2, #48]	; 0x30
 800a74a:	4b20      	ldr	r3, [pc, #128]	; (800a7cc <HAL_TIM_MspPostInit+0xb4>)
 800a74c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a74e:	f003 0304 	and.w	r3, r3, #4
 800a752:	613b      	str	r3, [r7, #16]
 800a754:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800a756:	2380      	movs	r3, #128	; 0x80
 800a758:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a75a:	2302      	movs	r3, #2
 800a75c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a75e:	2300      	movs	r3, #0
 800a760:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a762:	2300      	movs	r3, #0
 800a764:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800a766:	2303      	movs	r3, #3
 800a768:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a76a:	f107 0314 	add.w	r3, r7, #20
 800a76e:	4619      	mov	r1, r3
 800a770:	4817      	ldr	r0, [pc, #92]	; (800a7d0 <HAL_TIM_MspPostInit+0xb8>)
 800a772:	f002 fcd1 	bl	800d118 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 800a776:	e022      	b.n	800a7be <HAL_TIM_MspPostInit+0xa6>
  else if(timHandle->Instance==TIM9)
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	4a15      	ldr	r2, [pc, #84]	; (800a7d4 <HAL_TIM_MspPostInit+0xbc>)
 800a77e:	4293      	cmp	r3, r2
 800a780:	d11d      	bne.n	800a7be <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a782:	2300      	movs	r3, #0
 800a784:	60fb      	str	r3, [r7, #12]
 800a786:	4b11      	ldr	r3, [pc, #68]	; (800a7cc <HAL_TIM_MspPostInit+0xb4>)
 800a788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a78a:	4a10      	ldr	r2, [pc, #64]	; (800a7cc <HAL_TIM_MspPostInit+0xb4>)
 800a78c:	f043 0301 	orr.w	r3, r3, #1
 800a790:	6313      	str	r3, [r2, #48]	; 0x30
 800a792:	4b0e      	ldr	r3, [pc, #56]	; (800a7cc <HAL_TIM_MspPostInit+0xb4>)
 800a794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a796:	f003 0301 	and.w	r3, r3, #1
 800a79a:	60fb      	str	r3, [r7, #12]
 800a79c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800a79e:	2308      	movs	r3, #8
 800a7a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a7a2:	2302      	movs	r3, #2
 800a7a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800a7ae:	2303      	movs	r3, #3
 800a7b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a7b2:	f107 0314 	add.w	r3, r7, #20
 800a7b6:	4619      	mov	r1, r3
 800a7b8:	4807      	ldr	r0, [pc, #28]	; (800a7d8 <HAL_TIM_MspPostInit+0xc0>)
 800a7ba:	f002 fcad 	bl	800d118 <HAL_GPIO_Init>
}
 800a7be:	bf00      	nop
 800a7c0:	3728      	adds	r7, #40	; 0x28
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	bd80      	pop	{r7, pc}
 800a7c6:	bf00      	nop
 800a7c8:	40010400 	.word	0x40010400
 800a7cc:	40023800 	.word	0x40023800
 800a7d0:	40020800 	.word	0x40020800
 800a7d4:	40014000 	.word	0x40014000
 800a7d8:	40020000 	.word	0x40020000

0800a7dc <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart1_rx;
DMA_HandleTypeDef hdma_usart1_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800a7e0:	4b11      	ldr	r3, [pc, #68]	; (800a828 <MX_UART4_Init+0x4c>)
 800a7e2:	4a12      	ldr	r2, [pc, #72]	; (800a82c <MX_UART4_Init+0x50>)
 800a7e4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800a7e6:	4b10      	ldr	r3, [pc, #64]	; (800a828 <MX_UART4_Init+0x4c>)
 800a7e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a7ec:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800a7ee:	4b0e      	ldr	r3, [pc, #56]	; (800a828 <MX_UART4_Init+0x4c>)
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800a7f4:	4b0c      	ldr	r3, [pc, #48]	; (800a828 <MX_UART4_Init+0x4c>)
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800a7fa:	4b0b      	ldr	r3, [pc, #44]	; (800a828 <MX_UART4_Init+0x4c>)
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800a800:	4b09      	ldr	r3, [pc, #36]	; (800a828 <MX_UART4_Init+0x4c>)
 800a802:	220c      	movs	r2, #12
 800a804:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a806:	4b08      	ldr	r3, [pc, #32]	; (800a828 <MX_UART4_Init+0x4c>)
 800a808:	2200      	movs	r2, #0
 800a80a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800a80c:	4b06      	ldr	r3, [pc, #24]	; (800a828 <MX_UART4_Init+0x4c>)
 800a80e:	2200      	movs	r2, #0
 800a810:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800a812:	4805      	ldr	r0, [pc, #20]	; (800a828 <MX_UART4_Init+0x4c>)
 800a814:	f005 f884 	bl	800f920 <HAL_UART_Init>
 800a818:	4603      	mov	r3, r0
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d001      	beq.n	800a822 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800a81e:	f7ff fa35 	bl	8009c8c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800a822:	bf00      	nop
 800a824:	bd80      	pop	{r7, pc}
 800a826:	bf00      	nop
 800a828:	20014898 	.word	0x20014898
 800a82c:	40004c00 	.word	0x40004c00

0800a830 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 800a830:	b580      	push	{r7, lr}
 800a832:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800a834:	4b11      	ldr	r3, [pc, #68]	; (800a87c <MX_UART5_Init+0x4c>)
 800a836:	4a12      	ldr	r2, [pc, #72]	; (800a880 <MX_UART5_Init+0x50>)
 800a838:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 800a83a:	4b10      	ldr	r3, [pc, #64]	; (800a87c <MX_UART5_Init+0x4c>)
 800a83c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800a840:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800a842:	4b0e      	ldr	r3, [pc, #56]	; (800a87c <MX_UART5_Init+0x4c>)
 800a844:	2200      	movs	r2, #0
 800a846:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800a848:	4b0c      	ldr	r3, [pc, #48]	; (800a87c <MX_UART5_Init+0x4c>)
 800a84a:	2200      	movs	r2, #0
 800a84c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800a84e:	4b0b      	ldr	r3, [pc, #44]	; (800a87c <MX_UART5_Init+0x4c>)
 800a850:	2200      	movs	r2, #0
 800a852:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800a854:	4b09      	ldr	r3, [pc, #36]	; (800a87c <MX_UART5_Init+0x4c>)
 800a856:	220c      	movs	r2, #12
 800a858:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a85a:	4b08      	ldr	r3, [pc, #32]	; (800a87c <MX_UART5_Init+0x4c>)
 800a85c:	2200      	movs	r2, #0
 800a85e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800a860:	4b06      	ldr	r3, [pc, #24]	; (800a87c <MX_UART5_Init+0x4c>)
 800a862:	2200      	movs	r2, #0
 800a864:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800a866:	4805      	ldr	r0, [pc, #20]	; (800a87c <MX_UART5_Init+0x4c>)
 800a868:	f005 f85a 	bl	800f920 <HAL_UART_Init>
 800a86c:	4603      	mov	r3, r0
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d001      	beq.n	800a876 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800a872:	f7ff fa0b 	bl	8009c8c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800a876:	bf00      	nop
 800a878:	bd80      	pop	{r7, pc}
 800a87a:	bf00      	nop
 800a87c:	200147b0 	.word	0x200147b0
 800a880:	40005000 	.word	0x40005000

0800a884 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800a884:	b580      	push	{r7, lr}
 800a886:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800a888:	4b11      	ldr	r3, [pc, #68]	; (800a8d0 <MX_USART1_UART_Init+0x4c>)
 800a88a:	4a12      	ldr	r2, [pc, #72]	; (800a8d4 <MX_USART1_UART_Init+0x50>)
 800a88c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800a88e:	4b10      	ldr	r3, [pc, #64]	; (800a8d0 <MX_USART1_UART_Init+0x4c>)
 800a890:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a894:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800a896:	4b0e      	ldr	r3, [pc, #56]	; (800a8d0 <MX_USART1_UART_Init+0x4c>)
 800a898:	2200      	movs	r2, #0
 800a89a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800a89c:	4b0c      	ldr	r3, [pc, #48]	; (800a8d0 <MX_USART1_UART_Init+0x4c>)
 800a89e:	2200      	movs	r2, #0
 800a8a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800a8a2:	4b0b      	ldr	r3, [pc, #44]	; (800a8d0 <MX_USART1_UART_Init+0x4c>)
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800a8a8:	4b09      	ldr	r3, [pc, #36]	; (800a8d0 <MX_USART1_UART_Init+0x4c>)
 800a8aa:	220c      	movs	r2, #12
 800a8ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a8ae:	4b08      	ldr	r3, [pc, #32]	; (800a8d0 <MX_USART1_UART_Init+0x4c>)
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800a8b4:	4b06      	ldr	r3, [pc, #24]	; (800a8d0 <MX_USART1_UART_Init+0x4c>)
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800a8ba:	4805      	ldr	r0, [pc, #20]	; (800a8d0 <MX_USART1_UART_Init+0x4c>)
 800a8bc:	f005 f830 	bl	800f920 <HAL_UART_Init>
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d001      	beq.n	800a8ca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800a8c6:	f7ff f9e1 	bl	8009c8c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800a8ca:	bf00      	nop
 800a8cc:	bd80      	pop	{r7, pc}
 800a8ce:	bf00      	nop
 800a8d0:	20014854 	.word	0x20014854
 800a8d4:	40011000 	.word	0x40011000

0800a8d8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b090      	sub	sp, #64	; 0x40
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a8e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	601a      	str	r2, [r3, #0]
 800a8e8:	605a      	str	r2, [r3, #4]
 800a8ea:	609a      	str	r2, [r3, #8]
 800a8ec:	60da      	str	r2, [r3, #12]
 800a8ee:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	4a86      	ldr	r2, [pc, #536]	; (800ab10 <HAL_UART_MspInit+0x238>)
 800a8f6:	4293      	cmp	r3, r2
 800a8f8:	d153      	bne.n	800a9a2 <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	62bb      	str	r3, [r7, #40]	; 0x28
 800a8fe:	4b85      	ldr	r3, [pc, #532]	; (800ab14 <HAL_UART_MspInit+0x23c>)
 800a900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a902:	4a84      	ldr	r2, [pc, #528]	; (800ab14 <HAL_UART_MspInit+0x23c>)
 800a904:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a908:	6413      	str	r3, [r2, #64]	; 0x40
 800a90a:	4b82      	ldr	r3, [pc, #520]	; (800ab14 <HAL_UART_MspInit+0x23c>)
 800a90c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a90e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a912:	62bb      	str	r3, [r7, #40]	; 0x28
 800a914:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a916:	2300      	movs	r3, #0
 800a918:	627b      	str	r3, [r7, #36]	; 0x24
 800a91a:	4b7e      	ldr	r3, [pc, #504]	; (800ab14 <HAL_UART_MspInit+0x23c>)
 800a91c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a91e:	4a7d      	ldr	r2, [pc, #500]	; (800ab14 <HAL_UART_MspInit+0x23c>)
 800a920:	f043 0301 	orr.w	r3, r3, #1
 800a924:	6313      	str	r3, [r2, #48]	; 0x30
 800a926:	4b7b      	ldr	r3, [pc, #492]	; (800ab14 <HAL_UART_MspInit+0x23c>)
 800a928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a92a:	f003 0301 	and.w	r3, r3, #1
 800a92e:	627b      	str	r3, [r7, #36]	; 0x24
 800a930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a932:	2300      	movs	r3, #0
 800a934:	623b      	str	r3, [r7, #32]
 800a936:	4b77      	ldr	r3, [pc, #476]	; (800ab14 <HAL_UART_MspInit+0x23c>)
 800a938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a93a:	4a76      	ldr	r2, [pc, #472]	; (800ab14 <HAL_UART_MspInit+0x23c>)
 800a93c:	f043 0304 	orr.w	r3, r3, #4
 800a940:	6313      	str	r3, [r2, #48]	; 0x30
 800a942:	4b74      	ldr	r3, [pc, #464]	; (800ab14 <HAL_UART_MspInit+0x23c>)
 800a944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a946:	f003 0304 	and.w	r3, r3, #4
 800a94a:	623b      	str	r3, [r7, #32]
 800a94c:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800a94e:	2301      	movs	r3, #1
 800a950:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a952:	2302      	movs	r3, #2
 800a954:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a956:	2300      	movs	r3, #0
 800a958:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a95a:	2303      	movs	r3, #3
 800a95c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800a95e:	2308      	movs	r3, #8
 800a960:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a962:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a966:	4619      	mov	r1, r3
 800a968:	486b      	ldr	r0, [pc, #428]	; (800ab18 <HAL_UART_MspInit+0x240>)
 800a96a:	f002 fbd5 	bl	800d118 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800a96e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a972:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a974:	2302      	movs	r3, #2
 800a976:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a978:	2300      	movs	r3, #0
 800a97a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a97c:	2303      	movs	r3, #3
 800a97e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800a980:	2308      	movs	r3, #8
 800a982:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a984:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a988:	4619      	mov	r1, r3
 800a98a:	4864      	ldr	r0, [pc, #400]	; (800ab1c <HAL_UART_MspInit+0x244>)
 800a98c:	f002 fbc4 	bl	800d118 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 800a990:	2200      	movs	r2, #0
 800a992:	2105      	movs	r1, #5
 800a994:	2034      	movs	r0, #52	; 0x34
 800a996:	f000 fb14 	bl	800afc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800a99a:	2034      	movs	r0, #52	; 0x34
 800a99c:	f000 fb2d 	bl	800affa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800a9a0:	e161      	b.n	800ac66 <HAL_UART_MspInit+0x38e>
  else if(uartHandle->Instance==UART5)
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	4a5e      	ldr	r2, [pc, #376]	; (800ab20 <HAL_UART_MspInit+0x248>)
 800a9a8:	4293      	cmp	r3, r2
 800a9aa:	f040 80c5 	bne.w	800ab38 <HAL_UART_MspInit+0x260>
    __HAL_RCC_UART5_CLK_ENABLE();
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	61fb      	str	r3, [r7, #28]
 800a9b2:	4b58      	ldr	r3, [pc, #352]	; (800ab14 <HAL_UART_MspInit+0x23c>)
 800a9b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9b6:	4a57      	ldr	r2, [pc, #348]	; (800ab14 <HAL_UART_MspInit+0x23c>)
 800a9b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a9bc:	6413      	str	r3, [r2, #64]	; 0x40
 800a9be:	4b55      	ldr	r3, [pc, #340]	; (800ab14 <HAL_UART_MspInit+0x23c>)
 800a9c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a9c6:	61fb      	str	r3, [r7, #28]
 800a9c8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	61bb      	str	r3, [r7, #24]
 800a9ce:	4b51      	ldr	r3, [pc, #324]	; (800ab14 <HAL_UART_MspInit+0x23c>)
 800a9d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9d2:	4a50      	ldr	r2, [pc, #320]	; (800ab14 <HAL_UART_MspInit+0x23c>)
 800a9d4:	f043 0304 	orr.w	r3, r3, #4
 800a9d8:	6313      	str	r3, [r2, #48]	; 0x30
 800a9da:	4b4e      	ldr	r3, [pc, #312]	; (800ab14 <HAL_UART_MspInit+0x23c>)
 800a9dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9de:	f003 0304 	and.w	r3, r3, #4
 800a9e2:	61bb      	str	r3, [r7, #24]
 800a9e4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	617b      	str	r3, [r7, #20]
 800a9ea:	4b4a      	ldr	r3, [pc, #296]	; (800ab14 <HAL_UART_MspInit+0x23c>)
 800a9ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9ee:	4a49      	ldr	r2, [pc, #292]	; (800ab14 <HAL_UART_MspInit+0x23c>)
 800a9f0:	f043 0308 	orr.w	r3, r3, #8
 800a9f4:	6313      	str	r3, [r2, #48]	; 0x30
 800a9f6:	4b47      	ldr	r3, [pc, #284]	; (800ab14 <HAL_UART_MspInit+0x23c>)
 800a9f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9fa:	f003 0308 	and.w	r3, r3, #8
 800a9fe:	617b      	str	r3, [r7, #20]
 800aa00:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800aa02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aa06:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aa08:	2302      	movs	r3, #2
 800aa0a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800aa10:	2303      	movs	r3, #3
 800aa12:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800aa14:	2308      	movs	r3, #8
 800aa16:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800aa18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800aa1c:	4619      	mov	r1, r3
 800aa1e:	483f      	ldr	r0, [pc, #252]	; (800ab1c <HAL_UART_MspInit+0x244>)
 800aa20:	f002 fb7a 	bl	800d118 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800aa24:	2304      	movs	r3, #4
 800aa26:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aa28:	2302      	movs	r3, #2
 800aa2a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800aa30:	2303      	movs	r3, #3
 800aa32:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800aa34:	2308      	movs	r3, #8
 800aa36:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800aa38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800aa3c:	4619      	mov	r1, r3
 800aa3e:	4839      	ldr	r0, [pc, #228]	; (800ab24 <HAL_UART_MspInit+0x24c>)
 800aa40:	f002 fb6a 	bl	800d118 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 800aa44:	4b38      	ldr	r3, [pc, #224]	; (800ab28 <HAL_UART_MspInit+0x250>)
 800aa46:	4a39      	ldr	r2, [pc, #228]	; (800ab2c <HAL_UART_MspInit+0x254>)
 800aa48:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 800aa4a:	4b37      	ldr	r3, [pc, #220]	; (800ab28 <HAL_UART_MspInit+0x250>)
 800aa4c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800aa50:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800aa52:	4b35      	ldr	r3, [pc, #212]	; (800ab28 <HAL_UART_MspInit+0x250>)
 800aa54:	2200      	movs	r2, #0
 800aa56:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800aa58:	4b33      	ldr	r3, [pc, #204]	; (800ab28 <HAL_UART_MspInit+0x250>)
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 800aa5e:	4b32      	ldr	r3, [pc, #200]	; (800ab28 <HAL_UART_MspInit+0x250>)
 800aa60:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800aa64:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800aa66:	4b30      	ldr	r3, [pc, #192]	; (800ab28 <HAL_UART_MspInit+0x250>)
 800aa68:	2200      	movs	r2, #0
 800aa6a:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800aa6c:	4b2e      	ldr	r3, [pc, #184]	; (800ab28 <HAL_UART_MspInit+0x250>)
 800aa6e:	2200      	movs	r2, #0
 800aa70:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 800aa72:	4b2d      	ldr	r3, [pc, #180]	; (800ab28 <HAL_UART_MspInit+0x250>)
 800aa74:	2200      	movs	r2, #0
 800aa76:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 800aa78:	4b2b      	ldr	r3, [pc, #172]	; (800ab28 <HAL_UART_MspInit+0x250>)
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800aa7e:	4b2a      	ldr	r3, [pc, #168]	; (800ab28 <HAL_UART_MspInit+0x250>)
 800aa80:	2200      	movs	r2, #0
 800aa82:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 800aa84:	4828      	ldr	r0, [pc, #160]	; (800ab28 <HAL_UART_MspInit+0x250>)
 800aa86:	f000 fad3 	bl	800b030 <HAL_DMA_Init>
 800aa8a:	4603      	mov	r3, r0
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d001      	beq.n	800aa94 <HAL_UART_MspInit+0x1bc>
      Error_Handler();
 800aa90:	f7ff f8fc 	bl	8009c8c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	4a24      	ldr	r2, [pc, #144]	; (800ab28 <HAL_UART_MspInit+0x250>)
 800aa98:	639a      	str	r2, [r3, #56]	; 0x38
 800aa9a:	4a23      	ldr	r2, [pc, #140]	; (800ab28 <HAL_UART_MspInit+0x250>)
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_uart5_tx.Instance = DMA1_Stream7;
 800aaa0:	4b23      	ldr	r3, [pc, #140]	; (800ab30 <HAL_UART_MspInit+0x258>)
 800aaa2:	4a24      	ldr	r2, [pc, #144]	; (800ab34 <HAL_UART_MspInit+0x25c>)
 800aaa4:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 800aaa6:	4b22      	ldr	r3, [pc, #136]	; (800ab30 <HAL_UART_MspInit+0x258>)
 800aaa8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800aaac:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800aaae:	4b20      	ldr	r3, [pc, #128]	; (800ab30 <HAL_UART_MspInit+0x258>)
 800aab0:	2240      	movs	r2, #64	; 0x40
 800aab2:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800aab4:	4b1e      	ldr	r3, [pc, #120]	; (800ab30 <HAL_UART_MspInit+0x258>)
 800aab6:	2200      	movs	r2, #0
 800aab8:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 800aaba:	4b1d      	ldr	r3, [pc, #116]	; (800ab30 <HAL_UART_MspInit+0x258>)
 800aabc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800aac0:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800aac2:	4b1b      	ldr	r3, [pc, #108]	; (800ab30 <HAL_UART_MspInit+0x258>)
 800aac4:	2200      	movs	r2, #0
 800aac6:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800aac8:	4b19      	ldr	r3, [pc, #100]	; (800ab30 <HAL_UART_MspInit+0x258>)
 800aaca:	2200      	movs	r2, #0
 800aacc:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 800aace:	4b18      	ldr	r3, [pc, #96]	; (800ab30 <HAL_UART_MspInit+0x258>)
 800aad0:	2200      	movs	r2, #0
 800aad2:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 800aad4:	4b16      	ldr	r3, [pc, #88]	; (800ab30 <HAL_UART_MspInit+0x258>)
 800aad6:	2200      	movs	r2, #0
 800aad8:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800aada:	4b15      	ldr	r3, [pc, #84]	; (800ab30 <HAL_UART_MspInit+0x258>)
 800aadc:	2200      	movs	r2, #0
 800aade:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 800aae0:	4813      	ldr	r0, [pc, #76]	; (800ab30 <HAL_UART_MspInit+0x258>)
 800aae2:	f000 faa5 	bl	800b030 <HAL_DMA_Init>
 800aae6:	4603      	mov	r3, r0
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d001      	beq.n	800aaf0 <HAL_UART_MspInit+0x218>
      Error_Handler();
 800aaec:	f7ff f8ce 	bl	8009c8c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart5_tx);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	4a0f      	ldr	r2, [pc, #60]	; (800ab30 <HAL_UART_MspInit+0x258>)
 800aaf4:	635a      	str	r2, [r3, #52]	; 0x34
 800aaf6:	4a0e      	ldr	r2, [pc, #56]	; (800ab30 <HAL_UART_MspInit+0x258>)
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 800aafc:	2200      	movs	r2, #0
 800aafe:	2105      	movs	r1, #5
 800ab00:	2035      	movs	r0, #53	; 0x35
 800ab02:	f000 fa5e 	bl	800afc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800ab06:	2035      	movs	r0, #53	; 0x35
 800ab08:	f000 fa77 	bl	800affa <HAL_NVIC_EnableIRQ>
}
 800ab0c:	e0ab      	b.n	800ac66 <HAL_UART_MspInit+0x38e>
 800ab0e:	bf00      	nop
 800ab10:	40004c00 	.word	0x40004c00
 800ab14:	40023800 	.word	0x40023800
 800ab18:	40020000 	.word	0x40020000
 800ab1c:	40020800 	.word	0x40020800
 800ab20:	40005000 	.word	0x40005000
 800ab24:	40020c00 	.word	0x40020c00
 800ab28:	200148dc 	.word	0x200148dc
 800ab2c:	40026010 	.word	0x40026010
 800ab30:	2001493c 	.word	0x2001493c
 800ab34:	400260b8 	.word	0x400260b8
  else if(uartHandle->Instance==USART1)
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	4a4c      	ldr	r2, [pc, #304]	; (800ac70 <HAL_UART_MspInit+0x398>)
 800ab3e:	4293      	cmp	r3, r2
 800ab40:	f040 8091 	bne.w	800ac66 <HAL_UART_MspInit+0x38e>
    __HAL_RCC_USART1_CLK_ENABLE();
 800ab44:	2300      	movs	r3, #0
 800ab46:	613b      	str	r3, [r7, #16]
 800ab48:	4b4a      	ldr	r3, [pc, #296]	; (800ac74 <HAL_UART_MspInit+0x39c>)
 800ab4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab4c:	4a49      	ldr	r2, [pc, #292]	; (800ac74 <HAL_UART_MspInit+0x39c>)
 800ab4e:	f043 0310 	orr.w	r3, r3, #16
 800ab52:	6453      	str	r3, [r2, #68]	; 0x44
 800ab54:	4b47      	ldr	r3, [pc, #284]	; (800ac74 <HAL_UART_MspInit+0x39c>)
 800ab56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab58:	f003 0310 	and.w	r3, r3, #16
 800ab5c:	613b      	str	r3, [r7, #16]
 800ab5e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ab60:	2300      	movs	r3, #0
 800ab62:	60fb      	str	r3, [r7, #12]
 800ab64:	4b43      	ldr	r3, [pc, #268]	; (800ac74 <HAL_UART_MspInit+0x39c>)
 800ab66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab68:	4a42      	ldr	r2, [pc, #264]	; (800ac74 <HAL_UART_MspInit+0x39c>)
 800ab6a:	f043 0301 	orr.w	r3, r3, #1
 800ab6e:	6313      	str	r3, [r2, #48]	; 0x30
 800ab70:	4b40      	ldr	r3, [pc, #256]	; (800ac74 <HAL_UART_MspInit+0x39c>)
 800ab72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab74:	f003 0301 	and.w	r3, r3, #1
 800ab78:	60fb      	str	r3, [r7, #12]
 800ab7a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800ab7c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800ab80:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ab82:	2302      	movs	r3, #2
 800ab84:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab86:	2300      	movs	r3, #0
 800ab88:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ab8a:	2303      	movs	r3, #3
 800ab8c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800ab8e:	2307      	movs	r3, #7
 800ab90:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ab92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ab96:	4619      	mov	r1, r3
 800ab98:	4837      	ldr	r0, [pc, #220]	; (800ac78 <HAL_UART_MspInit+0x3a0>)
 800ab9a:	f002 fabd 	bl	800d118 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800ab9e:	4b37      	ldr	r3, [pc, #220]	; (800ac7c <HAL_UART_MspInit+0x3a4>)
 800aba0:	4a37      	ldr	r2, [pc, #220]	; (800ac80 <HAL_UART_MspInit+0x3a8>)
 800aba2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800aba4:	4b35      	ldr	r3, [pc, #212]	; (800ac7c <HAL_UART_MspInit+0x3a4>)
 800aba6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800abaa:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800abac:	4b33      	ldr	r3, [pc, #204]	; (800ac7c <HAL_UART_MspInit+0x3a4>)
 800abae:	2200      	movs	r2, #0
 800abb0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800abb2:	4b32      	ldr	r3, [pc, #200]	; (800ac7c <HAL_UART_MspInit+0x3a4>)
 800abb4:	2200      	movs	r2, #0
 800abb6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800abb8:	4b30      	ldr	r3, [pc, #192]	; (800ac7c <HAL_UART_MspInit+0x3a4>)
 800abba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800abbe:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800abc0:	4b2e      	ldr	r3, [pc, #184]	; (800ac7c <HAL_UART_MspInit+0x3a4>)
 800abc2:	2200      	movs	r2, #0
 800abc4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800abc6:	4b2d      	ldr	r3, [pc, #180]	; (800ac7c <HAL_UART_MspInit+0x3a4>)
 800abc8:	2200      	movs	r2, #0
 800abca:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800abcc:	4b2b      	ldr	r3, [pc, #172]	; (800ac7c <HAL_UART_MspInit+0x3a4>)
 800abce:	2200      	movs	r2, #0
 800abd0:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800abd2:	4b2a      	ldr	r3, [pc, #168]	; (800ac7c <HAL_UART_MspInit+0x3a4>)
 800abd4:	2200      	movs	r2, #0
 800abd6:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800abd8:	4b28      	ldr	r3, [pc, #160]	; (800ac7c <HAL_UART_MspInit+0x3a4>)
 800abda:	2200      	movs	r2, #0
 800abdc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800abde:	4827      	ldr	r0, [pc, #156]	; (800ac7c <HAL_UART_MspInit+0x3a4>)
 800abe0:	f000 fa26 	bl	800b030 <HAL_DMA_Init>
 800abe4:	4603      	mov	r3, r0
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d001      	beq.n	800abee <HAL_UART_MspInit+0x316>
      Error_Handler();
 800abea:	f7ff f84f 	bl	8009c8c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	4a22      	ldr	r2, [pc, #136]	; (800ac7c <HAL_UART_MspInit+0x3a4>)
 800abf2:	639a      	str	r2, [r3, #56]	; 0x38
 800abf4:	4a21      	ldr	r2, [pc, #132]	; (800ac7c <HAL_UART_MspInit+0x3a4>)
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800abfa:	4b22      	ldr	r3, [pc, #136]	; (800ac84 <HAL_UART_MspInit+0x3ac>)
 800abfc:	4a22      	ldr	r2, [pc, #136]	; (800ac88 <HAL_UART_MspInit+0x3b0>)
 800abfe:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 800ac00:	4b20      	ldr	r3, [pc, #128]	; (800ac84 <HAL_UART_MspInit+0x3ac>)
 800ac02:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800ac06:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ac08:	4b1e      	ldr	r3, [pc, #120]	; (800ac84 <HAL_UART_MspInit+0x3ac>)
 800ac0a:	2240      	movs	r2, #64	; 0x40
 800ac0c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800ac0e:	4b1d      	ldr	r3, [pc, #116]	; (800ac84 <HAL_UART_MspInit+0x3ac>)
 800ac10:	2200      	movs	r2, #0
 800ac12:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800ac14:	4b1b      	ldr	r3, [pc, #108]	; (800ac84 <HAL_UART_MspInit+0x3ac>)
 800ac16:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ac1a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ac1c:	4b19      	ldr	r3, [pc, #100]	; (800ac84 <HAL_UART_MspInit+0x3ac>)
 800ac1e:	2200      	movs	r2, #0
 800ac20:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800ac22:	4b18      	ldr	r3, [pc, #96]	; (800ac84 <HAL_UART_MspInit+0x3ac>)
 800ac24:	2200      	movs	r2, #0
 800ac26:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800ac28:	4b16      	ldr	r3, [pc, #88]	; (800ac84 <HAL_UART_MspInit+0x3ac>)
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800ac2e:	4b15      	ldr	r3, [pc, #84]	; (800ac84 <HAL_UART_MspInit+0x3ac>)
 800ac30:	2200      	movs	r2, #0
 800ac32:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800ac34:	4b13      	ldr	r3, [pc, #76]	; (800ac84 <HAL_UART_MspInit+0x3ac>)
 800ac36:	2200      	movs	r2, #0
 800ac38:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800ac3a:	4812      	ldr	r0, [pc, #72]	; (800ac84 <HAL_UART_MspInit+0x3ac>)
 800ac3c:	f000 f9f8 	bl	800b030 <HAL_DMA_Init>
 800ac40:	4603      	mov	r3, r0
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d001      	beq.n	800ac4a <HAL_UART_MspInit+0x372>
      Error_Handler();
 800ac46:	f7ff f821 	bl	8009c8c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	4a0d      	ldr	r2, [pc, #52]	; (800ac84 <HAL_UART_MspInit+0x3ac>)
 800ac4e:	635a      	str	r2, [r3, #52]	; 0x34
 800ac50:	4a0c      	ldr	r2, [pc, #48]	; (800ac84 <HAL_UART_MspInit+0x3ac>)
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800ac56:	2200      	movs	r2, #0
 800ac58:	2105      	movs	r1, #5
 800ac5a:	2025      	movs	r0, #37	; 0x25
 800ac5c:	f000 f9b1 	bl	800afc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800ac60:	2025      	movs	r0, #37	; 0x25
 800ac62:	f000 f9ca 	bl	800affa <HAL_NVIC_EnableIRQ>
}
 800ac66:	bf00      	nop
 800ac68:	3740      	adds	r7, #64	; 0x40
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	bd80      	pop	{r7, pc}
 800ac6e:	bf00      	nop
 800ac70:	40011000 	.word	0x40011000
 800ac74:	40023800 	.word	0x40023800
 800ac78:	40020000 	.word	0x40020000
 800ac7c:	200147f4 	.word	0x200147f4
 800ac80:	40026440 	.word	0x40026440
 800ac84:	20014750 	.word	0x20014750
 800ac88:	400264b8 	.word	0x400264b8

0800ac8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800ac8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 800acc4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800ac90:	480d      	ldr	r0, [pc, #52]	; (800acc8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800ac92:	490e      	ldr	r1, [pc, #56]	; (800accc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800ac94:	4a0e      	ldr	r2, [pc, #56]	; (800acd0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800ac96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800ac98:	e002      	b.n	800aca0 <LoopCopyDataInit>

0800ac9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800ac9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800ac9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800ac9e:	3304      	adds	r3, #4

0800aca0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800aca0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800aca2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800aca4:	d3f9      	bcc.n	800ac9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800aca6:	4a0b      	ldr	r2, [pc, #44]	; (800acd4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800aca8:	4c0b      	ldr	r4, [pc, #44]	; (800acd8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800acaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 800acac:	e001      	b.n	800acb2 <LoopFillZerobss>

0800acae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800acae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800acb0:	3204      	adds	r2, #4

0800acb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800acb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800acb4:	d3fb      	bcc.n	800acae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800acb6:	f7ff fa15 	bl	800a0e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800acba:	f01a feef 	bl	8025a9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800acbe:	f7fe ff27 	bl	8009b10 <main>
  bx  lr    
 800acc2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800acc4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800acc8:	10000000 	.word	0x10000000
  ldr r1, =_edata
 800accc:	10000244 	.word	0x10000244
  ldr r2, =_sidata
 800acd0:	080313c0 	.word	0x080313c0
  ldr r2, =_sbss
 800acd4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800acd8:	2001c144 	.word	0x2001c144

0800acdc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800acdc:	e7fe      	b.n	800acdc <ADC_IRQHandler>
	...

0800ace0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800ace4:	4b0e      	ldr	r3, [pc, #56]	; (800ad20 <HAL_Init+0x40>)
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	4a0d      	ldr	r2, [pc, #52]	; (800ad20 <HAL_Init+0x40>)
 800acea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800acee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800acf0:	4b0b      	ldr	r3, [pc, #44]	; (800ad20 <HAL_Init+0x40>)
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	4a0a      	ldr	r2, [pc, #40]	; (800ad20 <HAL_Init+0x40>)
 800acf6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800acfa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800acfc:	4b08      	ldr	r3, [pc, #32]	; (800ad20 <HAL_Init+0x40>)
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	4a07      	ldr	r2, [pc, #28]	; (800ad20 <HAL_Init+0x40>)
 800ad02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ad06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800ad08:	2003      	movs	r0, #3
 800ad0a:	f000 f94f 	bl	800afac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800ad0e:	200f      	movs	r0, #15
 800ad10:	f000 f808 	bl	800ad24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800ad14:	f7ff f85e 	bl	8009dd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800ad18:	2300      	movs	r3, #0
}
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	bd80      	pop	{r7, pc}
 800ad1e:	bf00      	nop
 800ad20:	40023c00 	.word	0x40023c00

0800ad24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800ad24:	b580      	push	{r7, lr}
 800ad26:	b082      	sub	sp, #8
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800ad2c:	4b12      	ldr	r3, [pc, #72]	; (800ad78 <HAL_InitTick+0x54>)
 800ad2e:	681a      	ldr	r2, [r3, #0]
 800ad30:	4b12      	ldr	r3, [pc, #72]	; (800ad7c <HAL_InitTick+0x58>)
 800ad32:	781b      	ldrb	r3, [r3, #0]
 800ad34:	4619      	mov	r1, r3
 800ad36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ad3a:	fbb3 f3f1 	udiv	r3, r3, r1
 800ad3e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad42:	4618      	mov	r0, r3
 800ad44:	f000 f967 	bl	800b016 <HAL_SYSTICK_Config>
 800ad48:	4603      	mov	r3, r0
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d001      	beq.n	800ad52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800ad4e:	2301      	movs	r3, #1
 800ad50:	e00e      	b.n	800ad70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	2b0f      	cmp	r3, #15
 800ad56:	d80a      	bhi.n	800ad6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800ad58:	2200      	movs	r2, #0
 800ad5a:	6879      	ldr	r1, [r7, #4]
 800ad5c:	f04f 30ff 	mov.w	r0, #4294967295
 800ad60:	f000 f92f 	bl	800afc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800ad64:	4a06      	ldr	r2, [pc, #24]	; (800ad80 <HAL_InitTick+0x5c>)
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	e000      	b.n	800ad70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800ad6e:	2301      	movs	r3, #1
}
 800ad70:	4618      	mov	r0, r3
 800ad72:	3708      	adds	r7, #8
 800ad74:	46bd      	mov	sp, r7
 800ad76:	bd80      	pop	{r7, pc}
 800ad78:	10000050 	.word	0x10000050
 800ad7c:	10000058 	.word	0x10000058
 800ad80:	10000054 	.word	0x10000054

0800ad84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800ad84:	b480      	push	{r7}
 800ad86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800ad88:	4b06      	ldr	r3, [pc, #24]	; (800ada4 <HAL_IncTick+0x20>)
 800ad8a:	781b      	ldrb	r3, [r3, #0]
 800ad8c:	461a      	mov	r2, r3
 800ad8e:	4b06      	ldr	r3, [pc, #24]	; (800ada8 <HAL_IncTick+0x24>)
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	4413      	add	r3, r2
 800ad94:	4a04      	ldr	r2, [pc, #16]	; (800ada8 <HAL_IncTick+0x24>)
 800ad96:	6013      	str	r3, [r2, #0]
}
 800ad98:	bf00      	nop
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada0:	4770      	bx	lr
 800ada2:	bf00      	nop
 800ada4:	10000058 	.word	0x10000058
 800ada8:	2001499c 	.word	0x2001499c

0800adac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800adac:	b480      	push	{r7}
 800adae:	af00      	add	r7, sp, #0
  return uwTick;
 800adb0:	4b03      	ldr	r3, [pc, #12]	; (800adc0 <HAL_GetTick+0x14>)
 800adb2:	681b      	ldr	r3, [r3, #0]
}
 800adb4:	4618      	mov	r0, r3
 800adb6:	46bd      	mov	sp, r7
 800adb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adbc:	4770      	bx	lr
 800adbe:	bf00      	nop
 800adc0:	2001499c 	.word	0x2001499c

0800adc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800adc4:	b580      	push	{r7, lr}
 800adc6:	b084      	sub	sp, #16
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800adcc:	f7ff ffee 	bl	800adac <HAL_GetTick>
 800add0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800addc:	d005      	beq.n	800adea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800adde:	4b0a      	ldr	r3, [pc, #40]	; (800ae08 <HAL_Delay+0x44>)
 800ade0:	781b      	ldrb	r3, [r3, #0]
 800ade2:	461a      	mov	r2, r3
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	4413      	add	r3, r2
 800ade8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800adea:	bf00      	nop
 800adec:	f7ff ffde 	bl	800adac <HAL_GetTick>
 800adf0:	4602      	mov	r2, r0
 800adf2:	68bb      	ldr	r3, [r7, #8]
 800adf4:	1ad3      	subs	r3, r2, r3
 800adf6:	68fa      	ldr	r2, [r7, #12]
 800adf8:	429a      	cmp	r2, r3
 800adfa:	d8f7      	bhi.n	800adec <HAL_Delay+0x28>
  {
  }
}
 800adfc:	bf00      	nop
 800adfe:	bf00      	nop
 800ae00:	3710      	adds	r7, #16
 800ae02:	46bd      	mov	sp, r7
 800ae04:	bd80      	pop	{r7, pc}
 800ae06:	bf00      	nop
 800ae08:	10000058 	.word	0x10000058

0800ae0c <__NVIC_SetPriorityGrouping>:
{
 800ae0c:	b480      	push	{r7}
 800ae0e:	b085      	sub	sp, #20
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	f003 0307 	and.w	r3, r3, #7
 800ae1a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800ae1c:	4b0c      	ldr	r3, [pc, #48]	; (800ae50 <__NVIC_SetPriorityGrouping+0x44>)
 800ae1e:	68db      	ldr	r3, [r3, #12]
 800ae20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800ae22:	68ba      	ldr	r2, [r7, #8]
 800ae24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800ae28:	4013      	ands	r3, r2
 800ae2a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800ae30:	68bb      	ldr	r3, [r7, #8]
 800ae32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800ae34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800ae38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800ae3e:	4a04      	ldr	r2, [pc, #16]	; (800ae50 <__NVIC_SetPriorityGrouping+0x44>)
 800ae40:	68bb      	ldr	r3, [r7, #8]
 800ae42:	60d3      	str	r3, [r2, #12]
}
 800ae44:	bf00      	nop
 800ae46:	3714      	adds	r7, #20
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4e:	4770      	bx	lr
 800ae50:	e000ed00 	.word	0xe000ed00

0800ae54 <__NVIC_GetPriorityGrouping>:
{
 800ae54:	b480      	push	{r7}
 800ae56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800ae58:	4b04      	ldr	r3, [pc, #16]	; (800ae6c <__NVIC_GetPriorityGrouping+0x18>)
 800ae5a:	68db      	ldr	r3, [r3, #12]
 800ae5c:	0a1b      	lsrs	r3, r3, #8
 800ae5e:	f003 0307 	and.w	r3, r3, #7
}
 800ae62:	4618      	mov	r0, r3
 800ae64:	46bd      	mov	sp, r7
 800ae66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6a:	4770      	bx	lr
 800ae6c:	e000ed00 	.word	0xe000ed00

0800ae70 <__NVIC_EnableIRQ>:
{
 800ae70:	b480      	push	{r7}
 800ae72:	b083      	sub	sp, #12
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	4603      	mov	r3, r0
 800ae78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ae7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	db0b      	blt.n	800ae9a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ae82:	79fb      	ldrb	r3, [r7, #7]
 800ae84:	f003 021f 	and.w	r2, r3, #31
 800ae88:	4907      	ldr	r1, [pc, #28]	; (800aea8 <__NVIC_EnableIRQ+0x38>)
 800ae8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ae8e:	095b      	lsrs	r3, r3, #5
 800ae90:	2001      	movs	r0, #1
 800ae92:	fa00 f202 	lsl.w	r2, r0, r2
 800ae96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800ae9a:	bf00      	nop
 800ae9c:	370c      	adds	r7, #12
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea4:	4770      	bx	lr
 800aea6:	bf00      	nop
 800aea8:	e000e100 	.word	0xe000e100

0800aeac <__NVIC_SetPriority>:
{
 800aeac:	b480      	push	{r7}
 800aeae:	b083      	sub	sp, #12
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	6039      	str	r1, [r7, #0]
 800aeb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800aeb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	db0a      	blt.n	800aed6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	b2da      	uxtb	r2, r3
 800aec4:	490c      	ldr	r1, [pc, #48]	; (800aef8 <__NVIC_SetPriority+0x4c>)
 800aec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aeca:	0112      	lsls	r2, r2, #4
 800aecc:	b2d2      	uxtb	r2, r2
 800aece:	440b      	add	r3, r1
 800aed0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800aed4:	e00a      	b.n	800aeec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	b2da      	uxtb	r2, r3
 800aeda:	4908      	ldr	r1, [pc, #32]	; (800aefc <__NVIC_SetPriority+0x50>)
 800aedc:	79fb      	ldrb	r3, [r7, #7]
 800aede:	f003 030f 	and.w	r3, r3, #15
 800aee2:	3b04      	subs	r3, #4
 800aee4:	0112      	lsls	r2, r2, #4
 800aee6:	b2d2      	uxtb	r2, r2
 800aee8:	440b      	add	r3, r1
 800aeea:	761a      	strb	r2, [r3, #24]
}
 800aeec:	bf00      	nop
 800aeee:	370c      	adds	r7, #12
 800aef0:	46bd      	mov	sp, r7
 800aef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef6:	4770      	bx	lr
 800aef8:	e000e100 	.word	0xe000e100
 800aefc:	e000ed00 	.word	0xe000ed00

0800af00 <NVIC_EncodePriority>:
{
 800af00:	b480      	push	{r7}
 800af02:	b089      	sub	sp, #36	; 0x24
 800af04:	af00      	add	r7, sp, #0
 800af06:	60f8      	str	r0, [r7, #12]
 800af08:	60b9      	str	r1, [r7, #8]
 800af0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	f003 0307 	and.w	r3, r3, #7
 800af12:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800af14:	69fb      	ldr	r3, [r7, #28]
 800af16:	f1c3 0307 	rsb	r3, r3, #7
 800af1a:	2b04      	cmp	r3, #4
 800af1c:	bf28      	it	cs
 800af1e:	2304      	movcs	r3, #4
 800af20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800af22:	69fb      	ldr	r3, [r7, #28]
 800af24:	3304      	adds	r3, #4
 800af26:	2b06      	cmp	r3, #6
 800af28:	d902      	bls.n	800af30 <NVIC_EncodePriority+0x30>
 800af2a:	69fb      	ldr	r3, [r7, #28]
 800af2c:	3b03      	subs	r3, #3
 800af2e:	e000      	b.n	800af32 <NVIC_EncodePriority+0x32>
 800af30:	2300      	movs	r3, #0
 800af32:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800af34:	f04f 32ff 	mov.w	r2, #4294967295
 800af38:	69bb      	ldr	r3, [r7, #24]
 800af3a:	fa02 f303 	lsl.w	r3, r2, r3
 800af3e:	43da      	mvns	r2, r3
 800af40:	68bb      	ldr	r3, [r7, #8]
 800af42:	401a      	ands	r2, r3
 800af44:	697b      	ldr	r3, [r7, #20]
 800af46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800af48:	f04f 31ff 	mov.w	r1, #4294967295
 800af4c:	697b      	ldr	r3, [r7, #20]
 800af4e:	fa01 f303 	lsl.w	r3, r1, r3
 800af52:	43d9      	mvns	r1, r3
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800af58:	4313      	orrs	r3, r2
}
 800af5a:	4618      	mov	r0, r3
 800af5c:	3724      	adds	r7, #36	; 0x24
 800af5e:	46bd      	mov	sp, r7
 800af60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af64:	4770      	bx	lr
	...

0800af68 <SysTick_Config>:
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b082      	sub	sp, #8
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	3b01      	subs	r3, #1
 800af74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800af78:	d301      	bcc.n	800af7e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800af7a:	2301      	movs	r3, #1
 800af7c:	e00f      	b.n	800af9e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800af7e:	4a0a      	ldr	r2, [pc, #40]	; (800afa8 <SysTick_Config+0x40>)
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	3b01      	subs	r3, #1
 800af84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800af86:	210f      	movs	r1, #15
 800af88:	f04f 30ff 	mov.w	r0, #4294967295
 800af8c:	f7ff ff8e 	bl	800aeac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800af90:	4b05      	ldr	r3, [pc, #20]	; (800afa8 <SysTick_Config+0x40>)
 800af92:	2200      	movs	r2, #0
 800af94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800af96:	4b04      	ldr	r3, [pc, #16]	; (800afa8 <SysTick_Config+0x40>)
 800af98:	2207      	movs	r2, #7
 800af9a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800af9c:	2300      	movs	r3, #0
}
 800af9e:	4618      	mov	r0, r3
 800afa0:	3708      	adds	r7, #8
 800afa2:	46bd      	mov	sp, r7
 800afa4:	bd80      	pop	{r7, pc}
 800afa6:	bf00      	nop
 800afa8:	e000e010 	.word	0xe000e010

0800afac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b082      	sub	sp, #8
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800afb4:	6878      	ldr	r0, [r7, #4]
 800afb6:	f7ff ff29 	bl	800ae0c <__NVIC_SetPriorityGrouping>
}
 800afba:	bf00      	nop
 800afbc:	3708      	adds	r7, #8
 800afbe:	46bd      	mov	sp, r7
 800afc0:	bd80      	pop	{r7, pc}

0800afc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800afc2:	b580      	push	{r7, lr}
 800afc4:	b086      	sub	sp, #24
 800afc6:	af00      	add	r7, sp, #0
 800afc8:	4603      	mov	r3, r0
 800afca:	60b9      	str	r1, [r7, #8]
 800afcc:	607a      	str	r2, [r7, #4]
 800afce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800afd0:	2300      	movs	r3, #0
 800afd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800afd4:	f7ff ff3e 	bl	800ae54 <__NVIC_GetPriorityGrouping>
 800afd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800afda:	687a      	ldr	r2, [r7, #4]
 800afdc:	68b9      	ldr	r1, [r7, #8]
 800afde:	6978      	ldr	r0, [r7, #20]
 800afe0:	f7ff ff8e 	bl	800af00 <NVIC_EncodePriority>
 800afe4:	4602      	mov	r2, r0
 800afe6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800afea:	4611      	mov	r1, r2
 800afec:	4618      	mov	r0, r3
 800afee:	f7ff ff5d 	bl	800aeac <__NVIC_SetPriority>
}
 800aff2:	bf00      	nop
 800aff4:	3718      	adds	r7, #24
 800aff6:	46bd      	mov	sp, r7
 800aff8:	bd80      	pop	{r7, pc}

0800affa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800affa:	b580      	push	{r7, lr}
 800affc:	b082      	sub	sp, #8
 800affe:	af00      	add	r7, sp, #0
 800b000:	4603      	mov	r3, r0
 800b002:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b004:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b008:	4618      	mov	r0, r3
 800b00a:	f7ff ff31 	bl	800ae70 <__NVIC_EnableIRQ>
}
 800b00e:	bf00      	nop
 800b010:	3708      	adds	r7, #8
 800b012:	46bd      	mov	sp, r7
 800b014:	bd80      	pop	{r7, pc}

0800b016 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800b016:	b580      	push	{r7, lr}
 800b018:	b082      	sub	sp, #8
 800b01a:	af00      	add	r7, sp, #0
 800b01c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800b01e:	6878      	ldr	r0, [r7, #4]
 800b020:	f7ff ffa2 	bl	800af68 <SysTick_Config>
 800b024:	4603      	mov	r3, r0
}
 800b026:	4618      	mov	r0, r3
 800b028:	3708      	adds	r7, #8
 800b02a:	46bd      	mov	sp, r7
 800b02c:	bd80      	pop	{r7, pc}
	...

0800b030 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800b030:	b580      	push	{r7, lr}
 800b032:	b086      	sub	sp, #24
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800b038:	2300      	movs	r3, #0
 800b03a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800b03c:	f7ff feb6 	bl	800adac <HAL_GetTick>
 800b040:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d101      	bne.n	800b04c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800b048:	2301      	movs	r3, #1
 800b04a:	e099      	b.n	800b180 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	2202      	movs	r2, #2
 800b050:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	2200      	movs	r2, #0
 800b058:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	681a      	ldr	r2, [r3, #0]
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	f022 0201 	bic.w	r2, r2, #1
 800b06a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b06c:	e00f      	b.n	800b08e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800b06e:	f7ff fe9d 	bl	800adac <HAL_GetTick>
 800b072:	4602      	mov	r2, r0
 800b074:	693b      	ldr	r3, [r7, #16]
 800b076:	1ad3      	subs	r3, r2, r3
 800b078:	2b05      	cmp	r3, #5
 800b07a:	d908      	bls.n	800b08e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	2220      	movs	r2, #32
 800b080:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	2203      	movs	r2, #3
 800b086:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800b08a:	2303      	movs	r3, #3
 800b08c:	e078      	b.n	800b180 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	f003 0301 	and.w	r3, r3, #1
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d1e8      	bne.n	800b06e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800b0a4:	697a      	ldr	r2, [r7, #20]
 800b0a6:	4b38      	ldr	r3, [pc, #224]	; (800b188 <HAL_DMA_Init+0x158>)
 800b0a8:	4013      	ands	r3, r2
 800b0aa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	685a      	ldr	r2, [r3, #4]
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	689b      	ldr	r3, [r3, #8]
 800b0b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b0ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	691b      	ldr	r3, [r3, #16]
 800b0c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b0c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	699b      	ldr	r3, [r3, #24]
 800b0cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b0d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	6a1b      	ldr	r3, [r3, #32]
 800b0d8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b0da:	697a      	ldr	r2, [r7, #20]
 800b0dc:	4313      	orrs	r3, r2
 800b0de:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0e4:	2b04      	cmp	r3, #4
 800b0e6:	d107      	bne.n	800b0f8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0f0:	4313      	orrs	r3, r2
 800b0f2:	697a      	ldr	r2, [r7, #20]
 800b0f4:	4313      	orrs	r3, r2
 800b0f6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	697a      	ldr	r2, [r7, #20]
 800b0fe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	695b      	ldr	r3, [r3, #20]
 800b106:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800b108:	697b      	ldr	r3, [r7, #20]
 800b10a:	f023 0307 	bic.w	r3, r3, #7
 800b10e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b114:	697a      	ldr	r2, [r7, #20]
 800b116:	4313      	orrs	r3, r2
 800b118:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b11e:	2b04      	cmp	r3, #4
 800b120:	d117      	bne.n	800b152 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b126:	697a      	ldr	r2, [r7, #20]
 800b128:	4313      	orrs	r3, r2
 800b12a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b130:	2b00      	cmp	r3, #0
 800b132:	d00e      	beq.n	800b152 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800b134:	6878      	ldr	r0, [r7, #4]
 800b136:	f000 fb01 	bl	800b73c <DMA_CheckFifoParam>
 800b13a:	4603      	mov	r3, r0
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d008      	beq.n	800b152 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	2240      	movs	r2, #64	; 0x40
 800b144:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	2201      	movs	r2, #1
 800b14a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800b14e:	2301      	movs	r3, #1
 800b150:	e016      	b.n	800b180 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	697a      	ldr	r2, [r7, #20]
 800b158:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b15a:	6878      	ldr	r0, [r7, #4]
 800b15c:	f000 fab8 	bl	800b6d0 <DMA_CalcBaseAndBitshift>
 800b160:	4603      	mov	r3, r0
 800b162:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b168:	223f      	movs	r2, #63	; 0x3f
 800b16a:	409a      	lsls	r2, r3
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	2200      	movs	r2, #0
 800b174:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	2201      	movs	r2, #1
 800b17a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800b17e:	2300      	movs	r3, #0
}
 800b180:	4618      	mov	r0, r3
 800b182:	3718      	adds	r7, #24
 800b184:	46bd      	mov	sp, r7
 800b186:	bd80      	pop	{r7, pc}
 800b188:	f010803f 	.word	0xf010803f

0800b18c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b086      	sub	sp, #24
 800b190:	af00      	add	r7, sp, #0
 800b192:	60f8      	str	r0, [r7, #12]
 800b194:	60b9      	str	r1, [r7, #8]
 800b196:	607a      	str	r2, [r7, #4]
 800b198:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b19a:	2300      	movs	r3, #0
 800b19c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1a2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b1aa:	2b01      	cmp	r3, #1
 800b1ac:	d101      	bne.n	800b1b2 <HAL_DMA_Start_IT+0x26>
 800b1ae:	2302      	movs	r3, #2
 800b1b0:	e040      	b.n	800b234 <HAL_DMA_Start_IT+0xa8>
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	2201      	movs	r2, #1
 800b1b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b1c0:	b2db      	uxtb	r3, r3
 800b1c2:	2b01      	cmp	r3, #1
 800b1c4:	d12f      	bne.n	800b226 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	2202      	movs	r2, #2
 800b1ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	2200      	movs	r2, #0
 800b1d2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800b1d4:	683b      	ldr	r3, [r7, #0]
 800b1d6:	687a      	ldr	r2, [r7, #4]
 800b1d8:	68b9      	ldr	r1, [r7, #8]
 800b1da:	68f8      	ldr	r0, [r7, #12]
 800b1dc:	f000 fa4a 	bl	800b674 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b1e4:	223f      	movs	r2, #63	; 0x3f
 800b1e6:	409a      	lsls	r2, r3
 800b1e8:	693b      	ldr	r3, [r7, #16]
 800b1ea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	681a      	ldr	r2, [r3, #0]
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	f042 0216 	orr.w	r2, r2, #22
 800b1fa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b200:	2b00      	cmp	r3, #0
 800b202:	d007      	beq.n	800b214 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	681a      	ldr	r2, [r3, #0]
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	f042 0208 	orr.w	r2, r2, #8
 800b212:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	681a      	ldr	r2, [r3, #0]
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	f042 0201 	orr.w	r2, r2, #1
 800b222:	601a      	str	r2, [r3, #0]
 800b224:	e005      	b.n	800b232 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	2200      	movs	r2, #0
 800b22a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800b22e:	2302      	movs	r3, #2
 800b230:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800b232:	7dfb      	ldrb	r3, [r7, #23]
}
 800b234:	4618      	mov	r0, r3
 800b236:	3718      	adds	r7, #24
 800b238:	46bd      	mov	sp, r7
 800b23a:	bd80      	pop	{r7, pc}

0800b23c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b084      	sub	sp, #16
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b248:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800b24a:	f7ff fdaf 	bl	800adac <HAL_GetTick>
 800b24e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b256:	b2db      	uxtb	r3, r3
 800b258:	2b02      	cmp	r3, #2
 800b25a:	d008      	beq.n	800b26e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	2280      	movs	r2, #128	; 0x80
 800b260:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	2200      	movs	r2, #0
 800b266:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800b26a:	2301      	movs	r3, #1
 800b26c:	e052      	b.n	800b314 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	681a      	ldr	r2, [r3, #0]
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	f022 0216 	bic.w	r2, r2, #22
 800b27c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	695a      	ldr	r2, [r3, #20]
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b28c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b292:	2b00      	cmp	r3, #0
 800b294:	d103      	bne.n	800b29e <HAL_DMA_Abort+0x62>
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d007      	beq.n	800b2ae <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	681a      	ldr	r2, [r3, #0]
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	f022 0208 	bic.w	r2, r2, #8
 800b2ac:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	681a      	ldr	r2, [r3, #0]
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	f022 0201 	bic.w	r2, r2, #1
 800b2bc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b2be:	e013      	b.n	800b2e8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800b2c0:	f7ff fd74 	bl	800adac <HAL_GetTick>
 800b2c4:	4602      	mov	r2, r0
 800b2c6:	68bb      	ldr	r3, [r7, #8]
 800b2c8:	1ad3      	subs	r3, r2, r3
 800b2ca:	2b05      	cmp	r3, #5
 800b2cc:	d90c      	bls.n	800b2e8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	2220      	movs	r2, #32
 800b2d2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	2203      	movs	r2, #3
 800b2d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	2200      	movs	r2, #0
 800b2e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800b2e4:	2303      	movs	r3, #3
 800b2e6:	e015      	b.n	800b314 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	f003 0301 	and.w	r3, r3, #1
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d1e4      	bne.n	800b2c0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b2fa:	223f      	movs	r2, #63	; 0x3f
 800b2fc:	409a      	lsls	r2, r3
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	2201      	movs	r2, #1
 800b306:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	2200      	movs	r2, #0
 800b30e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800b312:	2300      	movs	r3, #0
}
 800b314:	4618      	mov	r0, r3
 800b316:	3710      	adds	r7, #16
 800b318:	46bd      	mov	sp, r7
 800b31a:	bd80      	pop	{r7, pc}

0800b31c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800b31c:	b480      	push	{r7}
 800b31e:	b083      	sub	sp, #12
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b32a:	b2db      	uxtb	r3, r3
 800b32c:	2b02      	cmp	r3, #2
 800b32e:	d004      	beq.n	800b33a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	2280      	movs	r2, #128	; 0x80
 800b334:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800b336:	2301      	movs	r3, #1
 800b338:	e00c      	b.n	800b354 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	2205      	movs	r2, #5
 800b33e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	681a      	ldr	r2, [r3, #0]
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	f022 0201 	bic.w	r2, r2, #1
 800b350:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800b352:	2300      	movs	r3, #0
}
 800b354:	4618      	mov	r0, r3
 800b356:	370c      	adds	r7, #12
 800b358:	46bd      	mov	sp, r7
 800b35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35e:	4770      	bx	lr

0800b360 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800b360:	b580      	push	{r7, lr}
 800b362:	b086      	sub	sp, #24
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800b368:	2300      	movs	r3, #0
 800b36a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800b36c:	4b8e      	ldr	r3, [pc, #568]	; (800b5a8 <HAL_DMA_IRQHandler+0x248>)
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	4a8e      	ldr	r2, [pc, #568]	; (800b5ac <HAL_DMA_IRQHandler+0x24c>)
 800b372:	fba2 2303 	umull	r2, r3, r2, r3
 800b376:	0a9b      	lsrs	r3, r3, #10
 800b378:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b37e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800b380:	693b      	ldr	r3, [r7, #16]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b38a:	2208      	movs	r2, #8
 800b38c:	409a      	lsls	r2, r3
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	4013      	ands	r3, r2
 800b392:	2b00      	cmp	r3, #0
 800b394:	d01a      	beq.n	800b3cc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	f003 0304 	and.w	r3, r3, #4
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d013      	beq.n	800b3cc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	681a      	ldr	r2, [r3, #0]
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	f022 0204 	bic.w	r2, r2, #4
 800b3b2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b3b8:	2208      	movs	r2, #8
 800b3ba:	409a      	lsls	r2, r3
 800b3bc:	693b      	ldr	r3, [r7, #16]
 800b3be:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3c4:	f043 0201 	orr.w	r2, r3, #1
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b3d0:	2201      	movs	r2, #1
 800b3d2:	409a      	lsls	r2, r3
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	4013      	ands	r3, r2
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d012      	beq.n	800b402 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	695b      	ldr	r3, [r3, #20]
 800b3e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d00b      	beq.n	800b402 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b3ee:	2201      	movs	r2, #1
 800b3f0:	409a      	lsls	r2, r3
 800b3f2:	693b      	ldr	r3, [r7, #16]
 800b3f4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3fa:	f043 0202 	orr.w	r2, r3, #2
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b406:	2204      	movs	r2, #4
 800b408:	409a      	lsls	r2, r3
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	4013      	ands	r3, r2
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d012      	beq.n	800b438 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	f003 0302 	and.w	r3, r3, #2
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d00b      	beq.n	800b438 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b424:	2204      	movs	r2, #4
 800b426:	409a      	lsls	r2, r3
 800b428:	693b      	ldr	r3, [r7, #16]
 800b42a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b430:	f043 0204 	orr.w	r2, r3, #4
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b43c:	2210      	movs	r2, #16
 800b43e:	409a      	lsls	r2, r3
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	4013      	ands	r3, r2
 800b444:	2b00      	cmp	r3, #0
 800b446:	d043      	beq.n	800b4d0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	f003 0308 	and.w	r3, r3, #8
 800b452:	2b00      	cmp	r3, #0
 800b454:	d03c      	beq.n	800b4d0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b45a:	2210      	movs	r2, #16
 800b45c:	409a      	lsls	r2, r3
 800b45e:	693b      	ldr	r3, [r7, #16]
 800b460:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d018      	beq.n	800b4a2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d108      	bne.n	800b490 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b482:	2b00      	cmp	r3, #0
 800b484:	d024      	beq.n	800b4d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b48a:	6878      	ldr	r0, [r7, #4]
 800b48c:	4798      	blx	r3
 800b48e:	e01f      	b.n	800b4d0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b494:	2b00      	cmp	r3, #0
 800b496:	d01b      	beq.n	800b4d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b49c:	6878      	ldr	r0, [r7, #4]
 800b49e:	4798      	blx	r3
 800b4a0:	e016      	b.n	800b4d0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d107      	bne.n	800b4c0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	681a      	ldr	r2, [r3, #0]
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	f022 0208 	bic.w	r2, r2, #8
 800b4be:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d003      	beq.n	800b4d0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4cc:	6878      	ldr	r0, [r7, #4]
 800b4ce:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b4d4:	2220      	movs	r2, #32
 800b4d6:	409a      	lsls	r2, r3
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	4013      	ands	r3, r2
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	f000 808f 	beq.w	800b600 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	f003 0310 	and.w	r3, r3, #16
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	f000 8087 	beq.w	800b600 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b4f6:	2220      	movs	r2, #32
 800b4f8:	409a      	lsls	r2, r3
 800b4fa:	693b      	ldr	r3, [r7, #16]
 800b4fc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b504:	b2db      	uxtb	r3, r3
 800b506:	2b05      	cmp	r3, #5
 800b508:	d136      	bne.n	800b578 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	681a      	ldr	r2, [r3, #0]
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	f022 0216 	bic.w	r2, r2, #22
 800b518:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	695a      	ldr	r2, [r3, #20]
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b528:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d103      	bne.n	800b53a <HAL_DMA_IRQHandler+0x1da>
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b536:	2b00      	cmp	r3, #0
 800b538:	d007      	beq.n	800b54a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	681a      	ldr	r2, [r3, #0]
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	f022 0208 	bic.w	r2, r2, #8
 800b548:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b54e:	223f      	movs	r2, #63	; 0x3f
 800b550:	409a      	lsls	r2, r3
 800b552:	693b      	ldr	r3, [r7, #16]
 800b554:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	2201      	movs	r2, #1
 800b55a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	2200      	movs	r2, #0
 800b562:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d07e      	beq.n	800b66c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b572:	6878      	ldr	r0, [r7, #4]
 800b574:	4798      	blx	r3
        }
        return;
 800b576:	e079      	b.n	800b66c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b582:	2b00      	cmp	r3, #0
 800b584:	d01d      	beq.n	800b5c2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b590:	2b00      	cmp	r3, #0
 800b592:	d10d      	bne.n	800b5b0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d031      	beq.n	800b600 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5a0:	6878      	ldr	r0, [r7, #4]
 800b5a2:	4798      	blx	r3
 800b5a4:	e02c      	b.n	800b600 <HAL_DMA_IRQHandler+0x2a0>
 800b5a6:	bf00      	nop
 800b5a8:	10000050 	.word	0x10000050
 800b5ac:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d023      	beq.n	800b600 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5bc:	6878      	ldr	r0, [r7, #4]
 800b5be:	4798      	blx	r3
 800b5c0:	e01e      	b.n	800b600 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d10f      	bne.n	800b5f0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	681a      	ldr	r2, [r3, #0]
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	f022 0210 	bic.w	r2, r2, #16
 800b5de:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2201      	movs	r2, #1
 800b5e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d003      	beq.n	800b600 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5fc:	6878      	ldr	r0, [r7, #4]
 800b5fe:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b604:	2b00      	cmp	r3, #0
 800b606:	d032      	beq.n	800b66e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b60c:	f003 0301 	and.w	r3, r3, #1
 800b610:	2b00      	cmp	r3, #0
 800b612:	d022      	beq.n	800b65a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	2205      	movs	r2, #5
 800b618:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	681a      	ldr	r2, [r3, #0]
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	f022 0201 	bic.w	r2, r2, #1
 800b62a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800b62c:	68bb      	ldr	r3, [r7, #8]
 800b62e:	3301      	adds	r3, #1
 800b630:	60bb      	str	r3, [r7, #8]
 800b632:	697a      	ldr	r2, [r7, #20]
 800b634:	429a      	cmp	r2, r3
 800b636:	d307      	bcc.n	800b648 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	f003 0301 	and.w	r3, r3, #1
 800b642:	2b00      	cmp	r3, #0
 800b644:	d1f2      	bne.n	800b62c <HAL_DMA_IRQHandler+0x2cc>
 800b646:	e000      	b.n	800b64a <HAL_DMA_IRQHandler+0x2ea>
          break;
 800b648:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	2201      	movs	r2, #1
 800b64e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	2200      	movs	r2, #0
 800b656:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d005      	beq.n	800b66e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b666:	6878      	ldr	r0, [r7, #4]
 800b668:	4798      	blx	r3
 800b66a:	e000      	b.n	800b66e <HAL_DMA_IRQHandler+0x30e>
        return;
 800b66c:	bf00      	nop
    }
  }
}
 800b66e:	3718      	adds	r7, #24
 800b670:	46bd      	mov	sp, r7
 800b672:	bd80      	pop	{r7, pc}

0800b674 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b674:	b480      	push	{r7}
 800b676:	b085      	sub	sp, #20
 800b678:	af00      	add	r7, sp, #0
 800b67a:	60f8      	str	r0, [r7, #12]
 800b67c:	60b9      	str	r1, [r7, #8]
 800b67e:	607a      	str	r2, [r7, #4]
 800b680:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	681a      	ldr	r2, [r3, #0]
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b690:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	683a      	ldr	r2, [r7, #0]
 800b698:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	689b      	ldr	r3, [r3, #8]
 800b69e:	2b40      	cmp	r3, #64	; 0x40
 800b6a0:	d108      	bne.n	800b6b4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	687a      	ldr	r2, [r7, #4]
 800b6a8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	68ba      	ldr	r2, [r7, #8]
 800b6b0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800b6b2:	e007      	b.n	800b6c4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	68ba      	ldr	r2, [r7, #8]
 800b6ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	687a      	ldr	r2, [r7, #4]
 800b6c2:	60da      	str	r2, [r3, #12]
}
 800b6c4:	bf00      	nop
 800b6c6:	3714      	adds	r7, #20
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ce:	4770      	bx	lr

0800b6d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800b6d0:	b480      	push	{r7}
 800b6d2:	b085      	sub	sp, #20
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	b2db      	uxtb	r3, r3
 800b6de:	3b10      	subs	r3, #16
 800b6e0:	4a14      	ldr	r2, [pc, #80]	; (800b734 <DMA_CalcBaseAndBitshift+0x64>)
 800b6e2:	fba2 2303 	umull	r2, r3, r2, r3
 800b6e6:	091b      	lsrs	r3, r3, #4
 800b6e8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800b6ea:	4a13      	ldr	r2, [pc, #76]	; (800b738 <DMA_CalcBaseAndBitshift+0x68>)
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	4413      	add	r3, r2
 800b6f0:	781b      	ldrb	r3, [r3, #0]
 800b6f2:	461a      	mov	r2, r3
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	2b03      	cmp	r3, #3
 800b6fc:	d909      	bls.n	800b712 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800b706:	f023 0303 	bic.w	r3, r3, #3
 800b70a:	1d1a      	adds	r2, r3, #4
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	659a      	str	r2, [r3, #88]	; 0x58
 800b710:	e007      	b.n	800b722 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800b71a:	f023 0303 	bic.w	r3, r3, #3
 800b71e:	687a      	ldr	r2, [r7, #4]
 800b720:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800b726:	4618      	mov	r0, r3
 800b728:	3714      	adds	r7, #20
 800b72a:	46bd      	mov	sp, r7
 800b72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b730:	4770      	bx	lr
 800b732:	bf00      	nop
 800b734:	aaaaaaab 	.word	0xaaaaaaab
 800b738:	0802f7d8 	.word	0x0802f7d8

0800b73c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800b73c:	b480      	push	{r7}
 800b73e:	b085      	sub	sp, #20
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b744:	2300      	movs	r3, #0
 800b746:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b74c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	699b      	ldr	r3, [r3, #24]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d11f      	bne.n	800b796 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800b756:	68bb      	ldr	r3, [r7, #8]
 800b758:	2b03      	cmp	r3, #3
 800b75a:	d856      	bhi.n	800b80a <DMA_CheckFifoParam+0xce>
 800b75c:	a201      	add	r2, pc, #4	; (adr r2, 800b764 <DMA_CheckFifoParam+0x28>)
 800b75e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b762:	bf00      	nop
 800b764:	0800b775 	.word	0x0800b775
 800b768:	0800b787 	.word	0x0800b787
 800b76c:	0800b775 	.word	0x0800b775
 800b770:	0800b80b 	.word	0x0800b80b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b778:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d046      	beq.n	800b80e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800b780:	2301      	movs	r3, #1
 800b782:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b784:	e043      	b.n	800b80e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b78a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800b78e:	d140      	bne.n	800b812 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800b790:	2301      	movs	r3, #1
 800b792:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b794:	e03d      	b.n	800b812 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	699b      	ldr	r3, [r3, #24]
 800b79a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b79e:	d121      	bne.n	800b7e4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800b7a0:	68bb      	ldr	r3, [r7, #8]
 800b7a2:	2b03      	cmp	r3, #3
 800b7a4:	d837      	bhi.n	800b816 <DMA_CheckFifoParam+0xda>
 800b7a6:	a201      	add	r2, pc, #4	; (adr r2, 800b7ac <DMA_CheckFifoParam+0x70>)
 800b7a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7ac:	0800b7bd 	.word	0x0800b7bd
 800b7b0:	0800b7c3 	.word	0x0800b7c3
 800b7b4:	0800b7bd 	.word	0x0800b7bd
 800b7b8:	0800b7d5 	.word	0x0800b7d5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800b7bc:	2301      	movs	r3, #1
 800b7be:	73fb      	strb	r3, [r7, #15]
      break;
 800b7c0:	e030      	b.n	800b824 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d025      	beq.n	800b81a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800b7ce:	2301      	movs	r3, #1
 800b7d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b7d2:	e022      	b.n	800b81a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7d8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800b7dc:	d11f      	bne.n	800b81e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800b7de:	2301      	movs	r3, #1
 800b7e0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800b7e2:	e01c      	b.n	800b81e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800b7e4:	68bb      	ldr	r3, [r7, #8]
 800b7e6:	2b02      	cmp	r3, #2
 800b7e8:	d903      	bls.n	800b7f2 <DMA_CheckFifoParam+0xb6>
 800b7ea:	68bb      	ldr	r3, [r7, #8]
 800b7ec:	2b03      	cmp	r3, #3
 800b7ee:	d003      	beq.n	800b7f8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800b7f0:	e018      	b.n	800b824 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800b7f2:	2301      	movs	r3, #1
 800b7f4:	73fb      	strb	r3, [r7, #15]
      break;
 800b7f6:	e015      	b.n	800b824 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b800:	2b00      	cmp	r3, #0
 800b802:	d00e      	beq.n	800b822 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800b804:	2301      	movs	r3, #1
 800b806:	73fb      	strb	r3, [r7, #15]
      break;
 800b808:	e00b      	b.n	800b822 <DMA_CheckFifoParam+0xe6>
      break;
 800b80a:	bf00      	nop
 800b80c:	e00a      	b.n	800b824 <DMA_CheckFifoParam+0xe8>
      break;
 800b80e:	bf00      	nop
 800b810:	e008      	b.n	800b824 <DMA_CheckFifoParam+0xe8>
      break;
 800b812:	bf00      	nop
 800b814:	e006      	b.n	800b824 <DMA_CheckFifoParam+0xe8>
      break;
 800b816:	bf00      	nop
 800b818:	e004      	b.n	800b824 <DMA_CheckFifoParam+0xe8>
      break;
 800b81a:	bf00      	nop
 800b81c:	e002      	b.n	800b824 <DMA_CheckFifoParam+0xe8>
      break;   
 800b81e:	bf00      	nop
 800b820:	e000      	b.n	800b824 <DMA_CheckFifoParam+0xe8>
      break;
 800b822:	bf00      	nop
    }
  } 
  
  return status; 
 800b824:	7bfb      	ldrb	r3, [r7, #15]
}
 800b826:	4618      	mov	r0, r3
 800b828:	3714      	adds	r7, #20
 800b82a:	46bd      	mov	sp, r7
 800b82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b830:	4770      	bx	lr
 800b832:	bf00      	nop

0800b834 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800b834:	b580      	push	{r7, lr}
 800b836:	b088      	sub	sp, #32
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 800b83c:	2300      	movs	r3, #0
 800b83e:	61fb      	str	r3, [r7, #28]
 800b840:	2300      	movs	r3, #0
 800b842:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 800b844:	4ba1      	ldr	r3, [pc, #644]	; (800bacc <HAL_ETH_Init+0x298>)
 800b846:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 800b848:	2300      	movs	r3, #0
 800b84a:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 800b84c:	2300      	movs	r3, #0
 800b84e:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d101      	bne.n	800b85a <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800b856:	2301      	movs	r3, #1
 800b858:	e182      	b.n	800bb60 <HAL_ETH_Init+0x32c>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b860:	b2db      	uxtb	r3, r3
 800b862:	2b00      	cmp	r3, #0
 800b864:	d106      	bne.n	800b874 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	2200      	movs	r2, #0
 800b86a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800b86e:	6878      	ldr	r0, [r7, #4]
 800b870:	f005 fd48 	bl	8011304 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b874:	2300      	movs	r3, #0
 800b876:	60bb      	str	r3, [r7, #8]
 800b878:	4b95      	ldr	r3, [pc, #596]	; (800bad0 <HAL_ETH_Init+0x29c>)
 800b87a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b87c:	4a94      	ldr	r2, [pc, #592]	; (800bad0 <HAL_ETH_Init+0x29c>)
 800b87e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b882:	6453      	str	r3, [r2, #68]	; 0x44
 800b884:	4b92      	ldr	r3, [pc, #584]	; (800bad0 <HAL_ETH_Init+0x29c>)
 800b886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b888:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b88c:	60bb      	str	r3, [r7, #8]
 800b88e:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800b890:	4b90      	ldr	r3, [pc, #576]	; (800bad4 <HAL_ETH_Init+0x2a0>)
 800b892:	685b      	ldr	r3, [r3, #4]
 800b894:	4a8f      	ldr	r2, [pc, #572]	; (800bad4 <HAL_ETH_Init+0x2a0>)
 800b896:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800b89a:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800b89c:	4b8d      	ldr	r3, [pc, #564]	; (800bad4 <HAL_ETH_Init+0x2a0>)
 800b89e:	685a      	ldr	r2, [r3, #4]
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	6a1b      	ldr	r3, [r3, #32]
 800b8a4:	498b      	ldr	r1, [pc, #556]	; (800bad4 <HAL_ETH_Init+0x2a0>)
 800b8a6:	4313      	orrs	r3, r2
 800b8a8:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	687a      	ldr	r2, [r7, #4]
 800b8b6:	6812      	ldr	r2, [r2, #0]
 800b8b8:	f043 0301 	orr.w	r3, r3, #1
 800b8bc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b8c0:	6013      	str	r3, [r2, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800b8c2:	f7ff fa73 	bl	800adac <HAL_GetTick>
 800b8c6:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800b8c8:	e011      	b.n	800b8ee <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800b8ca:	f7ff fa6f 	bl	800adac <HAL_GetTick>
 800b8ce:	4602      	mov	r2, r0
 800b8d0:	697b      	ldr	r3, [r7, #20]
 800b8d2:	1ad3      	subs	r3, r2, r3
 800b8d4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800b8d8:	d909      	bls.n	800b8ee <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	2203      	movs	r2, #3
 800b8de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 800b8ea:	2303      	movs	r3, #3
 800b8ec:	e138      	b.n	800bb60 <HAL_ETH_Init+0x32c>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	f003 0301 	and.w	r3, r3, #1
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d1e4      	bne.n	800b8ca <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	691b      	ldr	r3, [r3, #16]
 800b906:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 800b908:	69fb      	ldr	r3, [r7, #28]
 800b90a:	f023 031c 	bic.w	r3, r3, #28
 800b90e:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800b910:	f002 fb92 	bl	800e038 <HAL_RCC_GetHCLKFreq>
 800b914:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800b916:	69bb      	ldr	r3, [r7, #24]
 800b918:	4a6f      	ldr	r2, [pc, #444]	; (800bad8 <HAL_ETH_Init+0x2a4>)
 800b91a:	4293      	cmp	r3, r2
 800b91c:	d908      	bls.n	800b930 <HAL_ETH_Init+0xfc>
 800b91e:	69bb      	ldr	r3, [r7, #24]
 800b920:	4a6e      	ldr	r2, [pc, #440]	; (800badc <HAL_ETH_Init+0x2a8>)
 800b922:	4293      	cmp	r3, r2
 800b924:	d804      	bhi.n	800b930 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800b926:	69fb      	ldr	r3, [r7, #28]
 800b928:	f043 0308 	orr.w	r3, r3, #8
 800b92c:	61fb      	str	r3, [r7, #28]
 800b92e:	e027      	b.n	800b980 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 800b930:	69bb      	ldr	r3, [r7, #24]
 800b932:	4a6a      	ldr	r2, [pc, #424]	; (800badc <HAL_ETH_Init+0x2a8>)
 800b934:	4293      	cmp	r3, r2
 800b936:	d908      	bls.n	800b94a <HAL_ETH_Init+0x116>
 800b938:	69bb      	ldr	r3, [r7, #24]
 800b93a:	4a64      	ldr	r2, [pc, #400]	; (800bacc <HAL_ETH_Init+0x298>)
 800b93c:	4293      	cmp	r3, r2
 800b93e:	d204      	bcs.n	800b94a <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800b940:	69fb      	ldr	r3, [r7, #28]
 800b942:	f043 030c 	orr.w	r3, r3, #12
 800b946:	61fb      	str	r3, [r7, #28]
 800b948:	e01a      	b.n	800b980 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 800b94a:	69bb      	ldr	r3, [r7, #24]
 800b94c:	4a5f      	ldr	r2, [pc, #380]	; (800bacc <HAL_ETH_Init+0x298>)
 800b94e:	4293      	cmp	r3, r2
 800b950:	d303      	bcc.n	800b95a <HAL_ETH_Init+0x126>
 800b952:	69bb      	ldr	r3, [r7, #24]
 800b954:	4a62      	ldr	r2, [pc, #392]	; (800bae0 <HAL_ETH_Init+0x2ac>)
 800b956:	4293      	cmp	r3, r2
 800b958:	d911      	bls.n	800b97e <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 800b95a:	69bb      	ldr	r3, [r7, #24]
 800b95c:	4a60      	ldr	r2, [pc, #384]	; (800bae0 <HAL_ETH_Init+0x2ac>)
 800b95e:	4293      	cmp	r3, r2
 800b960:	d908      	bls.n	800b974 <HAL_ETH_Init+0x140>
 800b962:	69bb      	ldr	r3, [r7, #24]
 800b964:	4a5f      	ldr	r2, [pc, #380]	; (800bae4 <HAL_ETH_Init+0x2b0>)
 800b966:	4293      	cmp	r3, r2
 800b968:	d804      	bhi.n	800b974 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800b96a:	69fb      	ldr	r3, [r7, #28]
 800b96c:	f043 0304 	orr.w	r3, r3, #4
 800b970:	61fb      	str	r3, [r7, #28]
 800b972:	e005      	b.n	800b980 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 800b974:	69fb      	ldr	r3, [r7, #28]
 800b976:	f043 0310 	orr.w	r3, r3, #16
 800b97a:	61fb      	str	r3, [r7, #28]
 800b97c:	e000      	b.n	800b980 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800b97e:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	69fa      	ldr	r2, [r7, #28]
 800b986:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800b988:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800b98c:	2100      	movs	r1, #0
 800b98e:	6878      	ldr	r0, [r7, #4]
 800b990:	f000 fc10 	bl	800c1b4 <HAL_ETH_WritePHYRegister>
 800b994:	4603      	mov	r3, r0
 800b996:	2b00      	cmp	r3, #0
 800b998:	d00b      	beq.n	800b9b2 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800b99a:	2301      	movs	r3, #1
 800b99c:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800b99e:	6939      	ldr	r1, [r7, #16]
 800b9a0:	6878      	ldr	r0, [r7, #4]
 800b9a2:	f000 fdc5 	bl	800c530 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	2201      	movs	r2, #1
 800b9aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800b9ae:	2301      	movs	r3, #1
 800b9b0:	e0d6      	b.n	800bb60 <HAL_ETH_Init+0x32c>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800b9b2:	20ff      	movs	r0, #255	; 0xff
 800b9b4:	f7ff fa06 	bl	800adc4 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	685b      	ldr	r3, [r3, #4]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	f000 80a4 	beq.w	800bb0a <HAL_ETH_Init+0x2d6>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800b9c2:	f7ff f9f3 	bl	800adac <HAL_GetTick>
 800b9c6:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800b9c8:	f107 030c 	add.w	r3, r7, #12
 800b9cc:	461a      	mov	r2, r3
 800b9ce:	2101      	movs	r1, #1
 800b9d0:	6878      	ldr	r0, [r7, #4]
 800b9d2:	f000 fb87 	bl	800c0e4 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800b9d6:	f7ff f9e9 	bl	800adac <HAL_GetTick>
 800b9da:	4602      	mov	r2, r0
 800b9dc:	697b      	ldr	r3, [r7, #20]
 800b9de:	1ad3      	subs	r3, r2, r3
 800b9e0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b9e4:	4293      	cmp	r3, r2
 800b9e6:	d90f      	bls.n	800ba08 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800b9e8:	2301      	movs	r3, #1
 800b9ea:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800b9ec:	6939      	ldr	r1, [r7, #16]
 800b9ee:	6878      	ldr	r0, [r7, #4]
 800b9f0:	f000 fd9e 	bl	800c530 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	2201      	movs	r2, #1
 800b9f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	2200      	movs	r2, #0
 800ba00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800ba04:	2303      	movs	r3, #3
 800ba06:	e0ab      	b.n	800bb60 <HAL_ETH_Init+0x32c>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	f003 0304 	and.w	r3, r3, #4
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d0da      	beq.n	800b9c8 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800ba12:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ba16:	2100      	movs	r1, #0
 800ba18:	6878      	ldr	r0, [r7, #4]
 800ba1a:	f000 fbcb 	bl	800c1b4 <HAL_ETH_WritePHYRegister>
 800ba1e:	4603      	mov	r3, r0
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d00b      	beq.n	800ba3c <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800ba24:	2301      	movs	r3, #1
 800ba26:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800ba28:	6939      	ldr	r1, [r7, #16]
 800ba2a:	6878      	ldr	r0, [r7, #4]
 800ba2c:	f000 fd80 	bl	800c530 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	2201      	movs	r2, #1
 800ba34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800ba38:	2301      	movs	r3, #1
 800ba3a:	e091      	b.n	800bb60 <HAL_ETH_Init+0x32c>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 800ba3c:	f7ff f9b6 	bl	800adac <HAL_GetTick>
 800ba40:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800ba42:	f107 030c 	add.w	r3, r7, #12
 800ba46:	461a      	mov	r2, r3
 800ba48:	2101      	movs	r1, #1
 800ba4a:	6878      	ldr	r0, [r7, #4]
 800ba4c:	f000 fb4a 	bl	800c0e4 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 800ba50:	f7ff f9ac 	bl	800adac <HAL_GetTick>
 800ba54:	4602      	mov	r2, r0
 800ba56:	697b      	ldr	r3, [r7, #20]
 800ba58:	1ad3      	subs	r3, r2, r3
 800ba5a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba5e:	4293      	cmp	r3, r2
 800ba60:	d90f      	bls.n	800ba82 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800ba62:	2301      	movs	r3, #1
 800ba64:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800ba66:	6939      	ldr	r1, [r7, #16]
 800ba68:	6878      	ldr	r0, [r7, #4]
 800ba6a:	f000 fd61 	bl	800c530 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	2201      	movs	r2, #1
 800ba72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	2200      	movs	r2, #0
 800ba7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800ba7e:	2303      	movs	r3, #3
 800ba80:	e06e      	b.n	800bb60 <HAL_ETH_Init+0x32c>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	f003 0320 	and.w	r3, r3, #32
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d0da      	beq.n	800ba42 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 800ba8c:	f107 030c 	add.w	r3, r7, #12
 800ba90:	461a      	mov	r2, r3
 800ba92:	2110      	movs	r1, #16
 800ba94:	6878      	ldr	r0, [r7, #4]
 800ba96:	f000 fb25 	bl	800c0e4 <HAL_ETH_ReadPHYRegister>
 800ba9a:	4603      	mov	r3, r0
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d00b      	beq.n	800bab8 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800baa0:	2301      	movs	r3, #1
 800baa2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800baa4:	6939      	ldr	r1, [r7, #16]
 800baa6:	6878      	ldr	r0, [r7, #4]
 800baa8:	f000 fd42 	bl	800c530 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	2201      	movs	r2, #1
 800bab0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800bab4:	2301      	movs	r3, #1
 800bab6:	e053      	b.n	800bb60 <HAL_ETH_Init+0x32c>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	f003 0304 	and.w	r3, r3, #4
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d012      	beq.n	800bae8 <HAL_ETH_Init+0x2b4>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bac8:	60da      	str	r2, [r3, #12]
 800baca:	e010      	b.n	800baee <HAL_ETH_Init+0x2ba>
 800bacc:	03938700 	.word	0x03938700
 800bad0:	40023800 	.word	0x40023800
 800bad4:	40013800 	.word	0x40013800
 800bad8:	01312cff 	.word	0x01312cff
 800badc:	02160ebf 	.word	0x02160ebf
 800bae0:	05f5e0ff 	.word	0x05f5e0ff
 800bae4:	08f0d17f 	.word	0x08f0d17f
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	2200      	movs	r2, #0
 800baec:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	f003 0302 	and.w	r3, r3, #2
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d003      	beq.n	800bb00 <HAL_ETH_Init+0x2cc>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	2200      	movs	r2, #0
 800bafc:	609a      	str	r2, [r3, #8]
 800bafe:	e026      	b.n	800bb4e <HAL_ETH_Init+0x31a>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800bb06:	609a      	str	r2, [r3, #8]
 800bb08:	e021      	b.n	800bb4e <HAL_ETH_Init+0x31a>
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	68db      	ldr	r3, [r3, #12]
 800bb0e:	08db      	lsrs	r3, r3, #3
 800bb10:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	689b      	ldr	r3, [r3, #8]
 800bb16:	085b      	lsrs	r3, r3, #1
 800bb18:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 800bb1a:	4313      	orrs	r3, r2
 800bb1c:	b29b      	uxth	r3, r3
 800bb1e:	461a      	mov	r2, r3
 800bb20:	2100      	movs	r1, #0
 800bb22:	6878      	ldr	r0, [r7, #4]
 800bb24:	f000 fb46 	bl	800c1b4 <HAL_ETH_WritePHYRegister>
 800bb28:	4603      	mov	r3, r0
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d00b      	beq.n	800bb46 <HAL_ETH_Init+0x312>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800bb2e:	2301      	movs	r3, #1
 800bb30:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800bb32:	6939      	ldr	r1, [r7, #16]
 800bb34:	6878      	ldr	r0, [r7, #4]
 800bb36:	f000 fcfb 	bl	800c530 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	2201      	movs	r2, #1
 800bb3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 800bb42:	2301      	movs	r3, #1
 800bb44:	e00c      	b.n	800bb60 <HAL_ETH_Init+0x32c>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 800bb46:	f640 70ff 	movw	r0, #4095	; 0xfff
 800bb4a:	f7ff f93b 	bl	800adc4 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 800bb4e:	6939      	ldr	r1, [r7, #16]
 800bb50:	6878      	ldr	r0, [r7, #4]
 800bb52:	f000 fced 	bl	800c530 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	2201      	movs	r2, #1
 800bb5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800bb5e:	2300      	movs	r3, #0
}
 800bb60:	4618      	mov	r0, r3
 800bb62:	3720      	adds	r7, #32
 800bb64:	46bd      	mov	sp, r7
 800bb66:	bd80      	pop	{r7, pc}

0800bb68 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 800bb68:	b480      	push	{r7}
 800bb6a:	b087      	sub	sp, #28
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	60f8      	str	r0, [r7, #12]
 800bb70:	60b9      	str	r1, [r7, #8]
 800bb72:	607a      	str	r2, [r7, #4]
 800bb74:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 800bb76:	2300      	movs	r3, #0
 800bb78:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bb80:	2b01      	cmp	r3, #1
 800bb82:	d101      	bne.n	800bb88 <HAL_ETH_DMATxDescListInit+0x20>
 800bb84:	2302      	movs	r3, #2
 800bb86:	e051      	b.n	800bc2c <HAL_ETH_DMATxDescListInit+0xc4>
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	2201      	movs	r2, #1
 800bb8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	2202      	movs	r2, #2
 800bb94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	68ba      	ldr	r2, [r7, #8]
 800bb9c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 800bb9e:	2300      	movs	r3, #0
 800bba0:	617b      	str	r3, [r7, #20]
 800bba2:	e030      	b.n	800bc06 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 800bba4:	697b      	ldr	r3, [r7, #20]
 800bba6:	015b      	lsls	r3, r3, #5
 800bba8:	68ba      	ldr	r2, [r7, #8]
 800bbaa:	4413      	add	r3, r2
 800bbac:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800bbae:	693b      	ldr	r3, [r7, #16]
 800bbb0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800bbb4:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800bbb6:	697b      	ldr	r3, [r7, #20]
 800bbb8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800bbbc:	fb02 f303 	mul.w	r3, r2, r3
 800bbc0:	687a      	ldr	r2, [r7, #4]
 800bbc2:	4413      	add	r3, r2
 800bbc4:	461a      	mov	r2, r3
 800bbc6:	693b      	ldr	r3, [r7, #16]
 800bbc8:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	69db      	ldr	r3, [r3, #28]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d105      	bne.n	800bbde <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800bbd2:	693b      	ldr	r3, [r7, #16]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800bbda:	693b      	ldr	r3, [r7, #16]
 800bbdc:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 800bbde:	683b      	ldr	r3, [r7, #0]
 800bbe0:	3b01      	subs	r3, #1
 800bbe2:	697a      	ldr	r2, [r7, #20]
 800bbe4:	429a      	cmp	r2, r3
 800bbe6:	d208      	bcs.n	800bbfa <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 800bbe8:	697b      	ldr	r3, [r7, #20]
 800bbea:	3301      	adds	r3, #1
 800bbec:	015b      	lsls	r3, r3, #5
 800bbee:	68ba      	ldr	r2, [r7, #8]
 800bbf0:	4413      	add	r3, r2
 800bbf2:	461a      	mov	r2, r3
 800bbf4:	693b      	ldr	r3, [r7, #16]
 800bbf6:	60da      	str	r2, [r3, #12]
 800bbf8:	e002      	b.n	800bc00 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 800bbfa:	68ba      	ldr	r2, [r7, #8]
 800bbfc:	693b      	ldr	r3, [r7, #16]
 800bbfe:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 800bc00:	697b      	ldr	r3, [r7, #20]
 800bc02:	3301      	adds	r3, #1
 800bc04:	617b      	str	r3, [r7, #20]
 800bc06:	697a      	ldr	r2, [r7, #20]
 800bc08:	683b      	ldr	r3, [r7, #0]
 800bc0a:	429a      	cmp	r2, r3
 800bc0c:	d3ca      	bcc.n	800bba4 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	681a      	ldr	r2, [r3, #0]
 800bc12:	68bb      	ldr	r3, [r7, #8]
 800bc14:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800bc18:	6113      	str	r3, [r2, #16]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	2201      	movs	r2, #1
 800bc1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	2200      	movs	r2, #0
 800bc26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800bc2a:	2300      	movs	r3, #0
}
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	371c      	adds	r7, #28
 800bc30:	46bd      	mov	sp, r7
 800bc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc36:	4770      	bx	lr

0800bc38 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 800bc38:	b480      	push	{r7}
 800bc3a:	b087      	sub	sp, #28
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	60f8      	str	r0, [r7, #12]
 800bc40:	60b9      	str	r1, [r7, #8]
 800bc42:	607a      	str	r2, [r7, #4]
 800bc44:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 800bc46:	2300      	movs	r3, #0
 800bc48:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bc50:	2b01      	cmp	r3, #1
 800bc52:	d101      	bne.n	800bc58 <HAL_ETH_DMARxDescListInit+0x20>
 800bc54:	2302      	movs	r3, #2
 800bc56:	e055      	b.n	800bd04 <HAL_ETH_DMARxDescListInit+0xcc>
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	2201      	movs	r2, #1
 800bc5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	2202      	movs	r2, #2
 800bc64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	68ba      	ldr	r2, [r7, #8]
 800bc6c:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 800bc6e:	2300      	movs	r3, #0
 800bc70:	617b      	str	r3, [r7, #20]
 800bc72:	e034      	b.n	800bcde <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 800bc74:	697b      	ldr	r3, [r7, #20]
 800bc76:	015b      	lsls	r3, r3, #5
 800bc78:	68ba      	ldr	r2, [r7, #8]
 800bc7a:	4413      	add	r3, r2
 800bc7c:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 800bc7e:	693b      	ldr	r3, [r7, #16]
 800bc80:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bc84:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 800bc86:	693b      	ldr	r3, [r7, #16]
 800bc88:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800bc8c:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 800bc8e:	697b      	ldr	r3, [r7, #20]
 800bc90:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800bc94:	fb02 f303 	mul.w	r3, r2, r3
 800bc98:	687a      	ldr	r2, [r7, #4]
 800bc9a:	4413      	add	r3, r2
 800bc9c:	461a      	mov	r2, r3
 800bc9e:	693b      	ldr	r3, [r7, #16]
 800bca0:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	699b      	ldr	r3, [r3, #24]
 800bca6:	2b01      	cmp	r3, #1
 800bca8:	d105      	bne.n	800bcb6 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 800bcaa:	693b      	ldr	r3, [r7, #16]
 800bcac:	685b      	ldr	r3, [r3, #4]
 800bcae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800bcb2:	693b      	ldr	r3, [r7, #16]
 800bcb4:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 800bcb6:	683b      	ldr	r3, [r7, #0]
 800bcb8:	3b01      	subs	r3, #1
 800bcba:	697a      	ldr	r2, [r7, #20]
 800bcbc:	429a      	cmp	r2, r3
 800bcbe:	d208      	bcs.n	800bcd2 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 800bcc0:	697b      	ldr	r3, [r7, #20]
 800bcc2:	3301      	adds	r3, #1
 800bcc4:	015b      	lsls	r3, r3, #5
 800bcc6:	68ba      	ldr	r2, [r7, #8]
 800bcc8:	4413      	add	r3, r2
 800bcca:	461a      	mov	r2, r3
 800bccc:	693b      	ldr	r3, [r7, #16]
 800bcce:	60da      	str	r2, [r3, #12]
 800bcd0:	e002      	b.n	800bcd8 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 800bcd2:	68ba      	ldr	r2, [r7, #8]
 800bcd4:	693b      	ldr	r3, [r7, #16]
 800bcd6:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 800bcd8:	697b      	ldr	r3, [r7, #20]
 800bcda:	3301      	adds	r3, #1
 800bcdc:	617b      	str	r3, [r7, #20]
 800bcde:	697a      	ldr	r2, [r7, #20]
 800bce0:	683b      	ldr	r3, [r7, #0]
 800bce2:	429a      	cmp	r2, r3
 800bce4:	d3c6      	bcc.n	800bc74 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	681a      	ldr	r2, [r3, #0]
 800bcea:	68bb      	ldr	r3, [r7, #8]
 800bcec:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800bcf0:	60d3      	str	r3, [r2, #12]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	2201      	movs	r2, #1
 800bcf6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	2200      	movs	r2, #0
 800bcfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800bd02:	2300      	movs	r3, #0
}
 800bd04:	4618      	mov	r0, r3
 800bd06:	371c      	adds	r7, #28
 800bd08:	46bd      	mov	sp, r7
 800bd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0e:	4770      	bx	lr

0800bd10 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 800bd10:	b480      	push	{r7}
 800bd12:	b087      	sub	sp, #28
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
 800bd18:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	617b      	str	r3, [r7, #20]
 800bd1e:	2300      	movs	r3, #0
 800bd20:	60fb      	str	r3, [r7, #12]
 800bd22:	2300      	movs	r3, #0
 800bd24:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bd2c:	2b01      	cmp	r3, #1
 800bd2e:	d101      	bne.n	800bd34 <HAL_ETH_TransmitFrame+0x24>
 800bd30:	2302      	movs	r3, #2
 800bd32:	e0cc      	b.n	800bece <HAL_ETH_TransmitFrame+0x1be>
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	2201      	movs	r2, #1
 800bd38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	2202      	movs	r2, #2
 800bd40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 800bd44:	683b      	ldr	r3, [r7, #0]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d109      	bne.n	800bd5e <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	2201      	movs	r2, #1
 800bd4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	2200      	movs	r2, #0
 800bd56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 800bd5a:	2301      	movs	r3, #1
 800bd5c:	e0b7      	b.n	800bece <HAL_ETH_TransmitFrame+0x1be>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	da09      	bge.n	800bd7c <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	2212      	movs	r2, #18
 800bd6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	2200      	movs	r2, #0
 800bd74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 800bd78:	2301      	movs	r3, #1
 800bd7a:	e0a8      	b.n	800bece <HAL_ETH_TransmitFrame+0x1be>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 800bd7c:	683b      	ldr	r3, [r7, #0]
 800bd7e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800bd82:	4293      	cmp	r3, r2
 800bd84:	d915      	bls.n	800bdb2 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800bd86:	683b      	ldr	r3, [r7, #0]
 800bd88:	4a54      	ldr	r2, [pc, #336]	; (800bedc <HAL_ETH_TransmitFrame+0x1cc>)
 800bd8a:	fba2 2303 	umull	r2, r3, r2, r3
 800bd8e:	0a9b      	lsrs	r3, r3, #10
 800bd90:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 800bd92:	683a      	ldr	r2, [r7, #0]
 800bd94:	4b51      	ldr	r3, [pc, #324]	; (800bedc <HAL_ETH_TransmitFrame+0x1cc>)
 800bd96:	fba3 1302 	umull	r1, r3, r3, r2
 800bd9a:	0a9b      	lsrs	r3, r3, #10
 800bd9c:	f240 51f4 	movw	r1, #1524	; 0x5f4
 800bda0:	fb01 f303 	mul.w	r3, r1, r3
 800bda4:	1ad3      	subs	r3, r2, r3
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d005      	beq.n	800bdb6 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800bdaa:	697b      	ldr	r3, [r7, #20]
 800bdac:	3301      	adds	r3, #1
 800bdae:	617b      	str	r3, [r7, #20]
 800bdb0:	e001      	b.n	800bdb6 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 800bdb2:	2301      	movs	r3, #1
 800bdb4:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 800bdb6:	697b      	ldr	r3, [r7, #20]
 800bdb8:	2b01      	cmp	r3, #1
 800bdba:	d11c      	bne.n	800bdf6 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdc0:	681a      	ldr	r2, [r3, #0]
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdc6:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800bdca:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdd0:	683a      	ldr	r2, [r7, #0]
 800bdd2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800bdd6:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bddc:	681a      	ldr	r2, [r3, #0]
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bde2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800bde6:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdec:	68db      	ldr	r3, [r3, #12]
 800bdee:	461a      	mov	r2, r3
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	62da      	str	r2, [r3, #44]	; 0x2c
 800bdf4:	e04b      	b.n	800be8e <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	613b      	str	r3, [r7, #16]
 800bdfa:	e044      	b.n	800be86 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be00:	681a      	ldr	r2, [r3, #0]
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be06:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800be0a:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 800be0c:	693b      	ldr	r3, [r7, #16]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d107      	bne.n	800be22 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be16:	681a      	ldr	r2, [r3, #0]
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be1c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800be20:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be26:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800be2a:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 800be2c:	697b      	ldr	r3, [r7, #20]
 800be2e:	3b01      	subs	r3, #1
 800be30:	693a      	ldr	r2, [r7, #16]
 800be32:	429a      	cmp	r2, r3
 800be34:	d116      	bne.n	800be64 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be3a:	681a      	ldr	r2, [r3, #0]
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be40:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800be44:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 800be46:	697b      	ldr	r3, [r7, #20]
 800be48:	4a25      	ldr	r2, [pc, #148]	; (800bee0 <HAL_ETH_TransmitFrame+0x1d0>)
 800be4a:	fb03 f202 	mul.w	r2, r3, r2
 800be4e:	683b      	ldr	r3, [r7, #0]
 800be50:	4413      	add	r3, r2
 800be52:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800be56:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be5c:	68fa      	ldr	r2, [r7, #12]
 800be5e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800be62:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be68:	681a      	ldr	r2, [r3, #0]
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be6e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800be72:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be78:	68db      	ldr	r3, [r3, #12]
 800be7a:	461a      	mov	r2, r3
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 800be80:	693b      	ldr	r3, [r7, #16]
 800be82:	3301      	adds	r3, #1
 800be84:	613b      	str	r3, [r7, #16]
 800be86:	693a      	ldr	r2, [r7, #16]
 800be88:	697b      	ldr	r3, [r7, #20]
 800be8a:	429a      	cmp	r2, r3
 800be8c:	d3b6      	bcc.n	800bdfc <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be96:	695b      	ldr	r3, [r3, #20]
 800be98:	f003 0304 	and.w	r3, r3, #4
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d00d      	beq.n	800bebc <HAL_ETH_TransmitFrame+0x1ac>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bea8:	461a      	mov	r2, r3
 800beaa:	2304      	movs	r3, #4
 800beac:	6153      	str	r3, [r2, #20]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800beb6:	461a      	mov	r2, r3
 800beb8:	2300      	movs	r3, #0
 800beba:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	2201      	movs	r2, #1
 800bec0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	2200      	movs	r2, #0
 800bec8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800becc:	2300      	movs	r3, #0
}
 800bece:	4618      	mov	r0, r3
 800bed0:	371c      	adds	r7, #28
 800bed2:	46bd      	mov	sp, r7
 800bed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed8:	4770      	bx	lr
 800beda:	bf00      	nop
 800bedc:	ac02b00b 	.word	0xac02b00b
 800bee0:	fffffa0c 	.word	0xfffffa0c

0800bee4 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 800bee4:	b480      	push	{r7}
 800bee6:	b085      	sub	sp, #20
 800bee8:	af00      	add	r7, sp, #0
 800beea:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 800beec:	2300      	movs	r3, #0
 800beee:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bef6:	2b01      	cmp	r3, #1
 800bef8:	d101      	bne.n	800befe <HAL_ETH_GetReceivedFrame_IT+0x1a>
 800befa:	2302      	movs	r3, #2
 800befc:	e074      	b.n	800bfe8 <HAL_ETH_GetReceivedFrame_IT+0x104>
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	2201      	movs	r2, #1
 800bf02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	2202      	movs	r2, #2
 800bf0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800bf0e:	e05a      	b.n	800bfc6 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	3301      	adds	r3, #1
 800bf14:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bf20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf24:	d10d      	bne.n	800bf42 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	2201      	movs	r2, #1
 800bf32:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf38:	68db      	ldr	r3, [r3, #12]
 800bf3a:	461a      	mov	r2, r3
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	629a      	str	r2, [r3, #40]	; 0x28
 800bf40:	e041      	b.n	800bfc6 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d10b      	bne.n	800bf68 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf54:	1c5a      	adds	r2, r3, #1
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf5e:	68db      	ldr	r3, [r3, #12]
 800bf60:	461a      	mov	r2, r3
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	629a      	str	r2, [r3, #40]	; 0x28
 800bf66:	e02e      	b.n	800bfc6 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf74:	1c5a      	adds	r2, r3, #1
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf7e:	2b01      	cmp	r3, #1
 800bf80:	d103      	bne.n	800bf8a <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	0c1b      	lsrs	r3, r3, #16
 800bf92:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800bf96:	1f1a      	subs	r2, r3, #4
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfa0:	689a      	ldr	r2, [r3, #8]
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfaa:	68db      	ldr	r3, [r3, #12]
 800bfac:	461a      	mov	r2, r3
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	2201      	movs	r2, #1
 800bfb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	2200      	movs	r2, #0
 800bfbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	e010      	b.n	800bfe8 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	db02      	blt.n	800bfd6 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	2b03      	cmp	r3, #3
 800bfd4:	d99c      	bls.n	800bf10 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	2201      	movs	r2, #1
 800bfda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	2200      	movs	r2, #0
 800bfe2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 800bfe6:	2301      	movs	r3, #1
}
 800bfe8:	4618      	mov	r0, r3
 800bfea:	3714      	adds	r7, #20
 800bfec:	46bd      	mov	sp, r7
 800bfee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff2:	4770      	bx	lr

0800bff4 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 800bff4:	b580      	push	{r7, lr}
 800bff6:	b082      	sub	sp, #8
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c004:	695b      	ldr	r3, [r3, #20]
 800c006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c00a:	2b40      	cmp	r3, #64	; 0x40
 800c00c:	d112      	bne.n	800c034 <HAL_ETH_IRQHandler+0x40>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 800c00e:	6878      	ldr	r0, [r7, #4]
 800c010:	f005 fa26 	bl	8011460 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c01c:	461a      	mov	r2, r3
 800c01e:	2340      	movs	r3, #64	; 0x40
 800c020:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	2201      	movs	r2, #1
 800c026:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	2200      	movs	r2, #0
 800c02e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c032:	e01a      	b.n	800c06a <HAL_ETH_IRQHandler+0x76>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c03c:	695b      	ldr	r3, [r3, #20]
 800c03e:	f003 0301 	and.w	r3, r3, #1
 800c042:	2b01      	cmp	r3, #1
 800c044:	d111      	bne.n	800c06a <HAL_ETH_IRQHandler+0x76>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 800c046:	6878      	ldr	r0, [r7, #4]
 800c048:	f000 f838 	bl	800c0bc <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c054:	461a      	mov	r2, r3
 800c056:	2301      	movs	r3, #1
 800c058:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	2201      	movs	r2, #1
 800c05e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	2200      	movs	r2, #0
 800c066:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c072:	461a      	mov	r2, r3
 800c074:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800c078:	6153      	str	r3, [r2, #20]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c082:	695b      	ldr	r3, [r3, #20]
 800c084:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c088:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c08c:	d112      	bne.n	800c0b4 <HAL_ETH_IRQHandler+0xc0>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 800c08e:	6878      	ldr	r0, [r7, #4]
 800c090:	f000 f81e 	bl	800c0d0 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c09c:	461a      	mov	r2, r3
 800c09e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c0a2:	6153      	str	r3, [r2, #20]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	2201      	movs	r2, #1
 800c0a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	2200      	movs	r2, #0
 800c0b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 800c0b4:	bf00      	nop
 800c0b6:	3708      	adds	r7, #8
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	bd80      	pop	{r7, pc}

0800c0bc <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 800c0bc:	b480      	push	{r7}
 800c0be:	b083      	sub	sp, #12
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 800c0c4:	bf00      	nop
 800c0c6:	370c      	adds	r7, #12
 800c0c8:	46bd      	mov	sp, r7
 800c0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ce:	4770      	bx	lr

0800c0d0 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 800c0d0:	b480      	push	{r7}
 800c0d2:	b083      	sub	sp, #12
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 800c0d8:	bf00      	nop
 800c0da:	370c      	adds	r7, #12
 800c0dc:	46bd      	mov	sp, r7
 800c0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e2:	4770      	bx	lr

0800c0e4 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b086      	sub	sp, #24
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	60f8      	str	r0, [r7, #12]
 800c0ec:	460b      	mov	r3, r1
 800c0ee:	607a      	str	r2, [r7, #4]
 800c0f0:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800c0f6:	2300      	movs	r3, #0
 800c0f8:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c100:	b2db      	uxtb	r3, r3
 800c102:	2b82      	cmp	r3, #130	; 0x82
 800c104:	d101      	bne.n	800c10a <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 800c106:	2302      	movs	r3, #2
 800c108:	e050      	b.n	800c1ac <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	2282      	movs	r2, #130	; 0x82
 800c10e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	691b      	ldr	r3, [r3, #16]
 800c118:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800c11a:	697b      	ldr	r3, [r7, #20]
 800c11c:	f003 031c 	and.w	r3, r3, #28
 800c120:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	8a1b      	ldrh	r3, [r3, #16]
 800c126:	02db      	lsls	r3, r3, #11
 800c128:	b29b      	uxth	r3, r3
 800c12a:	697a      	ldr	r2, [r7, #20]
 800c12c:	4313      	orrs	r3, r2
 800c12e:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800c130:	897b      	ldrh	r3, [r7, #10]
 800c132:	019b      	lsls	r3, r3, #6
 800c134:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800c138:	697a      	ldr	r2, [r7, #20]
 800c13a:	4313      	orrs	r3, r2
 800c13c:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800c13e:	697b      	ldr	r3, [r7, #20]
 800c140:	f023 0302 	bic.w	r3, r3, #2
 800c144:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 800c146:	697b      	ldr	r3, [r7, #20]
 800c148:	f043 0301 	orr.w	r3, r3, #1
 800c14c:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	697a      	ldr	r2, [r7, #20]
 800c154:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800c156:	f7fe fe29 	bl	800adac <HAL_GetTick>
 800c15a:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800c15c:	e015      	b.n	800c18a <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800c15e:	f7fe fe25 	bl	800adac <HAL_GetTick>
 800c162:	4602      	mov	r2, r0
 800c164:	693b      	ldr	r3, [r7, #16]
 800c166:	1ad3      	subs	r3, r2, r3
 800c168:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c16c:	d309      	bcc.n	800c182 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	2201      	movs	r2, #1
 800c172:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	2200      	movs	r2, #0
 800c17a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800c17e:	2303      	movs	r3, #3
 800c180:	e014      	b.n	800c1ac <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	691b      	ldr	r3, [r3, #16]
 800c188:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800c18a:	697b      	ldr	r3, [r7, #20]
 800c18c:	f003 0301 	and.w	r3, r3, #1
 800c190:	2b00      	cmp	r3, #0
 800c192:	d1e4      	bne.n	800c15e <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	695b      	ldr	r3, [r3, #20]
 800c19a:	b29b      	uxth	r3, r3
 800c19c:	461a      	mov	r2, r3
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	2201      	movs	r2, #1
 800c1a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800c1aa:	2300      	movs	r3, #0
}
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	3718      	adds	r7, #24
 800c1b0:	46bd      	mov	sp, r7
 800c1b2:	bd80      	pop	{r7, pc}

0800c1b4 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b086      	sub	sp, #24
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	60f8      	str	r0, [r7, #12]
 800c1bc:	460b      	mov	r3, r1
 800c1be:	607a      	str	r2, [r7, #4]
 800c1c0:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800c1c6:	2300      	movs	r3, #0
 800c1c8:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c1d0:	b2db      	uxtb	r3, r3
 800c1d2:	2b42      	cmp	r3, #66	; 0x42
 800c1d4:	d101      	bne.n	800c1da <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 800c1d6:	2302      	movs	r3, #2
 800c1d8:	e04e      	b.n	800c278 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	2242      	movs	r2, #66	; 0x42
 800c1de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	691b      	ldr	r3, [r3, #16]
 800c1e8:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800c1ea:	697b      	ldr	r3, [r7, #20]
 800c1ec:	f003 031c 	and.w	r3, r3, #28
 800c1f0:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	8a1b      	ldrh	r3, [r3, #16]
 800c1f6:	02db      	lsls	r3, r3, #11
 800c1f8:	b29b      	uxth	r3, r3
 800c1fa:	697a      	ldr	r2, [r7, #20]
 800c1fc:	4313      	orrs	r3, r2
 800c1fe:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800c200:	897b      	ldrh	r3, [r7, #10]
 800c202:	019b      	lsls	r3, r3, #6
 800c204:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800c208:	697a      	ldr	r2, [r7, #20]
 800c20a:	4313      	orrs	r3, r2
 800c20c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800c20e:	697b      	ldr	r3, [r7, #20]
 800c210:	f043 0302 	orr.w	r3, r3, #2
 800c214:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800c216:	697b      	ldr	r3, [r7, #20]
 800c218:	f043 0301 	orr.w	r3, r3, #1
 800c21c:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	b29a      	uxth	r2, r3
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	697a      	ldr	r2, [r7, #20]
 800c22e:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800c230:	f7fe fdbc 	bl	800adac <HAL_GetTick>
 800c234:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800c236:	e015      	b.n	800c264 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 800c238:	f7fe fdb8 	bl	800adac <HAL_GetTick>
 800c23c:	4602      	mov	r2, r0
 800c23e:	693b      	ldr	r3, [r7, #16]
 800c240:	1ad3      	subs	r3, r2, r3
 800c242:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c246:	d309      	bcc.n	800c25c <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	2201      	movs	r2, #1
 800c24c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	2200      	movs	r2, #0
 800c254:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800c258:	2303      	movs	r3, #3
 800c25a:	e00d      	b.n	800c278 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	691b      	ldr	r3, [r3, #16]
 800c262:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800c264:	697b      	ldr	r3, [r7, #20]
 800c266:	f003 0301 	and.w	r3, r3, #1
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d1e4      	bne.n	800c238 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	2201      	movs	r2, #1
 800c272:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 800c276:	2300      	movs	r3, #0
}
 800c278:	4618      	mov	r0, r3
 800c27a:	3718      	adds	r7, #24
 800c27c:	46bd      	mov	sp, r7
 800c27e:	bd80      	pop	{r7, pc}

0800c280 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 800c280:	b580      	push	{r7, lr}
 800c282:	b082      	sub	sp, #8
 800c284:	af00      	add	r7, sp, #0
 800c286:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c28e:	2b01      	cmp	r3, #1
 800c290:	d101      	bne.n	800c296 <HAL_ETH_Start+0x16>
 800c292:	2302      	movs	r3, #2
 800c294:	e01f      	b.n	800c2d6 <HAL_ETH_Start+0x56>
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	2201      	movs	r2, #1
 800c29a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	2202      	movs	r2, #2
 800c2a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 800c2a6:	6878      	ldr	r0, [r7, #4]
 800c2a8:	f000 fb40 	bl	800c92c <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 800c2ac:	6878      	ldr	r0, [r7, #4]
 800c2ae:	f000 fb77 	bl	800c9a0 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800c2b2:	6878      	ldr	r0, [r7, #4]
 800c2b4:	f000 fc06 	bl	800cac4 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 800c2b8:	6878      	ldr	r0, [r7, #4]
 800c2ba:	f000 fbab 	bl	800ca14 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 800c2be:	6878      	ldr	r0, [r7, #4]
 800c2c0:	f000 fbd4 	bl	800ca6c <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	2201      	movs	r2, #1
 800c2c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	2200      	movs	r2, #0
 800c2d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800c2d4:	2300      	movs	r3, #0
}
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	3708      	adds	r7, #8
 800c2da:	46bd      	mov	sp, r7
 800c2dc:	bd80      	pop	{r7, pc}

0800c2de <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 800c2de:	b580      	push	{r7, lr}
 800c2e0:	b082      	sub	sp, #8
 800c2e2:	af00      	add	r7, sp, #0
 800c2e4:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c2ec:	2b01      	cmp	r3, #1
 800c2ee:	d101      	bne.n	800c2f4 <HAL_ETH_Stop+0x16>
 800c2f0:	2302      	movs	r3, #2
 800c2f2:	e01f      	b.n	800c334 <HAL_ETH_Stop+0x56>
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	2201      	movs	r2, #1
 800c2f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	2202      	movs	r2, #2
 800c300:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 800c304:	6878      	ldr	r0, [r7, #4]
 800c306:	f000 fb9b 	bl	800ca40 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 800c30a:	6878      	ldr	r0, [r7, #4]
 800c30c:	f000 fbc4 	bl	800ca98 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 800c310:	6878      	ldr	r0, [r7, #4]
 800c312:	f000 fb62 	bl	800c9da <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800c316:	6878      	ldr	r0, [r7, #4]
 800c318:	f000 fbd4 	bl	800cac4 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 800c31c:	6878      	ldr	r0, [r7, #4]
 800c31e:	f000 fb22 	bl	800c966 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	2201      	movs	r2, #1
 800c326:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	2200      	movs	r2, #0
 800c32e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800c332:	2300      	movs	r3, #0
}
 800c334:	4618      	mov	r0, r3
 800c336:	3708      	adds	r7, #8
 800c338:	46bd      	mov	sp, r7
 800c33a:	bd80      	pop	{r7, pc}

0800c33c <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 800c33c:	b580      	push	{r7, lr}
 800c33e:	b084      	sub	sp, #16
 800c340:	af00      	add	r7, sp, #0
 800c342:	6078      	str	r0, [r7, #4]
 800c344:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 800c346:	2300      	movs	r3, #0
 800c348:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c350:	2b01      	cmp	r3, #1
 800c352:	d101      	bne.n	800c358 <HAL_ETH_ConfigMAC+0x1c>
 800c354:	2302      	movs	r3, #2
 800c356:	e0e4      	b.n	800c522 <HAL_ETH_ConfigMAC+0x1e6>
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	2201      	movs	r2, #1
 800c35c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	2202      	movs	r2, #2
 800c364:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 800c368:	683b      	ldr	r3, [r7, #0]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	f000 80b1 	beq.w	800c4d2 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800c378:	68fa      	ldr	r2, [r7, #12]
 800c37a:	4b6c      	ldr	r3, [pc, #432]	; (800c52c <HAL_ETH_ConfigMAC+0x1f0>)
 800c37c:	4013      	ands	r3, r2
 800c37e:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 800c380:	683b      	ldr	r3, [r7, #0]
 800c382:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 800c384:	683b      	ldr	r3, [r7, #0]
 800c386:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 800c388:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 800c38a:	683b      	ldr	r3, [r7, #0]
 800c38c:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 800c38e:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 800c390:	683b      	ldr	r3, [r7, #0]
 800c392:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 800c394:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 800c39a:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 800c39c:	683b      	ldr	r3, [r7, #0]
 800c39e:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 800c3a0:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 800c3a2:	683b      	ldr	r3, [r7, #0]
 800c3a4:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 800c3a6:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 800c3ac:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 800c3ae:	683b      	ldr	r3, [r7, #0]
 800c3b0:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 800c3b2:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 800c3b4:	683b      	ldr	r3, [r7, #0]
 800c3b6:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 800c3b8:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 800c3ba:	683b      	ldr	r3, [r7, #0]
 800c3bc:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 800c3be:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 800c3c0:	683b      	ldr	r3, [r7, #0]
 800c3c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 800c3c4:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 800c3c6:	683b      	ldr	r3, [r7, #0]
 800c3c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 800c3ca:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 800c3cc:	68fa      	ldr	r2, [r7, #12]
 800c3ce:	4313      	orrs	r3, r2
 800c3d0:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	68fa      	ldr	r2, [r7, #12]
 800c3d8:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800c3e2:	2001      	movs	r0, #1
 800c3e4:	f7fe fcee 	bl	800adc4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	68fa      	ldr	r2, [r7, #12]
 800c3ee:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800c3f0:	683b      	ldr	r3, [r7, #0]
 800c3f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 800c3f4:	683b      	ldr	r3, [r7, #0]
 800c3f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800c3f8:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 800c3fa:	683b      	ldr	r3, [r7, #0]
 800c3fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 800c3fe:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 800c400:	683b      	ldr	r3, [r7, #0]
 800c402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 800c404:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 800c406:	683b      	ldr	r3, [r7, #0]
 800c408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 800c40a:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 800c40c:	683b      	ldr	r3, [r7, #0]
 800c40e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 800c410:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 800c412:	683b      	ldr	r3, [r7, #0]
 800c414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 800c416:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 800c41a:	683b      	ldr	r3, [r7, #0]
 800c41c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 800c422:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800c424:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	685b      	ldr	r3, [r3, #4]
 800c42c:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800c42e:	2001      	movs	r0, #1
 800c430:	f7fe fcc8 	bl	800adc4 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	68fa      	ldr	r2, [r7, #12]
 800c43a:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	683a      	ldr	r2, [r7, #0]
 800c442:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800c444:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	683a      	ldr	r2, [r7, #0]
 800c44c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800c44e:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	699b      	ldr	r3, [r3, #24]
 800c456:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800c458:	68fa      	ldr	r2, [r7, #12]
 800c45a:	f64f 7341 	movw	r3, #65345	; 0xff41
 800c45e:	4013      	ands	r3, r2
 800c460:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800c462:	683b      	ldr	r3, [r7, #0]
 800c464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c466:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 800c468:	683b      	ldr	r3, [r7, #0]
 800c46a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800c46c:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 800c46e:	683b      	ldr	r3, [r7, #0]
 800c470:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 800c472:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 800c474:	683b      	ldr	r3, [r7, #0]
 800c476:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 800c478:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 800c47a:	683b      	ldr	r3, [r7, #0]
 800c47c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 800c47e:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 800c480:	683b      	ldr	r3, [r7, #0]
 800c482:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 800c484:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800c486:	68fa      	ldr	r2, [r7, #12]
 800c488:	4313      	orrs	r3, r2
 800c48a:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	68fa      	ldr	r2, [r7, #12]
 800c492:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	699b      	ldr	r3, [r3, #24]
 800c49a:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800c49c:	2001      	movs	r0, #1
 800c49e:	f7fe fc91 	bl	800adc4 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	68fa      	ldr	r2, [r7, #12]
 800c4a8:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800c4aa:	683b      	ldr	r3, [r7, #0]
 800c4ac:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 800c4ae:	683b      	ldr	r3, [r7, #0]
 800c4b0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	430a      	orrs	r2, r1
 800c4b8:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	69db      	ldr	r3, [r3, #28]
 800c4c0:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 800c4c2:	2001      	movs	r0, #1
 800c4c4:	f7fe fc7e 	bl	800adc4 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	68fa      	ldr	r2, [r7, #12]
 800c4ce:	61da      	str	r2, [r3, #28]
 800c4d0:	e01e      	b.n	800c510 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800c4e0:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	689a      	ldr	r2, [r3, #8]
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	68db      	ldr	r3, [r3, #12]
 800c4ea:	4313      	orrs	r3, r2
 800c4ec:	68fa      	ldr	r2, [r7, #12]
 800c4ee:	4313      	orrs	r3, r2
 800c4f0:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	68fa      	ldr	r2, [r7, #12]
 800c4f8:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800c502:	2001      	movs	r0, #1
 800c504:	f7fe fc5e 	bl	800adc4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	68fa      	ldr	r2, [r7, #12]
 800c50e:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	2201      	movs	r2, #1
 800c514:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	2200      	movs	r2, #0
 800c51c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 800c520:	2300      	movs	r3, #0
}
 800c522:	4618      	mov	r0, r3
 800c524:	3710      	adds	r7, #16
 800c526:	46bd      	mov	sp, r7
 800c528:	bd80      	pop	{r7, pc}
 800c52a:	bf00      	nop
 800c52c:	ff20810f 	.word	0xff20810f

0800c530 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 800c530:	b580      	push	{r7, lr}
 800c532:	b0b0      	sub	sp, #192	; 0xc0
 800c534:	af00      	add	r7, sp, #0
 800c536:	6078      	str	r0, [r7, #4]
 800c538:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 800c53a:	2300      	movs	r3, #0
 800c53c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 800c540:	683b      	ldr	r3, [r7, #0]
 800c542:	2b00      	cmp	r3, #0
 800c544:	d007      	beq.n	800c556 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c54c:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800c554:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800c556:	2300      	movs	r3, #0
 800c558:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 800c55a:	2300      	movs	r3, #0
 800c55c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800c55e:	2300      	movs	r3, #0
 800c560:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800c562:	2300      	movs	r3, #0
 800c564:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800c566:	2300      	movs	r3, #0
 800c568:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 800c56a:	2300      	movs	r3, #0
 800c56c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	69db      	ldr	r3, [r3, #28]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d103      	bne.n	800c57e <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800c576:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c57a:	663b      	str	r3, [r7, #96]	; 0x60
 800c57c:	e001      	b.n	800c582 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800c57e:	2300      	movs	r3, #0
 800c580:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800c582:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c586:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 800c588:	2300      	movs	r3, #0
 800c58a:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800c58c:	2300      	movs	r3, #0
 800c58e:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 800c590:	2300      	movs	r3, #0
 800c592:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 800c594:	2300      	movs	r3, #0
 800c596:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 800c598:	2300      	movs	r3, #0
 800c59a:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 800c59c:	2340      	movs	r3, #64	; 0x40
 800c59e:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 800c5a0:	2300      	movs	r3, #0
 800c5a2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800c5b2:	2300      	movs	r3, #0
 800c5b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 800c5be:	2300      	movs	r3, #0
 800c5c0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 800c5d0:	2380      	movs	r3, #128	; 0x80
 800c5d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 800c5dc:	2300      	movs	r3, #0
 800c5de:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 800c5e8:	2300      	movs	r3, #0
 800c5ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 800c5f4:	2300      	movs	r3, #0
 800c5f6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800c604:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800c608:	4baa      	ldr	r3, [pc, #680]	; (800c8b4 <ETH_MACDMAConfig+0x384>)
 800c60a:	4013      	ands	r3, r2
 800c60c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800c610:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800c612:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800c614:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800c616:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 800c618:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 800c61a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 800c61c:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800c622:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 800c624:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800c626:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 800c628:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 800c62a:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 800c630:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800c632:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 800c634:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 800c636:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 800c638:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 800c63a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 800c63c:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 800c63e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 800c640:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800c642:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 800c644:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800c646:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800c64a:	4313      	orrs	r3, r2
 800c64c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800c658:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800c664:	2001      	movs	r0, #1
 800c666:	f7fe fbad 	bl	800adc4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800c672:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800c674:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800c676:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800c678:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 800c67a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 800c67c:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 800c67e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800c682:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 800c684:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 800c688:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 800c68a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800c68e:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 800c690:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 800c694:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 800c698:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 800c6a0:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800c6a2:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	685b      	ldr	r3, [r3, #4]
 800c6aa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800c6ae:	2001      	movs	r0, #1
 800c6b0:	f7fe fb88 	bl	800adc4 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800c6bc:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c6c6:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800c6d0:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	699b      	ldr	r3, [r3, #24]
 800c6d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800c6dc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800c6e0:	f64f 7341 	movw	r3, #65345	; 0xff41
 800c6e4:	4013      	ands	r3, r2
 800c6e6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800c6ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c6ee:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 800c6f0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800c6f4:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800c6f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 800c6fa:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 800c6fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 800c700:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800c702:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800c706:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 800c708:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 800c70c:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800c70e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800c712:	4313      	orrs	r3, r2
 800c714:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800c720:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	699b      	ldr	r3, [r3, #24]
 800c728:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800c72c:	2001      	movs	r0, #1
 800c72e:	f7fe fb49 	bl	800adc4 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800c73a:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800c73c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 800c740:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	430a      	orrs	r2, r1
 800c74a:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	69db      	ldr	r3, [r3, #28]
 800c752:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800c756:	2001      	movs	r0, #1
 800c758:	f7fe fb34 	bl	800adc4 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800c764:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800c766:	2300      	movs	r3, #0
 800c768:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 800c76a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c76e:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 800c770:	2300      	movs	r3, #0
 800c772:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 800c774:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c778:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800c77a:	2300      	movs	r3, #0
 800c77c:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800c77e:	2300      	movs	r3, #0
 800c780:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800c782:	2300      	movs	r3, #0
 800c784:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800c786:	2300      	movs	r3, #0
 800c788:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 800c78a:	2304      	movs	r3, #4
 800c78c:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800c78e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c792:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 800c794:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800c798:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800c79a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c79e:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800c7a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c7a4:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800c7a6:	2380      	movs	r3, #128	; 0x80
 800c7a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c7ba:	699b      	ldr	r3, [r3, #24]
 800c7bc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800c7c0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800c7c4:	4b3c      	ldr	r3, [pc, #240]	; (800c8b8 <ETH_MACDMAConfig+0x388>)
 800c7c6:	4013      	ands	r3, r2
 800c7c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800c7cc:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 800c7ce:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800c7d0:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 800c7d2:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800c7d4:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 800c7d6:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 800c7d8:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 800c7da:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 800c7dc:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 800c7de:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800c7e0:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 800c7e2:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800c7e4:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 800c7e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 800c7e8:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 800c7ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 800c7ec:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800c7ee:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800c7f2:	4313      	orrs	r3, r2
 800c7f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c800:	461a      	mov	r2, r3
 800c802:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c806:	6193      	str	r3, [r2, #24]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c810:	699b      	ldr	r3, [r3, #24]
 800c812:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800c816:	2001      	movs	r0, #1
 800c818:	f7fe fad4 	bl	800adc4 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c824:	461a      	mov	r2, r3
 800c826:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c82a:	6193      	str	r3, [r2, #24]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800c82c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800c82e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800c830:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800c832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 800c834:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 800c836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800c838:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 800c83a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 800c83c:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 800c83e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c840:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800c842:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 800c844:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 800c846:	4313      	orrs	r3, r2
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800c848:	687a      	ldr	r2, [r7, #4]
 800c84a:	6812      	ldr	r2, [r2, #0]
 800c84c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c850:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c854:	6013      	str	r3, [r2, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800c864:	2001      	movs	r0, #1
 800c866:	f7fe faad 	bl	800adc4 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c872:	461a      	mov	r2, r3
 800c874:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c878:	6013      	str	r3, [r2, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	699b      	ldr	r3, [r3, #24]
 800c87e:	2b01      	cmp	r3, #1
 800c880:	d10d      	bne.n	800c89e <ETH_MACDMAConfig+0x36e>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c88a:	69db      	ldr	r3, [r3, #28]
 800c88c:	687a      	ldr	r2, [r7, #4]
 800c88e:	6812      	ldr	r2, [r2, #0]
 800c890:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c894:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c898:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c89c:	61d3      	str	r3, [r2, #28]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	695b      	ldr	r3, [r3, #20]
 800c8a2:	461a      	mov	r2, r3
 800c8a4:	2100      	movs	r1, #0
 800c8a6:	6878      	ldr	r0, [r7, #4]
 800c8a8:	f000 f808 	bl	800c8bc <ETH_MACAddressConfig>
}
 800c8ac:	bf00      	nop
 800c8ae:	37c0      	adds	r7, #192	; 0xc0
 800c8b0:	46bd      	mov	sp, r7
 800c8b2:	bd80      	pop	{r7, pc}
 800c8b4:	ff20810f 	.word	0xff20810f
 800c8b8:	f8de3f23 	.word	0xf8de3f23

0800c8bc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800c8bc:	b480      	push	{r7}
 800c8be:	b087      	sub	sp, #28
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	60f8      	str	r0, [r7, #12]
 800c8c4:	60b9      	str	r1, [r7, #8]
 800c8c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	3305      	adds	r3, #5
 800c8cc:	781b      	ldrb	r3, [r3, #0]
 800c8ce:	021b      	lsls	r3, r3, #8
 800c8d0:	687a      	ldr	r2, [r7, #4]
 800c8d2:	3204      	adds	r2, #4
 800c8d4:	7812      	ldrb	r2, [r2, #0]
 800c8d6:	4313      	orrs	r3, r2
 800c8d8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800c8da:	68ba      	ldr	r2, [r7, #8]
 800c8dc:	4b11      	ldr	r3, [pc, #68]	; (800c924 <ETH_MACAddressConfig+0x68>)
 800c8de:	4413      	add	r3, r2
 800c8e0:	461a      	mov	r2, r3
 800c8e2:	697b      	ldr	r3, [r7, #20]
 800c8e4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	3303      	adds	r3, #3
 800c8ea:	781b      	ldrb	r3, [r3, #0]
 800c8ec:	061a      	lsls	r2, r3, #24
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	3302      	adds	r3, #2
 800c8f2:	781b      	ldrb	r3, [r3, #0]
 800c8f4:	041b      	lsls	r3, r3, #16
 800c8f6:	431a      	orrs	r2, r3
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	3301      	adds	r3, #1
 800c8fc:	781b      	ldrb	r3, [r3, #0]
 800c8fe:	021b      	lsls	r3, r3, #8
 800c900:	4313      	orrs	r3, r2
 800c902:	687a      	ldr	r2, [r7, #4]
 800c904:	7812      	ldrb	r2, [r2, #0]
 800c906:	4313      	orrs	r3, r2
 800c908:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800c90a:	68ba      	ldr	r2, [r7, #8]
 800c90c:	4b06      	ldr	r3, [pc, #24]	; (800c928 <ETH_MACAddressConfig+0x6c>)
 800c90e:	4413      	add	r3, r2
 800c910:	461a      	mov	r2, r3
 800c912:	697b      	ldr	r3, [r7, #20]
 800c914:	6013      	str	r3, [r2, #0]
}
 800c916:	bf00      	nop
 800c918:	371c      	adds	r7, #28
 800c91a:	46bd      	mov	sp, r7
 800c91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c920:	4770      	bx	lr
 800c922:	bf00      	nop
 800c924:	40028040 	.word	0x40028040
 800c928:	40028044 	.word	0x40028044

0800c92c <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 800c92c:	b580      	push	{r7, lr}
 800c92e:	b084      	sub	sp, #16
 800c930:	af00      	add	r7, sp, #0
 800c932:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800c934:	2300      	movs	r3, #0
 800c936:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	681a      	ldr	r2, [r3, #0]
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	f042 0208 	orr.w	r2, r2, #8
 800c946:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800c950:	2001      	movs	r0, #1
 800c952:	f000 f8dd 	bl	800cb10 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	68fa      	ldr	r2, [r7, #12]
 800c95c:	601a      	str	r2, [r3, #0]
}
 800c95e:	bf00      	nop
 800c960:	3710      	adds	r7, #16
 800c962:	46bd      	mov	sp, r7
 800c964:	bd80      	pop	{r7, pc}

0800c966 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 800c966:	b580      	push	{r7, lr}
 800c968:	b084      	sub	sp, #16
 800c96a:	af00      	add	r7, sp, #0
 800c96c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800c96e:	2300      	movs	r3, #0
 800c970:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	681a      	ldr	r2, [r3, #0]
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	f022 0208 	bic.w	r2, r2, #8
 800c980:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800c98a:	2001      	movs	r0, #1
 800c98c:	f000 f8c0 	bl	800cb10 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	68fa      	ldr	r2, [r7, #12]
 800c996:	601a      	str	r2, [r3, #0]
}
 800c998:	bf00      	nop
 800c99a:	3710      	adds	r7, #16
 800c99c:	46bd      	mov	sp, r7
 800c99e:	bd80      	pop	{r7, pc}

0800c9a0 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 800c9a0:	b580      	push	{r7, lr}
 800c9a2:	b084      	sub	sp, #16
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800c9a8:	2300      	movs	r3, #0
 800c9aa:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	681a      	ldr	r2, [r3, #0]
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	f042 0204 	orr.w	r2, r2, #4
 800c9ba:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800c9c4:	2001      	movs	r0, #1
 800c9c6:	f000 f8a3 	bl	800cb10 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	68fa      	ldr	r2, [r7, #12]
 800c9d0:	601a      	str	r2, [r3, #0]
}
 800c9d2:	bf00      	nop
 800c9d4:	3710      	adds	r7, #16
 800c9d6:	46bd      	mov	sp, r7
 800c9d8:	bd80      	pop	{r7, pc}

0800c9da <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800c9da:	b580      	push	{r7, lr}
 800c9dc:	b084      	sub	sp, #16
 800c9de:	af00      	add	r7, sp, #0
 800c9e0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	681a      	ldr	r2, [r3, #0]
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	f022 0204 	bic.w	r2, r2, #4
 800c9f4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800c9fe:	2001      	movs	r0, #1
 800ca00:	f000 f886 	bl	800cb10 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	68fa      	ldr	r2, [r7, #12]
 800ca0a:	601a      	str	r2, [r3, #0]
}
 800ca0c:	bf00      	nop
 800ca0e:	3710      	adds	r7, #16
 800ca10:	46bd      	mov	sp, r7
 800ca12:	bd80      	pop	{r7, pc}

0800ca14 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 800ca14:	b480      	push	{r7}
 800ca16:	b083      	sub	sp, #12
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ca24:	699b      	ldr	r3, [r3, #24]
 800ca26:	687a      	ldr	r2, [r7, #4]
 800ca28:	6812      	ldr	r2, [r2, #0]
 800ca2a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800ca2e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ca32:	6193      	str	r3, [r2, #24]
}
 800ca34:	bf00      	nop
 800ca36:	370c      	adds	r7, #12
 800ca38:	46bd      	mov	sp, r7
 800ca3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca3e:	4770      	bx	lr

0800ca40 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 800ca40:	b480      	push	{r7}
 800ca42:	b083      	sub	sp, #12
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ca50:	699b      	ldr	r3, [r3, #24]
 800ca52:	687a      	ldr	r2, [r7, #4]
 800ca54:	6812      	ldr	r2, [r2, #0]
 800ca56:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ca5a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ca5e:	6193      	str	r3, [r2, #24]
}
 800ca60:	bf00      	nop
 800ca62:	370c      	adds	r7, #12
 800ca64:	46bd      	mov	sp, r7
 800ca66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca6a:	4770      	bx	lr

0800ca6c <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 800ca6c:	b480      	push	{r7}
 800ca6e:	b083      	sub	sp, #12
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ca7c:	699b      	ldr	r3, [r3, #24]
 800ca7e:	687a      	ldr	r2, [r7, #4]
 800ca80:	6812      	ldr	r2, [r2, #0]
 800ca82:	f043 0302 	orr.w	r3, r3, #2
 800ca86:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ca8a:	6193      	str	r3, [r2, #24]
}
 800ca8c:	bf00      	nop
 800ca8e:	370c      	adds	r7, #12
 800ca90:	46bd      	mov	sp, r7
 800ca92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca96:	4770      	bx	lr

0800ca98 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800ca98:	b480      	push	{r7}
 800ca9a:	b083      	sub	sp, #12
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800caa8:	699b      	ldr	r3, [r3, #24]
 800caaa:	687a      	ldr	r2, [r7, #4]
 800caac:	6812      	ldr	r2, [r2, #0]
 800caae:	f023 0302 	bic.w	r3, r3, #2
 800cab2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800cab6:	6193      	str	r3, [r2, #24]
}
 800cab8:	bf00      	nop
 800caba:	370c      	adds	r7, #12
 800cabc:	46bd      	mov	sp, r7
 800cabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac2:	4770      	bx	lr

0800cac4 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800cac4:	b580      	push	{r7, lr}
 800cac6:	b084      	sub	sp, #16
 800cac8:	af00      	add	r7, sp, #0
 800caca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800cacc:	2300      	movs	r3, #0
 800cace:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cad8:	699b      	ldr	r3, [r3, #24]
 800cada:	687a      	ldr	r2, [r7, #4]
 800cadc:	6812      	ldr	r2, [r2, #0]
 800cade:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cae2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800cae6:	6193      	str	r3, [r2, #24]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800caf0:	699b      	ldr	r3, [r3, #24]
 800caf2:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800caf4:	2001      	movs	r0, #1
 800caf6:	f000 f80b 	bl	800cb10 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	681a      	ldr	r2, [r3, #0]
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800cb04:	6193      	str	r3, [r2, #24]
}
 800cb06:	bf00      	nop
 800cb08:	3710      	adds	r7, #16
 800cb0a:	46bd      	mov	sp, r7
 800cb0c:	bd80      	pop	{r7, pc}
	...

0800cb10 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 800cb10:	b480      	push	{r7}
 800cb12:	b085      	sub	sp, #20
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800cb18:	4b0b      	ldr	r3, [pc, #44]	; (800cb48 <ETH_Delay+0x38>)
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	4a0b      	ldr	r2, [pc, #44]	; (800cb4c <ETH_Delay+0x3c>)
 800cb1e:	fba2 2303 	umull	r2, r3, r2, r3
 800cb22:	0a5b      	lsrs	r3, r3, #9
 800cb24:	687a      	ldr	r2, [r7, #4]
 800cb26:	fb02 f303 	mul.w	r3, r2, r3
 800cb2a:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 800cb2c:	bf00      	nop
  } 
  while (Delay --);
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	1e5a      	subs	r2, r3, #1
 800cb32:	60fa      	str	r2, [r7, #12]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d1f9      	bne.n	800cb2c <ETH_Delay+0x1c>
}
 800cb38:	bf00      	nop
 800cb3a:	bf00      	nop
 800cb3c:	3714      	adds	r7, #20
 800cb3e:	46bd      	mov	sp, r7
 800cb40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb44:	4770      	bx	lr
 800cb46:	bf00      	nop
 800cb48:	10000050 	.word	0x10000050
 800cb4c:	10624dd3 	.word	0x10624dd3

0800cb50 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800cb50:	b580      	push	{r7, lr}
 800cb52:	b086      	sub	sp, #24
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	60f8      	str	r0, [r7, #12]
 800cb58:	60b9      	str	r1, [r7, #8]
 800cb5a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800cb5e:	2301      	movs	r3, #1
 800cb60:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800cb62:	4b23      	ldr	r3, [pc, #140]	; (800cbf0 <HAL_FLASH_Program+0xa0>)
 800cb64:	7e1b      	ldrb	r3, [r3, #24]
 800cb66:	2b01      	cmp	r3, #1
 800cb68:	d101      	bne.n	800cb6e <HAL_FLASH_Program+0x1e>
 800cb6a:	2302      	movs	r3, #2
 800cb6c:	e03b      	b.n	800cbe6 <HAL_FLASH_Program+0x96>
 800cb6e:	4b20      	ldr	r3, [pc, #128]	; (800cbf0 <HAL_FLASH_Program+0xa0>)
 800cb70:	2201      	movs	r2, #1
 800cb72:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800cb74:	f24c 3050 	movw	r0, #50000	; 0xc350
 800cb78:	f000 f87c 	bl	800cc74 <FLASH_WaitForLastOperation>
 800cb7c:	4603      	mov	r3, r0
 800cb7e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800cb80:	7dfb      	ldrb	r3, [r7, #23]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d12b      	bne.n	800cbde <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d105      	bne.n	800cb98 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800cb8c:	783b      	ldrb	r3, [r7, #0]
 800cb8e:	4619      	mov	r1, r3
 800cb90:	68b8      	ldr	r0, [r7, #8]
 800cb92:	f000 f927 	bl	800cde4 <FLASH_Program_Byte>
 800cb96:	e016      	b.n	800cbc6 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	2b01      	cmp	r3, #1
 800cb9c:	d105      	bne.n	800cbaa <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800cb9e:	883b      	ldrh	r3, [r7, #0]
 800cba0:	4619      	mov	r1, r3
 800cba2:	68b8      	ldr	r0, [r7, #8]
 800cba4:	f000 f8fa 	bl	800cd9c <FLASH_Program_HalfWord>
 800cba8:	e00d      	b.n	800cbc6 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	2b02      	cmp	r3, #2
 800cbae:	d105      	bne.n	800cbbc <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800cbb0:	683b      	ldr	r3, [r7, #0]
 800cbb2:	4619      	mov	r1, r3
 800cbb4:	68b8      	ldr	r0, [r7, #8]
 800cbb6:	f000 f8cf 	bl	800cd58 <FLASH_Program_Word>
 800cbba:	e004      	b.n	800cbc6 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800cbbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cbc0:	68b8      	ldr	r0, [r7, #8]
 800cbc2:	f000 f897 	bl	800ccf4 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800cbc6:	f24c 3050 	movw	r0, #50000	; 0xc350
 800cbca:	f000 f853 	bl	800cc74 <FLASH_WaitForLastOperation>
 800cbce:	4603      	mov	r3, r0
 800cbd0:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800cbd2:	4b08      	ldr	r3, [pc, #32]	; (800cbf4 <HAL_FLASH_Program+0xa4>)
 800cbd4:	691b      	ldr	r3, [r3, #16]
 800cbd6:	4a07      	ldr	r2, [pc, #28]	; (800cbf4 <HAL_FLASH_Program+0xa4>)
 800cbd8:	f023 0301 	bic.w	r3, r3, #1
 800cbdc:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800cbde:	4b04      	ldr	r3, [pc, #16]	; (800cbf0 <HAL_FLASH_Program+0xa0>)
 800cbe0:	2200      	movs	r2, #0
 800cbe2:	761a      	strb	r2, [r3, #24]
  
  return status;
 800cbe4:	7dfb      	ldrb	r3, [r7, #23]
}
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	3718      	adds	r7, #24
 800cbea:	46bd      	mov	sp, r7
 800cbec:	bd80      	pop	{r7, pc}
 800cbee:	bf00      	nop
 800cbf0:	200149a0 	.word	0x200149a0
 800cbf4:	40023c00 	.word	0x40023c00

0800cbf8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800cbf8:	b480      	push	{r7}
 800cbfa:	b083      	sub	sp, #12
 800cbfc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800cbfe:	2300      	movs	r3, #0
 800cc00:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800cc02:	4b0b      	ldr	r3, [pc, #44]	; (800cc30 <HAL_FLASH_Unlock+0x38>)
 800cc04:	691b      	ldr	r3, [r3, #16]
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	da0b      	bge.n	800cc22 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800cc0a:	4b09      	ldr	r3, [pc, #36]	; (800cc30 <HAL_FLASH_Unlock+0x38>)
 800cc0c:	4a09      	ldr	r2, [pc, #36]	; (800cc34 <HAL_FLASH_Unlock+0x3c>)
 800cc0e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800cc10:	4b07      	ldr	r3, [pc, #28]	; (800cc30 <HAL_FLASH_Unlock+0x38>)
 800cc12:	4a09      	ldr	r2, [pc, #36]	; (800cc38 <HAL_FLASH_Unlock+0x40>)
 800cc14:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800cc16:	4b06      	ldr	r3, [pc, #24]	; (800cc30 <HAL_FLASH_Unlock+0x38>)
 800cc18:	691b      	ldr	r3, [r3, #16]
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	da01      	bge.n	800cc22 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800cc1e:	2301      	movs	r3, #1
 800cc20:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800cc22:	79fb      	ldrb	r3, [r7, #7]
}
 800cc24:	4618      	mov	r0, r3
 800cc26:	370c      	adds	r7, #12
 800cc28:	46bd      	mov	sp, r7
 800cc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc2e:	4770      	bx	lr
 800cc30:	40023c00 	.word	0x40023c00
 800cc34:	45670123 	.word	0x45670123
 800cc38:	cdef89ab 	.word	0xcdef89ab

0800cc3c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800cc3c:	b480      	push	{r7}
 800cc3e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800cc40:	4b05      	ldr	r3, [pc, #20]	; (800cc58 <HAL_FLASH_Lock+0x1c>)
 800cc42:	691b      	ldr	r3, [r3, #16]
 800cc44:	4a04      	ldr	r2, [pc, #16]	; (800cc58 <HAL_FLASH_Lock+0x1c>)
 800cc46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cc4a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800cc4c:	2300      	movs	r3, #0
}
 800cc4e:	4618      	mov	r0, r3
 800cc50:	46bd      	mov	sp, r7
 800cc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc56:	4770      	bx	lr
 800cc58:	40023c00 	.word	0x40023c00

0800cc5c <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 800cc5c:	b480      	push	{r7}
 800cc5e:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 800cc60:	4b03      	ldr	r3, [pc, #12]	; (800cc70 <HAL_FLASH_GetError+0x14>)
 800cc62:	69db      	ldr	r3, [r3, #28]
}  
 800cc64:	4618      	mov	r0, r3
 800cc66:	46bd      	mov	sp, r7
 800cc68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc6c:	4770      	bx	lr
 800cc6e:	bf00      	nop
 800cc70:	200149a0 	.word	0x200149a0

0800cc74 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800cc74:	b580      	push	{r7, lr}
 800cc76:	b084      	sub	sp, #16
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800cc7c:	2300      	movs	r3, #0
 800cc7e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800cc80:	4b1a      	ldr	r3, [pc, #104]	; (800ccec <FLASH_WaitForLastOperation+0x78>)
 800cc82:	2200      	movs	r2, #0
 800cc84:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800cc86:	f7fe f891 	bl	800adac <HAL_GetTick>
 800cc8a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800cc8c:	e010      	b.n	800ccb0 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc94:	d00c      	beq.n	800ccb0 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d007      	beq.n	800ccac <FLASH_WaitForLastOperation+0x38>
 800cc9c:	f7fe f886 	bl	800adac <HAL_GetTick>
 800cca0:	4602      	mov	r2, r0
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	1ad3      	subs	r3, r2, r3
 800cca6:	687a      	ldr	r2, [r7, #4]
 800cca8:	429a      	cmp	r2, r3
 800ccaa:	d201      	bcs.n	800ccb0 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800ccac:	2303      	movs	r3, #3
 800ccae:	e019      	b.n	800cce4 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800ccb0:	4b0f      	ldr	r3, [pc, #60]	; (800ccf0 <FLASH_WaitForLastOperation+0x7c>)
 800ccb2:	68db      	ldr	r3, [r3, #12]
 800ccb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d1e8      	bne.n	800cc8e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800ccbc:	4b0c      	ldr	r3, [pc, #48]	; (800ccf0 <FLASH_WaitForLastOperation+0x7c>)
 800ccbe:	68db      	ldr	r3, [r3, #12]
 800ccc0:	f003 0301 	and.w	r3, r3, #1
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d002      	beq.n	800ccce <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800ccc8:	4b09      	ldr	r3, [pc, #36]	; (800ccf0 <FLASH_WaitForLastOperation+0x7c>)
 800ccca:	2201      	movs	r2, #1
 800cccc:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800ccce:	4b08      	ldr	r3, [pc, #32]	; (800ccf0 <FLASH_WaitForLastOperation+0x7c>)
 800ccd0:	68db      	ldr	r3, [r3, #12]
 800ccd2:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d003      	beq.n	800cce2 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800ccda:	f000 f8a5 	bl	800ce28 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800ccde:	2301      	movs	r3, #1
 800cce0:	e000      	b.n	800cce4 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800cce2:	2300      	movs	r3, #0
  
}  
 800cce4:	4618      	mov	r0, r3
 800cce6:	3710      	adds	r7, #16
 800cce8:	46bd      	mov	sp, r7
 800ccea:	bd80      	pop	{r7, pc}
 800ccec:	200149a0 	.word	0x200149a0
 800ccf0:	40023c00 	.word	0x40023c00

0800ccf4 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800ccf4:	b480      	push	{r7}
 800ccf6:	b085      	sub	sp, #20
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	60f8      	str	r0, [r7, #12]
 800ccfc:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800cd00:	4b14      	ldr	r3, [pc, #80]	; (800cd54 <FLASH_Program_DoubleWord+0x60>)
 800cd02:	691b      	ldr	r3, [r3, #16]
 800cd04:	4a13      	ldr	r2, [pc, #76]	; (800cd54 <FLASH_Program_DoubleWord+0x60>)
 800cd06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cd0a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800cd0c:	4b11      	ldr	r3, [pc, #68]	; (800cd54 <FLASH_Program_DoubleWord+0x60>)
 800cd0e:	691b      	ldr	r3, [r3, #16]
 800cd10:	4a10      	ldr	r2, [pc, #64]	; (800cd54 <FLASH_Program_DoubleWord+0x60>)
 800cd12:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800cd16:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800cd18:	4b0e      	ldr	r3, [pc, #56]	; (800cd54 <FLASH_Program_DoubleWord+0x60>)
 800cd1a:	691b      	ldr	r3, [r3, #16]
 800cd1c:	4a0d      	ldr	r2, [pc, #52]	; (800cd54 <FLASH_Program_DoubleWord+0x60>)
 800cd1e:	f043 0301 	orr.w	r3, r3, #1
 800cd22:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	683a      	ldr	r2, [r7, #0]
 800cd28:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800cd2a:	f3bf 8f6f 	isb	sy
}
 800cd2e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800cd30:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cd34:	f04f 0200 	mov.w	r2, #0
 800cd38:	f04f 0300 	mov.w	r3, #0
 800cd3c:	000a      	movs	r2, r1
 800cd3e:	2300      	movs	r3, #0
 800cd40:	68f9      	ldr	r1, [r7, #12]
 800cd42:	3104      	adds	r1, #4
 800cd44:	4613      	mov	r3, r2
 800cd46:	600b      	str	r3, [r1, #0]
}
 800cd48:	bf00      	nop
 800cd4a:	3714      	adds	r7, #20
 800cd4c:	46bd      	mov	sp, r7
 800cd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd52:	4770      	bx	lr
 800cd54:	40023c00 	.word	0x40023c00

0800cd58 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800cd58:	b480      	push	{r7}
 800cd5a:	b083      	sub	sp, #12
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	6078      	str	r0, [r7, #4]
 800cd60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800cd62:	4b0d      	ldr	r3, [pc, #52]	; (800cd98 <FLASH_Program_Word+0x40>)
 800cd64:	691b      	ldr	r3, [r3, #16]
 800cd66:	4a0c      	ldr	r2, [pc, #48]	; (800cd98 <FLASH_Program_Word+0x40>)
 800cd68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cd6c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800cd6e:	4b0a      	ldr	r3, [pc, #40]	; (800cd98 <FLASH_Program_Word+0x40>)
 800cd70:	691b      	ldr	r3, [r3, #16]
 800cd72:	4a09      	ldr	r2, [pc, #36]	; (800cd98 <FLASH_Program_Word+0x40>)
 800cd74:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800cd78:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800cd7a:	4b07      	ldr	r3, [pc, #28]	; (800cd98 <FLASH_Program_Word+0x40>)
 800cd7c:	691b      	ldr	r3, [r3, #16]
 800cd7e:	4a06      	ldr	r2, [pc, #24]	; (800cd98 <FLASH_Program_Word+0x40>)
 800cd80:	f043 0301 	orr.w	r3, r3, #1
 800cd84:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	683a      	ldr	r2, [r7, #0]
 800cd8a:	601a      	str	r2, [r3, #0]
}
 800cd8c:	bf00      	nop
 800cd8e:	370c      	adds	r7, #12
 800cd90:	46bd      	mov	sp, r7
 800cd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd96:	4770      	bx	lr
 800cd98:	40023c00 	.word	0x40023c00

0800cd9c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800cd9c:	b480      	push	{r7}
 800cd9e:	b083      	sub	sp, #12
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	6078      	str	r0, [r7, #4]
 800cda4:	460b      	mov	r3, r1
 800cda6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800cda8:	4b0d      	ldr	r3, [pc, #52]	; (800cde0 <FLASH_Program_HalfWord+0x44>)
 800cdaa:	691b      	ldr	r3, [r3, #16]
 800cdac:	4a0c      	ldr	r2, [pc, #48]	; (800cde0 <FLASH_Program_HalfWord+0x44>)
 800cdae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cdb2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800cdb4:	4b0a      	ldr	r3, [pc, #40]	; (800cde0 <FLASH_Program_HalfWord+0x44>)
 800cdb6:	691b      	ldr	r3, [r3, #16]
 800cdb8:	4a09      	ldr	r2, [pc, #36]	; (800cde0 <FLASH_Program_HalfWord+0x44>)
 800cdba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cdbe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800cdc0:	4b07      	ldr	r3, [pc, #28]	; (800cde0 <FLASH_Program_HalfWord+0x44>)
 800cdc2:	691b      	ldr	r3, [r3, #16]
 800cdc4:	4a06      	ldr	r2, [pc, #24]	; (800cde0 <FLASH_Program_HalfWord+0x44>)
 800cdc6:	f043 0301 	orr.w	r3, r3, #1
 800cdca:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	887a      	ldrh	r2, [r7, #2]
 800cdd0:	801a      	strh	r2, [r3, #0]
}
 800cdd2:	bf00      	nop
 800cdd4:	370c      	adds	r7, #12
 800cdd6:	46bd      	mov	sp, r7
 800cdd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cddc:	4770      	bx	lr
 800cdde:	bf00      	nop
 800cde0:	40023c00 	.word	0x40023c00

0800cde4 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800cde4:	b480      	push	{r7}
 800cde6:	b083      	sub	sp, #12
 800cde8:	af00      	add	r7, sp, #0
 800cdea:	6078      	str	r0, [r7, #4]
 800cdec:	460b      	mov	r3, r1
 800cdee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800cdf0:	4b0c      	ldr	r3, [pc, #48]	; (800ce24 <FLASH_Program_Byte+0x40>)
 800cdf2:	691b      	ldr	r3, [r3, #16]
 800cdf4:	4a0b      	ldr	r2, [pc, #44]	; (800ce24 <FLASH_Program_Byte+0x40>)
 800cdf6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cdfa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800cdfc:	4b09      	ldr	r3, [pc, #36]	; (800ce24 <FLASH_Program_Byte+0x40>)
 800cdfe:	4a09      	ldr	r2, [pc, #36]	; (800ce24 <FLASH_Program_Byte+0x40>)
 800ce00:	691b      	ldr	r3, [r3, #16]
 800ce02:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800ce04:	4b07      	ldr	r3, [pc, #28]	; (800ce24 <FLASH_Program_Byte+0x40>)
 800ce06:	691b      	ldr	r3, [r3, #16]
 800ce08:	4a06      	ldr	r2, [pc, #24]	; (800ce24 <FLASH_Program_Byte+0x40>)
 800ce0a:	f043 0301 	orr.w	r3, r3, #1
 800ce0e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	78fa      	ldrb	r2, [r7, #3]
 800ce14:	701a      	strb	r2, [r3, #0]
}
 800ce16:	bf00      	nop
 800ce18:	370c      	adds	r7, #12
 800ce1a:	46bd      	mov	sp, r7
 800ce1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce20:	4770      	bx	lr
 800ce22:	bf00      	nop
 800ce24:	40023c00 	.word	0x40023c00

0800ce28 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800ce28:	b480      	push	{r7}
 800ce2a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800ce2c:	4b27      	ldr	r3, [pc, #156]	; (800cecc <FLASH_SetErrorCode+0xa4>)
 800ce2e:	68db      	ldr	r3, [r3, #12]
 800ce30:	f003 0310 	and.w	r3, r3, #16
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d008      	beq.n	800ce4a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800ce38:	4b25      	ldr	r3, [pc, #148]	; (800ced0 <FLASH_SetErrorCode+0xa8>)
 800ce3a:	69db      	ldr	r3, [r3, #28]
 800ce3c:	f043 0310 	orr.w	r3, r3, #16
 800ce40:	4a23      	ldr	r2, [pc, #140]	; (800ced0 <FLASH_SetErrorCode+0xa8>)
 800ce42:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800ce44:	4b21      	ldr	r3, [pc, #132]	; (800cecc <FLASH_SetErrorCode+0xa4>)
 800ce46:	2210      	movs	r2, #16
 800ce48:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800ce4a:	4b20      	ldr	r3, [pc, #128]	; (800cecc <FLASH_SetErrorCode+0xa4>)
 800ce4c:	68db      	ldr	r3, [r3, #12]
 800ce4e:	f003 0320 	and.w	r3, r3, #32
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d008      	beq.n	800ce68 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800ce56:	4b1e      	ldr	r3, [pc, #120]	; (800ced0 <FLASH_SetErrorCode+0xa8>)
 800ce58:	69db      	ldr	r3, [r3, #28]
 800ce5a:	f043 0308 	orr.w	r3, r3, #8
 800ce5e:	4a1c      	ldr	r2, [pc, #112]	; (800ced0 <FLASH_SetErrorCode+0xa8>)
 800ce60:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800ce62:	4b1a      	ldr	r3, [pc, #104]	; (800cecc <FLASH_SetErrorCode+0xa4>)
 800ce64:	2220      	movs	r2, #32
 800ce66:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800ce68:	4b18      	ldr	r3, [pc, #96]	; (800cecc <FLASH_SetErrorCode+0xa4>)
 800ce6a:	68db      	ldr	r3, [r3, #12]
 800ce6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d008      	beq.n	800ce86 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800ce74:	4b16      	ldr	r3, [pc, #88]	; (800ced0 <FLASH_SetErrorCode+0xa8>)
 800ce76:	69db      	ldr	r3, [r3, #28]
 800ce78:	f043 0304 	orr.w	r3, r3, #4
 800ce7c:	4a14      	ldr	r2, [pc, #80]	; (800ced0 <FLASH_SetErrorCode+0xa8>)
 800ce7e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800ce80:	4b12      	ldr	r3, [pc, #72]	; (800cecc <FLASH_SetErrorCode+0xa4>)
 800ce82:	2240      	movs	r2, #64	; 0x40
 800ce84:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800ce86:	4b11      	ldr	r3, [pc, #68]	; (800cecc <FLASH_SetErrorCode+0xa4>)
 800ce88:	68db      	ldr	r3, [r3, #12]
 800ce8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d008      	beq.n	800cea4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800ce92:	4b0f      	ldr	r3, [pc, #60]	; (800ced0 <FLASH_SetErrorCode+0xa8>)
 800ce94:	69db      	ldr	r3, [r3, #28]
 800ce96:	f043 0302 	orr.w	r3, r3, #2
 800ce9a:	4a0d      	ldr	r2, [pc, #52]	; (800ced0 <FLASH_SetErrorCode+0xa8>)
 800ce9c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800ce9e:	4b0b      	ldr	r3, [pc, #44]	; (800cecc <FLASH_SetErrorCode+0xa4>)
 800cea0:	2280      	movs	r2, #128	; 0x80
 800cea2:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800cea4:	4b09      	ldr	r3, [pc, #36]	; (800cecc <FLASH_SetErrorCode+0xa4>)
 800cea6:	68db      	ldr	r3, [r3, #12]
 800cea8:	f003 0302 	and.w	r3, r3, #2
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d008      	beq.n	800cec2 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800ceb0:	4b07      	ldr	r3, [pc, #28]	; (800ced0 <FLASH_SetErrorCode+0xa8>)
 800ceb2:	69db      	ldr	r3, [r3, #28]
 800ceb4:	f043 0320 	orr.w	r3, r3, #32
 800ceb8:	4a05      	ldr	r2, [pc, #20]	; (800ced0 <FLASH_SetErrorCode+0xa8>)
 800ceba:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800cebc:	4b03      	ldr	r3, [pc, #12]	; (800cecc <FLASH_SetErrorCode+0xa4>)
 800cebe:	2202      	movs	r2, #2
 800cec0:	60da      	str	r2, [r3, #12]
  }
}
 800cec2:	bf00      	nop
 800cec4:	46bd      	mov	sp, r7
 800cec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceca:	4770      	bx	lr
 800cecc:	40023c00 	.word	0x40023c00
 800ced0:	200149a0 	.word	0x200149a0

0800ced4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800ced4:	b580      	push	{r7, lr}
 800ced6:	b084      	sub	sp, #16
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	6078      	str	r0, [r7, #4]
 800cedc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800cede:	2301      	movs	r3, #1
 800cee0:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800cee2:	2300      	movs	r3, #0
 800cee4:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800cee6:	4b31      	ldr	r3, [pc, #196]	; (800cfac <HAL_FLASHEx_Erase+0xd8>)
 800cee8:	7e1b      	ldrb	r3, [r3, #24]
 800ceea:	2b01      	cmp	r3, #1
 800ceec:	d101      	bne.n	800cef2 <HAL_FLASHEx_Erase+0x1e>
 800ceee:	2302      	movs	r3, #2
 800cef0:	e058      	b.n	800cfa4 <HAL_FLASHEx_Erase+0xd0>
 800cef2:	4b2e      	ldr	r3, [pc, #184]	; (800cfac <HAL_FLASHEx_Erase+0xd8>)
 800cef4:	2201      	movs	r2, #1
 800cef6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800cef8:	f24c 3050 	movw	r0, #50000	; 0xc350
 800cefc:	f7ff feba 	bl	800cc74 <FLASH_WaitForLastOperation>
 800cf00:	4603      	mov	r3, r0
 800cf02:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800cf04:	7bfb      	ldrb	r3, [r7, #15]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d148      	bne.n	800cf9c <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800cf0a:	683b      	ldr	r3, [r7, #0]
 800cf0c:	f04f 32ff 	mov.w	r2, #4294967295
 800cf10:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	2b01      	cmp	r3, #1
 800cf18:	d115      	bne.n	800cf46 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	691b      	ldr	r3, [r3, #16]
 800cf1e:	b2da      	uxtb	r2, r3
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	685b      	ldr	r3, [r3, #4]
 800cf24:	4619      	mov	r1, r3
 800cf26:	4610      	mov	r0, r2
 800cf28:	f000 f844 	bl	800cfb4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800cf2c:	f24c 3050 	movw	r0, #50000	; 0xc350
 800cf30:	f7ff fea0 	bl	800cc74 <FLASH_WaitForLastOperation>
 800cf34:	4603      	mov	r3, r0
 800cf36:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 800cf38:	4b1d      	ldr	r3, [pc, #116]	; (800cfb0 <HAL_FLASHEx_Erase+0xdc>)
 800cf3a:	691b      	ldr	r3, [r3, #16]
 800cf3c:	4a1c      	ldr	r2, [pc, #112]	; (800cfb0 <HAL_FLASHEx_Erase+0xdc>)
 800cf3e:	f023 0304 	bic.w	r3, r3, #4
 800cf42:	6113      	str	r3, [r2, #16]
 800cf44:	e028      	b.n	800cf98 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	689b      	ldr	r3, [r3, #8]
 800cf4a:	60bb      	str	r3, [r7, #8]
 800cf4c:	e01c      	b.n	800cf88 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	691b      	ldr	r3, [r3, #16]
 800cf52:	b2db      	uxtb	r3, r3
 800cf54:	4619      	mov	r1, r3
 800cf56:	68b8      	ldr	r0, [r7, #8]
 800cf58:	f000 f850 	bl	800cffc <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800cf5c:	f24c 3050 	movw	r0, #50000	; 0xc350
 800cf60:	f7ff fe88 	bl	800cc74 <FLASH_WaitForLastOperation>
 800cf64:	4603      	mov	r3, r0
 800cf66:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800cf68:	4b11      	ldr	r3, [pc, #68]	; (800cfb0 <HAL_FLASHEx_Erase+0xdc>)
 800cf6a:	691b      	ldr	r3, [r3, #16]
 800cf6c:	4a10      	ldr	r2, [pc, #64]	; (800cfb0 <HAL_FLASHEx_Erase+0xdc>)
 800cf6e:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800cf72:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 800cf74:	7bfb      	ldrb	r3, [r7, #15]
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d003      	beq.n	800cf82 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800cf7a:	683b      	ldr	r3, [r7, #0]
 800cf7c:	68ba      	ldr	r2, [r7, #8]
 800cf7e:	601a      	str	r2, [r3, #0]
          break;
 800cf80:	e00a      	b.n	800cf98 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800cf82:	68bb      	ldr	r3, [r7, #8]
 800cf84:	3301      	adds	r3, #1
 800cf86:	60bb      	str	r3, [r7, #8]
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	68da      	ldr	r2, [r3, #12]
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	689b      	ldr	r3, [r3, #8]
 800cf90:	4413      	add	r3, r2
 800cf92:	68ba      	ldr	r2, [r7, #8]
 800cf94:	429a      	cmp	r2, r3
 800cf96:	d3da      	bcc.n	800cf4e <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800cf98:	f000 f878 	bl	800d08c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800cf9c:	4b03      	ldr	r3, [pc, #12]	; (800cfac <HAL_FLASHEx_Erase+0xd8>)
 800cf9e:	2200      	movs	r2, #0
 800cfa0:	761a      	strb	r2, [r3, #24]

  return status;
 800cfa2:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfa4:	4618      	mov	r0, r3
 800cfa6:	3710      	adds	r7, #16
 800cfa8:	46bd      	mov	sp, r7
 800cfaa:	bd80      	pop	{r7, pc}
 800cfac:	200149a0 	.word	0x200149a0
 800cfb0:	40023c00 	.word	0x40023c00

0800cfb4 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800cfb4:	b480      	push	{r7}
 800cfb6:	b083      	sub	sp, #12
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	4603      	mov	r3, r0
 800cfbc:	6039      	str	r1, [r7, #0]
 800cfbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800cfc0:	4b0d      	ldr	r3, [pc, #52]	; (800cff8 <FLASH_MassErase+0x44>)
 800cfc2:	691b      	ldr	r3, [r3, #16]
 800cfc4:	4a0c      	ldr	r2, [pc, #48]	; (800cff8 <FLASH_MassErase+0x44>)
 800cfc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cfca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800cfcc:	4b0a      	ldr	r3, [pc, #40]	; (800cff8 <FLASH_MassErase+0x44>)
 800cfce:	691b      	ldr	r3, [r3, #16]
 800cfd0:	4a09      	ldr	r2, [pc, #36]	; (800cff8 <FLASH_MassErase+0x44>)
 800cfd2:	f043 0304 	orr.w	r3, r3, #4
 800cfd6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 800cfd8:	4b07      	ldr	r3, [pc, #28]	; (800cff8 <FLASH_MassErase+0x44>)
 800cfda:	691a      	ldr	r2, [r3, #16]
 800cfdc:	79fb      	ldrb	r3, [r7, #7]
 800cfde:	021b      	lsls	r3, r3, #8
 800cfe0:	4313      	orrs	r3, r2
 800cfe2:	4a05      	ldr	r2, [pc, #20]	; (800cff8 <FLASH_MassErase+0x44>)
 800cfe4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cfe8:	6113      	str	r3, [r2, #16]
}
 800cfea:	bf00      	nop
 800cfec:	370c      	adds	r7, #12
 800cfee:	46bd      	mov	sp, r7
 800cff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff4:	4770      	bx	lr
 800cff6:	bf00      	nop
 800cff8:	40023c00 	.word	0x40023c00

0800cffc <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800cffc:	b480      	push	{r7}
 800cffe:	b085      	sub	sp, #20
 800d000:	af00      	add	r7, sp, #0
 800d002:	6078      	str	r0, [r7, #4]
 800d004:	460b      	mov	r3, r1
 800d006:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800d008:	2300      	movs	r3, #0
 800d00a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800d00c:	78fb      	ldrb	r3, [r7, #3]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d102      	bne.n	800d018 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800d012:	2300      	movs	r3, #0
 800d014:	60fb      	str	r3, [r7, #12]
 800d016:	e010      	b.n	800d03a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800d018:	78fb      	ldrb	r3, [r7, #3]
 800d01a:	2b01      	cmp	r3, #1
 800d01c:	d103      	bne.n	800d026 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800d01e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d022:	60fb      	str	r3, [r7, #12]
 800d024:	e009      	b.n	800d03a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800d026:	78fb      	ldrb	r3, [r7, #3]
 800d028:	2b02      	cmp	r3, #2
 800d02a:	d103      	bne.n	800d034 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800d02c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d030:	60fb      	str	r3, [r7, #12]
 800d032:	e002      	b.n	800d03a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800d034:	f44f 7340 	mov.w	r3, #768	; 0x300
 800d038:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800d03a:	4b13      	ldr	r3, [pc, #76]	; (800d088 <FLASH_Erase_Sector+0x8c>)
 800d03c:	691b      	ldr	r3, [r3, #16]
 800d03e:	4a12      	ldr	r2, [pc, #72]	; (800d088 <FLASH_Erase_Sector+0x8c>)
 800d040:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d044:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800d046:	4b10      	ldr	r3, [pc, #64]	; (800d088 <FLASH_Erase_Sector+0x8c>)
 800d048:	691a      	ldr	r2, [r3, #16]
 800d04a:	490f      	ldr	r1, [pc, #60]	; (800d088 <FLASH_Erase_Sector+0x8c>)
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	4313      	orrs	r3, r2
 800d050:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800d052:	4b0d      	ldr	r3, [pc, #52]	; (800d088 <FLASH_Erase_Sector+0x8c>)
 800d054:	691b      	ldr	r3, [r3, #16]
 800d056:	4a0c      	ldr	r2, [pc, #48]	; (800d088 <FLASH_Erase_Sector+0x8c>)
 800d058:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800d05c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800d05e:	4b0a      	ldr	r3, [pc, #40]	; (800d088 <FLASH_Erase_Sector+0x8c>)
 800d060:	691a      	ldr	r2, [r3, #16]
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	00db      	lsls	r3, r3, #3
 800d066:	4313      	orrs	r3, r2
 800d068:	4a07      	ldr	r2, [pc, #28]	; (800d088 <FLASH_Erase_Sector+0x8c>)
 800d06a:	f043 0302 	orr.w	r3, r3, #2
 800d06e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800d070:	4b05      	ldr	r3, [pc, #20]	; (800d088 <FLASH_Erase_Sector+0x8c>)
 800d072:	691b      	ldr	r3, [r3, #16]
 800d074:	4a04      	ldr	r2, [pc, #16]	; (800d088 <FLASH_Erase_Sector+0x8c>)
 800d076:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d07a:	6113      	str	r3, [r2, #16]
}
 800d07c:	bf00      	nop
 800d07e:	3714      	adds	r7, #20
 800d080:	46bd      	mov	sp, r7
 800d082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d086:	4770      	bx	lr
 800d088:	40023c00 	.word	0x40023c00

0800d08c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800d08c:	b480      	push	{r7}
 800d08e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 800d090:	4b20      	ldr	r3, [pc, #128]	; (800d114 <FLASH_FlushCaches+0x88>)
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d017      	beq.n	800d0cc <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800d09c:	4b1d      	ldr	r3, [pc, #116]	; (800d114 <FLASH_FlushCaches+0x88>)
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	4a1c      	ldr	r2, [pc, #112]	; (800d114 <FLASH_FlushCaches+0x88>)
 800d0a2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d0a6:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800d0a8:	4b1a      	ldr	r3, [pc, #104]	; (800d114 <FLASH_FlushCaches+0x88>)
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	4a19      	ldr	r2, [pc, #100]	; (800d114 <FLASH_FlushCaches+0x88>)
 800d0ae:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800d0b2:	6013      	str	r3, [r2, #0]
 800d0b4:	4b17      	ldr	r3, [pc, #92]	; (800d114 <FLASH_FlushCaches+0x88>)
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	4a16      	ldr	r2, [pc, #88]	; (800d114 <FLASH_FlushCaches+0x88>)
 800d0ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d0be:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800d0c0:	4b14      	ldr	r3, [pc, #80]	; (800d114 <FLASH_FlushCaches+0x88>)
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	4a13      	ldr	r2, [pc, #76]	; (800d114 <FLASH_FlushCaches+0x88>)
 800d0c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d0ca:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800d0cc:	4b11      	ldr	r3, [pc, #68]	; (800d114 <FLASH_FlushCaches+0x88>)
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d017      	beq.n	800d108 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800d0d8:	4b0e      	ldr	r3, [pc, #56]	; (800d114 <FLASH_FlushCaches+0x88>)
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	4a0d      	ldr	r2, [pc, #52]	; (800d114 <FLASH_FlushCaches+0x88>)
 800d0de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d0e2:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800d0e4:	4b0b      	ldr	r3, [pc, #44]	; (800d114 <FLASH_FlushCaches+0x88>)
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	4a0a      	ldr	r2, [pc, #40]	; (800d114 <FLASH_FlushCaches+0x88>)
 800d0ea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d0ee:	6013      	str	r3, [r2, #0]
 800d0f0:	4b08      	ldr	r3, [pc, #32]	; (800d114 <FLASH_FlushCaches+0x88>)
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	4a07      	ldr	r2, [pc, #28]	; (800d114 <FLASH_FlushCaches+0x88>)
 800d0f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d0fa:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800d0fc:	4b05      	ldr	r3, [pc, #20]	; (800d114 <FLASH_FlushCaches+0x88>)
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	4a04      	ldr	r2, [pc, #16]	; (800d114 <FLASH_FlushCaches+0x88>)
 800d102:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800d106:	6013      	str	r3, [r2, #0]
  }
}
 800d108:	bf00      	nop
 800d10a:	46bd      	mov	sp, r7
 800d10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d110:	4770      	bx	lr
 800d112:	bf00      	nop
 800d114:	40023c00 	.word	0x40023c00

0800d118 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800d118:	b480      	push	{r7}
 800d11a:	b089      	sub	sp, #36	; 0x24
 800d11c:	af00      	add	r7, sp, #0
 800d11e:	6078      	str	r0, [r7, #4]
 800d120:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800d122:	2300      	movs	r3, #0
 800d124:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800d126:	2300      	movs	r3, #0
 800d128:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800d12a:	2300      	movs	r3, #0
 800d12c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800d12e:	2300      	movs	r3, #0
 800d130:	61fb      	str	r3, [r7, #28]
 800d132:	e16b      	b.n	800d40c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800d134:	2201      	movs	r2, #1
 800d136:	69fb      	ldr	r3, [r7, #28]
 800d138:	fa02 f303 	lsl.w	r3, r2, r3
 800d13c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800d13e:	683b      	ldr	r3, [r7, #0]
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	697a      	ldr	r2, [r7, #20]
 800d144:	4013      	ands	r3, r2
 800d146:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800d148:	693a      	ldr	r2, [r7, #16]
 800d14a:	697b      	ldr	r3, [r7, #20]
 800d14c:	429a      	cmp	r2, r3
 800d14e:	f040 815a 	bne.w	800d406 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800d152:	683b      	ldr	r3, [r7, #0]
 800d154:	685b      	ldr	r3, [r3, #4]
 800d156:	f003 0303 	and.w	r3, r3, #3
 800d15a:	2b01      	cmp	r3, #1
 800d15c:	d005      	beq.n	800d16a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800d15e:	683b      	ldr	r3, [r7, #0]
 800d160:	685b      	ldr	r3, [r3, #4]
 800d162:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800d166:	2b02      	cmp	r3, #2
 800d168:	d130      	bne.n	800d1cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	689b      	ldr	r3, [r3, #8]
 800d16e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800d170:	69fb      	ldr	r3, [r7, #28]
 800d172:	005b      	lsls	r3, r3, #1
 800d174:	2203      	movs	r2, #3
 800d176:	fa02 f303 	lsl.w	r3, r2, r3
 800d17a:	43db      	mvns	r3, r3
 800d17c:	69ba      	ldr	r2, [r7, #24]
 800d17e:	4013      	ands	r3, r2
 800d180:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800d182:	683b      	ldr	r3, [r7, #0]
 800d184:	68da      	ldr	r2, [r3, #12]
 800d186:	69fb      	ldr	r3, [r7, #28]
 800d188:	005b      	lsls	r3, r3, #1
 800d18a:	fa02 f303 	lsl.w	r3, r2, r3
 800d18e:	69ba      	ldr	r2, [r7, #24]
 800d190:	4313      	orrs	r3, r2
 800d192:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	69ba      	ldr	r2, [r7, #24]
 800d198:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	685b      	ldr	r3, [r3, #4]
 800d19e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800d1a0:	2201      	movs	r2, #1
 800d1a2:	69fb      	ldr	r3, [r7, #28]
 800d1a4:	fa02 f303 	lsl.w	r3, r2, r3
 800d1a8:	43db      	mvns	r3, r3
 800d1aa:	69ba      	ldr	r2, [r7, #24]
 800d1ac:	4013      	ands	r3, r2
 800d1ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800d1b0:	683b      	ldr	r3, [r7, #0]
 800d1b2:	685b      	ldr	r3, [r3, #4]
 800d1b4:	091b      	lsrs	r3, r3, #4
 800d1b6:	f003 0201 	and.w	r2, r3, #1
 800d1ba:	69fb      	ldr	r3, [r7, #28]
 800d1bc:	fa02 f303 	lsl.w	r3, r2, r3
 800d1c0:	69ba      	ldr	r2, [r7, #24]
 800d1c2:	4313      	orrs	r3, r2
 800d1c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	69ba      	ldr	r2, [r7, #24]
 800d1ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800d1cc:	683b      	ldr	r3, [r7, #0]
 800d1ce:	685b      	ldr	r3, [r3, #4]
 800d1d0:	f003 0303 	and.w	r3, r3, #3
 800d1d4:	2b03      	cmp	r3, #3
 800d1d6:	d017      	beq.n	800d208 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	68db      	ldr	r3, [r3, #12]
 800d1dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800d1de:	69fb      	ldr	r3, [r7, #28]
 800d1e0:	005b      	lsls	r3, r3, #1
 800d1e2:	2203      	movs	r2, #3
 800d1e4:	fa02 f303 	lsl.w	r3, r2, r3
 800d1e8:	43db      	mvns	r3, r3
 800d1ea:	69ba      	ldr	r2, [r7, #24]
 800d1ec:	4013      	ands	r3, r2
 800d1ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800d1f0:	683b      	ldr	r3, [r7, #0]
 800d1f2:	689a      	ldr	r2, [r3, #8]
 800d1f4:	69fb      	ldr	r3, [r7, #28]
 800d1f6:	005b      	lsls	r3, r3, #1
 800d1f8:	fa02 f303 	lsl.w	r3, r2, r3
 800d1fc:	69ba      	ldr	r2, [r7, #24]
 800d1fe:	4313      	orrs	r3, r2
 800d200:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	69ba      	ldr	r2, [r7, #24]
 800d206:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800d208:	683b      	ldr	r3, [r7, #0]
 800d20a:	685b      	ldr	r3, [r3, #4]
 800d20c:	f003 0303 	and.w	r3, r3, #3
 800d210:	2b02      	cmp	r3, #2
 800d212:	d123      	bne.n	800d25c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800d214:	69fb      	ldr	r3, [r7, #28]
 800d216:	08da      	lsrs	r2, r3, #3
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	3208      	adds	r2, #8
 800d21c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d220:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800d222:	69fb      	ldr	r3, [r7, #28]
 800d224:	f003 0307 	and.w	r3, r3, #7
 800d228:	009b      	lsls	r3, r3, #2
 800d22a:	220f      	movs	r2, #15
 800d22c:	fa02 f303 	lsl.w	r3, r2, r3
 800d230:	43db      	mvns	r3, r3
 800d232:	69ba      	ldr	r2, [r7, #24]
 800d234:	4013      	ands	r3, r2
 800d236:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800d238:	683b      	ldr	r3, [r7, #0]
 800d23a:	691a      	ldr	r2, [r3, #16]
 800d23c:	69fb      	ldr	r3, [r7, #28]
 800d23e:	f003 0307 	and.w	r3, r3, #7
 800d242:	009b      	lsls	r3, r3, #2
 800d244:	fa02 f303 	lsl.w	r3, r2, r3
 800d248:	69ba      	ldr	r2, [r7, #24]
 800d24a:	4313      	orrs	r3, r2
 800d24c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800d24e:	69fb      	ldr	r3, [r7, #28]
 800d250:	08da      	lsrs	r2, r3, #3
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	3208      	adds	r2, #8
 800d256:	69b9      	ldr	r1, [r7, #24]
 800d258:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800d262:	69fb      	ldr	r3, [r7, #28]
 800d264:	005b      	lsls	r3, r3, #1
 800d266:	2203      	movs	r2, #3
 800d268:	fa02 f303 	lsl.w	r3, r2, r3
 800d26c:	43db      	mvns	r3, r3
 800d26e:	69ba      	ldr	r2, [r7, #24]
 800d270:	4013      	ands	r3, r2
 800d272:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800d274:	683b      	ldr	r3, [r7, #0]
 800d276:	685b      	ldr	r3, [r3, #4]
 800d278:	f003 0203 	and.w	r2, r3, #3
 800d27c:	69fb      	ldr	r3, [r7, #28]
 800d27e:	005b      	lsls	r3, r3, #1
 800d280:	fa02 f303 	lsl.w	r3, r2, r3
 800d284:	69ba      	ldr	r2, [r7, #24]
 800d286:	4313      	orrs	r3, r2
 800d288:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	69ba      	ldr	r2, [r7, #24]
 800d28e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800d290:	683b      	ldr	r3, [r7, #0]
 800d292:	685b      	ldr	r3, [r3, #4]
 800d294:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800d298:	2b00      	cmp	r3, #0
 800d29a:	f000 80b4 	beq.w	800d406 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d29e:	2300      	movs	r3, #0
 800d2a0:	60fb      	str	r3, [r7, #12]
 800d2a2:	4b60      	ldr	r3, [pc, #384]	; (800d424 <HAL_GPIO_Init+0x30c>)
 800d2a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d2a6:	4a5f      	ldr	r2, [pc, #380]	; (800d424 <HAL_GPIO_Init+0x30c>)
 800d2a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d2ac:	6453      	str	r3, [r2, #68]	; 0x44
 800d2ae:	4b5d      	ldr	r3, [pc, #372]	; (800d424 <HAL_GPIO_Init+0x30c>)
 800d2b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d2b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d2b6:	60fb      	str	r3, [r7, #12]
 800d2b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800d2ba:	4a5b      	ldr	r2, [pc, #364]	; (800d428 <HAL_GPIO_Init+0x310>)
 800d2bc:	69fb      	ldr	r3, [r7, #28]
 800d2be:	089b      	lsrs	r3, r3, #2
 800d2c0:	3302      	adds	r3, #2
 800d2c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d2c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800d2c8:	69fb      	ldr	r3, [r7, #28]
 800d2ca:	f003 0303 	and.w	r3, r3, #3
 800d2ce:	009b      	lsls	r3, r3, #2
 800d2d0:	220f      	movs	r2, #15
 800d2d2:	fa02 f303 	lsl.w	r3, r2, r3
 800d2d6:	43db      	mvns	r3, r3
 800d2d8:	69ba      	ldr	r2, [r7, #24]
 800d2da:	4013      	ands	r3, r2
 800d2dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	4a52      	ldr	r2, [pc, #328]	; (800d42c <HAL_GPIO_Init+0x314>)
 800d2e2:	4293      	cmp	r3, r2
 800d2e4:	d02b      	beq.n	800d33e <HAL_GPIO_Init+0x226>
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	4a51      	ldr	r2, [pc, #324]	; (800d430 <HAL_GPIO_Init+0x318>)
 800d2ea:	4293      	cmp	r3, r2
 800d2ec:	d025      	beq.n	800d33a <HAL_GPIO_Init+0x222>
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	4a50      	ldr	r2, [pc, #320]	; (800d434 <HAL_GPIO_Init+0x31c>)
 800d2f2:	4293      	cmp	r3, r2
 800d2f4:	d01f      	beq.n	800d336 <HAL_GPIO_Init+0x21e>
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	4a4f      	ldr	r2, [pc, #316]	; (800d438 <HAL_GPIO_Init+0x320>)
 800d2fa:	4293      	cmp	r3, r2
 800d2fc:	d019      	beq.n	800d332 <HAL_GPIO_Init+0x21a>
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	4a4e      	ldr	r2, [pc, #312]	; (800d43c <HAL_GPIO_Init+0x324>)
 800d302:	4293      	cmp	r3, r2
 800d304:	d013      	beq.n	800d32e <HAL_GPIO_Init+0x216>
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	4a4d      	ldr	r2, [pc, #308]	; (800d440 <HAL_GPIO_Init+0x328>)
 800d30a:	4293      	cmp	r3, r2
 800d30c:	d00d      	beq.n	800d32a <HAL_GPIO_Init+0x212>
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	4a4c      	ldr	r2, [pc, #304]	; (800d444 <HAL_GPIO_Init+0x32c>)
 800d312:	4293      	cmp	r3, r2
 800d314:	d007      	beq.n	800d326 <HAL_GPIO_Init+0x20e>
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	4a4b      	ldr	r2, [pc, #300]	; (800d448 <HAL_GPIO_Init+0x330>)
 800d31a:	4293      	cmp	r3, r2
 800d31c:	d101      	bne.n	800d322 <HAL_GPIO_Init+0x20a>
 800d31e:	2307      	movs	r3, #7
 800d320:	e00e      	b.n	800d340 <HAL_GPIO_Init+0x228>
 800d322:	2308      	movs	r3, #8
 800d324:	e00c      	b.n	800d340 <HAL_GPIO_Init+0x228>
 800d326:	2306      	movs	r3, #6
 800d328:	e00a      	b.n	800d340 <HAL_GPIO_Init+0x228>
 800d32a:	2305      	movs	r3, #5
 800d32c:	e008      	b.n	800d340 <HAL_GPIO_Init+0x228>
 800d32e:	2304      	movs	r3, #4
 800d330:	e006      	b.n	800d340 <HAL_GPIO_Init+0x228>
 800d332:	2303      	movs	r3, #3
 800d334:	e004      	b.n	800d340 <HAL_GPIO_Init+0x228>
 800d336:	2302      	movs	r3, #2
 800d338:	e002      	b.n	800d340 <HAL_GPIO_Init+0x228>
 800d33a:	2301      	movs	r3, #1
 800d33c:	e000      	b.n	800d340 <HAL_GPIO_Init+0x228>
 800d33e:	2300      	movs	r3, #0
 800d340:	69fa      	ldr	r2, [r7, #28]
 800d342:	f002 0203 	and.w	r2, r2, #3
 800d346:	0092      	lsls	r2, r2, #2
 800d348:	4093      	lsls	r3, r2
 800d34a:	69ba      	ldr	r2, [r7, #24]
 800d34c:	4313      	orrs	r3, r2
 800d34e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800d350:	4935      	ldr	r1, [pc, #212]	; (800d428 <HAL_GPIO_Init+0x310>)
 800d352:	69fb      	ldr	r3, [r7, #28]
 800d354:	089b      	lsrs	r3, r3, #2
 800d356:	3302      	adds	r3, #2
 800d358:	69ba      	ldr	r2, [r7, #24]
 800d35a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800d35e:	4b3b      	ldr	r3, [pc, #236]	; (800d44c <HAL_GPIO_Init+0x334>)
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d364:	693b      	ldr	r3, [r7, #16]
 800d366:	43db      	mvns	r3, r3
 800d368:	69ba      	ldr	r2, [r7, #24]
 800d36a:	4013      	ands	r3, r2
 800d36c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800d36e:	683b      	ldr	r3, [r7, #0]
 800d370:	685b      	ldr	r3, [r3, #4]
 800d372:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d376:	2b00      	cmp	r3, #0
 800d378:	d003      	beq.n	800d382 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800d37a:	69ba      	ldr	r2, [r7, #24]
 800d37c:	693b      	ldr	r3, [r7, #16]
 800d37e:	4313      	orrs	r3, r2
 800d380:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800d382:	4a32      	ldr	r2, [pc, #200]	; (800d44c <HAL_GPIO_Init+0x334>)
 800d384:	69bb      	ldr	r3, [r7, #24]
 800d386:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800d388:	4b30      	ldr	r3, [pc, #192]	; (800d44c <HAL_GPIO_Init+0x334>)
 800d38a:	685b      	ldr	r3, [r3, #4]
 800d38c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d38e:	693b      	ldr	r3, [r7, #16]
 800d390:	43db      	mvns	r3, r3
 800d392:	69ba      	ldr	r2, [r7, #24]
 800d394:	4013      	ands	r3, r2
 800d396:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800d398:	683b      	ldr	r3, [r7, #0]
 800d39a:	685b      	ldr	r3, [r3, #4]
 800d39c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d003      	beq.n	800d3ac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800d3a4:	69ba      	ldr	r2, [r7, #24]
 800d3a6:	693b      	ldr	r3, [r7, #16]
 800d3a8:	4313      	orrs	r3, r2
 800d3aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800d3ac:	4a27      	ldr	r2, [pc, #156]	; (800d44c <HAL_GPIO_Init+0x334>)
 800d3ae:	69bb      	ldr	r3, [r7, #24]
 800d3b0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800d3b2:	4b26      	ldr	r3, [pc, #152]	; (800d44c <HAL_GPIO_Init+0x334>)
 800d3b4:	689b      	ldr	r3, [r3, #8]
 800d3b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d3b8:	693b      	ldr	r3, [r7, #16]
 800d3ba:	43db      	mvns	r3, r3
 800d3bc:	69ba      	ldr	r2, [r7, #24]
 800d3be:	4013      	ands	r3, r2
 800d3c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800d3c2:	683b      	ldr	r3, [r7, #0]
 800d3c4:	685b      	ldr	r3, [r3, #4]
 800d3c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d003      	beq.n	800d3d6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800d3ce:	69ba      	ldr	r2, [r7, #24]
 800d3d0:	693b      	ldr	r3, [r7, #16]
 800d3d2:	4313      	orrs	r3, r2
 800d3d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800d3d6:	4a1d      	ldr	r2, [pc, #116]	; (800d44c <HAL_GPIO_Init+0x334>)
 800d3d8:	69bb      	ldr	r3, [r7, #24]
 800d3da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800d3dc:	4b1b      	ldr	r3, [pc, #108]	; (800d44c <HAL_GPIO_Init+0x334>)
 800d3de:	68db      	ldr	r3, [r3, #12]
 800d3e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d3e2:	693b      	ldr	r3, [r7, #16]
 800d3e4:	43db      	mvns	r3, r3
 800d3e6:	69ba      	ldr	r2, [r7, #24]
 800d3e8:	4013      	ands	r3, r2
 800d3ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800d3ec:	683b      	ldr	r3, [r7, #0]
 800d3ee:	685b      	ldr	r3, [r3, #4]
 800d3f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d003      	beq.n	800d400 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800d3f8:	69ba      	ldr	r2, [r7, #24]
 800d3fa:	693b      	ldr	r3, [r7, #16]
 800d3fc:	4313      	orrs	r3, r2
 800d3fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800d400:	4a12      	ldr	r2, [pc, #72]	; (800d44c <HAL_GPIO_Init+0x334>)
 800d402:	69bb      	ldr	r3, [r7, #24]
 800d404:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800d406:	69fb      	ldr	r3, [r7, #28]
 800d408:	3301      	adds	r3, #1
 800d40a:	61fb      	str	r3, [r7, #28]
 800d40c:	69fb      	ldr	r3, [r7, #28]
 800d40e:	2b0f      	cmp	r3, #15
 800d410:	f67f ae90 	bls.w	800d134 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800d414:	bf00      	nop
 800d416:	bf00      	nop
 800d418:	3724      	adds	r7, #36	; 0x24
 800d41a:	46bd      	mov	sp, r7
 800d41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d420:	4770      	bx	lr
 800d422:	bf00      	nop
 800d424:	40023800 	.word	0x40023800
 800d428:	40013800 	.word	0x40013800
 800d42c:	40020000 	.word	0x40020000
 800d430:	40020400 	.word	0x40020400
 800d434:	40020800 	.word	0x40020800
 800d438:	40020c00 	.word	0x40020c00
 800d43c:	40021000 	.word	0x40021000
 800d440:	40021400 	.word	0x40021400
 800d444:	40021800 	.word	0x40021800
 800d448:	40021c00 	.word	0x40021c00
 800d44c:	40013c00 	.word	0x40013c00

0800d450 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800d450:	b480      	push	{r7}
 800d452:	b085      	sub	sp, #20
 800d454:	af00      	add	r7, sp, #0
 800d456:	6078      	str	r0, [r7, #4]
 800d458:	460b      	mov	r3, r1
 800d45a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	691a      	ldr	r2, [r3, #16]
 800d460:	887b      	ldrh	r3, [r7, #2]
 800d462:	4013      	ands	r3, r2
 800d464:	2b00      	cmp	r3, #0
 800d466:	d002      	beq.n	800d46e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800d468:	2301      	movs	r3, #1
 800d46a:	73fb      	strb	r3, [r7, #15]
 800d46c:	e001      	b.n	800d472 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800d46e:	2300      	movs	r3, #0
 800d470:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800d472:	7bfb      	ldrb	r3, [r7, #15]
}
 800d474:	4618      	mov	r0, r3
 800d476:	3714      	adds	r7, #20
 800d478:	46bd      	mov	sp, r7
 800d47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d47e:	4770      	bx	lr

0800d480 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800d480:	b480      	push	{r7}
 800d482:	b083      	sub	sp, #12
 800d484:	af00      	add	r7, sp, #0
 800d486:	6078      	str	r0, [r7, #4]
 800d488:	460b      	mov	r3, r1
 800d48a:	807b      	strh	r3, [r7, #2]
 800d48c:	4613      	mov	r3, r2
 800d48e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800d490:	787b      	ldrb	r3, [r7, #1]
 800d492:	2b00      	cmp	r3, #0
 800d494:	d003      	beq.n	800d49e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800d496:	887a      	ldrh	r2, [r7, #2]
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800d49c:	e003      	b.n	800d4a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800d49e:	887b      	ldrh	r3, [r7, #2]
 800d4a0:	041a      	lsls	r2, r3, #16
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	619a      	str	r2, [r3, #24]
}
 800d4a6:	bf00      	nop
 800d4a8:	370c      	adds	r7, #12
 800d4aa:	46bd      	mov	sp, r7
 800d4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b0:	4770      	bx	lr

0800d4b2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800d4b2:	b480      	push	{r7}
 800d4b4:	b085      	sub	sp, #20
 800d4b6:	af00      	add	r7, sp, #0
 800d4b8:	6078      	str	r0, [r7, #4]
 800d4ba:	460b      	mov	r3, r1
 800d4bc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	695b      	ldr	r3, [r3, #20]
 800d4c2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800d4c4:	887a      	ldrh	r2, [r7, #2]
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	4013      	ands	r3, r2
 800d4ca:	041a      	lsls	r2, r3, #16
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	43d9      	mvns	r1, r3
 800d4d0:	887b      	ldrh	r3, [r7, #2]
 800d4d2:	400b      	ands	r3, r1
 800d4d4:	431a      	orrs	r2, r3
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	619a      	str	r2, [r3, #24]
}
 800d4da:	bf00      	nop
 800d4dc:	3714      	adds	r7, #20
 800d4de:	46bd      	mov	sp, r7
 800d4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e4:	4770      	bx	lr
	...

0800d4e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800d4e8:	b580      	push	{r7, lr}
 800d4ea:	b084      	sub	sp, #16
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d101      	bne.n	800d4fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800d4f6:	2301      	movs	r3, #1
 800d4f8:	e12b      	b.n	800d752 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d500:	b2db      	uxtb	r3, r3
 800d502:	2b00      	cmp	r3, #0
 800d504:	d106      	bne.n	800d514 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	2200      	movs	r2, #0
 800d50a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800d50e:	6878      	ldr	r0, [r7, #4]
 800d510:	f7fc f9d4 	bl	80098bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	2224      	movs	r2, #36	; 0x24
 800d518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	681a      	ldr	r2, [r3, #0]
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	f022 0201 	bic.w	r2, r2, #1
 800d52a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	681a      	ldr	r2, [r3, #0]
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d53a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	681a      	ldr	r2, [r3, #0]
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d54a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800d54c:	f000 fd80 	bl	800e050 <HAL_RCC_GetPCLK1Freq>
 800d550:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	685b      	ldr	r3, [r3, #4]
 800d556:	4a81      	ldr	r2, [pc, #516]	; (800d75c <HAL_I2C_Init+0x274>)
 800d558:	4293      	cmp	r3, r2
 800d55a:	d807      	bhi.n	800d56c <HAL_I2C_Init+0x84>
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	4a80      	ldr	r2, [pc, #512]	; (800d760 <HAL_I2C_Init+0x278>)
 800d560:	4293      	cmp	r3, r2
 800d562:	bf94      	ite	ls
 800d564:	2301      	movls	r3, #1
 800d566:	2300      	movhi	r3, #0
 800d568:	b2db      	uxtb	r3, r3
 800d56a:	e006      	b.n	800d57a <HAL_I2C_Init+0x92>
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	4a7d      	ldr	r2, [pc, #500]	; (800d764 <HAL_I2C_Init+0x27c>)
 800d570:	4293      	cmp	r3, r2
 800d572:	bf94      	ite	ls
 800d574:	2301      	movls	r3, #1
 800d576:	2300      	movhi	r3, #0
 800d578:	b2db      	uxtb	r3, r3
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d001      	beq.n	800d582 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800d57e:	2301      	movs	r3, #1
 800d580:	e0e7      	b.n	800d752 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	4a78      	ldr	r2, [pc, #480]	; (800d768 <HAL_I2C_Init+0x280>)
 800d586:	fba2 2303 	umull	r2, r3, r2, r3
 800d58a:	0c9b      	lsrs	r3, r3, #18
 800d58c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	685b      	ldr	r3, [r3, #4]
 800d594:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	68ba      	ldr	r2, [r7, #8]
 800d59e:	430a      	orrs	r2, r1
 800d5a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	6a1b      	ldr	r3, [r3, #32]
 800d5a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	685b      	ldr	r3, [r3, #4]
 800d5b0:	4a6a      	ldr	r2, [pc, #424]	; (800d75c <HAL_I2C_Init+0x274>)
 800d5b2:	4293      	cmp	r3, r2
 800d5b4:	d802      	bhi.n	800d5bc <HAL_I2C_Init+0xd4>
 800d5b6:	68bb      	ldr	r3, [r7, #8]
 800d5b8:	3301      	adds	r3, #1
 800d5ba:	e009      	b.n	800d5d0 <HAL_I2C_Init+0xe8>
 800d5bc:	68bb      	ldr	r3, [r7, #8]
 800d5be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800d5c2:	fb02 f303 	mul.w	r3, r2, r3
 800d5c6:	4a69      	ldr	r2, [pc, #420]	; (800d76c <HAL_I2C_Init+0x284>)
 800d5c8:	fba2 2303 	umull	r2, r3, r2, r3
 800d5cc:	099b      	lsrs	r3, r3, #6
 800d5ce:	3301      	adds	r3, #1
 800d5d0:	687a      	ldr	r2, [r7, #4]
 800d5d2:	6812      	ldr	r2, [r2, #0]
 800d5d4:	430b      	orrs	r3, r1
 800d5d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	69db      	ldr	r3, [r3, #28]
 800d5de:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800d5e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	685b      	ldr	r3, [r3, #4]
 800d5ea:	495c      	ldr	r1, [pc, #368]	; (800d75c <HAL_I2C_Init+0x274>)
 800d5ec:	428b      	cmp	r3, r1
 800d5ee:	d819      	bhi.n	800d624 <HAL_I2C_Init+0x13c>
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	1e59      	subs	r1, r3, #1
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	685b      	ldr	r3, [r3, #4]
 800d5f8:	005b      	lsls	r3, r3, #1
 800d5fa:	fbb1 f3f3 	udiv	r3, r1, r3
 800d5fe:	1c59      	adds	r1, r3, #1
 800d600:	f640 73fc 	movw	r3, #4092	; 0xffc
 800d604:	400b      	ands	r3, r1
 800d606:	2b00      	cmp	r3, #0
 800d608:	d00a      	beq.n	800d620 <HAL_I2C_Init+0x138>
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	1e59      	subs	r1, r3, #1
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	685b      	ldr	r3, [r3, #4]
 800d612:	005b      	lsls	r3, r3, #1
 800d614:	fbb1 f3f3 	udiv	r3, r1, r3
 800d618:	3301      	adds	r3, #1
 800d61a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d61e:	e051      	b.n	800d6c4 <HAL_I2C_Init+0x1dc>
 800d620:	2304      	movs	r3, #4
 800d622:	e04f      	b.n	800d6c4 <HAL_I2C_Init+0x1dc>
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	689b      	ldr	r3, [r3, #8]
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d111      	bne.n	800d650 <HAL_I2C_Init+0x168>
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	1e58      	subs	r0, r3, #1
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	6859      	ldr	r1, [r3, #4]
 800d634:	460b      	mov	r3, r1
 800d636:	005b      	lsls	r3, r3, #1
 800d638:	440b      	add	r3, r1
 800d63a:	fbb0 f3f3 	udiv	r3, r0, r3
 800d63e:	3301      	adds	r3, #1
 800d640:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d644:	2b00      	cmp	r3, #0
 800d646:	bf0c      	ite	eq
 800d648:	2301      	moveq	r3, #1
 800d64a:	2300      	movne	r3, #0
 800d64c:	b2db      	uxtb	r3, r3
 800d64e:	e012      	b.n	800d676 <HAL_I2C_Init+0x18e>
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	1e58      	subs	r0, r3, #1
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	6859      	ldr	r1, [r3, #4]
 800d658:	460b      	mov	r3, r1
 800d65a:	009b      	lsls	r3, r3, #2
 800d65c:	440b      	add	r3, r1
 800d65e:	0099      	lsls	r1, r3, #2
 800d660:	440b      	add	r3, r1
 800d662:	fbb0 f3f3 	udiv	r3, r0, r3
 800d666:	3301      	adds	r3, #1
 800d668:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	bf0c      	ite	eq
 800d670:	2301      	moveq	r3, #1
 800d672:	2300      	movne	r3, #0
 800d674:	b2db      	uxtb	r3, r3
 800d676:	2b00      	cmp	r3, #0
 800d678:	d001      	beq.n	800d67e <HAL_I2C_Init+0x196>
 800d67a:	2301      	movs	r3, #1
 800d67c:	e022      	b.n	800d6c4 <HAL_I2C_Init+0x1dc>
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	689b      	ldr	r3, [r3, #8]
 800d682:	2b00      	cmp	r3, #0
 800d684:	d10e      	bne.n	800d6a4 <HAL_I2C_Init+0x1bc>
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	1e58      	subs	r0, r3, #1
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	6859      	ldr	r1, [r3, #4]
 800d68e:	460b      	mov	r3, r1
 800d690:	005b      	lsls	r3, r3, #1
 800d692:	440b      	add	r3, r1
 800d694:	fbb0 f3f3 	udiv	r3, r0, r3
 800d698:	3301      	adds	r3, #1
 800d69a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d69e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d6a2:	e00f      	b.n	800d6c4 <HAL_I2C_Init+0x1dc>
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	1e58      	subs	r0, r3, #1
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	6859      	ldr	r1, [r3, #4]
 800d6ac:	460b      	mov	r3, r1
 800d6ae:	009b      	lsls	r3, r3, #2
 800d6b0:	440b      	add	r3, r1
 800d6b2:	0099      	lsls	r1, r3, #2
 800d6b4:	440b      	add	r3, r1
 800d6b6:	fbb0 f3f3 	udiv	r3, r0, r3
 800d6ba:	3301      	adds	r3, #1
 800d6bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d6c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d6c4:	6879      	ldr	r1, [r7, #4]
 800d6c6:	6809      	ldr	r1, [r1, #0]
 800d6c8:	4313      	orrs	r3, r2
 800d6ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	69da      	ldr	r2, [r3, #28]
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	6a1b      	ldr	r3, [r3, #32]
 800d6de:	431a      	orrs	r2, r3
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	430a      	orrs	r2, r1
 800d6e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	689b      	ldr	r3, [r3, #8]
 800d6ee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800d6f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d6f6:	687a      	ldr	r2, [r7, #4]
 800d6f8:	6911      	ldr	r1, [r2, #16]
 800d6fa:	687a      	ldr	r2, [r7, #4]
 800d6fc:	68d2      	ldr	r2, [r2, #12]
 800d6fe:	4311      	orrs	r1, r2
 800d700:	687a      	ldr	r2, [r7, #4]
 800d702:	6812      	ldr	r2, [r2, #0]
 800d704:	430b      	orrs	r3, r1
 800d706:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	68db      	ldr	r3, [r3, #12]
 800d70e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	695a      	ldr	r2, [r3, #20]
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	699b      	ldr	r3, [r3, #24]
 800d71a:	431a      	orrs	r2, r3
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	430a      	orrs	r2, r1
 800d722:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	681a      	ldr	r2, [r3, #0]
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	f042 0201 	orr.w	r2, r2, #1
 800d732:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	2200      	movs	r2, #0
 800d738:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	2220      	movs	r2, #32
 800d73e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	2200      	movs	r2, #0
 800d746:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	2200      	movs	r2, #0
 800d74c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800d750:	2300      	movs	r3, #0
}
 800d752:	4618      	mov	r0, r3
 800d754:	3710      	adds	r7, #16
 800d756:	46bd      	mov	sp, r7
 800d758:	bd80      	pop	{r7, pc}
 800d75a:	bf00      	nop
 800d75c:	000186a0 	.word	0x000186a0
 800d760:	001e847f 	.word	0x001e847f
 800d764:	003d08ff 	.word	0x003d08ff
 800d768:	431bde83 	.word	0x431bde83
 800d76c:	10624dd3 	.word	0x10624dd3

0800d770 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d770:	b580      	push	{r7, lr}
 800d772:	b086      	sub	sp, #24
 800d774:	af00      	add	r7, sp, #0
 800d776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d101      	bne.n	800d782 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800d77e:	2301      	movs	r3, #1
 800d780:	e267      	b.n	800dc52 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	f003 0301 	and.w	r3, r3, #1
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d075      	beq.n	800d87a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800d78e:	4b88      	ldr	r3, [pc, #544]	; (800d9b0 <HAL_RCC_OscConfig+0x240>)
 800d790:	689b      	ldr	r3, [r3, #8]
 800d792:	f003 030c 	and.w	r3, r3, #12
 800d796:	2b04      	cmp	r3, #4
 800d798:	d00c      	beq.n	800d7b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d79a:	4b85      	ldr	r3, [pc, #532]	; (800d9b0 <HAL_RCC_OscConfig+0x240>)
 800d79c:	689b      	ldr	r3, [r3, #8]
 800d79e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800d7a2:	2b08      	cmp	r3, #8
 800d7a4:	d112      	bne.n	800d7cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d7a6:	4b82      	ldr	r3, [pc, #520]	; (800d9b0 <HAL_RCC_OscConfig+0x240>)
 800d7a8:	685b      	ldr	r3, [r3, #4]
 800d7aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d7ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d7b2:	d10b      	bne.n	800d7cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d7b4:	4b7e      	ldr	r3, [pc, #504]	; (800d9b0 <HAL_RCC_OscConfig+0x240>)
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d05b      	beq.n	800d878 <HAL_RCC_OscConfig+0x108>
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	685b      	ldr	r3, [r3, #4]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d157      	bne.n	800d878 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800d7c8:	2301      	movs	r3, #1
 800d7ca:	e242      	b.n	800dc52 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	685b      	ldr	r3, [r3, #4]
 800d7d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d7d4:	d106      	bne.n	800d7e4 <HAL_RCC_OscConfig+0x74>
 800d7d6:	4b76      	ldr	r3, [pc, #472]	; (800d9b0 <HAL_RCC_OscConfig+0x240>)
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	4a75      	ldr	r2, [pc, #468]	; (800d9b0 <HAL_RCC_OscConfig+0x240>)
 800d7dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d7e0:	6013      	str	r3, [r2, #0]
 800d7e2:	e01d      	b.n	800d820 <HAL_RCC_OscConfig+0xb0>
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	685b      	ldr	r3, [r3, #4]
 800d7e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d7ec:	d10c      	bne.n	800d808 <HAL_RCC_OscConfig+0x98>
 800d7ee:	4b70      	ldr	r3, [pc, #448]	; (800d9b0 <HAL_RCC_OscConfig+0x240>)
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	4a6f      	ldr	r2, [pc, #444]	; (800d9b0 <HAL_RCC_OscConfig+0x240>)
 800d7f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d7f8:	6013      	str	r3, [r2, #0]
 800d7fa:	4b6d      	ldr	r3, [pc, #436]	; (800d9b0 <HAL_RCC_OscConfig+0x240>)
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	4a6c      	ldr	r2, [pc, #432]	; (800d9b0 <HAL_RCC_OscConfig+0x240>)
 800d800:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d804:	6013      	str	r3, [r2, #0]
 800d806:	e00b      	b.n	800d820 <HAL_RCC_OscConfig+0xb0>
 800d808:	4b69      	ldr	r3, [pc, #420]	; (800d9b0 <HAL_RCC_OscConfig+0x240>)
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	4a68      	ldr	r2, [pc, #416]	; (800d9b0 <HAL_RCC_OscConfig+0x240>)
 800d80e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d812:	6013      	str	r3, [r2, #0]
 800d814:	4b66      	ldr	r3, [pc, #408]	; (800d9b0 <HAL_RCC_OscConfig+0x240>)
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	4a65      	ldr	r2, [pc, #404]	; (800d9b0 <HAL_RCC_OscConfig+0x240>)
 800d81a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d81e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	685b      	ldr	r3, [r3, #4]
 800d824:	2b00      	cmp	r3, #0
 800d826:	d013      	beq.n	800d850 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d828:	f7fd fac0 	bl	800adac <HAL_GetTick>
 800d82c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d82e:	e008      	b.n	800d842 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d830:	f7fd fabc 	bl	800adac <HAL_GetTick>
 800d834:	4602      	mov	r2, r0
 800d836:	693b      	ldr	r3, [r7, #16]
 800d838:	1ad3      	subs	r3, r2, r3
 800d83a:	2b64      	cmp	r3, #100	; 0x64
 800d83c:	d901      	bls.n	800d842 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800d83e:	2303      	movs	r3, #3
 800d840:	e207      	b.n	800dc52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d842:	4b5b      	ldr	r3, [pc, #364]	; (800d9b0 <HAL_RCC_OscConfig+0x240>)
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d0f0      	beq.n	800d830 <HAL_RCC_OscConfig+0xc0>
 800d84e:	e014      	b.n	800d87a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d850:	f7fd faac 	bl	800adac <HAL_GetTick>
 800d854:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d856:	e008      	b.n	800d86a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d858:	f7fd faa8 	bl	800adac <HAL_GetTick>
 800d85c:	4602      	mov	r2, r0
 800d85e:	693b      	ldr	r3, [r7, #16]
 800d860:	1ad3      	subs	r3, r2, r3
 800d862:	2b64      	cmp	r3, #100	; 0x64
 800d864:	d901      	bls.n	800d86a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800d866:	2303      	movs	r3, #3
 800d868:	e1f3      	b.n	800dc52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d86a:	4b51      	ldr	r3, [pc, #324]	; (800d9b0 <HAL_RCC_OscConfig+0x240>)
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d872:	2b00      	cmp	r3, #0
 800d874:	d1f0      	bne.n	800d858 <HAL_RCC_OscConfig+0xe8>
 800d876:	e000      	b.n	800d87a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d878:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	f003 0302 	and.w	r3, r3, #2
 800d882:	2b00      	cmp	r3, #0
 800d884:	d063      	beq.n	800d94e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800d886:	4b4a      	ldr	r3, [pc, #296]	; (800d9b0 <HAL_RCC_OscConfig+0x240>)
 800d888:	689b      	ldr	r3, [r3, #8]
 800d88a:	f003 030c 	and.w	r3, r3, #12
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d00b      	beq.n	800d8aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d892:	4b47      	ldr	r3, [pc, #284]	; (800d9b0 <HAL_RCC_OscConfig+0x240>)
 800d894:	689b      	ldr	r3, [r3, #8]
 800d896:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800d89a:	2b08      	cmp	r3, #8
 800d89c:	d11c      	bne.n	800d8d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d89e:	4b44      	ldr	r3, [pc, #272]	; (800d9b0 <HAL_RCC_OscConfig+0x240>)
 800d8a0:	685b      	ldr	r3, [r3, #4]
 800d8a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d116      	bne.n	800d8d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d8aa:	4b41      	ldr	r3, [pc, #260]	; (800d9b0 <HAL_RCC_OscConfig+0x240>)
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	f003 0302 	and.w	r3, r3, #2
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d005      	beq.n	800d8c2 <HAL_RCC_OscConfig+0x152>
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	68db      	ldr	r3, [r3, #12]
 800d8ba:	2b01      	cmp	r3, #1
 800d8bc:	d001      	beq.n	800d8c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800d8be:	2301      	movs	r3, #1
 800d8c0:	e1c7      	b.n	800dc52 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d8c2:	4b3b      	ldr	r3, [pc, #236]	; (800d9b0 <HAL_RCC_OscConfig+0x240>)
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	691b      	ldr	r3, [r3, #16]
 800d8ce:	00db      	lsls	r3, r3, #3
 800d8d0:	4937      	ldr	r1, [pc, #220]	; (800d9b0 <HAL_RCC_OscConfig+0x240>)
 800d8d2:	4313      	orrs	r3, r2
 800d8d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d8d6:	e03a      	b.n	800d94e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	68db      	ldr	r3, [r3, #12]
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d020      	beq.n	800d922 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800d8e0:	4b34      	ldr	r3, [pc, #208]	; (800d9b4 <HAL_RCC_OscConfig+0x244>)
 800d8e2:	2201      	movs	r2, #1
 800d8e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d8e6:	f7fd fa61 	bl	800adac <HAL_GetTick>
 800d8ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d8ec:	e008      	b.n	800d900 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d8ee:	f7fd fa5d 	bl	800adac <HAL_GetTick>
 800d8f2:	4602      	mov	r2, r0
 800d8f4:	693b      	ldr	r3, [r7, #16]
 800d8f6:	1ad3      	subs	r3, r2, r3
 800d8f8:	2b02      	cmp	r3, #2
 800d8fa:	d901      	bls.n	800d900 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800d8fc:	2303      	movs	r3, #3
 800d8fe:	e1a8      	b.n	800dc52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d900:	4b2b      	ldr	r3, [pc, #172]	; (800d9b0 <HAL_RCC_OscConfig+0x240>)
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	f003 0302 	and.w	r3, r3, #2
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d0f0      	beq.n	800d8ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d90c:	4b28      	ldr	r3, [pc, #160]	; (800d9b0 <HAL_RCC_OscConfig+0x240>)
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	691b      	ldr	r3, [r3, #16]
 800d918:	00db      	lsls	r3, r3, #3
 800d91a:	4925      	ldr	r1, [pc, #148]	; (800d9b0 <HAL_RCC_OscConfig+0x240>)
 800d91c:	4313      	orrs	r3, r2
 800d91e:	600b      	str	r3, [r1, #0]
 800d920:	e015      	b.n	800d94e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d922:	4b24      	ldr	r3, [pc, #144]	; (800d9b4 <HAL_RCC_OscConfig+0x244>)
 800d924:	2200      	movs	r2, #0
 800d926:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d928:	f7fd fa40 	bl	800adac <HAL_GetTick>
 800d92c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d92e:	e008      	b.n	800d942 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d930:	f7fd fa3c 	bl	800adac <HAL_GetTick>
 800d934:	4602      	mov	r2, r0
 800d936:	693b      	ldr	r3, [r7, #16]
 800d938:	1ad3      	subs	r3, r2, r3
 800d93a:	2b02      	cmp	r3, #2
 800d93c:	d901      	bls.n	800d942 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800d93e:	2303      	movs	r3, #3
 800d940:	e187      	b.n	800dc52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d942:	4b1b      	ldr	r3, [pc, #108]	; (800d9b0 <HAL_RCC_OscConfig+0x240>)
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	f003 0302 	and.w	r3, r3, #2
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d1f0      	bne.n	800d930 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	f003 0308 	and.w	r3, r3, #8
 800d956:	2b00      	cmp	r3, #0
 800d958:	d036      	beq.n	800d9c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	695b      	ldr	r3, [r3, #20]
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d016      	beq.n	800d990 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d962:	4b15      	ldr	r3, [pc, #84]	; (800d9b8 <HAL_RCC_OscConfig+0x248>)
 800d964:	2201      	movs	r2, #1
 800d966:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d968:	f7fd fa20 	bl	800adac <HAL_GetTick>
 800d96c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d96e:	e008      	b.n	800d982 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d970:	f7fd fa1c 	bl	800adac <HAL_GetTick>
 800d974:	4602      	mov	r2, r0
 800d976:	693b      	ldr	r3, [r7, #16]
 800d978:	1ad3      	subs	r3, r2, r3
 800d97a:	2b02      	cmp	r3, #2
 800d97c:	d901      	bls.n	800d982 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800d97e:	2303      	movs	r3, #3
 800d980:	e167      	b.n	800dc52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d982:	4b0b      	ldr	r3, [pc, #44]	; (800d9b0 <HAL_RCC_OscConfig+0x240>)
 800d984:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d986:	f003 0302 	and.w	r3, r3, #2
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d0f0      	beq.n	800d970 <HAL_RCC_OscConfig+0x200>
 800d98e:	e01b      	b.n	800d9c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d990:	4b09      	ldr	r3, [pc, #36]	; (800d9b8 <HAL_RCC_OscConfig+0x248>)
 800d992:	2200      	movs	r2, #0
 800d994:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d996:	f7fd fa09 	bl	800adac <HAL_GetTick>
 800d99a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d99c:	e00e      	b.n	800d9bc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d99e:	f7fd fa05 	bl	800adac <HAL_GetTick>
 800d9a2:	4602      	mov	r2, r0
 800d9a4:	693b      	ldr	r3, [r7, #16]
 800d9a6:	1ad3      	subs	r3, r2, r3
 800d9a8:	2b02      	cmp	r3, #2
 800d9aa:	d907      	bls.n	800d9bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800d9ac:	2303      	movs	r3, #3
 800d9ae:	e150      	b.n	800dc52 <HAL_RCC_OscConfig+0x4e2>
 800d9b0:	40023800 	.word	0x40023800
 800d9b4:	42470000 	.word	0x42470000
 800d9b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d9bc:	4b88      	ldr	r3, [pc, #544]	; (800dbe0 <HAL_RCC_OscConfig+0x470>)
 800d9be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d9c0:	f003 0302 	and.w	r3, r3, #2
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d1ea      	bne.n	800d99e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	f003 0304 	and.w	r3, r3, #4
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	f000 8097 	beq.w	800db04 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d9d6:	2300      	movs	r3, #0
 800d9d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d9da:	4b81      	ldr	r3, [pc, #516]	; (800dbe0 <HAL_RCC_OscConfig+0x470>)
 800d9dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d10f      	bne.n	800da06 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d9e6:	2300      	movs	r3, #0
 800d9e8:	60bb      	str	r3, [r7, #8]
 800d9ea:	4b7d      	ldr	r3, [pc, #500]	; (800dbe0 <HAL_RCC_OscConfig+0x470>)
 800d9ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9ee:	4a7c      	ldr	r2, [pc, #496]	; (800dbe0 <HAL_RCC_OscConfig+0x470>)
 800d9f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d9f4:	6413      	str	r3, [r2, #64]	; 0x40
 800d9f6:	4b7a      	ldr	r3, [pc, #488]	; (800dbe0 <HAL_RCC_OscConfig+0x470>)
 800d9f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d9fe:	60bb      	str	r3, [r7, #8]
 800da00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800da02:	2301      	movs	r3, #1
 800da04:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800da06:	4b77      	ldr	r3, [pc, #476]	; (800dbe4 <HAL_RCC_OscConfig+0x474>)
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d118      	bne.n	800da44 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800da12:	4b74      	ldr	r3, [pc, #464]	; (800dbe4 <HAL_RCC_OscConfig+0x474>)
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	4a73      	ldr	r2, [pc, #460]	; (800dbe4 <HAL_RCC_OscConfig+0x474>)
 800da18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800da1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800da1e:	f7fd f9c5 	bl	800adac <HAL_GetTick>
 800da22:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800da24:	e008      	b.n	800da38 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800da26:	f7fd f9c1 	bl	800adac <HAL_GetTick>
 800da2a:	4602      	mov	r2, r0
 800da2c:	693b      	ldr	r3, [r7, #16]
 800da2e:	1ad3      	subs	r3, r2, r3
 800da30:	2b02      	cmp	r3, #2
 800da32:	d901      	bls.n	800da38 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800da34:	2303      	movs	r3, #3
 800da36:	e10c      	b.n	800dc52 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800da38:	4b6a      	ldr	r3, [pc, #424]	; (800dbe4 <HAL_RCC_OscConfig+0x474>)
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800da40:	2b00      	cmp	r3, #0
 800da42:	d0f0      	beq.n	800da26 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	689b      	ldr	r3, [r3, #8]
 800da48:	2b01      	cmp	r3, #1
 800da4a:	d106      	bne.n	800da5a <HAL_RCC_OscConfig+0x2ea>
 800da4c:	4b64      	ldr	r3, [pc, #400]	; (800dbe0 <HAL_RCC_OscConfig+0x470>)
 800da4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da50:	4a63      	ldr	r2, [pc, #396]	; (800dbe0 <HAL_RCC_OscConfig+0x470>)
 800da52:	f043 0301 	orr.w	r3, r3, #1
 800da56:	6713      	str	r3, [r2, #112]	; 0x70
 800da58:	e01c      	b.n	800da94 <HAL_RCC_OscConfig+0x324>
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	689b      	ldr	r3, [r3, #8]
 800da5e:	2b05      	cmp	r3, #5
 800da60:	d10c      	bne.n	800da7c <HAL_RCC_OscConfig+0x30c>
 800da62:	4b5f      	ldr	r3, [pc, #380]	; (800dbe0 <HAL_RCC_OscConfig+0x470>)
 800da64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da66:	4a5e      	ldr	r2, [pc, #376]	; (800dbe0 <HAL_RCC_OscConfig+0x470>)
 800da68:	f043 0304 	orr.w	r3, r3, #4
 800da6c:	6713      	str	r3, [r2, #112]	; 0x70
 800da6e:	4b5c      	ldr	r3, [pc, #368]	; (800dbe0 <HAL_RCC_OscConfig+0x470>)
 800da70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da72:	4a5b      	ldr	r2, [pc, #364]	; (800dbe0 <HAL_RCC_OscConfig+0x470>)
 800da74:	f043 0301 	orr.w	r3, r3, #1
 800da78:	6713      	str	r3, [r2, #112]	; 0x70
 800da7a:	e00b      	b.n	800da94 <HAL_RCC_OscConfig+0x324>
 800da7c:	4b58      	ldr	r3, [pc, #352]	; (800dbe0 <HAL_RCC_OscConfig+0x470>)
 800da7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da80:	4a57      	ldr	r2, [pc, #348]	; (800dbe0 <HAL_RCC_OscConfig+0x470>)
 800da82:	f023 0301 	bic.w	r3, r3, #1
 800da86:	6713      	str	r3, [r2, #112]	; 0x70
 800da88:	4b55      	ldr	r3, [pc, #340]	; (800dbe0 <HAL_RCC_OscConfig+0x470>)
 800da8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da8c:	4a54      	ldr	r2, [pc, #336]	; (800dbe0 <HAL_RCC_OscConfig+0x470>)
 800da8e:	f023 0304 	bic.w	r3, r3, #4
 800da92:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	689b      	ldr	r3, [r3, #8]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d015      	beq.n	800dac8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800da9c:	f7fd f986 	bl	800adac <HAL_GetTick>
 800daa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800daa2:	e00a      	b.n	800daba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800daa4:	f7fd f982 	bl	800adac <HAL_GetTick>
 800daa8:	4602      	mov	r2, r0
 800daaa:	693b      	ldr	r3, [r7, #16]
 800daac:	1ad3      	subs	r3, r2, r3
 800daae:	f241 3288 	movw	r2, #5000	; 0x1388
 800dab2:	4293      	cmp	r3, r2
 800dab4:	d901      	bls.n	800daba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800dab6:	2303      	movs	r3, #3
 800dab8:	e0cb      	b.n	800dc52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800daba:	4b49      	ldr	r3, [pc, #292]	; (800dbe0 <HAL_RCC_OscConfig+0x470>)
 800dabc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dabe:	f003 0302 	and.w	r3, r3, #2
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d0ee      	beq.n	800daa4 <HAL_RCC_OscConfig+0x334>
 800dac6:	e014      	b.n	800daf2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800dac8:	f7fd f970 	bl	800adac <HAL_GetTick>
 800dacc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800dace:	e00a      	b.n	800dae6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800dad0:	f7fd f96c 	bl	800adac <HAL_GetTick>
 800dad4:	4602      	mov	r2, r0
 800dad6:	693b      	ldr	r3, [r7, #16]
 800dad8:	1ad3      	subs	r3, r2, r3
 800dada:	f241 3288 	movw	r2, #5000	; 0x1388
 800dade:	4293      	cmp	r3, r2
 800dae0:	d901      	bls.n	800dae6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800dae2:	2303      	movs	r3, #3
 800dae4:	e0b5      	b.n	800dc52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800dae6:	4b3e      	ldr	r3, [pc, #248]	; (800dbe0 <HAL_RCC_OscConfig+0x470>)
 800dae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800daea:	f003 0302 	and.w	r3, r3, #2
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d1ee      	bne.n	800dad0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800daf2:	7dfb      	ldrb	r3, [r7, #23]
 800daf4:	2b01      	cmp	r3, #1
 800daf6:	d105      	bne.n	800db04 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800daf8:	4b39      	ldr	r3, [pc, #228]	; (800dbe0 <HAL_RCC_OscConfig+0x470>)
 800dafa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dafc:	4a38      	ldr	r2, [pc, #224]	; (800dbe0 <HAL_RCC_OscConfig+0x470>)
 800dafe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800db02:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	699b      	ldr	r3, [r3, #24]
 800db08:	2b00      	cmp	r3, #0
 800db0a:	f000 80a1 	beq.w	800dc50 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800db0e:	4b34      	ldr	r3, [pc, #208]	; (800dbe0 <HAL_RCC_OscConfig+0x470>)
 800db10:	689b      	ldr	r3, [r3, #8]
 800db12:	f003 030c 	and.w	r3, r3, #12
 800db16:	2b08      	cmp	r3, #8
 800db18:	d05c      	beq.n	800dbd4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	699b      	ldr	r3, [r3, #24]
 800db1e:	2b02      	cmp	r3, #2
 800db20:	d141      	bne.n	800dba6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800db22:	4b31      	ldr	r3, [pc, #196]	; (800dbe8 <HAL_RCC_OscConfig+0x478>)
 800db24:	2200      	movs	r2, #0
 800db26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800db28:	f7fd f940 	bl	800adac <HAL_GetTick>
 800db2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800db2e:	e008      	b.n	800db42 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800db30:	f7fd f93c 	bl	800adac <HAL_GetTick>
 800db34:	4602      	mov	r2, r0
 800db36:	693b      	ldr	r3, [r7, #16]
 800db38:	1ad3      	subs	r3, r2, r3
 800db3a:	2b02      	cmp	r3, #2
 800db3c:	d901      	bls.n	800db42 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800db3e:	2303      	movs	r3, #3
 800db40:	e087      	b.n	800dc52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800db42:	4b27      	ldr	r3, [pc, #156]	; (800dbe0 <HAL_RCC_OscConfig+0x470>)
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d1f0      	bne.n	800db30 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	69da      	ldr	r2, [r3, #28]
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	6a1b      	ldr	r3, [r3, #32]
 800db56:	431a      	orrs	r2, r3
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db5c:	019b      	lsls	r3, r3, #6
 800db5e:	431a      	orrs	r2, r3
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db64:	085b      	lsrs	r3, r3, #1
 800db66:	3b01      	subs	r3, #1
 800db68:	041b      	lsls	r3, r3, #16
 800db6a:	431a      	orrs	r2, r3
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db70:	061b      	lsls	r3, r3, #24
 800db72:	491b      	ldr	r1, [pc, #108]	; (800dbe0 <HAL_RCC_OscConfig+0x470>)
 800db74:	4313      	orrs	r3, r2
 800db76:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800db78:	4b1b      	ldr	r3, [pc, #108]	; (800dbe8 <HAL_RCC_OscConfig+0x478>)
 800db7a:	2201      	movs	r2, #1
 800db7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800db7e:	f7fd f915 	bl	800adac <HAL_GetTick>
 800db82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800db84:	e008      	b.n	800db98 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800db86:	f7fd f911 	bl	800adac <HAL_GetTick>
 800db8a:	4602      	mov	r2, r0
 800db8c:	693b      	ldr	r3, [r7, #16]
 800db8e:	1ad3      	subs	r3, r2, r3
 800db90:	2b02      	cmp	r3, #2
 800db92:	d901      	bls.n	800db98 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800db94:	2303      	movs	r3, #3
 800db96:	e05c      	b.n	800dc52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800db98:	4b11      	ldr	r3, [pc, #68]	; (800dbe0 <HAL_RCC_OscConfig+0x470>)
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d0f0      	beq.n	800db86 <HAL_RCC_OscConfig+0x416>
 800dba4:	e054      	b.n	800dc50 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800dba6:	4b10      	ldr	r3, [pc, #64]	; (800dbe8 <HAL_RCC_OscConfig+0x478>)
 800dba8:	2200      	movs	r2, #0
 800dbaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800dbac:	f7fd f8fe 	bl	800adac <HAL_GetTick>
 800dbb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800dbb2:	e008      	b.n	800dbc6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800dbb4:	f7fd f8fa 	bl	800adac <HAL_GetTick>
 800dbb8:	4602      	mov	r2, r0
 800dbba:	693b      	ldr	r3, [r7, #16]
 800dbbc:	1ad3      	subs	r3, r2, r3
 800dbbe:	2b02      	cmp	r3, #2
 800dbc0:	d901      	bls.n	800dbc6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800dbc2:	2303      	movs	r3, #3
 800dbc4:	e045      	b.n	800dc52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800dbc6:	4b06      	ldr	r3, [pc, #24]	; (800dbe0 <HAL_RCC_OscConfig+0x470>)
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d1f0      	bne.n	800dbb4 <HAL_RCC_OscConfig+0x444>
 800dbd2:	e03d      	b.n	800dc50 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	699b      	ldr	r3, [r3, #24]
 800dbd8:	2b01      	cmp	r3, #1
 800dbda:	d107      	bne.n	800dbec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800dbdc:	2301      	movs	r3, #1
 800dbde:	e038      	b.n	800dc52 <HAL_RCC_OscConfig+0x4e2>
 800dbe0:	40023800 	.word	0x40023800
 800dbe4:	40007000 	.word	0x40007000
 800dbe8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800dbec:	4b1b      	ldr	r3, [pc, #108]	; (800dc5c <HAL_RCC_OscConfig+0x4ec>)
 800dbee:	685b      	ldr	r3, [r3, #4]
 800dbf0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	699b      	ldr	r3, [r3, #24]
 800dbf6:	2b01      	cmp	r3, #1
 800dbf8:	d028      	beq.n	800dc4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800dc04:	429a      	cmp	r2, r3
 800dc06:	d121      	bne.n	800dc4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800dc12:	429a      	cmp	r2, r3
 800dc14:	d11a      	bne.n	800dc4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800dc16:	68fa      	ldr	r2, [r7, #12]
 800dc18:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800dc1c:	4013      	ands	r3, r2
 800dc1e:	687a      	ldr	r2, [r7, #4]
 800dc20:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800dc22:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800dc24:	4293      	cmp	r3, r2
 800dc26:	d111      	bne.n	800dc4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc32:	085b      	lsrs	r3, r3, #1
 800dc34:	3b01      	subs	r3, #1
 800dc36:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800dc38:	429a      	cmp	r2, r3
 800dc3a:	d107      	bne.n	800dc4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc46:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800dc48:	429a      	cmp	r2, r3
 800dc4a:	d001      	beq.n	800dc50 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800dc4c:	2301      	movs	r3, #1
 800dc4e:	e000      	b.n	800dc52 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800dc50:	2300      	movs	r3, #0
}
 800dc52:	4618      	mov	r0, r3
 800dc54:	3718      	adds	r7, #24
 800dc56:	46bd      	mov	sp, r7
 800dc58:	bd80      	pop	{r7, pc}
 800dc5a:	bf00      	nop
 800dc5c:	40023800 	.word	0x40023800

0800dc60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800dc60:	b580      	push	{r7, lr}
 800dc62:	b084      	sub	sp, #16
 800dc64:	af00      	add	r7, sp, #0
 800dc66:	6078      	str	r0, [r7, #4]
 800dc68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d101      	bne.n	800dc74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800dc70:	2301      	movs	r3, #1
 800dc72:	e0cc      	b.n	800de0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800dc74:	4b68      	ldr	r3, [pc, #416]	; (800de18 <HAL_RCC_ClockConfig+0x1b8>)
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	f003 0307 	and.w	r3, r3, #7
 800dc7c:	683a      	ldr	r2, [r7, #0]
 800dc7e:	429a      	cmp	r2, r3
 800dc80:	d90c      	bls.n	800dc9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800dc82:	4b65      	ldr	r3, [pc, #404]	; (800de18 <HAL_RCC_ClockConfig+0x1b8>)
 800dc84:	683a      	ldr	r2, [r7, #0]
 800dc86:	b2d2      	uxtb	r2, r2
 800dc88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800dc8a:	4b63      	ldr	r3, [pc, #396]	; (800de18 <HAL_RCC_ClockConfig+0x1b8>)
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	f003 0307 	and.w	r3, r3, #7
 800dc92:	683a      	ldr	r2, [r7, #0]
 800dc94:	429a      	cmp	r2, r3
 800dc96:	d001      	beq.n	800dc9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800dc98:	2301      	movs	r3, #1
 800dc9a:	e0b8      	b.n	800de0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	f003 0302 	and.w	r3, r3, #2
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d020      	beq.n	800dcea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	f003 0304 	and.w	r3, r3, #4
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d005      	beq.n	800dcc0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800dcb4:	4b59      	ldr	r3, [pc, #356]	; (800de1c <HAL_RCC_ClockConfig+0x1bc>)
 800dcb6:	689b      	ldr	r3, [r3, #8]
 800dcb8:	4a58      	ldr	r2, [pc, #352]	; (800de1c <HAL_RCC_ClockConfig+0x1bc>)
 800dcba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800dcbe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	f003 0308 	and.w	r3, r3, #8
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d005      	beq.n	800dcd8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800dccc:	4b53      	ldr	r3, [pc, #332]	; (800de1c <HAL_RCC_ClockConfig+0x1bc>)
 800dcce:	689b      	ldr	r3, [r3, #8]
 800dcd0:	4a52      	ldr	r2, [pc, #328]	; (800de1c <HAL_RCC_ClockConfig+0x1bc>)
 800dcd2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800dcd6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800dcd8:	4b50      	ldr	r3, [pc, #320]	; (800de1c <HAL_RCC_ClockConfig+0x1bc>)
 800dcda:	689b      	ldr	r3, [r3, #8]
 800dcdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	689b      	ldr	r3, [r3, #8]
 800dce4:	494d      	ldr	r1, [pc, #308]	; (800de1c <HAL_RCC_ClockConfig+0x1bc>)
 800dce6:	4313      	orrs	r3, r2
 800dce8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	f003 0301 	and.w	r3, r3, #1
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d044      	beq.n	800dd80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	685b      	ldr	r3, [r3, #4]
 800dcfa:	2b01      	cmp	r3, #1
 800dcfc:	d107      	bne.n	800dd0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800dcfe:	4b47      	ldr	r3, [pc, #284]	; (800de1c <HAL_RCC_ClockConfig+0x1bc>)
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d119      	bne.n	800dd3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800dd0a:	2301      	movs	r3, #1
 800dd0c:	e07f      	b.n	800de0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	685b      	ldr	r3, [r3, #4]
 800dd12:	2b02      	cmp	r3, #2
 800dd14:	d003      	beq.n	800dd1e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800dd1a:	2b03      	cmp	r3, #3
 800dd1c:	d107      	bne.n	800dd2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800dd1e:	4b3f      	ldr	r3, [pc, #252]	; (800de1c <HAL_RCC_ClockConfig+0x1bc>)
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d109      	bne.n	800dd3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800dd2a:	2301      	movs	r3, #1
 800dd2c:	e06f      	b.n	800de0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800dd2e:	4b3b      	ldr	r3, [pc, #236]	; (800de1c <HAL_RCC_ClockConfig+0x1bc>)
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	f003 0302 	and.w	r3, r3, #2
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d101      	bne.n	800dd3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800dd3a:	2301      	movs	r3, #1
 800dd3c:	e067      	b.n	800de0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800dd3e:	4b37      	ldr	r3, [pc, #220]	; (800de1c <HAL_RCC_ClockConfig+0x1bc>)
 800dd40:	689b      	ldr	r3, [r3, #8]
 800dd42:	f023 0203 	bic.w	r2, r3, #3
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	685b      	ldr	r3, [r3, #4]
 800dd4a:	4934      	ldr	r1, [pc, #208]	; (800de1c <HAL_RCC_ClockConfig+0x1bc>)
 800dd4c:	4313      	orrs	r3, r2
 800dd4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800dd50:	f7fd f82c 	bl	800adac <HAL_GetTick>
 800dd54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800dd56:	e00a      	b.n	800dd6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800dd58:	f7fd f828 	bl	800adac <HAL_GetTick>
 800dd5c:	4602      	mov	r2, r0
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	1ad3      	subs	r3, r2, r3
 800dd62:	f241 3288 	movw	r2, #5000	; 0x1388
 800dd66:	4293      	cmp	r3, r2
 800dd68:	d901      	bls.n	800dd6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800dd6a:	2303      	movs	r3, #3
 800dd6c:	e04f      	b.n	800de0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800dd6e:	4b2b      	ldr	r3, [pc, #172]	; (800de1c <HAL_RCC_ClockConfig+0x1bc>)
 800dd70:	689b      	ldr	r3, [r3, #8]
 800dd72:	f003 020c 	and.w	r2, r3, #12
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	685b      	ldr	r3, [r3, #4]
 800dd7a:	009b      	lsls	r3, r3, #2
 800dd7c:	429a      	cmp	r2, r3
 800dd7e:	d1eb      	bne.n	800dd58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800dd80:	4b25      	ldr	r3, [pc, #148]	; (800de18 <HAL_RCC_ClockConfig+0x1b8>)
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	f003 0307 	and.w	r3, r3, #7
 800dd88:	683a      	ldr	r2, [r7, #0]
 800dd8a:	429a      	cmp	r2, r3
 800dd8c:	d20c      	bcs.n	800dda8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800dd8e:	4b22      	ldr	r3, [pc, #136]	; (800de18 <HAL_RCC_ClockConfig+0x1b8>)
 800dd90:	683a      	ldr	r2, [r7, #0]
 800dd92:	b2d2      	uxtb	r2, r2
 800dd94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800dd96:	4b20      	ldr	r3, [pc, #128]	; (800de18 <HAL_RCC_ClockConfig+0x1b8>)
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	f003 0307 	and.w	r3, r3, #7
 800dd9e:	683a      	ldr	r2, [r7, #0]
 800dda0:	429a      	cmp	r2, r3
 800dda2:	d001      	beq.n	800dda8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800dda4:	2301      	movs	r3, #1
 800dda6:	e032      	b.n	800de0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	f003 0304 	and.w	r3, r3, #4
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d008      	beq.n	800ddc6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ddb4:	4b19      	ldr	r3, [pc, #100]	; (800de1c <HAL_RCC_ClockConfig+0x1bc>)
 800ddb6:	689b      	ldr	r3, [r3, #8]
 800ddb8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	68db      	ldr	r3, [r3, #12]
 800ddc0:	4916      	ldr	r1, [pc, #88]	; (800de1c <HAL_RCC_ClockConfig+0x1bc>)
 800ddc2:	4313      	orrs	r3, r2
 800ddc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	f003 0308 	and.w	r3, r3, #8
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d009      	beq.n	800dde6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800ddd2:	4b12      	ldr	r3, [pc, #72]	; (800de1c <HAL_RCC_ClockConfig+0x1bc>)
 800ddd4:	689b      	ldr	r3, [r3, #8]
 800ddd6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	691b      	ldr	r3, [r3, #16]
 800ddde:	00db      	lsls	r3, r3, #3
 800dde0:	490e      	ldr	r1, [pc, #56]	; (800de1c <HAL_RCC_ClockConfig+0x1bc>)
 800dde2:	4313      	orrs	r3, r2
 800dde4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800dde6:	f000 f821 	bl	800de2c <HAL_RCC_GetSysClockFreq>
 800ddea:	4602      	mov	r2, r0
 800ddec:	4b0b      	ldr	r3, [pc, #44]	; (800de1c <HAL_RCC_ClockConfig+0x1bc>)
 800ddee:	689b      	ldr	r3, [r3, #8]
 800ddf0:	091b      	lsrs	r3, r3, #4
 800ddf2:	f003 030f 	and.w	r3, r3, #15
 800ddf6:	490a      	ldr	r1, [pc, #40]	; (800de20 <HAL_RCC_ClockConfig+0x1c0>)
 800ddf8:	5ccb      	ldrb	r3, [r1, r3]
 800ddfa:	fa22 f303 	lsr.w	r3, r2, r3
 800ddfe:	4a09      	ldr	r2, [pc, #36]	; (800de24 <HAL_RCC_ClockConfig+0x1c4>)
 800de00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800de02:	4b09      	ldr	r3, [pc, #36]	; (800de28 <HAL_RCC_ClockConfig+0x1c8>)
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	4618      	mov	r0, r3
 800de08:	f7fc ff8c 	bl	800ad24 <HAL_InitTick>

  return HAL_OK;
 800de0c:	2300      	movs	r3, #0
}
 800de0e:	4618      	mov	r0, r3
 800de10:	3710      	adds	r7, #16
 800de12:	46bd      	mov	sp, r7
 800de14:	bd80      	pop	{r7, pc}
 800de16:	bf00      	nop
 800de18:	40023c00 	.word	0x40023c00
 800de1c:	40023800 	.word	0x40023800
 800de20:	0802f7c0 	.word	0x0802f7c0
 800de24:	10000050 	.word	0x10000050
 800de28:	10000054 	.word	0x10000054

0800de2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800de2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800de30:	b094      	sub	sp, #80	; 0x50
 800de32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800de34:	2300      	movs	r3, #0
 800de36:	647b      	str	r3, [r7, #68]	; 0x44
 800de38:	2300      	movs	r3, #0
 800de3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800de3c:	2300      	movs	r3, #0
 800de3e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800de40:	2300      	movs	r3, #0
 800de42:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800de44:	4b79      	ldr	r3, [pc, #484]	; (800e02c <HAL_RCC_GetSysClockFreq+0x200>)
 800de46:	689b      	ldr	r3, [r3, #8]
 800de48:	f003 030c 	and.w	r3, r3, #12
 800de4c:	2b08      	cmp	r3, #8
 800de4e:	d00d      	beq.n	800de6c <HAL_RCC_GetSysClockFreq+0x40>
 800de50:	2b08      	cmp	r3, #8
 800de52:	f200 80e1 	bhi.w	800e018 <HAL_RCC_GetSysClockFreq+0x1ec>
 800de56:	2b00      	cmp	r3, #0
 800de58:	d002      	beq.n	800de60 <HAL_RCC_GetSysClockFreq+0x34>
 800de5a:	2b04      	cmp	r3, #4
 800de5c:	d003      	beq.n	800de66 <HAL_RCC_GetSysClockFreq+0x3a>
 800de5e:	e0db      	b.n	800e018 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800de60:	4b73      	ldr	r3, [pc, #460]	; (800e030 <HAL_RCC_GetSysClockFreq+0x204>)
 800de62:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800de64:	e0db      	b.n	800e01e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800de66:	4b73      	ldr	r3, [pc, #460]	; (800e034 <HAL_RCC_GetSysClockFreq+0x208>)
 800de68:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800de6a:	e0d8      	b.n	800e01e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800de6c:	4b6f      	ldr	r3, [pc, #444]	; (800e02c <HAL_RCC_GetSysClockFreq+0x200>)
 800de6e:	685b      	ldr	r3, [r3, #4]
 800de70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800de74:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800de76:	4b6d      	ldr	r3, [pc, #436]	; (800e02c <HAL_RCC_GetSysClockFreq+0x200>)
 800de78:	685b      	ldr	r3, [r3, #4]
 800de7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d063      	beq.n	800df4a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800de82:	4b6a      	ldr	r3, [pc, #424]	; (800e02c <HAL_RCC_GetSysClockFreq+0x200>)
 800de84:	685b      	ldr	r3, [r3, #4]
 800de86:	099b      	lsrs	r3, r3, #6
 800de88:	2200      	movs	r2, #0
 800de8a:	63bb      	str	r3, [r7, #56]	; 0x38
 800de8c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800de8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de94:	633b      	str	r3, [r7, #48]	; 0x30
 800de96:	2300      	movs	r3, #0
 800de98:	637b      	str	r3, [r7, #52]	; 0x34
 800de9a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800de9e:	4622      	mov	r2, r4
 800dea0:	462b      	mov	r3, r5
 800dea2:	f04f 0000 	mov.w	r0, #0
 800dea6:	f04f 0100 	mov.w	r1, #0
 800deaa:	0159      	lsls	r1, r3, #5
 800deac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800deb0:	0150      	lsls	r0, r2, #5
 800deb2:	4602      	mov	r2, r0
 800deb4:	460b      	mov	r3, r1
 800deb6:	4621      	mov	r1, r4
 800deb8:	1a51      	subs	r1, r2, r1
 800deba:	6139      	str	r1, [r7, #16]
 800debc:	4629      	mov	r1, r5
 800debe:	eb63 0301 	sbc.w	r3, r3, r1
 800dec2:	617b      	str	r3, [r7, #20]
 800dec4:	f04f 0200 	mov.w	r2, #0
 800dec8:	f04f 0300 	mov.w	r3, #0
 800decc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ded0:	4659      	mov	r1, fp
 800ded2:	018b      	lsls	r3, r1, #6
 800ded4:	4651      	mov	r1, sl
 800ded6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800deda:	4651      	mov	r1, sl
 800dedc:	018a      	lsls	r2, r1, #6
 800dede:	4651      	mov	r1, sl
 800dee0:	ebb2 0801 	subs.w	r8, r2, r1
 800dee4:	4659      	mov	r1, fp
 800dee6:	eb63 0901 	sbc.w	r9, r3, r1
 800deea:	f04f 0200 	mov.w	r2, #0
 800deee:	f04f 0300 	mov.w	r3, #0
 800def2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800def6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800defa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800defe:	4690      	mov	r8, r2
 800df00:	4699      	mov	r9, r3
 800df02:	4623      	mov	r3, r4
 800df04:	eb18 0303 	adds.w	r3, r8, r3
 800df08:	60bb      	str	r3, [r7, #8]
 800df0a:	462b      	mov	r3, r5
 800df0c:	eb49 0303 	adc.w	r3, r9, r3
 800df10:	60fb      	str	r3, [r7, #12]
 800df12:	f04f 0200 	mov.w	r2, #0
 800df16:	f04f 0300 	mov.w	r3, #0
 800df1a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800df1e:	4629      	mov	r1, r5
 800df20:	024b      	lsls	r3, r1, #9
 800df22:	4621      	mov	r1, r4
 800df24:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800df28:	4621      	mov	r1, r4
 800df2a:	024a      	lsls	r2, r1, #9
 800df2c:	4610      	mov	r0, r2
 800df2e:	4619      	mov	r1, r3
 800df30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df32:	2200      	movs	r2, #0
 800df34:	62bb      	str	r3, [r7, #40]	; 0x28
 800df36:	62fa      	str	r2, [r7, #44]	; 0x2c
 800df38:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800df3c:	f7f2 fe64 	bl	8000c08 <__aeabi_uldivmod>
 800df40:	4602      	mov	r2, r0
 800df42:	460b      	mov	r3, r1
 800df44:	4613      	mov	r3, r2
 800df46:	64fb      	str	r3, [r7, #76]	; 0x4c
 800df48:	e058      	b.n	800dffc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800df4a:	4b38      	ldr	r3, [pc, #224]	; (800e02c <HAL_RCC_GetSysClockFreq+0x200>)
 800df4c:	685b      	ldr	r3, [r3, #4]
 800df4e:	099b      	lsrs	r3, r3, #6
 800df50:	2200      	movs	r2, #0
 800df52:	4618      	mov	r0, r3
 800df54:	4611      	mov	r1, r2
 800df56:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800df5a:	623b      	str	r3, [r7, #32]
 800df5c:	2300      	movs	r3, #0
 800df5e:	627b      	str	r3, [r7, #36]	; 0x24
 800df60:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800df64:	4642      	mov	r2, r8
 800df66:	464b      	mov	r3, r9
 800df68:	f04f 0000 	mov.w	r0, #0
 800df6c:	f04f 0100 	mov.w	r1, #0
 800df70:	0159      	lsls	r1, r3, #5
 800df72:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800df76:	0150      	lsls	r0, r2, #5
 800df78:	4602      	mov	r2, r0
 800df7a:	460b      	mov	r3, r1
 800df7c:	4641      	mov	r1, r8
 800df7e:	ebb2 0a01 	subs.w	sl, r2, r1
 800df82:	4649      	mov	r1, r9
 800df84:	eb63 0b01 	sbc.w	fp, r3, r1
 800df88:	f04f 0200 	mov.w	r2, #0
 800df8c:	f04f 0300 	mov.w	r3, #0
 800df90:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800df94:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800df98:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800df9c:	ebb2 040a 	subs.w	r4, r2, sl
 800dfa0:	eb63 050b 	sbc.w	r5, r3, fp
 800dfa4:	f04f 0200 	mov.w	r2, #0
 800dfa8:	f04f 0300 	mov.w	r3, #0
 800dfac:	00eb      	lsls	r3, r5, #3
 800dfae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800dfb2:	00e2      	lsls	r2, r4, #3
 800dfb4:	4614      	mov	r4, r2
 800dfb6:	461d      	mov	r5, r3
 800dfb8:	4643      	mov	r3, r8
 800dfba:	18e3      	adds	r3, r4, r3
 800dfbc:	603b      	str	r3, [r7, #0]
 800dfbe:	464b      	mov	r3, r9
 800dfc0:	eb45 0303 	adc.w	r3, r5, r3
 800dfc4:	607b      	str	r3, [r7, #4]
 800dfc6:	f04f 0200 	mov.w	r2, #0
 800dfca:	f04f 0300 	mov.w	r3, #0
 800dfce:	e9d7 4500 	ldrd	r4, r5, [r7]
 800dfd2:	4629      	mov	r1, r5
 800dfd4:	028b      	lsls	r3, r1, #10
 800dfd6:	4621      	mov	r1, r4
 800dfd8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800dfdc:	4621      	mov	r1, r4
 800dfde:	028a      	lsls	r2, r1, #10
 800dfe0:	4610      	mov	r0, r2
 800dfe2:	4619      	mov	r1, r3
 800dfe4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dfe6:	2200      	movs	r2, #0
 800dfe8:	61bb      	str	r3, [r7, #24]
 800dfea:	61fa      	str	r2, [r7, #28]
 800dfec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800dff0:	f7f2 fe0a 	bl	8000c08 <__aeabi_uldivmod>
 800dff4:	4602      	mov	r2, r0
 800dff6:	460b      	mov	r3, r1
 800dff8:	4613      	mov	r3, r2
 800dffa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800dffc:	4b0b      	ldr	r3, [pc, #44]	; (800e02c <HAL_RCC_GetSysClockFreq+0x200>)
 800dffe:	685b      	ldr	r3, [r3, #4]
 800e000:	0c1b      	lsrs	r3, r3, #16
 800e002:	f003 0303 	and.w	r3, r3, #3
 800e006:	3301      	adds	r3, #1
 800e008:	005b      	lsls	r3, r3, #1
 800e00a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800e00c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e00e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e010:	fbb2 f3f3 	udiv	r3, r2, r3
 800e014:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800e016:	e002      	b.n	800e01e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800e018:	4b05      	ldr	r3, [pc, #20]	; (800e030 <HAL_RCC_GetSysClockFreq+0x204>)
 800e01a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800e01c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800e01e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800e020:	4618      	mov	r0, r3
 800e022:	3750      	adds	r7, #80	; 0x50
 800e024:	46bd      	mov	sp, r7
 800e026:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e02a:	bf00      	nop
 800e02c:	40023800 	.word	0x40023800
 800e030:	00f42400 	.word	0x00f42400
 800e034:	007a1200 	.word	0x007a1200

0800e038 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e038:	b480      	push	{r7}
 800e03a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800e03c:	4b03      	ldr	r3, [pc, #12]	; (800e04c <HAL_RCC_GetHCLKFreq+0x14>)
 800e03e:	681b      	ldr	r3, [r3, #0]
}
 800e040:	4618      	mov	r0, r3
 800e042:	46bd      	mov	sp, r7
 800e044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e048:	4770      	bx	lr
 800e04a:	bf00      	nop
 800e04c:	10000050 	.word	0x10000050

0800e050 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e050:	b580      	push	{r7, lr}
 800e052:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800e054:	f7ff fff0 	bl	800e038 <HAL_RCC_GetHCLKFreq>
 800e058:	4602      	mov	r2, r0
 800e05a:	4b05      	ldr	r3, [pc, #20]	; (800e070 <HAL_RCC_GetPCLK1Freq+0x20>)
 800e05c:	689b      	ldr	r3, [r3, #8]
 800e05e:	0a9b      	lsrs	r3, r3, #10
 800e060:	f003 0307 	and.w	r3, r3, #7
 800e064:	4903      	ldr	r1, [pc, #12]	; (800e074 <HAL_RCC_GetPCLK1Freq+0x24>)
 800e066:	5ccb      	ldrb	r3, [r1, r3]
 800e068:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e06c:	4618      	mov	r0, r3
 800e06e:	bd80      	pop	{r7, pc}
 800e070:	40023800 	.word	0x40023800
 800e074:	0802f7d0 	.word	0x0802f7d0

0800e078 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e078:	b580      	push	{r7, lr}
 800e07a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800e07c:	f7ff ffdc 	bl	800e038 <HAL_RCC_GetHCLKFreq>
 800e080:	4602      	mov	r2, r0
 800e082:	4b05      	ldr	r3, [pc, #20]	; (800e098 <HAL_RCC_GetPCLK2Freq+0x20>)
 800e084:	689b      	ldr	r3, [r3, #8]
 800e086:	0b5b      	lsrs	r3, r3, #13
 800e088:	f003 0307 	and.w	r3, r3, #7
 800e08c:	4903      	ldr	r1, [pc, #12]	; (800e09c <HAL_RCC_GetPCLK2Freq+0x24>)
 800e08e:	5ccb      	ldrb	r3, [r1, r3]
 800e090:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e094:	4618      	mov	r0, r3
 800e096:	bd80      	pop	{r7, pc}
 800e098:	40023800 	.word	0x40023800
 800e09c:	0802f7d0 	.word	0x0802f7d0

0800e0a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e0a0:	b580      	push	{r7, lr}
 800e0a2:	b082      	sub	sp, #8
 800e0a4:	af00      	add	r7, sp, #0
 800e0a6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d101      	bne.n	800e0b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e0ae:	2301      	movs	r3, #1
 800e0b0:	e07b      	b.n	800e1aa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d108      	bne.n	800e0cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	685b      	ldr	r3, [r3, #4]
 800e0be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e0c2:	d009      	beq.n	800e0d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	2200      	movs	r2, #0
 800e0c8:	61da      	str	r2, [r3, #28]
 800e0ca:	e005      	b.n	800e0d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	2200      	movs	r2, #0
 800e0d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	2200      	movs	r2, #0
 800e0d6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	2200      	movs	r2, #0
 800e0dc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e0e4:	b2db      	uxtb	r3, r3
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d106      	bne.n	800e0f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	2200      	movs	r2, #0
 800e0ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e0f2:	6878      	ldr	r0, [r7, #4]
 800e0f4:	f7fb fe06 	bl	8009d04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	2202      	movs	r2, #2
 800e0fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	681a      	ldr	r2, [r3, #0]
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e10e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	685b      	ldr	r3, [r3, #4]
 800e114:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	689b      	ldr	r3, [r3, #8]
 800e11c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800e120:	431a      	orrs	r2, r3
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	68db      	ldr	r3, [r3, #12]
 800e126:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e12a:	431a      	orrs	r2, r3
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	691b      	ldr	r3, [r3, #16]
 800e130:	f003 0302 	and.w	r3, r3, #2
 800e134:	431a      	orrs	r2, r3
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	695b      	ldr	r3, [r3, #20]
 800e13a:	f003 0301 	and.w	r3, r3, #1
 800e13e:	431a      	orrs	r2, r3
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	699b      	ldr	r3, [r3, #24]
 800e144:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e148:	431a      	orrs	r2, r3
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	69db      	ldr	r3, [r3, #28]
 800e14e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e152:	431a      	orrs	r2, r3
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	6a1b      	ldr	r3, [r3, #32]
 800e158:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e15c:	ea42 0103 	orr.w	r1, r2, r3
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e164:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	430a      	orrs	r2, r1
 800e16e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	699b      	ldr	r3, [r3, #24]
 800e174:	0c1b      	lsrs	r3, r3, #16
 800e176:	f003 0104 	and.w	r1, r3, #4
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e17e:	f003 0210 	and.w	r2, r3, #16
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	430a      	orrs	r2, r1
 800e188:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	69da      	ldr	r2, [r3, #28]
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e198:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	2200      	movs	r2, #0
 800e19e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	2201      	movs	r2, #1
 800e1a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800e1a8:	2300      	movs	r3, #0
}
 800e1aa:	4618      	mov	r0, r3
 800e1ac:	3708      	adds	r7, #8
 800e1ae:	46bd      	mov	sp, r7
 800e1b0:	bd80      	pop	{r7, pc}

0800e1b2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e1b2:	b580      	push	{r7, lr}
 800e1b4:	b082      	sub	sp, #8
 800e1b6:	af00      	add	r7, sp, #0
 800e1b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d101      	bne.n	800e1c4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e1c0:	2301      	movs	r3, #1
 800e1c2:	e041      	b.n	800e248 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e1ca:	b2db      	uxtb	r3, r3
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d106      	bne.n	800e1de <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	2200      	movs	r2, #0
 800e1d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e1d8:	6878      	ldr	r0, [r7, #4]
 800e1da:	f7fc f99d 	bl	800a518 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	2202      	movs	r2, #2
 800e1e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	681a      	ldr	r2, [r3, #0]
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	3304      	adds	r3, #4
 800e1ee:	4619      	mov	r1, r3
 800e1f0:	4610      	mov	r0, r2
 800e1f2:	f000 fe79 	bl	800eee8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	2201      	movs	r2, #1
 800e1fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	2201      	movs	r2, #1
 800e202:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	2201      	movs	r2, #1
 800e20a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	2201      	movs	r2, #1
 800e212:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	2201      	movs	r2, #1
 800e21a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	2201      	movs	r2, #1
 800e222:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	2201      	movs	r2, #1
 800e22a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	2201      	movs	r2, #1
 800e232:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	2201      	movs	r2, #1
 800e23a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	2201      	movs	r2, #1
 800e242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e246:	2300      	movs	r3, #0
}
 800e248:	4618      	mov	r0, r3
 800e24a:	3708      	adds	r7, #8
 800e24c:	46bd      	mov	sp, r7
 800e24e:	bd80      	pop	{r7, pc}

0800e250 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e250:	b480      	push	{r7}
 800e252:	b085      	sub	sp, #20
 800e254:	af00      	add	r7, sp, #0
 800e256:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e25e:	b2db      	uxtb	r3, r3
 800e260:	2b01      	cmp	r3, #1
 800e262:	d001      	beq.n	800e268 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e264:	2301      	movs	r3, #1
 800e266:	e04e      	b.n	800e306 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	2202      	movs	r2, #2
 800e26c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	68da      	ldr	r2, [r3, #12]
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	f042 0201 	orr.w	r2, r2, #1
 800e27e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	4a23      	ldr	r2, [pc, #140]	; (800e314 <HAL_TIM_Base_Start_IT+0xc4>)
 800e286:	4293      	cmp	r3, r2
 800e288:	d022      	beq.n	800e2d0 <HAL_TIM_Base_Start_IT+0x80>
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e292:	d01d      	beq.n	800e2d0 <HAL_TIM_Base_Start_IT+0x80>
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	4a1f      	ldr	r2, [pc, #124]	; (800e318 <HAL_TIM_Base_Start_IT+0xc8>)
 800e29a:	4293      	cmp	r3, r2
 800e29c:	d018      	beq.n	800e2d0 <HAL_TIM_Base_Start_IT+0x80>
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	4a1e      	ldr	r2, [pc, #120]	; (800e31c <HAL_TIM_Base_Start_IT+0xcc>)
 800e2a4:	4293      	cmp	r3, r2
 800e2a6:	d013      	beq.n	800e2d0 <HAL_TIM_Base_Start_IT+0x80>
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	4a1c      	ldr	r2, [pc, #112]	; (800e320 <HAL_TIM_Base_Start_IT+0xd0>)
 800e2ae:	4293      	cmp	r3, r2
 800e2b0:	d00e      	beq.n	800e2d0 <HAL_TIM_Base_Start_IT+0x80>
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	4a1b      	ldr	r2, [pc, #108]	; (800e324 <HAL_TIM_Base_Start_IT+0xd4>)
 800e2b8:	4293      	cmp	r3, r2
 800e2ba:	d009      	beq.n	800e2d0 <HAL_TIM_Base_Start_IT+0x80>
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	4a19      	ldr	r2, [pc, #100]	; (800e328 <HAL_TIM_Base_Start_IT+0xd8>)
 800e2c2:	4293      	cmp	r3, r2
 800e2c4:	d004      	beq.n	800e2d0 <HAL_TIM_Base_Start_IT+0x80>
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	4a18      	ldr	r2, [pc, #96]	; (800e32c <HAL_TIM_Base_Start_IT+0xdc>)
 800e2cc:	4293      	cmp	r3, r2
 800e2ce:	d111      	bne.n	800e2f4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	689b      	ldr	r3, [r3, #8]
 800e2d6:	f003 0307 	and.w	r3, r3, #7
 800e2da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	2b06      	cmp	r3, #6
 800e2e0:	d010      	beq.n	800e304 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	681a      	ldr	r2, [r3, #0]
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	f042 0201 	orr.w	r2, r2, #1
 800e2f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e2f2:	e007      	b.n	800e304 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	681a      	ldr	r2, [r3, #0]
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	f042 0201 	orr.w	r2, r2, #1
 800e302:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e304:	2300      	movs	r3, #0
}
 800e306:	4618      	mov	r0, r3
 800e308:	3714      	adds	r7, #20
 800e30a:	46bd      	mov	sp, r7
 800e30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e310:	4770      	bx	lr
 800e312:	bf00      	nop
 800e314:	40010000 	.word	0x40010000
 800e318:	40000400 	.word	0x40000400
 800e31c:	40000800 	.word	0x40000800
 800e320:	40000c00 	.word	0x40000c00
 800e324:	40010400 	.word	0x40010400
 800e328:	40014000 	.word	0x40014000
 800e32c:	40001800 	.word	0x40001800

0800e330 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e330:	b580      	push	{r7, lr}
 800e332:	b082      	sub	sp, #8
 800e334:	af00      	add	r7, sp, #0
 800e336:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d101      	bne.n	800e342 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e33e:	2301      	movs	r3, #1
 800e340:	e041      	b.n	800e3c6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e348:	b2db      	uxtb	r3, r3
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d106      	bne.n	800e35c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	2200      	movs	r2, #0
 800e352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e356:	6878      	ldr	r0, [r7, #4]
 800e358:	f7fc f998 	bl	800a68c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	2202      	movs	r2, #2
 800e360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	681a      	ldr	r2, [r3, #0]
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	3304      	adds	r3, #4
 800e36c:	4619      	mov	r1, r3
 800e36e:	4610      	mov	r0, r2
 800e370:	f000 fdba 	bl	800eee8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	2201      	movs	r2, #1
 800e378:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	2201      	movs	r2, #1
 800e380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	2201      	movs	r2, #1
 800e388:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	2201      	movs	r2, #1
 800e390:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	2201      	movs	r2, #1
 800e398:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	2201      	movs	r2, #1
 800e3a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	2201      	movs	r2, #1
 800e3a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	2201      	movs	r2, #1
 800e3b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	2201      	movs	r2, #1
 800e3b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	2201      	movs	r2, #1
 800e3c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e3c4:	2300      	movs	r3, #0
}
 800e3c6:	4618      	mov	r0, r3
 800e3c8:	3708      	adds	r7, #8
 800e3ca:	46bd      	mov	sp, r7
 800e3cc:	bd80      	pop	{r7, pc}
	...

0800e3d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e3d0:	b580      	push	{r7, lr}
 800e3d2:	b084      	sub	sp, #16
 800e3d4:	af00      	add	r7, sp, #0
 800e3d6:	6078      	str	r0, [r7, #4]
 800e3d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e3da:	683b      	ldr	r3, [r7, #0]
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d109      	bne.n	800e3f4 <HAL_TIM_PWM_Start+0x24>
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e3e6:	b2db      	uxtb	r3, r3
 800e3e8:	2b01      	cmp	r3, #1
 800e3ea:	bf14      	ite	ne
 800e3ec:	2301      	movne	r3, #1
 800e3ee:	2300      	moveq	r3, #0
 800e3f0:	b2db      	uxtb	r3, r3
 800e3f2:	e022      	b.n	800e43a <HAL_TIM_PWM_Start+0x6a>
 800e3f4:	683b      	ldr	r3, [r7, #0]
 800e3f6:	2b04      	cmp	r3, #4
 800e3f8:	d109      	bne.n	800e40e <HAL_TIM_PWM_Start+0x3e>
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800e400:	b2db      	uxtb	r3, r3
 800e402:	2b01      	cmp	r3, #1
 800e404:	bf14      	ite	ne
 800e406:	2301      	movne	r3, #1
 800e408:	2300      	moveq	r3, #0
 800e40a:	b2db      	uxtb	r3, r3
 800e40c:	e015      	b.n	800e43a <HAL_TIM_PWM_Start+0x6a>
 800e40e:	683b      	ldr	r3, [r7, #0]
 800e410:	2b08      	cmp	r3, #8
 800e412:	d109      	bne.n	800e428 <HAL_TIM_PWM_Start+0x58>
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e41a:	b2db      	uxtb	r3, r3
 800e41c:	2b01      	cmp	r3, #1
 800e41e:	bf14      	ite	ne
 800e420:	2301      	movne	r3, #1
 800e422:	2300      	moveq	r3, #0
 800e424:	b2db      	uxtb	r3, r3
 800e426:	e008      	b.n	800e43a <HAL_TIM_PWM_Start+0x6a>
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e42e:	b2db      	uxtb	r3, r3
 800e430:	2b01      	cmp	r3, #1
 800e432:	bf14      	ite	ne
 800e434:	2301      	movne	r3, #1
 800e436:	2300      	moveq	r3, #0
 800e438:	b2db      	uxtb	r3, r3
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d001      	beq.n	800e442 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800e43e:	2301      	movs	r3, #1
 800e440:	e07c      	b.n	800e53c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e442:	683b      	ldr	r3, [r7, #0]
 800e444:	2b00      	cmp	r3, #0
 800e446:	d104      	bne.n	800e452 <HAL_TIM_PWM_Start+0x82>
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	2202      	movs	r2, #2
 800e44c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e450:	e013      	b.n	800e47a <HAL_TIM_PWM_Start+0xaa>
 800e452:	683b      	ldr	r3, [r7, #0]
 800e454:	2b04      	cmp	r3, #4
 800e456:	d104      	bne.n	800e462 <HAL_TIM_PWM_Start+0x92>
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	2202      	movs	r2, #2
 800e45c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e460:	e00b      	b.n	800e47a <HAL_TIM_PWM_Start+0xaa>
 800e462:	683b      	ldr	r3, [r7, #0]
 800e464:	2b08      	cmp	r3, #8
 800e466:	d104      	bne.n	800e472 <HAL_TIM_PWM_Start+0xa2>
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	2202      	movs	r2, #2
 800e46c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e470:	e003      	b.n	800e47a <HAL_TIM_PWM_Start+0xaa>
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	2202      	movs	r2, #2
 800e476:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	2201      	movs	r2, #1
 800e480:	6839      	ldr	r1, [r7, #0]
 800e482:	4618      	mov	r0, r3
 800e484:	f001 f944 	bl	800f710 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	4a2d      	ldr	r2, [pc, #180]	; (800e544 <HAL_TIM_PWM_Start+0x174>)
 800e48e:	4293      	cmp	r3, r2
 800e490:	d004      	beq.n	800e49c <HAL_TIM_PWM_Start+0xcc>
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	4a2c      	ldr	r2, [pc, #176]	; (800e548 <HAL_TIM_PWM_Start+0x178>)
 800e498:	4293      	cmp	r3, r2
 800e49a:	d101      	bne.n	800e4a0 <HAL_TIM_PWM_Start+0xd0>
 800e49c:	2301      	movs	r3, #1
 800e49e:	e000      	b.n	800e4a2 <HAL_TIM_PWM_Start+0xd2>
 800e4a0:	2300      	movs	r3, #0
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d007      	beq.n	800e4b6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e4b4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	4a22      	ldr	r2, [pc, #136]	; (800e544 <HAL_TIM_PWM_Start+0x174>)
 800e4bc:	4293      	cmp	r3, r2
 800e4be:	d022      	beq.n	800e506 <HAL_TIM_PWM_Start+0x136>
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e4c8:	d01d      	beq.n	800e506 <HAL_TIM_PWM_Start+0x136>
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	4a1f      	ldr	r2, [pc, #124]	; (800e54c <HAL_TIM_PWM_Start+0x17c>)
 800e4d0:	4293      	cmp	r3, r2
 800e4d2:	d018      	beq.n	800e506 <HAL_TIM_PWM_Start+0x136>
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	4a1d      	ldr	r2, [pc, #116]	; (800e550 <HAL_TIM_PWM_Start+0x180>)
 800e4da:	4293      	cmp	r3, r2
 800e4dc:	d013      	beq.n	800e506 <HAL_TIM_PWM_Start+0x136>
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	4a1c      	ldr	r2, [pc, #112]	; (800e554 <HAL_TIM_PWM_Start+0x184>)
 800e4e4:	4293      	cmp	r3, r2
 800e4e6:	d00e      	beq.n	800e506 <HAL_TIM_PWM_Start+0x136>
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	4a16      	ldr	r2, [pc, #88]	; (800e548 <HAL_TIM_PWM_Start+0x178>)
 800e4ee:	4293      	cmp	r3, r2
 800e4f0:	d009      	beq.n	800e506 <HAL_TIM_PWM_Start+0x136>
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	4a18      	ldr	r2, [pc, #96]	; (800e558 <HAL_TIM_PWM_Start+0x188>)
 800e4f8:	4293      	cmp	r3, r2
 800e4fa:	d004      	beq.n	800e506 <HAL_TIM_PWM_Start+0x136>
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	4a16      	ldr	r2, [pc, #88]	; (800e55c <HAL_TIM_PWM_Start+0x18c>)
 800e502:	4293      	cmp	r3, r2
 800e504:	d111      	bne.n	800e52a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	689b      	ldr	r3, [r3, #8]
 800e50c:	f003 0307 	and.w	r3, r3, #7
 800e510:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	2b06      	cmp	r3, #6
 800e516:	d010      	beq.n	800e53a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	681a      	ldr	r2, [r3, #0]
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	f042 0201 	orr.w	r2, r2, #1
 800e526:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e528:	e007      	b.n	800e53a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	681a      	ldr	r2, [r3, #0]
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	f042 0201 	orr.w	r2, r2, #1
 800e538:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e53a:	2300      	movs	r3, #0
}
 800e53c:	4618      	mov	r0, r3
 800e53e:	3710      	adds	r7, #16
 800e540:	46bd      	mov	sp, r7
 800e542:	bd80      	pop	{r7, pc}
 800e544:	40010000 	.word	0x40010000
 800e548:	40010400 	.word	0x40010400
 800e54c:	40000400 	.word	0x40000400
 800e550:	40000800 	.word	0x40000800
 800e554:	40000c00 	.word	0x40000c00
 800e558:	40014000 	.word	0x40014000
 800e55c:	40001800 	.word	0x40001800

0800e560 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800e560:	b580      	push	{r7, lr}
 800e562:	b082      	sub	sp, #8
 800e564:	af00      	add	r7, sp, #0
 800e566:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d101      	bne.n	800e572 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800e56e:	2301      	movs	r3, #1
 800e570:	e041      	b.n	800e5f6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e578:	b2db      	uxtb	r3, r3
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d106      	bne.n	800e58c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	2200      	movs	r2, #0
 800e582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800e586:	6878      	ldr	r0, [r7, #4]
 800e588:	f7fc f830 	bl	800a5ec <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	2202      	movs	r2, #2
 800e590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	681a      	ldr	r2, [r3, #0]
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	3304      	adds	r3, #4
 800e59c:	4619      	mov	r1, r3
 800e59e:	4610      	mov	r0, r2
 800e5a0:	f000 fca2 	bl	800eee8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	2201      	movs	r2, #1
 800e5a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	2201      	movs	r2, #1
 800e5b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	2201      	movs	r2, #1
 800e5b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	2201      	movs	r2, #1
 800e5c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	2201      	movs	r2, #1
 800e5c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	2201      	movs	r2, #1
 800e5d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	2201      	movs	r2, #1
 800e5d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	2201      	movs	r2, #1
 800e5e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	2201      	movs	r2, #1
 800e5e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	2201      	movs	r2, #1
 800e5f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e5f4:	2300      	movs	r3, #0
}
 800e5f6:	4618      	mov	r0, r3
 800e5f8:	3708      	adds	r7, #8
 800e5fa:	46bd      	mov	sp, r7
 800e5fc:	bd80      	pop	{r7, pc}
	...

0800e600 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e600:	b580      	push	{r7, lr}
 800e602:	b084      	sub	sp, #16
 800e604:	af00      	add	r7, sp, #0
 800e606:	6078      	str	r0, [r7, #4]
 800e608:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e60a:	2300      	movs	r3, #0
 800e60c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800e60e:	683b      	ldr	r3, [r7, #0]
 800e610:	2b00      	cmp	r3, #0
 800e612:	d104      	bne.n	800e61e <HAL_TIM_IC_Start_IT+0x1e>
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e61a:	b2db      	uxtb	r3, r3
 800e61c:	e013      	b.n	800e646 <HAL_TIM_IC_Start_IT+0x46>
 800e61e:	683b      	ldr	r3, [r7, #0]
 800e620:	2b04      	cmp	r3, #4
 800e622:	d104      	bne.n	800e62e <HAL_TIM_IC_Start_IT+0x2e>
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800e62a:	b2db      	uxtb	r3, r3
 800e62c:	e00b      	b.n	800e646 <HAL_TIM_IC_Start_IT+0x46>
 800e62e:	683b      	ldr	r3, [r7, #0]
 800e630:	2b08      	cmp	r3, #8
 800e632:	d104      	bne.n	800e63e <HAL_TIM_IC_Start_IT+0x3e>
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e63a:	b2db      	uxtb	r3, r3
 800e63c:	e003      	b.n	800e646 <HAL_TIM_IC_Start_IT+0x46>
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e644:	b2db      	uxtb	r3, r3
 800e646:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800e648:	683b      	ldr	r3, [r7, #0]
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d104      	bne.n	800e658 <HAL_TIM_IC_Start_IT+0x58>
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e654:	b2db      	uxtb	r3, r3
 800e656:	e013      	b.n	800e680 <HAL_TIM_IC_Start_IT+0x80>
 800e658:	683b      	ldr	r3, [r7, #0]
 800e65a:	2b04      	cmp	r3, #4
 800e65c:	d104      	bne.n	800e668 <HAL_TIM_IC_Start_IT+0x68>
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e664:	b2db      	uxtb	r3, r3
 800e666:	e00b      	b.n	800e680 <HAL_TIM_IC_Start_IT+0x80>
 800e668:	683b      	ldr	r3, [r7, #0]
 800e66a:	2b08      	cmp	r3, #8
 800e66c:	d104      	bne.n	800e678 <HAL_TIM_IC_Start_IT+0x78>
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e674:	b2db      	uxtb	r3, r3
 800e676:	e003      	b.n	800e680 <HAL_TIM_IC_Start_IT+0x80>
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e67e:	b2db      	uxtb	r3, r3
 800e680:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800e682:	7bbb      	ldrb	r3, [r7, #14]
 800e684:	2b01      	cmp	r3, #1
 800e686:	d102      	bne.n	800e68e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800e688:	7b7b      	ldrb	r3, [r7, #13]
 800e68a:	2b01      	cmp	r3, #1
 800e68c:	d001      	beq.n	800e692 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800e68e:	2301      	movs	r3, #1
 800e690:	e0cc      	b.n	800e82c <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e692:	683b      	ldr	r3, [r7, #0]
 800e694:	2b00      	cmp	r3, #0
 800e696:	d104      	bne.n	800e6a2 <HAL_TIM_IC_Start_IT+0xa2>
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	2202      	movs	r2, #2
 800e69c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e6a0:	e013      	b.n	800e6ca <HAL_TIM_IC_Start_IT+0xca>
 800e6a2:	683b      	ldr	r3, [r7, #0]
 800e6a4:	2b04      	cmp	r3, #4
 800e6a6:	d104      	bne.n	800e6b2 <HAL_TIM_IC_Start_IT+0xb2>
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	2202      	movs	r2, #2
 800e6ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e6b0:	e00b      	b.n	800e6ca <HAL_TIM_IC_Start_IT+0xca>
 800e6b2:	683b      	ldr	r3, [r7, #0]
 800e6b4:	2b08      	cmp	r3, #8
 800e6b6:	d104      	bne.n	800e6c2 <HAL_TIM_IC_Start_IT+0xc2>
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	2202      	movs	r2, #2
 800e6bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e6c0:	e003      	b.n	800e6ca <HAL_TIM_IC_Start_IT+0xca>
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	2202      	movs	r2, #2
 800e6c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e6ca:	683b      	ldr	r3, [r7, #0]
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d104      	bne.n	800e6da <HAL_TIM_IC_Start_IT+0xda>
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	2202      	movs	r2, #2
 800e6d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e6d8:	e013      	b.n	800e702 <HAL_TIM_IC_Start_IT+0x102>
 800e6da:	683b      	ldr	r3, [r7, #0]
 800e6dc:	2b04      	cmp	r3, #4
 800e6de:	d104      	bne.n	800e6ea <HAL_TIM_IC_Start_IT+0xea>
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	2202      	movs	r2, #2
 800e6e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e6e8:	e00b      	b.n	800e702 <HAL_TIM_IC_Start_IT+0x102>
 800e6ea:	683b      	ldr	r3, [r7, #0]
 800e6ec:	2b08      	cmp	r3, #8
 800e6ee:	d104      	bne.n	800e6fa <HAL_TIM_IC_Start_IT+0xfa>
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	2202      	movs	r2, #2
 800e6f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e6f8:	e003      	b.n	800e702 <HAL_TIM_IC_Start_IT+0x102>
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	2202      	movs	r2, #2
 800e6fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800e702:	683b      	ldr	r3, [r7, #0]
 800e704:	2b0c      	cmp	r3, #12
 800e706:	d841      	bhi.n	800e78c <HAL_TIM_IC_Start_IT+0x18c>
 800e708:	a201      	add	r2, pc, #4	; (adr r2, 800e710 <HAL_TIM_IC_Start_IT+0x110>)
 800e70a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e70e:	bf00      	nop
 800e710:	0800e745 	.word	0x0800e745
 800e714:	0800e78d 	.word	0x0800e78d
 800e718:	0800e78d 	.word	0x0800e78d
 800e71c:	0800e78d 	.word	0x0800e78d
 800e720:	0800e757 	.word	0x0800e757
 800e724:	0800e78d 	.word	0x0800e78d
 800e728:	0800e78d 	.word	0x0800e78d
 800e72c:	0800e78d 	.word	0x0800e78d
 800e730:	0800e769 	.word	0x0800e769
 800e734:	0800e78d 	.word	0x0800e78d
 800e738:	0800e78d 	.word	0x0800e78d
 800e73c:	0800e78d 	.word	0x0800e78d
 800e740:	0800e77b 	.word	0x0800e77b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	68da      	ldr	r2, [r3, #12]
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	f042 0202 	orr.w	r2, r2, #2
 800e752:	60da      	str	r2, [r3, #12]
      break;
 800e754:	e01d      	b.n	800e792 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	68da      	ldr	r2, [r3, #12]
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	f042 0204 	orr.w	r2, r2, #4
 800e764:	60da      	str	r2, [r3, #12]
      break;
 800e766:	e014      	b.n	800e792 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	68da      	ldr	r2, [r3, #12]
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	f042 0208 	orr.w	r2, r2, #8
 800e776:	60da      	str	r2, [r3, #12]
      break;
 800e778:	e00b      	b.n	800e792 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	68da      	ldr	r2, [r3, #12]
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	f042 0210 	orr.w	r2, r2, #16
 800e788:	60da      	str	r2, [r3, #12]
      break;
 800e78a:	e002      	b.n	800e792 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800e78c:	2301      	movs	r3, #1
 800e78e:	73fb      	strb	r3, [r7, #15]
      break;
 800e790:	bf00      	nop
  }

  if (status == HAL_OK)
 800e792:	7bfb      	ldrb	r3, [r7, #15]
 800e794:	2b00      	cmp	r3, #0
 800e796:	d148      	bne.n	800e82a <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	2201      	movs	r2, #1
 800e79e:	6839      	ldr	r1, [r7, #0]
 800e7a0:	4618      	mov	r0, r3
 800e7a2:	f000 ffb5 	bl	800f710 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	4a22      	ldr	r2, [pc, #136]	; (800e834 <HAL_TIM_IC_Start_IT+0x234>)
 800e7ac:	4293      	cmp	r3, r2
 800e7ae:	d022      	beq.n	800e7f6 <HAL_TIM_IC_Start_IT+0x1f6>
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e7b8:	d01d      	beq.n	800e7f6 <HAL_TIM_IC_Start_IT+0x1f6>
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	4a1e      	ldr	r2, [pc, #120]	; (800e838 <HAL_TIM_IC_Start_IT+0x238>)
 800e7c0:	4293      	cmp	r3, r2
 800e7c2:	d018      	beq.n	800e7f6 <HAL_TIM_IC_Start_IT+0x1f6>
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	4a1c      	ldr	r2, [pc, #112]	; (800e83c <HAL_TIM_IC_Start_IT+0x23c>)
 800e7ca:	4293      	cmp	r3, r2
 800e7cc:	d013      	beq.n	800e7f6 <HAL_TIM_IC_Start_IT+0x1f6>
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	4a1b      	ldr	r2, [pc, #108]	; (800e840 <HAL_TIM_IC_Start_IT+0x240>)
 800e7d4:	4293      	cmp	r3, r2
 800e7d6:	d00e      	beq.n	800e7f6 <HAL_TIM_IC_Start_IT+0x1f6>
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	4a19      	ldr	r2, [pc, #100]	; (800e844 <HAL_TIM_IC_Start_IT+0x244>)
 800e7de:	4293      	cmp	r3, r2
 800e7e0:	d009      	beq.n	800e7f6 <HAL_TIM_IC_Start_IT+0x1f6>
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	4a18      	ldr	r2, [pc, #96]	; (800e848 <HAL_TIM_IC_Start_IT+0x248>)
 800e7e8:	4293      	cmp	r3, r2
 800e7ea:	d004      	beq.n	800e7f6 <HAL_TIM_IC_Start_IT+0x1f6>
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	4a16      	ldr	r2, [pc, #88]	; (800e84c <HAL_TIM_IC_Start_IT+0x24c>)
 800e7f2:	4293      	cmp	r3, r2
 800e7f4:	d111      	bne.n	800e81a <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	689b      	ldr	r3, [r3, #8]
 800e7fc:	f003 0307 	and.w	r3, r3, #7
 800e800:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e802:	68bb      	ldr	r3, [r7, #8]
 800e804:	2b06      	cmp	r3, #6
 800e806:	d010      	beq.n	800e82a <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	681a      	ldr	r2, [r3, #0]
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	f042 0201 	orr.w	r2, r2, #1
 800e816:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e818:	e007      	b.n	800e82a <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	681a      	ldr	r2, [r3, #0]
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	f042 0201 	orr.w	r2, r2, #1
 800e828:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800e82a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e82c:	4618      	mov	r0, r3
 800e82e:	3710      	adds	r7, #16
 800e830:	46bd      	mov	sp, r7
 800e832:	bd80      	pop	{r7, pc}
 800e834:	40010000 	.word	0x40010000
 800e838:	40000400 	.word	0x40000400
 800e83c:	40000800 	.word	0x40000800
 800e840:	40000c00 	.word	0x40000c00
 800e844:	40010400 	.word	0x40010400
 800e848:	40014000 	.word	0x40014000
 800e84c:	40001800 	.word	0x40001800

0800e850 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e850:	b580      	push	{r7, lr}
 800e852:	b082      	sub	sp, #8
 800e854:	af00      	add	r7, sp, #0
 800e856:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	691b      	ldr	r3, [r3, #16]
 800e85e:	f003 0302 	and.w	r3, r3, #2
 800e862:	2b02      	cmp	r3, #2
 800e864:	d122      	bne.n	800e8ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	68db      	ldr	r3, [r3, #12]
 800e86c:	f003 0302 	and.w	r3, r3, #2
 800e870:	2b02      	cmp	r3, #2
 800e872:	d11b      	bne.n	800e8ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	f06f 0202 	mvn.w	r2, #2
 800e87c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	2201      	movs	r2, #1
 800e882:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	699b      	ldr	r3, [r3, #24]
 800e88a:	f003 0303 	and.w	r3, r3, #3
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d003      	beq.n	800e89a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e892:	6878      	ldr	r0, [r7, #4]
 800e894:	f7fb f918 	bl	8009ac8 <HAL_TIM_IC_CaptureCallback>
 800e898:	e005      	b.n	800e8a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e89a:	6878      	ldr	r0, [r7, #4]
 800e89c:	f000 fb05 	bl	800eeaa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e8a0:	6878      	ldr	r0, [r7, #4]
 800e8a2:	f000 fb0c 	bl	800eebe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	2200      	movs	r2, #0
 800e8aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	691b      	ldr	r3, [r3, #16]
 800e8b2:	f003 0304 	and.w	r3, r3, #4
 800e8b6:	2b04      	cmp	r3, #4
 800e8b8:	d122      	bne.n	800e900 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	68db      	ldr	r3, [r3, #12]
 800e8c0:	f003 0304 	and.w	r3, r3, #4
 800e8c4:	2b04      	cmp	r3, #4
 800e8c6:	d11b      	bne.n	800e900 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	f06f 0204 	mvn.w	r2, #4
 800e8d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	2202      	movs	r2, #2
 800e8d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	699b      	ldr	r3, [r3, #24]
 800e8de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d003      	beq.n	800e8ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e8e6:	6878      	ldr	r0, [r7, #4]
 800e8e8:	f7fb f8ee 	bl	8009ac8 <HAL_TIM_IC_CaptureCallback>
 800e8ec:	e005      	b.n	800e8fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e8ee:	6878      	ldr	r0, [r7, #4]
 800e8f0:	f000 fadb 	bl	800eeaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e8f4:	6878      	ldr	r0, [r7, #4]
 800e8f6:	f000 fae2 	bl	800eebe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	2200      	movs	r2, #0
 800e8fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	691b      	ldr	r3, [r3, #16]
 800e906:	f003 0308 	and.w	r3, r3, #8
 800e90a:	2b08      	cmp	r3, #8
 800e90c:	d122      	bne.n	800e954 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	68db      	ldr	r3, [r3, #12]
 800e914:	f003 0308 	and.w	r3, r3, #8
 800e918:	2b08      	cmp	r3, #8
 800e91a:	d11b      	bne.n	800e954 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	f06f 0208 	mvn.w	r2, #8
 800e924:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	2204      	movs	r2, #4
 800e92a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	69db      	ldr	r3, [r3, #28]
 800e932:	f003 0303 	and.w	r3, r3, #3
 800e936:	2b00      	cmp	r3, #0
 800e938:	d003      	beq.n	800e942 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e93a:	6878      	ldr	r0, [r7, #4]
 800e93c:	f7fb f8c4 	bl	8009ac8 <HAL_TIM_IC_CaptureCallback>
 800e940:	e005      	b.n	800e94e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e942:	6878      	ldr	r0, [r7, #4]
 800e944:	f000 fab1 	bl	800eeaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e948:	6878      	ldr	r0, [r7, #4]
 800e94a:	f000 fab8 	bl	800eebe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	2200      	movs	r2, #0
 800e952:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	691b      	ldr	r3, [r3, #16]
 800e95a:	f003 0310 	and.w	r3, r3, #16
 800e95e:	2b10      	cmp	r3, #16
 800e960:	d122      	bne.n	800e9a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	68db      	ldr	r3, [r3, #12]
 800e968:	f003 0310 	and.w	r3, r3, #16
 800e96c:	2b10      	cmp	r3, #16
 800e96e:	d11b      	bne.n	800e9a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	f06f 0210 	mvn.w	r2, #16
 800e978:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	2208      	movs	r2, #8
 800e97e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	69db      	ldr	r3, [r3, #28]
 800e986:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d003      	beq.n	800e996 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e98e:	6878      	ldr	r0, [r7, #4]
 800e990:	f7fb f89a 	bl	8009ac8 <HAL_TIM_IC_CaptureCallback>
 800e994:	e005      	b.n	800e9a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e996:	6878      	ldr	r0, [r7, #4]
 800e998:	f000 fa87 	bl	800eeaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e99c:	6878      	ldr	r0, [r7, #4]
 800e99e:	f000 fa8e 	bl	800eebe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	2200      	movs	r2, #0
 800e9a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	691b      	ldr	r3, [r3, #16]
 800e9ae:	f003 0301 	and.w	r3, r3, #1
 800e9b2:	2b01      	cmp	r3, #1
 800e9b4:	d10e      	bne.n	800e9d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	68db      	ldr	r3, [r3, #12]
 800e9bc:	f003 0301 	and.w	r3, r3, #1
 800e9c0:	2b01      	cmp	r3, #1
 800e9c2:	d107      	bne.n	800e9d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	f06f 0201 	mvn.w	r2, #1
 800e9cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e9ce:	6878      	ldr	r0, [r7, #4]
 800e9d0:	f7fb f858 	bl	8009a84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	691b      	ldr	r3, [r3, #16]
 800e9da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e9de:	2b80      	cmp	r3, #128	; 0x80
 800e9e0:	d10e      	bne.n	800ea00 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	68db      	ldr	r3, [r3, #12]
 800e9e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e9ec:	2b80      	cmp	r3, #128	; 0x80
 800e9ee:	d107      	bne.n	800ea00 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e9f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e9fa:	6878      	ldr	r0, [r7, #4]
 800e9fc:	f000 ff86 	bl	800f90c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	691b      	ldr	r3, [r3, #16]
 800ea06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea0a:	2b40      	cmp	r3, #64	; 0x40
 800ea0c:	d10e      	bne.n	800ea2c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	68db      	ldr	r3, [r3, #12]
 800ea14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea18:	2b40      	cmp	r3, #64	; 0x40
 800ea1a:	d107      	bne.n	800ea2c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ea24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ea26:	6878      	ldr	r0, [r7, #4]
 800ea28:	f000 fa53 	bl	800eed2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	691b      	ldr	r3, [r3, #16]
 800ea32:	f003 0320 	and.w	r3, r3, #32
 800ea36:	2b20      	cmp	r3, #32
 800ea38:	d10e      	bne.n	800ea58 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	68db      	ldr	r3, [r3, #12]
 800ea40:	f003 0320 	and.w	r3, r3, #32
 800ea44:	2b20      	cmp	r3, #32
 800ea46:	d107      	bne.n	800ea58 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	f06f 0220 	mvn.w	r2, #32
 800ea50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ea52:	6878      	ldr	r0, [r7, #4]
 800ea54:	f000 ff50 	bl	800f8f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ea58:	bf00      	nop
 800ea5a:	3708      	adds	r7, #8
 800ea5c:	46bd      	mov	sp, r7
 800ea5e:	bd80      	pop	{r7, pc}

0800ea60 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800ea60:	b580      	push	{r7, lr}
 800ea62:	b086      	sub	sp, #24
 800ea64:	af00      	add	r7, sp, #0
 800ea66:	60f8      	str	r0, [r7, #12]
 800ea68:	60b9      	str	r1, [r7, #8]
 800ea6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ea6c:	2300      	movs	r3, #0
 800ea6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ea76:	2b01      	cmp	r3, #1
 800ea78:	d101      	bne.n	800ea7e <HAL_TIM_IC_ConfigChannel+0x1e>
 800ea7a:	2302      	movs	r3, #2
 800ea7c:	e088      	b.n	800eb90 <HAL_TIM_IC_ConfigChannel+0x130>
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	2201      	movs	r2, #1
 800ea82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d11b      	bne.n	800eac4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	6818      	ldr	r0, [r3, #0]
 800ea90:	68bb      	ldr	r3, [r7, #8]
 800ea92:	6819      	ldr	r1, [r3, #0]
 800ea94:	68bb      	ldr	r3, [r7, #8]
 800ea96:	685a      	ldr	r2, [r3, #4]
 800ea98:	68bb      	ldr	r3, [r7, #8]
 800ea9a:	68db      	ldr	r3, [r3, #12]
 800ea9c:	f000 fc74 	bl	800f388 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	699a      	ldr	r2, [r3, #24]
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	f022 020c 	bic.w	r2, r2, #12
 800eaae:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800eab0:	68fb      	ldr	r3, [r7, #12]
 800eab2:	681b      	ldr	r3, [r3, #0]
 800eab4:	6999      	ldr	r1, [r3, #24]
 800eab6:	68bb      	ldr	r3, [r7, #8]
 800eab8:	689a      	ldr	r2, [r3, #8]
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	430a      	orrs	r2, r1
 800eac0:	619a      	str	r2, [r3, #24]
 800eac2:	e060      	b.n	800eb86 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	2b04      	cmp	r3, #4
 800eac8:	d11c      	bne.n	800eb04 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	6818      	ldr	r0, [r3, #0]
 800eace:	68bb      	ldr	r3, [r7, #8]
 800ead0:	6819      	ldr	r1, [r3, #0]
 800ead2:	68bb      	ldr	r3, [r7, #8]
 800ead4:	685a      	ldr	r2, [r3, #4]
 800ead6:	68bb      	ldr	r3, [r7, #8]
 800ead8:	68db      	ldr	r3, [r3, #12]
 800eada:	f000 fcf8 	bl	800f4ce <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	699a      	ldr	r2, [r3, #24]
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800eaec:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	6999      	ldr	r1, [r3, #24]
 800eaf4:	68bb      	ldr	r3, [r7, #8]
 800eaf6:	689b      	ldr	r3, [r3, #8]
 800eaf8:	021a      	lsls	r2, r3, #8
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	430a      	orrs	r2, r1
 800eb00:	619a      	str	r2, [r3, #24]
 800eb02:	e040      	b.n	800eb86 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	2b08      	cmp	r3, #8
 800eb08:	d11b      	bne.n	800eb42 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	6818      	ldr	r0, [r3, #0]
 800eb0e:	68bb      	ldr	r3, [r7, #8]
 800eb10:	6819      	ldr	r1, [r3, #0]
 800eb12:	68bb      	ldr	r3, [r7, #8]
 800eb14:	685a      	ldr	r2, [r3, #4]
 800eb16:	68bb      	ldr	r3, [r7, #8]
 800eb18:	68db      	ldr	r3, [r3, #12]
 800eb1a:	f000 fd45 	bl	800f5a8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	69da      	ldr	r2, [r3, #28]
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	f022 020c 	bic.w	r2, r2, #12
 800eb2c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	69d9      	ldr	r1, [r3, #28]
 800eb34:	68bb      	ldr	r3, [r7, #8]
 800eb36:	689a      	ldr	r2, [r3, #8]
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	430a      	orrs	r2, r1
 800eb3e:	61da      	str	r2, [r3, #28]
 800eb40:	e021      	b.n	800eb86 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	2b0c      	cmp	r3, #12
 800eb46:	d11c      	bne.n	800eb82 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	6818      	ldr	r0, [r3, #0]
 800eb4c:	68bb      	ldr	r3, [r7, #8]
 800eb4e:	6819      	ldr	r1, [r3, #0]
 800eb50:	68bb      	ldr	r3, [r7, #8]
 800eb52:	685a      	ldr	r2, [r3, #4]
 800eb54:	68bb      	ldr	r3, [r7, #8]
 800eb56:	68db      	ldr	r3, [r3, #12]
 800eb58:	f000 fd62 	bl	800f620 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	69da      	ldr	r2, [r3, #28]
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800eb6a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	69d9      	ldr	r1, [r3, #28]
 800eb72:	68bb      	ldr	r3, [r7, #8]
 800eb74:	689b      	ldr	r3, [r3, #8]
 800eb76:	021a      	lsls	r2, r3, #8
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	430a      	orrs	r2, r1
 800eb7e:	61da      	str	r2, [r3, #28]
 800eb80:	e001      	b.n	800eb86 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800eb82:	2301      	movs	r3, #1
 800eb84:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	2200      	movs	r2, #0
 800eb8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800eb8e:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb90:	4618      	mov	r0, r3
 800eb92:	3718      	adds	r7, #24
 800eb94:	46bd      	mov	sp, r7
 800eb96:	bd80      	pop	{r7, pc}

0800eb98 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800eb98:	b580      	push	{r7, lr}
 800eb9a:	b086      	sub	sp, #24
 800eb9c:	af00      	add	r7, sp, #0
 800eb9e:	60f8      	str	r0, [r7, #12]
 800eba0:	60b9      	str	r1, [r7, #8]
 800eba2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800eba4:	2300      	movs	r3, #0
 800eba6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ebae:	2b01      	cmp	r3, #1
 800ebb0:	d101      	bne.n	800ebb6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ebb2:	2302      	movs	r3, #2
 800ebb4:	e0ae      	b.n	800ed14 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	2201      	movs	r2, #1
 800ebba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	2b0c      	cmp	r3, #12
 800ebc2:	f200 809f 	bhi.w	800ed04 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800ebc6:	a201      	add	r2, pc, #4	; (adr r2, 800ebcc <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ebc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebcc:	0800ec01 	.word	0x0800ec01
 800ebd0:	0800ed05 	.word	0x0800ed05
 800ebd4:	0800ed05 	.word	0x0800ed05
 800ebd8:	0800ed05 	.word	0x0800ed05
 800ebdc:	0800ec41 	.word	0x0800ec41
 800ebe0:	0800ed05 	.word	0x0800ed05
 800ebe4:	0800ed05 	.word	0x0800ed05
 800ebe8:	0800ed05 	.word	0x0800ed05
 800ebec:	0800ec83 	.word	0x0800ec83
 800ebf0:	0800ed05 	.word	0x0800ed05
 800ebf4:	0800ed05 	.word	0x0800ed05
 800ebf8:	0800ed05 	.word	0x0800ed05
 800ebfc:	0800ecc3 	.word	0x0800ecc3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	68b9      	ldr	r1, [r7, #8]
 800ec06:	4618      	mov	r0, r3
 800ec08:	f000 fa0e 	bl	800f028 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	699a      	ldr	r2, [r3, #24]
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	f042 0208 	orr.w	r2, r2, #8
 800ec1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	699a      	ldr	r2, [r3, #24]
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	f022 0204 	bic.w	r2, r2, #4
 800ec2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	6999      	ldr	r1, [r3, #24]
 800ec32:	68bb      	ldr	r3, [r7, #8]
 800ec34:	691a      	ldr	r2, [r3, #16]
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	430a      	orrs	r2, r1
 800ec3c:	619a      	str	r2, [r3, #24]
      break;
 800ec3e:	e064      	b.n	800ed0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	68b9      	ldr	r1, [r7, #8]
 800ec46:	4618      	mov	r0, r3
 800ec48:	f000 fa5e 	bl	800f108 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	699a      	ldr	r2, [r3, #24]
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ec5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	699a      	ldr	r2, [r3, #24]
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ec6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	6999      	ldr	r1, [r3, #24]
 800ec72:	68bb      	ldr	r3, [r7, #8]
 800ec74:	691b      	ldr	r3, [r3, #16]
 800ec76:	021a      	lsls	r2, r3, #8
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	430a      	orrs	r2, r1
 800ec7e:	619a      	str	r2, [r3, #24]
      break;
 800ec80:	e043      	b.n	800ed0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	68b9      	ldr	r1, [r7, #8]
 800ec88:	4618      	mov	r0, r3
 800ec8a:	f000 fab3 	bl	800f1f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	69da      	ldr	r2, [r3, #28]
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	f042 0208 	orr.w	r2, r2, #8
 800ec9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	69da      	ldr	r2, [r3, #28]
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	f022 0204 	bic.w	r2, r2, #4
 800ecac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	69d9      	ldr	r1, [r3, #28]
 800ecb4:	68bb      	ldr	r3, [r7, #8]
 800ecb6:	691a      	ldr	r2, [r3, #16]
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	430a      	orrs	r2, r1
 800ecbe:	61da      	str	r2, [r3, #28]
      break;
 800ecc0:	e023      	b.n	800ed0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	68b9      	ldr	r1, [r7, #8]
 800ecc8:	4618      	mov	r0, r3
 800ecca:	f000 fb07 	bl	800f2dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	69da      	ldr	r2, [r3, #28]
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ecdc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	69da      	ldr	r2, [r3, #28]
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ecec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	69d9      	ldr	r1, [r3, #28]
 800ecf4:	68bb      	ldr	r3, [r7, #8]
 800ecf6:	691b      	ldr	r3, [r3, #16]
 800ecf8:	021a      	lsls	r2, r3, #8
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	430a      	orrs	r2, r1
 800ed00:	61da      	str	r2, [r3, #28]
      break;
 800ed02:	e002      	b.n	800ed0a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800ed04:	2301      	movs	r3, #1
 800ed06:	75fb      	strb	r3, [r7, #23]
      break;
 800ed08:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	2200      	movs	r2, #0
 800ed0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ed12:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed14:	4618      	mov	r0, r3
 800ed16:	3718      	adds	r7, #24
 800ed18:	46bd      	mov	sp, r7
 800ed1a:	bd80      	pop	{r7, pc}

0800ed1c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ed1c:	b580      	push	{r7, lr}
 800ed1e:	b084      	sub	sp, #16
 800ed20:	af00      	add	r7, sp, #0
 800ed22:	6078      	str	r0, [r7, #4]
 800ed24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ed26:	2300      	movs	r3, #0
 800ed28:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ed30:	2b01      	cmp	r3, #1
 800ed32:	d101      	bne.n	800ed38 <HAL_TIM_ConfigClockSource+0x1c>
 800ed34:	2302      	movs	r3, #2
 800ed36:	e0b4      	b.n	800eea2 <HAL_TIM_ConfigClockSource+0x186>
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	2201      	movs	r2, #1
 800ed3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	2202      	movs	r2, #2
 800ed44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	689b      	ldr	r3, [r3, #8]
 800ed4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ed50:	68bb      	ldr	r3, [r7, #8]
 800ed52:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800ed56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ed58:	68bb      	ldr	r3, [r7, #8]
 800ed5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ed5e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	68ba      	ldr	r2, [r7, #8]
 800ed66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ed68:	683b      	ldr	r3, [r7, #0]
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ed70:	d03e      	beq.n	800edf0 <HAL_TIM_ConfigClockSource+0xd4>
 800ed72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ed76:	f200 8087 	bhi.w	800ee88 <HAL_TIM_ConfigClockSource+0x16c>
 800ed7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ed7e:	f000 8086 	beq.w	800ee8e <HAL_TIM_ConfigClockSource+0x172>
 800ed82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ed86:	d87f      	bhi.n	800ee88 <HAL_TIM_ConfigClockSource+0x16c>
 800ed88:	2b70      	cmp	r3, #112	; 0x70
 800ed8a:	d01a      	beq.n	800edc2 <HAL_TIM_ConfigClockSource+0xa6>
 800ed8c:	2b70      	cmp	r3, #112	; 0x70
 800ed8e:	d87b      	bhi.n	800ee88 <HAL_TIM_ConfigClockSource+0x16c>
 800ed90:	2b60      	cmp	r3, #96	; 0x60
 800ed92:	d050      	beq.n	800ee36 <HAL_TIM_ConfigClockSource+0x11a>
 800ed94:	2b60      	cmp	r3, #96	; 0x60
 800ed96:	d877      	bhi.n	800ee88 <HAL_TIM_ConfigClockSource+0x16c>
 800ed98:	2b50      	cmp	r3, #80	; 0x50
 800ed9a:	d03c      	beq.n	800ee16 <HAL_TIM_ConfigClockSource+0xfa>
 800ed9c:	2b50      	cmp	r3, #80	; 0x50
 800ed9e:	d873      	bhi.n	800ee88 <HAL_TIM_ConfigClockSource+0x16c>
 800eda0:	2b40      	cmp	r3, #64	; 0x40
 800eda2:	d058      	beq.n	800ee56 <HAL_TIM_ConfigClockSource+0x13a>
 800eda4:	2b40      	cmp	r3, #64	; 0x40
 800eda6:	d86f      	bhi.n	800ee88 <HAL_TIM_ConfigClockSource+0x16c>
 800eda8:	2b30      	cmp	r3, #48	; 0x30
 800edaa:	d064      	beq.n	800ee76 <HAL_TIM_ConfigClockSource+0x15a>
 800edac:	2b30      	cmp	r3, #48	; 0x30
 800edae:	d86b      	bhi.n	800ee88 <HAL_TIM_ConfigClockSource+0x16c>
 800edb0:	2b20      	cmp	r3, #32
 800edb2:	d060      	beq.n	800ee76 <HAL_TIM_ConfigClockSource+0x15a>
 800edb4:	2b20      	cmp	r3, #32
 800edb6:	d867      	bhi.n	800ee88 <HAL_TIM_ConfigClockSource+0x16c>
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d05c      	beq.n	800ee76 <HAL_TIM_ConfigClockSource+0x15a>
 800edbc:	2b10      	cmp	r3, #16
 800edbe:	d05a      	beq.n	800ee76 <HAL_TIM_ConfigClockSource+0x15a>
 800edc0:	e062      	b.n	800ee88 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	6818      	ldr	r0, [r3, #0]
 800edc6:	683b      	ldr	r3, [r7, #0]
 800edc8:	6899      	ldr	r1, [r3, #8]
 800edca:	683b      	ldr	r3, [r7, #0]
 800edcc:	685a      	ldr	r2, [r3, #4]
 800edce:	683b      	ldr	r3, [r7, #0]
 800edd0:	68db      	ldr	r3, [r3, #12]
 800edd2:	f000 fc7d 	bl	800f6d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	689b      	ldr	r3, [r3, #8]
 800eddc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800edde:	68bb      	ldr	r3, [r7, #8]
 800ede0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ede4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	68ba      	ldr	r2, [r7, #8]
 800edec:	609a      	str	r2, [r3, #8]
      break;
 800edee:	e04f      	b.n	800ee90 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	6818      	ldr	r0, [r3, #0]
 800edf4:	683b      	ldr	r3, [r7, #0]
 800edf6:	6899      	ldr	r1, [r3, #8]
 800edf8:	683b      	ldr	r3, [r7, #0]
 800edfa:	685a      	ldr	r2, [r3, #4]
 800edfc:	683b      	ldr	r3, [r7, #0]
 800edfe:	68db      	ldr	r3, [r3, #12]
 800ee00:	f000 fc66 	bl	800f6d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	689a      	ldr	r2, [r3, #8]
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ee12:	609a      	str	r2, [r3, #8]
      break;
 800ee14:	e03c      	b.n	800ee90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	6818      	ldr	r0, [r3, #0]
 800ee1a:	683b      	ldr	r3, [r7, #0]
 800ee1c:	6859      	ldr	r1, [r3, #4]
 800ee1e:	683b      	ldr	r3, [r7, #0]
 800ee20:	68db      	ldr	r3, [r3, #12]
 800ee22:	461a      	mov	r2, r3
 800ee24:	f000 fb24 	bl	800f470 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	2150      	movs	r1, #80	; 0x50
 800ee2e:	4618      	mov	r0, r3
 800ee30:	f000 fc33 	bl	800f69a <TIM_ITRx_SetConfig>
      break;
 800ee34:	e02c      	b.n	800ee90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	6818      	ldr	r0, [r3, #0]
 800ee3a:	683b      	ldr	r3, [r7, #0]
 800ee3c:	6859      	ldr	r1, [r3, #4]
 800ee3e:	683b      	ldr	r3, [r7, #0]
 800ee40:	68db      	ldr	r3, [r3, #12]
 800ee42:	461a      	mov	r2, r3
 800ee44:	f000 fb80 	bl	800f548 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	2160      	movs	r1, #96	; 0x60
 800ee4e:	4618      	mov	r0, r3
 800ee50:	f000 fc23 	bl	800f69a <TIM_ITRx_SetConfig>
      break;
 800ee54:	e01c      	b.n	800ee90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	6818      	ldr	r0, [r3, #0]
 800ee5a:	683b      	ldr	r3, [r7, #0]
 800ee5c:	6859      	ldr	r1, [r3, #4]
 800ee5e:	683b      	ldr	r3, [r7, #0]
 800ee60:	68db      	ldr	r3, [r3, #12]
 800ee62:	461a      	mov	r2, r3
 800ee64:	f000 fb04 	bl	800f470 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	2140      	movs	r1, #64	; 0x40
 800ee6e:	4618      	mov	r0, r3
 800ee70:	f000 fc13 	bl	800f69a <TIM_ITRx_SetConfig>
      break;
 800ee74:	e00c      	b.n	800ee90 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	681a      	ldr	r2, [r3, #0]
 800ee7a:	683b      	ldr	r3, [r7, #0]
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	4619      	mov	r1, r3
 800ee80:	4610      	mov	r0, r2
 800ee82:	f000 fc0a 	bl	800f69a <TIM_ITRx_SetConfig>
      break;
 800ee86:	e003      	b.n	800ee90 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800ee88:	2301      	movs	r3, #1
 800ee8a:	73fb      	strb	r3, [r7, #15]
      break;
 800ee8c:	e000      	b.n	800ee90 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800ee8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	2201      	movs	r2, #1
 800ee94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	2200      	movs	r2, #0
 800ee9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800eea0:	7bfb      	ldrb	r3, [r7, #15]
}
 800eea2:	4618      	mov	r0, r3
 800eea4:	3710      	adds	r7, #16
 800eea6:	46bd      	mov	sp, r7
 800eea8:	bd80      	pop	{r7, pc}

0800eeaa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800eeaa:	b480      	push	{r7}
 800eeac:	b083      	sub	sp, #12
 800eeae:	af00      	add	r7, sp, #0
 800eeb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800eeb2:	bf00      	nop
 800eeb4:	370c      	adds	r7, #12
 800eeb6:	46bd      	mov	sp, r7
 800eeb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eebc:	4770      	bx	lr

0800eebe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800eebe:	b480      	push	{r7}
 800eec0:	b083      	sub	sp, #12
 800eec2:	af00      	add	r7, sp, #0
 800eec4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800eec6:	bf00      	nop
 800eec8:	370c      	adds	r7, #12
 800eeca:	46bd      	mov	sp, r7
 800eecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eed0:	4770      	bx	lr

0800eed2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800eed2:	b480      	push	{r7}
 800eed4:	b083      	sub	sp, #12
 800eed6:	af00      	add	r7, sp, #0
 800eed8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800eeda:	bf00      	nop
 800eedc:	370c      	adds	r7, #12
 800eede:	46bd      	mov	sp, r7
 800eee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eee4:	4770      	bx	lr
	...

0800eee8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800eee8:	b480      	push	{r7}
 800eeea:	b085      	sub	sp, #20
 800eeec:	af00      	add	r7, sp, #0
 800eeee:	6078      	str	r0, [r7, #4]
 800eef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	4a40      	ldr	r2, [pc, #256]	; (800effc <TIM_Base_SetConfig+0x114>)
 800eefc:	4293      	cmp	r3, r2
 800eefe:	d013      	beq.n	800ef28 <TIM_Base_SetConfig+0x40>
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ef06:	d00f      	beq.n	800ef28 <TIM_Base_SetConfig+0x40>
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	4a3d      	ldr	r2, [pc, #244]	; (800f000 <TIM_Base_SetConfig+0x118>)
 800ef0c:	4293      	cmp	r3, r2
 800ef0e:	d00b      	beq.n	800ef28 <TIM_Base_SetConfig+0x40>
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	4a3c      	ldr	r2, [pc, #240]	; (800f004 <TIM_Base_SetConfig+0x11c>)
 800ef14:	4293      	cmp	r3, r2
 800ef16:	d007      	beq.n	800ef28 <TIM_Base_SetConfig+0x40>
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	4a3b      	ldr	r2, [pc, #236]	; (800f008 <TIM_Base_SetConfig+0x120>)
 800ef1c:	4293      	cmp	r3, r2
 800ef1e:	d003      	beq.n	800ef28 <TIM_Base_SetConfig+0x40>
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	4a3a      	ldr	r2, [pc, #232]	; (800f00c <TIM_Base_SetConfig+0x124>)
 800ef24:	4293      	cmp	r3, r2
 800ef26:	d108      	bne.n	800ef3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ef2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ef30:	683b      	ldr	r3, [r7, #0]
 800ef32:	685b      	ldr	r3, [r3, #4]
 800ef34:	68fa      	ldr	r2, [r7, #12]
 800ef36:	4313      	orrs	r3, r2
 800ef38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	4a2f      	ldr	r2, [pc, #188]	; (800effc <TIM_Base_SetConfig+0x114>)
 800ef3e:	4293      	cmp	r3, r2
 800ef40:	d02b      	beq.n	800ef9a <TIM_Base_SetConfig+0xb2>
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ef48:	d027      	beq.n	800ef9a <TIM_Base_SetConfig+0xb2>
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	4a2c      	ldr	r2, [pc, #176]	; (800f000 <TIM_Base_SetConfig+0x118>)
 800ef4e:	4293      	cmp	r3, r2
 800ef50:	d023      	beq.n	800ef9a <TIM_Base_SetConfig+0xb2>
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	4a2b      	ldr	r2, [pc, #172]	; (800f004 <TIM_Base_SetConfig+0x11c>)
 800ef56:	4293      	cmp	r3, r2
 800ef58:	d01f      	beq.n	800ef9a <TIM_Base_SetConfig+0xb2>
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	4a2a      	ldr	r2, [pc, #168]	; (800f008 <TIM_Base_SetConfig+0x120>)
 800ef5e:	4293      	cmp	r3, r2
 800ef60:	d01b      	beq.n	800ef9a <TIM_Base_SetConfig+0xb2>
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	4a29      	ldr	r2, [pc, #164]	; (800f00c <TIM_Base_SetConfig+0x124>)
 800ef66:	4293      	cmp	r3, r2
 800ef68:	d017      	beq.n	800ef9a <TIM_Base_SetConfig+0xb2>
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	4a28      	ldr	r2, [pc, #160]	; (800f010 <TIM_Base_SetConfig+0x128>)
 800ef6e:	4293      	cmp	r3, r2
 800ef70:	d013      	beq.n	800ef9a <TIM_Base_SetConfig+0xb2>
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	4a27      	ldr	r2, [pc, #156]	; (800f014 <TIM_Base_SetConfig+0x12c>)
 800ef76:	4293      	cmp	r3, r2
 800ef78:	d00f      	beq.n	800ef9a <TIM_Base_SetConfig+0xb2>
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	4a26      	ldr	r2, [pc, #152]	; (800f018 <TIM_Base_SetConfig+0x130>)
 800ef7e:	4293      	cmp	r3, r2
 800ef80:	d00b      	beq.n	800ef9a <TIM_Base_SetConfig+0xb2>
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	4a25      	ldr	r2, [pc, #148]	; (800f01c <TIM_Base_SetConfig+0x134>)
 800ef86:	4293      	cmp	r3, r2
 800ef88:	d007      	beq.n	800ef9a <TIM_Base_SetConfig+0xb2>
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	4a24      	ldr	r2, [pc, #144]	; (800f020 <TIM_Base_SetConfig+0x138>)
 800ef8e:	4293      	cmp	r3, r2
 800ef90:	d003      	beq.n	800ef9a <TIM_Base_SetConfig+0xb2>
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	4a23      	ldr	r2, [pc, #140]	; (800f024 <TIM_Base_SetConfig+0x13c>)
 800ef96:	4293      	cmp	r3, r2
 800ef98:	d108      	bne.n	800efac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800efa0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800efa2:	683b      	ldr	r3, [r7, #0]
 800efa4:	68db      	ldr	r3, [r3, #12]
 800efa6:	68fa      	ldr	r2, [r7, #12]
 800efa8:	4313      	orrs	r3, r2
 800efaa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800efb2:	683b      	ldr	r3, [r7, #0]
 800efb4:	695b      	ldr	r3, [r3, #20]
 800efb6:	4313      	orrs	r3, r2
 800efb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	68fa      	ldr	r2, [r7, #12]
 800efbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800efc0:	683b      	ldr	r3, [r7, #0]
 800efc2:	689a      	ldr	r2, [r3, #8]
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800efc8:	683b      	ldr	r3, [r7, #0]
 800efca:	681a      	ldr	r2, [r3, #0]
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	4a0a      	ldr	r2, [pc, #40]	; (800effc <TIM_Base_SetConfig+0x114>)
 800efd4:	4293      	cmp	r3, r2
 800efd6:	d003      	beq.n	800efe0 <TIM_Base_SetConfig+0xf8>
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	4a0c      	ldr	r2, [pc, #48]	; (800f00c <TIM_Base_SetConfig+0x124>)
 800efdc:	4293      	cmp	r3, r2
 800efde:	d103      	bne.n	800efe8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800efe0:	683b      	ldr	r3, [r7, #0]
 800efe2:	691a      	ldr	r2, [r3, #16]
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	2201      	movs	r2, #1
 800efec:	615a      	str	r2, [r3, #20]
}
 800efee:	bf00      	nop
 800eff0:	3714      	adds	r7, #20
 800eff2:	46bd      	mov	sp, r7
 800eff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eff8:	4770      	bx	lr
 800effa:	bf00      	nop
 800effc:	40010000 	.word	0x40010000
 800f000:	40000400 	.word	0x40000400
 800f004:	40000800 	.word	0x40000800
 800f008:	40000c00 	.word	0x40000c00
 800f00c:	40010400 	.word	0x40010400
 800f010:	40014000 	.word	0x40014000
 800f014:	40014400 	.word	0x40014400
 800f018:	40014800 	.word	0x40014800
 800f01c:	40001800 	.word	0x40001800
 800f020:	40001c00 	.word	0x40001c00
 800f024:	40002000 	.word	0x40002000

0800f028 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f028:	b480      	push	{r7}
 800f02a:	b087      	sub	sp, #28
 800f02c:	af00      	add	r7, sp, #0
 800f02e:	6078      	str	r0, [r7, #4]
 800f030:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	6a1b      	ldr	r3, [r3, #32]
 800f036:	f023 0201 	bic.w	r2, r3, #1
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	6a1b      	ldr	r3, [r3, #32]
 800f042:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	685b      	ldr	r3, [r3, #4]
 800f048:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	699b      	ldr	r3, [r3, #24]
 800f04e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f056:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	f023 0303 	bic.w	r3, r3, #3
 800f05e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f060:	683b      	ldr	r3, [r7, #0]
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	68fa      	ldr	r2, [r7, #12]
 800f066:	4313      	orrs	r3, r2
 800f068:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f06a:	697b      	ldr	r3, [r7, #20]
 800f06c:	f023 0302 	bic.w	r3, r3, #2
 800f070:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f072:	683b      	ldr	r3, [r7, #0]
 800f074:	689b      	ldr	r3, [r3, #8]
 800f076:	697a      	ldr	r2, [r7, #20]
 800f078:	4313      	orrs	r3, r2
 800f07a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	4a20      	ldr	r2, [pc, #128]	; (800f100 <TIM_OC1_SetConfig+0xd8>)
 800f080:	4293      	cmp	r3, r2
 800f082:	d003      	beq.n	800f08c <TIM_OC1_SetConfig+0x64>
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	4a1f      	ldr	r2, [pc, #124]	; (800f104 <TIM_OC1_SetConfig+0xdc>)
 800f088:	4293      	cmp	r3, r2
 800f08a:	d10c      	bne.n	800f0a6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f08c:	697b      	ldr	r3, [r7, #20]
 800f08e:	f023 0308 	bic.w	r3, r3, #8
 800f092:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f094:	683b      	ldr	r3, [r7, #0]
 800f096:	68db      	ldr	r3, [r3, #12]
 800f098:	697a      	ldr	r2, [r7, #20]
 800f09a:	4313      	orrs	r3, r2
 800f09c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f09e:	697b      	ldr	r3, [r7, #20]
 800f0a0:	f023 0304 	bic.w	r3, r3, #4
 800f0a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	4a15      	ldr	r2, [pc, #84]	; (800f100 <TIM_OC1_SetConfig+0xd8>)
 800f0aa:	4293      	cmp	r3, r2
 800f0ac:	d003      	beq.n	800f0b6 <TIM_OC1_SetConfig+0x8e>
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	4a14      	ldr	r2, [pc, #80]	; (800f104 <TIM_OC1_SetConfig+0xdc>)
 800f0b2:	4293      	cmp	r3, r2
 800f0b4:	d111      	bne.n	800f0da <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f0b6:	693b      	ldr	r3, [r7, #16]
 800f0b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f0bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f0be:	693b      	ldr	r3, [r7, #16]
 800f0c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f0c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f0c6:	683b      	ldr	r3, [r7, #0]
 800f0c8:	695b      	ldr	r3, [r3, #20]
 800f0ca:	693a      	ldr	r2, [r7, #16]
 800f0cc:	4313      	orrs	r3, r2
 800f0ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f0d0:	683b      	ldr	r3, [r7, #0]
 800f0d2:	699b      	ldr	r3, [r3, #24]
 800f0d4:	693a      	ldr	r2, [r7, #16]
 800f0d6:	4313      	orrs	r3, r2
 800f0d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	693a      	ldr	r2, [r7, #16]
 800f0de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	68fa      	ldr	r2, [r7, #12]
 800f0e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f0e6:	683b      	ldr	r3, [r7, #0]
 800f0e8:	685a      	ldr	r2, [r3, #4]
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	697a      	ldr	r2, [r7, #20]
 800f0f2:	621a      	str	r2, [r3, #32]
}
 800f0f4:	bf00      	nop
 800f0f6:	371c      	adds	r7, #28
 800f0f8:	46bd      	mov	sp, r7
 800f0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0fe:	4770      	bx	lr
 800f100:	40010000 	.word	0x40010000
 800f104:	40010400 	.word	0x40010400

0800f108 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f108:	b480      	push	{r7}
 800f10a:	b087      	sub	sp, #28
 800f10c:	af00      	add	r7, sp, #0
 800f10e:	6078      	str	r0, [r7, #4]
 800f110:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	6a1b      	ldr	r3, [r3, #32]
 800f116:	f023 0210 	bic.w	r2, r3, #16
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	6a1b      	ldr	r3, [r3, #32]
 800f122:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	685b      	ldr	r3, [r3, #4]
 800f128:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	699b      	ldr	r3, [r3, #24]
 800f12e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f136:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f13e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f140:	683b      	ldr	r3, [r7, #0]
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	021b      	lsls	r3, r3, #8
 800f146:	68fa      	ldr	r2, [r7, #12]
 800f148:	4313      	orrs	r3, r2
 800f14a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f14c:	697b      	ldr	r3, [r7, #20]
 800f14e:	f023 0320 	bic.w	r3, r3, #32
 800f152:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f154:	683b      	ldr	r3, [r7, #0]
 800f156:	689b      	ldr	r3, [r3, #8]
 800f158:	011b      	lsls	r3, r3, #4
 800f15a:	697a      	ldr	r2, [r7, #20]
 800f15c:	4313      	orrs	r3, r2
 800f15e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	4a22      	ldr	r2, [pc, #136]	; (800f1ec <TIM_OC2_SetConfig+0xe4>)
 800f164:	4293      	cmp	r3, r2
 800f166:	d003      	beq.n	800f170 <TIM_OC2_SetConfig+0x68>
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	4a21      	ldr	r2, [pc, #132]	; (800f1f0 <TIM_OC2_SetConfig+0xe8>)
 800f16c:	4293      	cmp	r3, r2
 800f16e:	d10d      	bne.n	800f18c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f170:	697b      	ldr	r3, [r7, #20]
 800f172:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f176:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f178:	683b      	ldr	r3, [r7, #0]
 800f17a:	68db      	ldr	r3, [r3, #12]
 800f17c:	011b      	lsls	r3, r3, #4
 800f17e:	697a      	ldr	r2, [r7, #20]
 800f180:	4313      	orrs	r3, r2
 800f182:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f184:	697b      	ldr	r3, [r7, #20]
 800f186:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f18a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	4a17      	ldr	r2, [pc, #92]	; (800f1ec <TIM_OC2_SetConfig+0xe4>)
 800f190:	4293      	cmp	r3, r2
 800f192:	d003      	beq.n	800f19c <TIM_OC2_SetConfig+0x94>
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	4a16      	ldr	r2, [pc, #88]	; (800f1f0 <TIM_OC2_SetConfig+0xe8>)
 800f198:	4293      	cmp	r3, r2
 800f19a:	d113      	bne.n	800f1c4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f19c:	693b      	ldr	r3, [r7, #16]
 800f19e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f1a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f1a4:	693b      	ldr	r3, [r7, #16]
 800f1a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f1aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f1ac:	683b      	ldr	r3, [r7, #0]
 800f1ae:	695b      	ldr	r3, [r3, #20]
 800f1b0:	009b      	lsls	r3, r3, #2
 800f1b2:	693a      	ldr	r2, [r7, #16]
 800f1b4:	4313      	orrs	r3, r2
 800f1b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f1b8:	683b      	ldr	r3, [r7, #0]
 800f1ba:	699b      	ldr	r3, [r3, #24]
 800f1bc:	009b      	lsls	r3, r3, #2
 800f1be:	693a      	ldr	r2, [r7, #16]
 800f1c0:	4313      	orrs	r3, r2
 800f1c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	693a      	ldr	r2, [r7, #16]
 800f1c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	68fa      	ldr	r2, [r7, #12]
 800f1ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f1d0:	683b      	ldr	r3, [r7, #0]
 800f1d2:	685a      	ldr	r2, [r3, #4]
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	697a      	ldr	r2, [r7, #20]
 800f1dc:	621a      	str	r2, [r3, #32]
}
 800f1de:	bf00      	nop
 800f1e0:	371c      	adds	r7, #28
 800f1e2:	46bd      	mov	sp, r7
 800f1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1e8:	4770      	bx	lr
 800f1ea:	bf00      	nop
 800f1ec:	40010000 	.word	0x40010000
 800f1f0:	40010400 	.word	0x40010400

0800f1f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f1f4:	b480      	push	{r7}
 800f1f6:	b087      	sub	sp, #28
 800f1f8:	af00      	add	r7, sp, #0
 800f1fa:	6078      	str	r0, [r7, #4]
 800f1fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	6a1b      	ldr	r3, [r3, #32]
 800f202:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	6a1b      	ldr	r3, [r3, #32]
 800f20e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	685b      	ldr	r3, [r3, #4]
 800f214:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	69db      	ldr	r3, [r3, #28]
 800f21a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f222:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	f023 0303 	bic.w	r3, r3, #3
 800f22a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f22c:	683b      	ldr	r3, [r7, #0]
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	68fa      	ldr	r2, [r7, #12]
 800f232:	4313      	orrs	r3, r2
 800f234:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f236:	697b      	ldr	r3, [r7, #20]
 800f238:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f23c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f23e:	683b      	ldr	r3, [r7, #0]
 800f240:	689b      	ldr	r3, [r3, #8]
 800f242:	021b      	lsls	r3, r3, #8
 800f244:	697a      	ldr	r2, [r7, #20]
 800f246:	4313      	orrs	r3, r2
 800f248:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	4a21      	ldr	r2, [pc, #132]	; (800f2d4 <TIM_OC3_SetConfig+0xe0>)
 800f24e:	4293      	cmp	r3, r2
 800f250:	d003      	beq.n	800f25a <TIM_OC3_SetConfig+0x66>
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	4a20      	ldr	r2, [pc, #128]	; (800f2d8 <TIM_OC3_SetConfig+0xe4>)
 800f256:	4293      	cmp	r3, r2
 800f258:	d10d      	bne.n	800f276 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f25a:	697b      	ldr	r3, [r7, #20]
 800f25c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f260:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f262:	683b      	ldr	r3, [r7, #0]
 800f264:	68db      	ldr	r3, [r3, #12]
 800f266:	021b      	lsls	r3, r3, #8
 800f268:	697a      	ldr	r2, [r7, #20]
 800f26a:	4313      	orrs	r3, r2
 800f26c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f26e:	697b      	ldr	r3, [r7, #20]
 800f270:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f274:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	4a16      	ldr	r2, [pc, #88]	; (800f2d4 <TIM_OC3_SetConfig+0xe0>)
 800f27a:	4293      	cmp	r3, r2
 800f27c:	d003      	beq.n	800f286 <TIM_OC3_SetConfig+0x92>
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	4a15      	ldr	r2, [pc, #84]	; (800f2d8 <TIM_OC3_SetConfig+0xe4>)
 800f282:	4293      	cmp	r3, r2
 800f284:	d113      	bne.n	800f2ae <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f286:	693b      	ldr	r3, [r7, #16]
 800f288:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f28c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f28e:	693b      	ldr	r3, [r7, #16]
 800f290:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f294:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f296:	683b      	ldr	r3, [r7, #0]
 800f298:	695b      	ldr	r3, [r3, #20]
 800f29a:	011b      	lsls	r3, r3, #4
 800f29c:	693a      	ldr	r2, [r7, #16]
 800f29e:	4313      	orrs	r3, r2
 800f2a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f2a2:	683b      	ldr	r3, [r7, #0]
 800f2a4:	699b      	ldr	r3, [r3, #24]
 800f2a6:	011b      	lsls	r3, r3, #4
 800f2a8:	693a      	ldr	r2, [r7, #16]
 800f2aa:	4313      	orrs	r3, r2
 800f2ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	693a      	ldr	r2, [r7, #16]
 800f2b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	68fa      	ldr	r2, [r7, #12]
 800f2b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f2ba:	683b      	ldr	r3, [r7, #0]
 800f2bc:	685a      	ldr	r2, [r3, #4]
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	697a      	ldr	r2, [r7, #20]
 800f2c6:	621a      	str	r2, [r3, #32]
}
 800f2c8:	bf00      	nop
 800f2ca:	371c      	adds	r7, #28
 800f2cc:	46bd      	mov	sp, r7
 800f2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2d2:	4770      	bx	lr
 800f2d4:	40010000 	.word	0x40010000
 800f2d8:	40010400 	.word	0x40010400

0800f2dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f2dc:	b480      	push	{r7}
 800f2de:	b087      	sub	sp, #28
 800f2e0:	af00      	add	r7, sp, #0
 800f2e2:	6078      	str	r0, [r7, #4]
 800f2e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	6a1b      	ldr	r3, [r3, #32]
 800f2ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	6a1b      	ldr	r3, [r3, #32]
 800f2f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	685b      	ldr	r3, [r3, #4]
 800f2fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	69db      	ldr	r3, [r3, #28]
 800f302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f30a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f312:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f314:	683b      	ldr	r3, [r7, #0]
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	021b      	lsls	r3, r3, #8
 800f31a:	68fa      	ldr	r2, [r7, #12]
 800f31c:	4313      	orrs	r3, r2
 800f31e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f320:	693b      	ldr	r3, [r7, #16]
 800f322:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f326:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f328:	683b      	ldr	r3, [r7, #0]
 800f32a:	689b      	ldr	r3, [r3, #8]
 800f32c:	031b      	lsls	r3, r3, #12
 800f32e:	693a      	ldr	r2, [r7, #16]
 800f330:	4313      	orrs	r3, r2
 800f332:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	4a12      	ldr	r2, [pc, #72]	; (800f380 <TIM_OC4_SetConfig+0xa4>)
 800f338:	4293      	cmp	r3, r2
 800f33a:	d003      	beq.n	800f344 <TIM_OC4_SetConfig+0x68>
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	4a11      	ldr	r2, [pc, #68]	; (800f384 <TIM_OC4_SetConfig+0xa8>)
 800f340:	4293      	cmp	r3, r2
 800f342:	d109      	bne.n	800f358 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f344:	697b      	ldr	r3, [r7, #20]
 800f346:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f34a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f34c:	683b      	ldr	r3, [r7, #0]
 800f34e:	695b      	ldr	r3, [r3, #20]
 800f350:	019b      	lsls	r3, r3, #6
 800f352:	697a      	ldr	r2, [r7, #20]
 800f354:	4313      	orrs	r3, r2
 800f356:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	697a      	ldr	r2, [r7, #20]
 800f35c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	68fa      	ldr	r2, [r7, #12]
 800f362:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f364:	683b      	ldr	r3, [r7, #0]
 800f366:	685a      	ldr	r2, [r3, #4]
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	693a      	ldr	r2, [r7, #16]
 800f370:	621a      	str	r2, [r3, #32]
}
 800f372:	bf00      	nop
 800f374:	371c      	adds	r7, #28
 800f376:	46bd      	mov	sp, r7
 800f378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f37c:	4770      	bx	lr
 800f37e:	bf00      	nop
 800f380:	40010000 	.word	0x40010000
 800f384:	40010400 	.word	0x40010400

0800f388 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800f388:	b480      	push	{r7}
 800f38a:	b087      	sub	sp, #28
 800f38c:	af00      	add	r7, sp, #0
 800f38e:	60f8      	str	r0, [r7, #12]
 800f390:	60b9      	str	r1, [r7, #8]
 800f392:	607a      	str	r2, [r7, #4]
 800f394:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	6a1b      	ldr	r3, [r3, #32]
 800f39a:	f023 0201 	bic.w	r2, r3, #1
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f3a2:	68fb      	ldr	r3, [r7, #12]
 800f3a4:	699b      	ldr	r3, [r3, #24]
 800f3a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	6a1b      	ldr	r3, [r3, #32]
 800f3ac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	4a28      	ldr	r2, [pc, #160]	; (800f454 <TIM_TI1_SetConfig+0xcc>)
 800f3b2:	4293      	cmp	r3, r2
 800f3b4:	d01b      	beq.n	800f3ee <TIM_TI1_SetConfig+0x66>
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f3bc:	d017      	beq.n	800f3ee <TIM_TI1_SetConfig+0x66>
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	4a25      	ldr	r2, [pc, #148]	; (800f458 <TIM_TI1_SetConfig+0xd0>)
 800f3c2:	4293      	cmp	r3, r2
 800f3c4:	d013      	beq.n	800f3ee <TIM_TI1_SetConfig+0x66>
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	4a24      	ldr	r2, [pc, #144]	; (800f45c <TIM_TI1_SetConfig+0xd4>)
 800f3ca:	4293      	cmp	r3, r2
 800f3cc:	d00f      	beq.n	800f3ee <TIM_TI1_SetConfig+0x66>
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	4a23      	ldr	r2, [pc, #140]	; (800f460 <TIM_TI1_SetConfig+0xd8>)
 800f3d2:	4293      	cmp	r3, r2
 800f3d4:	d00b      	beq.n	800f3ee <TIM_TI1_SetConfig+0x66>
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	4a22      	ldr	r2, [pc, #136]	; (800f464 <TIM_TI1_SetConfig+0xdc>)
 800f3da:	4293      	cmp	r3, r2
 800f3dc:	d007      	beq.n	800f3ee <TIM_TI1_SetConfig+0x66>
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	4a21      	ldr	r2, [pc, #132]	; (800f468 <TIM_TI1_SetConfig+0xe0>)
 800f3e2:	4293      	cmp	r3, r2
 800f3e4:	d003      	beq.n	800f3ee <TIM_TI1_SetConfig+0x66>
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	4a20      	ldr	r2, [pc, #128]	; (800f46c <TIM_TI1_SetConfig+0xe4>)
 800f3ea:	4293      	cmp	r3, r2
 800f3ec:	d101      	bne.n	800f3f2 <TIM_TI1_SetConfig+0x6a>
 800f3ee:	2301      	movs	r3, #1
 800f3f0:	e000      	b.n	800f3f4 <TIM_TI1_SetConfig+0x6c>
 800f3f2:	2300      	movs	r3, #0
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d008      	beq.n	800f40a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800f3f8:	697b      	ldr	r3, [r7, #20]
 800f3fa:	f023 0303 	bic.w	r3, r3, #3
 800f3fe:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800f400:	697a      	ldr	r2, [r7, #20]
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	4313      	orrs	r3, r2
 800f406:	617b      	str	r3, [r7, #20]
 800f408:	e003      	b.n	800f412 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800f40a:	697b      	ldr	r3, [r7, #20]
 800f40c:	f043 0301 	orr.w	r3, r3, #1
 800f410:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f412:	697b      	ldr	r3, [r7, #20]
 800f414:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f418:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800f41a:	683b      	ldr	r3, [r7, #0]
 800f41c:	011b      	lsls	r3, r3, #4
 800f41e:	b2db      	uxtb	r3, r3
 800f420:	697a      	ldr	r2, [r7, #20]
 800f422:	4313      	orrs	r3, r2
 800f424:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f426:	693b      	ldr	r3, [r7, #16]
 800f428:	f023 030a 	bic.w	r3, r3, #10
 800f42c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800f42e:	68bb      	ldr	r3, [r7, #8]
 800f430:	f003 030a 	and.w	r3, r3, #10
 800f434:	693a      	ldr	r2, [r7, #16]
 800f436:	4313      	orrs	r3, r2
 800f438:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f43a:	68fb      	ldr	r3, [r7, #12]
 800f43c:	697a      	ldr	r2, [r7, #20]
 800f43e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	693a      	ldr	r2, [r7, #16]
 800f444:	621a      	str	r2, [r3, #32]
}
 800f446:	bf00      	nop
 800f448:	371c      	adds	r7, #28
 800f44a:	46bd      	mov	sp, r7
 800f44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f450:	4770      	bx	lr
 800f452:	bf00      	nop
 800f454:	40010000 	.word	0x40010000
 800f458:	40000400 	.word	0x40000400
 800f45c:	40000800 	.word	0x40000800
 800f460:	40000c00 	.word	0x40000c00
 800f464:	40010400 	.word	0x40010400
 800f468:	40014000 	.word	0x40014000
 800f46c:	40001800 	.word	0x40001800

0800f470 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f470:	b480      	push	{r7}
 800f472:	b087      	sub	sp, #28
 800f474:	af00      	add	r7, sp, #0
 800f476:	60f8      	str	r0, [r7, #12]
 800f478:	60b9      	str	r1, [r7, #8]
 800f47a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	6a1b      	ldr	r3, [r3, #32]
 800f480:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f482:	68fb      	ldr	r3, [r7, #12]
 800f484:	6a1b      	ldr	r3, [r3, #32]
 800f486:	f023 0201 	bic.w	r2, r3, #1
 800f48a:	68fb      	ldr	r3, [r7, #12]
 800f48c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f48e:	68fb      	ldr	r3, [r7, #12]
 800f490:	699b      	ldr	r3, [r3, #24]
 800f492:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f494:	693b      	ldr	r3, [r7, #16]
 800f496:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f49a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	011b      	lsls	r3, r3, #4
 800f4a0:	693a      	ldr	r2, [r7, #16]
 800f4a2:	4313      	orrs	r3, r2
 800f4a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f4a6:	697b      	ldr	r3, [r7, #20]
 800f4a8:	f023 030a 	bic.w	r3, r3, #10
 800f4ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f4ae:	697a      	ldr	r2, [r7, #20]
 800f4b0:	68bb      	ldr	r3, [r7, #8]
 800f4b2:	4313      	orrs	r3, r2
 800f4b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f4b6:	68fb      	ldr	r3, [r7, #12]
 800f4b8:	693a      	ldr	r2, [r7, #16]
 800f4ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	697a      	ldr	r2, [r7, #20]
 800f4c0:	621a      	str	r2, [r3, #32]
}
 800f4c2:	bf00      	nop
 800f4c4:	371c      	adds	r7, #28
 800f4c6:	46bd      	mov	sp, r7
 800f4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4cc:	4770      	bx	lr

0800f4ce <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800f4ce:	b480      	push	{r7}
 800f4d0:	b087      	sub	sp, #28
 800f4d2:	af00      	add	r7, sp, #0
 800f4d4:	60f8      	str	r0, [r7, #12]
 800f4d6:	60b9      	str	r1, [r7, #8]
 800f4d8:	607a      	str	r2, [r7, #4]
 800f4da:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	6a1b      	ldr	r3, [r3, #32]
 800f4e0:	f023 0210 	bic.w	r2, r3, #16
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	699b      	ldr	r3, [r3, #24]
 800f4ec:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	6a1b      	ldr	r3, [r3, #32]
 800f4f2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800f4f4:	697b      	ldr	r3, [r7, #20]
 800f4f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f4fa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	021b      	lsls	r3, r3, #8
 800f500:	697a      	ldr	r2, [r7, #20]
 800f502:	4313      	orrs	r3, r2
 800f504:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f506:	697b      	ldr	r3, [r7, #20]
 800f508:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f50c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800f50e:	683b      	ldr	r3, [r7, #0]
 800f510:	031b      	lsls	r3, r3, #12
 800f512:	b29b      	uxth	r3, r3
 800f514:	697a      	ldr	r2, [r7, #20]
 800f516:	4313      	orrs	r3, r2
 800f518:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f51a:	693b      	ldr	r3, [r7, #16]
 800f51c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800f520:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800f522:	68bb      	ldr	r3, [r7, #8]
 800f524:	011b      	lsls	r3, r3, #4
 800f526:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800f52a:	693a      	ldr	r2, [r7, #16]
 800f52c:	4313      	orrs	r3, r2
 800f52e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	697a      	ldr	r2, [r7, #20]
 800f534:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	693a      	ldr	r2, [r7, #16]
 800f53a:	621a      	str	r2, [r3, #32]
}
 800f53c:	bf00      	nop
 800f53e:	371c      	adds	r7, #28
 800f540:	46bd      	mov	sp, r7
 800f542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f546:	4770      	bx	lr

0800f548 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f548:	b480      	push	{r7}
 800f54a:	b087      	sub	sp, #28
 800f54c:	af00      	add	r7, sp, #0
 800f54e:	60f8      	str	r0, [r7, #12]
 800f550:	60b9      	str	r1, [r7, #8]
 800f552:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	6a1b      	ldr	r3, [r3, #32]
 800f558:	f023 0210 	bic.w	r2, r3, #16
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	699b      	ldr	r3, [r3, #24]
 800f564:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	6a1b      	ldr	r3, [r3, #32]
 800f56a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f56c:	697b      	ldr	r3, [r7, #20]
 800f56e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f572:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	031b      	lsls	r3, r3, #12
 800f578:	697a      	ldr	r2, [r7, #20]
 800f57a:	4313      	orrs	r3, r2
 800f57c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f57e:	693b      	ldr	r3, [r7, #16]
 800f580:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800f584:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f586:	68bb      	ldr	r3, [r7, #8]
 800f588:	011b      	lsls	r3, r3, #4
 800f58a:	693a      	ldr	r2, [r7, #16]
 800f58c:	4313      	orrs	r3, r2
 800f58e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	697a      	ldr	r2, [r7, #20]
 800f594:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	693a      	ldr	r2, [r7, #16]
 800f59a:	621a      	str	r2, [r3, #32]
}
 800f59c:	bf00      	nop
 800f59e:	371c      	adds	r7, #28
 800f5a0:	46bd      	mov	sp, r7
 800f5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5a6:	4770      	bx	lr

0800f5a8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800f5a8:	b480      	push	{r7}
 800f5aa:	b087      	sub	sp, #28
 800f5ac:	af00      	add	r7, sp, #0
 800f5ae:	60f8      	str	r0, [r7, #12]
 800f5b0:	60b9      	str	r1, [r7, #8]
 800f5b2:	607a      	str	r2, [r7, #4]
 800f5b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	6a1b      	ldr	r3, [r3, #32]
 800f5ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f5be:	68fb      	ldr	r3, [r7, #12]
 800f5c0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	69db      	ldr	r3, [r3, #28]
 800f5c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	6a1b      	ldr	r3, [r3, #32]
 800f5cc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800f5ce:	697b      	ldr	r3, [r7, #20]
 800f5d0:	f023 0303 	bic.w	r3, r3, #3
 800f5d4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800f5d6:	697a      	ldr	r2, [r7, #20]
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	4313      	orrs	r3, r2
 800f5dc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800f5de:	697b      	ldr	r3, [r7, #20]
 800f5e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f5e4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800f5e6:	683b      	ldr	r3, [r7, #0]
 800f5e8:	011b      	lsls	r3, r3, #4
 800f5ea:	b2db      	uxtb	r3, r3
 800f5ec:	697a      	ldr	r2, [r7, #20]
 800f5ee:	4313      	orrs	r3, r2
 800f5f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800f5f2:	693b      	ldr	r3, [r7, #16]
 800f5f4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800f5f8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800f5fa:	68bb      	ldr	r3, [r7, #8]
 800f5fc:	021b      	lsls	r3, r3, #8
 800f5fe:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800f602:	693a      	ldr	r2, [r7, #16]
 800f604:	4313      	orrs	r3, r2
 800f606:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	697a      	ldr	r2, [r7, #20]
 800f60c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	693a      	ldr	r2, [r7, #16]
 800f612:	621a      	str	r2, [r3, #32]
}
 800f614:	bf00      	nop
 800f616:	371c      	adds	r7, #28
 800f618:	46bd      	mov	sp, r7
 800f61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f61e:	4770      	bx	lr

0800f620 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800f620:	b480      	push	{r7}
 800f622:	b087      	sub	sp, #28
 800f624:	af00      	add	r7, sp, #0
 800f626:	60f8      	str	r0, [r7, #12]
 800f628:	60b9      	str	r1, [r7, #8]
 800f62a:	607a      	str	r2, [r7, #4]
 800f62c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	6a1b      	ldr	r3, [r3, #32]
 800f632:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	69db      	ldr	r3, [r3, #28]
 800f63e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	6a1b      	ldr	r3, [r3, #32]
 800f644:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800f646:	697b      	ldr	r3, [r7, #20]
 800f648:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f64c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	021b      	lsls	r3, r3, #8
 800f652:	697a      	ldr	r2, [r7, #20]
 800f654:	4313      	orrs	r3, r2
 800f656:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800f658:	697b      	ldr	r3, [r7, #20]
 800f65a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f65e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800f660:	683b      	ldr	r3, [r7, #0]
 800f662:	031b      	lsls	r3, r3, #12
 800f664:	b29b      	uxth	r3, r3
 800f666:	697a      	ldr	r2, [r7, #20]
 800f668:	4313      	orrs	r3, r2
 800f66a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800f66c:	693b      	ldr	r3, [r7, #16]
 800f66e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800f672:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800f674:	68bb      	ldr	r3, [r7, #8]
 800f676:	031b      	lsls	r3, r3, #12
 800f678:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800f67c:	693a      	ldr	r2, [r7, #16]
 800f67e:	4313      	orrs	r3, r2
 800f680:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	697a      	ldr	r2, [r7, #20]
 800f686:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	693a      	ldr	r2, [r7, #16]
 800f68c:	621a      	str	r2, [r3, #32]
}
 800f68e:	bf00      	nop
 800f690:	371c      	adds	r7, #28
 800f692:	46bd      	mov	sp, r7
 800f694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f698:	4770      	bx	lr

0800f69a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f69a:	b480      	push	{r7}
 800f69c:	b085      	sub	sp, #20
 800f69e:	af00      	add	r7, sp, #0
 800f6a0:	6078      	str	r0, [r7, #4]
 800f6a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	689b      	ldr	r3, [r3, #8]
 800f6a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f6b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f6b2:	683a      	ldr	r2, [r7, #0]
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	4313      	orrs	r3, r2
 800f6b8:	f043 0307 	orr.w	r3, r3, #7
 800f6bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	68fa      	ldr	r2, [r7, #12]
 800f6c2:	609a      	str	r2, [r3, #8]
}
 800f6c4:	bf00      	nop
 800f6c6:	3714      	adds	r7, #20
 800f6c8:	46bd      	mov	sp, r7
 800f6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ce:	4770      	bx	lr

0800f6d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f6d0:	b480      	push	{r7}
 800f6d2:	b087      	sub	sp, #28
 800f6d4:	af00      	add	r7, sp, #0
 800f6d6:	60f8      	str	r0, [r7, #12]
 800f6d8:	60b9      	str	r1, [r7, #8]
 800f6da:	607a      	str	r2, [r7, #4]
 800f6dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	689b      	ldr	r3, [r3, #8]
 800f6e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f6e4:	697b      	ldr	r3, [r7, #20]
 800f6e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f6ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f6ec:	683b      	ldr	r3, [r7, #0]
 800f6ee:	021a      	lsls	r2, r3, #8
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	431a      	orrs	r2, r3
 800f6f4:	68bb      	ldr	r3, [r7, #8]
 800f6f6:	4313      	orrs	r3, r2
 800f6f8:	697a      	ldr	r2, [r7, #20]
 800f6fa:	4313      	orrs	r3, r2
 800f6fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	697a      	ldr	r2, [r7, #20]
 800f702:	609a      	str	r2, [r3, #8]
}
 800f704:	bf00      	nop
 800f706:	371c      	adds	r7, #28
 800f708:	46bd      	mov	sp, r7
 800f70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f70e:	4770      	bx	lr

0800f710 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800f710:	b480      	push	{r7}
 800f712:	b087      	sub	sp, #28
 800f714:	af00      	add	r7, sp, #0
 800f716:	60f8      	str	r0, [r7, #12]
 800f718:	60b9      	str	r1, [r7, #8]
 800f71a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f71c:	68bb      	ldr	r3, [r7, #8]
 800f71e:	f003 031f 	and.w	r3, r3, #31
 800f722:	2201      	movs	r2, #1
 800f724:	fa02 f303 	lsl.w	r3, r2, r3
 800f728:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f72a:	68fb      	ldr	r3, [r7, #12]
 800f72c:	6a1a      	ldr	r2, [r3, #32]
 800f72e:	697b      	ldr	r3, [r7, #20]
 800f730:	43db      	mvns	r3, r3
 800f732:	401a      	ands	r2, r3
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	6a1a      	ldr	r2, [r3, #32]
 800f73c:	68bb      	ldr	r3, [r7, #8]
 800f73e:	f003 031f 	and.w	r3, r3, #31
 800f742:	6879      	ldr	r1, [r7, #4]
 800f744:	fa01 f303 	lsl.w	r3, r1, r3
 800f748:	431a      	orrs	r2, r3
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	621a      	str	r2, [r3, #32]
}
 800f74e:	bf00      	nop
 800f750:	371c      	adds	r7, #28
 800f752:	46bd      	mov	sp, r7
 800f754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f758:	4770      	bx	lr
	...

0800f75c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f75c:	b480      	push	{r7}
 800f75e:	b085      	sub	sp, #20
 800f760:	af00      	add	r7, sp, #0
 800f762:	6078      	str	r0, [r7, #4]
 800f764:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f76c:	2b01      	cmp	r3, #1
 800f76e:	d101      	bne.n	800f774 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f770:	2302      	movs	r3, #2
 800f772:	e05a      	b.n	800f82a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	2201      	movs	r2, #1
 800f778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	2202      	movs	r2, #2
 800f780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	685b      	ldr	r3, [r3, #4]
 800f78a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	689b      	ldr	r3, [r3, #8]
 800f792:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f79a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f79c:	683b      	ldr	r3, [r7, #0]
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	68fa      	ldr	r2, [r7, #12]
 800f7a2:	4313      	orrs	r3, r2
 800f7a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	68fa      	ldr	r2, [r7, #12]
 800f7ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	4a21      	ldr	r2, [pc, #132]	; (800f838 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800f7b4:	4293      	cmp	r3, r2
 800f7b6:	d022      	beq.n	800f7fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f7c0:	d01d      	beq.n	800f7fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	4a1d      	ldr	r2, [pc, #116]	; (800f83c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800f7c8:	4293      	cmp	r3, r2
 800f7ca:	d018      	beq.n	800f7fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	4a1b      	ldr	r2, [pc, #108]	; (800f840 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800f7d2:	4293      	cmp	r3, r2
 800f7d4:	d013      	beq.n	800f7fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	4a1a      	ldr	r2, [pc, #104]	; (800f844 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800f7dc:	4293      	cmp	r3, r2
 800f7de:	d00e      	beq.n	800f7fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	4a18      	ldr	r2, [pc, #96]	; (800f848 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800f7e6:	4293      	cmp	r3, r2
 800f7e8:	d009      	beq.n	800f7fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	4a17      	ldr	r2, [pc, #92]	; (800f84c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800f7f0:	4293      	cmp	r3, r2
 800f7f2:	d004      	beq.n	800f7fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	4a15      	ldr	r2, [pc, #84]	; (800f850 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800f7fa:	4293      	cmp	r3, r2
 800f7fc:	d10c      	bne.n	800f818 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f7fe:	68bb      	ldr	r3, [r7, #8]
 800f800:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f804:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f806:	683b      	ldr	r3, [r7, #0]
 800f808:	685b      	ldr	r3, [r3, #4]
 800f80a:	68ba      	ldr	r2, [r7, #8]
 800f80c:	4313      	orrs	r3, r2
 800f80e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	68ba      	ldr	r2, [r7, #8]
 800f816:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	2201      	movs	r2, #1
 800f81c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	2200      	movs	r2, #0
 800f824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f828:	2300      	movs	r3, #0
}
 800f82a:	4618      	mov	r0, r3
 800f82c:	3714      	adds	r7, #20
 800f82e:	46bd      	mov	sp, r7
 800f830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f834:	4770      	bx	lr
 800f836:	bf00      	nop
 800f838:	40010000 	.word	0x40010000
 800f83c:	40000400 	.word	0x40000400
 800f840:	40000800 	.word	0x40000800
 800f844:	40000c00 	.word	0x40000c00
 800f848:	40010400 	.word	0x40010400
 800f84c:	40014000 	.word	0x40014000
 800f850:	40001800 	.word	0x40001800

0800f854 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800f854:	b480      	push	{r7}
 800f856:	b085      	sub	sp, #20
 800f858:	af00      	add	r7, sp, #0
 800f85a:	6078      	str	r0, [r7, #4]
 800f85c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800f85e:	2300      	movs	r3, #0
 800f860:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f868:	2b01      	cmp	r3, #1
 800f86a:	d101      	bne.n	800f870 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800f86c:	2302      	movs	r3, #2
 800f86e:	e03d      	b.n	800f8ec <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	2201      	movs	r2, #1
 800f874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800f87e:	683b      	ldr	r3, [r7, #0]
 800f880:	68db      	ldr	r3, [r3, #12]
 800f882:	4313      	orrs	r3, r2
 800f884:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800f88c:	683b      	ldr	r3, [r7, #0]
 800f88e:	689b      	ldr	r3, [r3, #8]
 800f890:	4313      	orrs	r3, r2
 800f892:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800f894:	68fb      	ldr	r3, [r7, #12]
 800f896:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800f89a:	683b      	ldr	r3, [r7, #0]
 800f89c:	685b      	ldr	r3, [r3, #4]
 800f89e:	4313      	orrs	r3, r2
 800f8a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800f8a8:	683b      	ldr	r3, [r7, #0]
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	4313      	orrs	r3, r2
 800f8ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f8b6:	683b      	ldr	r3, [r7, #0]
 800f8b8:	691b      	ldr	r3, [r3, #16]
 800f8ba:	4313      	orrs	r3, r2
 800f8bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800f8be:	68fb      	ldr	r3, [r7, #12]
 800f8c0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800f8c4:	683b      	ldr	r3, [r7, #0]
 800f8c6:	695b      	ldr	r3, [r3, #20]
 800f8c8:	4313      	orrs	r3, r2
 800f8ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800f8d2:	683b      	ldr	r3, [r7, #0]
 800f8d4:	69db      	ldr	r3, [r3, #28]
 800f8d6:	4313      	orrs	r3, r2
 800f8d8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	68fa      	ldr	r2, [r7, #12]
 800f8e0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	2200      	movs	r2, #0
 800f8e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f8ea:	2300      	movs	r3, #0
}
 800f8ec:	4618      	mov	r0, r3
 800f8ee:	3714      	adds	r7, #20
 800f8f0:	46bd      	mov	sp, r7
 800f8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8f6:	4770      	bx	lr

0800f8f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f8f8:	b480      	push	{r7}
 800f8fa:	b083      	sub	sp, #12
 800f8fc:	af00      	add	r7, sp, #0
 800f8fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f900:	bf00      	nop
 800f902:	370c      	adds	r7, #12
 800f904:	46bd      	mov	sp, r7
 800f906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f90a:	4770      	bx	lr

0800f90c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f90c:	b480      	push	{r7}
 800f90e:	b083      	sub	sp, #12
 800f910:	af00      	add	r7, sp, #0
 800f912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f914:	bf00      	nop
 800f916:	370c      	adds	r7, #12
 800f918:	46bd      	mov	sp, r7
 800f91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f91e:	4770      	bx	lr

0800f920 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f920:	b580      	push	{r7, lr}
 800f922:	b082      	sub	sp, #8
 800f924:	af00      	add	r7, sp, #0
 800f926:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d101      	bne.n	800f932 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f92e:	2301      	movs	r3, #1
 800f930:	e03f      	b.n	800f9b2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f938:	b2db      	uxtb	r3, r3
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d106      	bne.n	800f94c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	2200      	movs	r2, #0
 800f942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f946:	6878      	ldr	r0, [r7, #4]
 800f948:	f7fa ffc6 	bl	800a8d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	2224      	movs	r2, #36	; 0x24
 800f950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	681b      	ldr	r3, [r3, #0]
 800f958:	68da      	ldr	r2, [r3, #12]
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f962:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800f964:	6878      	ldr	r0, [r7, #4]
 800f966:	f001 f9e5 	bl	8010d34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	681b      	ldr	r3, [r3, #0]
 800f96e:	691a      	ldr	r2, [r3, #16]
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f978:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	695a      	ldr	r2, [r3, #20]
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f988:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	68da      	ldr	r2, [r3, #12]
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f998:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	2200      	movs	r2, #0
 800f99e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	2220      	movs	r2, #32
 800f9a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	2220      	movs	r2, #32
 800f9ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800f9b0:	2300      	movs	r3, #0
}
 800f9b2:	4618      	mov	r0, r3
 800f9b4:	3708      	adds	r7, #8
 800f9b6:	46bd      	mov	sp, r7
 800f9b8:	bd80      	pop	{r7, pc}

0800f9ba <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f9ba:	b480      	push	{r7}
 800f9bc:	b085      	sub	sp, #20
 800f9be:	af00      	add	r7, sp, #0
 800f9c0:	60f8      	str	r0, [r7, #12]
 800f9c2:	60b9      	str	r1, [r7, #8]
 800f9c4:	4613      	mov	r3, r2
 800f9c6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f9c8:	68fb      	ldr	r3, [r7, #12]
 800f9ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f9ce:	b2db      	uxtb	r3, r3
 800f9d0:	2b20      	cmp	r3, #32
 800f9d2:	d130      	bne.n	800fa36 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800f9d4:	68bb      	ldr	r3, [r7, #8]
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d002      	beq.n	800f9e0 <HAL_UART_Transmit_IT+0x26>
 800f9da:	88fb      	ldrh	r3, [r7, #6]
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d101      	bne.n	800f9e4 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800f9e0:	2301      	movs	r3, #1
 800f9e2:	e029      	b.n	800fa38 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800f9e4:	68fb      	ldr	r3, [r7, #12]
 800f9e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f9ea:	2b01      	cmp	r3, #1
 800f9ec:	d101      	bne.n	800f9f2 <HAL_UART_Transmit_IT+0x38>
 800f9ee:	2302      	movs	r3, #2
 800f9f0:	e022      	b.n	800fa38 <HAL_UART_Transmit_IT+0x7e>
 800f9f2:	68fb      	ldr	r3, [r7, #12]
 800f9f4:	2201      	movs	r2, #1
 800f9f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800f9fa:	68fb      	ldr	r3, [r7, #12]
 800f9fc:	68ba      	ldr	r2, [r7, #8]
 800f9fe:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800fa00:	68fb      	ldr	r3, [r7, #12]
 800fa02:	88fa      	ldrh	r2, [r7, #6]
 800fa04:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800fa06:	68fb      	ldr	r3, [r7, #12]
 800fa08:	88fa      	ldrh	r2, [r7, #6]
 800fa0a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	2200      	movs	r2, #0
 800fa10:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	2221      	movs	r2, #33	; 0x21
 800fa16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	2200      	movs	r2, #0
 800fa1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	68da      	ldr	r2, [r3, #12]
 800fa28:	68fb      	ldr	r3, [r7, #12]
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800fa30:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800fa32:	2300      	movs	r3, #0
 800fa34:	e000      	b.n	800fa38 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800fa36:	2302      	movs	r3, #2
  }
}
 800fa38:	4618      	mov	r0, r3
 800fa3a:	3714      	adds	r7, #20
 800fa3c:	46bd      	mov	sp, r7
 800fa3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa42:	4770      	bx	lr

0800fa44 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fa44:	b580      	push	{r7, lr}
 800fa46:	b084      	sub	sp, #16
 800fa48:	af00      	add	r7, sp, #0
 800fa4a:	60f8      	str	r0, [r7, #12]
 800fa4c:	60b9      	str	r1, [r7, #8]
 800fa4e:	4613      	mov	r3, r2
 800fa50:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fa58:	b2db      	uxtb	r3, r3
 800fa5a:	2b20      	cmp	r3, #32
 800fa5c:	d11d      	bne.n	800fa9a <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800fa5e:	68bb      	ldr	r3, [r7, #8]
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d002      	beq.n	800fa6a <HAL_UART_Receive_IT+0x26>
 800fa64:	88fb      	ldrh	r3, [r7, #6]
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d101      	bne.n	800fa6e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800fa6a:	2301      	movs	r3, #1
 800fa6c:	e016      	b.n	800fa9c <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800fa6e:	68fb      	ldr	r3, [r7, #12]
 800fa70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fa74:	2b01      	cmp	r3, #1
 800fa76:	d101      	bne.n	800fa7c <HAL_UART_Receive_IT+0x38>
 800fa78:	2302      	movs	r3, #2
 800fa7a:	e00f      	b.n	800fa9c <HAL_UART_Receive_IT+0x58>
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	2201      	movs	r2, #1
 800fa80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	2200      	movs	r2, #0
 800fa88:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800fa8a:	88fb      	ldrh	r3, [r7, #6]
 800fa8c:	461a      	mov	r2, r3
 800fa8e:	68b9      	ldr	r1, [r7, #8]
 800fa90:	68f8      	ldr	r0, [r7, #12]
 800fa92:	f000 fea0 	bl	80107d6 <UART_Start_Receive_IT>
 800fa96:	4603      	mov	r3, r0
 800fa98:	e000      	b.n	800fa9c <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800fa9a:	2302      	movs	r3, #2
  }
}
 800fa9c:	4618      	mov	r0, r3
 800fa9e:	3710      	adds	r7, #16
 800faa0:	46bd      	mov	sp, r7
 800faa2:	bd80      	pop	{r7, pc}

0800faa4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800faa4:	b580      	push	{r7, lr}
 800faa6:	b08c      	sub	sp, #48	; 0x30
 800faa8:	af00      	add	r7, sp, #0
 800faaa:	60f8      	str	r0, [r7, #12]
 800faac:	60b9      	str	r1, [r7, #8]
 800faae:	4613      	mov	r3, r2
 800fab0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800fab2:	68fb      	ldr	r3, [r7, #12]
 800fab4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fab8:	b2db      	uxtb	r3, r3
 800faba:	2b20      	cmp	r3, #32
 800fabc:	d165      	bne.n	800fb8a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800fabe:	68bb      	ldr	r3, [r7, #8]
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	d002      	beq.n	800faca <HAL_UART_Transmit_DMA+0x26>
 800fac4:	88fb      	ldrh	r3, [r7, #6]
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d101      	bne.n	800face <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800faca:	2301      	movs	r3, #1
 800facc:	e05e      	b.n	800fb8c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fad4:	2b01      	cmp	r3, #1
 800fad6:	d101      	bne.n	800fadc <HAL_UART_Transmit_DMA+0x38>
 800fad8:	2302      	movs	r3, #2
 800fada:	e057      	b.n	800fb8c <HAL_UART_Transmit_DMA+0xe8>
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	2201      	movs	r2, #1
 800fae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800fae4:	68ba      	ldr	r2, [r7, #8]
 800fae6:	68fb      	ldr	r3, [r7, #12]
 800fae8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	88fa      	ldrh	r2, [r7, #6]
 800faee:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800faf0:	68fb      	ldr	r3, [r7, #12]
 800faf2:	88fa      	ldrh	r2, [r7, #6]
 800faf4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	2200      	movs	r2, #0
 800fafa:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	2221      	movs	r2, #33	; 0x21
 800fb00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb08:	4a22      	ldr	r2, [pc, #136]	; (800fb94 <HAL_UART_Transmit_DMA+0xf0>)
 800fb0a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800fb0c:	68fb      	ldr	r3, [r7, #12]
 800fb0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb10:	4a21      	ldr	r2, [pc, #132]	; (800fb98 <HAL_UART_Transmit_DMA+0xf4>)
 800fb12:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb18:	4a20      	ldr	r2, [pc, #128]	; (800fb9c <HAL_UART_Transmit_DMA+0xf8>)
 800fb1a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800fb1c:	68fb      	ldr	r3, [r7, #12]
 800fb1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb20:	2200      	movs	r2, #0
 800fb22:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800fb24:	f107 0308 	add.w	r3, r7, #8
 800fb28:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800fb2a:	68fb      	ldr	r3, [r7, #12]
 800fb2c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800fb2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb30:	6819      	ldr	r1, [r3, #0]
 800fb32:	68fb      	ldr	r3, [r7, #12]
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	3304      	adds	r3, #4
 800fb38:	461a      	mov	r2, r3
 800fb3a:	88fb      	ldrh	r3, [r7, #6]
 800fb3c:	f7fb fb26 	bl	800b18c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	681b      	ldr	r3, [r3, #0]
 800fb44:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800fb48:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800fb4a:	68fb      	ldr	r3, [r7, #12]
 800fb4c:	2200      	movs	r2, #0
 800fb4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800fb52:	68fb      	ldr	r3, [r7, #12]
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	3314      	adds	r3, #20
 800fb58:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb5a:	69bb      	ldr	r3, [r7, #24]
 800fb5c:	e853 3f00 	ldrex	r3, [r3]
 800fb60:	617b      	str	r3, [r7, #20]
   return(result);
 800fb62:	697b      	ldr	r3, [r7, #20]
 800fb64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fb68:	62bb      	str	r3, [r7, #40]	; 0x28
 800fb6a:	68fb      	ldr	r3, [r7, #12]
 800fb6c:	681b      	ldr	r3, [r3, #0]
 800fb6e:	3314      	adds	r3, #20
 800fb70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fb72:	627a      	str	r2, [r7, #36]	; 0x24
 800fb74:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb76:	6a39      	ldr	r1, [r7, #32]
 800fb78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fb7a:	e841 2300 	strex	r3, r2, [r1]
 800fb7e:	61fb      	str	r3, [r7, #28]
   return(result);
 800fb80:	69fb      	ldr	r3, [r7, #28]
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d1e5      	bne.n	800fb52 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800fb86:	2300      	movs	r3, #0
 800fb88:	e000      	b.n	800fb8c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800fb8a:	2302      	movs	r3, #2
  }
}
 800fb8c:	4618      	mov	r0, r3
 800fb8e:	3730      	adds	r7, #48	; 0x30
 800fb90:	46bd      	mov	sp, r7
 800fb92:	bd80      	pop	{r7, pc}
 800fb94:	08010531 	.word	0x08010531
 800fb98:	080105cb 	.word	0x080105cb
 800fb9c:	08010743 	.word	0x08010743

0800fba0 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800fba0:	b580      	push	{r7, lr}
 800fba2:	b090      	sub	sp, #64	; 0x40
 800fba4:	af00      	add	r7, sp, #0
 800fba6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800fba8:	2300      	movs	r3, #0
 800fbaa:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	695b      	ldr	r3, [r3, #20]
 800fbb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fbb6:	2b80      	cmp	r3, #128	; 0x80
 800fbb8:	bf0c      	ite	eq
 800fbba:	2301      	moveq	r3, #1
 800fbbc:	2300      	movne	r3, #0
 800fbbe:	b2db      	uxtb	r3, r3
 800fbc0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fbc8:	b2db      	uxtb	r3, r3
 800fbca:	2b21      	cmp	r3, #33	; 0x21
 800fbcc:	d128      	bne.n	800fc20 <HAL_UART_DMAStop+0x80>
 800fbce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d025      	beq.n	800fc20 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	3314      	adds	r3, #20
 800fbda:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbde:	e853 3f00 	ldrex	r3, [r3]
 800fbe2:	623b      	str	r3, [r7, #32]
   return(result);
 800fbe4:	6a3b      	ldr	r3, [r7, #32]
 800fbe6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fbea:	63bb      	str	r3, [r7, #56]	; 0x38
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	3314      	adds	r3, #20
 800fbf2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fbf4:	633a      	str	r2, [r7, #48]	; 0x30
 800fbf6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbf8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fbfa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fbfc:	e841 2300 	strex	r3, r2, [r1]
 800fc00:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800fc02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d1e5      	bne.n	800fbd4 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d004      	beq.n	800fc1a <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fc14:	4618      	mov	r0, r3
 800fc16:	f7fb fb11 	bl	800b23c <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 800fc1a:	6878      	ldr	r0, [r7, #4]
 800fc1c:	f000 feb0 	bl	8010980 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	695b      	ldr	r3, [r3, #20]
 800fc26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fc2a:	2b40      	cmp	r3, #64	; 0x40
 800fc2c:	bf0c      	ite	eq
 800fc2e:	2301      	moveq	r3, #1
 800fc30:	2300      	movne	r3, #0
 800fc32:	b2db      	uxtb	r3, r3
 800fc34:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fc3c:	b2db      	uxtb	r3, r3
 800fc3e:	2b22      	cmp	r3, #34	; 0x22
 800fc40:	d128      	bne.n	800fc94 <HAL_UART_DMAStop+0xf4>
 800fc42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d025      	beq.n	800fc94 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	3314      	adds	r3, #20
 800fc4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc50:	693b      	ldr	r3, [r7, #16]
 800fc52:	e853 3f00 	ldrex	r3, [r3]
 800fc56:	60fb      	str	r3, [r7, #12]
   return(result);
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fc5e:	637b      	str	r3, [r7, #52]	; 0x34
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	681b      	ldr	r3, [r3, #0]
 800fc64:	3314      	adds	r3, #20
 800fc66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fc68:	61fa      	str	r2, [r7, #28]
 800fc6a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc6c:	69b9      	ldr	r1, [r7, #24]
 800fc6e:	69fa      	ldr	r2, [r7, #28]
 800fc70:	e841 2300 	strex	r3, r2, [r1]
 800fc74:	617b      	str	r3, [r7, #20]
   return(result);
 800fc76:	697b      	ldr	r3, [r7, #20]
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	d1e5      	bne.n	800fc48 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d004      	beq.n	800fc8e <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc88:	4618      	mov	r0, r3
 800fc8a:	f7fb fad7 	bl	800b23c <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800fc8e:	6878      	ldr	r0, [r7, #4]
 800fc90:	f000 fe9e 	bl	80109d0 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800fc94:	2300      	movs	r3, #0
}
 800fc96:	4618      	mov	r0, r3
 800fc98:	3740      	adds	r7, #64	; 0x40
 800fc9a:	46bd      	mov	sp, r7
 800fc9c:	bd80      	pop	{r7, pc}

0800fc9e <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fc9e:	b580      	push	{r7, lr}
 800fca0:	b08c      	sub	sp, #48	; 0x30
 800fca2:	af00      	add	r7, sp, #0
 800fca4:	60f8      	str	r0, [r7, #12]
 800fca6:	60b9      	str	r1, [r7, #8]
 800fca8:	4613      	mov	r3, r2
 800fcaa:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800fcac:	68fb      	ldr	r3, [r7, #12]
 800fcae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fcb2:	b2db      	uxtb	r3, r3
 800fcb4:	2b20      	cmp	r3, #32
 800fcb6:	d152      	bne.n	800fd5e <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 800fcb8:	68bb      	ldr	r3, [r7, #8]
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d002      	beq.n	800fcc4 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800fcbe:	88fb      	ldrh	r3, [r7, #6]
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d101      	bne.n	800fcc8 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800fcc4:	2301      	movs	r3, #1
 800fcc6:	e04b      	b.n	800fd60 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 800fcc8:	68fb      	ldr	r3, [r7, #12]
 800fcca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fcce:	2b01      	cmp	r3, #1
 800fcd0:	d101      	bne.n	800fcd6 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 800fcd2:	2302      	movs	r3, #2
 800fcd4:	e044      	b.n	800fd60 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 800fcd6:	68fb      	ldr	r3, [r7, #12]
 800fcd8:	2201      	movs	r2, #1
 800fcda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	2201      	movs	r2, #1
 800fce2:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800fce4:	88fb      	ldrh	r3, [r7, #6]
 800fce6:	461a      	mov	r2, r3
 800fce8:	68b9      	ldr	r1, [r7, #8]
 800fcea:	68f8      	ldr	r0, [r7, #12]
 800fcec:	f000 fdae 	bl	801084c <UART_Start_Receive_DMA>
 800fcf0:	4603      	mov	r3, r0
 800fcf2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800fcf6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d12c      	bne.n	800fd58 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd02:	2b01      	cmp	r3, #1
 800fd04:	d125      	bne.n	800fd52 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800fd06:	2300      	movs	r3, #0
 800fd08:	613b      	str	r3, [r7, #16]
 800fd0a:	68fb      	ldr	r3, [r7, #12]
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	613b      	str	r3, [r7, #16]
 800fd12:	68fb      	ldr	r3, [r7, #12]
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	685b      	ldr	r3, [r3, #4]
 800fd18:	613b      	str	r3, [r7, #16]
 800fd1a:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	330c      	adds	r3, #12
 800fd22:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd24:	69bb      	ldr	r3, [r7, #24]
 800fd26:	e853 3f00 	ldrex	r3, [r3]
 800fd2a:	617b      	str	r3, [r7, #20]
   return(result);
 800fd2c:	697b      	ldr	r3, [r7, #20]
 800fd2e:	f043 0310 	orr.w	r3, r3, #16
 800fd32:	62bb      	str	r3, [r7, #40]	; 0x28
 800fd34:	68fb      	ldr	r3, [r7, #12]
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	330c      	adds	r3, #12
 800fd3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fd3c:	627a      	str	r2, [r7, #36]	; 0x24
 800fd3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd40:	6a39      	ldr	r1, [r7, #32]
 800fd42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fd44:	e841 2300 	strex	r3, r2, [r1]
 800fd48:	61fb      	str	r3, [r7, #28]
   return(result);
 800fd4a:	69fb      	ldr	r3, [r7, #28]
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d1e5      	bne.n	800fd1c <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 800fd50:	e002      	b.n	800fd58 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800fd52:	2301      	movs	r3, #1
 800fd54:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800fd58:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fd5c:	e000      	b.n	800fd60 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 800fd5e:	2302      	movs	r3, #2
  }
}
 800fd60:	4618      	mov	r0, r3
 800fd62:	3730      	adds	r7, #48	; 0x30
 800fd64:	46bd      	mov	sp, r7
 800fd66:	bd80      	pop	{r7, pc}

0800fd68 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 800fd68:	b580      	push	{r7, lr}
 800fd6a:	b09a      	sub	sp, #104	; 0x68
 800fd6c:	af00      	add	r7, sp, #0
 800fd6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	330c      	adds	r3, #12
 800fd76:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd7a:	e853 3f00 	ldrex	r3, [r3]
 800fd7e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800fd80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fd82:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fd86:	667b      	str	r3, [r7, #100]	; 0x64
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	330c      	adds	r3, #12
 800fd8e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800fd90:	657a      	str	r2, [r7, #84]	; 0x54
 800fd92:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd94:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fd96:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fd98:	e841 2300 	strex	r3, r2, [r1]
 800fd9c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800fd9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d1e5      	bne.n	800fd70 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	3314      	adds	r3, #20
 800fdaa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fdac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fdae:	e853 3f00 	ldrex	r3, [r3]
 800fdb2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800fdb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdb6:	f023 0301 	bic.w	r3, r3, #1
 800fdba:	663b      	str	r3, [r7, #96]	; 0x60
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	3314      	adds	r3, #20
 800fdc2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fdc4:	643a      	str	r2, [r7, #64]	; 0x40
 800fdc6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fdc8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fdca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fdcc:	e841 2300 	strex	r3, r2, [r1]
 800fdd0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fdd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d1e5      	bne.n	800fda4 <HAL_UART_AbortReceive_IT+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fddc:	2b01      	cmp	r3, #1
 800fdde:	d119      	bne.n	800fe14 <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	330c      	adds	r3, #12
 800fde6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fde8:	6a3b      	ldr	r3, [r7, #32]
 800fdea:	e853 3f00 	ldrex	r3, [r3]
 800fdee:	61fb      	str	r3, [r7, #28]
   return(result);
 800fdf0:	69fb      	ldr	r3, [r7, #28]
 800fdf2:	f023 0310 	bic.w	r3, r3, #16
 800fdf6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	330c      	adds	r3, #12
 800fdfe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fe00:	62fa      	str	r2, [r7, #44]	; 0x2c
 800fe02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fe06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fe08:	e841 2300 	strex	r3, r2, [r1]
 800fe0c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fe0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d1e5      	bne.n	800fde0 <HAL_UART_AbortReceive_IT+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	681b      	ldr	r3, [r3, #0]
 800fe18:	695b      	ldr	r3, [r3, #20]
 800fe1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fe1e:	2b40      	cmp	r3, #64	; 0x40
 800fe20:	d13f      	bne.n	800fea2 <HAL_UART_AbortReceive_IT+0x13a>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	3314      	adds	r3, #20
 800fe28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe2a:	68fb      	ldr	r3, [r7, #12]
 800fe2c:	e853 3f00 	ldrex	r3, [r3]
 800fe30:	60bb      	str	r3, [r7, #8]
   return(result);
 800fe32:	68bb      	ldr	r3, [r7, #8]
 800fe34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fe38:	65bb      	str	r3, [r7, #88]	; 0x58
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	681b      	ldr	r3, [r3, #0]
 800fe3e:	3314      	adds	r3, #20
 800fe40:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fe42:	61ba      	str	r2, [r7, #24]
 800fe44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe46:	6979      	ldr	r1, [r7, #20]
 800fe48:	69ba      	ldr	r2, [r7, #24]
 800fe4a:	e841 2300 	strex	r3, r2, [r1]
 800fe4e:	613b      	str	r3, [r7, #16]
   return(result);
 800fe50:	693b      	ldr	r3, [r7, #16]
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d1e5      	bne.n	800fe22 <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d013      	beq.n	800fe86 <HAL_UART_AbortReceive_IT+0x11e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe62:	4a19      	ldr	r2, [pc, #100]	; (800fec8 <HAL_UART_AbortReceive_IT+0x160>)
 800fe64:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe6a:	4618      	mov	r0, r3
 800fe6c:	f7fb fa56 	bl	800b31c <HAL_DMA_Abort_IT>
 800fe70:	4603      	mov	r3, r0
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d022      	beq.n	800febc <HAL_UART_AbortReceive_IT+0x154>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fe7c:	687a      	ldr	r2, [r7, #4]
 800fe7e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800fe80:	4610      	mov	r0, r2
 800fe82:	4798      	blx	r3
 800fe84:	e01a      	b.n	800febc <HAL_UART_AbortReceive_IT+0x154>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	2200      	movs	r2, #0
 800fe8a:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	2220      	movs	r2, #32
 800fe90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	2200      	movs	r2, #0
 800fe98:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 800fe9a:	6878      	ldr	r0, [r7, #4]
 800fe9c:	f000 fab8 	bl	8010410 <HAL_UART_AbortReceiveCpltCallback>
 800fea0:	e00c      	b.n	800febc <HAL_UART_AbortReceive_IT+0x154>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	2200      	movs	r2, #0
 800fea6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	2220      	movs	r2, #32
 800feac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	2200      	movs	r2, #0
 800feb4:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 800feb6:	6878      	ldr	r0, [r7, #4]
 800feb8:	f000 faaa 	bl	8010410 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800febc:	2300      	movs	r3, #0
}
 800febe:	4618      	mov	r0, r3
 800fec0:	3768      	adds	r7, #104	; 0x68
 800fec2:	46bd      	mov	sp, r7
 800fec4:	bd80      	pop	{r7, pc}
 800fec6:	bf00      	nop
 800fec8:	08010abf 	.word	0x08010abf

0800fecc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800fecc:	b580      	push	{r7, lr}
 800fece:	b0ba      	sub	sp, #232	; 0xe8
 800fed0:	af00      	add	r7, sp, #0
 800fed2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	681b      	ldr	r3, [r3, #0]
 800feda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	68db      	ldr	r3, [r3, #12]
 800fee4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	695b      	ldr	r3, [r3, #20]
 800feee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800fef2:	2300      	movs	r3, #0
 800fef4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800fef8:	2300      	movs	r3, #0
 800fefa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800fefe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ff02:	f003 030f 	and.w	r3, r3, #15
 800ff06:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800ff0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d10f      	bne.n	800ff32 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ff12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ff16:	f003 0320 	and.w	r3, r3, #32
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d009      	beq.n	800ff32 <HAL_UART_IRQHandler+0x66>
 800ff1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ff22:	f003 0320 	and.w	r3, r3, #32
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d003      	beq.n	800ff32 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800ff2a:	6878      	ldr	r0, [r7, #4]
 800ff2c:	f000 fe47 	bl	8010bbe <UART_Receive_IT>
      return;
 800ff30:	e256      	b.n	80103e0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800ff32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	f000 80de 	beq.w	80100f8 <HAL_UART_IRQHandler+0x22c>
 800ff3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ff40:	f003 0301 	and.w	r3, r3, #1
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d106      	bne.n	800ff56 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800ff48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ff4c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	f000 80d1 	beq.w	80100f8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800ff56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ff5a:	f003 0301 	and.w	r3, r3, #1
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d00b      	beq.n	800ff7a <HAL_UART_IRQHandler+0xae>
 800ff62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ff66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d005      	beq.n	800ff7a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff72:	f043 0201 	orr.w	r2, r3, #1
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ff7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ff7e:	f003 0304 	and.w	r3, r3, #4
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d00b      	beq.n	800ff9e <HAL_UART_IRQHandler+0xd2>
 800ff86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ff8a:	f003 0301 	and.w	r3, r3, #1
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d005      	beq.n	800ff9e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff96:	f043 0202 	orr.w	r2, r3, #2
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ff9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ffa2:	f003 0302 	and.w	r3, r3, #2
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d00b      	beq.n	800ffc2 <HAL_UART_IRQHandler+0xf6>
 800ffaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ffae:	f003 0301 	and.w	r3, r3, #1
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d005      	beq.n	800ffc2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ffba:	f043 0204 	orr.w	r2, r3, #4
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800ffc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ffc6:	f003 0308 	and.w	r3, r3, #8
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d011      	beq.n	800fff2 <HAL_UART_IRQHandler+0x126>
 800ffce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ffd2:	f003 0320 	and.w	r3, r3, #32
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d105      	bne.n	800ffe6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800ffda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ffde:	f003 0301 	and.w	r3, r3, #1
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d005      	beq.n	800fff2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ffea:	f043 0208 	orr.w	r2, r3, #8
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	f000 81ed 	beq.w	80103d6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800fffc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010000:	f003 0320 	and.w	r3, r3, #32
 8010004:	2b00      	cmp	r3, #0
 8010006:	d008      	beq.n	801001a <HAL_UART_IRQHandler+0x14e>
 8010008:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801000c:	f003 0320 	and.w	r3, r3, #32
 8010010:	2b00      	cmp	r3, #0
 8010012:	d002      	beq.n	801001a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8010014:	6878      	ldr	r0, [r7, #4]
 8010016:	f000 fdd2 	bl	8010bbe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	695b      	ldr	r3, [r3, #20]
 8010020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010024:	2b40      	cmp	r3, #64	; 0x40
 8010026:	bf0c      	ite	eq
 8010028:	2301      	moveq	r3, #1
 801002a:	2300      	movne	r3, #0
 801002c:	b2db      	uxtb	r3, r3
 801002e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010036:	f003 0308 	and.w	r3, r3, #8
 801003a:	2b00      	cmp	r3, #0
 801003c:	d103      	bne.n	8010046 <HAL_UART_IRQHandler+0x17a>
 801003e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010042:	2b00      	cmp	r3, #0
 8010044:	d04f      	beq.n	80100e6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010046:	6878      	ldr	r0, [r7, #4]
 8010048:	f000 fcc2 	bl	80109d0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	681b      	ldr	r3, [r3, #0]
 8010050:	695b      	ldr	r3, [r3, #20]
 8010052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010056:	2b40      	cmp	r3, #64	; 0x40
 8010058:	d141      	bne.n	80100de <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	3314      	adds	r3, #20
 8010060:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010064:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010068:	e853 3f00 	ldrex	r3, [r3]
 801006c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8010070:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010074:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010078:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	681b      	ldr	r3, [r3, #0]
 8010080:	3314      	adds	r3, #20
 8010082:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8010086:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 801008a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801008e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8010092:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8010096:	e841 2300 	strex	r3, r2, [r1]
 801009a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 801009e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d1d9      	bne.n	801005a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d013      	beq.n	80100d6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80100b2:	4a7d      	ldr	r2, [pc, #500]	; (80102a8 <HAL_UART_IRQHandler+0x3dc>)
 80100b4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80100ba:	4618      	mov	r0, r3
 80100bc:	f7fb f92e 	bl	800b31c <HAL_DMA_Abort_IT>
 80100c0:	4603      	mov	r3, r0
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d016      	beq.n	80100f4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80100ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80100cc:	687a      	ldr	r2, [r7, #4]
 80100ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80100d0:	4610      	mov	r0, r2
 80100d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80100d4:	e00e      	b.n	80100f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80100d6:	6878      	ldr	r0, [r7, #4]
 80100d8:	f7f3 fb48 	bl	800376c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80100dc:	e00a      	b.n	80100f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80100de:	6878      	ldr	r0, [r7, #4]
 80100e0:	f7f3 fb44 	bl	800376c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80100e4:	e006      	b.n	80100f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80100e6:	6878      	ldr	r0, [r7, #4]
 80100e8:	f7f3 fb40 	bl	800376c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	2200      	movs	r2, #0
 80100f0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80100f2:	e170      	b.n	80103d6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80100f4:	bf00      	nop
    return;
 80100f6:	e16e      	b.n	80103d6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80100fc:	2b01      	cmp	r3, #1
 80100fe:	f040 814a 	bne.w	8010396 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8010102:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010106:	f003 0310 	and.w	r3, r3, #16
 801010a:	2b00      	cmp	r3, #0
 801010c:	f000 8143 	beq.w	8010396 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8010110:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010114:	f003 0310 	and.w	r3, r3, #16
 8010118:	2b00      	cmp	r3, #0
 801011a:	f000 813c 	beq.w	8010396 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 801011e:	2300      	movs	r3, #0
 8010120:	60bb      	str	r3, [r7, #8]
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	681b      	ldr	r3, [r3, #0]
 8010126:	681b      	ldr	r3, [r3, #0]
 8010128:	60bb      	str	r3, [r7, #8]
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	681b      	ldr	r3, [r3, #0]
 801012e:	685b      	ldr	r3, [r3, #4]
 8010130:	60bb      	str	r3, [r7, #8]
 8010132:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	681b      	ldr	r3, [r3, #0]
 8010138:	695b      	ldr	r3, [r3, #20]
 801013a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801013e:	2b40      	cmp	r3, #64	; 0x40
 8010140:	f040 80b4 	bne.w	80102ac <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	685b      	ldr	r3, [r3, #4]
 801014c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8010150:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8010154:	2b00      	cmp	r3, #0
 8010156:	f000 8140 	beq.w	80103da <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801015e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010162:	429a      	cmp	r2, r3
 8010164:	f080 8139 	bcs.w	80103da <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801016e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010174:	69db      	ldr	r3, [r3, #28]
 8010176:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801017a:	f000 8088 	beq.w	801028e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	681b      	ldr	r3, [r3, #0]
 8010182:	330c      	adds	r3, #12
 8010184:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010188:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801018c:	e853 3f00 	ldrex	r3, [r3]
 8010190:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8010194:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010198:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801019c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	330c      	adds	r3, #12
 80101a6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80101aa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80101ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80101b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80101ba:	e841 2300 	strex	r3, r2, [r1]
 80101be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80101c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d1d9      	bne.n	801017e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	681b      	ldr	r3, [r3, #0]
 80101ce:	3314      	adds	r3, #20
 80101d0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80101d4:	e853 3f00 	ldrex	r3, [r3]
 80101d8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80101da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80101dc:	f023 0301 	bic.w	r3, r3, #1
 80101e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	3314      	adds	r3, #20
 80101ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80101ee:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80101f2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101f4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80101f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80101fa:	e841 2300 	strex	r3, r2, [r1]
 80101fe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8010200:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010202:	2b00      	cmp	r3, #0
 8010204:	d1e1      	bne.n	80101ca <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	681b      	ldr	r3, [r3, #0]
 801020a:	3314      	adds	r3, #20
 801020c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801020e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010210:	e853 3f00 	ldrex	r3, [r3]
 8010214:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8010216:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010218:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801021c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	681b      	ldr	r3, [r3, #0]
 8010224:	3314      	adds	r3, #20
 8010226:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801022a:	66fa      	str	r2, [r7, #108]	; 0x6c
 801022c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801022e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010230:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010232:	e841 2300 	strex	r3, r2, [r1]
 8010236:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8010238:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801023a:	2b00      	cmp	r3, #0
 801023c:	d1e3      	bne.n	8010206 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	2220      	movs	r2, #32
 8010242:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	2200      	movs	r2, #0
 801024a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	330c      	adds	r3, #12
 8010252:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010254:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010256:	e853 3f00 	ldrex	r3, [r3]
 801025a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801025c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801025e:	f023 0310 	bic.w	r3, r3, #16
 8010262:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	681b      	ldr	r3, [r3, #0]
 801026a:	330c      	adds	r3, #12
 801026c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8010270:	65ba      	str	r2, [r7, #88]	; 0x58
 8010272:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010274:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010276:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010278:	e841 2300 	strex	r3, r2, [r1]
 801027c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801027e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010280:	2b00      	cmp	r3, #0
 8010282:	d1e3      	bne.n	801024c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010288:	4618      	mov	r0, r3
 801028a:	f7fa ffd7 	bl	800b23c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010296:	b29b      	uxth	r3, r3
 8010298:	1ad3      	subs	r3, r2, r3
 801029a:	b29b      	uxth	r3, r3
 801029c:	4619      	mov	r1, r3
 801029e:	6878      	ldr	r0, [r7, #4]
 80102a0:	f7f3 fabc 	bl	800381c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80102a4:	e099      	b.n	80103da <HAL_UART_IRQHandler+0x50e>
 80102a6:	bf00      	nop
 80102a8:	08010a97 	.word	0x08010a97
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80102b4:	b29b      	uxth	r3, r3
 80102b6:	1ad3      	subs	r3, r2, r3
 80102b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80102c0:	b29b      	uxth	r3, r3
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	f000 808b 	beq.w	80103de <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80102c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	f000 8086 	beq.w	80103de <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	681b      	ldr	r3, [r3, #0]
 80102d6:	330c      	adds	r3, #12
 80102d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102dc:	e853 3f00 	ldrex	r3, [r3]
 80102e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80102e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80102e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	681b      	ldr	r3, [r3, #0]
 80102f0:	330c      	adds	r3, #12
 80102f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80102f6:	647a      	str	r2, [r7, #68]	; 0x44
 80102f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80102fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80102fe:	e841 2300 	strex	r3, r2, [r1]
 8010302:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010304:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010306:	2b00      	cmp	r3, #0
 8010308:	d1e3      	bne.n	80102d2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	681b      	ldr	r3, [r3, #0]
 801030e:	3314      	adds	r3, #20
 8010310:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010314:	e853 3f00 	ldrex	r3, [r3]
 8010318:	623b      	str	r3, [r7, #32]
   return(result);
 801031a:	6a3b      	ldr	r3, [r7, #32]
 801031c:	f023 0301 	bic.w	r3, r3, #1
 8010320:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	681b      	ldr	r3, [r3, #0]
 8010328:	3314      	adds	r3, #20
 801032a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801032e:	633a      	str	r2, [r7, #48]	; 0x30
 8010330:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010332:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010334:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010336:	e841 2300 	strex	r3, r2, [r1]
 801033a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801033c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801033e:	2b00      	cmp	r3, #0
 8010340:	d1e3      	bne.n	801030a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	2220      	movs	r2, #32
 8010346:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	2200      	movs	r2, #0
 801034e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	681b      	ldr	r3, [r3, #0]
 8010354:	330c      	adds	r3, #12
 8010356:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010358:	693b      	ldr	r3, [r7, #16]
 801035a:	e853 3f00 	ldrex	r3, [r3]
 801035e:	60fb      	str	r3, [r7, #12]
   return(result);
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	f023 0310 	bic.w	r3, r3, #16
 8010366:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	681b      	ldr	r3, [r3, #0]
 801036e:	330c      	adds	r3, #12
 8010370:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8010374:	61fa      	str	r2, [r7, #28]
 8010376:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010378:	69b9      	ldr	r1, [r7, #24]
 801037a:	69fa      	ldr	r2, [r7, #28]
 801037c:	e841 2300 	strex	r3, r2, [r1]
 8010380:	617b      	str	r3, [r7, #20]
   return(result);
 8010382:	697b      	ldr	r3, [r7, #20]
 8010384:	2b00      	cmp	r3, #0
 8010386:	d1e3      	bne.n	8010350 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8010388:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801038c:	4619      	mov	r1, r3
 801038e:	6878      	ldr	r0, [r7, #4]
 8010390:	f7f3 fa44 	bl	800381c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8010394:	e023      	b.n	80103de <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8010396:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801039a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801039e:	2b00      	cmp	r3, #0
 80103a0:	d009      	beq.n	80103b6 <HAL_UART_IRQHandler+0x4ea>
 80103a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80103a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d003      	beq.n	80103b6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80103ae:	6878      	ldr	r0, [r7, #4]
 80103b0:	f000 fb9d 	bl	8010aee <UART_Transmit_IT>
    return;
 80103b4:	e014      	b.n	80103e0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80103b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80103ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d00e      	beq.n	80103e0 <HAL_UART_IRQHandler+0x514>
 80103c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80103c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d008      	beq.n	80103e0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80103ce:	6878      	ldr	r0, [r7, #4]
 80103d0:	f000 fbdd 	bl	8010b8e <UART_EndTransmit_IT>
    return;
 80103d4:	e004      	b.n	80103e0 <HAL_UART_IRQHandler+0x514>
    return;
 80103d6:	bf00      	nop
 80103d8:	e002      	b.n	80103e0 <HAL_UART_IRQHandler+0x514>
      return;
 80103da:	bf00      	nop
 80103dc:	e000      	b.n	80103e0 <HAL_UART_IRQHandler+0x514>
      return;
 80103de:	bf00      	nop
  }
}
 80103e0:	37e8      	adds	r7, #232	; 0xe8
 80103e2:	46bd      	mov	sp, r7
 80103e4:	bd80      	pop	{r7, pc}
 80103e6:	bf00      	nop

080103e8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80103e8:	b480      	push	{r7}
 80103ea:	b083      	sub	sp, #12
 80103ec:	af00      	add	r7, sp, #0
 80103ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80103f0:	bf00      	nop
 80103f2:	370c      	adds	r7, #12
 80103f4:	46bd      	mov	sp, r7
 80103f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103fa:	4770      	bx	lr

080103fc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80103fc:	b480      	push	{r7}
 80103fe:	b083      	sub	sp, #12
 8010400:	af00      	add	r7, sp, #0
 8010402:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8010404:	bf00      	nop
 8010406:	370c      	adds	r7, #12
 8010408:	46bd      	mov	sp, r7
 801040a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801040e:	4770      	bx	lr

08010410 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8010410:	b480      	push	{r7}
 8010412:	b083      	sub	sp, #12
 8010414:	af00      	add	r7, sp, #0
 8010416:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8010418:	bf00      	nop
 801041a:	370c      	adds	r7, #12
 801041c:	46bd      	mov	sp, r7
 801041e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010422:	4770      	bx	lr

08010424 <HAL_HalfDuplex_EnableTransmitter>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 8010424:	b480      	push	{r7}
 8010426:	b085      	sub	sp, #20
 8010428:	af00      	add	r7, sp, #0
 801042a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 801042c:	2300      	movs	r3, #0
 801042e:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010436:	2b01      	cmp	r3, #1
 8010438:	d101      	bne.n	801043e <HAL_HalfDuplex_EnableTransmitter+0x1a>
 801043a:	2302      	movs	r3, #2
 801043c:	e020      	b.n	8010480 <HAL_HalfDuplex_EnableTransmitter+0x5c>
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	2201      	movs	r2, #1
 8010442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	2224      	movs	r2, #36	; 0x24
 801044a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	681b      	ldr	r3, [r3, #0]
 8010452:	68db      	ldr	r3, [r3, #12]
 8010454:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 8010456:	68fb      	ldr	r3, [r7, #12]
 8010458:	f023 030c 	bic.w	r3, r3, #12
 801045c:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_TE;
 801045e:	68fb      	ldr	r3, [r7, #12]
 8010460:	f043 0308 	orr.w	r3, r3, #8
 8010464:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	68fa      	ldr	r2, [r7, #12]
 801046c:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	2220      	movs	r2, #32
 8010472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	2200      	movs	r2, #0
 801047a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801047e:	2300      	movs	r3, #0
}
 8010480:	4618      	mov	r0, r3
 8010482:	3714      	adds	r7, #20
 8010484:	46bd      	mov	sp, r7
 8010486:	f85d 7b04 	ldr.w	r7, [sp], #4
 801048a:	4770      	bx	lr

0801048c <HAL_HalfDuplex_EnableReceiver>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 801048c:	b480      	push	{r7}
 801048e:	b085      	sub	sp, #20
 8010490:	af00      	add	r7, sp, #0
 8010492:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8010494:	2300      	movs	r3, #0
 8010496:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801049e:	2b01      	cmp	r3, #1
 80104a0:	d101      	bne.n	80104a6 <HAL_HalfDuplex_EnableReceiver+0x1a>
 80104a2:	2302      	movs	r3, #2
 80104a4:	e020      	b.n	80104e8 <HAL_HalfDuplex_EnableReceiver+0x5c>
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	2201      	movs	r2, #1
 80104aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	2224      	movs	r2, #36	; 0x24
 80104b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	681b      	ldr	r3, [r3, #0]
 80104ba:	68db      	ldr	r3, [r3, #12]
 80104bc:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	f023 030c 	bic.w	r3, r3, #12
 80104c4:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_RE;
 80104c6:	68fb      	ldr	r3, [r7, #12]
 80104c8:	f043 0304 	orr.w	r3, r3, #4
 80104cc:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	681b      	ldr	r3, [r3, #0]
 80104d2:	68fa      	ldr	r2, [r7, #12]
 80104d4:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	2220      	movs	r2, #32
 80104da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	2200      	movs	r2, #0
 80104e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80104e6:	2300      	movs	r3, #0
}
 80104e8:	4618      	mov	r0, r3
 80104ea:	3714      	adds	r7, #20
 80104ec:	46bd      	mov	sp, r7
 80104ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104f2:	4770      	bx	lr

080104f4 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 80104f4:	b480      	push	{r7}
 80104f6:	b085      	sub	sp, #20
 80104f8:	af00      	add	r7, sp, #0
 80104fa:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 80104fc:	2300      	movs	r3, #0
 80104fe:	60fb      	str	r3, [r7, #12]
 8010500:	2300      	movs	r3, #0
 8010502:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801050a:	b2db      	uxtb	r3, r3
 801050c:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010514:	b2db      	uxtb	r3, r3
 8010516:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8010518:	68fb      	ldr	r3, [r7, #12]
 801051a:	b2da      	uxtb	r2, r3
 801051c:	68bb      	ldr	r3, [r7, #8]
 801051e:	b2db      	uxtb	r3, r3
 8010520:	4313      	orrs	r3, r2
 8010522:	b2db      	uxtb	r3, r3
}
 8010524:	4618      	mov	r0, r3
 8010526:	3714      	adds	r7, #20
 8010528:	46bd      	mov	sp, r7
 801052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801052e:	4770      	bx	lr

08010530 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8010530:	b580      	push	{r7, lr}
 8010532:	b090      	sub	sp, #64	; 0x40
 8010534:	af00      	add	r7, sp, #0
 8010536:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801053c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	681b      	ldr	r3, [r3, #0]
 8010542:	681b      	ldr	r3, [r3, #0]
 8010544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010548:	2b00      	cmp	r3, #0
 801054a:	d137      	bne.n	80105bc <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 801054c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801054e:	2200      	movs	r2, #0
 8010550:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8010552:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010554:	681b      	ldr	r3, [r3, #0]
 8010556:	3314      	adds	r3, #20
 8010558:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801055a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801055c:	e853 3f00 	ldrex	r3, [r3]
 8010560:	623b      	str	r3, [r7, #32]
   return(result);
 8010562:	6a3b      	ldr	r3, [r7, #32]
 8010564:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010568:	63bb      	str	r3, [r7, #56]	; 0x38
 801056a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801056c:	681b      	ldr	r3, [r3, #0]
 801056e:	3314      	adds	r3, #20
 8010570:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010572:	633a      	str	r2, [r7, #48]	; 0x30
 8010574:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010576:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010578:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801057a:	e841 2300 	strex	r3, r2, [r1]
 801057e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010582:	2b00      	cmp	r3, #0
 8010584:	d1e5      	bne.n	8010552 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010586:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010588:	681b      	ldr	r3, [r3, #0]
 801058a:	330c      	adds	r3, #12
 801058c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801058e:	693b      	ldr	r3, [r7, #16]
 8010590:	e853 3f00 	ldrex	r3, [r3]
 8010594:	60fb      	str	r3, [r7, #12]
   return(result);
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801059c:	637b      	str	r3, [r7, #52]	; 0x34
 801059e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80105a0:	681b      	ldr	r3, [r3, #0]
 80105a2:	330c      	adds	r3, #12
 80105a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80105a6:	61fa      	str	r2, [r7, #28]
 80105a8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105aa:	69b9      	ldr	r1, [r7, #24]
 80105ac:	69fa      	ldr	r2, [r7, #28]
 80105ae:	e841 2300 	strex	r3, r2, [r1]
 80105b2:	617b      	str	r3, [r7, #20]
   return(result);
 80105b4:	697b      	ldr	r3, [r7, #20]
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d1e5      	bne.n	8010586 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80105ba:	e002      	b.n	80105c2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80105bc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80105be:	f7f3 f82d 	bl	800361c <HAL_UART_TxCpltCallback>
}
 80105c2:	bf00      	nop
 80105c4:	3740      	adds	r7, #64	; 0x40
 80105c6:	46bd      	mov	sp, r7
 80105c8:	bd80      	pop	{r7, pc}

080105ca <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80105ca:	b580      	push	{r7, lr}
 80105cc:	b084      	sub	sp, #16
 80105ce:	af00      	add	r7, sp, #0
 80105d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80105d6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80105d8:	68f8      	ldr	r0, [r7, #12]
 80105da:	f7ff ff05 	bl	80103e8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80105de:	bf00      	nop
 80105e0:	3710      	adds	r7, #16
 80105e2:	46bd      	mov	sp, r7
 80105e4:	bd80      	pop	{r7, pc}

080105e6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80105e6:	b580      	push	{r7, lr}
 80105e8:	b09c      	sub	sp, #112	; 0x70
 80105ea:	af00      	add	r7, sp, #0
 80105ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80105f2:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	681b      	ldr	r3, [r3, #0]
 80105f8:	681b      	ldr	r3, [r3, #0]
 80105fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d172      	bne.n	80106e8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8010602:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010604:	2200      	movs	r2, #0
 8010606:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010608:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	330c      	adds	r3, #12
 801060e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010610:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010612:	e853 3f00 	ldrex	r3, [r3]
 8010616:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010618:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801061a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801061e:	66bb      	str	r3, [r7, #104]	; 0x68
 8010620:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	330c      	adds	r3, #12
 8010626:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010628:	65ba      	str	r2, [r7, #88]	; 0x58
 801062a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801062c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801062e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010630:	e841 2300 	strex	r3, r2, [r1]
 8010634:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8010636:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010638:	2b00      	cmp	r3, #0
 801063a:	d1e5      	bne.n	8010608 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801063c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801063e:	681b      	ldr	r3, [r3, #0]
 8010640:	3314      	adds	r3, #20
 8010642:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010646:	e853 3f00 	ldrex	r3, [r3]
 801064a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801064c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801064e:	f023 0301 	bic.w	r3, r3, #1
 8010652:	667b      	str	r3, [r7, #100]	; 0x64
 8010654:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010656:	681b      	ldr	r3, [r3, #0]
 8010658:	3314      	adds	r3, #20
 801065a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801065c:	647a      	str	r2, [r7, #68]	; 0x44
 801065e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010660:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010662:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010664:	e841 2300 	strex	r3, r2, [r1]
 8010668:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801066a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801066c:	2b00      	cmp	r3, #0
 801066e:	d1e5      	bne.n	801063c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010670:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010672:	681b      	ldr	r3, [r3, #0]
 8010674:	3314      	adds	r3, #20
 8010676:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801067a:	e853 3f00 	ldrex	r3, [r3]
 801067e:	623b      	str	r3, [r7, #32]
   return(result);
 8010680:	6a3b      	ldr	r3, [r7, #32]
 8010682:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010686:	663b      	str	r3, [r7, #96]	; 0x60
 8010688:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	3314      	adds	r3, #20
 801068e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010690:	633a      	str	r2, [r7, #48]	; 0x30
 8010692:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010694:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010696:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010698:	e841 2300 	strex	r3, r2, [r1]
 801069c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801069e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d1e5      	bne.n	8010670 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80106a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80106a6:	2220      	movs	r2, #32
 80106a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80106ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80106ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80106b0:	2b01      	cmp	r3, #1
 80106b2:	d119      	bne.n	80106e8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80106b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	330c      	adds	r3, #12
 80106ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106bc:	693b      	ldr	r3, [r7, #16]
 80106be:	e853 3f00 	ldrex	r3, [r3]
 80106c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80106c4:	68fb      	ldr	r3, [r7, #12]
 80106c6:	f023 0310 	bic.w	r3, r3, #16
 80106ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80106cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	330c      	adds	r3, #12
 80106d2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80106d4:	61fa      	str	r2, [r7, #28]
 80106d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106d8:	69b9      	ldr	r1, [r7, #24]
 80106da:	69fa      	ldr	r2, [r7, #28]
 80106dc:	e841 2300 	strex	r3, r2, [r1]
 80106e0:	617b      	str	r3, [r7, #20]
   return(result);
 80106e2:	697b      	ldr	r3, [r7, #20]
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	d1e5      	bne.n	80106b4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80106e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80106ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80106ec:	2b01      	cmp	r3, #1
 80106ee:	d106      	bne.n	80106fe <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80106f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80106f2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80106f4:	4619      	mov	r1, r3
 80106f6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80106f8:	f7f3 f890 	bl	800381c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80106fc:	e002      	b.n	8010704 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80106fe:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8010700:	f7f2 ffca 	bl	8003698 <HAL_UART_RxCpltCallback>
}
 8010704:	bf00      	nop
 8010706:	3770      	adds	r7, #112	; 0x70
 8010708:	46bd      	mov	sp, r7
 801070a:	bd80      	pop	{r7, pc}

0801070c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801070c:	b580      	push	{r7, lr}
 801070e:	b084      	sub	sp, #16
 8010710:	af00      	add	r7, sp, #0
 8010712:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010718:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801071e:	2b01      	cmp	r3, #1
 8010720:	d108      	bne.n	8010734 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8010726:	085b      	lsrs	r3, r3, #1
 8010728:	b29b      	uxth	r3, r3
 801072a:	4619      	mov	r1, r3
 801072c:	68f8      	ldr	r0, [r7, #12]
 801072e:	f7f3 f875 	bl	800381c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010732:	e002      	b.n	801073a <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8010734:	68f8      	ldr	r0, [r7, #12]
 8010736:	f7ff fe61 	bl	80103fc <HAL_UART_RxHalfCpltCallback>
}
 801073a:	bf00      	nop
 801073c:	3710      	adds	r7, #16
 801073e:	46bd      	mov	sp, r7
 8010740:	bd80      	pop	{r7, pc}

08010742 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8010742:	b580      	push	{r7, lr}
 8010744:	b084      	sub	sp, #16
 8010746:	af00      	add	r7, sp, #0
 8010748:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 801074a:	2300      	movs	r3, #0
 801074c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010752:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8010754:	68bb      	ldr	r3, [r7, #8]
 8010756:	681b      	ldr	r3, [r3, #0]
 8010758:	695b      	ldr	r3, [r3, #20]
 801075a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801075e:	2b80      	cmp	r3, #128	; 0x80
 8010760:	bf0c      	ite	eq
 8010762:	2301      	moveq	r3, #1
 8010764:	2300      	movne	r3, #0
 8010766:	b2db      	uxtb	r3, r3
 8010768:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 801076a:	68bb      	ldr	r3, [r7, #8]
 801076c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010770:	b2db      	uxtb	r3, r3
 8010772:	2b21      	cmp	r3, #33	; 0x21
 8010774:	d108      	bne.n	8010788 <UART_DMAError+0x46>
 8010776:	68fb      	ldr	r3, [r7, #12]
 8010778:	2b00      	cmp	r3, #0
 801077a:	d005      	beq.n	8010788 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 801077c:	68bb      	ldr	r3, [r7, #8]
 801077e:	2200      	movs	r2, #0
 8010780:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8010782:	68b8      	ldr	r0, [r7, #8]
 8010784:	f000 f8fc 	bl	8010980 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8010788:	68bb      	ldr	r3, [r7, #8]
 801078a:	681b      	ldr	r3, [r3, #0]
 801078c:	695b      	ldr	r3, [r3, #20]
 801078e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010792:	2b40      	cmp	r3, #64	; 0x40
 8010794:	bf0c      	ite	eq
 8010796:	2301      	moveq	r3, #1
 8010798:	2300      	movne	r3, #0
 801079a:	b2db      	uxtb	r3, r3
 801079c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 801079e:	68bb      	ldr	r3, [r7, #8]
 80107a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80107a4:	b2db      	uxtb	r3, r3
 80107a6:	2b22      	cmp	r3, #34	; 0x22
 80107a8:	d108      	bne.n	80107bc <UART_DMAError+0x7a>
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	d005      	beq.n	80107bc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80107b0:	68bb      	ldr	r3, [r7, #8]
 80107b2:	2200      	movs	r2, #0
 80107b4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80107b6:	68b8      	ldr	r0, [r7, #8]
 80107b8:	f000 f90a 	bl	80109d0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80107bc:	68bb      	ldr	r3, [r7, #8]
 80107be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107c0:	f043 0210 	orr.w	r2, r3, #16
 80107c4:	68bb      	ldr	r3, [r7, #8]
 80107c6:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80107c8:	68b8      	ldr	r0, [r7, #8]
 80107ca:	f7f2 ffcf 	bl	800376c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80107ce:	bf00      	nop
 80107d0:	3710      	adds	r7, #16
 80107d2:	46bd      	mov	sp, r7
 80107d4:	bd80      	pop	{r7, pc}

080107d6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80107d6:	b480      	push	{r7}
 80107d8:	b085      	sub	sp, #20
 80107da:	af00      	add	r7, sp, #0
 80107dc:	60f8      	str	r0, [r7, #12]
 80107de:	60b9      	str	r1, [r7, #8]
 80107e0:	4613      	mov	r3, r2
 80107e2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80107e4:	68fb      	ldr	r3, [r7, #12]
 80107e6:	68ba      	ldr	r2, [r7, #8]
 80107e8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80107ea:	68fb      	ldr	r3, [r7, #12]
 80107ec:	88fa      	ldrh	r2, [r7, #6]
 80107ee:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	88fa      	ldrh	r2, [r7, #6]
 80107f4:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	2200      	movs	r2, #0
 80107fa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80107fc:	68fb      	ldr	r3, [r7, #12]
 80107fe:	2222      	movs	r2, #34	; 0x22
 8010800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010804:	68fb      	ldr	r3, [r7, #12]
 8010806:	2200      	movs	r2, #0
 8010808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 801080c:	68fb      	ldr	r3, [r7, #12]
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	68da      	ldr	r2, [r3, #12]
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	681b      	ldr	r3, [r3, #0]
 8010816:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801081a:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 801081c:	68fb      	ldr	r3, [r7, #12]
 801081e:	681b      	ldr	r3, [r3, #0]
 8010820:	695a      	ldr	r2, [r3, #20]
 8010822:	68fb      	ldr	r3, [r7, #12]
 8010824:	681b      	ldr	r3, [r3, #0]
 8010826:	f042 0201 	orr.w	r2, r2, #1
 801082a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 801082c:	68fb      	ldr	r3, [r7, #12]
 801082e:	681b      	ldr	r3, [r3, #0]
 8010830:	68da      	ldr	r2, [r3, #12]
 8010832:	68fb      	ldr	r3, [r7, #12]
 8010834:	681b      	ldr	r3, [r3, #0]
 8010836:	f042 0220 	orr.w	r2, r2, #32
 801083a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801083c:	2300      	movs	r3, #0
}
 801083e:	4618      	mov	r0, r3
 8010840:	3714      	adds	r7, #20
 8010842:	46bd      	mov	sp, r7
 8010844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010848:	4770      	bx	lr
	...

0801084c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801084c:	b580      	push	{r7, lr}
 801084e:	b098      	sub	sp, #96	; 0x60
 8010850:	af00      	add	r7, sp, #0
 8010852:	60f8      	str	r0, [r7, #12]
 8010854:	60b9      	str	r1, [r7, #8]
 8010856:	4613      	mov	r3, r2
 8010858:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 801085a:	68ba      	ldr	r2, [r7, #8]
 801085c:	68fb      	ldr	r3, [r7, #12]
 801085e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8010860:	68fb      	ldr	r3, [r7, #12]
 8010862:	88fa      	ldrh	r2, [r7, #6]
 8010864:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010866:	68fb      	ldr	r3, [r7, #12]
 8010868:	2200      	movs	r2, #0
 801086a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801086c:	68fb      	ldr	r3, [r7, #12]
 801086e:	2222      	movs	r2, #34	; 0x22
 8010870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8010874:	68fb      	ldr	r3, [r7, #12]
 8010876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010878:	4a3e      	ldr	r2, [pc, #248]	; (8010974 <UART_Start_Receive_DMA+0x128>)
 801087a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801087c:	68fb      	ldr	r3, [r7, #12]
 801087e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010880:	4a3d      	ldr	r2, [pc, #244]	; (8010978 <UART_Start_Receive_DMA+0x12c>)
 8010882:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8010884:	68fb      	ldr	r3, [r7, #12]
 8010886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010888:	4a3c      	ldr	r2, [pc, #240]	; (801097c <UART_Start_Receive_DMA+0x130>)
 801088a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 801088c:	68fb      	ldr	r3, [r7, #12]
 801088e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010890:	2200      	movs	r2, #0
 8010892:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8010894:	f107 0308 	add.w	r3, r7, #8
 8010898:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 801089a:	68fb      	ldr	r3, [r7, #12]
 801089c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 801089e:	68fb      	ldr	r3, [r7, #12]
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	3304      	adds	r3, #4
 80108a4:	4619      	mov	r1, r3
 80108a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80108a8:	681a      	ldr	r2, [r3, #0]
 80108aa:	88fb      	ldrh	r3, [r7, #6]
 80108ac:	f7fa fc6e 	bl	800b18c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80108b0:	2300      	movs	r3, #0
 80108b2:	613b      	str	r3, [r7, #16]
 80108b4:	68fb      	ldr	r3, [r7, #12]
 80108b6:	681b      	ldr	r3, [r3, #0]
 80108b8:	681b      	ldr	r3, [r3, #0]
 80108ba:	613b      	str	r3, [r7, #16]
 80108bc:	68fb      	ldr	r3, [r7, #12]
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	685b      	ldr	r3, [r3, #4]
 80108c2:	613b      	str	r3, [r7, #16]
 80108c4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80108c6:	68fb      	ldr	r3, [r7, #12]
 80108c8:	2200      	movs	r2, #0
 80108ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80108ce:	68fb      	ldr	r3, [r7, #12]
 80108d0:	681b      	ldr	r3, [r3, #0]
 80108d2:	330c      	adds	r3, #12
 80108d4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80108d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80108d8:	e853 3f00 	ldrex	r3, [r3]
 80108dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80108de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80108e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80108e4:	65bb      	str	r3, [r7, #88]	; 0x58
 80108e6:	68fb      	ldr	r3, [r7, #12]
 80108e8:	681b      	ldr	r3, [r3, #0]
 80108ea:	330c      	adds	r3, #12
 80108ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80108ee:	64fa      	str	r2, [r7, #76]	; 0x4c
 80108f0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108f2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80108f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80108f6:	e841 2300 	strex	r3, r2, [r1]
 80108fa:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80108fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d1e5      	bne.n	80108ce <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010902:	68fb      	ldr	r3, [r7, #12]
 8010904:	681b      	ldr	r3, [r3, #0]
 8010906:	3314      	adds	r3, #20
 8010908:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801090a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801090c:	e853 3f00 	ldrex	r3, [r3]
 8010910:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010914:	f043 0301 	orr.w	r3, r3, #1
 8010918:	657b      	str	r3, [r7, #84]	; 0x54
 801091a:	68fb      	ldr	r3, [r7, #12]
 801091c:	681b      	ldr	r3, [r3, #0]
 801091e:	3314      	adds	r3, #20
 8010920:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010922:	63ba      	str	r2, [r7, #56]	; 0x38
 8010924:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010926:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010928:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801092a:	e841 2300 	strex	r3, r2, [r1]
 801092e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010932:	2b00      	cmp	r3, #0
 8010934:	d1e5      	bne.n	8010902 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010936:	68fb      	ldr	r3, [r7, #12]
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	3314      	adds	r3, #20
 801093c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801093e:	69bb      	ldr	r3, [r7, #24]
 8010940:	e853 3f00 	ldrex	r3, [r3]
 8010944:	617b      	str	r3, [r7, #20]
   return(result);
 8010946:	697b      	ldr	r3, [r7, #20]
 8010948:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801094c:	653b      	str	r3, [r7, #80]	; 0x50
 801094e:	68fb      	ldr	r3, [r7, #12]
 8010950:	681b      	ldr	r3, [r3, #0]
 8010952:	3314      	adds	r3, #20
 8010954:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010956:	627a      	str	r2, [r7, #36]	; 0x24
 8010958:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801095a:	6a39      	ldr	r1, [r7, #32]
 801095c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801095e:	e841 2300 	strex	r3, r2, [r1]
 8010962:	61fb      	str	r3, [r7, #28]
   return(result);
 8010964:	69fb      	ldr	r3, [r7, #28]
 8010966:	2b00      	cmp	r3, #0
 8010968:	d1e5      	bne.n	8010936 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 801096a:	2300      	movs	r3, #0
}
 801096c:	4618      	mov	r0, r3
 801096e:	3760      	adds	r7, #96	; 0x60
 8010970:	46bd      	mov	sp, r7
 8010972:	bd80      	pop	{r7, pc}
 8010974:	080105e7 	.word	0x080105e7
 8010978:	0801070d 	.word	0x0801070d
 801097c:	08010743 	.word	0x08010743

08010980 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8010980:	b480      	push	{r7}
 8010982:	b089      	sub	sp, #36	; 0x24
 8010984:	af00      	add	r7, sp, #0
 8010986:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	681b      	ldr	r3, [r3, #0]
 801098c:	330c      	adds	r3, #12
 801098e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010990:	68fb      	ldr	r3, [r7, #12]
 8010992:	e853 3f00 	ldrex	r3, [r3]
 8010996:	60bb      	str	r3, [r7, #8]
   return(result);
 8010998:	68bb      	ldr	r3, [r7, #8]
 801099a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 801099e:	61fb      	str	r3, [r7, #28]
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	681b      	ldr	r3, [r3, #0]
 80109a4:	330c      	adds	r3, #12
 80109a6:	69fa      	ldr	r2, [r7, #28]
 80109a8:	61ba      	str	r2, [r7, #24]
 80109aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109ac:	6979      	ldr	r1, [r7, #20]
 80109ae:	69ba      	ldr	r2, [r7, #24]
 80109b0:	e841 2300 	strex	r3, r2, [r1]
 80109b4:	613b      	str	r3, [r7, #16]
   return(result);
 80109b6:	693b      	ldr	r3, [r7, #16]
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d1e5      	bne.n	8010988 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	2220      	movs	r2, #32
 80109c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80109c4:	bf00      	nop
 80109c6:	3724      	adds	r7, #36	; 0x24
 80109c8:	46bd      	mov	sp, r7
 80109ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ce:	4770      	bx	lr

080109d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80109d0:	b480      	push	{r7}
 80109d2:	b095      	sub	sp, #84	; 0x54
 80109d4:	af00      	add	r7, sp, #0
 80109d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	681b      	ldr	r3, [r3, #0]
 80109dc:	330c      	adds	r3, #12
 80109de:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80109e2:	e853 3f00 	ldrex	r3, [r3]
 80109e6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80109e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80109ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	330c      	adds	r3, #12
 80109f6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80109f8:	643a      	str	r2, [r7, #64]	; 0x40
 80109fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80109fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010a00:	e841 2300 	strex	r3, r2, [r1]
 8010a04:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	d1e5      	bne.n	80109d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	3314      	adds	r3, #20
 8010a12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a14:	6a3b      	ldr	r3, [r7, #32]
 8010a16:	e853 3f00 	ldrex	r3, [r3]
 8010a1a:	61fb      	str	r3, [r7, #28]
   return(result);
 8010a1c:	69fb      	ldr	r3, [r7, #28]
 8010a1e:	f023 0301 	bic.w	r3, r3, #1
 8010a22:	64bb      	str	r3, [r7, #72]	; 0x48
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	3314      	adds	r3, #20
 8010a2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010a2c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010a2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010a32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010a34:	e841 2300 	strex	r3, r2, [r1]
 8010a38:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	d1e5      	bne.n	8010a0c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a44:	2b01      	cmp	r3, #1
 8010a46:	d119      	bne.n	8010a7c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	681b      	ldr	r3, [r3, #0]
 8010a4c:	330c      	adds	r3, #12
 8010a4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a50:	68fb      	ldr	r3, [r7, #12]
 8010a52:	e853 3f00 	ldrex	r3, [r3]
 8010a56:	60bb      	str	r3, [r7, #8]
   return(result);
 8010a58:	68bb      	ldr	r3, [r7, #8]
 8010a5a:	f023 0310 	bic.w	r3, r3, #16
 8010a5e:	647b      	str	r3, [r7, #68]	; 0x44
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	681b      	ldr	r3, [r3, #0]
 8010a64:	330c      	adds	r3, #12
 8010a66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010a68:	61ba      	str	r2, [r7, #24]
 8010a6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a6c:	6979      	ldr	r1, [r7, #20]
 8010a6e:	69ba      	ldr	r2, [r7, #24]
 8010a70:	e841 2300 	strex	r3, r2, [r1]
 8010a74:	613b      	str	r3, [r7, #16]
   return(result);
 8010a76:	693b      	ldr	r3, [r7, #16]
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d1e5      	bne.n	8010a48 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	2220      	movs	r2, #32
 8010a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	2200      	movs	r2, #0
 8010a88:	631a      	str	r2, [r3, #48]	; 0x30
}
 8010a8a:	bf00      	nop
 8010a8c:	3754      	adds	r7, #84	; 0x54
 8010a8e:	46bd      	mov	sp, r7
 8010a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a94:	4770      	bx	lr

08010a96 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010a96:	b580      	push	{r7, lr}
 8010a98:	b084      	sub	sp, #16
 8010a9a:	af00      	add	r7, sp, #0
 8010a9c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010aa2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8010aa4:	68fb      	ldr	r3, [r7, #12]
 8010aa6:	2200      	movs	r2, #0
 8010aa8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8010aaa:	68fb      	ldr	r3, [r7, #12]
 8010aac:	2200      	movs	r2, #0
 8010aae:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010ab0:	68f8      	ldr	r0, [r7, #12]
 8010ab2:	f7f2 fe5b 	bl	800376c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010ab6:	bf00      	nop
 8010ab8:	3710      	adds	r7, #16
 8010aba:	46bd      	mov	sp, r7
 8010abc:	bd80      	pop	{r7, pc}

08010abe <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8010abe:	b580      	push	{r7, lr}
 8010ac0:	b084      	sub	sp, #16
 8010ac2:	af00      	add	r7, sp, #0
 8010ac4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010aca:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 8010acc:	68fb      	ldr	r3, [r7, #12]
 8010ace:	2200      	movs	r2, #0
 8010ad0:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010ad2:	68fb      	ldr	r3, [r7, #12]
 8010ad4:	2220      	movs	r2, #32
 8010ad6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010ada:	68fb      	ldr	r3, [r7, #12]
 8010adc:	2200      	movs	r2, #0
 8010ade:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8010ae0:	68f8      	ldr	r0, [r7, #12]
 8010ae2:	f7ff fc95 	bl	8010410 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010ae6:	bf00      	nop
 8010ae8:	3710      	adds	r7, #16
 8010aea:	46bd      	mov	sp, r7
 8010aec:	bd80      	pop	{r7, pc}

08010aee <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8010aee:	b480      	push	{r7}
 8010af0:	b085      	sub	sp, #20
 8010af2:	af00      	add	r7, sp, #0
 8010af4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010afc:	b2db      	uxtb	r3, r3
 8010afe:	2b21      	cmp	r3, #33	; 0x21
 8010b00:	d13e      	bne.n	8010b80 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	689b      	ldr	r3, [r3, #8]
 8010b06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010b0a:	d114      	bne.n	8010b36 <UART_Transmit_IT+0x48>
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	691b      	ldr	r3, [r3, #16]
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	d110      	bne.n	8010b36 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	6a1b      	ldr	r3, [r3, #32]
 8010b18:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8010b1a:	68fb      	ldr	r3, [r7, #12]
 8010b1c:	881b      	ldrh	r3, [r3, #0]
 8010b1e:	461a      	mov	r2, r3
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	681b      	ldr	r3, [r3, #0]
 8010b24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010b28:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	6a1b      	ldr	r3, [r3, #32]
 8010b2e:	1c9a      	adds	r2, r3, #2
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	621a      	str	r2, [r3, #32]
 8010b34:	e008      	b.n	8010b48 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	6a1b      	ldr	r3, [r3, #32]
 8010b3a:	1c59      	adds	r1, r3, #1
 8010b3c:	687a      	ldr	r2, [r7, #4]
 8010b3e:	6211      	str	r1, [r2, #32]
 8010b40:	781a      	ldrb	r2, [r3, #0]
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8010b4c:	b29b      	uxth	r3, r3
 8010b4e:	3b01      	subs	r3, #1
 8010b50:	b29b      	uxth	r3, r3
 8010b52:	687a      	ldr	r2, [r7, #4]
 8010b54:	4619      	mov	r1, r3
 8010b56:	84d1      	strh	r1, [r2, #38]	; 0x26
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d10f      	bne.n	8010b7c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	681b      	ldr	r3, [r3, #0]
 8010b60:	68da      	ldr	r2, [r3, #12]
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	681b      	ldr	r3, [r3, #0]
 8010b66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010b6a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	681b      	ldr	r3, [r3, #0]
 8010b70:	68da      	ldr	r2, [r3, #12]
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	681b      	ldr	r3, [r3, #0]
 8010b76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010b7a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8010b7c:	2300      	movs	r3, #0
 8010b7e:	e000      	b.n	8010b82 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8010b80:	2302      	movs	r3, #2
  }
}
 8010b82:	4618      	mov	r0, r3
 8010b84:	3714      	adds	r7, #20
 8010b86:	46bd      	mov	sp, r7
 8010b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b8c:	4770      	bx	lr

08010b8e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010b8e:	b580      	push	{r7, lr}
 8010b90:	b082      	sub	sp, #8
 8010b92:	af00      	add	r7, sp, #0
 8010b94:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	681b      	ldr	r3, [r3, #0]
 8010b9a:	68da      	ldr	r2, [r3, #12]
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010ba4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	2220      	movs	r2, #32
 8010baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010bae:	6878      	ldr	r0, [r7, #4]
 8010bb0:	f7f2 fd34 	bl	800361c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8010bb4:	2300      	movs	r3, #0
}
 8010bb6:	4618      	mov	r0, r3
 8010bb8:	3708      	adds	r7, #8
 8010bba:	46bd      	mov	sp, r7
 8010bbc:	bd80      	pop	{r7, pc}

08010bbe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8010bbe:	b580      	push	{r7, lr}
 8010bc0:	b08c      	sub	sp, #48	; 0x30
 8010bc2:	af00      	add	r7, sp, #0
 8010bc4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010bcc:	b2db      	uxtb	r3, r3
 8010bce:	2b22      	cmp	r3, #34	; 0x22
 8010bd0:	f040 80ab 	bne.w	8010d2a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	689b      	ldr	r3, [r3, #8]
 8010bd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010bdc:	d117      	bne.n	8010c0e <UART_Receive_IT+0x50>
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	691b      	ldr	r3, [r3, #16]
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	d113      	bne.n	8010c0e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8010be6:	2300      	movs	r3, #0
 8010be8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010bee:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	681b      	ldr	r3, [r3, #0]
 8010bf4:	685b      	ldr	r3, [r3, #4]
 8010bf6:	b29b      	uxth	r3, r3
 8010bf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010bfc:	b29a      	uxth	r2, r3
 8010bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c00:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010c06:	1c9a      	adds	r2, r3, #2
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	629a      	str	r2, [r3, #40]	; 0x28
 8010c0c:	e026      	b.n	8010c5c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010c12:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8010c14:	2300      	movs	r3, #0
 8010c16:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	689b      	ldr	r3, [r3, #8]
 8010c1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010c20:	d007      	beq.n	8010c32 <UART_Receive_IT+0x74>
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	689b      	ldr	r3, [r3, #8]
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d10a      	bne.n	8010c40 <UART_Receive_IT+0x82>
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	691b      	ldr	r3, [r3, #16]
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	d106      	bne.n	8010c40 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	681b      	ldr	r3, [r3, #0]
 8010c36:	685b      	ldr	r3, [r3, #4]
 8010c38:	b2da      	uxtb	r2, r3
 8010c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c3c:	701a      	strb	r2, [r3, #0]
 8010c3e:	e008      	b.n	8010c52 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	681b      	ldr	r3, [r3, #0]
 8010c44:	685b      	ldr	r3, [r3, #4]
 8010c46:	b2db      	uxtb	r3, r3
 8010c48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010c4c:	b2da      	uxtb	r2, r3
 8010c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c50:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010c56:	1c5a      	adds	r2, r3, #1
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010c60:	b29b      	uxth	r3, r3
 8010c62:	3b01      	subs	r3, #1
 8010c64:	b29b      	uxth	r3, r3
 8010c66:	687a      	ldr	r2, [r7, #4]
 8010c68:	4619      	mov	r1, r3
 8010c6a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	d15a      	bne.n	8010d26 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	681b      	ldr	r3, [r3, #0]
 8010c74:	68da      	ldr	r2, [r3, #12]
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	681b      	ldr	r3, [r3, #0]
 8010c7a:	f022 0220 	bic.w	r2, r2, #32
 8010c7e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	681b      	ldr	r3, [r3, #0]
 8010c84:	68da      	ldr	r2, [r3, #12]
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	681b      	ldr	r3, [r3, #0]
 8010c8a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8010c8e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	681b      	ldr	r3, [r3, #0]
 8010c94:	695a      	ldr	r2, [r3, #20]
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	681b      	ldr	r3, [r3, #0]
 8010c9a:	f022 0201 	bic.w	r2, r2, #1
 8010c9e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	2220      	movs	r2, #32
 8010ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010cac:	2b01      	cmp	r3, #1
 8010cae:	d135      	bne.n	8010d1c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	2200      	movs	r2, #0
 8010cb4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	681b      	ldr	r3, [r3, #0]
 8010cba:	330c      	adds	r3, #12
 8010cbc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010cbe:	697b      	ldr	r3, [r7, #20]
 8010cc0:	e853 3f00 	ldrex	r3, [r3]
 8010cc4:	613b      	str	r3, [r7, #16]
   return(result);
 8010cc6:	693b      	ldr	r3, [r7, #16]
 8010cc8:	f023 0310 	bic.w	r3, r3, #16
 8010ccc:	627b      	str	r3, [r7, #36]	; 0x24
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	681b      	ldr	r3, [r3, #0]
 8010cd2:	330c      	adds	r3, #12
 8010cd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010cd6:	623a      	str	r2, [r7, #32]
 8010cd8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010cda:	69f9      	ldr	r1, [r7, #28]
 8010cdc:	6a3a      	ldr	r2, [r7, #32]
 8010cde:	e841 2300 	strex	r3, r2, [r1]
 8010ce2:	61bb      	str	r3, [r7, #24]
   return(result);
 8010ce4:	69bb      	ldr	r3, [r7, #24]
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d1e5      	bne.n	8010cb6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	681b      	ldr	r3, [r3, #0]
 8010cee:	681b      	ldr	r3, [r3, #0]
 8010cf0:	f003 0310 	and.w	r3, r3, #16
 8010cf4:	2b10      	cmp	r3, #16
 8010cf6:	d10a      	bne.n	8010d0e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8010cf8:	2300      	movs	r3, #0
 8010cfa:	60fb      	str	r3, [r7, #12]
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	681b      	ldr	r3, [r3, #0]
 8010d02:	60fb      	str	r3, [r7, #12]
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	681b      	ldr	r3, [r3, #0]
 8010d08:	685b      	ldr	r3, [r3, #4]
 8010d0a:	60fb      	str	r3, [r7, #12]
 8010d0c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8010d12:	4619      	mov	r1, r3
 8010d14:	6878      	ldr	r0, [r7, #4]
 8010d16:	f7f2 fd81 	bl	800381c <HAL_UARTEx_RxEventCallback>
 8010d1a:	e002      	b.n	8010d22 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8010d1c:	6878      	ldr	r0, [r7, #4]
 8010d1e:	f7f2 fcbb 	bl	8003698 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8010d22:	2300      	movs	r3, #0
 8010d24:	e002      	b.n	8010d2c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8010d26:	2300      	movs	r3, #0
 8010d28:	e000      	b.n	8010d2c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8010d2a:	2302      	movs	r3, #2
  }
}
 8010d2c:	4618      	mov	r0, r3
 8010d2e:	3730      	adds	r7, #48	; 0x30
 8010d30:	46bd      	mov	sp, r7
 8010d32:	bd80      	pop	{r7, pc}

08010d34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010d34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010d38:	b0c0      	sub	sp, #256	; 0x100
 8010d3a:	af00      	add	r7, sp, #0
 8010d3c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010d44:	681b      	ldr	r3, [r3, #0]
 8010d46:	691b      	ldr	r3, [r3, #16]
 8010d48:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8010d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010d50:	68d9      	ldr	r1, [r3, #12]
 8010d52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010d56:	681a      	ldr	r2, [r3, #0]
 8010d58:	ea40 0301 	orr.w	r3, r0, r1
 8010d5c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8010d5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010d62:	689a      	ldr	r2, [r3, #8]
 8010d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010d68:	691b      	ldr	r3, [r3, #16]
 8010d6a:	431a      	orrs	r2, r3
 8010d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010d70:	695b      	ldr	r3, [r3, #20]
 8010d72:	431a      	orrs	r2, r3
 8010d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010d78:	69db      	ldr	r3, [r3, #28]
 8010d7a:	4313      	orrs	r3, r2
 8010d7c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8010d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010d84:	681b      	ldr	r3, [r3, #0]
 8010d86:	68db      	ldr	r3, [r3, #12]
 8010d88:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8010d8c:	f021 010c 	bic.w	r1, r1, #12
 8010d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010d94:	681a      	ldr	r2, [r3, #0]
 8010d96:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8010d9a:	430b      	orrs	r3, r1
 8010d9c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8010d9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010da2:	681b      	ldr	r3, [r3, #0]
 8010da4:	695b      	ldr	r3, [r3, #20]
 8010da6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8010daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010dae:	6999      	ldr	r1, [r3, #24]
 8010db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010db4:	681a      	ldr	r2, [r3, #0]
 8010db6:	ea40 0301 	orr.w	r3, r0, r1
 8010dba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8010dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010dc0:	681a      	ldr	r2, [r3, #0]
 8010dc2:	4b8f      	ldr	r3, [pc, #572]	; (8011000 <UART_SetConfig+0x2cc>)
 8010dc4:	429a      	cmp	r2, r3
 8010dc6:	d005      	beq.n	8010dd4 <UART_SetConfig+0xa0>
 8010dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010dcc:	681a      	ldr	r2, [r3, #0]
 8010dce:	4b8d      	ldr	r3, [pc, #564]	; (8011004 <UART_SetConfig+0x2d0>)
 8010dd0:	429a      	cmp	r2, r3
 8010dd2:	d104      	bne.n	8010dde <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8010dd4:	f7fd f950 	bl	800e078 <HAL_RCC_GetPCLK2Freq>
 8010dd8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8010ddc:	e003      	b.n	8010de6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8010dde:	f7fd f937 	bl	800e050 <HAL_RCC_GetPCLK1Freq>
 8010de2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010de6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010dea:	69db      	ldr	r3, [r3, #28]
 8010dec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010df0:	f040 810c 	bne.w	801100c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8010df4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010df8:	2200      	movs	r2, #0
 8010dfa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8010dfe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8010e02:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8010e06:	4622      	mov	r2, r4
 8010e08:	462b      	mov	r3, r5
 8010e0a:	1891      	adds	r1, r2, r2
 8010e0c:	65b9      	str	r1, [r7, #88]	; 0x58
 8010e0e:	415b      	adcs	r3, r3
 8010e10:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010e12:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8010e16:	4621      	mov	r1, r4
 8010e18:	eb12 0801 	adds.w	r8, r2, r1
 8010e1c:	4629      	mov	r1, r5
 8010e1e:	eb43 0901 	adc.w	r9, r3, r1
 8010e22:	f04f 0200 	mov.w	r2, #0
 8010e26:	f04f 0300 	mov.w	r3, #0
 8010e2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8010e2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8010e32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8010e36:	4690      	mov	r8, r2
 8010e38:	4699      	mov	r9, r3
 8010e3a:	4623      	mov	r3, r4
 8010e3c:	eb18 0303 	adds.w	r3, r8, r3
 8010e40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8010e44:	462b      	mov	r3, r5
 8010e46:	eb49 0303 	adc.w	r3, r9, r3
 8010e4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8010e4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010e52:	685b      	ldr	r3, [r3, #4]
 8010e54:	2200      	movs	r2, #0
 8010e56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8010e5a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8010e5e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8010e62:	460b      	mov	r3, r1
 8010e64:	18db      	adds	r3, r3, r3
 8010e66:	653b      	str	r3, [r7, #80]	; 0x50
 8010e68:	4613      	mov	r3, r2
 8010e6a:	eb42 0303 	adc.w	r3, r2, r3
 8010e6e:	657b      	str	r3, [r7, #84]	; 0x54
 8010e70:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8010e74:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8010e78:	f7ef fec6 	bl	8000c08 <__aeabi_uldivmod>
 8010e7c:	4602      	mov	r2, r0
 8010e7e:	460b      	mov	r3, r1
 8010e80:	4b61      	ldr	r3, [pc, #388]	; (8011008 <UART_SetConfig+0x2d4>)
 8010e82:	fba3 2302 	umull	r2, r3, r3, r2
 8010e86:	095b      	lsrs	r3, r3, #5
 8010e88:	011c      	lsls	r4, r3, #4
 8010e8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010e8e:	2200      	movs	r2, #0
 8010e90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8010e94:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8010e98:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8010e9c:	4642      	mov	r2, r8
 8010e9e:	464b      	mov	r3, r9
 8010ea0:	1891      	adds	r1, r2, r2
 8010ea2:	64b9      	str	r1, [r7, #72]	; 0x48
 8010ea4:	415b      	adcs	r3, r3
 8010ea6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010ea8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8010eac:	4641      	mov	r1, r8
 8010eae:	eb12 0a01 	adds.w	sl, r2, r1
 8010eb2:	4649      	mov	r1, r9
 8010eb4:	eb43 0b01 	adc.w	fp, r3, r1
 8010eb8:	f04f 0200 	mov.w	r2, #0
 8010ebc:	f04f 0300 	mov.w	r3, #0
 8010ec0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8010ec4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8010ec8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010ecc:	4692      	mov	sl, r2
 8010ece:	469b      	mov	fp, r3
 8010ed0:	4643      	mov	r3, r8
 8010ed2:	eb1a 0303 	adds.w	r3, sl, r3
 8010ed6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8010eda:	464b      	mov	r3, r9
 8010edc:	eb4b 0303 	adc.w	r3, fp, r3
 8010ee0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8010ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010ee8:	685b      	ldr	r3, [r3, #4]
 8010eea:	2200      	movs	r2, #0
 8010eec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8010ef0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8010ef4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8010ef8:	460b      	mov	r3, r1
 8010efa:	18db      	adds	r3, r3, r3
 8010efc:	643b      	str	r3, [r7, #64]	; 0x40
 8010efe:	4613      	mov	r3, r2
 8010f00:	eb42 0303 	adc.w	r3, r2, r3
 8010f04:	647b      	str	r3, [r7, #68]	; 0x44
 8010f06:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8010f0a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8010f0e:	f7ef fe7b 	bl	8000c08 <__aeabi_uldivmod>
 8010f12:	4602      	mov	r2, r0
 8010f14:	460b      	mov	r3, r1
 8010f16:	4611      	mov	r1, r2
 8010f18:	4b3b      	ldr	r3, [pc, #236]	; (8011008 <UART_SetConfig+0x2d4>)
 8010f1a:	fba3 2301 	umull	r2, r3, r3, r1
 8010f1e:	095b      	lsrs	r3, r3, #5
 8010f20:	2264      	movs	r2, #100	; 0x64
 8010f22:	fb02 f303 	mul.w	r3, r2, r3
 8010f26:	1acb      	subs	r3, r1, r3
 8010f28:	00db      	lsls	r3, r3, #3
 8010f2a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8010f2e:	4b36      	ldr	r3, [pc, #216]	; (8011008 <UART_SetConfig+0x2d4>)
 8010f30:	fba3 2302 	umull	r2, r3, r3, r2
 8010f34:	095b      	lsrs	r3, r3, #5
 8010f36:	005b      	lsls	r3, r3, #1
 8010f38:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8010f3c:	441c      	add	r4, r3
 8010f3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010f42:	2200      	movs	r2, #0
 8010f44:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8010f48:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8010f4c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8010f50:	4642      	mov	r2, r8
 8010f52:	464b      	mov	r3, r9
 8010f54:	1891      	adds	r1, r2, r2
 8010f56:	63b9      	str	r1, [r7, #56]	; 0x38
 8010f58:	415b      	adcs	r3, r3
 8010f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010f5c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8010f60:	4641      	mov	r1, r8
 8010f62:	1851      	adds	r1, r2, r1
 8010f64:	6339      	str	r1, [r7, #48]	; 0x30
 8010f66:	4649      	mov	r1, r9
 8010f68:	414b      	adcs	r3, r1
 8010f6a:	637b      	str	r3, [r7, #52]	; 0x34
 8010f6c:	f04f 0200 	mov.w	r2, #0
 8010f70:	f04f 0300 	mov.w	r3, #0
 8010f74:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8010f78:	4659      	mov	r1, fp
 8010f7a:	00cb      	lsls	r3, r1, #3
 8010f7c:	4651      	mov	r1, sl
 8010f7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8010f82:	4651      	mov	r1, sl
 8010f84:	00ca      	lsls	r2, r1, #3
 8010f86:	4610      	mov	r0, r2
 8010f88:	4619      	mov	r1, r3
 8010f8a:	4603      	mov	r3, r0
 8010f8c:	4642      	mov	r2, r8
 8010f8e:	189b      	adds	r3, r3, r2
 8010f90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8010f94:	464b      	mov	r3, r9
 8010f96:	460a      	mov	r2, r1
 8010f98:	eb42 0303 	adc.w	r3, r2, r3
 8010f9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010fa4:	685b      	ldr	r3, [r3, #4]
 8010fa6:	2200      	movs	r2, #0
 8010fa8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8010fac:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8010fb0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8010fb4:	460b      	mov	r3, r1
 8010fb6:	18db      	adds	r3, r3, r3
 8010fb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8010fba:	4613      	mov	r3, r2
 8010fbc:	eb42 0303 	adc.w	r3, r2, r3
 8010fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010fc2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8010fc6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8010fca:	f7ef fe1d 	bl	8000c08 <__aeabi_uldivmod>
 8010fce:	4602      	mov	r2, r0
 8010fd0:	460b      	mov	r3, r1
 8010fd2:	4b0d      	ldr	r3, [pc, #52]	; (8011008 <UART_SetConfig+0x2d4>)
 8010fd4:	fba3 1302 	umull	r1, r3, r3, r2
 8010fd8:	095b      	lsrs	r3, r3, #5
 8010fda:	2164      	movs	r1, #100	; 0x64
 8010fdc:	fb01 f303 	mul.w	r3, r1, r3
 8010fe0:	1ad3      	subs	r3, r2, r3
 8010fe2:	00db      	lsls	r3, r3, #3
 8010fe4:	3332      	adds	r3, #50	; 0x32
 8010fe6:	4a08      	ldr	r2, [pc, #32]	; (8011008 <UART_SetConfig+0x2d4>)
 8010fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8010fec:	095b      	lsrs	r3, r3, #5
 8010fee:	f003 0207 	and.w	r2, r3, #7
 8010ff2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010ff6:	681b      	ldr	r3, [r3, #0]
 8010ff8:	4422      	add	r2, r4
 8010ffa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8010ffc:	e105      	b.n	801120a <UART_SetConfig+0x4d6>
 8010ffe:	bf00      	nop
 8011000:	40011000 	.word	0x40011000
 8011004:	40011400 	.word	0x40011400
 8011008:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 801100c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011010:	2200      	movs	r2, #0
 8011012:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8011016:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 801101a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 801101e:	4642      	mov	r2, r8
 8011020:	464b      	mov	r3, r9
 8011022:	1891      	adds	r1, r2, r2
 8011024:	6239      	str	r1, [r7, #32]
 8011026:	415b      	adcs	r3, r3
 8011028:	627b      	str	r3, [r7, #36]	; 0x24
 801102a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801102e:	4641      	mov	r1, r8
 8011030:	1854      	adds	r4, r2, r1
 8011032:	4649      	mov	r1, r9
 8011034:	eb43 0501 	adc.w	r5, r3, r1
 8011038:	f04f 0200 	mov.w	r2, #0
 801103c:	f04f 0300 	mov.w	r3, #0
 8011040:	00eb      	lsls	r3, r5, #3
 8011042:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8011046:	00e2      	lsls	r2, r4, #3
 8011048:	4614      	mov	r4, r2
 801104a:	461d      	mov	r5, r3
 801104c:	4643      	mov	r3, r8
 801104e:	18e3      	adds	r3, r4, r3
 8011050:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8011054:	464b      	mov	r3, r9
 8011056:	eb45 0303 	adc.w	r3, r5, r3
 801105a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801105e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011062:	685b      	ldr	r3, [r3, #4]
 8011064:	2200      	movs	r2, #0
 8011066:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801106a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 801106e:	f04f 0200 	mov.w	r2, #0
 8011072:	f04f 0300 	mov.w	r3, #0
 8011076:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 801107a:	4629      	mov	r1, r5
 801107c:	008b      	lsls	r3, r1, #2
 801107e:	4621      	mov	r1, r4
 8011080:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8011084:	4621      	mov	r1, r4
 8011086:	008a      	lsls	r2, r1, #2
 8011088:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 801108c:	f7ef fdbc 	bl	8000c08 <__aeabi_uldivmod>
 8011090:	4602      	mov	r2, r0
 8011092:	460b      	mov	r3, r1
 8011094:	4b60      	ldr	r3, [pc, #384]	; (8011218 <UART_SetConfig+0x4e4>)
 8011096:	fba3 2302 	umull	r2, r3, r3, r2
 801109a:	095b      	lsrs	r3, r3, #5
 801109c:	011c      	lsls	r4, r3, #4
 801109e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80110a2:	2200      	movs	r2, #0
 80110a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80110a8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80110ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80110b0:	4642      	mov	r2, r8
 80110b2:	464b      	mov	r3, r9
 80110b4:	1891      	adds	r1, r2, r2
 80110b6:	61b9      	str	r1, [r7, #24]
 80110b8:	415b      	adcs	r3, r3
 80110ba:	61fb      	str	r3, [r7, #28]
 80110bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80110c0:	4641      	mov	r1, r8
 80110c2:	1851      	adds	r1, r2, r1
 80110c4:	6139      	str	r1, [r7, #16]
 80110c6:	4649      	mov	r1, r9
 80110c8:	414b      	adcs	r3, r1
 80110ca:	617b      	str	r3, [r7, #20]
 80110cc:	f04f 0200 	mov.w	r2, #0
 80110d0:	f04f 0300 	mov.w	r3, #0
 80110d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80110d8:	4659      	mov	r1, fp
 80110da:	00cb      	lsls	r3, r1, #3
 80110dc:	4651      	mov	r1, sl
 80110de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80110e2:	4651      	mov	r1, sl
 80110e4:	00ca      	lsls	r2, r1, #3
 80110e6:	4610      	mov	r0, r2
 80110e8:	4619      	mov	r1, r3
 80110ea:	4603      	mov	r3, r0
 80110ec:	4642      	mov	r2, r8
 80110ee:	189b      	adds	r3, r3, r2
 80110f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80110f4:	464b      	mov	r3, r9
 80110f6:	460a      	mov	r2, r1
 80110f8:	eb42 0303 	adc.w	r3, r2, r3
 80110fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011104:	685b      	ldr	r3, [r3, #4]
 8011106:	2200      	movs	r2, #0
 8011108:	67bb      	str	r3, [r7, #120]	; 0x78
 801110a:	67fa      	str	r2, [r7, #124]	; 0x7c
 801110c:	f04f 0200 	mov.w	r2, #0
 8011110:	f04f 0300 	mov.w	r3, #0
 8011114:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8011118:	4649      	mov	r1, r9
 801111a:	008b      	lsls	r3, r1, #2
 801111c:	4641      	mov	r1, r8
 801111e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8011122:	4641      	mov	r1, r8
 8011124:	008a      	lsls	r2, r1, #2
 8011126:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 801112a:	f7ef fd6d 	bl	8000c08 <__aeabi_uldivmod>
 801112e:	4602      	mov	r2, r0
 8011130:	460b      	mov	r3, r1
 8011132:	4b39      	ldr	r3, [pc, #228]	; (8011218 <UART_SetConfig+0x4e4>)
 8011134:	fba3 1302 	umull	r1, r3, r3, r2
 8011138:	095b      	lsrs	r3, r3, #5
 801113a:	2164      	movs	r1, #100	; 0x64
 801113c:	fb01 f303 	mul.w	r3, r1, r3
 8011140:	1ad3      	subs	r3, r2, r3
 8011142:	011b      	lsls	r3, r3, #4
 8011144:	3332      	adds	r3, #50	; 0x32
 8011146:	4a34      	ldr	r2, [pc, #208]	; (8011218 <UART_SetConfig+0x4e4>)
 8011148:	fba2 2303 	umull	r2, r3, r2, r3
 801114c:	095b      	lsrs	r3, r3, #5
 801114e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011152:	441c      	add	r4, r3
 8011154:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011158:	2200      	movs	r2, #0
 801115a:	673b      	str	r3, [r7, #112]	; 0x70
 801115c:	677a      	str	r2, [r7, #116]	; 0x74
 801115e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8011162:	4642      	mov	r2, r8
 8011164:	464b      	mov	r3, r9
 8011166:	1891      	adds	r1, r2, r2
 8011168:	60b9      	str	r1, [r7, #8]
 801116a:	415b      	adcs	r3, r3
 801116c:	60fb      	str	r3, [r7, #12]
 801116e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8011172:	4641      	mov	r1, r8
 8011174:	1851      	adds	r1, r2, r1
 8011176:	6039      	str	r1, [r7, #0]
 8011178:	4649      	mov	r1, r9
 801117a:	414b      	adcs	r3, r1
 801117c:	607b      	str	r3, [r7, #4]
 801117e:	f04f 0200 	mov.w	r2, #0
 8011182:	f04f 0300 	mov.w	r3, #0
 8011186:	e9d7 ab00 	ldrd	sl, fp, [r7]
 801118a:	4659      	mov	r1, fp
 801118c:	00cb      	lsls	r3, r1, #3
 801118e:	4651      	mov	r1, sl
 8011190:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8011194:	4651      	mov	r1, sl
 8011196:	00ca      	lsls	r2, r1, #3
 8011198:	4610      	mov	r0, r2
 801119a:	4619      	mov	r1, r3
 801119c:	4603      	mov	r3, r0
 801119e:	4642      	mov	r2, r8
 80111a0:	189b      	adds	r3, r3, r2
 80111a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80111a4:	464b      	mov	r3, r9
 80111a6:	460a      	mov	r2, r1
 80111a8:	eb42 0303 	adc.w	r3, r2, r3
 80111ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80111ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80111b2:	685b      	ldr	r3, [r3, #4]
 80111b4:	2200      	movs	r2, #0
 80111b6:	663b      	str	r3, [r7, #96]	; 0x60
 80111b8:	667a      	str	r2, [r7, #100]	; 0x64
 80111ba:	f04f 0200 	mov.w	r2, #0
 80111be:	f04f 0300 	mov.w	r3, #0
 80111c2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80111c6:	4649      	mov	r1, r9
 80111c8:	008b      	lsls	r3, r1, #2
 80111ca:	4641      	mov	r1, r8
 80111cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80111d0:	4641      	mov	r1, r8
 80111d2:	008a      	lsls	r2, r1, #2
 80111d4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80111d8:	f7ef fd16 	bl	8000c08 <__aeabi_uldivmod>
 80111dc:	4602      	mov	r2, r0
 80111de:	460b      	mov	r3, r1
 80111e0:	4b0d      	ldr	r3, [pc, #52]	; (8011218 <UART_SetConfig+0x4e4>)
 80111e2:	fba3 1302 	umull	r1, r3, r3, r2
 80111e6:	095b      	lsrs	r3, r3, #5
 80111e8:	2164      	movs	r1, #100	; 0x64
 80111ea:	fb01 f303 	mul.w	r3, r1, r3
 80111ee:	1ad3      	subs	r3, r2, r3
 80111f0:	011b      	lsls	r3, r3, #4
 80111f2:	3332      	adds	r3, #50	; 0x32
 80111f4:	4a08      	ldr	r2, [pc, #32]	; (8011218 <UART_SetConfig+0x4e4>)
 80111f6:	fba2 2303 	umull	r2, r3, r2, r3
 80111fa:	095b      	lsrs	r3, r3, #5
 80111fc:	f003 020f 	and.w	r2, r3, #15
 8011200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011204:	681b      	ldr	r3, [r3, #0]
 8011206:	4422      	add	r2, r4
 8011208:	609a      	str	r2, [r3, #8]
}
 801120a:	bf00      	nop
 801120c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8011210:	46bd      	mov	sp, r7
 8011212:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011216:	bf00      	nop
 8011218:	51eb851f 	.word	0x51eb851f

0801121c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 801121c:	b580      	push	{r7, lr}
 801121e:	b084      	sub	sp, #16
 8011220:	af04      	add	r7, sp, #16
//	  GATEWAY_ADDRESS[1] = 168;
//	  GATEWAY_ADDRESS[2] = 88;
//	  GATEWAY_ADDRESS[3] = 1;
//  }
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8011222:	2100      	movs	r1, #0
 8011224:	2000      	movs	r0, #0
 8011226:	f004 fe11 	bl	8015e4c <tcpip_init>
//	  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
//	  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
//  }
//  else
//  {
	  ipaddr.addr = 0;
 801122a:	4b2a      	ldr	r3, [pc, #168]	; (80112d4 <MX_LWIP_Init+0xb8>)
 801122c:	2200      	movs	r2, #0
 801122e:	601a      	str	r2, [r3, #0]
	  netmask.addr = 0;
 8011230:	4b29      	ldr	r3, [pc, #164]	; (80112d8 <MX_LWIP_Init+0xbc>)
 8011232:	2200      	movs	r2, #0
 8011234:	601a      	str	r2, [r3, #0]
	  gw.addr = 0;
 8011236:	4b29      	ldr	r3, [pc, #164]	; (80112dc <MX_LWIP_Init+0xc0>)
 8011238:	2200      	movs	r2, #0
 801123a:	601a      	str	r2, [r3, #0]
//  }
  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 801123c:	4b28      	ldr	r3, [pc, #160]	; (80112e0 <MX_LWIP_Init+0xc4>)
 801123e:	9302      	str	r3, [sp, #8]
 8011240:	4b28      	ldr	r3, [pc, #160]	; (80112e4 <MX_LWIP_Init+0xc8>)
 8011242:	9301      	str	r3, [sp, #4]
 8011244:	2300      	movs	r3, #0
 8011246:	9300      	str	r3, [sp, #0]
 8011248:	4b24      	ldr	r3, [pc, #144]	; (80112dc <MX_LWIP_Init+0xc0>)
 801124a:	4a23      	ldr	r2, [pc, #140]	; (80112d8 <MX_LWIP_Init+0xbc>)
 801124c:	4921      	ldr	r1, [pc, #132]	; (80112d4 <MX_LWIP_Init+0xb8>)
 801124e:	4826      	ldr	r0, [pc, #152]	; (80112e8 <MX_LWIP_Init+0xcc>)
 8011250:	f008 f834 	bl	80192bc <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8011254:	4824      	ldr	r0, [pc, #144]	; (80112e8 <MX_LWIP_Init+0xcc>)
 8011256:	f008 f9eb 	bl	8019630 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 801125a:	4b23      	ldr	r3, [pc, #140]	; (80112e8 <MX_LWIP_Init+0xcc>)
 801125c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011260:	089b      	lsrs	r3, r3, #2
 8011262:	f003 0301 	and.w	r3, r3, #1
 8011266:	b2db      	uxtb	r3, r3
 8011268:	2b00      	cmp	r3, #0
 801126a:	d003      	beq.n	8011274 <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 801126c:	481e      	ldr	r0, [pc, #120]	; (80112e8 <MX_LWIP_Init+0xcc>)
 801126e:	f008 f9ef 	bl	8019650 <netif_set_up>
 8011272:	e002      	b.n	801127a <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8011274:	481c      	ldr	r0, [pc, #112]	; (80112e8 <MX_LWIP_Init+0xcc>)
 8011276:	f008 fa57 	bl	8019728 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 801127a:	491c      	ldr	r1, [pc, #112]	; (80112ec <MX_LWIP_Init+0xd0>)
 801127c:	481a      	ldr	r0, [pc, #104]	; (80112e8 <MX_LWIP_Init+0xcc>)
 801127e:	f008 faed 	bl	801985c <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  Netif_LinkSemaphore = osSemaphoreNew(1, 1, NULL);
 8011282:	2200      	movs	r2, #0
 8011284:	2101      	movs	r1, #1
 8011286:	2001      	movs	r0, #1
 8011288:	f000 feb0 	bl	8011fec <osSemaphoreNew>
 801128c:	4603      	mov	r3, r0
 801128e:	4a18      	ldr	r2, [pc, #96]	; (80112f0 <MX_LWIP_Init+0xd4>)
 8011290:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 8011292:	4b18      	ldr	r3, [pc, #96]	; (80112f4 <MX_LWIP_Init+0xd8>)
 8011294:	4a14      	ldr	r2, [pc, #80]	; (80112e8 <MX_LWIP_Init+0xcc>)
 8011296:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 8011298:	4b15      	ldr	r3, [pc, #84]	; (80112f0 <MX_LWIP_Init+0xd4>)
 801129a:	681b      	ldr	r3, [r3, #0]
 801129c:	4a15      	ldr	r2, [pc, #84]	; (80112f4 <MX_LWIP_Init+0xd8>)
 801129e:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 80112a0:	2224      	movs	r2, #36	; 0x24
 80112a2:	2100      	movs	r1, #0
 80112a4:	4814      	ldr	r0, [pc, #80]	; (80112f8 <MX_LWIP_Init+0xdc>)
 80112a6:	f014 fc65 	bl	8025b74 <memset>
  attributes.name = "LinkThr";
 80112aa:	4b13      	ldr	r3, [pc, #76]	; (80112f8 <MX_LWIP_Init+0xdc>)
 80112ac:	4a13      	ldr	r2, [pc, #76]	; (80112fc <MX_LWIP_Init+0xe0>)
 80112ae:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 80112b0:	4b11      	ldr	r3, [pc, #68]	; (80112f8 <MX_LWIP_Init+0xdc>)
 80112b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80112b6:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 80112b8:	4b0f      	ldr	r3, [pc, #60]	; (80112f8 <MX_LWIP_Init+0xdc>)
 80112ba:	2210      	movs	r2, #16
 80112bc:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernetif_set_link, &link_arg, &attributes);
 80112be:	4a0e      	ldr	r2, [pc, #56]	; (80112f8 <MX_LWIP_Init+0xdc>)
 80112c0:	490c      	ldr	r1, [pc, #48]	; (80112f4 <MX_LWIP_Init+0xd8>)
 80112c2:	480f      	ldr	r0, [pc, #60]	; (8011300 <MX_LWIP_Init+0xe4>)
 80112c4:	f000 fccb 	bl	8011c5e <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */

  /* Start DHCP negotiation for a network interface (IPv4) */
//  if(HAL_GPIO_ReadPin(SW_DIP1_GPIO_Port, SW_DIP1_Pin) == 1)
//  {
	  dhcp_start(&gnetif);
 80112c8:	4807      	ldr	r0, [pc, #28]	; (80112e8 <MX_LWIP_Init+0xcc>)
 80112ca:	f010 fce1 	bl	8021c90 <dhcp_start>
//  mdns_resp_init();
//  mdns_resp_add_netif(&gnetif, gnetif.hostname, 120);
//  mdns_resp_add_service(&gnetif, "lwip.local", "_http", DNSSD_PROTO_TCP, 80, 3600, srv_txt, NULL);

/* USER CODE END 3 */
}
 80112ce:	bf00      	nop
 80112d0:	46bd      	mov	sp, r7
 80112d2:	bd80      	pop	{r7, pc}
 80112d4:	20014a28 	.word	0x20014a28
 80112d8:	20014a34 	.word	0x20014a34
 80112dc:	20014a38 	.word	0x20014a38
 80112e0:	08015d89 	.word	0x08015d89
 80112e4:	08011949 	.word	0x08011949
 80112e8:	200149f0 	.word	0x200149f0
 80112ec:	08011a2d 	.word	0x08011a2d
 80112f0:	20000074 	.word	0x20000074
 80112f4:	200149c0 	.word	0x200149c0
 80112f8:	200149cc 	.word	0x200149cc
 80112fc:	0802bdd4 	.word	0x0802bdd4
 8011300:	080119b5 	.word	0x080119b5

08011304 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8011304:	b580      	push	{r7, lr}
 8011306:	b08e      	sub	sp, #56	; 0x38
 8011308:	af00      	add	r7, sp, #0
 801130a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801130c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011310:	2200      	movs	r2, #0
 8011312:	601a      	str	r2, [r3, #0]
 8011314:	605a      	str	r2, [r3, #4]
 8011316:	609a      	str	r2, [r3, #8]
 8011318:	60da      	str	r2, [r3, #12]
 801131a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	681b      	ldr	r3, [r3, #0]
 8011320:	4a4a      	ldr	r2, [pc, #296]	; (801144c <HAL_ETH_MspInit+0x148>)
 8011322:	4293      	cmp	r3, r2
 8011324:	f040 808d 	bne.w	8011442 <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8011328:	2300      	movs	r3, #0
 801132a:	623b      	str	r3, [r7, #32]
 801132c:	4b48      	ldr	r3, [pc, #288]	; (8011450 <HAL_ETH_MspInit+0x14c>)
 801132e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011330:	4a47      	ldr	r2, [pc, #284]	; (8011450 <HAL_ETH_MspInit+0x14c>)
 8011332:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8011336:	6313      	str	r3, [r2, #48]	; 0x30
 8011338:	4b45      	ldr	r3, [pc, #276]	; (8011450 <HAL_ETH_MspInit+0x14c>)
 801133a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801133c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011340:	623b      	str	r3, [r7, #32]
 8011342:	6a3b      	ldr	r3, [r7, #32]
 8011344:	2300      	movs	r3, #0
 8011346:	61fb      	str	r3, [r7, #28]
 8011348:	4b41      	ldr	r3, [pc, #260]	; (8011450 <HAL_ETH_MspInit+0x14c>)
 801134a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801134c:	4a40      	ldr	r2, [pc, #256]	; (8011450 <HAL_ETH_MspInit+0x14c>)
 801134e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8011352:	6313      	str	r3, [r2, #48]	; 0x30
 8011354:	4b3e      	ldr	r3, [pc, #248]	; (8011450 <HAL_ETH_MspInit+0x14c>)
 8011356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011358:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801135c:	61fb      	str	r3, [r7, #28]
 801135e:	69fb      	ldr	r3, [r7, #28]
 8011360:	2300      	movs	r3, #0
 8011362:	61bb      	str	r3, [r7, #24]
 8011364:	4b3a      	ldr	r3, [pc, #232]	; (8011450 <HAL_ETH_MspInit+0x14c>)
 8011366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011368:	4a39      	ldr	r2, [pc, #228]	; (8011450 <HAL_ETH_MspInit+0x14c>)
 801136a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801136e:	6313      	str	r3, [r2, #48]	; 0x30
 8011370:	4b37      	ldr	r3, [pc, #220]	; (8011450 <HAL_ETH_MspInit+0x14c>)
 8011372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011374:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011378:	61bb      	str	r3, [r7, #24]
 801137a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 801137c:	2300      	movs	r3, #0
 801137e:	617b      	str	r3, [r7, #20]
 8011380:	4b33      	ldr	r3, [pc, #204]	; (8011450 <HAL_ETH_MspInit+0x14c>)
 8011382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011384:	4a32      	ldr	r2, [pc, #200]	; (8011450 <HAL_ETH_MspInit+0x14c>)
 8011386:	f043 0304 	orr.w	r3, r3, #4
 801138a:	6313      	str	r3, [r2, #48]	; 0x30
 801138c:	4b30      	ldr	r3, [pc, #192]	; (8011450 <HAL_ETH_MspInit+0x14c>)
 801138e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011390:	f003 0304 	and.w	r3, r3, #4
 8011394:	617b      	str	r3, [r7, #20]
 8011396:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011398:	2300      	movs	r3, #0
 801139a:	613b      	str	r3, [r7, #16]
 801139c:	4b2c      	ldr	r3, [pc, #176]	; (8011450 <HAL_ETH_MspInit+0x14c>)
 801139e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80113a0:	4a2b      	ldr	r2, [pc, #172]	; (8011450 <HAL_ETH_MspInit+0x14c>)
 80113a2:	f043 0301 	orr.w	r3, r3, #1
 80113a6:	6313      	str	r3, [r2, #48]	; 0x30
 80113a8:	4b29      	ldr	r3, [pc, #164]	; (8011450 <HAL_ETH_MspInit+0x14c>)
 80113aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80113ac:	f003 0301 	and.w	r3, r3, #1
 80113b0:	613b      	str	r3, [r7, #16]
 80113b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80113b4:	2300      	movs	r3, #0
 80113b6:	60fb      	str	r3, [r7, #12]
 80113b8:	4b25      	ldr	r3, [pc, #148]	; (8011450 <HAL_ETH_MspInit+0x14c>)
 80113ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80113bc:	4a24      	ldr	r2, [pc, #144]	; (8011450 <HAL_ETH_MspInit+0x14c>)
 80113be:	f043 0302 	orr.w	r3, r3, #2
 80113c2:	6313      	str	r3, [r2, #48]	; 0x30
 80113c4:	4b22      	ldr	r3, [pc, #136]	; (8011450 <HAL_ETH_MspInit+0x14c>)
 80113c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80113c8:	f003 0302 	and.w	r3, r3, #2
 80113cc:	60fb      	str	r3, [r7, #12]
 80113ce:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80113d0:	2332      	movs	r3, #50	; 0x32
 80113d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80113d4:	2302      	movs	r3, #2
 80113d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80113d8:	2300      	movs	r3, #0
 80113da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80113dc:	2303      	movs	r3, #3
 80113de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80113e0:	230b      	movs	r3, #11
 80113e2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80113e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80113e8:	4619      	mov	r1, r3
 80113ea:	481a      	ldr	r0, [pc, #104]	; (8011454 <HAL_ETH_MspInit+0x150>)
 80113ec:	f7fb fe94 	bl	800d118 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80113f0:	2386      	movs	r3, #134	; 0x86
 80113f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80113f4:	2302      	movs	r3, #2
 80113f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80113f8:	2300      	movs	r3, #0
 80113fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80113fc:	2303      	movs	r3, #3
 80113fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8011400:	230b      	movs	r3, #11
 8011402:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011404:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011408:	4619      	mov	r1, r3
 801140a:	4813      	ldr	r0, [pc, #76]	; (8011458 <HAL_ETH_MspInit+0x154>)
 801140c:	f7fb fe84 	bl	800d118 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8011410:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8011414:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011416:	2302      	movs	r3, #2
 8011418:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801141a:	2300      	movs	r3, #0
 801141c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801141e:	2303      	movs	r3, #3
 8011420:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8011422:	230b      	movs	r3, #11
 8011424:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011426:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801142a:	4619      	mov	r1, r3
 801142c:	480b      	ldr	r0, [pc, #44]	; (801145c <HAL_ETH_MspInit+0x158>)
 801142e:	f7fb fe73 	bl	800d118 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8011432:	2200      	movs	r2, #0
 8011434:	2105      	movs	r1, #5
 8011436:	203d      	movs	r0, #61	; 0x3d
 8011438:	f7f9 fdc3 	bl	800afc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 801143c:	203d      	movs	r0, #61	; 0x3d
 801143e:	f7f9 fddc 	bl	800affa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8011442:	bf00      	nop
 8011444:	3738      	adds	r7, #56	; 0x38
 8011446:	46bd      	mov	sp, r7
 8011448:	bd80      	pop	{r7, pc}
 801144a:	bf00      	nop
 801144c:	40028000 	.word	0x40028000
 8011450:	40023800 	.word	0x40023800
 8011454:	40020800 	.word	0x40020800
 8011458:	40020000 	.word	0x40020000
 801145c:	40020400 	.word	0x40020400

08011460 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8011460:	b580      	push	{r7, lr}
 8011462:	b082      	sub	sp, #8
 8011464:	af00      	add	r7, sp, #0
 8011466:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8011468:	4b04      	ldr	r3, [pc, #16]	; (801147c <HAL_ETH_RxCpltCallback+0x1c>)
 801146a:	681b      	ldr	r3, [r3, #0]
 801146c:	4618      	mov	r0, r3
 801146e:	f000 fe99 	bl	80121a4 <osSemaphoreRelease>
}
 8011472:	bf00      	nop
 8011474:	3708      	adds	r7, #8
 8011476:	46bd      	mov	sp, r7
 8011478:	bd80      	pop	{r7, pc}
 801147a:	bf00      	nop
 801147c:	20000078 	.word	0x20000078

08011480 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8011480:	b580      	push	{r7, lr}
 8011482:	b090      	sub	sp, #64	; 0x40
 8011484:	af00      	add	r7, sp, #0
 8011486:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8011488:	2300      	movs	r3, #0
 801148a:	637b      	str	r3, [r7, #52]	; 0x34
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 801148c:	4b64      	ldr	r3, [pc, #400]	; (8011620 <low_level_init+0x1a0>)
 801148e:	4a65      	ldr	r2, [pc, #404]	; (8011624 <low_level_init+0x1a4>)
 8011490:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8011492:	4b63      	ldr	r3, [pc, #396]	; (8011620 <low_level_init+0x1a0>)
 8011494:	2201      	movs	r2, #1
 8011496:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8011498:	4b61      	ldr	r3, [pc, #388]	; (8011620 <low_level_init+0x1a0>)
 801149a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 801149e:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80114a0:	4b5f      	ldr	r3, [pc, #380]	; (8011620 <low_level_init+0x1a0>)
 80114a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80114a6:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80114a8:	4b5d      	ldr	r3, [pc, #372]	; (8011620 <low_level_init+0x1a0>)
 80114aa:	2201      	movs	r2, #1
 80114ac:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 80114ae:	2300      	movs	r3, #0
 80114b0:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 80114b2:	2380      	movs	r3, #128	; 0x80
 80114b4:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 80114b6:	23e1      	movs	r3, #225	; 0xe1
 80114b8:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 80114ba:	2300      	movs	r3, #0
 80114bc:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 80114be:	2300      	movs	r3, #0
 80114c0:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 80114c2:	2300      	movs	r3, #0
 80114c4:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 80114c6:	4a56      	ldr	r2, [pc, #344]	; (8011620 <low_level_init+0x1a0>)
 80114c8:	f107 0308 	add.w	r3, r7, #8
 80114cc:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 80114ce:	4b54      	ldr	r3, [pc, #336]	; (8011620 <low_level_init+0x1a0>)
 80114d0:	2201      	movs	r2, #1
 80114d2:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80114d4:	4b52      	ldr	r3, [pc, #328]	; (8011620 <low_level_init+0x1a0>)
 80114d6:	2200      	movs	r2, #0
 80114d8:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80114da:	4b51      	ldr	r3, [pc, #324]	; (8011620 <low_level_init+0x1a0>)
 80114dc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80114e0:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
  uint32_t idBase = *((uint32_t *)UID_BASE);
 80114e2:	4b51      	ldr	r3, [pc, #324]	; (8011628 <low_level_init+0x1a8>)
 80114e4:	681b      	ldr	r3, [r3, #0]
 80114e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  MACAddr[3] = (idBase & 0x00ff0000) >> 16;
 80114e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114ea:	0c1b      	lsrs	r3, r3, #16
 80114ec:	b2db      	uxtb	r3, r3
 80114ee:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = (idBase & 0x0000ff00) >> 8;
 80114f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114f2:	0a1b      	lsrs	r3, r3, #8
 80114f4:	b2db      	uxtb	r3, r3
 80114f6:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = (idBase & 0x000000ff);
 80114f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114fa:	b2db      	uxtb	r3, r3
 80114fc:	737b      	strb	r3, [r7, #13]
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80114fe:	4848      	ldr	r0, [pc, #288]	; (8011620 <low_level_init+0x1a0>)
 8011500:	f7fa f998 	bl	800b834 <HAL_ETH_Init>
 8011504:	4603      	mov	r3, r0
 8011506:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  if (hal_eth_init_status == HAL_OK)
 801150a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801150e:	2b00      	cmp	r3, #0
 8011510:	d108      	bne.n	8011524 <low_level_init+0xa4>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011518:	f043 0304 	orr.w	r3, r3, #4
 801151c:	b2da      	uxtb	r2, r3
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8011524:	2304      	movs	r3, #4
 8011526:	4a41      	ldr	r2, [pc, #260]	; (801162c <low_level_init+0x1ac>)
 8011528:	4941      	ldr	r1, [pc, #260]	; (8011630 <low_level_init+0x1b0>)
 801152a:	483d      	ldr	r0, [pc, #244]	; (8011620 <low_level_init+0x1a0>)
 801152c:	f7fa fb1c 	bl	800bb68 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8011530:	2304      	movs	r3, #4
 8011532:	4a40      	ldr	r2, [pc, #256]	; (8011634 <low_level_init+0x1b4>)
 8011534:	4940      	ldr	r1, [pc, #256]	; (8011638 <low_level_init+0x1b8>)
 8011536:	483a      	ldr	r0, [pc, #232]	; (8011620 <low_level_init+0x1a0>)
 8011538:	f7fa fb7e 	bl	800bc38 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	2206      	movs	r2, #6
 8011540:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8011544:	4b36      	ldr	r3, [pc, #216]	; (8011620 <low_level_init+0x1a0>)
 8011546:	695b      	ldr	r3, [r3, #20]
 8011548:	781a      	ldrb	r2, [r3, #0]
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8011550:	4b33      	ldr	r3, [pc, #204]	; (8011620 <low_level_init+0x1a0>)
 8011552:	695b      	ldr	r3, [r3, #20]
 8011554:	785a      	ldrb	r2, [r3, #1]
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 801155c:	4b30      	ldr	r3, [pc, #192]	; (8011620 <low_level_init+0x1a0>)
 801155e:	695b      	ldr	r3, [r3, #20]
 8011560:	789a      	ldrb	r2, [r3, #2]
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8011568:	4b2d      	ldr	r3, [pc, #180]	; (8011620 <low_level_init+0x1a0>)
 801156a:	695b      	ldr	r3, [r3, #20]
 801156c:	78da      	ldrb	r2, [r3, #3]
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8011574:	4b2a      	ldr	r3, [pc, #168]	; (8011620 <low_level_init+0x1a0>)
 8011576:	695b      	ldr	r3, [r3, #20]
 8011578:	791a      	ldrb	r2, [r3, #4]
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8011580:	4b27      	ldr	r3, [pc, #156]	; (8011620 <low_level_init+0x1a0>)
 8011582:	695b      	ldr	r3, [r3, #20]
 8011584:	795a      	ldrb	r2, [r3, #5]
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = 1500;
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8011592:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801159a:	f043 030a 	orr.w	r3, r3, #10
 801159e:	b2da      	uxtb	r2, r3
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  s_xSemaphore = osSemaphoreNew(1, 1, NULL);
 80115a6:	2200      	movs	r2, #0
 80115a8:	2101      	movs	r1, #1
 80115aa:	2001      	movs	r0, #1
 80115ac:	f000 fd1e 	bl	8011fec <osSemaphoreNew>
 80115b0:	4603      	mov	r3, r0
 80115b2:	4a22      	ldr	r2, [pc, #136]	; (801163c <low_level_init+0x1bc>)
 80115b4:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 80115b6:	f107 0310 	add.w	r3, r7, #16
 80115ba:	2224      	movs	r2, #36	; 0x24
 80115bc:	2100      	movs	r1, #0
 80115be:	4618      	mov	r0, r3
 80115c0:	f014 fad8 	bl	8025b74 <memset>
  attributes.name = "EthIf";
 80115c4:	4b1e      	ldr	r3, [pc, #120]	; (8011640 <low_level_init+0x1c0>)
 80115c6:	613b      	str	r3, [r7, #16]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 80115c8:	f44f 73af 	mov.w	r3, #350	; 0x15e
 80115cc:	627b      	str	r3, [r7, #36]	; 0x24
  attributes.priority = osPriorityRealtime;
 80115ce:	2330      	movs	r3, #48	; 0x30
 80115d0:	62bb      	str	r3, [r7, #40]	; 0x28
  osThreadNew(ethernetif_input, netif, &attributes);
 80115d2:	f107 0310 	add.w	r3, r7, #16
 80115d6:	461a      	mov	r2, r3
 80115d8:	6879      	ldr	r1, [r7, #4]
 80115da:	481a      	ldr	r0, [pc, #104]	; (8011644 <low_level_init+0x1c4>)
 80115dc:	f000 fb3f 	bl	8011c5e <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 80115e0:	480f      	ldr	r0, [pc, #60]	; (8011620 <low_level_init+0x1a0>)
 80115e2:	f7fa fe4d 	bl	800c280 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 80115e6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80115ea:	461a      	mov	r2, r3
 80115ec:	211d      	movs	r1, #29
 80115ee:	480c      	ldr	r0, [pc, #48]	; (8011620 <low_level_init+0x1a0>)
 80115f0:	f7fa fd78 	bl	800c0e4 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 80115f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80115f6:	f043 030b 	orr.w	r3, r3, #11
 80115fa:	637b      	str	r3, [r7, #52]	; 0x34

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 80115fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80115fe:	461a      	mov	r2, r3
 8011600:	211d      	movs	r1, #29
 8011602:	4807      	ldr	r0, [pc, #28]	; (8011620 <low_level_init+0x1a0>)
 8011604:	f7fa fdd6 	bl	800c1b4 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8011608:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801160c:	461a      	mov	r2, r3
 801160e:	211d      	movs	r1, #29
 8011610:	4803      	ldr	r0, [pc, #12]	; (8011620 <low_level_init+0x1a0>)
 8011612:	f7fa fd67 	bl	800c0e4 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8011616:	bf00      	nop
 8011618:	3740      	adds	r7, #64	; 0x40
 801161a:	46bd      	mov	sp, r7
 801161c:	bd80      	pop	{r7, pc}
 801161e:	bf00      	nop
 8011620:	2001630c 	.word	0x2001630c
 8011624:	40028000 	.word	0x40028000
 8011628:	1fff7a10 	.word	0x1fff7a10
 801162c:	20016354 	.word	0x20016354
 8011630:	20014a3c 	.word	0x20014a3c
 8011634:	20014abc 	.word	0x20014abc
 8011638:	2001628c 	.word	0x2001628c
 801163c:	20000078 	.word	0x20000078
 8011640:	0802bddc 	.word	0x0802bddc
 8011644:	080118e9 	.word	0x080118e9

08011648 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8011648:	b580      	push	{r7, lr}
 801164a:	b08a      	sub	sp, #40	; 0x28
 801164c:	af00      	add	r7, sp, #0
 801164e:	6078      	str	r0, [r7, #4]
 8011650:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8011652:	4b4b      	ldr	r3, [pc, #300]	; (8011780 <low_level_output+0x138>)
 8011654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011656:	689b      	ldr	r3, [r3, #8]
 8011658:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 801165a:	2300      	movs	r3, #0
 801165c:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 801165e:	2300      	movs	r3, #0
 8011660:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8011662:	2300      	movs	r3, #0
 8011664:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8011666:	2300      	movs	r3, #0
 8011668:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 801166a:	4b45      	ldr	r3, [pc, #276]	; (8011780 <low_level_output+0x138>)
 801166c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801166e:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8011670:	2300      	movs	r3, #0
 8011672:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8011674:	683b      	ldr	r3, [r7, #0]
 8011676:	623b      	str	r3, [r7, #32]
 8011678:	e05a      	b.n	8011730 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 801167a:	69bb      	ldr	r3, [r7, #24]
 801167c:	681b      	ldr	r3, [r3, #0]
 801167e:	2b00      	cmp	r3, #0
 8011680:	da03      	bge.n	801168a <low_level_output+0x42>
      {
        errval = ERR_USE;
 8011682:	23f8      	movs	r3, #248	; 0xf8
 8011684:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8011688:	e05c      	b.n	8011744 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 801168a:	6a3b      	ldr	r3, [r7, #32]
 801168c:	895b      	ldrh	r3, [r3, #10]
 801168e:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8011690:	2300      	movs	r3, #0
 8011692:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8011694:	e02f      	b.n	80116f6 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8011696:	69fa      	ldr	r2, [r7, #28]
 8011698:	693b      	ldr	r3, [r7, #16]
 801169a:	18d0      	adds	r0, r2, r3
 801169c:	6a3b      	ldr	r3, [r7, #32]
 801169e:	685a      	ldr	r2, [r3, #4]
 80116a0:	68bb      	ldr	r3, [r7, #8]
 80116a2:	18d1      	adds	r1, r2, r3
 80116a4:	693b      	ldr	r3, [r7, #16]
 80116a6:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80116aa:	3304      	adds	r3, #4
 80116ac:	461a      	mov	r2, r3
 80116ae:	f014 fa39 	bl	8025b24 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80116b2:	69bb      	ldr	r3, [r7, #24]
 80116b4:	68db      	ldr	r3, [r3, #12]
 80116b6:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80116b8:	69bb      	ldr	r3, [r7, #24]
 80116ba:	681b      	ldr	r3, [r3, #0]
 80116bc:	2b00      	cmp	r3, #0
 80116be:	da03      	bge.n	80116c8 <low_level_output+0x80>
        {
          errval = ERR_USE;
 80116c0:	23f8      	movs	r3, #248	; 0xf8
 80116c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80116c6:	e03d      	b.n	8011744 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 80116c8:	69bb      	ldr	r3, [r7, #24]
 80116ca:	689b      	ldr	r3, [r3, #8]
 80116cc:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 80116ce:	693a      	ldr	r2, [r7, #16]
 80116d0:	68fb      	ldr	r3, [r7, #12]
 80116d2:	4413      	add	r3, r2
 80116d4:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80116d8:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 80116da:	68ba      	ldr	r2, [r7, #8]
 80116dc:	693b      	ldr	r3, [r7, #16]
 80116de:	1ad3      	subs	r3, r2, r3
 80116e0:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80116e4:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 80116e6:	697a      	ldr	r2, [r7, #20]
 80116e8:	693b      	ldr	r3, [r7, #16]
 80116ea:	1ad3      	subs	r3, r2, r3
 80116ec:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80116f0:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 80116f2:	2300      	movs	r3, #0
 80116f4:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80116f6:	68fa      	ldr	r2, [r7, #12]
 80116f8:	693b      	ldr	r3, [r7, #16]
 80116fa:	4413      	add	r3, r2
 80116fc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8011700:	4293      	cmp	r3, r2
 8011702:	d8c8      	bhi.n	8011696 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8011704:	69fa      	ldr	r2, [r7, #28]
 8011706:	693b      	ldr	r3, [r7, #16]
 8011708:	18d0      	adds	r0, r2, r3
 801170a:	6a3b      	ldr	r3, [r7, #32]
 801170c:	685a      	ldr	r2, [r3, #4]
 801170e:	68bb      	ldr	r3, [r7, #8]
 8011710:	4413      	add	r3, r2
 8011712:	68fa      	ldr	r2, [r7, #12]
 8011714:	4619      	mov	r1, r3
 8011716:	f014 fa05 	bl	8025b24 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 801171a:	693a      	ldr	r2, [r7, #16]
 801171c:	68fb      	ldr	r3, [r7, #12]
 801171e:	4413      	add	r3, r2
 8011720:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8011722:	697a      	ldr	r2, [r7, #20]
 8011724:	68fb      	ldr	r3, [r7, #12]
 8011726:	4413      	add	r3, r2
 8011728:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 801172a:	6a3b      	ldr	r3, [r7, #32]
 801172c:	681b      	ldr	r3, [r3, #0]
 801172e:	623b      	str	r3, [r7, #32]
 8011730:	6a3b      	ldr	r3, [r7, #32]
 8011732:	2b00      	cmp	r3, #0
 8011734:	d1a1      	bne.n	801167a <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8011736:	6979      	ldr	r1, [r7, #20]
 8011738:	4811      	ldr	r0, [pc, #68]	; (8011780 <low_level_output+0x138>)
 801173a:	f7fa fae9 	bl	800bd10 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 801173e:	2300      	movs	r3, #0
 8011740:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8011744:	4b0e      	ldr	r3, [pc, #56]	; (8011780 <low_level_output+0x138>)
 8011746:	681b      	ldr	r3, [r3, #0]
 8011748:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801174c:	695b      	ldr	r3, [r3, #20]
 801174e:	f003 0320 	and.w	r3, r3, #32
 8011752:	2b00      	cmp	r3, #0
 8011754:	d00d      	beq.n	8011772 <low_level_output+0x12a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8011756:	4b0a      	ldr	r3, [pc, #40]	; (8011780 <low_level_output+0x138>)
 8011758:	681b      	ldr	r3, [r3, #0]
 801175a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801175e:	461a      	mov	r2, r3
 8011760:	2320      	movs	r3, #32
 8011762:	6153      	str	r3, [r2, #20]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8011764:	4b06      	ldr	r3, [pc, #24]	; (8011780 <low_level_output+0x138>)
 8011766:	681b      	ldr	r3, [r3, #0]
 8011768:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801176c:	461a      	mov	r2, r3
 801176e:	2300      	movs	r3, #0
 8011770:	6053      	str	r3, [r2, #4]
  }
  return errval;
 8011772:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8011776:	4618      	mov	r0, r3
 8011778:	3728      	adds	r7, #40	; 0x28
 801177a:	46bd      	mov	sp, r7
 801177c:	bd80      	pop	{r7, pc}
 801177e:	bf00      	nop
 8011780:	2001630c 	.word	0x2001630c

08011784 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8011784:	b580      	push	{r7, lr}
 8011786:	b08c      	sub	sp, #48	; 0x30
 8011788:	af00      	add	r7, sp, #0
 801178a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 801178c:	2300      	movs	r3, #0
 801178e:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8011790:	2300      	movs	r3, #0
 8011792:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8011794:	2300      	movs	r3, #0
 8011796:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8011798:	2300      	movs	r3, #0
 801179a:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 801179c:	2300      	movs	r3, #0
 801179e:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 80117a0:	2300      	movs	r3, #0
 80117a2:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 80117a4:	2300      	movs	r3, #0
 80117a6:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 80117a8:	484e      	ldr	r0, [pc, #312]	; (80118e4 <low_level_input+0x160>)
 80117aa:	f7fa fb9b 	bl	800bee4 <HAL_ETH_GetReceivedFrame_IT>
 80117ae:	4603      	mov	r3, r0
 80117b0:	2b00      	cmp	r3, #0
 80117b2:	d001      	beq.n	80117b8 <low_level_input+0x34>

    return NULL;
 80117b4:	2300      	movs	r3, #0
 80117b6:	e091      	b.n	80118dc <low_level_input+0x158>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 80117b8:	4b4a      	ldr	r3, [pc, #296]	; (80118e4 <low_level_input+0x160>)
 80117ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80117bc:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 80117be:	4b49      	ldr	r3, [pc, #292]	; (80118e4 <low_level_input+0x160>)
 80117c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80117c2:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 80117c4:	89fb      	ldrh	r3, [r7, #14]
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d007      	beq.n	80117da <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80117ca:	89fb      	ldrh	r3, [r7, #14]
 80117cc:	f44f 72c1 	mov.w	r2, #386	; 0x182
 80117d0:	4619      	mov	r1, r3
 80117d2:	2000      	movs	r0, #0
 80117d4:	f008 f90c 	bl	80199f0 <pbuf_alloc>
 80117d8:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 80117da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d04b      	beq.n	8011878 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80117e0:	4b40      	ldr	r3, [pc, #256]	; (80118e4 <low_level_input+0x160>)
 80117e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80117e4:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 80117e6:	2300      	movs	r3, #0
 80117e8:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80117ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80117ee:	e040      	b.n	8011872 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 80117f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117f2:	895b      	ldrh	r3, [r3, #10]
 80117f4:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 80117f6:	2300      	movs	r3, #0
 80117f8:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80117fa:	e021      	b.n	8011840 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 80117fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117fe:	685a      	ldr	r2, [r3, #4]
 8011800:	69bb      	ldr	r3, [r7, #24]
 8011802:	18d0      	adds	r0, r2, r3
 8011804:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011806:	69fb      	ldr	r3, [r7, #28]
 8011808:	18d1      	adds	r1, r2, r3
 801180a:	69fb      	ldr	r3, [r7, #28]
 801180c:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8011810:	3304      	adds	r3, #4
 8011812:	461a      	mov	r2, r3
 8011814:	f014 f986 	bl	8025b24 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8011818:	6a3b      	ldr	r3, [r7, #32]
 801181a:	68db      	ldr	r3, [r3, #12]
 801181c:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 801181e:	6a3b      	ldr	r3, [r7, #32]
 8011820:	689b      	ldr	r3, [r3, #8]
 8011822:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8011824:	69fa      	ldr	r2, [r7, #28]
 8011826:	697b      	ldr	r3, [r7, #20]
 8011828:	4413      	add	r3, r2
 801182a:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 801182e:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8011830:	69ba      	ldr	r2, [r7, #24]
 8011832:	69fb      	ldr	r3, [r7, #28]
 8011834:	1ad3      	subs	r3, r2, r3
 8011836:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 801183a:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 801183c:	2300      	movs	r3, #0
 801183e:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8011840:	697a      	ldr	r2, [r7, #20]
 8011842:	69fb      	ldr	r3, [r7, #28]
 8011844:	4413      	add	r3, r2
 8011846:	f240 52f4 	movw	r2, #1524	; 0x5f4
 801184a:	4293      	cmp	r3, r2
 801184c:	d8d6      	bhi.n	80117fc <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 801184e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011850:	685a      	ldr	r2, [r3, #4]
 8011852:	69bb      	ldr	r3, [r7, #24]
 8011854:	18d0      	adds	r0, r2, r3
 8011856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011858:	69fb      	ldr	r3, [r7, #28]
 801185a:	4413      	add	r3, r2
 801185c:	697a      	ldr	r2, [r7, #20]
 801185e:	4619      	mov	r1, r3
 8011860:	f014 f960 	bl	8025b24 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8011864:	69fa      	ldr	r2, [r7, #28]
 8011866:	697b      	ldr	r3, [r7, #20]
 8011868:	4413      	add	r3, r2
 801186a:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 801186c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801186e:	681b      	ldr	r3, [r3, #0]
 8011870:	62bb      	str	r3, [r7, #40]	; 0x28
 8011872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011874:	2b00      	cmp	r3, #0
 8011876:	d1bb      	bne.n	80117f0 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8011878:	4b1a      	ldr	r3, [pc, #104]	; (80118e4 <low_level_input+0x160>)
 801187a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801187c:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 801187e:	2300      	movs	r3, #0
 8011880:	613b      	str	r3, [r7, #16]
 8011882:	e00b      	b.n	801189c <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8011884:	6a3b      	ldr	r3, [r7, #32]
 8011886:	681b      	ldr	r3, [r3, #0]
 8011888:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 801188c:	6a3b      	ldr	r3, [r7, #32]
 801188e:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8011890:	6a3b      	ldr	r3, [r7, #32]
 8011892:	68db      	ldr	r3, [r3, #12]
 8011894:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8011896:	693b      	ldr	r3, [r7, #16]
 8011898:	3301      	adds	r3, #1
 801189a:	613b      	str	r3, [r7, #16]
 801189c:	4b11      	ldr	r3, [pc, #68]	; (80118e4 <low_level_input+0x160>)
 801189e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80118a0:	693a      	ldr	r2, [r7, #16]
 80118a2:	429a      	cmp	r2, r3
 80118a4:	d3ee      	bcc.n	8011884 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 80118a6:	4b0f      	ldr	r3, [pc, #60]	; (80118e4 <low_level_input+0x160>)
 80118a8:	2200      	movs	r2, #0
 80118aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 80118ac:	4b0d      	ldr	r3, [pc, #52]	; (80118e4 <low_level_input+0x160>)
 80118ae:	681b      	ldr	r3, [r3, #0]
 80118b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80118b4:	695b      	ldr	r3, [r3, #20]
 80118b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	d00d      	beq.n	80118da <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 80118be:	4b09      	ldr	r3, [pc, #36]	; (80118e4 <low_level_input+0x160>)
 80118c0:	681b      	ldr	r3, [r3, #0]
 80118c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80118c6:	461a      	mov	r2, r3
 80118c8:	2380      	movs	r3, #128	; 0x80
 80118ca:	6153      	str	r3, [r2, #20]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 80118cc:	4b05      	ldr	r3, [pc, #20]	; (80118e4 <low_level_input+0x160>)
 80118ce:	681b      	ldr	r3, [r3, #0]
 80118d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80118d4:	461a      	mov	r2, r3
 80118d6:	2300      	movs	r3, #0
 80118d8:	6093      	str	r3, [r2, #8]
  }
  return p;
 80118da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80118dc:	4618      	mov	r0, r3
 80118de:	3730      	adds	r7, #48	; 0x30
 80118e0:	46bd      	mov	sp, r7
 80118e2:	bd80      	pop	{r7, pc}
 80118e4:	2001630c 	.word	0x2001630c

080118e8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 80118e8:	b580      	push	{r7, lr}
 80118ea:	b084      	sub	sp, #16
 80118ec:	af00      	add	r7, sp, #0
 80118ee:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80118f4:	4b12      	ldr	r3, [pc, #72]	; (8011940 <ethernetif_input+0x58>)
 80118f6:	681b      	ldr	r3, [r3, #0]
 80118f8:	f04f 31ff 	mov.w	r1, #4294967295
 80118fc:	4618      	mov	r0, r3
 80118fe:	f000 fbff 	bl	8012100 <osSemaphoreAcquire>
 8011902:	4603      	mov	r3, r0
 8011904:	2b00      	cmp	r3, #0
 8011906:	d1f5      	bne.n	80118f4 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8011908:	480e      	ldr	r0, [pc, #56]	; (8011944 <ethernetif_input+0x5c>)
 801190a:	f014 f857 	bl	80259bc <sys_mutex_lock>
        p = low_level_input( netif );
 801190e:	68f8      	ldr	r0, [r7, #12]
 8011910:	f7ff ff38 	bl	8011784 <low_level_input>
 8011914:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8011916:	68bb      	ldr	r3, [r7, #8]
 8011918:	2b00      	cmp	r3, #0
 801191a:	d00a      	beq.n	8011932 <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 801191c:	68fb      	ldr	r3, [r7, #12]
 801191e:	691b      	ldr	r3, [r3, #16]
 8011920:	68f9      	ldr	r1, [r7, #12]
 8011922:	68b8      	ldr	r0, [r7, #8]
 8011924:	4798      	blx	r3
 8011926:	4603      	mov	r3, r0
 8011928:	2b00      	cmp	r3, #0
 801192a:	d002      	beq.n	8011932 <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 801192c:	68b8      	ldr	r0, [r7, #8]
 801192e:	f008 fb43 	bl	8019fb8 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 8011932:	4804      	ldr	r0, [pc, #16]	; (8011944 <ethernetif_input+0x5c>)
 8011934:	f014 f851 	bl	80259da <sys_mutex_unlock>
      } while(p!=NULL);
 8011938:	68bb      	ldr	r3, [r7, #8]
 801193a:	2b00      	cmp	r3, #0
 801193c:	d1e4      	bne.n	8011908 <ethernetif_input+0x20>
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 801193e:	e7d9      	b.n	80118f4 <ethernetif_input+0xc>
 8011940:	20000078 	.word	0x20000078
 8011944:	20017b64 	.word	0x20017b64

08011948 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8011948:	b580      	push	{r7, lr}
 801194a:	b082      	sub	sp, #8
 801194c:	af00      	add	r7, sp, #0
 801194e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	2b00      	cmp	r3, #0
 8011954:	d106      	bne.n	8011964 <ethernetif_init+0x1c>
 8011956:	4b0e      	ldr	r3, [pc, #56]	; (8011990 <ethernetif_init+0x48>)
 8011958:	f44f 720d 	mov.w	r2, #564	; 0x234
 801195c:	490d      	ldr	r1, [pc, #52]	; (8011994 <ethernetif_init+0x4c>)
 801195e:	480e      	ldr	r0, [pc, #56]	; (8011998 <ethernetif_init+0x50>)
 8011960:	f014 ffb4 	bl	80268cc <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	2273      	movs	r2, #115	; 0x73
 8011968:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	2274      	movs	r2, #116	; 0x74
 8011970:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	4a09      	ldr	r2, [pc, #36]	; (801199c <ethernetif_init+0x54>)
 8011978:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	4a08      	ldr	r2, [pc, #32]	; (80119a0 <ethernetif_init+0x58>)
 801197e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8011980:	6878      	ldr	r0, [r7, #4]
 8011982:	f7ff fd7d 	bl	8011480 <low_level_init>

  return ERR_OK;
 8011986:	2300      	movs	r3, #0
}
 8011988:	4618      	mov	r0, r3
 801198a:	3708      	adds	r7, #8
 801198c:	46bd      	mov	sp, r7
 801198e:	bd80      	pop	{r7, pc}
 8011990:	0802bde4 	.word	0x0802bde4
 8011994:	0802be00 	.word	0x0802be00
 8011998:	0802be10 	.word	0x0802be10
 801199c:	08023b5d 	.word	0x08023b5d
 80119a0:	08011649 	.word	0x08011649

080119a4 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 80119a4:	b580      	push	{r7, lr}
 80119a6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80119a8:	f7f9 fa00 	bl	800adac <HAL_GetTick>
 80119ac:	4603      	mov	r3, r0
}
 80119ae:	4618      	mov	r0, r3
 80119b0:	bd80      	pop	{r7, pc}
	...

080119b4 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void* argument)

{
 80119b4:	b580      	push	{r7, lr}
 80119b6:	b084      	sub	sp, #16
 80119b8:	af00      	add	r7, sp, #0
 80119ba:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 80119bc:	2300      	movs	r3, #0
 80119be:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80119c4:	f107 0308 	add.w	r3, r7, #8
 80119c8:	461a      	mov	r2, r3
 80119ca:	2101      	movs	r1, #1
 80119cc:	4816      	ldr	r0, [pc, #88]	; (8011a28 <ethernetif_set_link+0x74>)
 80119ce:	f7fa fb89 	bl	800c0e4 <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 80119d2:	68bb      	ldr	r3, [r7, #8]
 80119d4:	f003 0304 	and.w	r3, r3, #4
 80119d8:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 80119da:	68fb      	ldr	r3, [r7, #12]
 80119dc:	681b      	ldr	r3, [r3, #0]
 80119de:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80119e2:	f003 0304 	and.w	r3, r3, #4
 80119e6:	2b00      	cmp	r3, #0
 80119e8:	d108      	bne.n	80119fc <ethernetif_set_link+0x48>
 80119ea:	68bb      	ldr	r3, [r7, #8]
 80119ec:	2b00      	cmp	r3, #0
 80119ee:	d005      	beq.n	80119fc <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 80119f0:	68fb      	ldr	r3, [r7, #12]
 80119f2:	681b      	ldr	r3, [r3, #0]
 80119f4:	4618      	mov	r0, r3
 80119f6:	f007 fec9 	bl	801978c <netif_set_link_up>
 80119fa:	e011      	b.n	8011a20 <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 80119fc:	68fb      	ldr	r3, [r7, #12]
 80119fe:	681b      	ldr	r3, [r3, #0]
 8011a00:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011a04:	089b      	lsrs	r3, r3, #2
 8011a06:	f003 0301 	and.w	r3, r3, #1
 8011a0a:	b2db      	uxtb	r3, r3
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d007      	beq.n	8011a20 <ethernetif_set_link+0x6c>
 8011a10:	68bb      	ldr	r3, [r7, #8]
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	d104      	bne.n	8011a20 <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 8011a16:	68fb      	ldr	r3, [r7, #12]
 8011a18:	681b      	ldr	r3, [r3, #0]
 8011a1a:	4618      	mov	r0, r3
 8011a1c:	f007 feee 	bl	80197fc <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 8011a20:	20c8      	movs	r0, #200	; 0xc8
 8011a22:	f000 f9ba 	bl	8011d9a <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8011a26:	e7cd      	b.n	80119c4 <ethernetif_set_link+0x10>
 8011a28:	2001630c 	.word	0x2001630c

08011a2c <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8011a2c:	b580      	push	{r7, lr}
 8011a2e:	b084      	sub	sp, #16
 8011a30:	af00      	add	r7, sp, #0
 8011a32:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8011a34:	2300      	movs	r3, #0
 8011a36:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8011a38:	2300      	movs	r3, #0
 8011a3a:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011a42:	089b      	lsrs	r3, r3, #2
 8011a44:	f003 0301 	and.w	r3, r3, #1
 8011a48:	b2db      	uxtb	r3, r3
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	d05d      	beq.n	8011b0a <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8011a4e:	4b34      	ldr	r3, [pc, #208]	; (8011b20 <ethernetif_update_config+0xf4>)
 8011a50:	685b      	ldr	r3, [r3, #4]
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d03f      	beq.n	8011ad6 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8011a56:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8011a5a:	2100      	movs	r1, #0
 8011a5c:	4830      	ldr	r0, [pc, #192]	; (8011b20 <ethernetif_update_config+0xf4>)
 8011a5e:	f7fa fba9 	bl	800c1b4 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8011a62:	f7f9 f9a3 	bl	800adac <HAL_GetTick>
 8011a66:	4603      	mov	r3, r0
 8011a68:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8011a6a:	f107 0308 	add.w	r3, r7, #8
 8011a6e:	461a      	mov	r2, r3
 8011a70:	2101      	movs	r1, #1
 8011a72:	482b      	ldr	r0, [pc, #172]	; (8011b20 <ethernetif_update_config+0xf4>)
 8011a74:	f7fa fb36 	bl	800c0e4 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8011a78:	f7f9 f998 	bl	800adac <HAL_GetTick>
 8011a7c:	4602      	mov	r2, r0
 8011a7e:	68fb      	ldr	r3, [r7, #12]
 8011a80:	1ad3      	subs	r3, r2, r3
 8011a82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011a86:	d828      	bhi.n	8011ada <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8011a88:	68bb      	ldr	r3, [r7, #8]
 8011a8a:	f003 0320 	and.w	r3, r3, #32
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d0eb      	beq.n	8011a6a <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8011a92:	f107 0308 	add.w	r3, r7, #8
 8011a96:	461a      	mov	r2, r3
 8011a98:	2110      	movs	r1, #16
 8011a9a:	4821      	ldr	r0, [pc, #132]	; (8011b20 <ethernetif_update_config+0xf4>)
 8011a9c:	f7fa fb22 	bl	800c0e4 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8011aa0:	68bb      	ldr	r3, [r7, #8]
 8011aa2:	f003 0304 	and.w	r3, r3, #4
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	d004      	beq.n	8011ab4 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8011aaa:	4b1d      	ldr	r3, [pc, #116]	; (8011b20 <ethernetif_update_config+0xf4>)
 8011aac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011ab0:	60da      	str	r2, [r3, #12]
 8011ab2:	e002      	b.n	8011aba <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8011ab4:	4b1a      	ldr	r3, [pc, #104]	; (8011b20 <ethernetif_update_config+0xf4>)
 8011ab6:	2200      	movs	r2, #0
 8011ab8:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8011aba:	68bb      	ldr	r3, [r7, #8]
 8011abc:	f003 0302 	and.w	r3, r3, #2
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d003      	beq.n	8011acc <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8011ac4:	4b16      	ldr	r3, [pc, #88]	; (8011b20 <ethernetif_update_config+0xf4>)
 8011ac6:	2200      	movs	r2, #0
 8011ac8:	609a      	str	r2, [r3, #8]
 8011aca:	e016      	b.n	8011afa <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8011acc:	4b14      	ldr	r3, [pc, #80]	; (8011b20 <ethernetif_update_config+0xf4>)
 8011ace:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8011ad2:	609a      	str	r2, [r3, #8]
 8011ad4:	e011      	b.n	8011afa <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8011ad6:	bf00      	nop
 8011ad8:	e000      	b.n	8011adc <ethernetif_update_config+0xb0>
          goto error;
 8011ada:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8011adc:	4b10      	ldr	r3, [pc, #64]	; (8011b20 <ethernetif_update_config+0xf4>)
 8011ade:	68db      	ldr	r3, [r3, #12]
 8011ae0:	08db      	lsrs	r3, r3, #3
 8011ae2:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8011ae4:	4b0e      	ldr	r3, [pc, #56]	; (8011b20 <ethernetif_update_config+0xf4>)
 8011ae6:	689b      	ldr	r3, [r3, #8]
 8011ae8:	085b      	lsrs	r3, r3, #1
 8011aea:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8011aec:	4313      	orrs	r3, r2
 8011aee:	b29b      	uxth	r3, r3
 8011af0:	461a      	mov	r2, r3
 8011af2:	2100      	movs	r1, #0
 8011af4:	480a      	ldr	r0, [pc, #40]	; (8011b20 <ethernetif_update_config+0xf4>)
 8011af6:	f7fa fb5d 	bl	800c1b4 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8011afa:	2100      	movs	r1, #0
 8011afc:	4808      	ldr	r0, [pc, #32]	; (8011b20 <ethernetif_update_config+0xf4>)
 8011afe:	f7fa fc1d 	bl	800c33c <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8011b02:	4807      	ldr	r0, [pc, #28]	; (8011b20 <ethernetif_update_config+0xf4>)
 8011b04:	f7fa fbbc 	bl	800c280 <HAL_ETH_Start>
 8011b08:	e002      	b.n	8011b10 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8011b0a:	4805      	ldr	r0, [pc, #20]	; (8011b20 <ethernetif_update_config+0xf4>)
 8011b0c:	f7fa fbe7 	bl	800c2de <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8011b10:	6878      	ldr	r0, [r7, #4]
 8011b12:	f000 f807 	bl	8011b24 <ethernetif_notify_conn_changed>
}
 8011b16:	bf00      	nop
 8011b18:	3710      	adds	r7, #16
 8011b1a:	46bd      	mov	sp, r7
 8011b1c:	bd80      	pop	{r7, pc}
 8011b1e:	bf00      	nop
 8011b20:	2001630c 	.word	0x2001630c

08011b24 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8011b24:	b480      	push	{r7}
 8011b26:	b083      	sub	sp, #12
 8011b28:	af00      	add	r7, sp, #0
 8011b2a:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8011b2c:	bf00      	nop
 8011b2e:	370c      	adds	r7, #12
 8011b30:	46bd      	mov	sp, r7
 8011b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b36:	4770      	bx	lr

08011b38 <__NVIC_SetPriority>:
{
 8011b38:	b480      	push	{r7}
 8011b3a:	b083      	sub	sp, #12
 8011b3c:	af00      	add	r7, sp, #0
 8011b3e:	4603      	mov	r3, r0
 8011b40:	6039      	str	r1, [r7, #0]
 8011b42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	db0a      	blt.n	8011b62 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011b4c:	683b      	ldr	r3, [r7, #0]
 8011b4e:	b2da      	uxtb	r2, r3
 8011b50:	490c      	ldr	r1, [pc, #48]	; (8011b84 <__NVIC_SetPriority+0x4c>)
 8011b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011b56:	0112      	lsls	r2, r2, #4
 8011b58:	b2d2      	uxtb	r2, r2
 8011b5a:	440b      	add	r3, r1
 8011b5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8011b60:	e00a      	b.n	8011b78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011b62:	683b      	ldr	r3, [r7, #0]
 8011b64:	b2da      	uxtb	r2, r3
 8011b66:	4908      	ldr	r1, [pc, #32]	; (8011b88 <__NVIC_SetPriority+0x50>)
 8011b68:	79fb      	ldrb	r3, [r7, #7]
 8011b6a:	f003 030f 	and.w	r3, r3, #15
 8011b6e:	3b04      	subs	r3, #4
 8011b70:	0112      	lsls	r2, r2, #4
 8011b72:	b2d2      	uxtb	r2, r2
 8011b74:	440b      	add	r3, r1
 8011b76:	761a      	strb	r2, [r3, #24]
}
 8011b78:	bf00      	nop
 8011b7a:	370c      	adds	r7, #12
 8011b7c:	46bd      	mov	sp, r7
 8011b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b82:	4770      	bx	lr
 8011b84:	e000e100 	.word	0xe000e100
 8011b88:	e000ed00 	.word	0xe000ed00

08011b8c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8011b8c:	b580      	push	{r7, lr}
 8011b8e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8011b90:	2100      	movs	r1, #0
 8011b92:	f06f 0004 	mvn.w	r0, #4
 8011b96:	f7ff ffcf 	bl	8011b38 <__NVIC_SetPriority>
#endif
}
 8011b9a:	bf00      	nop
 8011b9c:	bd80      	pop	{r7, pc}
	...

08011ba0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8011ba0:	b480      	push	{r7}
 8011ba2:	b083      	sub	sp, #12
 8011ba4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011ba6:	f3ef 8305 	mrs	r3, IPSR
 8011baa:	603b      	str	r3, [r7, #0]
  return(result);
 8011bac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011bae:	2b00      	cmp	r3, #0
 8011bb0:	d003      	beq.n	8011bba <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8011bb2:	f06f 0305 	mvn.w	r3, #5
 8011bb6:	607b      	str	r3, [r7, #4]
 8011bb8:	e00c      	b.n	8011bd4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8011bba:	4b0a      	ldr	r3, [pc, #40]	; (8011be4 <osKernelInitialize+0x44>)
 8011bbc:	681b      	ldr	r3, [r3, #0]
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	d105      	bne.n	8011bce <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8011bc2:	4b08      	ldr	r3, [pc, #32]	; (8011be4 <osKernelInitialize+0x44>)
 8011bc4:	2201      	movs	r2, #1
 8011bc6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8011bc8:	2300      	movs	r3, #0
 8011bca:	607b      	str	r3, [r7, #4]
 8011bcc:	e002      	b.n	8011bd4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8011bce:	f04f 33ff 	mov.w	r3, #4294967295
 8011bd2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8011bd4:	687b      	ldr	r3, [r7, #4]
}
 8011bd6:	4618      	mov	r0, r3
 8011bd8:	370c      	adds	r7, #12
 8011bda:	46bd      	mov	sp, r7
 8011bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011be0:	4770      	bx	lr
 8011be2:	bf00      	nop
 8011be4:	2000007c 	.word	0x2000007c

08011be8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8011be8:	b580      	push	{r7, lr}
 8011bea:	b082      	sub	sp, #8
 8011bec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011bee:	f3ef 8305 	mrs	r3, IPSR
 8011bf2:	603b      	str	r3, [r7, #0]
  return(result);
 8011bf4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	d003      	beq.n	8011c02 <osKernelStart+0x1a>
    stat = osErrorISR;
 8011bfa:	f06f 0305 	mvn.w	r3, #5
 8011bfe:	607b      	str	r3, [r7, #4]
 8011c00:	e010      	b.n	8011c24 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8011c02:	4b0b      	ldr	r3, [pc, #44]	; (8011c30 <osKernelStart+0x48>)
 8011c04:	681b      	ldr	r3, [r3, #0]
 8011c06:	2b01      	cmp	r3, #1
 8011c08:	d109      	bne.n	8011c1e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8011c0a:	f7ff ffbf 	bl	8011b8c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8011c0e:	4b08      	ldr	r3, [pc, #32]	; (8011c30 <osKernelStart+0x48>)
 8011c10:	2202      	movs	r2, #2
 8011c12:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8011c14:	f001 ffbe 	bl	8013b94 <vTaskStartScheduler>
      stat = osOK;
 8011c18:	2300      	movs	r3, #0
 8011c1a:	607b      	str	r3, [r7, #4]
 8011c1c:	e002      	b.n	8011c24 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8011c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8011c22:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8011c24:	687b      	ldr	r3, [r7, #4]
}
 8011c26:	4618      	mov	r0, r3
 8011c28:	3708      	adds	r7, #8
 8011c2a:	46bd      	mov	sp, r7
 8011c2c:	bd80      	pop	{r7, pc}
 8011c2e:	bf00      	nop
 8011c30:	2000007c 	.word	0x2000007c

08011c34 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8011c34:	b580      	push	{r7, lr}
 8011c36:	b082      	sub	sp, #8
 8011c38:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011c3a:	f3ef 8305 	mrs	r3, IPSR
 8011c3e:	603b      	str	r3, [r7, #0]
  return(result);
 8011c40:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	d003      	beq.n	8011c4e <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8011c46:	f002 f8c7 	bl	8013dd8 <xTaskGetTickCountFromISR>
 8011c4a:	6078      	str	r0, [r7, #4]
 8011c4c:	e002      	b.n	8011c54 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8011c4e:	f002 f8b3 	bl	8013db8 <xTaskGetTickCount>
 8011c52:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8011c54:	687b      	ldr	r3, [r7, #4]
}
 8011c56:	4618      	mov	r0, r3
 8011c58:	3708      	adds	r7, #8
 8011c5a:	46bd      	mov	sp, r7
 8011c5c:	bd80      	pop	{r7, pc}

08011c5e <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8011c5e:	b580      	push	{r7, lr}
 8011c60:	b08e      	sub	sp, #56	; 0x38
 8011c62:	af04      	add	r7, sp, #16
 8011c64:	60f8      	str	r0, [r7, #12]
 8011c66:	60b9      	str	r1, [r7, #8]
 8011c68:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8011c6a:	2300      	movs	r3, #0
 8011c6c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011c6e:	f3ef 8305 	mrs	r3, IPSR
 8011c72:	617b      	str	r3, [r7, #20]
  return(result);
 8011c74:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	d17f      	bne.n	8011d7a <osThreadNew+0x11c>
 8011c7a:	68fb      	ldr	r3, [r7, #12]
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	d07c      	beq.n	8011d7a <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 8011c80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011c84:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8011c86:	2318      	movs	r3, #24
 8011c88:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8011c8a:	2300      	movs	r3, #0
 8011c8c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8011c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8011c92:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	d045      	beq.n	8011d26 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	681b      	ldr	r3, [r3, #0]
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d002      	beq.n	8011ca8 <osThreadNew+0x4a>
        name = attr->name;
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	681b      	ldr	r3, [r3, #0]
 8011ca6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	699b      	ldr	r3, [r3, #24]
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	d002      	beq.n	8011cb6 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	699b      	ldr	r3, [r3, #24]
 8011cb4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8011cb6:	69fb      	ldr	r3, [r7, #28]
 8011cb8:	2b00      	cmp	r3, #0
 8011cba:	d008      	beq.n	8011cce <osThreadNew+0x70>
 8011cbc:	69fb      	ldr	r3, [r7, #28]
 8011cbe:	2b38      	cmp	r3, #56	; 0x38
 8011cc0:	d805      	bhi.n	8011cce <osThreadNew+0x70>
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	685b      	ldr	r3, [r3, #4]
 8011cc6:	f003 0301 	and.w	r3, r3, #1
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	d001      	beq.n	8011cd2 <osThreadNew+0x74>
        return (NULL);
 8011cce:	2300      	movs	r3, #0
 8011cd0:	e054      	b.n	8011d7c <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	695b      	ldr	r3, [r3, #20]
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	d003      	beq.n	8011ce2 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	695b      	ldr	r3, [r3, #20]
 8011cde:	089b      	lsrs	r3, r3, #2
 8011ce0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	689b      	ldr	r3, [r3, #8]
 8011ce6:	2b00      	cmp	r3, #0
 8011ce8:	d00e      	beq.n	8011d08 <osThreadNew+0xaa>
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	68db      	ldr	r3, [r3, #12]
 8011cee:	2b5b      	cmp	r3, #91	; 0x5b
 8011cf0:	d90a      	bls.n	8011d08 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8011cf6:	2b00      	cmp	r3, #0
 8011cf8:	d006      	beq.n	8011d08 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	695b      	ldr	r3, [r3, #20]
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	d002      	beq.n	8011d08 <osThreadNew+0xaa>
        mem = 1;
 8011d02:	2301      	movs	r3, #1
 8011d04:	61bb      	str	r3, [r7, #24]
 8011d06:	e010      	b.n	8011d2a <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	689b      	ldr	r3, [r3, #8]
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	d10c      	bne.n	8011d2a <osThreadNew+0xcc>
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	68db      	ldr	r3, [r3, #12]
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d108      	bne.n	8011d2a <osThreadNew+0xcc>
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	691b      	ldr	r3, [r3, #16]
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	d104      	bne.n	8011d2a <osThreadNew+0xcc>
          mem = 0;
 8011d20:	2300      	movs	r3, #0
 8011d22:	61bb      	str	r3, [r7, #24]
 8011d24:	e001      	b.n	8011d2a <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 8011d26:	2300      	movs	r3, #0
 8011d28:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8011d2a:	69bb      	ldr	r3, [r7, #24]
 8011d2c:	2b01      	cmp	r3, #1
 8011d2e:	d110      	bne.n	8011d52 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8011d34:	687a      	ldr	r2, [r7, #4]
 8011d36:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8011d38:	9202      	str	r2, [sp, #8]
 8011d3a:	9301      	str	r3, [sp, #4]
 8011d3c:	69fb      	ldr	r3, [r7, #28]
 8011d3e:	9300      	str	r3, [sp, #0]
 8011d40:	68bb      	ldr	r3, [r7, #8]
 8011d42:	6a3a      	ldr	r2, [r7, #32]
 8011d44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011d46:	68f8      	ldr	r0, [r7, #12]
 8011d48:	f001 fd4e 	bl	80137e8 <xTaskCreateStatic>
 8011d4c:	4603      	mov	r3, r0
 8011d4e:	613b      	str	r3, [r7, #16]
 8011d50:	e013      	b.n	8011d7a <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 8011d52:	69bb      	ldr	r3, [r7, #24]
 8011d54:	2b00      	cmp	r3, #0
 8011d56:	d110      	bne.n	8011d7a <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8011d58:	6a3b      	ldr	r3, [r7, #32]
 8011d5a:	b29a      	uxth	r2, r3
 8011d5c:	f107 0310 	add.w	r3, r7, #16
 8011d60:	9301      	str	r3, [sp, #4]
 8011d62:	69fb      	ldr	r3, [r7, #28]
 8011d64:	9300      	str	r3, [sp, #0]
 8011d66:	68bb      	ldr	r3, [r7, #8]
 8011d68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011d6a:	68f8      	ldr	r0, [r7, #12]
 8011d6c:	f001 fd99 	bl	80138a2 <xTaskCreate>
 8011d70:	4603      	mov	r3, r0
 8011d72:	2b01      	cmp	r3, #1
 8011d74:	d001      	beq.n	8011d7a <osThreadNew+0x11c>
            hTask = NULL;
 8011d76:	2300      	movs	r3, #0
 8011d78:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8011d7a:	693b      	ldr	r3, [r7, #16]
}
 8011d7c:	4618      	mov	r0, r3
 8011d7e:	3728      	adds	r7, #40	; 0x28
 8011d80:	46bd      	mov	sp, r7
 8011d82:	bd80      	pop	{r7, pc}

08011d84 <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 8011d84:	b580      	push	{r7, lr}
 8011d86:	b082      	sub	sp, #8
 8011d88:	af00      	add	r7, sp, #0
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 8011d8a:	f002 fb5d 	bl	8014448 <xTaskGetCurrentTaskHandle>
 8011d8e:	6078      	str	r0, [r7, #4]

  return (id);
 8011d90:	687b      	ldr	r3, [r7, #4]
}
 8011d92:	4618      	mov	r0, r3
 8011d94:	3708      	adds	r7, #8
 8011d96:	46bd      	mov	sp, r7
 8011d98:	bd80      	pop	{r7, pc}

08011d9a <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8011d9a:	b580      	push	{r7, lr}
 8011d9c:	b084      	sub	sp, #16
 8011d9e:	af00      	add	r7, sp, #0
 8011da0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011da2:	f3ef 8305 	mrs	r3, IPSR
 8011da6:	60bb      	str	r3, [r7, #8]
  return(result);
 8011da8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	d003      	beq.n	8011db6 <osDelay+0x1c>
    stat = osErrorISR;
 8011dae:	f06f 0305 	mvn.w	r3, #5
 8011db2:	60fb      	str	r3, [r7, #12]
 8011db4:	e007      	b.n	8011dc6 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8011db6:	2300      	movs	r3, #0
 8011db8:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	d002      	beq.n	8011dc6 <osDelay+0x2c>
      vTaskDelay(ticks);
 8011dc0:	6878      	ldr	r0, [r7, #4]
 8011dc2:	f001 feb3 	bl	8013b2c <vTaskDelay>
    }
  }

  return (stat);
 8011dc6:	68fb      	ldr	r3, [r7, #12]
}
 8011dc8:	4618      	mov	r0, r3
 8011dca:	3710      	adds	r7, #16
 8011dcc:	46bd      	mov	sp, r7
 8011dce:	bd80      	pop	{r7, pc}

08011dd0 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8011dd0:	b580      	push	{r7, lr}
 8011dd2:	b088      	sub	sp, #32
 8011dd4:	af00      	add	r7, sp, #0
 8011dd6:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8011dd8:	2300      	movs	r3, #0
 8011dda:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011ddc:	f3ef 8305 	mrs	r3, IPSR
 8011de0:	60bb      	str	r3, [r7, #8]
  return(result);
 8011de2:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8011de4:	2b00      	cmp	r3, #0
 8011de6:	d174      	bne.n	8011ed2 <osMutexNew+0x102>
    if (attr != NULL) {
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d003      	beq.n	8011df6 <osMutexNew+0x26>
      type = attr->attr_bits;
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	685b      	ldr	r3, [r3, #4]
 8011df2:	61bb      	str	r3, [r7, #24]
 8011df4:	e001      	b.n	8011dfa <osMutexNew+0x2a>
    } else {
      type = 0U;
 8011df6:	2300      	movs	r3, #0
 8011df8:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8011dfa:	69bb      	ldr	r3, [r7, #24]
 8011dfc:	f003 0301 	and.w	r3, r3, #1
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	d002      	beq.n	8011e0a <osMutexNew+0x3a>
      rmtx = 1U;
 8011e04:	2301      	movs	r3, #1
 8011e06:	617b      	str	r3, [r7, #20]
 8011e08:	e001      	b.n	8011e0e <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8011e0a:	2300      	movs	r3, #0
 8011e0c:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8011e0e:	69bb      	ldr	r3, [r7, #24]
 8011e10:	f003 0308 	and.w	r3, r3, #8
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	d15c      	bne.n	8011ed2 <osMutexNew+0x102>
      mem = -1;
 8011e18:	f04f 33ff 	mov.w	r3, #4294967295
 8011e1c:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	2b00      	cmp	r3, #0
 8011e22:	d015      	beq.n	8011e50 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	689b      	ldr	r3, [r3, #8]
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	d006      	beq.n	8011e3a <osMutexNew+0x6a>
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	68db      	ldr	r3, [r3, #12]
 8011e30:	2b4f      	cmp	r3, #79	; 0x4f
 8011e32:	d902      	bls.n	8011e3a <osMutexNew+0x6a>
          mem = 1;
 8011e34:	2301      	movs	r3, #1
 8011e36:	613b      	str	r3, [r7, #16]
 8011e38:	e00c      	b.n	8011e54 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	689b      	ldr	r3, [r3, #8]
 8011e3e:	2b00      	cmp	r3, #0
 8011e40:	d108      	bne.n	8011e54 <osMutexNew+0x84>
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	68db      	ldr	r3, [r3, #12]
 8011e46:	2b00      	cmp	r3, #0
 8011e48:	d104      	bne.n	8011e54 <osMutexNew+0x84>
            mem = 0;
 8011e4a:	2300      	movs	r3, #0
 8011e4c:	613b      	str	r3, [r7, #16]
 8011e4e:	e001      	b.n	8011e54 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8011e50:	2300      	movs	r3, #0
 8011e52:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8011e54:	693b      	ldr	r3, [r7, #16]
 8011e56:	2b01      	cmp	r3, #1
 8011e58:	d112      	bne.n	8011e80 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8011e5a:	697b      	ldr	r3, [r7, #20]
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	d007      	beq.n	8011e70 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	689b      	ldr	r3, [r3, #8]
 8011e64:	4619      	mov	r1, r3
 8011e66:	2004      	movs	r0, #4
 8011e68:	f000 fd69 	bl	801293e <xQueueCreateMutexStatic>
 8011e6c:	61f8      	str	r0, [r7, #28]
 8011e6e:	e016      	b.n	8011e9e <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	689b      	ldr	r3, [r3, #8]
 8011e74:	4619      	mov	r1, r3
 8011e76:	2001      	movs	r0, #1
 8011e78:	f000 fd61 	bl	801293e <xQueueCreateMutexStatic>
 8011e7c:	61f8      	str	r0, [r7, #28]
 8011e7e:	e00e      	b.n	8011e9e <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8011e80:	693b      	ldr	r3, [r7, #16]
 8011e82:	2b00      	cmp	r3, #0
 8011e84:	d10b      	bne.n	8011e9e <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8011e86:	697b      	ldr	r3, [r7, #20]
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	d004      	beq.n	8011e96 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8011e8c:	2004      	movs	r0, #4
 8011e8e:	f000 fd3e 	bl	801290e <xQueueCreateMutex>
 8011e92:	61f8      	str	r0, [r7, #28]
 8011e94:	e003      	b.n	8011e9e <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8011e96:	2001      	movs	r0, #1
 8011e98:	f000 fd39 	bl	801290e <xQueueCreateMutex>
 8011e9c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8011e9e:	69fb      	ldr	r3, [r7, #28]
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	d00c      	beq.n	8011ebe <osMutexNew+0xee>
        if (attr != NULL) {
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	d003      	beq.n	8011eb2 <osMutexNew+0xe2>
          name = attr->name;
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	681b      	ldr	r3, [r3, #0]
 8011eae:	60fb      	str	r3, [r7, #12]
 8011eb0:	e001      	b.n	8011eb6 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8011eb2:	2300      	movs	r3, #0
 8011eb4:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8011eb6:	68f9      	ldr	r1, [r7, #12]
 8011eb8:	69f8      	ldr	r0, [r7, #28]
 8011eba:	f001 fc0d 	bl	80136d8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8011ebe:	69fb      	ldr	r3, [r7, #28]
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	d006      	beq.n	8011ed2 <osMutexNew+0x102>
 8011ec4:	697b      	ldr	r3, [r7, #20]
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	d003      	beq.n	8011ed2 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8011eca:	69fb      	ldr	r3, [r7, #28]
 8011ecc:	f043 0301 	orr.w	r3, r3, #1
 8011ed0:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8011ed2:	69fb      	ldr	r3, [r7, #28]
}
 8011ed4:	4618      	mov	r0, r3
 8011ed6:	3720      	adds	r7, #32
 8011ed8:	46bd      	mov	sp, r7
 8011eda:	bd80      	pop	{r7, pc}

08011edc <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8011edc:	b580      	push	{r7, lr}
 8011ede:	b086      	sub	sp, #24
 8011ee0:	af00      	add	r7, sp, #0
 8011ee2:	6078      	str	r0, [r7, #4]
 8011ee4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	f023 0301 	bic.w	r3, r3, #1
 8011eec:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	f003 0301 	and.w	r3, r3, #1
 8011ef4:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8011ef6:	2300      	movs	r3, #0
 8011ef8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011efa:	f3ef 8305 	mrs	r3, IPSR
 8011efe:	60bb      	str	r3, [r7, #8]
  return(result);
 8011f00:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	d003      	beq.n	8011f0e <osMutexAcquire+0x32>
    stat = osErrorISR;
 8011f06:	f06f 0305 	mvn.w	r3, #5
 8011f0a:	617b      	str	r3, [r7, #20]
 8011f0c:	e02c      	b.n	8011f68 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8011f0e:	693b      	ldr	r3, [r7, #16]
 8011f10:	2b00      	cmp	r3, #0
 8011f12:	d103      	bne.n	8011f1c <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8011f14:	f06f 0303 	mvn.w	r3, #3
 8011f18:	617b      	str	r3, [r7, #20]
 8011f1a:	e025      	b.n	8011f68 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8011f1c:	68fb      	ldr	r3, [r7, #12]
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	d011      	beq.n	8011f46 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8011f22:	6839      	ldr	r1, [r7, #0]
 8011f24:	6938      	ldr	r0, [r7, #16]
 8011f26:	f000 fd59 	bl	80129dc <xQueueTakeMutexRecursive>
 8011f2a:	4603      	mov	r3, r0
 8011f2c:	2b01      	cmp	r3, #1
 8011f2e:	d01b      	beq.n	8011f68 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8011f30:	683b      	ldr	r3, [r7, #0]
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	d003      	beq.n	8011f3e <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8011f36:	f06f 0301 	mvn.w	r3, #1
 8011f3a:	617b      	str	r3, [r7, #20]
 8011f3c:	e014      	b.n	8011f68 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8011f3e:	f06f 0302 	mvn.w	r3, #2
 8011f42:	617b      	str	r3, [r7, #20]
 8011f44:	e010      	b.n	8011f68 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8011f46:	6839      	ldr	r1, [r7, #0]
 8011f48:	6938      	ldr	r0, [r7, #16]
 8011f4a:	f001 f8ed 	bl	8013128 <xQueueSemaphoreTake>
 8011f4e:	4603      	mov	r3, r0
 8011f50:	2b01      	cmp	r3, #1
 8011f52:	d009      	beq.n	8011f68 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8011f54:	683b      	ldr	r3, [r7, #0]
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	d003      	beq.n	8011f62 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8011f5a:	f06f 0301 	mvn.w	r3, #1
 8011f5e:	617b      	str	r3, [r7, #20]
 8011f60:	e002      	b.n	8011f68 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8011f62:	f06f 0302 	mvn.w	r3, #2
 8011f66:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8011f68:	697b      	ldr	r3, [r7, #20]
}
 8011f6a:	4618      	mov	r0, r3
 8011f6c:	3718      	adds	r7, #24
 8011f6e:	46bd      	mov	sp, r7
 8011f70:	bd80      	pop	{r7, pc}

08011f72 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8011f72:	b580      	push	{r7, lr}
 8011f74:	b086      	sub	sp, #24
 8011f76:	af00      	add	r7, sp, #0
 8011f78:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	f023 0301 	bic.w	r3, r3, #1
 8011f80:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	f003 0301 	and.w	r3, r3, #1
 8011f88:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8011f8a:	2300      	movs	r3, #0
 8011f8c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011f8e:	f3ef 8305 	mrs	r3, IPSR
 8011f92:	60bb      	str	r3, [r7, #8]
  return(result);
 8011f94:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	d003      	beq.n	8011fa2 <osMutexRelease+0x30>
    stat = osErrorISR;
 8011f9a:	f06f 0305 	mvn.w	r3, #5
 8011f9e:	617b      	str	r3, [r7, #20]
 8011fa0:	e01f      	b.n	8011fe2 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8011fa2:	693b      	ldr	r3, [r7, #16]
 8011fa4:	2b00      	cmp	r3, #0
 8011fa6:	d103      	bne.n	8011fb0 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8011fa8:	f06f 0303 	mvn.w	r3, #3
 8011fac:	617b      	str	r3, [r7, #20]
 8011fae:	e018      	b.n	8011fe2 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8011fb0:	68fb      	ldr	r3, [r7, #12]
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	d009      	beq.n	8011fca <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8011fb6:	6938      	ldr	r0, [r7, #16]
 8011fb8:	f000 fcdc 	bl	8012974 <xQueueGiveMutexRecursive>
 8011fbc:	4603      	mov	r3, r0
 8011fbe:	2b01      	cmp	r3, #1
 8011fc0:	d00f      	beq.n	8011fe2 <osMutexRelease+0x70>
        stat = osErrorResource;
 8011fc2:	f06f 0302 	mvn.w	r3, #2
 8011fc6:	617b      	str	r3, [r7, #20]
 8011fc8:	e00b      	b.n	8011fe2 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8011fca:	2300      	movs	r3, #0
 8011fcc:	2200      	movs	r2, #0
 8011fce:	2100      	movs	r1, #0
 8011fd0:	6938      	ldr	r0, [r7, #16]
 8011fd2:	f000 fda3 	bl	8012b1c <xQueueGenericSend>
 8011fd6:	4603      	mov	r3, r0
 8011fd8:	2b01      	cmp	r3, #1
 8011fda:	d002      	beq.n	8011fe2 <osMutexRelease+0x70>
        stat = osErrorResource;
 8011fdc:	f06f 0302 	mvn.w	r3, #2
 8011fe0:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8011fe2:	697b      	ldr	r3, [r7, #20]
}
 8011fe4:	4618      	mov	r0, r3
 8011fe6:	3718      	adds	r7, #24
 8011fe8:	46bd      	mov	sp, r7
 8011fea:	bd80      	pop	{r7, pc}

08011fec <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8011fec:	b580      	push	{r7, lr}
 8011fee:	b08a      	sub	sp, #40	; 0x28
 8011ff0:	af02      	add	r7, sp, #8
 8011ff2:	60f8      	str	r0, [r7, #12]
 8011ff4:	60b9      	str	r1, [r7, #8]
 8011ff6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8011ff8:	2300      	movs	r3, #0
 8011ffa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011ffc:	f3ef 8305 	mrs	r3, IPSR
 8012000:	613b      	str	r3, [r7, #16]
  return(result);
 8012002:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8012004:	2b00      	cmp	r3, #0
 8012006:	d175      	bne.n	80120f4 <osSemaphoreNew+0x108>
 8012008:	68fb      	ldr	r3, [r7, #12]
 801200a:	2b00      	cmp	r3, #0
 801200c:	d072      	beq.n	80120f4 <osSemaphoreNew+0x108>
 801200e:	68ba      	ldr	r2, [r7, #8]
 8012010:	68fb      	ldr	r3, [r7, #12]
 8012012:	429a      	cmp	r2, r3
 8012014:	d86e      	bhi.n	80120f4 <osSemaphoreNew+0x108>
    mem = -1;
 8012016:	f04f 33ff 	mov.w	r3, #4294967295
 801201a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	2b00      	cmp	r3, #0
 8012020:	d015      	beq.n	801204e <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	689b      	ldr	r3, [r3, #8]
 8012026:	2b00      	cmp	r3, #0
 8012028:	d006      	beq.n	8012038 <osSemaphoreNew+0x4c>
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	68db      	ldr	r3, [r3, #12]
 801202e:	2b4f      	cmp	r3, #79	; 0x4f
 8012030:	d902      	bls.n	8012038 <osSemaphoreNew+0x4c>
        mem = 1;
 8012032:	2301      	movs	r3, #1
 8012034:	61bb      	str	r3, [r7, #24]
 8012036:	e00c      	b.n	8012052 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	689b      	ldr	r3, [r3, #8]
 801203c:	2b00      	cmp	r3, #0
 801203e:	d108      	bne.n	8012052 <osSemaphoreNew+0x66>
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	68db      	ldr	r3, [r3, #12]
 8012044:	2b00      	cmp	r3, #0
 8012046:	d104      	bne.n	8012052 <osSemaphoreNew+0x66>
          mem = 0;
 8012048:	2300      	movs	r3, #0
 801204a:	61bb      	str	r3, [r7, #24]
 801204c:	e001      	b.n	8012052 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 801204e:	2300      	movs	r3, #0
 8012050:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8012052:	69bb      	ldr	r3, [r7, #24]
 8012054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012058:	d04c      	beq.n	80120f4 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 801205a:	68fb      	ldr	r3, [r7, #12]
 801205c:	2b01      	cmp	r3, #1
 801205e:	d128      	bne.n	80120b2 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8012060:	69bb      	ldr	r3, [r7, #24]
 8012062:	2b01      	cmp	r3, #1
 8012064:	d10a      	bne.n	801207c <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	689b      	ldr	r3, [r3, #8]
 801206a:	2203      	movs	r2, #3
 801206c:	9200      	str	r2, [sp, #0]
 801206e:	2200      	movs	r2, #0
 8012070:	2100      	movs	r1, #0
 8012072:	2001      	movs	r0, #1
 8012074:	f000 fb5c 	bl	8012730 <xQueueGenericCreateStatic>
 8012078:	61f8      	str	r0, [r7, #28]
 801207a:	e005      	b.n	8012088 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 801207c:	2203      	movs	r2, #3
 801207e:	2100      	movs	r1, #0
 8012080:	2001      	movs	r0, #1
 8012082:	f000 fbcd 	bl	8012820 <xQueueGenericCreate>
 8012086:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8012088:	69fb      	ldr	r3, [r7, #28]
 801208a:	2b00      	cmp	r3, #0
 801208c:	d022      	beq.n	80120d4 <osSemaphoreNew+0xe8>
 801208e:	68bb      	ldr	r3, [r7, #8]
 8012090:	2b00      	cmp	r3, #0
 8012092:	d01f      	beq.n	80120d4 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8012094:	2300      	movs	r3, #0
 8012096:	2200      	movs	r2, #0
 8012098:	2100      	movs	r1, #0
 801209a:	69f8      	ldr	r0, [r7, #28]
 801209c:	f000 fd3e 	bl	8012b1c <xQueueGenericSend>
 80120a0:	4603      	mov	r3, r0
 80120a2:	2b01      	cmp	r3, #1
 80120a4:	d016      	beq.n	80120d4 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80120a6:	69f8      	ldr	r0, [r7, #28]
 80120a8:	f001 f9ca 	bl	8013440 <vQueueDelete>
            hSemaphore = NULL;
 80120ac:	2300      	movs	r3, #0
 80120ae:	61fb      	str	r3, [r7, #28]
 80120b0:	e010      	b.n	80120d4 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80120b2:	69bb      	ldr	r3, [r7, #24]
 80120b4:	2b01      	cmp	r3, #1
 80120b6:	d108      	bne.n	80120ca <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	689b      	ldr	r3, [r3, #8]
 80120bc:	461a      	mov	r2, r3
 80120be:	68b9      	ldr	r1, [r7, #8]
 80120c0:	68f8      	ldr	r0, [r7, #12]
 80120c2:	f000 fcc1 	bl	8012a48 <xQueueCreateCountingSemaphoreStatic>
 80120c6:	61f8      	str	r0, [r7, #28]
 80120c8:	e004      	b.n	80120d4 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80120ca:	68b9      	ldr	r1, [r7, #8]
 80120cc:	68f8      	ldr	r0, [r7, #12]
 80120ce:	f000 fcf2 	bl	8012ab6 <xQueueCreateCountingSemaphore>
 80120d2:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80120d4:	69fb      	ldr	r3, [r7, #28]
 80120d6:	2b00      	cmp	r3, #0
 80120d8:	d00c      	beq.n	80120f4 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	2b00      	cmp	r3, #0
 80120de:	d003      	beq.n	80120e8 <osSemaphoreNew+0xfc>
          name = attr->name;
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	681b      	ldr	r3, [r3, #0]
 80120e4:	617b      	str	r3, [r7, #20]
 80120e6:	e001      	b.n	80120ec <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80120e8:	2300      	movs	r3, #0
 80120ea:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80120ec:	6979      	ldr	r1, [r7, #20]
 80120ee:	69f8      	ldr	r0, [r7, #28]
 80120f0:	f001 faf2 	bl	80136d8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80120f4:	69fb      	ldr	r3, [r7, #28]
}
 80120f6:	4618      	mov	r0, r3
 80120f8:	3720      	adds	r7, #32
 80120fa:	46bd      	mov	sp, r7
 80120fc:	bd80      	pop	{r7, pc}
	...

08012100 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8012100:	b580      	push	{r7, lr}
 8012102:	b086      	sub	sp, #24
 8012104:	af00      	add	r7, sp, #0
 8012106:	6078      	str	r0, [r7, #4]
 8012108:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 801210e:	2300      	movs	r3, #0
 8012110:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8012112:	693b      	ldr	r3, [r7, #16]
 8012114:	2b00      	cmp	r3, #0
 8012116:	d103      	bne.n	8012120 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8012118:	f06f 0303 	mvn.w	r3, #3
 801211c:	617b      	str	r3, [r7, #20]
 801211e:	e039      	b.n	8012194 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012120:	f3ef 8305 	mrs	r3, IPSR
 8012124:	60fb      	str	r3, [r7, #12]
  return(result);
 8012126:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8012128:	2b00      	cmp	r3, #0
 801212a:	d022      	beq.n	8012172 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 801212c:	683b      	ldr	r3, [r7, #0]
 801212e:	2b00      	cmp	r3, #0
 8012130:	d003      	beq.n	801213a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8012132:	f06f 0303 	mvn.w	r3, #3
 8012136:	617b      	str	r3, [r7, #20]
 8012138:	e02c      	b.n	8012194 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 801213a:	2300      	movs	r3, #0
 801213c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 801213e:	f107 0308 	add.w	r3, r7, #8
 8012142:	461a      	mov	r2, r3
 8012144:	2100      	movs	r1, #0
 8012146:	6938      	ldr	r0, [r7, #16]
 8012148:	f001 f8fa 	bl	8013340 <xQueueReceiveFromISR>
 801214c:	4603      	mov	r3, r0
 801214e:	2b01      	cmp	r3, #1
 8012150:	d003      	beq.n	801215a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8012152:	f06f 0302 	mvn.w	r3, #2
 8012156:	617b      	str	r3, [r7, #20]
 8012158:	e01c      	b.n	8012194 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 801215a:	68bb      	ldr	r3, [r7, #8]
 801215c:	2b00      	cmp	r3, #0
 801215e:	d019      	beq.n	8012194 <osSemaphoreAcquire+0x94>
 8012160:	4b0f      	ldr	r3, [pc, #60]	; (80121a0 <osSemaphoreAcquire+0xa0>)
 8012162:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012166:	601a      	str	r2, [r3, #0]
 8012168:	f3bf 8f4f 	dsb	sy
 801216c:	f3bf 8f6f 	isb	sy
 8012170:	e010      	b.n	8012194 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8012172:	6839      	ldr	r1, [r7, #0]
 8012174:	6938      	ldr	r0, [r7, #16]
 8012176:	f000 ffd7 	bl	8013128 <xQueueSemaphoreTake>
 801217a:	4603      	mov	r3, r0
 801217c:	2b01      	cmp	r3, #1
 801217e:	d009      	beq.n	8012194 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8012180:	683b      	ldr	r3, [r7, #0]
 8012182:	2b00      	cmp	r3, #0
 8012184:	d003      	beq.n	801218e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8012186:	f06f 0301 	mvn.w	r3, #1
 801218a:	617b      	str	r3, [r7, #20]
 801218c:	e002      	b.n	8012194 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 801218e:	f06f 0302 	mvn.w	r3, #2
 8012192:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8012194:	697b      	ldr	r3, [r7, #20]
}
 8012196:	4618      	mov	r0, r3
 8012198:	3718      	adds	r7, #24
 801219a:	46bd      	mov	sp, r7
 801219c:	bd80      	pop	{r7, pc}
 801219e:	bf00      	nop
 80121a0:	e000ed04 	.word	0xe000ed04

080121a4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80121a4:	b580      	push	{r7, lr}
 80121a6:	b086      	sub	sp, #24
 80121a8:	af00      	add	r7, sp, #0
 80121aa:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80121b0:	2300      	movs	r3, #0
 80121b2:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80121b4:	693b      	ldr	r3, [r7, #16]
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	d103      	bne.n	80121c2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80121ba:	f06f 0303 	mvn.w	r3, #3
 80121be:	617b      	str	r3, [r7, #20]
 80121c0:	e02c      	b.n	801221c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80121c2:	f3ef 8305 	mrs	r3, IPSR
 80121c6:	60fb      	str	r3, [r7, #12]
  return(result);
 80121c8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80121ca:	2b00      	cmp	r3, #0
 80121cc:	d01a      	beq.n	8012204 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80121ce:	2300      	movs	r3, #0
 80121d0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80121d2:	f107 0308 	add.w	r3, r7, #8
 80121d6:	4619      	mov	r1, r3
 80121d8:	6938      	ldr	r0, [r7, #16]
 80121da:	f000 fe38 	bl	8012e4e <xQueueGiveFromISR>
 80121de:	4603      	mov	r3, r0
 80121e0:	2b01      	cmp	r3, #1
 80121e2:	d003      	beq.n	80121ec <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80121e4:	f06f 0302 	mvn.w	r3, #2
 80121e8:	617b      	str	r3, [r7, #20]
 80121ea:	e017      	b.n	801221c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80121ec:	68bb      	ldr	r3, [r7, #8]
 80121ee:	2b00      	cmp	r3, #0
 80121f0:	d014      	beq.n	801221c <osSemaphoreRelease+0x78>
 80121f2:	4b0d      	ldr	r3, [pc, #52]	; (8012228 <osSemaphoreRelease+0x84>)
 80121f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80121f8:	601a      	str	r2, [r3, #0]
 80121fa:	f3bf 8f4f 	dsb	sy
 80121fe:	f3bf 8f6f 	isb	sy
 8012202:	e00b      	b.n	801221c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8012204:	2300      	movs	r3, #0
 8012206:	2200      	movs	r2, #0
 8012208:	2100      	movs	r1, #0
 801220a:	6938      	ldr	r0, [r7, #16]
 801220c:	f000 fc86 	bl	8012b1c <xQueueGenericSend>
 8012210:	4603      	mov	r3, r0
 8012212:	2b01      	cmp	r3, #1
 8012214:	d002      	beq.n	801221c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8012216:	f06f 0302 	mvn.w	r3, #2
 801221a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 801221c:	697b      	ldr	r3, [r7, #20]
}
 801221e:	4618      	mov	r0, r3
 8012220:	3718      	adds	r7, #24
 8012222:	46bd      	mov	sp, r7
 8012224:	bd80      	pop	{r7, pc}
 8012226:	bf00      	nop
 8012228:	e000ed04 	.word	0xe000ed04

0801222c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 801222c:	b580      	push	{r7, lr}
 801222e:	b08a      	sub	sp, #40	; 0x28
 8012230:	af02      	add	r7, sp, #8
 8012232:	60f8      	str	r0, [r7, #12]
 8012234:	60b9      	str	r1, [r7, #8]
 8012236:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8012238:	2300      	movs	r3, #0
 801223a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801223c:	f3ef 8305 	mrs	r3, IPSR
 8012240:	613b      	str	r3, [r7, #16]
  return(result);
 8012242:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8012244:	2b00      	cmp	r3, #0
 8012246:	d15f      	bne.n	8012308 <osMessageQueueNew+0xdc>
 8012248:	68fb      	ldr	r3, [r7, #12]
 801224a:	2b00      	cmp	r3, #0
 801224c:	d05c      	beq.n	8012308 <osMessageQueueNew+0xdc>
 801224e:	68bb      	ldr	r3, [r7, #8]
 8012250:	2b00      	cmp	r3, #0
 8012252:	d059      	beq.n	8012308 <osMessageQueueNew+0xdc>
    mem = -1;
 8012254:	f04f 33ff 	mov.w	r3, #4294967295
 8012258:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	2b00      	cmp	r3, #0
 801225e:	d029      	beq.n	80122b4 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	689b      	ldr	r3, [r3, #8]
 8012264:	2b00      	cmp	r3, #0
 8012266:	d012      	beq.n	801228e <osMessageQueueNew+0x62>
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	68db      	ldr	r3, [r3, #12]
 801226c:	2b4f      	cmp	r3, #79	; 0x4f
 801226e:	d90e      	bls.n	801228e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8012274:	2b00      	cmp	r3, #0
 8012276:	d00a      	beq.n	801228e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	695a      	ldr	r2, [r3, #20]
 801227c:	68fb      	ldr	r3, [r7, #12]
 801227e:	68b9      	ldr	r1, [r7, #8]
 8012280:	fb01 f303 	mul.w	r3, r1, r3
 8012284:	429a      	cmp	r2, r3
 8012286:	d302      	bcc.n	801228e <osMessageQueueNew+0x62>
        mem = 1;
 8012288:	2301      	movs	r3, #1
 801228a:	61bb      	str	r3, [r7, #24]
 801228c:	e014      	b.n	80122b8 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	689b      	ldr	r3, [r3, #8]
 8012292:	2b00      	cmp	r3, #0
 8012294:	d110      	bne.n	80122b8 <osMessageQueueNew+0x8c>
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	68db      	ldr	r3, [r3, #12]
 801229a:	2b00      	cmp	r3, #0
 801229c:	d10c      	bne.n	80122b8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80122a2:	2b00      	cmp	r3, #0
 80122a4:	d108      	bne.n	80122b8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	695b      	ldr	r3, [r3, #20]
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d104      	bne.n	80122b8 <osMessageQueueNew+0x8c>
          mem = 0;
 80122ae:	2300      	movs	r3, #0
 80122b0:	61bb      	str	r3, [r7, #24]
 80122b2:	e001      	b.n	80122b8 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80122b4:	2300      	movs	r3, #0
 80122b6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80122b8:	69bb      	ldr	r3, [r7, #24]
 80122ba:	2b01      	cmp	r3, #1
 80122bc:	d10b      	bne.n	80122d6 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	691a      	ldr	r2, [r3, #16]
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	689b      	ldr	r3, [r3, #8]
 80122c6:	2100      	movs	r1, #0
 80122c8:	9100      	str	r1, [sp, #0]
 80122ca:	68b9      	ldr	r1, [r7, #8]
 80122cc:	68f8      	ldr	r0, [r7, #12]
 80122ce:	f000 fa2f 	bl	8012730 <xQueueGenericCreateStatic>
 80122d2:	61f8      	str	r0, [r7, #28]
 80122d4:	e008      	b.n	80122e8 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80122d6:	69bb      	ldr	r3, [r7, #24]
 80122d8:	2b00      	cmp	r3, #0
 80122da:	d105      	bne.n	80122e8 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80122dc:	2200      	movs	r2, #0
 80122de:	68b9      	ldr	r1, [r7, #8]
 80122e0:	68f8      	ldr	r0, [r7, #12]
 80122e2:	f000 fa9d 	bl	8012820 <xQueueGenericCreate>
 80122e6:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80122e8:	69fb      	ldr	r3, [r7, #28]
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	d00c      	beq.n	8012308 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	d003      	beq.n	80122fc <osMessageQueueNew+0xd0>
        name = attr->name;
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	681b      	ldr	r3, [r3, #0]
 80122f8:	617b      	str	r3, [r7, #20]
 80122fa:	e001      	b.n	8012300 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80122fc:	2300      	movs	r3, #0
 80122fe:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8012300:	6979      	ldr	r1, [r7, #20]
 8012302:	69f8      	ldr	r0, [r7, #28]
 8012304:	f001 f9e8 	bl	80136d8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8012308:	69fb      	ldr	r3, [r7, #28]
}
 801230a:	4618      	mov	r0, r3
 801230c:	3720      	adds	r7, #32
 801230e:	46bd      	mov	sp, r7
 8012310:	bd80      	pop	{r7, pc}
	...

08012314 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8012314:	b580      	push	{r7, lr}
 8012316:	b088      	sub	sp, #32
 8012318:	af00      	add	r7, sp, #0
 801231a:	60f8      	str	r0, [r7, #12]
 801231c:	60b9      	str	r1, [r7, #8]
 801231e:	603b      	str	r3, [r7, #0]
 8012320:	4613      	mov	r3, r2
 8012322:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8012324:	68fb      	ldr	r3, [r7, #12]
 8012326:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8012328:	2300      	movs	r3, #0
 801232a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801232c:	f3ef 8305 	mrs	r3, IPSR
 8012330:	617b      	str	r3, [r7, #20]
  return(result);
 8012332:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8012334:	2b00      	cmp	r3, #0
 8012336:	d028      	beq.n	801238a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012338:	69bb      	ldr	r3, [r7, #24]
 801233a:	2b00      	cmp	r3, #0
 801233c:	d005      	beq.n	801234a <osMessageQueuePut+0x36>
 801233e:	68bb      	ldr	r3, [r7, #8]
 8012340:	2b00      	cmp	r3, #0
 8012342:	d002      	beq.n	801234a <osMessageQueuePut+0x36>
 8012344:	683b      	ldr	r3, [r7, #0]
 8012346:	2b00      	cmp	r3, #0
 8012348:	d003      	beq.n	8012352 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 801234a:	f06f 0303 	mvn.w	r3, #3
 801234e:	61fb      	str	r3, [r7, #28]
 8012350:	e038      	b.n	80123c4 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8012352:	2300      	movs	r3, #0
 8012354:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8012356:	f107 0210 	add.w	r2, r7, #16
 801235a:	2300      	movs	r3, #0
 801235c:	68b9      	ldr	r1, [r7, #8]
 801235e:	69b8      	ldr	r0, [r7, #24]
 8012360:	f000 fcda 	bl	8012d18 <xQueueGenericSendFromISR>
 8012364:	4603      	mov	r3, r0
 8012366:	2b01      	cmp	r3, #1
 8012368:	d003      	beq.n	8012372 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 801236a:	f06f 0302 	mvn.w	r3, #2
 801236e:	61fb      	str	r3, [r7, #28]
 8012370:	e028      	b.n	80123c4 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8012372:	693b      	ldr	r3, [r7, #16]
 8012374:	2b00      	cmp	r3, #0
 8012376:	d025      	beq.n	80123c4 <osMessageQueuePut+0xb0>
 8012378:	4b15      	ldr	r3, [pc, #84]	; (80123d0 <osMessageQueuePut+0xbc>)
 801237a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801237e:	601a      	str	r2, [r3, #0]
 8012380:	f3bf 8f4f 	dsb	sy
 8012384:	f3bf 8f6f 	isb	sy
 8012388:	e01c      	b.n	80123c4 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 801238a:	69bb      	ldr	r3, [r7, #24]
 801238c:	2b00      	cmp	r3, #0
 801238e:	d002      	beq.n	8012396 <osMessageQueuePut+0x82>
 8012390:	68bb      	ldr	r3, [r7, #8]
 8012392:	2b00      	cmp	r3, #0
 8012394:	d103      	bne.n	801239e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8012396:	f06f 0303 	mvn.w	r3, #3
 801239a:	61fb      	str	r3, [r7, #28]
 801239c:	e012      	b.n	80123c4 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 801239e:	2300      	movs	r3, #0
 80123a0:	683a      	ldr	r2, [r7, #0]
 80123a2:	68b9      	ldr	r1, [r7, #8]
 80123a4:	69b8      	ldr	r0, [r7, #24]
 80123a6:	f000 fbb9 	bl	8012b1c <xQueueGenericSend>
 80123aa:	4603      	mov	r3, r0
 80123ac:	2b01      	cmp	r3, #1
 80123ae:	d009      	beq.n	80123c4 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80123b0:	683b      	ldr	r3, [r7, #0]
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	d003      	beq.n	80123be <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80123b6:	f06f 0301 	mvn.w	r3, #1
 80123ba:	61fb      	str	r3, [r7, #28]
 80123bc:	e002      	b.n	80123c4 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80123be:	f06f 0302 	mvn.w	r3, #2
 80123c2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80123c4:	69fb      	ldr	r3, [r7, #28]
}
 80123c6:	4618      	mov	r0, r3
 80123c8:	3720      	adds	r7, #32
 80123ca:	46bd      	mov	sp, r7
 80123cc:	bd80      	pop	{r7, pc}
 80123ce:	bf00      	nop
 80123d0:	e000ed04 	.word	0xe000ed04

080123d4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80123d4:	b580      	push	{r7, lr}
 80123d6:	b088      	sub	sp, #32
 80123d8:	af00      	add	r7, sp, #0
 80123da:	60f8      	str	r0, [r7, #12]
 80123dc:	60b9      	str	r1, [r7, #8]
 80123de:	607a      	str	r2, [r7, #4]
 80123e0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80123e2:	68fb      	ldr	r3, [r7, #12]
 80123e4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80123e6:	2300      	movs	r3, #0
 80123e8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80123ea:	f3ef 8305 	mrs	r3, IPSR
 80123ee:	617b      	str	r3, [r7, #20]
  return(result);
 80123f0:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80123f2:	2b00      	cmp	r3, #0
 80123f4:	d028      	beq.n	8012448 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80123f6:	69bb      	ldr	r3, [r7, #24]
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	d005      	beq.n	8012408 <osMessageQueueGet+0x34>
 80123fc:	68bb      	ldr	r3, [r7, #8]
 80123fe:	2b00      	cmp	r3, #0
 8012400:	d002      	beq.n	8012408 <osMessageQueueGet+0x34>
 8012402:	683b      	ldr	r3, [r7, #0]
 8012404:	2b00      	cmp	r3, #0
 8012406:	d003      	beq.n	8012410 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8012408:	f06f 0303 	mvn.w	r3, #3
 801240c:	61fb      	str	r3, [r7, #28]
 801240e:	e037      	b.n	8012480 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8012410:	2300      	movs	r3, #0
 8012412:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8012414:	f107 0310 	add.w	r3, r7, #16
 8012418:	461a      	mov	r2, r3
 801241a:	68b9      	ldr	r1, [r7, #8]
 801241c:	69b8      	ldr	r0, [r7, #24]
 801241e:	f000 ff8f 	bl	8013340 <xQueueReceiveFromISR>
 8012422:	4603      	mov	r3, r0
 8012424:	2b01      	cmp	r3, #1
 8012426:	d003      	beq.n	8012430 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8012428:	f06f 0302 	mvn.w	r3, #2
 801242c:	61fb      	str	r3, [r7, #28]
 801242e:	e027      	b.n	8012480 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8012430:	693b      	ldr	r3, [r7, #16]
 8012432:	2b00      	cmp	r3, #0
 8012434:	d024      	beq.n	8012480 <osMessageQueueGet+0xac>
 8012436:	4b15      	ldr	r3, [pc, #84]	; (801248c <osMessageQueueGet+0xb8>)
 8012438:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801243c:	601a      	str	r2, [r3, #0]
 801243e:	f3bf 8f4f 	dsb	sy
 8012442:	f3bf 8f6f 	isb	sy
 8012446:	e01b      	b.n	8012480 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8012448:	69bb      	ldr	r3, [r7, #24]
 801244a:	2b00      	cmp	r3, #0
 801244c:	d002      	beq.n	8012454 <osMessageQueueGet+0x80>
 801244e:	68bb      	ldr	r3, [r7, #8]
 8012450:	2b00      	cmp	r3, #0
 8012452:	d103      	bne.n	801245c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8012454:	f06f 0303 	mvn.w	r3, #3
 8012458:	61fb      	str	r3, [r7, #28]
 801245a:	e011      	b.n	8012480 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 801245c:	683a      	ldr	r2, [r7, #0]
 801245e:	68b9      	ldr	r1, [r7, #8]
 8012460:	69b8      	ldr	r0, [r7, #24]
 8012462:	f000 fd81 	bl	8012f68 <xQueueReceive>
 8012466:	4603      	mov	r3, r0
 8012468:	2b01      	cmp	r3, #1
 801246a:	d009      	beq.n	8012480 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 801246c:	683b      	ldr	r3, [r7, #0]
 801246e:	2b00      	cmp	r3, #0
 8012470:	d003      	beq.n	801247a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8012472:	f06f 0301 	mvn.w	r3, #1
 8012476:	61fb      	str	r3, [r7, #28]
 8012478:	e002      	b.n	8012480 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 801247a:	f06f 0302 	mvn.w	r3, #2
 801247e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8012480:	69fb      	ldr	r3, [r7, #28]
}
 8012482:	4618      	mov	r0, r3
 8012484:	3720      	adds	r7, #32
 8012486:	46bd      	mov	sp, r7
 8012488:	bd80      	pop	{r7, pc}
 801248a:	bf00      	nop
 801248c:	e000ed04 	.word	0xe000ed04

08012490 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8012490:	b480      	push	{r7}
 8012492:	b085      	sub	sp, #20
 8012494:	af00      	add	r7, sp, #0
 8012496:	60f8      	str	r0, [r7, #12]
 8012498:	60b9      	str	r1, [r7, #8]
 801249a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 801249c:	68fb      	ldr	r3, [r7, #12]
 801249e:	4a07      	ldr	r2, [pc, #28]	; (80124bc <vApplicationGetIdleTaskMemory+0x2c>)
 80124a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80124a2:	68bb      	ldr	r3, [r7, #8]
 80124a4:	4a06      	ldr	r2, [pc, #24]	; (80124c0 <vApplicationGetIdleTaskMemory+0x30>)
 80124a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80124ae:	601a      	str	r2, [r3, #0]
}
 80124b0:	bf00      	nop
 80124b2:	3714      	adds	r7, #20
 80124b4:	46bd      	mov	sp, r7
 80124b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124ba:	4770      	bx	lr
 80124bc:	20000080 	.word	0x20000080
 80124c0:	200000dc 	.word	0x200000dc

080124c4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80124c4:	b480      	push	{r7}
 80124c6:	b085      	sub	sp, #20
 80124c8:	af00      	add	r7, sp, #0
 80124ca:	60f8      	str	r0, [r7, #12]
 80124cc:	60b9      	str	r1, [r7, #8]
 80124ce:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80124d0:	68fb      	ldr	r3, [r7, #12]
 80124d2:	4a07      	ldr	r2, [pc, #28]	; (80124f0 <vApplicationGetTimerTaskMemory+0x2c>)
 80124d4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80124d6:	68bb      	ldr	r3, [r7, #8]
 80124d8:	4a06      	ldr	r2, [pc, #24]	; (80124f4 <vApplicationGetTimerTaskMemory+0x30>)
 80124da:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80124e2:	601a      	str	r2, [r3, #0]
}
 80124e4:	bf00      	nop
 80124e6:	3714      	adds	r7, #20
 80124e8:	46bd      	mov	sp, r7
 80124ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124ee:	4770      	bx	lr
 80124f0:	200010dc 	.word	0x200010dc
 80124f4:	20001138 	.word	0x20001138

080124f8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80124f8:	b480      	push	{r7}
 80124fa:	b083      	sub	sp, #12
 80124fc:	af00      	add	r7, sp, #0
 80124fe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	f103 0208 	add.w	r2, r3, #8
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	f04f 32ff 	mov.w	r2, #4294967295
 8012510:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	f103 0208 	add.w	r2, r3, #8
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	f103 0208 	add.w	r2, r3, #8
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	2200      	movs	r2, #0
 801252a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801252c:	bf00      	nop
 801252e:	370c      	adds	r7, #12
 8012530:	46bd      	mov	sp, r7
 8012532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012536:	4770      	bx	lr

08012538 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8012538:	b480      	push	{r7}
 801253a:	b083      	sub	sp, #12
 801253c:	af00      	add	r7, sp, #0
 801253e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	2200      	movs	r2, #0
 8012544:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8012546:	bf00      	nop
 8012548:	370c      	adds	r7, #12
 801254a:	46bd      	mov	sp, r7
 801254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012550:	4770      	bx	lr

08012552 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012552:	b480      	push	{r7}
 8012554:	b085      	sub	sp, #20
 8012556:	af00      	add	r7, sp, #0
 8012558:	6078      	str	r0, [r7, #4]
 801255a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	685b      	ldr	r3, [r3, #4]
 8012560:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8012562:	683b      	ldr	r3, [r7, #0]
 8012564:	68fa      	ldr	r2, [r7, #12]
 8012566:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8012568:	68fb      	ldr	r3, [r7, #12]
 801256a:	689a      	ldr	r2, [r3, #8]
 801256c:	683b      	ldr	r3, [r7, #0]
 801256e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8012570:	68fb      	ldr	r3, [r7, #12]
 8012572:	689b      	ldr	r3, [r3, #8]
 8012574:	683a      	ldr	r2, [r7, #0]
 8012576:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8012578:	68fb      	ldr	r3, [r7, #12]
 801257a:	683a      	ldr	r2, [r7, #0]
 801257c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801257e:	683b      	ldr	r3, [r7, #0]
 8012580:	687a      	ldr	r2, [r7, #4]
 8012582:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	681b      	ldr	r3, [r3, #0]
 8012588:	1c5a      	adds	r2, r3, #1
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	601a      	str	r2, [r3, #0]
}
 801258e:	bf00      	nop
 8012590:	3714      	adds	r7, #20
 8012592:	46bd      	mov	sp, r7
 8012594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012598:	4770      	bx	lr

0801259a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801259a:	b480      	push	{r7}
 801259c:	b085      	sub	sp, #20
 801259e:	af00      	add	r7, sp, #0
 80125a0:	6078      	str	r0, [r7, #4]
 80125a2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80125a4:	683b      	ldr	r3, [r7, #0]
 80125a6:	681b      	ldr	r3, [r3, #0]
 80125a8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80125aa:	68bb      	ldr	r3, [r7, #8]
 80125ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80125b0:	d103      	bne.n	80125ba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	691b      	ldr	r3, [r3, #16]
 80125b6:	60fb      	str	r3, [r7, #12]
 80125b8:	e00c      	b.n	80125d4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	3308      	adds	r3, #8
 80125be:	60fb      	str	r3, [r7, #12]
 80125c0:	e002      	b.n	80125c8 <vListInsert+0x2e>
 80125c2:	68fb      	ldr	r3, [r7, #12]
 80125c4:	685b      	ldr	r3, [r3, #4]
 80125c6:	60fb      	str	r3, [r7, #12]
 80125c8:	68fb      	ldr	r3, [r7, #12]
 80125ca:	685b      	ldr	r3, [r3, #4]
 80125cc:	681b      	ldr	r3, [r3, #0]
 80125ce:	68ba      	ldr	r2, [r7, #8]
 80125d0:	429a      	cmp	r2, r3
 80125d2:	d2f6      	bcs.n	80125c2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80125d4:	68fb      	ldr	r3, [r7, #12]
 80125d6:	685a      	ldr	r2, [r3, #4]
 80125d8:	683b      	ldr	r3, [r7, #0]
 80125da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80125dc:	683b      	ldr	r3, [r7, #0]
 80125de:	685b      	ldr	r3, [r3, #4]
 80125e0:	683a      	ldr	r2, [r7, #0]
 80125e2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80125e4:	683b      	ldr	r3, [r7, #0]
 80125e6:	68fa      	ldr	r2, [r7, #12]
 80125e8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80125ea:	68fb      	ldr	r3, [r7, #12]
 80125ec:	683a      	ldr	r2, [r7, #0]
 80125ee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80125f0:	683b      	ldr	r3, [r7, #0]
 80125f2:	687a      	ldr	r2, [r7, #4]
 80125f4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	681b      	ldr	r3, [r3, #0]
 80125fa:	1c5a      	adds	r2, r3, #1
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	601a      	str	r2, [r3, #0]
}
 8012600:	bf00      	nop
 8012602:	3714      	adds	r7, #20
 8012604:	46bd      	mov	sp, r7
 8012606:	f85d 7b04 	ldr.w	r7, [sp], #4
 801260a:	4770      	bx	lr

0801260c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801260c:	b480      	push	{r7}
 801260e:	b085      	sub	sp, #20
 8012610:	af00      	add	r7, sp, #0
 8012612:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	691b      	ldr	r3, [r3, #16]
 8012618:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	685b      	ldr	r3, [r3, #4]
 801261e:	687a      	ldr	r2, [r7, #4]
 8012620:	6892      	ldr	r2, [r2, #8]
 8012622:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	689b      	ldr	r3, [r3, #8]
 8012628:	687a      	ldr	r2, [r7, #4]
 801262a:	6852      	ldr	r2, [r2, #4]
 801262c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801262e:	68fb      	ldr	r3, [r7, #12]
 8012630:	685b      	ldr	r3, [r3, #4]
 8012632:	687a      	ldr	r2, [r7, #4]
 8012634:	429a      	cmp	r2, r3
 8012636:	d103      	bne.n	8012640 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	689a      	ldr	r2, [r3, #8]
 801263c:	68fb      	ldr	r3, [r7, #12]
 801263e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	2200      	movs	r2, #0
 8012644:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8012646:	68fb      	ldr	r3, [r7, #12]
 8012648:	681b      	ldr	r3, [r3, #0]
 801264a:	1e5a      	subs	r2, r3, #1
 801264c:	68fb      	ldr	r3, [r7, #12]
 801264e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8012650:	68fb      	ldr	r3, [r7, #12]
 8012652:	681b      	ldr	r3, [r3, #0]
}
 8012654:	4618      	mov	r0, r3
 8012656:	3714      	adds	r7, #20
 8012658:	46bd      	mov	sp, r7
 801265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801265e:	4770      	bx	lr

08012660 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8012660:	b580      	push	{r7, lr}
 8012662:	b084      	sub	sp, #16
 8012664:	af00      	add	r7, sp, #0
 8012666:	6078      	str	r0, [r7, #4]
 8012668:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801266e:	68fb      	ldr	r3, [r7, #12]
 8012670:	2b00      	cmp	r3, #0
 8012672:	d10a      	bne.n	801268a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8012674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012678:	f383 8811 	msr	BASEPRI, r3
 801267c:	f3bf 8f6f 	isb	sy
 8012680:	f3bf 8f4f 	dsb	sy
 8012684:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8012686:	bf00      	nop
 8012688:	e7fe      	b.n	8012688 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 801268a:	f002 ff7b 	bl	8015584 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801268e:	68fb      	ldr	r3, [r7, #12]
 8012690:	681a      	ldr	r2, [r3, #0]
 8012692:	68fb      	ldr	r3, [r7, #12]
 8012694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012696:	68f9      	ldr	r1, [r7, #12]
 8012698:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801269a:	fb01 f303 	mul.w	r3, r1, r3
 801269e:	441a      	add	r2, r3
 80126a0:	68fb      	ldr	r3, [r7, #12]
 80126a2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80126a4:	68fb      	ldr	r3, [r7, #12]
 80126a6:	2200      	movs	r2, #0
 80126a8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80126aa:	68fb      	ldr	r3, [r7, #12]
 80126ac:	681a      	ldr	r2, [r3, #0]
 80126ae:	68fb      	ldr	r3, [r7, #12]
 80126b0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80126b2:	68fb      	ldr	r3, [r7, #12]
 80126b4:	681a      	ldr	r2, [r3, #0]
 80126b6:	68fb      	ldr	r3, [r7, #12]
 80126b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80126ba:	3b01      	subs	r3, #1
 80126bc:	68f9      	ldr	r1, [r7, #12]
 80126be:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80126c0:	fb01 f303 	mul.w	r3, r1, r3
 80126c4:	441a      	add	r2, r3
 80126c6:	68fb      	ldr	r3, [r7, #12]
 80126c8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80126ca:	68fb      	ldr	r3, [r7, #12]
 80126cc:	22ff      	movs	r2, #255	; 0xff
 80126ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80126d2:	68fb      	ldr	r3, [r7, #12]
 80126d4:	22ff      	movs	r2, #255	; 0xff
 80126d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80126da:	683b      	ldr	r3, [r7, #0]
 80126dc:	2b00      	cmp	r3, #0
 80126de:	d114      	bne.n	801270a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80126e0:	68fb      	ldr	r3, [r7, #12]
 80126e2:	691b      	ldr	r3, [r3, #16]
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	d01a      	beq.n	801271e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80126e8:	68fb      	ldr	r3, [r7, #12]
 80126ea:	3310      	adds	r3, #16
 80126ec:	4618      	mov	r0, r3
 80126ee:	f001 fced 	bl	80140cc <xTaskRemoveFromEventList>
 80126f2:	4603      	mov	r3, r0
 80126f4:	2b00      	cmp	r3, #0
 80126f6:	d012      	beq.n	801271e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80126f8:	4b0c      	ldr	r3, [pc, #48]	; (801272c <xQueueGenericReset+0xcc>)
 80126fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80126fe:	601a      	str	r2, [r3, #0]
 8012700:	f3bf 8f4f 	dsb	sy
 8012704:	f3bf 8f6f 	isb	sy
 8012708:	e009      	b.n	801271e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801270a:	68fb      	ldr	r3, [r7, #12]
 801270c:	3310      	adds	r3, #16
 801270e:	4618      	mov	r0, r3
 8012710:	f7ff fef2 	bl	80124f8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8012714:	68fb      	ldr	r3, [r7, #12]
 8012716:	3324      	adds	r3, #36	; 0x24
 8012718:	4618      	mov	r0, r3
 801271a:	f7ff feed 	bl	80124f8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801271e:	f002 ff61 	bl	80155e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8012722:	2301      	movs	r3, #1
}
 8012724:	4618      	mov	r0, r3
 8012726:	3710      	adds	r7, #16
 8012728:	46bd      	mov	sp, r7
 801272a:	bd80      	pop	{r7, pc}
 801272c:	e000ed04 	.word	0xe000ed04

08012730 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8012730:	b580      	push	{r7, lr}
 8012732:	b08e      	sub	sp, #56	; 0x38
 8012734:	af02      	add	r7, sp, #8
 8012736:	60f8      	str	r0, [r7, #12]
 8012738:	60b9      	str	r1, [r7, #8]
 801273a:	607a      	str	r2, [r7, #4]
 801273c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801273e:	68fb      	ldr	r3, [r7, #12]
 8012740:	2b00      	cmp	r3, #0
 8012742:	d10a      	bne.n	801275a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8012744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012748:	f383 8811 	msr	BASEPRI, r3
 801274c:	f3bf 8f6f 	isb	sy
 8012750:	f3bf 8f4f 	dsb	sy
 8012754:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8012756:	bf00      	nop
 8012758:	e7fe      	b.n	8012758 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801275a:	683b      	ldr	r3, [r7, #0]
 801275c:	2b00      	cmp	r3, #0
 801275e:	d10a      	bne.n	8012776 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8012760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012764:	f383 8811 	msr	BASEPRI, r3
 8012768:	f3bf 8f6f 	isb	sy
 801276c:	f3bf 8f4f 	dsb	sy
 8012770:	627b      	str	r3, [r7, #36]	; 0x24
}
 8012772:	bf00      	nop
 8012774:	e7fe      	b.n	8012774 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	2b00      	cmp	r3, #0
 801277a:	d002      	beq.n	8012782 <xQueueGenericCreateStatic+0x52>
 801277c:	68bb      	ldr	r3, [r7, #8]
 801277e:	2b00      	cmp	r3, #0
 8012780:	d001      	beq.n	8012786 <xQueueGenericCreateStatic+0x56>
 8012782:	2301      	movs	r3, #1
 8012784:	e000      	b.n	8012788 <xQueueGenericCreateStatic+0x58>
 8012786:	2300      	movs	r3, #0
 8012788:	2b00      	cmp	r3, #0
 801278a:	d10a      	bne.n	80127a2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 801278c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012790:	f383 8811 	msr	BASEPRI, r3
 8012794:	f3bf 8f6f 	isb	sy
 8012798:	f3bf 8f4f 	dsb	sy
 801279c:	623b      	str	r3, [r7, #32]
}
 801279e:	bf00      	nop
 80127a0:	e7fe      	b.n	80127a0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	d102      	bne.n	80127ae <xQueueGenericCreateStatic+0x7e>
 80127a8:	68bb      	ldr	r3, [r7, #8]
 80127aa:	2b00      	cmp	r3, #0
 80127ac:	d101      	bne.n	80127b2 <xQueueGenericCreateStatic+0x82>
 80127ae:	2301      	movs	r3, #1
 80127b0:	e000      	b.n	80127b4 <xQueueGenericCreateStatic+0x84>
 80127b2:	2300      	movs	r3, #0
 80127b4:	2b00      	cmp	r3, #0
 80127b6:	d10a      	bne.n	80127ce <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80127b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127bc:	f383 8811 	msr	BASEPRI, r3
 80127c0:	f3bf 8f6f 	isb	sy
 80127c4:	f3bf 8f4f 	dsb	sy
 80127c8:	61fb      	str	r3, [r7, #28]
}
 80127ca:	bf00      	nop
 80127cc:	e7fe      	b.n	80127cc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80127ce:	2350      	movs	r3, #80	; 0x50
 80127d0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80127d2:	697b      	ldr	r3, [r7, #20]
 80127d4:	2b50      	cmp	r3, #80	; 0x50
 80127d6:	d00a      	beq.n	80127ee <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80127d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127dc:	f383 8811 	msr	BASEPRI, r3
 80127e0:	f3bf 8f6f 	isb	sy
 80127e4:	f3bf 8f4f 	dsb	sy
 80127e8:	61bb      	str	r3, [r7, #24]
}
 80127ea:	bf00      	nop
 80127ec:	e7fe      	b.n	80127ec <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80127ee:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80127f0:	683b      	ldr	r3, [r7, #0]
 80127f2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80127f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127f6:	2b00      	cmp	r3, #0
 80127f8:	d00d      	beq.n	8012816 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80127fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127fc:	2201      	movs	r2, #1
 80127fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012802:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8012806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012808:	9300      	str	r3, [sp, #0]
 801280a:	4613      	mov	r3, r2
 801280c:	687a      	ldr	r2, [r7, #4]
 801280e:	68b9      	ldr	r1, [r7, #8]
 8012810:	68f8      	ldr	r0, [r7, #12]
 8012812:	f000 f83f 	bl	8012894 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8012818:	4618      	mov	r0, r3
 801281a:	3730      	adds	r7, #48	; 0x30
 801281c:	46bd      	mov	sp, r7
 801281e:	bd80      	pop	{r7, pc}

08012820 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8012820:	b580      	push	{r7, lr}
 8012822:	b08a      	sub	sp, #40	; 0x28
 8012824:	af02      	add	r7, sp, #8
 8012826:	60f8      	str	r0, [r7, #12]
 8012828:	60b9      	str	r1, [r7, #8]
 801282a:	4613      	mov	r3, r2
 801282c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801282e:	68fb      	ldr	r3, [r7, #12]
 8012830:	2b00      	cmp	r3, #0
 8012832:	d10a      	bne.n	801284a <xQueueGenericCreate+0x2a>
	__asm volatile
 8012834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012838:	f383 8811 	msr	BASEPRI, r3
 801283c:	f3bf 8f6f 	isb	sy
 8012840:	f3bf 8f4f 	dsb	sy
 8012844:	613b      	str	r3, [r7, #16]
}
 8012846:	bf00      	nop
 8012848:	e7fe      	b.n	8012848 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801284a:	68fb      	ldr	r3, [r7, #12]
 801284c:	68ba      	ldr	r2, [r7, #8]
 801284e:	fb02 f303 	mul.w	r3, r2, r3
 8012852:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8012854:	69fb      	ldr	r3, [r7, #28]
 8012856:	3350      	adds	r3, #80	; 0x50
 8012858:	4618      	mov	r0, r3
 801285a:	f002 ffb5 	bl	80157c8 <pvPortMalloc>
 801285e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8012860:	69bb      	ldr	r3, [r7, #24]
 8012862:	2b00      	cmp	r3, #0
 8012864:	d011      	beq.n	801288a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8012866:	69bb      	ldr	r3, [r7, #24]
 8012868:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801286a:	697b      	ldr	r3, [r7, #20]
 801286c:	3350      	adds	r3, #80	; 0x50
 801286e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8012870:	69bb      	ldr	r3, [r7, #24]
 8012872:	2200      	movs	r2, #0
 8012874:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012878:	79fa      	ldrb	r2, [r7, #7]
 801287a:	69bb      	ldr	r3, [r7, #24]
 801287c:	9300      	str	r3, [sp, #0]
 801287e:	4613      	mov	r3, r2
 8012880:	697a      	ldr	r2, [r7, #20]
 8012882:	68b9      	ldr	r1, [r7, #8]
 8012884:	68f8      	ldr	r0, [r7, #12]
 8012886:	f000 f805 	bl	8012894 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801288a:	69bb      	ldr	r3, [r7, #24]
	}
 801288c:	4618      	mov	r0, r3
 801288e:	3720      	adds	r7, #32
 8012890:	46bd      	mov	sp, r7
 8012892:	bd80      	pop	{r7, pc}

08012894 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8012894:	b580      	push	{r7, lr}
 8012896:	b084      	sub	sp, #16
 8012898:	af00      	add	r7, sp, #0
 801289a:	60f8      	str	r0, [r7, #12]
 801289c:	60b9      	str	r1, [r7, #8]
 801289e:	607a      	str	r2, [r7, #4]
 80128a0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80128a2:	68bb      	ldr	r3, [r7, #8]
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	d103      	bne.n	80128b0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80128a8:	69bb      	ldr	r3, [r7, #24]
 80128aa:	69ba      	ldr	r2, [r7, #24]
 80128ac:	601a      	str	r2, [r3, #0]
 80128ae:	e002      	b.n	80128b6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80128b0:	69bb      	ldr	r3, [r7, #24]
 80128b2:	687a      	ldr	r2, [r7, #4]
 80128b4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80128b6:	69bb      	ldr	r3, [r7, #24]
 80128b8:	68fa      	ldr	r2, [r7, #12]
 80128ba:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80128bc:	69bb      	ldr	r3, [r7, #24]
 80128be:	68ba      	ldr	r2, [r7, #8]
 80128c0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80128c2:	2101      	movs	r1, #1
 80128c4:	69b8      	ldr	r0, [r7, #24]
 80128c6:	f7ff fecb 	bl	8012660 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80128ca:	69bb      	ldr	r3, [r7, #24]
 80128cc:	78fa      	ldrb	r2, [r7, #3]
 80128ce:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80128d2:	bf00      	nop
 80128d4:	3710      	adds	r7, #16
 80128d6:	46bd      	mov	sp, r7
 80128d8:	bd80      	pop	{r7, pc}

080128da <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80128da:	b580      	push	{r7, lr}
 80128dc:	b082      	sub	sp, #8
 80128de:	af00      	add	r7, sp, #0
 80128e0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	2b00      	cmp	r3, #0
 80128e6:	d00e      	beq.n	8012906 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	2200      	movs	r2, #0
 80128ec:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	2200      	movs	r2, #0
 80128f2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	2200      	movs	r2, #0
 80128f8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80128fa:	2300      	movs	r3, #0
 80128fc:	2200      	movs	r2, #0
 80128fe:	2100      	movs	r1, #0
 8012900:	6878      	ldr	r0, [r7, #4]
 8012902:	f000 f90b 	bl	8012b1c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8012906:	bf00      	nop
 8012908:	3708      	adds	r7, #8
 801290a:	46bd      	mov	sp, r7
 801290c:	bd80      	pop	{r7, pc}

0801290e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 801290e:	b580      	push	{r7, lr}
 8012910:	b086      	sub	sp, #24
 8012912:	af00      	add	r7, sp, #0
 8012914:	4603      	mov	r3, r0
 8012916:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8012918:	2301      	movs	r3, #1
 801291a:	617b      	str	r3, [r7, #20]
 801291c:	2300      	movs	r3, #0
 801291e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8012920:	79fb      	ldrb	r3, [r7, #7]
 8012922:	461a      	mov	r2, r3
 8012924:	6939      	ldr	r1, [r7, #16]
 8012926:	6978      	ldr	r0, [r7, #20]
 8012928:	f7ff ff7a 	bl	8012820 <xQueueGenericCreate>
 801292c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 801292e:	68f8      	ldr	r0, [r7, #12]
 8012930:	f7ff ffd3 	bl	80128da <prvInitialiseMutex>

		return xNewQueue;
 8012934:	68fb      	ldr	r3, [r7, #12]
	}
 8012936:	4618      	mov	r0, r3
 8012938:	3718      	adds	r7, #24
 801293a:	46bd      	mov	sp, r7
 801293c:	bd80      	pop	{r7, pc}

0801293e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 801293e:	b580      	push	{r7, lr}
 8012940:	b088      	sub	sp, #32
 8012942:	af02      	add	r7, sp, #8
 8012944:	4603      	mov	r3, r0
 8012946:	6039      	str	r1, [r7, #0]
 8012948:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801294a:	2301      	movs	r3, #1
 801294c:	617b      	str	r3, [r7, #20]
 801294e:	2300      	movs	r3, #0
 8012950:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8012952:	79fb      	ldrb	r3, [r7, #7]
 8012954:	9300      	str	r3, [sp, #0]
 8012956:	683b      	ldr	r3, [r7, #0]
 8012958:	2200      	movs	r2, #0
 801295a:	6939      	ldr	r1, [r7, #16]
 801295c:	6978      	ldr	r0, [r7, #20]
 801295e:	f7ff fee7 	bl	8012730 <xQueueGenericCreateStatic>
 8012962:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8012964:	68f8      	ldr	r0, [r7, #12]
 8012966:	f7ff ffb8 	bl	80128da <prvInitialiseMutex>

		return xNewQueue;
 801296a:	68fb      	ldr	r3, [r7, #12]
	}
 801296c:	4618      	mov	r0, r3
 801296e:	3718      	adds	r7, #24
 8012970:	46bd      	mov	sp, r7
 8012972:	bd80      	pop	{r7, pc}

08012974 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8012974:	b590      	push	{r4, r7, lr}
 8012976:	b087      	sub	sp, #28
 8012978:	af00      	add	r7, sp, #0
 801297a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8012980:	693b      	ldr	r3, [r7, #16]
 8012982:	2b00      	cmp	r3, #0
 8012984:	d10a      	bne.n	801299c <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8012986:	f04f 0350 	mov.w	r3, #80	; 0x50
 801298a:	f383 8811 	msr	BASEPRI, r3
 801298e:	f3bf 8f6f 	isb	sy
 8012992:	f3bf 8f4f 	dsb	sy
 8012996:	60fb      	str	r3, [r7, #12]
}
 8012998:	bf00      	nop
 801299a:	e7fe      	b.n	801299a <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 801299c:	693b      	ldr	r3, [r7, #16]
 801299e:	689c      	ldr	r4, [r3, #8]
 80129a0:	f001 fd52 	bl	8014448 <xTaskGetCurrentTaskHandle>
 80129a4:	4603      	mov	r3, r0
 80129a6:	429c      	cmp	r4, r3
 80129a8:	d111      	bne.n	80129ce <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80129aa:	693b      	ldr	r3, [r7, #16]
 80129ac:	68db      	ldr	r3, [r3, #12]
 80129ae:	1e5a      	subs	r2, r3, #1
 80129b0:	693b      	ldr	r3, [r7, #16]
 80129b2:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80129b4:	693b      	ldr	r3, [r7, #16]
 80129b6:	68db      	ldr	r3, [r3, #12]
 80129b8:	2b00      	cmp	r3, #0
 80129ba:	d105      	bne.n	80129c8 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80129bc:	2300      	movs	r3, #0
 80129be:	2200      	movs	r2, #0
 80129c0:	2100      	movs	r1, #0
 80129c2:	6938      	ldr	r0, [r7, #16]
 80129c4:	f000 f8aa 	bl	8012b1c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80129c8:	2301      	movs	r3, #1
 80129ca:	617b      	str	r3, [r7, #20]
 80129cc:	e001      	b.n	80129d2 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80129ce:	2300      	movs	r3, #0
 80129d0:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80129d2:	697b      	ldr	r3, [r7, #20]
	}
 80129d4:	4618      	mov	r0, r3
 80129d6:	371c      	adds	r7, #28
 80129d8:	46bd      	mov	sp, r7
 80129da:	bd90      	pop	{r4, r7, pc}

080129dc <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80129dc:	b590      	push	{r4, r7, lr}
 80129de:	b087      	sub	sp, #28
 80129e0:	af00      	add	r7, sp, #0
 80129e2:	6078      	str	r0, [r7, #4]
 80129e4:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80129ea:	693b      	ldr	r3, [r7, #16]
 80129ec:	2b00      	cmp	r3, #0
 80129ee:	d10a      	bne.n	8012a06 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 80129f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129f4:	f383 8811 	msr	BASEPRI, r3
 80129f8:	f3bf 8f6f 	isb	sy
 80129fc:	f3bf 8f4f 	dsb	sy
 8012a00:	60fb      	str	r3, [r7, #12]
}
 8012a02:	bf00      	nop
 8012a04:	e7fe      	b.n	8012a04 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8012a06:	693b      	ldr	r3, [r7, #16]
 8012a08:	689c      	ldr	r4, [r3, #8]
 8012a0a:	f001 fd1d 	bl	8014448 <xTaskGetCurrentTaskHandle>
 8012a0e:	4603      	mov	r3, r0
 8012a10:	429c      	cmp	r4, r3
 8012a12:	d107      	bne.n	8012a24 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8012a14:	693b      	ldr	r3, [r7, #16]
 8012a16:	68db      	ldr	r3, [r3, #12]
 8012a18:	1c5a      	adds	r2, r3, #1
 8012a1a:	693b      	ldr	r3, [r7, #16]
 8012a1c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8012a1e:	2301      	movs	r3, #1
 8012a20:	617b      	str	r3, [r7, #20]
 8012a22:	e00c      	b.n	8012a3e <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8012a24:	6839      	ldr	r1, [r7, #0]
 8012a26:	6938      	ldr	r0, [r7, #16]
 8012a28:	f000 fb7e 	bl	8013128 <xQueueSemaphoreTake>
 8012a2c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8012a2e:	697b      	ldr	r3, [r7, #20]
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	d004      	beq.n	8012a3e <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8012a34:	693b      	ldr	r3, [r7, #16]
 8012a36:	68db      	ldr	r3, [r3, #12]
 8012a38:	1c5a      	adds	r2, r3, #1
 8012a3a:	693b      	ldr	r3, [r7, #16]
 8012a3c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8012a3e:	697b      	ldr	r3, [r7, #20]
	}
 8012a40:	4618      	mov	r0, r3
 8012a42:	371c      	adds	r7, #28
 8012a44:	46bd      	mov	sp, r7
 8012a46:	bd90      	pop	{r4, r7, pc}

08012a48 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8012a48:	b580      	push	{r7, lr}
 8012a4a:	b08a      	sub	sp, #40	; 0x28
 8012a4c:	af02      	add	r7, sp, #8
 8012a4e:	60f8      	str	r0, [r7, #12]
 8012a50:	60b9      	str	r1, [r7, #8]
 8012a52:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8012a54:	68fb      	ldr	r3, [r7, #12]
 8012a56:	2b00      	cmp	r3, #0
 8012a58:	d10a      	bne.n	8012a70 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8012a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a5e:	f383 8811 	msr	BASEPRI, r3
 8012a62:	f3bf 8f6f 	isb	sy
 8012a66:	f3bf 8f4f 	dsb	sy
 8012a6a:	61bb      	str	r3, [r7, #24]
}
 8012a6c:	bf00      	nop
 8012a6e:	e7fe      	b.n	8012a6e <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8012a70:	68ba      	ldr	r2, [r7, #8]
 8012a72:	68fb      	ldr	r3, [r7, #12]
 8012a74:	429a      	cmp	r2, r3
 8012a76:	d90a      	bls.n	8012a8e <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8012a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a7c:	f383 8811 	msr	BASEPRI, r3
 8012a80:	f3bf 8f6f 	isb	sy
 8012a84:	f3bf 8f4f 	dsb	sy
 8012a88:	617b      	str	r3, [r7, #20]
}
 8012a8a:	bf00      	nop
 8012a8c:	e7fe      	b.n	8012a8c <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8012a8e:	2302      	movs	r3, #2
 8012a90:	9300      	str	r3, [sp, #0]
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	2200      	movs	r2, #0
 8012a96:	2100      	movs	r1, #0
 8012a98:	68f8      	ldr	r0, [r7, #12]
 8012a9a:	f7ff fe49 	bl	8012730 <xQueueGenericCreateStatic>
 8012a9e:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8012aa0:	69fb      	ldr	r3, [r7, #28]
 8012aa2:	2b00      	cmp	r3, #0
 8012aa4:	d002      	beq.n	8012aac <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8012aa6:	69fb      	ldr	r3, [r7, #28]
 8012aa8:	68ba      	ldr	r2, [r7, #8]
 8012aaa:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8012aac:	69fb      	ldr	r3, [r7, #28]
	}
 8012aae:	4618      	mov	r0, r3
 8012ab0:	3720      	adds	r7, #32
 8012ab2:	46bd      	mov	sp, r7
 8012ab4:	bd80      	pop	{r7, pc}

08012ab6 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8012ab6:	b580      	push	{r7, lr}
 8012ab8:	b086      	sub	sp, #24
 8012aba:	af00      	add	r7, sp, #0
 8012abc:	6078      	str	r0, [r7, #4]
 8012abe:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	2b00      	cmp	r3, #0
 8012ac4:	d10a      	bne.n	8012adc <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8012ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012aca:	f383 8811 	msr	BASEPRI, r3
 8012ace:	f3bf 8f6f 	isb	sy
 8012ad2:	f3bf 8f4f 	dsb	sy
 8012ad6:	613b      	str	r3, [r7, #16]
}
 8012ad8:	bf00      	nop
 8012ada:	e7fe      	b.n	8012ada <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8012adc:	683a      	ldr	r2, [r7, #0]
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	429a      	cmp	r2, r3
 8012ae2:	d90a      	bls.n	8012afa <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8012ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ae8:	f383 8811 	msr	BASEPRI, r3
 8012aec:	f3bf 8f6f 	isb	sy
 8012af0:	f3bf 8f4f 	dsb	sy
 8012af4:	60fb      	str	r3, [r7, #12]
}
 8012af6:	bf00      	nop
 8012af8:	e7fe      	b.n	8012af8 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8012afa:	2202      	movs	r2, #2
 8012afc:	2100      	movs	r1, #0
 8012afe:	6878      	ldr	r0, [r7, #4]
 8012b00:	f7ff fe8e 	bl	8012820 <xQueueGenericCreate>
 8012b04:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8012b06:	697b      	ldr	r3, [r7, #20]
 8012b08:	2b00      	cmp	r3, #0
 8012b0a:	d002      	beq.n	8012b12 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8012b0c:	697b      	ldr	r3, [r7, #20]
 8012b0e:	683a      	ldr	r2, [r7, #0]
 8012b10:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8012b12:	697b      	ldr	r3, [r7, #20]
	}
 8012b14:	4618      	mov	r0, r3
 8012b16:	3718      	adds	r7, #24
 8012b18:	46bd      	mov	sp, r7
 8012b1a:	bd80      	pop	{r7, pc}

08012b1c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8012b1c:	b580      	push	{r7, lr}
 8012b1e:	b08e      	sub	sp, #56	; 0x38
 8012b20:	af00      	add	r7, sp, #0
 8012b22:	60f8      	str	r0, [r7, #12]
 8012b24:	60b9      	str	r1, [r7, #8]
 8012b26:	607a      	str	r2, [r7, #4]
 8012b28:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8012b2a:	2300      	movs	r3, #0
 8012b2c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012b2e:	68fb      	ldr	r3, [r7, #12]
 8012b30:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	d10a      	bne.n	8012b4e <xQueueGenericSend+0x32>
	__asm volatile
 8012b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b3c:	f383 8811 	msr	BASEPRI, r3
 8012b40:	f3bf 8f6f 	isb	sy
 8012b44:	f3bf 8f4f 	dsb	sy
 8012b48:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8012b4a:	bf00      	nop
 8012b4c:	e7fe      	b.n	8012b4c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012b4e:	68bb      	ldr	r3, [r7, #8]
 8012b50:	2b00      	cmp	r3, #0
 8012b52:	d103      	bne.n	8012b5c <xQueueGenericSend+0x40>
 8012b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012b58:	2b00      	cmp	r3, #0
 8012b5a:	d101      	bne.n	8012b60 <xQueueGenericSend+0x44>
 8012b5c:	2301      	movs	r3, #1
 8012b5e:	e000      	b.n	8012b62 <xQueueGenericSend+0x46>
 8012b60:	2300      	movs	r3, #0
 8012b62:	2b00      	cmp	r3, #0
 8012b64:	d10a      	bne.n	8012b7c <xQueueGenericSend+0x60>
	__asm volatile
 8012b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b6a:	f383 8811 	msr	BASEPRI, r3
 8012b6e:	f3bf 8f6f 	isb	sy
 8012b72:	f3bf 8f4f 	dsb	sy
 8012b76:	627b      	str	r3, [r7, #36]	; 0x24
}
 8012b78:	bf00      	nop
 8012b7a:	e7fe      	b.n	8012b7a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012b7c:	683b      	ldr	r3, [r7, #0]
 8012b7e:	2b02      	cmp	r3, #2
 8012b80:	d103      	bne.n	8012b8a <xQueueGenericSend+0x6e>
 8012b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012b86:	2b01      	cmp	r3, #1
 8012b88:	d101      	bne.n	8012b8e <xQueueGenericSend+0x72>
 8012b8a:	2301      	movs	r3, #1
 8012b8c:	e000      	b.n	8012b90 <xQueueGenericSend+0x74>
 8012b8e:	2300      	movs	r3, #0
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	d10a      	bne.n	8012baa <xQueueGenericSend+0x8e>
	__asm volatile
 8012b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b98:	f383 8811 	msr	BASEPRI, r3
 8012b9c:	f3bf 8f6f 	isb	sy
 8012ba0:	f3bf 8f4f 	dsb	sy
 8012ba4:	623b      	str	r3, [r7, #32]
}
 8012ba6:	bf00      	nop
 8012ba8:	e7fe      	b.n	8012ba8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012baa:	f001 fc5d 	bl	8014468 <xTaskGetSchedulerState>
 8012bae:	4603      	mov	r3, r0
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	d102      	bne.n	8012bba <xQueueGenericSend+0x9e>
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	2b00      	cmp	r3, #0
 8012bb8:	d101      	bne.n	8012bbe <xQueueGenericSend+0xa2>
 8012bba:	2301      	movs	r3, #1
 8012bbc:	e000      	b.n	8012bc0 <xQueueGenericSend+0xa4>
 8012bbe:	2300      	movs	r3, #0
 8012bc0:	2b00      	cmp	r3, #0
 8012bc2:	d10a      	bne.n	8012bda <xQueueGenericSend+0xbe>
	__asm volatile
 8012bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bc8:	f383 8811 	msr	BASEPRI, r3
 8012bcc:	f3bf 8f6f 	isb	sy
 8012bd0:	f3bf 8f4f 	dsb	sy
 8012bd4:	61fb      	str	r3, [r7, #28]
}
 8012bd6:	bf00      	nop
 8012bd8:	e7fe      	b.n	8012bd8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012bda:	f002 fcd3 	bl	8015584 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012be0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012be6:	429a      	cmp	r2, r3
 8012be8:	d302      	bcc.n	8012bf0 <xQueueGenericSend+0xd4>
 8012bea:	683b      	ldr	r3, [r7, #0]
 8012bec:	2b02      	cmp	r3, #2
 8012bee:	d129      	bne.n	8012c44 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012bf0:	683a      	ldr	r2, [r7, #0]
 8012bf2:	68b9      	ldr	r1, [r7, #8]
 8012bf4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012bf6:	f000 fc5e 	bl	80134b6 <prvCopyDataToQueue>
 8012bfa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c00:	2b00      	cmp	r3, #0
 8012c02:	d010      	beq.n	8012c26 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c06:	3324      	adds	r3, #36	; 0x24
 8012c08:	4618      	mov	r0, r3
 8012c0a:	f001 fa5f 	bl	80140cc <xTaskRemoveFromEventList>
 8012c0e:	4603      	mov	r3, r0
 8012c10:	2b00      	cmp	r3, #0
 8012c12:	d013      	beq.n	8012c3c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8012c14:	4b3f      	ldr	r3, [pc, #252]	; (8012d14 <xQueueGenericSend+0x1f8>)
 8012c16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012c1a:	601a      	str	r2, [r3, #0]
 8012c1c:	f3bf 8f4f 	dsb	sy
 8012c20:	f3bf 8f6f 	isb	sy
 8012c24:	e00a      	b.n	8012c3c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8012c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c28:	2b00      	cmp	r3, #0
 8012c2a:	d007      	beq.n	8012c3c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8012c2c:	4b39      	ldr	r3, [pc, #228]	; (8012d14 <xQueueGenericSend+0x1f8>)
 8012c2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012c32:	601a      	str	r2, [r3, #0]
 8012c34:	f3bf 8f4f 	dsb	sy
 8012c38:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8012c3c:	f002 fcd2 	bl	80155e4 <vPortExitCritical>
				return pdPASS;
 8012c40:	2301      	movs	r3, #1
 8012c42:	e063      	b.n	8012d0c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	2b00      	cmp	r3, #0
 8012c48:	d103      	bne.n	8012c52 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012c4a:	f002 fccb 	bl	80155e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8012c4e:	2300      	movs	r3, #0
 8012c50:	e05c      	b.n	8012d0c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	d106      	bne.n	8012c66 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012c58:	f107 0314 	add.w	r3, r7, #20
 8012c5c:	4618      	mov	r0, r3
 8012c5e:	f001 fa99 	bl	8014194 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012c62:	2301      	movs	r3, #1
 8012c64:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012c66:	f002 fcbd 	bl	80155e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012c6a:	f000 fff9 	bl	8013c60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012c6e:	f002 fc89 	bl	8015584 <vPortEnterCritical>
 8012c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012c78:	b25b      	sxtb	r3, r3
 8012c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c7e:	d103      	bne.n	8012c88 <xQueueGenericSend+0x16c>
 8012c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c82:	2200      	movs	r2, #0
 8012c84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012c8e:	b25b      	sxtb	r3, r3
 8012c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c94:	d103      	bne.n	8012c9e <xQueueGenericSend+0x182>
 8012c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c98:	2200      	movs	r2, #0
 8012c9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012c9e:	f002 fca1 	bl	80155e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012ca2:	1d3a      	adds	r2, r7, #4
 8012ca4:	f107 0314 	add.w	r3, r7, #20
 8012ca8:	4611      	mov	r1, r2
 8012caa:	4618      	mov	r0, r3
 8012cac:	f001 fa88 	bl	80141c0 <xTaskCheckForTimeOut>
 8012cb0:	4603      	mov	r3, r0
 8012cb2:	2b00      	cmp	r3, #0
 8012cb4:	d124      	bne.n	8012d00 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8012cb6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012cb8:	f000 fcf5 	bl	80136a6 <prvIsQueueFull>
 8012cbc:	4603      	mov	r3, r0
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	d018      	beq.n	8012cf4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8012cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cc4:	3310      	adds	r3, #16
 8012cc6:	687a      	ldr	r2, [r7, #4]
 8012cc8:	4611      	mov	r1, r2
 8012cca:	4618      	mov	r0, r3
 8012ccc:	f001 f9ae 	bl	801402c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8012cd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012cd2:	f000 fc80 	bl	80135d6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8012cd6:	f000 ffd1 	bl	8013c7c <xTaskResumeAll>
 8012cda:	4603      	mov	r3, r0
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	f47f af7c 	bne.w	8012bda <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8012ce2:	4b0c      	ldr	r3, [pc, #48]	; (8012d14 <xQueueGenericSend+0x1f8>)
 8012ce4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012ce8:	601a      	str	r2, [r3, #0]
 8012cea:	f3bf 8f4f 	dsb	sy
 8012cee:	f3bf 8f6f 	isb	sy
 8012cf2:	e772      	b.n	8012bda <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8012cf4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012cf6:	f000 fc6e 	bl	80135d6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012cfa:	f000 ffbf 	bl	8013c7c <xTaskResumeAll>
 8012cfe:	e76c      	b.n	8012bda <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8012d00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012d02:	f000 fc68 	bl	80135d6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012d06:	f000 ffb9 	bl	8013c7c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8012d0a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8012d0c:	4618      	mov	r0, r3
 8012d0e:	3738      	adds	r7, #56	; 0x38
 8012d10:	46bd      	mov	sp, r7
 8012d12:	bd80      	pop	{r7, pc}
 8012d14:	e000ed04 	.word	0xe000ed04

08012d18 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8012d18:	b580      	push	{r7, lr}
 8012d1a:	b090      	sub	sp, #64	; 0x40
 8012d1c:	af00      	add	r7, sp, #0
 8012d1e:	60f8      	str	r0, [r7, #12]
 8012d20:	60b9      	str	r1, [r7, #8]
 8012d22:	607a      	str	r2, [r7, #4]
 8012d24:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012d26:	68fb      	ldr	r3, [r7, #12]
 8012d28:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8012d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d2c:	2b00      	cmp	r3, #0
 8012d2e:	d10a      	bne.n	8012d46 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8012d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d34:	f383 8811 	msr	BASEPRI, r3
 8012d38:	f3bf 8f6f 	isb	sy
 8012d3c:	f3bf 8f4f 	dsb	sy
 8012d40:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8012d42:	bf00      	nop
 8012d44:	e7fe      	b.n	8012d44 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012d46:	68bb      	ldr	r3, [r7, #8]
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	d103      	bne.n	8012d54 <xQueueGenericSendFromISR+0x3c>
 8012d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012d50:	2b00      	cmp	r3, #0
 8012d52:	d101      	bne.n	8012d58 <xQueueGenericSendFromISR+0x40>
 8012d54:	2301      	movs	r3, #1
 8012d56:	e000      	b.n	8012d5a <xQueueGenericSendFromISR+0x42>
 8012d58:	2300      	movs	r3, #0
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	d10a      	bne.n	8012d74 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8012d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d62:	f383 8811 	msr	BASEPRI, r3
 8012d66:	f3bf 8f6f 	isb	sy
 8012d6a:	f3bf 8f4f 	dsb	sy
 8012d6e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8012d70:	bf00      	nop
 8012d72:	e7fe      	b.n	8012d72 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012d74:	683b      	ldr	r3, [r7, #0]
 8012d76:	2b02      	cmp	r3, #2
 8012d78:	d103      	bne.n	8012d82 <xQueueGenericSendFromISR+0x6a>
 8012d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012d7e:	2b01      	cmp	r3, #1
 8012d80:	d101      	bne.n	8012d86 <xQueueGenericSendFromISR+0x6e>
 8012d82:	2301      	movs	r3, #1
 8012d84:	e000      	b.n	8012d88 <xQueueGenericSendFromISR+0x70>
 8012d86:	2300      	movs	r3, #0
 8012d88:	2b00      	cmp	r3, #0
 8012d8a:	d10a      	bne.n	8012da2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8012d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d90:	f383 8811 	msr	BASEPRI, r3
 8012d94:	f3bf 8f6f 	isb	sy
 8012d98:	f3bf 8f4f 	dsb	sy
 8012d9c:	623b      	str	r3, [r7, #32]
}
 8012d9e:	bf00      	nop
 8012da0:	e7fe      	b.n	8012da0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012da2:	f002 fcd1 	bl	8015748 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8012da6:	f3ef 8211 	mrs	r2, BASEPRI
 8012daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012dae:	f383 8811 	msr	BASEPRI, r3
 8012db2:	f3bf 8f6f 	isb	sy
 8012db6:	f3bf 8f4f 	dsb	sy
 8012dba:	61fa      	str	r2, [r7, #28]
 8012dbc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8012dbe:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012dc0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012dca:	429a      	cmp	r2, r3
 8012dcc:	d302      	bcc.n	8012dd4 <xQueueGenericSendFromISR+0xbc>
 8012dce:	683b      	ldr	r3, [r7, #0]
 8012dd0:	2b02      	cmp	r3, #2
 8012dd2:	d12f      	bne.n	8012e34 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8012dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dd6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012dda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012de2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012de4:	683a      	ldr	r2, [r7, #0]
 8012de6:	68b9      	ldr	r1, [r7, #8]
 8012de8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012dea:	f000 fb64 	bl	80134b6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8012dee:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8012df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012df6:	d112      	bne.n	8012e1e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012dfc:	2b00      	cmp	r3, #0
 8012dfe:	d016      	beq.n	8012e2e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e02:	3324      	adds	r3, #36	; 0x24
 8012e04:	4618      	mov	r0, r3
 8012e06:	f001 f961 	bl	80140cc <xTaskRemoveFromEventList>
 8012e0a:	4603      	mov	r3, r0
 8012e0c:	2b00      	cmp	r3, #0
 8012e0e:	d00e      	beq.n	8012e2e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	d00b      	beq.n	8012e2e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	2201      	movs	r2, #1
 8012e1a:	601a      	str	r2, [r3, #0]
 8012e1c:	e007      	b.n	8012e2e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012e1e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012e22:	3301      	adds	r3, #1
 8012e24:	b2db      	uxtb	r3, r3
 8012e26:	b25a      	sxtb	r2, r3
 8012e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8012e2e:	2301      	movs	r3, #1
 8012e30:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8012e32:	e001      	b.n	8012e38 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012e34:	2300      	movs	r3, #0
 8012e36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012e38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e3a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8012e3c:	697b      	ldr	r3, [r7, #20]
 8012e3e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8012e42:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012e44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8012e46:	4618      	mov	r0, r3
 8012e48:	3740      	adds	r7, #64	; 0x40
 8012e4a:	46bd      	mov	sp, r7
 8012e4c:	bd80      	pop	{r7, pc}

08012e4e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012e4e:	b580      	push	{r7, lr}
 8012e50:	b08e      	sub	sp, #56	; 0x38
 8012e52:	af00      	add	r7, sp, #0
 8012e54:	6078      	str	r0, [r7, #4]
 8012e56:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8012e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e5e:	2b00      	cmp	r3, #0
 8012e60:	d10a      	bne.n	8012e78 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8012e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e66:	f383 8811 	msr	BASEPRI, r3
 8012e6a:	f3bf 8f6f 	isb	sy
 8012e6e:	f3bf 8f4f 	dsb	sy
 8012e72:	623b      	str	r3, [r7, #32]
}
 8012e74:	bf00      	nop
 8012e76:	e7fe      	b.n	8012e76 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8012e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012e7c:	2b00      	cmp	r3, #0
 8012e7e:	d00a      	beq.n	8012e96 <xQueueGiveFromISR+0x48>
	__asm volatile
 8012e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e84:	f383 8811 	msr	BASEPRI, r3
 8012e88:	f3bf 8f6f 	isb	sy
 8012e8c:	f3bf 8f4f 	dsb	sy
 8012e90:	61fb      	str	r3, [r7, #28]
}
 8012e92:	bf00      	nop
 8012e94:	e7fe      	b.n	8012e94 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8012e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e98:	681b      	ldr	r3, [r3, #0]
 8012e9a:	2b00      	cmp	r3, #0
 8012e9c:	d103      	bne.n	8012ea6 <xQueueGiveFromISR+0x58>
 8012e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ea0:	689b      	ldr	r3, [r3, #8]
 8012ea2:	2b00      	cmp	r3, #0
 8012ea4:	d101      	bne.n	8012eaa <xQueueGiveFromISR+0x5c>
 8012ea6:	2301      	movs	r3, #1
 8012ea8:	e000      	b.n	8012eac <xQueueGiveFromISR+0x5e>
 8012eaa:	2300      	movs	r3, #0
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	d10a      	bne.n	8012ec6 <xQueueGiveFromISR+0x78>
	__asm volatile
 8012eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012eb4:	f383 8811 	msr	BASEPRI, r3
 8012eb8:	f3bf 8f6f 	isb	sy
 8012ebc:	f3bf 8f4f 	dsb	sy
 8012ec0:	61bb      	str	r3, [r7, #24]
}
 8012ec2:	bf00      	nop
 8012ec4:	e7fe      	b.n	8012ec4 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012ec6:	f002 fc3f 	bl	8015748 <vPortValidateInterruptPriority>
	__asm volatile
 8012eca:	f3ef 8211 	mrs	r2, BASEPRI
 8012ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ed2:	f383 8811 	msr	BASEPRI, r3
 8012ed6:	f3bf 8f6f 	isb	sy
 8012eda:	f3bf 8f4f 	dsb	sy
 8012ede:	617a      	str	r2, [r7, #20]
 8012ee0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8012ee2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012eea:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8012eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012eee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012ef0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012ef2:	429a      	cmp	r2, r3
 8012ef4:	d22b      	bcs.n	8012f4e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8012ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ef8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012efc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f02:	1c5a      	adds	r2, r3, #1
 8012f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f06:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8012f08:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012f10:	d112      	bne.n	8012f38 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f16:	2b00      	cmp	r3, #0
 8012f18:	d016      	beq.n	8012f48 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f1c:	3324      	adds	r3, #36	; 0x24
 8012f1e:	4618      	mov	r0, r3
 8012f20:	f001 f8d4 	bl	80140cc <xTaskRemoveFromEventList>
 8012f24:	4603      	mov	r3, r0
 8012f26:	2b00      	cmp	r3, #0
 8012f28:	d00e      	beq.n	8012f48 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8012f2a:	683b      	ldr	r3, [r7, #0]
 8012f2c:	2b00      	cmp	r3, #0
 8012f2e:	d00b      	beq.n	8012f48 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012f30:	683b      	ldr	r3, [r7, #0]
 8012f32:	2201      	movs	r2, #1
 8012f34:	601a      	str	r2, [r3, #0]
 8012f36:	e007      	b.n	8012f48 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012f38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012f3c:	3301      	adds	r3, #1
 8012f3e:	b2db      	uxtb	r3, r3
 8012f40:	b25a      	sxtb	r2, r3
 8012f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8012f48:	2301      	movs	r3, #1
 8012f4a:	637b      	str	r3, [r7, #52]	; 0x34
 8012f4c:	e001      	b.n	8012f52 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012f4e:	2300      	movs	r3, #0
 8012f50:	637b      	str	r3, [r7, #52]	; 0x34
 8012f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f54:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8012f56:	68fb      	ldr	r3, [r7, #12]
 8012f58:	f383 8811 	msr	BASEPRI, r3
}
 8012f5c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012f5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012f60:	4618      	mov	r0, r3
 8012f62:	3738      	adds	r7, #56	; 0x38
 8012f64:	46bd      	mov	sp, r7
 8012f66:	bd80      	pop	{r7, pc}

08012f68 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8012f68:	b580      	push	{r7, lr}
 8012f6a:	b08c      	sub	sp, #48	; 0x30
 8012f6c:	af00      	add	r7, sp, #0
 8012f6e:	60f8      	str	r0, [r7, #12]
 8012f70:	60b9      	str	r1, [r7, #8]
 8012f72:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8012f74:	2300      	movs	r3, #0
 8012f76:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012f78:	68fb      	ldr	r3, [r7, #12]
 8012f7a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8012f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f7e:	2b00      	cmp	r3, #0
 8012f80:	d10a      	bne.n	8012f98 <xQueueReceive+0x30>
	__asm volatile
 8012f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f86:	f383 8811 	msr	BASEPRI, r3
 8012f8a:	f3bf 8f6f 	isb	sy
 8012f8e:	f3bf 8f4f 	dsb	sy
 8012f92:	623b      	str	r3, [r7, #32]
}
 8012f94:	bf00      	nop
 8012f96:	e7fe      	b.n	8012f96 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012f98:	68bb      	ldr	r3, [r7, #8]
 8012f9a:	2b00      	cmp	r3, #0
 8012f9c:	d103      	bne.n	8012fa6 <xQueueReceive+0x3e>
 8012f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	d101      	bne.n	8012faa <xQueueReceive+0x42>
 8012fa6:	2301      	movs	r3, #1
 8012fa8:	e000      	b.n	8012fac <xQueueReceive+0x44>
 8012faa:	2300      	movs	r3, #0
 8012fac:	2b00      	cmp	r3, #0
 8012fae:	d10a      	bne.n	8012fc6 <xQueueReceive+0x5e>
	__asm volatile
 8012fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fb4:	f383 8811 	msr	BASEPRI, r3
 8012fb8:	f3bf 8f6f 	isb	sy
 8012fbc:	f3bf 8f4f 	dsb	sy
 8012fc0:	61fb      	str	r3, [r7, #28]
}
 8012fc2:	bf00      	nop
 8012fc4:	e7fe      	b.n	8012fc4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012fc6:	f001 fa4f 	bl	8014468 <xTaskGetSchedulerState>
 8012fca:	4603      	mov	r3, r0
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	d102      	bne.n	8012fd6 <xQueueReceive+0x6e>
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	2b00      	cmp	r3, #0
 8012fd4:	d101      	bne.n	8012fda <xQueueReceive+0x72>
 8012fd6:	2301      	movs	r3, #1
 8012fd8:	e000      	b.n	8012fdc <xQueueReceive+0x74>
 8012fda:	2300      	movs	r3, #0
 8012fdc:	2b00      	cmp	r3, #0
 8012fde:	d10a      	bne.n	8012ff6 <xQueueReceive+0x8e>
	__asm volatile
 8012fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fe4:	f383 8811 	msr	BASEPRI, r3
 8012fe8:	f3bf 8f6f 	isb	sy
 8012fec:	f3bf 8f4f 	dsb	sy
 8012ff0:	61bb      	str	r3, [r7, #24]
}
 8012ff2:	bf00      	nop
 8012ff4:	e7fe      	b.n	8012ff4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012ff6:	f002 fac5 	bl	8015584 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012ffe:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013002:	2b00      	cmp	r3, #0
 8013004:	d01f      	beq.n	8013046 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013006:	68b9      	ldr	r1, [r7, #8]
 8013008:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801300a:	f000 fabe 	bl	801358a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801300e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013010:	1e5a      	subs	r2, r3, #1
 8013012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013014:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013018:	691b      	ldr	r3, [r3, #16]
 801301a:	2b00      	cmp	r3, #0
 801301c:	d00f      	beq.n	801303e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801301e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013020:	3310      	adds	r3, #16
 8013022:	4618      	mov	r0, r3
 8013024:	f001 f852 	bl	80140cc <xTaskRemoveFromEventList>
 8013028:	4603      	mov	r3, r0
 801302a:	2b00      	cmp	r3, #0
 801302c:	d007      	beq.n	801303e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801302e:	4b3d      	ldr	r3, [pc, #244]	; (8013124 <xQueueReceive+0x1bc>)
 8013030:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013034:	601a      	str	r2, [r3, #0]
 8013036:	f3bf 8f4f 	dsb	sy
 801303a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801303e:	f002 fad1 	bl	80155e4 <vPortExitCritical>
				return pdPASS;
 8013042:	2301      	movs	r3, #1
 8013044:	e069      	b.n	801311a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	2b00      	cmp	r3, #0
 801304a:	d103      	bne.n	8013054 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801304c:	f002 faca 	bl	80155e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013050:	2300      	movs	r3, #0
 8013052:	e062      	b.n	801311a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013056:	2b00      	cmp	r3, #0
 8013058:	d106      	bne.n	8013068 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801305a:	f107 0310 	add.w	r3, r7, #16
 801305e:	4618      	mov	r0, r3
 8013060:	f001 f898 	bl	8014194 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013064:	2301      	movs	r3, #1
 8013066:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013068:	f002 fabc 	bl	80155e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801306c:	f000 fdf8 	bl	8013c60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013070:	f002 fa88 	bl	8015584 <vPortEnterCritical>
 8013074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013076:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801307a:	b25b      	sxtb	r3, r3
 801307c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013080:	d103      	bne.n	801308a <xQueueReceive+0x122>
 8013082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013084:	2200      	movs	r2, #0
 8013086:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801308a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801308c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013090:	b25b      	sxtb	r3, r3
 8013092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013096:	d103      	bne.n	80130a0 <xQueueReceive+0x138>
 8013098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801309a:	2200      	movs	r2, #0
 801309c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80130a0:	f002 faa0 	bl	80155e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80130a4:	1d3a      	adds	r2, r7, #4
 80130a6:	f107 0310 	add.w	r3, r7, #16
 80130aa:	4611      	mov	r1, r2
 80130ac:	4618      	mov	r0, r3
 80130ae:	f001 f887 	bl	80141c0 <xTaskCheckForTimeOut>
 80130b2:	4603      	mov	r3, r0
 80130b4:	2b00      	cmp	r3, #0
 80130b6:	d123      	bne.n	8013100 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80130b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80130ba:	f000 fade 	bl	801367a <prvIsQueueEmpty>
 80130be:	4603      	mov	r3, r0
 80130c0:	2b00      	cmp	r3, #0
 80130c2:	d017      	beq.n	80130f4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80130c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130c6:	3324      	adds	r3, #36	; 0x24
 80130c8:	687a      	ldr	r2, [r7, #4]
 80130ca:	4611      	mov	r1, r2
 80130cc:	4618      	mov	r0, r3
 80130ce:	f000 ffad 	bl	801402c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80130d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80130d4:	f000 fa7f 	bl	80135d6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80130d8:	f000 fdd0 	bl	8013c7c <xTaskResumeAll>
 80130dc:	4603      	mov	r3, r0
 80130de:	2b00      	cmp	r3, #0
 80130e0:	d189      	bne.n	8012ff6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80130e2:	4b10      	ldr	r3, [pc, #64]	; (8013124 <xQueueReceive+0x1bc>)
 80130e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80130e8:	601a      	str	r2, [r3, #0]
 80130ea:	f3bf 8f4f 	dsb	sy
 80130ee:	f3bf 8f6f 	isb	sy
 80130f2:	e780      	b.n	8012ff6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80130f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80130f6:	f000 fa6e 	bl	80135d6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80130fa:	f000 fdbf 	bl	8013c7c <xTaskResumeAll>
 80130fe:	e77a      	b.n	8012ff6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8013100:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013102:	f000 fa68 	bl	80135d6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013106:	f000 fdb9 	bl	8013c7c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801310a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801310c:	f000 fab5 	bl	801367a <prvIsQueueEmpty>
 8013110:	4603      	mov	r3, r0
 8013112:	2b00      	cmp	r3, #0
 8013114:	f43f af6f 	beq.w	8012ff6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013118:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801311a:	4618      	mov	r0, r3
 801311c:	3730      	adds	r7, #48	; 0x30
 801311e:	46bd      	mov	sp, r7
 8013120:	bd80      	pop	{r7, pc}
 8013122:	bf00      	nop
 8013124:	e000ed04 	.word	0xe000ed04

08013128 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8013128:	b580      	push	{r7, lr}
 801312a:	b08e      	sub	sp, #56	; 0x38
 801312c:	af00      	add	r7, sp, #0
 801312e:	6078      	str	r0, [r7, #4]
 8013130:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8013132:	2300      	movs	r3, #0
 8013134:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013136:	687b      	ldr	r3, [r7, #4]
 8013138:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 801313a:	2300      	movs	r3, #0
 801313c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801313e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013140:	2b00      	cmp	r3, #0
 8013142:	d10a      	bne.n	801315a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8013144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013148:	f383 8811 	msr	BASEPRI, r3
 801314c:	f3bf 8f6f 	isb	sy
 8013150:	f3bf 8f4f 	dsb	sy
 8013154:	623b      	str	r3, [r7, #32]
}
 8013156:	bf00      	nop
 8013158:	e7fe      	b.n	8013158 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801315a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801315c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801315e:	2b00      	cmp	r3, #0
 8013160:	d00a      	beq.n	8013178 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8013162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013166:	f383 8811 	msr	BASEPRI, r3
 801316a:	f3bf 8f6f 	isb	sy
 801316e:	f3bf 8f4f 	dsb	sy
 8013172:	61fb      	str	r3, [r7, #28]
}
 8013174:	bf00      	nop
 8013176:	e7fe      	b.n	8013176 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013178:	f001 f976 	bl	8014468 <xTaskGetSchedulerState>
 801317c:	4603      	mov	r3, r0
 801317e:	2b00      	cmp	r3, #0
 8013180:	d102      	bne.n	8013188 <xQueueSemaphoreTake+0x60>
 8013182:	683b      	ldr	r3, [r7, #0]
 8013184:	2b00      	cmp	r3, #0
 8013186:	d101      	bne.n	801318c <xQueueSemaphoreTake+0x64>
 8013188:	2301      	movs	r3, #1
 801318a:	e000      	b.n	801318e <xQueueSemaphoreTake+0x66>
 801318c:	2300      	movs	r3, #0
 801318e:	2b00      	cmp	r3, #0
 8013190:	d10a      	bne.n	80131a8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8013192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013196:	f383 8811 	msr	BASEPRI, r3
 801319a:	f3bf 8f6f 	isb	sy
 801319e:	f3bf 8f4f 	dsb	sy
 80131a2:	61bb      	str	r3, [r7, #24]
}
 80131a4:	bf00      	nop
 80131a6:	e7fe      	b.n	80131a6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80131a8:	f002 f9ec 	bl	8015584 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80131ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80131b0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80131b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	d024      	beq.n	8013202 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80131b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131ba:	1e5a      	subs	r2, r3, #1
 80131bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131be:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80131c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131c2:	681b      	ldr	r3, [r3, #0]
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	d104      	bne.n	80131d2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80131c8:	f001 fac4 	bl	8014754 <pvTaskIncrementMutexHeldCount>
 80131cc:	4602      	mov	r2, r0
 80131ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131d0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80131d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131d4:	691b      	ldr	r3, [r3, #16]
 80131d6:	2b00      	cmp	r3, #0
 80131d8:	d00f      	beq.n	80131fa <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80131da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131dc:	3310      	adds	r3, #16
 80131de:	4618      	mov	r0, r3
 80131e0:	f000 ff74 	bl	80140cc <xTaskRemoveFromEventList>
 80131e4:	4603      	mov	r3, r0
 80131e6:	2b00      	cmp	r3, #0
 80131e8:	d007      	beq.n	80131fa <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80131ea:	4b54      	ldr	r3, [pc, #336]	; (801333c <xQueueSemaphoreTake+0x214>)
 80131ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80131f0:	601a      	str	r2, [r3, #0]
 80131f2:	f3bf 8f4f 	dsb	sy
 80131f6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80131fa:	f002 f9f3 	bl	80155e4 <vPortExitCritical>
				return pdPASS;
 80131fe:	2301      	movs	r3, #1
 8013200:	e097      	b.n	8013332 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013202:	683b      	ldr	r3, [r7, #0]
 8013204:	2b00      	cmp	r3, #0
 8013206:	d111      	bne.n	801322c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8013208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801320a:	2b00      	cmp	r3, #0
 801320c:	d00a      	beq.n	8013224 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 801320e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013212:	f383 8811 	msr	BASEPRI, r3
 8013216:	f3bf 8f6f 	isb	sy
 801321a:	f3bf 8f4f 	dsb	sy
 801321e:	617b      	str	r3, [r7, #20]
}
 8013220:	bf00      	nop
 8013222:	e7fe      	b.n	8013222 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8013224:	f002 f9de 	bl	80155e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013228:	2300      	movs	r3, #0
 801322a:	e082      	b.n	8013332 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 801322c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801322e:	2b00      	cmp	r3, #0
 8013230:	d106      	bne.n	8013240 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013232:	f107 030c 	add.w	r3, r7, #12
 8013236:	4618      	mov	r0, r3
 8013238:	f000 ffac 	bl	8014194 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801323c:	2301      	movs	r3, #1
 801323e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013240:	f002 f9d0 	bl	80155e4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013244:	f000 fd0c 	bl	8013c60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013248:	f002 f99c 	bl	8015584 <vPortEnterCritical>
 801324c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801324e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013252:	b25b      	sxtb	r3, r3
 8013254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013258:	d103      	bne.n	8013262 <xQueueSemaphoreTake+0x13a>
 801325a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801325c:	2200      	movs	r2, #0
 801325e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013264:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013268:	b25b      	sxtb	r3, r3
 801326a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801326e:	d103      	bne.n	8013278 <xQueueSemaphoreTake+0x150>
 8013270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013272:	2200      	movs	r2, #0
 8013274:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013278:	f002 f9b4 	bl	80155e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801327c:	463a      	mov	r2, r7
 801327e:	f107 030c 	add.w	r3, r7, #12
 8013282:	4611      	mov	r1, r2
 8013284:	4618      	mov	r0, r3
 8013286:	f000 ff9b 	bl	80141c0 <xTaskCheckForTimeOut>
 801328a:	4603      	mov	r3, r0
 801328c:	2b00      	cmp	r3, #0
 801328e:	d132      	bne.n	80132f6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013290:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013292:	f000 f9f2 	bl	801367a <prvIsQueueEmpty>
 8013296:	4603      	mov	r3, r0
 8013298:	2b00      	cmp	r3, #0
 801329a:	d026      	beq.n	80132ea <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801329c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801329e:	681b      	ldr	r3, [r3, #0]
 80132a0:	2b00      	cmp	r3, #0
 80132a2:	d109      	bne.n	80132b8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80132a4:	f002 f96e 	bl	8015584 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80132a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132aa:	689b      	ldr	r3, [r3, #8]
 80132ac:	4618      	mov	r0, r3
 80132ae:	f001 f8f9 	bl	80144a4 <xTaskPriorityInherit>
 80132b2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80132b4:	f002 f996 	bl	80155e4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80132b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132ba:	3324      	adds	r3, #36	; 0x24
 80132bc:	683a      	ldr	r2, [r7, #0]
 80132be:	4611      	mov	r1, r2
 80132c0:	4618      	mov	r0, r3
 80132c2:	f000 feb3 	bl	801402c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80132c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80132c8:	f000 f985 	bl	80135d6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80132cc:	f000 fcd6 	bl	8013c7c <xTaskResumeAll>
 80132d0:	4603      	mov	r3, r0
 80132d2:	2b00      	cmp	r3, #0
 80132d4:	f47f af68 	bne.w	80131a8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80132d8:	4b18      	ldr	r3, [pc, #96]	; (801333c <xQueueSemaphoreTake+0x214>)
 80132da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80132de:	601a      	str	r2, [r3, #0]
 80132e0:	f3bf 8f4f 	dsb	sy
 80132e4:	f3bf 8f6f 	isb	sy
 80132e8:	e75e      	b.n	80131a8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80132ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80132ec:	f000 f973 	bl	80135d6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80132f0:	f000 fcc4 	bl	8013c7c <xTaskResumeAll>
 80132f4:	e758      	b.n	80131a8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80132f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80132f8:	f000 f96d 	bl	80135d6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80132fc:	f000 fcbe 	bl	8013c7c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013300:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013302:	f000 f9ba 	bl	801367a <prvIsQueueEmpty>
 8013306:	4603      	mov	r3, r0
 8013308:	2b00      	cmp	r3, #0
 801330a:	f43f af4d 	beq.w	80131a8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801330e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013310:	2b00      	cmp	r3, #0
 8013312:	d00d      	beq.n	8013330 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8013314:	f002 f936 	bl	8015584 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8013318:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801331a:	f000 f8b4 	bl	8013486 <prvGetDisinheritPriorityAfterTimeout>
 801331e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8013320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013322:	689b      	ldr	r3, [r3, #8]
 8013324:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013326:	4618      	mov	r0, r3
 8013328:	f001 f992 	bl	8014650 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 801332c:	f002 f95a 	bl	80155e4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013330:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8013332:	4618      	mov	r0, r3
 8013334:	3738      	adds	r7, #56	; 0x38
 8013336:	46bd      	mov	sp, r7
 8013338:	bd80      	pop	{r7, pc}
 801333a:	bf00      	nop
 801333c:	e000ed04 	.word	0xe000ed04

08013340 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8013340:	b580      	push	{r7, lr}
 8013342:	b08e      	sub	sp, #56	; 0x38
 8013344:	af00      	add	r7, sp, #0
 8013346:	60f8      	str	r0, [r7, #12]
 8013348:	60b9      	str	r1, [r7, #8]
 801334a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801334c:	68fb      	ldr	r3, [r7, #12]
 801334e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8013350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013352:	2b00      	cmp	r3, #0
 8013354:	d10a      	bne.n	801336c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8013356:	f04f 0350 	mov.w	r3, #80	; 0x50
 801335a:	f383 8811 	msr	BASEPRI, r3
 801335e:	f3bf 8f6f 	isb	sy
 8013362:	f3bf 8f4f 	dsb	sy
 8013366:	623b      	str	r3, [r7, #32]
}
 8013368:	bf00      	nop
 801336a:	e7fe      	b.n	801336a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801336c:	68bb      	ldr	r3, [r7, #8]
 801336e:	2b00      	cmp	r3, #0
 8013370:	d103      	bne.n	801337a <xQueueReceiveFromISR+0x3a>
 8013372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013376:	2b00      	cmp	r3, #0
 8013378:	d101      	bne.n	801337e <xQueueReceiveFromISR+0x3e>
 801337a:	2301      	movs	r3, #1
 801337c:	e000      	b.n	8013380 <xQueueReceiveFromISR+0x40>
 801337e:	2300      	movs	r3, #0
 8013380:	2b00      	cmp	r3, #0
 8013382:	d10a      	bne.n	801339a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8013384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013388:	f383 8811 	msr	BASEPRI, r3
 801338c:	f3bf 8f6f 	isb	sy
 8013390:	f3bf 8f4f 	dsb	sy
 8013394:	61fb      	str	r3, [r7, #28]
}
 8013396:	bf00      	nop
 8013398:	e7fe      	b.n	8013398 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801339a:	f002 f9d5 	bl	8015748 <vPortValidateInterruptPriority>
	__asm volatile
 801339e:	f3ef 8211 	mrs	r2, BASEPRI
 80133a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133a6:	f383 8811 	msr	BASEPRI, r3
 80133aa:	f3bf 8f6f 	isb	sy
 80133ae:	f3bf 8f4f 	dsb	sy
 80133b2:	61ba      	str	r2, [r7, #24]
 80133b4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80133b6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80133b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80133ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80133be:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80133c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133c2:	2b00      	cmp	r3, #0
 80133c4:	d02f      	beq.n	8013426 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80133c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80133cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80133d0:	68b9      	ldr	r1, [r7, #8]
 80133d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80133d4:	f000 f8d9 	bl	801358a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80133d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133da:	1e5a      	subs	r2, r3, #1
 80133dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133de:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80133e0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80133e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80133e8:	d112      	bne.n	8013410 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80133ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133ec:	691b      	ldr	r3, [r3, #16]
 80133ee:	2b00      	cmp	r3, #0
 80133f0:	d016      	beq.n	8013420 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80133f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133f4:	3310      	adds	r3, #16
 80133f6:	4618      	mov	r0, r3
 80133f8:	f000 fe68 	bl	80140cc <xTaskRemoveFromEventList>
 80133fc:	4603      	mov	r3, r0
 80133fe:	2b00      	cmp	r3, #0
 8013400:	d00e      	beq.n	8013420 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	2b00      	cmp	r3, #0
 8013406:	d00b      	beq.n	8013420 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	2201      	movs	r2, #1
 801340c:	601a      	str	r2, [r3, #0]
 801340e:	e007      	b.n	8013420 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8013410:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013414:	3301      	adds	r3, #1
 8013416:	b2db      	uxtb	r3, r3
 8013418:	b25a      	sxtb	r2, r3
 801341a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801341c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8013420:	2301      	movs	r3, #1
 8013422:	637b      	str	r3, [r7, #52]	; 0x34
 8013424:	e001      	b.n	801342a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8013426:	2300      	movs	r3, #0
 8013428:	637b      	str	r3, [r7, #52]	; 0x34
 801342a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801342c:	613b      	str	r3, [r7, #16]
	__asm volatile
 801342e:	693b      	ldr	r3, [r7, #16]
 8013430:	f383 8811 	msr	BASEPRI, r3
}
 8013434:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8013438:	4618      	mov	r0, r3
 801343a:	3738      	adds	r7, #56	; 0x38
 801343c:	46bd      	mov	sp, r7
 801343e:	bd80      	pop	{r7, pc}

08013440 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8013440:	b580      	push	{r7, lr}
 8013442:	b084      	sub	sp, #16
 8013444:	af00      	add	r7, sp, #0
 8013446:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801344c:	68fb      	ldr	r3, [r7, #12]
 801344e:	2b00      	cmp	r3, #0
 8013450:	d10a      	bne.n	8013468 <vQueueDelete+0x28>
	__asm volatile
 8013452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013456:	f383 8811 	msr	BASEPRI, r3
 801345a:	f3bf 8f6f 	isb	sy
 801345e:	f3bf 8f4f 	dsb	sy
 8013462:	60bb      	str	r3, [r7, #8]
}
 8013464:	bf00      	nop
 8013466:	e7fe      	b.n	8013466 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8013468:	68f8      	ldr	r0, [r7, #12]
 801346a:	f000 f95f 	bl	801372c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 801346e:	68fb      	ldr	r3, [r7, #12]
 8013470:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8013474:	2b00      	cmp	r3, #0
 8013476:	d102      	bne.n	801347e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8013478:	68f8      	ldr	r0, [r7, #12]
 801347a:	f002 fa71 	bl	8015960 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 801347e:	bf00      	nop
 8013480:	3710      	adds	r7, #16
 8013482:	46bd      	mov	sp, r7
 8013484:	bd80      	pop	{r7, pc}

08013486 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8013486:	b480      	push	{r7}
 8013488:	b085      	sub	sp, #20
 801348a:	af00      	add	r7, sp, #0
 801348c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013492:	2b00      	cmp	r3, #0
 8013494:	d006      	beq.n	80134a4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801349a:	681b      	ldr	r3, [r3, #0]
 801349c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80134a0:	60fb      	str	r3, [r7, #12]
 80134a2:	e001      	b.n	80134a8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80134a4:	2300      	movs	r3, #0
 80134a6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80134a8:	68fb      	ldr	r3, [r7, #12]
	}
 80134aa:	4618      	mov	r0, r3
 80134ac:	3714      	adds	r7, #20
 80134ae:	46bd      	mov	sp, r7
 80134b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134b4:	4770      	bx	lr

080134b6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80134b6:	b580      	push	{r7, lr}
 80134b8:	b086      	sub	sp, #24
 80134ba:	af00      	add	r7, sp, #0
 80134bc:	60f8      	str	r0, [r7, #12]
 80134be:	60b9      	str	r1, [r7, #8]
 80134c0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80134c2:	2300      	movs	r3, #0
 80134c4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80134c6:	68fb      	ldr	r3, [r7, #12]
 80134c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80134ca:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80134cc:	68fb      	ldr	r3, [r7, #12]
 80134ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80134d0:	2b00      	cmp	r3, #0
 80134d2:	d10d      	bne.n	80134f0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80134d4:	68fb      	ldr	r3, [r7, #12]
 80134d6:	681b      	ldr	r3, [r3, #0]
 80134d8:	2b00      	cmp	r3, #0
 80134da:	d14d      	bne.n	8013578 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80134dc:	68fb      	ldr	r3, [r7, #12]
 80134de:	689b      	ldr	r3, [r3, #8]
 80134e0:	4618      	mov	r0, r3
 80134e2:	f001 f847 	bl	8014574 <xTaskPriorityDisinherit>
 80134e6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80134e8:	68fb      	ldr	r3, [r7, #12]
 80134ea:	2200      	movs	r2, #0
 80134ec:	609a      	str	r2, [r3, #8]
 80134ee:	e043      	b.n	8013578 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	2b00      	cmp	r3, #0
 80134f4:	d119      	bne.n	801352a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80134f6:	68fb      	ldr	r3, [r7, #12]
 80134f8:	6858      	ldr	r0, [r3, #4]
 80134fa:	68fb      	ldr	r3, [r7, #12]
 80134fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80134fe:	461a      	mov	r2, r3
 8013500:	68b9      	ldr	r1, [r7, #8]
 8013502:	f012 fb0f 	bl	8025b24 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013506:	68fb      	ldr	r3, [r7, #12]
 8013508:	685a      	ldr	r2, [r3, #4]
 801350a:	68fb      	ldr	r3, [r7, #12]
 801350c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801350e:	441a      	add	r2, r3
 8013510:	68fb      	ldr	r3, [r7, #12]
 8013512:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013514:	68fb      	ldr	r3, [r7, #12]
 8013516:	685a      	ldr	r2, [r3, #4]
 8013518:	68fb      	ldr	r3, [r7, #12]
 801351a:	689b      	ldr	r3, [r3, #8]
 801351c:	429a      	cmp	r2, r3
 801351e:	d32b      	bcc.n	8013578 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8013520:	68fb      	ldr	r3, [r7, #12]
 8013522:	681a      	ldr	r2, [r3, #0]
 8013524:	68fb      	ldr	r3, [r7, #12]
 8013526:	605a      	str	r2, [r3, #4]
 8013528:	e026      	b.n	8013578 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801352a:	68fb      	ldr	r3, [r7, #12]
 801352c:	68d8      	ldr	r0, [r3, #12]
 801352e:	68fb      	ldr	r3, [r7, #12]
 8013530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013532:	461a      	mov	r2, r3
 8013534:	68b9      	ldr	r1, [r7, #8]
 8013536:	f012 faf5 	bl	8025b24 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801353a:	68fb      	ldr	r3, [r7, #12]
 801353c:	68da      	ldr	r2, [r3, #12]
 801353e:	68fb      	ldr	r3, [r7, #12]
 8013540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013542:	425b      	negs	r3, r3
 8013544:	441a      	add	r2, r3
 8013546:	68fb      	ldr	r3, [r7, #12]
 8013548:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801354a:	68fb      	ldr	r3, [r7, #12]
 801354c:	68da      	ldr	r2, [r3, #12]
 801354e:	68fb      	ldr	r3, [r7, #12]
 8013550:	681b      	ldr	r3, [r3, #0]
 8013552:	429a      	cmp	r2, r3
 8013554:	d207      	bcs.n	8013566 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8013556:	68fb      	ldr	r3, [r7, #12]
 8013558:	689a      	ldr	r2, [r3, #8]
 801355a:	68fb      	ldr	r3, [r7, #12]
 801355c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801355e:	425b      	negs	r3, r3
 8013560:	441a      	add	r2, r3
 8013562:	68fb      	ldr	r3, [r7, #12]
 8013564:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	2b02      	cmp	r3, #2
 801356a:	d105      	bne.n	8013578 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801356c:	693b      	ldr	r3, [r7, #16]
 801356e:	2b00      	cmp	r3, #0
 8013570:	d002      	beq.n	8013578 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8013572:	693b      	ldr	r3, [r7, #16]
 8013574:	3b01      	subs	r3, #1
 8013576:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013578:	693b      	ldr	r3, [r7, #16]
 801357a:	1c5a      	adds	r2, r3, #1
 801357c:	68fb      	ldr	r3, [r7, #12]
 801357e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8013580:	697b      	ldr	r3, [r7, #20]
}
 8013582:	4618      	mov	r0, r3
 8013584:	3718      	adds	r7, #24
 8013586:	46bd      	mov	sp, r7
 8013588:	bd80      	pop	{r7, pc}

0801358a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801358a:	b580      	push	{r7, lr}
 801358c:	b082      	sub	sp, #8
 801358e:	af00      	add	r7, sp, #0
 8013590:	6078      	str	r0, [r7, #4]
 8013592:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013598:	2b00      	cmp	r3, #0
 801359a:	d018      	beq.n	80135ce <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	68da      	ldr	r2, [r3, #12]
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80135a4:	441a      	add	r2, r3
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	68da      	ldr	r2, [r3, #12]
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	689b      	ldr	r3, [r3, #8]
 80135b2:	429a      	cmp	r2, r3
 80135b4:	d303      	bcc.n	80135be <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	681a      	ldr	r2, [r3, #0]
 80135ba:	687b      	ldr	r3, [r7, #4]
 80135bc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	68d9      	ldr	r1, [r3, #12]
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80135c6:	461a      	mov	r2, r3
 80135c8:	6838      	ldr	r0, [r7, #0]
 80135ca:	f012 faab 	bl	8025b24 <memcpy>
	}
}
 80135ce:	bf00      	nop
 80135d0:	3708      	adds	r7, #8
 80135d2:	46bd      	mov	sp, r7
 80135d4:	bd80      	pop	{r7, pc}

080135d6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80135d6:	b580      	push	{r7, lr}
 80135d8:	b084      	sub	sp, #16
 80135da:	af00      	add	r7, sp, #0
 80135dc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80135de:	f001 ffd1 	bl	8015584 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80135e8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80135ea:	e011      	b.n	8013610 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80135ec:	687b      	ldr	r3, [r7, #4]
 80135ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80135f0:	2b00      	cmp	r3, #0
 80135f2:	d012      	beq.n	801361a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	3324      	adds	r3, #36	; 0x24
 80135f8:	4618      	mov	r0, r3
 80135fa:	f000 fd67 	bl	80140cc <xTaskRemoveFromEventList>
 80135fe:	4603      	mov	r3, r0
 8013600:	2b00      	cmp	r3, #0
 8013602:	d001      	beq.n	8013608 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8013604:	f000 fe3e 	bl	8014284 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8013608:	7bfb      	ldrb	r3, [r7, #15]
 801360a:	3b01      	subs	r3, #1
 801360c:	b2db      	uxtb	r3, r3
 801360e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013610:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013614:	2b00      	cmp	r3, #0
 8013616:	dce9      	bgt.n	80135ec <prvUnlockQueue+0x16>
 8013618:	e000      	b.n	801361c <prvUnlockQueue+0x46>
					break;
 801361a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801361c:	687b      	ldr	r3, [r7, #4]
 801361e:	22ff      	movs	r2, #255	; 0xff
 8013620:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8013624:	f001 ffde 	bl	80155e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8013628:	f001 ffac 	bl	8015584 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013632:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013634:	e011      	b.n	801365a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013636:	687b      	ldr	r3, [r7, #4]
 8013638:	691b      	ldr	r3, [r3, #16]
 801363a:	2b00      	cmp	r3, #0
 801363c:	d012      	beq.n	8013664 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	3310      	adds	r3, #16
 8013642:	4618      	mov	r0, r3
 8013644:	f000 fd42 	bl	80140cc <xTaskRemoveFromEventList>
 8013648:	4603      	mov	r3, r0
 801364a:	2b00      	cmp	r3, #0
 801364c:	d001      	beq.n	8013652 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801364e:	f000 fe19 	bl	8014284 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8013652:	7bbb      	ldrb	r3, [r7, #14]
 8013654:	3b01      	subs	r3, #1
 8013656:	b2db      	uxtb	r3, r3
 8013658:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801365a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801365e:	2b00      	cmp	r3, #0
 8013660:	dce9      	bgt.n	8013636 <prvUnlockQueue+0x60>
 8013662:	e000      	b.n	8013666 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8013664:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8013666:	687b      	ldr	r3, [r7, #4]
 8013668:	22ff      	movs	r2, #255	; 0xff
 801366a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801366e:	f001 ffb9 	bl	80155e4 <vPortExitCritical>
}
 8013672:	bf00      	nop
 8013674:	3710      	adds	r7, #16
 8013676:	46bd      	mov	sp, r7
 8013678:	bd80      	pop	{r7, pc}

0801367a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801367a:	b580      	push	{r7, lr}
 801367c:	b084      	sub	sp, #16
 801367e:	af00      	add	r7, sp, #0
 8013680:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013682:	f001 ff7f 	bl	8015584 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8013686:	687b      	ldr	r3, [r7, #4]
 8013688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801368a:	2b00      	cmp	r3, #0
 801368c:	d102      	bne.n	8013694 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801368e:	2301      	movs	r3, #1
 8013690:	60fb      	str	r3, [r7, #12]
 8013692:	e001      	b.n	8013698 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8013694:	2300      	movs	r3, #0
 8013696:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013698:	f001 ffa4 	bl	80155e4 <vPortExitCritical>

	return xReturn;
 801369c:	68fb      	ldr	r3, [r7, #12]
}
 801369e:	4618      	mov	r0, r3
 80136a0:	3710      	adds	r7, #16
 80136a2:	46bd      	mov	sp, r7
 80136a4:	bd80      	pop	{r7, pc}

080136a6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80136a6:	b580      	push	{r7, lr}
 80136a8:	b084      	sub	sp, #16
 80136aa:	af00      	add	r7, sp, #0
 80136ac:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80136ae:	f001 ff69 	bl	8015584 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80136ba:	429a      	cmp	r2, r3
 80136bc:	d102      	bne.n	80136c4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80136be:	2301      	movs	r3, #1
 80136c0:	60fb      	str	r3, [r7, #12]
 80136c2:	e001      	b.n	80136c8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80136c4:	2300      	movs	r3, #0
 80136c6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80136c8:	f001 ff8c 	bl	80155e4 <vPortExitCritical>

	return xReturn;
 80136cc:	68fb      	ldr	r3, [r7, #12]
}
 80136ce:	4618      	mov	r0, r3
 80136d0:	3710      	adds	r7, #16
 80136d2:	46bd      	mov	sp, r7
 80136d4:	bd80      	pop	{r7, pc}
	...

080136d8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80136d8:	b480      	push	{r7}
 80136da:	b085      	sub	sp, #20
 80136dc:	af00      	add	r7, sp, #0
 80136de:	6078      	str	r0, [r7, #4]
 80136e0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80136e2:	2300      	movs	r3, #0
 80136e4:	60fb      	str	r3, [r7, #12]
 80136e6:	e014      	b.n	8013712 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80136e8:	4a0f      	ldr	r2, [pc, #60]	; (8013728 <vQueueAddToRegistry+0x50>)
 80136ea:	68fb      	ldr	r3, [r7, #12]
 80136ec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80136f0:	2b00      	cmp	r3, #0
 80136f2:	d10b      	bne.n	801370c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80136f4:	490c      	ldr	r1, [pc, #48]	; (8013728 <vQueueAddToRegistry+0x50>)
 80136f6:	68fb      	ldr	r3, [r7, #12]
 80136f8:	683a      	ldr	r2, [r7, #0]
 80136fa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80136fe:	4a0a      	ldr	r2, [pc, #40]	; (8013728 <vQueueAddToRegistry+0x50>)
 8013700:	68fb      	ldr	r3, [r7, #12]
 8013702:	00db      	lsls	r3, r3, #3
 8013704:	4413      	add	r3, r2
 8013706:	687a      	ldr	r2, [r7, #4]
 8013708:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801370a:	e006      	b.n	801371a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801370c:	68fb      	ldr	r3, [r7, #12]
 801370e:	3301      	adds	r3, #1
 8013710:	60fb      	str	r3, [r7, #12]
 8013712:	68fb      	ldr	r3, [r7, #12]
 8013714:	2b07      	cmp	r3, #7
 8013716:	d9e7      	bls.n	80136e8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8013718:	bf00      	nop
 801371a:	bf00      	nop
 801371c:	3714      	adds	r7, #20
 801371e:	46bd      	mov	sp, r7
 8013720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013724:	4770      	bx	lr
 8013726:	bf00      	nop
 8013728:	20017b24 	.word	0x20017b24

0801372c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 801372c:	b480      	push	{r7}
 801372e:	b085      	sub	sp, #20
 8013730:	af00      	add	r7, sp, #0
 8013732:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013734:	2300      	movs	r3, #0
 8013736:	60fb      	str	r3, [r7, #12]
 8013738:	e016      	b.n	8013768 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 801373a:	4a10      	ldr	r2, [pc, #64]	; (801377c <vQueueUnregisterQueue+0x50>)
 801373c:	68fb      	ldr	r3, [r7, #12]
 801373e:	00db      	lsls	r3, r3, #3
 8013740:	4413      	add	r3, r2
 8013742:	685b      	ldr	r3, [r3, #4]
 8013744:	687a      	ldr	r2, [r7, #4]
 8013746:	429a      	cmp	r2, r3
 8013748:	d10b      	bne.n	8013762 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 801374a:	4a0c      	ldr	r2, [pc, #48]	; (801377c <vQueueUnregisterQueue+0x50>)
 801374c:	68fb      	ldr	r3, [r7, #12]
 801374e:	2100      	movs	r1, #0
 8013750:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8013754:	4a09      	ldr	r2, [pc, #36]	; (801377c <vQueueUnregisterQueue+0x50>)
 8013756:	68fb      	ldr	r3, [r7, #12]
 8013758:	00db      	lsls	r3, r3, #3
 801375a:	4413      	add	r3, r2
 801375c:	2200      	movs	r2, #0
 801375e:	605a      	str	r2, [r3, #4]
				break;
 8013760:	e006      	b.n	8013770 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013762:	68fb      	ldr	r3, [r7, #12]
 8013764:	3301      	adds	r3, #1
 8013766:	60fb      	str	r3, [r7, #12]
 8013768:	68fb      	ldr	r3, [r7, #12]
 801376a:	2b07      	cmp	r3, #7
 801376c:	d9e5      	bls.n	801373a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 801376e:	bf00      	nop
 8013770:	bf00      	nop
 8013772:	3714      	adds	r7, #20
 8013774:	46bd      	mov	sp, r7
 8013776:	f85d 7b04 	ldr.w	r7, [sp], #4
 801377a:	4770      	bx	lr
 801377c:	20017b24 	.word	0x20017b24

08013780 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8013780:	b580      	push	{r7, lr}
 8013782:	b086      	sub	sp, #24
 8013784:	af00      	add	r7, sp, #0
 8013786:	60f8      	str	r0, [r7, #12]
 8013788:	60b9      	str	r1, [r7, #8]
 801378a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 801378c:	68fb      	ldr	r3, [r7, #12]
 801378e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8013790:	f001 fef8 	bl	8015584 <vPortEnterCritical>
 8013794:	697b      	ldr	r3, [r7, #20]
 8013796:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801379a:	b25b      	sxtb	r3, r3
 801379c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80137a0:	d103      	bne.n	80137aa <vQueueWaitForMessageRestricted+0x2a>
 80137a2:	697b      	ldr	r3, [r7, #20]
 80137a4:	2200      	movs	r2, #0
 80137a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80137aa:	697b      	ldr	r3, [r7, #20]
 80137ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80137b0:	b25b      	sxtb	r3, r3
 80137b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80137b6:	d103      	bne.n	80137c0 <vQueueWaitForMessageRestricted+0x40>
 80137b8:	697b      	ldr	r3, [r7, #20]
 80137ba:	2200      	movs	r2, #0
 80137bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80137c0:	f001 ff10 	bl	80155e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80137c4:	697b      	ldr	r3, [r7, #20]
 80137c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	d106      	bne.n	80137da <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80137cc:	697b      	ldr	r3, [r7, #20]
 80137ce:	3324      	adds	r3, #36	; 0x24
 80137d0:	687a      	ldr	r2, [r7, #4]
 80137d2:	68b9      	ldr	r1, [r7, #8]
 80137d4:	4618      	mov	r0, r3
 80137d6:	f000 fc4d 	bl	8014074 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80137da:	6978      	ldr	r0, [r7, #20]
 80137dc:	f7ff fefb 	bl	80135d6 <prvUnlockQueue>
	}
 80137e0:	bf00      	nop
 80137e2:	3718      	adds	r7, #24
 80137e4:	46bd      	mov	sp, r7
 80137e6:	bd80      	pop	{r7, pc}

080137e8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80137e8:	b580      	push	{r7, lr}
 80137ea:	b08e      	sub	sp, #56	; 0x38
 80137ec:	af04      	add	r7, sp, #16
 80137ee:	60f8      	str	r0, [r7, #12]
 80137f0:	60b9      	str	r1, [r7, #8]
 80137f2:	607a      	str	r2, [r7, #4]
 80137f4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80137f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	d10a      	bne.n	8013812 <xTaskCreateStatic+0x2a>
	__asm volatile
 80137fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013800:	f383 8811 	msr	BASEPRI, r3
 8013804:	f3bf 8f6f 	isb	sy
 8013808:	f3bf 8f4f 	dsb	sy
 801380c:	623b      	str	r3, [r7, #32]
}
 801380e:	bf00      	nop
 8013810:	e7fe      	b.n	8013810 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8013812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013814:	2b00      	cmp	r3, #0
 8013816:	d10a      	bne.n	801382e <xTaskCreateStatic+0x46>
	__asm volatile
 8013818:	f04f 0350 	mov.w	r3, #80	; 0x50
 801381c:	f383 8811 	msr	BASEPRI, r3
 8013820:	f3bf 8f6f 	isb	sy
 8013824:	f3bf 8f4f 	dsb	sy
 8013828:	61fb      	str	r3, [r7, #28]
}
 801382a:	bf00      	nop
 801382c:	e7fe      	b.n	801382c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801382e:	235c      	movs	r3, #92	; 0x5c
 8013830:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8013832:	693b      	ldr	r3, [r7, #16]
 8013834:	2b5c      	cmp	r3, #92	; 0x5c
 8013836:	d00a      	beq.n	801384e <xTaskCreateStatic+0x66>
	__asm volatile
 8013838:	f04f 0350 	mov.w	r3, #80	; 0x50
 801383c:	f383 8811 	msr	BASEPRI, r3
 8013840:	f3bf 8f6f 	isb	sy
 8013844:	f3bf 8f4f 	dsb	sy
 8013848:	61bb      	str	r3, [r7, #24]
}
 801384a:	bf00      	nop
 801384c:	e7fe      	b.n	801384c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801384e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8013850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013852:	2b00      	cmp	r3, #0
 8013854:	d01e      	beq.n	8013894 <xTaskCreateStatic+0xac>
 8013856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013858:	2b00      	cmp	r3, #0
 801385a:	d01b      	beq.n	8013894 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801385c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801385e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8013860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013862:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013864:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8013866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013868:	2202      	movs	r2, #2
 801386a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801386e:	2300      	movs	r3, #0
 8013870:	9303      	str	r3, [sp, #12]
 8013872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013874:	9302      	str	r3, [sp, #8]
 8013876:	f107 0314 	add.w	r3, r7, #20
 801387a:	9301      	str	r3, [sp, #4]
 801387c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801387e:	9300      	str	r3, [sp, #0]
 8013880:	683b      	ldr	r3, [r7, #0]
 8013882:	687a      	ldr	r2, [r7, #4]
 8013884:	68b9      	ldr	r1, [r7, #8]
 8013886:	68f8      	ldr	r0, [r7, #12]
 8013888:	f000 f850 	bl	801392c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801388c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801388e:	f000 f8dd 	bl	8013a4c <prvAddNewTaskToReadyList>
 8013892:	e001      	b.n	8013898 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8013894:	2300      	movs	r3, #0
 8013896:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8013898:	697b      	ldr	r3, [r7, #20]
	}
 801389a:	4618      	mov	r0, r3
 801389c:	3728      	adds	r7, #40	; 0x28
 801389e:	46bd      	mov	sp, r7
 80138a0:	bd80      	pop	{r7, pc}

080138a2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80138a2:	b580      	push	{r7, lr}
 80138a4:	b08c      	sub	sp, #48	; 0x30
 80138a6:	af04      	add	r7, sp, #16
 80138a8:	60f8      	str	r0, [r7, #12]
 80138aa:	60b9      	str	r1, [r7, #8]
 80138ac:	603b      	str	r3, [r7, #0]
 80138ae:	4613      	mov	r3, r2
 80138b0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80138b2:	88fb      	ldrh	r3, [r7, #6]
 80138b4:	009b      	lsls	r3, r3, #2
 80138b6:	4618      	mov	r0, r3
 80138b8:	f001 ff86 	bl	80157c8 <pvPortMalloc>
 80138bc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80138be:	697b      	ldr	r3, [r7, #20]
 80138c0:	2b00      	cmp	r3, #0
 80138c2:	d00e      	beq.n	80138e2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80138c4:	205c      	movs	r0, #92	; 0x5c
 80138c6:	f001 ff7f 	bl	80157c8 <pvPortMalloc>
 80138ca:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80138cc:	69fb      	ldr	r3, [r7, #28]
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	d003      	beq.n	80138da <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80138d2:	69fb      	ldr	r3, [r7, #28]
 80138d4:	697a      	ldr	r2, [r7, #20]
 80138d6:	631a      	str	r2, [r3, #48]	; 0x30
 80138d8:	e005      	b.n	80138e6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80138da:	6978      	ldr	r0, [r7, #20]
 80138dc:	f002 f840 	bl	8015960 <vPortFree>
 80138e0:	e001      	b.n	80138e6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80138e2:	2300      	movs	r3, #0
 80138e4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80138e6:	69fb      	ldr	r3, [r7, #28]
 80138e8:	2b00      	cmp	r3, #0
 80138ea:	d017      	beq.n	801391c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80138ec:	69fb      	ldr	r3, [r7, #28]
 80138ee:	2200      	movs	r2, #0
 80138f0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80138f4:	88fa      	ldrh	r2, [r7, #6]
 80138f6:	2300      	movs	r3, #0
 80138f8:	9303      	str	r3, [sp, #12]
 80138fa:	69fb      	ldr	r3, [r7, #28]
 80138fc:	9302      	str	r3, [sp, #8]
 80138fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013900:	9301      	str	r3, [sp, #4]
 8013902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013904:	9300      	str	r3, [sp, #0]
 8013906:	683b      	ldr	r3, [r7, #0]
 8013908:	68b9      	ldr	r1, [r7, #8]
 801390a:	68f8      	ldr	r0, [r7, #12]
 801390c:	f000 f80e 	bl	801392c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013910:	69f8      	ldr	r0, [r7, #28]
 8013912:	f000 f89b 	bl	8013a4c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8013916:	2301      	movs	r3, #1
 8013918:	61bb      	str	r3, [r7, #24]
 801391a:	e002      	b.n	8013922 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801391c:	f04f 33ff 	mov.w	r3, #4294967295
 8013920:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8013922:	69bb      	ldr	r3, [r7, #24]
	}
 8013924:	4618      	mov	r0, r3
 8013926:	3720      	adds	r7, #32
 8013928:	46bd      	mov	sp, r7
 801392a:	bd80      	pop	{r7, pc}

0801392c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801392c:	b580      	push	{r7, lr}
 801392e:	b088      	sub	sp, #32
 8013930:	af00      	add	r7, sp, #0
 8013932:	60f8      	str	r0, [r7, #12]
 8013934:	60b9      	str	r1, [r7, #8]
 8013936:	607a      	str	r2, [r7, #4]
 8013938:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801393a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801393c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	009b      	lsls	r3, r3, #2
 8013942:	461a      	mov	r2, r3
 8013944:	21a5      	movs	r1, #165	; 0xa5
 8013946:	f012 f915 	bl	8025b74 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801394a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801394c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8013954:	3b01      	subs	r3, #1
 8013956:	009b      	lsls	r3, r3, #2
 8013958:	4413      	add	r3, r2
 801395a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801395c:	69bb      	ldr	r3, [r7, #24]
 801395e:	f023 0307 	bic.w	r3, r3, #7
 8013962:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8013964:	69bb      	ldr	r3, [r7, #24]
 8013966:	f003 0307 	and.w	r3, r3, #7
 801396a:	2b00      	cmp	r3, #0
 801396c:	d00a      	beq.n	8013984 <prvInitialiseNewTask+0x58>
	__asm volatile
 801396e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013972:	f383 8811 	msr	BASEPRI, r3
 8013976:	f3bf 8f6f 	isb	sy
 801397a:	f3bf 8f4f 	dsb	sy
 801397e:	617b      	str	r3, [r7, #20]
}
 8013980:	bf00      	nop
 8013982:	e7fe      	b.n	8013982 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8013984:	68bb      	ldr	r3, [r7, #8]
 8013986:	2b00      	cmp	r3, #0
 8013988:	d01f      	beq.n	80139ca <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801398a:	2300      	movs	r3, #0
 801398c:	61fb      	str	r3, [r7, #28]
 801398e:	e012      	b.n	80139b6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8013990:	68ba      	ldr	r2, [r7, #8]
 8013992:	69fb      	ldr	r3, [r7, #28]
 8013994:	4413      	add	r3, r2
 8013996:	7819      	ldrb	r1, [r3, #0]
 8013998:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801399a:	69fb      	ldr	r3, [r7, #28]
 801399c:	4413      	add	r3, r2
 801399e:	3334      	adds	r3, #52	; 0x34
 80139a0:	460a      	mov	r2, r1
 80139a2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80139a4:	68ba      	ldr	r2, [r7, #8]
 80139a6:	69fb      	ldr	r3, [r7, #28]
 80139a8:	4413      	add	r3, r2
 80139aa:	781b      	ldrb	r3, [r3, #0]
 80139ac:	2b00      	cmp	r3, #0
 80139ae:	d006      	beq.n	80139be <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80139b0:	69fb      	ldr	r3, [r7, #28]
 80139b2:	3301      	adds	r3, #1
 80139b4:	61fb      	str	r3, [r7, #28]
 80139b6:	69fb      	ldr	r3, [r7, #28]
 80139b8:	2b0f      	cmp	r3, #15
 80139ba:	d9e9      	bls.n	8013990 <prvInitialiseNewTask+0x64>
 80139bc:	e000      	b.n	80139c0 <prvInitialiseNewTask+0x94>
			{
				break;
 80139be:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80139c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139c2:	2200      	movs	r2, #0
 80139c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80139c8:	e003      	b.n	80139d2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80139ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139cc:	2200      	movs	r2, #0
 80139ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80139d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139d4:	2b37      	cmp	r3, #55	; 0x37
 80139d6:	d901      	bls.n	80139dc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80139d8:	2337      	movs	r3, #55	; 0x37
 80139da:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80139dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80139e0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80139e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80139e6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80139e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139ea:	2200      	movs	r2, #0
 80139ec:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80139ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139f0:	3304      	adds	r3, #4
 80139f2:	4618      	mov	r0, r3
 80139f4:	f7fe fda0 	bl	8012538 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80139f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139fa:	3318      	adds	r3, #24
 80139fc:	4618      	mov	r0, r3
 80139fe:	f7fe fd9b 	bl	8012538 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8013a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013a06:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a0a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8013a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a10:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8013a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013a16:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8013a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a1a:	2200      	movs	r2, #0
 8013a1c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a20:	2200      	movs	r2, #0
 8013a22:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8013a26:	683a      	ldr	r2, [r7, #0]
 8013a28:	68f9      	ldr	r1, [r7, #12]
 8013a2a:	69b8      	ldr	r0, [r7, #24]
 8013a2c:	f001 fc80 	bl	8015330 <pxPortInitialiseStack>
 8013a30:	4602      	mov	r2, r0
 8013a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a34:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8013a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a38:	2b00      	cmp	r3, #0
 8013a3a:	d002      	beq.n	8013a42 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8013a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013a40:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013a42:	bf00      	nop
 8013a44:	3720      	adds	r7, #32
 8013a46:	46bd      	mov	sp, r7
 8013a48:	bd80      	pop	{r7, pc}
	...

08013a4c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8013a4c:	b580      	push	{r7, lr}
 8013a4e:	b082      	sub	sp, #8
 8013a50:	af00      	add	r7, sp, #0
 8013a52:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8013a54:	f001 fd96 	bl	8015584 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8013a58:	4b2d      	ldr	r3, [pc, #180]	; (8013b10 <prvAddNewTaskToReadyList+0xc4>)
 8013a5a:	681b      	ldr	r3, [r3, #0]
 8013a5c:	3301      	adds	r3, #1
 8013a5e:	4a2c      	ldr	r2, [pc, #176]	; (8013b10 <prvAddNewTaskToReadyList+0xc4>)
 8013a60:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8013a62:	4b2c      	ldr	r3, [pc, #176]	; (8013b14 <prvAddNewTaskToReadyList+0xc8>)
 8013a64:	681b      	ldr	r3, [r3, #0]
 8013a66:	2b00      	cmp	r3, #0
 8013a68:	d109      	bne.n	8013a7e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8013a6a:	4a2a      	ldr	r2, [pc, #168]	; (8013b14 <prvAddNewTaskToReadyList+0xc8>)
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8013a70:	4b27      	ldr	r3, [pc, #156]	; (8013b10 <prvAddNewTaskToReadyList+0xc4>)
 8013a72:	681b      	ldr	r3, [r3, #0]
 8013a74:	2b01      	cmp	r3, #1
 8013a76:	d110      	bne.n	8013a9a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8013a78:	f000 fc28 	bl	80142cc <prvInitialiseTaskLists>
 8013a7c:	e00d      	b.n	8013a9a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8013a7e:	4b26      	ldr	r3, [pc, #152]	; (8013b18 <prvAddNewTaskToReadyList+0xcc>)
 8013a80:	681b      	ldr	r3, [r3, #0]
 8013a82:	2b00      	cmp	r3, #0
 8013a84:	d109      	bne.n	8013a9a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8013a86:	4b23      	ldr	r3, [pc, #140]	; (8013b14 <prvAddNewTaskToReadyList+0xc8>)
 8013a88:	681b      	ldr	r3, [r3, #0]
 8013a8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a90:	429a      	cmp	r2, r3
 8013a92:	d802      	bhi.n	8013a9a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8013a94:	4a1f      	ldr	r2, [pc, #124]	; (8013b14 <prvAddNewTaskToReadyList+0xc8>)
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8013a9a:	4b20      	ldr	r3, [pc, #128]	; (8013b1c <prvAddNewTaskToReadyList+0xd0>)
 8013a9c:	681b      	ldr	r3, [r3, #0]
 8013a9e:	3301      	adds	r3, #1
 8013aa0:	4a1e      	ldr	r2, [pc, #120]	; (8013b1c <prvAddNewTaskToReadyList+0xd0>)
 8013aa2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8013aa4:	4b1d      	ldr	r3, [pc, #116]	; (8013b1c <prvAddNewTaskToReadyList+0xd0>)
 8013aa6:	681a      	ldr	r2, [r3, #0]
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013ab0:	4b1b      	ldr	r3, [pc, #108]	; (8013b20 <prvAddNewTaskToReadyList+0xd4>)
 8013ab2:	681b      	ldr	r3, [r3, #0]
 8013ab4:	429a      	cmp	r2, r3
 8013ab6:	d903      	bls.n	8013ac0 <prvAddNewTaskToReadyList+0x74>
 8013ab8:	687b      	ldr	r3, [r7, #4]
 8013aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013abc:	4a18      	ldr	r2, [pc, #96]	; (8013b20 <prvAddNewTaskToReadyList+0xd4>)
 8013abe:	6013      	str	r3, [r2, #0]
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013ac4:	4613      	mov	r3, r2
 8013ac6:	009b      	lsls	r3, r3, #2
 8013ac8:	4413      	add	r3, r2
 8013aca:	009b      	lsls	r3, r3, #2
 8013acc:	4a15      	ldr	r2, [pc, #84]	; (8013b24 <prvAddNewTaskToReadyList+0xd8>)
 8013ace:	441a      	add	r2, r3
 8013ad0:	687b      	ldr	r3, [r7, #4]
 8013ad2:	3304      	adds	r3, #4
 8013ad4:	4619      	mov	r1, r3
 8013ad6:	4610      	mov	r0, r2
 8013ad8:	f7fe fd3b 	bl	8012552 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8013adc:	f001 fd82 	bl	80155e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8013ae0:	4b0d      	ldr	r3, [pc, #52]	; (8013b18 <prvAddNewTaskToReadyList+0xcc>)
 8013ae2:	681b      	ldr	r3, [r3, #0]
 8013ae4:	2b00      	cmp	r3, #0
 8013ae6:	d00e      	beq.n	8013b06 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8013ae8:	4b0a      	ldr	r3, [pc, #40]	; (8013b14 <prvAddNewTaskToReadyList+0xc8>)
 8013aea:	681b      	ldr	r3, [r3, #0]
 8013aec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013aee:	687b      	ldr	r3, [r7, #4]
 8013af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013af2:	429a      	cmp	r2, r3
 8013af4:	d207      	bcs.n	8013b06 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8013af6:	4b0c      	ldr	r3, [pc, #48]	; (8013b28 <prvAddNewTaskToReadyList+0xdc>)
 8013af8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013afc:	601a      	str	r2, [r3, #0]
 8013afe:	f3bf 8f4f 	dsb	sy
 8013b02:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013b06:	bf00      	nop
 8013b08:	3708      	adds	r7, #8
 8013b0a:	46bd      	mov	sp, r7
 8013b0c:	bd80      	pop	{r7, pc}
 8013b0e:	bf00      	nop
 8013b10:	2000360c 	.word	0x2000360c
 8013b14:	20003138 	.word	0x20003138
 8013b18:	20003618 	.word	0x20003618
 8013b1c:	20003628 	.word	0x20003628
 8013b20:	20003614 	.word	0x20003614
 8013b24:	2000313c 	.word	0x2000313c
 8013b28:	e000ed04 	.word	0xe000ed04

08013b2c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8013b2c:	b580      	push	{r7, lr}
 8013b2e:	b084      	sub	sp, #16
 8013b30:	af00      	add	r7, sp, #0
 8013b32:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8013b34:	2300      	movs	r3, #0
 8013b36:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8013b38:	687b      	ldr	r3, [r7, #4]
 8013b3a:	2b00      	cmp	r3, #0
 8013b3c:	d017      	beq.n	8013b6e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8013b3e:	4b13      	ldr	r3, [pc, #76]	; (8013b8c <vTaskDelay+0x60>)
 8013b40:	681b      	ldr	r3, [r3, #0]
 8013b42:	2b00      	cmp	r3, #0
 8013b44:	d00a      	beq.n	8013b5c <vTaskDelay+0x30>
	__asm volatile
 8013b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b4a:	f383 8811 	msr	BASEPRI, r3
 8013b4e:	f3bf 8f6f 	isb	sy
 8013b52:	f3bf 8f4f 	dsb	sy
 8013b56:	60bb      	str	r3, [r7, #8]
}
 8013b58:	bf00      	nop
 8013b5a:	e7fe      	b.n	8013b5a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8013b5c:	f000 f880 	bl	8013c60 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8013b60:	2100      	movs	r1, #0
 8013b62:	6878      	ldr	r0, [r7, #4]
 8013b64:	f000 ffe6 	bl	8014b34 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8013b68:	f000 f888 	bl	8013c7c <xTaskResumeAll>
 8013b6c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8013b6e:	68fb      	ldr	r3, [r7, #12]
 8013b70:	2b00      	cmp	r3, #0
 8013b72:	d107      	bne.n	8013b84 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8013b74:	4b06      	ldr	r3, [pc, #24]	; (8013b90 <vTaskDelay+0x64>)
 8013b76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013b7a:	601a      	str	r2, [r3, #0]
 8013b7c:	f3bf 8f4f 	dsb	sy
 8013b80:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013b84:	bf00      	nop
 8013b86:	3710      	adds	r7, #16
 8013b88:	46bd      	mov	sp, r7
 8013b8a:	bd80      	pop	{r7, pc}
 8013b8c:	20003634 	.word	0x20003634
 8013b90:	e000ed04 	.word	0xe000ed04

08013b94 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8013b94:	b580      	push	{r7, lr}
 8013b96:	b08a      	sub	sp, #40	; 0x28
 8013b98:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8013b9a:	2300      	movs	r3, #0
 8013b9c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8013b9e:	2300      	movs	r3, #0
 8013ba0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8013ba2:	463a      	mov	r2, r7
 8013ba4:	1d39      	adds	r1, r7, #4
 8013ba6:	f107 0308 	add.w	r3, r7, #8
 8013baa:	4618      	mov	r0, r3
 8013bac:	f7fe fc70 	bl	8012490 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8013bb0:	6839      	ldr	r1, [r7, #0]
 8013bb2:	687b      	ldr	r3, [r7, #4]
 8013bb4:	68ba      	ldr	r2, [r7, #8]
 8013bb6:	9202      	str	r2, [sp, #8]
 8013bb8:	9301      	str	r3, [sp, #4]
 8013bba:	2300      	movs	r3, #0
 8013bbc:	9300      	str	r3, [sp, #0]
 8013bbe:	2300      	movs	r3, #0
 8013bc0:	460a      	mov	r2, r1
 8013bc2:	4921      	ldr	r1, [pc, #132]	; (8013c48 <vTaskStartScheduler+0xb4>)
 8013bc4:	4821      	ldr	r0, [pc, #132]	; (8013c4c <vTaskStartScheduler+0xb8>)
 8013bc6:	f7ff fe0f 	bl	80137e8 <xTaskCreateStatic>
 8013bca:	4603      	mov	r3, r0
 8013bcc:	4a20      	ldr	r2, [pc, #128]	; (8013c50 <vTaskStartScheduler+0xbc>)
 8013bce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8013bd0:	4b1f      	ldr	r3, [pc, #124]	; (8013c50 <vTaskStartScheduler+0xbc>)
 8013bd2:	681b      	ldr	r3, [r3, #0]
 8013bd4:	2b00      	cmp	r3, #0
 8013bd6:	d002      	beq.n	8013bde <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8013bd8:	2301      	movs	r3, #1
 8013bda:	617b      	str	r3, [r7, #20]
 8013bdc:	e001      	b.n	8013be2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8013bde:	2300      	movs	r3, #0
 8013be0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8013be2:	697b      	ldr	r3, [r7, #20]
 8013be4:	2b01      	cmp	r3, #1
 8013be6:	d102      	bne.n	8013bee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8013be8:	f000 fff8 	bl	8014bdc <xTimerCreateTimerTask>
 8013bec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8013bee:	697b      	ldr	r3, [r7, #20]
 8013bf0:	2b01      	cmp	r3, #1
 8013bf2:	d116      	bne.n	8013c22 <vTaskStartScheduler+0x8e>
	__asm volatile
 8013bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013bf8:	f383 8811 	msr	BASEPRI, r3
 8013bfc:	f3bf 8f6f 	isb	sy
 8013c00:	f3bf 8f4f 	dsb	sy
 8013c04:	613b      	str	r3, [r7, #16]
}
 8013c06:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8013c08:	4b12      	ldr	r3, [pc, #72]	; (8013c54 <vTaskStartScheduler+0xc0>)
 8013c0a:	f04f 32ff 	mov.w	r2, #4294967295
 8013c0e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8013c10:	4b11      	ldr	r3, [pc, #68]	; (8013c58 <vTaskStartScheduler+0xc4>)
 8013c12:	2201      	movs	r2, #1
 8013c14:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8013c16:	4b11      	ldr	r3, [pc, #68]	; (8013c5c <vTaskStartScheduler+0xc8>)
 8013c18:	2200      	movs	r2, #0
 8013c1a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8013c1c:	f001 fc10 	bl	8015440 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8013c20:	e00e      	b.n	8013c40 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8013c22:	697b      	ldr	r3, [r7, #20]
 8013c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013c28:	d10a      	bne.n	8013c40 <vTaskStartScheduler+0xac>
	__asm volatile
 8013c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c2e:	f383 8811 	msr	BASEPRI, r3
 8013c32:	f3bf 8f6f 	isb	sy
 8013c36:	f3bf 8f4f 	dsb	sy
 8013c3a:	60fb      	str	r3, [r7, #12]
}
 8013c3c:	bf00      	nop
 8013c3e:	e7fe      	b.n	8013c3e <vTaskStartScheduler+0xaa>
}
 8013c40:	bf00      	nop
 8013c42:	3718      	adds	r7, #24
 8013c44:	46bd      	mov	sp, r7
 8013c46:	bd80      	pop	{r7, pc}
 8013c48:	0802be38 	.word	0x0802be38
 8013c4c:	0801429d 	.word	0x0801429d
 8013c50:	20003630 	.word	0x20003630
 8013c54:	2000362c 	.word	0x2000362c
 8013c58:	20003618 	.word	0x20003618
 8013c5c:	20003610 	.word	0x20003610

08013c60 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8013c60:	b480      	push	{r7}
 8013c62:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8013c64:	4b04      	ldr	r3, [pc, #16]	; (8013c78 <vTaskSuspendAll+0x18>)
 8013c66:	681b      	ldr	r3, [r3, #0]
 8013c68:	3301      	adds	r3, #1
 8013c6a:	4a03      	ldr	r2, [pc, #12]	; (8013c78 <vTaskSuspendAll+0x18>)
 8013c6c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8013c6e:	bf00      	nop
 8013c70:	46bd      	mov	sp, r7
 8013c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c76:	4770      	bx	lr
 8013c78:	20003634 	.word	0x20003634

08013c7c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8013c7c:	b580      	push	{r7, lr}
 8013c7e:	b084      	sub	sp, #16
 8013c80:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8013c82:	2300      	movs	r3, #0
 8013c84:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8013c86:	2300      	movs	r3, #0
 8013c88:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8013c8a:	4b42      	ldr	r3, [pc, #264]	; (8013d94 <xTaskResumeAll+0x118>)
 8013c8c:	681b      	ldr	r3, [r3, #0]
 8013c8e:	2b00      	cmp	r3, #0
 8013c90:	d10a      	bne.n	8013ca8 <xTaskResumeAll+0x2c>
	__asm volatile
 8013c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c96:	f383 8811 	msr	BASEPRI, r3
 8013c9a:	f3bf 8f6f 	isb	sy
 8013c9e:	f3bf 8f4f 	dsb	sy
 8013ca2:	603b      	str	r3, [r7, #0]
}
 8013ca4:	bf00      	nop
 8013ca6:	e7fe      	b.n	8013ca6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8013ca8:	f001 fc6c 	bl	8015584 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8013cac:	4b39      	ldr	r3, [pc, #228]	; (8013d94 <xTaskResumeAll+0x118>)
 8013cae:	681b      	ldr	r3, [r3, #0]
 8013cb0:	3b01      	subs	r3, #1
 8013cb2:	4a38      	ldr	r2, [pc, #224]	; (8013d94 <xTaskResumeAll+0x118>)
 8013cb4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013cb6:	4b37      	ldr	r3, [pc, #220]	; (8013d94 <xTaskResumeAll+0x118>)
 8013cb8:	681b      	ldr	r3, [r3, #0]
 8013cba:	2b00      	cmp	r3, #0
 8013cbc:	d162      	bne.n	8013d84 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8013cbe:	4b36      	ldr	r3, [pc, #216]	; (8013d98 <xTaskResumeAll+0x11c>)
 8013cc0:	681b      	ldr	r3, [r3, #0]
 8013cc2:	2b00      	cmp	r3, #0
 8013cc4:	d05e      	beq.n	8013d84 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013cc6:	e02f      	b.n	8013d28 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013cc8:	4b34      	ldr	r3, [pc, #208]	; (8013d9c <xTaskResumeAll+0x120>)
 8013cca:	68db      	ldr	r3, [r3, #12]
 8013ccc:	68db      	ldr	r3, [r3, #12]
 8013cce:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013cd0:	68fb      	ldr	r3, [r7, #12]
 8013cd2:	3318      	adds	r3, #24
 8013cd4:	4618      	mov	r0, r3
 8013cd6:	f7fe fc99 	bl	801260c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013cda:	68fb      	ldr	r3, [r7, #12]
 8013cdc:	3304      	adds	r3, #4
 8013cde:	4618      	mov	r0, r3
 8013ce0:	f7fe fc94 	bl	801260c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013ce4:	68fb      	ldr	r3, [r7, #12]
 8013ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013ce8:	4b2d      	ldr	r3, [pc, #180]	; (8013da0 <xTaskResumeAll+0x124>)
 8013cea:	681b      	ldr	r3, [r3, #0]
 8013cec:	429a      	cmp	r2, r3
 8013cee:	d903      	bls.n	8013cf8 <xTaskResumeAll+0x7c>
 8013cf0:	68fb      	ldr	r3, [r7, #12]
 8013cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013cf4:	4a2a      	ldr	r2, [pc, #168]	; (8013da0 <xTaskResumeAll+0x124>)
 8013cf6:	6013      	str	r3, [r2, #0]
 8013cf8:	68fb      	ldr	r3, [r7, #12]
 8013cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013cfc:	4613      	mov	r3, r2
 8013cfe:	009b      	lsls	r3, r3, #2
 8013d00:	4413      	add	r3, r2
 8013d02:	009b      	lsls	r3, r3, #2
 8013d04:	4a27      	ldr	r2, [pc, #156]	; (8013da4 <xTaskResumeAll+0x128>)
 8013d06:	441a      	add	r2, r3
 8013d08:	68fb      	ldr	r3, [r7, #12]
 8013d0a:	3304      	adds	r3, #4
 8013d0c:	4619      	mov	r1, r3
 8013d0e:	4610      	mov	r0, r2
 8013d10:	f7fe fc1f 	bl	8012552 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013d14:	68fb      	ldr	r3, [r7, #12]
 8013d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d18:	4b23      	ldr	r3, [pc, #140]	; (8013da8 <xTaskResumeAll+0x12c>)
 8013d1a:	681b      	ldr	r3, [r3, #0]
 8013d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d1e:	429a      	cmp	r2, r3
 8013d20:	d302      	bcc.n	8013d28 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8013d22:	4b22      	ldr	r3, [pc, #136]	; (8013dac <xTaskResumeAll+0x130>)
 8013d24:	2201      	movs	r2, #1
 8013d26:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013d28:	4b1c      	ldr	r3, [pc, #112]	; (8013d9c <xTaskResumeAll+0x120>)
 8013d2a:	681b      	ldr	r3, [r3, #0]
 8013d2c:	2b00      	cmp	r3, #0
 8013d2e:	d1cb      	bne.n	8013cc8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8013d30:	68fb      	ldr	r3, [r7, #12]
 8013d32:	2b00      	cmp	r3, #0
 8013d34:	d001      	beq.n	8013d3a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8013d36:	f000 fb67 	bl	8014408 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8013d3a:	4b1d      	ldr	r3, [pc, #116]	; (8013db0 <xTaskResumeAll+0x134>)
 8013d3c:	681b      	ldr	r3, [r3, #0]
 8013d3e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	2b00      	cmp	r3, #0
 8013d44:	d010      	beq.n	8013d68 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8013d46:	f000 f859 	bl	8013dfc <xTaskIncrementTick>
 8013d4a:	4603      	mov	r3, r0
 8013d4c:	2b00      	cmp	r3, #0
 8013d4e:	d002      	beq.n	8013d56 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8013d50:	4b16      	ldr	r3, [pc, #88]	; (8013dac <xTaskResumeAll+0x130>)
 8013d52:	2201      	movs	r2, #1
 8013d54:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8013d56:	687b      	ldr	r3, [r7, #4]
 8013d58:	3b01      	subs	r3, #1
 8013d5a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	2b00      	cmp	r3, #0
 8013d60:	d1f1      	bne.n	8013d46 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8013d62:	4b13      	ldr	r3, [pc, #76]	; (8013db0 <xTaskResumeAll+0x134>)
 8013d64:	2200      	movs	r2, #0
 8013d66:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8013d68:	4b10      	ldr	r3, [pc, #64]	; (8013dac <xTaskResumeAll+0x130>)
 8013d6a:	681b      	ldr	r3, [r3, #0]
 8013d6c:	2b00      	cmp	r3, #0
 8013d6e:	d009      	beq.n	8013d84 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8013d70:	2301      	movs	r3, #1
 8013d72:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8013d74:	4b0f      	ldr	r3, [pc, #60]	; (8013db4 <xTaskResumeAll+0x138>)
 8013d76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013d7a:	601a      	str	r2, [r3, #0]
 8013d7c:	f3bf 8f4f 	dsb	sy
 8013d80:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013d84:	f001 fc2e 	bl	80155e4 <vPortExitCritical>

	return xAlreadyYielded;
 8013d88:	68bb      	ldr	r3, [r7, #8]
}
 8013d8a:	4618      	mov	r0, r3
 8013d8c:	3710      	adds	r7, #16
 8013d8e:	46bd      	mov	sp, r7
 8013d90:	bd80      	pop	{r7, pc}
 8013d92:	bf00      	nop
 8013d94:	20003634 	.word	0x20003634
 8013d98:	2000360c 	.word	0x2000360c
 8013d9c:	200035cc 	.word	0x200035cc
 8013da0:	20003614 	.word	0x20003614
 8013da4:	2000313c 	.word	0x2000313c
 8013da8:	20003138 	.word	0x20003138
 8013dac:	20003620 	.word	0x20003620
 8013db0:	2000361c 	.word	0x2000361c
 8013db4:	e000ed04 	.word	0xe000ed04

08013db8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8013db8:	b480      	push	{r7}
 8013dba:	b083      	sub	sp, #12
 8013dbc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8013dbe:	4b05      	ldr	r3, [pc, #20]	; (8013dd4 <xTaskGetTickCount+0x1c>)
 8013dc0:	681b      	ldr	r3, [r3, #0]
 8013dc2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8013dc4:	687b      	ldr	r3, [r7, #4]
}
 8013dc6:	4618      	mov	r0, r3
 8013dc8:	370c      	adds	r7, #12
 8013dca:	46bd      	mov	sp, r7
 8013dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dd0:	4770      	bx	lr
 8013dd2:	bf00      	nop
 8013dd4:	20003610 	.word	0x20003610

08013dd8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8013dd8:	b580      	push	{r7, lr}
 8013dda:	b082      	sub	sp, #8
 8013ddc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013dde:	f001 fcb3 	bl	8015748 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8013de2:	2300      	movs	r3, #0
 8013de4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8013de6:	4b04      	ldr	r3, [pc, #16]	; (8013df8 <xTaskGetTickCountFromISR+0x20>)
 8013de8:	681b      	ldr	r3, [r3, #0]
 8013dea:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013dec:	683b      	ldr	r3, [r7, #0]
}
 8013dee:	4618      	mov	r0, r3
 8013df0:	3708      	adds	r7, #8
 8013df2:	46bd      	mov	sp, r7
 8013df4:	bd80      	pop	{r7, pc}
 8013df6:	bf00      	nop
 8013df8:	20003610 	.word	0x20003610

08013dfc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8013dfc:	b580      	push	{r7, lr}
 8013dfe:	b086      	sub	sp, #24
 8013e00:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8013e02:	2300      	movs	r3, #0
 8013e04:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013e06:	4b4f      	ldr	r3, [pc, #316]	; (8013f44 <xTaskIncrementTick+0x148>)
 8013e08:	681b      	ldr	r3, [r3, #0]
 8013e0a:	2b00      	cmp	r3, #0
 8013e0c:	f040 808f 	bne.w	8013f2e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8013e10:	4b4d      	ldr	r3, [pc, #308]	; (8013f48 <xTaskIncrementTick+0x14c>)
 8013e12:	681b      	ldr	r3, [r3, #0]
 8013e14:	3301      	adds	r3, #1
 8013e16:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8013e18:	4a4b      	ldr	r2, [pc, #300]	; (8013f48 <xTaskIncrementTick+0x14c>)
 8013e1a:	693b      	ldr	r3, [r7, #16]
 8013e1c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8013e1e:	693b      	ldr	r3, [r7, #16]
 8013e20:	2b00      	cmp	r3, #0
 8013e22:	d120      	bne.n	8013e66 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8013e24:	4b49      	ldr	r3, [pc, #292]	; (8013f4c <xTaskIncrementTick+0x150>)
 8013e26:	681b      	ldr	r3, [r3, #0]
 8013e28:	681b      	ldr	r3, [r3, #0]
 8013e2a:	2b00      	cmp	r3, #0
 8013e2c:	d00a      	beq.n	8013e44 <xTaskIncrementTick+0x48>
	__asm volatile
 8013e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e32:	f383 8811 	msr	BASEPRI, r3
 8013e36:	f3bf 8f6f 	isb	sy
 8013e3a:	f3bf 8f4f 	dsb	sy
 8013e3e:	603b      	str	r3, [r7, #0]
}
 8013e40:	bf00      	nop
 8013e42:	e7fe      	b.n	8013e42 <xTaskIncrementTick+0x46>
 8013e44:	4b41      	ldr	r3, [pc, #260]	; (8013f4c <xTaskIncrementTick+0x150>)
 8013e46:	681b      	ldr	r3, [r3, #0]
 8013e48:	60fb      	str	r3, [r7, #12]
 8013e4a:	4b41      	ldr	r3, [pc, #260]	; (8013f50 <xTaskIncrementTick+0x154>)
 8013e4c:	681b      	ldr	r3, [r3, #0]
 8013e4e:	4a3f      	ldr	r2, [pc, #252]	; (8013f4c <xTaskIncrementTick+0x150>)
 8013e50:	6013      	str	r3, [r2, #0]
 8013e52:	4a3f      	ldr	r2, [pc, #252]	; (8013f50 <xTaskIncrementTick+0x154>)
 8013e54:	68fb      	ldr	r3, [r7, #12]
 8013e56:	6013      	str	r3, [r2, #0]
 8013e58:	4b3e      	ldr	r3, [pc, #248]	; (8013f54 <xTaskIncrementTick+0x158>)
 8013e5a:	681b      	ldr	r3, [r3, #0]
 8013e5c:	3301      	adds	r3, #1
 8013e5e:	4a3d      	ldr	r2, [pc, #244]	; (8013f54 <xTaskIncrementTick+0x158>)
 8013e60:	6013      	str	r3, [r2, #0]
 8013e62:	f000 fad1 	bl	8014408 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8013e66:	4b3c      	ldr	r3, [pc, #240]	; (8013f58 <xTaskIncrementTick+0x15c>)
 8013e68:	681b      	ldr	r3, [r3, #0]
 8013e6a:	693a      	ldr	r2, [r7, #16]
 8013e6c:	429a      	cmp	r2, r3
 8013e6e:	d349      	bcc.n	8013f04 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013e70:	4b36      	ldr	r3, [pc, #216]	; (8013f4c <xTaskIncrementTick+0x150>)
 8013e72:	681b      	ldr	r3, [r3, #0]
 8013e74:	681b      	ldr	r3, [r3, #0]
 8013e76:	2b00      	cmp	r3, #0
 8013e78:	d104      	bne.n	8013e84 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013e7a:	4b37      	ldr	r3, [pc, #220]	; (8013f58 <xTaskIncrementTick+0x15c>)
 8013e7c:	f04f 32ff 	mov.w	r2, #4294967295
 8013e80:	601a      	str	r2, [r3, #0]
					break;
 8013e82:	e03f      	b.n	8013f04 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013e84:	4b31      	ldr	r3, [pc, #196]	; (8013f4c <xTaskIncrementTick+0x150>)
 8013e86:	681b      	ldr	r3, [r3, #0]
 8013e88:	68db      	ldr	r3, [r3, #12]
 8013e8a:	68db      	ldr	r3, [r3, #12]
 8013e8c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8013e8e:	68bb      	ldr	r3, [r7, #8]
 8013e90:	685b      	ldr	r3, [r3, #4]
 8013e92:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8013e94:	693a      	ldr	r2, [r7, #16]
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	429a      	cmp	r2, r3
 8013e9a:	d203      	bcs.n	8013ea4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8013e9c:	4a2e      	ldr	r2, [pc, #184]	; (8013f58 <xTaskIncrementTick+0x15c>)
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8013ea2:	e02f      	b.n	8013f04 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013ea4:	68bb      	ldr	r3, [r7, #8]
 8013ea6:	3304      	adds	r3, #4
 8013ea8:	4618      	mov	r0, r3
 8013eaa:	f7fe fbaf 	bl	801260c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013eae:	68bb      	ldr	r3, [r7, #8]
 8013eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013eb2:	2b00      	cmp	r3, #0
 8013eb4:	d004      	beq.n	8013ec0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013eb6:	68bb      	ldr	r3, [r7, #8]
 8013eb8:	3318      	adds	r3, #24
 8013eba:	4618      	mov	r0, r3
 8013ebc:	f7fe fba6 	bl	801260c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8013ec0:	68bb      	ldr	r3, [r7, #8]
 8013ec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013ec4:	4b25      	ldr	r3, [pc, #148]	; (8013f5c <xTaskIncrementTick+0x160>)
 8013ec6:	681b      	ldr	r3, [r3, #0]
 8013ec8:	429a      	cmp	r2, r3
 8013eca:	d903      	bls.n	8013ed4 <xTaskIncrementTick+0xd8>
 8013ecc:	68bb      	ldr	r3, [r7, #8]
 8013ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ed0:	4a22      	ldr	r2, [pc, #136]	; (8013f5c <xTaskIncrementTick+0x160>)
 8013ed2:	6013      	str	r3, [r2, #0]
 8013ed4:	68bb      	ldr	r3, [r7, #8]
 8013ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013ed8:	4613      	mov	r3, r2
 8013eda:	009b      	lsls	r3, r3, #2
 8013edc:	4413      	add	r3, r2
 8013ede:	009b      	lsls	r3, r3, #2
 8013ee0:	4a1f      	ldr	r2, [pc, #124]	; (8013f60 <xTaskIncrementTick+0x164>)
 8013ee2:	441a      	add	r2, r3
 8013ee4:	68bb      	ldr	r3, [r7, #8]
 8013ee6:	3304      	adds	r3, #4
 8013ee8:	4619      	mov	r1, r3
 8013eea:	4610      	mov	r0, r2
 8013eec:	f7fe fb31 	bl	8012552 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013ef0:	68bb      	ldr	r3, [r7, #8]
 8013ef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013ef4:	4b1b      	ldr	r3, [pc, #108]	; (8013f64 <xTaskIncrementTick+0x168>)
 8013ef6:	681b      	ldr	r3, [r3, #0]
 8013ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013efa:	429a      	cmp	r2, r3
 8013efc:	d3b8      	bcc.n	8013e70 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8013efe:	2301      	movs	r3, #1
 8013f00:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013f02:	e7b5      	b.n	8013e70 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8013f04:	4b17      	ldr	r3, [pc, #92]	; (8013f64 <xTaskIncrementTick+0x168>)
 8013f06:	681b      	ldr	r3, [r3, #0]
 8013f08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013f0a:	4915      	ldr	r1, [pc, #84]	; (8013f60 <xTaskIncrementTick+0x164>)
 8013f0c:	4613      	mov	r3, r2
 8013f0e:	009b      	lsls	r3, r3, #2
 8013f10:	4413      	add	r3, r2
 8013f12:	009b      	lsls	r3, r3, #2
 8013f14:	440b      	add	r3, r1
 8013f16:	681b      	ldr	r3, [r3, #0]
 8013f18:	2b01      	cmp	r3, #1
 8013f1a:	d901      	bls.n	8013f20 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8013f1c:	2301      	movs	r3, #1
 8013f1e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8013f20:	4b11      	ldr	r3, [pc, #68]	; (8013f68 <xTaskIncrementTick+0x16c>)
 8013f22:	681b      	ldr	r3, [r3, #0]
 8013f24:	2b00      	cmp	r3, #0
 8013f26:	d007      	beq.n	8013f38 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8013f28:	2301      	movs	r3, #1
 8013f2a:	617b      	str	r3, [r7, #20]
 8013f2c:	e004      	b.n	8013f38 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8013f2e:	4b0f      	ldr	r3, [pc, #60]	; (8013f6c <xTaskIncrementTick+0x170>)
 8013f30:	681b      	ldr	r3, [r3, #0]
 8013f32:	3301      	adds	r3, #1
 8013f34:	4a0d      	ldr	r2, [pc, #52]	; (8013f6c <xTaskIncrementTick+0x170>)
 8013f36:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8013f38:	697b      	ldr	r3, [r7, #20]
}
 8013f3a:	4618      	mov	r0, r3
 8013f3c:	3718      	adds	r7, #24
 8013f3e:	46bd      	mov	sp, r7
 8013f40:	bd80      	pop	{r7, pc}
 8013f42:	bf00      	nop
 8013f44:	20003634 	.word	0x20003634
 8013f48:	20003610 	.word	0x20003610
 8013f4c:	200035c4 	.word	0x200035c4
 8013f50:	200035c8 	.word	0x200035c8
 8013f54:	20003624 	.word	0x20003624
 8013f58:	2000362c 	.word	0x2000362c
 8013f5c:	20003614 	.word	0x20003614
 8013f60:	2000313c 	.word	0x2000313c
 8013f64:	20003138 	.word	0x20003138
 8013f68:	20003620 	.word	0x20003620
 8013f6c:	2000361c 	.word	0x2000361c

08013f70 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8013f70:	b480      	push	{r7}
 8013f72:	b085      	sub	sp, #20
 8013f74:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8013f76:	4b28      	ldr	r3, [pc, #160]	; (8014018 <vTaskSwitchContext+0xa8>)
 8013f78:	681b      	ldr	r3, [r3, #0]
 8013f7a:	2b00      	cmp	r3, #0
 8013f7c:	d003      	beq.n	8013f86 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8013f7e:	4b27      	ldr	r3, [pc, #156]	; (801401c <vTaskSwitchContext+0xac>)
 8013f80:	2201      	movs	r2, #1
 8013f82:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8013f84:	e041      	b.n	801400a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8013f86:	4b25      	ldr	r3, [pc, #148]	; (801401c <vTaskSwitchContext+0xac>)
 8013f88:	2200      	movs	r2, #0
 8013f8a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013f8c:	4b24      	ldr	r3, [pc, #144]	; (8014020 <vTaskSwitchContext+0xb0>)
 8013f8e:	681b      	ldr	r3, [r3, #0]
 8013f90:	60fb      	str	r3, [r7, #12]
 8013f92:	e010      	b.n	8013fb6 <vTaskSwitchContext+0x46>
 8013f94:	68fb      	ldr	r3, [r7, #12]
 8013f96:	2b00      	cmp	r3, #0
 8013f98:	d10a      	bne.n	8013fb0 <vTaskSwitchContext+0x40>
	__asm volatile
 8013f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f9e:	f383 8811 	msr	BASEPRI, r3
 8013fa2:	f3bf 8f6f 	isb	sy
 8013fa6:	f3bf 8f4f 	dsb	sy
 8013faa:	607b      	str	r3, [r7, #4]
}
 8013fac:	bf00      	nop
 8013fae:	e7fe      	b.n	8013fae <vTaskSwitchContext+0x3e>
 8013fb0:	68fb      	ldr	r3, [r7, #12]
 8013fb2:	3b01      	subs	r3, #1
 8013fb4:	60fb      	str	r3, [r7, #12]
 8013fb6:	491b      	ldr	r1, [pc, #108]	; (8014024 <vTaskSwitchContext+0xb4>)
 8013fb8:	68fa      	ldr	r2, [r7, #12]
 8013fba:	4613      	mov	r3, r2
 8013fbc:	009b      	lsls	r3, r3, #2
 8013fbe:	4413      	add	r3, r2
 8013fc0:	009b      	lsls	r3, r3, #2
 8013fc2:	440b      	add	r3, r1
 8013fc4:	681b      	ldr	r3, [r3, #0]
 8013fc6:	2b00      	cmp	r3, #0
 8013fc8:	d0e4      	beq.n	8013f94 <vTaskSwitchContext+0x24>
 8013fca:	68fa      	ldr	r2, [r7, #12]
 8013fcc:	4613      	mov	r3, r2
 8013fce:	009b      	lsls	r3, r3, #2
 8013fd0:	4413      	add	r3, r2
 8013fd2:	009b      	lsls	r3, r3, #2
 8013fd4:	4a13      	ldr	r2, [pc, #76]	; (8014024 <vTaskSwitchContext+0xb4>)
 8013fd6:	4413      	add	r3, r2
 8013fd8:	60bb      	str	r3, [r7, #8]
 8013fda:	68bb      	ldr	r3, [r7, #8]
 8013fdc:	685b      	ldr	r3, [r3, #4]
 8013fde:	685a      	ldr	r2, [r3, #4]
 8013fe0:	68bb      	ldr	r3, [r7, #8]
 8013fe2:	605a      	str	r2, [r3, #4]
 8013fe4:	68bb      	ldr	r3, [r7, #8]
 8013fe6:	685a      	ldr	r2, [r3, #4]
 8013fe8:	68bb      	ldr	r3, [r7, #8]
 8013fea:	3308      	adds	r3, #8
 8013fec:	429a      	cmp	r2, r3
 8013fee:	d104      	bne.n	8013ffa <vTaskSwitchContext+0x8a>
 8013ff0:	68bb      	ldr	r3, [r7, #8]
 8013ff2:	685b      	ldr	r3, [r3, #4]
 8013ff4:	685a      	ldr	r2, [r3, #4]
 8013ff6:	68bb      	ldr	r3, [r7, #8]
 8013ff8:	605a      	str	r2, [r3, #4]
 8013ffa:	68bb      	ldr	r3, [r7, #8]
 8013ffc:	685b      	ldr	r3, [r3, #4]
 8013ffe:	68db      	ldr	r3, [r3, #12]
 8014000:	4a09      	ldr	r2, [pc, #36]	; (8014028 <vTaskSwitchContext+0xb8>)
 8014002:	6013      	str	r3, [r2, #0]
 8014004:	4a06      	ldr	r2, [pc, #24]	; (8014020 <vTaskSwitchContext+0xb0>)
 8014006:	68fb      	ldr	r3, [r7, #12]
 8014008:	6013      	str	r3, [r2, #0]
}
 801400a:	bf00      	nop
 801400c:	3714      	adds	r7, #20
 801400e:	46bd      	mov	sp, r7
 8014010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014014:	4770      	bx	lr
 8014016:	bf00      	nop
 8014018:	20003634 	.word	0x20003634
 801401c:	20003620 	.word	0x20003620
 8014020:	20003614 	.word	0x20003614
 8014024:	2000313c 	.word	0x2000313c
 8014028:	20003138 	.word	0x20003138

0801402c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801402c:	b580      	push	{r7, lr}
 801402e:	b084      	sub	sp, #16
 8014030:	af00      	add	r7, sp, #0
 8014032:	6078      	str	r0, [r7, #4]
 8014034:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8014036:	687b      	ldr	r3, [r7, #4]
 8014038:	2b00      	cmp	r3, #0
 801403a:	d10a      	bne.n	8014052 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 801403c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014040:	f383 8811 	msr	BASEPRI, r3
 8014044:	f3bf 8f6f 	isb	sy
 8014048:	f3bf 8f4f 	dsb	sy
 801404c:	60fb      	str	r3, [r7, #12]
}
 801404e:	bf00      	nop
 8014050:	e7fe      	b.n	8014050 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014052:	4b07      	ldr	r3, [pc, #28]	; (8014070 <vTaskPlaceOnEventList+0x44>)
 8014054:	681b      	ldr	r3, [r3, #0]
 8014056:	3318      	adds	r3, #24
 8014058:	4619      	mov	r1, r3
 801405a:	6878      	ldr	r0, [r7, #4]
 801405c:	f7fe fa9d 	bl	801259a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014060:	2101      	movs	r1, #1
 8014062:	6838      	ldr	r0, [r7, #0]
 8014064:	f000 fd66 	bl	8014b34 <prvAddCurrentTaskToDelayedList>
}
 8014068:	bf00      	nop
 801406a:	3710      	adds	r7, #16
 801406c:	46bd      	mov	sp, r7
 801406e:	bd80      	pop	{r7, pc}
 8014070:	20003138 	.word	0x20003138

08014074 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8014074:	b580      	push	{r7, lr}
 8014076:	b086      	sub	sp, #24
 8014078:	af00      	add	r7, sp, #0
 801407a:	60f8      	str	r0, [r7, #12]
 801407c:	60b9      	str	r1, [r7, #8]
 801407e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8014080:	68fb      	ldr	r3, [r7, #12]
 8014082:	2b00      	cmp	r3, #0
 8014084:	d10a      	bne.n	801409c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8014086:	f04f 0350 	mov.w	r3, #80	; 0x50
 801408a:	f383 8811 	msr	BASEPRI, r3
 801408e:	f3bf 8f6f 	isb	sy
 8014092:	f3bf 8f4f 	dsb	sy
 8014096:	617b      	str	r3, [r7, #20]
}
 8014098:	bf00      	nop
 801409a:	e7fe      	b.n	801409a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801409c:	4b0a      	ldr	r3, [pc, #40]	; (80140c8 <vTaskPlaceOnEventListRestricted+0x54>)
 801409e:	681b      	ldr	r3, [r3, #0]
 80140a0:	3318      	adds	r3, #24
 80140a2:	4619      	mov	r1, r3
 80140a4:	68f8      	ldr	r0, [r7, #12]
 80140a6:	f7fe fa54 	bl	8012552 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	2b00      	cmp	r3, #0
 80140ae:	d002      	beq.n	80140b6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80140b0:	f04f 33ff 	mov.w	r3, #4294967295
 80140b4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80140b6:	6879      	ldr	r1, [r7, #4]
 80140b8:	68b8      	ldr	r0, [r7, #8]
 80140ba:	f000 fd3b 	bl	8014b34 <prvAddCurrentTaskToDelayedList>
	}
 80140be:	bf00      	nop
 80140c0:	3718      	adds	r7, #24
 80140c2:	46bd      	mov	sp, r7
 80140c4:	bd80      	pop	{r7, pc}
 80140c6:	bf00      	nop
 80140c8:	20003138 	.word	0x20003138

080140cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80140cc:	b580      	push	{r7, lr}
 80140ce:	b086      	sub	sp, #24
 80140d0:	af00      	add	r7, sp, #0
 80140d2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80140d4:	687b      	ldr	r3, [r7, #4]
 80140d6:	68db      	ldr	r3, [r3, #12]
 80140d8:	68db      	ldr	r3, [r3, #12]
 80140da:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80140dc:	693b      	ldr	r3, [r7, #16]
 80140de:	2b00      	cmp	r3, #0
 80140e0:	d10a      	bne.n	80140f8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80140e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140e6:	f383 8811 	msr	BASEPRI, r3
 80140ea:	f3bf 8f6f 	isb	sy
 80140ee:	f3bf 8f4f 	dsb	sy
 80140f2:	60fb      	str	r3, [r7, #12]
}
 80140f4:	bf00      	nop
 80140f6:	e7fe      	b.n	80140f6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80140f8:	693b      	ldr	r3, [r7, #16]
 80140fa:	3318      	adds	r3, #24
 80140fc:	4618      	mov	r0, r3
 80140fe:	f7fe fa85 	bl	801260c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014102:	4b1e      	ldr	r3, [pc, #120]	; (801417c <xTaskRemoveFromEventList+0xb0>)
 8014104:	681b      	ldr	r3, [r3, #0]
 8014106:	2b00      	cmp	r3, #0
 8014108:	d11d      	bne.n	8014146 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801410a:	693b      	ldr	r3, [r7, #16]
 801410c:	3304      	adds	r3, #4
 801410e:	4618      	mov	r0, r3
 8014110:	f7fe fa7c 	bl	801260c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8014114:	693b      	ldr	r3, [r7, #16]
 8014116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014118:	4b19      	ldr	r3, [pc, #100]	; (8014180 <xTaskRemoveFromEventList+0xb4>)
 801411a:	681b      	ldr	r3, [r3, #0]
 801411c:	429a      	cmp	r2, r3
 801411e:	d903      	bls.n	8014128 <xTaskRemoveFromEventList+0x5c>
 8014120:	693b      	ldr	r3, [r7, #16]
 8014122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014124:	4a16      	ldr	r2, [pc, #88]	; (8014180 <xTaskRemoveFromEventList+0xb4>)
 8014126:	6013      	str	r3, [r2, #0]
 8014128:	693b      	ldr	r3, [r7, #16]
 801412a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801412c:	4613      	mov	r3, r2
 801412e:	009b      	lsls	r3, r3, #2
 8014130:	4413      	add	r3, r2
 8014132:	009b      	lsls	r3, r3, #2
 8014134:	4a13      	ldr	r2, [pc, #76]	; (8014184 <xTaskRemoveFromEventList+0xb8>)
 8014136:	441a      	add	r2, r3
 8014138:	693b      	ldr	r3, [r7, #16]
 801413a:	3304      	adds	r3, #4
 801413c:	4619      	mov	r1, r3
 801413e:	4610      	mov	r0, r2
 8014140:	f7fe fa07 	bl	8012552 <vListInsertEnd>
 8014144:	e005      	b.n	8014152 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8014146:	693b      	ldr	r3, [r7, #16]
 8014148:	3318      	adds	r3, #24
 801414a:	4619      	mov	r1, r3
 801414c:	480e      	ldr	r0, [pc, #56]	; (8014188 <xTaskRemoveFromEventList+0xbc>)
 801414e:	f7fe fa00 	bl	8012552 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014152:	693b      	ldr	r3, [r7, #16]
 8014154:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014156:	4b0d      	ldr	r3, [pc, #52]	; (801418c <xTaskRemoveFromEventList+0xc0>)
 8014158:	681b      	ldr	r3, [r3, #0]
 801415a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801415c:	429a      	cmp	r2, r3
 801415e:	d905      	bls.n	801416c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8014160:	2301      	movs	r3, #1
 8014162:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8014164:	4b0a      	ldr	r3, [pc, #40]	; (8014190 <xTaskRemoveFromEventList+0xc4>)
 8014166:	2201      	movs	r2, #1
 8014168:	601a      	str	r2, [r3, #0]
 801416a:	e001      	b.n	8014170 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 801416c:	2300      	movs	r3, #0
 801416e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8014170:	697b      	ldr	r3, [r7, #20]
}
 8014172:	4618      	mov	r0, r3
 8014174:	3718      	adds	r7, #24
 8014176:	46bd      	mov	sp, r7
 8014178:	bd80      	pop	{r7, pc}
 801417a:	bf00      	nop
 801417c:	20003634 	.word	0x20003634
 8014180:	20003614 	.word	0x20003614
 8014184:	2000313c 	.word	0x2000313c
 8014188:	200035cc 	.word	0x200035cc
 801418c:	20003138 	.word	0x20003138
 8014190:	20003620 	.word	0x20003620

08014194 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8014194:	b480      	push	{r7}
 8014196:	b083      	sub	sp, #12
 8014198:	af00      	add	r7, sp, #0
 801419a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801419c:	4b06      	ldr	r3, [pc, #24]	; (80141b8 <vTaskInternalSetTimeOutState+0x24>)
 801419e:	681a      	ldr	r2, [r3, #0]
 80141a0:	687b      	ldr	r3, [r7, #4]
 80141a2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80141a4:	4b05      	ldr	r3, [pc, #20]	; (80141bc <vTaskInternalSetTimeOutState+0x28>)
 80141a6:	681a      	ldr	r2, [r3, #0]
 80141a8:	687b      	ldr	r3, [r7, #4]
 80141aa:	605a      	str	r2, [r3, #4]
}
 80141ac:	bf00      	nop
 80141ae:	370c      	adds	r7, #12
 80141b0:	46bd      	mov	sp, r7
 80141b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141b6:	4770      	bx	lr
 80141b8:	20003624 	.word	0x20003624
 80141bc:	20003610 	.word	0x20003610

080141c0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80141c0:	b580      	push	{r7, lr}
 80141c2:	b088      	sub	sp, #32
 80141c4:	af00      	add	r7, sp, #0
 80141c6:	6078      	str	r0, [r7, #4]
 80141c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80141ca:	687b      	ldr	r3, [r7, #4]
 80141cc:	2b00      	cmp	r3, #0
 80141ce:	d10a      	bne.n	80141e6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80141d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141d4:	f383 8811 	msr	BASEPRI, r3
 80141d8:	f3bf 8f6f 	isb	sy
 80141dc:	f3bf 8f4f 	dsb	sy
 80141e0:	613b      	str	r3, [r7, #16]
}
 80141e2:	bf00      	nop
 80141e4:	e7fe      	b.n	80141e4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80141e6:	683b      	ldr	r3, [r7, #0]
 80141e8:	2b00      	cmp	r3, #0
 80141ea:	d10a      	bne.n	8014202 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80141ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141f0:	f383 8811 	msr	BASEPRI, r3
 80141f4:	f3bf 8f6f 	isb	sy
 80141f8:	f3bf 8f4f 	dsb	sy
 80141fc:	60fb      	str	r3, [r7, #12]
}
 80141fe:	bf00      	nop
 8014200:	e7fe      	b.n	8014200 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8014202:	f001 f9bf 	bl	8015584 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8014206:	4b1d      	ldr	r3, [pc, #116]	; (801427c <xTaskCheckForTimeOut+0xbc>)
 8014208:	681b      	ldr	r3, [r3, #0]
 801420a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801420c:	687b      	ldr	r3, [r7, #4]
 801420e:	685b      	ldr	r3, [r3, #4]
 8014210:	69ba      	ldr	r2, [r7, #24]
 8014212:	1ad3      	subs	r3, r2, r3
 8014214:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8014216:	683b      	ldr	r3, [r7, #0]
 8014218:	681b      	ldr	r3, [r3, #0]
 801421a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801421e:	d102      	bne.n	8014226 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8014220:	2300      	movs	r3, #0
 8014222:	61fb      	str	r3, [r7, #28]
 8014224:	e023      	b.n	801426e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8014226:	687b      	ldr	r3, [r7, #4]
 8014228:	681a      	ldr	r2, [r3, #0]
 801422a:	4b15      	ldr	r3, [pc, #84]	; (8014280 <xTaskCheckForTimeOut+0xc0>)
 801422c:	681b      	ldr	r3, [r3, #0]
 801422e:	429a      	cmp	r2, r3
 8014230:	d007      	beq.n	8014242 <xTaskCheckForTimeOut+0x82>
 8014232:	687b      	ldr	r3, [r7, #4]
 8014234:	685b      	ldr	r3, [r3, #4]
 8014236:	69ba      	ldr	r2, [r7, #24]
 8014238:	429a      	cmp	r2, r3
 801423a:	d302      	bcc.n	8014242 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801423c:	2301      	movs	r3, #1
 801423e:	61fb      	str	r3, [r7, #28]
 8014240:	e015      	b.n	801426e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8014242:	683b      	ldr	r3, [r7, #0]
 8014244:	681b      	ldr	r3, [r3, #0]
 8014246:	697a      	ldr	r2, [r7, #20]
 8014248:	429a      	cmp	r2, r3
 801424a:	d20b      	bcs.n	8014264 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801424c:	683b      	ldr	r3, [r7, #0]
 801424e:	681a      	ldr	r2, [r3, #0]
 8014250:	697b      	ldr	r3, [r7, #20]
 8014252:	1ad2      	subs	r2, r2, r3
 8014254:	683b      	ldr	r3, [r7, #0]
 8014256:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8014258:	6878      	ldr	r0, [r7, #4]
 801425a:	f7ff ff9b 	bl	8014194 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801425e:	2300      	movs	r3, #0
 8014260:	61fb      	str	r3, [r7, #28]
 8014262:	e004      	b.n	801426e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8014264:	683b      	ldr	r3, [r7, #0]
 8014266:	2200      	movs	r2, #0
 8014268:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801426a:	2301      	movs	r3, #1
 801426c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801426e:	f001 f9b9 	bl	80155e4 <vPortExitCritical>

	return xReturn;
 8014272:	69fb      	ldr	r3, [r7, #28]
}
 8014274:	4618      	mov	r0, r3
 8014276:	3720      	adds	r7, #32
 8014278:	46bd      	mov	sp, r7
 801427a:	bd80      	pop	{r7, pc}
 801427c:	20003610 	.word	0x20003610
 8014280:	20003624 	.word	0x20003624

08014284 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8014284:	b480      	push	{r7}
 8014286:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8014288:	4b03      	ldr	r3, [pc, #12]	; (8014298 <vTaskMissedYield+0x14>)
 801428a:	2201      	movs	r2, #1
 801428c:	601a      	str	r2, [r3, #0]
}
 801428e:	bf00      	nop
 8014290:	46bd      	mov	sp, r7
 8014292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014296:	4770      	bx	lr
 8014298:	20003620 	.word	0x20003620

0801429c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801429c:	b580      	push	{r7, lr}
 801429e:	b082      	sub	sp, #8
 80142a0:	af00      	add	r7, sp, #0
 80142a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80142a4:	f000 f852 	bl	801434c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80142a8:	4b06      	ldr	r3, [pc, #24]	; (80142c4 <prvIdleTask+0x28>)
 80142aa:	681b      	ldr	r3, [r3, #0]
 80142ac:	2b01      	cmp	r3, #1
 80142ae:	d9f9      	bls.n	80142a4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80142b0:	4b05      	ldr	r3, [pc, #20]	; (80142c8 <prvIdleTask+0x2c>)
 80142b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80142b6:	601a      	str	r2, [r3, #0]
 80142b8:	f3bf 8f4f 	dsb	sy
 80142bc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80142c0:	e7f0      	b.n	80142a4 <prvIdleTask+0x8>
 80142c2:	bf00      	nop
 80142c4:	2000313c 	.word	0x2000313c
 80142c8:	e000ed04 	.word	0xe000ed04

080142cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80142cc:	b580      	push	{r7, lr}
 80142ce:	b082      	sub	sp, #8
 80142d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80142d2:	2300      	movs	r3, #0
 80142d4:	607b      	str	r3, [r7, #4]
 80142d6:	e00c      	b.n	80142f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80142d8:	687a      	ldr	r2, [r7, #4]
 80142da:	4613      	mov	r3, r2
 80142dc:	009b      	lsls	r3, r3, #2
 80142de:	4413      	add	r3, r2
 80142e0:	009b      	lsls	r3, r3, #2
 80142e2:	4a12      	ldr	r2, [pc, #72]	; (801432c <prvInitialiseTaskLists+0x60>)
 80142e4:	4413      	add	r3, r2
 80142e6:	4618      	mov	r0, r3
 80142e8:	f7fe f906 	bl	80124f8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	3301      	adds	r3, #1
 80142f0:	607b      	str	r3, [r7, #4]
 80142f2:	687b      	ldr	r3, [r7, #4]
 80142f4:	2b37      	cmp	r3, #55	; 0x37
 80142f6:	d9ef      	bls.n	80142d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80142f8:	480d      	ldr	r0, [pc, #52]	; (8014330 <prvInitialiseTaskLists+0x64>)
 80142fa:	f7fe f8fd 	bl	80124f8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80142fe:	480d      	ldr	r0, [pc, #52]	; (8014334 <prvInitialiseTaskLists+0x68>)
 8014300:	f7fe f8fa 	bl	80124f8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8014304:	480c      	ldr	r0, [pc, #48]	; (8014338 <prvInitialiseTaskLists+0x6c>)
 8014306:	f7fe f8f7 	bl	80124f8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801430a:	480c      	ldr	r0, [pc, #48]	; (801433c <prvInitialiseTaskLists+0x70>)
 801430c:	f7fe f8f4 	bl	80124f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8014310:	480b      	ldr	r0, [pc, #44]	; (8014340 <prvInitialiseTaskLists+0x74>)
 8014312:	f7fe f8f1 	bl	80124f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8014316:	4b0b      	ldr	r3, [pc, #44]	; (8014344 <prvInitialiseTaskLists+0x78>)
 8014318:	4a05      	ldr	r2, [pc, #20]	; (8014330 <prvInitialiseTaskLists+0x64>)
 801431a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801431c:	4b0a      	ldr	r3, [pc, #40]	; (8014348 <prvInitialiseTaskLists+0x7c>)
 801431e:	4a05      	ldr	r2, [pc, #20]	; (8014334 <prvInitialiseTaskLists+0x68>)
 8014320:	601a      	str	r2, [r3, #0]
}
 8014322:	bf00      	nop
 8014324:	3708      	adds	r7, #8
 8014326:	46bd      	mov	sp, r7
 8014328:	bd80      	pop	{r7, pc}
 801432a:	bf00      	nop
 801432c:	2000313c 	.word	0x2000313c
 8014330:	2000359c 	.word	0x2000359c
 8014334:	200035b0 	.word	0x200035b0
 8014338:	200035cc 	.word	0x200035cc
 801433c:	200035e0 	.word	0x200035e0
 8014340:	200035f8 	.word	0x200035f8
 8014344:	200035c4 	.word	0x200035c4
 8014348:	200035c8 	.word	0x200035c8

0801434c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801434c:	b580      	push	{r7, lr}
 801434e:	b082      	sub	sp, #8
 8014350:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014352:	e019      	b.n	8014388 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8014354:	f001 f916 	bl	8015584 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014358:	4b10      	ldr	r3, [pc, #64]	; (801439c <prvCheckTasksWaitingTermination+0x50>)
 801435a:	68db      	ldr	r3, [r3, #12]
 801435c:	68db      	ldr	r3, [r3, #12]
 801435e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	3304      	adds	r3, #4
 8014364:	4618      	mov	r0, r3
 8014366:	f7fe f951 	bl	801260c <uxListRemove>
				--uxCurrentNumberOfTasks;
 801436a:	4b0d      	ldr	r3, [pc, #52]	; (80143a0 <prvCheckTasksWaitingTermination+0x54>)
 801436c:	681b      	ldr	r3, [r3, #0]
 801436e:	3b01      	subs	r3, #1
 8014370:	4a0b      	ldr	r2, [pc, #44]	; (80143a0 <prvCheckTasksWaitingTermination+0x54>)
 8014372:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8014374:	4b0b      	ldr	r3, [pc, #44]	; (80143a4 <prvCheckTasksWaitingTermination+0x58>)
 8014376:	681b      	ldr	r3, [r3, #0]
 8014378:	3b01      	subs	r3, #1
 801437a:	4a0a      	ldr	r2, [pc, #40]	; (80143a4 <prvCheckTasksWaitingTermination+0x58>)
 801437c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801437e:	f001 f931 	bl	80155e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8014382:	6878      	ldr	r0, [r7, #4]
 8014384:	f000 f810 	bl	80143a8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014388:	4b06      	ldr	r3, [pc, #24]	; (80143a4 <prvCheckTasksWaitingTermination+0x58>)
 801438a:	681b      	ldr	r3, [r3, #0]
 801438c:	2b00      	cmp	r3, #0
 801438e:	d1e1      	bne.n	8014354 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8014390:	bf00      	nop
 8014392:	bf00      	nop
 8014394:	3708      	adds	r7, #8
 8014396:	46bd      	mov	sp, r7
 8014398:	bd80      	pop	{r7, pc}
 801439a:	bf00      	nop
 801439c:	200035e0 	.word	0x200035e0
 80143a0:	2000360c 	.word	0x2000360c
 80143a4:	200035f4 	.word	0x200035f4

080143a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80143a8:	b580      	push	{r7, lr}
 80143aa:	b084      	sub	sp, #16
 80143ac:	af00      	add	r7, sp, #0
 80143ae:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80143b6:	2b00      	cmp	r3, #0
 80143b8:	d108      	bne.n	80143cc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80143ba:	687b      	ldr	r3, [r7, #4]
 80143bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80143be:	4618      	mov	r0, r3
 80143c0:	f001 face 	bl	8015960 <vPortFree>
				vPortFree( pxTCB );
 80143c4:	6878      	ldr	r0, [r7, #4]
 80143c6:	f001 facb 	bl	8015960 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80143ca:	e018      	b.n	80143fe <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80143cc:	687b      	ldr	r3, [r7, #4]
 80143ce:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80143d2:	2b01      	cmp	r3, #1
 80143d4:	d103      	bne.n	80143de <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80143d6:	6878      	ldr	r0, [r7, #4]
 80143d8:	f001 fac2 	bl	8015960 <vPortFree>
	}
 80143dc:	e00f      	b.n	80143fe <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80143de:	687b      	ldr	r3, [r7, #4]
 80143e0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80143e4:	2b02      	cmp	r3, #2
 80143e6:	d00a      	beq.n	80143fe <prvDeleteTCB+0x56>
	__asm volatile
 80143e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143ec:	f383 8811 	msr	BASEPRI, r3
 80143f0:	f3bf 8f6f 	isb	sy
 80143f4:	f3bf 8f4f 	dsb	sy
 80143f8:	60fb      	str	r3, [r7, #12]
}
 80143fa:	bf00      	nop
 80143fc:	e7fe      	b.n	80143fc <prvDeleteTCB+0x54>
	}
 80143fe:	bf00      	nop
 8014400:	3710      	adds	r7, #16
 8014402:	46bd      	mov	sp, r7
 8014404:	bd80      	pop	{r7, pc}
	...

08014408 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8014408:	b480      	push	{r7}
 801440a:	b083      	sub	sp, #12
 801440c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801440e:	4b0c      	ldr	r3, [pc, #48]	; (8014440 <prvResetNextTaskUnblockTime+0x38>)
 8014410:	681b      	ldr	r3, [r3, #0]
 8014412:	681b      	ldr	r3, [r3, #0]
 8014414:	2b00      	cmp	r3, #0
 8014416:	d104      	bne.n	8014422 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8014418:	4b0a      	ldr	r3, [pc, #40]	; (8014444 <prvResetNextTaskUnblockTime+0x3c>)
 801441a:	f04f 32ff 	mov.w	r2, #4294967295
 801441e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8014420:	e008      	b.n	8014434 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014422:	4b07      	ldr	r3, [pc, #28]	; (8014440 <prvResetNextTaskUnblockTime+0x38>)
 8014424:	681b      	ldr	r3, [r3, #0]
 8014426:	68db      	ldr	r3, [r3, #12]
 8014428:	68db      	ldr	r3, [r3, #12]
 801442a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801442c:	687b      	ldr	r3, [r7, #4]
 801442e:	685b      	ldr	r3, [r3, #4]
 8014430:	4a04      	ldr	r2, [pc, #16]	; (8014444 <prvResetNextTaskUnblockTime+0x3c>)
 8014432:	6013      	str	r3, [r2, #0]
}
 8014434:	bf00      	nop
 8014436:	370c      	adds	r7, #12
 8014438:	46bd      	mov	sp, r7
 801443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801443e:	4770      	bx	lr
 8014440:	200035c4 	.word	0x200035c4
 8014444:	2000362c 	.word	0x2000362c

08014448 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8014448:	b480      	push	{r7}
 801444a:	b083      	sub	sp, #12
 801444c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 801444e:	4b05      	ldr	r3, [pc, #20]	; (8014464 <xTaskGetCurrentTaskHandle+0x1c>)
 8014450:	681b      	ldr	r3, [r3, #0]
 8014452:	607b      	str	r3, [r7, #4]

		return xReturn;
 8014454:	687b      	ldr	r3, [r7, #4]
	}
 8014456:	4618      	mov	r0, r3
 8014458:	370c      	adds	r7, #12
 801445a:	46bd      	mov	sp, r7
 801445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014460:	4770      	bx	lr
 8014462:	bf00      	nop
 8014464:	20003138 	.word	0x20003138

08014468 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8014468:	b480      	push	{r7}
 801446a:	b083      	sub	sp, #12
 801446c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801446e:	4b0b      	ldr	r3, [pc, #44]	; (801449c <xTaskGetSchedulerState+0x34>)
 8014470:	681b      	ldr	r3, [r3, #0]
 8014472:	2b00      	cmp	r3, #0
 8014474:	d102      	bne.n	801447c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8014476:	2301      	movs	r3, #1
 8014478:	607b      	str	r3, [r7, #4]
 801447a:	e008      	b.n	801448e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801447c:	4b08      	ldr	r3, [pc, #32]	; (80144a0 <xTaskGetSchedulerState+0x38>)
 801447e:	681b      	ldr	r3, [r3, #0]
 8014480:	2b00      	cmp	r3, #0
 8014482:	d102      	bne.n	801448a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8014484:	2302      	movs	r3, #2
 8014486:	607b      	str	r3, [r7, #4]
 8014488:	e001      	b.n	801448e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801448a:	2300      	movs	r3, #0
 801448c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801448e:	687b      	ldr	r3, [r7, #4]
	}
 8014490:	4618      	mov	r0, r3
 8014492:	370c      	adds	r7, #12
 8014494:	46bd      	mov	sp, r7
 8014496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801449a:	4770      	bx	lr
 801449c:	20003618 	.word	0x20003618
 80144a0:	20003634 	.word	0x20003634

080144a4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80144a4:	b580      	push	{r7, lr}
 80144a6:	b084      	sub	sp, #16
 80144a8:	af00      	add	r7, sp, #0
 80144aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80144ac:	687b      	ldr	r3, [r7, #4]
 80144ae:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80144b0:	2300      	movs	r3, #0
 80144b2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80144b4:	687b      	ldr	r3, [r7, #4]
 80144b6:	2b00      	cmp	r3, #0
 80144b8:	d051      	beq.n	801455e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80144ba:	68bb      	ldr	r3, [r7, #8]
 80144bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80144be:	4b2a      	ldr	r3, [pc, #168]	; (8014568 <xTaskPriorityInherit+0xc4>)
 80144c0:	681b      	ldr	r3, [r3, #0]
 80144c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80144c4:	429a      	cmp	r2, r3
 80144c6:	d241      	bcs.n	801454c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80144c8:	68bb      	ldr	r3, [r7, #8]
 80144ca:	699b      	ldr	r3, [r3, #24]
 80144cc:	2b00      	cmp	r3, #0
 80144ce:	db06      	blt.n	80144de <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80144d0:	4b25      	ldr	r3, [pc, #148]	; (8014568 <xTaskPriorityInherit+0xc4>)
 80144d2:	681b      	ldr	r3, [r3, #0]
 80144d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80144d6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80144da:	68bb      	ldr	r3, [r7, #8]
 80144dc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80144de:	68bb      	ldr	r3, [r7, #8]
 80144e0:	6959      	ldr	r1, [r3, #20]
 80144e2:	68bb      	ldr	r3, [r7, #8]
 80144e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80144e6:	4613      	mov	r3, r2
 80144e8:	009b      	lsls	r3, r3, #2
 80144ea:	4413      	add	r3, r2
 80144ec:	009b      	lsls	r3, r3, #2
 80144ee:	4a1f      	ldr	r2, [pc, #124]	; (801456c <xTaskPriorityInherit+0xc8>)
 80144f0:	4413      	add	r3, r2
 80144f2:	4299      	cmp	r1, r3
 80144f4:	d122      	bne.n	801453c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80144f6:	68bb      	ldr	r3, [r7, #8]
 80144f8:	3304      	adds	r3, #4
 80144fa:	4618      	mov	r0, r3
 80144fc:	f7fe f886 	bl	801260c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8014500:	4b19      	ldr	r3, [pc, #100]	; (8014568 <xTaskPriorityInherit+0xc4>)
 8014502:	681b      	ldr	r3, [r3, #0]
 8014504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014506:	68bb      	ldr	r3, [r7, #8]
 8014508:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801450a:	68bb      	ldr	r3, [r7, #8]
 801450c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801450e:	4b18      	ldr	r3, [pc, #96]	; (8014570 <xTaskPriorityInherit+0xcc>)
 8014510:	681b      	ldr	r3, [r3, #0]
 8014512:	429a      	cmp	r2, r3
 8014514:	d903      	bls.n	801451e <xTaskPriorityInherit+0x7a>
 8014516:	68bb      	ldr	r3, [r7, #8]
 8014518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801451a:	4a15      	ldr	r2, [pc, #84]	; (8014570 <xTaskPriorityInherit+0xcc>)
 801451c:	6013      	str	r3, [r2, #0]
 801451e:	68bb      	ldr	r3, [r7, #8]
 8014520:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014522:	4613      	mov	r3, r2
 8014524:	009b      	lsls	r3, r3, #2
 8014526:	4413      	add	r3, r2
 8014528:	009b      	lsls	r3, r3, #2
 801452a:	4a10      	ldr	r2, [pc, #64]	; (801456c <xTaskPriorityInherit+0xc8>)
 801452c:	441a      	add	r2, r3
 801452e:	68bb      	ldr	r3, [r7, #8]
 8014530:	3304      	adds	r3, #4
 8014532:	4619      	mov	r1, r3
 8014534:	4610      	mov	r0, r2
 8014536:	f7fe f80c 	bl	8012552 <vListInsertEnd>
 801453a:	e004      	b.n	8014546 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801453c:	4b0a      	ldr	r3, [pc, #40]	; (8014568 <xTaskPriorityInherit+0xc4>)
 801453e:	681b      	ldr	r3, [r3, #0]
 8014540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014542:	68bb      	ldr	r3, [r7, #8]
 8014544:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8014546:	2301      	movs	r3, #1
 8014548:	60fb      	str	r3, [r7, #12]
 801454a:	e008      	b.n	801455e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801454c:	68bb      	ldr	r3, [r7, #8]
 801454e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014550:	4b05      	ldr	r3, [pc, #20]	; (8014568 <xTaskPriorityInherit+0xc4>)
 8014552:	681b      	ldr	r3, [r3, #0]
 8014554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014556:	429a      	cmp	r2, r3
 8014558:	d201      	bcs.n	801455e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801455a:	2301      	movs	r3, #1
 801455c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801455e:	68fb      	ldr	r3, [r7, #12]
	}
 8014560:	4618      	mov	r0, r3
 8014562:	3710      	adds	r7, #16
 8014564:	46bd      	mov	sp, r7
 8014566:	bd80      	pop	{r7, pc}
 8014568:	20003138 	.word	0x20003138
 801456c:	2000313c 	.word	0x2000313c
 8014570:	20003614 	.word	0x20003614

08014574 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8014574:	b580      	push	{r7, lr}
 8014576:	b086      	sub	sp, #24
 8014578:	af00      	add	r7, sp, #0
 801457a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8014580:	2300      	movs	r3, #0
 8014582:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8014584:	687b      	ldr	r3, [r7, #4]
 8014586:	2b00      	cmp	r3, #0
 8014588:	d056      	beq.n	8014638 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801458a:	4b2e      	ldr	r3, [pc, #184]	; (8014644 <xTaskPriorityDisinherit+0xd0>)
 801458c:	681b      	ldr	r3, [r3, #0]
 801458e:	693a      	ldr	r2, [r7, #16]
 8014590:	429a      	cmp	r2, r3
 8014592:	d00a      	beq.n	80145aa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8014594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014598:	f383 8811 	msr	BASEPRI, r3
 801459c:	f3bf 8f6f 	isb	sy
 80145a0:	f3bf 8f4f 	dsb	sy
 80145a4:	60fb      	str	r3, [r7, #12]
}
 80145a6:	bf00      	nop
 80145a8:	e7fe      	b.n	80145a8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80145aa:	693b      	ldr	r3, [r7, #16]
 80145ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80145ae:	2b00      	cmp	r3, #0
 80145b0:	d10a      	bne.n	80145c8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80145b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145b6:	f383 8811 	msr	BASEPRI, r3
 80145ba:	f3bf 8f6f 	isb	sy
 80145be:	f3bf 8f4f 	dsb	sy
 80145c2:	60bb      	str	r3, [r7, #8]
}
 80145c4:	bf00      	nop
 80145c6:	e7fe      	b.n	80145c6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80145c8:	693b      	ldr	r3, [r7, #16]
 80145ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80145cc:	1e5a      	subs	r2, r3, #1
 80145ce:	693b      	ldr	r3, [r7, #16]
 80145d0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80145d2:	693b      	ldr	r3, [r7, #16]
 80145d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80145d6:	693b      	ldr	r3, [r7, #16]
 80145d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80145da:	429a      	cmp	r2, r3
 80145dc:	d02c      	beq.n	8014638 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80145de:	693b      	ldr	r3, [r7, #16]
 80145e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80145e2:	2b00      	cmp	r3, #0
 80145e4:	d128      	bne.n	8014638 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80145e6:	693b      	ldr	r3, [r7, #16]
 80145e8:	3304      	adds	r3, #4
 80145ea:	4618      	mov	r0, r3
 80145ec:	f7fe f80e 	bl	801260c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80145f0:	693b      	ldr	r3, [r7, #16]
 80145f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80145f4:	693b      	ldr	r3, [r7, #16]
 80145f6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80145f8:	693b      	ldr	r3, [r7, #16]
 80145fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80145fc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8014600:	693b      	ldr	r3, [r7, #16]
 8014602:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8014604:	693b      	ldr	r3, [r7, #16]
 8014606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014608:	4b0f      	ldr	r3, [pc, #60]	; (8014648 <xTaskPriorityDisinherit+0xd4>)
 801460a:	681b      	ldr	r3, [r3, #0]
 801460c:	429a      	cmp	r2, r3
 801460e:	d903      	bls.n	8014618 <xTaskPriorityDisinherit+0xa4>
 8014610:	693b      	ldr	r3, [r7, #16]
 8014612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014614:	4a0c      	ldr	r2, [pc, #48]	; (8014648 <xTaskPriorityDisinherit+0xd4>)
 8014616:	6013      	str	r3, [r2, #0]
 8014618:	693b      	ldr	r3, [r7, #16]
 801461a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801461c:	4613      	mov	r3, r2
 801461e:	009b      	lsls	r3, r3, #2
 8014620:	4413      	add	r3, r2
 8014622:	009b      	lsls	r3, r3, #2
 8014624:	4a09      	ldr	r2, [pc, #36]	; (801464c <xTaskPriorityDisinherit+0xd8>)
 8014626:	441a      	add	r2, r3
 8014628:	693b      	ldr	r3, [r7, #16]
 801462a:	3304      	adds	r3, #4
 801462c:	4619      	mov	r1, r3
 801462e:	4610      	mov	r0, r2
 8014630:	f7fd ff8f 	bl	8012552 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8014634:	2301      	movs	r3, #1
 8014636:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014638:	697b      	ldr	r3, [r7, #20]
	}
 801463a:	4618      	mov	r0, r3
 801463c:	3718      	adds	r7, #24
 801463e:	46bd      	mov	sp, r7
 8014640:	bd80      	pop	{r7, pc}
 8014642:	bf00      	nop
 8014644:	20003138 	.word	0x20003138
 8014648:	20003614 	.word	0x20003614
 801464c:	2000313c 	.word	0x2000313c

08014650 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8014650:	b580      	push	{r7, lr}
 8014652:	b088      	sub	sp, #32
 8014654:	af00      	add	r7, sp, #0
 8014656:	6078      	str	r0, [r7, #4]
 8014658:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801465a:	687b      	ldr	r3, [r7, #4]
 801465c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801465e:	2301      	movs	r3, #1
 8014660:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8014662:	687b      	ldr	r3, [r7, #4]
 8014664:	2b00      	cmp	r3, #0
 8014666:	d06a      	beq.n	801473e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8014668:	69bb      	ldr	r3, [r7, #24]
 801466a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801466c:	2b00      	cmp	r3, #0
 801466e:	d10a      	bne.n	8014686 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8014670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014674:	f383 8811 	msr	BASEPRI, r3
 8014678:	f3bf 8f6f 	isb	sy
 801467c:	f3bf 8f4f 	dsb	sy
 8014680:	60fb      	str	r3, [r7, #12]
}
 8014682:	bf00      	nop
 8014684:	e7fe      	b.n	8014684 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8014686:	69bb      	ldr	r3, [r7, #24]
 8014688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801468a:	683a      	ldr	r2, [r7, #0]
 801468c:	429a      	cmp	r2, r3
 801468e:	d902      	bls.n	8014696 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8014690:	683b      	ldr	r3, [r7, #0]
 8014692:	61fb      	str	r3, [r7, #28]
 8014694:	e002      	b.n	801469c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8014696:	69bb      	ldr	r3, [r7, #24]
 8014698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801469a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801469c:	69bb      	ldr	r3, [r7, #24]
 801469e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80146a0:	69fa      	ldr	r2, [r7, #28]
 80146a2:	429a      	cmp	r2, r3
 80146a4:	d04b      	beq.n	801473e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80146a6:	69bb      	ldr	r3, [r7, #24]
 80146a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80146aa:	697a      	ldr	r2, [r7, #20]
 80146ac:	429a      	cmp	r2, r3
 80146ae:	d146      	bne.n	801473e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80146b0:	4b25      	ldr	r3, [pc, #148]	; (8014748 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80146b2:	681b      	ldr	r3, [r3, #0]
 80146b4:	69ba      	ldr	r2, [r7, #24]
 80146b6:	429a      	cmp	r2, r3
 80146b8:	d10a      	bne.n	80146d0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80146ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146be:	f383 8811 	msr	BASEPRI, r3
 80146c2:	f3bf 8f6f 	isb	sy
 80146c6:	f3bf 8f4f 	dsb	sy
 80146ca:	60bb      	str	r3, [r7, #8]
}
 80146cc:	bf00      	nop
 80146ce:	e7fe      	b.n	80146ce <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80146d0:	69bb      	ldr	r3, [r7, #24]
 80146d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80146d4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80146d6:	69bb      	ldr	r3, [r7, #24]
 80146d8:	69fa      	ldr	r2, [r7, #28]
 80146da:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80146dc:	69bb      	ldr	r3, [r7, #24]
 80146de:	699b      	ldr	r3, [r3, #24]
 80146e0:	2b00      	cmp	r3, #0
 80146e2:	db04      	blt.n	80146ee <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80146e4:	69fb      	ldr	r3, [r7, #28]
 80146e6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80146ea:	69bb      	ldr	r3, [r7, #24]
 80146ec:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80146ee:	69bb      	ldr	r3, [r7, #24]
 80146f0:	6959      	ldr	r1, [r3, #20]
 80146f2:	693a      	ldr	r2, [r7, #16]
 80146f4:	4613      	mov	r3, r2
 80146f6:	009b      	lsls	r3, r3, #2
 80146f8:	4413      	add	r3, r2
 80146fa:	009b      	lsls	r3, r3, #2
 80146fc:	4a13      	ldr	r2, [pc, #76]	; (801474c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80146fe:	4413      	add	r3, r2
 8014700:	4299      	cmp	r1, r3
 8014702:	d11c      	bne.n	801473e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014704:	69bb      	ldr	r3, [r7, #24]
 8014706:	3304      	adds	r3, #4
 8014708:	4618      	mov	r0, r3
 801470a:	f7fd ff7f 	bl	801260c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801470e:	69bb      	ldr	r3, [r7, #24]
 8014710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014712:	4b0f      	ldr	r3, [pc, #60]	; (8014750 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8014714:	681b      	ldr	r3, [r3, #0]
 8014716:	429a      	cmp	r2, r3
 8014718:	d903      	bls.n	8014722 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 801471a:	69bb      	ldr	r3, [r7, #24]
 801471c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801471e:	4a0c      	ldr	r2, [pc, #48]	; (8014750 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8014720:	6013      	str	r3, [r2, #0]
 8014722:	69bb      	ldr	r3, [r7, #24]
 8014724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014726:	4613      	mov	r3, r2
 8014728:	009b      	lsls	r3, r3, #2
 801472a:	4413      	add	r3, r2
 801472c:	009b      	lsls	r3, r3, #2
 801472e:	4a07      	ldr	r2, [pc, #28]	; (801474c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8014730:	441a      	add	r2, r3
 8014732:	69bb      	ldr	r3, [r7, #24]
 8014734:	3304      	adds	r3, #4
 8014736:	4619      	mov	r1, r3
 8014738:	4610      	mov	r0, r2
 801473a:	f7fd ff0a 	bl	8012552 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801473e:	bf00      	nop
 8014740:	3720      	adds	r7, #32
 8014742:	46bd      	mov	sp, r7
 8014744:	bd80      	pop	{r7, pc}
 8014746:	bf00      	nop
 8014748:	20003138 	.word	0x20003138
 801474c:	2000313c 	.word	0x2000313c
 8014750:	20003614 	.word	0x20003614

08014754 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8014754:	b480      	push	{r7}
 8014756:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8014758:	4b07      	ldr	r3, [pc, #28]	; (8014778 <pvTaskIncrementMutexHeldCount+0x24>)
 801475a:	681b      	ldr	r3, [r3, #0]
 801475c:	2b00      	cmp	r3, #0
 801475e:	d004      	beq.n	801476a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8014760:	4b05      	ldr	r3, [pc, #20]	; (8014778 <pvTaskIncrementMutexHeldCount+0x24>)
 8014762:	681b      	ldr	r3, [r3, #0]
 8014764:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014766:	3201      	adds	r2, #1
 8014768:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 801476a:	4b03      	ldr	r3, [pc, #12]	; (8014778 <pvTaskIncrementMutexHeldCount+0x24>)
 801476c:	681b      	ldr	r3, [r3, #0]
	}
 801476e:	4618      	mov	r0, r3
 8014770:	46bd      	mov	sp, r7
 8014772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014776:	4770      	bx	lr
 8014778:	20003138 	.word	0x20003138

0801477c <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 801477c:	b580      	push	{r7, lr}
 801477e:	b084      	sub	sp, #16
 8014780:	af00      	add	r7, sp, #0
 8014782:	6078      	str	r0, [r7, #4]
 8014784:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8014786:	f000 fefd 	bl	8015584 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 801478a:	4b1e      	ldr	r3, [pc, #120]	; (8014804 <ulTaskNotifyTake+0x88>)
 801478c:	681b      	ldr	r3, [r3, #0]
 801478e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014790:	2b00      	cmp	r3, #0
 8014792:	d113      	bne.n	80147bc <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8014794:	4b1b      	ldr	r3, [pc, #108]	; (8014804 <ulTaskNotifyTake+0x88>)
 8014796:	681b      	ldr	r3, [r3, #0]
 8014798:	2201      	movs	r2, #1
 801479a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 801479e:	683b      	ldr	r3, [r7, #0]
 80147a0:	2b00      	cmp	r3, #0
 80147a2:	d00b      	beq.n	80147bc <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80147a4:	2101      	movs	r1, #1
 80147a6:	6838      	ldr	r0, [r7, #0]
 80147a8:	f000 f9c4 	bl	8014b34 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80147ac:	4b16      	ldr	r3, [pc, #88]	; (8014808 <ulTaskNotifyTake+0x8c>)
 80147ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80147b2:	601a      	str	r2, [r3, #0]
 80147b4:	f3bf 8f4f 	dsb	sy
 80147b8:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80147bc:	f000 ff12 	bl	80155e4 <vPortExitCritical>

		taskENTER_CRITICAL();
 80147c0:	f000 fee0 	bl	8015584 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 80147c4:	4b0f      	ldr	r3, [pc, #60]	; (8014804 <ulTaskNotifyTake+0x88>)
 80147c6:	681b      	ldr	r3, [r3, #0]
 80147c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80147ca:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 80147cc:	68fb      	ldr	r3, [r7, #12]
 80147ce:	2b00      	cmp	r3, #0
 80147d0:	d00c      	beq.n	80147ec <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 80147d2:	687b      	ldr	r3, [r7, #4]
 80147d4:	2b00      	cmp	r3, #0
 80147d6:	d004      	beq.n	80147e2 <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 80147d8:	4b0a      	ldr	r3, [pc, #40]	; (8014804 <ulTaskNotifyTake+0x88>)
 80147da:	681b      	ldr	r3, [r3, #0]
 80147dc:	2200      	movs	r2, #0
 80147de:	655a      	str	r2, [r3, #84]	; 0x54
 80147e0:	e004      	b.n	80147ec <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 80147e2:	4b08      	ldr	r3, [pc, #32]	; (8014804 <ulTaskNotifyTake+0x88>)
 80147e4:	681b      	ldr	r3, [r3, #0]
 80147e6:	68fa      	ldr	r2, [r7, #12]
 80147e8:	3a01      	subs	r2, #1
 80147ea:	655a      	str	r2, [r3, #84]	; 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80147ec:	4b05      	ldr	r3, [pc, #20]	; (8014804 <ulTaskNotifyTake+0x88>)
 80147ee:	681b      	ldr	r3, [r3, #0]
 80147f0:	2200      	movs	r2, #0
 80147f2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 80147f6:	f000 fef5 	bl	80155e4 <vPortExitCritical>

		return ulReturn;
 80147fa:	68fb      	ldr	r3, [r7, #12]
	}
 80147fc:	4618      	mov	r0, r3
 80147fe:	3710      	adds	r7, #16
 8014800:	46bd      	mov	sp, r7
 8014802:	bd80      	pop	{r7, pc}
 8014804:	20003138 	.word	0x20003138
 8014808:	e000ed04 	.word	0xe000ed04

0801480c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 801480c:	b580      	push	{r7, lr}
 801480e:	b08a      	sub	sp, #40	; 0x28
 8014810:	af00      	add	r7, sp, #0
 8014812:	60f8      	str	r0, [r7, #12]
 8014814:	60b9      	str	r1, [r7, #8]
 8014816:	603b      	str	r3, [r7, #0]
 8014818:	4613      	mov	r3, r2
 801481a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 801481c:	2301      	movs	r3, #1
 801481e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8014820:	68fb      	ldr	r3, [r7, #12]
 8014822:	2b00      	cmp	r3, #0
 8014824:	d10a      	bne.n	801483c <xTaskGenericNotify+0x30>
	__asm volatile
 8014826:	f04f 0350 	mov.w	r3, #80	; 0x50
 801482a:	f383 8811 	msr	BASEPRI, r3
 801482e:	f3bf 8f6f 	isb	sy
 8014832:	f3bf 8f4f 	dsb	sy
 8014836:	61bb      	str	r3, [r7, #24]
}
 8014838:	bf00      	nop
 801483a:	e7fe      	b.n	801483a <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 801483c:	68fb      	ldr	r3, [r7, #12]
 801483e:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8014840:	f000 fea0 	bl	8015584 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8014844:	683b      	ldr	r3, [r7, #0]
 8014846:	2b00      	cmp	r3, #0
 8014848:	d003      	beq.n	8014852 <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 801484a:	6a3b      	ldr	r3, [r7, #32]
 801484c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801484e:	683b      	ldr	r3, [r7, #0]
 8014850:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8014852:	6a3b      	ldr	r3, [r7, #32]
 8014854:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8014858:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 801485a:	6a3b      	ldr	r3, [r7, #32]
 801485c:	2202      	movs	r2, #2
 801485e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8014862:	79fb      	ldrb	r3, [r7, #7]
 8014864:	2b04      	cmp	r3, #4
 8014866:	d828      	bhi.n	80148ba <xTaskGenericNotify+0xae>
 8014868:	a201      	add	r2, pc, #4	; (adr r2, 8014870 <xTaskGenericNotify+0x64>)
 801486a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801486e:	bf00      	nop
 8014870:	080148db 	.word	0x080148db
 8014874:	08014885 	.word	0x08014885
 8014878:	08014893 	.word	0x08014893
 801487c:	0801489f 	.word	0x0801489f
 8014880:	080148a7 	.word	0x080148a7
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8014884:	6a3b      	ldr	r3, [r7, #32]
 8014886:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014888:	68bb      	ldr	r3, [r7, #8]
 801488a:	431a      	orrs	r2, r3
 801488c:	6a3b      	ldr	r3, [r7, #32]
 801488e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8014890:	e026      	b.n	80148e0 <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8014892:	6a3b      	ldr	r3, [r7, #32]
 8014894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014896:	1c5a      	adds	r2, r3, #1
 8014898:	6a3b      	ldr	r3, [r7, #32]
 801489a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 801489c:	e020      	b.n	80148e0 <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 801489e:	6a3b      	ldr	r3, [r7, #32]
 80148a0:	68ba      	ldr	r2, [r7, #8]
 80148a2:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80148a4:	e01c      	b.n	80148e0 <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80148a6:	7ffb      	ldrb	r3, [r7, #31]
 80148a8:	2b02      	cmp	r3, #2
 80148aa:	d003      	beq.n	80148b4 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80148ac:	6a3b      	ldr	r3, [r7, #32]
 80148ae:	68ba      	ldr	r2, [r7, #8]
 80148b0:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80148b2:	e015      	b.n	80148e0 <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 80148b4:	2300      	movs	r3, #0
 80148b6:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80148b8:	e012      	b.n	80148e0 <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80148ba:	6a3b      	ldr	r3, [r7, #32]
 80148bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80148be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80148c2:	d00c      	beq.n	80148de <xTaskGenericNotify+0xd2>
	__asm volatile
 80148c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80148c8:	f383 8811 	msr	BASEPRI, r3
 80148cc:	f3bf 8f6f 	isb	sy
 80148d0:	f3bf 8f4f 	dsb	sy
 80148d4:	617b      	str	r3, [r7, #20]
}
 80148d6:	bf00      	nop
 80148d8:	e7fe      	b.n	80148d8 <xTaskGenericNotify+0xcc>
					break;
 80148da:	bf00      	nop
 80148dc:	e000      	b.n	80148e0 <xTaskGenericNotify+0xd4>

					break;
 80148de:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80148e0:	7ffb      	ldrb	r3, [r7, #31]
 80148e2:	2b01      	cmp	r3, #1
 80148e4:	d13a      	bne.n	801495c <xTaskGenericNotify+0x150>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80148e6:	6a3b      	ldr	r3, [r7, #32]
 80148e8:	3304      	adds	r3, #4
 80148ea:	4618      	mov	r0, r3
 80148ec:	f7fd fe8e 	bl	801260c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80148f0:	6a3b      	ldr	r3, [r7, #32]
 80148f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80148f4:	4b1d      	ldr	r3, [pc, #116]	; (801496c <xTaskGenericNotify+0x160>)
 80148f6:	681b      	ldr	r3, [r3, #0]
 80148f8:	429a      	cmp	r2, r3
 80148fa:	d903      	bls.n	8014904 <xTaskGenericNotify+0xf8>
 80148fc:	6a3b      	ldr	r3, [r7, #32]
 80148fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014900:	4a1a      	ldr	r2, [pc, #104]	; (801496c <xTaskGenericNotify+0x160>)
 8014902:	6013      	str	r3, [r2, #0]
 8014904:	6a3b      	ldr	r3, [r7, #32]
 8014906:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014908:	4613      	mov	r3, r2
 801490a:	009b      	lsls	r3, r3, #2
 801490c:	4413      	add	r3, r2
 801490e:	009b      	lsls	r3, r3, #2
 8014910:	4a17      	ldr	r2, [pc, #92]	; (8014970 <xTaskGenericNotify+0x164>)
 8014912:	441a      	add	r2, r3
 8014914:	6a3b      	ldr	r3, [r7, #32]
 8014916:	3304      	adds	r3, #4
 8014918:	4619      	mov	r1, r3
 801491a:	4610      	mov	r0, r2
 801491c:	f7fd fe19 	bl	8012552 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8014920:	6a3b      	ldr	r3, [r7, #32]
 8014922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014924:	2b00      	cmp	r3, #0
 8014926:	d00a      	beq.n	801493e <xTaskGenericNotify+0x132>
	__asm volatile
 8014928:	f04f 0350 	mov.w	r3, #80	; 0x50
 801492c:	f383 8811 	msr	BASEPRI, r3
 8014930:	f3bf 8f6f 	isb	sy
 8014934:	f3bf 8f4f 	dsb	sy
 8014938:	613b      	str	r3, [r7, #16]
}
 801493a:	bf00      	nop
 801493c:	e7fe      	b.n	801493c <xTaskGenericNotify+0x130>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 801493e:	6a3b      	ldr	r3, [r7, #32]
 8014940:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014942:	4b0c      	ldr	r3, [pc, #48]	; (8014974 <xTaskGenericNotify+0x168>)
 8014944:	681b      	ldr	r3, [r3, #0]
 8014946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014948:	429a      	cmp	r2, r3
 801494a:	d907      	bls.n	801495c <xTaskGenericNotify+0x150>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 801494c:	4b0a      	ldr	r3, [pc, #40]	; (8014978 <xTaskGenericNotify+0x16c>)
 801494e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014952:	601a      	str	r2, [r3, #0]
 8014954:	f3bf 8f4f 	dsb	sy
 8014958:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801495c:	f000 fe42 	bl	80155e4 <vPortExitCritical>

		return xReturn;
 8014960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8014962:	4618      	mov	r0, r3
 8014964:	3728      	adds	r7, #40	; 0x28
 8014966:	46bd      	mov	sp, r7
 8014968:	bd80      	pop	{r7, pc}
 801496a:	bf00      	nop
 801496c:	20003614 	.word	0x20003614
 8014970:	2000313c 	.word	0x2000313c
 8014974:	20003138 	.word	0x20003138
 8014978:	e000ed04 	.word	0xe000ed04

0801497c <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 801497c:	b580      	push	{r7, lr}
 801497e:	b08e      	sub	sp, #56	; 0x38
 8014980:	af00      	add	r7, sp, #0
 8014982:	60f8      	str	r0, [r7, #12]
 8014984:	60b9      	str	r1, [r7, #8]
 8014986:	603b      	str	r3, [r7, #0]
 8014988:	4613      	mov	r3, r2
 801498a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 801498c:	2301      	movs	r3, #1
 801498e:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8014990:	68fb      	ldr	r3, [r7, #12]
 8014992:	2b00      	cmp	r3, #0
 8014994:	d10a      	bne.n	80149ac <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8014996:	f04f 0350 	mov.w	r3, #80	; 0x50
 801499a:	f383 8811 	msr	BASEPRI, r3
 801499e:	f3bf 8f6f 	isb	sy
 80149a2:	f3bf 8f4f 	dsb	sy
 80149a6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80149a8:	bf00      	nop
 80149aa:	e7fe      	b.n	80149aa <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80149ac:	f000 fecc 	bl	8015748 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80149b0:	68fb      	ldr	r3, [r7, #12]
 80149b2:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 80149b4:	f3ef 8211 	mrs	r2, BASEPRI
 80149b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149bc:	f383 8811 	msr	BASEPRI, r3
 80149c0:	f3bf 8f6f 	isb	sy
 80149c4:	f3bf 8f4f 	dsb	sy
 80149c8:	623a      	str	r2, [r7, #32]
 80149ca:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 80149cc:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80149ce:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 80149d0:	683b      	ldr	r3, [r7, #0]
 80149d2:	2b00      	cmp	r3, #0
 80149d4:	d003      	beq.n	80149de <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80149d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80149da:	683b      	ldr	r3, [r7, #0]
 80149dc:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80149de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149e0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80149e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80149e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149ea:	2202      	movs	r2, #2
 80149ec:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 80149f0:	79fb      	ldrb	r3, [r7, #7]
 80149f2:	2b04      	cmp	r3, #4
 80149f4:	d828      	bhi.n	8014a48 <xTaskGenericNotifyFromISR+0xcc>
 80149f6:	a201      	add	r2, pc, #4	; (adr r2, 80149fc <xTaskGenericNotifyFromISR+0x80>)
 80149f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80149fc:	08014a69 	.word	0x08014a69
 8014a00:	08014a11 	.word	0x08014a11
 8014a04:	08014a1f 	.word	0x08014a1f
 8014a08:	08014a2b 	.word	0x08014a2b
 8014a0c:	08014a33 	.word	0x08014a33
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8014a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a12:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014a14:	68bb      	ldr	r3, [r7, #8]
 8014a16:	431a      	orrs	r2, r3
 8014a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a1a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8014a1c:	e027      	b.n	8014a6e <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8014a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014a22:	1c5a      	adds	r2, r3, #1
 8014a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a26:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8014a28:	e021      	b.n	8014a6e <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8014a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a2c:	68ba      	ldr	r2, [r7, #8]
 8014a2e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8014a30:	e01d      	b.n	8014a6e <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8014a32:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8014a36:	2b02      	cmp	r3, #2
 8014a38:	d003      	beq.n	8014a42 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8014a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a3c:	68ba      	ldr	r2, [r7, #8]
 8014a3e:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8014a40:	e015      	b.n	8014a6e <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 8014a42:	2300      	movs	r3, #0
 8014a44:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8014a46:	e012      	b.n	8014a6e <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8014a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014a50:	d00c      	beq.n	8014a6c <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 8014a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a56:	f383 8811 	msr	BASEPRI, r3
 8014a5a:	f3bf 8f6f 	isb	sy
 8014a5e:	f3bf 8f4f 	dsb	sy
 8014a62:	61bb      	str	r3, [r7, #24]
}
 8014a64:	bf00      	nop
 8014a66:	e7fe      	b.n	8014a66 <xTaskGenericNotifyFromISR+0xea>
					break;
 8014a68:	bf00      	nop
 8014a6a:	e000      	b.n	8014a6e <xTaskGenericNotifyFromISR+0xf2>
					break;
 8014a6c:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8014a6e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8014a72:	2b01      	cmp	r3, #1
 8014a74:	d146      	bne.n	8014b04 <xTaskGenericNotifyFromISR+0x188>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8014a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014a7a:	2b00      	cmp	r3, #0
 8014a7c:	d00a      	beq.n	8014a94 <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 8014a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a82:	f383 8811 	msr	BASEPRI, r3
 8014a86:	f3bf 8f6f 	isb	sy
 8014a8a:	f3bf 8f4f 	dsb	sy
 8014a8e:	617b      	str	r3, [r7, #20]
}
 8014a90:	bf00      	nop
 8014a92:	e7fe      	b.n	8014a92 <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014a94:	4b21      	ldr	r3, [pc, #132]	; (8014b1c <xTaskGenericNotifyFromISR+0x1a0>)
 8014a96:	681b      	ldr	r3, [r3, #0]
 8014a98:	2b00      	cmp	r3, #0
 8014a9a:	d11d      	bne.n	8014ad8 <xTaskGenericNotifyFromISR+0x15c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a9e:	3304      	adds	r3, #4
 8014aa0:	4618      	mov	r0, r3
 8014aa2:	f7fd fdb3 	bl	801260c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014aa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014aaa:	4b1d      	ldr	r3, [pc, #116]	; (8014b20 <xTaskGenericNotifyFromISR+0x1a4>)
 8014aac:	681b      	ldr	r3, [r3, #0]
 8014aae:	429a      	cmp	r2, r3
 8014ab0:	d903      	bls.n	8014aba <xTaskGenericNotifyFromISR+0x13e>
 8014ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014ab6:	4a1a      	ldr	r2, [pc, #104]	; (8014b20 <xTaskGenericNotifyFromISR+0x1a4>)
 8014ab8:	6013      	str	r3, [r2, #0]
 8014aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014abc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014abe:	4613      	mov	r3, r2
 8014ac0:	009b      	lsls	r3, r3, #2
 8014ac2:	4413      	add	r3, r2
 8014ac4:	009b      	lsls	r3, r3, #2
 8014ac6:	4a17      	ldr	r2, [pc, #92]	; (8014b24 <xTaskGenericNotifyFromISR+0x1a8>)
 8014ac8:	441a      	add	r2, r3
 8014aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014acc:	3304      	adds	r3, #4
 8014ace:	4619      	mov	r1, r3
 8014ad0:	4610      	mov	r0, r2
 8014ad2:	f7fd fd3e 	bl	8012552 <vListInsertEnd>
 8014ad6:	e005      	b.n	8014ae4 <xTaskGenericNotifyFromISR+0x168>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8014ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ada:	3318      	adds	r3, #24
 8014adc:	4619      	mov	r1, r3
 8014ade:	4812      	ldr	r0, [pc, #72]	; (8014b28 <xTaskGenericNotifyFromISR+0x1ac>)
 8014ae0:	f7fd fd37 	bl	8012552 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014ae8:	4b10      	ldr	r3, [pc, #64]	; (8014b2c <xTaskGenericNotifyFromISR+0x1b0>)
 8014aea:	681b      	ldr	r3, [r3, #0]
 8014aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014aee:	429a      	cmp	r2, r3
 8014af0:	d908      	bls.n	8014b04 <xTaskGenericNotifyFromISR+0x188>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8014af2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014af4:	2b00      	cmp	r3, #0
 8014af6:	d002      	beq.n	8014afe <xTaskGenericNotifyFromISR+0x182>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8014af8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014afa:	2201      	movs	r2, #1
 8014afc:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8014afe:	4b0c      	ldr	r3, [pc, #48]	; (8014b30 <xTaskGenericNotifyFromISR+0x1b4>)
 8014b00:	2201      	movs	r2, #1
 8014b02:	601a      	str	r2, [r3, #0]
 8014b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b06:	613b      	str	r3, [r7, #16]
	__asm volatile
 8014b08:	693b      	ldr	r3, [r7, #16]
 8014b0a:	f383 8811 	msr	BASEPRI, r3
}
 8014b0e:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8014b10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8014b12:	4618      	mov	r0, r3
 8014b14:	3738      	adds	r7, #56	; 0x38
 8014b16:	46bd      	mov	sp, r7
 8014b18:	bd80      	pop	{r7, pc}
 8014b1a:	bf00      	nop
 8014b1c:	20003634 	.word	0x20003634
 8014b20:	20003614 	.word	0x20003614
 8014b24:	2000313c 	.word	0x2000313c
 8014b28:	200035cc 	.word	0x200035cc
 8014b2c:	20003138 	.word	0x20003138
 8014b30:	20003620 	.word	0x20003620

08014b34 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8014b34:	b580      	push	{r7, lr}
 8014b36:	b084      	sub	sp, #16
 8014b38:	af00      	add	r7, sp, #0
 8014b3a:	6078      	str	r0, [r7, #4]
 8014b3c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8014b3e:	4b21      	ldr	r3, [pc, #132]	; (8014bc4 <prvAddCurrentTaskToDelayedList+0x90>)
 8014b40:	681b      	ldr	r3, [r3, #0]
 8014b42:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014b44:	4b20      	ldr	r3, [pc, #128]	; (8014bc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8014b46:	681b      	ldr	r3, [r3, #0]
 8014b48:	3304      	adds	r3, #4
 8014b4a:	4618      	mov	r0, r3
 8014b4c:	f7fd fd5e 	bl	801260c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8014b50:	687b      	ldr	r3, [r7, #4]
 8014b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014b56:	d10a      	bne.n	8014b6e <prvAddCurrentTaskToDelayedList+0x3a>
 8014b58:	683b      	ldr	r3, [r7, #0]
 8014b5a:	2b00      	cmp	r3, #0
 8014b5c:	d007      	beq.n	8014b6e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014b5e:	4b1a      	ldr	r3, [pc, #104]	; (8014bc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8014b60:	681b      	ldr	r3, [r3, #0]
 8014b62:	3304      	adds	r3, #4
 8014b64:	4619      	mov	r1, r3
 8014b66:	4819      	ldr	r0, [pc, #100]	; (8014bcc <prvAddCurrentTaskToDelayedList+0x98>)
 8014b68:	f7fd fcf3 	bl	8012552 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8014b6c:	e026      	b.n	8014bbc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8014b6e:	68fa      	ldr	r2, [r7, #12]
 8014b70:	687b      	ldr	r3, [r7, #4]
 8014b72:	4413      	add	r3, r2
 8014b74:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8014b76:	4b14      	ldr	r3, [pc, #80]	; (8014bc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8014b78:	681b      	ldr	r3, [r3, #0]
 8014b7a:	68ba      	ldr	r2, [r7, #8]
 8014b7c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8014b7e:	68ba      	ldr	r2, [r7, #8]
 8014b80:	68fb      	ldr	r3, [r7, #12]
 8014b82:	429a      	cmp	r2, r3
 8014b84:	d209      	bcs.n	8014b9a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014b86:	4b12      	ldr	r3, [pc, #72]	; (8014bd0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8014b88:	681a      	ldr	r2, [r3, #0]
 8014b8a:	4b0f      	ldr	r3, [pc, #60]	; (8014bc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8014b8c:	681b      	ldr	r3, [r3, #0]
 8014b8e:	3304      	adds	r3, #4
 8014b90:	4619      	mov	r1, r3
 8014b92:	4610      	mov	r0, r2
 8014b94:	f7fd fd01 	bl	801259a <vListInsert>
}
 8014b98:	e010      	b.n	8014bbc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014b9a:	4b0e      	ldr	r3, [pc, #56]	; (8014bd4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8014b9c:	681a      	ldr	r2, [r3, #0]
 8014b9e:	4b0a      	ldr	r3, [pc, #40]	; (8014bc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8014ba0:	681b      	ldr	r3, [r3, #0]
 8014ba2:	3304      	adds	r3, #4
 8014ba4:	4619      	mov	r1, r3
 8014ba6:	4610      	mov	r0, r2
 8014ba8:	f7fd fcf7 	bl	801259a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8014bac:	4b0a      	ldr	r3, [pc, #40]	; (8014bd8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8014bae:	681b      	ldr	r3, [r3, #0]
 8014bb0:	68ba      	ldr	r2, [r7, #8]
 8014bb2:	429a      	cmp	r2, r3
 8014bb4:	d202      	bcs.n	8014bbc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8014bb6:	4a08      	ldr	r2, [pc, #32]	; (8014bd8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8014bb8:	68bb      	ldr	r3, [r7, #8]
 8014bba:	6013      	str	r3, [r2, #0]
}
 8014bbc:	bf00      	nop
 8014bbe:	3710      	adds	r7, #16
 8014bc0:	46bd      	mov	sp, r7
 8014bc2:	bd80      	pop	{r7, pc}
 8014bc4:	20003610 	.word	0x20003610
 8014bc8:	20003138 	.word	0x20003138
 8014bcc:	200035f8 	.word	0x200035f8
 8014bd0:	200035c8 	.word	0x200035c8
 8014bd4:	200035c4 	.word	0x200035c4
 8014bd8:	2000362c 	.word	0x2000362c

08014bdc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8014bdc:	b580      	push	{r7, lr}
 8014bde:	b08a      	sub	sp, #40	; 0x28
 8014be0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8014be2:	2300      	movs	r3, #0
 8014be4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8014be6:	f000 fb63 	bl	80152b0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8014bea:	4b1c      	ldr	r3, [pc, #112]	; (8014c5c <xTimerCreateTimerTask+0x80>)
 8014bec:	681b      	ldr	r3, [r3, #0]
 8014bee:	2b00      	cmp	r3, #0
 8014bf0:	d021      	beq.n	8014c36 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8014bf2:	2300      	movs	r3, #0
 8014bf4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8014bf6:	2300      	movs	r3, #0
 8014bf8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8014bfa:	1d3a      	adds	r2, r7, #4
 8014bfc:	f107 0108 	add.w	r1, r7, #8
 8014c00:	f107 030c 	add.w	r3, r7, #12
 8014c04:	4618      	mov	r0, r3
 8014c06:	f7fd fc5d 	bl	80124c4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8014c0a:	6879      	ldr	r1, [r7, #4]
 8014c0c:	68bb      	ldr	r3, [r7, #8]
 8014c0e:	68fa      	ldr	r2, [r7, #12]
 8014c10:	9202      	str	r2, [sp, #8]
 8014c12:	9301      	str	r3, [sp, #4]
 8014c14:	2302      	movs	r3, #2
 8014c16:	9300      	str	r3, [sp, #0]
 8014c18:	2300      	movs	r3, #0
 8014c1a:	460a      	mov	r2, r1
 8014c1c:	4910      	ldr	r1, [pc, #64]	; (8014c60 <xTimerCreateTimerTask+0x84>)
 8014c1e:	4811      	ldr	r0, [pc, #68]	; (8014c64 <xTimerCreateTimerTask+0x88>)
 8014c20:	f7fe fde2 	bl	80137e8 <xTaskCreateStatic>
 8014c24:	4603      	mov	r3, r0
 8014c26:	4a10      	ldr	r2, [pc, #64]	; (8014c68 <xTimerCreateTimerTask+0x8c>)
 8014c28:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8014c2a:	4b0f      	ldr	r3, [pc, #60]	; (8014c68 <xTimerCreateTimerTask+0x8c>)
 8014c2c:	681b      	ldr	r3, [r3, #0]
 8014c2e:	2b00      	cmp	r3, #0
 8014c30:	d001      	beq.n	8014c36 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8014c32:	2301      	movs	r3, #1
 8014c34:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8014c36:	697b      	ldr	r3, [r7, #20]
 8014c38:	2b00      	cmp	r3, #0
 8014c3a:	d10a      	bne.n	8014c52 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8014c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c40:	f383 8811 	msr	BASEPRI, r3
 8014c44:	f3bf 8f6f 	isb	sy
 8014c48:	f3bf 8f4f 	dsb	sy
 8014c4c:	613b      	str	r3, [r7, #16]
}
 8014c4e:	bf00      	nop
 8014c50:	e7fe      	b.n	8014c50 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8014c52:	697b      	ldr	r3, [r7, #20]
}
 8014c54:	4618      	mov	r0, r3
 8014c56:	3718      	adds	r7, #24
 8014c58:	46bd      	mov	sp, r7
 8014c5a:	bd80      	pop	{r7, pc}
 8014c5c:	20003668 	.word	0x20003668
 8014c60:	0802be40 	.word	0x0802be40
 8014c64:	08014e59 	.word	0x08014e59
 8014c68:	2000366c 	.word	0x2000366c

08014c6c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8014c6c:	b580      	push	{r7, lr}
 8014c6e:	b088      	sub	sp, #32
 8014c70:	af02      	add	r7, sp, #8
 8014c72:	60f8      	str	r0, [r7, #12]
 8014c74:	60b9      	str	r1, [r7, #8]
 8014c76:	607a      	str	r2, [r7, #4]
 8014c78:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8014c7a:	202c      	movs	r0, #44	; 0x2c
 8014c7c:	f000 fda4 	bl	80157c8 <pvPortMalloc>
 8014c80:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8014c82:	697b      	ldr	r3, [r7, #20]
 8014c84:	2b00      	cmp	r3, #0
 8014c86:	d00d      	beq.n	8014ca4 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8014c88:	697b      	ldr	r3, [r7, #20]
 8014c8a:	2200      	movs	r2, #0
 8014c8c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8014c90:	697b      	ldr	r3, [r7, #20]
 8014c92:	9301      	str	r3, [sp, #4]
 8014c94:	6a3b      	ldr	r3, [r7, #32]
 8014c96:	9300      	str	r3, [sp, #0]
 8014c98:	683b      	ldr	r3, [r7, #0]
 8014c9a:	687a      	ldr	r2, [r7, #4]
 8014c9c:	68b9      	ldr	r1, [r7, #8]
 8014c9e:	68f8      	ldr	r0, [r7, #12]
 8014ca0:	f000 f805 	bl	8014cae <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8014ca4:	697b      	ldr	r3, [r7, #20]
	}
 8014ca6:	4618      	mov	r0, r3
 8014ca8:	3718      	adds	r7, #24
 8014caa:	46bd      	mov	sp, r7
 8014cac:	bd80      	pop	{r7, pc}

08014cae <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8014cae:	b580      	push	{r7, lr}
 8014cb0:	b086      	sub	sp, #24
 8014cb2:	af00      	add	r7, sp, #0
 8014cb4:	60f8      	str	r0, [r7, #12]
 8014cb6:	60b9      	str	r1, [r7, #8]
 8014cb8:	607a      	str	r2, [r7, #4]
 8014cba:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8014cbc:	68bb      	ldr	r3, [r7, #8]
 8014cbe:	2b00      	cmp	r3, #0
 8014cc0:	d10a      	bne.n	8014cd8 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8014cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014cc6:	f383 8811 	msr	BASEPRI, r3
 8014cca:	f3bf 8f6f 	isb	sy
 8014cce:	f3bf 8f4f 	dsb	sy
 8014cd2:	617b      	str	r3, [r7, #20]
}
 8014cd4:	bf00      	nop
 8014cd6:	e7fe      	b.n	8014cd6 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8014cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cda:	2b00      	cmp	r3, #0
 8014cdc:	d01e      	beq.n	8014d1c <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8014cde:	f000 fae7 	bl	80152b0 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8014ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ce4:	68fa      	ldr	r2, [r7, #12]
 8014ce6:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8014ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cea:	68ba      	ldr	r2, [r7, #8]
 8014cec:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8014cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cf0:	683a      	ldr	r2, [r7, #0]
 8014cf2:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8014cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cf6:	6a3a      	ldr	r2, [r7, #32]
 8014cf8:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8014cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cfc:	3304      	adds	r3, #4
 8014cfe:	4618      	mov	r0, r3
 8014d00:	f7fd fc1a 	bl	8012538 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8014d04:	687b      	ldr	r3, [r7, #4]
 8014d06:	2b00      	cmp	r3, #0
 8014d08:	d008      	beq.n	8014d1c <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8014d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014d10:	f043 0304 	orr.w	r3, r3, #4
 8014d14:	b2da      	uxtb	r2, r3
 8014d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d18:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8014d1c:	bf00      	nop
 8014d1e:	3718      	adds	r7, #24
 8014d20:	46bd      	mov	sp, r7
 8014d22:	bd80      	pop	{r7, pc}

08014d24 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8014d24:	b580      	push	{r7, lr}
 8014d26:	b08a      	sub	sp, #40	; 0x28
 8014d28:	af00      	add	r7, sp, #0
 8014d2a:	60f8      	str	r0, [r7, #12]
 8014d2c:	60b9      	str	r1, [r7, #8]
 8014d2e:	607a      	str	r2, [r7, #4]
 8014d30:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8014d32:	2300      	movs	r3, #0
 8014d34:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8014d36:	68fb      	ldr	r3, [r7, #12]
 8014d38:	2b00      	cmp	r3, #0
 8014d3a:	d10a      	bne.n	8014d52 <xTimerGenericCommand+0x2e>
	__asm volatile
 8014d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d40:	f383 8811 	msr	BASEPRI, r3
 8014d44:	f3bf 8f6f 	isb	sy
 8014d48:	f3bf 8f4f 	dsb	sy
 8014d4c:	623b      	str	r3, [r7, #32]
}
 8014d4e:	bf00      	nop
 8014d50:	e7fe      	b.n	8014d50 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8014d52:	4b1a      	ldr	r3, [pc, #104]	; (8014dbc <xTimerGenericCommand+0x98>)
 8014d54:	681b      	ldr	r3, [r3, #0]
 8014d56:	2b00      	cmp	r3, #0
 8014d58:	d02a      	beq.n	8014db0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8014d5a:	68bb      	ldr	r3, [r7, #8]
 8014d5c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8014d5e:	687b      	ldr	r3, [r7, #4]
 8014d60:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8014d62:	68fb      	ldr	r3, [r7, #12]
 8014d64:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8014d66:	68bb      	ldr	r3, [r7, #8]
 8014d68:	2b05      	cmp	r3, #5
 8014d6a:	dc18      	bgt.n	8014d9e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8014d6c:	f7ff fb7c 	bl	8014468 <xTaskGetSchedulerState>
 8014d70:	4603      	mov	r3, r0
 8014d72:	2b02      	cmp	r3, #2
 8014d74:	d109      	bne.n	8014d8a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8014d76:	4b11      	ldr	r3, [pc, #68]	; (8014dbc <xTimerGenericCommand+0x98>)
 8014d78:	6818      	ldr	r0, [r3, #0]
 8014d7a:	f107 0110 	add.w	r1, r7, #16
 8014d7e:	2300      	movs	r3, #0
 8014d80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014d82:	f7fd fecb 	bl	8012b1c <xQueueGenericSend>
 8014d86:	6278      	str	r0, [r7, #36]	; 0x24
 8014d88:	e012      	b.n	8014db0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8014d8a:	4b0c      	ldr	r3, [pc, #48]	; (8014dbc <xTimerGenericCommand+0x98>)
 8014d8c:	6818      	ldr	r0, [r3, #0]
 8014d8e:	f107 0110 	add.w	r1, r7, #16
 8014d92:	2300      	movs	r3, #0
 8014d94:	2200      	movs	r2, #0
 8014d96:	f7fd fec1 	bl	8012b1c <xQueueGenericSend>
 8014d9a:	6278      	str	r0, [r7, #36]	; 0x24
 8014d9c:	e008      	b.n	8014db0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8014d9e:	4b07      	ldr	r3, [pc, #28]	; (8014dbc <xTimerGenericCommand+0x98>)
 8014da0:	6818      	ldr	r0, [r3, #0]
 8014da2:	f107 0110 	add.w	r1, r7, #16
 8014da6:	2300      	movs	r3, #0
 8014da8:	683a      	ldr	r2, [r7, #0]
 8014daa:	f7fd ffb5 	bl	8012d18 <xQueueGenericSendFromISR>
 8014dae:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8014db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8014db2:	4618      	mov	r0, r3
 8014db4:	3728      	adds	r7, #40	; 0x28
 8014db6:	46bd      	mov	sp, r7
 8014db8:	bd80      	pop	{r7, pc}
 8014dba:	bf00      	nop
 8014dbc:	20003668 	.word	0x20003668

08014dc0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8014dc0:	b580      	push	{r7, lr}
 8014dc2:	b088      	sub	sp, #32
 8014dc4:	af02      	add	r7, sp, #8
 8014dc6:	6078      	str	r0, [r7, #4]
 8014dc8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014dca:	4b22      	ldr	r3, [pc, #136]	; (8014e54 <prvProcessExpiredTimer+0x94>)
 8014dcc:	681b      	ldr	r3, [r3, #0]
 8014dce:	68db      	ldr	r3, [r3, #12]
 8014dd0:	68db      	ldr	r3, [r3, #12]
 8014dd2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014dd4:	697b      	ldr	r3, [r7, #20]
 8014dd6:	3304      	adds	r3, #4
 8014dd8:	4618      	mov	r0, r3
 8014dda:	f7fd fc17 	bl	801260c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8014dde:	697b      	ldr	r3, [r7, #20]
 8014de0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014de4:	f003 0304 	and.w	r3, r3, #4
 8014de8:	2b00      	cmp	r3, #0
 8014dea:	d022      	beq.n	8014e32 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8014dec:	697b      	ldr	r3, [r7, #20]
 8014dee:	699a      	ldr	r2, [r3, #24]
 8014df0:	687b      	ldr	r3, [r7, #4]
 8014df2:	18d1      	adds	r1, r2, r3
 8014df4:	687b      	ldr	r3, [r7, #4]
 8014df6:	683a      	ldr	r2, [r7, #0]
 8014df8:	6978      	ldr	r0, [r7, #20]
 8014dfa:	f000 f8d1 	bl	8014fa0 <prvInsertTimerInActiveList>
 8014dfe:	4603      	mov	r3, r0
 8014e00:	2b00      	cmp	r3, #0
 8014e02:	d01f      	beq.n	8014e44 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8014e04:	2300      	movs	r3, #0
 8014e06:	9300      	str	r3, [sp, #0]
 8014e08:	2300      	movs	r3, #0
 8014e0a:	687a      	ldr	r2, [r7, #4]
 8014e0c:	2100      	movs	r1, #0
 8014e0e:	6978      	ldr	r0, [r7, #20]
 8014e10:	f7ff ff88 	bl	8014d24 <xTimerGenericCommand>
 8014e14:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8014e16:	693b      	ldr	r3, [r7, #16]
 8014e18:	2b00      	cmp	r3, #0
 8014e1a:	d113      	bne.n	8014e44 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8014e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e20:	f383 8811 	msr	BASEPRI, r3
 8014e24:	f3bf 8f6f 	isb	sy
 8014e28:	f3bf 8f4f 	dsb	sy
 8014e2c:	60fb      	str	r3, [r7, #12]
}
 8014e2e:	bf00      	nop
 8014e30:	e7fe      	b.n	8014e30 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014e32:	697b      	ldr	r3, [r7, #20]
 8014e34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014e38:	f023 0301 	bic.w	r3, r3, #1
 8014e3c:	b2da      	uxtb	r2, r3
 8014e3e:	697b      	ldr	r3, [r7, #20]
 8014e40:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8014e44:	697b      	ldr	r3, [r7, #20]
 8014e46:	6a1b      	ldr	r3, [r3, #32]
 8014e48:	6978      	ldr	r0, [r7, #20]
 8014e4a:	4798      	blx	r3
}
 8014e4c:	bf00      	nop
 8014e4e:	3718      	adds	r7, #24
 8014e50:	46bd      	mov	sp, r7
 8014e52:	bd80      	pop	{r7, pc}
 8014e54:	20003660 	.word	0x20003660

08014e58 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8014e58:	b580      	push	{r7, lr}
 8014e5a:	b084      	sub	sp, #16
 8014e5c:	af00      	add	r7, sp, #0
 8014e5e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8014e60:	f107 0308 	add.w	r3, r7, #8
 8014e64:	4618      	mov	r0, r3
 8014e66:	f000 f857 	bl	8014f18 <prvGetNextExpireTime>
 8014e6a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8014e6c:	68bb      	ldr	r3, [r7, #8]
 8014e6e:	4619      	mov	r1, r3
 8014e70:	68f8      	ldr	r0, [r7, #12]
 8014e72:	f000 f803 	bl	8014e7c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8014e76:	f000 f8d5 	bl	8015024 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8014e7a:	e7f1      	b.n	8014e60 <prvTimerTask+0x8>

08014e7c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8014e7c:	b580      	push	{r7, lr}
 8014e7e:	b084      	sub	sp, #16
 8014e80:	af00      	add	r7, sp, #0
 8014e82:	6078      	str	r0, [r7, #4]
 8014e84:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8014e86:	f7fe feeb 	bl	8013c60 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8014e8a:	f107 0308 	add.w	r3, r7, #8
 8014e8e:	4618      	mov	r0, r3
 8014e90:	f000 f866 	bl	8014f60 <prvSampleTimeNow>
 8014e94:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8014e96:	68bb      	ldr	r3, [r7, #8]
 8014e98:	2b00      	cmp	r3, #0
 8014e9a:	d130      	bne.n	8014efe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8014e9c:	683b      	ldr	r3, [r7, #0]
 8014e9e:	2b00      	cmp	r3, #0
 8014ea0:	d10a      	bne.n	8014eb8 <prvProcessTimerOrBlockTask+0x3c>
 8014ea2:	687a      	ldr	r2, [r7, #4]
 8014ea4:	68fb      	ldr	r3, [r7, #12]
 8014ea6:	429a      	cmp	r2, r3
 8014ea8:	d806      	bhi.n	8014eb8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8014eaa:	f7fe fee7 	bl	8013c7c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8014eae:	68f9      	ldr	r1, [r7, #12]
 8014eb0:	6878      	ldr	r0, [r7, #4]
 8014eb2:	f7ff ff85 	bl	8014dc0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8014eb6:	e024      	b.n	8014f02 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8014eb8:	683b      	ldr	r3, [r7, #0]
 8014eba:	2b00      	cmp	r3, #0
 8014ebc:	d008      	beq.n	8014ed0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8014ebe:	4b13      	ldr	r3, [pc, #76]	; (8014f0c <prvProcessTimerOrBlockTask+0x90>)
 8014ec0:	681b      	ldr	r3, [r3, #0]
 8014ec2:	681b      	ldr	r3, [r3, #0]
 8014ec4:	2b00      	cmp	r3, #0
 8014ec6:	d101      	bne.n	8014ecc <prvProcessTimerOrBlockTask+0x50>
 8014ec8:	2301      	movs	r3, #1
 8014eca:	e000      	b.n	8014ece <prvProcessTimerOrBlockTask+0x52>
 8014ecc:	2300      	movs	r3, #0
 8014ece:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8014ed0:	4b0f      	ldr	r3, [pc, #60]	; (8014f10 <prvProcessTimerOrBlockTask+0x94>)
 8014ed2:	6818      	ldr	r0, [r3, #0]
 8014ed4:	687a      	ldr	r2, [r7, #4]
 8014ed6:	68fb      	ldr	r3, [r7, #12]
 8014ed8:	1ad3      	subs	r3, r2, r3
 8014eda:	683a      	ldr	r2, [r7, #0]
 8014edc:	4619      	mov	r1, r3
 8014ede:	f7fe fc4f 	bl	8013780 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8014ee2:	f7fe fecb 	bl	8013c7c <xTaskResumeAll>
 8014ee6:	4603      	mov	r3, r0
 8014ee8:	2b00      	cmp	r3, #0
 8014eea:	d10a      	bne.n	8014f02 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8014eec:	4b09      	ldr	r3, [pc, #36]	; (8014f14 <prvProcessTimerOrBlockTask+0x98>)
 8014eee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014ef2:	601a      	str	r2, [r3, #0]
 8014ef4:	f3bf 8f4f 	dsb	sy
 8014ef8:	f3bf 8f6f 	isb	sy
}
 8014efc:	e001      	b.n	8014f02 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8014efe:	f7fe febd 	bl	8013c7c <xTaskResumeAll>
}
 8014f02:	bf00      	nop
 8014f04:	3710      	adds	r7, #16
 8014f06:	46bd      	mov	sp, r7
 8014f08:	bd80      	pop	{r7, pc}
 8014f0a:	bf00      	nop
 8014f0c:	20003664 	.word	0x20003664
 8014f10:	20003668 	.word	0x20003668
 8014f14:	e000ed04 	.word	0xe000ed04

08014f18 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8014f18:	b480      	push	{r7}
 8014f1a:	b085      	sub	sp, #20
 8014f1c:	af00      	add	r7, sp, #0
 8014f1e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8014f20:	4b0e      	ldr	r3, [pc, #56]	; (8014f5c <prvGetNextExpireTime+0x44>)
 8014f22:	681b      	ldr	r3, [r3, #0]
 8014f24:	681b      	ldr	r3, [r3, #0]
 8014f26:	2b00      	cmp	r3, #0
 8014f28:	d101      	bne.n	8014f2e <prvGetNextExpireTime+0x16>
 8014f2a:	2201      	movs	r2, #1
 8014f2c:	e000      	b.n	8014f30 <prvGetNextExpireTime+0x18>
 8014f2e:	2200      	movs	r2, #0
 8014f30:	687b      	ldr	r3, [r7, #4]
 8014f32:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	681b      	ldr	r3, [r3, #0]
 8014f38:	2b00      	cmp	r3, #0
 8014f3a:	d105      	bne.n	8014f48 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8014f3c:	4b07      	ldr	r3, [pc, #28]	; (8014f5c <prvGetNextExpireTime+0x44>)
 8014f3e:	681b      	ldr	r3, [r3, #0]
 8014f40:	68db      	ldr	r3, [r3, #12]
 8014f42:	681b      	ldr	r3, [r3, #0]
 8014f44:	60fb      	str	r3, [r7, #12]
 8014f46:	e001      	b.n	8014f4c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8014f48:	2300      	movs	r3, #0
 8014f4a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8014f4c:	68fb      	ldr	r3, [r7, #12]
}
 8014f4e:	4618      	mov	r0, r3
 8014f50:	3714      	adds	r7, #20
 8014f52:	46bd      	mov	sp, r7
 8014f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f58:	4770      	bx	lr
 8014f5a:	bf00      	nop
 8014f5c:	20003660 	.word	0x20003660

08014f60 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8014f60:	b580      	push	{r7, lr}
 8014f62:	b084      	sub	sp, #16
 8014f64:	af00      	add	r7, sp, #0
 8014f66:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8014f68:	f7fe ff26 	bl	8013db8 <xTaskGetTickCount>
 8014f6c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8014f6e:	4b0b      	ldr	r3, [pc, #44]	; (8014f9c <prvSampleTimeNow+0x3c>)
 8014f70:	681b      	ldr	r3, [r3, #0]
 8014f72:	68fa      	ldr	r2, [r7, #12]
 8014f74:	429a      	cmp	r2, r3
 8014f76:	d205      	bcs.n	8014f84 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8014f78:	f000 f936 	bl	80151e8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8014f7c:	687b      	ldr	r3, [r7, #4]
 8014f7e:	2201      	movs	r2, #1
 8014f80:	601a      	str	r2, [r3, #0]
 8014f82:	e002      	b.n	8014f8a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8014f84:	687b      	ldr	r3, [r7, #4]
 8014f86:	2200      	movs	r2, #0
 8014f88:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8014f8a:	4a04      	ldr	r2, [pc, #16]	; (8014f9c <prvSampleTimeNow+0x3c>)
 8014f8c:	68fb      	ldr	r3, [r7, #12]
 8014f8e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8014f90:	68fb      	ldr	r3, [r7, #12]
}
 8014f92:	4618      	mov	r0, r3
 8014f94:	3710      	adds	r7, #16
 8014f96:	46bd      	mov	sp, r7
 8014f98:	bd80      	pop	{r7, pc}
 8014f9a:	bf00      	nop
 8014f9c:	20003670 	.word	0x20003670

08014fa0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8014fa0:	b580      	push	{r7, lr}
 8014fa2:	b086      	sub	sp, #24
 8014fa4:	af00      	add	r7, sp, #0
 8014fa6:	60f8      	str	r0, [r7, #12]
 8014fa8:	60b9      	str	r1, [r7, #8]
 8014faa:	607a      	str	r2, [r7, #4]
 8014fac:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8014fae:	2300      	movs	r3, #0
 8014fb0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8014fb2:	68fb      	ldr	r3, [r7, #12]
 8014fb4:	68ba      	ldr	r2, [r7, #8]
 8014fb6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8014fb8:	68fb      	ldr	r3, [r7, #12]
 8014fba:	68fa      	ldr	r2, [r7, #12]
 8014fbc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8014fbe:	68ba      	ldr	r2, [r7, #8]
 8014fc0:	687b      	ldr	r3, [r7, #4]
 8014fc2:	429a      	cmp	r2, r3
 8014fc4:	d812      	bhi.n	8014fec <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014fc6:	687a      	ldr	r2, [r7, #4]
 8014fc8:	683b      	ldr	r3, [r7, #0]
 8014fca:	1ad2      	subs	r2, r2, r3
 8014fcc:	68fb      	ldr	r3, [r7, #12]
 8014fce:	699b      	ldr	r3, [r3, #24]
 8014fd0:	429a      	cmp	r2, r3
 8014fd2:	d302      	bcc.n	8014fda <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8014fd4:	2301      	movs	r3, #1
 8014fd6:	617b      	str	r3, [r7, #20]
 8014fd8:	e01b      	b.n	8015012 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8014fda:	4b10      	ldr	r3, [pc, #64]	; (801501c <prvInsertTimerInActiveList+0x7c>)
 8014fdc:	681a      	ldr	r2, [r3, #0]
 8014fde:	68fb      	ldr	r3, [r7, #12]
 8014fe0:	3304      	adds	r3, #4
 8014fe2:	4619      	mov	r1, r3
 8014fe4:	4610      	mov	r0, r2
 8014fe6:	f7fd fad8 	bl	801259a <vListInsert>
 8014fea:	e012      	b.n	8015012 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8014fec:	687a      	ldr	r2, [r7, #4]
 8014fee:	683b      	ldr	r3, [r7, #0]
 8014ff0:	429a      	cmp	r2, r3
 8014ff2:	d206      	bcs.n	8015002 <prvInsertTimerInActiveList+0x62>
 8014ff4:	68ba      	ldr	r2, [r7, #8]
 8014ff6:	683b      	ldr	r3, [r7, #0]
 8014ff8:	429a      	cmp	r2, r3
 8014ffa:	d302      	bcc.n	8015002 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8014ffc:	2301      	movs	r3, #1
 8014ffe:	617b      	str	r3, [r7, #20]
 8015000:	e007      	b.n	8015012 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8015002:	4b07      	ldr	r3, [pc, #28]	; (8015020 <prvInsertTimerInActiveList+0x80>)
 8015004:	681a      	ldr	r2, [r3, #0]
 8015006:	68fb      	ldr	r3, [r7, #12]
 8015008:	3304      	adds	r3, #4
 801500a:	4619      	mov	r1, r3
 801500c:	4610      	mov	r0, r2
 801500e:	f7fd fac4 	bl	801259a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8015012:	697b      	ldr	r3, [r7, #20]
}
 8015014:	4618      	mov	r0, r3
 8015016:	3718      	adds	r7, #24
 8015018:	46bd      	mov	sp, r7
 801501a:	bd80      	pop	{r7, pc}
 801501c:	20003664 	.word	0x20003664
 8015020:	20003660 	.word	0x20003660

08015024 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8015024:	b580      	push	{r7, lr}
 8015026:	b08e      	sub	sp, #56	; 0x38
 8015028:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801502a:	e0ca      	b.n	80151c2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801502c:	687b      	ldr	r3, [r7, #4]
 801502e:	2b00      	cmp	r3, #0
 8015030:	da18      	bge.n	8015064 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8015032:	1d3b      	adds	r3, r7, #4
 8015034:	3304      	adds	r3, #4
 8015036:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8015038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801503a:	2b00      	cmp	r3, #0
 801503c:	d10a      	bne.n	8015054 <prvProcessReceivedCommands+0x30>
	__asm volatile
 801503e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015042:	f383 8811 	msr	BASEPRI, r3
 8015046:	f3bf 8f6f 	isb	sy
 801504a:	f3bf 8f4f 	dsb	sy
 801504e:	61fb      	str	r3, [r7, #28]
}
 8015050:	bf00      	nop
 8015052:	e7fe      	b.n	8015052 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8015054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015056:	681b      	ldr	r3, [r3, #0]
 8015058:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801505a:	6850      	ldr	r0, [r2, #4]
 801505c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801505e:	6892      	ldr	r2, [r2, #8]
 8015060:	4611      	mov	r1, r2
 8015062:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8015064:	687b      	ldr	r3, [r7, #4]
 8015066:	2b00      	cmp	r3, #0
 8015068:	f2c0 80aa 	blt.w	80151c0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801506c:	68fb      	ldr	r3, [r7, #12]
 801506e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8015070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015072:	695b      	ldr	r3, [r3, #20]
 8015074:	2b00      	cmp	r3, #0
 8015076:	d004      	beq.n	8015082 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801507a:	3304      	adds	r3, #4
 801507c:	4618      	mov	r0, r3
 801507e:	f7fd fac5 	bl	801260c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8015082:	463b      	mov	r3, r7
 8015084:	4618      	mov	r0, r3
 8015086:	f7ff ff6b 	bl	8014f60 <prvSampleTimeNow>
 801508a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 801508c:	687b      	ldr	r3, [r7, #4]
 801508e:	2b09      	cmp	r3, #9
 8015090:	f200 8097 	bhi.w	80151c2 <prvProcessReceivedCommands+0x19e>
 8015094:	a201      	add	r2, pc, #4	; (adr r2, 801509c <prvProcessReceivedCommands+0x78>)
 8015096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801509a:	bf00      	nop
 801509c:	080150c5 	.word	0x080150c5
 80150a0:	080150c5 	.word	0x080150c5
 80150a4:	080150c5 	.word	0x080150c5
 80150a8:	08015139 	.word	0x08015139
 80150ac:	0801514d 	.word	0x0801514d
 80150b0:	08015197 	.word	0x08015197
 80150b4:	080150c5 	.word	0x080150c5
 80150b8:	080150c5 	.word	0x080150c5
 80150bc:	08015139 	.word	0x08015139
 80150c0:	0801514d 	.word	0x0801514d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80150c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80150ca:	f043 0301 	orr.w	r3, r3, #1
 80150ce:	b2da      	uxtb	r2, r3
 80150d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80150d6:	68ba      	ldr	r2, [r7, #8]
 80150d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150da:	699b      	ldr	r3, [r3, #24]
 80150dc:	18d1      	adds	r1, r2, r3
 80150de:	68bb      	ldr	r3, [r7, #8]
 80150e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80150e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80150e4:	f7ff ff5c 	bl	8014fa0 <prvInsertTimerInActiveList>
 80150e8:	4603      	mov	r3, r0
 80150ea:	2b00      	cmp	r3, #0
 80150ec:	d069      	beq.n	80151c2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80150ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150f0:	6a1b      	ldr	r3, [r3, #32]
 80150f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80150f4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80150f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80150fc:	f003 0304 	and.w	r3, r3, #4
 8015100:	2b00      	cmp	r3, #0
 8015102:	d05e      	beq.n	80151c2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8015104:	68ba      	ldr	r2, [r7, #8]
 8015106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015108:	699b      	ldr	r3, [r3, #24]
 801510a:	441a      	add	r2, r3
 801510c:	2300      	movs	r3, #0
 801510e:	9300      	str	r3, [sp, #0]
 8015110:	2300      	movs	r3, #0
 8015112:	2100      	movs	r1, #0
 8015114:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015116:	f7ff fe05 	bl	8014d24 <xTimerGenericCommand>
 801511a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 801511c:	6a3b      	ldr	r3, [r7, #32]
 801511e:	2b00      	cmp	r3, #0
 8015120:	d14f      	bne.n	80151c2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8015122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015126:	f383 8811 	msr	BASEPRI, r3
 801512a:	f3bf 8f6f 	isb	sy
 801512e:	f3bf 8f4f 	dsb	sy
 8015132:	61bb      	str	r3, [r7, #24]
}
 8015134:	bf00      	nop
 8015136:	e7fe      	b.n	8015136 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801513a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801513e:	f023 0301 	bic.w	r3, r3, #1
 8015142:	b2da      	uxtb	r2, r3
 8015144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015146:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801514a:	e03a      	b.n	80151c2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801514c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801514e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015152:	f043 0301 	orr.w	r3, r3, #1
 8015156:	b2da      	uxtb	r2, r3
 8015158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801515a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801515e:	68ba      	ldr	r2, [r7, #8]
 8015160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015162:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8015164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015166:	699b      	ldr	r3, [r3, #24]
 8015168:	2b00      	cmp	r3, #0
 801516a:	d10a      	bne.n	8015182 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 801516c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015170:	f383 8811 	msr	BASEPRI, r3
 8015174:	f3bf 8f6f 	isb	sy
 8015178:	f3bf 8f4f 	dsb	sy
 801517c:	617b      	str	r3, [r7, #20]
}
 801517e:	bf00      	nop
 8015180:	e7fe      	b.n	8015180 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8015182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015184:	699a      	ldr	r2, [r3, #24]
 8015186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015188:	18d1      	adds	r1, r2, r3
 801518a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801518c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801518e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015190:	f7ff ff06 	bl	8014fa0 <prvInsertTimerInActiveList>
					break;
 8015194:	e015      	b.n	80151c2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8015196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015198:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801519c:	f003 0302 	and.w	r3, r3, #2
 80151a0:	2b00      	cmp	r3, #0
 80151a2:	d103      	bne.n	80151ac <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80151a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80151a6:	f000 fbdb 	bl	8015960 <vPortFree>
 80151aa:	e00a      	b.n	80151c2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80151ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80151b2:	f023 0301 	bic.w	r3, r3, #1
 80151b6:	b2da      	uxtb	r2, r3
 80151b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80151be:	e000      	b.n	80151c2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80151c0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80151c2:	4b08      	ldr	r3, [pc, #32]	; (80151e4 <prvProcessReceivedCommands+0x1c0>)
 80151c4:	681b      	ldr	r3, [r3, #0]
 80151c6:	1d39      	adds	r1, r7, #4
 80151c8:	2200      	movs	r2, #0
 80151ca:	4618      	mov	r0, r3
 80151cc:	f7fd fecc 	bl	8012f68 <xQueueReceive>
 80151d0:	4603      	mov	r3, r0
 80151d2:	2b00      	cmp	r3, #0
 80151d4:	f47f af2a 	bne.w	801502c <prvProcessReceivedCommands+0x8>
	}
}
 80151d8:	bf00      	nop
 80151da:	bf00      	nop
 80151dc:	3730      	adds	r7, #48	; 0x30
 80151de:	46bd      	mov	sp, r7
 80151e0:	bd80      	pop	{r7, pc}
 80151e2:	bf00      	nop
 80151e4:	20003668 	.word	0x20003668

080151e8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80151e8:	b580      	push	{r7, lr}
 80151ea:	b088      	sub	sp, #32
 80151ec:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80151ee:	e048      	b.n	8015282 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80151f0:	4b2d      	ldr	r3, [pc, #180]	; (80152a8 <prvSwitchTimerLists+0xc0>)
 80151f2:	681b      	ldr	r3, [r3, #0]
 80151f4:	68db      	ldr	r3, [r3, #12]
 80151f6:	681b      	ldr	r3, [r3, #0]
 80151f8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80151fa:	4b2b      	ldr	r3, [pc, #172]	; (80152a8 <prvSwitchTimerLists+0xc0>)
 80151fc:	681b      	ldr	r3, [r3, #0]
 80151fe:	68db      	ldr	r3, [r3, #12]
 8015200:	68db      	ldr	r3, [r3, #12]
 8015202:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015204:	68fb      	ldr	r3, [r7, #12]
 8015206:	3304      	adds	r3, #4
 8015208:	4618      	mov	r0, r3
 801520a:	f7fd f9ff 	bl	801260c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801520e:	68fb      	ldr	r3, [r7, #12]
 8015210:	6a1b      	ldr	r3, [r3, #32]
 8015212:	68f8      	ldr	r0, [r7, #12]
 8015214:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015216:	68fb      	ldr	r3, [r7, #12]
 8015218:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801521c:	f003 0304 	and.w	r3, r3, #4
 8015220:	2b00      	cmp	r3, #0
 8015222:	d02e      	beq.n	8015282 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8015224:	68fb      	ldr	r3, [r7, #12]
 8015226:	699b      	ldr	r3, [r3, #24]
 8015228:	693a      	ldr	r2, [r7, #16]
 801522a:	4413      	add	r3, r2
 801522c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801522e:	68ba      	ldr	r2, [r7, #8]
 8015230:	693b      	ldr	r3, [r7, #16]
 8015232:	429a      	cmp	r2, r3
 8015234:	d90e      	bls.n	8015254 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8015236:	68fb      	ldr	r3, [r7, #12]
 8015238:	68ba      	ldr	r2, [r7, #8]
 801523a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801523c:	68fb      	ldr	r3, [r7, #12]
 801523e:	68fa      	ldr	r2, [r7, #12]
 8015240:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8015242:	4b19      	ldr	r3, [pc, #100]	; (80152a8 <prvSwitchTimerLists+0xc0>)
 8015244:	681a      	ldr	r2, [r3, #0]
 8015246:	68fb      	ldr	r3, [r7, #12]
 8015248:	3304      	adds	r3, #4
 801524a:	4619      	mov	r1, r3
 801524c:	4610      	mov	r0, r2
 801524e:	f7fd f9a4 	bl	801259a <vListInsert>
 8015252:	e016      	b.n	8015282 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8015254:	2300      	movs	r3, #0
 8015256:	9300      	str	r3, [sp, #0]
 8015258:	2300      	movs	r3, #0
 801525a:	693a      	ldr	r2, [r7, #16]
 801525c:	2100      	movs	r1, #0
 801525e:	68f8      	ldr	r0, [r7, #12]
 8015260:	f7ff fd60 	bl	8014d24 <xTimerGenericCommand>
 8015264:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8015266:	687b      	ldr	r3, [r7, #4]
 8015268:	2b00      	cmp	r3, #0
 801526a:	d10a      	bne.n	8015282 <prvSwitchTimerLists+0x9a>
	__asm volatile
 801526c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015270:	f383 8811 	msr	BASEPRI, r3
 8015274:	f3bf 8f6f 	isb	sy
 8015278:	f3bf 8f4f 	dsb	sy
 801527c:	603b      	str	r3, [r7, #0]
}
 801527e:	bf00      	nop
 8015280:	e7fe      	b.n	8015280 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8015282:	4b09      	ldr	r3, [pc, #36]	; (80152a8 <prvSwitchTimerLists+0xc0>)
 8015284:	681b      	ldr	r3, [r3, #0]
 8015286:	681b      	ldr	r3, [r3, #0]
 8015288:	2b00      	cmp	r3, #0
 801528a:	d1b1      	bne.n	80151f0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801528c:	4b06      	ldr	r3, [pc, #24]	; (80152a8 <prvSwitchTimerLists+0xc0>)
 801528e:	681b      	ldr	r3, [r3, #0]
 8015290:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8015292:	4b06      	ldr	r3, [pc, #24]	; (80152ac <prvSwitchTimerLists+0xc4>)
 8015294:	681b      	ldr	r3, [r3, #0]
 8015296:	4a04      	ldr	r2, [pc, #16]	; (80152a8 <prvSwitchTimerLists+0xc0>)
 8015298:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801529a:	4a04      	ldr	r2, [pc, #16]	; (80152ac <prvSwitchTimerLists+0xc4>)
 801529c:	697b      	ldr	r3, [r7, #20]
 801529e:	6013      	str	r3, [r2, #0]
}
 80152a0:	bf00      	nop
 80152a2:	3718      	adds	r7, #24
 80152a4:	46bd      	mov	sp, r7
 80152a6:	bd80      	pop	{r7, pc}
 80152a8:	20003660 	.word	0x20003660
 80152ac:	20003664 	.word	0x20003664

080152b0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80152b0:	b580      	push	{r7, lr}
 80152b2:	b082      	sub	sp, #8
 80152b4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80152b6:	f000 f965 	bl	8015584 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80152ba:	4b15      	ldr	r3, [pc, #84]	; (8015310 <prvCheckForValidListAndQueue+0x60>)
 80152bc:	681b      	ldr	r3, [r3, #0]
 80152be:	2b00      	cmp	r3, #0
 80152c0:	d120      	bne.n	8015304 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80152c2:	4814      	ldr	r0, [pc, #80]	; (8015314 <prvCheckForValidListAndQueue+0x64>)
 80152c4:	f7fd f918 	bl	80124f8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80152c8:	4813      	ldr	r0, [pc, #76]	; (8015318 <prvCheckForValidListAndQueue+0x68>)
 80152ca:	f7fd f915 	bl	80124f8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80152ce:	4b13      	ldr	r3, [pc, #76]	; (801531c <prvCheckForValidListAndQueue+0x6c>)
 80152d0:	4a10      	ldr	r2, [pc, #64]	; (8015314 <prvCheckForValidListAndQueue+0x64>)
 80152d2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80152d4:	4b12      	ldr	r3, [pc, #72]	; (8015320 <prvCheckForValidListAndQueue+0x70>)
 80152d6:	4a10      	ldr	r2, [pc, #64]	; (8015318 <prvCheckForValidListAndQueue+0x68>)
 80152d8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80152da:	2300      	movs	r3, #0
 80152dc:	9300      	str	r3, [sp, #0]
 80152de:	4b11      	ldr	r3, [pc, #68]	; (8015324 <prvCheckForValidListAndQueue+0x74>)
 80152e0:	4a11      	ldr	r2, [pc, #68]	; (8015328 <prvCheckForValidListAndQueue+0x78>)
 80152e2:	2110      	movs	r1, #16
 80152e4:	200a      	movs	r0, #10
 80152e6:	f7fd fa23 	bl	8012730 <xQueueGenericCreateStatic>
 80152ea:	4603      	mov	r3, r0
 80152ec:	4a08      	ldr	r2, [pc, #32]	; (8015310 <prvCheckForValidListAndQueue+0x60>)
 80152ee:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80152f0:	4b07      	ldr	r3, [pc, #28]	; (8015310 <prvCheckForValidListAndQueue+0x60>)
 80152f2:	681b      	ldr	r3, [r3, #0]
 80152f4:	2b00      	cmp	r3, #0
 80152f6:	d005      	beq.n	8015304 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80152f8:	4b05      	ldr	r3, [pc, #20]	; (8015310 <prvCheckForValidListAndQueue+0x60>)
 80152fa:	681b      	ldr	r3, [r3, #0]
 80152fc:	490b      	ldr	r1, [pc, #44]	; (801532c <prvCheckForValidListAndQueue+0x7c>)
 80152fe:	4618      	mov	r0, r3
 8015300:	f7fe f9ea 	bl	80136d8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8015304:	f000 f96e 	bl	80155e4 <vPortExitCritical>
}
 8015308:	bf00      	nop
 801530a:	46bd      	mov	sp, r7
 801530c:	bd80      	pop	{r7, pc}
 801530e:	bf00      	nop
 8015310:	20003668 	.word	0x20003668
 8015314:	20003638 	.word	0x20003638
 8015318:	2000364c 	.word	0x2000364c
 801531c:	20003660 	.word	0x20003660
 8015320:	20003664 	.word	0x20003664
 8015324:	20003714 	.word	0x20003714
 8015328:	20003674 	.word	0x20003674
 801532c:	0802be48 	.word	0x0802be48

08015330 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8015330:	b480      	push	{r7}
 8015332:	b085      	sub	sp, #20
 8015334:	af00      	add	r7, sp, #0
 8015336:	60f8      	str	r0, [r7, #12]
 8015338:	60b9      	str	r1, [r7, #8]
 801533a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801533c:	68fb      	ldr	r3, [r7, #12]
 801533e:	3b04      	subs	r3, #4
 8015340:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8015342:	68fb      	ldr	r3, [r7, #12]
 8015344:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8015348:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801534a:	68fb      	ldr	r3, [r7, #12]
 801534c:	3b04      	subs	r3, #4
 801534e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8015350:	68bb      	ldr	r3, [r7, #8]
 8015352:	f023 0201 	bic.w	r2, r3, #1
 8015356:	68fb      	ldr	r3, [r7, #12]
 8015358:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801535a:	68fb      	ldr	r3, [r7, #12]
 801535c:	3b04      	subs	r3, #4
 801535e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8015360:	4a0c      	ldr	r2, [pc, #48]	; (8015394 <pxPortInitialiseStack+0x64>)
 8015362:	68fb      	ldr	r3, [r7, #12]
 8015364:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8015366:	68fb      	ldr	r3, [r7, #12]
 8015368:	3b14      	subs	r3, #20
 801536a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801536c:	687a      	ldr	r2, [r7, #4]
 801536e:	68fb      	ldr	r3, [r7, #12]
 8015370:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8015372:	68fb      	ldr	r3, [r7, #12]
 8015374:	3b04      	subs	r3, #4
 8015376:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8015378:	68fb      	ldr	r3, [r7, #12]
 801537a:	f06f 0202 	mvn.w	r2, #2
 801537e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8015380:	68fb      	ldr	r3, [r7, #12]
 8015382:	3b20      	subs	r3, #32
 8015384:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8015386:	68fb      	ldr	r3, [r7, #12]
}
 8015388:	4618      	mov	r0, r3
 801538a:	3714      	adds	r7, #20
 801538c:	46bd      	mov	sp, r7
 801538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015392:	4770      	bx	lr
 8015394:	08015399 	.word	0x08015399

08015398 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8015398:	b480      	push	{r7}
 801539a:	b085      	sub	sp, #20
 801539c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801539e:	2300      	movs	r3, #0
 80153a0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80153a2:	4b12      	ldr	r3, [pc, #72]	; (80153ec <prvTaskExitError+0x54>)
 80153a4:	681b      	ldr	r3, [r3, #0]
 80153a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80153aa:	d00a      	beq.n	80153c2 <prvTaskExitError+0x2a>
	__asm volatile
 80153ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153b0:	f383 8811 	msr	BASEPRI, r3
 80153b4:	f3bf 8f6f 	isb	sy
 80153b8:	f3bf 8f4f 	dsb	sy
 80153bc:	60fb      	str	r3, [r7, #12]
}
 80153be:	bf00      	nop
 80153c0:	e7fe      	b.n	80153c0 <prvTaskExitError+0x28>
	__asm volatile
 80153c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153c6:	f383 8811 	msr	BASEPRI, r3
 80153ca:	f3bf 8f6f 	isb	sy
 80153ce:	f3bf 8f4f 	dsb	sy
 80153d2:	60bb      	str	r3, [r7, #8]
}
 80153d4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80153d6:	bf00      	nop
 80153d8:	687b      	ldr	r3, [r7, #4]
 80153da:	2b00      	cmp	r3, #0
 80153dc:	d0fc      	beq.n	80153d8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80153de:	bf00      	nop
 80153e0:	bf00      	nop
 80153e2:	3714      	adds	r7, #20
 80153e4:	46bd      	mov	sp, r7
 80153e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153ea:	4770      	bx	lr
 80153ec:	1000005c 	.word	0x1000005c

080153f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80153f0:	4b07      	ldr	r3, [pc, #28]	; (8015410 <pxCurrentTCBConst2>)
 80153f2:	6819      	ldr	r1, [r3, #0]
 80153f4:	6808      	ldr	r0, [r1, #0]
 80153f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80153fa:	f380 8809 	msr	PSP, r0
 80153fe:	f3bf 8f6f 	isb	sy
 8015402:	f04f 0000 	mov.w	r0, #0
 8015406:	f380 8811 	msr	BASEPRI, r0
 801540a:	4770      	bx	lr
 801540c:	f3af 8000 	nop.w

08015410 <pxCurrentTCBConst2>:
 8015410:	20003138 	.word	0x20003138
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8015414:	bf00      	nop
 8015416:	bf00      	nop

08015418 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8015418:	4808      	ldr	r0, [pc, #32]	; (801543c <prvPortStartFirstTask+0x24>)
 801541a:	6800      	ldr	r0, [r0, #0]
 801541c:	6800      	ldr	r0, [r0, #0]
 801541e:	f380 8808 	msr	MSP, r0
 8015422:	f04f 0000 	mov.w	r0, #0
 8015426:	f380 8814 	msr	CONTROL, r0
 801542a:	b662      	cpsie	i
 801542c:	b661      	cpsie	f
 801542e:	f3bf 8f4f 	dsb	sy
 8015432:	f3bf 8f6f 	isb	sy
 8015436:	df00      	svc	0
 8015438:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801543a:	bf00      	nop
 801543c:	e000ed08 	.word	0xe000ed08

08015440 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8015440:	b580      	push	{r7, lr}
 8015442:	b086      	sub	sp, #24
 8015444:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8015446:	4b46      	ldr	r3, [pc, #280]	; (8015560 <xPortStartScheduler+0x120>)
 8015448:	681b      	ldr	r3, [r3, #0]
 801544a:	4a46      	ldr	r2, [pc, #280]	; (8015564 <xPortStartScheduler+0x124>)
 801544c:	4293      	cmp	r3, r2
 801544e:	d10a      	bne.n	8015466 <xPortStartScheduler+0x26>
	__asm volatile
 8015450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015454:	f383 8811 	msr	BASEPRI, r3
 8015458:	f3bf 8f6f 	isb	sy
 801545c:	f3bf 8f4f 	dsb	sy
 8015460:	613b      	str	r3, [r7, #16]
}
 8015462:	bf00      	nop
 8015464:	e7fe      	b.n	8015464 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8015466:	4b3e      	ldr	r3, [pc, #248]	; (8015560 <xPortStartScheduler+0x120>)
 8015468:	681b      	ldr	r3, [r3, #0]
 801546a:	4a3f      	ldr	r2, [pc, #252]	; (8015568 <xPortStartScheduler+0x128>)
 801546c:	4293      	cmp	r3, r2
 801546e:	d10a      	bne.n	8015486 <xPortStartScheduler+0x46>
	__asm volatile
 8015470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015474:	f383 8811 	msr	BASEPRI, r3
 8015478:	f3bf 8f6f 	isb	sy
 801547c:	f3bf 8f4f 	dsb	sy
 8015480:	60fb      	str	r3, [r7, #12]
}
 8015482:	bf00      	nop
 8015484:	e7fe      	b.n	8015484 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8015486:	4b39      	ldr	r3, [pc, #228]	; (801556c <xPortStartScheduler+0x12c>)
 8015488:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801548a:	697b      	ldr	r3, [r7, #20]
 801548c:	781b      	ldrb	r3, [r3, #0]
 801548e:	b2db      	uxtb	r3, r3
 8015490:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8015492:	697b      	ldr	r3, [r7, #20]
 8015494:	22ff      	movs	r2, #255	; 0xff
 8015496:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8015498:	697b      	ldr	r3, [r7, #20]
 801549a:	781b      	ldrb	r3, [r3, #0]
 801549c:	b2db      	uxtb	r3, r3
 801549e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80154a0:	78fb      	ldrb	r3, [r7, #3]
 80154a2:	b2db      	uxtb	r3, r3
 80154a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80154a8:	b2da      	uxtb	r2, r3
 80154aa:	4b31      	ldr	r3, [pc, #196]	; (8015570 <xPortStartScheduler+0x130>)
 80154ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80154ae:	4b31      	ldr	r3, [pc, #196]	; (8015574 <xPortStartScheduler+0x134>)
 80154b0:	2207      	movs	r2, #7
 80154b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80154b4:	e009      	b.n	80154ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80154b6:	4b2f      	ldr	r3, [pc, #188]	; (8015574 <xPortStartScheduler+0x134>)
 80154b8:	681b      	ldr	r3, [r3, #0]
 80154ba:	3b01      	subs	r3, #1
 80154bc:	4a2d      	ldr	r2, [pc, #180]	; (8015574 <xPortStartScheduler+0x134>)
 80154be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80154c0:	78fb      	ldrb	r3, [r7, #3]
 80154c2:	b2db      	uxtb	r3, r3
 80154c4:	005b      	lsls	r3, r3, #1
 80154c6:	b2db      	uxtb	r3, r3
 80154c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80154ca:	78fb      	ldrb	r3, [r7, #3]
 80154cc:	b2db      	uxtb	r3, r3
 80154ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80154d2:	2b80      	cmp	r3, #128	; 0x80
 80154d4:	d0ef      	beq.n	80154b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80154d6:	4b27      	ldr	r3, [pc, #156]	; (8015574 <xPortStartScheduler+0x134>)
 80154d8:	681b      	ldr	r3, [r3, #0]
 80154da:	f1c3 0307 	rsb	r3, r3, #7
 80154de:	2b04      	cmp	r3, #4
 80154e0:	d00a      	beq.n	80154f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80154e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80154e6:	f383 8811 	msr	BASEPRI, r3
 80154ea:	f3bf 8f6f 	isb	sy
 80154ee:	f3bf 8f4f 	dsb	sy
 80154f2:	60bb      	str	r3, [r7, #8]
}
 80154f4:	bf00      	nop
 80154f6:	e7fe      	b.n	80154f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80154f8:	4b1e      	ldr	r3, [pc, #120]	; (8015574 <xPortStartScheduler+0x134>)
 80154fa:	681b      	ldr	r3, [r3, #0]
 80154fc:	021b      	lsls	r3, r3, #8
 80154fe:	4a1d      	ldr	r2, [pc, #116]	; (8015574 <xPortStartScheduler+0x134>)
 8015500:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8015502:	4b1c      	ldr	r3, [pc, #112]	; (8015574 <xPortStartScheduler+0x134>)
 8015504:	681b      	ldr	r3, [r3, #0]
 8015506:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801550a:	4a1a      	ldr	r2, [pc, #104]	; (8015574 <xPortStartScheduler+0x134>)
 801550c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801550e:	687b      	ldr	r3, [r7, #4]
 8015510:	b2da      	uxtb	r2, r3
 8015512:	697b      	ldr	r3, [r7, #20]
 8015514:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8015516:	4b18      	ldr	r3, [pc, #96]	; (8015578 <xPortStartScheduler+0x138>)
 8015518:	681b      	ldr	r3, [r3, #0]
 801551a:	4a17      	ldr	r2, [pc, #92]	; (8015578 <xPortStartScheduler+0x138>)
 801551c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8015520:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8015522:	4b15      	ldr	r3, [pc, #84]	; (8015578 <xPortStartScheduler+0x138>)
 8015524:	681b      	ldr	r3, [r3, #0]
 8015526:	4a14      	ldr	r2, [pc, #80]	; (8015578 <xPortStartScheduler+0x138>)
 8015528:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801552c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801552e:	f000 f8dd 	bl	80156ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8015532:	4b12      	ldr	r3, [pc, #72]	; (801557c <xPortStartScheduler+0x13c>)
 8015534:	2200      	movs	r2, #0
 8015536:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8015538:	f000 f8fc 	bl	8015734 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801553c:	4b10      	ldr	r3, [pc, #64]	; (8015580 <xPortStartScheduler+0x140>)
 801553e:	681b      	ldr	r3, [r3, #0]
 8015540:	4a0f      	ldr	r2, [pc, #60]	; (8015580 <xPortStartScheduler+0x140>)
 8015542:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8015546:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8015548:	f7ff ff66 	bl	8015418 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801554c:	f7fe fd10 	bl	8013f70 <vTaskSwitchContext>
	prvTaskExitError();
 8015550:	f7ff ff22 	bl	8015398 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8015554:	2300      	movs	r3, #0
}
 8015556:	4618      	mov	r0, r3
 8015558:	3718      	adds	r7, #24
 801555a:	46bd      	mov	sp, r7
 801555c:	bd80      	pop	{r7, pc}
 801555e:	bf00      	nop
 8015560:	e000ed00 	.word	0xe000ed00
 8015564:	410fc271 	.word	0x410fc271
 8015568:	410fc270 	.word	0x410fc270
 801556c:	e000e400 	.word	0xe000e400
 8015570:	20003764 	.word	0x20003764
 8015574:	20003768 	.word	0x20003768
 8015578:	e000ed20 	.word	0xe000ed20
 801557c:	1000005c 	.word	0x1000005c
 8015580:	e000ef34 	.word	0xe000ef34

08015584 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8015584:	b480      	push	{r7}
 8015586:	b083      	sub	sp, #12
 8015588:	af00      	add	r7, sp, #0
	__asm volatile
 801558a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801558e:	f383 8811 	msr	BASEPRI, r3
 8015592:	f3bf 8f6f 	isb	sy
 8015596:	f3bf 8f4f 	dsb	sy
 801559a:	607b      	str	r3, [r7, #4]
}
 801559c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801559e:	4b0f      	ldr	r3, [pc, #60]	; (80155dc <vPortEnterCritical+0x58>)
 80155a0:	681b      	ldr	r3, [r3, #0]
 80155a2:	3301      	adds	r3, #1
 80155a4:	4a0d      	ldr	r2, [pc, #52]	; (80155dc <vPortEnterCritical+0x58>)
 80155a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80155a8:	4b0c      	ldr	r3, [pc, #48]	; (80155dc <vPortEnterCritical+0x58>)
 80155aa:	681b      	ldr	r3, [r3, #0]
 80155ac:	2b01      	cmp	r3, #1
 80155ae:	d10f      	bne.n	80155d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80155b0:	4b0b      	ldr	r3, [pc, #44]	; (80155e0 <vPortEnterCritical+0x5c>)
 80155b2:	681b      	ldr	r3, [r3, #0]
 80155b4:	b2db      	uxtb	r3, r3
 80155b6:	2b00      	cmp	r3, #0
 80155b8:	d00a      	beq.n	80155d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80155ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80155be:	f383 8811 	msr	BASEPRI, r3
 80155c2:	f3bf 8f6f 	isb	sy
 80155c6:	f3bf 8f4f 	dsb	sy
 80155ca:	603b      	str	r3, [r7, #0]
}
 80155cc:	bf00      	nop
 80155ce:	e7fe      	b.n	80155ce <vPortEnterCritical+0x4a>
	}
}
 80155d0:	bf00      	nop
 80155d2:	370c      	adds	r7, #12
 80155d4:	46bd      	mov	sp, r7
 80155d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155da:	4770      	bx	lr
 80155dc:	1000005c 	.word	0x1000005c
 80155e0:	e000ed04 	.word	0xe000ed04

080155e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80155e4:	b480      	push	{r7}
 80155e6:	b083      	sub	sp, #12
 80155e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80155ea:	4b12      	ldr	r3, [pc, #72]	; (8015634 <vPortExitCritical+0x50>)
 80155ec:	681b      	ldr	r3, [r3, #0]
 80155ee:	2b00      	cmp	r3, #0
 80155f0:	d10a      	bne.n	8015608 <vPortExitCritical+0x24>
	__asm volatile
 80155f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80155f6:	f383 8811 	msr	BASEPRI, r3
 80155fa:	f3bf 8f6f 	isb	sy
 80155fe:	f3bf 8f4f 	dsb	sy
 8015602:	607b      	str	r3, [r7, #4]
}
 8015604:	bf00      	nop
 8015606:	e7fe      	b.n	8015606 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8015608:	4b0a      	ldr	r3, [pc, #40]	; (8015634 <vPortExitCritical+0x50>)
 801560a:	681b      	ldr	r3, [r3, #0]
 801560c:	3b01      	subs	r3, #1
 801560e:	4a09      	ldr	r2, [pc, #36]	; (8015634 <vPortExitCritical+0x50>)
 8015610:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8015612:	4b08      	ldr	r3, [pc, #32]	; (8015634 <vPortExitCritical+0x50>)
 8015614:	681b      	ldr	r3, [r3, #0]
 8015616:	2b00      	cmp	r3, #0
 8015618:	d105      	bne.n	8015626 <vPortExitCritical+0x42>
 801561a:	2300      	movs	r3, #0
 801561c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801561e:	683b      	ldr	r3, [r7, #0]
 8015620:	f383 8811 	msr	BASEPRI, r3
}
 8015624:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8015626:	bf00      	nop
 8015628:	370c      	adds	r7, #12
 801562a:	46bd      	mov	sp, r7
 801562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015630:	4770      	bx	lr
 8015632:	bf00      	nop
 8015634:	1000005c 	.word	0x1000005c
	...

08015640 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8015640:	f3ef 8009 	mrs	r0, PSP
 8015644:	f3bf 8f6f 	isb	sy
 8015648:	4b15      	ldr	r3, [pc, #84]	; (80156a0 <pxCurrentTCBConst>)
 801564a:	681a      	ldr	r2, [r3, #0]
 801564c:	f01e 0f10 	tst.w	lr, #16
 8015650:	bf08      	it	eq
 8015652:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8015656:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801565a:	6010      	str	r0, [r2, #0]
 801565c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8015660:	f04f 0050 	mov.w	r0, #80	; 0x50
 8015664:	f380 8811 	msr	BASEPRI, r0
 8015668:	f3bf 8f4f 	dsb	sy
 801566c:	f3bf 8f6f 	isb	sy
 8015670:	f7fe fc7e 	bl	8013f70 <vTaskSwitchContext>
 8015674:	f04f 0000 	mov.w	r0, #0
 8015678:	f380 8811 	msr	BASEPRI, r0
 801567c:	bc09      	pop	{r0, r3}
 801567e:	6819      	ldr	r1, [r3, #0]
 8015680:	6808      	ldr	r0, [r1, #0]
 8015682:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015686:	f01e 0f10 	tst.w	lr, #16
 801568a:	bf08      	it	eq
 801568c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8015690:	f380 8809 	msr	PSP, r0
 8015694:	f3bf 8f6f 	isb	sy
 8015698:	4770      	bx	lr
 801569a:	bf00      	nop
 801569c:	f3af 8000 	nop.w

080156a0 <pxCurrentTCBConst>:
 80156a0:	20003138 	.word	0x20003138
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80156a4:	bf00      	nop
 80156a6:	bf00      	nop

080156a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80156a8:	b580      	push	{r7, lr}
 80156aa:	b082      	sub	sp, #8
 80156ac:	af00      	add	r7, sp, #0
	__asm volatile
 80156ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80156b2:	f383 8811 	msr	BASEPRI, r3
 80156b6:	f3bf 8f6f 	isb	sy
 80156ba:	f3bf 8f4f 	dsb	sy
 80156be:	607b      	str	r3, [r7, #4]
}
 80156c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80156c2:	f7fe fb9b 	bl	8013dfc <xTaskIncrementTick>
 80156c6:	4603      	mov	r3, r0
 80156c8:	2b00      	cmp	r3, #0
 80156ca:	d003      	beq.n	80156d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80156cc:	4b06      	ldr	r3, [pc, #24]	; (80156e8 <xPortSysTickHandler+0x40>)
 80156ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80156d2:	601a      	str	r2, [r3, #0]
 80156d4:	2300      	movs	r3, #0
 80156d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80156d8:	683b      	ldr	r3, [r7, #0]
 80156da:	f383 8811 	msr	BASEPRI, r3
}
 80156de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80156e0:	bf00      	nop
 80156e2:	3708      	adds	r7, #8
 80156e4:	46bd      	mov	sp, r7
 80156e6:	bd80      	pop	{r7, pc}
 80156e8:	e000ed04 	.word	0xe000ed04

080156ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80156ec:	b480      	push	{r7}
 80156ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80156f0:	4b0b      	ldr	r3, [pc, #44]	; (8015720 <vPortSetupTimerInterrupt+0x34>)
 80156f2:	2200      	movs	r2, #0
 80156f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80156f6:	4b0b      	ldr	r3, [pc, #44]	; (8015724 <vPortSetupTimerInterrupt+0x38>)
 80156f8:	2200      	movs	r2, #0
 80156fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80156fc:	4b0a      	ldr	r3, [pc, #40]	; (8015728 <vPortSetupTimerInterrupt+0x3c>)
 80156fe:	681b      	ldr	r3, [r3, #0]
 8015700:	4a0a      	ldr	r2, [pc, #40]	; (801572c <vPortSetupTimerInterrupt+0x40>)
 8015702:	fba2 2303 	umull	r2, r3, r2, r3
 8015706:	099b      	lsrs	r3, r3, #6
 8015708:	4a09      	ldr	r2, [pc, #36]	; (8015730 <vPortSetupTimerInterrupt+0x44>)
 801570a:	3b01      	subs	r3, #1
 801570c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801570e:	4b04      	ldr	r3, [pc, #16]	; (8015720 <vPortSetupTimerInterrupt+0x34>)
 8015710:	2207      	movs	r2, #7
 8015712:	601a      	str	r2, [r3, #0]
}
 8015714:	bf00      	nop
 8015716:	46bd      	mov	sp, r7
 8015718:	f85d 7b04 	ldr.w	r7, [sp], #4
 801571c:	4770      	bx	lr
 801571e:	bf00      	nop
 8015720:	e000e010 	.word	0xe000e010
 8015724:	e000e018 	.word	0xe000e018
 8015728:	10000050 	.word	0x10000050
 801572c:	10624dd3 	.word	0x10624dd3
 8015730:	e000e014 	.word	0xe000e014

08015734 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8015734:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8015744 <vPortEnableVFP+0x10>
 8015738:	6801      	ldr	r1, [r0, #0]
 801573a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801573e:	6001      	str	r1, [r0, #0]
 8015740:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8015742:	bf00      	nop
 8015744:	e000ed88 	.word	0xe000ed88

08015748 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8015748:	b480      	push	{r7}
 801574a:	b085      	sub	sp, #20
 801574c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801574e:	f3ef 8305 	mrs	r3, IPSR
 8015752:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8015754:	68fb      	ldr	r3, [r7, #12]
 8015756:	2b0f      	cmp	r3, #15
 8015758:	d914      	bls.n	8015784 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801575a:	4a17      	ldr	r2, [pc, #92]	; (80157b8 <vPortValidateInterruptPriority+0x70>)
 801575c:	68fb      	ldr	r3, [r7, #12]
 801575e:	4413      	add	r3, r2
 8015760:	781b      	ldrb	r3, [r3, #0]
 8015762:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8015764:	4b15      	ldr	r3, [pc, #84]	; (80157bc <vPortValidateInterruptPriority+0x74>)
 8015766:	781b      	ldrb	r3, [r3, #0]
 8015768:	7afa      	ldrb	r2, [r7, #11]
 801576a:	429a      	cmp	r2, r3
 801576c:	d20a      	bcs.n	8015784 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801576e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015772:	f383 8811 	msr	BASEPRI, r3
 8015776:	f3bf 8f6f 	isb	sy
 801577a:	f3bf 8f4f 	dsb	sy
 801577e:	607b      	str	r3, [r7, #4]
}
 8015780:	bf00      	nop
 8015782:	e7fe      	b.n	8015782 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8015784:	4b0e      	ldr	r3, [pc, #56]	; (80157c0 <vPortValidateInterruptPriority+0x78>)
 8015786:	681b      	ldr	r3, [r3, #0]
 8015788:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801578c:	4b0d      	ldr	r3, [pc, #52]	; (80157c4 <vPortValidateInterruptPriority+0x7c>)
 801578e:	681b      	ldr	r3, [r3, #0]
 8015790:	429a      	cmp	r2, r3
 8015792:	d90a      	bls.n	80157aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8015794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015798:	f383 8811 	msr	BASEPRI, r3
 801579c:	f3bf 8f6f 	isb	sy
 80157a0:	f3bf 8f4f 	dsb	sy
 80157a4:	603b      	str	r3, [r7, #0]
}
 80157a6:	bf00      	nop
 80157a8:	e7fe      	b.n	80157a8 <vPortValidateInterruptPriority+0x60>
	}
 80157aa:	bf00      	nop
 80157ac:	3714      	adds	r7, #20
 80157ae:	46bd      	mov	sp, r7
 80157b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157b4:	4770      	bx	lr
 80157b6:	bf00      	nop
 80157b8:	e000e3f0 	.word	0xe000e3f0
 80157bc:	20003764 	.word	0x20003764
 80157c0:	e000ed0c 	.word	0xe000ed0c
 80157c4:	20003768 	.word	0x20003768

080157c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80157c8:	b580      	push	{r7, lr}
 80157ca:	b08a      	sub	sp, #40	; 0x28
 80157cc:	af00      	add	r7, sp, #0
 80157ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80157d0:	2300      	movs	r3, #0
 80157d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80157d4:	f7fe fa44 	bl	8013c60 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80157d8:	4b5b      	ldr	r3, [pc, #364]	; (8015948 <pvPortMalloc+0x180>)
 80157da:	681b      	ldr	r3, [r3, #0]
 80157dc:	2b00      	cmp	r3, #0
 80157de:	d101      	bne.n	80157e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80157e0:	f000 f920 	bl	8015a24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80157e4:	4b59      	ldr	r3, [pc, #356]	; (801594c <pvPortMalloc+0x184>)
 80157e6:	681a      	ldr	r2, [r3, #0]
 80157e8:	687b      	ldr	r3, [r7, #4]
 80157ea:	4013      	ands	r3, r2
 80157ec:	2b00      	cmp	r3, #0
 80157ee:	f040 8093 	bne.w	8015918 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80157f2:	687b      	ldr	r3, [r7, #4]
 80157f4:	2b00      	cmp	r3, #0
 80157f6:	d01d      	beq.n	8015834 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80157f8:	2208      	movs	r2, #8
 80157fa:	687b      	ldr	r3, [r7, #4]
 80157fc:	4413      	add	r3, r2
 80157fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8015800:	687b      	ldr	r3, [r7, #4]
 8015802:	f003 0307 	and.w	r3, r3, #7
 8015806:	2b00      	cmp	r3, #0
 8015808:	d014      	beq.n	8015834 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801580a:	687b      	ldr	r3, [r7, #4]
 801580c:	f023 0307 	bic.w	r3, r3, #7
 8015810:	3308      	adds	r3, #8
 8015812:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015814:	687b      	ldr	r3, [r7, #4]
 8015816:	f003 0307 	and.w	r3, r3, #7
 801581a:	2b00      	cmp	r3, #0
 801581c:	d00a      	beq.n	8015834 <pvPortMalloc+0x6c>
	__asm volatile
 801581e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015822:	f383 8811 	msr	BASEPRI, r3
 8015826:	f3bf 8f6f 	isb	sy
 801582a:	f3bf 8f4f 	dsb	sy
 801582e:	617b      	str	r3, [r7, #20]
}
 8015830:	bf00      	nop
 8015832:	e7fe      	b.n	8015832 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8015834:	687b      	ldr	r3, [r7, #4]
 8015836:	2b00      	cmp	r3, #0
 8015838:	d06e      	beq.n	8015918 <pvPortMalloc+0x150>
 801583a:	4b45      	ldr	r3, [pc, #276]	; (8015950 <pvPortMalloc+0x188>)
 801583c:	681b      	ldr	r3, [r3, #0]
 801583e:	687a      	ldr	r2, [r7, #4]
 8015840:	429a      	cmp	r2, r3
 8015842:	d869      	bhi.n	8015918 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8015844:	4b43      	ldr	r3, [pc, #268]	; (8015954 <pvPortMalloc+0x18c>)
 8015846:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8015848:	4b42      	ldr	r3, [pc, #264]	; (8015954 <pvPortMalloc+0x18c>)
 801584a:	681b      	ldr	r3, [r3, #0]
 801584c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801584e:	e004      	b.n	801585a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8015850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015852:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8015854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015856:	681b      	ldr	r3, [r3, #0]
 8015858:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801585a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801585c:	685b      	ldr	r3, [r3, #4]
 801585e:	687a      	ldr	r2, [r7, #4]
 8015860:	429a      	cmp	r2, r3
 8015862:	d903      	bls.n	801586c <pvPortMalloc+0xa4>
 8015864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015866:	681b      	ldr	r3, [r3, #0]
 8015868:	2b00      	cmp	r3, #0
 801586a:	d1f1      	bne.n	8015850 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801586c:	4b36      	ldr	r3, [pc, #216]	; (8015948 <pvPortMalloc+0x180>)
 801586e:	681b      	ldr	r3, [r3, #0]
 8015870:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015872:	429a      	cmp	r2, r3
 8015874:	d050      	beq.n	8015918 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8015876:	6a3b      	ldr	r3, [r7, #32]
 8015878:	681b      	ldr	r3, [r3, #0]
 801587a:	2208      	movs	r2, #8
 801587c:	4413      	add	r3, r2
 801587e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8015880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015882:	681a      	ldr	r2, [r3, #0]
 8015884:	6a3b      	ldr	r3, [r7, #32]
 8015886:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8015888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801588a:	685a      	ldr	r2, [r3, #4]
 801588c:	687b      	ldr	r3, [r7, #4]
 801588e:	1ad2      	subs	r2, r2, r3
 8015890:	2308      	movs	r3, #8
 8015892:	005b      	lsls	r3, r3, #1
 8015894:	429a      	cmp	r2, r3
 8015896:	d91f      	bls.n	80158d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8015898:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801589a:	687b      	ldr	r3, [r7, #4]
 801589c:	4413      	add	r3, r2
 801589e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80158a0:	69bb      	ldr	r3, [r7, #24]
 80158a2:	f003 0307 	and.w	r3, r3, #7
 80158a6:	2b00      	cmp	r3, #0
 80158a8:	d00a      	beq.n	80158c0 <pvPortMalloc+0xf8>
	__asm volatile
 80158aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80158ae:	f383 8811 	msr	BASEPRI, r3
 80158b2:	f3bf 8f6f 	isb	sy
 80158b6:	f3bf 8f4f 	dsb	sy
 80158ba:	613b      	str	r3, [r7, #16]
}
 80158bc:	bf00      	nop
 80158be:	e7fe      	b.n	80158be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80158c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158c2:	685a      	ldr	r2, [r3, #4]
 80158c4:	687b      	ldr	r3, [r7, #4]
 80158c6:	1ad2      	subs	r2, r2, r3
 80158c8:	69bb      	ldr	r3, [r7, #24]
 80158ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80158cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158ce:	687a      	ldr	r2, [r7, #4]
 80158d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80158d2:	69b8      	ldr	r0, [r7, #24]
 80158d4:	f000 f908 	bl	8015ae8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80158d8:	4b1d      	ldr	r3, [pc, #116]	; (8015950 <pvPortMalloc+0x188>)
 80158da:	681a      	ldr	r2, [r3, #0]
 80158dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158de:	685b      	ldr	r3, [r3, #4]
 80158e0:	1ad3      	subs	r3, r2, r3
 80158e2:	4a1b      	ldr	r2, [pc, #108]	; (8015950 <pvPortMalloc+0x188>)
 80158e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80158e6:	4b1a      	ldr	r3, [pc, #104]	; (8015950 <pvPortMalloc+0x188>)
 80158e8:	681a      	ldr	r2, [r3, #0]
 80158ea:	4b1b      	ldr	r3, [pc, #108]	; (8015958 <pvPortMalloc+0x190>)
 80158ec:	681b      	ldr	r3, [r3, #0]
 80158ee:	429a      	cmp	r2, r3
 80158f0:	d203      	bcs.n	80158fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80158f2:	4b17      	ldr	r3, [pc, #92]	; (8015950 <pvPortMalloc+0x188>)
 80158f4:	681b      	ldr	r3, [r3, #0]
 80158f6:	4a18      	ldr	r2, [pc, #96]	; (8015958 <pvPortMalloc+0x190>)
 80158f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80158fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158fc:	685a      	ldr	r2, [r3, #4]
 80158fe:	4b13      	ldr	r3, [pc, #76]	; (801594c <pvPortMalloc+0x184>)
 8015900:	681b      	ldr	r3, [r3, #0]
 8015902:	431a      	orrs	r2, r3
 8015904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015906:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8015908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801590a:	2200      	movs	r2, #0
 801590c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801590e:	4b13      	ldr	r3, [pc, #76]	; (801595c <pvPortMalloc+0x194>)
 8015910:	681b      	ldr	r3, [r3, #0]
 8015912:	3301      	adds	r3, #1
 8015914:	4a11      	ldr	r2, [pc, #68]	; (801595c <pvPortMalloc+0x194>)
 8015916:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8015918:	f7fe f9b0 	bl	8013c7c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801591c:	69fb      	ldr	r3, [r7, #28]
 801591e:	f003 0307 	and.w	r3, r3, #7
 8015922:	2b00      	cmp	r3, #0
 8015924:	d00a      	beq.n	801593c <pvPortMalloc+0x174>
	__asm volatile
 8015926:	f04f 0350 	mov.w	r3, #80	; 0x50
 801592a:	f383 8811 	msr	BASEPRI, r3
 801592e:	f3bf 8f6f 	isb	sy
 8015932:	f3bf 8f4f 	dsb	sy
 8015936:	60fb      	str	r3, [r7, #12]
}
 8015938:	bf00      	nop
 801593a:	e7fe      	b.n	801593a <pvPortMalloc+0x172>
	return pvReturn;
 801593c:	69fb      	ldr	r3, [r7, #28]
}
 801593e:	4618      	mov	r0, r3
 8015940:	3728      	adds	r7, #40	; 0x28
 8015942:	46bd      	mov	sp, r7
 8015944:	bd80      	pop	{r7, pc}
 8015946:	bf00      	nop
 8015948:	20013774 	.word	0x20013774
 801594c:	20013788 	.word	0x20013788
 8015950:	20013778 	.word	0x20013778
 8015954:	2001376c 	.word	0x2001376c
 8015958:	2001377c 	.word	0x2001377c
 801595c:	20013780 	.word	0x20013780

08015960 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8015960:	b580      	push	{r7, lr}
 8015962:	b086      	sub	sp, #24
 8015964:	af00      	add	r7, sp, #0
 8015966:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8015968:	687b      	ldr	r3, [r7, #4]
 801596a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801596c:	687b      	ldr	r3, [r7, #4]
 801596e:	2b00      	cmp	r3, #0
 8015970:	d04d      	beq.n	8015a0e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8015972:	2308      	movs	r3, #8
 8015974:	425b      	negs	r3, r3
 8015976:	697a      	ldr	r2, [r7, #20]
 8015978:	4413      	add	r3, r2
 801597a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801597c:	697b      	ldr	r3, [r7, #20]
 801597e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8015980:	693b      	ldr	r3, [r7, #16]
 8015982:	685a      	ldr	r2, [r3, #4]
 8015984:	4b24      	ldr	r3, [pc, #144]	; (8015a18 <vPortFree+0xb8>)
 8015986:	681b      	ldr	r3, [r3, #0]
 8015988:	4013      	ands	r3, r2
 801598a:	2b00      	cmp	r3, #0
 801598c:	d10a      	bne.n	80159a4 <vPortFree+0x44>
	__asm volatile
 801598e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015992:	f383 8811 	msr	BASEPRI, r3
 8015996:	f3bf 8f6f 	isb	sy
 801599a:	f3bf 8f4f 	dsb	sy
 801599e:	60fb      	str	r3, [r7, #12]
}
 80159a0:	bf00      	nop
 80159a2:	e7fe      	b.n	80159a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80159a4:	693b      	ldr	r3, [r7, #16]
 80159a6:	681b      	ldr	r3, [r3, #0]
 80159a8:	2b00      	cmp	r3, #0
 80159aa:	d00a      	beq.n	80159c2 <vPortFree+0x62>
	__asm volatile
 80159ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80159b0:	f383 8811 	msr	BASEPRI, r3
 80159b4:	f3bf 8f6f 	isb	sy
 80159b8:	f3bf 8f4f 	dsb	sy
 80159bc:	60bb      	str	r3, [r7, #8]
}
 80159be:	bf00      	nop
 80159c0:	e7fe      	b.n	80159c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80159c2:	693b      	ldr	r3, [r7, #16]
 80159c4:	685a      	ldr	r2, [r3, #4]
 80159c6:	4b14      	ldr	r3, [pc, #80]	; (8015a18 <vPortFree+0xb8>)
 80159c8:	681b      	ldr	r3, [r3, #0]
 80159ca:	4013      	ands	r3, r2
 80159cc:	2b00      	cmp	r3, #0
 80159ce:	d01e      	beq.n	8015a0e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80159d0:	693b      	ldr	r3, [r7, #16]
 80159d2:	681b      	ldr	r3, [r3, #0]
 80159d4:	2b00      	cmp	r3, #0
 80159d6:	d11a      	bne.n	8015a0e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80159d8:	693b      	ldr	r3, [r7, #16]
 80159da:	685a      	ldr	r2, [r3, #4]
 80159dc:	4b0e      	ldr	r3, [pc, #56]	; (8015a18 <vPortFree+0xb8>)
 80159de:	681b      	ldr	r3, [r3, #0]
 80159e0:	43db      	mvns	r3, r3
 80159e2:	401a      	ands	r2, r3
 80159e4:	693b      	ldr	r3, [r7, #16]
 80159e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80159e8:	f7fe f93a 	bl	8013c60 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80159ec:	693b      	ldr	r3, [r7, #16]
 80159ee:	685a      	ldr	r2, [r3, #4]
 80159f0:	4b0a      	ldr	r3, [pc, #40]	; (8015a1c <vPortFree+0xbc>)
 80159f2:	681b      	ldr	r3, [r3, #0]
 80159f4:	4413      	add	r3, r2
 80159f6:	4a09      	ldr	r2, [pc, #36]	; (8015a1c <vPortFree+0xbc>)
 80159f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80159fa:	6938      	ldr	r0, [r7, #16]
 80159fc:	f000 f874 	bl	8015ae8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8015a00:	4b07      	ldr	r3, [pc, #28]	; (8015a20 <vPortFree+0xc0>)
 8015a02:	681b      	ldr	r3, [r3, #0]
 8015a04:	3301      	adds	r3, #1
 8015a06:	4a06      	ldr	r2, [pc, #24]	; (8015a20 <vPortFree+0xc0>)
 8015a08:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8015a0a:	f7fe f937 	bl	8013c7c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8015a0e:	bf00      	nop
 8015a10:	3718      	adds	r7, #24
 8015a12:	46bd      	mov	sp, r7
 8015a14:	bd80      	pop	{r7, pc}
 8015a16:	bf00      	nop
 8015a18:	20013788 	.word	0x20013788
 8015a1c:	20013778 	.word	0x20013778
 8015a20:	20013784 	.word	0x20013784

08015a24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8015a24:	b480      	push	{r7}
 8015a26:	b085      	sub	sp, #20
 8015a28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8015a2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015a2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8015a30:	4b27      	ldr	r3, [pc, #156]	; (8015ad0 <prvHeapInit+0xac>)
 8015a32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8015a34:	68fb      	ldr	r3, [r7, #12]
 8015a36:	f003 0307 	and.w	r3, r3, #7
 8015a3a:	2b00      	cmp	r3, #0
 8015a3c:	d00c      	beq.n	8015a58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8015a3e:	68fb      	ldr	r3, [r7, #12]
 8015a40:	3307      	adds	r3, #7
 8015a42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015a44:	68fb      	ldr	r3, [r7, #12]
 8015a46:	f023 0307 	bic.w	r3, r3, #7
 8015a4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8015a4c:	68ba      	ldr	r2, [r7, #8]
 8015a4e:	68fb      	ldr	r3, [r7, #12]
 8015a50:	1ad3      	subs	r3, r2, r3
 8015a52:	4a1f      	ldr	r2, [pc, #124]	; (8015ad0 <prvHeapInit+0xac>)
 8015a54:	4413      	add	r3, r2
 8015a56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8015a58:	68fb      	ldr	r3, [r7, #12]
 8015a5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8015a5c:	4a1d      	ldr	r2, [pc, #116]	; (8015ad4 <prvHeapInit+0xb0>)
 8015a5e:	687b      	ldr	r3, [r7, #4]
 8015a60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8015a62:	4b1c      	ldr	r3, [pc, #112]	; (8015ad4 <prvHeapInit+0xb0>)
 8015a64:	2200      	movs	r2, #0
 8015a66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8015a68:	687b      	ldr	r3, [r7, #4]
 8015a6a:	68ba      	ldr	r2, [r7, #8]
 8015a6c:	4413      	add	r3, r2
 8015a6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8015a70:	2208      	movs	r2, #8
 8015a72:	68fb      	ldr	r3, [r7, #12]
 8015a74:	1a9b      	subs	r3, r3, r2
 8015a76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015a78:	68fb      	ldr	r3, [r7, #12]
 8015a7a:	f023 0307 	bic.w	r3, r3, #7
 8015a7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8015a80:	68fb      	ldr	r3, [r7, #12]
 8015a82:	4a15      	ldr	r2, [pc, #84]	; (8015ad8 <prvHeapInit+0xb4>)
 8015a84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8015a86:	4b14      	ldr	r3, [pc, #80]	; (8015ad8 <prvHeapInit+0xb4>)
 8015a88:	681b      	ldr	r3, [r3, #0]
 8015a8a:	2200      	movs	r2, #0
 8015a8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8015a8e:	4b12      	ldr	r3, [pc, #72]	; (8015ad8 <prvHeapInit+0xb4>)
 8015a90:	681b      	ldr	r3, [r3, #0]
 8015a92:	2200      	movs	r2, #0
 8015a94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8015a96:	687b      	ldr	r3, [r7, #4]
 8015a98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8015a9a:	683b      	ldr	r3, [r7, #0]
 8015a9c:	68fa      	ldr	r2, [r7, #12]
 8015a9e:	1ad2      	subs	r2, r2, r3
 8015aa0:	683b      	ldr	r3, [r7, #0]
 8015aa2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8015aa4:	4b0c      	ldr	r3, [pc, #48]	; (8015ad8 <prvHeapInit+0xb4>)
 8015aa6:	681a      	ldr	r2, [r3, #0]
 8015aa8:	683b      	ldr	r3, [r7, #0]
 8015aaa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015aac:	683b      	ldr	r3, [r7, #0]
 8015aae:	685b      	ldr	r3, [r3, #4]
 8015ab0:	4a0a      	ldr	r2, [pc, #40]	; (8015adc <prvHeapInit+0xb8>)
 8015ab2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015ab4:	683b      	ldr	r3, [r7, #0]
 8015ab6:	685b      	ldr	r3, [r3, #4]
 8015ab8:	4a09      	ldr	r2, [pc, #36]	; (8015ae0 <prvHeapInit+0xbc>)
 8015aba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8015abc:	4b09      	ldr	r3, [pc, #36]	; (8015ae4 <prvHeapInit+0xc0>)
 8015abe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8015ac2:	601a      	str	r2, [r3, #0]
}
 8015ac4:	bf00      	nop
 8015ac6:	3714      	adds	r7, #20
 8015ac8:	46bd      	mov	sp, r7
 8015aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ace:	4770      	bx	lr
 8015ad0:	2000376c 	.word	0x2000376c
 8015ad4:	2001376c 	.word	0x2001376c
 8015ad8:	20013774 	.word	0x20013774
 8015adc:	2001377c 	.word	0x2001377c
 8015ae0:	20013778 	.word	0x20013778
 8015ae4:	20013788 	.word	0x20013788

08015ae8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8015ae8:	b480      	push	{r7}
 8015aea:	b085      	sub	sp, #20
 8015aec:	af00      	add	r7, sp, #0
 8015aee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8015af0:	4b28      	ldr	r3, [pc, #160]	; (8015b94 <prvInsertBlockIntoFreeList+0xac>)
 8015af2:	60fb      	str	r3, [r7, #12]
 8015af4:	e002      	b.n	8015afc <prvInsertBlockIntoFreeList+0x14>
 8015af6:	68fb      	ldr	r3, [r7, #12]
 8015af8:	681b      	ldr	r3, [r3, #0]
 8015afa:	60fb      	str	r3, [r7, #12]
 8015afc:	68fb      	ldr	r3, [r7, #12]
 8015afe:	681b      	ldr	r3, [r3, #0]
 8015b00:	687a      	ldr	r2, [r7, #4]
 8015b02:	429a      	cmp	r2, r3
 8015b04:	d8f7      	bhi.n	8015af6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8015b06:	68fb      	ldr	r3, [r7, #12]
 8015b08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8015b0a:	68fb      	ldr	r3, [r7, #12]
 8015b0c:	685b      	ldr	r3, [r3, #4]
 8015b0e:	68ba      	ldr	r2, [r7, #8]
 8015b10:	4413      	add	r3, r2
 8015b12:	687a      	ldr	r2, [r7, #4]
 8015b14:	429a      	cmp	r2, r3
 8015b16:	d108      	bne.n	8015b2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8015b18:	68fb      	ldr	r3, [r7, #12]
 8015b1a:	685a      	ldr	r2, [r3, #4]
 8015b1c:	687b      	ldr	r3, [r7, #4]
 8015b1e:	685b      	ldr	r3, [r3, #4]
 8015b20:	441a      	add	r2, r3
 8015b22:	68fb      	ldr	r3, [r7, #12]
 8015b24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8015b26:	68fb      	ldr	r3, [r7, #12]
 8015b28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8015b2a:	687b      	ldr	r3, [r7, #4]
 8015b2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8015b2e:	687b      	ldr	r3, [r7, #4]
 8015b30:	685b      	ldr	r3, [r3, #4]
 8015b32:	68ba      	ldr	r2, [r7, #8]
 8015b34:	441a      	add	r2, r3
 8015b36:	68fb      	ldr	r3, [r7, #12]
 8015b38:	681b      	ldr	r3, [r3, #0]
 8015b3a:	429a      	cmp	r2, r3
 8015b3c:	d118      	bne.n	8015b70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8015b3e:	68fb      	ldr	r3, [r7, #12]
 8015b40:	681a      	ldr	r2, [r3, #0]
 8015b42:	4b15      	ldr	r3, [pc, #84]	; (8015b98 <prvInsertBlockIntoFreeList+0xb0>)
 8015b44:	681b      	ldr	r3, [r3, #0]
 8015b46:	429a      	cmp	r2, r3
 8015b48:	d00d      	beq.n	8015b66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8015b4a:	687b      	ldr	r3, [r7, #4]
 8015b4c:	685a      	ldr	r2, [r3, #4]
 8015b4e:	68fb      	ldr	r3, [r7, #12]
 8015b50:	681b      	ldr	r3, [r3, #0]
 8015b52:	685b      	ldr	r3, [r3, #4]
 8015b54:	441a      	add	r2, r3
 8015b56:	687b      	ldr	r3, [r7, #4]
 8015b58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8015b5a:	68fb      	ldr	r3, [r7, #12]
 8015b5c:	681b      	ldr	r3, [r3, #0]
 8015b5e:	681a      	ldr	r2, [r3, #0]
 8015b60:	687b      	ldr	r3, [r7, #4]
 8015b62:	601a      	str	r2, [r3, #0]
 8015b64:	e008      	b.n	8015b78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8015b66:	4b0c      	ldr	r3, [pc, #48]	; (8015b98 <prvInsertBlockIntoFreeList+0xb0>)
 8015b68:	681a      	ldr	r2, [r3, #0]
 8015b6a:	687b      	ldr	r3, [r7, #4]
 8015b6c:	601a      	str	r2, [r3, #0]
 8015b6e:	e003      	b.n	8015b78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8015b70:	68fb      	ldr	r3, [r7, #12]
 8015b72:	681a      	ldr	r2, [r3, #0]
 8015b74:	687b      	ldr	r3, [r7, #4]
 8015b76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8015b78:	68fa      	ldr	r2, [r7, #12]
 8015b7a:	687b      	ldr	r3, [r7, #4]
 8015b7c:	429a      	cmp	r2, r3
 8015b7e:	d002      	beq.n	8015b86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8015b80:	68fb      	ldr	r3, [r7, #12]
 8015b82:	687a      	ldr	r2, [r7, #4]
 8015b84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015b86:	bf00      	nop
 8015b88:	3714      	adds	r7, #20
 8015b8a:	46bd      	mov	sp, r7
 8015b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b90:	4770      	bx	lr
 8015b92:	bf00      	nop
 8015b94:	2001376c 	.word	0x2001376c
 8015b98:	20013774 	.word	0x20013774

08015b9c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8015b9c:	b580      	push	{r7, lr}
 8015b9e:	b084      	sub	sp, #16
 8015ba0:	af00      	add	r7, sp, #0
 8015ba2:	6078      	str	r0, [r7, #4]
 8015ba4:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8015ba6:	f00b f803 	bl	8020bb0 <sys_timeouts_sleeptime>
 8015baa:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8015bac:	68fb      	ldr	r3, [r7, #12]
 8015bae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015bb2:	d10b      	bne.n	8015bcc <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8015bb4:	4813      	ldr	r0, [pc, #76]	; (8015c04 <tcpip_timeouts_mbox_fetch+0x68>)
 8015bb6:	f00f ff10 	bl	80259da <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8015bba:	2200      	movs	r2, #0
 8015bbc:	6839      	ldr	r1, [r7, #0]
 8015bbe:	6878      	ldr	r0, [r7, #4]
 8015bc0:	f00f fe98 	bl	80258f4 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8015bc4:	480f      	ldr	r0, [pc, #60]	; (8015c04 <tcpip_timeouts_mbox_fetch+0x68>)
 8015bc6:	f00f fef9 	bl	80259bc <sys_mutex_lock>
    return;
 8015bca:	e018      	b.n	8015bfe <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8015bcc:	68fb      	ldr	r3, [r7, #12]
 8015bce:	2b00      	cmp	r3, #0
 8015bd0:	d102      	bne.n	8015bd8 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8015bd2:	f00a ffb3 	bl	8020b3c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8015bd6:	e7e6      	b.n	8015ba6 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8015bd8:	480a      	ldr	r0, [pc, #40]	; (8015c04 <tcpip_timeouts_mbox_fetch+0x68>)
 8015bda:	f00f fefe 	bl	80259da <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8015bde:	68fa      	ldr	r2, [r7, #12]
 8015be0:	6839      	ldr	r1, [r7, #0]
 8015be2:	6878      	ldr	r0, [r7, #4]
 8015be4:	f00f fe86 	bl	80258f4 <sys_arch_mbox_fetch>
 8015be8:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8015bea:	4806      	ldr	r0, [pc, #24]	; (8015c04 <tcpip_timeouts_mbox_fetch+0x68>)
 8015bec:	f00f fee6 	bl	80259bc <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8015bf0:	68bb      	ldr	r3, [r7, #8]
 8015bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015bf6:	d102      	bne.n	8015bfe <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8015bf8:	f00a ffa0 	bl	8020b3c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8015bfc:	e7d3      	b.n	8015ba6 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8015bfe:	3710      	adds	r7, #16
 8015c00:	46bd      	mov	sp, r7
 8015c02:	bd80      	pop	{r7, pc}
 8015c04:	20017b64 	.word	0x20017b64

08015c08 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8015c08:	b580      	push	{r7, lr}
 8015c0a:	b084      	sub	sp, #16
 8015c0c:	af00      	add	r7, sp, #0
 8015c0e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8015c10:	4810      	ldr	r0, [pc, #64]	; (8015c54 <tcpip_thread+0x4c>)
 8015c12:	f00f fed3 	bl	80259bc <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8015c16:	4b10      	ldr	r3, [pc, #64]	; (8015c58 <tcpip_thread+0x50>)
 8015c18:	681b      	ldr	r3, [r3, #0]
 8015c1a:	2b00      	cmp	r3, #0
 8015c1c:	d005      	beq.n	8015c2a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8015c1e:	4b0e      	ldr	r3, [pc, #56]	; (8015c58 <tcpip_thread+0x50>)
 8015c20:	681b      	ldr	r3, [r3, #0]
 8015c22:	4a0e      	ldr	r2, [pc, #56]	; (8015c5c <tcpip_thread+0x54>)
 8015c24:	6812      	ldr	r2, [r2, #0]
 8015c26:	4610      	mov	r0, r2
 8015c28:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8015c2a:	f107 030c 	add.w	r3, r7, #12
 8015c2e:	4619      	mov	r1, r3
 8015c30:	480b      	ldr	r0, [pc, #44]	; (8015c60 <tcpip_thread+0x58>)
 8015c32:	f7ff ffb3 	bl	8015b9c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8015c36:	68fb      	ldr	r3, [r7, #12]
 8015c38:	2b00      	cmp	r3, #0
 8015c3a:	d106      	bne.n	8015c4a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8015c3c:	4b09      	ldr	r3, [pc, #36]	; (8015c64 <tcpip_thread+0x5c>)
 8015c3e:	2291      	movs	r2, #145	; 0x91
 8015c40:	4909      	ldr	r1, [pc, #36]	; (8015c68 <tcpip_thread+0x60>)
 8015c42:	480a      	ldr	r0, [pc, #40]	; (8015c6c <tcpip_thread+0x64>)
 8015c44:	f010 fe42 	bl	80268cc <iprintf>
      continue;
 8015c48:	e003      	b.n	8015c52 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8015c4a:	68fb      	ldr	r3, [r7, #12]
 8015c4c:	4618      	mov	r0, r3
 8015c4e:	f000 f80f 	bl	8015c70 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8015c52:	e7ea      	b.n	8015c2a <tcpip_thread+0x22>
 8015c54:	20017b64 	.word	0x20017b64
 8015c58:	2001378c 	.word	0x2001378c
 8015c5c:	20013790 	.word	0x20013790
 8015c60:	20013794 	.word	0x20013794
 8015c64:	0802be50 	.word	0x0802be50
 8015c68:	0802be80 	.word	0x0802be80
 8015c6c:	0802bea0 	.word	0x0802bea0

08015c70 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8015c70:	b580      	push	{r7, lr}
 8015c72:	b082      	sub	sp, #8
 8015c74:	af00      	add	r7, sp, #0
 8015c76:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8015c78:	687b      	ldr	r3, [r7, #4]
 8015c7a:	781b      	ldrb	r3, [r3, #0]
 8015c7c:	2b02      	cmp	r3, #2
 8015c7e:	d026      	beq.n	8015cce <tcpip_thread_handle_msg+0x5e>
 8015c80:	2b02      	cmp	r3, #2
 8015c82:	dc2b      	bgt.n	8015cdc <tcpip_thread_handle_msg+0x6c>
 8015c84:	2b00      	cmp	r3, #0
 8015c86:	d002      	beq.n	8015c8e <tcpip_thread_handle_msg+0x1e>
 8015c88:	2b01      	cmp	r3, #1
 8015c8a:	d015      	beq.n	8015cb8 <tcpip_thread_handle_msg+0x48>
 8015c8c:	e026      	b.n	8015cdc <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8015c8e:	687b      	ldr	r3, [r7, #4]
 8015c90:	68db      	ldr	r3, [r3, #12]
 8015c92:	687a      	ldr	r2, [r7, #4]
 8015c94:	6850      	ldr	r0, [r2, #4]
 8015c96:	687a      	ldr	r2, [r7, #4]
 8015c98:	6892      	ldr	r2, [r2, #8]
 8015c9a:	4611      	mov	r1, r2
 8015c9c:	4798      	blx	r3
 8015c9e:	4603      	mov	r3, r0
 8015ca0:	2b00      	cmp	r3, #0
 8015ca2:	d004      	beq.n	8015cae <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8015ca4:	687b      	ldr	r3, [r7, #4]
 8015ca6:	685b      	ldr	r3, [r3, #4]
 8015ca8:	4618      	mov	r0, r3
 8015caa:	f004 f985 	bl	8019fb8 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8015cae:	6879      	ldr	r1, [r7, #4]
 8015cb0:	2009      	movs	r0, #9
 8015cb2:	f003 fad1 	bl	8019258 <memp_free>
      break;
 8015cb6:	e018      	b.n	8015cea <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8015cb8:	687b      	ldr	r3, [r7, #4]
 8015cba:	685b      	ldr	r3, [r3, #4]
 8015cbc:	687a      	ldr	r2, [r7, #4]
 8015cbe:	6892      	ldr	r2, [r2, #8]
 8015cc0:	4610      	mov	r0, r2
 8015cc2:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8015cc4:	6879      	ldr	r1, [r7, #4]
 8015cc6:	2008      	movs	r0, #8
 8015cc8:	f003 fac6 	bl	8019258 <memp_free>
      break;
 8015ccc:	e00d      	b.n	8015cea <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8015cce:	687b      	ldr	r3, [r7, #4]
 8015cd0:	685b      	ldr	r3, [r3, #4]
 8015cd2:	687a      	ldr	r2, [r7, #4]
 8015cd4:	6892      	ldr	r2, [r2, #8]
 8015cd6:	4610      	mov	r0, r2
 8015cd8:	4798      	blx	r3
      break;
 8015cda:	e006      	b.n	8015cea <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8015cdc:	4b05      	ldr	r3, [pc, #20]	; (8015cf4 <tcpip_thread_handle_msg+0x84>)
 8015cde:	22cf      	movs	r2, #207	; 0xcf
 8015ce0:	4905      	ldr	r1, [pc, #20]	; (8015cf8 <tcpip_thread_handle_msg+0x88>)
 8015ce2:	4806      	ldr	r0, [pc, #24]	; (8015cfc <tcpip_thread_handle_msg+0x8c>)
 8015ce4:	f010 fdf2 	bl	80268cc <iprintf>
      break;
 8015ce8:	bf00      	nop
  }
}
 8015cea:	bf00      	nop
 8015cec:	3708      	adds	r7, #8
 8015cee:	46bd      	mov	sp, r7
 8015cf0:	bd80      	pop	{r7, pc}
 8015cf2:	bf00      	nop
 8015cf4:	0802be50 	.word	0x0802be50
 8015cf8:	0802be80 	.word	0x0802be80
 8015cfc:	0802bea0 	.word	0x0802bea0

08015d00 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8015d00:	b580      	push	{r7, lr}
 8015d02:	b086      	sub	sp, #24
 8015d04:	af00      	add	r7, sp, #0
 8015d06:	60f8      	str	r0, [r7, #12]
 8015d08:	60b9      	str	r1, [r7, #8]
 8015d0a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8015d0c:	481a      	ldr	r0, [pc, #104]	; (8015d78 <tcpip_inpkt+0x78>)
 8015d0e:	f00f fe22 	bl	8025956 <sys_mbox_valid>
 8015d12:	4603      	mov	r3, r0
 8015d14:	2b00      	cmp	r3, #0
 8015d16:	d105      	bne.n	8015d24 <tcpip_inpkt+0x24>
 8015d18:	4b18      	ldr	r3, [pc, #96]	; (8015d7c <tcpip_inpkt+0x7c>)
 8015d1a:	22fc      	movs	r2, #252	; 0xfc
 8015d1c:	4918      	ldr	r1, [pc, #96]	; (8015d80 <tcpip_inpkt+0x80>)
 8015d1e:	4819      	ldr	r0, [pc, #100]	; (8015d84 <tcpip_inpkt+0x84>)
 8015d20:	f010 fdd4 	bl	80268cc <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8015d24:	2009      	movs	r0, #9
 8015d26:	f003 fa45 	bl	80191b4 <memp_malloc>
 8015d2a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8015d2c:	697b      	ldr	r3, [r7, #20]
 8015d2e:	2b00      	cmp	r3, #0
 8015d30:	d102      	bne.n	8015d38 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8015d32:	f04f 33ff 	mov.w	r3, #4294967295
 8015d36:	e01a      	b.n	8015d6e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8015d38:	697b      	ldr	r3, [r7, #20]
 8015d3a:	2200      	movs	r2, #0
 8015d3c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8015d3e:	697b      	ldr	r3, [r7, #20]
 8015d40:	68fa      	ldr	r2, [r7, #12]
 8015d42:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8015d44:	697b      	ldr	r3, [r7, #20]
 8015d46:	68ba      	ldr	r2, [r7, #8]
 8015d48:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8015d4a:	697b      	ldr	r3, [r7, #20]
 8015d4c:	687a      	ldr	r2, [r7, #4]
 8015d4e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8015d50:	6979      	ldr	r1, [r7, #20]
 8015d52:	4809      	ldr	r0, [pc, #36]	; (8015d78 <tcpip_inpkt+0x78>)
 8015d54:	f00f fdb4 	bl	80258c0 <sys_mbox_trypost>
 8015d58:	4603      	mov	r3, r0
 8015d5a:	2b00      	cmp	r3, #0
 8015d5c:	d006      	beq.n	8015d6c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8015d5e:	6979      	ldr	r1, [r7, #20]
 8015d60:	2009      	movs	r0, #9
 8015d62:	f003 fa79 	bl	8019258 <memp_free>
    return ERR_MEM;
 8015d66:	f04f 33ff 	mov.w	r3, #4294967295
 8015d6a:	e000      	b.n	8015d6e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8015d6c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8015d6e:	4618      	mov	r0, r3
 8015d70:	3718      	adds	r7, #24
 8015d72:	46bd      	mov	sp, r7
 8015d74:	bd80      	pop	{r7, pc}
 8015d76:	bf00      	nop
 8015d78:	20013794 	.word	0x20013794
 8015d7c:	0802be50 	.word	0x0802be50
 8015d80:	0802bec8 	.word	0x0802bec8
 8015d84:	0802bea0 	.word	0x0802bea0

08015d88 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8015d88:	b580      	push	{r7, lr}
 8015d8a:	b082      	sub	sp, #8
 8015d8c:	af00      	add	r7, sp, #0
 8015d8e:	6078      	str	r0, [r7, #4]
 8015d90:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8015d92:	683b      	ldr	r3, [r7, #0]
 8015d94:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015d98:	f003 0318 	and.w	r3, r3, #24
 8015d9c:	2b00      	cmp	r3, #0
 8015d9e:	d006      	beq.n	8015dae <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8015da0:	4a08      	ldr	r2, [pc, #32]	; (8015dc4 <tcpip_input+0x3c>)
 8015da2:	6839      	ldr	r1, [r7, #0]
 8015da4:	6878      	ldr	r0, [r7, #4]
 8015da6:	f7ff ffab 	bl	8015d00 <tcpip_inpkt>
 8015daa:	4603      	mov	r3, r0
 8015dac:	e005      	b.n	8015dba <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8015dae:	4a06      	ldr	r2, [pc, #24]	; (8015dc8 <tcpip_input+0x40>)
 8015db0:	6839      	ldr	r1, [r7, #0]
 8015db2:	6878      	ldr	r0, [r7, #4]
 8015db4:	f7ff ffa4 	bl	8015d00 <tcpip_inpkt>
 8015db8:	4603      	mov	r3, r0
}
 8015dba:	4618      	mov	r0, r3
 8015dbc:	3708      	adds	r7, #8
 8015dbe:	46bd      	mov	sp, r7
 8015dc0:	bd80      	pop	{r7, pc}
 8015dc2:	bf00      	nop
 8015dc4:	080256e1 	.word	0x080256e1
 8015dc8:	080245ad 	.word	0x080245ad

08015dcc <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8015dcc:	b580      	push	{r7, lr}
 8015dce:	b084      	sub	sp, #16
 8015dd0:	af00      	add	r7, sp, #0
 8015dd2:	6078      	str	r0, [r7, #4]
 8015dd4:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8015dd6:	4819      	ldr	r0, [pc, #100]	; (8015e3c <tcpip_try_callback+0x70>)
 8015dd8:	f00f fdbd 	bl	8025956 <sys_mbox_valid>
 8015ddc:	4603      	mov	r3, r0
 8015dde:	2b00      	cmp	r3, #0
 8015de0:	d106      	bne.n	8015df0 <tcpip_try_callback+0x24>
 8015de2:	4b17      	ldr	r3, [pc, #92]	; (8015e40 <tcpip_try_callback+0x74>)
 8015de4:	f240 125d 	movw	r2, #349	; 0x15d
 8015de8:	4916      	ldr	r1, [pc, #88]	; (8015e44 <tcpip_try_callback+0x78>)
 8015dea:	4817      	ldr	r0, [pc, #92]	; (8015e48 <tcpip_try_callback+0x7c>)
 8015dec:	f010 fd6e 	bl	80268cc <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8015df0:	2008      	movs	r0, #8
 8015df2:	f003 f9df 	bl	80191b4 <memp_malloc>
 8015df6:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8015df8:	68fb      	ldr	r3, [r7, #12]
 8015dfa:	2b00      	cmp	r3, #0
 8015dfc:	d102      	bne.n	8015e04 <tcpip_try_callback+0x38>
    return ERR_MEM;
 8015dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8015e02:	e017      	b.n	8015e34 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8015e04:	68fb      	ldr	r3, [r7, #12]
 8015e06:	2201      	movs	r2, #1
 8015e08:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8015e0a:	68fb      	ldr	r3, [r7, #12]
 8015e0c:	687a      	ldr	r2, [r7, #4]
 8015e0e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8015e10:	68fb      	ldr	r3, [r7, #12]
 8015e12:	683a      	ldr	r2, [r7, #0]
 8015e14:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8015e16:	68f9      	ldr	r1, [r7, #12]
 8015e18:	4808      	ldr	r0, [pc, #32]	; (8015e3c <tcpip_try_callback+0x70>)
 8015e1a:	f00f fd51 	bl	80258c0 <sys_mbox_trypost>
 8015e1e:	4603      	mov	r3, r0
 8015e20:	2b00      	cmp	r3, #0
 8015e22:	d006      	beq.n	8015e32 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8015e24:	68f9      	ldr	r1, [r7, #12]
 8015e26:	2008      	movs	r0, #8
 8015e28:	f003 fa16 	bl	8019258 <memp_free>
    return ERR_MEM;
 8015e2c:	f04f 33ff 	mov.w	r3, #4294967295
 8015e30:	e000      	b.n	8015e34 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8015e32:	2300      	movs	r3, #0
}
 8015e34:	4618      	mov	r0, r3
 8015e36:	3710      	adds	r7, #16
 8015e38:	46bd      	mov	sp, r7
 8015e3a:	bd80      	pop	{r7, pc}
 8015e3c:	20013794 	.word	0x20013794
 8015e40:	0802be50 	.word	0x0802be50
 8015e44:	0802bec8 	.word	0x0802bec8
 8015e48:	0802bea0 	.word	0x0802bea0

08015e4c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8015e4c:	b580      	push	{r7, lr}
 8015e4e:	b084      	sub	sp, #16
 8015e50:	af02      	add	r7, sp, #8
 8015e52:	6078      	str	r0, [r7, #4]
 8015e54:	6039      	str	r1, [r7, #0]
  lwip_init();
 8015e56:	f002 fcfd 	bl	8018854 <lwip_init>

  tcpip_init_done = initfunc;
 8015e5a:	4a17      	ldr	r2, [pc, #92]	; (8015eb8 <tcpip_init+0x6c>)
 8015e5c:	687b      	ldr	r3, [r7, #4]
 8015e5e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8015e60:	4a16      	ldr	r2, [pc, #88]	; (8015ebc <tcpip_init+0x70>)
 8015e62:	683b      	ldr	r3, [r7, #0]
 8015e64:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8015e66:	2106      	movs	r1, #6
 8015e68:	4815      	ldr	r0, [pc, #84]	; (8015ec0 <tcpip_init+0x74>)
 8015e6a:	f00f fd0f 	bl	802588c <sys_mbox_new>
 8015e6e:	4603      	mov	r3, r0
 8015e70:	2b00      	cmp	r3, #0
 8015e72:	d006      	beq.n	8015e82 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8015e74:	4b13      	ldr	r3, [pc, #76]	; (8015ec4 <tcpip_init+0x78>)
 8015e76:	f240 2261 	movw	r2, #609	; 0x261
 8015e7a:	4913      	ldr	r1, [pc, #76]	; (8015ec8 <tcpip_init+0x7c>)
 8015e7c:	4813      	ldr	r0, [pc, #76]	; (8015ecc <tcpip_init+0x80>)
 8015e7e:	f010 fd25 	bl	80268cc <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8015e82:	4813      	ldr	r0, [pc, #76]	; (8015ed0 <tcpip_init+0x84>)
 8015e84:	f00f fd84 	bl	8025990 <sys_mutex_new>
 8015e88:	4603      	mov	r3, r0
 8015e8a:	2b00      	cmp	r3, #0
 8015e8c:	d006      	beq.n	8015e9c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8015e8e:	4b0d      	ldr	r3, [pc, #52]	; (8015ec4 <tcpip_init+0x78>)
 8015e90:	f240 2265 	movw	r2, #613	; 0x265
 8015e94:	490f      	ldr	r1, [pc, #60]	; (8015ed4 <tcpip_init+0x88>)
 8015e96:	480d      	ldr	r0, [pc, #52]	; (8015ecc <tcpip_init+0x80>)
 8015e98:	f010 fd18 	bl	80268cc <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8015e9c:	2318      	movs	r3, #24
 8015e9e:	9300      	str	r3, [sp, #0]
 8015ea0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015ea4:	2200      	movs	r2, #0
 8015ea6:	490c      	ldr	r1, [pc, #48]	; (8015ed8 <tcpip_init+0x8c>)
 8015ea8:	480c      	ldr	r0, [pc, #48]	; (8015edc <tcpip_init+0x90>)
 8015eaa:	f00f fda3 	bl	80259f4 <sys_thread_new>
}
 8015eae:	bf00      	nop
 8015eb0:	3708      	adds	r7, #8
 8015eb2:	46bd      	mov	sp, r7
 8015eb4:	bd80      	pop	{r7, pc}
 8015eb6:	bf00      	nop
 8015eb8:	2001378c 	.word	0x2001378c
 8015ebc:	20013790 	.word	0x20013790
 8015ec0:	20013794 	.word	0x20013794
 8015ec4:	0802be50 	.word	0x0802be50
 8015ec8:	0802bed8 	.word	0x0802bed8
 8015ecc:	0802bea0 	.word	0x0802bea0
 8015ed0:	20017b64 	.word	0x20017b64
 8015ed4:	0802befc 	.word	0x0802befc
 8015ed8:	08015c09 	.word	0x08015c09
 8015edc:	0802bf20 	.word	0x0802bf20

08015ee0 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 8015ee0:	b580      	push	{r7, lr}
 8015ee2:	b084      	sub	sp, #16
 8015ee4:	af00      	add	r7, sp, #0
 8015ee6:	6078      	str	r0, [r7, #4]
 8015ee8:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 8015eea:	687b      	ldr	r3, [r7, #4]
 8015eec:	2b00      	cmp	r3, #0
 8015eee:	d002      	beq.n	8015ef6 <fs_open+0x16>
 8015ef0:	683b      	ldr	r3, [r7, #0]
 8015ef2:	2b00      	cmp	r3, #0
 8015ef4:	d102      	bne.n	8015efc <fs_open+0x1c>
    return ERR_ARG;
 8015ef6:	f06f 030f 	mvn.w	r3, #15
 8015efa:	e028      	b.n	8015f4e <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 8015efc:	4b16      	ldr	r3, [pc, #88]	; (8015f58 <fs_open+0x78>)
 8015efe:	60fb      	str	r3, [r7, #12]
 8015f00:	e020      	b.n	8015f44 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 8015f02:	68fb      	ldr	r3, [r7, #12]
 8015f04:	685b      	ldr	r3, [r3, #4]
 8015f06:	4619      	mov	r1, r3
 8015f08:	6838      	ldr	r0, [r7, #0]
 8015f0a:	f7ea f961 	bl	80001d0 <strcmp>
 8015f0e:	4603      	mov	r3, r0
 8015f10:	2b00      	cmp	r3, #0
 8015f12:	d114      	bne.n	8015f3e <fs_open+0x5e>
      file->data = (const char *)f->data;
 8015f14:	68fb      	ldr	r3, [r7, #12]
 8015f16:	689a      	ldr	r2, [r3, #8]
 8015f18:	687b      	ldr	r3, [r7, #4]
 8015f1a:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 8015f1c:	68fb      	ldr	r3, [r7, #12]
 8015f1e:	68da      	ldr	r2, [r3, #12]
 8015f20:	687b      	ldr	r3, [r7, #4]
 8015f22:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 8015f24:	68fb      	ldr	r3, [r7, #12]
 8015f26:	68da      	ldr	r2, [r3, #12]
 8015f28:	687b      	ldr	r3, [r7, #4]
 8015f2a:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 8015f2c:	687b      	ldr	r3, [r7, #4]
 8015f2e:	2200      	movs	r2, #0
 8015f30:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 8015f32:	68fb      	ldr	r3, [r7, #12]
 8015f34:	7c1a      	ldrb	r2, [r3, #16]
 8015f36:	687b      	ldr	r3, [r7, #4]
 8015f38:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 8015f3a:	2300      	movs	r3, #0
 8015f3c:	e007      	b.n	8015f4e <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 8015f3e:	68fb      	ldr	r3, [r7, #12]
 8015f40:	681b      	ldr	r3, [r3, #0]
 8015f42:	60fb      	str	r3, [r7, #12]
 8015f44:	68fb      	ldr	r3, [r7, #12]
 8015f46:	2b00      	cmp	r3, #0
 8015f48:	d1db      	bne.n	8015f02 <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 8015f4a:	f06f 0305 	mvn.w	r3, #5
}
 8015f4e:	4618      	mov	r0, r3
 8015f50:	3710      	adds	r7, #16
 8015f52:	46bd      	mov	sp, r7
 8015f54:	bd80      	pop	{r7, pc}
 8015f56:	bf00      	nop
 8015f58:	08030cc8 	.word	0x08030cc8

08015f5c <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 8015f5c:	b480      	push	{r7}
 8015f5e:	b083      	sub	sp, #12
 8015f60:	af00      	add	r7, sp, #0
 8015f62:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 8015f64:	bf00      	nop
 8015f66:	370c      	adds	r7, #12
 8015f68:	46bd      	mov	sp, r7
 8015f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f6e:	4770      	bx	lr

08015f70 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 8015f70:	b480      	push	{r7}
 8015f72:	b083      	sub	sp, #12
 8015f74:	af00      	add	r7, sp, #0
 8015f76:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 8015f78:	687b      	ldr	r3, [r7, #4]
 8015f7a:	685a      	ldr	r2, [r3, #4]
 8015f7c:	687b      	ldr	r3, [r7, #4]
 8015f7e:	689b      	ldr	r3, [r3, #8]
 8015f80:	1ad3      	subs	r3, r2, r3
}
 8015f82:	4618      	mov	r0, r3
 8015f84:	370c      	adds	r7, #12
 8015f86:	46bd      	mov	sp, r7
 8015f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f8c:	4770      	bx	lr

08015f8e <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 8015f8e:	b580      	push	{r7, lr}
 8015f90:	b082      	sub	sp, #8
 8015f92:	af00      	add	r7, sp, #0
 8015f94:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 8015f96:	22ac      	movs	r2, #172	; 0xac
 8015f98:	2100      	movs	r1, #0
 8015f9a:	6878      	ldr	r0, [r7, #4]
 8015f9c:	f00f fdea 	bl	8025b74 <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 8015fa0:	bf00      	nop
 8015fa2:	3708      	adds	r7, #8
 8015fa4:	46bd      	mov	sp, r7
 8015fa6:	bd80      	pop	{r7, pc}

08015fa8 <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 8015fa8:	b580      	push	{r7, lr}
 8015faa:	b082      	sub	sp, #8
 8015fac:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 8015fae:	20ac      	movs	r0, #172	; 0xac
 8015fb0:	f002 ff56 	bl	8018e60 <mem_malloc>
 8015fb4:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 8015fb6:	687b      	ldr	r3, [r7, #4]
 8015fb8:	2b00      	cmp	r3, #0
 8015fba:	d002      	beq.n	8015fc2 <http_state_alloc+0x1a>
    http_state_init(ret);
 8015fbc:	6878      	ldr	r0, [r7, #4]
 8015fbe:	f7ff ffe6 	bl	8015f8e <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 8015fc2:	687b      	ldr	r3, [r7, #4]
}
 8015fc4:	4618      	mov	r0, r3
 8015fc6:	3708      	adds	r7, #8
 8015fc8:	46bd      	mov	sp, r7
 8015fca:	bd80      	pop	{r7, pc}

08015fcc <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 8015fcc:	b580      	push	{r7, lr}
 8015fce:	b082      	sub	sp, #8
 8015fd0:	af00      	add	r7, sp, #0
 8015fd2:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 8015fd4:	687b      	ldr	r3, [r7, #4]
 8015fd6:	695b      	ldr	r3, [r3, #20]
 8015fd8:	2b00      	cmp	r3, #0
 8015fda:	d007      	beq.n	8015fec <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 8015fdc:	687b      	ldr	r3, [r7, #4]
 8015fde:	695b      	ldr	r3, [r3, #20]
 8015fe0:	4618      	mov	r0, r3
 8015fe2:	f7ff ffbb 	bl	8015f5c <fs_close>
    hs->handle = NULL;
 8015fe6:	687b      	ldr	r3, [r7, #4]
 8015fe8:	2200      	movs	r2, #0
 8015fea:	615a      	str	r2, [r3, #20]
    http_ssi_state_free(hs->ssi);
    hs->ssi = NULL;
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 8015fec:	687b      	ldr	r3, [r7, #4]
 8015fee:	6a1b      	ldr	r3, [r3, #32]
 8015ff0:	2b00      	cmp	r3, #0
 8015ff2:	d007      	beq.n	8016004 <http_state_eof+0x38>
    pbuf_free(hs->req);
 8015ff4:	687b      	ldr	r3, [r7, #4]
 8015ff6:	6a1b      	ldr	r3, [r3, #32]
 8015ff8:	4618      	mov	r0, r3
 8015ffa:	f003 ffdd 	bl	8019fb8 <pbuf_free>
    hs->req = NULL;
 8015ffe:	687b      	ldr	r3, [r7, #4]
 8016000:	2200      	movs	r2, #0
 8016002:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 8016004:	bf00      	nop
 8016006:	3708      	adds	r7, #8
 8016008:	46bd      	mov	sp, r7
 801600a:	bd80      	pop	{r7, pc}

0801600c <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 801600c:	b580      	push	{r7, lr}
 801600e:	b082      	sub	sp, #8
 8016010:	af00      	add	r7, sp, #0
 8016012:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 8016014:	687b      	ldr	r3, [r7, #4]
 8016016:	2b00      	cmp	r3, #0
 8016018:	d005      	beq.n	8016026 <http_state_free+0x1a>
    http_state_eof(hs);
 801601a:	6878      	ldr	r0, [r7, #4]
 801601c:	f7ff ffd6 	bl	8015fcc <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 8016020:	6878      	ldr	r0, [r7, #4]
 8016022:	f002 fd83 	bl	8018b2c <mem_free>
  }
}
 8016026:	bf00      	nop
 8016028:	3708      	adds	r7, #8
 801602a:	46bd      	mov	sp, r7
 801602c:	bd80      	pop	{r7, pc}
	...

08016030 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 8016030:	b580      	push	{r7, lr}
 8016032:	b086      	sub	sp, #24
 8016034:	af00      	add	r7, sp, #0
 8016036:	60f8      	str	r0, [r7, #12]
 8016038:	60b9      	str	r1, [r7, #8]
 801603a:	607a      	str	r2, [r7, #4]
 801603c:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 801603e:	687b      	ldr	r3, [r7, #4]
 8016040:	2b00      	cmp	r3, #0
 8016042:	d106      	bne.n	8016052 <http_write+0x22>
 8016044:	4b2c      	ldr	r3, [pc, #176]	; (80160f8 <http_write+0xc8>)
 8016046:	f240 2219 	movw	r2, #537	; 0x219
 801604a:	492c      	ldr	r1, [pc, #176]	; (80160fc <http_write+0xcc>)
 801604c:	482c      	ldr	r0, [pc, #176]	; (8016100 <http_write+0xd0>)
 801604e:	f010 fc3d 	bl	80268cc <iprintf>
  len = *length;
 8016052:	687b      	ldr	r3, [r7, #4]
 8016054:	881b      	ldrh	r3, [r3, #0]
 8016056:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 8016058:	8afb      	ldrh	r3, [r7, #22]
 801605a:	2b00      	cmp	r3, #0
 801605c:	d101      	bne.n	8016062 <http_write+0x32>
    return ERR_OK;
 801605e:	2300      	movs	r3, #0
 8016060:	e045      	b.n	80160ee <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 8016062:	68fb      	ldr	r3, [r7, #12]
 8016064:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8016068:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 801606a:	8aba      	ldrh	r2, [r7, #20]
 801606c:	8afb      	ldrh	r3, [r7, #22]
 801606e:	429a      	cmp	r2, r3
 8016070:	d201      	bcs.n	8016076 <http_write+0x46>
    len = max_len;
 8016072:	8abb      	ldrh	r3, [r7, #20]
 8016074:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 8016076:	68fb      	ldr	r3, [r7, #12]
 8016078:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801607a:	005b      	lsls	r3, r3, #1
 801607c:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 801607e:	8afa      	ldrh	r2, [r7, #22]
 8016080:	8abb      	ldrh	r3, [r7, #20]
 8016082:	429a      	cmp	r2, r3
 8016084:	d901      	bls.n	801608a <http_write+0x5a>
    len = max_len;
 8016086:	8abb      	ldrh	r3, [r7, #20]
 8016088:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 801608a:	78fb      	ldrb	r3, [r7, #3]
 801608c:	8afa      	ldrh	r2, [r7, #22]
 801608e:	68b9      	ldr	r1, [r7, #8]
 8016090:	68f8      	ldr	r0, [r7, #12]
 8016092:	f008 feb1 	bl	801edf8 <tcp_write>
 8016096:	4603      	mov	r3, r0
 8016098:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 801609a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801609e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80160a2:	d10f      	bne.n	80160c4 <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 80160a4:	68fb      	ldr	r3, [r7, #12]
 80160a6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80160aa:	2b00      	cmp	r3, #0
 80160ac:	d004      	beq.n	80160b8 <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 80160ae:	68fb      	ldr	r3, [r7, #12]
 80160b0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 80160b4:	2b08      	cmp	r3, #8
 80160b6:	d902      	bls.n	80160be <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 80160b8:	2301      	movs	r3, #1
 80160ba:	82fb      	strh	r3, [r7, #22]
 80160bc:	e002      	b.n	80160c4 <http_write+0x94>
      } else {
        len /= 2;
 80160be:	8afb      	ldrh	r3, [r7, #22]
 80160c0:	085b      	lsrs	r3, r3, #1
 80160c2:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 80160c4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80160c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80160cc:	d102      	bne.n	80160d4 <http_write+0xa4>
 80160ce:	8afb      	ldrh	r3, [r7, #22]
 80160d0:	2b01      	cmp	r3, #1
 80160d2:	d8da      	bhi.n	801608a <http_write+0x5a>

  if (err == ERR_OK) {
 80160d4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80160d8:	2b00      	cmp	r3, #0
 80160da:	d103      	bne.n	80160e4 <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 80160dc:	687b      	ldr	r3, [r7, #4]
 80160de:	8afa      	ldrh	r2, [r7, #22]
 80160e0:	801a      	strh	r2, [r3, #0]
 80160e2:	e002      	b.n	80160ea <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 80160e4:	687b      	ldr	r3, [r7, #4]
 80160e6:	2200      	movs	r2, #0
 80160e8:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 80160ea:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 80160ee:	4618      	mov	r0, r3
 80160f0:	3718      	adds	r7, #24
 80160f2:	46bd      	mov	sp, r7
 80160f4:	bd80      	pop	{r7, pc}
 80160f6:	bf00      	nop
 80160f8:	0802bf70 	.word	0x0802bf70
 80160fc:	0802bfa8 	.word	0x0802bfa8
 8016100:	0802bfb8 	.word	0x0802bfb8

08016104 <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 8016104:	b580      	push	{r7, lr}
 8016106:	b086      	sub	sp, #24
 8016108:	af00      	add	r7, sp, #0
 801610a:	60f8      	str	r0, [r7, #12]
 801610c:	60b9      	str	r1, [r7, #8]
 801610e:	4613      	mov	r3, r2
 8016110:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 8016112:	2100      	movs	r1, #0
 8016114:	68f8      	ldr	r0, [r7, #12]
 8016116:	f005 ff2d 	bl	801bf74 <tcp_arg>
  altcp_recv(pcb, NULL);
 801611a:	2100      	movs	r1, #0
 801611c:	68f8      	ldr	r0, [r7, #12]
 801611e:	f005 ff3b 	bl	801bf98 <tcp_recv>
  altcp_err(pcb, NULL);
 8016122:	2100      	movs	r1, #0
 8016124:	68f8      	ldr	r0, [r7, #12]
 8016126:	f005 ff7b 	bl	801c020 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 801612a:	2200      	movs	r2, #0
 801612c:	2100      	movs	r1, #0
 801612e:	68f8      	ldr	r0, [r7, #12]
 8016130:	f005 ffb0 	bl	801c094 <tcp_poll>
  altcp_sent(pcb, NULL);
 8016134:	2100      	movs	r1, #0
 8016136:	68f8      	ldr	r0, [r7, #12]
 8016138:	f005 ff50 	bl	801bfdc <tcp_sent>
  if (hs != NULL) {
 801613c:	68bb      	ldr	r3, [r7, #8]
 801613e:	2b00      	cmp	r3, #0
 8016140:	d002      	beq.n	8016148 <http_close_or_abort_conn+0x44>
    http_state_free(hs);
 8016142:	68b8      	ldr	r0, [r7, #8]
 8016144:	f7ff ff62 	bl	801600c <http_state_free>
  }

  if (abort_conn) {
 8016148:	79fb      	ldrb	r3, [r7, #7]
 801614a:	2b00      	cmp	r3, #0
 801614c:	d004      	beq.n	8016158 <http_close_or_abort_conn+0x54>
    altcp_abort(pcb);
 801614e:	68f8      	ldr	r0, [r7, #12]
 8016150:	f004 fd3a 	bl	801abc8 <tcp_abort>
    return ERR_OK;
 8016154:	2300      	movs	r3, #0
 8016156:	e00f      	b.n	8016178 <http_close_or_abort_conn+0x74>
  }
  err = altcp_close(pcb);
 8016158:	68f8      	ldr	r0, [r7, #12]
 801615a:	f004 fc4b 	bl	801a9f4 <tcp_close>
 801615e:	4603      	mov	r3, r0
 8016160:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 8016162:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8016166:	2b00      	cmp	r3, #0
 8016168:	d004      	beq.n	8016174 <http_close_or_abort_conn+0x70>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 801616a:	2204      	movs	r2, #4
 801616c:	4904      	ldr	r1, [pc, #16]	; (8016180 <http_close_or_abort_conn+0x7c>)
 801616e:	68f8      	ldr	r0, [r7, #12]
 8016170:	f005 ff90 	bl	801c094 <tcp_poll>
  }
  return err;
 8016174:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016178:	4618      	mov	r0, r3
 801617a:	3718      	adds	r7, #24
 801617c:	46bd      	mov	sp, r7
 801617e:	bd80      	pop	{r7, pc}
 8016180:	08016993 	.word	0x08016993

08016184 <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 8016184:	b580      	push	{r7, lr}
 8016186:	b082      	sub	sp, #8
 8016188:	af00      	add	r7, sp, #0
 801618a:	6078      	str	r0, [r7, #4]
 801618c:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 801618e:	2200      	movs	r2, #0
 8016190:	6839      	ldr	r1, [r7, #0]
 8016192:	6878      	ldr	r0, [r7, #4]
 8016194:	f7ff ffb6 	bl	8016104 <http_close_or_abort_conn>
 8016198:	4603      	mov	r3, r0
}
 801619a:	4618      	mov	r0, r3
 801619c:	3708      	adds	r7, #8
 801619e:	46bd      	mov	sp, r7
 80161a0:	bd80      	pop	{r7, pc}

080161a2 <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 80161a2:	b580      	push	{r7, lr}
 80161a4:	b082      	sub	sp, #8
 80161a6:	af00      	add	r7, sp, #0
 80161a8:	6078      	str	r0, [r7, #4]
 80161aa:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 80161ac:	6839      	ldr	r1, [r7, #0]
 80161ae:	6878      	ldr	r0, [r7, #4]
 80161b0:	f7ff ffe8 	bl	8016184 <http_close_conn>
  }
}
 80161b4:	bf00      	nop
 80161b6:	3708      	adds	r7, #8
 80161b8:	46bd      	mov	sp, r7
 80161ba:	bd80      	pop	{r7, pc}

080161bc <extract_uri_parameters>:
 * @param params pointer to the NULL-terminated parameter string from the URI
 * @return number of parameters extracted
 */
static int
extract_uri_parameters(struct http_state *hs, char *params)
{
 80161bc:	b580      	push	{r7, lr}
 80161be:	b086      	sub	sp, #24
 80161c0:	af00      	add	r7, sp, #0
 80161c2:	6078      	str	r0, [r7, #4]
 80161c4:	6039      	str	r1, [r7, #0]
  int loop;

  LWIP_UNUSED_ARG(hs);

  /* If we have no parameters at all, return immediately. */
  if (!params || (params[0] == '\0')) {
 80161c6:	683b      	ldr	r3, [r7, #0]
 80161c8:	2b00      	cmp	r3, #0
 80161ca:	d003      	beq.n	80161d4 <extract_uri_parameters+0x18>
 80161cc:	683b      	ldr	r3, [r7, #0]
 80161ce:	781b      	ldrb	r3, [r3, #0]
 80161d0:	2b00      	cmp	r3, #0
 80161d2:	d101      	bne.n	80161d8 <extract_uri_parameters+0x1c>
    return (0);
 80161d4:	2300      	movs	r3, #0
 80161d6:	e04e      	b.n	8016276 <extract_uri_parameters+0xba>
  }

  /* Get a pointer to our first parameter */
  pair = params;
 80161d8:	683b      	ldr	r3, [r7, #0]
 80161da:	617b      	str	r3, [r7, #20]

  /* Parse up to LWIP_HTTPD_MAX_CGI_PARAMETERS from the passed string and ignore the
   * remainder (if any) */
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 80161dc:	2300      	movs	r3, #0
 80161de:	613b      	str	r3, [r7, #16]
 80161e0:	e042      	b.n	8016268 <extract_uri_parameters+0xac>

    /* Save the name of the parameter */
    http_cgi_params[loop] = pair;
 80161e2:	687a      	ldr	r2, [r7, #4]
 80161e4:	693b      	ldr	r3, [r7, #16]
 80161e6:	330a      	adds	r3, #10
 80161e8:	009b      	lsls	r3, r3, #2
 80161ea:	4413      	add	r3, r2
 80161ec:	697a      	ldr	r2, [r7, #20]
 80161ee:	605a      	str	r2, [r3, #4]

    /* Remember the start of this name=value pair */
    equals = pair;
 80161f0:	697b      	ldr	r3, [r7, #20]
 80161f2:	60fb      	str	r3, [r7, #12]

    /* Find the start of the next name=value pair and replace the delimiter
     * with a 0 to terminate the previous pair string. */
    pair = strchr(pair, '&');
 80161f4:	2126      	movs	r1, #38	; 0x26
 80161f6:	6978      	ldr	r0, [r7, #20]
 80161f8:	f010 fcec 	bl	8026bd4 <strchr>
 80161fc:	6178      	str	r0, [r7, #20]
    if (pair) {
 80161fe:	697b      	ldr	r3, [r7, #20]
 8016200:	2b00      	cmp	r3, #0
 8016202:	d006      	beq.n	8016212 <extract_uri_parameters+0x56>
      *pair = '\0';
 8016204:	697b      	ldr	r3, [r7, #20]
 8016206:	2200      	movs	r2, #0
 8016208:	701a      	strb	r2, [r3, #0]
      pair++;
 801620a:	697b      	ldr	r3, [r7, #20]
 801620c:	3301      	adds	r3, #1
 801620e:	617b      	str	r3, [r7, #20]
 8016210:	e00c      	b.n	801622c <extract_uri_parameters+0x70>
    } else {
      /* We didn't find a new parameter so find the end of the URI and
       * replace the space with a '\0' */
      pair = strchr(equals, ' ');
 8016212:	2120      	movs	r1, #32
 8016214:	68f8      	ldr	r0, [r7, #12]
 8016216:	f010 fcdd 	bl	8026bd4 <strchr>
 801621a:	6178      	str	r0, [r7, #20]
      if (pair) {
 801621c:	697b      	ldr	r3, [r7, #20]
 801621e:	2b00      	cmp	r3, #0
 8016220:	d002      	beq.n	8016228 <extract_uri_parameters+0x6c>
        *pair = '\0';
 8016222:	697b      	ldr	r3, [r7, #20]
 8016224:	2200      	movs	r2, #0
 8016226:	701a      	strb	r2, [r3, #0]
      }

      /* Revert to NULL so that we exit the loop as expected. */
      pair = NULL;
 8016228:	2300      	movs	r3, #0
 801622a:	617b      	str	r3, [r7, #20]
    }

    /* Now find the '=' in the previous pair, replace it with '\0' and save
     * the parameter value string. */
    equals = strchr(equals, '=');
 801622c:	213d      	movs	r1, #61	; 0x3d
 801622e:	68f8      	ldr	r0, [r7, #12]
 8016230:	f010 fcd0 	bl	8026bd4 <strchr>
 8016234:	60f8      	str	r0, [r7, #12]
    if (equals) {
 8016236:	68fb      	ldr	r3, [r7, #12]
 8016238:	2b00      	cmp	r3, #0
 801623a:	d00b      	beq.n	8016254 <extract_uri_parameters+0x98>
      *equals = '\0';
 801623c:	68fb      	ldr	r3, [r7, #12]
 801623e:	2200      	movs	r2, #0
 8016240:	701a      	strb	r2, [r3, #0]
      http_cgi_param_vals[loop] = equals + 1;
 8016242:	68fb      	ldr	r3, [r7, #12]
 8016244:	1c5a      	adds	r2, r3, #1
 8016246:	6879      	ldr	r1, [r7, #4]
 8016248:	693b      	ldr	r3, [r7, #16]
 801624a:	331a      	adds	r3, #26
 801624c:	009b      	lsls	r3, r3, #2
 801624e:	440b      	add	r3, r1
 8016250:	605a      	str	r2, [r3, #4]
 8016252:	e006      	b.n	8016262 <extract_uri_parameters+0xa6>
    } else {
      http_cgi_param_vals[loop] = NULL;
 8016254:	687a      	ldr	r2, [r7, #4]
 8016256:	693b      	ldr	r3, [r7, #16]
 8016258:	331a      	adds	r3, #26
 801625a:	009b      	lsls	r3, r3, #2
 801625c:	4413      	add	r3, r2
 801625e:	2200      	movs	r2, #0
 8016260:	605a      	str	r2, [r3, #4]
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8016262:	693b      	ldr	r3, [r7, #16]
 8016264:	3301      	adds	r3, #1
 8016266:	613b      	str	r3, [r7, #16]
 8016268:	693b      	ldr	r3, [r7, #16]
 801626a:	2b0f      	cmp	r3, #15
 801626c:	dc02      	bgt.n	8016274 <extract_uri_parameters+0xb8>
 801626e:	697b      	ldr	r3, [r7, #20]
 8016270:	2b00      	cmp	r3, #0
 8016272:	d1b6      	bne.n	80161e2 <extract_uri_parameters+0x26>
    }
  }

  return loop;
 8016274:	693b      	ldr	r3, [r7, #16]
}
 8016276:	4618      	mov	r0, r3
 8016278:	3718      	adds	r7, #24
 801627a:	46bd      	mov	sp, r7
 801627c:	bd80      	pop	{r7, pc}
	...

08016280 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8016280:	b580      	push	{r7, lr}
 8016282:	b084      	sub	sp, #16
 8016284:	af00      	add	r7, sp, #0
 8016286:	6078      	str	r0, [r7, #4]
 8016288:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 801628a:	683b      	ldr	r3, [r7, #0]
 801628c:	695b      	ldr	r3, [r3, #20]
 801628e:	2b00      	cmp	r3, #0
 8016290:	d105      	bne.n	801629e <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 8016292:	6839      	ldr	r1, [r7, #0]
 8016294:	6878      	ldr	r0, [r7, #4]
 8016296:	f7ff ff84 	bl	80161a2 <http_eof>
    return 0;
 801629a:	2300      	movs	r3, #0
 801629c:	e016      	b.n	80162cc <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 801629e:	683b      	ldr	r3, [r7, #0]
 80162a0:	695b      	ldr	r3, [r3, #20]
 80162a2:	4618      	mov	r0, r3
 80162a4:	f7ff fe64 	bl	8015f70 <fs_bytes_left>
 80162a8:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 80162aa:	68fb      	ldr	r3, [r7, #12]
 80162ac:	2b00      	cmp	r3, #0
 80162ae:	dc05      	bgt.n	80162bc <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 80162b0:	6839      	ldr	r1, [r7, #0]
 80162b2:	6878      	ldr	r0, [r7, #4]
 80162b4:	f7ff ff75 	bl	80161a2 <http_eof>
    return 0;
 80162b8:	2300      	movs	r3, #0
 80162ba:	e007      	b.n	80162cc <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 80162bc:	4b05      	ldr	r3, [pc, #20]	; (80162d4 <http_check_eof+0x54>)
 80162be:	f240 429d 	movw	r2, #1181	; 0x49d
 80162c2:	4905      	ldr	r1, [pc, #20]	; (80162d8 <http_check_eof+0x58>)
 80162c4:	4805      	ldr	r0, [pc, #20]	; (80162dc <http_check_eof+0x5c>)
 80162c6:	f010 fb01 	bl	80268cc <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 80162ca:	2301      	movs	r3, #1
}
 80162cc:	4618      	mov	r0, r3
 80162ce:	3710      	adds	r7, #16
 80162d0:	46bd      	mov	sp, r7
 80162d2:	bd80      	pop	{r7, pc}
 80162d4:	0802bf70 	.word	0x0802bf70
 80162d8:	0802bfe0 	.word	0x0802bfe0
 80162dc:	0802bfb8 	.word	0x0802bfb8

080162e0 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 80162e0:	b580      	push	{r7, lr}
 80162e2:	b084      	sub	sp, #16
 80162e4:	af00      	add	r7, sp, #0
 80162e6:	6078      	str	r0, [r7, #4]
 80162e8:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 80162ea:	2300      	movs	r3, #0
 80162ec:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 80162ee:	683b      	ldr	r3, [r7, #0]
 80162f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80162f2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80162f6:	4293      	cmp	r3, r2
 80162f8:	d803      	bhi.n	8016302 <http_send_data_nonssi+0x22>
 80162fa:	683b      	ldr	r3, [r7, #0]
 80162fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80162fe:	b29b      	uxth	r3, r3
 8016300:	e001      	b.n	8016306 <http_send_data_nonssi+0x26>
 8016302:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016306:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8016308:	683b      	ldr	r3, [r7, #0]
 801630a:	6999      	ldr	r1, [r3, #24]
 801630c:	f107 020c 	add.w	r2, r7, #12
 8016310:	2300      	movs	r3, #0
 8016312:	6878      	ldr	r0, [r7, #4]
 8016314:	f7ff fe8c 	bl	8016030 <http_write>
 8016318:	4603      	mov	r3, r0
 801631a:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 801631c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016320:	2b00      	cmp	r3, #0
 8016322:	d10d      	bne.n	8016340 <http_send_data_nonssi+0x60>
    data_to_send = 1;
 8016324:	2301      	movs	r3, #1
 8016326:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 8016328:	683b      	ldr	r3, [r7, #0]
 801632a:	699b      	ldr	r3, [r3, #24]
 801632c:	89ba      	ldrh	r2, [r7, #12]
 801632e:	441a      	add	r2, r3
 8016330:	683b      	ldr	r3, [r7, #0]
 8016332:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 8016334:	683b      	ldr	r3, [r7, #0]
 8016336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016338:	89ba      	ldrh	r2, [r7, #12]
 801633a:	1a9a      	subs	r2, r3, r2
 801633c:	683b      	ldr	r3, [r7, #0]
 801633e:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 8016340:	7bfb      	ldrb	r3, [r7, #15]
}
 8016342:	4618      	mov	r0, r3
 8016344:	3710      	adds	r7, #16
 8016346:	46bd      	mov	sp, r7
 8016348:	bd80      	pop	{r7, pc}

0801634a <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 801634a:	b580      	push	{r7, lr}
 801634c:	b084      	sub	sp, #16
 801634e:	af00      	add	r7, sp, #0
 8016350:	6078      	str	r0, [r7, #4]
 8016352:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 8016354:	2300      	movs	r3, #0
 8016356:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 8016358:	683b      	ldr	r3, [r7, #0]
 801635a:	2b00      	cmp	r3, #0
 801635c:	d101      	bne.n	8016362 <http_send+0x18>
    return 0;
 801635e:	2300      	movs	r3, #0
 8016360:	e025      	b.n	80163ae <http_send+0x64>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 8016362:	683b      	ldr	r3, [r7, #0]
 8016364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016366:	2b00      	cmp	r3, #0
 8016368:	d108      	bne.n	801637c <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 801636a:	6839      	ldr	r1, [r7, #0]
 801636c:	6878      	ldr	r0, [r7, #4]
 801636e:	f7ff ff87 	bl	8016280 <http_check_eof>
 8016372:	4603      	mov	r3, r0
 8016374:	2b00      	cmp	r3, #0
 8016376:	d101      	bne.n	801637c <http_send+0x32>
      return 0;
 8016378:	2300      	movs	r3, #0
 801637a:	e018      	b.n	80163ae <http_send+0x64>
  if (hs->ssi) {
    data_to_send = http_send_data_ssi(pcb, hs);
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 801637c:	6839      	ldr	r1, [r7, #0]
 801637e:	6878      	ldr	r0, [r7, #4]
 8016380:	f7ff ffae 	bl	80162e0 <http_send_data_nonssi>
 8016384:	4603      	mov	r3, r0
 8016386:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 8016388:	683b      	ldr	r3, [r7, #0]
 801638a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801638c:	2b00      	cmp	r3, #0
 801638e:	d10d      	bne.n	80163ac <http_send+0x62>
 8016390:	683b      	ldr	r3, [r7, #0]
 8016392:	695b      	ldr	r3, [r3, #20]
 8016394:	4618      	mov	r0, r3
 8016396:	f7ff fdeb 	bl	8015f70 <fs_bytes_left>
 801639a:	4603      	mov	r3, r0
 801639c:	2b00      	cmp	r3, #0
 801639e:	dc05      	bgt.n	80163ac <http_send+0x62>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 80163a0:	6839      	ldr	r1, [r7, #0]
 80163a2:	6878      	ldr	r0, [r7, #4]
 80163a4:	f7ff fefd 	bl	80161a2 <http_eof>
    return 0;
 80163a8:	2300      	movs	r3, #0
 80163aa:	e000      	b.n	80163ae <http_send+0x64>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 80163ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80163ae:	4618      	mov	r0, r3
 80163b0:	3710      	adds	r7, #16
 80163b2:	46bd      	mov	sp, r7
 80163b4:	bd80      	pop	{r7, pc}
	...

080163b8 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 80163b8:	b580      	push	{r7, lr}
 80163ba:	b084      	sub	sp, #16
 80163bc:	af00      	add	r7, sp, #0
 80163be:	6078      	str	r0, [r7, #4]
 80163c0:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 80163c2:	683b      	ldr	r3, [r7, #0]
 80163c4:	4a1c      	ldr	r2, [pc, #112]	; (8016438 <http_get_404_file+0x80>)
 80163c6:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 80163c8:	687a      	ldr	r2, [r7, #4]
 80163ca:	683b      	ldr	r3, [r7, #0]
 80163cc:	681b      	ldr	r3, [r3, #0]
 80163ce:	4619      	mov	r1, r3
 80163d0:	4610      	mov	r0, r2
 80163d2:	f7ff fd85 	bl	8015ee0 <fs_open>
 80163d6:	4603      	mov	r3, r0
 80163d8:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80163da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80163de:	2b00      	cmp	r3, #0
 80163e0:	d024      	beq.n	801642c <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 80163e2:	683b      	ldr	r3, [r7, #0]
 80163e4:	4a15      	ldr	r2, [pc, #84]	; (801643c <http_get_404_file+0x84>)
 80163e6:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 80163e8:	687a      	ldr	r2, [r7, #4]
 80163ea:	683b      	ldr	r3, [r7, #0]
 80163ec:	681b      	ldr	r3, [r3, #0]
 80163ee:	4619      	mov	r1, r3
 80163f0:	4610      	mov	r0, r2
 80163f2:	f7ff fd75 	bl	8015ee0 <fs_open>
 80163f6:	4603      	mov	r3, r0
 80163f8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80163fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80163fe:	2b00      	cmp	r3, #0
 8016400:	d014      	beq.n	801642c <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 8016402:	683b      	ldr	r3, [r7, #0]
 8016404:	4a0e      	ldr	r2, [pc, #56]	; (8016440 <http_get_404_file+0x88>)
 8016406:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 8016408:	687a      	ldr	r2, [r7, #4]
 801640a:	683b      	ldr	r3, [r7, #0]
 801640c:	681b      	ldr	r3, [r3, #0]
 801640e:	4619      	mov	r1, r3
 8016410:	4610      	mov	r0, r2
 8016412:	f7ff fd65 	bl	8015ee0 <fs_open>
 8016416:	4603      	mov	r3, r0
 8016418:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 801641a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801641e:	2b00      	cmp	r3, #0
 8016420:	d004      	beq.n	801642c <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 8016422:	683b      	ldr	r3, [r7, #0]
 8016424:	2200      	movs	r2, #0
 8016426:	601a      	str	r2, [r3, #0]
        return NULL;
 8016428:	2300      	movs	r3, #0
 801642a:	e000      	b.n	801642e <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 801642c:	687b      	ldr	r3, [r7, #4]
}
 801642e:	4618      	mov	r0, r3
 8016430:	3710      	adds	r7, #16
 8016432:	46bd      	mov	sp, r7
 8016434:	bd80      	pop	{r7, pc}
 8016436:	bf00      	nop
 8016438:	0802c018 	.word	0x0802c018
 801643c:	0802c024 	.word	0x0802c024
 8016440:	0802c030 	.word	0x0802c030

08016444 <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 8016444:	b580      	push	{r7, lr}
 8016446:	b08e      	sub	sp, #56	; 0x38
 8016448:	af00      	add	r7, sp, #0
 801644a:	60f8      	str	r0, [r7, #12]
 801644c:	60b9      	str	r1, [r7, #8]
 801644e:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 8016450:	68fb      	ldr	r3, [r7, #12]
 8016452:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 8016454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016456:	2b00      	cmp	r3, #0
 8016458:	d106      	bne.n	8016468 <http_parse_request+0x24>
 801645a:	4b65      	ldr	r3, [pc, #404]	; (80165f0 <http_parse_request+0x1ac>)
 801645c:	f240 72ae 	movw	r2, #1966	; 0x7ae
 8016460:	4964      	ldr	r1, [pc, #400]	; (80165f4 <http_parse_request+0x1b0>)
 8016462:	4865      	ldr	r0, [pc, #404]	; (80165f8 <http_parse_request+0x1b4>)
 8016464:	f010 fa32 	bl	80268cc <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 8016468:	68bb      	ldr	r3, [r7, #8]
 801646a:	2b00      	cmp	r3, #0
 801646c:	d106      	bne.n	801647c <http_parse_request+0x38>
 801646e:	4b60      	ldr	r3, [pc, #384]	; (80165f0 <http_parse_request+0x1ac>)
 8016470:	f240 72af 	movw	r2, #1967	; 0x7af
 8016474:	4961      	ldr	r1, [pc, #388]	; (80165fc <http_parse_request+0x1b8>)
 8016476:	4860      	ldr	r0, [pc, #384]	; (80165f8 <http_parse_request+0x1b4>)
 8016478:	f010 fa28 	bl	80268cc <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 801647c:	68bb      	ldr	r3, [r7, #8]
 801647e:	695b      	ldr	r3, [r3, #20]
 8016480:	2b00      	cmp	r3, #0
 8016482:	d103      	bne.n	801648c <http_parse_request+0x48>
 8016484:	68bb      	ldr	r3, [r7, #8]
 8016486:	699b      	ldr	r3, [r3, #24]
 8016488:	2b00      	cmp	r3, #0
 801648a:	d002      	beq.n	8016492 <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 801648c:	f06f 0307 	mvn.w	r3, #7
 8016490:	e0a9      	b.n	80165e6 <http_parse_request+0x1a2>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 8016492:	68bb      	ldr	r3, [r7, #8]
 8016494:	6a1b      	ldr	r3, [r3, #32]
 8016496:	2b00      	cmp	r3, #0
 8016498:	d103      	bne.n	80164a2 <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 801649a:	68bb      	ldr	r3, [r7, #8]
 801649c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801649e:	621a      	str	r2, [r3, #32]
 80164a0:	e005      	b.n	80164ae <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 80164a2:	68bb      	ldr	r3, [r7, #8]
 80164a4:	6a1b      	ldr	r3, [r3, #32]
 80164a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80164a8:	4618      	mov	r0, r3
 80164aa:	f003 fe53 	bl	801a154 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 80164ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80164b0:	f003 fe28 	bl	801a104 <pbuf_ref>

  if (hs->req->next != NULL) {
 80164b4:	68bb      	ldr	r3, [r7, #8]
 80164b6:	6a1b      	ldr	r3, [r3, #32]
 80164b8:	681b      	ldr	r3, [r3, #0]
 80164ba:	2b00      	cmp	r3, #0
 80164bc:	d012      	beq.n	80164e4 <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 80164be:	68bb      	ldr	r3, [r7, #8]
 80164c0:	6a1b      	ldr	r3, [r3, #32]
 80164c2:	891b      	ldrh	r3, [r3, #8]
 80164c4:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80164c8:	4293      	cmp	r3, r2
 80164ca:	bf28      	it	cs
 80164cc:	4613      	movcs	r3, r2
 80164ce:	867b      	strh	r3, [r7, #50]	; 0x32
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 80164d0:	68bb      	ldr	r3, [r7, #8]
 80164d2:	6a18      	ldr	r0, [r3, #32]
 80164d4:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80164d6:	2300      	movs	r3, #0
 80164d8:	4949      	ldr	r1, [pc, #292]	; (8016600 <http_parse_request+0x1bc>)
 80164da:	f003 ff73 	bl	801a3c4 <pbuf_copy_partial>
    data = httpd_req_buf;
 80164de:	4b48      	ldr	r3, [pc, #288]	; (8016600 <http_parse_request+0x1bc>)
 80164e0:	637b      	str	r3, [r7, #52]	; 0x34
 80164e2:	e005      	b.n	80164f0 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 80164e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164e6:	685b      	ldr	r3, [r3, #4]
 80164e8:	637b      	str	r3, [r7, #52]	; 0x34
    data_len = p->len;
 80164ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164ec:	895b      	ldrh	r3, [r3, #10]
 80164ee:	867b      	strh	r3, [r7, #50]	; 0x32
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 80164f0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80164f2:	2b06      	cmp	r3, #6
 80164f4:	d962      	bls.n	80165bc <http_parse_request+0x178>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 80164f6:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80164f8:	461a      	mov	r2, r3
 80164fa:	4942      	ldr	r1, [pc, #264]	; (8016604 <http_parse_request+0x1c0>)
 80164fc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80164fe:	f002 f973 	bl	80187e8 <lwip_strnstr>
 8016502:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 8016504:	6a3b      	ldr	r3, [r7, #32]
 8016506:	2b00      	cmp	r3, #0
 8016508:	d058      	beq.n	80165bc <http_parse_request+0x178>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 801650a:	2300      	movs	r3, #0
 801650c:	62fb      	str	r3, [r7, #44]	; 0x2c
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 801650e:	2204      	movs	r2, #4
 8016510:	493d      	ldr	r1, [pc, #244]	; (8016608 <http_parse_request+0x1c4>)
 8016512:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8016514:	f010 fb73 	bl	8026bfe <strncmp>
 8016518:	4603      	mov	r3, r0
 801651a:	2b00      	cmp	r3, #0
 801651c:	d116      	bne.n	801654c <http_parse_request+0x108>
        sp1 = data + 3;
 801651e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016520:	3303      	adds	r3, #3
 8016522:	61fb      	str	r3, [r7, #28]
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 8016524:	69fb      	ldr	r3, [r7, #28]
 8016526:	1c5a      	adds	r2, r3, #1
 8016528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801652a:	1ad3      	subs	r3, r2, r3
 801652c:	b29b      	uxth	r3, r3
 801652e:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8016530:	1ad3      	subs	r3, r2, r3
 8016532:	837b      	strh	r3, [r7, #26]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8016534:	69fb      	ldr	r3, [r7, #28]
 8016536:	3301      	adds	r3, #1
 8016538:	8b7a      	ldrh	r2, [r7, #26]
 801653a:	4934      	ldr	r1, [pc, #208]	; (801660c <http_parse_request+0x1c8>)
 801653c:	4618      	mov	r0, r3
 801653e:	f002 f953 	bl	80187e8 <lwip_strnstr>
 8016542:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 8016544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016546:	2b00      	cmp	r3, #0
 8016548:	d111      	bne.n	801656e <http_parse_request+0x12a>
 801654a:	e006      	b.n	801655a <http_parse_request+0x116>
        data[4] = 0;
 801654c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801654e:	3304      	adds	r3, #4
 8016550:	2200      	movs	r2, #0
 8016552:	701a      	strb	r2, [r3, #0]
        return http_find_error_file(hs, 501);
 8016554:	f06f 030f 	mvn.w	r3, #15
 8016558:	e045      	b.n	80165e6 <http_parse_request+0x1a2>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 801655a:	69fb      	ldr	r3, [r7, #28]
 801655c:	3301      	adds	r3, #1
 801655e:	8b7a      	ldrh	r2, [r7, #26]
 8016560:	4928      	ldr	r1, [pc, #160]	; (8016604 <http_parse_request+0x1c0>)
 8016562:	4618      	mov	r0, r3
 8016564:	f002 f940 	bl	80187e8 <lwip_strnstr>
 8016568:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 801656a:	2301      	movs	r3, #1
 801656c:	62fb      	str	r3, [r7, #44]	; 0x2c
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 801656e:	69fb      	ldr	r3, [r7, #28]
 8016570:	3301      	adds	r3, #1
 8016572:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016574:	1ad3      	subs	r3, r2, r3
 8016576:	833b      	strh	r3, [r7, #24]
      if ((sp2 != 0) && (sp2 > sp1)) {
 8016578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801657a:	2b00      	cmp	r3, #0
 801657c:	d01e      	beq.n	80165bc <http_parse_request+0x178>
 801657e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016580:	69fb      	ldr	r3, [r7, #28]
 8016582:	429a      	cmp	r2, r3
 8016584:	d91a      	bls.n	80165bc <http_parse_request+0x178>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 8016586:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8016588:	461a      	mov	r2, r3
 801658a:	4921      	ldr	r1, [pc, #132]	; (8016610 <http_parse_request+0x1cc>)
 801658c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801658e:	f002 f92b 	bl	80187e8 <lwip_strnstr>
 8016592:	4603      	mov	r3, r0
 8016594:	2b00      	cmp	r3, #0
 8016596:	d011      	beq.n	80165bc <http_parse_request+0x178>
          char *uri = sp1 + 1;
 8016598:	69fb      	ldr	r3, [r7, #28]
 801659a:	3301      	adds	r3, #1
 801659c:	617b      	str	r3, [r7, #20]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 801659e:	69fb      	ldr	r3, [r7, #28]
 80165a0:	2200      	movs	r2, #0
 80165a2:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 80165a4:	8b3b      	ldrh	r3, [r7, #24]
 80165a6:	697a      	ldr	r2, [r7, #20]
 80165a8:	4413      	add	r3, r2
 80165aa:	2200      	movs	r2, #0
 80165ac:	701a      	strb	r2, [r3, #0]
            }
            return err;
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 80165ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80165b0:	6979      	ldr	r1, [r7, #20]
 80165b2:	68b8      	ldr	r0, [r7, #8]
 80165b4:	f000 f82e 	bl	8016614 <http_find_file>
 80165b8:	4603      	mov	r3, r0
 80165ba:	e014      	b.n	80165e6 <http_parse_request+0x1a2>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 80165bc:	68bb      	ldr	r3, [r7, #8]
 80165be:	6a1b      	ldr	r3, [r3, #32]
 80165c0:	4618      	mov	r0, r3
 80165c2:	f003 fd87 	bl	801a0d4 <pbuf_clen>
 80165c6:	4603      	mov	r3, r0
 80165c8:	827b      	strh	r3, [r7, #18]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 80165ca:	68bb      	ldr	r3, [r7, #8]
 80165cc:	6a1b      	ldr	r3, [r3, #32]
 80165ce:	891b      	ldrh	r3, [r3, #8]
 80165d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80165d4:	d205      	bcs.n	80165e2 <http_parse_request+0x19e>
 80165d6:	8a7b      	ldrh	r3, [r7, #18]
 80165d8:	2b05      	cmp	r3, #5
 80165da:	d802      	bhi.n	80165e2 <http_parse_request+0x19e>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 80165dc:	f06f 0304 	mvn.w	r3, #4
 80165e0:	e001      	b.n	80165e6 <http_parse_request+0x1a2>
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 80165e2:	f06f 030f 	mvn.w	r3, #15
  }
}
 80165e6:	4618      	mov	r0, r3
 80165e8:	3738      	adds	r7, #56	; 0x38
 80165ea:	46bd      	mov	sp, r7
 80165ec:	bd80      	pop	{r7, pc}
 80165ee:	bf00      	nop
 80165f0:	0802bf70 	.word	0x0802bf70
 80165f4:	0802c03c 	.word	0x0802c03c
 80165f8:	0802bfb8 	.word	0x0802bfb8
 80165fc:	0802c048 	.word	0x0802c048
 8016600:	20013798 	.word	0x20013798
 8016604:	0802c054 	.word	0x0802c054
 8016608:	0802c058 	.word	0x0802c058
 801660c:	0802c060 	.word	0x0802c060
 8016610:	0802c064 	.word	0x0802c064

08016614 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 8016614:	b590      	push	{r4, r7, lr}
 8016616:	b093      	sub	sp, #76	; 0x4c
 8016618:	af02      	add	r7, sp, #8
 801661a:	60f8      	str	r0, [r7, #12]
 801661c:	60b9      	str	r1, [r7, #8]
 801661e:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 8016620:	2300      	movs	r3, #0
 8016622:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
 8016624:	2300      	movs	r3, #0
 8016626:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 8016628:	2300      	movs	r3, #0
 801662a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 801662e:	68bb      	ldr	r3, [r7, #8]
 8016630:	4618      	mov	r0, r3
 8016632:	f7e9 fdd7 	bl	80001e4 <strlen>
 8016636:	6278      	str	r0, [r7, #36]	; 0x24
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8016638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801663a:	2b00      	cmp	r3, #0
 801663c:	d06b      	beq.n	8016716 <http_find_file+0x102>
 801663e:	68ba      	ldr	r2, [r7, #8]
 8016640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016642:	3b01      	subs	r3, #1
 8016644:	4413      	add	r3, r2
 8016646:	781b      	ldrb	r3, [r3, #0]
 8016648:	2b2f      	cmp	r3, #47	; 0x2f
 801664a:	d164      	bne.n	8016716 <http_find_file+0x102>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 801664c:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 801664e:	4a72      	ldr	r2, [pc, #456]	; (8016818 <http_find_file+0x204>)
 8016650:	4293      	cmp	r3, r2
 8016652:	d102      	bne.n	801665a <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8016654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016656:	2b01      	cmp	r3, #1
 8016658:	d15d      	bne.n	8016716 <http_find_file+0x102>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 801665a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801665c:	3b01      	subs	r3, #1
 801665e:	2b3f      	cmp	r3, #63	; 0x3f
 8016660:	bf28      	it	cs
 8016662:	233f      	movcs	r3, #63	; 0x3f
 8016664:	623b      	str	r3, [r7, #32]
    if (copy_len > 0) {
 8016666:	6a3b      	ldr	r3, [r7, #32]
 8016668:	2b00      	cmp	r3, #0
 801666a:	d00a      	beq.n	8016682 <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 801666c:	68bb      	ldr	r3, [r7, #8]
 801666e:	6a3a      	ldr	r2, [r7, #32]
 8016670:	4619      	mov	r1, r3
 8016672:	4869      	ldr	r0, [pc, #420]	; (8016818 <http_find_file+0x204>)
 8016674:	f00f fa56 	bl	8025b24 <memcpy>
      http_uri_buf[copy_len] = 0;
 8016678:	4a67      	ldr	r2, [pc, #412]	; (8016818 <http_find_file+0x204>)
 801667a:	6a3b      	ldr	r3, [r7, #32]
 801667c:	4413      	add	r3, r2
 801667e:	2200      	movs	r2, #0
 8016680:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8016682:	2300      	movs	r3, #0
 8016684:	63fb      	str	r3, [r7, #60]	; 0x3c
 8016686:	e043      	b.n	8016710 <http_find_file+0xfc>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 8016688:	6a3b      	ldr	r3, [r7, #32]
 801668a:	2b00      	cmp	r3, #0
 801668c:	d028      	beq.n	80166e0 <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 801668e:	6a3b      	ldr	r3, [r7, #32]
 8016690:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8016694:	61fb      	str	r3, [r7, #28]
        if (len_left > 0) {
 8016696:	69fb      	ldr	r3, [r7, #28]
 8016698:	2b00      	cmp	r3, #0
 801669a:	d01e      	beq.n	80166da <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 801669c:	4a5f      	ldr	r2, [pc, #380]	; (801681c <http_find_file+0x208>)
 801669e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80166a0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80166a4:	4618      	mov	r0, r3
 80166a6:	f7e9 fd9d 	bl	80001e4 <strlen>
 80166aa:	61b8      	str	r0, [r7, #24]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 80166ac:	69ba      	ldr	r2, [r7, #24]
 80166ae:	69fb      	ldr	r3, [r7, #28]
 80166b0:	4293      	cmp	r3, r2
 80166b2:	bf28      	it	cs
 80166b4:	4613      	movcs	r3, r2
 80166b6:	617b      	str	r3, [r7, #20]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 80166b8:	6a3b      	ldr	r3, [r7, #32]
 80166ba:	4a57      	ldr	r2, [pc, #348]	; (8016818 <http_find_file+0x204>)
 80166bc:	1898      	adds	r0, r3, r2
 80166be:	4a57      	ldr	r2, [pc, #348]	; (801681c <http_find_file+0x208>)
 80166c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80166c2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80166c6:	697a      	ldr	r2, [r7, #20]
 80166c8:	4619      	mov	r1, r3
 80166ca:	f00f fa2b 	bl	8025b24 <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 80166ce:	6a3a      	ldr	r2, [r7, #32]
 80166d0:	697b      	ldr	r3, [r7, #20]
 80166d2:	4413      	add	r3, r2
 80166d4:	4a50      	ldr	r2, [pc, #320]	; (8016818 <http_find_file+0x204>)
 80166d6:	2100      	movs	r1, #0
 80166d8:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 80166da:	4b4f      	ldr	r3, [pc, #316]	; (8016818 <http_find_file+0x204>)
 80166dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80166de:	e004      	b.n	80166ea <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 80166e0:	4a4e      	ldr	r2, [pc, #312]	; (801681c <http_find_file+0x208>)
 80166e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80166e4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80166e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 80166ea:	68fb      	ldr	r3, [r7, #12]
 80166ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80166ee:	4618      	mov	r0, r3
 80166f0:	f7ff fbf6 	bl	8015ee0 <fs_open>
 80166f4:	4603      	mov	r3, r0
 80166f6:	74fb      	strb	r3, [r7, #19]
      if (err == ERR_OK) {
 80166f8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80166fc:	2b00      	cmp	r3, #0
 80166fe:	d104      	bne.n	801670a <http_find_file+0xf6>
        uri = file_name;
 8016700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016702:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 8016704:	68fb      	ldr	r3, [r7, #12]
 8016706:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
#endif /* LWIP_HTTPD_SSI */
        break;
 8016708:	e005      	b.n	8016716 <http_find_file+0x102>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 801670a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801670c:	3301      	adds	r3, #1
 801670e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8016710:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016712:	2b04      	cmp	r3, #4
 8016714:	d9b8      	bls.n	8016688 <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 8016716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016718:	2b00      	cmp	r3, #0
 801671a:	d161      	bne.n	80167e0 <http_find_file+0x1cc>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 801671c:	68bb      	ldr	r3, [r7, #8]
 801671e:	213f      	movs	r1, #63	; 0x3f
 8016720:	4618      	mov	r0, r3
 8016722:	f010 fa57 	bl	8026bd4 <strchr>
 8016726:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
 8016728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801672a:	2b00      	cmp	r3, #0
 801672c:	d005      	beq.n	801673a <http_find_file+0x126>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 801672e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016730:	2200      	movs	r2, #0
 8016732:	701a      	strb	r2, [r3, #0]
      params++;
 8016734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016736:	3301      	adds	r3, #1
 8016738:	637b      	str	r3, [r7, #52]	; 0x34
    }

#if LWIP_HTTPD_CGI
    http_cgi_paramcount = -1;
 801673a:	4b39      	ldr	r3, [pc, #228]	; (8016820 <http_find_file+0x20c>)
 801673c:	f04f 32ff 	mov.w	r2, #4294967295
 8016740:	601a      	str	r2, [r3, #0]
    /* Does the base URI we have isolated correspond to a CGI handler? */
    if (httpd_num_cgis && httpd_cgis) {
 8016742:	4b38      	ldr	r3, [pc, #224]	; (8016824 <http_find_file+0x210>)
 8016744:	681b      	ldr	r3, [r3, #0]
 8016746:	2b00      	cmp	r3, #0
 8016748:	d034      	beq.n	80167b4 <http_find_file+0x1a0>
 801674a:	4b37      	ldr	r3, [pc, #220]	; (8016828 <http_find_file+0x214>)
 801674c:	681b      	ldr	r3, [r3, #0]
 801674e:	2b00      	cmp	r3, #0
 8016750:	d030      	beq.n	80167b4 <http_find_file+0x1a0>
      for (i = 0; i < httpd_num_cgis; i++) {
 8016752:	2300      	movs	r3, #0
 8016754:	633b      	str	r3, [r7, #48]	; 0x30
 8016756:	e028      	b.n	80167aa <http_find_file+0x196>
        if (strcmp(uri, httpd_cgis[i].pcCGIName) == 0) {
 8016758:	68b8      	ldr	r0, [r7, #8]
 801675a:	4b33      	ldr	r3, [pc, #204]	; (8016828 <http_find_file+0x214>)
 801675c:	681a      	ldr	r2, [r3, #0]
 801675e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016760:	00db      	lsls	r3, r3, #3
 8016762:	4413      	add	r3, r2
 8016764:	681b      	ldr	r3, [r3, #0]
 8016766:	4619      	mov	r1, r3
 8016768:	f7e9 fd32 	bl	80001d0 <strcmp>
 801676c:	4603      	mov	r3, r0
 801676e:	2b00      	cmp	r3, #0
 8016770:	d118      	bne.n	80167a4 <http_find_file+0x190>
          /*
           * We found a CGI that handles this URI so extract the
           * parameters and call the handler.
           */
          http_cgi_paramcount = extract_uri_parameters(hs, params);
 8016772:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016774:	68f8      	ldr	r0, [r7, #12]
 8016776:	f7ff fd21 	bl	80161bc <extract_uri_parameters>
 801677a:	4603      	mov	r3, r0
 801677c:	4a28      	ldr	r2, [pc, #160]	; (8016820 <http_find_file+0x20c>)
 801677e:	6013      	str	r3, [r2, #0]
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 8016780:	4b29      	ldr	r3, [pc, #164]	; (8016828 <http_find_file+0x214>)
 8016782:	681a      	ldr	r2, [r3, #0]
 8016784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016786:	00db      	lsls	r3, r3, #3
 8016788:	4413      	add	r3, r2
 801678a:	685c      	ldr	r4, [r3, #4]
 801678c:	4b24      	ldr	r3, [pc, #144]	; (8016820 <http_find_file+0x20c>)
 801678e:	6819      	ldr	r1, [r3, #0]
 8016790:	68fb      	ldr	r3, [r7, #12]
 8016792:	f103 022c 	add.w	r2, r3, #44	; 0x2c
                                         hs->param_vals);
 8016796:	68fb      	ldr	r3, [r7, #12]
 8016798:	336c      	adds	r3, #108	; 0x6c
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 801679a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801679c:	47a0      	blx	r4
 801679e:	4603      	mov	r3, r0
 80167a0:	60bb      	str	r3, [r7, #8]
          break;
 80167a2:	e007      	b.n	80167b4 <http_find_file+0x1a0>
      for (i = 0; i < httpd_num_cgis; i++) {
 80167a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80167a6:	3301      	adds	r3, #1
 80167a8:	633b      	str	r3, [r7, #48]	; 0x30
 80167aa:	4b1e      	ldr	r3, [pc, #120]	; (8016824 <http_find_file+0x210>)
 80167ac:	681b      	ldr	r3, [r3, #0]
 80167ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80167b0:	429a      	cmp	r2, r3
 80167b2:	dbd1      	blt.n	8016758 <http_find_file+0x144>
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 80167b4:	68fb      	ldr	r3, [r7, #12]
 80167b6:	68ba      	ldr	r2, [r7, #8]
 80167b8:	4611      	mov	r1, r2
 80167ba:	4618      	mov	r0, r3
 80167bc:	f7ff fb90 	bl	8015ee0 <fs_open>
 80167c0:	4603      	mov	r3, r0
 80167c2:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_OK) {
 80167c4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80167c8:	2b00      	cmp	r3, #0
 80167ca:	d102      	bne.n	80167d2 <http_find_file+0x1be>
      file = &hs->file_handle;
 80167cc:	68fb      	ldr	r3, [r7, #12]
 80167ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80167d0:	e006      	b.n	80167e0 <http_find_file+0x1cc>
    } else {
      file = http_get_404_file(hs, &uri);
 80167d2:	f107 0308 	add.w	r3, r7, #8
 80167d6:	4619      	mov	r1, r3
 80167d8:	68f8      	ldr	r0, [r7, #12]
 80167da:	f7ff fded 	bl	80163b8 <http_get_404_file>
 80167de:	63b8      	str	r0, [r7, #56]	; 0x38
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 80167e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167e2:	2b00      	cmp	r3, #0
 80167e4:	d106      	bne.n	80167f4 <http_find_file+0x1e0>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 80167e6:	f107 0308 	add.w	r3, r7, #8
 80167ea:	4619      	mov	r1, r3
 80167ec:	68f8      	ldr	r0, [r7, #12]
 80167ee:	f7ff fde3 	bl	80163b8 <http_get_404_file>
 80167f2:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 80167f4:	68ba      	ldr	r2, [r7, #8]
 80167f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80167f8:	9301      	str	r3, [sp, #4]
 80167fa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80167fe:	9300      	str	r3, [sp, #0]
 8016800:	4613      	mov	r3, r2
 8016802:	687a      	ldr	r2, [r7, #4]
 8016804:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8016806:	68f8      	ldr	r0, [r7, #12]
 8016808:	f000 f810 	bl	801682c <http_init_file>
 801680c:	4603      	mov	r3, r0
}
 801680e:	4618      	mov	r0, r3
 8016810:	3744      	adds	r7, #68	; 0x44
 8016812:	46bd      	mov	sp, r7
 8016814:	bd90      	pop	{r4, r7, pc}
 8016816:	bf00      	nop
 8016818:	20013b98 	.word	0x20013b98
 801681c:	08030cdc 	.word	0x08030cdc
 8016820:	20013be0 	.word	0x20013be0
 8016824:	20013bdc 	.word	0x20013bdc
 8016828:	20013bd8 	.word	0x20013bd8

0801682c <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 801682c:	b580      	push	{r7, lr}
 801682e:	b086      	sub	sp, #24
 8016830:	af00      	add	r7, sp, #0
 8016832:	60f8      	str	r0, [r7, #12]
 8016834:	60b9      	str	r1, [r7, #8]
 8016836:	607a      	str	r2, [r7, #4]
 8016838:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 801683a:	68bb      	ldr	r3, [r7, #8]
 801683c:	2b00      	cmp	r3, #0
 801683e:	d05c      	beq.n	80168fa <http_init_file+0xce>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 8016840:	68bb      	ldr	r3, [r7, #8]
 8016842:	681b      	ldr	r3, [r3, #0]
 8016844:	2b00      	cmp	r3, #0
 8016846:	d106      	bne.n	8016856 <http_init_file+0x2a>
 8016848:	4b35      	ldr	r3, [pc, #212]	; (8016920 <http_init_file+0xf4>)
 801684a:	f640 120b 	movw	r2, #2315	; 0x90b
 801684e:	4935      	ldr	r1, [pc, #212]	; (8016924 <http_init_file+0xf8>)
 8016850:	4835      	ldr	r0, [pc, #212]	; (8016928 <http_init_file+0xfc>)
 8016852:	f010 f83b 	bl	80268cc <iprintf>
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 8016856:	68fb      	ldr	r3, [r7, #12]
 8016858:	68ba      	ldr	r2, [r7, #8]
 801685a:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 801685c:	68bb      	ldr	r3, [r7, #8]
 801685e:	681a      	ldr	r2, [r3, #0]
 8016860:	68fb      	ldr	r3, [r7, #12]
 8016862:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 8016864:	68bb      	ldr	r3, [r7, #8]
 8016866:	685b      	ldr	r3, [r3, #4]
 8016868:	2b00      	cmp	r3, #0
 801686a:	da06      	bge.n	801687a <http_init_file+0x4e>
 801686c:	4b2c      	ldr	r3, [pc, #176]	; (8016920 <http_init_file+0xf4>)
 801686e:	f640 1234 	movw	r2, #2356	; 0x934
 8016872:	492e      	ldr	r1, [pc, #184]	; (801692c <http_init_file+0x100>)
 8016874:	482c      	ldr	r0, [pc, #176]	; (8016928 <http_init_file+0xfc>)
 8016876:	f010 f829 	bl	80268cc <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 801687a:	68bb      	ldr	r3, [r7, #8]
 801687c:	685b      	ldr	r3, [r3, #4]
 801687e:	461a      	mov	r2, r3
 8016880:	68fb      	ldr	r3, [r7, #12]
 8016882:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 8016884:	68fb      	ldr	r3, [r7, #12]
 8016886:	2200      	movs	r2, #0
 8016888:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 801688c:	68fb      	ldr	r3, [r7, #12]
 801688e:	695b      	ldr	r3, [r3, #20]
 8016890:	7c1b      	ldrb	r3, [r3, #16]
 8016892:	f003 0301 	and.w	r3, r3, #1
 8016896:	2b00      	cmp	r3, #0
 8016898:	d106      	bne.n	80168a8 <http_init_file+0x7c>
 801689a:	4b21      	ldr	r3, [pc, #132]	; (8016920 <http_init_file+0xf4>)
 801689c:	f640 1243 	movw	r2, #2371	; 0x943
 80168a0:	4923      	ldr	r1, [pc, #140]	; (8016930 <http_init_file+0x104>)
 80168a2:	4821      	ldr	r0, [pc, #132]	; (8016928 <http_init_file+0xfc>)
 80168a4:	f010 f812 	bl	80268cc <iprintf>
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 80168a8:	687b      	ldr	r3, [r7, #4]
 80168aa:	2b00      	cmp	r3, #0
 80168ac:	d032      	beq.n	8016914 <http_init_file+0xe8>
 80168ae:	68fb      	ldr	r3, [r7, #12]
 80168b0:	695b      	ldr	r3, [r3, #20]
 80168b2:	7c1b      	ldrb	r3, [r3, #16]
 80168b4:	f003 0301 	and.w	r3, r3, #1
 80168b8:	2b00      	cmp	r3, #0
 80168ba:	d02b      	beq.n	8016914 <http_init_file+0xe8>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 80168bc:	68fb      	ldr	r3, [r7, #12]
 80168be:	6998      	ldr	r0, [r3, #24]
 80168c0:	68fb      	ldr	r3, [r7, #12]
 80168c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80168c4:	461a      	mov	r2, r3
 80168c6:	491b      	ldr	r1, [pc, #108]	; (8016934 <http_init_file+0x108>)
 80168c8:	f001 ff8e 	bl	80187e8 <lwip_strnstr>
 80168cc:	6178      	str	r0, [r7, #20]
      if (file_start != NULL) {
 80168ce:	697b      	ldr	r3, [r7, #20]
 80168d0:	2b00      	cmp	r3, #0
 80168d2:	d01f      	beq.n	8016914 <http_init_file+0xe8>
        int diff = file_start + 4 - hs->file;
 80168d4:	697b      	ldr	r3, [r7, #20]
 80168d6:	1d1a      	adds	r2, r3, #4
 80168d8:	68fb      	ldr	r3, [r7, #12]
 80168da:	699b      	ldr	r3, [r3, #24]
 80168dc:	1ad3      	subs	r3, r2, r3
 80168de:	613b      	str	r3, [r7, #16]
        hs->file += diff;
 80168e0:	68fb      	ldr	r3, [r7, #12]
 80168e2:	699a      	ldr	r2, [r3, #24]
 80168e4:	693b      	ldr	r3, [r7, #16]
 80168e6:	441a      	add	r2, r3
 80168e8:	68fb      	ldr	r3, [r7, #12]
 80168ea:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 80168ec:	68fb      	ldr	r3, [r7, #12]
 80168ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80168f0:	693b      	ldr	r3, [r7, #16]
 80168f2:	1ad2      	subs	r2, r2, r3
 80168f4:	68fb      	ldr	r3, [r7, #12]
 80168f6:	625a      	str	r2, [r3, #36]	; 0x24
 80168f8:	e00c      	b.n	8016914 <http_init_file+0xe8>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 80168fa:	68fb      	ldr	r3, [r7, #12]
 80168fc:	2200      	movs	r2, #0
 80168fe:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 8016900:	68fb      	ldr	r3, [r7, #12]
 8016902:	2200      	movs	r2, #0
 8016904:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 8016906:	68fb      	ldr	r3, [r7, #12]
 8016908:	2200      	movs	r2, #0
 801690a:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 801690c:	68fb      	ldr	r3, [r7, #12]
 801690e:	2200      	movs	r2, #0
 8016910:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 8016914:	2300      	movs	r3, #0
}
 8016916:	4618      	mov	r0, r3
 8016918:	3718      	adds	r7, #24
 801691a:	46bd      	mov	sp, r7
 801691c:	bd80      	pop	{r7, pc}
 801691e:	bf00      	nop
 8016920:	0802bf70 	.word	0x0802bf70
 8016924:	0802c06c 	.word	0x0802c06c
 8016928:	0802bfb8 	.word	0x0802bfb8
 801692c:	0802c080 	.word	0x0802c080
 8016930:	0802c0a0 	.word	0x0802c0a0
 8016934:	0802c064 	.word	0x0802c064

08016938 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 8016938:	b580      	push	{r7, lr}
 801693a:	b084      	sub	sp, #16
 801693c:	af00      	add	r7, sp, #0
 801693e:	6078      	str	r0, [r7, #4]
 8016940:	460b      	mov	r3, r1
 8016942:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 8016944:	687b      	ldr	r3, [r7, #4]
 8016946:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 8016948:	68fb      	ldr	r3, [r7, #12]
 801694a:	2b00      	cmp	r3, #0
 801694c:	d002      	beq.n	8016954 <http_err+0x1c>
    http_state_free(hs);
 801694e:	68f8      	ldr	r0, [r7, #12]
 8016950:	f7ff fb5c 	bl	801600c <http_state_free>
  }
}
 8016954:	bf00      	nop
 8016956:	3710      	adds	r7, #16
 8016958:	46bd      	mov	sp, r7
 801695a:	bd80      	pop	{r7, pc}

0801695c <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 801695c:	b580      	push	{r7, lr}
 801695e:	b086      	sub	sp, #24
 8016960:	af00      	add	r7, sp, #0
 8016962:	60f8      	str	r0, [r7, #12]
 8016964:	60b9      	str	r1, [r7, #8]
 8016966:	4613      	mov	r3, r2
 8016968:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 801696a:	68fb      	ldr	r3, [r7, #12]
 801696c:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 801696e:	697b      	ldr	r3, [r7, #20]
 8016970:	2b00      	cmp	r3, #0
 8016972:	d101      	bne.n	8016978 <http_sent+0x1c>
    return ERR_OK;
 8016974:	2300      	movs	r3, #0
 8016976:	e008      	b.n	801698a <http_sent+0x2e>
  }

  hs->retries = 0;
 8016978:	697b      	ldr	r3, [r7, #20]
 801697a:	2200      	movs	r2, #0
 801697c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 8016980:	6979      	ldr	r1, [r7, #20]
 8016982:	68b8      	ldr	r0, [r7, #8]
 8016984:	f7ff fce1 	bl	801634a <http_send>

  return ERR_OK;
 8016988:	2300      	movs	r3, #0
}
 801698a:	4618      	mov	r0, r3
 801698c:	3718      	adds	r7, #24
 801698e:	46bd      	mov	sp, r7
 8016990:	bd80      	pop	{r7, pc}

08016992 <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 8016992:	b580      	push	{r7, lr}
 8016994:	b084      	sub	sp, #16
 8016996:	af00      	add	r7, sp, #0
 8016998:	6078      	str	r0, [r7, #4]
 801699a:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 801699c:	687b      	ldr	r3, [r7, #4]
 801699e:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 80169a0:	68fb      	ldr	r3, [r7, #12]
 80169a2:	2b00      	cmp	r3, #0
 80169a4:	d107      	bne.n	80169b6 <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 80169a6:	2100      	movs	r1, #0
 80169a8:	6838      	ldr	r0, [r7, #0]
 80169aa:	f7ff fbeb 	bl	8016184 <http_close_conn>
 80169ae:	4603      	mov	r3, r0
 80169b0:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 80169b2:	2300      	movs	r3, #0
 80169b4:	e021      	b.n	80169fa <http_poll+0x68>
  } else {
    hs->retries++;
 80169b6:	68fb      	ldr	r3, [r7, #12]
 80169b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80169bc:	3301      	adds	r3, #1
 80169be:	b2da      	uxtb	r2, r3
 80169c0:	68fb      	ldr	r3, [r7, #12]
 80169c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 80169c6:	68fb      	ldr	r3, [r7, #12]
 80169c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80169cc:	2b04      	cmp	r3, #4
 80169ce:	d105      	bne.n	80169dc <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 80169d0:	68f9      	ldr	r1, [r7, #12]
 80169d2:	6838      	ldr	r0, [r7, #0]
 80169d4:	f7ff fbd6 	bl	8016184 <http_close_conn>
      return ERR_OK;
 80169d8:	2300      	movs	r3, #0
 80169da:	e00e      	b.n	80169fa <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 80169dc:	68fb      	ldr	r3, [r7, #12]
 80169de:	695b      	ldr	r3, [r3, #20]
 80169e0:	2b00      	cmp	r3, #0
 80169e2:	d009      	beq.n	80169f8 <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 80169e4:	68f9      	ldr	r1, [r7, #12]
 80169e6:	6838      	ldr	r0, [r7, #0]
 80169e8:	f7ff fcaf 	bl	801634a <http_send>
 80169ec:	4603      	mov	r3, r0
 80169ee:	2b00      	cmp	r3, #0
 80169f0:	d002      	beq.n	80169f8 <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 80169f2:	6838      	ldr	r0, [r7, #0]
 80169f4:	f008 ffea 	bl	801f9cc <tcp_output>
      }
    }
  }

  return ERR_OK;
 80169f8:	2300      	movs	r3, #0
}
 80169fa:	4618      	mov	r0, r3
 80169fc:	3710      	adds	r7, #16
 80169fe:	46bd      	mov	sp, r7
 8016a00:	bd80      	pop	{r7, pc}
	...

08016a04 <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8016a04:	b580      	push	{r7, lr}
 8016a06:	b086      	sub	sp, #24
 8016a08:	af00      	add	r7, sp, #0
 8016a0a:	60f8      	str	r0, [r7, #12]
 8016a0c:	60b9      	str	r1, [r7, #8]
 8016a0e:	607a      	str	r2, [r7, #4]
 8016a10:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 8016a12:	68fb      	ldr	r3, [r7, #12]
 8016a14:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 8016a16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016a1a:	2b00      	cmp	r3, #0
 8016a1c:	d105      	bne.n	8016a2a <http_recv+0x26>
 8016a1e:	687b      	ldr	r3, [r7, #4]
 8016a20:	2b00      	cmp	r3, #0
 8016a22:	d002      	beq.n	8016a2a <http_recv+0x26>
 8016a24:	697b      	ldr	r3, [r7, #20]
 8016a26:	2b00      	cmp	r3, #0
 8016a28:	d111      	bne.n	8016a4e <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 8016a2a:	687b      	ldr	r3, [r7, #4]
 8016a2c:	2b00      	cmp	r3, #0
 8016a2e:	d008      	beq.n	8016a42 <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 8016a30:	687b      	ldr	r3, [r7, #4]
 8016a32:	891b      	ldrh	r3, [r3, #8]
 8016a34:	4619      	mov	r1, r3
 8016a36:	68b8      	ldr	r0, [r7, #8]
 8016a38:	f004 faa0 	bl	801af7c <tcp_recved>
      pbuf_free(p);
 8016a3c:	6878      	ldr	r0, [r7, #4]
 8016a3e:	f003 fabb 	bl	8019fb8 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 8016a42:	6979      	ldr	r1, [r7, #20]
 8016a44:	68b8      	ldr	r0, [r7, #8]
 8016a46:	f7ff fb9d 	bl	8016184 <http_close_conn>
    return ERR_OK;
 8016a4a:	2300      	movs	r3, #0
 8016a4c:	e055      	b.n	8016afa <http_recv+0xf6>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 8016a4e:	687b      	ldr	r3, [r7, #4]
 8016a50:	891b      	ldrh	r3, [r3, #8]
 8016a52:	4619      	mov	r1, r3
 8016a54:	68b8      	ldr	r0, [r7, #8]
 8016a56:	f004 fa91 	bl	801af7c <tcp_recved>
    }
    return ERR_OK;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 8016a5a:	697b      	ldr	r3, [r7, #20]
 8016a5c:	695b      	ldr	r3, [r3, #20]
 8016a5e:	2b00      	cmp	r3, #0
 8016a60:	d147      	bne.n	8016af2 <http_recv+0xee>
      err_t parsed = http_parse_request(p, hs, pcb);
 8016a62:	68ba      	ldr	r2, [r7, #8]
 8016a64:	6979      	ldr	r1, [r7, #20]
 8016a66:	6878      	ldr	r0, [r7, #4]
 8016a68:	f7ff fcec 	bl	8016444 <http_parse_request>
 8016a6c:	4603      	mov	r3, r0
 8016a6e:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 8016a70:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016a74:	2b00      	cmp	r3, #0
 8016a76:	d015      	beq.n	8016aa4 <http_recv+0xa0>
 8016a78:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016a7c:	f113 0f05 	cmn.w	r3, #5
 8016a80:	d010      	beq.n	8016aa4 <http_recv+0xa0>
 8016a82:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016a86:	f113 0f10 	cmn.w	r3, #16
 8016a8a:	d00b      	beq.n	8016aa4 <http_recv+0xa0>
 8016a8c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016a90:	f113 0f08 	cmn.w	r3, #8
 8016a94:	d006      	beq.n	8016aa4 <http_recv+0xa0>
 8016a96:	4b1b      	ldr	r3, [pc, #108]	; (8016b04 <http_recv+0x100>)
 8016a98:	f640 2204 	movw	r2, #2564	; 0xa04
 8016a9c:	491a      	ldr	r1, [pc, #104]	; (8016b08 <http_recv+0x104>)
 8016a9e:	481b      	ldr	r0, [pc, #108]	; (8016b0c <http_recv+0x108>)
 8016aa0:	f00f ff14 	bl	80268cc <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 8016aa4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016aa8:	f113 0f05 	cmn.w	r3, #5
 8016aac:	d00b      	beq.n	8016ac6 <http_recv+0xc2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 8016aae:	697b      	ldr	r3, [r7, #20]
 8016ab0:	6a1b      	ldr	r3, [r3, #32]
 8016ab2:	2b00      	cmp	r3, #0
 8016ab4:	d007      	beq.n	8016ac6 <http_recv+0xc2>
          pbuf_free(hs->req);
 8016ab6:	697b      	ldr	r3, [r7, #20]
 8016ab8:	6a1b      	ldr	r3, [r3, #32]
 8016aba:	4618      	mov	r0, r3
 8016abc:	f003 fa7c 	bl	8019fb8 <pbuf_free>
          hs->req = NULL;
 8016ac0:	697b      	ldr	r3, [r7, #20]
 8016ac2:	2200      	movs	r2, #0
 8016ac4:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 8016ac6:	6878      	ldr	r0, [r7, #4]
 8016ac8:	f003 fa76 	bl	8019fb8 <pbuf_free>
      if (parsed == ERR_OK) {
 8016acc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016ad0:	2b00      	cmp	r3, #0
 8016ad2:	d104      	bne.n	8016ade <http_recv+0xda>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 8016ad4:	6979      	ldr	r1, [r7, #20]
 8016ad6:	68b8      	ldr	r0, [r7, #8]
 8016ad8:	f7ff fc37 	bl	801634a <http_send>
 8016adc:	e00c      	b.n	8016af8 <http_recv+0xf4>
        }
      } else if (parsed == ERR_ARG) {
 8016ade:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016ae2:	f113 0f10 	cmn.w	r3, #16
 8016ae6:	d107      	bne.n	8016af8 <http_recv+0xf4>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 8016ae8:	6979      	ldr	r1, [r7, #20]
 8016aea:	68b8      	ldr	r0, [r7, #8]
 8016aec:	f7ff fb4a 	bl	8016184 <http_close_conn>
 8016af0:	e002      	b.n	8016af8 <http_recv+0xf4>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 8016af2:	6878      	ldr	r0, [r7, #4]
 8016af4:	f003 fa60 	bl	8019fb8 <pbuf_free>
    }
  }
  return ERR_OK;
 8016af8:	2300      	movs	r3, #0
}
 8016afa:	4618      	mov	r0, r3
 8016afc:	3718      	adds	r7, #24
 8016afe:	46bd      	mov	sp, r7
 8016b00:	bd80      	pop	{r7, pc}
 8016b02:	bf00      	nop
 8016b04:	0802bf70 	.word	0x0802bf70
 8016b08:	0802c0cc 	.word	0x0802c0cc
 8016b0c:	0802bfb8 	.word	0x0802bfb8

08016b10 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 8016b10:	b580      	push	{r7, lr}
 8016b12:	b086      	sub	sp, #24
 8016b14:	af00      	add	r7, sp, #0
 8016b16:	60f8      	str	r0, [r7, #12]
 8016b18:	60b9      	str	r1, [r7, #8]
 8016b1a:	4613      	mov	r3, r2
 8016b1c:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 8016b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016b22:	2b00      	cmp	r3, #0
 8016b24:	d102      	bne.n	8016b2c <http_accept+0x1c>
 8016b26:	68bb      	ldr	r3, [r7, #8]
 8016b28:	2b00      	cmp	r3, #0
 8016b2a:	d102      	bne.n	8016b32 <http_accept+0x22>
    return ERR_VAL;
 8016b2c:	f06f 0305 	mvn.w	r3, #5
 8016b30:	e025      	b.n	8016b7e <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8016b32:	2101      	movs	r1, #1
 8016b34:	68b8      	ldr	r0, [r7, #8]
 8016b36:	f005 f81d 	bl	801bb74 <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 8016b3a:	f7ff fa35 	bl	8015fa8 <http_state_alloc>
 8016b3e:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 8016b40:	697b      	ldr	r3, [r7, #20]
 8016b42:	2b00      	cmp	r3, #0
 8016b44:	d102      	bne.n	8016b4c <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 8016b46:	f04f 33ff 	mov.w	r3, #4294967295
 8016b4a:	e018      	b.n	8016b7e <http_accept+0x6e>
  }
  hs->pcb = pcb;
 8016b4c:	697b      	ldr	r3, [r7, #20]
 8016b4e:	68ba      	ldr	r2, [r7, #8]
 8016b50:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 8016b52:	6979      	ldr	r1, [r7, #20]
 8016b54:	68b8      	ldr	r0, [r7, #8]
 8016b56:	f005 fa0d 	bl	801bf74 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 8016b5a:	490b      	ldr	r1, [pc, #44]	; (8016b88 <http_accept+0x78>)
 8016b5c:	68b8      	ldr	r0, [r7, #8]
 8016b5e:	f005 fa1b 	bl	801bf98 <tcp_recv>
  altcp_err(pcb, http_err);
 8016b62:	490a      	ldr	r1, [pc, #40]	; (8016b8c <http_accept+0x7c>)
 8016b64:	68b8      	ldr	r0, [r7, #8]
 8016b66:	f005 fa5b 	bl	801c020 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8016b6a:	2204      	movs	r2, #4
 8016b6c:	4908      	ldr	r1, [pc, #32]	; (8016b90 <http_accept+0x80>)
 8016b6e:	68b8      	ldr	r0, [r7, #8]
 8016b70:	f005 fa90 	bl	801c094 <tcp_poll>
  altcp_sent(pcb, http_sent);
 8016b74:	4907      	ldr	r1, [pc, #28]	; (8016b94 <http_accept+0x84>)
 8016b76:	68b8      	ldr	r0, [r7, #8]
 8016b78:	f005 fa30 	bl	801bfdc <tcp_sent>

  return ERR_OK;
 8016b7c:	2300      	movs	r3, #0
}
 8016b7e:	4618      	mov	r0, r3
 8016b80:	3718      	adds	r7, #24
 8016b82:	46bd      	mov	sp, r7
 8016b84:	bd80      	pop	{r7, pc}
 8016b86:	bf00      	nop
 8016b88:	08016a05 	.word	0x08016a05
 8016b8c:	08016939 	.word	0x08016939
 8016b90:	08016993 	.word	0x08016993
 8016b94:	0801695d 	.word	0x0801695d

08016b98 <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 8016b98:	b580      	push	{r7, lr}
 8016b9a:	b084      	sub	sp, #16
 8016b9c:	af00      	add	r7, sp, #0
 8016b9e:	6078      	str	r0, [r7, #4]
 8016ba0:	460b      	mov	r3, r1
 8016ba2:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 8016ba4:	687b      	ldr	r3, [r7, #4]
 8016ba6:	2b00      	cmp	r3, #0
 8016ba8:	d029      	beq.n	8016bfe <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8016baa:	2101      	movs	r1, #1
 8016bac:	6878      	ldr	r0, [r7, #4]
 8016bae:	f004 ffe1 	bl	801bb74 <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 8016bb2:	887b      	ldrh	r3, [r7, #2]
 8016bb4:	461a      	mov	r2, r3
 8016bb6:	4914      	ldr	r1, [pc, #80]	; (8016c08 <httpd_init_pcb+0x70>)
 8016bb8:	6878      	ldr	r0, [r7, #4]
 8016bba:	f004 f811 	bl	801abe0 <tcp_bind>
 8016bbe:	4603      	mov	r3, r0
 8016bc0:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 8016bc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016bc6:	2b00      	cmp	r3, #0
 8016bc8:	d006      	beq.n	8016bd8 <httpd_init_pcb+0x40>
 8016bca:	4b10      	ldr	r3, [pc, #64]	; (8016c0c <httpd_init_pcb+0x74>)
 8016bcc:	f640 2257 	movw	r2, #2647	; 0xa57
 8016bd0:	490f      	ldr	r1, [pc, #60]	; (8016c10 <httpd_init_pcb+0x78>)
 8016bd2:	4810      	ldr	r0, [pc, #64]	; (8016c14 <httpd_init_pcb+0x7c>)
 8016bd4:	f00f fe7a 	bl	80268cc <iprintf>
    pcb = altcp_listen(pcb);
 8016bd8:	21ff      	movs	r1, #255	; 0xff
 8016bda:	6878      	ldr	r0, [r7, #4]
 8016bdc:	f004 f8b8 	bl	801ad50 <tcp_listen_with_backlog>
 8016be0:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 8016be2:	687b      	ldr	r3, [r7, #4]
 8016be4:	2b00      	cmp	r3, #0
 8016be6:	d106      	bne.n	8016bf6 <httpd_init_pcb+0x5e>
 8016be8:	4b08      	ldr	r3, [pc, #32]	; (8016c0c <httpd_init_pcb+0x74>)
 8016bea:	f640 2259 	movw	r2, #2649	; 0xa59
 8016bee:	490a      	ldr	r1, [pc, #40]	; (8016c18 <httpd_init_pcb+0x80>)
 8016bf0:	4808      	ldr	r0, [pc, #32]	; (8016c14 <httpd_init_pcb+0x7c>)
 8016bf2:	f00f fe6b 	bl	80268cc <iprintf>
    altcp_accept(pcb, http_accept);
 8016bf6:	4909      	ldr	r1, [pc, #36]	; (8016c1c <httpd_init_pcb+0x84>)
 8016bf8:	6878      	ldr	r0, [r7, #4]
 8016bfa:	f005 fa33 	bl	801c064 <tcp_accept>
  }
}
 8016bfe:	bf00      	nop
 8016c00:	3710      	adds	r7, #16
 8016c02:	46bd      	mov	sp, r7
 8016c04:	bd80      	pop	{r7, pc}
 8016c06:	bf00      	nop
 8016c08:	08030e24 	.word	0x08030e24
 8016c0c:	0802bf70 	.word	0x0802bf70
 8016c10:	0802c0f8 	.word	0x0802c0f8
 8016c14:	0802bfb8 	.word	0x0802bfb8
 8016c18:	0802c114 	.word	0x0802c114
 8016c1c:	08016b11 	.word	0x08016b11

08016c20 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 8016c20:	b580      	push	{r7, lr}
 8016c22:	b082      	sub	sp, #8
 8016c24:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 8016c26:	202e      	movs	r0, #46	; 0x2e
 8016c28:	f005 f996 	bl	801bf58 <tcp_new_ip_type>
 8016c2c:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 8016c2e:	687b      	ldr	r3, [r7, #4]
 8016c30:	2b00      	cmp	r3, #0
 8016c32:	d106      	bne.n	8016c42 <httpd_init+0x22>
 8016c34:	4b07      	ldr	r3, [pc, #28]	; (8016c54 <httpd_init+0x34>)
 8016c36:	f640 2272 	movw	r2, #2674	; 0xa72
 8016c3a:	4907      	ldr	r1, [pc, #28]	; (8016c58 <httpd_init+0x38>)
 8016c3c:	4807      	ldr	r0, [pc, #28]	; (8016c5c <httpd_init+0x3c>)
 8016c3e:	f00f fe45 	bl	80268cc <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 8016c42:	2150      	movs	r1, #80	; 0x50
 8016c44:	6878      	ldr	r0, [r7, #4]
 8016c46:	f7ff ffa7 	bl	8016b98 <httpd_init_pcb>
}
 8016c4a:	bf00      	nop
 8016c4c:	3708      	adds	r7, #8
 8016c4e:	46bd      	mov	sp, r7
 8016c50:	bd80      	pop	{r7, pc}
 8016c52:	bf00      	nop
 8016c54:	0802bf70 	.word	0x0802bf70
 8016c58:	0802c134 	.word	0x0802c134
 8016c5c:	0802bfb8 	.word	0x0802bfb8

08016c60 <http_set_cgi_handlers>:
 * @param cgis an array of CGI filenames/handler functions
 * @param num_handlers number of elements in the 'cgis' array
 */
void
http_set_cgi_handlers(const tCGI *cgis, int num_handlers)
{
 8016c60:	b580      	push	{r7, lr}
 8016c62:	b082      	sub	sp, #8
 8016c64:	af00      	add	r7, sp, #0
 8016c66:	6078      	str	r0, [r7, #4]
 8016c68:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("no cgis given", cgis != NULL);
 8016c6a:	687b      	ldr	r3, [r7, #4]
 8016c6c:	2b00      	cmp	r3, #0
 8016c6e:	d106      	bne.n	8016c7e <http_set_cgi_handlers+0x1e>
 8016c70:	4b0d      	ldr	r3, [pc, #52]	; (8016ca8 <http_set_cgi_handlers+0x48>)
 8016c72:	f640 22b2 	movw	r2, #2738	; 0xab2
 8016c76:	490d      	ldr	r1, [pc, #52]	; (8016cac <http_set_cgi_handlers+0x4c>)
 8016c78:	480d      	ldr	r0, [pc, #52]	; (8016cb0 <http_set_cgi_handlers+0x50>)
 8016c7a:	f00f fe27 	bl	80268cc <iprintf>
  LWIP_ASSERT("invalid number of handlers", num_handlers > 0);
 8016c7e:	683b      	ldr	r3, [r7, #0]
 8016c80:	2b00      	cmp	r3, #0
 8016c82:	dc06      	bgt.n	8016c92 <http_set_cgi_handlers+0x32>
 8016c84:	4b08      	ldr	r3, [pc, #32]	; (8016ca8 <http_set_cgi_handlers+0x48>)
 8016c86:	f640 22b3 	movw	r2, #2739	; 0xab3
 8016c8a:	490a      	ldr	r1, [pc, #40]	; (8016cb4 <http_set_cgi_handlers+0x54>)
 8016c8c:	4808      	ldr	r0, [pc, #32]	; (8016cb0 <http_set_cgi_handlers+0x50>)
 8016c8e:	f00f fe1d 	bl	80268cc <iprintf>

  httpd_cgis = cgis;
 8016c92:	4a09      	ldr	r2, [pc, #36]	; (8016cb8 <http_set_cgi_handlers+0x58>)
 8016c94:	687b      	ldr	r3, [r7, #4]
 8016c96:	6013      	str	r3, [r2, #0]
  httpd_num_cgis = num_handlers;
 8016c98:	4a08      	ldr	r2, [pc, #32]	; (8016cbc <http_set_cgi_handlers+0x5c>)
 8016c9a:	683b      	ldr	r3, [r7, #0]
 8016c9c:	6013      	str	r3, [r2, #0]
}
 8016c9e:	bf00      	nop
 8016ca0:	3708      	adds	r7, #8
 8016ca2:	46bd      	mov	sp, r7
 8016ca4:	bd80      	pop	{r7, pc}
 8016ca6:	bf00      	nop
 8016ca8:	0802bf70 	.word	0x0802bf70
 8016cac:	0802c150 	.word	0x0802c150
 8016cb0:	0802bfb8 	.word	0x0802bfb8
 8016cb4:	0802c160 	.word	0x0802c160
 8016cb8:	20013bd8 	.word	0x20013bd8
 8016cbc:	20013bdc 	.word	0x20013bdc

08016cc0 <msg_generate_packet_id>:
 * @param client MQTT client
 * @return New packet identifier, range 1 to 65535
 */
static u16_t
msg_generate_packet_id(mqtt_client_t *client)
{
 8016cc0:	b480      	push	{r7}
 8016cc2:	b083      	sub	sp, #12
 8016cc4:	af00      	add	r7, sp, #0
 8016cc6:	6078      	str	r0, [r7, #4]
  client->pkt_id_seq++;
 8016cc8:	687b      	ldr	r3, [r7, #4]
 8016cca:	88db      	ldrh	r3, [r3, #6]
 8016ccc:	3301      	adds	r3, #1
 8016cce:	b29a      	uxth	r2, r3
 8016cd0:	687b      	ldr	r3, [r7, #4]
 8016cd2:	80da      	strh	r2, [r3, #6]
  if (client->pkt_id_seq == 0) {
 8016cd4:	687b      	ldr	r3, [r7, #4]
 8016cd6:	88db      	ldrh	r3, [r3, #6]
 8016cd8:	2b00      	cmp	r3, #0
 8016cda:	d105      	bne.n	8016ce8 <msg_generate_packet_id+0x28>
    client->pkt_id_seq++;
 8016cdc:	687b      	ldr	r3, [r7, #4]
 8016cde:	88db      	ldrh	r3, [r3, #6]
 8016ce0:	3301      	adds	r3, #1
 8016ce2:	b29a      	uxth	r2, r3
 8016ce4:	687b      	ldr	r3, [r7, #4]
 8016ce6:	80da      	strh	r2, [r3, #6]
  }
  return client->pkt_id_seq;
 8016ce8:	687b      	ldr	r3, [r7, #4]
 8016cea:	88db      	ldrh	r3, [r3, #6]
}
 8016cec:	4618      	mov	r0, r3
 8016cee:	370c      	adds	r7, #12
 8016cf0:	46bd      	mov	sp, r7
 8016cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cf6:	4770      	bx	lr

08016cf8 <mqtt_ringbuf_put>:
/* Output ring buffer */

/** Add single item to ring buffer */
static void
mqtt_ringbuf_put(struct mqtt_ringbuf_t *rb, u8_t item)
{
 8016cf8:	b480      	push	{r7}
 8016cfa:	b083      	sub	sp, #12
 8016cfc:	af00      	add	r7, sp, #0
 8016cfe:	6078      	str	r0, [r7, #4]
 8016d00:	460b      	mov	r3, r1
 8016d02:	70fb      	strb	r3, [r7, #3]
  rb->buf[rb->put] = item;
 8016d04:	687b      	ldr	r3, [r7, #4]
 8016d06:	881b      	ldrh	r3, [r3, #0]
 8016d08:	461a      	mov	r2, r3
 8016d0a:	687b      	ldr	r3, [r7, #4]
 8016d0c:	4413      	add	r3, r2
 8016d0e:	78fa      	ldrb	r2, [r7, #3]
 8016d10:	711a      	strb	r2, [r3, #4]
  rb->put++;
 8016d12:	687b      	ldr	r3, [r7, #4]
 8016d14:	881b      	ldrh	r3, [r3, #0]
 8016d16:	3301      	adds	r3, #1
 8016d18:	b29a      	uxth	r2, r3
 8016d1a:	687b      	ldr	r3, [r7, #4]
 8016d1c:	801a      	strh	r2, [r3, #0]
  if (rb->put >= MQTT_OUTPUT_RINGBUF_SIZE) {
 8016d1e:	687b      	ldr	r3, [r7, #4]
 8016d20:	881b      	ldrh	r3, [r3, #0]
 8016d22:	2bff      	cmp	r3, #255	; 0xff
 8016d24:	d902      	bls.n	8016d2c <mqtt_ringbuf_put+0x34>
    rb->put = 0;
 8016d26:	687b      	ldr	r3, [r7, #4]
 8016d28:	2200      	movs	r2, #0
 8016d2a:	801a      	strh	r2, [r3, #0]
  }
}
 8016d2c:	bf00      	nop
 8016d2e:	370c      	adds	r7, #12
 8016d30:	46bd      	mov	sp, r7
 8016d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d36:	4770      	bx	lr

08016d38 <mqtt_ringbuf_get_ptr>:

/** Return pointer to ring buffer get position */
static u8_t *
mqtt_ringbuf_get_ptr(struct mqtt_ringbuf_t *rb)
{
 8016d38:	b480      	push	{r7}
 8016d3a:	b083      	sub	sp, #12
 8016d3c:	af00      	add	r7, sp, #0
 8016d3e:	6078      	str	r0, [r7, #4]
  return &rb->buf[rb->get];
 8016d40:	687b      	ldr	r3, [r7, #4]
 8016d42:	885b      	ldrh	r3, [r3, #2]
 8016d44:	461a      	mov	r2, r3
 8016d46:	687b      	ldr	r3, [r7, #4]
 8016d48:	4413      	add	r3, r2
 8016d4a:	3304      	adds	r3, #4
}
 8016d4c:	4618      	mov	r0, r3
 8016d4e:	370c      	adds	r7, #12
 8016d50:	46bd      	mov	sp, r7
 8016d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d56:	4770      	bx	lr

08016d58 <mqtt_ringbuf_advance_get_idx>:

static void
mqtt_ringbuf_advance_get_idx(struct mqtt_ringbuf_t *rb, u16_t len)
{
 8016d58:	b580      	push	{r7, lr}
 8016d5a:	b082      	sub	sp, #8
 8016d5c:	af00      	add	r7, sp, #0
 8016d5e:	6078      	str	r0, [r7, #4]
 8016d60:	460b      	mov	r3, r1
 8016d62:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("mqtt_ringbuf_advance_get_idx: len < MQTT_OUTPUT_RINGBUF_SIZE", len < MQTT_OUTPUT_RINGBUF_SIZE);
 8016d64:	887b      	ldrh	r3, [r7, #2]
 8016d66:	2bff      	cmp	r3, #255	; 0xff
 8016d68:	d905      	bls.n	8016d76 <mqtt_ringbuf_advance_get_idx+0x1e>
 8016d6a:	4b0e      	ldr	r3, [pc, #56]	; (8016da4 <mqtt_ringbuf_advance_get_idx+0x4c>)
 8016d6c:	22cb      	movs	r2, #203	; 0xcb
 8016d6e:	490e      	ldr	r1, [pc, #56]	; (8016da8 <mqtt_ringbuf_advance_get_idx+0x50>)
 8016d70:	480e      	ldr	r0, [pc, #56]	; (8016dac <mqtt_ringbuf_advance_get_idx+0x54>)
 8016d72:	f00f fdab 	bl	80268cc <iprintf>

  rb->get += len;
 8016d76:	687b      	ldr	r3, [r7, #4]
 8016d78:	885a      	ldrh	r2, [r3, #2]
 8016d7a:	887b      	ldrh	r3, [r7, #2]
 8016d7c:	4413      	add	r3, r2
 8016d7e:	b29a      	uxth	r2, r3
 8016d80:	687b      	ldr	r3, [r7, #4]
 8016d82:	805a      	strh	r2, [r3, #2]
  if (rb->get >= MQTT_OUTPUT_RINGBUF_SIZE) {
 8016d84:	687b      	ldr	r3, [r7, #4]
 8016d86:	885b      	ldrh	r3, [r3, #2]
 8016d88:	2bff      	cmp	r3, #255	; 0xff
 8016d8a:	d906      	bls.n	8016d9a <mqtt_ringbuf_advance_get_idx+0x42>
    rb->get = rb->get - MQTT_OUTPUT_RINGBUF_SIZE;
 8016d8c:	687b      	ldr	r3, [r7, #4]
 8016d8e:	885b      	ldrh	r3, [r3, #2]
 8016d90:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8016d94:	b29a      	uxth	r2, r3
 8016d96:	687b      	ldr	r3, [r7, #4]
 8016d98:	805a      	strh	r2, [r3, #2]
  }
}
 8016d9a:	bf00      	nop
 8016d9c:	3708      	adds	r7, #8
 8016d9e:	46bd      	mov	sp, r7
 8016da0:	bd80      	pop	{r7, pc}
 8016da2:	bf00      	nop
 8016da4:	0802c17c 	.word	0x0802c17c
 8016da8:	0802c1b4 	.word	0x0802c1b4
 8016dac:	0802c1f4 	.word	0x0802c1f4

08016db0 <mqtt_ringbuf_len>:

/** Return number of bytes in ring buffer */
static u16_t
mqtt_ringbuf_len(struct mqtt_ringbuf_t *rb)
{
 8016db0:	b480      	push	{r7}
 8016db2:	b085      	sub	sp, #20
 8016db4:	af00      	add	r7, sp, #0
 8016db6:	6078      	str	r0, [r7, #4]
  u32_t len = rb->put - rb->get;
 8016db8:	687b      	ldr	r3, [r7, #4]
 8016dba:	881b      	ldrh	r3, [r3, #0]
 8016dbc:	461a      	mov	r2, r3
 8016dbe:	687b      	ldr	r3, [r7, #4]
 8016dc0:	885b      	ldrh	r3, [r3, #2]
 8016dc2:	1ad3      	subs	r3, r2, r3
 8016dc4:	60fb      	str	r3, [r7, #12]
  if (len > 0xFFFF) {
 8016dc6:	68fb      	ldr	r3, [r7, #12]
 8016dc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016dcc:	d303      	bcc.n	8016dd6 <mqtt_ringbuf_len+0x26>
    len += MQTT_OUTPUT_RINGBUF_SIZE;
 8016dce:	68fb      	ldr	r3, [r7, #12]
 8016dd0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8016dd4:	60fb      	str	r3, [r7, #12]
  }
  return (u16_t)len;
 8016dd6:	68fb      	ldr	r3, [r7, #12]
 8016dd8:	b29b      	uxth	r3, r3
}
 8016dda:	4618      	mov	r0, r3
 8016ddc:	3714      	adds	r7, #20
 8016dde:	46bd      	mov	sp, r7
 8016de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016de4:	4770      	bx	lr
	...

08016de8 <mqtt_output_send>:
 * @param rb Output ring buffer
 * @param tpcb TCP connection handle
 */
static void
mqtt_output_send(struct mqtt_ringbuf_t *rb, struct altcp_pcb *tpcb)
{
 8016de8:	b590      	push	{r4, r7, lr}
 8016dea:	b085      	sub	sp, #20
 8016dec:	af00      	add	r7, sp, #0
 8016dee:	6078      	str	r0, [r7, #4]
 8016df0:	6039      	str	r1, [r7, #0]
  err_t err;
  u8_t wrap = 0;
 8016df2:	2300      	movs	r3, #0
 8016df4:	73bb      	strb	r3, [r7, #14]
  u16_t ringbuf_lin_len = mqtt_ringbuf_linear_read_length(rb);
 8016df6:	6878      	ldr	r0, [r7, #4]
 8016df8:	f7ff ffda 	bl	8016db0 <mqtt_ringbuf_len>
 8016dfc:	4603      	mov	r3, r0
 8016dfe:	461a      	mov	r2, r3
 8016e00:	687b      	ldr	r3, [r7, #4]
 8016e02:	885b      	ldrh	r3, [r3, #2]
 8016e04:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8016e08:	429a      	cmp	r2, r3
 8016e0a:	da04      	bge.n	8016e16 <mqtt_output_send+0x2e>
 8016e0c:	6878      	ldr	r0, [r7, #4]
 8016e0e:	f7ff ffcf 	bl	8016db0 <mqtt_ringbuf_len>
 8016e12:	4603      	mov	r3, r0
 8016e14:	e004      	b.n	8016e20 <mqtt_output_send+0x38>
 8016e16:	687b      	ldr	r3, [r7, #4]
 8016e18:	885b      	ldrh	r3, [r3, #2]
 8016e1a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8016e1e:	b29b      	uxth	r3, r3
 8016e20:	817b      	strh	r3, [r7, #10]
  u16_t send_len = altcp_sndbuf(tpcb);
 8016e22:	683b      	ldr	r3, [r7, #0]
 8016e24:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8016e28:	81bb      	strh	r3, [r7, #12]
  LWIP_ASSERT("mqtt_output_send: tpcb != NULL", tpcb != NULL);
 8016e2a:	683b      	ldr	r3, [r7, #0]
 8016e2c:	2b00      	cmp	r3, #0
 8016e2e:	d105      	bne.n	8016e3c <mqtt_output_send+0x54>
 8016e30:	4b44      	ldr	r3, [pc, #272]	; (8016f44 <mqtt_output_send+0x15c>)
 8016e32:	22f0      	movs	r2, #240	; 0xf0
 8016e34:	4944      	ldr	r1, [pc, #272]	; (8016f48 <mqtt_output_send+0x160>)
 8016e36:	4845      	ldr	r0, [pc, #276]	; (8016f4c <mqtt_output_send+0x164>)
 8016e38:	f00f fd48 	bl	80268cc <iprintf>

  if (send_len == 0 || ringbuf_lin_len == 0) {
 8016e3c:	89bb      	ldrh	r3, [r7, #12]
 8016e3e:	2b00      	cmp	r3, #0
 8016e40:	d07c      	beq.n	8016f3c <mqtt_output_send+0x154>
 8016e42:	897b      	ldrh	r3, [r7, #10]
 8016e44:	2b00      	cmp	r3, #0
 8016e46:	d079      	beq.n	8016f3c <mqtt_output_send+0x154>
  }

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_output_send: tcp_sndbuf: %d bytes, ringbuf_linear_available: %d, get %d, put %d\n",
                                 send_len, ringbuf_lin_len, rb->get, rb->put));

  if (send_len > ringbuf_lin_len) {
 8016e48:	89ba      	ldrh	r2, [r7, #12]
 8016e4a:	897b      	ldrh	r3, [r7, #10]
 8016e4c:	429a      	cmp	r2, r3
 8016e4e:	d90d      	bls.n	8016e6c <mqtt_output_send+0x84>
    /* Space in TCP output buffer is larger than available in ring buffer linear portion */
    send_len = ringbuf_lin_len;
 8016e50:	897b      	ldrh	r3, [r7, #10]
 8016e52:	81bb      	strh	r3, [r7, #12]
    /* Wrap around if more data in ring buffer after linear portion */
    wrap = (mqtt_ringbuf_len(rb) > ringbuf_lin_len);
 8016e54:	6878      	ldr	r0, [r7, #4]
 8016e56:	f7ff ffab 	bl	8016db0 <mqtt_ringbuf_len>
 8016e5a:	4603      	mov	r3, r0
 8016e5c:	461a      	mov	r2, r3
 8016e5e:	897b      	ldrh	r3, [r7, #10]
 8016e60:	4293      	cmp	r3, r2
 8016e62:	bf34      	ite	cc
 8016e64:	2301      	movcc	r3, #1
 8016e66:	2300      	movcs	r3, #0
 8016e68:	b2db      	uxtb	r3, r3
 8016e6a:	73bb      	strb	r3, [r7, #14]
  }
  err = altcp_write(tpcb, mqtt_ringbuf_get_ptr(rb), send_len, TCP_WRITE_FLAG_COPY | (wrap ? TCP_WRITE_FLAG_MORE : 0));
 8016e6c:	6878      	ldr	r0, [r7, #4]
 8016e6e:	f7ff ff63 	bl	8016d38 <mqtt_ringbuf_get_ptr>
 8016e72:	4601      	mov	r1, r0
 8016e74:	7bbb      	ldrb	r3, [r7, #14]
 8016e76:	2b00      	cmp	r3, #0
 8016e78:	d001      	beq.n	8016e7e <mqtt_output_send+0x96>
 8016e7a:	2303      	movs	r3, #3
 8016e7c:	e000      	b.n	8016e80 <mqtt_output_send+0x98>
 8016e7e:	2301      	movs	r3, #1
 8016e80:	89ba      	ldrh	r2, [r7, #12]
 8016e82:	6838      	ldr	r0, [r7, #0]
 8016e84:	f007 ffb8 	bl	801edf8 <tcp_write>
 8016e88:	4603      	mov	r3, r0
 8016e8a:	73fb      	strb	r3, [r7, #15]
  if ((err == ERR_OK) && wrap) {
 8016e8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016e90:	2b00      	cmp	r3, #0
 8016e92:	d146      	bne.n	8016f22 <mqtt_output_send+0x13a>
 8016e94:	7bbb      	ldrb	r3, [r7, #14]
 8016e96:	2b00      	cmp	r3, #0
 8016e98:	d043      	beq.n	8016f22 <mqtt_output_send+0x13a>
    mqtt_ringbuf_advance_get_idx(rb, send_len);
 8016e9a:	89bb      	ldrh	r3, [r7, #12]
 8016e9c:	4619      	mov	r1, r3
 8016e9e:	6878      	ldr	r0, [r7, #4]
 8016ea0:	f7ff ff5a 	bl	8016d58 <mqtt_ringbuf_advance_get_idx>
    /* Use the lesser one of ring buffer linear length and TCP send buffer size */
    send_len = LWIP_MIN(altcp_sndbuf(tpcb), mqtt_ringbuf_linear_read_length(rb));
 8016ea4:	683b      	ldr	r3, [r7, #0]
 8016ea6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8016eaa:	461c      	mov	r4, r3
 8016eac:	6878      	ldr	r0, [r7, #4]
 8016eae:	f7ff ff7f 	bl	8016db0 <mqtt_ringbuf_len>
 8016eb2:	4603      	mov	r3, r0
 8016eb4:	461a      	mov	r2, r3
 8016eb6:	687b      	ldr	r3, [r7, #4]
 8016eb8:	885b      	ldrh	r3, [r3, #2]
 8016eba:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8016ebe:	429a      	cmp	r2, r3
 8016ec0:	da04      	bge.n	8016ecc <mqtt_output_send+0xe4>
 8016ec2:	6878      	ldr	r0, [r7, #4]
 8016ec4:	f7ff ff74 	bl	8016db0 <mqtt_ringbuf_len>
 8016ec8:	4603      	mov	r3, r0
 8016eca:	e003      	b.n	8016ed4 <mqtt_output_send+0xec>
 8016ecc:	687b      	ldr	r3, [r7, #4]
 8016ece:	885b      	ldrh	r3, [r3, #2]
 8016ed0:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8016ed4:	42a3      	cmp	r3, r4
 8016ed6:	dd03      	ble.n	8016ee0 <mqtt_output_send+0xf8>
 8016ed8:	683b      	ldr	r3, [r7, #0]
 8016eda:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8016ede:	e014      	b.n	8016f0a <mqtt_output_send+0x122>
 8016ee0:	6878      	ldr	r0, [r7, #4]
 8016ee2:	f7ff ff65 	bl	8016db0 <mqtt_ringbuf_len>
 8016ee6:	4603      	mov	r3, r0
 8016ee8:	461a      	mov	r2, r3
 8016eea:	687b      	ldr	r3, [r7, #4]
 8016eec:	885b      	ldrh	r3, [r3, #2]
 8016eee:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8016ef2:	429a      	cmp	r2, r3
 8016ef4:	da04      	bge.n	8016f00 <mqtt_output_send+0x118>
 8016ef6:	6878      	ldr	r0, [r7, #4]
 8016ef8:	f7ff ff5a 	bl	8016db0 <mqtt_ringbuf_len>
 8016efc:	4603      	mov	r3, r0
 8016efe:	e004      	b.n	8016f0a <mqtt_output_send+0x122>
 8016f00:	687b      	ldr	r3, [r7, #4]
 8016f02:	885b      	ldrh	r3, [r3, #2]
 8016f04:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8016f08:	b29b      	uxth	r3, r3
 8016f0a:	81bb      	strh	r3, [r7, #12]
    err = altcp_write(tpcb, mqtt_ringbuf_get_ptr(rb), send_len, TCP_WRITE_FLAG_COPY);
 8016f0c:	6878      	ldr	r0, [r7, #4]
 8016f0e:	f7ff ff13 	bl	8016d38 <mqtt_ringbuf_get_ptr>
 8016f12:	4601      	mov	r1, r0
 8016f14:	89ba      	ldrh	r2, [r7, #12]
 8016f16:	2301      	movs	r3, #1
 8016f18:	6838      	ldr	r0, [r7, #0]
 8016f1a:	f007 ff6d 	bl	801edf8 <tcp_write>
 8016f1e:	4603      	mov	r3, r0
 8016f20:	73fb      	strb	r3, [r7, #15]
  }

  if (err == ERR_OK) {
 8016f22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016f26:	2b00      	cmp	r3, #0
 8016f28:	d109      	bne.n	8016f3e <mqtt_output_send+0x156>
    mqtt_ringbuf_advance_get_idx(rb, send_len);
 8016f2a:	89bb      	ldrh	r3, [r7, #12]
 8016f2c:	4619      	mov	r1, r3
 8016f2e:	6878      	ldr	r0, [r7, #4]
 8016f30:	f7ff ff12 	bl	8016d58 <mqtt_ringbuf_advance_get_idx>
    /* Flush */
    altcp_output(tpcb);
 8016f34:	6838      	ldr	r0, [r7, #0]
 8016f36:	f008 fd49 	bl	801f9cc <tcp_output>
 8016f3a:	e000      	b.n	8016f3e <mqtt_output_send+0x156>
    return;
 8016f3c:	bf00      	nop
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_output_send: Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
  }
}
 8016f3e:	3714      	adds	r7, #20
 8016f40:	46bd      	mov	sp, r7
 8016f42:	bd90      	pop	{r4, r7, pc}
 8016f44:	0802c17c 	.word	0x0802c17c
 8016f48:	0802c21c 	.word	0x0802c21c
 8016f4c:	0802c1f4 	.word	0x0802c1f4

08016f50 <mqtt_create_request>:
 * @param arg Parameter following callback
 * @return Request or NULL if failed to create
 */
static struct mqtt_request_t *
mqtt_create_request(struct mqtt_request_t *r_objs, size_t r_objs_len, u16_t pkt_id, mqtt_request_cb_t cb, void *arg)
{
 8016f50:	b580      	push	{r7, lr}
 8016f52:	b086      	sub	sp, #24
 8016f54:	af00      	add	r7, sp, #0
 8016f56:	60f8      	str	r0, [r7, #12]
 8016f58:	60b9      	str	r1, [r7, #8]
 8016f5a:	603b      	str	r3, [r7, #0]
 8016f5c:	4613      	mov	r3, r2
 8016f5e:	80fb      	strh	r3, [r7, #6]
  struct mqtt_request_t *r = NULL;
 8016f60:	2300      	movs	r3, #0
 8016f62:	617b      	str	r3, [r7, #20]
  u8_t n;
  LWIP_ASSERT("mqtt_create_request: r_objs != NULL", r_objs != NULL);
 8016f64:	68fb      	ldr	r3, [r7, #12]
 8016f66:	2b00      	cmp	r3, #0
 8016f68:	d106      	bne.n	8016f78 <mqtt_create_request+0x28>
 8016f6a:	4b19      	ldr	r3, [pc, #100]	; (8016fd0 <mqtt_create_request+0x80>)
 8016f6c:	f240 1223 	movw	r2, #291	; 0x123
 8016f70:	4918      	ldr	r1, [pc, #96]	; (8016fd4 <mqtt_create_request+0x84>)
 8016f72:	4819      	ldr	r0, [pc, #100]	; (8016fd8 <mqtt_create_request+0x88>)
 8016f74:	f00f fcaa 	bl	80268cc <iprintf>
  for (n = 0; n < r_objs_len; n++) {
 8016f78:	2300      	movs	r3, #0
 8016f7a:	74fb      	strb	r3, [r7, #19]
 8016f7c:	e01f      	b.n	8016fbe <mqtt_create_request+0x6e>
    /* Item point to itself if not in use */
    if (r_objs[n].next == &r_objs[n]) {
 8016f7e:	7cfb      	ldrb	r3, [r7, #19]
 8016f80:	011b      	lsls	r3, r3, #4
 8016f82:	68fa      	ldr	r2, [r7, #12]
 8016f84:	4413      	add	r3, r2
 8016f86:	681a      	ldr	r2, [r3, #0]
 8016f88:	7cfb      	ldrb	r3, [r7, #19]
 8016f8a:	011b      	lsls	r3, r3, #4
 8016f8c:	68f9      	ldr	r1, [r7, #12]
 8016f8e:	440b      	add	r3, r1
 8016f90:	429a      	cmp	r2, r3
 8016f92:	d111      	bne.n	8016fb8 <mqtt_create_request+0x68>
      r = &r_objs[n];
 8016f94:	7cfb      	ldrb	r3, [r7, #19]
 8016f96:	011b      	lsls	r3, r3, #4
 8016f98:	68fa      	ldr	r2, [r7, #12]
 8016f9a:	4413      	add	r3, r2
 8016f9c:	617b      	str	r3, [r7, #20]
      r->next = NULL;
 8016f9e:	697b      	ldr	r3, [r7, #20]
 8016fa0:	2200      	movs	r2, #0
 8016fa2:	601a      	str	r2, [r3, #0]
      r->cb = cb;
 8016fa4:	697b      	ldr	r3, [r7, #20]
 8016fa6:	683a      	ldr	r2, [r7, #0]
 8016fa8:	605a      	str	r2, [r3, #4]
      r->arg = arg;
 8016faa:	697b      	ldr	r3, [r7, #20]
 8016fac:	6a3a      	ldr	r2, [r7, #32]
 8016fae:	609a      	str	r2, [r3, #8]
      r->pkt_id = pkt_id;
 8016fb0:	697b      	ldr	r3, [r7, #20]
 8016fb2:	88fa      	ldrh	r2, [r7, #6]
 8016fb4:	819a      	strh	r2, [r3, #12]
      break;
 8016fb6:	e006      	b.n	8016fc6 <mqtt_create_request+0x76>
  for (n = 0; n < r_objs_len; n++) {
 8016fb8:	7cfb      	ldrb	r3, [r7, #19]
 8016fba:	3301      	adds	r3, #1
 8016fbc:	74fb      	strb	r3, [r7, #19]
 8016fbe:	7cfb      	ldrb	r3, [r7, #19]
 8016fc0:	68ba      	ldr	r2, [r7, #8]
 8016fc2:	429a      	cmp	r2, r3
 8016fc4:	d8db      	bhi.n	8016f7e <mqtt_create_request+0x2e>
    }
  }
  return r;
 8016fc6:	697b      	ldr	r3, [r7, #20]
}
 8016fc8:	4618      	mov	r0, r3
 8016fca:	3718      	adds	r7, #24
 8016fcc:	46bd      	mov	sp, r7
 8016fce:	bd80      	pop	{r7, pc}
 8016fd0:	0802c17c 	.word	0x0802c17c
 8016fd4:	0802c23c 	.word	0x0802c23c
 8016fd8:	0802c1f4 	.word	0x0802c1f4

08016fdc <mqtt_append_request>:
 * @param tail Pointer to request queue tail pointer
 * @param r Request to append
 */
static void
mqtt_append_request(struct mqtt_request_t **tail, struct mqtt_request_t *r)
{
 8016fdc:	b580      	push	{r7, lr}
 8016fde:	b086      	sub	sp, #24
 8016fe0:	af00      	add	r7, sp, #0
 8016fe2:	6078      	str	r0, [r7, #4]
 8016fe4:	6039      	str	r1, [r7, #0]
  struct mqtt_request_t *head = NULL;
 8016fe6:	2300      	movs	r3, #0
 8016fe8:	617b      	str	r3, [r7, #20]
  s16_t time_before = 0;
 8016fea:	2300      	movs	r3, #0
 8016fec:	827b      	strh	r3, [r7, #18]
  struct mqtt_request_t *iter;

  LWIP_ASSERT("mqtt_append_request: tail != NULL", tail != NULL);
 8016fee:	687b      	ldr	r3, [r7, #4]
 8016ff0:	2b00      	cmp	r3, #0
 8016ff2:	d106      	bne.n	8017002 <mqtt_append_request+0x26>
 8016ff4:	4b1b      	ldr	r3, [pc, #108]	; (8017064 <mqtt_append_request+0x88>)
 8016ff6:	f240 123f 	movw	r2, #319	; 0x13f
 8016ffa:	491b      	ldr	r1, [pc, #108]	; (8017068 <mqtt_append_request+0x8c>)
 8016ffc:	481b      	ldr	r0, [pc, #108]	; (801706c <mqtt_append_request+0x90>)
 8016ffe:	f00f fc65 	bl	80268cc <iprintf>

  /* Iterate trough queue to find head, and count total timeout time */
  for (iter = *tail; iter != NULL; iter = iter->next) {
 8017002:	687b      	ldr	r3, [r7, #4]
 8017004:	681b      	ldr	r3, [r3, #0]
 8017006:	60fb      	str	r3, [r7, #12]
 8017008:	e00a      	b.n	8017020 <mqtt_append_request+0x44>
    time_before += iter->timeout_diff;
 801700a:	68fb      	ldr	r3, [r7, #12]
 801700c:	89da      	ldrh	r2, [r3, #14]
 801700e:	8a7b      	ldrh	r3, [r7, #18]
 8017010:	4413      	add	r3, r2
 8017012:	b29b      	uxth	r3, r3
 8017014:	827b      	strh	r3, [r7, #18]
    head = iter;
 8017016:	68fb      	ldr	r3, [r7, #12]
 8017018:	617b      	str	r3, [r7, #20]
  for (iter = *tail; iter != NULL; iter = iter->next) {
 801701a:	68fb      	ldr	r3, [r7, #12]
 801701c:	681b      	ldr	r3, [r3, #0]
 801701e:	60fb      	str	r3, [r7, #12]
 8017020:	68fb      	ldr	r3, [r7, #12]
 8017022:	2b00      	cmp	r3, #0
 8017024:	d1f1      	bne.n	801700a <mqtt_append_request+0x2e>
  }

  LWIP_ASSERT("mqtt_append_request: time_before <= MQTT_REQ_TIMEOUT", time_before <= MQTT_REQ_TIMEOUT);
 8017026:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801702a:	2b1e      	cmp	r3, #30
 801702c:	dd06      	ble.n	801703c <mqtt_append_request+0x60>
 801702e:	4b0d      	ldr	r3, [pc, #52]	; (8017064 <mqtt_append_request+0x88>)
 8017030:	f240 1247 	movw	r2, #327	; 0x147
 8017034:	490e      	ldr	r1, [pc, #56]	; (8017070 <mqtt_append_request+0x94>)
 8017036:	480d      	ldr	r0, [pc, #52]	; (801706c <mqtt_append_request+0x90>)
 8017038:	f00f fc48 	bl	80268cc <iprintf>
  r->timeout_diff = MQTT_REQ_TIMEOUT - time_before;
 801703c:	8a7b      	ldrh	r3, [r7, #18]
 801703e:	f1c3 031e 	rsb	r3, r3, #30
 8017042:	b29a      	uxth	r2, r3
 8017044:	683b      	ldr	r3, [r7, #0]
 8017046:	81da      	strh	r2, [r3, #14]
  if (head == NULL) {
 8017048:	697b      	ldr	r3, [r7, #20]
 801704a:	2b00      	cmp	r3, #0
 801704c:	d103      	bne.n	8017056 <mqtt_append_request+0x7a>
    *tail = r;
 801704e:	687b      	ldr	r3, [r7, #4]
 8017050:	683a      	ldr	r2, [r7, #0]
 8017052:	601a      	str	r2, [r3, #0]
  } else {
    head->next = r;
  }
}
 8017054:	e002      	b.n	801705c <mqtt_append_request+0x80>
    head->next = r;
 8017056:	697b      	ldr	r3, [r7, #20]
 8017058:	683a      	ldr	r2, [r7, #0]
 801705a:	601a      	str	r2, [r3, #0]
}
 801705c:	bf00      	nop
 801705e:	3718      	adds	r7, #24
 8017060:	46bd      	mov	sp, r7
 8017062:	bd80      	pop	{r7, pc}
 8017064:	0802c17c 	.word	0x0802c17c
 8017068:	0802c260 	.word	0x0802c260
 801706c:	0802c1f4 	.word	0x0802c1f4
 8017070:	0802c284 	.word	0x0802c284

08017074 <mqtt_delete_request>:
 * Delete request item
 * @param r Request item to delete
 */
static void
mqtt_delete_request(struct mqtt_request_t *r)
{
 8017074:	b480      	push	{r7}
 8017076:	b083      	sub	sp, #12
 8017078:	af00      	add	r7, sp, #0
 801707a:	6078      	str	r0, [r7, #4]
  if (r != NULL) {
 801707c:	687b      	ldr	r3, [r7, #4]
 801707e:	2b00      	cmp	r3, #0
 8017080:	d002      	beq.n	8017088 <mqtt_delete_request+0x14>
    r->next = r;
 8017082:	687b      	ldr	r3, [r7, #4]
 8017084:	687a      	ldr	r2, [r7, #4]
 8017086:	601a      	str	r2, [r3, #0]
  }
}
 8017088:	bf00      	nop
 801708a:	370c      	adds	r7, #12
 801708c:	46bd      	mov	sp, r7
 801708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017092:	4770      	bx	lr

08017094 <mqtt_take_request>:
 * @param pkt_id Packet identifier of request to take
 * @return Request item if found, NULL if not
 */
static struct mqtt_request_t *
mqtt_take_request(struct mqtt_request_t **tail, u16_t pkt_id)
{
 8017094:	b580      	push	{r7, lr}
 8017096:	b084      	sub	sp, #16
 8017098:	af00      	add	r7, sp, #0
 801709a:	6078      	str	r0, [r7, #4]
 801709c:	460b      	mov	r3, r1
 801709e:	807b      	strh	r3, [r7, #2]
  struct mqtt_request_t *iter = NULL, *prev = NULL;
 80170a0:	2300      	movs	r3, #0
 80170a2:	60fb      	str	r3, [r7, #12]
 80170a4:	2300      	movs	r3, #0
 80170a6:	60bb      	str	r3, [r7, #8]
  LWIP_ASSERT("mqtt_take_request: tail != NULL", tail != NULL);
 80170a8:	687b      	ldr	r3, [r7, #4]
 80170aa:	2b00      	cmp	r3, #0
 80170ac:	d106      	bne.n	80170bc <mqtt_take_request+0x28>
 80170ae:	4b1f      	ldr	r3, [pc, #124]	; (801712c <mqtt_take_request+0x98>)
 80170b0:	f240 1267 	movw	r2, #359	; 0x167
 80170b4:	491e      	ldr	r1, [pc, #120]	; (8017130 <mqtt_take_request+0x9c>)
 80170b6:	481f      	ldr	r0, [pc, #124]	; (8017134 <mqtt_take_request+0xa0>)
 80170b8:	f00f fc08 	bl	80268cc <iprintf>
  /* Search all request for pkt_id */
  for (iter = *tail; iter != NULL; iter = iter->next) {
 80170bc:	687b      	ldr	r3, [r7, #4]
 80170be:	681b      	ldr	r3, [r3, #0]
 80170c0:	60fb      	str	r3, [r7, #12]
 80170c2:	e009      	b.n	80170d8 <mqtt_take_request+0x44>
    if (iter->pkt_id == pkt_id) {
 80170c4:	68fb      	ldr	r3, [r7, #12]
 80170c6:	899b      	ldrh	r3, [r3, #12]
 80170c8:	887a      	ldrh	r2, [r7, #2]
 80170ca:	429a      	cmp	r2, r3
 80170cc:	d008      	beq.n	80170e0 <mqtt_take_request+0x4c>
      break;
    }
    prev = iter;
 80170ce:	68fb      	ldr	r3, [r7, #12]
 80170d0:	60bb      	str	r3, [r7, #8]
  for (iter = *tail; iter != NULL; iter = iter->next) {
 80170d2:	68fb      	ldr	r3, [r7, #12]
 80170d4:	681b      	ldr	r3, [r3, #0]
 80170d6:	60fb      	str	r3, [r7, #12]
 80170d8:	68fb      	ldr	r3, [r7, #12]
 80170da:	2b00      	cmp	r3, #0
 80170dc:	d1f2      	bne.n	80170c4 <mqtt_take_request+0x30>
 80170de:	e000      	b.n	80170e2 <mqtt_take_request+0x4e>
      break;
 80170e0:	bf00      	nop
  }

  /* If request was found */
  if (iter != NULL) {
 80170e2:	68fb      	ldr	r3, [r7, #12]
 80170e4:	2b00      	cmp	r3, #0
 80170e6:	d01c      	beq.n	8017122 <mqtt_take_request+0x8e>
    /* unchain */
    if (prev == NULL) {
 80170e8:	68bb      	ldr	r3, [r7, #8]
 80170ea:	2b00      	cmp	r3, #0
 80170ec:	d104      	bne.n	80170f8 <mqtt_take_request+0x64>
      *tail = iter->next;
 80170ee:	68fb      	ldr	r3, [r7, #12]
 80170f0:	681a      	ldr	r2, [r3, #0]
 80170f2:	687b      	ldr	r3, [r7, #4]
 80170f4:	601a      	str	r2, [r3, #0]
 80170f6:	e003      	b.n	8017100 <mqtt_take_request+0x6c>
    } else {
      prev->next = iter->next;
 80170f8:	68fb      	ldr	r3, [r7, #12]
 80170fa:	681a      	ldr	r2, [r3, #0]
 80170fc:	68bb      	ldr	r3, [r7, #8]
 80170fe:	601a      	str	r2, [r3, #0]
    }
    /* If exists, add remaining timeout time for the request to next */
    if (iter->next != NULL) {
 8017100:	68fb      	ldr	r3, [r7, #12]
 8017102:	681b      	ldr	r3, [r3, #0]
 8017104:	2b00      	cmp	r3, #0
 8017106:	d009      	beq.n	801711c <mqtt_take_request+0x88>
      iter->next->timeout_diff += iter->timeout_diff;
 8017108:	68fb      	ldr	r3, [r7, #12]
 801710a:	681b      	ldr	r3, [r3, #0]
 801710c:	89d9      	ldrh	r1, [r3, #14]
 801710e:	68fb      	ldr	r3, [r7, #12]
 8017110:	89da      	ldrh	r2, [r3, #14]
 8017112:	68fb      	ldr	r3, [r7, #12]
 8017114:	681b      	ldr	r3, [r3, #0]
 8017116:	440a      	add	r2, r1
 8017118:	b292      	uxth	r2, r2
 801711a:	81da      	strh	r2, [r3, #14]
    }
    iter->next = NULL;
 801711c:	68fb      	ldr	r3, [r7, #12]
 801711e:	2200      	movs	r2, #0
 8017120:	601a      	str	r2, [r3, #0]
  }
  return iter;
 8017122:	68fb      	ldr	r3, [r7, #12]
}
 8017124:	4618      	mov	r0, r3
 8017126:	3710      	adds	r7, #16
 8017128:	46bd      	mov	sp, r7
 801712a:	bd80      	pop	{r7, pc}
 801712c:	0802c17c 	.word	0x0802c17c
 8017130:	0802c2bc 	.word	0x0802c2bc
 8017134:	0802c1f4 	.word	0x0802c1f4

08017138 <mqtt_request_time_elapsed>:
 * @param tail Pointer to request queue tail pointer
 * @param t Time since last call in seconds
 */
static void
mqtt_request_time_elapsed(struct mqtt_request_t **tail, u8_t t)
{
 8017138:	b580      	push	{r7, lr}
 801713a:	b084      	sub	sp, #16
 801713c:	af00      	add	r7, sp, #0
 801713e:	6078      	str	r0, [r7, #4]
 8017140:	460b      	mov	r3, r1
 8017142:	70fb      	strb	r3, [r7, #3]
  struct mqtt_request_t *r;
  LWIP_ASSERT("mqtt_request_time_elapsed: tail != NULL", tail != NULL);
 8017144:	687b      	ldr	r3, [r7, #4]
 8017146:	2b00      	cmp	r3, #0
 8017148:	d106      	bne.n	8017158 <mqtt_request_time_elapsed+0x20>
 801714a:	4b21      	ldr	r3, [pc, #132]	; (80171d0 <mqtt_request_time_elapsed+0x98>)
 801714c:	f44f 72c5 	mov.w	r2, #394	; 0x18a
 8017150:	4920      	ldr	r1, [pc, #128]	; (80171d4 <mqtt_request_time_elapsed+0x9c>)
 8017152:	4821      	ldr	r0, [pc, #132]	; (80171d8 <mqtt_request_time_elapsed+0xa0>)
 8017154:	f00f fbba 	bl	80268cc <iprintf>
  r = *tail;
 8017158:	687b      	ldr	r3, [r7, #4]
 801715a:	681b      	ldr	r3, [r3, #0]
 801715c:	60fb      	str	r3, [r7, #12]
  while (t > 0 && r != NULL) {
 801715e:	e02c      	b.n	80171ba <mqtt_request_time_elapsed+0x82>
    if (t >= r->timeout_diff) {
 8017160:	78fb      	ldrb	r3, [r7, #3]
 8017162:	b29a      	uxth	r2, r3
 8017164:	68fb      	ldr	r3, [r7, #12]
 8017166:	89db      	ldrh	r3, [r3, #14]
 8017168:	429a      	cmp	r2, r3
 801716a:	d31c      	bcc.n	80171a6 <mqtt_request_time_elapsed+0x6e>
      t -= (u8_t)r->timeout_diff;
 801716c:	68fb      	ldr	r3, [r7, #12]
 801716e:	89db      	ldrh	r3, [r3, #14]
 8017170:	b2db      	uxtb	r3, r3
 8017172:	78fa      	ldrb	r2, [r7, #3]
 8017174:	1ad3      	subs	r3, r2, r3
 8017176:	70fb      	strb	r3, [r7, #3]
      /* Unchain */
      *tail = r->next;
 8017178:	68fb      	ldr	r3, [r7, #12]
 801717a:	681a      	ldr	r2, [r3, #0]
 801717c:	687b      	ldr	r3, [r7, #4]
 801717e:	601a      	str	r2, [r3, #0]
      /* Notify upper layer about timeout */
      if (r->cb != NULL) {
 8017180:	68fb      	ldr	r3, [r7, #12]
 8017182:	685b      	ldr	r3, [r3, #4]
 8017184:	2b00      	cmp	r3, #0
 8017186:	d007      	beq.n	8017198 <mqtt_request_time_elapsed+0x60>
        r->cb(r->arg, ERR_TIMEOUT);
 8017188:	68fb      	ldr	r3, [r7, #12]
 801718a:	685b      	ldr	r3, [r3, #4]
 801718c:	68fa      	ldr	r2, [r7, #12]
 801718e:	6892      	ldr	r2, [r2, #8]
 8017190:	f06f 0102 	mvn.w	r1, #2
 8017194:	4610      	mov	r0, r2
 8017196:	4798      	blx	r3
      }
      mqtt_delete_request(r);
 8017198:	68f8      	ldr	r0, [r7, #12]
 801719a:	f7ff ff6b 	bl	8017074 <mqtt_delete_request>
      /* Tail might be be modified in callback, so re-read it in every iteration */
      r = *(struct mqtt_request_t *const volatile *)tail;
 801719e:	687b      	ldr	r3, [r7, #4]
 80171a0:	681b      	ldr	r3, [r3, #0]
 80171a2:	60fb      	str	r3, [r7, #12]
 80171a4:	e009      	b.n	80171ba <mqtt_request_time_elapsed+0x82>
    } else {
      r->timeout_diff -= t;
 80171a6:	68fb      	ldr	r3, [r7, #12]
 80171a8:	89da      	ldrh	r2, [r3, #14]
 80171aa:	78fb      	ldrb	r3, [r7, #3]
 80171ac:	b29b      	uxth	r3, r3
 80171ae:	1ad3      	subs	r3, r2, r3
 80171b0:	b29a      	uxth	r2, r3
 80171b2:	68fb      	ldr	r3, [r7, #12]
 80171b4:	81da      	strh	r2, [r3, #14]
      t = 0;
 80171b6:	2300      	movs	r3, #0
 80171b8:	70fb      	strb	r3, [r7, #3]
  while (t > 0 && r != NULL) {
 80171ba:	78fb      	ldrb	r3, [r7, #3]
 80171bc:	2b00      	cmp	r3, #0
 80171be:	d002      	beq.n	80171c6 <mqtt_request_time_elapsed+0x8e>
 80171c0:	68fb      	ldr	r3, [r7, #12]
 80171c2:	2b00      	cmp	r3, #0
 80171c4:	d1cc      	bne.n	8017160 <mqtt_request_time_elapsed+0x28>
    }
  }
}
 80171c6:	bf00      	nop
 80171c8:	3710      	adds	r7, #16
 80171ca:	46bd      	mov	sp, r7
 80171cc:	bd80      	pop	{r7, pc}
 80171ce:	bf00      	nop
 80171d0:	0802c17c 	.word	0x0802c17c
 80171d4:	0802c2dc 	.word	0x0802c2dc
 80171d8:	0802c1f4 	.word	0x0802c1f4

080171dc <mqtt_clear_requests>:
 * Free all request items
 * @param tail Pointer to request queue tail pointer
 */
static void
mqtt_clear_requests(struct mqtt_request_t **tail)
{
 80171dc:	b580      	push	{r7, lr}
 80171de:	b084      	sub	sp, #16
 80171e0:	af00      	add	r7, sp, #0
 80171e2:	6078      	str	r0, [r7, #4]
  struct mqtt_request_t *iter, *next;
  LWIP_ASSERT("mqtt_clear_requests: tail != NULL", tail != NULL);
 80171e4:	687b      	ldr	r3, [r7, #4]
 80171e6:	2b00      	cmp	r3, #0
 80171e8:	d106      	bne.n	80171f8 <mqtt_clear_requests+0x1c>
 80171ea:	4b0e      	ldr	r3, [pc, #56]	; (8017224 <mqtt_clear_requests+0x48>)
 80171ec:	f240 12a7 	movw	r2, #423	; 0x1a7
 80171f0:	490d      	ldr	r1, [pc, #52]	; (8017228 <mqtt_clear_requests+0x4c>)
 80171f2:	480e      	ldr	r0, [pc, #56]	; (801722c <mqtt_clear_requests+0x50>)
 80171f4:	f00f fb6a 	bl	80268cc <iprintf>
  for (iter = *tail; iter != NULL; iter = next) {
 80171f8:	687b      	ldr	r3, [r7, #4]
 80171fa:	681b      	ldr	r3, [r3, #0]
 80171fc:	60fb      	str	r3, [r7, #12]
 80171fe:	e007      	b.n	8017210 <mqtt_clear_requests+0x34>
    next = iter->next;
 8017200:	68fb      	ldr	r3, [r7, #12]
 8017202:	681b      	ldr	r3, [r3, #0]
 8017204:	60bb      	str	r3, [r7, #8]
    mqtt_delete_request(iter);
 8017206:	68f8      	ldr	r0, [r7, #12]
 8017208:	f7ff ff34 	bl	8017074 <mqtt_delete_request>
  for (iter = *tail; iter != NULL; iter = next) {
 801720c:	68bb      	ldr	r3, [r7, #8]
 801720e:	60fb      	str	r3, [r7, #12]
 8017210:	68fb      	ldr	r3, [r7, #12]
 8017212:	2b00      	cmp	r3, #0
 8017214:	d1f4      	bne.n	8017200 <mqtt_clear_requests+0x24>
  }
  *tail = NULL;
 8017216:	687b      	ldr	r3, [r7, #4]
 8017218:	2200      	movs	r2, #0
 801721a:	601a      	str	r2, [r3, #0]
}
 801721c:	bf00      	nop
 801721e:	3710      	adds	r7, #16
 8017220:	46bd      	mov	sp, r7
 8017222:	bd80      	pop	{r7, pc}
 8017224:	0802c17c 	.word	0x0802c17c
 8017228:	0802c304 	.word	0x0802c304
 801722c:	0802c1f4 	.word	0x0802c1f4

08017230 <mqtt_init_requests>:
 * @param r_objs Pointer to request objects
 * @param r_objs_len Number of array entries
 */
static void
mqtt_init_requests(struct mqtt_request_t *r_objs, size_t r_objs_len)
{
 8017230:	b580      	push	{r7, lr}
 8017232:	b084      	sub	sp, #16
 8017234:	af00      	add	r7, sp, #0
 8017236:	6078      	str	r0, [r7, #4]
 8017238:	6039      	str	r1, [r7, #0]
  u8_t n;
  LWIP_ASSERT("mqtt_init_requests: r_objs != NULL", r_objs != NULL);
 801723a:	687b      	ldr	r3, [r7, #4]
 801723c:	2b00      	cmp	r3, #0
 801723e:	d106      	bne.n	801724e <mqtt_init_requests+0x1e>
 8017240:	4b0f      	ldr	r3, [pc, #60]	; (8017280 <mqtt_init_requests+0x50>)
 8017242:	f240 12b7 	movw	r2, #439	; 0x1b7
 8017246:	490f      	ldr	r1, [pc, #60]	; (8017284 <mqtt_init_requests+0x54>)
 8017248:	480f      	ldr	r0, [pc, #60]	; (8017288 <mqtt_init_requests+0x58>)
 801724a:	f00f fb3f 	bl	80268cc <iprintf>
  for (n = 0; n < r_objs_len; n++) {
 801724e:	2300      	movs	r3, #0
 8017250:	73fb      	strb	r3, [r7, #15]
 8017252:	e00b      	b.n	801726c <mqtt_init_requests+0x3c>
    /* Item pointing to itself indicates unused */
    r_objs[n].next = &r_objs[n];
 8017254:	7bfb      	ldrb	r3, [r7, #15]
 8017256:	011a      	lsls	r2, r3, #4
 8017258:	7bfb      	ldrb	r3, [r7, #15]
 801725a:	011b      	lsls	r3, r3, #4
 801725c:	6879      	ldr	r1, [r7, #4]
 801725e:	440b      	add	r3, r1
 8017260:	6879      	ldr	r1, [r7, #4]
 8017262:	440a      	add	r2, r1
 8017264:	601a      	str	r2, [r3, #0]
  for (n = 0; n < r_objs_len; n++) {
 8017266:	7bfb      	ldrb	r3, [r7, #15]
 8017268:	3301      	adds	r3, #1
 801726a:	73fb      	strb	r3, [r7, #15]
 801726c:	7bfb      	ldrb	r3, [r7, #15]
 801726e:	683a      	ldr	r2, [r7, #0]
 8017270:	429a      	cmp	r2, r3
 8017272:	d8ef      	bhi.n	8017254 <mqtt_init_requests+0x24>
  }
}
 8017274:	bf00      	nop
 8017276:	bf00      	nop
 8017278:	3710      	adds	r7, #16
 801727a:	46bd      	mov	sp, r7
 801727c:	bd80      	pop	{r7, pc}
 801727e:	bf00      	nop
 8017280:	0802c17c 	.word	0x0802c17c
 8017284:	0802c328 	.word	0x0802c328
 8017288:	0802c1f4 	.word	0x0802c1f4

0801728c <mqtt_output_append_u8>:
/* Output message build helpers */


static void
mqtt_output_append_u8(struct mqtt_ringbuf_t *rb, u8_t value)
{
 801728c:	b580      	push	{r7, lr}
 801728e:	b082      	sub	sp, #8
 8017290:	af00      	add	r7, sp, #0
 8017292:	6078      	str	r0, [r7, #4]
 8017294:	460b      	mov	r3, r1
 8017296:	70fb      	strb	r3, [r7, #3]
  mqtt_ringbuf_put(rb, value);
 8017298:	78fb      	ldrb	r3, [r7, #3]
 801729a:	4619      	mov	r1, r3
 801729c:	6878      	ldr	r0, [r7, #4]
 801729e:	f7ff fd2b 	bl	8016cf8 <mqtt_ringbuf_put>
}
 80172a2:	bf00      	nop
 80172a4:	3708      	adds	r7, #8
 80172a6:	46bd      	mov	sp, r7
 80172a8:	bd80      	pop	{r7, pc}

080172aa <mqtt_output_append_u16>:

static
void mqtt_output_append_u16(struct mqtt_ringbuf_t *rb, u16_t value)
{
 80172aa:	b580      	push	{r7, lr}
 80172ac:	b082      	sub	sp, #8
 80172ae:	af00      	add	r7, sp, #0
 80172b0:	6078      	str	r0, [r7, #4]
 80172b2:	460b      	mov	r3, r1
 80172b4:	807b      	strh	r3, [r7, #2]
  mqtt_ringbuf_put(rb, value >> 8);
 80172b6:	887b      	ldrh	r3, [r7, #2]
 80172b8:	0a1b      	lsrs	r3, r3, #8
 80172ba:	b29b      	uxth	r3, r3
 80172bc:	b2db      	uxtb	r3, r3
 80172be:	4619      	mov	r1, r3
 80172c0:	6878      	ldr	r0, [r7, #4]
 80172c2:	f7ff fd19 	bl	8016cf8 <mqtt_ringbuf_put>
  mqtt_ringbuf_put(rb, value & 0xff);
 80172c6:	887b      	ldrh	r3, [r7, #2]
 80172c8:	b2db      	uxtb	r3, r3
 80172ca:	4619      	mov	r1, r3
 80172cc:	6878      	ldr	r0, [r7, #4]
 80172ce:	f7ff fd13 	bl	8016cf8 <mqtt_ringbuf_put>
}
 80172d2:	bf00      	nop
 80172d4:	3708      	adds	r7, #8
 80172d6:	46bd      	mov	sp, r7
 80172d8:	bd80      	pop	{r7, pc}

080172da <mqtt_output_append_buf>:

static void
mqtt_output_append_buf(struct mqtt_ringbuf_t *rb, const void *data, u16_t length)
{
 80172da:	b580      	push	{r7, lr}
 80172dc:	b086      	sub	sp, #24
 80172de:	af00      	add	r7, sp, #0
 80172e0:	60f8      	str	r0, [r7, #12]
 80172e2:	60b9      	str	r1, [r7, #8]
 80172e4:	4613      	mov	r3, r2
 80172e6:	80fb      	strh	r3, [r7, #6]
  u16_t n;
  for (n = 0; n < length; n++) {
 80172e8:	2300      	movs	r3, #0
 80172ea:	82fb      	strh	r3, [r7, #22]
 80172ec:	e00a      	b.n	8017304 <mqtt_output_append_buf+0x2a>
    mqtt_ringbuf_put(rb, ((const u8_t *)data)[n]);
 80172ee:	8afb      	ldrh	r3, [r7, #22]
 80172f0:	68ba      	ldr	r2, [r7, #8]
 80172f2:	4413      	add	r3, r2
 80172f4:	781b      	ldrb	r3, [r3, #0]
 80172f6:	4619      	mov	r1, r3
 80172f8:	68f8      	ldr	r0, [r7, #12]
 80172fa:	f7ff fcfd 	bl	8016cf8 <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 80172fe:	8afb      	ldrh	r3, [r7, #22]
 8017300:	3301      	adds	r3, #1
 8017302:	82fb      	strh	r3, [r7, #22]
 8017304:	8afa      	ldrh	r2, [r7, #22]
 8017306:	88fb      	ldrh	r3, [r7, #6]
 8017308:	429a      	cmp	r2, r3
 801730a:	d3f0      	bcc.n	80172ee <mqtt_output_append_buf+0x14>
  }
}
 801730c:	bf00      	nop
 801730e:	bf00      	nop
 8017310:	3718      	adds	r7, #24
 8017312:	46bd      	mov	sp, r7
 8017314:	bd80      	pop	{r7, pc}

08017316 <mqtt_output_append_string>:

static void
mqtt_output_append_string(struct mqtt_ringbuf_t *rb, const char *str, u16_t length)
{
 8017316:	b580      	push	{r7, lr}
 8017318:	b086      	sub	sp, #24
 801731a:	af00      	add	r7, sp, #0
 801731c:	60f8      	str	r0, [r7, #12]
 801731e:	60b9      	str	r1, [r7, #8]
 8017320:	4613      	mov	r3, r2
 8017322:	80fb      	strh	r3, [r7, #6]
  u16_t n;
  mqtt_ringbuf_put(rb, length >> 8);
 8017324:	88fb      	ldrh	r3, [r7, #6]
 8017326:	0a1b      	lsrs	r3, r3, #8
 8017328:	b29b      	uxth	r3, r3
 801732a:	b2db      	uxtb	r3, r3
 801732c:	4619      	mov	r1, r3
 801732e:	68f8      	ldr	r0, [r7, #12]
 8017330:	f7ff fce2 	bl	8016cf8 <mqtt_ringbuf_put>
  mqtt_ringbuf_put(rb, length & 0xff);
 8017334:	88fb      	ldrh	r3, [r7, #6]
 8017336:	b2db      	uxtb	r3, r3
 8017338:	4619      	mov	r1, r3
 801733a:	68f8      	ldr	r0, [r7, #12]
 801733c:	f7ff fcdc 	bl	8016cf8 <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 8017340:	2300      	movs	r3, #0
 8017342:	82fb      	strh	r3, [r7, #22]
 8017344:	e00a      	b.n	801735c <mqtt_output_append_string+0x46>
    mqtt_ringbuf_put(rb, str[n]);
 8017346:	8afb      	ldrh	r3, [r7, #22]
 8017348:	68ba      	ldr	r2, [r7, #8]
 801734a:	4413      	add	r3, r2
 801734c:	781b      	ldrb	r3, [r3, #0]
 801734e:	4619      	mov	r1, r3
 8017350:	68f8      	ldr	r0, [r7, #12]
 8017352:	f7ff fcd1 	bl	8016cf8 <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 8017356:	8afb      	ldrh	r3, [r7, #22]
 8017358:	3301      	adds	r3, #1
 801735a:	82fb      	strh	r3, [r7, #22]
 801735c:	8afa      	ldrh	r2, [r7, #22]
 801735e:	88fb      	ldrh	r3, [r7, #6]
 8017360:	429a      	cmp	r2, r3
 8017362:	d3f0      	bcc.n	8017346 <mqtt_output_append_string+0x30>
  }
}
 8017364:	bf00      	nop
 8017366:	bf00      	nop
 8017368:	3718      	adds	r7, #24
 801736a:	46bd      	mov	sp, r7
 801736c:	bd80      	pop	{r7, pc}

0801736e <mqtt_output_append_fixed_header>:
 */

static void
mqtt_output_append_fixed_header(struct mqtt_ringbuf_t *rb, u8_t msg_type, u8_t fdup,
                                u8_t fqos, u8_t fretain, u16_t r_length)
{
 801736e:	b580      	push	{r7, lr}
 8017370:	b082      	sub	sp, #8
 8017372:	af00      	add	r7, sp, #0
 8017374:	6078      	str	r0, [r7, #4]
 8017376:	4608      	mov	r0, r1
 8017378:	4611      	mov	r1, r2
 801737a:	461a      	mov	r2, r3
 801737c:	4603      	mov	r3, r0
 801737e:	70fb      	strb	r3, [r7, #3]
 8017380:	460b      	mov	r3, r1
 8017382:	70bb      	strb	r3, [r7, #2]
 8017384:	4613      	mov	r3, r2
 8017386:	707b      	strb	r3, [r7, #1]
  /* Start with control byte */
  mqtt_output_append_u8(rb, (((msg_type & 0x0f) << 4) | ((fdup & 1) << 3) | ((fqos & 3) << 1) | (fretain & 1)));
 8017388:	78fb      	ldrb	r3, [r7, #3]
 801738a:	011b      	lsls	r3, r3, #4
 801738c:	b25a      	sxtb	r2, r3
 801738e:	78bb      	ldrb	r3, [r7, #2]
 8017390:	00db      	lsls	r3, r3, #3
 8017392:	b25b      	sxtb	r3, r3
 8017394:	f003 0308 	and.w	r3, r3, #8
 8017398:	b25b      	sxtb	r3, r3
 801739a:	4313      	orrs	r3, r2
 801739c:	b25a      	sxtb	r2, r3
 801739e:	787b      	ldrb	r3, [r7, #1]
 80173a0:	005b      	lsls	r3, r3, #1
 80173a2:	b25b      	sxtb	r3, r3
 80173a4:	f003 0306 	and.w	r3, r3, #6
 80173a8:	b25b      	sxtb	r3, r3
 80173aa:	4313      	orrs	r3, r2
 80173ac:	b25a      	sxtb	r2, r3
 80173ae:	f997 3010 	ldrsb.w	r3, [r7, #16]
 80173b2:	f003 0301 	and.w	r3, r3, #1
 80173b6:	b25b      	sxtb	r3, r3
 80173b8:	4313      	orrs	r3, r2
 80173ba:	b25b      	sxtb	r3, r3
 80173bc:	b2db      	uxtb	r3, r3
 80173be:	4619      	mov	r1, r3
 80173c0:	6878      	ldr	r0, [r7, #4]
 80173c2:	f7ff ff63 	bl	801728c <mqtt_output_append_u8>
  /* Encode remaining length field */
  do {
    mqtt_output_append_u8(rb, (r_length & 0x7f) | (r_length >= 128 ? 0x80 : 0));
 80173c6:	8abb      	ldrh	r3, [r7, #20]
 80173c8:	b25b      	sxtb	r3, r3
 80173ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80173ce:	b25b      	sxtb	r3, r3
 80173d0:	8aba      	ldrh	r2, [r7, #20]
 80173d2:	2a7f      	cmp	r2, #127	; 0x7f
 80173d4:	d902      	bls.n	80173dc <mqtt_output_append_fixed_header+0x6e>
 80173d6:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 80173da:	e000      	b.n	80173de <mqtt_output_append_fixed_header+0x70>
 80173dc:	2200      	movs	r2, #0
 80173de:	4313      	orrs	r3, r2
 80173e0:	b25b      	sxtb	r3, r3
 80173e2:	b2db      	uxtb	r3, r3
 80173e4:	4619      	mov	r1, r3
 80173e6:	6878      	ldr	r0, [r7, #4]
 80173e8:	f7ff ff50 	bl	801728c <mqtt_output_append_u8>
    r_length >>= 7;
 80173ec:	8abb      	ldrh	r3, [r7, #20]
 80173ee:	09db      	lsrs	r3, r3, #7
 80173f0:	82bb      	strh	r3, [r7, #20]
  } while (r_length > 0);
 80173f2:	8abb      	ldrh	r3, [r7, #20]
 80173f4:	2b00      	cmp	r3, #0
 80173f6:	d1e6      	bne.n	80173c6 <mqtt_output_append_fixed_header+0x58>
}
 80173f8:	bf00      	nop
 80173fa:	bf00      	nop
 80173fc:	3708      	adds	r7, #8
 80173fe:	46bd      	mov	sp, r7
 8017400:	bd80      	pop	{r7, pc}
	...

08017404 <mqtt_output_check_space>:
 * @param r_length Remaining length after fixed header
 * @return 1 if message will fit, 0 if not enough buffer space
 */
static u8_t
mqtt_output_check_space(struct mqtt_ringbuf_t *rb, u16_t r_length)
{
 8017404:	b590      	push	{r4, r7, lr}
 8017406:	b085      	sub	sp, #20
 8017408:	af00      	add	r7, sp, #0
 801740a:	6078      	str	r0, [r7, #4]
 801740c:	460b      	mov	r3, r1
 801740e:	807b      	strh	r3, [r7, #2]
  /* Start with length of type byte + remaining length */
  u16_t total_len = 1 + r_length;
 8017410:	887b      	ldrh	r3, [r7, #2]
 8017412:	3301      	adds	r3, #1
 8017414:	81fb      	strh	r3, [r7, #14]

  LWIP_ASSERT("mqtt_output_check_space: rb != NULL", rb != NULL);
 8017416:	687b      	ldr	r3, [r7, #4]
 8017418:	2b00      	cmp	r3, #0
 801741a:	d106      	bne.n	801742a <mqtt_output_check_space+0x26>
 801741c:	4b0f      	ldr	r3, [pc, #60]	; (801745c <mqtt_output_check_space+0x58>)
 801741e:	f240 2207 	movw	r2, #519	; 0x207
 8017422:	490f      	ldr	r1, [pc, #60]	; (8017460 <mqtt_output_check_space+0x5c>)
 8017424:	480f      	ldr	r0, [pc, #60]	; (8017464 <mqtt_output_check_space+0x60>)
 8017426:	f00f fa51 	bl	80268cc <iprintf>

  /* Calculate number of required bytes to contain the remaining bytes field and add to total*/
  do {
    total_len++;
 801742a:	89fb      	ldrh	r3, [r7, #14]
 801742c:	3301      	adds	r3, #1
 801742e:	81fb      	strh	r3, [r7, #14]
    r_length >>= 7;
 8017430:	887b      	ldrh	r3, [r7, #2]
 8017432:	09db      	lsrs	r3, r3, #7
 8017434:	807b      	strh	r3, [r7, #2]
  } while (r_length > 0);
 8017436:	887b      	ldrh	r3, [r7, #2]
 8017438:	2b00      	cmp	r3, #0
 801743a:	d1f6      	bne.n	801742a <mqtt_output_check_space+0x26>

  return (total_len <= mqtt_ringbuf_free(rb));
 801743c:	89fc      	ldrh	r4, [r7, #14]
 801743e:	6878      	ldr	r0, [r7, #4]
 8017440:	f7ff fcb6 	bl	8016db0 <mqtt_ringbuf_len>
 8017444:	4603      	mov	r3, r0
 8017446:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 801744a:	429c      	cmp	r4, r3
 801744c:	bfd4      	ite	le
 801744e:	2301      	movle	r3, #1
 8017450:	2300      	movgt	r3, #0
 8017452:	b2db      	uxtb	r3, r3
}
 8017454:	4618      	mov	r0, r3
 8017456:	3714      	adds	r7, #20
 8017458:	46bd      	mov	sp, r7
 801745a:	bd90      	pop	{r4, r7, pc}
 801745c:	0802c17c 	.word	0x0802c17c
 8017460:	0802c34c 	.word	0x0802c34c
 8017464:	0802c1f4 	.word	0x0802c1f4

08017468 <mqtt_close>:
 * @param client MQTT client
 * @param reason Reason for disconnection
 */
static void
mqtt_close(mqtt_client_t *client, mqtt_connection_status_t reason)
{
 8017468:	b580      	push	{r7, lr}
 801746a:	b084      	sub	sp, #16
 801746c:	af00      	add	r7, sp, #0
 801746e:	6078      	str	r0, [r7, #4]
 8017470:	460b      	mov	r3, r1
 8017472:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("mqtt_close: client != NULL", client != NULL);
 8017474:	687b      	ldr	r3, [r7, #4]
 8017476:	2b00      	cmp	r3, #0
 8017478:	d106      	bne.n	8017488 <mqtt_close+0x20>
 801747a:	4b27      	ldr	r3, [pc, #156]	; (8017518 <mqtt_close+0xb0>)
 801747c:	f240 221b 	movw	r2, #539	; 0x21b
 8017480:	4926      	ldr	r1, [pc, #152]	; (801751c <mqtt_close+0xb4>)
 8017482:	4827      	ldr	r0, [pc, #156]	; (8017520 <mqtt_close+0xb8>)
 8017484:	f00f fa22 	bl	80268cc <iprintf>

  /* Bring down TCP connection if not already done */
  if (client->conn != NULL) {
 8017488:	687b      	ldr	r3, [r7, #4]
 801748a:	68db      	ldr	r3, [r3, #12]
 801748c:	2b00      	cmp	r3, #0
 801748e:	d024      	beq.n	80174da <mqtt_close+0x72>
    err_t res;
    altcp_recv(client->conn, NULL);
 8017490:	687b      	ldr	r3, [r7, #4]
 8017492:	68db      	ldr	r3, [r3, #12]
 8017494:	2100      	movs	r1, #0
 8017496:	4618      	mov	r0, r3
 8017498:	f004 fd7e 	bl	801bf98 <tcp_recv>
    altcp_err(client->conn,  NULL);
 801749c:	687b      	ldr	r3, [r7, #4]
 801749e:	68db      	ldr	r3, [r3, #12]
 80174a0:	2100      	movs	r1, #0
 80174a2:	4618      	mov	r0, r3
 80174a4:	f004 fdbc 	bl	801c020 <tcp_err>
    altcp_sent(client->conn, NULL);
 80174a8:	687b      	ldr	r3, [r7, #4]
 80174aa:	68db      	ldr	r3, [r3, #12]
 80174ac:	2100      	movs	r1, #0
 80174ae:	4618      	mov	r0, r3
 80174b0:	f004 fd94 	bl	801bfdc <tcp_sent>
    res = altcp_close(client->conn);
 80174b4:	687b      	ldr	r3, [r7, #4]
 80174b6:	68db      	ldr	r3, [r3, #12]
 80174b8:	4618      	mov	r0, r3
 80174ba:	f003 fa9b 	bl	801a9f4 <tcp_close>
 80174be:	4603      	mov	r3, r0
 80174c0:	73fb      	strb	r3, [r7, #15]
    if (res != ERR_OK) {
 80174c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80174c6:	2b00      	cmp	r3, #0
 80174c8:	d004      	beq.n	80174d4 <mqtt_close+0x6c>
      altcp_abort(client->conn);
 80174ca:	687b      	ldr	r3, [r7, #4]
 80174cc:	68db      	ldr	r3, [r3, #12]
 80174ce:	4618      	mov	r0, r3
 80174d0:	f003 fb7a 	bl	801abc8 <tcp_abort>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_close: Close err=%s\n", lwip_strerr(res)));
    }
    client->conn = NULL;
 80174d4:	687b      	ldr	r3, [r7, #4]
 80174d6:	2200      	movs	r2, #0
 80174d8:	60da      	str	r2, [r3, #12]
  }

  /* Remove all pending requests */
  mqtt_clear_requests(&client->pend_req_queue);
 80174da:	687b      	ldr	r3, [r7, #4]
 80174dc:	3318      	adds	r3, #24
 80174de:	4618      	mov	r0, r3
 80174e0:	f7ff fe7c 	bl	80171dc <mqtt_clear_requests>
  /* Stop cyclic timer */
  sys_untimeout(mqtt_cyclic_timer, client);
 80174e4:	6879      	ldr	r1, [r7, #4]
 80174e6:	480f      	ldr	r0, [pc, #60]	; (8017524 <mqtt_close+0xbc>)
 80174e8:	f009 faee 	bl	8020ac8 <sys_untimeout>

  /* Notify upper layer of disconnection if changed state */
  if (client->conn_state != TCP_DISCONNECTED) {
 80174ec:	687b      	ldr	r3, [r7, #4]
 80174ee:	7a9b      	ldrb	r3, [r3, #10]
 80174f0:	2b00      	cmp	r3, #0
 80174f2:	d00d      	beq.n	8017510 <mqtt_close+0xa8>

    client->conn_state = TCP_DISCONNECTED;
 80174f4:	687b      	ldr	r3, [r7, #4]
 80174f6:	2200      	movs	r2, #0
 80174f8:	729a      	strb	r2, [r3, #10]
    if (client->connect_cb != NULL) {
 80174fa:	687b      	ldr	r3, [r7, #4]
 80174fc:	695b      	ldr	r3, [r3, #20]
 80174fe:	2b00      	cmp	r3, #0
 8017500:	d006      	beq.n	8017510 <mqtt_close+0xa8>
      client->connect_cb(client, client->connect_arg, reason);
 8017502:	687b      	ldr	r3, [r7, #4]
 8017504:	695b      	ldr	r3, [r3, #20]
 8017506:	687a      	ldr	r2, [r7, #4]
 8017508:	6911      	ldr	r1, [r2, #16]
 801750a:	887a      	ldrh	r2, [r7, #2]
 801750c:	6878      	ldr	r0, [r7, #4]
 801750e:	4798      	blx	r3
    }
  }
}
 8017510:	bf00      	nop
 8017512:	3710      	adds	r7, #16
 8017514:	46bd      	mov	sp, r7
 8017516:	bd80      	pop	{r7, pc}
 8017518:	0802c17c 	.word	0x0802c17c
 801751c:	0802c370 	.word	0x0802c370
 8017520:	0802c1f4 	.word	0x0802c1f4
 8017524:	08017529 	.word	0x08017529

08017528 <mqtt_cyclic_timer>:
 * Interval timer, called every MQTT_CYCLIC_TIMER_INTERVAL seconds in MQTT_CONNECTING and MQTT_CONNECTED states
 * @param arg MQTT client
 */
static void
mqtt_cyclic_timer(void *arg)
{
 8017528:	b580      	push	{r7, lr}
 801752a:	b086      	sub	sp, #24
 801752c:	af02      	add	r7, sp, #8
 801752e:	6078      	str	r0, [r7, #4]
  u8_t restart_timer = 1;
 8017530:	2301      	movs	r3, #1
 8017532:	73fb      	strb	r3, [r7, #15]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 8017534:	687b      	ldr	r3, [r7, #4]
 8017536:	60bb      	str	r3, [r7, #8]
  LWIP_ASSERT("mqtt_cyclic_timer: client != NULL", client != NULL);
 8017538:	68bb      	ldr	r3, [r7, #8]
 801753a:	2b00      	cmp	r3, #0
 801753c:	d106      	bne.n	801754c <mqtt_cyclic_timer+0x24>
 801753e:	4b43      	ldr	r3, [pc, #268]	; (801764c <mqtt_cyclic_timer+0x124>)
 8017540:	f44f 7211 	mov.w	r2, #580	; 0x244
 8017544:	4942      	ldr	r1, [pc, #264]	; (8017650 <mqtt_cyclic_timer+0x128>)
 8017546:	4843      	ldr	r0, [pc, #268]	; (8017654 <mqtt_cyclic_timer+0x12c>)
 8017548:	f00f f9c0 	bl	80268cc <iprintf>

  if (client->conn_state == MQTT_CONNECTING) {
 801754c:	68bb      	ldr	r3, [r7, #8]
 801754e:	7a9b      	ldrb	r3, [r3, #10]
 8017550:	2b02      	cmp	r3, #2
 8017552:	d115      	bne.n	8017580 <mqtt_cyclic_timer+0x58>
    client->cyclic_tick++;
 8017554:	68bb      	ldr	r3, [r7, #8]
 8017556:	881b      	ldrh	r3, [r3, #0]
 8017558:	3301      	adds	r3, #1
 801755a:	b29a      	uxth	r2, r3
 801755c:	68bb      	ldr	r3, [r7, #8]
 801755e:	801a      	strh	r2, [r3, #0]
    if ((client->cyclic_tick * MQTT_CYCLIC_TIMER_INTERVAL) >= MQTT_CONNECT_TIMOUT) {
 8017560:	68bb      	ldr	r3, [r7, #8]
 8017562:	881b      	ldrh	r3, [r3, #0]
 8017564:	461a      	mov	r2, r3
 8017566:	4613      	mov	r3, r2
 8017568:	009b      	lsls	r3, r3, #2
 801756a:	4413      	add	r3, r2
 801756c:	2b63      	cmp	r3, #99	; 0x63
 801756e:	dd5f      	ble.n	8017630 <mqtt_cyclic_timer+0x108>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_cyclic_timer: CONNECT attempt to server timed out\n"));
      /* Disconnect TCP */
      mqtt_close(client, MQTT_CONNECT_TIMEOUT);
 8017570:	f240 1101 	movw	r1, #257	; 0x101
 8017574:	68b8      	ldr	r0, [r7, #8]
 8017576:	f7ff ff77 	bl	8017468 <mqtt_close>
      restart_timer = 0;
 801757a:	2300      	movs	r3, #0
 801757c:	73fb      	strb	r3, [r7, #15]
 801757e:	e057      	b.n	8017630 <mqtt_cyclic_timer+0x108>
    }
  } else if (client->conn_state == MQTT_CONNECTED) {
 8017580:	68bb      	ldr	r3, [r7, #8]
 8017582:	7a9b      	ldrb	r3, [r3, #10]
 8017584:	2b03      	cmp	r3, #3
 8017586:	d151      	bne.n	801762c <mqtt_cyclic_timer+0x104>
    /* Handle timeout for pending requests */
    mqtt_request_time_elapsed(&client->pend_req_queue, MQTT_CYCLIC_TIMER_INTERVAL);
 8017588:	68bb      	ldr	r3, [r7, #8]
 801758a:	3318      	adds	r3, #24
 801758c:	2105      	movs	r1, #5
 801758e:	4618      	mov	r0, r3
 8017590:	f7ff fdd2 	bl	8017138 <mqtt_request_time_elapsed>

    /* keep_alive > 0 means keep alive functionality shall be used */
    if (client->keep_alive > 0) {
 8017594:	68bb      	ldr	r3, [r7, #8]
 8017596:	885b      	ldrh	r3, [r3, #2]
 8017598:	2b00      	cmp	r3, #0
 801759a:	d049      	beq.n	8017630 <mqtt_cyclic_timer+0x108>

      client->server_watchdog++;
 801759c:	68bb      	ldr	r3, [r7, #8]
 801759e:	889b      	ldrh	r3, [r3, #4]
 80175a0:	3301      	adds	r3, #1
 80175a2:	b29a      	uxth	r2, r3
 80175a4:	68bb      	ldr	r3, [r7, #8]
 80175a6:	809a      	strh	r2, [r3, #4]
      /* If reception from server has been idle for 1.5*keep_alive time, server is considered unresponsive */
      if ((client->server_watchdog * MQTT_CYCLIC_TIMER_INTERVAL) > (client->keep_alive + client->keep_alive / 2)) {
 80175a8:	68bb      	ldr	r3, [r7, #8]
 80175aa:	889b      	ldrh	r3, [r3, #4]
 80175ac:	461a      	mov	r2, r3
 80175ae:	4613      	mov	r3, r2
 80175b0:	009b      	lsls	r3, r3, #2
 80175b2:	441a      	add	r2, r3
 80175b4:	68bb      	ldr	r3, [r7, #8]
 80175b6:	885b      	ldrh	r3, [r3, #2]
 80175b8:	4619      	mov	r1, r3
 80175ba:	68bb      	ldr	r3, [r7, #8]
 80175bc:	885b      	ldrh	r3, [r3, #2]
 80175be:	085b      	lsrs	r3, r3, #1
 80175c0:	b29b      	uxth	r3, r3
 80175c2:	440b      	add	r3, r1
 80175c4:	429a      	cmp	r2, r3
 80175c6:	dd06      	ble.n	80175d6 <mqtt_cyclic_timer+0xae>
        LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_cyclic_timer: Server incoming keep-alive timeout\n"));
        mqtt_close(client, MQTT_CONNECT_TIMEOUT);
 80175c8:	f240 1101 	movw	r1, #257	; 0x101
 80175cc:	68b8      	ldr	r0, [r7, #8]
 80175ce:	f7ff ff4b 	bl	8017468 <mqtt_close>
        restart_timer = 0;
 80175d2:	2300      	movs	r3, #0
 80175d4:	73fb      	strb	r3, [r7, #15]
      }

      /* If time for a keep alive message to be sent, transmission has been idle for keep_alive time */
      if ((client->cyclic_tick * MQTT_CYCLIC_TIMER_INTERVAL) >= client->keep_alive) {
 80175d6:	68bb      	ldr	r3, [r7, #8]
 80175d8:	881b      	ldrh	r3, [r3, #0]
 80175da:	461a      	mov	r2, r3
 80175dc:	4613      	mov	r3, r2
 80175de:	009b      	lsls	r3, r3, #2
 80175e0:	4413      	add	r3, r2
 80175e2:	68ba      	ldr	r2, [r7, #8]
 80175e4:	8852      	ldrh	r2, [r2, #2]
 80175e6:	4293      	cmp	r3, r2
 80175e8:	db19      	blt.n	801761e <mqtt_cyclic_timer+0xf6>
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_cyclic_timer: Sending keep-alive message to server\n"));
        if (mqtt_output_check_space(&client->output, 0) != 0) {
 80175ea:	68bb      	ldr	r3, [r7, #8]
 80175ec:	f503 732b 	add.w	r3, r3, #684	; 0x2ac
 80175f0:	2100      	movs	r1, #0
 80175f2:	4618      	mov	r0, r3
 80175f4:	f7ff ff06 	bl	8017404 <mqtt_output_check_space>
 80175f8:	4603      	mov	r3, r0
 80175fa:	2b00      	cmp	r3, #0
 80175fc:	d018      	beq.n	8017630 <mqtt_cyclic_timer+0x108>
          mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_PINGREQ, 0, 0, 0, 0);
 80175fe:	68bb      	ldr	r3, [r7, #8]
 8017600:	f503 702b 	add.w	r0, r3, #684	; 0x2ac
 8017604:	2300      	movs	r3, #0
 8017606:	9301      	str	r3, [sp, #4]
 8017608:	2300      	movs	r3, #0
 801760a:	9300      	str	r3, [sp, #0]
 801760c:	2300      	movs	r3, #0
 801760e:	2200      	movs	r2, #0
 8017610:	210c      	movs	r1, #12
 8017612:	f7ff feac 	bl	801736e <mqtt_output_append_fixed_header>
          client->cyclic_tick = 0;
 8017616:	68bb      	ldr	r3, [r7, #8]
 8017618:	2200      	movs	r2, #0
 801761a:	801a      	strh	r2, [r3, #0]
 801761c:	e008      	b.n	8017630 <mqtt_cyclic_timer+0x108>
        }
      } else {
        client->cyclic_tick++;
 801761e:	68bb      	ldr	r3, [r7, #8]
 8017620:	881b      	ldrh	r3, [r3, #0]
 8017622:	3301      	adds	r3, #1
 8017624:	b29a      	uxth	r2, r3
 8017626:	68bb      	ldr	r3, [r7, #8]
 8017628:	801a      	strh	r2, [r3, #0]
 801762a:	e001      	b.n	8017630 <mqtt_cyclic_timer+0x108>
      }
    }
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_cyclic_timer: Timer should not be running in state %d\n", client->conn_state));
    restart_timer = 0;
 801762c:	2300      	movs	r3, #0
 801762e:	73fb      	strb	r3, [r7, #15]
  }
  if (restart_timer) {
 8017630:	7bfb      	ldrb	r3, [r7, #15]
 8017632:	2b00      	cmp	r3, #0
 8017634:	d005      	beq.n	8017642 <mqtt_cyclic_timer+0x11a>
    sys_timeout(MQTT_CYCLIC_TIMER_INTERVAL * 1000, mqtt_cyclic_timer, arg);
 8017636:	687a      	ldr	r2, [r7, #4]
 8017638:	4907      	ldr	r1, [pc, #28]	; (8017658 <mqtt_cyclic_timer+0x130>)
 801763a:	f241 3088 	movw	r0, #5000	; 0x1388
 801763e:	f009 fa1d 	bl	8020a7c <sys_timeout>
  }
}
 8017642:	bf00      	nop
 8017644:	3710      	adds	r7, #16
 8017646:	46bd      	mov	sp, r7
 8017648:	bd80      	pop	{r7, pc}
 801764a:	bf00      	nop
 801764c:	0802c17c 	.word	0x0802c17c
 8017650:	0802c38c 	.word	0x0802c38c
 8017654:	0802c1f4 	.word	0x0802c1f4
 8017658:	08017529 	.word	0x08017529

0801765c <pub_ack_rec_rel_response>:
 * @param qos QoS value
 * @return ERR_OK if successful, ERR_MEM if out of memory
 */
static err_t
pub_ack_rec_rel_response(mqtt_client_t *client, u8_t msg, u16_t pkt_id, u8_t qos)
{
 801765c:	b580      	push	{r7, lr}
 801765e:	b086      	sub	sp, #24
 8017660:	af02      	add	r7, sp, #8
 8017662:	6078      	str	r0, [r7, #4]
 8017664:	4608      	mov	r0, r1
 8017666:	4611      	mov	r1, r2
 8017668:	461a      	mov	r2, r3
 801766a:	4603      	mov	r3, r0
 801766c:	70fb      	strb	r3, [r7, #3]
 801766e:	460b      	mov	r3, r1
 8017670:	803b      	strh	r3, [r7, #0]
 8017672:	4613      	mov	r3, r2
 8017674:	70bb      	strb	r3, [r7, #2]
  err_t err = ERR_OK;
 8017676:	2300      	movs	r3, #0
 8017678:	73fb      	strb	r3, [r7, #15]
  if (mqtt_output_check_space(&client->output, 2)) {
 801767a:	687b      	ldr	r3, [r7, #4]
 801767c:	f503 732b 	add.w	r3, r3, #684	; 0x2ac
 8017680:	2102      	movs	r1, #2
 8017682:	4618      	mov	r0, r3
 8017684:	f7ff febe 	bl	8017404 <mqtt_output_check_space>
 8017688:	4603      	mov	r3, r0
 801768a:	2b00      	cmp	r3, #0
 801768c:	d01d      	beq.n	80176ca <pub_ack_rec_rel_response+0x6e>
    mqtt_output_append_fixed_header(&client->output, msg, 0, qos, 0, 2);
 801768e:	687b      	ldr	r3, [r7, #4]
 8017690:	f503 702b 	add.w	r0, r3, #684	; 0x2ac
 8017694:	78bb      	ldrb	r3, [r7, #2]
 8017696:	78f9      	ldrb	r1, [r7, #3]
 8017698:	2202      	movs	r2, #2
 801769a:	9201      	str	r2, [sp, #4]
 801769c:	2200      	movs	r2, #0
 801769e:	9200      	str	r2, [sp, #0]
 80176a0:	2200      	movs	r2, #0
 80176a2:	f7ff fe64 	bl	801736e <mqtt_output_append_fixed_header>
    mqtt_output_append_u16(&client->output, pkt_id);
 80176a6:	687b      	ldr	r3, [r7, #4]
 80176a8:	f503 732b 	add.w	r3, r3, #684	; 0x2ac
 80176ac:	883a      	ldrh	r2, [r7, #0]
 80176ae:	4611      	mov	r1, r2
 80176b0:	4618      	mov	r0, r3
 80176b2:	f7ff fdfa 	bl	80172aa <mqtt_output_append_u16>
    mqtt_output_send(&client->output, client->conn);
 80176b6:	687b      	ldr	r3, [r7, #4]
 80176b8:	f503 722b 	add.w	r2, r3, #684	; 0x2ac
 80176bc:	687b      	ldr	r3, [r7, #4]
 80176be:	68db      	ldr	r3, [r3, #12]
 80176c0:	4619      	mov	r1, r3
 80176c2:	4610      	mov	r0, r2
 80176c4:	f7ff fb90 	bl	8016de8 <mqtt_output_send>
 80176c8:	e001      	b.n	80176ce <pub_ack_rec_rel_response+0x72>
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("pub_ack_rec_rel_response: OOM creating response: %s with pkt_id: %d\n",
                                   mqtt_msg_type_to_str(msg), pkt_id));
    err = ERR_MEM;
 80176ca:	23ff      	movs	r3, #255	; 0xff
 80176cc:	73fb      	strb	r3, [r7, #15]
  }
  return err;
 80176ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80176d2:	4618      	mov	r0, r3
 80176d4:	3710      	adds	r7, #16
 80176d6:	46bd      	mov	sp, r7
 80176d8:	bd80      	pop	{r7, pc}

080176da <mqtt_incomming_suback>:
 * @param r Matching request
 * @param result Result code from server
 */
static void
mqtt_incomming_suback(struct mqtt_request_t *r, u8_t result)
{
 80176da:	b580      	push	{r7, lr}
 80176dc:	b082      	sub	sp, #8
 80176de:	af00      	add	r7, sp, #0
 80176e0:	6078      	str	r0, [r7, #4]
 80176e2:	460b      	mov	r3, r1
 80176e4:	70fb      	strb	r3, [r7, #3]
  if (r->cb != NULL) {
 80176e6:	687b      	ldr	r3, [r7, #4]
 80176e8:	685b      	ldr	r3, [r3, #4]
 80176ea:	2b00      	cmp	r3, #0
 80176ec:	d00c      	beq.n	8017708 <mqtt_incomming_suback+0x2e>
    r->cb(r->arg, result < 3 ? ERR_OK : ERR_ABRT);
 80176ee:	687b      	ldr	r3, [r7, #4]
 80176f0:	685b      	ldr	r3, [r3, #4]
 80176f2:	687a      	ldr	r2, [r7, #4]
 80176f4:	6890      	ldr	r0, [r2, #8]
 80176f6:	78fa      	ldrb	r2, [r7, #3]
 80176f8:	2a02      	cmp	r2, #2
 80176fa:	d801      	bhi.n	8017700 <mqtt_incomming_suback+0x26>
 80176fc:	2200      	movs	r2, #0
 80176fe:	e001      	b.n	8017704 <mqtt_incomming_suback+0x2a>
 8017700:	f06f 020c 	mvn.w	r2, #12
 8017704:	4611      	mov	r1, r2
 8017706:	4798      	blx	r3
  }
}
 8017708:	bf00      	nop
 801770a:	3708      	adds	r7, #8
 801770c:	46bd      	mov	sp, r7
 801770e:	bd80      	pop	{r7, pc}

08017710 <mqtt_message_received>:
 * @param length length received part
 * @param remaining_length Remaining length of complete message
 */
static mqtt_connection_status_t
mqtt_message_received(mqtt_client_t *client, u8_t fixed_hdr_idx, u16_t length, u32_t remaining_length)
{
 8017710:	b590      	push	{r4, r7, lr}
 8017712:	b08f      	sub	sp, #60	; 0x3c
 8017714:	af00      	add	r7, sp, #0
 8017716:	60f8      	str	r0, [r7, #12]
 8017718:	607b      	str	r3, [r7, #4]
 801771a:	460b      	mov	r3, r1
 801771c:	72fb      	strb	r3, [r7, #11]
 801771e:	4613      	mov	r3, r2
 8017720:	813b      	strh	r3, [r7, #8]
  mqtt_connection_status_t res = MQTT_CONNECT_ACCEPTED;
 8017722:	2300      	movs	r3, #0
 8017724:	86fb      	strh	r3, [r7, #54]	; 0x36

  u8_t *var_hdr_payload = client->rx_buffer + fixed_hdr_idx;
 8017726:	68fb      	ldr	r3, [r7, #12]
 8017728:	f503 720b 	add.w	r2, r3, #556	; 0x22c
 801772c:	7afb      	ldrb	r3, [r7, #11]
 801772e:	4413      	add	r3, r2
 8017730:	62fb      	str	r3, [r7, #44]	; 0x2c
  size_t var_hdr_payload_bufsize = sizeof(client->rx_buffer) - fixed_hdr_idx;
 8017732:	7afb      	ldrb	r3, [r7, #11]
 8017734:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8017738:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Control packet type */
  u8_t pkt_type = MQTT_CTL_PACKET_TYPE(client->rx_buffer[0]);
 801773a:	68fb      	ldr	r3, [r7, #12]
 801773c:	f893 322c 	ldrb.w	r3, [r3, #556]	; 0x22c
 8017740:	091b      	lsrs	r3, r3, #4
 8017742:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  u16_t pkt_id = 0;
 8017746:	2300      	movs	r3, #0
 8017748:	84bb      	strh	r3, [r7, #36]	; 0x24

  LWIP_ASSERT("client->msg_idx < MQTT_VAR_HEADER_BUFFER_LEN", client->msg_idx < MQTT_VAR_HEADER_BUFFER_LEN);
 801774a:	68fb      	ldr	r3, [r7, #12]
 801774c:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8017750:	2b7f      	cmp	r3, #127	; 0x7f
 8017752:	d906      	bls.n	8017762 <mqtt_message_received+0x52>
 8017754:	4b9a      	ldr	r3, [pc, #616]	; (80179c0 <mqtt_message_received+0x2b0>)
 8017756:	f240 22ab 	movw	r2, #683	; 0x2ab
 801775a:	499a      	ldr	r1, [pc, #616]	; (80179c4 <mqtt_message_received+0x2b4>)
 801775c:	489a      	ldr	r0, [pc, #616]	; (80179c8 <mqtt_message_received+0x2b8>)
 801775e:	f00f f8b5 	bl	80268cc <iprintf>
  LWIP_ASSERT("fixed_hdr_idx <= client->msg_idx", fixed_hdr_idx <= client->msg_idx);
 8017762:	7afa      	ldrb	r2, [r7, #11]
 8017764:	68fb      	ldr	r3, [r7, #12]
 8017766:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 801776a:	429a      	cmp	r2, r3
 801776c:	d906      	bls.n	801777c <mqtt_message_received+0x6c>
 801776e:	4b94      	ldr	r3, [pc, #592]	; (80179c0 <mqtt_message_received+0x2b0>)
 8017770:	f44f 722b 	mov.w	r2, #684	; 0x2ac
 8017774:	4995      	ldr	r1, [pc, #596]	; (80179cc <mqtt_message_received+0x2bc>)
 8017776:	4894      	ldr	r0, [pc, #592]	; (80179c8 <mqtt_message_received+0x2b8>)
 8017778:	f00f f8a8 	bl	80268cc <iprintf>
  LWIP_ERROR("buffer length mismatch", fixed_hdr_idx + length <= MQTT_VAR_HEADER_BUFFER_LEN,
 801777c:	7afa      	ldrb	r2, [r7, #11]
 801777e:	893b      	ldrh	r3, [r7, #8]
 8017780:	4413      	add	r3, r2
 8017782:	2b80      	cmp	r3, #128	; 0x80
 8017784:	dd09      	ble.n	801779a <mqtt_message_received+0x8a>
 8017786:	4b8e      	ldr	r3, [pc, #568]	; (80179c0 <mqtt_message_received+0x2b0>)
 8017788:	f240 22ad 	movw	r2, #685	; 0x2ad
 801778c:	4990      	ldr	r1, [pc, #576]	; (80179d0 <mqtt_message_received+0x2c0>)
 801778e:	488e      	ldr	r0, [pc, #568]	; (80179c8 <mqtt_message_received+0x2b8>)
 8017790:	f00f f89c 	bl	80268cc <iprintf>
 8017794:	f44f 7380 	mov.w	r3, #256	; 0x100
 8017798:	e175      	b.n	8017a86 <mqtt_message_received+0x376>
             return MQTT_CONNECT_DISCONNECTED);

  if (pkt_type == MQTT_MSG_TYPE_CONNACK) {
 801779a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801779e:	2b02      	cmp	r3, #2
 80177a0:	d123      	bne.n	80177ea <mqtt_message_received+0xda>
    if (client->conn_state == MQTT_CONNECTING) {
 80177a2:	68fb      	ldr	r3, [r7, #12]
 80177a4:	7a9b      	ldrb	r3, [r3, #10]
 80177a6:	2b02      	cmp	r3, #2
 80177a8:	f040 8158 	bne.w	8017a5c <mqtt_message_received+0x34c>
      if (length < 2) {
 80177ac:	893b      	ldrh	r3, [r7, #8]
 80177ae:	2b01      	cmp	r3, #1
 80177b0:	f240 8156 	bls.w	8017a60 <mqtt_message_received+0x350>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short CONNACK message\n"));
        goto out_disconnect;
      }
      /* Get result code from CONNACK */
      res = (mqtt_connection_status_t)var_hdr_payload[1];
 80177b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80177b6:	3301      	adds	r3, #1
 80177b8:	781b      	ldrb	r3, [r3, #0]
 80177ba:	86fb      	strh	r3, [r7, #54]	; 0x36
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: Connect response code %d\n", res));
      if (res == MQTT_CONNECT_ACCEPTED) {
 80177bc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80177be:	2b00      	cmp	r3, #0
 80177c0:	f040 814c 	bne.w	8017a5c <mqtt_message_received+0x34c>
        /* Reset cyclic_tick when changing to connected state */
        client->cyclic_tick = 0;
 80177c4:	68fb      	ldr	r3, [r7, #12]
 80177c6:	2200      	movs	r2, #0
 80177c8:	801a      	strh	r2, [r3, #0]
        client->conn_state = MQTT_CONNECTED;
 80177ca:	68fb      	ldr	r3, [r7, #12]
 80177cc:	2203      	movs	r2, #3
 80177ce:	729a      	strb	r2, [r3, #10]
        /* Notify upper layer */
        if (client->connect_cb != 0) {
 80177d0:	68fb      	ldr	r3, [r7, #12]
 80177d2:	695b      	ldr	r3, [r3, #20]
 80177d4:	2b00      	cmp	r3, #0
 80177d6:	f000 8141 	beq.w	8017a5c <mqtt_message_received+0x34c>
          client->connect_cb(client, client->connect_arg, res);
 80177da:	68fb      	ldr	r3, [r7, #12]
 80177dc:	695b      	ldr	r3, [r3, #20]
 80177de:	68fa      	ldr	r2, [r7, #12]
 80177e0:	6911      	ldr	r1, [r2, #16]
 80177e2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80177e4:	68f8      	ldr	r0, [r7, #12]
 80177e6:	4798      	blx	r3
 80177e8:	e138      	b.n	8017a5c <mqtt_message_received+0x34c>
        }
      }
    } else {
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Received CONNACK in connected state\n"));
    }
  } else if (pkt_type == MQTT_MSG_TYPE_PINGRESP) {
 80177ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80177ee:	2b0d      	cmp	r3, #13
 80177f0:	f000 8134 	beq.w	8017a5c <mqtt_message_received+0x34c>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ( "mqtt_message_received: Received PINGRESP from server\n"));

  } else if (pkt_type == MQTT_MSG_TYPE_PUBLISH) {
 80177f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80177f8:	2b03      	cmp	r3, #3
 80177fa:	f040 80c7 	bne.w	801798c <mqtt_message_received+0x27c>
    u16_t payload_offset = 0;
 80177fe:	2300      	movs	r3, #0
 8017800:	86bb      	strh	r3, [r7, #52]	; 0x34
    u16_t payload_length = length;
 8017802:	893b      	ldrh	r3, [r7, #8]
 8017804:	867b      	strh	r3, [r7, #50]	; 0x32
    u8_t qos = MQTT_CTL_PACKET_QOS(client->rx_buffer[0]);
 8017806:	68fb      	ldr	r3, [r7, #12]
 8017808:	f893 322c 	ldrb.w	r3, [r3, #556]	; 0x22c
 801780c:	105b      	asrs	r3, r3, #1
 801780e:	b2db      	uxtb	r3, r3
 8017810:	f003 0303 	and.w	r3, r3, #3
 8017814:	77fb      	strb	r3, [r7, #31]

    if (client->msg_idx <= MQTT_VAR_HEADER_BUFFER_LEN) {
 8017816:	68fb      	ldr	r3, [r7, #12]
 8017818:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 801781c:	2b80      	cmp	r3, #128	; 0x80
 801781e:	f200 8081 	bhi.w	8017924 <mqtt_message_received+0x214>
      /* Should have topic and pkt id*/
      u8_t *topic;
      u16_t after_topic;
      u8_t bkp;
      u16_t topic_len;
      u16_t qos_len = (qos ? 2U : 0U);
 8017822:	7ffb      	ldrb	r3, [r7, #31]
 8017824:	2b00      	cmp	r3, #0
 8017826:	d001      	beq.n	801782c <mqtt_message_received+0x11c>
 8017828:	2302      	movs	r3, #2
 801782a:	e000      	b.n	801782e <mqtt_message_received+0x11e>
 801782c:	2300      	movs	r3, #0
 801782e:	83bb      	strh	r3, [r7, #28]
      if (length < 2 + qos_len) {
 8017830:	8bbb      	ldrh	r3, [r7, #28]
 8017832:	1c5a      	adds	r2, r3, #1
 8017834:	893b      	ldrh	r3, [r7, #8]
 8017836:	429a      	cmp	r2, r3
 8017838:	f280 8114 	bge.w	8017a64 <mqtt_message_received+0x354>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet\n"));
        goto out_disconnect;
      }
      topic_len = var_hdr_payload[0];
 801783c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801783e:	781b      	ldrb	r3, [r3, #0]
 8017840:	837b      	strh	r3, [r7, #26]
      topic_len = (topic_len << 8) + (u16_t)(var_hdr_payload[1]);
 8017842:	8b7b      	ldrh	r3, [r7, #26]
 8017844:	021b      	lsls	r3, r3, #8
 8017846:	b29a      	uxth	r2, r3
 8017848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801784a:	3301      	adds	r3, #1
 801784c:	781b      	ldrb	r3, [r3, #0]
 801784e:	b29b      	uxth	r3, r3
 8017850:	4413      	add	r3, r2
 8017852:	837b      	strh	r3, [r7, #26]
      if ((topic_len > length - (2 + qos_len)) ||
 8017854:	8b7a      	ldrh	r2, [r7, #26]
 8017856:	8939      	ldrh	r1, [r7, #8]
 8017858:	8bbb      	ldrh	r3, [r7, #28]
 801785a:	3302      	adds	r3, #2
 801785c:	1acb      	subs	r3, r1, r3
 801785e:	429a      	cmp	r2, r3
 8017860:	f300 8102 	bgt.w	8017a68 <mqtt_message_received+0x358>
          (topic_len > var_hdr_payload_bufsize - (2 + qos_len))) {
 8017864:	8b7a      	ldrh	r2, [r7, #26]
 8017866:	8bbb      	ldrh	r3, [r7, #28]
 8017868:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801786a:	1acb      	subs	r3, r1, r3
 801786c:	3b02      	subs	r3, #2
      if ((topic_len > length - (2 + qos_len)) ||
 801786e:	429a      	cmp	r2, r3
 8017870:	f200 80fa 	bhi.w	8017a68 <mqtt_message_received+0x358>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet (topic)\n"));
        goto out_disconnect;
      }

      topic = var_hdr_payload + 2;
 8017874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017876:	3302      	adds	r3, #2
 8017878:	617b      	str	r3, [r7, #20]
      after_topic = 2 + topic_len;
 801787a:	8b7b      	ldrh	r3, [r7, #26]
 801787c:	3302      	adds	r3, #2
 801787e:	863b      	strh	r3, [r7, #48]	; 0x30
      /* Check buffer length, add one byte even for QoS 0 so that zero termination will fit */
      if ((after_topic + (qos ? 2U : 1U)) > var_hdr_payload_bufsize) {
 8017880:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8017882:	7ffa      	ldrb	r2, [r7, #31]
 8017884:	2a00      	cmp	r2, #0
 8017886:	d001      	beq.n	801788c <mqtt_message_received+0x17c>
 8017888:	2202      	movs	r2, #2
 801788a:	e000      	b.n	801788e <mqtt_message_received+0x17e>
 801788c:	2201      	movs	r2, #1
 801788e:	4413      	add	r3, r2
 8017890:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017892:	429a      	cmp	r2, r3
 8017894:	f0c0 80ea 	bcc.w	8017a6c <mqtt_message_received+0x35c>
        LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Receive buffer can not fit topic + pkt_id\n"));
        goto out_disconnect;
      }

      /* id for QoS 1 and 2 */
      if (qos > 0) {
 8017898:	7ffb      	ldrb	r3, [r7, #31]
 801789a:	2b00      	cmp	r3, #0
 801789c:	d01a      	beq.n	80178d4 <mqtt_message_received+0x1c4>
        if (length < after_topic + 2U) {
 801789e:	893a      	ldrh	r2, [r7, #8]
 80178a0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80178a2:	3302      	adds	r3, #2
 80178a4:	429a      	cmp	r2, r3
 80178a6:	f0c0 80e3 	bcc.w	8017a70 <mqtt_message_received+0x360>
          LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet (after_topic)\n"));
          goto out_disconnect;
        }
        client->inpub_pkt_id = ((u16_t)var_hdr_payload[after_topic] << 8) + (u16_t)var_hdr_payload[after_topic + 1];
 80178aa:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80178ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80178ae:	4413      	add	r3, r2
 80178b0:	781b      	ldrb	r3, [r3, #0]
 80178b2:	b29b      	uxth	r3, r3
 80178b4:	021b      	lsls	r3, r3, #8
 80178b6:	b29a      	uxth	r2, r3
 80178b8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80178ba:	3301      	adds	r3, #1
 80178bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80178be:	440b      	add	r3, r1
 80178c0:	781b      	ldrb	r3, [r3, #0]
 80178c2:	b29b      	uxth	r3, r3
 80178c4:	4413      	add	r3, r2
 80178c6:	b29a      	uxth	r2, r3
 80178c8:	68fb      	ldr	r3, [r7, #12]
 80178ca:	811a      	strh	r2, [r3, #8]
        after_topic += 2;
 80178cc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80178ce:	3302      	adds	r3, #2
 80178d0:	863b      	strh	r3, [r7, #48]	; 0x30
 80178d2:	e002      	b.n	80178da <mqtt_message_received+0x1ca>
      } else {
        client->inpub_pkt_id = 0;
 80178d4:	68fb      	ldr	r3, [r7, #12]
 80178d6:	2200      	movs	r2, #0
 80178d8:	811a      	strh	r2, [r3, #8]
      }
      /* Take backup of byte after topic */
      bkp = topic[topic_len];
 80178da:	8b7b      	ldrh	r3, [r7, #26]
 80178dc:	697a      	ldr	r2, [r7, #20]
 80178de:	4413      	add	r3, r2
 80178e0:	781b      	ldrb	r3, [r3, #0]
 80178e2:	74fb      	strb	r3, [r7, #19]
      /* Zero terminate string */
      topic[topic_len] = 0;
 80178e4:	8b7b      	ldrh	r3, [r7, #26]
 80178e6:	697a      	ldr	r2, [r7, #20]
 80178e8:	4413      	add	r3, r2
 80178ea:	2200      	movs	r2, #0
 80178ec:	701a      	strb	r2, [r3, #0]
      /* Payload data remaining in receive buffer */
      payload_length = length - after_topic;
 80178ee:	893a      	ldrh	r2, [r7, #8]
 80178f0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80178f2:	1ad3      	subs	r3, r2, r3
 80178f4:	867b      	strh	r3, [r7, #50]	; 0x32
      payload_offset = after_topic;
 80178f6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80178f8:	86bb      	strh	r3, [r7, #52]	; 0x34

      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_incomming_publish: Received message with QoS %d at topic: %s, payload length %"U32_F"\n",
                                     qos, topic, remaining_length + payload_length));
      if (client->pub_cb != NULL) {
 80178fa:	68fb      	ldr	r3, [r7, #12]
 80178fc:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8017900:	2b00      	cmp	r3, #0
 8017902:	d00a      	beq.n	801791a <mqtt_message_received+0x20a>
        client->pub_cb(client->inpub_arg, (const char *)topic, remaining_length + payload_length);
 8017904:	68fb      	ldr	r3, [r7, #12]
 8017906:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 801790a:	68fa      	ldr	r2, [r7, #12]
 801790c:	f8d2 021c 	ldr.w	r0, [r2, #540]	; 0x21c
 8017910:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 8017912:	687a      	ldr	r2, [r7, #4]
 8017914:	440a      	add	r2, r1
 8017916:	6979      	ldr	r1, [r7, #20]
 8017918:	4798      	blx	r3
      }
      /* Restore byte after topic */
      topic[topic_len] = bkp;
 801791a:	8b7b      	ldrh	r3, [r7, #26]
 801791c:	697a      	ldr	r2, [r7, #20]
 801791e:	4413      	add	r3, r2
 8017920:	7cfa      	ldrb	r2, [r7, #19]
 8017922:	701a      	strb	r2, [r3, #0]
    }
    if (payload_length > 0 || remaining_length == 0) {
 8017924:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8017926:	2b00      	cmp	r3, #0
 8017928:	d103      	bne.n	8017932 <mqtt_message_received+0x222>
 801792a:	687b      	ldr	r3, [r7, #4]
 801792c:	2b00      	cmp	r3, #0
 801792e:	f040 8095 	bne.w	8017a5c <mqtt_message_received+0x34c>
      if (length < (size_t)(payload_offset + payload_length)) {
 8017932:	893b      	ldrh	r3, [r7, #8]
 8017934:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 8017936:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8017938:	440a      	add	r2, r1
 801793a:	4293      	cmp	r3, r2
 801793c:	f0c0 809a 	bcc.w	8017a74 <mqtt_message_received+0x364>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short packet (payload)\n"));
        goto out_disconnect;
      }
      client->data_cb(client->inpub_arg, var_hdr_payload + payload_offset, payload_length, remaining_length == 0 ? MQTT_DATA_FLAG_LAST : 0);
 8017940:	68fb      	ldr	r3, [r7, #12]
 8017942:	f8d3 4220 	ldr.w	r4, [r3, #544]	; 0x220
 8017946:	68fb      	ldr	r3, [r7, #12]
 8017948:	f8d3 021c 	ldr.w	r0, [r3, #540]	; 0x21c
 801794c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801794e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017950:	18d1      	adds	r1, r2, r3
 8017952:	687b      	ldr	r3, [r7, #4]
 8017954:	2b00      	cmp	r3, #0
 8017956:	bf0c      	ite	eq
 8017958:	2301      	moveq	r3, #1
 801795a:	2300      	movne	r3, #0
 801795c:	b2db      	uxtb	r3, r3
 801795e:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8017960:	47a0      	blx	r4
      /* Reply if QoS > 0 */
      if (remaining_length == 0 && qos > 0) {
 8017962:	687b      	ldr	r3, [r7, #4]
 8017964:	2b00      	cmp	r3, #0
 8017966:	d179      	bne.n	8017a5c <mqtt_message_received+0x34c>
 8017968:	7ffb      	ldrb	r3, [r7, #31]
 801796a:	2b00      	cmp	r3, #0
 801796c:	d076      	beq.n	8017a5c <mqtt_message_received+0x34c>
        /* Send PUBACK for QoS 1 or PUBREC for QoS 2 */
        u8_t resp_msg = (qos == 1) ? MQTT_MSG_TYPE_PUBACK : MQTT_MSG_TYPE_PUBREC;
 801796e:	7ffb      	ldrb	r3, [r7, #31]
 8017970:	2b01      	cmp	r3, #1
 8017972:	d101      	bne.n	8017978 <mqtt_message_received+0x268>
 8017974:	2304      	movs	r3, #4
 8017976:	e000      	b.n	801797a <mqtt_message_received+0x26a>
 8017978:	2305      	movs	r3, #5
 801797a:	74bb      	strb	r3, [r7, #18]
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_incomming_publish: Sending publish response: %s with pkt_id: %d\n",
                                       mqtt_msg_type_to_str(resp_msg), client->inpub_pkt_id));
        pub_ack_rec_rel_response(client, resp_msg, client->inpub_pkt_id, 0);
 801797c:	68fb      	ldr	r3, [r7, #12]
 801797e:	891a      	ldrh	r2, [r3, #8]
 8017980:	7cb9      	ldrb	r1, [r7, #18]
 8017982:	2300      	movs	r3, #0
 8017984:	68f8      	ldr	r0, [r7, #12]
 8017986:	f7ff fe69 	bl	801765c <pub_ack_rec_rel_response>
 801798a:	e067      	b.n	8017a5c <mqtt_message_received+0x34c>
      }
    }
  } else {
    /* Get packet identifier */
    pkt_id = (u16_t)var_hdr_payload[0] << 8;
 801798c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801798e:	781b      	ldrb	r3, [r3, #0]
 8017990:	b29b      	uxth	r3, r3
 8017992:	021b      	lsls	r3, r3, #8
 8017994:	84bb      	strh	r3, [r7, #36]	; 0x24
    pkt_id |= (u16_t)var_hdr_payload[1];
 8017996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017998:	3301      	adds	r3, #1
 801799a:	781b      	ldrb	r3, [r3, #0]
 801799c:	b29a      	uxth	r2, r3
 801799e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80179a0:	4313      	orrs	r3, r2
 80179a2:	84bb      	strh	r3, [r7, #36]	; 0x24
    if (pkt_id == 0) {
 80179a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80179a6:	2b00      	cmp	r3, #0
 80179a8:	d066      	beq.n	8017a78 <mqtt_message_received+0x368>
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Got message with illegal packet identifier: 0\n"));
      goto out_disconnect;
    }
    if (pkt_type == MQTT_MSG_TYPE_PUBREC) {
 80179aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80179ae:	2b05      	cmp	r3, #5
 80179b0:	d110      	bne.n	80179d4 <mqtt_message_received+0x2c4>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: PUBREC, sending PUBREL with pkt_id: %d\n", pkt_id));
      pub_ack_rec_rel_response(client, MQTT_MSG_TYPE_PUBREL, pkt_id, 1);
 80179b2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80179b4:	2301      	movs	r3, #1
 80179b6:	2106      	movs	r1, #6
 80179b8:	68f8      	ldr	r0, [r7, #12]
 80179ba:	f7ff fe4f 	bl	801765c <pub_ack_rec_rel_response>
 80179be:	e04d      	b.n	8017a5c <mqtt_message_received+0x34c>
 80179c0:	0802c17c 	.word	0x0802c17c
 80179c4:	0802c3b0 	.word	0x0802c3b0
 80179c8:	0802c1f4 	.word	0x0802c1f4
 80179cc:	0802c3e0 	.word	0x0802c3e0
 80179d0:	0802c404 	.word	0x0802c404

    } else if (pkt_type == MQTT_MSG_TYPE_PUBREL) {
 80179d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80179d8:	2b06      	cmp	r3, #6
 80179da:	d106      	bne.n	80179ea <mqtt_message_received+0x2da>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: PUBREL, sending PUBCOMP response with pkt_id: %d\n", pkt_id));
      pub_ack_rec_rel_response(client, MQTT_MSG_TYPE_PUBCOMP, pkt_id, 0);
 80179dc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80179de:	2300      	movs	r3, #0
 80179e0:	2107      	movs	r1, #7
 80179e2:	68f8      	ldr	r0, [r7, #12]
 80179e4:	f7ff fe3a 	bl	801765c <pub_ack_rec_rel_response>
 80179e8:	e038      	b.n	8017a5c <mqtt_message_received+0x34c>

    } else if (pkt_type == MQTT_MSG_TYPE_SUBACK || pkt_type == MQTT_MSG_TYPE_UNSUBACK ||
 80179ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80179ee:	2b09      	cmp	r3, #9
 80179f0:	d00b      	beq.n	8017a0a <mqtt_message_received+0x2fa>
 80179f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80179f6:	2b0b      	cmp	r3, #11
 80179f8:	d007      	beq.n	8017a0a <mqtt_message_received+0x2fa>
 80179fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80179fe:	2b07      	cmp	r3, #7
 8017a00:	d003      	beq.n	8017a0a <mqtt_message_received+0x2fa>
               pkt_type == MQTT_MSG_TYPE_PUBCOMP || pkt_type == MQTT_MSG_TYPE_PUBACK) {
 8017a02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017a06:	2b04      	cmp	r3, #4
 8017a08:	d138      	bne.n	8017a7c <mqtt_message_received+0x36c>
      struct mqtt_request_t *r = mqtt_take_request(&client->pend_req_queue, pkt_id);
 8017a0a:	68fb      	ldr	r3, [r7, #12]
 8017a0c:	3318      	adds	r3, #24
 8017a0e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017a10:	4611      	mov	r1, r2
 8017a12:	4618      	mov	r0, r3
 8017a14:	f7ff fb3e 	bl	8017094 <mqtt_take_request>
 8017a18:	6238      	str	r0, [r7, #32]
      if (r != NULL) {
 8017a1a:	6a3b      	ldr	r3, [r7, #32]
 8017a1c:	2b00      	cmp	r3, #0
 8017a1e:	d01c      	beq.n	8017a5a <mqtt_message_received+0x34a>
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: %s response with id %d\n", mqtt_msg_type_to_str(pkt_type), pkt_id));
        if (pkt_type == MQTT_MSG_TYPE_SUBACK) {
 8017a20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017a24:	2b09      	cmp	r3, #9
 8017a26:	d10a      	bne.n	8017a3e <mqtt_message_received+0x32e>
          if (length < 3) {
 8017a28:	893b      	ldrh	r3, [r7, #8]
 8017a2a:	2b02      	cmp	r3, #2
 8017a2c:	d928      	bls.n	8017a80 <mqtt_message_received+0x370>
            LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: To small SUBACK packet\n"));
            goto out_disconnect;
          } else {
            mqtt_incomming_suback(r, var_hdr_payload[2]);
 8017a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a30:	3302      	adds	r3, #2
 8017a32:	781b      	ldrb	r3, [r3, #0]
 8017a34:	4619      	mov	r1, r3
 8017a36:	6a38      	ldr	r0, [r7, #32]
 8017a38:	f7ff fe4f 	bl	80176da <mqtt_incomming_suback>
 8017a3c:	e00a      	b.n	8017a54 <mqtt_message_received+0x344>
          }
        } else if (r->cb != NULL) {
 8017a3e:	6a3b      	ldr	r3, [r7, #32]
 8017a40:	685b      	ldr	r3, [r3, #4]
 8017a42:	2b00      	cmp	r3, #0
 8017a44:	d006      	beq.n	8017a54 <mqtt_message_received+0x344>
          r->cb(r->arg, ERR_OK);
 8017a46:	6a3b      	ldr	r3, [r7, #32]
 8017a48:	685b      	ldr	r3, [r3, #4]
 8017a4a:	6a3a      	ldr	r2, [r7, #32]
 8017a4c:	6892      	ldr	r2, [r2, #8]
 8017a4e:	2100      	movs	r1, #0
 8017a50:	4610      	mov	r0, r2
 8017a52:	4798      	blx	r3
        }
        mqtt_delete_request(r);
 8017a54:	6a38      	ldr	r0, [r7, #32]
 8017a56:	f7ff fb0d 	bl	8017074 <mqtt_delete_request>
               pkt_type == MQTT_MSG_TYPE_PUBCOMP || pkt_type == MQTT_MSG_TYPE_PUBACK) {
 8017a5a:	bf00      	nop
    } else {
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ( "mqtt_message_received: Received unknown message type: %d\n", pkt_type));
      goto out_disconnect;
    }
  }
  return res;
 8017a5c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8017a5e:	e012      	b.n	8017a86 <mqtt_message_received+0x376>
        goto out_disconnect;
 8017a60:	bf00      	nop
 8017a62:	e00e      	b.n	8017a82 <mqtt_message_received+0x372>
        goto out_disconnect;
 8017a64:	bf00      	nop
 8017a66:	e00c      	b.n	8017a82 <mqtt_message_received+0x372>
        goto out_disconnect;
 8017a68:	bf00      	nop
 8017a6a:	e00a      	b.n	8017a82 <mqtt_message_received+0x372>
        goto out_disconnect;
 8017a6c:	bf00      	nop
 8017a6e:	e008      	b.n	8017a82 <mqtt_message_received+0x372>
          goto out_disconnect;
 8017a70:	bf00      	nop
 8017a72:	e006      	b.n	8017a82 <mqtt_message_received+0x372>
        goto out_disconnect;
 8017a74:	bf00      	nop
 8017a76:	e004      	b.n	8017a82 <mqtt_message_received+0x372>
      goto out_disconnect;
 8017a78:	bf00      	nop
 8017a7a:	e002      	b.n	8017a82 <mqtt_message_received+0x372>
      goto out_disconnect;
 8017a7c:	bf00      	nop
 8017a7e:	e000      	b.n	8017a82 <mqtt_message_received+0x372>
            goto out_disconnect;
 8017a80:	bf00      	nop
out_disconnect:
  return MQTT_CONNECT_DISCONNECTED;
 8017a82:	f44f 7380 	mov.w	r3, #256	; 0x100
}
 8017a86:	4618      	mov	r0, r3
 8017a88:	373c      	adds	r7, #60	; 0x3c
 8017a8a:	46bd      	mov	sp, r7
 8017a8c:	bd90      	pop	{r4, r7, pc}
 8017a8e:	bf00      	nop

08017a90 <mqtt_parse_incoming>:
 * @param p PBUF chain of received data
 * @return Connection status
 */
static mqtt_connection_status_t
mqtt_parse_incoming(mqtt_client_t *client, struct pbuf *p)
{
 8017a90:	b580      	push	{r7, lr}
 8017a92:	b088      	sub	sp, #32
 8017a94:	af00      	add	r7, sp, #0
 8017a96:	6078      	str	r0, [r7, #4]
 8017a98:	6039      	str	r1, [r7, #0]
  u16_t in_offset = 0;
 8017a9a:	2300      	movs	r3, #0
 8017a9c:	83fb      	strh	r3, [r7, #30]
  u32_t msg_rem_len = 0;
 8017a9e:	2300      	movs	r3, #0
 8017aa0:	61bb      	str	r3, [r7, #24]
  u8_t fixed_hdr_idx = 0;
 8017aa2:	2300      	movs	r3, #0
 8017aa4:	75fb      	strb	r3, [r7, #23]
  u8_t b = 0;
 8017aa6:	2300      	movs	r3, #0
 8017aa8:	75bb      	strb	r3, [r7, #22]

  while (p->tot_len > in_offset) {
 8017aaa:	e0c6      	b.n	8017c3a <mqtt_parse_incoming+0x1aa>
    /* We ALWAYS parse the header here first. Even if the header was not
       included in this segment, we re-parse it here by buffering it in
       client->rx_buffer. client->msg_idx keeps track of this. */
    if ((fixed_hdr_idx < 2) || ((b & 0x80) != 0)) {
 8017aac:	7dfb      	ldrb	r3, [r7, #23]
 8017aae:	2b01      	cmp	r3, #1
 8017ab0:	d903      	bls.n	8017aba <mqtt_parse_incoming+0x2a>
 8017ab2:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8017ab6:	2b00      	cmp	r3, #0
 8017ab8:	da53      	bge.n	8017b62 <mqtt_parse_incoming+0xd2>

      if (fixed_hdr_idx < client->msg_idx) {
 8017aba:	7dfa      	ldrb	r2, [r7, #23]
 8017abc:	687b      	ldr	r3, [r7, #4]
 8017abe:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8017ac2:	429a      	cmp	r2, r3
 8017ac4:	d206      	bcs.n	8017ad4 <mqtt_parse_incoming+0x44>
        /* parse header from old pbuf (buffered in client->rx_buffer) */
        b = client->rx_buffer[fixed_hdr_idx];
 8017ac6:	7dfb      	ldrb	r3, [r7, #23]
 8017ac8:	687a      	ldr	r2, [r7, #4]
 8017aca:	4413      	add	r3, r2
 8017acc:	f893 322c 	ldrb.w	r3, [r3, #556]	; 0x22c
 8017ad0:	75bb      	strb	r3, [r7, #22]
 8017ad2:	e014      	b.n	8017afe <mqtt_parse_incoming+0x6e>
      } else {
        /* parse header from this pbuf and save it in client->rx_buffer in case
           it comes in segmented */
        b = pbuf_get_at(p, in_offset++);
 8017ad4:	8bfb      	ldrh	r3, [r7, #30]
 8017ad6:	1c5a      	adds	r2, r3, #1
 8017ad8:	83fa      	strh	r2, [r7, #30]
 8017ada:	4619      	mov	r1, r3
 8017adc:	6838      	ldr	r0, [r7, #0]
 8017ade:	f002 fd3f 	bl	801a560 <pbuf_get_at>
 8017ae2:	4603      	mov	r3, r0
 8017ae4:	75bb      	strb	r3, [r7, #22]
        client->rx_buffer[client->msg_idx++] = b;
 8017ae6:	687b      	ldr	r3, [r7, #4]
 8017ae8:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8017aec:	1c59      	adds	r1, r3, #1
 8017aee:	687a      	ldr	r2, [r7, #4]
 8017af0:	f8c2 1228 	str.w	r1, [r2, #552]	; 0x228
 8017af4:	687a      	ldr	r2, [r7, #4]
 8017af6:	4413      	add	r3, r2
 8017af8:	7dba      	ldrb	r2, [r7, #22]
 8017afa:	f883 222c 	strb.w	r2, [r3, #556]	; 0x22c
      }
      fixed_hdr_idx++;
 8017afe:	7dfb      	ldrb	r3, [r7, #23]
 8017b00:	3301      	adds	r3, #1
 8017b02:	75fb      	strb	r3, [r7, #23]

      if (fixed_hdr_idx >= 2) {
 8017b04:	7dfb      	ldrb	r3, [r7, #23]
 8017b06:	2b01      	cmp	r3, #1
 8017b08:	f240 8097 	bls.w	8017c3a <mqtt_parse_incoming+0x1aa>
        /* fixed header contains at least 2 bytes but can contain more, depending on
           'remaining length'. All bytes but the last of this have 0x80 set to
           indicate more bytes are coming. */
        msg_rem_len |= (u32_t)(b & 0x7f) << ((fixed_hdr_idx - 2) * 7);
 8017b0c:	7dbb      	ldrb	r3, [r7, #22]
 8017b0e:	f003 017f 	and.w	r1, r3, #127	; 0x7f
 8017b12:	7dfb      	ldrb	r3, [r7, #23]
 8017b14:	1e9a      	subs	r2, r3, #2
 8017b16:	4613      	mov	r3, r2
 8017b18:	00db      	lsls	r3, r3, #3
 8017b1a:	1a9b      	subs	r3, r3, r2
 8017b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8017b20:	69ba      	ldr	r2, [r7, #24]
 8017b22:	4313      	orrs	r3, r2
 8017b24:	61bb      	str	r3, [r7, #24]
        if ((b & 0x80) == 0) {
 8017b26:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8017b2a:	2b00      	cmp	r3, #0
 8017b2c:	f2c0 8085 	blt.w	8017c3a <mqtt_parse_incoming+0x1aa>
          /* fixed header is done */
          LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_parse_incoming: Remaining length after fixed header: %"U32_F"\n", msg_rem_len));
          if (msg_rem_len == 0) {
 8017b30:	69bb      	ldr	r3, [r7, #24]
 8017b32:	2b00      	cmp	r3, #0
 8017b34:	d10c      	bne.n	8017b50 <mqtt_parse_incoming+0xc0>
            /* Complete message with no extra headers of payload received */
            mqtt_message_received(client, fixed_hdr_idx, 0, 0);
 8017b36:	7df9      	ldrb	r1, [r7, #23]
 8017b38:	2300      	movs	r3, #0
 8017b3a:	2200      	movs	r2, #0
 8017b3c:	6878      	ldr	r0, [r7, #4]
 8017b3e:	f7ff fde7 	bl	8017710 <mqtt_message_received>
            client->msg_idx = 0;
 8017b42:	687b      	ldr	r3, [r7, #4]
 8017b44:	2200      	movs	r2, #0
 8017b46:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
            fixed_hdr_idx = 0;
 8017b4a:	2300      	movs	r3, #0
 8017b4c:	75fb      	strb	r3, [r7, #23]
 8017b4e:	e074      	b.n	8017c3a <mqtt_parse_incoming+0x1aa>
          } else {
            /* Bytes remaining in message (changes remaining length if this is
               not the first segment of this message) */
            msg_rem_len = (msg_rem_len + fixed_hdr_idx) - client->msg_idx;
 8017b50:	7dfa      	ldrb	r2, [r7, #23]
 8017b52:	69bb      	ldr	r3, [r7, #24]
 8017b54:	441a      	add	r2, r3
 8017b56:	687b      	ldr	r3, [r7, #4]
 8017b58:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8017b5c:	1ad3      	subs	r3, r2, r3
 8017b5e:	61bb      	str	r3, [r7, #24]
      if (fixed_hdr_idx >= 2) {
 8017b60:	e06b      	b.n	8017c3a <mqtt_parse_incoming+0x1aa>
      }
    } else {
      /* Fixed header has been parsed, parse variable header */
      u16_t cpy_len, cpy_start, buffer_space;

      cpy_start = (client->msg_idx - fixed_hdr_idx) % (MQTT_VAR_HEADER_BUFFER_LEN - fixed_hdr_idx) + fixed_hdr_idx;
 8017b62:	687b      	ldr	r3, [r7, #4]
 8017b64:	f8d3 2228 	ldr.w	r2, [r3, #552]	; 0x228
 8017b68:	7dfb      	ldrb	r3, [r7, #23]
 8017b6a:	1ad3      	subs	r3, r2, r3
 8017b6c:	7dfa      	ldrb	r2, [r7, #23]
 8017b6e:	f1c2 0280 	rsb	r2, r2, #128	; 0x80
 8017b72:	fbb3 f1f2 	udiv	r1, r3, r2
 8017b76:	fb01 f202 	mul.w	r2, r1, r2
 8017b7a:	1a9b      	subs	r3, r3, r2
 8017b7c:	b29a      	uxth	r2, r3
 8017b7e:	7dfb      	ldrb	r3, [r7, #23]
 8017b80:	b29b      	uxth	r3, r3
 8017b82:	4413      	add	r3, r2
 8017b84:	827b      	strh	r3, [r7, #18]

      /* Allow to copy the lesser one of available length in input data or bytes remaining in message */
      cpy_len = (u16_t)LWIP_MIN((u16_t)(p->tot_len - in_offset), msg_rem_len);
 8017b86:	683b      	ldr	r3, [r7, #0]
 8017b88:	891a      	ldrh	r2, [r3, #8]
 8017b8a:	8bfb      	ldrh	r3, [r7, #30]
 8017b8c:	1ad3      	subs	r3, r2, r3
 8017b8e:	b29b      	uxth	r3, r3
 8017b90:	461a      	mov	r2, r3
 8017b92:	69bb      	ldr	r3, [r7, #24]
 8017b94:	4293      	cmp	r3, r2
 8017b96:	d905      	bls.n	8017ba4 <mqtt_parse_incoming+0x114>
 8017b98:	683b      	ldr	r3, [r7, #0]
 8017b9a:	891a      	ldrh	r2, [r3, #8]
 8017b9c:	8bfb      	ldrh	r3, [r7, #30]
 8017b9e:	1ad3      	subs	r3, r2, r3
 8017ba0:	b29b      	uxth	r3, r3
 8017ba2:	e001      	b.n	8017ba8 <mqtt_parse_incoming+0x118>
 8017ba4:	69bb      	ldr	r3, [r7, #24]
 8017ba6:	b29b      	uxth	r3, r3
 8017ba8:	82bb      	strh	r3, [r7, #20]

      /* Limit to available space in buffer */
      buffer_space = MQTT_VAR_HEADER_BUFFER_LEN - cpy_start;
 8017baa:	8a7b      	ldrh	r3, [r7, #18]
 8017bac:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8017bb0:	823b      	strh	r3, [r7, #16]
      if (cpy_len > buffer_space) {
 8017bb2:	8aba      	ldrh	r2, [r7, #20]
 8017bb4:	8a3b      	ldrh	r3, [r7, #16]
 8017bb6:	429a      	cmp	r2, r3
 8017bb8:	d901      	bls.n	8017bbe <mqtt_parse_incoming+0x12e>
        cpy_len = buffer_space;
 8017bba:	8a3b      	ldrh	r3, [r7, #16]
 8017bbc:	82bb      	strh	r3, [r7, #20]
      }
      pbuf_copy_partial(p, client->rx_buffer + cpy_start, cpy_len, in_offset);
 8017bbe:	687b      	ldr	r3, [r7, #4]
 8017bc0:	f503 720b 	add.w	r2, r3, #556	; 0x22c
 8017bc4:	8a7b      	ldrh	r3, [r7, #18]
 8017bc6:	18d1      	adds	r1, r2, r3
 8017bc8:	8bfb      	ldrh	r3, [r7, #30]
 8017bca:	8aba      	ldrh	r2, [r7, #20]
 8017bcc:	6838      	ldr	r0, [r7, #0]
 8017bce:	f002 fbf9 	bl	801a3c4 <pbuf_copy_partial>

      /* Advance get and put indexes  */
      client->msg_idx += cpy_len;
 8017bd2:	687b      	ldr	r3, [r7, #4]
 8017bd4:	f8d3 2228 	ldr.w	r2, [r3, #552]	; 0x228
 8017bd8:	8abb      	ldrh	r3, [r7, #20]
 8017bda:	441a      	add	r2, r3
 8017bdc:	687b      	ldr	r3, [r7, #4]
 8017bde:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
      in_offset += cpy_len;
 8017be2:	8bfa      	ldrh	r2, [r7, #30]
 8017be4:	8abb      	ldrh	r3, [r7, #20]
 8017be6:	4413      	add	r3, r2
 8017be8:	83fb      	strh	r3, [r7, #30]
      msg_rem_len -= cpy_len;
 8017bea:	8abb      	ldrh	r3, [r7, #20]
 8017bec:	69ba      	ldr	r2, [r7, #24]
 8017bee:	1ad3      	subs	r3, r2, r3
 8017bf0:	61bb      	str	r3, [r7, #24]

      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_parse_incoming: msg_idx: %"U32_F", cpy_len: %"U16_F", remaining %"U32_F"\n", client->msg_idx, cpy_len, msg_rem_len));
      if ((msg_rem_len == 0) || (cpy_len == buffer_space)) {
 8017bf2:	69bb      	ldr	r3, [r7, #24]
 8017bf4:	2b00      	cmp	r3, #0
 8017bf6:	d003      	beq.n	8017c00 <mqtt_parse_incoming+0x170>
 8017bf8:	8aba      	ldrh	r2, [r7, #20]
 8017bfa:	8a3b      	ldrh	r3, [r7, #16]
 8017bfc:	429a      	cmp	r2, r3
 8017bfe:	d11c      	bne.n	8017c3a <mqtt_parse_incoming+0x1aa>
        /* Whole message received or buffer is full */
        mqtt_connection_status_t res = mqtt_message_received(client, fixed_hdr_idx, (cpy_start + cpy_len) - fixed_hdr_idx, msg_rem_len);
 8017c00:	8a7a      	ldrh	r2, [r7, #18]
 8017c02:	8abb      	ldrh	r3, [r7, #20]
 8017c04:	4413      	add	r3, r2
 8017c06:	b29a      	uxth	r2, r3
 8017c08:	7dfb      	ldrb	r3, [r7, #23]
 8017c0a:	b29b      	uxth	r3, r3
 8017c0c:	1ad3      	subs	r3, r2, r3
 8017c0e:	b29a      	uxth	r2, r3
 8017c10:	7df9      	ldrb	r1, [r7, #23]
 8017c12:	69bb      	ldr	r3, [r7, #24]
 8017c14:	6878      	ldr	r0, [r7, #4]
 8017c16:	f7ff fd7b 	bl	8017710 <mqtt_message_received>
 8017c1a:	4603      	mov	r3, r0
 8017c1c:	81fb      	strh	r3, [r7, #14]
        if (res != MQTT_CONNECT_ACCEPTED) {
 8017c1e:	89fb      	ldrh	r3, [r7, #14]
 8017c20:	2b00      	cmp	r3, #0
 8017c22:	d001      	beq.n	8017c28 <mqtt_parse_incoming+0x198>
          return res;
 8017c24:	89fb      	ldrh	r3, [r7, #14]
 8017c26:	e00f      	b.n	8017c48 <mqtt_parse_incoming+0x1b8>
        }
        if (msg_rem_len == 0) {
 8017c28:	69bb      	ldr	r3, [r7, #24]
 8017c2a:	2b00      	cmp	r3, #0
 8017c2c:	d105      	bne.n	8017c3a <mqtt_parse_incoming+0x1aa>
          /* Reset parser state */
          client->msg_idx = 0;
 8017c2e:	687b      	ldr	r3, [r7, #4]
 8017c30:	2200      	movs	r2, #0
 8017c32:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
          /* msg_tot_len = 0; */
          fixed_hdr_idx = 0;
 8017c36:	2300      	movs	r3, #0
 8017c38:	75fb      	strb	r3, [r7, #23]
  while (p->tot_len > in_offset) {
 8017c3a:	683b      	ldr	r3, [r7, #0]
 8017c3c:	891b      	ldrh	r3, [r3, #8]
 8017c3e:	8bfa      	ldrh	r2, [r7, #30]
 8017c40:	429a      	cmp	r2, r3
 8017c42:	f4ff af33 	bcc.w	8017aac <mqtt_parse_incoming+0x1c>
        }
      }
    }
  }
  return MQTT_CONNECT_ACCEPTED;
 8017c46:	2300      	movs	r3, #0
}
 8017c48:	4618      	mov	r0, r3
 8017c4a:	3720      	adds	r7, #32
 8017c4c:	46bd      	mov	sp, r7
 8017c4e:	bd80      	pop	{r7, pc}

08017c50 <mqtt_tcp_recv_cb>:
 * @param err Passed as return value if not ERR_OK
 * @return ERR_OK or err passed into callback
 */
static err_t
mqtt_tcp_recv_cb(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8017c50:	b580      	push	{r7, lr}
 8017c52:	b086      	sub	sp, #24
 8017c54:	af00      	add	r7, sp, #0
 8017c56:	60f8      	str	r0, [r7, #12]
 8017c58:	60b9      	str	r1, [r7, #8]
 8017c5a:	607a      	str	r2, [r7, #4]
 8017c5c:	70fb      	strb	r3, [r7, #3]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 8017c5e:	68fb      	ldr	r3, [r7, #12]
 8017c60:	617b      	str	r3, [r7, #20]
  LWIP_ASSERT("mqtt_tcp_recv_cb: client != NULL", client != NULL);
 8017c62:	697b      	ldr	r3, [r7, #20]
 8017c64:	2b00      	cmp	r3, #0
 8017c66:	d106      	bne.n	8017c76 <mqtt_tcp_recv_cb+0x26>
 8017c68:	4b24      	ldr	r3, [pc, #144]	; (8017cfc <mqtt_tcp_recv_cb+0xac>)
 8017c6a:	f240 32a7 	movw	r2, #935	; 0x3a7
 8017c6e:	4924      	ldr	r1, [pc, #144]	; (8017d00 <mqtt_tcp_recv_cb+0xb0>)
 8017c70:	4824      	ldr	r0, [pc, #144]	; (8017d04 <mqtt_tcp_recv_cb+0xb4>)
 8017c72:	f00e fe2b 	bl	80268cc <iprintf>
  LWIP_ASSERT("mqtt_tcp_recv_cb: client->conn == pcb", client->conn == pcb);
 8017c76:	697b      	ldr	r3, [r7, #20]
 8017c78:	68db      	ldr	r3, [r3, #12]
 8017c7a:	68ba      	ldr	r2, [r7, #8]
 8017c7c:	429a      	cmp	r2, r3
 8017c7e:	d006      	beq.n	8017c8e <mqtt_tcp_recv_cb+0x3e>
 8017c80:	4b1e      	ldr	r3, [pc, #120]	; (8017cfc <mqtt_tcp_recv_cb+0xac>)
 8017c82:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8017c86:	4920      	ldr	r1, [pc, #128]	; (8017d08 <mqtt_tcp_recv_cb+0xb8>)
 8017c88:	481e      	ldr	r0, [pc, #120]	; (8017d04 <mqtt_tcp_recv_cb+0xb4>)
 8017c8a:	f00e fe1f 	bl	80268cc <iprintf>

  if (p == NULL) {
 8017c8e:	687b      	ldr	r3, [r7, #4]
 8017c90:	2b00      	cmp	r3, #0
 8017c92:	d105      	bne.n	8017ca0 <mqtt_tcp_recv_cb+0x50>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_recv_cb: Recv pbuf=NULL, remote has closed connection\n"));
    mqtt_close(client, MQTT_CONNECT_DISCONNECTED);
 8017c94:	f44f 7180 	mov.w	r1, #256	; 0x100
 8017c98:	6978      	ldr	r0, [r7, #20]
 8017c9a:	f7ff fbe5 	bl	8017468 <mqtt_close>
 8017c9e:	e027      	b.n	8017cf0 <mqtt_tcp_recv_cb+0xa0>
  } else {
    mqtt_connection_status_t res;
    if (err != ERR_OK) {
 8017ca0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8017ca4:	2b00      	cmp	r3, #0
 8017ca6:	d005      	beq.n	8017cb4 <mqtt_tcp_recv_cb+0x64>
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_tcp_recv_cb: Recv err=%d\n", err));
      pbuf_free(p);
 8017ca8:	6878      	ldr	r0, [r7, #4]
 8017caa:	f002 f985 	bl	8019fb8 <pbuf_free>
      return err;
 8017cae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8017cb2:	e01e      	b.n	8017cf2 <mqtt_tcp_recv_cb+0xa2>
    }

    /* Tell remote that data has been received */
    altcp_recved(pcb, p->tot_len);
 8017cb4:	687b      	ldr	r3, [r7, #4]
 8017cb6:	891b      	ldrh	r3, [r3, #8]
 8017cb8:	4619      	mov	r1, r3
 8017cba:	68b8      	ldr	r0, [r7, #8]
 8017cbc:	f003 f95e 	bl	801af7c <tcp_recved>
    res = mqtt_parse_incoming(client, p);
 8017cc0:	6879      	ldr	r1, [r7, #4]
 8017cc2:	6978      	ldr	r0, [r7, #20]
 8017cc4:	f7ff fee4 	bl	8017a90 <mqtt_parse_incoming>
 8017cc8:	4603      	mov	r3, r0
 8017cca:	827b      	strh	r3, [r7, #18]
    pbuf_free(p);
 8017ccc:	6878      	ldr	r0, [r7, #4]
 8017cce:	f002 f973 	bl	8019fb8 <pbuf_free>

    if (res != MQTT_CONNECT_ACCEPTED) {
 8017cd2:	8a7b      	ldrh	r3, [r7, #18]
 8017cd4:	2b00      	cmp	r3, #0
 8017cd6:	d004      	beq.n	8017ce2 <mqtt_tcp_recv_cb+0x92>
      mqtt_close(client, res);
 8017cd8:	8a7b      	ldrh	r3, [r7, #18]
 8017cda:	4619      	mov	r1, r3
 8017cdc:	6978      	ldr	r0, [r7, #20]
 8017cde:	f7ff fbc3 	bl	8017468 <mqtt_close>
    }
    /* If keep alive functionality is used */
    if (client->keep_alive != 0) {
 8017ce2:	697b      	ldr	r3, [r7, #20]
 8017ce4:	885b      	ldrh	r3, [r3, #2]
 8017ce6:	2b00      	cmp	r3, #0
 8017ce8:	d002      	beq.n	8017cf0 <mqtt_tcp_recv_cb+0xa0>
      /* Reset server alive watchdog */
      client->server_watchdog = 0;
 8017cea:	697b      	ldr	r3, [r7, #20]
 8017cec:	2200      	movs	r2, #0
 8017cee:	809a      	strh	r2, [r3, #4]
    }

  }
  return ERR_OK;
 8017cf0:	2300      	movs	r3, #0
}
 8017cf2:	4618      	mov	r0, r3
 8017cf4:	3718      	adds	r7, #24
 8017cf6:	46bd      	mov	sp, r7
 8017cf8:	bd80      	pop	{r7, pc}
 8017cfa:	bf00      	nop
 8017cfc:	0802c17c 	.word	0x0802c17c
 8017d00:	0802c41c 	.word	0x0802c41c
 8017d04:	0802c1f4 	.word	0x0802c1f4
 8017d08:	0802c440 	.word	0x0802c440

08017d0c <mqtt_tcp_sent_cb>:
 * @param len Number of bytes sent
 * @return ERR_OK
 */
static err_t
mqtt_tcp_sent_cb(void *arg, struct altcp_pcb *tpcb, u16_t len)
{
 8017d0c:	b580      	push	{r7, lr}
 8017d0e:	b086      	sub	sp, #24
 8017d10:	af00      	add	r7, sp, #0
 8017d12:	60f8      	str	r0, [r7, #12]
 8017d14:	60b9      	str	r1, [r7, #8]
 8017d16:	4613      	mov	r3, r2
 8017d18:	80fb      	strh	r3, [r7, #6]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 8017d1a:	68fb      	ldr	r3, [r7, #12]
 8017d1c:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(tpcb);
  LWIP_UNUSED_ARG(len);

  if (client->conn_state == MQTT_CONNECTED) {
 8017d1e:	697b      	ldr	r3, [r7, #20]
 8017d20:	7a9b      	ldrb	r3, [r3, #10]
 8017d22:	2b03      	cmp	r3, #3
 8017d24:	d127      	bne.n	8017d76 <mqtt_tcp_sent_cb+0x6a>
    struct mqtt_request_t *r;

    /* Reset keep-alive send timer and server watchdog */
    client->cyclic_tick = 0;
 8017d26:	697b      	ldr	r3, [r7, #20]
 8017d28:	2200      	movs	r2, #0
 8017d2a:	801a      	strh	r2, [r3, #0]
    client->server_watchdog = 0;
 8017d2c:	697b      	ldr	r3, [r7, #20]
 8017d2e:	2200      	movs	r2, #0
 8017d30:	809a      	strh	r2, [r3, #4]
    /* QoS 0 publish has no response from server, so call its callbacks here */
    while ((r = mqtt_take_request(&client->pend_req_queue, 0)) != NULL) {
 8017d32:	e00d      	b.n	8017d50 <mqtt_tcp_sent_cb+0x44>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_sent_cb: Calling QoS 0 publish complete callback\n"));
      if (r->cb != NULL) {
 8017d34:	693b      	ldr	r3, [r7, #16]
 8017d36:	685b      	ldr	r3, [r3, #4]
 8017d38:	2b00      	cmp	r3, #0
 8017d3a:	d006      	beq.n	8017d4a <mqtt_tcp_sent_cb+0x3e>
        r->cb(r->arg, ERR_OK);
 8017d3c:	693b      	ldr	r3, [r7, #16]
 8017d3e:	685b      	ldr	r3, [r3, #4]
 8017d40:	693a      	ldr	r2, [r7, #16]
 8017d42:	6892      	ldr	r2, [r2, #8]
 8017d44:	2100      	movs	r1, #0
 8017d46:	4610      	mov	r0, r2
 8017d48:	4798      	blx	r3
      }
      mqtt_delete_request(r);
 8017d4a:	6938      	ldr	r0, [r7, #16]
 8017d4c:	f7ff f992 	bl	8017074 <mqtt_delete_request>
    while ((r = mqtt_take_request(&client->pend_req_queue, 0)) != NULL) {
 8017d50:	697b      	ldr	r3, [r7, #20]
 8017d52:	3318      	adds	r3, #24
 8017d54:	2100      	movs	r1, #0
 8017d56:	4618      	mov	r0, r3
 8017d58:	f7ff f99c 	bl	8017094 <mqtt_take_request>
 8017d5c:	6138      	str	r0, [r7, #16]
 8017d5e:	693b      	ldr	r3, [r7, #16]
 8017d60:	2b00      	cmp	r3, #0
 8017d62:	d1e7      	bne.n	8017d34 <mqtt_tcp_sent_cb+0x28>
    }
    /* Try send any remaining buffers from output queue */
    mqtt_output_send(&client->output, client->conn);
 8017d64:	697b      	ldr	r3, [r7, #20]
 8017d66:	f503 722b 	add.w	r2, r3, #684	; 0x2ac
 8017d6a:	697b      	ldr	r3, [r7, #20]
 8017d6c:	68db      	ldr	r3, [r3, #12]
 8017d6e:	4619      	mov	r1, r3
 8017d70:	4610      	mov	r0, r2
 8017d72:	f7ff f839 	bl	8016de8 <mqtt_output_send>
  }
  return ERR_OK;
 8017d76:	2300      	movs	r3, #0
}
 8017d78:	4618      	mov	r0, r3
 8017d7a:	3718      	adds	r7, #24
 8017d7c:	46bd      	mov	sp, r7
 8017d7e:	bd80      	pop	{r7, pc}

08017d80 <mqtt_tcp_err_cb>:
 * @param arg MQTT client
 * @param err Error encountered
 */
static void
mqtt_tcp_err_cb(void *arg, err_t err)
{
 8017d80:	b580      	push	{r7, lr}
 8017d82:	b084      	sub	sp, #16
 8017d84:	af00      	add	r7, sp, #0
 8017d86:	6078      	str	r0, [r7, #4]
 8017d88:	460b      	mov	r3, r1
 8017d8a:	70fb      	strb	r3, [r7, #3]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 8017d8c:	687b      	ldr	r3, [r7, #4]
 8017d8e:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err); /* only used for debug output */
  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_err_cb: TCP error callback: error %d, arg: %p\n", err, arg));
  LWIP_ASSERT("mqtt_tcp_err_cb: client != NULL", client != NULL);
 8017d90:	68fb      	ldr	r3, [r7, #12]
 8017d92:	2b00      	cmp	r3, #0
 8017d94:	d106      	bne.n	8017da4 <mqtt_tcp_err_cb+0x24>
 8017d96:	4b09      	ldr	r3, [pc, #36]	; (8017dbc <mqtt_tcp_err_cb+0x3c>)
 8017d98:	f240 32f6 	movw	r2, #1014	; 0x3f6
 8017d9c:	4908      	ldr	r1, [pc, #32]	; (8017dc0 <mqtt_tcp_err_cb+0x40>)
 8017d9e:	4809      	ldr	r0, [pc, #36]	; (8017dc4 <mqtt_tcp_err_cb+0x44>)
 8017da0:	f00e fd94 	bl	80268cc <iprintf>
  /* Set conn to null before calling close as pcb is already deallocated*/
  client->conn = 0;
 8017da4:	68fb      	ldr	r3, [r7, #12]
 8017da6:	2200      	movs	r2, #0
 8017da8:	60da      	str	r2, [r3, #12]
  mqtt_close(client, MQTT_CONNECT_DISCONNECTED);
 8017daa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8017dae:	68f8      	ldr	r0, [r7, #12]
 8017db0:	f7ff fb5a 	bl	8017468 <mqtt_close>
}
 8017db4:	bf00      	nop
 8017db6:	3710      	adds	r7, #16
 8017db8:	46bd      	mov	sp, r7
 8017dba:	bd80      	pop	{r7, pc}
 8017dbc:	0802c17c 	.word	0x0802c17c
 8017dc0:	0802c468 	.word	0x0802c468
 8017dc4:	0802c1f4 	.word	0x0802c1f4

08017dc8 <mqtt_tcp_poll_cb>:
 * @param tpcb TCP connection handle
 * @return err ERR_OK
 */
static err_t
mqtt_tcp_poll_cb(void *arg, struct altcp_pcb *tpcb)
{
 8017dc8:	b580      	push	{r7, lr}
 8017dca:	b084      	sub	sp, #16
 8017dcc:	af00      	add	r7, sp, #0
 8017dce:	6078      	str	r0, [r7, #4]
 8017dd0:	6039      	str	r1, [r7, #0]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 8017dd2:	687b      	ldr	r3, [r7, #4]
 8017dd4:	60fb      	str	r3, [r7, #12]
  if (client->conn_state == MQTT_CONNECTED) {
 8017dd6:	68fb      	ldr	r3, [r7, #12]
 8017dd8:	7a9b      	ldrb	r3, [r3, #10]
 8017dda:	2b03      	cmp	r3, #3
 8017ddc:	d106      	bne.n	8017dec <mqtt_tcp_poll_cb+0x24>
    /* Try send any remaining buffers from output queue */
    mqtt_output_send(&client->output, tpcb);
 8017dde:	68fb      	ldr	r3, [r7, #12]
 8017de0:	f503 732b 	add.w	r3, r3, #684	; 0x2ac
 8017de4:	6839      	ldr	r1, [r7, #0]
 8017de6:	4618      	mov	r0, r3
 8017de8:	f7fe fffe 	bl	8016de8 <mqtt_output_send>
  }
  return ERR_OK;
 8017dec:	2300      	movs	r3, #0
}
 8017dee:	4618      	mov	r0, r3
 8017df0:	3710      	adds	r7, #16
 8017df2:	46bd      	mov	sp, r7
 8017df4:	bd80      	pop	{r7, pc}
	...

08017df8 <mqtt_tcp_connect_cb>:
 * @param err Always ERR_OK, mqtt_tcp_err_cb is called in case of error
 * @return ERR_OK
 */
static err_t
mqtt_tcp_connect_cb(void *arg, struct altcp_pcb *tpcb, err_t err)
{
 8017df8:	b580      	push	{r7, lr}
 8017dfa:	b086      	sub	sp, #24
 8017dfc:	af00      	add	r7, sp, #0
 8017dfe:	60f8      	str	r0, [r7, #12]
 8017e00:	60b9      	str	r1, [r7, #8]
 8017e02:	4613      	mov	r3, r2
 8017e04:	71fb      	strb	r3, [r7, #7]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 8017e06:	68fb      	ldr	r3, [r7, #12]
 8017e08:	617b      	str	r3, [r7, #20]

  if (err != ERR_OK) {
 8017e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017e0e:	2b00      	cmp	r3, #0
 8017e10:	d002      	beq.n	8017e18 <mqtt_tcp_connect_cb+0x20>
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_tcp_connect_cb: TCP connect error %d\n", err));
    return err;
 8017e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017e16:	e026      	b.n	8017e66 <mqtt_tcp_connect_cb+0x6e>
  }

  /* Initiate receiver state */
  client->msg_idx = 0;
 8017e18:	697b      	ldr	r3, [r7, #20]
 8017e1a:	2200      	movs	r2, #0
 8017e1c:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228

  /* Setup TCP callbacks */
  altcp_recv(tpcb, mqtt_tcp_recv_cb);
 8017e20:	4913      	ldr	r1, [pc, #76]	; (8017e70 <mqtt_tcp_connect_cb+0x78>)
 8017e22:	68b8      	ldr	r0, [r7, #8]
 8017e24:	f004 f8b8 	bl	801bf98 <tcp_recv>
  altcp_sent(tpcb, mqtt_tcp_sent_cb);
 8017e28:	4912      	ldr	r1, [pc, #72]	; (8017e74 <mqtt_tcp_connect_cb+0x7c>)
 8017e2a:	68b8      	ldr	r0, [r7, #8]
 8017e2c:	f004 f8d6 	bl	801bfdc <tcp_sent>
  altcp_poll(tpcb, mqtt_tcp_poll_cb, 2);
 8017e30:	2202      	movs	r2, #2
 8017e32:	4911      	ldr	r1, [pc, #68]	; (8017e78 <mqtt_tcp_connect_cb+0x80>)
 8017e34:	68b8      	ldr	r0, [r7, #8]
 8017e36:	f004 f92d 	bl	801c094 <tcp_poll>

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_connect_cb: TCP connection established to server\n"));
  /* Enter MQTT connect state */
  client->conn_state = MQTT_CONNECTING;
 8017e3a:	697b      	ldr	r3, [r7, #20]
 8017e3c:	2202      	movs	r2, #2
 8017e3e:	729a      	strb	r2, [r3, #10]

  /* Start cyclic timer */
  sys_timeout(MQTT_CYCLIC_TIMER_INTERVAL * 1000, mqtt_cyclic_timer, client);
 8017e40:	697a      	ldr	r2, [r7, #20]
 8017e42:	490e      	ldr	r1, [pc, #56]	; (8017e7c <mqtt_tcp_connect_cb+0x84>)
 8017e44:	f241 3088 	movw	r0, #5000	; 0x1388
 8017e48:	f008 fe18 	bl	8020a7c <sys_timeout>
  client->cyclic_tick = 0;
 8017e4c:	697b      	ldr	r3, [r7, #20]
 8017e4e:	2200      	movs	r2, #0
 8017e50:	801a      	strh	r2, [r3, #0]

  /* Start transmission from output queue, connect message is the first one out*/
  mqtt_output_send(&client->output, client->conn);
 8017e52:	697b      	ldr	r3, [r7, #20]
 8017e54:	f503 722b 	add.w	r2, r3, #684	; 0x2ac
 8017e58:	697b      	ldr	r3, [r7, #20]
 8017e5a:	68db      	ldr	r3, [r3, #12]
 8017e5c:	4619      	mov	r1, r3
 8017e5e:	4610      	mov	r0, r2
 8017e60:	f7fe ffc2 	bl	8016de8 <mqtt_output_send>

  return ERR_OK;
 8017e64:	2300      	movs	r3, #0
}
 8017e66:	4618      	mov	r0, r3
 8017e68:	3718      	adds	r7, #24
 8017e6a:	46bd      	mov	sp, r7
 8017e6c:	bd80      	pop	{r7, pc}
 8017e6e:	bf00      	nop
 8017e70:	08017c51 	.word	0x08017c51
 8017e74:	08017d0d 	.word	0x08017d0d
 8017e78:	08017dc9 	.word	0x08017dc9
 8017e7c:	08017529 	.word	0x08017529

08017e80 <mqtt_publish>:
 *         ERR_MEM if short on memory
 */
err_t
mqtt_publish(mqtt_client_t *client, const char *topic, const void *payload, u16_t payload_length, u8_t qos, u8_t retain,
             mqtt_request_cb_t cb, void *arg)
{
 8017e80:	b580      	push	{r7, lr}
 8017e82:	b08c      	sub	sp, #48	; 0x30
 8017e84:	af02      	add	r7, sp, #8
 8017e86:	60f8      	str	r0, [r7, #12]
 8017e88:	60b9      	str	r1, [r7, #8]
 8017e8a:	607a      	str	r2, [r7, #4]
 8017e8c:	807b      	strh	r3, [r7, #2]
  size_t total_len;
  u16_t topic_len;
  u16_t remaining_length;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_publish: client != NULL", client);
 8017e8e:	68fb      	ldr	r3, [r7, #12]
 8017e90:	2b00      	cmp	r3, #0
 8017e92:	d106      	bne.n	8017ea2 <mqtt_publish+0x22>
 8017e94:	4b5f      	ldr	r3, [pc, #380]	; (8018014 <mqtt_publish+0x194>)
 8017e96:	f240 4254 	movw	r2, #1108	; 0x454
 8017e9a:	495f      	ldr	r1, [pc, #380]	; (8018018 <mqtt_publish+0x198>)
 8017e9c:	485f      	ldr	r0, [pc, #380]	; (801801c <mqtt_publish+0x19c>)
 8017e9e:	f00e fd15 	bl	80268cc <iprintf>
  LWIP_ASSERT("mqtt_publish: topic != NULL", topic);
 8017ea2:	68bb      	ldr	r3, [r7, #8]
 8017ea4:	2b00      	cmp	r3, #0
 8017ea6:	d106      	bne.n	8017eb6 <mqtt_publish+0x36>
 8017ea8:	4b5a      	ldr	r3, [pc, #360]	; (8018014 <mqtt_publish+0x194>)
 8017eaa:	f240 4255 	movw	r2, #1109	; 0x455
 8017eae:	495c      	ldr	r1, [pc, #368]	; (8018020 <mqtt_publish+0x1a0>)
 8017eb0:	485a      	ldr	r0, [pc, #360]	; (801801c <mqtt_publish+0x19c>)
 8017eb2:	f00e fd0b 	bl	80268cc <iprintf>
  LWIP_ERROR("mqtt_publish: TCP disconnected", (client->conn_state != TCP_DISCONNECTED), return ERR_CONN);
 8017eb6:	68fb      	ldr	r3, [r7, #12]
 8017eb8:	7a9b      	ldrb	r3, [r3, #10]
 8017eba:	2b00      	cmp	r3, #0
 8017ebc:	d109      	bne.n	8017ed2 <mqtt_publish+0x52>
 8017ebe:	4b55      	ldr	r3, [pc, #340]	; (8018014 <mqtt_publish+0x194>)
 8017ec0:	f240 4256 	movw	r2, #1110	; 0x456
 8017ec4:	4957      	ldr	r1, [pc, #348]	; (8018024 <mqtt_publish+0x1a4>)
 8017ec6:	4855      	ldr	r0, [pc, #340]	; (801801c <mqtt_publish+0x19c>)
 8017ec8:	f00e fd00 	bl	80268cc <iprintf>
 8017ecc:	f06f 030a 	mvn.w	r3, #10
 8017ed0:	e09b      	b.n	801800a <mqtt_publish+0x18a>

  topic_strlen = strlen(topic);
 8017ed2:	68b8      	ldr	r0, [r7, #8]
 8017ed4:	f7e8 f986 	bl	80001e4 <strlen>
 8017ed8:	61f8      	str	r0, [r7, #28]
  LWIP_ERROR("mqtt_publish: topic length overflow", (topic_strlen <= (0xFFFF - 2)), return ERR_ARG);
 8017eda:	69fb      	ldr	r3, [r7, #28]
 8017edc:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8017ee0:	4293      	cmp	r3, r2
 8017ee2:	d909      	bls.n	8017ef8 <mqtt_publish+0x78>
 8017ee4:	4b4b      	ldr	r3, [pc, #300]	; (8018014 <mqtt_publish+0x194>)
 8017ee6:	f240 4259 	movw	r2, #1113	; 0x459
 8017eea:	494f      	ldr	r1, [pc, #316]	; (8018028 <mqtt_publish+0x1a8>)
 8017eec:	484b      	ldr	r0, [pc, #300]	; (801801c <mqtt_publish+0x19c>)
 8017eee:	f00e fced 	bl	80268cc <iprintf>
 8017ef2:	f06f 030f 	mvn.w	r3, #15
 8017ef6:	e088      	b.n	801800a <mqtt_publish+0x18a>
  topic_len = (u16_t)topic_strlen;
 8017ef8:	69fb      	ldr	r3, [r7, #28]
 8017efa:	837b      	strh	r3, [r7, #26]
  total_len = 2 + topic_len + payload_length;
 8017efc:	8b7b      	ldrh	r3, [r7, #26]
 8017efe:	1c9a      	adds	r2, r3, #2
 8017f00:	887b      	ldrh	r3, [r7, #2]
 8017f02:	4413      	add	r3, r2
 8017f04:	623b      	str	r3, [r7, #32]

  if (qos > 0) {
 8017f06:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8017f0a:	2b00      	cmp	r3, #0
 8017f0c:	d008      	beq.n	8017f20 <mqtt_publish+0xa0>
    total_len += 2;
 8017f0e:	6a3b      	ldr	r3, [r7, #32]
 8017f10:	3302      	adds	r3, #2
 8017f12:	623b      	str	r3, [r7, #32]
    /* Generate pkt_id id for QoS1 and 2 */
    pkt_id = msg_generate_packet_id(client);
 8017f14:	68f8      	ldr	r0, [r7, #12]
 8017f16:	f7fe fed3 	bl	8016cc0 <msg_generate_packet_id>
 8017f1a:	4603      	mov	r3, r0
 8017f1c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8017f1e:	e001      	b.n	8017f24 <mqtt_publish+0xa4>
  } else {
    /* Use reserved value pkt_id 0 for QoS 0 in request handle */
    pkt_id = 0;
 8017f20:	2300      	movs	r3, #0
 8017f22:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  LWIP_ERROR("mqtt_publish: total length overflow", (total_len <= 0xFFFF), return ERR_ARG);
 8017f24:	6a3b      	ldr	r3, [r7, #32]
 8017f26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017f2a:	d309      	bcc.n	8017f40 <mqtt_publish+0xc0>
 8017f2c:	4b39      	ldr	r3, [pc, #228]	; (8018014 <mqtt_publish+0x194>)
 8017f2e:	f240 4265 	movw	r2, #1125	; 0x465
 8017f32:	493e      	ldr	r1, [pc, #248]	; (801802c <mqtt_publish+0x1ac>)
 8017f34:	4839      	ldr	r0, [pc, #228]	; (801801c <mqtt_publish+0x19c>)
 8017f36:	f00e fcc9 	bl	80268cc <iprintf>
 8017f3a:	f06f 030f 	mvn.w	r3, #15
 8017f3e:	e064      	b.n	801800a <mqtt_publish+0x18a>
  remaining_length = (u16_t)total_len;
 8017f40:	6a3b      	ldr	r3, [r7, #32]
 8017f42:	833b      	strh	r3, [r7, #24]

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_publish: Publish with payload length %d to topic \"%s\"\n", payload_length, topic));

  r = mqtt_create_request(client->req_list, LWIP_ARRAYSIZE(client->req_list), pkt_id, cb, arg);
 8017f44:	68fb      	ldr	r3, [r7, #12]
 8017f46:	f103 001c 	add.w	r0, r3, #28
 8017f4a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8017f4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017f4e:	9300      	str	r3, [sp, #0]
 8017f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017f52:	2120      	movs	r1, #32
 8017f54:	f7fe fffc 	bl	8016f50 <mqtt_create_request>
 8017f58:	6178      	str	r0, [r7, #20]
  if (r == NULL) {
 8017f5a:	697b      	ldr	r3, [r7, #20]
 8017f5c:	2b00      	cmp	r3, #0
 8017f5e:	d102      	bne.n	8017f66 <mqtt_publish+0xe6>
    return ERR_MEM;
 8017f60:	f04f 33ff 	mov.w	r3, #4294967295
 8017f64:	e051      	b.n	801800a <mqtt_publish+0x18a>
  }

  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 8017f66:	68fb      	ldr	r3, [r7, #12]
 8017f68:	f503 732b 	add.w	r3, r3, #684	; 0x2ac
 8017f6c:	8b3a      	ldrh	r2, [r7, #24]
 8017f6e:	4611      	mov	r1, r2
 8017f70:	4618      	mov	r0, r3
 8017f72:	f7ff fa47 	bl	8017404 <mqtt_output_check_space>
 8017f76:	4603      	mov	r3, r0
 8017f78:	2b00      	cmp	r3, #0
 8017f7a:	d105      	bne.n	8017f88 <mqtt_publish+0x108>
    mqtt_delete_request(r);
 8017f7c:	6978      	ldr	r0, [r7, #20]
 8017f7e:	f7ff f879 	bl	8017074 <mqtt_delete_request>
    return ERR_MEM;
 8017f82:	f04f 33ff 	mov.w	r3, #4294967295
 8017f86:	e040      	b.n	801800a <mqtt_publish+0x18a>
  }
  /* Append fixed header */
  mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_PUBLISH, 0, qos, retain, remaining_length);
 8017f88:	68fb      	ldr	r3, [r7, #12]
 8017f8a:	f503 702b 	add.w	r0, r3, #684	; 0x2ac
 8017f8e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8017f92:	8b3b      	ldrh	r3, [r7, #24]
 8017f94:	9301      	str	r3, [sp, #4]
 8017f96:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8017f9a:	9300      	str	r3, [sp, #0]
 8017f9c:	4613      	mov	r3, r2
 8017f9e:	2200      	movs	r2, #0
 8017fa0:	2103      	movs	r1, #3
 8017fa2:	f7ff f9e4 	bl	801736e <mqtt_output_append_fixed_header>

  /* Append Topic */
  mqtt_output_append_string(&client->output, topic, topic_len);
 8017fa6:	68fb      	ldr	r3, [r7, #12]
 8017fa8:	f503 732b 	add.w	r3, r3, #684	; 0x2ac
 8017fac:	8b7a      	ldrh	r2, [r7, #26]
 8017fae:	68b9      	ldr	r1, [r7, #8]
 8017fb0:	4618      	mov	r0, r3
 8017fb2:	f7ff f9b0 	bl	8017316 <mqtt_output_append_string>

  /* Append packet if for QoS 1 and 2*/
  if (qos > 0) {
 8017fb6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8017fba:	2b00      	cmp	r3, #0
 8017fbc:	d007      	beq.n	8017fce <mqtt_publish+0x14e>
    mqtt_output_append_u16(&client->output, pkt_id);
 8017fbe:	68fb      	ldr	r3, [r7, #12]
 8017fc0:	f503 732b 	add.w	r3, r3, #684	; 0x2ac
 8017fc4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8017fc6:	4611      	mov	r1, r2
 8017fc8:	4618      	mov	r0, r3
 8017fca:	f7ff f96e 	bl	80172aa <mqtt_output_append_u16>
  }

  /* Append optional publish payload */
  if ((payload != NULL) && (payload_length > 0)) {
 8017fce:	687b      	ldr	r3, [r7, #4]
 8017fd0:	2b00      	cmp	r3, #0
 8017fd2:	d00a      	beq.n	8017fea <mqtt_publish+0x16a>
 8017fd4:	887b      	ldrh	r3, [r7, #2]
 8017fd6:	2b00      	cmp	r3, #0
 8017fd8:	d007      	beq.n	8017fea <mqtt_publish+0x16a>
    mqtt_output_append_buf(&client->output, payload, payload_length);
 8017fda:	68fb      	ldr	r3, [r7, #12]
 8017fdc:	f503 732b 	add.w	r3, r3, #684	; 0x2ac
 8017fe0:	887a      	ldrh	r2, [r7, #2]
 8017fe2:	6879      	ldr	r1, [r7, #4]
 8017fe4:	4618      	mov	r0, r3
 8017fe6:	f7ff f978 	bl	80172da <mqtt_output_append_buf>
  }

  mqtt_append_request(&client->pend_req_queue, r);
 8017fea:	68fb      	ldr	r3, [r7, #12]
 8017fec:	3318      	adds	r3, #24
 8017fee:	6979      	ldr	r1, [r7, #20]
 8017ff0:	4618      	mov	r0, r3
 8017ff2:	f7fe fff3 	bl	8016fdc <mqtt_append_request>
  mqtt_output_send(&client->output, client->conn);
 8017ff6:	68fb      	ldr	r3, [r7, #12]
 8017ff8:	f503 722b 	add.w	r2, r3, #684	; 0x2ac
 8017ffc:	68fb      	ldr	r3, [r7, #12]
 8017ffe:	68db      	ldr	r3, [r3, #12]
 8018000:	4619      	mov	r1, r3
 8018002:	4610      	mov	r0, r2
 8018004:	f7fe fef0 	bl	8016de8 <mqtt_output_send>
  return ERR_OK;
 8018008:	2300      	movs	r3, #0
}
 801800a:	4618      	mov	r0, r3
 801800c:	3728      	adds	r7, #40	; 0x28
 801800e:	46bd      	mov	sp, r7
 8018010:	bd80      	pop	{r7, pc}
 8018012:	bf00      	nop
 8018014:	0802c17c 	.word	0x0802c17c
 8018018:	0802c488 	.word	0x0802c488
 801801c:	0802c1f4 	.word	0x0802c1f4
 8018020:	0802c4a8 	.word	0x0802c4a8
 8018024:	0802c4c4 	.word	0x0802c4c4
 8018028:	0802c4e4 	.word	0x0802c4e4
 801802c:	0802c508 	.word	0x0802c508

08018030 <mqtt_sub_unsub>:
 * @param sub 1 for subscribe, 0 for unsubscribe
 * @return ERR_OK if successful, @see err_t enum for other results
 */
err_t
mqtt_sub_unsub(mqtt_client_t *client, const char *topic, u8_t qos, mqtt_request_cb_t cb, void *arg, u8_t sub)
{
 8018030:	b580      	push	{r7, lr}
 8018032:	b08c      	sub	sp, #48	; 0x30
 8018034:	af02      	add	r7, sp, #8
 8018036:	60f8      	str	r0, [r7, #12]
 8018038:	60b9      	str	r1, [r7, #8]
 801803a:	603b      	str	r3, [r7, #0]
 801803c:	4613      	mov	r3, r2
 801803e:	71fb      	strb	r3, [r7, #7]
  u16_t remaining_length;
  u16_t pkt_id;
  struct mqtt_request_t *r;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_sub_unsub: client != NULL", client);
 8018040:	68fb      	ldr	r3, [r7, #12]
 8018042:	2b00      	cmp	r3, #0
 8018044:	d106      	bne.n	8018054 <mqtt_sub_unsub+0x24>
 8018046:	4b5f      	ldr	r3, [pc, #380]	; (80181c4 <mqtt_sub_unsub+0x194>)
 8018048:	f240 429f 	movw	r2, #1183	; 0x49f
 801804c:	495e      	ldr	r1, [pc, #376]	; (80181c8 <mqtt_sub_unsub+0x198>)
 801804e:	485f      	ldr	r0, [pc, #380]	; (80181cc <mqtt_sub_unsub+0x19c>)
 8018050:	f00e fc3c 	bl	80268cc <iprintf>
  LWIP_ASSERT("mqtt_sub_unsub: topic != NULL", topic);
 8018054:	68bb      	ldr	r3, [r7, #8]
 8018056:	2b00      	cmp	r3, #0
 8018058:	d106      	bne.n	8018068 <mqtt_sub_unsub+0x38>
 801805a:	4b5a      	ldr	r3, [pc, #360]	; (80181c4 <mqtt_sub_unsub+0x194>)
 801805c:	f44f 6294 	mov.w	r2, #1184	; 0x4a0
 8018060:	495b      	ldr	r1, [pc, #364]	; (80181d0 <mqtt_sub_unsub+0x1a0>)
 8018062:	485a      	ldr	r0, [pc, #360]	; (80181cc <mqtt_sub_unsub+0x19c>)
 8018064:	f00e fc32 	bl	80268cc <iprintf>

  topic_strlen = strlen(topic);
 8018068:	68b8      	ldr	r0, [r7, #8]
 801806a:	f7e8 f8bb 	bl	80001e4 <strlen>
 801806e:	6278      	str	r0, [r7, #36]	; 0x24
  LWIP_ERROR("mqtt_sub_unsub: topic length overflow", (topic_strlen <= (0xFFFF - 2)), return ERR_ARG);
 8018070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018072:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8018076:	4293      	cmp	r3, r2
 8018078:	d909      	bls.n	801808e <mqtt_sub_unsub+0x5e>
 801807a:	4b52      	ldr	r3, [pc, #328]	; (80181c4 <mqtt_sub_unsub+0x194>)
 801807c:	f240 42a3 	movw	r2, #1187	; 0x4a3
 8018080:	4954      	ldr	r1, [pc, #336]	; (80181d4 <mqtt_sub_unsub+0x1a4>)
 8018082:	4852      	ldr	r0, [pc, #328]	; (80181cc <mqtt_sub_unsub+0x19c>)
 8018084:	f00e fc22 	bl	80268cc <iprintf>
 8018088:	f06f 030f 	mvn.w	r3, #15
 801808c:	e096      	b.n	80181bc <mqtt_sub_unsub+0x18c>
  topic_len = (u16_t)topic_strlen;
 801808e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018090:	847b      	strh	r3, [r7, #34]	; 0x22
  /* Topic string, pkt_id, qos for subscribe */
  total_len =  topic_len + 2 + 2 + (sub != 0);
 8018092:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018094:	3304      	adds	r3, #4
 8018096:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 801809a:	2a00      	cmp	r2, #0
 801809c:	bf14      	ite	ne
 801809e:	2201      	movne	r2, #1
 80180a0:	2200      	moveq	r2, #0
 80180a2:	b2d2      	uxtb	r2, r2
 80180a4:	4413      	add	r3, r2
 80180a6:	61fb      	str	r3, [r7, #28]
  LWIP_ERROR("mqtt_sub_unsub: total length overflow", (total_len <= 0xFFFF), return ERR_ARG);
 80180a8:	69fb      	ldr	r3, [r7, #28]
 80180aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80180ae:	d309      	bcc.n	80180c4 <mqtt_sub_unsub+0x94>
 80180b0:	4b44      	ldr	r3, [pc, #272]	; (80181c4 <mqtt_sub_unsub+0x194>)
 80180b2:	f240 42a7 	movw	r2, #1191	; 0x4a7
 80180b6:	4948      	ldr	r1, [pc, #288]	; (80181d8 <mqtt_sub_unsub+0x1a8>)
 80180b8:	4844      	ldr	r0, [pc, #272]	; (80181cc <mqtt_sub_unsub+0x19c>)
 80180ba:	f00e fc07 	bl	80268cc <iprintf>
 80180be:	f06f 030f 	mvn.w	r3, #15
 80180c2:	e07b      	b.n	80181bc <mqtt_sub_unsub+0x18c>
  remaining_length = (u16_t)total_len;
 80180c4:	69fb      	ldr	r3, [r7, #28]
 80180c6:	837b      	strh	r3, [r7, #26]

  LWIP_ASSERT("mqtt_sub_unsub: qos < 3", qos < 3);
 80180c8:	79fb      	ldrb	r3, [r7, #7]
 80180ca:	2b02      	cmp	r3, #2
 80180cc:	d906      	bls.n	80180dc <mqtt_sub_unsub+0xac>
 80180ce:	4b3d      	ldr	r3, [pc, #244]	; (80181c4 <mqtt_sub_unsub+0x194>)
 80180d0:	f240 42aa 	movw	r2, #1194	; 0x4aa
 80180d4:	4941      	ldr	r1, [pc, #260]	; (80181dc <mqtt_sub_unsub+0x1ac>)
 80180d6:	483d      	ldr	r0, [pc, #244]	; (80181cc <mqtt_sub_unsub+0x19c>)
 80180d8:	f00e fbf8 	bl	80268cc <iprintf>
  if (client->conn_state == TCP_DISCONNECTED) {
 80180dc:	68fb      	ldr	r3, [r7, #12]
 80180de:	7a9b      	ldrb	r3, [r3, #10]
 80180e0:	2b00      	cmp	r3, #0
 80180e2:	d102      	bne.n	80180ea <mqtt_sub_unsub+0xba>
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_sub_unsub: Can not (un)subscribe in disconnected state\n"));
    return ERR_CONN;
 80180e4:	f06f 030a 	mvn.w	r3, #10
 80180e8:	e068      	b.n	80181bc <mqtt_sub_unsub+0x18c>
  }

  pkt_id = msg_generate_packet_id(client);
 80180ea:	68f8      	ldr	r0, [r7, #12]
 80180ec:	f7fe fde8 	bl	8016cc0 <msg_generate_packet_id>
 80180f0:	4603      	mov	r3, r0
 80180f2:	833b      	strh	r3, [r7, #24]
  r = mqtt_create_request(client->req_list, LWIP_ARRAYSIZE(client->req_list), pkt_id, cb, arg);
 80180f4:	68fb      	ldr	r3, [r7, #12]
 80180f6:	f103 001c 	add.w	r0, r3, #28
 80180fa:	8b3a      	ldrh	r2, [r7, #24]
 80180fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80180fe:	9300      	str	r3, [sp, #0]
 8018100:	683b      	ldr	r3, [r7, #0]
 8018102:	2120      	movs	r1, #32
 8018104:	f7fe ff24 	bl	8016f50 <mqtt_create_request>
 8018108:	6178      	str	r0, [r7, #20]
  if (r == NULL) {
 801810a:	697b      	ldr	r3, [r7, #20]
 801810c:	2b00      	cmp	r3, #0
 801810e:	d102      	bne.n	8018116 <mqtt_sub_unsub+0xe6>
    return ERR_MEM;
 8018110:	f04f 33ff 	mov.w	r3, #4294967295
 8018114:	e052      	b.n	80181bc <mqtt_sub_unsub+0x18c>
  }

  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 8018116:	68fb      	ldr	r3, [r7, #12]
 8018118:	f503 732b 	add.w	r3, r3, #684	; 0x2ac
 801811c:	8b7a      	ldrh	r2, [r7, #26]
 801811e:	4611      	mov	r1, r2
 8018120:	4618      	mov	r0, r3
 8018122:	f7ff f96f 	bl	8017404 <mqtt_output_check_space>
 8018126:	4603      	mov	r3, r0
 8018128:	2b00      	cmp	r3, #0
 801812a:	d105      	bne.n	8018138 <mqtt_sub_unsub+0x108>
    mqtt_delete_request(r);
 801812c:	6978      	ldr	r0, [r7, #20]
 801812e:	f7fe ffa1 	bl	8017074 <mqtt_delete_request>
    return ERR_MEM;
 8018132:	f04f 33ff 	mov.w	r3, #4294967295
 8018136:	e041      	b.n	80181bc <mqtt_sub_unsub+0x18c>
  }

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_sub_unsub: Client (un)subscribe to topic \"%s\", id: %d\n", topic, pkt_id));

  mqtt_output_append_fixed_header(&client->output, sub ? MQTT_MSG_TYPE_SUBSCRIBE : MQTT_MSG_TYPE_UNSUBSCRIBE, 0, 1, 0, remaining_length);
 8018138:	68fb      	ldr	r3, [r7, #12]
 801813a:	f503 702b 	add.w	r0, r3, #684	; 0x2ac
 801813e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8018142:	2b00      	cmp	r3, #0
 8018144:	d001      	beq.n	801814a <mqtt_sub_unsub+0x11a>
 8018146:	2108      	movs	r1, #8
 8018148:	e000      	b.n	801814c <mqtt_sub_unsub+0x11c>
 801814a:	210a      	movs	r1, #10
 801814c:	8b7b      	ldrh	r3, [r7, #26]
 801814e:	9301      	str	r3, [sp, #4]
 8018150:	2300      	movs	r3, #0
 8018152:	9300      	str	r3, [sp, #0]
 8018154:	2301      	movs	r3, #1
 8018156:	2200      	movs	r2, #0
 8018158:	f7ff f909 	bl	801736e <mqtt_output_append_fixed_header>
  /* Packet id */
  mqtt_output_append_u16(&client->output, pkt_id);
 801815c:	68fb      	ldr	r3, [r7, #12]
 801815e:	f503 732b 	add.w	r3, r3, #684	; 0x2ac
 8018162:	8b3a      	ldrh	r2, [r7, #24]
 8018164:	4611      	mov	r1, r2
 8018166:	4618      	mov	r0, r3
 8018168:	f7ff f89f 	bl	80172aa <mqtt_output_append_u16>
  /* Topic */
  mqtt_output_append_string(&client->output, topic, topic_len);
 801816c:	68fb      	ldr	r3, [r7, #12]
 801816e:	f503 732b 	add.w	r3, r3, #684	; 0x2ac
 8018172:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8018174:	68b9      	ldr	r1, [r7, #8]
 8018176:	4618      	mov	r0, r3
 8018178:	f7ff f8cd 	bl	8017316 <mqtt_output_append_string>
  /* QoS */
  if (sub != 0) {
 801817c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8018180:	2b00      	cmp	r3, #0
 8018182:	d00b      	beq.n	801819c <mqtt_sub_unsub+0x16c>
    mqtt_output_append_u8(&client->output, LWIP_MIN(qos, 2));
 8018184:	68fb      	ldr	r3, [r7, #12]
 8018186:	f503 722b 	add.w	r2, r3, #684	; 0x2ac
 801818a:	79fb      	ldrb	r3, [r7, #7]
 801818c:	2b02      	cmp	r3, #2
 801818e:	bf28      	it	cs
 8018190:	2302      	movcs	r3, #2
 8018192:	b2db      	uxtb	r3, r3
 8018194:	4619      	mov	r1, r3
 8018196:	4610      	mov	r0, r2
 8018198:	f7ff f878 	bl	801728c <mqtt_output_append_u8>
  }

  mqtt_append_request(&client->pend_req_queue, r);
 801819c:	68fb      	ldr	r3, [r7, #12]
 801819e:	3318      	adds	r3, #24
 80181a0:	6979      	ldr	r1, [r7, #20]
 80181a2:	4618      	mov	r0, r3
 80181a4:	f7fe ff1a 	bl	8016fdc <mqtt_append_request>
  mqtt_output_send(&client->output, client->conn);
 80181a8:	68fb      	ldr	r3, [r7, #12]
 80181aa:	f503 722b 	add.w	r2, r3, #684	; 0x2ac
 80181ae:	68fb      	ldr	r3, [r7, #12]
 80181b0:	68db      	ldr	r3, [r3, #12]
 80181b2:	4619      	mov	r1, r3
 80181b4:	4610      	mov	r0, r2
 80181b6:	f7fe fe17 	bl	8016de8 <mqtt_output_send>
  return ERR_OK;
 80181ba:	2300      	movs	r3, #0
}
 80181bc:	4618      	mov	r0, r3
 80181be:	3728      	adds	r7, #40	; 0x28
 80181c0:	46bd      	mov	sp, r7
 80181c2:	bd80      	pop	{r7, pc}
 80181c4:	0802c17c 	.word	0x0802c17c
 80181c8:	0802c52c 	.word	0x0802c52c
 80181cc:	0802c1f4 	.word	0x0802c1f4
 80181d0:	0802c54c 	.word	0x0802c54c
 80181d4:	0802c56c 	.word	0x0802c56c
 80181d8:	0802c594 	.word	0x0802c594
 80181dc:	0802c5bc 	.word	0x0802c5bc

080181e0 <mqtt_set_inpub_callback>:
 * @param arg User supplied argument to both callbacks
 */
void
mqtt_set_inpub_callback(mqtt_client_t *client, mqtt_incoming_publish_cb_t pub_cb,
                        mqtt_incoming_data_cb_t data_cb, void *arg)
{
 80181e0:	b580      	push	{r7, lr}
 80181e2:	b084      	sub	sp, #16
 80181e4:	af00      	add	r7, sp, #0
 80181e6:	60f8      	str	r0, [r7, #12]
 80181e8:	60b9      	str	r1, [r7, #8]
 80181ea:	607a      	str	r2, [r7, #4]
 80181ec:	603b      	str	r3, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_set_inpub_callback: client != NULL", client != NULL);
 80181ee:	68fb      	ldr	r3, [r7, #12]
 80181f0:	2b00      	cmp	r3, #0
 80181f2:	d106      	bne.n	8018202 <mqtt_set_inpub_callback+0x22>
 80181f4:	4b0b      	ldr	r3, [pc, #44]	; (8018224 <mqtt_set_inpub_callback+0x44>)
 80181f6:	f240 42da 	movw	r2, #1242	; 0x4da
 80181fa:	490b      	ldr	r1, [pc, #44]	; (8018228 <mqtt_set_inpub_callback+0x48>)
 80181fc:	480b      	ldr	r0, [pc, #44]	; (801822c <mqtt_set_inpub_callback+0x4c>)
 80181fe:	f00e fb65 	bl	80268cc <iprintf>
  client->data_cb = data_cb;
 8018202:	68fb      	ldr	r3, [r7, #12]
 8018204:	687a      	ldr	r2, [r7, #4]
 8018206:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
  client->pub_cb = pub_cb;
 801820a:	68fb      	ldr	r3, [r7, #12]
 801820c:	68ba      	ldr	r2, [r7, #8]
 801820e:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
  client->inpub_arg = arg;
 8018212:	68fb      	ldr	r3, [r7, #12]
 8018214:	683a      	ldr	r2, [r7, #0]
 8018216:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
}
 801821a:	bf00      	nop
 801821c:	3710      	adds	r7, #16
 801821e:	46bd      	mov	sp, r7
 8018220:	bd80      	pop	{r7, pc}
 8018222:	bf00      	nop
 8018224:	0802c17c 	.word	0x0802c17c
 8018228:	0802c5d4 	.word	0x0802c5d4
 801822c:	0802c1f4 	.word	0x0802c1f4

08018230 <mqtt_client_new>:
 * Create a new MQTT client instance
 * @return Pointer to instance on success, NULL otherwise
 */
mqtt_client_t *
mqtt_client_new(void)
{
 8018230:	b580      	push	{r7, lr}
 8018232:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();
  return (mqtt_client_t *)mem_calloc(1, sizeof(mqtt_client_t));
 8018234:	f44f 716c 	mov.w	r1, #944	; 0x3b0
 8018238:	2001      	movs	r0, #1
 801823a:	f000 ff17 	bl	801906c <mem_calloc>
 801823e:	4603      	mov	r3, r0
}
 8018240:	4618      	mov	r0, r3
 8018242:	bd80      	pop	{r7, pc}

08018244 <mqtt_client_connect>:
 * @return ERR_OK if successful, @see err_t enum for other results
 */
err_t
mqtt_client_connect(mqtt_client_t *client, const ip_addr_t *ip_addr, u16_t port, mqtt_connection_cb_t cb, void *arg,
                    const struct mqtt_connect_client_info_t *client_info)
{
 8018244:	b580      	push	{r7, lr}
 8018246:	b08c      	sub	sp, #48	; 0x30
 8018248:	af02      	add	r7, sp, #8
 801824a:	60f8      	str	r0, [r7, #12]
 801824c:	60b9      	str	r1, [r7, #8]
 801824e:	603b      	str	r3, [r7, #0]
 8018250:	4613      	mov	r3, r2
 8018252:	80fb      	strh	r3, [r7, #6]
  err_t err;
  size_t len;
  u16_t client_id_length;
  /* Length is the sum of 2+"MQTT", protocol level, flags and keep alive */
  u16_t remaining_length = 2 + 4 + 1 + 1 + 2;
 8018254:	230a      	movs	r3, #10
 8018256:	84bb      	strh	r3, [r7, #36]	; 0x24
  u8_t flags = 0, will_topic_len = 0, will_msg_len = 0;
 8018258:	2300      	movs	r3, #0
 801825a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801825e:	2300      	movs	r3, #0
 8018260:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8018264:	2300      	movs	r3, #0
 8018266:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  u16_t client_user_len = 0, client_pass_len = 0;
 801826a:	2300      	movs	r3, #0
 801826c:	83fb      	strh	r3, [r7, #30]
 801826e:	2300      	movs	r3, #0
 8018270:	83bb      	strh	r3, [r7, #28]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_client_connect: client != NULL", client != NULL);
 8018272:	68fb      	ldr	r3, [r7, #12]
 8018274:	2b00      	cmp	r3, #0
 8018276:	d106      	bne.n	8018286 <mqtt_client_connect+0x42>
 8018278:	4b9e      	ldr	r3, [pc, #632]	; (80184f4 <mqtt_client_connect+0x2b0>)
 801827a:	f240 520f 	movw	r2, #1295	; 0x50f
 801827e:	499e      	ldr	r1, [pc, #632]	; (80184f8 <mqtt_client_connect+0x2b4>)
 8018280:	489e      	ldr	r0, [pc, #632]	; (80184fc <mqtt_client_connect+0x2b8>)
 8018282:	f00e fb23 	bl	80268cc <iprintf>
  LWIP_ASSERT("mqtt_client_connect: ip_addr != NULL", ip_addr != NULL);
 8018286:	68bb      	ldr	r3, [r7, #8]
 8018288:	2b00      	cmp	r3, #0
 801828a:	d106      	bne.n	801829a <mqtt_client_connect+0x56>
 801828c:	4b99      	ldr	r3, [pc, #612]	; (80184f4 <mqtt_client_connect+0x2b0>)
 801828e:	f44f 62a2 	mov.w	r2, #1296	; 0x510
 8018292:	499b      	ldr	r1, [pc, #620]	; (8018500 <mqtt_client_connect+0x2bc>)
 8018294:	4899      	ldr	r0, [pc, #612]	; (80184fc <mqtt_client_connect+0x2b8>)
 8018296:	f00e fb19 	bl	80268cc <iprintf>
  LWIP_ASSERT("mqtt_client_connect: client_info != NULL", client_info != NULL);
 801829a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801829c:	2b00      	cmp	r3, #0
 801829e:	d106      	bne.n	80182ae <mqtt_client_connect+0x6a>
 80182a0:	4b94      	ldr	r3, [pc, #592]	; (80184f4 <mqtt_client_connect+0x2b0>)
 80182a2:	f240 5211 	movw	r2, #1297	; 0x511
 80182a6:	4997      	ldr	r1, [pc, #604]	; (8018504 <mqtt_client_connect+0x2c0>)
 80182a8:	4894      	ldr	r0, [pc, #592]	; (80184fc <mqtt_client_connect+0x2b8>)
 80182aa:	f00e fb0f 	bl	80268cc <iprintf>
  LWIP_ASSERT("mqtt_client_connect: client_info->client_id != NULL", client_info->client_id != NULL);
 80182ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80182b0:	681b      	ldr	r3, [r3, #0]
 80182b2:	2b00      	cmp	r3, #0
 80182b4:	d106      	bne.n	80182c4 <mqtt_client_connect+0x80>
 80182b6:	4b8f      	ldr	r3, [pc, #572]	; (80184f4 <mqtt_client_connect+0x2b0>)
 80182b8:	f240 5212 	movw	r2, #1298	; 0x512
 80182bc:	4992      	ldr	r1, [pc, #584]	; (8018508 <mqtt_client_connect+0x2c4>)
 80182be:	488f      	ldr	r0, [pc, #572]	; (80184fc <mqtt_client_connect+0x2b8>)
 80182c0:	f00e fb04 	bl	80268cc <iprintf>

  if (client->conn_state != TCP_DISCONNECTED) {
 80182c4:	68fb      	ldr	r3, [r7, #12]
 80182c6:	7a9b      	ldrb	r3, [r3, #10]
 80182c8:	2b00      	cmp	r3, #0
 80182ca:	d002      	beq.n	80182d2 <mqtt_client_connect+0x8e>
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_client_connect: Already connected\n"));
    return ERR_ISCONN;
 80182cc:	f06f 0309 	mvn.w	r3, #9
 80182d0:	e223      	b.n	801871a <mqtt_client_connect+0x4d6>
  }

  /* Wipe clean */
  memset(client, 0, sizeof(mqtt_client_t));
 80182d2:	f44f 726c 	mov.w	r2, #944	; 0x3b0
 80182d6:	2100      	movs	r1, #0
 80182d8:	68f8      	ldr	r0, [r7, #12]
 80182da:	f00d fc4b 	bl	8025b74 <memset>
  client->connect_arg = arg;
 80182de:	68fb      	ldr	r3, [r7, #12]
 80182e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80182e2:	611a      	str	r2, [r3, #16]
  client->connect_cb = cb;
 80182e4:	68fb      	ldr	r3, [r7, #12]
 80182e6:	683a      	ldr	r2, [r7, #0]
 80182e8:	615a      	str	r2, [r3, #20]
  client->keep_alive = client_info->keep_alive;
 80182ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80182ec:	899a      	ldrh	r2, [r3, #12]
 80182ee:	68fb      	ldr	r3, [r7, #12]
 80182f0:	805a      	strh	r2, [r3, #2]
  mqtt_init_requests(client->req_list, LWIP_ARRAYSIZE(client->req_list));
 80182f2:	68fb      	ldr	r3, [r7, #12]
 80182f4:	331c      	adds	r3, #28
 80182f6:	2120      	movs	r1, #32
 80182f8:	4618      	mov	r0, r3
 80182fa:	f7fe ff99 	bl	8017230 <mqtt_init_requests>

  /* Build connect message */
  if (client_info->will_topic != NULL && client_info->will_msg != NULL) {
 80182fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018300:	691b      	ldr	r3, [r3, #16]
 8018302:	2b00      	cmp	r3, #0
 8018304:	d073      	beq.n	80183ee <mqtt_client_connect+0x1aa>
 8018306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018308:	695b      	ldr	r3, [r3, #20]
 801830a:	2b00      	cmp	r3, #0
 801830c:	d06f      	beq.n	80183ee <mqtt_client_connect+0x1aa>
    flags |= MQTT_CONNECT_FLAG_WILL;
 801830e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018312:	f043 0304 	orr.w	r3, r3, #4
 8018316:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    flags |= (client_info->will_qos & 3) << 3;
 801831a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801831c:	7e1b      	ldrb	r3, [r3, #24]
 801831e:	00db      	lsls	r3, r3, #3
 8018320:	b25b      	sxtb	r3, r3
 8018322:	f003 0318 	and.w	r3, r3, #24
 8018326:	b25a      	sxtb	r2, r3
 8018328:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801832c:	4313      	orrs	r3, r2
 801832e:	b25b      	sxtb	r3, r3
 8018330:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (client_info->will_retain) {
 8018334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018336:	7e5b      	ldrb	r3, [r3, #25]
 8018338:	2b00      	cmp	r3, #0
 801833a:	d005      	beq.n	8018348 <mqtt_client_connect+0x104>
      flags |= MQTT_CONNECT_FLAG_WILL_RETAIN;
 801833c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018340:	f043 0320 	orr.w	r3, r3, #32
 8018344:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    }
    len = strlen(client_info->will_topic);
 8018348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801834a:	691b      	ldr	r3, [r3, #16]
 801834c:	4618      	mov	r0, r3
 801834e:	f7e7 ff49 	bl	80001e4 <strlen>
 8018352:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->will_topic length overflow", len <= 0xFF, return ERR_VAL);
 8018354:	69bb      	ldr	r3, [r7, #24]
 8018356:	2bff      	cmp	r3, #255	; 0xff
 8018358:	d909      	bls.n	801836e <mqtt_client_connect+0x12a>
 801835a:	4b66      	ldr	r3, [pc, #408]	; (80184f4 <mqtt_client_connect+0x2b0>)
 801835c:	f44f 62a5 	mov.w	r2, #1320	; 0x528
 8018360:	496a      	ldr	r1, [pc, #424]	; (801850c <mqtt_client_connect+0x2c8>)
 8018362:	4866      	ldr	r0, [pc, #408]	; (80184fc <mqtt_client_connect+0x2b8>)
 8018364:	f00e fab2 	bl	80268cc <iprintf>
 8018368:	f06f 0305 	mvn.w	r3, #5
 801836c:	e1d5      	b.n	801871a <mqtt_client_connect+0x4d6>
    LWIP_ERROR("mqtt_client_connect: client_info->will_topic length must be > 0", len > 0, return ERR_VAL);
 801836e:	69bb      	ldr	r3, [r7, #24]
 8018370:	2b00      	cmp	r3, #0
 8018372:	d109      	bne.n	8018388 <mqtt_client_connect+0x144>
 8018374:	4b5f      	ldr	r3, [pc, #380]	; (80184f4 <mqtt_client_connect+0x2b0>)
 8018376:	f240 5229 	movw	r2, #1321	; 0x529
 801837a:	4965      	ldr	r1, [pc, #404]	; (8018510 <mqtt_client_connect+0x2cc>)
 801837c:	485f      	ldr	r0, [pc, #380]	; (80184fc <mqtt_client_connect+0x2b8>)
 801837e:	f00e faa5 	bl	80268cc <iprintf>
 8018382:	f06f 0305 	mvn.w	r3, #5
 8018386:	e1c8      	b.n	801871a <mqtt_client_connect+0x4d6>
    will_topic_len = (u8_t)len;
 8018388:	69bb      	ldr	r3, [r7, #24]
 801838a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    len = strlen(client_info->will_msg);
 801838e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018390:	695b      	ldr	r3, [r3, #20]
 8018392:	4618      	mov	r0, r3
 8018394:	f7e7 ff26 	bl	80001e4 <strlen>
 8018398:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->will_msg length overflow", len <= 0xFF, return ERR_VAL);
 801839a:	69bb      	ldr	r3, [r7, #24]
 801839c:	2bff      	cmp	r3, #255	; 0xff
 801839e:	d909      	bls.n	80183b4 <mqtt_client_connect+0x170>
 80183a0:	4b54      	ldr	r3, [pc, #336]	; (80184f4 <mqtt_client_connect+0x2b0>)
 80183a2:	f240 522c 	movw	r2, #1324	; 0x52c
 80183a6:	495b      	ldr	r1, [pc, #364]	; (8018514 <mqtt_client_connect+0x2d0>)
 80183a8:	4854      	ldr	r0, [pc, #336]	; (80184fc <mqtt_client_connect+0x2b8>)
 80183aa:	f00e fa8f 	bl	80268cc <iprintf>
 80183ae:	f06f 0305 	mvn.w	r3, #5
 80183b2:	e1b2      	b.n	801871a <mqtt_client_connect+0x4d6>
    will_msg_len = (u8_t)len;
 80183b4:	69bb      	ldr	r3, [r7, #24]
 80183b6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    len = remaining_length + 2 + will_topic_len + 2 + will_msg_len;
 80183ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80183bc:	1c9a      	adds	r2, r3, #2
 80183be:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80183c2:	4413      	add	r3, r2
 80183c4:	1c9a      	adds	r2, r3, #2
 80183c6:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80183ca:	4413      	add	r3, r2
 80183cc:	61bb      	str	r3, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 80183ce:	69bb      	ldr	r3, [r7, #24]
 80183d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80183d4:	d309      	bcc.n	80183ea <mqtt_client_connect+0x1a6>
 80183d6:	4b47      	ldr	r3, [pc, #284]	; (80184f4 <mqtt_client_connect+0x2b0>)
 80183d8:	f240 522f 	movw	r2, #1327	; 0x52f
 80183dc:	494e      	ldr	r1, [pc, #312]	; (8018518 <mqtt_client_connect+0x2d4>)
 80183de:	4847      	ldr	r0, [pc, #284]	; (80184fc <mqtt_client_connect+0x2b8>)
 80183e0:	f00e fa74 	bl	80268cc <iprintf>
 80183e4:	f06f 0305 	mvn.w	r3, #5
 80183e8:	e197      	b.n	801871a <mqtt_client_connect+0x4d6>
    remaining_length = (u16_t)len;
 80183ea:	69bb      	ldr	r3, [r7, #24]
 80183ec:	84bb      	strh	r3, [r7, #36]	; 0x24
  }
  if (client_info->client_user != NULL) {
 80183ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80183f0:	685b      	ldr	r3, [r3, #4]
 80183f2:	2b00      	cmp	r3, #0
 80183f4:	d03d      	beq.n	8018472 <mqtt_client_connect+0x22e>
    flags |= MQTT_CONNECT_FLAG_USERNAME;
 80183f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80183fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80183fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    len = strlen(client_info->client_user);
 8018402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018404:	685b      	ldr	r3, [r3, #4]
 8018406:	4618      	mov	r0, r3
 8018408:	f7e7 feec 	bl	80001e4 <strlen>
 801840c:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->client_user length overflow", len <= 0xFFFF, return ERR_VAL);
 801840e:	69bb      	ldr	r3, [r7, #24]
 8018410:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018414:	d309      	bcc.n	801842a <mqtt_client_connect+0x1e6>
 8018416:	4b37      	ldr	r3, [pc, #220]	; (80184f4 <mqtt_client_connect+0x2b0>)
 8018418:	f240 5235 	movw	r2, #1333	; 0x535
 801841c:	493f      	ldr	r1, [pc, #252]	; (801851c <mqtt_client_connect+0x2d8>)
 801841e:	4837      	ldr	r0, [pc, #220]	; (80184fc <mqtt_client_connect+0x2b8>)
 8018420:	f00e fa54 	bl	80268cc <iprintf>
 8018424:	f06f 0305 	mvn.w	r3, #5
 8018428:	e177      	b.n	801871a <mqtt_client_connect+0x4d6>
    LWIP_ERROR("mqtt_client_connect: client_info->client_user length must be > 0", len > 0, return ERR_VAL);
 801842a:	69bb      	ldr	r3, [r7, #24]
 801842c:	2b00      	cmp	r3, #0
 801842e:	d109      	bne.n	8018444 <mqtt_client_connect+0x200>
 8018430:	4b30      	ldr	r3, [pc, #192]	; (80184f4 <mqtt_client_connect+0x2b0>)
 8018432:	f240 5236 	movw	r2, #1334	; 0x536
 8018436:	493a      	ldr	r1, [pc, #232]	; (8018520 <mqtt_client_connect+0x2dc>)
 8018438:	4830      	ldr	r0, [pc, #192]	; (80184fc <mqtt_client_connect+0x2b8>)
 801843a:	f00e fa47 	bl	80268cc <iprintf>
 801843e:	f06f 0305 	mvn.w	r3, #5
 8018442:	e16a      	b.n	801871a <mqtt_client_connect+0x4d6>
    client_user_len = (u16_t)len;
 8018444:	69bb      	ldr	r3, [r7, #24]
 8018446:	83fb      	strh	r3, [r7, #30]
    len = remaining_length + 2 + client_user_len;
 8018448:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801844a:	1c9a      	adds	r2, r3, #2
 801844c:	8bfb      	ldrh	r3, [r7, #30]
 801844e:	4413      	add	r3, r2
 8018450:	61bb      	str	r3, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 8018452:	69bb      	ldr	r3, [r7, #24]
 8018454:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018458:	d309      	bcc.n	801846e <mqtt_client_connect+0x22a>
 801845a:	4b26      	ldr	r3, [pc, #152]	; (80184f4 <mqtt_client_connect+0x2b0>)
 801845c:	f240 5239 	movw	r2, #1337	; 0x539
 8018460:	492d      	ldr	r1, [pc, #180]	; (8018518 <mqtt_client_connect+0x2d4>)
 8018462:	4826      	ldr	r0, [pc, #152]	; (80184fc <mqtt_client_connect+0x2b8>)
 8018464:	f00e fa32 	bl	80268cc <iprintf>
 8018468:	f06f 0305 	mvn.w	r3, #5
 801846c:	e155      	b.n	801871a <mqtt_client_connect+0x4d6>
    remaining_length = (u16_t)len;
 801846e:	69bb      	ldr	r3, [r7, #24]
 8018470:	84bb      	strh	r3, [r7, #36]	; 0x24
  }
  if (client_info->client_pass != NULL) {
 8018472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018474:	689b      	ldr	r3, [r3, #8]
 8018476:	2b00      	cmp	r3, #0
 8018478:	d05a      	beq.n	8018530 <mqtt_client_connect+0x2ec>
    flags |= MQTT_CONNECT_FLAG_PASSWORD;
 801847a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801847e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018482:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    len = strlen(client_info->client_pass);
 8018486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018488:	689b      	ldr	r3, [r3, #8]
 801848a:	4618      	mov	r0, r3
 801848c:	f7e7 feaa 	bl	80001e4 <strlen>
 8018490:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->client_pass length overflow", len <= 0xFFFF, return ERR_VAL);
 8018492:	69bb      	ldr	r3, [r7, #24]
 8018494:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018498:	d309      	bcc.n	80184ae <mqtt_client_connect+0x26a>
 801849a:	4b16      	ldr	r3, [pc, #88]	; (80184f4 <mqtt_client_connect+0x2b0>)
 801849c:	f240 523f 	movw	r2, #1343	; 0x53f
 80184a0:	4920      	ldr	r1, [pc, #128]	; (8018524 <mqtt_client_connect+0x2e0>)
 80184a2:	4816      	ldr	r0, [pc, #88]	; (80184fc <mqtt_client_connect+0x2b8>)
 80184a4:	f00e fa12 	bl	80268cc <iprintf>
 80184a8:	f06f 0305 	mvn.w	r3, #5
 80184ac:	e135      	b.n	801871a <mqtt_client_connect+0x4d6>
    LWIP_ERROR("mqtt_client_connect: client_info->client_pass length must be > 0", len > 0, return ERR_VAL);
 80184ae:	69bb      	ldr	r3, [r7, #24]
 80184b0:	2b00      	cmp	r3, #0
 80184b2:	d109      	bne.n	80184c8 <mqtt_client_connect+0x284>
 80184b4:	4b0f      	ldr	r3, [pc, #60]	; (80184f4 <mqtt_client_connect+0x2b0>)
 80184b6:	f44f 62a8 	mov.w	r2, #1344	; 0x540
 80184ba:	491b      	ldr	r1, [pc, #108]	; (8018528 <mqtt_client_connect+0x2e4>)
 80184bc:	480f      	ldr	r0, [pc, #60]	; (80184fc <mqtt_client_connect+0x2b8>)
 80184be:	f00e fa05 	bl	80268cc <iprintf>
 80184c2:	f06f 0305 	mvn.w	r3, #5
 80184c6:	e128      	b.n	801871a <mqtt_client_connect+0x4d6>
    client_pass_len = (u16_t)len;
 80184c8:	69bb      	ldr	r3, [r7, #24]
 80184ca:	83bb      	strh	r3, [r7, #28]
    len = remaining_length + 2 + client_pass_len;
 80184cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80184ce:	1c9a      	adds	r2, r3, #2
 80184d0:	8bbb      	ldrh	r3, [r7, #28]
 80184d2:	4413      	add	r3, r2
 80184d4:	61bb      	str	r3, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 80184d6:	69bb      	ldr	r3, [r7, #24]
 80184d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80184dc:	d326      	bcc.n	801852c <mqtt_client_connect+0x2e8>
 80184de:	4b05      	ldr	r3, [pc, #20]	; (80184f4 <mqtt_client_connect+0x2b0>)
 80184e0:	f240 5243 	movw	r2, #1347	; 0x543
 80184e4:	490c      	ldr	r1, [pc, #48]	; (8018518 <mqtt_client_connect+0x2d4>)
 80184e6:	4805      	ldr	r0, [pc, #20]	; (80184fc <mqtt_client_connect+0x2b8>)
 80184e8:	f00e f9f0 	bl	80268cc <iprintf>
 80184ec:	f06f 0305 	mvn.w	r3, #5
 80184f0:	e113      	b.n	801871a <mqtt_client_connect+0x4d6>
 80184f2:	bf00      	nop
 80184f4:	0802c17c 	.word	0x0802c17c
 80184f8:	0802c5fc 	.word	0x0802c5fc
 80184fc:	0802c1f4 	.word	0x0802c1f4
 8018500:	0802c620 	.word	0x0802c620
 8018504:	0802c648 	.word	0x0802c648
 8018508:	0802c674 	.word	0x0802c674
 801850c:	0802c6a8 	.word	0x0802c6a8
 8018510:	0802c6e8 	.word	0x0802c6e8
 8018514:	0802c728 	.word	0x0802c728
 8018518:	0802c764 	.word	0x0802c764
 801851c:	0802c794 	.word	0x0802c794
 8018520:	0802c7d4 	.word	0x0802c7d4
 8018524:	0802c818 	.word	0x0802c818
 8018528:	0802c858 	.word	0x0802c858
    remaining_length = (u16_t)len;
 801852c:	69bb      	ldr	r3, [r7, #24]
 801852e:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  /* Don't complicate things, always connect using clean session */
  flags |= MQTT_CONNECT_FLAG_CLEAN_SESSION;
 8018530:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018534:	f043 0302 	orr.w	r3, r3, #2
 8018538:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  len = strlen(client_info->client_id);
 801853c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801853e:	681b      	ldr	r3, [r3, #0]
 8018540:	4618      	mov	r0, r3
 8018542:	f7e7 fe4f 	bl	80001e4 <strlen>
 8018546:	61b8      	str	r0, [r7, #24]
  LWIP_ERROR("mqtt_client_connect: client_info->client_id length overflow", len <= 0xFFFF, return ERR_VAL);
 8018548:	69bb      	ldr	r3, [r7, #24]
 801854a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801854e:	d309      	bcc.n	8018564 <mqtt_client_connect+0x320>
 8018550:	4b74      	ldr	r3, [pc, #464]	; (8018724 <mqtt_client_connect+0x4e0>)
 8018552:	f240 524b 	movw	r2, #1355	; 0x54b
 8018556:	4974      	ldr	r1, [pc, #464]	; (8018728 <mqtt_client_connect+0x4e4>)
 8018558:	4874      	ldr	r0, [pc, #464]	; (801872c <mqtt_client_connect+0x4e8>)
 801855a:	f00e f9b7 	bl	80268cc <iprintf>
 801855e:	f06f 0305 	mvn.w	r3, #5
 8018562:	e0da      	b.n	801871a <mqtt_client_connect+0x4d6>
  client_id_length = (u16_t)len;
 8018564:	69bb      	ldr	r3, [r7, #24]
 8018566:	82fb      	strh	r3, [r7, #22]
  len = remaining_length + 2 + client_id_length;
 8018568:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801856a:	1c9a      	adds	r2, r3, #2
 801856c:	8afb      	ldrh	r3, [r7, #22]
 801856e:	4413      	add	r3, r2
 8018570:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 8018572:	69bb      	ldr	r3, [r7, #24]
 8018574:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018578:	d309      	bcc.n	801858e <mqtt_client_connect+0x34a>
 801857a:	4b6a      	ldr	r3, [pc, #424]	; (8018724 <mqtt_client_connect+0x4e0>)
 801857c:	f240 524e 	movw	r2, #1358	; 0x54e
 8018580:	496b      	ldr	r1, [pc, #428]	; (8018730 <mqtt_client_connect+0x4ec>)
 8018582:	486a      	ldr	r0, [pc, #424]	; (801872c <mqtt_client_connect+0x4e8>)
 8018584:	f00e f9a2 	bl	80268cc <iprintf>
 8018588:	f06f 0305 	mvn.w	r3, #5
 801858c:	e0c5      	b.n	801871a <mqtt_client_connect+0x4d6>
  remaining_length = (u16_t)len;
 801858e:	69bb      	ldr	r3, [r7, #24]
 8018590:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 8018592:	68fb      	ldr	r3, [r7, #12]
 8018594:	f503 732b 	add.w	r3, r3, #684	; 0x2ac
 8018598:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801859a:	4611      	mov	r1, r2
 801859c:	4618      	mov	r0, r3
 801859e:	f7fe ff31 	bl	8017404 <mqtt_output_check_space>
 80185a2:	4603      	mov	r3, r0
 80185a4:	2b00      	cmp	r3, #0
 80185a6:	d102      	bne.n	80185ae <mqtt_client_connect+0x36a>
    return ERR_MEM;
 80185a8:	f04f 33ff 	mov.w	r3, #4294967295
 80185ac:	e0b5      	b.n	801871a <mqtt_client_connect+0x4d6>
  if (client_info->tls_config) {
    client->conn = altcp_tls_new(client_info->tls_config, IP_GET_TYPE(ip_addr));
  } else
#endif
  {
    client->conn = altcp_tcp_new_ip_type(IP_GET_TYPE(ip_addr));
 80185ae:	2000      	movs	r0, #0
 80185b0:	f003 fcd2 	bl	801bf58 <tcp_new_ip_type>
 80185b4:	4602      	mov	r2, r0
 80185b6:	68fb      	ldr	r3, [r7, #12]
 80185b8:	60da      	str	r2, [r3, #12]
  }
  if (client->conn == NULL) {
 80185ba:	68fb      	ldr	r3, [r7, #12]
 80185bc:	68db      	ldr	r3, [r3, #12]
 80185be:	2b00      	cmp	r3, #0
 80185c0:	d102      	bne.n	80185c8 <mqtt_client_connect+0x384>
    return ERR_MEM;
 80185c2:	f04f 33ff 	mov.w	r3, #4294967295
 80185c6:	e0a8      	b.n	801871a <mqtt_client_connect+0x4d6>
  }

  /* Set arg pointer for callbacks */
  altcp_arg(client->conn, client);
 80185c8:	68fb      	ldr	r3, [r7, #12]
 80185ca:	68db      	ldr	r3, [r3, #12]
 80185cc:	68f9      	ldr	r1, [r7, #12]
 80185ce:	4618      	mov	r0, r3
 80185d0:	f003 fcd0 	bl	801bf74 <tcp_arg>
  /* Any local address, pick random local port number */
  err = altcp_bind(client->conn, IP_ADDR_ANY, 0);
 80185d4:	68fb      	ldr	r3, [r7, #12]
 80185d6:	68db      	ldr	r3, [r3, #12]
 80185d8:	2200      	movs	r2, #0
 80185da:	4956      	ldr	r1, [pc, #344]	; (8018734 <mqtt_client_connect+0x4f0>)
 80185dc:	4618      	mov	r0, r3
 80185de:	f002 faff 	bl	801abe0 <tcp_bind>
 80185e2:	4603      	mov	r3, r0
 80185e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (err != ERR_OK) {
 80185e8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80185ec:	2b00      	cmp	r3, #0
 80185ee:	f040 8087 	bne.w	8018700 <mqtt_client_connect+0x4bc>
    goto tcp_fail;
  }
  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_client_connect: Connecting to host: %s at port:%"U16_F"\n", ipaddr_ntoa(ip_addr), port));

  /* Connect to server */
  err = altcp_connect(client->conn, ip_addr, port, mqtt_tcp_connect_cb);
 80185f2:	68fb      	ldr	r3, [r7, #12]
 80185f4:	68d8      	ldr	r0, [r3, #12]
 80185f6:	88fa      	ldrh	r2, [r7, #6]
 80185f8:	4b4f      	ldr	r3, [pc, #316]	; (8018738 <mqtt_client_connect+0x4f4>)
 80185fa:	68b9      	ldr	r1, [r7, #8]
 80185fc:	f002 fd54 	bl	801b0a8 <tcp_connect>
 8018600:	4603      	mov	r3, r0
 8018602:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (err != ERR_OK) {
 8018606:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801860a:	2b00      	cmp	r3, #0
 801860c:	d17a      	bne.n	8018704 <mqtt_client_connect+0x4c0>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_client_connect: Error connecting to remote ip/port, %d\n", err));
    goto tcp_fail;
  }
  /* Set error callback */
  altcp_err(client->conn, mqtt_tcp_err_cb);
 801860e:	68fb      	ldr	r3, [r7, #12]
 8018610:	68db      	ldr	r3, [r3, #12]
 8018612:	494a      	ldr	r1, [pc, #296]	; (801873c <mqtt_client_connect+0x4f8>)
 8018614:	4618      	mov	r0, r3
 8018616:	f003 fd03 	bl	801c020 <tcp_err>
  client->conn_state = TCP_CONNECTING;
 801861a:	68fb      	ldr	r3, [r7, #12]
 801861c:	2201      	movs	r2, #1
 801861e:	729a      	strb	r2, [r3, #10]

  /* Append fixed header */
  mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_CONNECT, 0, 0, 0, remaining_length);
 8018620:	68fb      	ldr	r3, [r7, #12]
 8018622:	f503 702b 	add.w	r0, r3, #684	; 0x2ac
 8018626:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018628:	9301      	str	r3, [sp, #4]
 801862a:	2300      	movs	r3, #0
 801862c:	9300      	str	r3, [sp, #0]
 801862e:	2300      	movs	r3, #0
 8018630:	2200      	movs	r2, #0
 8018632:	2101      	movs	r1, #1
 8018634:	f7fe fe9b 	bl	801736e <mqtt_output_append_fixed_header>
  /* Append Protocol string */
  mqtt_output_append_string(&client->output, "MQTT", 4);
 8018638:	68fb      	ldr	r3, [r7, #12]
 801863a:	f503 732b 	add.w	r3, r3, #684	; 0x2ac
 801863e:	2204      	movs	r2, #4
 8018640:	493f      	ldr	r1, [pc, #252]	; (8018740 <mqtt_client_connect+0x4fc>)
 8018642:	4618      	mov	r0, r3
 8018644:	f7fe fe67 	bl	8017316 <mqtt_output_append_string>
  /* Append Protocol level */
  mqtt_output_append_u8(&client->output, 4);
 8018648:	68fb      	ldr	r3, [r7, #12]
 801864a:	f503 732b 	add.w	r3, r3, #684	; 0x2ac
 801864e:	2104      	movs	r1, #4
 8018650:	4618      	mov	r0, r3
 8018652:	f7fe fe1b 	bl	801728c <mqtt_output_append_u8>
  /* Append connect flags */
  mqtt_output_append_u8(&client->output, flags);
 8018656:	68fb      	ldr	r3, [r7, #12]
 8018658:	f503 732b 	add.w	r3, r3, #684	; 0x2ac
 801865c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8018660:	4611      	mov	r1, r2
 8018662:	4618      	mov	r0, r3
 8018664:	f7fe fe12 	bl	801728c <mqtt_output_append_u8>
  /* Append keep-alive */
  mqtt_output_append_u16(&client->output, client_info->keep_alive);
 8018668:	68fb      	ldr	r3, [r7, #12]
 801866a:	f503 722b 	add.w	r2, r3, #684	; 0x2ac
 801866e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018670:	899b      	ldrh	r3, [r3, #12]
 8018672:	4619      	mov	r1, r3
 8018674:	4610      	mov	r0, r2
 8018676:	f7fe fe18 	bl	80172aa <mqtt_output_append_u16>
  /* Append client id */
  mqtt_output_append_string(&client->output, client_info->client_id, client_id_length);
 801867a:	68fb      	ldr	r3, [r7, #12]
 801867c:	f503 702b 	add.w	r0, r3, #684	; 0x2ac
 8018680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018682:	681b      	ldr	r3, [r3, #0]
 8018684:	8afa      	ldrh	r2, [r7, #22]
 8018686:	4619      	mov	r1, r3
 8018688:	f7fe fe45 	bl	8017316 <mqtt_output_append_string>
  /* Append will message if used */
  if ((flags & MQTT_CONNECT_FLAG_WILL) != 0) {
 801868c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018690:	f003 0304 	and.w	r3, r3, #4
 8018694:	2b00      	cmp	r3, #0
 8018696:	d015      	beq.n	80186c4 <mqtt_client_connect+0x480>
    mqtt_output_append_string(&client->output, client_info->will_topic, will_topic_len);
 8018698:	68fb      	ldr	r3, [r7, #12]
 801869a:	f503 702b 	add.w	r0, r3, #684	; 0x2ac
 801869e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80186a0:	691b      	ldr	r3, [r3, #16]
 80186a2:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80186a6:	b292      	uxth	r2, r2
 80186a8:	4619      	mov	r1, r3
 80186aa:	f7fe fe34 	bl	8017316 <mqtt_output_append_string>
    mqtt_output_append_string(&client->output, client_info->will_msg, will_msg_len);
 80186ae:	68fb      	ldr	r3, [r7, #12]
 80186b0:	f503 702b 	add.w	r0, r3, #684	; 0x2ac
 80186b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80186b6:	695b      	ldr	r3, [r3, #20]
 80186b8:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80186bc:	b292      	uxth	r2, r2
 80186be:	4619      	mov	r1, r3
 80186c0:	f7fe fe29 	bl	8017316 <mqtt_output_append_string>
  }
  /* Append user name if given */
  if ((flags & MQTT_CONNECT_FLAG_USERNAME) != 0) {
 80186c4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80186c8:	2b00      	cmp	r3, #0
 80186ca:	da08      	bge.n	80186de <mqtt_client_connect+0x49a>
    mqtt_output_append_string(&client->output, client_info->client_user, client_user_len);
 80186cc:	68fb      	ldr	r3, [r7, #12]
 80186ce:	f503 702b 	add.w	r0, r3, #684	; 0x2ac
 80186d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80186d4:	685b      	ldr	r3, [r3, #4]
 80186d6:	8bfa      	ldrh	r2, [r7, #30]
 80186d8:	4619      	mov	r1, r3
 80186da:	f7fe fe1c 	bl	8017316 <mqtt_output_append_string>
  }
  /* Append password if given */
  if ((flags & MQTT_CONNECT_FLAG_PASSWORD) != 0) {
 80186de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80186e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80186e6:	2b00      	cmp	r3, #0
 80186e8:	d008      	beq.n	80186fc <mqtt_client_connect+0x4b8>
    mqtt_output_append_string(&client->output, client_info->client_pass, client_pass_len);
 80186ea:	68fb      	ldr	r3, [r7, #12]
 80186ec:	f503 702b 	add.w	r0, r3, #684	; 0x2ac
 80186f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80186f2:	689b      	ldr	r3, [r3, #8]
 80186f4:	8bba      	ldrh	r2, [r7, #28]
 80186f6:	4619      	mov	r1, r3
 80186f8:	f7fe fe0d 	bl	8017316 <mqtt_output_append_string>
  }
  return ERR_OK;
 80186fc:	2300      	movs	r3, #0
 80186fe:	e00c      	b.n	801871a <mqtt_client_connect+0x4d6>
    goto tcp_fail;
 8018700:	bf00      	nop
 8018702:	e000      	b.n	8018706 <mqtt_client_connect+0x4c2>
    goto tcp_fail;
 8018704:	bf00      	nop

tcp_fail:
  altcp_abort(client->conn);
 8018706:	68fb      	ldr	r3, [r7, #12]
 8018708:	68db      	ldr	r3, [r3, #12]
 801870a:	4618      	mov	r0, r3
 801870c:	f002 fa5c 	bl	801abc8 <tcp_abort>
  client->conn = NULL;
 8018710:	68fb      	ldr	r3, [r7, #12]
 8018712:	2200      	movs	r2, #0
 8018714:	60da      	str	r2, [r3, #12]
  return err;
 8018716:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801871a:	4618      	mov	r0, r3
 801871c:	3728      	adds	r7, #40	; 0x28
 801871e:	46bd      	mov	sp, r7
 8018720:	bd80      	pop	{r7, pc}
 8018722:	bf00      	nop
 8018724:	0802c17c 	.word	0x0802c17c
 8018728:	0802c89c 	.word	0x0802c89c
 801872c:	0802c1f4 	.word	0x0802c1f4
 8018730:	0802c764 	.word	0x0802c764
 8018734:	08030e24 	.word	0x08030e24
 8018738:	08017df9 	.word	0x08017df9
 801873c:	08017d81 	.word	0x08017d81
 8018740:	0802c8d8 	.word	0x0802c8d8

08018744 <mqtt_disconnect>:
 * Disconnect from MQTT server
 * @param client MQTT client
 */
void
mqtt_disconnect(mqtt_client_t *client)
{
 8018744:	b580      	push	{r7, lr}
 8018746:	b082      	sub	sp, #8
 8018748:	af00      	add	r7, sp, #0
 801874a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_disconnect: client != NULL", client);
 801874c:	687b      	ldr	r3, [r7, #4]
 801874e:	2b00      	cmp	r3, #0
 8018750:	d106      	bne.n	8018760 <mqtt_disconnect+0x1c>
 8018752:	4b0b      	ldr	r3, [pc, #44]	; (8018780 <mqtt_disconnect+0x3c>)
 8018754:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 8018758:	490a      	ldr	r1, [pc, #40]	; (8018784 <mqtt_disconnect+0x40>)
 801875a:	480b      	ldr	r0, [pc, #44]	; (8018788 <mqtt_disconnect+0x44>)
 801875c:	f00e f8b6 	bl	80268cc <iprintf>
  /* If connection in not already closed */
  if (client->conn_state != TCP_DISCONNECTED) {
 8018760:	687b      	ldr	r3, [r7, #4]
 8018762:	7a9b      	ldrb	r3, [r3, #10]
 8018764:	2b00      	cmp	r3, #0
 8018766:	d006      	beq.n	8018776 <mqtt_disconnect+0x32>
    /* Set conn_state before calling mqtt_close to prevent callback from being called */
    client->conn_state = TCP_DISCONNECTED;
 8018768:	687b      	ldr	r3, [r7, #4]
 801876a:	2200      	movs	r2, #0
 801876c:	729a      	strb	r2, [r3, #10]
    mqtt_close(client, (mqtt_connection_status_t)0);
 801876e:	2100      	movs	r1, #0
 8018770:	6878      	ldr	r0, [r7, #4]
 8018772:	f7fe fe79 	bl	8017468 <mqtt_close>
  }
}
 8018776:	bf00      	nop
 8018778:	3708      	adds	r7, #8
 801877a:	46bd      	mov	sp, r7
 801877c:	bd80      	pop	{r7, pc}
 801877e:	bf00      	nop
 8018780:	0802c17c 	.word	0x0802c17c
 8018784:	0802c8e0 	.word	0x0802c8e0
 8018788:	0802c1f4 	.word	0x0802c1f4

0801878c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 801878c:	b480      	push	{r7}
 801878e:	b083      	sub	sp, #12
 8018790:	af00      	add	r7, sp, #0
 8018792:	4603      	mov	r3, r0
 8018794:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8018796:	88fb      	ldrh	r3, [r7, #6]
 8018798:	021b      	lsls	r3, r3, #8
 801879a:	b21a      	sxth	r2, r3
 801879c:	88fb      	ldrh	r3, [r7, #6]
 801879e:	0a1b      	lsrs	r3, r3, #8
 80187a0:	b29b      	uxth	r3, r3
 80187a2:	b21b      	sxth	r3, r3
 80187a4:	4313      	orrs	r3, r2
 80187a6:	b21b      	sxth	r3, r3
 80187a8:	b29b      	uxth	r3, r3
}
 80187aa:	4618      	mov	r0, r3
 80187ac:	370c      	adds	r7, #12
 80187ae:	46bd      	mov	sp, r7
 80187b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187b4:	4770      	bx	lr

080187b6 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80187b6:	b480      	push	{r7}
 80187b8:	b083      	sub	sp, #12
 80187ba:	af00      	add	r7, sp, #0
 80187bc:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80187be:	687b      	ldr	r3, [r7, #4]
 80187c0:	061a      	lsls	r2, r3, #24
 80187c2:	687b      	ldr	r3, [r7, #4]
 80187c4:	021b      	lsls	r3, r3, #8
 80187c6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80187ca:	431a      	orrs	r2, r3
 80187cc:	687b      	ldr	r3, [r7, #4]
 80187ce:	0a1b      	lsrs	r3, r3, #8
 80187d0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80187d4:	431a      	orrs	r2, r3
 80187d6:	687b      	ldr	r3, [r7, #4]
 80187d8:	0e1b      	lsrs	r3, r3, #24
 80187da:	4313      	orrs	r3, r2
}
 80187dc:	4618      	mov	r0, r3
 80187de:	370c      	adds	r7, #12
 80187e0:	46bd      	mov	sp, r7
 80187e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187e6:	4770      	bx	lr

080187e8 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 80187e8:	b580      	push	{r7, lr}
 80187ea:	b086      	sub	sp, #24
 80187ec:	af00      	add	r7, sp, #0
 80187ee:	60f8      	str	r0, [r7, #12]
 80187f0:	60b9      	str	r1, [r7, #8]
 80187f2:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 80187f4:	68b8      	ldr	r0, [r7, #8]
 80187f6:	f7e7 fcf5 	bl	80001e4 <strlen>
 80187fa:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 80187fc:	693b      	ldr	r3, [r7, #16]
 80187fe:	2b00      	cmp	r3, #0
 8018800:	d101      	bne.n	8018806 <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 8018802:	68fb      	ldr	r3, [r7, #12]
 8018804:	e022      	b.n	801884c <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8018806:	68fb      	ldr	r3, [r7, #12]
 8018808:	617b      	str	r3, [r7, #20]
 801880a:	e012      	b.n	8018832 <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 801880c:	697b      	ldr	r3, [r7, #20]
 801880e:	781a      	ldrb	r2, [r3, #0]
 8018810:	68bb      	ldr	r3, [r7, #8]
 8018812:	781b      	ldrb	r3, [r3, #0]
 8018814:	429a      	cmp	r2, r3
 8018816:	d109      	bne.n	801882c <lwip_strnstr+0x44>
 8018818:	693a      	ldr	r2, [r7, #16]
 801881a:	68b9      	ldr	r1, [r7, #8]
 801881c:	6978      	ldr	r0, [r7, #20]
 801881e:	f00e f9ee 	bl	8026bfe <strncmp>
 8018822:	4603      	mov	r3, r0
 8018824:	2b00      	cmp	r3, #0
 8018826:	d101      	bne.n	801882c <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 8018828:	697b      	ldr	r3, [r7, #20]
 801882a:	e00f      	b.n	801884c <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 801882c:	697b      	ldr	r3, [r7, #20]
 801882e:	3301      	adds	r3, #1
 8018830:	617b      	str	r3, [r7, #20]
 8018832:	697b      	ldr	r3, [r7, #20]
 8018834:	781b      	ldrb	r3, [r3, #0]
 8018836:	2b00      	cmp	r3, #0
 8018838:	d007      	beq.n	801884a <lwip_strnstr+0x62>
 801883a:	697a      	ldr	r2, [r7, #20]
 801883c:	693b      	ldr	r3, [r7, #16]
 801883e:	441a      	add	r2, r3
 8018840:	68f9      	ldr	r1, [r7, #12]
 8018842:	687b      	ldr	r3, [r7, #4]
 8018844:	440b      	add	r3, r1
 8018846:	429a      	cmp	r2, r3
 8018848:	d9e0      	bls.n	801880c <lwip_strnstr+0x24>
    }
  }
  return NULL;
 801884a:	2300      	movs	r3, #0
}
 801884c:	4618      	mov	r0, r3
 801884e:	3718      	adds	r7, #24
 8018850:	46bd      	mov	sp, r7
 8018852:	bd80      	pop	{r7, pc}

08018854 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8018854:	b580      	push	{r7, lr}
 8018856:	b082      	sub	sp, #8
 8018858:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 801885a:	2300      	movs	r3, #0
 801885c:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 801885e:	f00d f88b 	bl	8025978 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8018862:	f000 f8d5 	bl	8018a10 <mem_init>
  memp_init();
 8018866:	f000 fc59 	bl	801911c <memp_init>
  pbuf_init();
  netif_init();
 801886a:	f000 fd1f 	bl	80192ac <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 801886e:	f008 f9d7 	bl	8020c20 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8018872:	f001 feaf 	bl	801a5d4 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8018876:	f008 f8df 	bl	8020a38 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 801887a:	bf00      	nop
 801887c:	3708      	adds	r7, #8
 801887e:	46bd      	mov	sp, r7
 8018880:	bd80      	pop	{r7, pc}
	...

08018884 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8018884:	b480      	push	{r7}
 8018886:	b083      	sub	sp, #12
 8018888:	af00      	add	r7, sp, #0
 801888a:	4603      	mov	r3, r0
 801888c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 801888e:	4b05      	ldr	r3, [pc, #20]	; (80188a4 <ptr_to_mem+0x20>)
 8018890:	681a      	ldr	r2, [r3, #0]
 8018892:	88fb      	ldrh	r3, [r7, #6]
 8018894:	4413      	add	r3, r2
}
 8018896:	4618      	mov	r0, r3
 8018898:	370c      	adds	r7, #12
 801889a:	46bd      	mov	sp, r7
 801889c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188a0:	4770      	bx	lr
 80188a2:	bf00      	nop
 80188a4:	20013be4 	.word	0x20013be4

080188a8 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80188a8:	b480      	push	{r7}
 80188aa:	b083      	sub	sp, #12
 80188ac:	af00      	add	r7, sp, #0
 80188ae:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80188b0:	4b05      	ldr	r3, [pc, #20]	; (80188c8 <mem_to_ptr+0x20>)
 80188b2:	681b      	ldr	r3, [r3, #0]
 80188b4:	687a      	ldr	r2, [r7, #4]
 80188b6:	1ad3      	subs	r3, r2, r3
 80188b8:	b29b      	uxth	r3, r3
}
 80188ba:	4618      	mov	r0, r3
 80188bc:	370c      	adds	r7, #12
 80188be:	46bd      	mov	sp, r7
 80188c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188c4:	4770      	bx	lr
 80188c6:	bf00      	nop
 80188c8:	20013be4 	.word	0x20013be4

080188cc <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80188cc:	b590      	push	{r4, r7, lr}
 80188ce:	b085      	sub	sp, #20
 80188d0:	af00      	add	r7, sp, #0
 80188d2:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80188d4:	4b45      	ldr	r3, [pc, #276]	; (80189ec <plug_holes+0x120>)
 80188d6:	681b      	ldr	r3, [r3, #0]
 80188d8:	687a      	ldr	r2, [r7, #4]
 80188da:	429a      	cmp	r2, r3
 80188dc:	d206      	bcs.n	80188ec <plug_holes+0x20>
 80188de:	4b44      	ldr	r3, [pc, #272]	; (80189f0 <plug_holes+0x124>)
 80188e0:	f240 12df 	movw	r2, #479	; 0x1df
 80188e4:	4943      	ldr	r1, [pc, #268]	; (80189f4 <plug_holes+0x128>)
 80188e6:	4844      	ldr	r0, [pc, #272]	; (80189f8 <plug_holes+0x12c>)
 80188e8:	f00d fff0 	bl	80268cc <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80188ec:	4b43      	ldr	r3, [pc, #268]	; (80189fc <plug_holes+0x130>)
 80188ee:	681b      	ldr	r3, [r3, #0]
 80188f0:	687a      	ldr	r2, [r7, #4]
 80188f2:	429a      	cmp	r2, r3
 80188f4:	d306      	bcc.n	8018904 <plug_holes+0x38>
 80188f6:	4b3e      	ldr	r3, [pc, #248]	; (80189f0 <plug_holes+0x124>)
 80188f8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80188fc:	4940      	ldr	r1, [pc, #256]	; (8018a00 <plug_holes+0x134>)
 80188fe:	483e      	ldr	r0, [pc, #248]	; (80189f8 <plug_holes+0x12c>)
 8018900:	f00d ffe4 	bl	80268cc <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8018904:	687b      	ldr	r3, [r7, #4]
 8018906:	791b      	ldrb	r3, [r3, #4]
 8018908:	2b00      	cmp	r3, #0
 801890a:	d006      	beq.n	801891a <plug_holes+0x4e>
 801890c:	4b38      	ldr	r3, [pc, #224]	; (80189f0 <plug_holes+0x124>)
 801890e:	f240 12e1 	movw	r2, #481	; 0x1e1
 8018912:	493c      	ldr	r1, [pc, #240]	; (8018a04 <plug_holes+0x138>)
 8018914:	4838      	ldr	r0, [pc, #224]	; (80189f8 <plug_holes+0x12c>)
 8018916:	f00d ffd9 	bl	80268cc <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 801891a:	687b      	ldr	r3, [r7, #4]
 801891c:	881b      	ldrh	r3, [r3, #0]
 801891e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8018922:	d906      	bls.n	8018932 <plug_holes+0x66>
 8018924:	4b32      	ldr	r3, [pc, #200]	; (80189f0 <plug_holes+0x124>)
 8018926:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 801892a:	4937      	ldr	r1, [pc, #220]	; (8018a08 <plug_holes+0x13c>)
 801892c:	4832      	ldr	r0, [pc, #200]	; (80189f8 <plug_holes+0x12c>)
 801892e:	f00d ffcd 	bl	80268cc <iprintf>

  nmem = ptr_to_mem(mem->next);
 8018932:	687b      	ldr	r3, [r7, #4]
 8018934:	881b      	ldrh	r3, [r3, #0]
 8018936:	4618      	mov	r0, r3
 8018938:	f7ff ffa4 	bl	8018884 <ptr_to_mem>
 801893c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 801893e:	687a      	ldr	r2, [r7, #4]
 8018940:	68fb      	ldr	r3, [r7, #12]
 8018942:	429a      	cmp	r2, r3
 8018944:	d024      	beq.n	8018990 <plug_holes+0xc4>
 8018946:	68fb      	ldr	r3, [r7, #12]
 8018948:	791b      	ldrb	r3, [r3, #4]
 801894a:	2b00      	cmp	r3, #0
 801894c:	d120      	bne.n	8018990 <plug_holes+0xc4>
 801894e:	4b2b      	ldr	r3, [pc, #172]	; (80189fc <plug_holes+0x130>)
 8018950:	681b      	ldr	r3, [r3, #0]
 8018952:	68fa      	ldr	r2, [r7, #12]
 8018954:	429a      	cmp	r2, r3
 8018956:	d01b      	beq.n	8018990 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8018958:	4b2c      	ldr	r3, [pc, #176]	; (8018a0c <plug_holes+0x140>)
 801895a:	681b      	ldr	r3, [r3, #0]
 801895c:	68fa      	ldr	r2, [r7, #12]
 801895e:	429a      	cmp	r2, r3
 8018960:	d102      	bne.n	8018968 <plug_holes+0x9c>
      lfree = mem;
 8018962:	4a2a      	ldr	r2, [pc, #168]	; (8018a0c <plug_holes+0x140>)
 8018964:	687b      	ldr	r3, [r7, #4]
 8018966:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8018968:	68fb      	ldr	r3, [r7, #12]
 801896a:	881a      	ldrh	r2, [r3, #0]
 801896c:	687b      	ldr	r3, [r7, #4]
 801896e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8018970:	68fb      	ldr	r3, [r7, #12]
 8018972:	881b      	ldrh	r3, [r3, #0]
 8018974:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8018978:	d00a      	beq.n	8018990 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 801897a:	68fb      	ldr	r3, [r7, #12]
 801897c:	881b      	ldrh	r3, [r3, #0]
 801897e:	4618      	mov	r0, r3
 8018980:	f7ff ff80 	bl	8018884 <ptr_to_mem>
 8018984:	4604      	mov	r4, r0
 8018986:	6878      	ldr	r0, [r7, #4]
 8018988:	f7ff ff8e 	bl	80188a8 <mem_to_ptr>
 801898c:	4603      	mov	r3, r0
 801898e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8018990:	687b      	ldr	r3, [r7, #4]
 8018992:	885b      	ldrh	r3, [r3, #2]
 8018994:	4618      	mov	r0, r3
 8018996:	f7ff ff75 	bl	8018884 <ptr_to_mem>
 801899a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 801899c:	68ba      	ldr	r2, [r7, #8]
 801899e:	687b      	ldr	r3, [r7, #4]
 80189a0:	429a      	cmp	r2, r3
 80189a2:	d01f      	beq.n	80189e4 <plug_holes+0x118>
 80189a4:	68bb      	ldr	r3, [r7, #8]
 80189a6:	791b      	ldrb	r3, [r3, #4]
 80189a8:	2b00      	cmp	r3, #0
 80189aa:	d11b      	bne.n	80189e4 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80189ac:	4b17      	ldr	r3, [pc, #92]	; (8018a0c <plug_holes+0x140>)
 80189ae:	681b      	ldr	r3, [r3, #0]
 80189b0:	687a      	ldr	r2, [r7, #4]
 80189b2:	429a      	cmp	r2, r3
 80189b4:	d102      	bne.n	80189bc <plug_holes+0xf0>
      lfree = pmem;
 80189b6:	4a15      	ldr	r2, [pc, #84]	; (8018a0c <plug_holes+0x140>)
 80189b8:	68bb      	ldr	r3, [r7, #8]
 80189ba:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80189bc:	687b      	ldr	r3, [r7, #4]
 80189be:	881a      	ldrh	r2, [r3, #0]
 80189c0:	68bb      	ldr	r3, [r7, #8]
 80189c2:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80189c4:	687b      	ldr	r3, [r7, #4]
 80189c6:	881b      	ldrh	r3, [r3, #0]
 80189c8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80189cc:	d00a      	beq.n	80189e4 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80189ce:	687b      	ldr	r3, [r7, #4]
 80189d0:	881b      	ldrh	r3, [r3, #0]
 80189d2:	4618      	mov	r0, r3
 80189d4:	f7ff ff56 	bl	8018884 <ptr_to_mem>
 80189d8:	4604      	mov	r4, r0
 80189da:	68b8      	ldr	r0, [r7, #8]
 80189dc:	f7ff ff64 	bl	80188a8 <mem_to_ptr>
 80189e0:	4603      	mov	r3, r0
 80189e2:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80189e4:	bf00      	nop
 80189e6:	3714      	adds	r7, #20
 80189e8:	46bd      	mov	sp, r7
 80189ea:	bd90      	pop	{r4, r7, pc}
 80189ec:	20013be4 	.word	0x20013be4
 80189f0:	0802c92c 	.word	0x0802c92c
 80189f4:	0802c95c 	.word	0x0802c95c
 80189f8:	0802c974 	.word	0x0802c974
 80189fc:	20013be8 	.word	0x20013be8
 8018a00:	0802c99c 	.word	0x0802c99c
 8018a04:	0802c9b8 	.word	0x0802c9b8
 8018a08:	0802c9d4 	.word	0x0802c9d4
 8018a0c:	20013bf0 	.word	0x20013bf0

08018a10 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8018a10:	b580      	push	{r7, lr}
 8018a12:	b082      	sub	sp, #8
 8018a14:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8018a16:	4b1f      	ldr	r3, [pc, #124]	; (8018a94 <mem_init+0x84>)
 8018a18:	3303      	adds	r3, #3
 8018a1a:	f023 0303 	bic.w	r3, r3, #3
 8018a1e:	461a      	mov	r2, r3
 8018a20:	4b1d      	ldr	r3, [pc, #116]	; (8018a98 <mem_init+0x88>)
 8018a22:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8018a24:	4b1c      	ldr	r3, [pc, #112]	; (8018a98 <mem_init+0x88>)
 8018a26:	681b      	ldr	r3, [r3, #0]
 8018a28:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8018a2a:	687b      	ldr	r3, [r7, #4]
 8018a2c:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8018a30:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8018a32:	687b      	ldr	r3, [r7, #4]
 8018a34:	2200      	movs	r2, #0
 8018a36:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8018a38:	687b      	ldr	r3, [r7, #4]
 8018a3a:	2200      	movs	r2, #0
 8018a3c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8018a3e:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8018a42:	f7ff ff1f 	bl	8018884 <ptr_to_mem>
 8018a46:	4603      	mov	r3, r0
 8018a48:	4a14      	ldr	r2, [pc, #80]	; (8018a9c <mem_init+0x8c>)
 8018a4a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8018a4c:	4b13      	ldr	r3, [pc, #76]	; (8018a9c <mem_init+0x8c>)
 8018a4e:	681b      	ldr	r3, [r3, #0]
 8018a50:	2201      	movs	r2, #1
 8018a52:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8018a54:	4b11      	ldr	r3, [pc, #68]	; (8018a9c <mem_init+0x8c>)
 8018a56:	681b      	ldr	r3, [r3, #0]
 8018a58:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8018a5c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8018a5e:	4b0f      	ldr	r3, [pc, #60]	; (8018a9c <mem_init+0x8c>)
 8018a60:	681b      	ldr	r3, [r3, #0]
 8018a62:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8018a66:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8018a68:	4b0b      	ldr	r3, [pc, #44]	; (8018a98 <mem_init+0x88>)
 8018a6a:	681b      	ldr	r3, [r3, #0]
 8018a6c:	4a0c      	ldr	r2, [pc, #48]	; (8018aa0 <mem_init+0x90>)
 8018a6e:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8018a70:	480c      	ldr	r0, [pc, #48]	; (8018aa4 <mem_init+0x94>)
 8018a72:	f00c ff8d 	bl	8025990 <sys_mutex_new>
 8018a76:	4603      	mov	r3, r0
 8018a78:	2b00      	cmp	r3, #0
 8018a7a:	d006      	beq.n	8018a8a <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8018a7c:	4b0a      	ldr	r3, [pc, #40]	; (8018aa8 <mem_init+0x98>)
 8018a7e:	f240 221f 	movw	r2, #543	; 0x21f
 8018a82:	490a      	ldr	r1, [pc, #40]	; (8018aac <mem_init+0x9c>)
 8018a84:	480a      	ldr	r0, [pc, #40]	; (8018ab0 <mem_init+0xa0>)
 8018a86:	f00d ff21 	bl	80268cc <iprintf>
  }
}
 8018a8a:	bf00      	nop
 8018a8c:	3708      	adds	r7, #8
 8018a8e:	46bd      	mov	sp, r7
 8018a90:	bd80      	pop	{r7, pc}
 8018a92:	bf00      	nop
 8018a94:	20017b80 	.word	0x20017b80
 8018a98:	20013be4 	.word	0x20013be4
 8018a9c:	20013be8 	.word	0x20013be8
 8018aa0:	20013bf0 	.word	0x20013bf0
 8018aa4:	20013bec 	.word	0x20013bec
 8018aa8:	0802c92c 	.word	0x0802c92c
 8018aac:	0802ca00 	.word	0x0802ca00
 8018ab0:	0802c974 	.word	0x0802c974

08018ab4 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8018ab4:	b580      	push	{r7, lr}
 8018ab6:	b086      	sub	sp, #24
 8018ab8:	af00      	add	r7, sp, #0
 8018aba:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8018abc:	6878      	ldr	r0, [r7, #4]
 8018abe:	f7ff fef3 	bl	80188a8 <mem_to_ptr>
 8018ac2:	4603      	mov	r3, r0
 8018ac4:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8018ac6:	687b      	ldr	r3, [r7, #4]
 8018ac8:	881b      	ldrh	r3, [r3, #0]
 8018aca:	4618      	mov	r0, r3
 8018acc:	f7ff feda 	bl	8018884 <ptr_to_mem>
 8018ad0:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8018ad2:	687b      	ldr	r3, [r7, #4]
 8018ad4:	885b      	ldrh	r3, [r3, #2]
 8018ad6:	4618      	mov	r0, r3
 8018ad8:	f7ff fed4 	bl	8018884 <ptr_to_mem>
 8018adc:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8018ade:	687b      	ldr	r3, [r7, #4]
 8018ae0:	881b      	ldrh	r3, [r3, #0]
 8018ae2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8018ae6:	d818      	bhi.n	8018b1a <mem_link_valid+0x66>
 8018ae8:	687b      	ldr	r3, [r7, #4]
 8018aea:	885b      	ldrh	r3, [r3, #2]
 8018aec:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8018af0:	d813      	bhi.n	8018b1a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8018af2:	687b      	ldr	r3, [r7, #4]
 8018af4:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8018af6:	8afa      	ldrh	r2, [r7, #22]
 8018af8:	429a      	cmp	r2, r3
 8018afa:	d004      	beq.n	8018b06 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8018afc:	68fb      	ldr	r3, [r7, #12]
 8018afe:	881b      	ldrh	r3, [r3, #0]
 8018b00:	8afa      	ldrh	r2, [r7, #22]
 8018b02:	429a      	cmp	r2, r3
 8018b04:	d109      	bne.n	8018b1a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8018b06:	4b08      	ldr	r3, [pc, #32]	; (8018b28 <mem_link_valid+0x74>)
 8018b08:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8018b0a:	693a      	ldr	r2, [r7, #16]
 8018b0c:	429a      	cmp	r2, r3
 8018b0e:	d006      	beq.n	8018b1e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8018b10:	693b      	ldr	r3, [r7, #16]
 8018b12:	885b      	ldrh	r3, [r3, #2]
 8018b14:	8afa      	ldrh	r2, [r7, #22]
 8018b16:	429a      	cmp	r2, r3
 8018b18:	d001      	beq.n	8018b1e <mem_link_valid+0x6a>
    return 0;
 8018b1a:	2300      	movs	r3, #0
 8018b1c:	e000      	b.n	8018b20 <mem_link_valid+0x6c>
  }
  return 1;
 8018b1e:	2301      	movs	r3, #1
}
 8018b20:	4618      	mov	r0, r3
 8018b22:	3718      	adds	r7, #24
 8018b24:	46bd      	mov	sp, r7
 8018b26:	bd80      	pop	{r7, pc}
 8018b28:	20013be8 	.word	0x20013be8

08018b2c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8018b2c:	b580      	push	{r7, lr}
 8018b2e:	b088      	sub	sp, #32
 8018b30:	af00      	add	r7, sp, #0
 8018b32:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8018b34:	687b      	ldr	r3, [r7, #4]
 8018b36:	2b00      	cmp	r3, #0
 8018b38:	d070      	beq.n	8018c1c <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8018b3a:	687b      	ldr	r3, [r7, #4]
 8018b3c:	f003 0303 	and.w	r3, r3, #3
 8018b40:	2b00      	cmp	r3, #0
 8018b42:	d00d      	beq.n	8018b60 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8018b44:	4b37      	ldr	r3, [pc, #220]	; (8018c24 <mem_free+0xf8>)
 8018b46:	f240 2273 	movw	r2, #627	; 0x273
 8018b4a:	4937      	ldr	r1, [pc, #220]	; (8018c28 <mem_free+0xfc>)
 8018b4c:	4837      	ldr	r0, [pc, #220]	; (8018c2c <mem_free+0x100>)
 8018b4e:	f00d febd 	bl	80268cc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8018b52:	f00c ff6f 	bl	8025a34 <sys_arch_protect>
 8018b56:	60f8      	str	r0, [r7, #12]
 8018b58:	68f8      	ldr	r0, [r7, #12]
 8018b5a:	f00c ff79 	bl	8025a50 <sys_arch_unprotect>
    return;
 8018b5e:	e05e      	b.n	8018c1e <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8018b60:	687b      	ldr	r3, [r7, #4]
 8018b62:	3b08      	subs	r3, #8
 8018b64:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8018b66:	4b32      	ldr	r3, [pc, #200]	; (8018c30 <mem_free+0x104>)
 8018b68:	681b      	ldr	r3, [r3, #0]
 8018b6a:	69fa      	ldr	r2, [r7, #28]
 8018b6c:	429a      	cmp	r2, r3
 8018b6e:	d306      	bcc.n	8018b7e <mem_free+0x52>
 8018b70:	687b      	ldr	r3, [r7, #4]
 8018b72:	f103 020c 	add.w	r2, r3, #12
 8018b76:	4b2f      	ldr	r3, [pc, #188]	; (8018c34 <mem_free+0x108>)
 8018b78:	681b      	ldr	r3, [r3, #0]
 8018b7a:	429a      	cmp	r2, r3
 8018b7c:	d90d      	bls.n	8018b9a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8018b7e:	4b29      	ldr	r3, [pc, #164]	; (8018c24 <mem_free+0xf8>)
 8018b80:	f240 227f 	movw	r2, #639	; 0x27f
 8018b84:	492c      	ldr	r1, [pc, #176]	; (8018c38 <mem_free+0x10c>)
 8018b86:	4829      	ldr	r0, [pc, #164]	; (8018c2c <mem_free+0x100>)
 8018b88:	f00d fea0 	bl	80268cc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8018b8c:	f00c ff52 	bl	8025a34 <sys_arch_protect>
 8018b90:	6138      	str	r0, [r7, #16]
 8018b92:	6938      	ldr	r0, [r7, #16]
 8018b94:	f00c ff5c 	bl	8025a50 <sys_arch_unprotect>
    return;
 8018b98:	e041      	b.n	8018c1e <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8018b9a:	4828      	ldr	r0, [pc, #160]	; (8018c3c <mem_free+0x110>)
 8018b9c:	f00c ff0e 	bl	80259bc <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8018ba0:	69fb      	ldr	r3, [r7, #28]
 8018ba2:	791b      	ldrb	r3, [r3, #4]
 8018ba4:	2b00      	cmp	r3, #0
 8018ba6:	d110      	bne.n	8018bca <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8018ba8:	4b1e      	ldr	r3, [pc, #120]	; (8018c24 <mem_free+0xf8>)
 8018baa:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8018bae:	4924      	ldr	r1, [pc, #144]	; (8018c40 <mem_free+0x114>)
 8018bb0:	481e      	ldr	r0, [pc, #120]	; (8018c2c <mem_free+0x100>)
 8018bb2:	f00d fe8b 	bl	80268cc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8018bb6:	4821      	ldr	r0, [pc, #132]	; (8018c3c <mem_free+0x110>)
 8018bb8:	f00c ff0f 	bl	80259da <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8018bbc:	f00c ff3a 	bl	8025a34 <sys_arch_protect>
 8018bc0:	6178      	str	r0, [r7, #20]
 8018bc2:	6978      	ldr	r0, [r7, #20]
 8018bc4:	f00c ff44 	bl	8025a50 <sys_arch_unprotect>
    return;
 8018bc8:	e029      	b.n	8018c1e <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8018bca:	69f8      	ldr	r0, [r7, #28]
 8018bcc:	f7ff ff72 	bl	8018ab4 <mem_link_valid>
 8018bd0:	4603      	mov	r3, r0
 8018bd2:	2b00      	cmp	r3, #0
 8018bd4:	d110      	bne.n	8018bf8 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8018bd6:	4b13      	ldr	r3, [pc, #76]	; (8018c24 <mem_free+0xf8>)
 8018bd8:	f240 2295 	movw	r2, #661	; 0x295
 8018bdc:	4919      	ldr	r1, [pc, #100]	; (8018c44 <mem_free+0x118>)
 8018bde:	4813      	ldr	r0, [pc, #76]	; (8018c2c <mem_free+0x100>)
 8018be0:	f00d fe74 	bl	80268cc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8018be4:	4815      	ldr	r0, [pc, #84]	; (8018c3c <mem_free+0x110>)
 8018be6:	f00c fef8 	bl	80259da <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8018bea:	f00c ff23 	bl	8025a34 <sys_arch_protect>
 8018bee:	61b8      	str	r0, [r7, #24]
 8018bf0:	69b8      	ldr	r0, [r7, #24]
 8018bf2:	f00c ff2d 	bl	8025a50 <sys_arch_unprotect>
    return;
 8018bf6:	e012      	b.n	8018c1e <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8018bf8:	69fb      	ldr	r3, [r7, #28]
 8018bfa:	2200      	movs	r2, #0
 8018bfc:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8018bfe:	4b12      	ldr	r3, [pc, #72]	; (8018c48 <mem_free+0x11c>)
 8018c00:	681b      	ldr	r3, [r3, #0]
 8018c02:	69fa      	ldr	r2, [r7, #28]
 8018c04:	429a      	cmp	r2, r3
 8018c06:	d202      	bcs.n	8018c0e <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8018c08:	4a0f      	ldr	r2, [pc, #60]	; (8018c48 <mem_free+0x11c>)
 8018c0a:	69fb      	ldr	r3, [r7, #28]
 8018c0c:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8018c0e:	69f8      	ldr	r0, [r7, #28]
 8018c10:	f7ff fe5c 	bl	80188cc <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8018c14:	4809      	ldr	r0, [pc, #36]	; (8018c3c <mem_free+0x110>)
 8018c16:	f00c fee0 	bl	80259da <sys_mutex_unlock>
 8018c1a:	e000      	b.n	8018c1e <mem_free+0xf2>
    return;
 8018c1c:	bf00      	nop
}
 8018c1e:	3720      	adds	r7, #32
 8018c20:	46bd      	mov	sp, r7
 8018c22:	bd80      	pop	{r7, pc}
 8018c24:	0802c92c 	.word	0x0802c92c
 8018c28:	0802ca1c 	.word	0x0802ca1c
 8018c2c:	0802c974 	.word	0x0802c974
 8018c30:	20013be4 	.word	0x20013be4
 8018c34:	20013be8 	.word	0x20013be8
 8018c38:	0802ca40 	.word	0x0802ca40
 8018c3c:	20013bec 	.word	0x20013bec
 8018c40:	0802ca5c 	.word	0x0802ca5c
 8018c44:	0802ca84 	.word	0x0802ca84
 8018c48:	20013bf0 	.word	0x20013bf0

08018c4c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8018c4c:	b580      	push	{r7, lr}
 8018c4e:	b088      	sub	sp, #32
 8018c50:	af00      	add	r7, sp, #0
 8018c52:	6078      	str	r0, [r7, #4]
 8018c54:	460b      	mov	r3, r1
 8018c56:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8018c58:	887b      	ldrh	r3, [r7, #2]
 8018c5a:	3303      	adds	r3, #3
 8018c5c:	b29b      	uxth	r3, r3
 8018c5e:	f023 0303 	bic.w	r3, r3, #3
 8018c62:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8018c64:	8bfb      	ldrh	r3, [r7, #30]
 8018c66:	2b0b      	cmp	r3, #11
 8018c68:	d801      	bhi.n	8018c6e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8018c6a:	230c      	movs	r3, #12
 8018c6c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8018c6e:	8bfb      	ldrh	r3, [r7, #30]
 8018c70:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8018c74:	d803      	bhi.n	8018c7e <mem_trim+0x32>
 8018c76:	8bfa      	ldrh	r2, [r7, #30]
 8018c78:	887b      	ldrh	r3, [r7, #2]
 8018c7a:	429a      	cmp	r2, r3
 8018c7c:	d201      	bcs.n	8018c82 <mem_trim+0x36>
    return NULL;
 8018c7e:	2300      	movs	r3, #0
 8018c80:	e0d8      	b.n	8018e34 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8018c82:	4b6e      	ldr	r3, [pc, #440]	; (8018e3c <mem_trim+0x1f0>)
 8018c84:	681b      	ldr	r3, [r3, #0]
 8018c86:	687a      	ldr	r2, [r7, #4]
 8018c88:	429a      	cmp	r2, r3
 8018c8a:	d304      	bcc.n	8018c96 <mem_trim+0x4a>
 8018c8c:	4b6c      	ldr	r3, [pc, #432]	; (8018e40 <mem_trim+0x1f4>)
 8018c8e:	681b      	ldr	r3, [r3, #0]
 8018c90:	687a      	ldr	r2, [r7, #4]
 8018c92:	429a      	cmp	r2, r3
 8018c94:	d306      	bcc.n	8018ca4 <mem_trim+0x58>
 8018c96:	4b6b      	ldr	r3, [pc, #428]	; (8018e44 <mem_trim+0x1f8>)
 8018c98:	f240 22d1 	movw	r2, #721	; 0x2d1
 8018c9c:	496a      	ldr	r1, [pc, #424]	; (8018e48 <mem_trim+0x1fc>)
 8018c9e:	486b      	ldr	r0, [pc, #428]	; (8018e4c <mem_trim+0x200>)
 8018ca0:	f00d fe14 	bl	80268cc <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8018ca4:	4b65      	ldr	r3, [pc, #404]	; (8018e3c <mem_trim+0x1f0>)
 8018ca6:	681b      	ldr	r3, [r3, #0]
 8018ca8:	687a      	ldr	r2, [r7, #4]
 8018caa:	429a      	cmp	r2, r3
 8018cac:	d304      	bcc.n	8018cb8 <mem_trim+0x6c>
 8018cae:	4b64      	ldr	r3, [pc, #400]	; (8018e40 <mem_trim+0x1f4>)
 8018cb0:	681b      	ldr	r3, [r3, #0]
 8018cb2:	687a      	ldr	r2, [r7, #4]
 8018cb4:	429a      	cmp	r2, r3
 8018cb6:	d307      	bcc.n	8018cc8 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8018cb8:	f00c febc 	bl	8025a34 <sys_arch_protect>
 8018cbc:	60b8      	str	r0, [r7, #8]
 8018cbe:	68b8      	ldr	r0, [r7, #8]
 8018cc0:	f00c fec6 	bl	8025a50 <sys_arch_unprotect>
    return rmem;
 8018cc4:	687b      	ldr	r3, [r7, #4]
 8018cc6:	e0b5      	b.n	8018e34 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8018cc8:	687b      	ldr	r3, [r7, #4]
 8018cca:	3b08      	subs	r3, #8
 8018ccc:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8018cce:	69b8      	ldr	r0, [r7, #24]
 8018cd0:	f7ff fdea 	bl	80188a8 <mem_to_ptr>
 8018cd4:	4603      	mov	r3, r0
 8018cd6:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8018cd8:	69bb      	ldr	r3, [r7, #24]
 8018cda:	881a      	ldrh	r2, [r3, #0]
 8018cdc:	8afb      	ldrh	r3, [r7, #22]
 8018cde:	1ad3      	subs	r3, r2, r3
 8018ce0:	b29b      	uxth	r3, r3
 8018ce2:	3b08      	subs	r3, #8
 8018ce4:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8018ce6:	8bfa      	ldrh	r2, [r7, #30]
 8018ce8:	8abb      	ldrh	r3, [r7, #20]
 8018cea:	429a      	cmp	r2, r3
 8018cec:	d906      	bls.n	8018cfc <mem_trim+0xb0>
 8018cee:	4b55      	ldr	r3, [pc, #340]	; (8018e44 <mem_trim+0x1f8>)
 8018cf0:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8018cf4:	4956      	ldr	r1, [pc, #344]	; (8018e50 <mem_trim+0x204>)
 8018cf6:	4855      	ldr	r0, [pc, #340]	; (8018e4c <mem_trim+0x200>)
 8018cf8:	f00d fde8 	bl	80268cc <iprintf>
  if (newsize > size) {
 8018cfc:	8bfa      	ldrh	r2, [r7, #30]
 8018cfe:	8abb      	ldrh	r3, [r7, #20]
 8018d00:	429a      	cmp	r2, r3
 8018d02:	d901      	bls.n	8018d08 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8018d04:	2300      	movs	r3, #0
 8018d06:	e095      	b.n	8018e34 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8018d08:	8bfa      	ldrh	r2, [r7, #30]
 8018d0a:	8abb      	ldrh	r3, [r7, #20]
 8018d0c:	429a      	cmp	r2, r3
 8018d0e:	d101      	bne.n	8018d14 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8018d10:	687b      	ldr	r3, [r7, #4]
 8018d12:	e08f      	b.n	8018e34 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8018d14:	484f      	ldr	r0, [pc, #316]	; (8018e54 <mem_trim+0x208>)
 8018d16:	f00c fe51 	bl	80259bc <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8018d1a:	69bb      	ldr	r3, [r7, #24]
 8018d1c:	881b      	ldrh	r3, [r3, #0]
 8018d1e:	4618      	mov	r0, r3
 8018d20:	f7ff fdb0 	bl	8018884 <ptr_to_mem>
 8018d24:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8018d26:	693b      	ldr	r3, [r7, #16]
 8018d28:	791b      	ldrb	r3, [r3, #4]
 8018d2a:	2b00      	cmp	r3, #0
 8018d2c:	d13f      	bne.n	8018dae <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8018d2e:	69bb      	ldr	r3, [r7, #24]
 8018d30:	881b      	ldrh	r3, [r3, #0]
 8018d32:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8018d36:	d106      	bne.n	8018d46 <mem_trim+0xfa>
 8018d38:	4b42      	ldr	r3, [pc, #264]	; (8018e44 <mem_trim+0x1f8>)
 8018d3a:	f240 22f5 	movw	r2, #757	; 0x2f5
 8018d3e:	4946      	ldr	r1, [pc, #280]	; (8018e58 <mem_trim+0x20c>)
 8018d40:	4842      	ldr	r0, [pc, #264]	; (8018e4c <mem_trim+0x200>)
 8018d42:	f00d fdc3 	bl	80268cc <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8018d46:	693b      	ldr	r3, [r7, #16]
 8018d48:	881b      	ldrh	r3, [r3, #0]
 8018d4a:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8018d4c:	8afa      	ldrh	r2, [r7, #22]
 8018d4e:	8bfb      	ldrh	r3, [r7, #30]
 8018d50:	4413      	add	r3, r2
 8018d52:	b29b      	uxth	r3, r3
 8018d54:	3308      	adds	r3, #8
 8018d56:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8018d58:	4b40      	ldr	r3, [pc, #256]	; (8018e5c <mem_trim+0x210>)
 8018d5a:	681b      	ldr	r3, [r3, #0]
 8018d5c:	693a      	ldr	r2, [r7, #16]
 8018d5e:	429a      	cmp	r2, r3
 8018d60:	d106      	bne.n	8018d70 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 8018d62:	89fb      	ldrh	r3, [r7, #14]
 8018d64:	4618      	mov	r0, r3
 8018d66:	f7ff fd8d 	bl	8018884 <ptr_to_mem>
 8018d6a:	4603      	mov	r3, r0
 8018d6c:	4a3b      	ldr	r2, [pc, #236]	; (8018e5c <mem_trim+0x210>)
 8018d6e:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8018d70:	89fb      	ldrh	r3, [r7, #14]
 8018d72:	4618      	mov	r0, r3
 8018d74:	f7ff fd86 	bl	8018884 <ptr_to_mem>
 8018d78:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8018d7a:	693b      	ldr	r3, [r7, #16]
 8018d7c:	2200      	movs	r2, #0
 8018d7e:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8018d80:	693b      	ldr	r3, [r7, #16]
 8018d82:	89ba      	ldrh	r2, [r7, #12]
 8018d84:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8018d86:	693b      	ldr	r3, [r7, #16]
 8018d88:	8afa      	ldrh	r2, [r7, #22]
 8018d8a:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8018d8c:	69bb      	ldr	r3, [r7, #24]
 8018d8e:	89fa      	ldrh	r2, [r7, #14]
 8018d90:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8018d92:	693b      	ldr	r3, [r7, #16]
 8018d94:	881b      	ldrh	r3, [r3, #0]
 8018d96:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8018d9a:	d047      	beq.n	8018e2c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8018d9c:	693b      	ldr	r3, [r7, #16]
 8018d9e:	881b      	ldrh	r3, [r3, #0]
 8018da0:	4618      	mov	r0, r3
 8018da2:	f7ff fd6f 	bl	8018884 <ptr_to_mem>
 8018da6:	4602      	mov	r2, r0
 8018da8:	89fb      	ldrh	r3, [r7, #14]
 8018daa:	8053      	strh	r3, [r2, #2]
 8018dac:	e03e      	b.n	8018e2c <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8018dae:	8bfb      	ldrh	r3, [r7, #30]
 8018db0:	f103 0214 	add.w	r2, r3, #20
 8018db4:	8abb      	ldrh	r3, [r7, #20]
 8018db6:	429a      	cmp	r2, r3
 8018db8:	d838      	bhi.n	8018e2c <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8018dba:	8afa      	ldrh	r2, [r7, #22]
 8018dbc:	8bfb      	ldrh	r3, [r7, #30]
 8018dbe:	4413      	add	r3, r2
 8018dc0:	b29b      	uxth	r3, r3
 8018dc2:	3308      	adds	r3, #8
 8018dc4:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8018dc6:	69bb      	ldr	r3, [r7, #24]
 8018dc8:	881b      	ldrh	r3, [r3, #0]
 8018dca:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8018dce:	d106      	bne.n	8018dde <mem_trim+0x192>
 8018dd0:	4b1c      	ldr	r3, [pc, #112]	; (8018e44 <mem_trim+0x1f8>)
 8018dd2:	f240 3216 	movw	r2, #790	; 0x316
 8018dd6:	4920      	ldr	r1, [pc, #128]	; (8018e58 <mem_trim+0x20c>)
 8018dd8:	481c      	ldr	r0, [pc, #112]	; (8018e4c <mem_trim+0x200>)
 8018dda:	f00d fd77 	bl	80268cc <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8018dde:	89fb      	ldrh	r3, [r7, #14]
 8018de0:	4618      	mov	r0, r3
 8018de2:	f7ff fd4f 	bl	8018884 <ptr_to_mem>
 8018de6:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8018de8:	4b1c      	ldr	r3, [pc, #112]	; (8018e5c <mem_trim+0x210>)
 8018dea:	681b      	ldr	r3, [r3, #0]
 8018dec:	693a      	ldr	r2, [r7, #16]
 8018dee:	429a      	cmp	r2, r3
 8018df0:	d202      	bcs.n	8018df8 <mem_trim+0x1ac>
      lfree = mem2;
 8018df2:	4a1a      	ldr	r2, [pc, #104]	; (8018e5c <mem_trim+0x210>)
 8018df4:	693b      	ldr	r3, [r7, #16]
 8018df6:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8018df8:	693b      	ldr	r3, [r7, #16]
 8018dfa:	2200      	movs	r2, #0
 8018dfc:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8018dfe:	69bb      	ldr	r3, [r7, #24]
 8018e00:	881a      	ldrh	r2, [r3, #0]
 8018e02:	693b      	ldr	r3, [r7, #16]
 8018e04:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8018e06:	693b      	ldr	r3, [r7, #16]
 8018e08:	8afa      	ldrh	r2, [r7, #22]
 8018e0a:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8018e0c:	69bb      	ldr	r3, [r7, #24]
 8018e0e:	89fa      	ldrh	r2, [r7, #14]
 8018e10:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8018e12:	693b      	ldr	r3, [r7, #16]
 8018e14:	881b      	ldrh	r3, [r3, #0]
 8018e16:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8018e1a:	d007      	beq.n	8018e2c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8018e1c:	693b      	ldr	r3, [r7, #16]
 8018e1e:	881b      	ldrh	r3, [r3, #0]
 8018e20:	4618      	mov	r0, r3
 8018e22:	f7ff fd2f 	bl	8018884 <ptr_to_mem>
 8018e26:	4602      	mov	r2, r0
 8018e28:	89fb      	ldrh	r3, [r7, #14]
 8018e2a:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8018e2c:	4809      	ldr	r0, [pc, #36]	; (8018e54 <mem_trim+0x208>)
 8018e2e:	f00c fdd4 	bl	80259da <sys_mutex_unlock>
  return rmem;
 8018e32:	687b      	ldr	r3, [r7, #4]
}
 8018e34:	4618      	mov	r0, r3
 8018e36:	3720      	adds	r7, #32
 8018e38:	46bd      	mov	sp, r7
 8018e3a:	bd80      	pop	{r7, pc}
 8018e3c:	20013be4 	.word	0x20013be4
 8018e40:	20013be8 	.word	0x20013be8
 8018e44:	0802c92c 	.word	0x0802c92c
 8018e48:	0802cab8 	.word	0x0802cab8
 8018e4c:	0802c974 	.word	0x0802c974
 8018e50:	0802cad0 	.word	0x0802cad0
 8018e54:	20013bec 	.word	0x20013bec
 8018e58:	0802caf0 	.word	0x0802caf0
 8018e5c:	20013bf0 	.word	0x20013bf0

08018e60 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8018e60:	b580      	push	{r7, lr}
 8018e62:	b088      	sub	sp, #32
 8018e64:	af00      	add	r7, sp, #0
 8018e66:	4603      	mov	r3, r0
 8018e68:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8018e6a:	88fb      	ldrh	r3, [r7, #6]
 8018e6c:	2b00      	cmp	r3, #0
 8018e6e:	d101      	bne.n	8018e74 <mem_malloc+0x14>
    return NULL;
 8018e70:	2300      	movs	r3, #0
 8018e72:	e0e2      	b.n	801903a <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8018e74:	88fb      	ldrh	r3, [r7, #6]
 8018e76:	3303      	adds	r3, #3
 8018e78:	b29b      	uxth	r3, r3
 8018e7a:	f023 0303 	bic.w	r3, r3, #3
 8018e7e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8018e80:	8bbb      	ldrh	r3, [r7, #28]
 8018e82:	2b0b      	cmp	r3, #11
 8018e84:	d801      	bhi.n	8018e8a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8018e86:	230c      	movs	r3, #12
 8018e88:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8018e8a:	8bbb      	ldrh	r3, [r7, #28]
 8018e8c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8018e90:	d803      	bhi.n	8018e9a <mem_malloc+0x3a>
 8018e92:	8bba      	ldrh	r2, [r7, #28]
 8018e94:	88fb      	ldrh	r3, [r7, #6]
 8018e96:	429a      	cmp	r2, r3
 8018e98:	d201      	bcs.n	8018e9e <mem_malloc+0x3e>
    return NULL;
 8018e9a:	2300      	movs	r3, #0
 8018e9c:	e0cd      	b.n	801903a <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8018e9e:	4869      	ldr	r0, [pc, #420]	; (8019044 <mem_malloc+0x1e4>)
 8018ea0:	f00c fd8c 	bl	80259bc <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8018ea4:	4b68      	ldr	r3, [pc, #416]	; (8019048 <mem_malloc+0x1e8>)
 8018ea6:	681b      	ldr	r3, [r3, #0]
 8018ea8:	4618      	mov	r0, r3
 8018eaa:	f7ff fcfd 	bl	80188a8 <mem_to_ptr>
 8018eae:	4603      	mov	r3, r0
 8018eb0:	83fb      	strh	r3, [r7, #30]
 8018eb2:	e0b7      	b.n	8019024 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8018eb4:	8bfb      	ldrh	r3, [r7, #30]
 8018eb6:	4618      	mov	r0, r3
 8018eb8:	f7ff fce4 	bl	8018884 <ptr_to_mem>
 8018ebc:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8018ebe:	697b      	ldr	r3, [r7, #20]
 8018ec0:	791b      	ldrb	r3, [r3, #4]
 8018ec2:	2b00      	cmp	r3, #0
 8018ec4:	f040 80a7 	bne.w	8019016 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8018ec8:	697b      	ldr	r3, [r7, #20]
 8018eca:	881b      	ldrh	r3, [r3, #0]
 8018ecc:	461a      	mov	r2, r3
 8018ece:	8bfb      	ldrh	r3, [r7, #30]
 8018ed0:	1ad3      	subs	r3, r2, r3
 8018ed2:	f1a3 0208 	sub.w	r2, r3, #8
 8018ed6:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8018ed8:	429a      	cmp	r2, r3
 8018eda:	f0c0 809c 	bcc.w	8019016 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8018ede:	697b      	ldr	r3, [r7, #20]
 8018ee0:	881b      	ldrh	r3, [r3, #0]
 8018ee2:	461a      	mov	r2, r3
 8018ee4:	8bfb      	ldrh	r3, [r7, #30]
 8018ee6:	1ad3      	subs	r3, r2, r3
 8018ee8:	f1a3 0208 	sub.w	r2, r3, #8
 8018eec:	8bbb      	ldrh	r3, [r7, #28]
 8018eee:	3314      	adds	r3, #20
 8018ef0:	429a      	cmp	r2, r3
 8018ef2:	d333      	bcc.n	8018f5c <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8018ef4:	8bfa      	ldrh	r2, [r7, #30]
 8018ef6:	8bbb      	ldrh	r3, [r7, #28]
 8018ef8:	4413      	add	r3, r2
 8018efa:	b29b      	uxth	r3, r3
 8018efc:	3308      	adds	r3, #8
 8018efe:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8018f00:	8a7b      	ldrh	r3, [r7, #18]
 8018f02:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8018f06:	d106      	bne.n	8018f16 <mem_malloc+0xb6>
 8018f08:	4b50      	ldr	r3, [pc, #320]	; (801904c <mem_malloc+0x1ec>)
 8018f0a:	f240 3287 	movw	r2, #903	; 0x387
 8018f0e:	4950      	ldr	r1, [pc, #320]	; (8019050 <mem_malloc+0x1f0>)
 8018f10:	4850      	ldr	r0, [pc, #320]	; (8019054 <mem_malloc+0x1f4>)
 8018f12:	f00d fcdb 	bl	80268cc <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8018f16:	8a7b      	ldrh	r3, [r7, #18]
 8018f18:	4618      	mov	r0, r3
 8018f1a:	f7ff fcb3 	bl	8018884 <ptr_to_mem>
 8018f1e:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8018f20:	68fb      	ldr	r3, [r7, #12]
 8018f22:	2200      	movs	r2, #0
 8018f24:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8018f26:	697b      	ldr	r3, [r7, #20]
 8018f28:	881a      	ldrh	r2, [r3, #0]
 8018f2a:	68fb      	ldr	r3, [r7, #12]
 8018f2c:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8018f2e:	68fb      	ldr	r3, [r7, #12]
 8018f30:	8bfa      	ldrh	r2, [r7, #30]
 8018f32:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8018f34:	697b      	ldr	r3, [r7, #20]
 8018f36:	8a7a      	ldrh	r2, [r7, #18]
 8018f38:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8018f3a:	697b      	ldr	r3, [r7, #20]
 8018f3c:	2201      	movs	r2, #1
 8018f3e:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8018f40:	68fb      	ldr	r3, [r7, #12]
 8018f42:	881b      	ldrh	r3, [r3, #0]
 8018f44:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8018f48:	d00b      	beq.n	8018f62 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8018f4a:	68fb      	ldr	r3, [r7, #12]
 8018f4c:	881b      	ldrh	r3, [r3, #0]
 8018f4e:	4618      	mov	r0, r3
 8018f50:	f7ff fc98 	bl	8018884 <ptr_to_mem>
 8018f54:	4602      	mov	r2, r0
 8018f56:	8a7b      	ldrh	r3, [r7, #18]
 8018f58:	8053      	strh	r3, [r2, #2]
 8018f5a:	e002      	b.n	8018f62 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8018f5c:	697b      	ldr	r3, [r7, #20]
 8018f5e:	2201      	movs	r2, #1
 8018f60:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8018f62:	4b39      	ldr	r3, [pc, #228]	; (8019048 <mem_malloc+0x1e8>)
 8018f64:	681b      	ldr	r3, [r3, #0]
 8018f66:	697a      	ldr	r2, [r7, #20]
 8018f68:	429a      	cmp	r2, r3
 8018f6a:	d127      	bne.n	8018fbc <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8018f6c:	4b36      	ldr	r3, [pc, #216]	; (8019048 <mem_malloc+0x1e8>)
 8018f6e:	681b      	ldr	r3, [r3, #0]
 8018f70:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8018f72:	e005      	b.n	8018f80 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8018f74:	69bb      	ldr	r3, [r7, #24]
 8018f76:	881b      	ldrh	r3, [r3, #0]
 8018f78:	4618      	mov	r0, r3
 8018f7a:	f7ff fc83 	bl	8018884 <ptr_to_mem>
 8018f7e:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8018f80:	69bb      	ldr	r3, [r7, #24]
 8018f82:	791b      	ldrb	r3, [r3, #4]
 8018f84:	2b00      	cmp	r3, #0
 8018f86:	d004      	beq.n	8018f92 <mem_malloc+0x132>
 8018f88:	4b33      	ldr	r3, [pc, #204]	; (8019058 <mem_malloc+0x1f8>)
 8018f8a:	681b      	ldr	r3, [r3, #0]
 8018f8c:	69ba      	ldr	r2, [r7, #24]
 8018f8e:	429a      	cmp	r2, r3
 8018f90:	d1f0      	bne.n	8018f74 <mem_malloc+0x114>
          }
          lfree = cur;
 8018f92:	4a2d      	ldr	r2, [pc, #180]	; (8019048 <mem_malloc+0x1e8>)
 8018f94:	69bb      	ldr	r3, [r7, #24]
 8018f96:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8018f98:	4b2b      	ldr	r3, [pc, #172]	; (8019048 <mem_malloc+0x1e8>)
 8018f9a:	681a      	ldr	r2, [r3, #0]
 8018f9c:	4b2e      	ldr	r3, [pc, #184]	; (8019058 <mem_malloc+0x1f8>)
 8018f9e:	681b      	ldr	r3, [r3, #0]
 8018fa0:	429a      	cmp	r2, r3
 8018fa2:	d00b      	beq.n	8018fbc <mem_malloc+0x15c>
 8018fa4:	4b28      	ldr	r3, [pc, #160]	; (8019048 <mem_malloc+0x1e8>)
 8018fa6:	681b      	ldr	r3, [r3, #0]
 8018fa8:	791b      	ldrb	r3, [r3, #4]
 8018faa:	2b00      	cmp	r3, #0
 8018fac:	d006      	beq.n	8018fbc <mem_malloc+0x15c>
 8018fae:	4b27      	ldr	r3, [pc, #156]	; (801904c <mem_malloc+0x1ec>)
 8018fb0:	f240 32b5 	movw	r2, #949	; 0x3b5
 8018fb4:	4929      	ldr	r1, [pc, #164]	; (801905c <mem_malloc+0x1fc>)
 8018fb6:	4827      	ldr	r0, [pc, #156]	; (8019054 <mem_malloc+0x1f4>)
 8018fb8:	f00d fc88 	bl	80268cc <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8018fbc:	4821      	ldr	r0, [pc, #132]	; (8019044 <mem_malloc+0x1e4>)
 8018fbe:	f00c fd0c 	bl	80259da <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8018fc2:	8bba      	ldrh	r2, [r7, #28]
 8018fc4:	697b      	ldr	r3, [r7, #20]
 8018fc6:	4413      	add	r3, r2
 8018fc8:	3308      	adds	r3, #8
 8018fca:	4a23      	ldr	r2, [pc, #140]	; (8019058 <mem_malloc+0x1f8>)
 8018fcc:	6812      	ldr	r2, [r2, #0]
 8018fce:	4293      	cmp	r3, r2
 8018fd0:	d906      	bls.n	8018fe0 <mem_malloc+0x180>
 8018fd2:	4b1e      	ldr	r3, [pc, #120]	; (801904c <mem_malloc+0x1ec>)
 8018fd4:	f240 32b9 	movw	r2, #953	; 0x3b9
 8018fd8:	4921      	ldr	r1, [pc, #132]	; (8019060 <mem_malloc+0x200>)
 8018fda:	481e      	ldr	r0, [pc, #120]	; (8019054 <mem_malloc+0x1f4>)
 8018fdc:	f00d fc76 	bl	80268cc <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8018fe0:	697b      	ldr	r3, [r7, #20]
 8018fe2:	f003 0303 	and.w	r3, r3, #3
 8018fe6:	2b00      	cmp	r3, #0
 8018fe8:	d006      	beq.n	8018ff8 <mem_malloc+0x198>
 8018fea:	4b18      	ldr	r3, [pc, #96]	; (801904c <mem_malloc+0x1ec>)
 8018fec:	f240 32bb 	movw	r2, #955	; 0x3bb
 8018ff0:	491c      	ldr	r1, [pc, #112]	; (8019064 <mem_malloc+0x204>)
 8018ff2:	4818      	ldr	r0, [pc, #96]	; (8019054 <mem_malloc+0x1f4>)
 8018ff4:	f00d fc6a 	bl	80268cc <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8018ff8:	697b      	ldr	r3, [r7, #20]
 8018ffa:	f003 0303 	and.w	r3, r3, #3
 8018ffe:	2b00      	cmp	r3, #0
 8019000:	d006      	beq.n	8019010 <mem_malloc+0x1b0>
 8019002:	4b12      	ldr	r3, [pc, #72]	; (801904c <mem_malloc+0x1ec>)
 8019004:	f240 32bd 	movw	r2, #957	; 0x3bd
 8019008:	4917      	ldr	r1, [pc, #92]	; (8019068 <mem_malloc+0x208>)
 801900a:	4812      	ldr	r0, [pc, #72]	; (8019054 <mem_malloc+0x1f4>)
 801900c:	f00d fc5e 	bl	80268cc <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8019010:	697b      	ldr	r3, [r7, #20]
 8019012:	3308      	adds	r3, #8
 8019014:	e011      	b.n	801903a <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 8019016:	8bfb      	ldrh	r3, [r7, #30]
 8019018:	4618      	mov	r0, r3
 801901a:	f7ff fc33 	bl	8018884 <ptr_to_mem>
 801901e:	4603      	mov	r3, r0
 8019020:	881b      	ldrh	r3, [r3, #0]
 8019022:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8019024:	8bfa      	ldrh	r2, [r7, #30]
 8019026:	8bbb      	ldrh	r3, [r7, #28]
 8019028:	f5c3 53a0 	rsb	r3, r3, #5120	; 0x1400
 801902c:	429a      	cmp	r2, r3
 801902e:	f4ff af41 	bcc.w	8018eb4 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8019032:	4804      	ldr	r0, [pc, #16]	; (8019044 <mem_malloc+0x1e4>)
 8019034:	f00c fcd1 	bl	80259da <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8019038:	2300      	movs	r3, #0
}
 801903a:	4618      	mov	r0, r3
 801903c:	3720      	adds	r7, #32
 801903e:	46bd      	mov	sp, r7
 8019040:	bd80      	pop	{r7, pc}
 8019042:	bf00      	nop
 8019044:	20013bec 	.word	0x20013bec
 8019048:	20013bf0 	.word	0x20013bf0
 801904c:	0802c92c 	.word	0x0802c92c
 8019050:	0802caf0 	.word	0x0802caf0
 8019054:	0802c974 	.word	0x0802c974
 8019058:	20013be8 	.word	0x20013be8
 801905c:	0802cb04 	.word	0x0802cb04
 8019060:	0802cb20 	.word	0x0802cb20
 8019064:	0802cb50 	.word	0x0802cb50
 8019068:	0802cb80 	.word	0x0802cb80

0801906c <mem_calloc>:
 * @param size size of the objects to allocate
 * @return pointer to allocated memory / NULL pointer if there is an error
 */
void *
mem_calloc(mem_size_t count, mem_size_t size)
{
 801906c:	b580      	push	{r7, lr}
 801906e:	b084      	sub	sp, #16
 8019070:	af00      	add	r7, sp, #0
 8019072:	4603      	mov	r3, r0
 8019074:	460a      	mov	r2, r1
 8019076:	80fb      	strh	r3, [r7, #6]
 8019078:	4613      	mov	r3, r2
 801907a:	80bb      	strh	r3, [r7, #4]
  void *p;
  size_t alloc_size = (size_t)count * (size_t)size;
 801907c:	88fb      	ldrh	r3, [r7, #6]
 801907e:	88ba      	ldrh	r2, [r7, #4]
 8019080:	fb02 f303 	mul.w	r3, r2, r3
 8019084:	60fb      	str	r3, [r7, #12]

  if ((size_t)(mem_size_t)alloc_size != alloc_size) {
 8019086:	68fb      	ldr	r3, [r7, #12]
 8019088:	b29b      	uxth	r3, r3
 801908a:	461a      	mov	r2, r3
 801908c:	68fb      	ldr	r3, [r7, #12]
 801908e:	4293      	cmp	r3, r2
 8019090:	d001      	beq.n	8019096 <mem_calloc+0x2a>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_calloc: could not allocate %"SZT_F" bytes\n", alloc_size));
    return NULL;
 8019092:	2300      	movs	r3, #0
 8019094:	e00e      	b.n	80190b4 <mem_calloc+0x48>
  }

  /* allocate 'count' objects of size 'size' */
  p = mem_malloc((mem_size_t)alloc_size);
 8019096:	68fb      	ldr	r3, [r7, #12]
 8019098:	b29b      	uxth	r3, r3
 801909a:	4618      	mov	r0, r3
 801909c:	f7ff fee0 	bl	8018e60 <mem_malloc>
 80190a0:	60b8      	str	r0, [r7, #8]
  if (p) {
 80190a2:	68bb      	ldr	r3, [r7, #8]
 80190a4:	2b00      	cmp	r3, #0
 80190a6:	d004      	beq.n	80190b2 <mem_calloc+0x46>
    /* zero the memory */
    memset(p, 0, alloc_size);
 80190a8:	68fa      	ldr	r2, [r7, #12]
 80190aa:	2100      	movs	r1, #0
 80190ac:	68b8      	ldr	r0, [r7, #8]
 80190ae:	f00c fd61 	bl	8025b74 <memset>
  }
  return p;
 80190b2:	68bb      	ldr	r3, [r7, #8]
}
 80190b4:	4618      	mov	r0, r3
 80190b6:	3710      	adds	r7, #16
 80190b8:	46bd      	mov	sp, r7
 80190ba:	bd80      	pop	{r7, pc}

080190bc <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80190bc:	b480      	push	{r7}
 80190be:	b085      	sub	sp, #20
 80190c0:	af00      	add	r7, sp, #0
 80190c2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80190c4:	687b      	ldr	r3, [r7, #4]
 80190c6:	689b      	ldr	r3, [r3, #8]
 80190c8:	2200      	movs	r2, #0
 80190ca:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80190cc:	687b      	ldr	r3, [r7, #4]
 80190ce:	685b      	ldr	r3, [r3, #4]
 80190d0:	3303      	adds	r3, #3
 80190d2:	f023 0303 	bic.w	r3, r3, #3
 80190d6:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80190d8:	2300      	movs	r3, #0
 80190da:	60fb      	str	r3, [r7, #12]
 80190dc:	e011      	b.n	8019102 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80190de:	687b      	ldr	r3, [r7, #4]
 80190e0:	689b      	ldr	r3, [r3, #8]
 80190e2:	681a      	ldr	r2, [r3, #0]
 80190e4:	68bb      	ldr	r3, [r7, #8]
 80190e6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80190e8:	687b      	ldr	r3, [r7, #4]
 80190ea:	689b      	ldr	r3, [r3, #8]
 80190ec:	68ba      	ldr	r2, [r7, #8]
 80190ee:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80190f0:	687b      	ldr	r3, [r7, #4]
 80190f2:	881b      	ldrh	r3, [r3, #0]
 80190f4:	461a      	mov	r2, r3
 80190f6:	68bb      	ldr	r3, [r7, #8]
 80190f8:	4413      	add	r3, r2
 80190fa:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80190fc:	68fb      	ldr	r3, [r7, #12]
 80190fe:	3301      	adds	r3, #1
 8019100:	60fb      	str	r3, [r7, #12]
 8019102:	687b      	ldr	r3, [r7, #4]
 8019104:	885b      	ldrh	r3, [r3, #2]
 8019106:	461a      	mov	r2, r3
 8019108:	68fb      	ldr	r3, [r7, #12]
 801910a:	4293      	cmp	r3, r2
 801910c:	dbe7      	blt.n	80190de <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 801910e:	bf00      	nop
 8019110:	bf00      	nop
 8019112:	3714      	adds	r7, #20
 8019114:	46bd      	mov	sp, r7
 8019116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801911a:	4770      	bx	lr

0801911c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 801911c:	b580      	push	{r7, lr}
 801911e:	b082      	sub	sp, #8
 8019120:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8019122:	2300      	movs	r3, #0
 8019124:	80fb      	strh	r3, [r7, #6]
 8019126:	e009      	b.n	801913c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8019128:	88fb      	ldrh	r3, [r7, #6]
 801912a:	4a08      	ldr	r2, [pc, #32]	; (801914c <memp_init+0x30>)
 801912c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019130:	4618      	mov	r0, r3
 8019132:	f7ff ffc3 	bl	80190bc <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8019136:	88fb      	ldrh	r3, [r7, #6]
 8019138:	3301      	adds	r3, #1
 801913a:	80fb      	strh	r3, [r7, #6]
 801913c:	88fb      	ldrh	r3, [r7, #6]
 801913e:	2b0c      	cmp	r3, #12
 8019140:	d9f2      	bls.n	8019128 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8019142:	bf00      	nop
 8019144:	bf00      	nop
 8019146:	3708      	adds	r7, #8
 8019148:	46bd      	mov	sp, r7
 801914a:	bd80      	pop	{r7, pc}
 801914c:	08030da0 	.word	0x08030da0

08019150 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8019150:	b580      	push	{r7, lr}
 8019152:	b084      	sub	sp, #16
 8019154:	af00      	add	r7, sp, #0
 8019156:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8019158:	f00c fc6c 	bl	8025a34 <sys_arch_protect>
 801915c:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 801915e:	687b      	ldr	r3, [r7, #4]
 8019160:	689b      	ldr	r3, [r3, #8]
 8019162:	681b      	ldr	r3, [r3, #0]
 8019164:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8019166:	68bb      	ldr	r3, [r7, #8]
 8019168:	2b00      	cmp	r3, #0
 801916a:	d015      	beq.n	8019198 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 801916c:	687b      	ldr	r3, [r7, #4]
 801916e:	689b      	ldr	r3, [r3, #8]
 8019170:	68ba      	ldr	r2, [r7, #8]
 8019172:	6812      	ldr	r2, [r2, #0]
 8019174:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8019176:	68bb      	ldr	r3, [r7, #8]
 8019178:	f003 0303 	and.w	r3, r3, #3
 801917c:	2b00      	cmp	r3, #0
 801917e:	d006      	beq.n	801918e <do_memp_malloc_pool+0x3e>
 8019180:	4b09      	ldr	r3, [pc, #36]	; (80191a8 <do_memp_malloc_pool+0x58>)
 8019182:	f44f 728c 	mov.w	r2, #280	; 0x118
 8019186:	4909      	ldr	r1, [pc, #36]	; (80191ac <do_memp_malloc_pool+0x5c>)
 8019188:	4809      	ldr	r0, [pc, #36]	; (80191b0 <do_memp_malloc_pool+0x60>)
 801918a:	f00d fb9f 	bl	80268cc <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 801918e:	68f8      	ldr	r0, [r7, #12]
 8019190:	f00c fc5e 	bl	8025a50 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8019194:	68bb      	ldr	r3, [r7, #8]
 8019196:	e003      	b.n	80191a0 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8019198:	68f8      	ldr	r0, [r7, #12]
 801919a:	f00c fc59 	bl	8025a50 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 801919e:	2300      	movs	r3, #0
}
 80191a0:	4618      	mov	r0, r3
 80191a2:	3710      	adds	r7, #16
 80191a4:	46bd      	mov	sp, r7
 80191a6:	bd80      	pop	{r7, pc}
 80191a8:	0802cba4 	.word	0x0802cba4
 80191ac:	0802cbd4 	.word	0x0802cbd4
 80191b0:	0802cbf8 	.word	0x0802cbf8

080191b4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80191b4:	b580      	push	{r7, lr}
 80191b6:	b084      	sub	sp, #16
 80191b8:	af00      	add	r7, sp, #0
 80191ba:	4603      	mov	r3, r0
 80191bc:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80191be:	79fb      	ldrb	r3, [r7, #7]
 80191c0:	2b0c      	cmp	r3, #12
 80191c2:	d908      	bls.n	80191d6 <memp_malloc+0x22>
 80191c4:	4b0a      	ldr	r3, [pc, #40]	; (80191f0 <memp_malloc+0x3c>)
 80191c6:	f240 1257 	movw	r2, #343	; 0x157
 80191ca:	490a      	ldr	r1, [pc, #40]	; (80191f4 <memp_malloc+0x40>)
 80191cc:	480a      	ldr	r0, [pc, #40]	; (80191f8 <memp_malloc+0x44>)
 80191ce:	f00d fb7d 	bl	80268cc <iprintf>
 80191d2:	2300      	movs	r3, #0
 80191d4:	e008      	b.n	80191e8 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80191d6:	79fb      	ldrb	r3, [r7, #7]
 80191d8:	4a08      	ldr	r2, [pc, #32]	; (80191fc <memp_malloc+0x48>)
 80191da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80191de:	4618      	mov	r0, r3
 80191e0:	f7ff ffb6 	bl	8019150 <do_memp_malloc_pool>
 80191e4:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80191e6:	68fb      	ldr	r3, [r7, #12]
}
 80191e8:	4618      	mov	r0, r3
 80191ea:	3710      	adds	r7, #16
 80191ec:	46bd      	mov	sp, r7
 80191ee:	bd80      	pop	{r7, pc}
 80191f0:	0802cba4 	.word	0x0802cba4
 80191f4:	0802cc34 	.word	0x0802cc34
 80191f8:	0802cbf8 	.word	0x0802cbf8
 80191fc:	08030da0 	.word	0x08030da0

08019200 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8019200:	b580      	push	{r7, lr}
 8019202:	b084      	sub	sp, #16
 8019204:	af00      	add	r7, sp, #0
 8019206:	6078      	str	r0, [r7, #4]
 8019208:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 801920a:	683b      	ldr	r3, [r7, #0]
 801920c:	f003 0303 	and.w	r3, r3, #3
 8019210:	2b00      	cmp	r3, #0
 8019212:	d006      	beq.n	8019222 <do_memp_free_pool+0x22>
 8019214:	4b0d      	ldr	r3, [pc, #52]	; (801924c <do_memp_free_pool+0x4c>)
 8019216:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 801921a:	490d      	ldr	r1, [pc, #52]	; (8019250 <do_memp_free_pool+0x50>)
 801921c:	480d      	ldr	r0, [pc, #52]	; (8019254 <do_memp_free_pool+0x54>)
 801921e:	f00d fb55 	bl	80268cc <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8019222:	683b      	ldr	r3, [r7, #0]
 8019224:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8019226:	f00c fc05 	bl	8025a34 <sys_arch_protect>
 801922a:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 801922c:	687b      	ldr	r3, [r7, #4]
 801922e:	689b      	ldr	r3, [r3, #8]
 8019230:	681a      	ldr	r2, [r3, #0]
 8019232:	68fb      	ldr	r3, [r7, #12]
 8019234:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8019236:	687b      	ldr	r3, [r7, #4]
 8019238:	689b      	ldr	r3, [r3, #8]
 801923a:	68fa      	ldr	r2, [r7, #12]
 801923c:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 801923e:	68b8      	ldr	r0, [r7, #8]
 8019240:	f00c fc06 	bl	8025a50 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8019244:	bf00      	nop
 8019246:	3710      	adds	r7, #16
 8019248:	46bd      	mov	sp, r7
 801924a:	bd80      	pop	{r7, pc}
 801924c:	0802cba4 	.word	0x0802cba4
 8019250:	0802cc54 	.word	0x0802cc54
 8019254:	0802cbf8 	.word	0x0802cbf8

08019258 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8019258:	b580      	push	{r7, lr}
 801925a:	b082      	sub	sp, #8
 801925c:	af00      	add	r7, sp, #0
 801925e:	4603      	mov	r3, r0
 8019260:	6039      	str	r1, [r7, #0]
 8019262:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8019264:	79fb      	ldrb	r3, [r7, #7]
 8019266:	2b0c      	cmp	r3, #12
 8019268:	d907      	bls.n	801927a <memp_free+0x22>
 801926a:	4b0c      	ldr	r3, [pc, #48]	; (801929c <memp_free+0x44>)
 801926c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8019270:	490b      	ldr	r1, [pc, #44]	; (80192a0 <memp_free+0x48>)
 8019272:	480c      	ldr	r0, [pc, #48]	; (80192a4 <memp_free+0x4c>)
 8019274:	f00d fb2a 	bl	80268cc <iprintf>
 8019278:	e00c      	b.n	8019294 <memp_free+0x3c>

  if (mem == NULL) {
 801927a:	683b      	ldr	r3, [r7, #0]
 801927c:	2b00      	cmp	r3, #0
 801927e:	d008      	beq.n	8019292 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8019280:	79fb      	ldrb	r3, [r7, #7]
 8019282:	4a09      	ldr	r2, [pc, #36]	; (80192a8 <memp_free+0x50>)
 8019284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019288:	6839      	ldr	r1, [r7, #0]
 801928a:	4618      	mov	r0, r3
 801928c:	f7ff ffb8 	bl	8019200 <do_memp_free_pool>
 8019290:	e000      	b.n	8019294 <memp_free+0x3c>
    return;
 8019292:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8019294:	3708      	adds	r7, #8
 8019296:	46bd      	mov	sp, r7
 8019298:	bd80      	pop	{r7, pc}
 801929a:	bf00      	nop
 801929c:	0802cba4 	.word	0x0802cba4
 80192a0:	0802cc74 	.word	0x0802cc74
 80192a4:	0802cbf8 	.word	0x0802cbf8
 80192a8:	08030da0 	.word	0x08030da0

080192ac <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80192ac:	b480      	push	{r7}
 80192ae:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80192b0:	bf00      	nop
 80192b2:	46bd      	mov	sp, r7
 80192b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192b8:	4770      	bx	lr
	...

080192bc <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80192bc:	b580      	push	{r7, lr}
 80192be:	b086      	sub	sp, #24
 80192c0:	af00      	add	r7, sp, #0
 80192c2:	60f8      	str	r0, [r7, #12]
 80192c4:	60b9      	str	r1, [r7, #8]
 80192c6:	607a      	str	r2, [r7, #4]
 80192c8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80192ca:	68fb      	ldr	r3, [r7, #12]
 80192cc:	2b00      	cmp	r3, #0
 80192ce:	d108      	bne.n	80192e2 <netif_add+0x26>
 80192d0:	4b5b      	ldr	r3, [pc, #364]	; (8019440 <netif_add+0x184>)
 80192d2:	f240 1227 	movw	r2, #295	; 0x127
 80192d6:	495b      	ldr	r1, [pc, #364]	; (8019444 <netif_add+0x188>)
 80192d8:	485b      	ldr	r0, [pc, #364]	; (8019448 <netif_add+0x18c>)
 80192da:	f00d faf7 	bl	80268cc <iprintf>
 80192de:	2300      	movs	r3, #0
 80192e0:	e0a9      	b.n	8019436 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80192e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80192e4:	2b00      	cmp	r3, #0
 80192e6:	d108      	bne.n	80192fa <netif_add+0x3e>
 80192e8:	4b55      	ldr	r3, [pc, #340]	; (8019440 <netif_add+0x184>)
 80192ea:	f44f 7294 	mov.w	r2, #296	; 0x128
 80192ee:	4957      	ldr	r1, [pc, #348]	; (801944c <netif_add+0x190>)
 80192f0:	4855      	ldr	r0, [pc, #340]	; (8019448 <netif_add+0x18c>)
 80192f2:	f00d faeb 	bl	80268cc <iprintf>
 80192f6:	2300      	movs	r3, #0
 80192f8:	e09d      	b.n	8019436 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80192fa:	68bb      	ldr	r3, [r7, #8]
 80192fc:	2b00      	cmp	r3, #0
 80192fe:	d101      	bne.n	8019304 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8019300:	4b53      	ldr	r3, [pc, #332]	; (8019450 <netif_add+0x194>)
 8019302:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8019304:	687b      	ldr	r3, [r7, #4]
 8019306:	2b00      	cmp	r3, #0
 8019308:	d101      	bne.n	801930e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 801930a:	4b51      	ldr	r3, [pc, #324]	; (8019450 <netif_add+0x194>)
 801930c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801930e:	683b      	ldr	r3, [r7, #0]
 8019310:	2b00      	cmp	r3, #0
 8019312:	d101      	bne.n	8019318 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8019314:	4b4e      	ldr	r3, [pc, #312]	; (8019450 <netif_add+0x194>)
 8019316:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8019318:	68fb      	ldr	r3, [r7, #12]
 801931a:	2200      	movs	r2, #0
 801931c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 801931e:	68fb      	ldr	r3, [r7, #12]
 8019320:	2200      	movs	r2, #0
 8019322:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8019324:	68fb      	ldr	r3, [r7, #12]
 8019326:	2200      	movs	r2, #0
 8019328:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 801932a:	68fb      	ldr	r3, [r7, #12]
 801932c:	4a49      	ldr	r2, [pc, #292]	; (8019454 <netif_add+0x198>)
 801932e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8019330:	68fb      	ldr	r3, [r7, #12]
 8019332:	2200      	movs	r2, #0
 8019334:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 8019336:	68fb      	ldr	r3, [r7, #12]
 8019338:	2200      	movs	r2, #0
 801933a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 801933e:	68fb      	ldr	r3, [r7, #12]
 8019340:	3324      	adds	r3, #36	; 0x24
 8019342:	2204      	movs	r2, #4
 8019344:	2100      	movs	r1, #0
 8019346:	4618      	mov	r0, r3
 8019348:	f00c fc14 	bl	8025b74 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 801934c:	68fb      	ldr	r3, [r7, #12]
 801934e:	2200      	movs	r2, #0
 8019350:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8019352:	68fb      	ldr	r3, [r7, #12]
 8019354:	6a3a      	ldr	r2, [r7, #32]
 8019356:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8019358:	4b3f      	ldr	r3, [pc, #252]	; (8019458 <netif_add+0x19c>)
 801935a:	781a      	ldrb	r2, [r3, #0]
 801935c:	68fb      	ldr	r3, [r7, #12]
 801935e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 8019362:	68fb      	ldr	r3, [r7, #12]
 8019364:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019366:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8019368:	683b      	ldr	r3, [r7, #0]
 801936a:	687a      	ldr	r2, [r7, #4]
 801936c:	68b9      	ldr	r1, [r7, #8]
 801936e:	68f8      	ldr	r0, [r7, #12]
 8019370:	f000 f914 	bl	801959c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8019374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019376:	68f8      	ldr	r0, [r7, #12]
 8019378:	4798      	blx	r3
 801937a:	4603      	mov	r3, r0
 801937c:	2b00      	cmp	r3, #0
 801937e:	d001      	beq.n	8019384 <netif_add+0xc8>
    return NULL;
 8019380:	2300      	movs	r3, #0
 8019382:	e058      	b.n	8019436 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8019384:	68fb      	ldr	r3, [r7, #12]
 8019386:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801938a:	2bff      	cmp	r3, #255	; 0xff
 801938c:	d103      	bne.n	8019396 <netif_add+0xda>
        netif->num = 0;
 801938e:	68fb      	ldr	r3, [r7, #12]
 8019390:	2200      	movs	r2, #0
 8019392:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 8019396:	2300      	movs	r3, #0
 8019398:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801939a:	4b30      	ldr	r3, [pc, #192]	; (801945c <netif_add+0x1a0>)
 801939c:	681b      	ldr	r3, [r3, #0]
 801939e:	617b      	str	r3, [r7, #20]
 80193a0:	e02b      	b.n	80193fa <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80193a2:	697a      	ldr	r2, [r7, #20]
 80193a4:	68fb      	ldr	r3, [r7, #12]
 80193a6:	429a      	cmp	r2, r3
 80193a8:	d106      	bne.n	80193b8 <netif_add+0xfc>
 80193aa:	4b25      	ldr	r3, [pc, #148]	; (8019440 <netif_add+0x184>)
 80193ac:	f240 128b 	movw	r2, #395	; 0x18b
 80193b0:	492b      	ldr	r1, [pc, #172]	; (8019460 <netif_add+0x1a4>)
 80193b2:	4825      	ldr	r0, [pc, #148]	; (8019448 <netif_add+0x18c>)
 80193b4:	f00d fa8a 	bl	80268cc <iprintf>
        num_netifs++;
 80193b8:	693b      	ldr	r3, [r7, #16]
 80193ba:	3301      	adds	r3, #1
 80193bc:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80193be:	693b      	ldr	r3, [r7, #16]
 80193c0:	2bff      	cmp	r3, #255	; 0xff
 80193c2:	dd06      	ble.n	80193d2 <netif_add+0x116>
 80193c4:	4b1e      	ldr	r3, [pc, #120]	; (8019440 <netif_add+0x184>)
 80193c6:	f240 128d 	movw	r2, #397	; 0x18d
 80193ca:	4926      	ldr	r1, [pc, #152]	; (8019464 <netif_add+0x1a8>)
 80193cc:	481e      	ldr	r0, [pc, #120]	; (8019448 <netif_add+0x18c>)
 80193ce:	f00d fa7d 	bl	80268cc <iprintf>
        if (netif2->num == netif->num) {
 80193d2:	697b      	ldr	r3, [r7, #20]
 80193d4:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80193d8:	68fb      	ldr	r3, [r7, #12]
 80193da:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80193de:	429a      	cmp	r2, r3
 80193e0:	d108      	bne.n	80193f4 <netif_add+0x138>
          netif->num++;
 80193e2:	68fb      	ldr	r3, [r7, #12]
 80193e4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80193e8:	3301      	adds	r3, #1
 80193ea:	b2da      	uxtb	r2, r3
 80193ec:	68fb      	ldr	r3, [r7, #12]
 80193ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 80193f2:	e005      	b.n	8019400 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80193f4:	697b      	ldr	r3, [r7, #20]
 80193f6:	681b      	ldr	r3, [r3, #0]
 80193f8:	617b      	str	r3, [r7, #20]
 80193fa:	697b      	ldr	r3, [r7, #20]
 80193fc:	2b00      	cmp	r3, #0
 80193fe:	d1d0      	bne.n	80193a2 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 8019400:	697b      	ldr	r3, [r7, #20]
 8019402:	2b00      	cmp	r3, #0
 8019404:	d1be      	bne.n	8019384 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 8019406:	68fb      	ldr	r3, [r7, #12]
 8019408:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801940c:	2bfe      	cmp	r3, #254	; 0xfe
 801940e:	d103      	bne.n	8019418 <netif_add+0x15c>
    netif_num = 0;
 8019410:	4b11      	ldr	r3, [pc, #68]	; (8019458 <netif_add+0x19c>)
 8019412:	2200      	movs	r2, #0
 8019414:	701a      	strb	r2, [r3, #0]
 8019416:	e006      	b.n	8019426 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8019418:	68fb      	ldr	r3, [r7, #12]
 801941a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801941e:	3301      	adds	r3, #1
 8019420:	b2da      	uxtb	r2, r3
 8019422:	4b0d      	ldr	r3, [pc, #52]	; (8019458 <netif_add+0x19c>)
 8019424:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8019426:	4b0d      	ldr	r3, [pc, #52]	; (801945c <netif_add+0x1a0>)
 8019428:	681a      	ldr	r2, [r3, #0]
 801942a:	68fb      	ldr	r3, [r7, #12]
 801942c:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 801942e:	4a0b      	ldr	r2, [pc, #44]	; (801945c <netif_add+0x1a0>)
 8019430:	68fb      	ldr	r3, [r7, #12]
 8019432:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8019434:	68fb      	ldr	r3, [r7, #12]
}
 8019436:	4618      	mov	r0, r3
 8019438:	3718      	adds	r7, #24
 801943a:	46bd      	mov	sp, r7
 801943c:	bd80      	pop	{r7, pc}
 801943e:	bf00      	nop
 8019440:	0802cc90 	.word	0x0802cc90
 8019444:	0802cd24 	.word	0x0802cd24
 8019448:	0802cce0 	.word	0x0802cce0
 801944c:	0802cd40 	.word	0x0802cd40
 8019450:	08030e24 	.word	0x08030e24
 8019454:	0801987f 	.word	0x0801987f
 8019458:	20013c28 	.word	0x20013c28
 801945c:	2001c0ec 	.word	0x2001c0ec
 8019460:	0802cd64 	.word	0x0802cd64
 8019464:	0802cd78 	.word	0x0802cd78

08019468 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8019468:	b580      	push	{r7, lr}
 801946a:	b082      	sub	sp, #8
 801946c:	af00      	add	r7, sp, #0
 801946e:	6078      	str	r0, [r7, #4]
 8019470:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8019472:	6839      	ldr	r1, [r7, #0]
 8019474:	6878      	ldr	r0, [r7, #4]
 8019476:	f002 ffb3 	bl	801c3e0 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 801947a:	6839      	ldr	r1, [r7, #0]
 801947c:	6878      	ldr	r0, [r7, #4]
 801947e:	f008 f85b 	bl	8021538 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8019482:	bf00      	nop
 8019484:	3708      	adds	r7, #8
 8019486:	46bd      	mov	sp, r7
 8019488:	bd80      	pop	{r7, pc}
	...

0801948c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 801948c:	b580      	push	{r7, lr}
 801948e:	b086      	sub	sp, #24
 8019490:	af00      	add	r7, sp, #0
 8019492:	60f8      	str	r0, [r7, #12]
 8019494:	60b9      	str	r1, [r7, #8]
 8019496:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8019498:	68bb      	ldr	r3, [r7, #8]
 801949a:	2b00      	cmp	r3, #0
 801949c:	d106      	bne.n	80194ac <netif_do_set_ipaddr+0x20>
 801949e:	4b1d      	ldr	r3, [pc, #116]	; (8019514 <netif_do_set_ipaddr+0x88>)
 80194a0:	f240 12cb 	movw	r2, #459	; 0x1cb
 80194a4:	491c      	ldr	r1, [pc, #112]	; (8019518 <netif_do_set_ipaddr+0x8c>)
 80194a6:	481d      	ldr	r0, [pc, #116]	; (801951c <netif_do_set_ipaddr+0x90>)
 80194a8:	f00d fa10 	bl	80268cc <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80194ac:	687b      	ldr	r3, [r7, #4]
 80194ae:	2b00      	cmp	r3, #0
 80194b0:	d106      	bne.n	80194c0 <netif_do_set_ipaddr+0x34>
 80194b2:	4b18      	ldr	r3, [pc, #96]	; (8019514 <netif_do_set_ipaddr+0x88>)
 80194b4:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80194b8:	4917      	ldr	r1, [pc, #92]	; (8019518 <netif_do_set_ipaddr+0x8c>)
 80194ba:	4818      	ldr	r0, [pc, #96]	; (801951c <netif_do_set_ipaddr+0x90>)
 80194bc:	f00d fa06 	bl	80268cc <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80194c0:	68bb      	ldr	r3, [r7, #8]
 80194c2:	681a      	ldr	r2, [r3, #0]
 80194c4:	68fb      	ldr	r3, [r7, #12]
 80194c6:	3304      	adds	r3, #4
 80194c8:	681b      	ldr	r3, [r3, #0]
 80194ca:	429a      	cmp	r2, r3
 80194cc:	d01c      	beq.n	8019508 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80194ce:	68bb      	ldr	r3, [r7, #8]
 80194d0:	681b      	ldr	r3, [r3, #0]
 80194d2:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80194d4:	68fb      	ldr	r3, [r7, #12]
 80194d6:	3304      	adds	r3, #4
 80194d8:	681a      	ldr	r2, [r3, #0]
 80194da:	687b      	ldr	r3, [r7, #4]
 80194dc:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80194de:	f107 0314 	add.w	r3, r7, #20
 80194e2:	4619      	mov	r1, r3
 80194e4:	6878      	ldr	r0, [r7, #4]
 80194e6:	f7ff ffbf 	bl	8019468 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80194ea:	68bb      	ldr	r3, [r7, #8]
 80194ec:	2b00      	cmp	r3, #0
 80194ee:	d002      	beq.n	80194f6 <netif_do_set_ipaddr+0x6a>
 80194f0:	68bb      	ldr	r3, [r7, #8]
 80194f2:	681b      	ldr	r3, [r3, #0]
 80194f4:	e000      	b.n	80194f8 <netif_do_set_ipaddr+0x6c>
 80194f6:	2300      	movs	r3, #0
 80194f8:	68fa      	ldr	r2, [r7, #12]
 80194fa:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80194fc:	2101      	movs	r1, #1
 80194fe:	68f8      	ldr	r0, [r7, #12]
 8019500:	f000 f8d2 	bl	80196a8 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8019504:	2301      	movs	r3, #1
 8019506:	e000      	b.n	801950a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8019508:	2300      	movs	r3, #0
}
 801950a:	4618      	mov	r0, r3
 801950c:	3718      	adds	r7, #24
 801950e:	46bd      	mov	sp, r7
 8019510:	bd80      	pop	{r7, pc}
 8019512:	bf00      	nop
 8019514:	0802cc90 	.word	0x0802cc90
 8019518:	0802cda8 	.word	0x0802cda8
 801951c:	0802cce0 	.word	0x0802cce0

08019520 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8019520:	b480      	push	{r7}
 8019522:	b085      	sub	sp, #20
 8019524:	af00      	add	r7, sp, #0
 8019526:	60f8      	str	r0, [r7, #12]
 8019528:	60b9      	str	r1, [r7, #8]
 801952a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 801952c:	68bb      	ldr	r3, [r7, #8]
 801952e:	681a      	ldr	r2, [r3, #0]
 8019530:	68fb      	ldr	r3, [r7, #12]
 8019532:	3308      	adds	r3, #8
 8019534:	681b      	ldr	r3, [r3, #0]
 8019536:	429a      	cmp	r2, r3
 8019538:	d00a      	beq.n	8019550 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 801953a:	68bb      	ldr	r3, [r7, #8]
 801953c:	2b00      	cmp	r3, #0
 801953e:	d002      	beq.n	8019546 <netif_do_set_netmask+0x26>
 8019540:	68bb      	ldr	r3, [r7, #8]
 8019542:	681b      	ldr	r3, [r3, #0]
 8019544:	e000      	b.n	8019548 <netif_do_set_netmask+0x28>
 8019546:	2300      	movs	r3, #0
 8019548:	68fa      	ldr	r2, [r7, #12]
 801954a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 801954c:	2301      	movs	r3, #1
 801954e:	e000      	b.n	8019552 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8019550:	2300      	movs	r3, #0
}
 8019552:	4618      	mov	r0, r3
 8019554:	3714      	adds	r7, #20
 8019556:	46bd      	mov	sp, r7
 8019558:	f85d 7b04 	ldr.w	r7, [sp], #4
 801955c:	4770      	bx	lr

0801955e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 801955e:	b480      	push	{r7}
 8019560:	b085      	sub	sp, #20
 8019562:	af00      	add	r7, sp, #0
 8019564:	60f8      	str	r0, [r7, #12]
 8019566:	60b9      	str	r1, [r7, #8]
 8019568:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 801956a:	68bb      	ldr	r3, [r7, #8]
 801956c:	681a      	ldr	r2, [r3, #0]
 801956e:	68fb      	ldr	r3, [r7, #12]
 8019570:	330c      	adds	r3, #12
 8019572:	681b      	ldr	r3, [r3, #0]
 8019574:	429a      	cmp	r2, r3
 8019576:	d00a      	beq.n	801958e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8019578:	68bb      	ldr	r3, [r7, #8]
 801957a:	2b00      	cmp	r3, #0
 801957c:	d002      	beq.n	8019584 <netif_do_set_gw+0x26>
 801957e:	68bb      	ldr	r3, [r7, #8]
 8019580:	681b      	ldr	r3, [r3, #0]
 8019582:	e000      	b.n	8019586 <netif_do_set_gw+0x28>
 8019584:	2300      	movs	r3, #0
 8019586:	68fa      	ldr	r2, [r7, #12]
 8019588:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 801958a:	2301      	movs	r3, #1
 801958c:	e000      	b.n	8019590 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 801958e:	2300      	movs	r3, #0
}
 8019590:	4618      	mov	r0, r3
 8019592:	3714      	adds	r7, #20
 8019594:	46bd      	mov	sp, r7
 8019596:	f85d 7b04 	ldr.w	r7, [sp], #4
 801959a:	4770      	bx	lr

0801959c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 801959c:	b580      	push	{r7, lr}
 801959e:	b088      	sub	sp, #32
 80195a0:	af00      	add	r7, sp, #0
 80195a2:	60f8      	str	r0, [r7, #12]
 80195a4:	60b9      	str	r1, [r7, #8]
 80195a6:	607a      	str	r2, [r7, #4]
 80195a8:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80195aa:	2300      	movs	r3, #0
 80195ac:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80195ae:	2300      	movs	r3, #0
 80195b0:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80195b2:	68bb      	ldr	r3, [r7, #8]
 80195b4:	2b00      	cmp	r3, #0
 80195b6:	d101      	bne.n	80195bc <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80195b8:	4b1c      	ldr	r3, [pc, #112]	; (801962c <netif_set_addr+0x90>)
 80195ba:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80195bc:	687b      	ldr	r3, [r7, #4]
 80195be:	2b00      	cmp	r3, #0
 80195c0:	d101      	bne.n	80195c6 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80195c2:	4b1a      	ldr	r3, [pc, #104]	; (801962c <netif_set_addr+0x90>)
 80195c4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80195c6:	683b      	ldr	r3, [r7, #0]
 80195c8:	2b00      	cmp	r3, #0
 80195ca:	d101      	bne.n	80195d0 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80195cc:	4b17      	ldr	r3, [pc, #92]	; (801962c <netif_set_addr+0x90>)
 80195ce:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80195d0:	68bb      	ldr	r3, [r7, #8]
 80195d2:	2b00      	cmp	r3, #0
 80195d4:	d003      	beq.n	80195de <netif_set_addr+0x42>
 80195d6:	68bb      	ldr	r3, [r7, #8]
 80195d8:	681b      	ldr	r3, [r3, #0]
 80195da:	2b00      	cmp	r3, #0
 80195dc:	d101      	bne.n	80195e2 <netif_set_addr+0x46>
 80195de:	2301      	movs	r3, #1
 80195e0:	e000      	b.n	80195e4 <netif_set_addr+0x48>
 80195e2:	2300      	movs	r3, #0
 80195e4:	617b      	str	r3, [r7, #20]
  if (remove) {
 80195e6:	697b      	ldr	r3, [r7, #20]
 80195e8:	2b00      	cmp	r3, #0
 80195ea:	d006      	beq.n	80195fa <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80195ec:	f107 0310 	add.w	r3, r7, #16
 80195f0:	461a      	mov	r2, r3
 80195f2:	68b9      	ldr	r1, [r7, #8]
 80195f4:	68f8      	ldr	r0, [r7, #12]
 80195f6:	f7ff ff49 	bl	801948c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80195fa:	69fa      	ldr	r2, [r7, #28]
 80195fc:	6879      	ldr	r1, [r7, #4]
 80195fe:	68f8      	ldr	r0, [r7, #12]
 8019600:	f7ff ff8e 	bl	8019520 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8019604:	69ba      	ldr	r2, [r7, #24]
 8019606:	6839      	ldr	r1, [r7, #0]
 8019608:	68f8      	ldr	r0, [r7, #12]
 801960a:	f7ff ffa8 	bl	801955e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 801960e:	697b      	ldr	r3, [r7, #20]
 8019610:	2b00      	cmp	r3, #0
 8019612:	d106      	bne.n	8019622 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8019614:	f107 0310 	add.w	r3, r7, #16
 8019618:	461a      	mov	r2, r3
 801961a:	68b9      	ldr	r1, [r7, #8]
 801961c:	68f8      	ldr	r0, [r7, #12]
 801961e:	f7ff ff35 	bl	801948c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8019622:	bf00      	nop
 8019624:	3720      	adds	r7, #32
 8019626:	46bd      	mov	sp, r7
 8019628:	bd80      	pop	{r7, pc}
 801962a:	bf00      	nop
 801962c:	08030e24 	.word	0x08030e24

08019630 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8019630:	b480      	push	{r7}
 8019632:	b083      	sub	sp, #12
 8019634:	af00      	add	r7, sp, #0
 8019636:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8019638:	4a04      	ldr	r2, [pc, #16]	; (801964c <netif_set_default+0x1c>)
 801963a:	687b      	ldr	r3, [r7, #4]
 801963c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 801963e:	bf00      	nop
 8019640:	370c      	adds	r7, #12
 8019642:	46bd      	mov	sp, r7
 8019644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019648:	4770      	bx	lr
 801964a:	bf00      	nop
 801964c:	2001c0f0 	.word	0x2001c0f0

08019650 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8019650:	b580      	push	{r7, lr}
 8019652:	b082      	sub	sp, #8
 8019654:	af00      	add	r7, sp, #0
 8019656:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8019658:	687b      	ldr	r3, [r7, #4]
 801965a:	2b00      	cmp	r3, #0
 801965c:	d107      	bne.n	801966e <netif_set_up+0x1e>
 801965e:	4b0f      	ldr	r3, [pc, #60]	; (801969c <netif_set_up+0x4c>)
 8019660:	f44f 7254 	mov.w	r2, #848	; 0x350
 8019664:	490e      	ldr	r1, [pc, #56]	; (80196a0 <netif_set_up+0x50>)
 8019666:	480f      	ldr	r0, [pc, #60]	; (80196a4 <netif_set_up+0x54>)
 8019668:	f00d f930 	bl	80268cc <iprintf>
 801966c:	e013      	b.n	8019696 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 801966e:	687b      	ldr	r3, [r7, #4]
 8019670:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8019674:	f003 0301 	and.w	r3, r3, #1
 8019678:	2b00      	cmp	r3, #0
 801967a:	d10c      	bne.n	8019696 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 801967c:	687b      	ldr	r3, [r7, #4]
 801967e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8019682:	f043 0301 	orr.w	r3, r3, #1
 8019686:	b2da      	uxtb	r2, r3
 8019688:	687b      	ldr	r3, [r7, #4]
 801968a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801968e:	2103      	movs	r1, #3
 8019690:	6878      	ldr	r0, [r7, #4]
 8019692:	f000 f809 	bl	80196a8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8019696:	3708      	adds	r7, #8
 8019698:	46bd      	mov	sp, r7
 801969a:	bd80      	pop	{r7, pc}
 801969c:	0802cc90 	.word	0x0802cc90
 80196a0:	0802ce18 	.word	0x0802ce18
 80196a4:	0802cce0 	.word	0x0802cce0

080196a8 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80196a8:	b580      	push	{r7, lr}
 80196aa:	b082      	sub	sp, #8
 80196ac:	af00      	add	r7, sp, #0
 80196ae:	6078      	str	r0, [r7, #4]
 80196b0:	460b      	mov	r3, r1
 80196b2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80196b4:	687b      	ldr	r3, [r7, #4]
 80196b6:	2b00      	cmp	r3, #0
 80196b8:	d106      	bne.n	80196c8 <netif_issue_reports+0x20>
 80196ba:	4b18      	ldr	r3, [pc, #96]	; (801971c <netif_issue_reports+0x74>)
 80196bc:	f240 326d 	movw	r2, #877	; 0x36d
 80196c0:	4917      	ldr	r1, [pc, #92]	; (8019720 <netif_issue_reports+0x78>)
 80196c2:	4818      	ldr	r0, [pc, #96]	; (8019724 <netif_issue_reports+0x7c>)
 80196c4:	f00d f902 	bl	80268cc <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80196c8:	687b      	ldr	r3, [r7, #4]
 80196ca:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80196ce:	f003 0304 	and.w	r3, r3, #4
 80196d2:	2b00      	cmp	r3, #0
 80196d4:	d01e      	beq.n	8019714 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80196d6:	687b      	ldr	r3, [r7, #4]
 80196d8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80196dc:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80196e0:	2b00      	cmp	r3, #0
 80196e2:	d017      	beq.n	8019714 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80196e4:	78fb      	ldrb	r3, [r7, #3]
 80196e6:	f003 0301 	and.w	r3, r3, #1
 80196ea:	2b00      	cmp	r3, #0
 80196ec:	d013      	beq.n	8019716 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80196ee:	687b      	ldr	r3, [r7, #4]
 80196f0:	3304      	adds	r3, #4
 80196f2:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80196f4:	2b00      	cmp	r3, #0
 80196f6:	d00e      	beq.n	8019716 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80196f8:	687b      	ldr	r3, [r7, #4]
 80196fa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80196fe:	f003 0308 	and.w	r3, r3, #8
 8019702:	2b00      	cmp	r3, #0
 8019704:	d007      	beq.n	8019716 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8019706:	687b      	ldr	r3, [r7, #4]
 8019708:	3304      	adds	r3, #4
 801970a:	4619      	mov	r1, r3
 801970c:	6878      	ldr	r0, [r7, #4]
 801970e:	f00a fd13 	bl	8024138 <etharp_request>
 8019712:	e000      	b.n	8019716 <netif_issue_reports+0x6e>
    return;
 8019714:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8019716:	3708      	adds	r7, #8
 8019718:	46bd      	mov	sp, r7
 801971a:	bd80      	pop	{r7, pc}
 801971c:	0802cc90 	.word	0x0802cc90
 8019720:	0802ce34 	.word	0x0802ce34
 8019724:	0802cce0 	.word	0x0802cce0

08019728 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8019728:	b580      	push	{r7, lr}
 801972a:	b082      	sub	sp, #8
 801972c:	af00      	add	r7, sp, #0
 801972e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8019730:	687b      	ldr	r3, [r7, #4]
 8019732:	2b00      	cmp	r3, #0
 8019734:	d107      	bne.n	8019746 <netif_set_down+0x1e>
 8019736:	4b12      	ldr	r3, [pc, #72]	; (8019780 <netif_set_down+0x58>)
 8019738:	f240 329b 	movw	r2, #923	; 0x39b
 801973c:	4911      	ldr	r1, [pc, #68]	; (8019784 <netif_set_down+0x5c>)
 801973e:	4812      	ldr	r0, [pc, #72]	; (8019788 <netif_set_down+0x60>)
 8019740:	f00d f8c4 	bl	80268cc <iprintf>
 8019744:	e019      	b.n	801977a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8019746:	687b      	ldr	r3, [r7, #4]
 8019748:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801974c:	f003 0301 	and.w	r3, r3, #1
 8019750:	2b00      	cmp	r3, #0
 8019752:	d012      	beq.n	801977a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8019754:	687b      	ldr	r3, [r7, #4]
 8019756:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801975a:	f023 0301 	bic.w	r3, r3, #1
 801975e:	b2da      	uxtb	r2, r3
 8019760:	687b      	ldr	r3, [r7, #4]
 8019762:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8019766:	687b      	ldr	r3, [r7, #4]
 8019768:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801976c:	f003 0308 	and.w	r3, r3, #8
 8019770:	2b00      	cmp	r3, #0
 8019772:	d002      	beq.n	801977a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8019774:	6878      	ldr	r0, [r7, #4]
 8019776:	f00a f899 	bl	80238ac <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 801977a:	3708      	adds	r7, #8
 801977c:	46bd      	mov	sp, r7
 801977e:	bd80      	pop	{r7, pc}
 8019780:	0802cc90 	.word	0x0802cc90
 8019784:	0802ce58 	.word	0x0802ce58
 8019788:	0802cce0 	.word	0x0802cce0

0801978c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 801978c:	b580      	push	{r7, lr}
 801978e:	b082      	sub	sp, #8
 8019790:	af00      	add	r7, sp, #0
 8019792:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8019794:	687b      	ldr	r3, [r7, #4]
 8019796:	2b00      	cmp	r3, #0
 8019798:	d107      	bne.n	80197aa <netif_set_link_up+0x1e>
 801979a:	4b15      	ldr	r3, [pc, #84]	; (80197f0 <netif_set_link_up+0x64>)
 801979c:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 80197a0:	4914      	ldr	r1, [pc, #80]	; (80197f4 <netif_set_link_up+0x68>)
 80197a2:	4815      	ldr	r0, [pc, #84]	; (80197f8 <netif_set_link_up+0x6c>)
 80197a4:	f00d f892 	bl	80268cc <iprintf>
 80197a8:	e01e      	b.n	80197e8 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80197aa:	687b      	ldr	r3, [r7, #4]
 80197ac:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80197b0:	f003 0304 	and.w	r3, r3, #4
 80197b4:	2b00      	cmp	r3, #0
 80197b6:	d117      	bne.n	80197e8 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80197b8:	687b      	ldr	r3, [r7, #4]
 80197ba:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80197be:	f043 0304 	orr.w	r3, r3, #4
 80197c2:	b2da      	uxtb	r2, r3
 80197c4:	687b      	ldr	r3, [r7, #4]
 80197c6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 80197ca:	6878      	ldr	r0, [r7, #4]
 80197cc:	f008 fade 	bl	8021d8c <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80197d0:	2103      	movs	r1, #3
 80197d2:	6878      	ldr	r0, [r7, #4]
 80197d4:	f7ff ff68 	bl	80196a8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80197d8:	687b      	ldr	r3, [r7, #4]
 80197da:	69db      	ldr	r3, [r3, #28]
 80197dc:	2b00      	cmp	r3, #0
 80197de:	d003      	beq.n	80197e8 <netif_set_link_up+0x5c>
 80197e0:	687b      	ldr	r3, [r7, #4]
 80197e2:	69db      	ldr	r3, [r3, #28]
 80197e4:	6878      	ldr	r0, [r7, #4]
 80197e6:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80197e8:	3708      	adds	r7, #8
 80197ea:	46bd      	mov	sp, r7
 80197ec:	bd80      	pop	{r7, pc}
 80197ee:	bf00      	nop
 80197f0:	0802cc90 	.word	0x0802cc90
 80197f4:	0802ce78 	.word	0x0802ce78
 80197f8:	0802cce0 	.word	0x0802cce0

080197fc <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80197fc:	b580      	push	{r7, lr}
 80197fe:	b082      	sub	sp, #8
 8019800:	af00      	add	r7, sp, #0
 8019802:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8019804:	687b      	ldr	r3, [r7, #4]
 8019806:	2b00      	cmp	r3, #0
 8019808:	d107      	bne.n	801981a <netif_set_link_down+0x1e>
 801980a:	4b11      	ldr	r3, [pc, #68]	; (8019850 <netif_set_link_down+0x54>)
 801980c:	f240 4206 	movw	r2, #1030	; 0x406
 8019810:	4910      	ldr	r1, [pc, #64]	; (8019854 <netif_set_link_down+0x58>)
 8019812:	4811      	ldr	r0, [pc, #68]	; (8019858 <netif_set_link_down+0x5c>)
 8019814:	f00d f85a 	bl	80268cc <iprintf>
 8019818:	e017      	b.n	801984a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 801981a:	687b      	ldr	r3, [r7, #4]
 801981c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8019820:	f003 0304 	and.w	r3, r3, #4
 8019824:	2b00      	cmp	r3, #0
 8019826:	d010      	beq.n	801984a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8019828:	687b      	ldr	r3, [r7, #4]
 801982a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801982e:	f023 0304 	bic.w	r3, r3, #4
 8019832:	b2da      	uxtb	r2, r3
 8019834:	687b      	ldr	r3, [r7, #4]
 8019836:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 801983a:	687b      	ldr	r3, [r7, #4]
 801983c:	69db      	ldr	r3, [r3, #28]
 801983e:	2b00      	cmp	r3, #0
 8019840:	d003      	beq.n	801984a <netif_set_link_down+0x4e>
 8019842:	687b      	ldr	r3, [r7, #4]
 8019844:	69db      	ldr	r3, [r3, #28]
 8019846:	6878      	ldr	r0, [r7, #4]
 8019848:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801984a:	3708      	adds	r7, #8
 801984c:	46bd      	mov	sp, r7
 801984e:	bd80      	pop	{r7, pc}
 8019850:	0802cc90 	.word	0x0802cc90
 8019854:	0802ce9c 	.word	0x0802ce9c
 8019858:	0802cce0 	.word	0x0802cce0

0801985c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 801985c:	b480      	push	{r7}
 801985e:	b083      	sub	sp, #12
 8019860:	af00      	add	r7, sp, #0
 8019862:	6078      	str	r0, [r7, #4]
 8019864:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8019866:	687b      	ldr	r3, [r7, #4]
 8019868:	2b00      	cmp	r3, #0
 801986a:	d002      	beq.n	8019872 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 801986c:	687b      	ldr	r3, [r7, #4]
 801986e:	683a      	ldr	r2, [r7, #0]
 8019870:	61da      	str	r2, [r3, #28]
  }
}
 8019872:	bf00      	nop
 8019874:	370c      	adds	r7, #12
 8019876:	46bd      	mov	sp, r7
 8019878:	f85d 7b04 	ldr.w	r7, [sp], #4
 801987c:	4770      	bx	lr

0801987e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 801987e:	b480      	push	{r7}
 8019880:	b085      	sub	sp, #20
 8019882:	af00      	add	r7, sp, #0
 8019884:	60f8      	str	r0, [r7, #12]
 8019886:	60b9      	str	r1, [r7, #8]
 8019888:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 801988a:	f06f 030b 	mvn.w	r3, #11
}
 801988e:	4618      	mov	r0, r3
 8019890:	3714      	adds	r7, #20
 8019892:	46bd      	mov	sp, r7
 8019894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019898:	4770      	bx	lr
	...

0801989c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 801989c:	b480      	push	{r7}
 801989e:	b085      	sub	sp, #20
 80198a0:	af00      	add	r7, sp, #0
 80198a2:	4603      	mov	r3, r0
 80198a4:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80198a6:	79fb      	ldrb	r3, [r7, #7]
 80198a8:	2b00      	cmp	r3, #0
 80198aa:	d013      	beq.n	80198d4 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80198ac:	4b0d      	ldr	r3, [pc, #52]	; (80198e4 <netif_get_by_index+0x48>)
 80198ae:	681b      	ldr	r3, [r3, #0]
 80198b0:	60fb      	str	r3, [r7, #12]
 80198b2:	e00c      	b.n	80198ce <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80198b4:	68fb      	ldr	r3, [r7, #12]
 80198b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80198ba:	3301      	adds	r3, #1
 80198bc:	b2db      	uxtb	r3, r3
 80198be:	79fa      	ldrb	r2, [r7, #7]
 80198c0:	429a      	cmp	r2, r3
 80198c2:	d101      	bne.n	80198c8 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80198c4:	68fb      	ldr	r3, [r7, #12]
 80198c6:	e006      	b.n	80198d6 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80198c8:	68fb      	ldr	r3, [r7, #12]
 80198ca:	681b      	ldr	r3, [r3, #0]
 80198cc:	60fb      	str	r3, [r7, #12]
 80198ce:	68fb      	ldr	r3, [r7, #12]
 80198d0:	2b00      	cmp	r3, #0
 80198d2:	d1ef      	bne.n	80198b4 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80198d4:	2300      	movs	r3, #0
}
 80198d6:	4618      	mov	r0, r3
 80198d8:	3714      	adds	r7, #20
 80198da:	46bd      	mov	sp, r7
 80198dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198e0:	4770      	bx	lr
 80198e2:	bf00      	nop
 80198e4:	2001c0ec 	.word	0x2001c0ec

080198e8 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80198e8:	b580      	push	{r7, lr}
 80198ea:	b082      	sub	sp, #8
 80198ec:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80198ee:	f00c f8a1 	bl	8025a34 <sys_arch_protect>
 80198f2:	6038      	str	r0, [r7, #0]
 80198f4:	4b0d      	ldr	r3, [pc, #52]	; (801992c <pbuf_free_ooseq+0x44>)
 80198f6:	2200      	movs	r2, #0
 80198f8:	701a      	strb	r2, [r3, #0]
 80198fa:	6838      	ldr	r0, [r7, #0]
 80198fc:	f00c f8a8 	bl	8025a50 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8019900:	4b0b      	ldr	r3, [pc, #44]	; (8019930 <pbuf_free_ooseq+0x48>)
 8019902:	681b      	ldr	r3, [r3, #0]
 8019904:	607b      	str	r3, [r7, #4]
 8019906:	e00a      	b.n	801991e <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8019908:	687b      	ldr	r3, [r7, #4]
 801990a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801990c:	2b00      	cmp	r3, #0
 801990e:	d003      	beq.n	8019918 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8019910:	6878      	ldr	r0, [r7, #4]
 8019912:	f002 fda3 	bl	801c45c <tcp_free_ooseq>
      return;
 8019916:	e005      	b.n	8019924 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8019918:	687b      	ldr	r3, [r7, #4]
 801991a:	68db      	ldr	r3, [r3, #12]
 801991c:	607b      	str	r3, [r7, #4]
 801991e:	687b      	ldr	r3, [r7, #4]
 8019920:	2b00      	cmp	r3, #0
 8019922:	d1f1      	bne.n	8019908 <pbuf_free_ooseq+0x20>
    }
  }
}
 8019924:	3708      	adds	r7, #8
 8019926:	46bd      	mov	sp, r7
 8019928:	bd80      	pop	{r7, pc}
 801992a:	bf00      	nop
 801992c:	2001c0f4 	.word	0x2001c0f4
 8019930:	2001c0fc 	.word	0x2001c0fc

08019934 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8019934:	b580      	push	{r7, lr}
 8019936:	b082      	sub	sp, #8
 8019938:	af00      	add	r7, sp, #0
 801993a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 801993c:	f7ff ffd4 	bl	80198e8 <pbuf_free_ooseq>
}
 8019940:	bf00      	nop
 8019942:	3708      	adds	r7, #8
 8019944:	46bd      	mov	sp, r7
 8019946:	bd80      	pop	{r7, pc}

08019948 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8019948:	b580      	push	{r7, lr}
 801994a:	b082      	sub	sp, #8
 801994c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 801994e:	f00c f871 	bl	8025a34 <sys_arch_protect>
 8019952:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8019954:	4b0f      	ldr	r3, [pc, #60]	; (8019994 <pbuf_pool_is_empty+0x4c>)
 8019956:	781b      	ldrb	r3, [r3, #0]
 8019958:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 801995a:	4b0e      	ldr	r3, [pc, #56]	; (8019994 <pbuf_pool_is_empty+0x4c>)
 801995c:	2201      	movs	r2, #1
 801995e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8019960:	6878      	ldr	r0, [r7, #4]
 8019962:	f00c f875 	bl	8025a50 <sys_arch_unprotect>

  if (!queued) {
 8019966:	78fb      	ldrb	r3, [r7, #3]
 8019968:	2b00      	cmp	r3, #0
 801996a:	d10f      	bne.n	801998c <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 801996c:	2100      	movs	r1, #0
 801996e:	480a      	ldr	r0, [pc, #40]	; (8019998 <pbuf_pool_is_empty+0x50>)
 8019970:	f7fc fa2c 	bl	8015dcc <tcpip_try_callback>
 8019974:	4603      	mov	r3, r0
 8019976:	2b00      	cmp	r3, #0
 8019978:	d008      	beq.n	801998c <pbuf_pool_is_empty+0x44>
 801997a:	f00c f85b 	bl	8025a34 <sys_arch_protect>
 801997e:	6078      	str	r0, [r7, #4]
 8019980:	4b04      	ldr	r3, [pc, #16]	; (8019994 <pbuf_pool_is_empty+0x4c>)
 8019982:	2200      	movs	r2, #0
 8019984:	701a      	strb	r2, [r3, #0]
 8019986:	6878      	ldr	r0, [r7, #4]
 8019988:	f00c f862 	bl	8025a50 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 801998c:	bf00      	nop
 801998e:	3708      	adds	r7, #8
 8019990:	46bd      	mov	sp, r7
 8019992:	bd80      	pop	{r7, pc}
 8019994:	2001c0f4 	.word	0x2001c0f4
 8019998:	08019935 	.word	0x08019935

0801999c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 801999c:	b480      	push	{r7}
 801999e:	b085      	sub	sp, #20
 80199a0:	af00      	add	r7, sp, #0
 80199a2:	60f8      	str	r0, [r7, #12]
 80199a4:	60b9      	str	r1, [r7, #8]
 80199a6:	4611      	mov	r1, r2
 80199a8:	461a      	mov	r2, r3
 80199aa:	460b      	mov	r3, r1
 80199ac:	80fb      	strh	r3, [r7, #6]
 80199ae:	4613      	mov	r3, r2
 80199b0:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80199b2:	68fb      	ldr	r3, [r7, #12]
 80199b4:	2200      	movs	r2, #0
 80199b6:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80199b8:	68fb      	ldr	r3, [r7, #12]
 80199ba:	68ba      	ldr	r2, [r7, #8]
 80199bc:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80199be:	68fb      	ldr	r3, [r7, #12]
 80199c0:	88fa      	ldrh	r2, [r7, #6]
 80199c2:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80199c4:	68fb      	ldr	r3, [r7, #12]
 80199c6:	88ba      	ldrh	r2, [r7, #4]
 80199c8:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80199ca:	8b3b      	ldrh	r3, [r7, #24]
 80199cc:	b2da      	uxtb	r2, r3
 80199ce:	68fb      	ldr	r3, [r7, #12]
 80199d0:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80199d2:	68fb      	ldr	r3, [r7, #12]
 80199d4:	7f3a      	ldrb	r2, [r7, #28]
 80199d6:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80199d8:	68fb      	ldr	r3, [r7, #12]
 80199da:	2201      	movs	r2, #1
 80199dc:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80199de:	68fb      	ldr	r3, [r7, #12]
 80199e0:	2200      	movs	r2, #0
 80199e2:	73da      	strb	r2, [r3, #15]
}
 80199e4:	bf00      	nop
 80199e6:	3714      	adds	r7, #20
 80199e8:	46bd      	mov	sp, r7
 80199ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199ee:	4770      	bx	lr

080199f0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80199f0:	b580      	push	{r7, lr}
 80199f2:	b08c      	sub	sp, #48	; 0x30
 80199f4:	af02      	add	r7, sp, #8
 80199f6:	4603      	mov	r3, r0
 80199f8:	71fb      	strb	r3, [r7, #7]
 80199fa:	460b      	mov	r3, r1
 80199fc:	80bb      	strh	r3, [r7, #4]
 80199fe:	4613      	mov	r3, r2
 8019a00:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8019a02:	79fb      	ldrb	r3, [r7, #7]
 8019a04:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8019a06:	887b      	ldrh	r3, [r7, #2]
 8019a08:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8019a0c:	d07f      	beq.n	8019b0e <pbuf_alloc+0x11e>
 8019a0e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8019a12:	f300 80c8 	bgt.w	8019ba6 <pbuf_alloc+0x1b6>
 8019a16:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8019a1a:	d010      	beq.n	8019a3e <pbuf_alloc+0x4e>
 8019a1c:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8019a20:	f300 80c1 	bgt.w	8019ba6 <pbuf_alloc+0x1b6>
 8019a24:	2b01      	cmp	r3, #1
 8019a26:	d002      	beq.n	8019a2e <pbuf_alloc+0x3e>
 8019a28:	2b41      	cmp	r3, #65	; 0x41
 8019a2a:	f040 80bc 	bne.w	8019ba6 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8019a2e:	887a      	ldrh	r2, [r7, #2]
 8019a30:	88bb      	ldrh	r3, [r7, #4]
 8019a32:	4619      	mov	r1, r3
 8019a34:	2000      	movs	r0, #0
 8019a36:	f000 f8d1 	bl	8019bdc <pbuf_alloc_reference>
 8019a3a:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8019a3c:	e0bd      	b.n	8019bba <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8019a3e:	2300      	movs	r3, #0
 8019a40:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8019a42:	2300      	movs	r3, #0
 8019a44:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8019a46:	88bb      	ldrh	r3, [r7, #4]
 8019a48:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8019a4a:	200c      	movs	r0, #12
 8019a4c:	f7ff fbb2 	bl	80191b4 <memp_malloc>
 8019a50:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8019a52:	693b      	ldr	r3, [r7, #16]
 8019a54:	2b00      	cmp	r3, #0
 8019a56:	d109      	bne.n	8019a6c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8019a58:	f7ff ff76 	bl	8019948 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8019a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a5e:	2b00      	cmp	r3, #0
 8019a60:	d002      	beq.n	8019a68 <pbuf_alloc+0x78>
            pbuf_free(p);
 8019a62:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019a64:	f000 faa8 	bl	8019fb8 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8019a68:	2300      	movs	r3, #0
 8019a6a:	e0a7      	b.n	8019bbc <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8019a6c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019a6e:	3303      	adds	r3, #3
 8019a70:	b29b      	uxth	r3, r3
 8019a72:	f023 0303 	bic.w	r3, r3, #3
 8019a76:	b29b      	uxth	r3, r3
 8019a78:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8019a7c:	b29b      	uxth	r3, r3
 8019a7e:	8b7a      	ldrh	r2, [r7, #26]
 8019a80:	4293      	cmp	r3, r2
 8019a82:	bf28      	it	cs
 8019a84:	4613      	movcs	r3, r2
 8019a86:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8019a88:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019a8a:	3310      	adds	r3, #16
 8019a8c:	693a      	ldr	r2, [r7, #16]
 8019a8e:	4413      	add	r3, r2
 8019a90:	3303      	adds	r3, #3
 8019a92:	f023 0303 	bic.w	r3, r3, #3
 8019a96:	4618      	mov	r0, r3
 8019a98:	89f9      	ldrh	r1, [r7, #14]
 8019a9a:	8b7a      	ldrh	r2, [r7, #26]
 8019a9c:	2300      	movs	r3, #0
 8019a9e:	9301      	str	r3, [sp, #4]
 8019aa0:	887b      	ldrh	r3, [r7, #2]
 8019aa2:	9300      	str	r3, [sp, #0]
 8019aa4:	460b      	mov	r3, r1
 8019aa6:	4601      	mov	r1, r0
 8019aa8:	6938      	ldr	r0, [r7, #16]
 8019aaa:	f7ff ff77 	bl	801999c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8019aae:	693b      	ldr	r3, [r7, #16]
 8019ab0:	685b      	ldr	r3, [r3, #4]
 8019ab2:	f003 0303 	and.w	r3, r3, #3
 8019ab6:	2b00      	cmp	r3, #0
 8019ab8:	d006      	beq.n	8019ac8 <pbuf_alloc+0xd8>
 8019aba:	4b42      	ldr	r3, [pc, #264]	; (8019bc4 <pbuf_alloc+0x1d4>)
 8019abc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8019ac0:	4941      	ldr	r1, [pc, #260]	; (8019bc8 <pbuf_alloc+0x1d8>)
 8019ac2:	4842      	ldr	r0, [pc, #264]	; (8019bcc <pbuf_alloc+0x1dc>)
 8019ac4:	f00c ff02 	bl	80268cc <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8019ac8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019aca:	3303      	adds	r3, #3
 8019acc:	f023 0303 	bic.w	r3, r3, #3
 8019ad0:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8019ad4:	d106      	bne.n	8019ae4 <pbuf_alloc+0xf4>
 8019ad6:	4b3b      	ldr	r3, [pc, #236]	; (8019bc4 <pbuf_alloc+0x1d4>)
 8019ad8:	f44f 7281 	mov.w	r2, #258	; 0x102
 8019adc:	493c      	ldr	r1, [pc, #240]	; (8019bd0 <pbuf_alloc+0x1e0>)
 8019ade:	483b      	ldr	r0, [pc, #236]	; (8019bcc <pbuf_alloc+0x1dc>)
 8019ae0:	f00c fef4 	bl	80268cc <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8019ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ae6:	2b00      	cmp	r3, #0
 8019ae8:	d102      	bne.n	8019af0 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8019aea:	693b      	ldr	r3, [r7, #16]
 8019aec:	627b      	str	r3, [r7, #36]	; 0x24
 8019aee:	e002      	b.n	8019af6 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8019af0:	69fb      	ldr	r3, [r7, #28]
 8019af2:	693a      	ldr	r2, [r7, #16]
 8019af4:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8019af6:	693b      	ldr	r3, [r7, #16]
 8019af8:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8019afa:	8b7a      	ldrh	r2, [r7, #26]
 8019afc:	89fb      	ldrh	r3, [r7, #14]
 8019afe:	1ad3      	subs	r3, r2, r3
 8019b00:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8019b02:	2300      	movs	r3, #0
 8019b04:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8019b06:	8b7b      	ldrh	r3, [r7, #26]
 8019b08:	2b00      	cmp	r3, #0
 8019b0a:	d19e      	bne.n	8019a4a <pbuf_alloc+0x5a>
      break;
 8019b0c:	e055      	b.n	8019bba <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8019b0e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019b10:	3303      	adds	r3, #3
 8019b12:	b29b      	uxth	r3, r3
 8019b14:	f023 0303 	bic.w	r3, r3, #3
 8019b18:	b29a      	uxth	r2, r3
 8019b1a:	88bb      	ldrh	r3, [r7, #4]
 8019b1c:	3303      	adds	r3, #3
 8019b1e:	b29b      	uxth	r3, r3
 8019b20:	f023 0303 	bic.w	r3, r3, #3
 8019b24:	b29b      	uxth	r3, r3
 8019b26:	4413      	add	r3, r2
 8019b28:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8019b2a:	8b3b      	ldrh	r3, [r7, #24]
 8019b2c:	3310      	adds	r3, #16
 8019b2e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8019b30:	8b3a      	ldrh	r2, [r7, #24]
 8019b32:	88bb      	ldrh	r3, [r7, #4]
 8019b34:	3303      	adds	r3, #3
 8019b36:	f023 0303 	bic.w	r3, r3, #3
 8019b3a:	429a      	cmp	r2, r3
 8019b3c:	d306      	bcc.n	8019b4c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8019b3e:	8afa      	ldrh	r2, [r7, #22]
 8019b40:	88bb      	ldrh	r3, [r7, #4]
 8019b42:	3303      	adds	r3, #3
 8019b44:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8019b48:	429a      	cmp	r2, r3
 8019b4a:	d201      	bcs.n	8019b50 <pbuf_alloc+0x160>
        return NULL;
 8019b4c:	2300      	movs	r3, #0
 8019b4e:	e035      	b.n	8019bbc <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8019b50:	8afb      	ldrh	r3, [r7, #22]
 8019b52:	4618      	mov	r0, r3
 8019b54:	f7ff f984 	bl	8018e60 <mem_malloc>
 8019b58:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8019b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b5c:	2b00      	cmp	r3, #0
 8019b5e:	d101      	bne.n	8019b64 <pbuf_alloc+0x174>
        return NULL;
 8019b60:	2300      	movs	r3, #0
 8019b62:	e02b      	b.n	8019bbc <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8019b64:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019b66:	3310      	adds	r3, #16
 8019b68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019b6a:	4413      	add	r3, r2
 8019b6c:	3303      	adds	r3, #3
 8019b6e:	f023 0303 	bic.w	r3, r3, #3
 8019b72:	4618      	mov	r0, r3
 8019b74:	88b9      	ldrh	r1, [r7, #4]
 8019b76:	88ba      	ldrh	r2, [r7, #4]
 8019b78:	2300      	movs	r3, #0
 8019b7a:	9301      	str	r3, [sp, #4]
 8019b7c:	887b      	ldrh	r3, [r7, #2]
 8019b7e:	9300      	str	r3, [sp, #0]
 8019b80:	460b      	mov	r3, r1
 8019b82:	4601      	mov	r1, r0
 8019b84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019b86:	f7ff ff09 	bl	801999c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8019b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b8c:	685b      	ldr	r3, [r3, #4]
 8019b8e:	f003 0303 	and.w	r3, r3, #3
 8019b92:	2b00      	cmp	r3, #0
 8019b94:	d010      	beq.n	8019bb8 <pbuf_alloc+0x1c8>
 8019b96:	4b0b      	ldr	r3, [pc, #44]	; (8019bc4 <pbuf_alloc+0x1d4>)
 8019b98:	f44f 7291 	mov.w	r2, #290	; 0x122
 8019b9c:	490d      	ldr	r1, [pc, #52]	; (8019bd4 <pbuf_alloc+0x1e4>)
 8019b9e:	480b      	ldr	r0, [pc, #44]	; (8019bcc <pbuf_alloc+0x1dc>)
 8019ba0:	f00c fe94 	bl	80268cc <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8019ba4:	e008      	b.n	8019bb8 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8019ba6:	4b07      	ldr	r3, [pc, #28]	; (8019bc4 <pbuf_alloc+0x1d4>)
 8019ba8:	f240 1227 	movw	r2, #295	; 0x127
 8019bac:	490a      	ldr	r1, [pc, #40]	; (8019bd8 <pbuf_alloc+0x1e8>)
 8019bae:	4807      	ldr	r0, [pc, #28]	; (8019bcc <pbuf_alloc+0x1dc>)
 8019bb0:	f00c fe8c 	bl	80268cc <iprintf>
      return NULL;
 8019bb4:	2300      	movs	r3, #0
 8019bb6:	e001      	b.n	8019bbc <pbuf_alloc+0x1cc>
      break;
 8019bb8:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8019bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8019bbc:	4618      	mov	r0, r3
 8019bbe:	3728      	adds	r7, #40	; 0x28
 8019bc0:	46bd      	mov	sp, r7
 8019bc2:	bd80      	pop	{r7, pc}
 8019bc4:	0802cec0 	.word	0x0802cec0
 8019bc8:	0802cef0 	.word	0x0802cef0
 8019bcc:	0802cf20 	.word	0x0802cf20
 8019bd0:	0802cf48 	.word	0x0802cf48
 8019bd4:	0802cf7c 	.word	0x0802cf7c
 8019bd8:	0802cfa8 	.word	0x0802cfa8

08019bdc <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8019bdc:	b580      	push	{r7, lr}
 8019bde:	b086      	sub	sp, #24
 8019be0:	af02      	add	r7, sp, #8
 8019be2:	6078      	str	r0, [r7, #4]
 8019be4:	460b      	mov	r3, r1
 8019be6:	807b      	strh	r3, [r7, #2]
 8019be8:	4613      	mov	r3, r2
 8019bea:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8019bec:	883b      	ldrh	r3, [r7, #0]
 8019bee:	2b41      	cmp	r3, #65	; 0x41
 8019bf0:	d009      	beq.n	8019c06 <pbuf_alloc_reference+0x2a>
 8019bf2:	883b      	ldrh	r3, [r7, #0]
 8019bf4:	2b01      	cmp	r3, #1
 8019bf6:	d006      	beq.n	8019c06 <pbuf_alloc_reference+0x2a>
 8019bf8:	4b0f      	ldr	r3, [pc, #60]	; (8019c38 <pbuf_alloc_reference+0x5c>)
 8019bfa:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8019bfe:	490f      	ldr	r1, [pc, #60]	; (8019c3c <pbuf_alloc_reference+0x60>)
 8019c00:	480f      	ldr	r0, [pc, #60]	; (8019c40 <pbuf_alloc_reference+0x64>)
 8019c02:	f00c fe63 	bl	80268cc <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8019c06:	200b      	movs	r0, #11
 8019c08:	f7ff fad4 	bl	80191b4 <memp_malloc>
 8019c0c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8019c0e:	68fb      	ldr	r3, [r7, #12]
 8019c10:	2b00      	cmp	r3, #0
 8019c12:	d101      	bne.n	8019c18 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8019c14:	2300      	movs	r3, #0
 8019c16:	e00b      	b.n	8019c30 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8019c18:	8879      	ldrh	r1, [r7, #2]
 8019c1a:	887a      	ldrh	r2, [r7, #2]
 8019c1c:	2300      	movs	r3, #0
 8019c1e:	9301      	str	r3, [sp, #4]
 8019c20:	883b      	ldrh	r3, [r7, #0]
 8019c22:	9300      	str	r3, [sp, #0]
 8019c24:	460b      	mov	r3, r1
 8019c26:	6879      	ldr	r1, [r7, #4]
 8019c28:	68f8      	ldr	r0, [r7, #12]
 8019c2a:	f7ff feb7 	bl	801999c <pbuf_init_alloced_pbuf>
  return p;
 8019c2e:	68fb      	ldr	r3, [r7, #12]
}
 8019c30:	4618      	mov	r0, r3
 8019c32:	3710      	adds	r7, #16
 8019c34:	46bd      	mov	sp, r7
 8019c36:	bd80      	pop	{r7, pc}
 8019c38:	0802cec0 	.word	0x0802cec0
 8019c3c:	0802cfc4 	.word	0x0802cfc4
 8019c40:	0802cf20 	.word	0x0802cf20

08019c44 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8019c44:	b580      	push	{r7, lr}
 8019c46:	b088      	sub	sp, #32
 8019c48:	af02      	add	r7, sp, #8
 8019c4a:	607b      	str	r3, [r7, #4]
 8019c4c:	4603      	mov	r3, r0
 8019c4e:	73fb      	strb	r3, [r7, #15]
 8019c50:	460b      	mov	r3, r1
 8019c52:	81bb      	strh	r3, [r7, #12]
 8019c54:	4613      	mov	r3, r2
 8019c56:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8019c58:	7bfb      	ldrb	r3, [r7, #15]
 8019c5a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8019c5c:	8a7b      	ldrh	r3, [r7, #18]
 8019c5e:	3303      	adds	r3, #3
 8019c60:	f023 0203 	bic.w	r2, r3, #3
 8019c64:	89bb      	ldrh	r3, [r7, #12]
 8019c66:	441a      	add	r2, r3
 8019c68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019c6a:	429a      	cmp	r2, r3
 8019c6c:	d901      	bls.n	8019c72 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8019c6e:	2300      	movs	r3, #0
 8019c70:	e018      	b.n	8019ca4 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8019c72:	6a3b      	ldr	r3, [r7, #32]
 8019c74:	2b00      	cmp	r3, #0
 8019c76:	d007      	beq.n	8019c88 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8019c78:	8a7b      	ldrh	r3, [r7, #18]
 8019c7a:	3303      	adds	r3, #3
 8019c7c:	f023 0303 	bic.w	r3, r3, #3
 8019c80:	6a3a      	ldr	r2, [r7, #32]
 8019c82:	4413      	add	r3, r2
 8019c84:	617b      	str	r3, [r7, #20]
 8019c86:	e001      	b.n	8019c8c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8019c88:	2300      	movs	r3, #0
 8019c8a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8019c8c:	6878      	ldr	r0, [r7, #4]
 8019c8e:	89b9      	ldrh	r1, [r7, #12]
 8019c90:	89ba      	ldrh	r2, [r7, #12]
 8019c92:	2302      	movs	r3, #2
 8019c94:	9301      	str	r3, [sp, #4]
 8019c96:	897b      	ldrh	r3, [r7, #10]
 8019c98:	9300      	str	r3, [sp, #0]
 8019c9a:	460b      	mov	r3, r1
 8019c9c:	6979      	ldr	r1, [r7, #20]
 8019c9e:	f7ff fe7d 	bl	801999c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8019ca2:	687b      	ldr	r3, [r7, #4]
}
 8019ca4:	4618      	mov	r0, r3
 8019ca6:	3718      	adds	r7, #24
 8019ca8:	46bd      	mov	sp, r7
 8019caa:	bd80      	pop	{r7, pc}

08019cac <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8019cac:	b580      	push	{r7, lr}
 8019cae:	b084      	sub	sp, #16
 8019cb0:	af00      	add	r7, sp, #0
 8019cb2:	6078      	str	r0, [r7, #4]
 8019cb4:	460b      	mov	r3, r1
 8019cb6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8019cb8:	687b      	ldr	r3, [r7, #4]
 8019cba:	2b00      	cmp	r3, #0
 8019cbc:	d106      	bne.n	8019ccc <pbuf_realloc+0x20>
 8019cbe:	4b3a      	ldr	r3, [pc, #232]	; (8019da8 <pbuf_realloc+0xfc>)
 8019cc0:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8019cc4:	4939      	ldr	r1, [pc, #228]	; (8019dac <pbuf_realloc+0x100>)
 8019cc6:	483a      	ldr	r0, [pc, #232]	; (8019db0 <pbuf_realloc+0x104>)
 8019cc8:	f00c fe00 	bl	80268cc <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8019ccc:	687b      	ldr	r3, [r7, #4]
 8019cce:	891b      	ldrh	r3, [r3, #8]
 8019cd0:	887a      	ldrh	r2, [r7, #2]
 8019cd2:	429a      	cmp	r2, r3
 8019cd4:	d263      	bcs.n	8019d9e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8019cd6:	687b      	ldr	r3, [r7, #4]
 8019cd8:	891a      	ldrh	r2, [r3, #8]
 8019cda:	887b      	ldrh	r3, [r7, #2]
 8019cdc:	1ad3      	subs	r3, r2, r3
 8019cde:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8019ce0:	887b      	ldrh	r3, [r7, #2]
 8019ce2:	817b      	strh	r3, [r7, #10]
  q = p;
 8019ce4:	687b      	ldr	r3, [r7, #4]
 8019ce6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8019ce8:	e018      	b.n	8019d1c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8019cea:	68fb      	ldr	r3, [r7, #12]
 8019cec:	895b      	ldrh	r3, [r3, #10]
 8019cee:	897a      	ldrh	r2, [r7, #10]
 8019cf0:	1ad3      	subs	r3, r2, r3
 8019cf2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8019cf4:	68fb      	ldr	r3, [r7, #12]
 8019cf6:	891a      	ldrh	r2, [r3, #8]
 8019cf8:	893b      	ldrh	r3, [r7, #8]
 8019cfa:	1ad3      	subs	r3, r2, r3
 8019cfc:	b29a      	uxth	r2, r3
 8019cfe:	68fb      	ldr	r3, [r7, #12]
 8019d00:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8019d02:	68fb      	ldr	r3, [r7, #12]
 8019d04:	681b      	ldr	r3, [r3, #0]
 8019d06:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8019d08:	68fb      	ldr	r3, [r7, #12]
 8019d0a:	2b00      	cmp	r3, #0
 8019d0c:	d106      	bne.n	8019d1c <pbuf_realloc+0x70>
 8019d0e:	4b26      	ldr	r3, [pc, #152]	; (8019da8 <pbuf_realloc+0xfc>)
 8019d10:	f240 12af 	movw	r2, #431	; 0x1af
 8019d14:	4927      	ldr	r1, [pc, #156]	; (8019db4 <pbuf_realloc+0x108>)
 8019d16:	4826      	ldr	r0, [pc, #152]	; (8019db0 <pbuf_realloc+0x104>)
 8019d18:	f00c fdd8 	bl	80268cc <iprintf>
  while (rem_len > q->len) {
 8019d1c:	68fb      	ldr	r3, [r7, #12]
 8019d1e:	895b      	ldrh	r3, [r3, #10]
 8019d20:	897a      	ldrh	r2, [r7, #10]
 8019d22:	429a      	cmp	r2, r3
 8019d24:	d8e1      	bhi.n	8019cea <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8019d26:	68fb      	ldr	r3, [r7, #12]
 8019d28:	7b1b      	ldrb	r3, [r3, #12]
 8019d2a:	f003 030f 	and.w	r3, r3, #15
 8019d2e:	2b00      	cmp	r3, #0
 8019d30:	d121      	bne.n	8019d76 <pbuf_realloc+0xca>
 8019d32:	68fb      	ldr	r3, [r7, #12]
 8019d34:	895b      	ldrh	r3, [r3, #10]
 8019d36:	897a      	ldrh	r2, [r7, #10]
 8019d38:	429a      	cmp	r2, r3
 8019d3a:	d01c      	beq.n	8019d76 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8019d3c:	68fb      	ldr	r3, [r7, #12]
 8019d3e:	7b5b      	ldrb	r3, [r3, #13]
 8019d40:	f003 0302 	and.w	r3, r3, #2
 8019d44:	2b00      	cmp	r3, #0
 8019d46:	d116      	bne.n	8019d76 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8019d48:	68fb      	ldr	r3, [r7, #12]
 8019d4a:	685a      	ldr	r2, [r3, #4]
 8019d4c:	68fb      	ldr	r3, [r7, #12]
 8019d4e:	1ad3      	subs	r3, r2, r3
 8019d50:	b29a      	uxth	r2, r3
 8019d52:	897b      	ldrh	r3, [r7, #10]
 8019d54:	4413      	add	r3, r2
 8019d56:	b29b      	uxth	r3, r3
 8019d58:	4619      	mov	r1, r3
 8019d5a:	68f8      	ldr	r0, [r7, #12]
 8019d5c:	f7fe ff76 	bl	8018c4c <mem_trim>
 8019d60:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8019d62:	68fb      	ldr	r3, [r7, #12]
 8019d64:	2b00      	cmp	r3, #0
 8019d66:	d106      	bne.n	8019d76 <pbuf_realloc+0xca>
 8019d68:	4b0f      	ldr	r3, [pc, #60]	; (8019da8 <pbuf_realloc+0xfc>)
 8019d6a:	f240 12bd 	movw	r2, #445	; 0x1bd
 8019d6e:	4912      	ldr	r1, [pc, #72]	; (8019db8 <pbuf_realloc+0x10c>)
 8019d70:	480f      	ldr	r0, [pc, #60]	; (8019db0 <pbuf_realloc+0x104>)
 8019d72:	f00c fdab 	bl	80268cc <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8019d76:	68fb      	ldr	r3, [r7, #12]
 8019d78:	897a      	ldrh	r2, [r7, #10]
 8019d7a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8019d7c:	68fb      	ldr	r3, [r7, #12]
 8019d7e:	895a      	ldrh	r2, [r3, #10]
 8019d80:	68fb      	ldr	r3, [r7, #12]
 8019d82:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8019d84:	68fb      	ldr	r3, [r7, #12]
 8019d86:	681b      	ldr	r3, [r3, #0]
 8019d88:	2b00      	cmp	r3, #0
 8019d8a:	d004      	beq.n	8019d96 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8019d8c:	68fb      	ldr	r3, [r7, #12]
 8019d8e:	681b      	ldr	r3, [r3, #0]
 8019d90:	4618      	mov	r0, r3
 8019d92:	f000 f911 	bl	8019fb8 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8019d96:	68fb      	ldr	r3, [r7, #12]
 8019d98:	2200      	movs	r2, #0
 8019d9a:	601a      	str	r2, [r3, #0]
 8019d9c:	e000      	b.n	8019da0 <pbuf_realloc+0xf4>
    return;
 8019d9e:	bf00      	nop

}
 8019da0:	3710      	adds	r7, #16
 8019da2:	46bd      	mov	sp, r7
 8019da4:	bd80      	pop	{r7, pc}
 8019da6:	bf00      	nop
 8019da8:	0802cec0 	.word	0x0802cec0
 8019dac:	0802cfd8 	.word	0x0802cfd8
 8019db0:	0802cf20 	.word	0x0802cf20
 8019db4:	0802cff0 	.word	0x0802cff0
 8019db8:	0802d008 	.word	0x0802d008

08019dbc <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8019dbc:	b580      	push	{r7, lr}
 8019dbe:	b086      	sub	sp, #24
 8019dc0:	af00      	add	r7, sp, #0
 8019dc2:	60f8      	str	r0, [r7, #12]
 8019dc4:	60b9      	str	r1, [r7, #8]
 8019dc6:	4613      	mov	r3, r2
 8019dc8:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8019dca:	68fb      	ldr	r3, [r7, #12]
 8019dcc:	2b00      	cmp	r3, #0
 8019dce:	d106      	bne.n	8019dde <pbuf_add_header_impl+0x22>
 8019dd0:	4b2b      	ldr	r3, [pc, #172]	; (8019e80 <pbuf_add_header_impl+0xc4>)
 8019dd2:	f240 12df 	movw	r2, #479	; 0x1df
 8019dd6:	492b      	ldr	r1, [pc, #172]	; (8019e84 <pbuf_add_header_impl+0xc8>)
 8019dd8:	482b      	ldr	r0, [pc, #172]	; (8019e88 <pbuf_add_header_impl+0xcc>)
 8019dda:	f00c fd77 	bl	80268cc <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8019dde:	68fb      	ldr	r3, [r7, #12]
 8019de0:	2b00      	cmp	r3, #0
 8019de2:	d003      	beq.n	8019dec <pbuf_add_header_impl+0x30>
 8019de4:	68bb      	ldr	r3, [r7, #8]
 8019de6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8019dea:	d301      	bcc.n	8019df0 <pbuf_add_header_impl+0x34>
    return 1;
 8019dec:	2301      	movs	r3, #1
 8019dee:	e043      	b.n	8019e78 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8019df0:	68bb      	ldr	r3, [r7, #8]
 8019df2:	2b00      	cmp	r3, #0
 8019df4:	d101      	bne.n	8019dfa <pbuf_add_header_impl+0x3e>
    return 0;
 8019df6:	2300      	movs	r3, #0
 8019df8:	e03e      	b.n	8019e78 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8019dfa:	68bb      	ldr	r3, [r7, #8]
 8019dfc:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8019dfe:	68fb      	ldr	r3, [r7, #12]
 8019e00:	891a      	ldrh	r2, [r3, #8]
 8019e02:	8a7b      	ldrh	r3, [r7, #18]
 8019e04:	4413      	add	r3, r2
 8019e06:	b29b      	uxth	r3, r3
 8019e08:	8a7a      	ldrh	r2, [r7, #18]
 8019e0a:	429a      	cmp	r2, r3
 8019e0c:	d901      	bls.n	8019e12 <pbuf_add_header_impl+0x56>
    return 1;
 8019e0e:	2301      	movs	r3, #1
 8019e10:	e032      	b.n	8019e78 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8019e12:	68fb      	ldr	r3, [r7, #12]
 8019e14:	7b1b      	ldrb	r3, [r3, #12]
 8019e16:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8019e18:	8a3b      	ldrh	r3, [r7, #16]
 8019e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019e1e:	2b00      	cmp	r3, #0
 8019e20:	d00c      	beq.n	8019e3c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8019e22:	68fb      	ldr	r3, [r7, #12]
 8019e24:	685a      	ldr	r2, [r3, #4]
 8019e26:	68bb      	ldr	r3, [r7, #8]
 8019e28:	425b      	negs	r3, r3
 8019e2a:	4413      	add	r3, r2
 8019e2c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8019e2e:	68fb      	ldr	r3, [r7, #12]
 8019e30:	3310      	adds	r3, #16
 8019e32:	697a      	ldr	r2, [r7, #20]
 8019e34:	429a      	cmp	r2, r3
 8019e36:	d20d      	bcs.n	8019e54 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8019e38:	2301      	movs	r3, #1
 8019e3a:	e01d      	b.n	8019e78 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8019e3c:	79fb      	ldrb	r3, [r7, #7]
 8019e3e:	2b00      	cmp	r3, #0
 8019e40:	d006      	beq.n	8019e50 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8019e42:	68fb      	ldr	r3, [r7, #12]
 8019e44:	685a      	ldr	r2, [r3, #4]
 8019e46:	68bb      	ldr	r3, [r7, #8]
 8019e48:	425b      	negs	r3, r3
 8019e4a:	4413      	add	r3, r2
 8019e4c:	617b      	str	r3, [r7, #20]
 8019e4e:	e001      	b.n	8019e54 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8019e50:	2301      	movs	r3, #1
 8019e52:	e011      	b.n	8019e78 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8019e54:	68fb      	ldr	r3, [r7, #12]
 8019e56:	697a      	ldr	r2, [r7, #20]
 8019e58:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8019e5a:	68fb      	ldr	r3, [r7, #12]
 8019e5c:	895a      	ldrh	r2, [r3, #10]
 8019e5e:	8a7b      	ldrh	r3, [r7, #18]
 8019e60:	4413      	add	r3, r2
 8019e62:	b29a      	uxth	r2, r3
 8019e64:	68fb      	ldr	r3, [r7, #12]
 8019e66:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8019e68:	68fb      	ldr	r3, [r7, #12]
 8019e6a:	891a      	ldrh	r2, [r3, #8]
 8019e6c:	8a7b      	ldrh	r3, [r7, #18]
 8019e6e:	4413      	add	r3, r2
 8019e70:	b29a      	uxth	r2, r3
 8019e72:	68fb      	ldr	r3, [r7, #12]
 8019e74:	811a      	strh	r2, [r3, #8]


  return 0;
 8019e76:	2300      	movs	r3, #0
}
 8019e78:	4618      	mov	r0, r3
 8019e7a:	3718      	adds	r7, #24
 8019e7c:	46bd      	mov	sp, r7
 8019e7e:	bd80      	pop	{r7, pc}
 8019e80:	0802cec0 	.word	0x0802cec0
 8019e84:	0802d024 	.word	0x0802d024
 8019e88:	0802cf20 	.word	0x0802cf20

08019e8c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8019e8c:	b580      	push	{r7, lr}
 8019e8e:	b082      	sub	sp, #8
 8019e90:	af00      	add	r7, sp, #0
 8019e92:	6078      	str	r0, [r7, #4]
 8019e94:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8019e96:	2200      	movs	r2, #0
 8019e98:	6839      	ldr	r1, [r7, #0]
 8019e9a:	6878      	ldr	r0, [r7, #4]
 8019e9c:	f7ff ff8e 	bl	8019dbc <pbuf_add_header_impl>
 8019ea0:	4603      	mov	r3, r0
}
 8019ea2:	4618      	mov	r0, r3
 8019ea4:	3708      	adds	r7, #8
 8019ea6:	46bd      	mov	sp, r7
 8019ea8:	bd80      	pop	{r7, pc}
	...

08019eac <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8019eac:	b580      	push	{r7, lr}
 8019eae:	b084      	sub	sp, #16
 8019eb0:	af00      	add	r7, sp, #0
 8019eb2:	6078      	str	r0, [r7, #4]
 8019eb4:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8019eb6:	687b      	ldr	r3, [r7, #4]
 8019eb8:	2b00      	cmp	r3, #0
 8019eba:	d106      	bne.n	8019eca <pbuf_remove_header+0x1e>
 8019ebc:	4b20      	ldr	r3, [pc, #128]	; (8019f40 <pbuf_remove_header+0x94>)
 8019ebe:	f240 224b 	movw	r2, #587	; 0x24b
 8019ec2:	4920      	ldr	r1, [pc, #128]	; (8019f44 <pbuf_remove_header+0x98>)
 8019ec4:	4820      	ldr	r0, [pc, #128]	; (8019f48 <pbuf_remove_header+0x9c>)
 8019ec6:	f00c fd01 	bl	80268cc <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8019eca:	687b      	ldr	r3, [r7, #4]
 8019ecc:	2b00      	cmp	r3, #0
 8019ece:	d003      	beq.n	8019ed8 <pbuf_remove_header+0x2c>
 8019ed0:	683b      	ldr	r3, [r7, #0]
 8019ed2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8019ed6:	d301      	bcc.n	8019edc <pbuf_remove_header+0x30>
    return 1;
 8019ed8:	2301      	movs	r3, #1
 8019eda:	e02c      	b.n	8019f36 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8019edc:	683b      	ldr	r3, [r7, #0]
 8019ede:	2b00      	cmp	r3, #0
 8019ee0:	d101      	bne.n	8019ee6 <pbuf_remove_header+0x3a>
    return 0;
 8019ee2:	2300      	movs	r3, #0
 8019ee4:	e027      	b.n	8019f36 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8019ee6:	683b      	ldr	r3, [r7, #0]
 8019ee8:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8019eea:	687b      	ldr	r3, [r7, #4]
 8019eec:	895b      	ldrh	r3, [r3, #10]
 8019eee:	89fa      	ldrh	r2, [r7, #14]
 8019ef0:	429a      	cmp	r2, r3
 8019ef2:	d908      	bls.n	8019f06 <pbuf_remove_header+0x5a>
 8019ef4:	4b12      	ldr	r3, [pc, #72]	; (8019f40 <pbuf_remove_header+0x94>)
 8019ef6:	f240 2255 	movw	r2, #597	; 0x255
 8019efa:	4914      	ldr	r1, [pc, #80]	; (8019f4c <pbuf_remove_header+0xa0>)
 8019efc:	4812      	ldr	r0, [pc, #72]	; (8019f48 <pbuf_remove_header+0x9c>)
 8019efe:	f00c fce5 	bl	80268cc <iprintf>
 8019f02:	2301      	movs	r3, #1
 8019f04:	e017      	b.n	8019f36 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8019f06:	687b      	ldr	r3, [r7, #4]
 8019f08:	685b      	ldr	r3, [r3, #4]
 8019f0a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8019f0c:	687b      	ldr	r3, [r7, #4]
 8019f0e:	685a      	ldr	r2, [r3, #4]
 8019f10:	683b      	ldr	r3, [r7, #0]
 8019f12:	441a      	add	r2, r3
 8019f14:	687b      	ldr	r3, [r7, #4]
 8019f16:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8019f18:	687b      	ldr	r3, [r7, #4]
 8019f1a:	895a      	ldrh	r2, [r3, #10]
 8019f1c:	89fb      	ldrh	r3, [r7, #14]
 8019f1e:	1ad3      	subs	r3, r2, r3
 8019f20:	b29a      	uxth	r2, r3
 8019f22:	687b      	ldr	r3, [r7, #4]
 8019f24:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8019f26:	687b      	ldr	r3, [r7, #4]
 8019f28:	891a      	ldrh	r2, [r3, #8]
 8019f2a:	89fb      	ldrh	r3, [r7, #14]
 8019f2c:	1ad3      	subs	r3, r2, r3
 8019f2e:	b29a      	uxth	r2, r3
 8019f30:	687b      	ldr	r3, [r7, #4]
 8019f32:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8019f34:	2300      	movs	r3, #0
}
 8019f36:	4618      	mov	r0, r3
 8019f38:	3710      	adds	r7, #16
 8019f3a:	46bd      	mov	sp, r7
 8019f3c:	bd80      	pop	{r7, pc}
 8019f3e:	bf00      	nop
 8019f40:	0802cec0 	.word	0x0802cec0
 8019f44:	0802d024 	.word	0x0802d024
 8019f48:	0802cf20 	.word	0x0802cf20
 8019f4c:	0802d030 	.word	0x0802d030

08019f50 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8019f50:	b580      	push	{r7, lr}
 8019f52:	b082      	sub	sp, #8
 8019f54:	af00      	add	r7, sp, #0
 8019f56:	6078      	str	r0, [r7, #4]
 8019f58:	460b      	mov	r3, r1
 8019f5a:	807b      	strh	r3, [r7, #2]
 8019f5c:	4613      	mov	r3, r2
 8019f5e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8019f60:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8019f64:	2b00      	cmp	r3, #0
 8019f66:	da08      	bge.n	8019f7a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8019f68:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8019f6c:	425b      	negs	r3, r3
 8019f6e:	4619      	mov	r1, r3
 8019f70:	6878      	ldr	r0, [r7, #4]
 8019f72:	f7ff ff9b 	bl	8019eac <pbuf_remove_header>
 8019f76:	4603      	mov	r3, r0
 8019f78:	e007      	b.n	8019f8a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8019f7a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8019f7e:	787a      	ldrb	r2, [r7, #1]
 8019f80:	4619      	mov	r1, r3
 8019f82:	6878      	ldr	r0, [r7, #4]
 8019f84:	f7ff ff1a 	bl	8019dbc <pbuf_add_header_impl>
 8019f88:	4603      	mov	r3, r0
  }
}
 8019f8a:	4618      	mov	r0, r3
 8019f8c:	3708      	adds	r7, #8
 8019f8e:	46bd      	mov	sp, r7
 8019f90:	bd80      	pop	{r7, pc}

08019f92 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8019f92:	b580      	push	{r7, lr}
 8019f94:	b082      	sub	sp, #8
 8019f96:	af00      	add	r7, sp, #0
 8019f98:	6078      	str	r0, [r7, #4]
 8019f9a:	460b      	mov	r3, r1
 8019f9c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8019f9e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8019fa2:	2201      	movs	r2, #1
 8019fa4:	4619      	mov	r1, r3
 8019fa6:	6878      	ldr	r0, [r7, #4]
 8019fa8:	f7ff ffd2 	bl	8019f50 <pbuf_header_impl>
 8019fac:	4603      	mov	r3, r0
}
 8019fae:	4618      	mov	r0, r3
 8019fb0:	3708      	adds	r7, #8
 8019fb2:	46bd      	mov	sp, r7
 8019fb4:	bd80      	pop	{r7, pc}
	...

08019fb8 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8019fb8:	b580      	push	{r7, lr}
 8019fba:	b088      	sub	sp, #32
 8019fbc:	af00      	add	r7, sp, #0
 8019fbe:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8019fc0:	687b      	ldr	r3, [r7, #4]
 8019fc2:	2b00      	cmp	r3, #0
 8019fc4:	d10b      	bne.n	8019fde <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8019fc6:	687b      	ldr	r3, [r7, #4]
 8019fc8:	2b00      	cmp	r3, #0
 8019fca:	d106      	bne.n	8019fda <pbuf_free+0x22>
 8019fcc:	4b3b      	ldr	r3, [pc, #236]	; (801a0bc <pbuf_free+0x104>)
 8019fce:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8019fd2:	493b      	ldr	r1, [pc, #236]	; (801a0c0 <pbuf_free+0x108>)
 8019fd4:	483b      	ldr	r0, [pc, #236]	; (801a0c4 <pbuf_free+0x10c>)
 8019fd6:	f00c fc79 	bl	80268cc <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8019fda:	2300      	movs	r3, #0
 8019fdc:	e069      	b.n	801a0b2 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8019fde:	2300      	movs	r3, #0
 8019fe0:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8019fe2:	e062      	b.n	801a0aa <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8019fe4:	f00b fd26 	bl	8025a34 <sys_arch_protect>
 8019fe8:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8019fea:	687b      	ldr	r3, [r7, #4]
 8019fec:	7b9b      	ldrb	r3, [r3, #14]
 8019fee:	2b00      	cmp	r3, #0
 8019ff0:	d106      	bne.n	801a000 <pbuf_free+0x48>
 8019ff2:	4b32      	ldr	r3, [pc, #200]	; (801a0bc <pbuf_free+0x104>)
 8019ff4:	f240 22f1 	movw	r2, #753	; 0x2f1
 8019ff8:	4933      	ldr	r1, [pc, #204]	; (801a0c8 <pbuf_free+0x110>)
 8019ffa:	4832      	ldr	r0, [pc, #200]	; (801a0c4 <pbuf_free+0x10c>)
 8019ffc:	f00c fc66 	bl	80268cc <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 801a000:	687b      	ldr	r3, [r7, #4]
 801a002:	7b9b      	ldrb	r3, [r3, #14]
 801a004:	3b01      	subs	r3, #1
 801a006:	b2da      	uxtb	r2, r3
 801a008:	687b      	ldr	r3, [r7, #4]
 801a00a:	739a      	strb	r2, [r3, #14]
 801a00c:	687b      	ldr	r3, [r7, #4]
 801a00e:	7b9b      	ldrb	r3, [r3, #14]
 801a010:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 801a012:	69b8      	ldr	r0, [r7, #24]
 801a014:	f00b fd1c 	bl	8025a50 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 801a018:	7dfb      	ldrb	r3, [r7, #23]
 801a01a:	2b00      	cmp	r3, #0
 801a01c:	d143      	bne.n	801a0a6 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 801a01e:	687b      	ldr	r3, [r7, #4]
 801a020:	681b      	ldr	r3, [r3, #0]
 801a022:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 801a024:	687b      	ldr	r3, [r7, #4]
 801a026:	7b1b      	ldrb	r3, [r3, #12]
 801a028:	f003 030f 	and.w	r3, r3, #15
 801a02c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 801a02e:	687b      	ldr	r3, [r7, #4]
 801a030:	7b5b      	ldrb	r3, [r3, #13]
 801a032:	f003 0302 	and.w	r3, r3, #2
 801a036:	2b00      	cmp	r3, #0
 801a038:	d011      	beq.n	801a05e <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 801a03a:	687b      	ldr	r3, [r7, #4]
 801a03c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 801a03e:	68bb      	ldr	r3, [r7, #8]
 801a040:	691b      	ldr	r3, [r3, #16]
 801a042:	2b00      	cmp	r3, #0
 801a044:	d106      	bne.n	801a054 <pbuf_free+0x9c>
 801a046:	4b1d      	ldr	r3, [pc, #116]	; (801a0bc <pbuf_free+0x104>)
 801a048:	f240 22ff 	movw	r2, #767	; 0x2ff
 801a04c:	491f      	ldr	r1, [pc, #124]	; (801a0cc <pbuf_free+0x114>)
 801a04e:	481d      	ldr	r0, [pc, #116]	; (801a0c4 <pbuf_free+0x10c>)
 801a050:	f00c fc3c 	bl	80268cc <iprintf>
        pc->custom_free_function(p);
 801a054:	68bb      	ldr	r3, [r7, #8]
 801a056:	691b      	ldr	r3, [r3, #16]
 801a058:	6878      	ldr	r0, [r7, #4]
 801a05a:	4798      	blx	r3
 801a05c:	e01d      	b.n	801a09a <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 801a05e:	7bfb      	ldrb	r3, [r7, #15]
 801a060:	2b02      	cmp	r3, #2
 801a062:	d104      	bne.n	801a06e <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 801a064:	6879      	ldr	r1, [r7, #4]
 801a066:	200c      	movs	r0, #12
 801a068:	f7ff f8f6 	bl	8019258 <memp_free>
 801a06c:	e015      	b.n	801a09a <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 801a06e:	7bfb      	ldrb	r3, [r7, #15]
 801a070:	2b01      	cmp	r3, #1
 801a072:	d104      	bne.n	801a07e <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 801a074:	6879      	ldr	r1, [r7, #4]
 801a076:	200b      	movs	r0, #11
 801a078:	f7ff f8ee 	bl	8019258 <memp_free>
 801a07c:	e00d      	b.n	801a09a <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 801a07e:	7bfb      	ldrb	r3, [r7, #15]
 801a080:	2b00      	cmp	r3, #0
 801a082:	d103      	bne.n	801a08c <pbuf_free+0xd4>
          mem_free(p);
 801a084:	6878      	ldr	r0, [r7, #4]
 801a086:	f7fe fd51 	bl	8018b2c <mem_free>
 801a08a:	e006      	b.n	801a09a <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 801a08c:	4b0b      	ldr	r3, [pc, #44]	; (801a0bc <pbuf_free+0x104>)
 801a08e:	f240 320f 	movw	r2, #783	; 0x30f
 801a092:	490f      	ldr	r1, [pc, #60]	; (801a0d0 <pbuf_free+0x118>)
 801a094:	480b      	ldr	r0, [pc, #44]	; (801a0c4 <pbuf_free+0x10c>)
 801a096:	f00c fc19 	bl	80268cc <iprintf>
        }
      }
      count++;
 801a09a:	7ffb      	ldrb	r3, [r7, #31]
 801a09c:	3301      	adds	r3, #1
 801a09e:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 801a0a0:	693b      	ldr	r3, [r7, #16]
 801a0a2:	607b      	str	r3, [r7, #4]
 801a0a4:	e001      	b.n	801a0aa <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 801a0a6:	2300      	movs	r3, #0
 801a0a8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801a0aa:	687b      	ldr	r3, [r7, #4]
 801a0ac:	2b00      	cmp	r3, #0
 801a0ae:	d199      	bne.n	8019fe4 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 801a0b0:	7ffb      	ldrb	r3, [r7, #31]
}
 801a0b2:	4618      	mov	r0, r3
 801a0b4:	3720      	adds	r7, #32
 801a0b6:	46bd      	mov	sp, r7
 801a0b8:	bd80      	pop	{r7, pc}
 801a0ba:	bf00      	nop
 801a0bc:	0802cec0 	.word	0x0802cec0
 801a0c0:	0802d024 	.word	0x0802d024
 801a0c4:	0802cf20 	.word	0x0802cf20
 801a0c8:	0802d050 	.word	0x0802d050
 801a0cc:	0802d068 	.word	0x0802d068
 801a0d0:	0802d08c 	.word	0x0802d08c

0801a0d4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 801a0d4:	b480      	push	{r7}
 801a0d6:	b085      	sub	sp, #20
 801a0d8:	af00      	add	r7, sp, #0
 801a0da:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 801a0dc:	2300      	movs	r3, #0
 801a0de:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 801a0e0:	e005      	b.n	801a0ee <pbuf_clen+0x1a>
    ++len;
 801a0e2:	89fb      	ldrh	r3, [r7, #14]
 801a0e4:	3301      	adds	r3, #1
 801a0e6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 801a0e8:	687b      	ldr	r3, [r7, #4]
 801a0ea:	681b      	ldr	r3, [r3, #0]
 801a0ec:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801a0ee:	687b      	ldr	r3, [r7, #4]
 801a0f0:	2b00      	cmp	r3, #0
 801a0f2:	d1f6      	bne.n	801a0e2 <pbuf_clen+0xe>
  }
  return len;
 801a0f4:	89fb      	ldrh	r3, [r7, #14]
}
 801a0f6:	4618      	mov	r0, r3
 801a0f8:	3714      	adds	r7, #20
 801a0fa:	46bd      	mov	sp, r7
 801a0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a100:	4770      	bx	lr
	...

0801a104 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 801a104:	b580      	push	{r7, lr}
 801a106:	b084      	sub	sp, #16
 801a108:	af00      	add	r7, sp, #0
 801a10a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 801a10c:	687b      	ldr	r3, [r7, #4]
 801a10e:	2b00      	cmp	r3, #0
 801a110:	d016      	beq.n	801a140 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 801a112:	f00b fc8f 	bl	8025a34 <sys_arch_protect>
 801a116:	60f8      	str	r0, [r7, #12]
 801a118:	687b      	ldr	r3, [r7, #4]
 801a11a:	7b9b      	ldrb	r3, [r3, #14]
 801a11c:	3301      	adds	r3, #1
 801a11e:	b2da      	uxtb	r2, r3
 801a120:	687b      	ldr	r3, [r7, #4]
 801a122:	739a      	strb	r2, [r3, #14]
 801a124:	68f8      	ldr	r0, [r7, #12]
 801a126:	f00b fc93 	bl	8025a50 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801a12a:	687b      	ldr	r3, [r7, #4]
 801a12c:	7b9b      	ldrb	r3, [r3, #14]
 801a12e:	2b00      	cmp	r3, #0
 801a130:	d106      	bne.n	801a140 <pbuf_ref+0x3c>
 801a132:	4b05      	ldr	r3, [pc, #20]	; (801a148 <pbuf_ref+0x44>)
 801a134:	f240 3242 	movw	r2, #834	; 0x342
 801a138:	4904      	ldr	r1, [pc, #16]	; (801a14c <pbuf_ref+0x48>)
 801a13a:	4805      	ldr	r0, [pc, #20]	; (801a150 <pbuf_ref+0x4c>)
 801a13c:	f00c fbc6 	bl	80268cc <iprintf>
  }
}
 801a140:	bf00      	nop
 801a142:	3710      	adds	r7, #16
 801a144:	46bd      	mov	sp, r7
 801a146:	bd80      	pop	{r7, pc}
 801a148:	0802cec0 	.word	0x0802cec0
 801a14c:	0802d0a0 	.word	0x0802d0a0
 801a150:	0802cf20 	.word	0x0802cf20

0801a154 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 801a154:	b580      	push	{r7, lr}
 801a156:	b084      	sub	sp, #16
 801a158:	af00      	add	r7, sp, #0
 801a15a:	6078      	str	r0, [r7, #4]
 801a15c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801a15e:	687b      	ldr	r3, [r7, #4]
 801a160:	2b00      	cmp	r3, #0
 801a162:	d002      	beq.n	801a16a <pbuf_cat+0x16>
 801a164:	683b      	ldr	r3, [r7, #0]
 801a166:	2b00      	cmp	r3, #0
 801a168:	d107      	bne.n	801a17a <pbuf_cat+0x26>
 801a16a:	4b20      	ldr	r3, [pc, #128]	; (801a1ec <pbuf_cat+0x98>)
 801a16c:	f240 3259 	movw	r2, #857	; 0x359
 801a170:	491f      	ldr	r1, [pc, #124]	; (801a1f0 <pbuf_cat+0x9c>)
 801a172:	4820      	ldr	r0, [pc, #128]	; (801a1f4 <pbuf_cat+0xa0>)
 801a174:	f00c fbaa 	bl	80268cc <iprintf>
 801a178:	e034      	b.n	801a1e4 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 801a17a:	687b      	ldr	r3, [r7, #4]
 801a17c:	60fb      	str	r3, [r7, #12]
 801a17e:	e00a      	b.n	801a196 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801a180:	68fb      	ldr	r3, [r7, #12]
 801a182:	891a      	ldrh	r2, [r3, #8]
 801a184:	683b      	ldr	r3, [r7, #0]
 801a186:	891b      	ldrh	r3, [r3, #8]
 801a188:	4413      	add	r3, r2
 801a18a:	b29a      	uxth	r2, r3
 801a18c:	68fb      	ldr	r3, [r7, #12]
 801a18e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 801a190:	68fb      	ldr	r3, [r7, #12]
 801a192:	681b      	ldr	r3, [r3, #0]
 801a194:	60fb      	str	r3, [r7, #12]
 801a196:	68fb      	ldr	r3, [r7, #12]
 801a198:	681b      	ldr	r3, [r3, #0]
 801a19a:	2b00      	cmp	r3, #0
 801a19c:	d1f0      	bne.n	801a180 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 801a19e:	68fb      	ldr	r3, [r7, #12]
 801a1a0:	891a      	ldrh	r2, [r3, #8]
 801a1a2:	68fb      	ldr	r3, [r7, #12]
 801a1a4:	895b      	ldrh	r3, [r3, #10]
 801a1a6:	429a      	cmp	r2, r3
 801a1a8:	d006      	beq.n	801a1b8 <pbuf_cat+0x64>
 801a1aa:	4b10      	ldr	r3, [pc, #64]	; (801a1ec <pbuf_cat+0x98>)
 801a1ac:	f240 3262 	movw	r2, #866	; 0x362
 801a1b0:	4911      	ldr	r1, [pc, #68]	; (801a1f8 <pbuf_cat+0xa4>)
 801a1b2:	4810      	ldr	r0, [pc, #64]	; (801a1f4 <pbuf_cat+0xa0>)
 801a1b4:	f00c fb8a 	bl	80268cc <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 801a1b8:	68fb      	ldr	r3, [r7, #12]
 801a1ba:	681b      	ldr	r3, [r3, #0]
 801a1bc:	2b00      	cmp	r3, #0
 801a1be:	d006      	beq.n	801a1ce <pbuf_cat+0x7a>
 801a1c0:	4b0a      	ldr	r3, [pc, #40]	; (801a1ec <pbuf_cat+0x98>)
 801a1c2:	f240 3263 	movw	r2, #867	; 0x363
 801a1c6:	490d      	ldr	r1, [pc, #52]	; (801a1fc <pbuf_cat+0xa8>)
 801a1c8:	480a      	ldr	r0, [pc, #40]	; (801a1f4 <pbuf_cat+0xa0>)
 801a1ca:	f00c fb7f 	bl	80268cc <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801a1ce:	68fb      	ldr	r3, [r7, #12]
 801a1d0:	891a      	ldrh	r2, [r3, #8]
 801a1d2:	683b      	ldr	r3, [r7, #0]
 801a1d4:	891b      	ldrh	r3, [r3, #8]
 801a1d6:	4413      	add	r3, r2
 801a1d8:	b29a      	uxth	r2, r3
 801a1da:	68fb      	ldr	r3, [r7, #12]
 801a1dc:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 801a1de:	68fb      	ldr	r3, [r7, #12]
 801a1e0:	683a      	ldr	r2, [r7, #0]
 801a1e2:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 801a1e4:	3710      	adds	r7, #16
 801a1e6:	46bd      	mov	sp, r7
 801a1e8:	bd80      	pop	{r7, pc}
 801a1ea:	bf00      	nop
 801a1ec:	0802cec0 	.word	0x0802cec0
 801a1f0:	0802d0b4 	.word	0x0802d0b4
 801a1f4:	0802cf20 	.word	0x0802cf20
 801a1f8:	0802d0ec 	.word	0x0802d0ec
 801a1fc:	0802d11c 	.word	0x0802d11c

0801a200 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 801a200:	b580      	push	{r7, lr}
 801a202:	b082      	sub	sp, #8
 801a204:	af00      	add	r7, sp, #0
 801a206:	6078      	str	r0, [r7, #4]
 801a208:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 801a20a:	6839      	ldr	r1, [r7, #0]
 801a20c:	6878      	ldr	r0, [r7, #4]
 801a20e:	f7ff ffa1 	bl	801a154 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 801a212:	6838      	ldr	r0, [r7, #0]
 801a214:	f7ff ff76 	bl	801a104 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 801a218:	bf00      	nop
 801a21a:	3708      	adds	r7, #8
 801a21c:	46bd      	mov	sp, r7
 801a21e:	bd80      	pop	{r7, pc}

0801a220 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 801a220:	b580      	push	{r7, lr}
 801a222:	b086      	sub	sp, #24
 801a224:	af00      	add	r7, sp, #0
 801a226:	6078      	str	r0, [r7, #4]
 801a228:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 801a22a:	2300      	movs	r3, #0
 801a22c:	617b      	str	r3, [r7, #20]
 801a22e:	2300      	movs	r3, #0
 801a230:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801a232:	687b      	ldr	r3, [r7, #4]
 801a234:	2b00      	cmp	r3, #0
 801a236:	d008      	beq.n	801a24a <pbuf_copy+0x2a>
 801a238:	683b      	ldr	r3, [r7, #0]
 801a23a:	2b00      	cmp	r3, #0
 801a23c:	d005      	beq.n	801a24a <pbuf_copy+0x2a>
 801a23e:	687b      	ldr	r3, [r7, #4]
 801a240:	891a      	ldrh	r2, [r3, #8]
 801a242:	683b      	ldr	r3, [r7, #0]
 801a244:	891b      	ldrh	r3, [r3, #8]
 801a246:	429a      	cmp	r2, r3
 801a248:	d209      	bcs.n	801a25e <pbuf_copy+0x3e>
 801a24a:	4b57      	ldr	r3, [pc, #348]	; (801a3a8 <pbuf_copy+0x188>)
 801a24c:	f240 32c9 	movw	r2, #969	; 0x3c9
 801a250:	4956      	ldr	r1, [pc, #344]	; (801a3ac <pbuf_copy+0x18c>)
 801a252:	4857      	ldr	r0, [pc, #348]	; (801a3b0 <pbuf_copy+0x190>)
 801a254:	f00c fb3a 	bl	80268cc <iprintf>
 801a258:	f06f 030f 	mvn.w	r3, #15
 801a25c:	e09f      	b.n	801a39e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801a25e:	687b      	ldr	r3, [r7, #4]
 801a260:	895b      	ldrh	r3, [r3, #10]
 801a262:	461a      	mov	r2, r3
 801a264:	697b      	ldr	r3, [r7, #20]
 801a266:	1ad2      	subs	r2, r2, r3
 801a268:	683b      	ldr	r3, [r7, #0]
 801a26a:	895b      	ldrh	r3, [r3, #10]
 801a26c:	4619      	mov	r1, r3
 801a26e:	693b      	ldr	r3, [r7, #16]
 801a270:	1acb      	subs	r3, r1, r3
 801a272:	429a      	cmp	r2, r3
 801a274:	d306      	bcc.n	801a284 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 801a276:	683b      	ldr	r3, [r7, #0]
 801a278:	895b      	ldrh	r3, [r3, #10]
 801a27a:	461a      	mov	r2, r3
 801a27c:	693b      	ldr	r3, [r7, #16]
 801a27e:	1ad3      	subs	r3, r2, r3
 801a280:	60fb      	str	r3, [r7, #12]
 801a282:	e005      	b.n	801a290 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 801a284:	687b      	ldr	r3, [r7, #4]
 801a286:	895b      	ldrh	r3, [r3, #10]
 801a288:	461a      	mov	r2, r3
 801a28a:	697b      	ldr	r3, [r7, #20]
 801a28c:	1ad3      	subs	r3, r2, r3
 801a28e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 801a290:	687b      	ldr	r3, [r7, #4]
 801a292:	685a      	ldr	r2, [r3, #4]
 801a294:	697b      	ldr	r3, [r7, #20]
 801a296:	18d0      	adds	r0, r2, r3
 801a298:	683b      	ldr	r3, [r7, #0]
 801a29a:	685a      	ldr	r2, [r3, #4]
 801a29c:	693b      	ldr	r3, [r7, #16]
 801a29e:	4413      	add	r3, r2
 801a2a0:	68fa      	ldr	r2, [r7, #12]
 801a2a2:	4619      	mov	r1, r3
 801a2a4:	f00b fc3e 	bl	8025b24 <memcpy>
    offset_to += len;
 801a2a8:	697a      	ldr	r2, [r7, #20]
 801a2aa:	68fb      	ldr	r3, [r7, #12]
 801a2ac:	4413      	add	r3, r2
 801a2ae:	617b      	str	r3, [r7, #20]
    offset_from += len;
 801a2b0:	693a      	ldr	r2, [r7, #16]
 801a2b2:	68fb      	ldr	r3, [r7, #12]
 801a2b4:	4413      	add	r3, r2
 801a2b6:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801a2b8:	687b      	ldr	r3, [r7, #4]
 801a2ba:	895b      	ldrh	r3, [r3, #10]
 801a2bc:	461a      	mov	r2, r3
 801a2be:	697b      	ldr	r3, [r7, #20]
 801a2c0:	4293      	cmp	r3, r2
 801a2c2:	d906      	bls.n	801a2d2 <pbuf_copy+0xb2>
 801a2c4:	4b38      	ldr	r3, [pc, #224]	; (801a3a8 <pbuf_copy+0x188>)
 801a2c6:	f240 32d9 	movw	r2, #985	; 0x3d9
 801a2ca:	493a      	ldr	r1, [pc, #232]	; (801a3b4 <pbuf_copy+0x194>)
 801a2cc:	4838      	ldr	r0, [pc, #224]	; (801a3b0 <pbuf_copy+0x190>)
 801a2ce:	f00c fafd 	bl	80268cc <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 801a2d2:	683b      	ldr	r3, [r7, #0]
 801a2d4:	895b      	ldrh	r3, [r3, #10]
 801a2d6:	461a      	mov	r2, r3
 801a2d8:	693b      	ldr	r3, [r7, #16]
 801a2da:	4293      	cmp	r3, r2
 801a2dc:	d906      	bls.n	801a2ec <pbuf_copy+0xcc>
 801a2de:	4b32      	ldr	r3, [pc, #200]	; (801a3a8 <pbuf_copy+0x188>)
 801a2e0:	f240 32da 	movw	r2, #986	; 0x3da
 801a2e4:	4934      	ldr	r1, [pc, #208]	; (801a3b8 <pbuf_copy+0x198>)
 801a2e6:	4832      	ldr	r0, [pc, #200]	; (801a3b0 <pbuf_copy+0x190>)
 801a2e8:	f00c faf0 	bl	80268cc <iprintf>
    if (offset_from >= p_from->len) {
 801a2ec:	683b      	ldr	r3, [r7, #0]
 801a2ee:	895b      	ldrh	r3, [r3, #10]
 801a2f0:	461a      	mov	r2, r3
 801a2f2:	693b      	ldr	r3, [r7, #16]
 801a2f4:	4293      	cmp	r3, r2
 801a2f6:	d304      	bcc.n	801a302 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 801a2f8:	2300      	movs	r3, #0
 801a2fa:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 801a2fc:	683b      	ldr	r3, [r7, #0]
 801a2fe:	681b      	ldr	r3, [r3, #0]
 801a300:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 801a302:	687b      	ldr	r3, [r7, #4]
 801a304:	895b      	ldrh	r3, [r3, #10]
 801a306:	461a      	mov	r2, r3
 801a308:	697b      	ldr	r3, [r7, #20]
 801a30a:	4293      	cmp	r3, r2
 801a30c:	d114      	bne.n	801a338 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 801a30e:	2300      	movs	r3, #0
 801a310:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 801a312:	687b      	ldr	r3, [r7, #4]
 801a314:	681b      	ldr	r3, [r3, #0]
 801a316:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 801a318:	687b      	ldr	r3, [r7, #4]
 801a31a:	2b00      	cmp	r3, #0
 801a31c:	d10c      	bne.n	801a338 <pbuf_copy+0x118>
 801a31e:	683b      	ldr	r3, [r7, #0]
 801a320:	2b00      	cmp	r3, #0
 801a322:	d009      	beq.n	801a338 <pbuf_copy+0x118>
 801a324:	4b20      	ldr	r3, [pc, #128]	; (801a3a8 <pbuf_copy+0x188>)
 801a326:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 801a32a:	4924      	ldr	r1, [pc, #144]	; (801a3bc <pbuf_copy+0x19c>)
 801a32c:	4820      	ldr	r0, [pc, #128]	; (801a3b0 <pbuf_copy+0x190>)
 801a32e:	f00c facd 	bl	80268cc <iprintf>
 801a332:	f06f 030f 	mvn.w	r3, #15
 801a336:	e032      	b.n	801a39e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 801a338:	683b      	ldr	r3, [r7, #0]
 801a33a:	2b00      	cmp	r3, #0
 801a33c:	d013      	beq.n	801a366 <pbuf_copy+0x146>
 801a33e:	683b      	ldr	r3, [r7, #0]
 801a340:	895a      	ldrh	r2, [r3, #10]
 801a342:	683b      	ldr	r3, [r7, #0]
 801a344:	891b      	ldrh	r3, [r3, #8]
 801a346:	429a      	cmp	r2, r3
 801a348:	d10d      	bne.n	801a366 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801a34a:	683b      	ldr	r3, [r7, #0]
 801a34c:	681b      	ldr	r3, [r3, #0]
 801a34e:	2b00      	cmp	r3, #0
 801a350:	d009      	beq.n	801a366 <pbuf_copy+0x146>
 801a352:	4b15      	ldr	r3, [pc, #84]	; (801a3a8 <pbuf_copy+0x188>)
 801a354:	f240 32e9 	movw	r2, #1001	; 0x3e9
 801a358:	4919      	ldr	r1, [pc, #100]	; (801a3c0 <pbuf_copy+0x1a0>)
 801a35a:	4815      	ldr	r0, [pc, #84]	; (801a3b0 <pbuf_copy+0x190>)
 801a35c:	f00c fab6 	bl	80268cc <iprintf>
 801a360:	f06f 0305 	mvn.w	r3, #5
 801a364:	e01b      	b.n	801a39e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801a366:	687b      	ldr	r3, [r7, #4]
 801a368:	2b00      	cmp	r3, #0
 801a36a:	d013      	beq.n	801a394 <pbuf_copy+0x174>
 801a36c:	687b      	ldr	r3, [r7, #4]
 801a36e:	895a      	ldrh	r2, [r3, #10]
 801a370:	687b      	ldr	r3, [r7, #4]
 801a372:	891b      	ldrh	r3, [r3, #8]
 801a374:	429a      	cmp	r2, r3
 801a376:	d10d      	bne.n	801a394 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801a378:	687b      	ldr	r3, [r7, #4]
 801a37a:	681b      	ldr	r3, [r3, #0]
 801a37c:	2b00      	cmp	r3, #0
 801a37e:	d009      	beq.n	801a394 <pbuf_copy+0x174>
 801a380:	4b09      	ldr	r3, [pc, #36]	; (801a3a8 <pbuf_copy+0x188>)
 801a382:	f240 32ee 	movw	r2, #1006	; 0x3ee
 801a386:	490e      	ldr	r1, [pc, #56]	; (801a3c0 <pbuf_copy+0x1a0>)
 801a388:	4809      	ldr	r0, [pc, #36]	; (801a3b0 <pbuf_copy+0x190>)
 801a38a:	f00c fa9f 	bl	80268cc <iprintf>
 801a38e:	f06f 0305 	mvn.w	r3, #5
 801a392:	e004      	b.n	801a39e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 801a394:	683b      	ldr	r3, [r7, #0]
 801a396:	2b00      	cmp	r3, #0
 801a398:	f47f af61 	bne.w	801a25e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 801a39c:	2300      	movs	r3, #0
}
 801a39e:	4618      	mov	r0, r3
 801a3a0:	3718      	adds	r7, #24
 801a3a2:	46bd      	mov	sp, r7
 801a3a4:	bd80      	pop	{r7, pc}
 801a3a6:	bf00      	nop
 801a3a8:	0802cec0 	.word	0x0802cec0
 801a3ac:	0802d168 	.word	0x0802d168
 801a3b0:	0802cf20 	.word	0x0802cf20
 801a3b4:	0802d198 	.word	0x0802d198
 801a3b8:	0802d1b0 	.word	0x0802d1b0
 801a3bc:	0802d1cc 	.word	0x0802d1cc
 801a3c0:	0802d1dc 	.word	0x0802d1dc

0801a3c4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 801a3c4:	b580      	push	{r7, lr}
 801a3c6:	b088      	sub	sp, #32
 801a3c8:	af00      	add	r7, sp, #0
 801a3ca:	60f8      	str	r0, [r7, #12]
 801a3cc:	60b9      	str	r1, [r7, #8]
 801a3ce:	4611      	mov	r1, r2
 801a3d0:	461a      	mov	r2, r3
 801a3d2:	460b      	mov	r3, r1
 801a3d4:	80fb      	strh	r3, [r7, #6]
 801a3d6:	4613      	mov	r3, r2
 801a3d8:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 801a3da:	2300      	movs	r3, #0
 801a3dc:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 801a3de:	2300      	movs	r3, #0
 801a3e0:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 801a3e2:	68fb      	ldr	r3, [r7, #12]
 801a3e4:	2b00      	cmp	r3, #0
 801a3e6:	d108      	bne.n	801a3fa <pbuf_copy_partial+0x36>
 801a3e8:	4b2b      	ldr	r3, [pc, #172]	; (801a498 <pbuf_copy_partial+0xd4>)
 801a3ea:	f240 420a 	movw	r2, #1034	; 0x40a
 801a3ee:	492b      	ldr	r1, [pc, #172]	; (801a49c <pbuf_copy_partial+0xd8>)
 801a3f0:	482b      	ldr	r0, [pc, #172]	; (801a4a0 <pbuf_copy_partial+0xdc>)
 801a3f2:	f00c fa6b 	bl	80268cc <iprintf>
 801a3f6:	2300      	movs	r3, #0
 801a3f8:	e04a      	b.n	801a490 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 801a3fa:	68bb      	ldr	r3, [r7, #8]
 801a3fc:	2b00      	cmp	r3, #0
 801a3fe:	d108      	bne.n	801a412 <pbuf_copy_partial+0x4e>
 801a400:	4b25      	ldr	r3, [pc, #148]	; (801a498 <pbuf_copy_partial+0xd4>)
 801a402:	f240 420b 	movw	r2, #1035	; 0x40b
 801a406:	4927      	ldr	r1, [pc, #156]	; (801a4a4 <pbuf_copy_partial+0xe0>)
 801a408:	4825      	ldr	r0, [pc, #148]	; (801a4a0 <pbuf_copy_partial+0xdc>)
 801a40a:	f00c fa5f 	bl	80268cc <iprintf>
 801a40e:	2300      	movs	r3, #0
 801a410:	e03e      	b.n	801a490 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801a412:	68fb      	ldr	r3, [r7, #12]
 801a414:	61fb      	str	r3, [r7, #28]
 801a416:	e034      	b.n	801a482 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 801a418:	88bb      	ldrh	r3, [r7, #4]
 801a41a:	2b00      	cmp	r3, #0
 801a41c:	d00a      	beq.n	801a434 <pbuf_copy_partial+0x70>
 801a41e:	69fb      	ldr	r3, [r7, #28]
 801a420:	895b      	ldrh	r3, [r3, #10]
 801a422:	88ba      	ldrh	r2, [r7, #4]
 801a424:	429a      	cmp	r2, r3
 801a426:	d305      	bcc.n	801a434 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 801a428:	69fb      	ldr	r3, [r7, #28]
 801a42a:	895b      	ldrh	r3, [r3, #10]
 801a42c:	88ba      	ldrh	r2, [r7, #4]
 801a42e:	1ad3      	subs	r3, r2, r3
 801a430:	80bb      	strh	r3, [r7, #4]
 801a432:	e023      	b.n	801a47c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 801a434:	69fb      	ldr	r3, [r7, #28]
 801a436:	895a      	ldrh	r2, [r3, #10]
 801a438:	88bb      	ldrh	r3, [r7, #4]
 801a43a:	1ad3      	subs	r3, r2, r3
 801a43c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 801a43e:	8b3a      	ldrh	r2, [r7, #24]
 801a440:	88fb      	ldrh	r3, [r7, #6]
 801a442:	429a      	cmp	r2, r3
 801a444:	d901      	bls.n	801a44a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 801a446:	88fb      	ldrh	r3, [r7, #6]
 801a448:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801a44a:	8b7b      	ldrh	r3, [r7, #26]
 801a44c:	68ba      	ldr	r2, [r7, #8]
 801a44e:	18d0      	adds	r0, r2, r3
 801a450:	69fb      	ldr	r3, [r7, #28]
 801a452:	685a      	ldr	r2, [r3, #4]
 801a454:	88bb      	ldrh	r3, [r7, #4]
 801a456:	4413      	add	r3, r2
 801a458:	8b3a      	ldrh	r2, [r7, #24]
 801a45a:	4619      	mov	r1, r3
 801a45c:	f00b fb62 	bl	8025b24 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 801a460:	8afa      	ldrh	r2, [r7, #22]
 801a462:	8b3b      	ldrh	r3, [r7, #24]
 801a464:	4413      	add	r3, r2
 801a466:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 801a468:	8b7a      	ldrh	r2, [r7, #26]
 801a46a:	8b3b      	ldrh	r3, [r7, #24]
 801a46c:	4413      	add	r3, r2
 801a46e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 801a470:	88fa      	ldrh	r2, [r7, #6]
 801a472:	8b3b      	ldrh	r3, [r7, #24]
 801a474:	1ad3      	subs	r3, r2, r3
 801a476:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 801a478:	2300      	movs	r3, #0
 801a47a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801a47c:	69fb      	ldr	r3, [r7, #28]
 801a47e:	681b      	ldr	r3, [r3, #0]
 801a480:	61fb      	str	r3, [r7, #28]
 801a482:	88fb      	ldrh	r3, [r7, #6]
 801a484:	2b00      	cmp	r3, #0
 801a486:	d002      	beq.n	801a48e <pbuf_copy_partial+0xca>
 801a488:	69fb      	ldr	r3, [r7, #28]
 801a48a:	2b00      	cmp	r3, #0
 801a48c:	d1c4      	bne.n	801a418 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 801a48e:	8afb      	ldrh	r3, [r7, #22]
}
 801a490:	4618      	mov	r0, r3
 801a492:	3720      	adds	r7, #32
 801a494:	46bd      	mov	sp, r7
 801a496:	bd80      	pop	{r7, pc}
 801a498:	0802cec0 	.word	0x0802cec0
 801a49c:	0802d208 	.word	0x0802d208
 801a4a0:	0802cf20 	.word	0x0802cf20
 801a4a4:	0802d228 	.word	0x0802d228

0801a4a8 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 801a4a8:	b480      	push	{r7}
 801a4aa:	b087      	sub	sp, #28
 801a4ac:	af00      	add	r7, sp, #0
 801a4ae:	60f8      	str	r0, [r7, #12]
 801a4b0:	460b      	mov	r3, r1
 801a4b2:	607a      	str	r2, [r7, #4]
 801a4b4:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 801a4b6:	897b      	ldrh	r3, [r7, #10]
 801a4b8:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 801a4ba:	68fb      	ldr	r3, [r7, #12]
 801a4bc:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 801a4be:	e007      	b.n	801a4d0 <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 801a4c0:	693b      	ldr	r3, [r7, #16]
 801a4c2:	895b      	ldrh	r3, [r3, #10]
 801a4c4:	8afa      	ldrh	r2, [r7, #22]
 801a4c6:	1ad3      	subs	r3, r2, r3
 801a4c8:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 801a4ca:	693b      	ldr	r3, [r7, #16]
 801a4cc:	681b      	ldr	r3, [r3, #0]
 801a4ce:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 801a4d0:	693b      	ldr	r3, [r7, #16]
 801a4d2:	2b00      	cmp	r3, #0
 801a4d4:	d004      	beq.n	801a4e0 <pbuf_skip_const+0x38>
 801a4d6:	693b      	ldr	r3, [r7, #16]
 801a4d8:	895b      	ldrh	r3, [r3, #10]
 801a4da:	8afa      	ldrh	r2, [r7, #22]
 801a4dc:	429a      	cmp	r2, r3
 801a4de:	d2ef      	bcs.n	801a4c0 <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 801a4e0:	687b      	ldr	r3, [r7, #4]
 801a4e2:	2b00      	cmp	r3, #0
 801a4e4:	d002      	beq.n	801a4ec <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 801a4e6:	687b      	ldr	r3, [r7, #4]
 801a4e8:	8afa      	ldrh	r2, [r7, #22]
 801a4ea:	801a      	strh	r2, [r3, #0]
  }
  return q;
 801a4ec:	693b      	ldr	r3, [r7, #16]
}
 801a4ee:	4618      	mov	r0, r3
 801a4f0:	371c      	adds	r7, #28
 801a4f2:	46bd      	mov	sp, r7
 801a4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4f8:	4770      	bx	lr
	...

0801a4fc <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 801a4fc:	b580      	push	{r7, lr}
 801a4fe:	b084      	sub	sp, #16
 801a500:	af00      	add	r7, sp, #0
 801a502:	4603      	mov	r3, r0
 801a504:	603a      	str	r2, [r7, #0]
 801a506:	71fb      	strb	r3, [r7, #7]
 801a508:	460b      	mov	r3, r1
 801a50a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 801a50c:	683b      	ldr	r3, [r7, #0]
 801a50e:	8919      	ldrh	r1, [r3, #8]
 801a510:	88ba      	ldrh	r2, [r7, #4]
 801a512:	79fb      	ldrb	r3, [r7, #7]
 801a514:	4618      	mov	r0, r3
 801a516:	f7ff fa6b 	bl	80199f0 <pbuf_alloc>
 801a51a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 801a51c:	68fb      	ldr	r3, [r7, #12]
 801a51e:	2b00      	cmp	r3, #0
 801a520:	d101      	bne.n	801a526 <pbuf_clone+0x2a>
    return NULL;
 801a522:	2300      	movs	r3, #0
 801a524:	e011      	b.n	801a54a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 801a526:	6839      	ldr	r1, [r7, #0]
 801a528:	68f8      	ldr	r0, [r7, #12]
 801a52a:	f7ff fe79 	bl	801a220 <pbuf_copy>
 801a52e:	4603      	mov	r3, r0
 801a530:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 801a532:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801a536:	2b00      	cmp	r3, #0
 801a538:	d006      	beq.n	801a548 <pbuf_clone+0x4c>
 801a53a:	4b06      	ldr	r3, [pc, #24]	; (801a554 <pbuf_clone+0x58>)
 801a53c:	f240 5224 	movw	r2, #1316	; 0x524
 801a540:	4905      	ldr	r1, [pc, #20]	; (801a558 <pbuf_clone+0x5c>)
 801a542:	4806      	ldr	r0, [pc, #24]	; (801a55c <pbuf_clone+0x60>)
 801a544:	f00c f9c2 	bl	80268cc <iprintf>
  return q;
 801a548:	68fb      	ldr	r3, [r7, #12]
}
 801a54a:	4618      	mov	r0, r3
 801a54c:	3710      	adds	r7, #16
 801a54e:	46bd      	mov	sp, r7
 801a550:	bd80      	pop	{r7, pc}
 801a552:	bf00      	nop
 801a554:	0802cec0 	.word	0x0802cec0
 801a558:	0802d334 	.word	0x0802d334
 801a55c:	0802cf20 	.word	0x0802cf20

0801a560 <pbuf_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p OR ZERO IF 'offset' >= p->tot_len
 */
u8_t
pbuf_get_at(const struct pbuf *p, u16_t offset)
{
 801a560:	b580      	push	{r7, lr}
 801a562:	b084      	sub	sp, #16
 801a564:	af00      	add	r7, sp, #0
 801a566:	6078      	str	r0, [r7, #4]
 801a568:	460b      	mov	r3, r1
 801a56a:	807b      	strh	r3, [r7, #2]
  int ret = pbuf_try_get_at(p, offset);
 801a56c:	887b      	ldrh	r3, [r7, #2]
 801a56e:	4619      	mov	r1, r3
 801a570:	6878      	ldr	r0, [r7, #4]
 801a572:	f000 f80c 	bl	801a58e <pbuf_try_get_at>
 801a576:	60f8      	str	r0, [r7, #12]
  if (ret >= 0) {
 801a578:	68fb      	ldr	r3, [r7, #12]
 801a57a:	2b00      	cmp	r3, #0
 801a57c:	db02      	blt.n	801a584 <pbuf_get_at+0x24>
    return (u8_t)ret;
 801a57e:	68fb      	ldr	r3, [r7, #12]
 801a580:	b2db      	uxtb	r3, r3
 801a582:	e000      	b.n	801a586 <pbuf_get_at+0x26>
  }
  return 0;
 801a584:	2300      	movs	r3, #0
}
 801a586:	4618      	mov	r0, r3
 801a588:	3710      	adds	r7, #16
 801a58a:	46bd      	mov	sp, r7
 801a58c:	bd80      	pop	{r7, pc}

0801a58e <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf *p, u16_t offset)
{
 801a58e:	b580      	push	{r7, lr}
 801a590:	b084      	sub	sp, #16
 801a592:	af00      	add	r7, sp, #0
 801a594:	6078      	str	r0, [r7, #4]
 801a596:	460b      	mov	r3, r1
 801a598:	807b      	strh	r3, [r7, #2]
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);
 801a59a:	f107 020a 	add.w	r2, r7, #10
 801a59e:	887b      	ldrh	r3, [r7, #2]
 801a5a0:	4619      	mov	r1, r3
 801a5a2:	6878      	ldr	r0, [r7, #4]
 801a5a4:	f7ff ff80 	bl	801a4a8 <pbuf_skip_const>
 801a5a8:	60f8      	str	r0, [r7, #12]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 801a5aa:	68fb      	ldr	r3, [r7, #12]
 801a5ac:	2b00      	cmp	r3, #0
 801a5ae:	d00a      	beq.n	801a5c6 <pbuf_try_get_at+0x38>
 801a5b0:	68fb      	ldr	r3, [r7, #12]
 801a5b2:	895a      	ldrh	r2, [r3, #10]
 801a5b4:	897b      	ldrh	r3, [r7, #10]
 801a5b6:	429a      	cmp	r2, r3
 801a5b8:	d905      	bls.n	801a5c6 <pbuf_try_get_at+0x38>
    return ((u8_t *)q->payload)[q_idx];
 801a5ba:	68fb      	ldr	r3, [r7, #12]
 801a5bc:	685b      	ldr	r3, [r3, #4]
 801a5be:	897a      	ldrh	r2, [r7, #10]
 801a5c0:	4413      	add	r3, r2
 801a5c2:	781b      	ldrb	r3, [r3, #0]
 801a5c4:	e001      	b.n	801a5ca <pbuf_try_get_at+0x3c>
  }
  return -1;
 801a5c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 801a5ca:	4618      	mov	r0, r3
 801a5cc:	3710      	adds	r7, #16
 801a5ce:	46bd      	mov	sp, r7
 801a5d0:	bd80      	pop	{r7, pc}
	...

0801a5d4 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 801a5d4:	b580      	push	{r7, lr}
 801a5d6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801a5d8:	f00c fa06 	bl	80269e8 <rand>
 801a5dc:	4603      	mov	r3, r0
 801a5de:	b29b      	uxth	r3, r3
 801a5e0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801a5e4:	b29b      	uxth	r3, r3
 801a5e6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801a5ea:	b29a      	uxth	r2, r3
 801a5ec:	4b01      	ldr	r3, [pc, #4]	; (801a5f4 <tcp_init+0x20>)
 801a5ee:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801a5f0:	bf00      	nop
 801a5f2:	bd80      	pop	{r7, pc}
 801a5f4:	10000060 	.word	0x10000060

0801a5f8 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 801a5f8:	b580      	push	{r7, lr}
 801a5fa:	b082      	sub	sp, #8
 801a5fc:	af00      	add	r7, sp, #0
 801a5fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801a600:	687b      	ldr	r3, [r7, #4]
 801a602:	7d1b      	ldrb	r3, [r3, #20]
 801a604:	2b01      	cmp	r3, #1
 801a606:	d105      	bne.n	801a614 <tcp_free+0x1c>
 801a608:	4b06      	ldr	r3, [pc, #24]	; (801a624 <tcp_free+0x2c>)
 801a60a:	22d4      	movs	r2, #212	; 0xd4
 801a60c:	4906      	ldr	r1, [pc, #24]	; (801a628 <tcp_free+0x30>)
 801a60e:	4807      	ldr	r0, [pc, #28]	; (801a62c <tcp_free+0x34>)
 801a610:	f00c f95c 	bl	80268cc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 801a614:	6879      	ldr	r1, [r7, #4]
 801a616:	2001      	movs	r0, #1
 801a618:	f7fe fe1e 	bl	8019258 <memp_free>
}
 801a61c:	bf00      	nop
 801a61e:	3708      	adds	r7, #8
 801a620:	46bd      	mov	sp, r7
 801a622:	bd80      	pop	{r7, pc}
 801a624:	0802d3c0 	.word	0x0802d3c0
 801a628:	0802d3f0 	.word	0x0802d3f0
 801a62c:	0802d404 	.word	0x0802d404

0801a630 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 801a630:	b580      	push	{r7, lr}
 801a632:	b082      	sub	sp, #8
 801a634:	af00      	add	r7, sp, #0
 801a636:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 801a638:	687b      	ldr	r3, [r7, #4]
 801a63a:	7d1b      	ldrb	r3, [r3, #20]
 801a63c:	2b01      	cmp	r3, #1
 801a63e:	d105      	bne.n	801a64c <tcp_free_listen+0x1c>
 801a640:	4b06      	ldr	r3, [pc, #24]	; (801a65c <tcp_free_listen+0x2c>)
 801a642:	22df      	movs	r2, #223	; 0xdf
 801a644:	4906      	ldr	r1, [pc, #24]	; (801a660 <tcp_free_listen+0x30>)
 801a646:	4807      	ldr	r0, [pc, #28]	; (801a664 <tcp_free_listen+0x34>)
 801a648:	f00c f940 	bl	80268cc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 801a64c:	6879      	ldr	r1, [r7, #4]
 801a64e:	2002      	movs	r0, #2
 801a650:	f7fe fe02 	bl	8019258 <memp_free>
}
 801a654:	bf00      	nop
 801a656:	3708      	adds	r7, #8
 801a658:	46bd      	mov	sp, r7
 801a65a:	bd80      	pop	{r7, pc}
 801a65c:	0802d3c0 	.word	0x0802d3c0
 801a660:	0802d42c 	.word	0x0802d42c
 801a664:	0802d404 	.word	0x0802d404

0801a668 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 801a668:	b580      	push	{r7, lr}
 801a66a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 801a66c:	f001 f974 	bl	801b958 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 801a670:	4b07      	ldr	r3, [pc, #28]	; (801a690 <tcp_tmr+0x28>)
 801a672:	781b      	ldrb	r3, [r3, #0]
 801a674:	3301      	adds	r3, #1
 801a676:	b2da      	uxtb	r2, r3
 801a678:	4b05      	ldr	r3, [pc, #20]	; (801a690 <tcp_tmr+0x28>)
 801a67a:	701a      	strb	r2, [r3, #0]
 801a67c:	4b04      	ldr	r3, [pc, #16]	; (801a690 <tcp_tmr+0x28>)
 801a67e:	781b      	ldrb	r3, [r3, #0]
 801a680:	f003 0301 	and.w	r3, r3, #1
 801a684:	2b00      	cmp	r3, #0
 801a686:	d001      	beq.n	801a68c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 801a688:	f000 fe26 	bl	801b2d8 <tcp_slowtmr>
  }
}
 801a68c:	bf00      	nop
 801a68e:	bd80      	pop	{r7, pc}
 801a690:	20013c29 	.word	0x20013c29

0801a694 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 801a694:	b580      	push	{r7, lr}
 801a696:	b084      	sub	sp, #16
 801a698:	af00      	add	r7, sp, #0
 801a69a:	6078      	str	r0, [r7, #4]
 801a69c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 801a69e:	683b      	ldr	r3, [r7, #0]
 801a6a0:	2b00      	cmp	r3, #0
 801a6a2:	d105      	bne.n	801a6b0 <tcp_remove_listener+0x1c>
 801a6a4:	4b0d      	ldr	r3, [pc, #52]	; (801a6dc <tcp_remove_listener+0x48>)
 801a6a6:	22ff      	movs	r2, #255	; 0xff
 801a6a8:	490d      	ldr	r1, [pc, #52]	; (801a6e0 <tcp_remove_listener+0x4c>)
 801a6aa:	480e      	ldr	r0, [pc, #56]	; (801a6e4 <tcp_remove_listener+0x50>)
 801a6ac:	f00c f90e 	bl	80268cc <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801a6b0:	687b      	ldr	r3, [r7, #4]
 801a6b2:	60fb      	str	r3, [r7, #12]
 801a6b4:	e00a      	b.n	801a6cc <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 801a6b6:	68fb      	ldr	r3, [r7, #12]
 801a6b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801a6ba:	683a      	ldr	r2, [r7, #0]
 801a6bc:	429a      	cmp	r2, r3
 801a6be:	d102      	bne.n	801a6c6 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 801a6c0:	68fb      	ldr	r3, [r7, #12]
 801a6c2:	2200      	movs	r2, #0
 801a6c4:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801a6c6:	68fb      	ldr	r3, [r7, #12]
 801a6c8:	68db      	ldr	r3, [r3, #12]
 801a6ca:	60fb      	str	r3, [r7, #12]
 801a6cc:	68fb      	ldr	r3, [r7, #12]
 801a6ce:	2b00      	cmp	r3, #0
 801a6d0:	d1f1      	bne.n	801a6b6 <tcp_remove_listener+0x22>
    }
  }
}
 801a6d2:	bf00      	nop
 801a6d4:	bf00      	nop
 801a6d6:	3710      	adds	r7, #16
 801a6d8:	46bd      	mov	sp, r7
 801a6da:	bd80      	pop	{r7, pc}
 801a6dc:	0802d3c0 	.word	0x0802d3c0
 801a6e0:	0802d448 	.word	0x0802d448
 801a6e4:	0802d404 	.word	0x0802d404

0801a6e8 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 801a6e8:	b580      	push	{r7, lr}
 801a6ea:	b084      	sub	sp, #16
 801a6ec:	af00      	add	r7, sp, #0
 801a6ee:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801a6f0:	687b      	ldr	r3, [r7, #4]
 801a6f2:	2b00      	cmp	r3, #0
 801a6f4:	d106      	bne.n	801a704 <tcp_listen_closed+0x1c>
 801a6f6:	4b14      	ldr	r3, [pc, #80]	; (801a748 <tcp_listen_closed+0x60>)
 801a6f8:	f240 1211 	movw	r2, #273	; 0x111
 801a6fc:	4913      	ldr	r1, [pc, #76]	; (801a74c <tcp_listen_closed+0x64>)
 801a6fe:	4814      	ldr	r0, [pc, #80]	; (801a750 <tcp_listen_closed+0x68>)
 801a700:	f00c f8e4 	bl	80268cc <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 801a704:	687b      	ldr	r3, [r7, #4]
 801a706:	7d1b      	ldrb	r3, [r3, #20]
 801a708:	2b01      	cmp	r3, #1
 801a70a:	d006      	beq.n	801a71a <tcp_listen_closed+0x32>
 801a70c:	4b0e      	ldr	r3, [pc, #56]	; (801a748 <tcp_listen_closed+0x60>)
 801a70e:	f44f 7289 	mov.w	r2, #274	; 0x112
 801a712:	4910      	ldr	r1, [pc, #64]	; (801a754 <tcp_listen_closed+0x6c>)
 801a714:	480e      	ldr	r0, [pc, #56]	; (801a750 <tcp_listen_closed+0x68>)
 801a716:	f00c f8d9 	bl	80268cc <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801a71a:	2301      	movs	r3, #1
 801a71c:	60fb      	str	r3, [r7, #12]
 801a71e:	e00b      	b.n	801a738 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 801a720:	4a0d      	ldr	r2, [pc, #52]	; (801a758 <tcp_listen_closed+0x70>)
 801a722:	68fb      	ldr	r3, [r7, #12]
 801a724:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a728:	681b      	ldr	r3, [r3, #0]
 801a72a:	6879      	ldr	r1, [r7, #4]
 801a72c:	4618      	mov	r0, r3
 801a72e:	f7ff ffb1 	bl	801a694 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801a732:	68fb      	ldr	r3, [r7, #12]
 801a734:	3301      	adds	r3, #1
 801a736:	60fb      	str	r3, [r7, #12]
 801a738:	68fb      	ldr	r3, [r7, #12]
 801a73a:	2b03      	cmp	r3, #3
 801a73c:	d9f0      	bls.n	801a720 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 801a73e:	bf00      	nop
 801a740:	bf00      	nop
 801a742:	3710      	adds	r7, #16
 801a744:	46bd      	mov	sp, r7
 801a746:	bd80      	pop	{r7, pc}
 801a748:	0802d3c0 	.word	0x0802d3c0
 801a74c:	0802d470 	.word	0x0802d470
 801a750:	0802d404 	.word	0x0802d404
 801a754:	0802d47c 	.word	0x0802d47c
 801a758:	08030dec 	.word	0x08030dec

0801a75c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 801a75c:	b5b0      	push	{r4, r5, r7, lr}
 801a75e:	b088      	sub	sp, #32
 801a760:	af04      	add	r7, sp, #16
 801a762:	6078      	str	r0, [r7, #4]
 801a764:	460b      	mov	r3, r1
 801a766:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 801a768:	687b      	ldr	r3, [r7, #4]
 801a76a:	2b00      	cmp	r3, #0
 801a76c:	d106      	bne.n	801a77c <tcp_close_shutdown+0x20>
 801a76e:	4b63      	ldr	r3, [pc, #396]	; (801a8fc <tcp_close_shutdown+0x1a0>)
 801a770:	f44f 72af 	mov.w	r2, #350	; 0x15e
 801a774:	4962      	ldr	r1, [pc, #392]	; (801a900 <tcp_close_shutdown+0x1a4>)
 801a776:	4863      	ldr	r0, [pc, #396]	; (801a904 <tcp_close_shutdown+0x1a8>)
 801a778:	f00c f8a8 	bl	80268cc <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 801a77c:	78fb      	ldrb	r3, [r7, #3]
 801a77e:	2b00      	cmp	r3, #0
 801a780:	d066      	beq.n	801a850 <tcp_close_shutdown+0xf4>
 801a782:	687b      	ldr	r3, [r7, #4]
 801a784:	7d1b      	ldrb	r3, [r3, #20]
 801a786:	2b04      	cmp	r3, #4
 801a788:	d003      	beq.n	801a792 <tcp_close_shutdown+0x36>
 801a78a:	687b      	ldr	r3, [r7, #4]
 801a78c:	7d1b      	ldrb	r3, [r3, #20]
 801a78e:	2b07      	cmp	r3, #7
 801a790:	d15e      	bne.n	801a850 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801a792:	687b      	ldr	r3, [r7, #4]
 801a794:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801a796:	2b00      	cmp	r3, #0
 801a798:	d104      	bne.n	801a7a4 <tcp_close_shutdown+0x48>
 801a79a:	687b      	ldr	r3, [r7, #4]
 801a79c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a79e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801a7a2:	d055      	beq.n	801a850 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 801a7a4:	687b      	ldr	r3, [r7, #4]
 801a7a6:	8b5b      	ldrh	r3, [r3, #26]
 801a7a8:	f003 0310 	and.w	r3, r3, #16
 801a7ac:	2b00      	cmp	r3, #0
 801a7ae:	d106      	bne.n	801a7be <tcp_close_shutdown+0x62>
 801a7b0:	4b52      	ldr	r3, [pc, #328]	; (801a8fc <tcp_close_shutdown+0x1a0>)
 801a7b2:	f44f 72b2 	mov.w	r2, #356	; 0x164
 801a7b6:	4954      	ldr	r1, [pc, #336]	; (801a908 <tcp_close_shutdown+0x1ac>)
 801a7b8:	4852      	ldr	r0, [pc, #328]	; (801a904 <tcp_close_shutdown+0x1a8>)
 801a7ba:	f00c f887 	bl	80268cc <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801a7be:	687b      	ldr	r3, [r7, #4]
 801a7c0:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801a7c2:	687b      	ldr	r3, [r7, #4]
 801a7c4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801a7c6:	687d      	ldr	r5, [r7, #4]
 801a7c8:	687b      	ldr	r3, [r7, #4]
 801a7ca:	3304      	adds	r3, #4
 801a7cc:	687a      	ldr	r2, [r7, #4]
 801a7ce:	8ad2      	ldrh	r2, [r2, #22]
 801a7d0:	6879      	ldr	r1, [r7, #4]
 801a7d2:	8b09      	ldrh	r1, [r1, #24]
 801a7d4:	9102      	str	r1, [sp, #8]
 801a7d6:	9201      	str	r2, [sp, #4]
 801a7d8:	9300      	str	r3, [sp, #0]
 801a7da:	462b      	mov	r3, r5
 801a7dc:	4622      	mov	r2, r4
 801a7de:	4601      	mov	r1, r0
 801a7e0:	6878      	ldr	r0, [r7, #4]
 801a7e2:	f005 fea7 	bl	8020534 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 801a7e6:	6878      	ldr	r0, [r7, #4]
 801a7e8:	f001 fc84 	bl	801c0f4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 801a7ec:	4b47      	ldr	r3, [pc, #284]	; (801a90c <tcp_close_shutdown+0x1b0>)
 801a7ee:	681b      	ldr	r3, [r3, #0]
 801a7f0:	687a      	ldr	r2, [r7, #4]
 801a7f2:	429a      	cmp	r2, r3
 801a7f4:	d105      	bne.n	801a802 <tcp_close_shutdown+0xa6>
 801a7f6:	4b45      	ldr	r3, [pc, #276]	; (801a90c <tcp_close_shutdown+0x1b0>)
 801a7f8:	681b      	ldr	r3, [r3, #0]
 801a7fa:	68db      	ldr	r3, [r3, #12]
 801a7fc:	4a43      	ldr	r2, [pc, #268]	; (801a90c <tcp_close_shutdown+0x1b0>)
 801a7fe:	6013      	str	r3, [r2, #0]
 801a800:	e013      	b.n	801a82a <tcp_close_shutdown+0xce>
 801a802:	4b42      	ldr	r3, [pc, #264]	; (801a90c <tcp_close_shutdown+0x1b0>)
 801a804:	681b      	ldr	r3, [r3, #0]
 801a806:	60fb      	str	r3, [r7, #12]
 801a808:	e00c      	b.n	801a824 <tcp_close_shutdown+0xc8>
 801a80a:	68fb      	ldr	r3, [r7, #12]
 801a80c:	68db      	ldr	r3, [r3, #12]
 801a80e:	687a      	ldr	r2, [r7, #4]
 801a810:	429a      	cmp	r2, r3
 801a812:	d104      	bne.n	801a81e <tcp_close_shutdown+0xc2>
 801a814:	687b      	ldr	r3, [r7, #4]
 801a816:	68da      	ldr	r2, [r3, #12]
 801a818:	68fb      	ldr	r3, [r7, #12]
 801a81a:	60da      	str	r2, [r3, #12]
 801a81c:	e005      	b.n	801a82a <tcp_close_shutdown+0xce>
 801a81e:	68fb      	ldr	r3, [r7, #12]
 801a820:	68db      	ldr	r3, [r3, #12]
 801a822:	60fb      	str	r3, [r7, #12]
 801a824:	68fb      	ldr	r3, [r7, #12]
 801a826:	2b00      	cmp	r3, #0
 801a828:	d1ef      	bne.n	801a80a <tcp_close_shutdown+0xae>
 801a82a:	687b      	ldr	r3, [r7, #4]
 801a82c:	2200      	movs	r2, #0
 801a82e:	60da      	str	r2, [r3, #12]
 801a830:	4b37      	ldr	r3, [pc, #220]	; (801a910 <tcp_close_shutdown+0x1b4>)
 801a832:	2201      	movs	r2, #1
 801a834:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 801a836:	4b37      	ldr	r3, [pc, #220]	; (801a914 <tcp_close_shutdown+0x1b8>)
 801a838:	681b      	ldr	r3, [r3, #0]
 801a83a:	687a      	ldr	r2, [r7, #4]
 801a83c:	429a      	cmp	r2, r3
 801a83e:	d102      	bne.n	801a846 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 801a840:	f004 f91c 	bl	801ea7c <tcp_trigger_input_pcb_close>
 801a844:	e002      	b.n	801a84c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 801a846:	6878      	ldr	r0, [r7, #4]
 801a848:	f7ff fed6 	bl	801a5f8 <tcp_free>
      }
      return ERR_OK;
 801a84c:	2300      	movs	r3, #0
 801a84e:	e050      	b.n	801a8f2 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 801a850:	687b      	ldr	r3, [r7, #4]
 801a852:	7d1b      	ldrb	r3, [r3, #20]
 801a854:	2b02      	cmp	r3, #2
 801a856:	d03b      	beq.n	801a8d0 <tcp_close_shutdown+0x174>
 801a858:	2b02      	cmp	r3, #2
 801a85a:	dc44      	bgt.n	801a8e6 <tcp_close_shutdown+0x18a>
 801a85c:	2b00      	cmp	r3, #0
 801a85e:	d002      	beq.n	801a866 <tcp_close_shutdown+0x10a>
 801a860:	2b01      	cmp	r3, #1
 801a862:	d02a      	beq.n	801a8ba <tcp_close_shutdown+0x15e>
 801a864:	e03f      	b.n	801a8e6 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 801a866:	687b      	ldr	r3, [r7, #4]
 801a868:	8adb      	ldrh	r3, [r3, #22]
 801a86a:	2b00      	cmp	r3, #0
 801a86c:	d021      	beq.n	801a8b2 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801a86e:	4b2a      	ldr	r3, [pc, #168]	; (801a918 <tcp_close_shutdown+0x1bc>)
 801a870:	681b      	ldr	r3, [r3, #0]
 801a872:	687a      	ldr	r2, [r7, #4]
 801a874:	429a      	cmp	r2, r3
 801a876:	d105      	bne.n	801a884 <tcp_close_shutdown+0x128>
 801a878:	4b27      	ldr	r3, [pc, #156]	; (801a918 <tcp_close_shutdown+0x1bc>)
 801a87a:	681b      	ldr	r3, [r3, #0]
 801a87c:	68db      	ldr	r3, [r3, #12]
 801a87e:	4a26      	ldr	r2, [pc, #152]	; (801a918 <tcp_close_shutdown+0x1bc>)
 801a880:	6013      	str	r3, [r2, #0]
 801a882:	e013      	b.n	801a8ac <tcp_close_shutdown+0x150>
 801a884:	4b24      	ldr	r3, [pc, #144]	; (801a918 <tcp_close_shutdown+0x1bc>)
 801a886:	681b      	ldr	r3, [r3, #0]
 801a888:	60bb      	str	r3, [r7, #8]
 801a88a:	e00c      	b.n	801a8a6 <tcp_close_shutdown+0x14a>
 801a88c:	68bb      	ldr	r3, [r7, #8]
 801a88e:	68db      	ldr	r3, [r3, #12]
 801a890:	687a      	ldr	r2, [r7, #4]
 801a892:	429a      	cmp	r2, r3
 801a894:	d104      	bne.n	801a8a0 <tcp_close_shutdown+0x144>
 801a896:	687b      	ldr	r3, [r7, #4]
 801a898:	68da      	ldr	r2, [r3, #12]
 801a89a:	68bb      	ldr	r3, [r7, #8]
 801a89c:	60da      	str	r2, [r3, #12]
 801a89e:	e005      	b.n	801a8ac <tcp_close_shutdown+0x150>
 801a8a0:	68bb      	ldr	r3, [r7, #8]
 801a8a2:	68db      	ldr	r3, [r3, #12]
 801a8a4:	60bb      	str	r3, [r7, #8]
 801a8a6:	68bb      	ldr	r3, [r7, #8]
 801a8a8:	2b00      	cmp	r3, #0
 801a8aa:	d1ef      	bne.n	801a88c <tcp_close_shutdown+0x130>
 801a8ac:	687b      	ldr	r3, [r7, #4]
 801a8ae:	2200      	movs	r2, #0
 801a8b0:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 801a8b2:	6878      	ldr	r0, [r7, #4]
 801a8b4:	f7ff fea0 	bl	801a5f8 <tcp_free>
      break;
 801a8b8:	e01a      	b.n	801a8f0 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 801a8ba:	6878      	ldr	r0, [r7, #4]
 801a8bc:	f7ff ff14 	bl	801a6e8 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 801a8c0:	6879      	ldr	r1, [r7, #4]
 801a8c2:	4816      	ldr	r0, [pc, #88]	; (801a91c <tcp_close_shutdown+0x1c0>)
 801a8c4:	f001 fc66 	bl	801c194 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 801a8c8:	6878      	ldr	r0, [r7, #4]
 801a8ca:	f7ff feb1 	bl	801a630 <tcp_free_listen>
      break;
 801a8ce:	e00f      	b.n	801a8f0 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801a8d0:	6879      	ldr	r1, [r7, #4]
 801a8d2:	480e      	ldr	r0, [pc, #56]	; (801a90c <tcp_close_shutdown+0x1b0>)
 801a8d4:	f001 fc5e 	bl	801c194 <tcp_pcb_remove>
 801a8d8:	4b0d      	ldr	r3, [pc, #52]	; (801a910 <tcp_close_shutdown+0x1b4>)
 801a8da:	2201      	movs	r2, #1
 801a8dc:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 801a8de:	6878      	ldr	r0, [r7, #4]
 801a8e0:	f7ff fe8a 	bl	801a5f8 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 801a8e4:	e004      	b.n	801a8f0 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 801a8e6:	6878      	ldr	r0, [r7, #4]
 801a8e8:	f000 f81a 	bl	801a920 <tcp_close_shutdown_fin>
 801a8ec:	4603      	mov	r3, r0
 801a8ee:	e000      	b.n	801a8f2 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 801a8f0:	2300      	movs	r3, #0
}
 801a8f2:	4618      	mov	r0, r3
 801a8f4:	3710      	adds	r7, #16
 801a8f6:	46bd      	mov	sp, r7
 801a8f8:	bdb0      	pop	{r4, r5, r7, pc}
 801a8fa:	bf00      	nop
 801a8fc:	0802d3c0 	.word	0x0802d3c0
 801a900:	0802d494 	.word	0x0802d494
 801a904:	0802d404 	.word	0x0802d404
 801a908:	0802d4b4 	.word	0x0802d4b4
 801a90c:	2001c0fc 	.word	0x2001c0fc
 801a910:	2001c0f8 	.word	0x2001c0f8
 801a914:	2001c110 	.word	0x2001c110
 801a918:	2001c108 	.word	0x2001c108
 801a91c:	2001c104 	.word	0x2001c104

0801a920 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 801a920:	b580      	push	{r7, lr}
 801a922:	b084      	sub	sp, #16
 801a924:	af00      	add	r7, sp, #0
 801a926:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801a928:	687b      	ldr	r3, [r7, #4]
 801a92a:	2b00      	cmp	r3, #0
 801a92c:	d106      	bne.n	801a93c <tcp_close_shutdown_fin+0x1c>
 801a92e:	4b2e      	ldr	r3, [pc, #184]	; (801a9e8 <tcp_close_shutdown_fin+0xc8>)
 801a930:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 801a934:	492d      	ldr	r1, [pc, #180]	; (801a9ec <tcp_close_shutdown_fin+0xcc>)
 801a936:	482e      	ldr	r0, [pc, #184]	; (801a9f0 <tcp_close_shutdown_fin+0xd0>)
 801a938:	f00b ffc8 	bl	80268cc <iprintf>

  switch (pcb->state) {
 801a93c:	687b      	ldr	r3, [r7, #4]
 801a93e:	7d1b      	ldrb	r3, [r3, #20]
 801a940:	2b07      	cmp	r3, #7
 801a942:	d020      	beq.n	801a986 <tcp_close_shutdown_fin+0x66>
 801a944:	2b07      	cmp	r3, #7
 801a946:	dc2b      	bgt.n	801a9a0 <tcp_close_shutdown_fin+0x80>
 801a948:	2b03      	cmp	r3, #3
 801a94a:	d002      	beq.n	801a952 <tcp_close_shutdown_fin+0x32>
 801a94c:	2b04      	cmp	r3, #4
 801a94e:	d00d      	beq.n	801a96c <tcp_close_shutdown_fin+0x4c>
 801a950:	e026      	b.n	801a9a0 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 801a952:	6878      	ldr	r0, [r7, #4]
 801a954:	f004 fefc 	bl	801f750 <tcp_send_fin>
 801a958:	4603      	mov	r3, r0
 801a95a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801a95c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a960:	2b00      	cmp	r3, #0
 801a962:	d11f      	bne.n	801a9a4 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 801a964:	687b      	ldr	r3, [r7, #4]
 801a966:	2205      	movs	r2, #5
 801a968:	751a      	strb	r2, [r3, #20]
      }
      break;
 801a96a:	e01b      	b.n	801a9a4 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 801a96c:	6878      	ldr	r0, [r7, #4]
 801a96e:	f004 feef 	bl	801f750 <tcp_send_fin>
 801a972:	4603      	mov	r3, r0
 801a974:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801a976:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a97a:	2b00      	cmp	r3, #0
 801a97c:	d114      	bne.n	801a9a8 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 801a97e:	687b      	ldr	r3, [r7, #4]
 801a980:	2205      	movs	r2, #5
 801a982:	751a      	strb	r2, [r3, #20]
      }
      break;
 801a984:	e010      	b.n	801a9a8 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 801a986:	6878      	ldr	r0, [r7, #4]
 801a988:	f004 fee2 	bl	801f750 <tcp_send_fin>
 801a98c:	4603      	mov	r3, r0
 801a98e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801a990:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a994:	2b00      	cmp	r3, #0
 801a996:	d109      	bne.n	801a9ac <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 801a998:	687b      	ldr	r3, [r7, #4]
 801a99a:	2209      	movs	r2, #9
 801a99c:	751a      	strb	r2, [r3, #20]
      }
      break;
 801a99e:	e005      	b.n	801a9ac <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 801a9a0:	2300      	movs	r3, #0
 801a9a2:	e01c      	b.n	801a9de <tcp_close_shutdown_fin+0xbe>
      break;
 801a9a4:	bf00      	nop
 801a9a6:	e002      	b.n	801a9ae <tcp_close_shutdown_fin+0x8e>
      break;
 801a9a8:	bf00      	nop
 801a9aa:	e000      	b.n	801a9ae <tcp_close_shutdown_fin+0x8e>
      break;
 801a9ac:	bf00      	nop
  }

  if (err == ERR_OK) {
 801a9ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a9b2:	2b00      	cmp	r3, #0
 801a9b4:	d103      	bne.n	801a9be <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 801a9b6:	6878      	ldr	r0, [r7, #4]
 801a9b8:	f005 f808 	bl	801f9cc <tcp_output>
 801a9bc:	e00d      	b.n	801a9da <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 801a9be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a9c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a9c6:	d108      	bne.n	801a9da <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 801a9c8:	687b      	ldr	r3, [r7, #4]
 801a9ca:	8b5b      	ldrh	r3, [r3, #26]
 801a9cc:	f043 0308 	orr.w	r3, r3, #8
 801a9d0:	b29a      	uxth	r2, r3
 801a9d2:	687b      	ldr	r3, [r7, #4]
 801a9d4:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 801a9d6:	2300      	movs	r3, #0
 801a9d8:	e001      	b.n	801a9de <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 801a9da:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801a9de:	4618      	mov	r0, r3
 801a9e0:	3710      	adds	r7, #16
 801a9e2:	46bd      	mov	sp, r7
 801a9e4:	bd80      	pop	{r7, pc}
 801a9e6:	bf00      	nop
 801a9e8:	0802d3c0 	.word	0x0802d3c0
 801a9ec:	0802d470 	.word	0x0802d470
 801a9f0:	0802d404 	.word	0x0802d404

0801a9f4 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 801a9f4:	b580      	push	{r7, lr}
 801a9f6:	b082      	sub	sp, #8
 801a9f8:	af00      	add	r7, sp, #0
 801a9fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 801a9fc:	687b      	ldr	r3, [r7, #4]
 801a9fe:	2b00      	cmp	r3, #0
 801aa00:	d109      	bne.n	801aa16 <tcp_close+0x22>
 801aa02:	4b0f      	ldr	r3, [pc, #60]	; (801aa40 <tcp_close+0x4c>)
 801aa04:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 801aa08:	490e      	ldr	r1, [pc, #56]	; (801aa44 <tcp_close+0x50>)
 801aa0a:	480f      	ldr	r0, [pc, #60]	; (801aa48 <tcp_close+0x54>)
 801aa0c:	f00b ff5e 	bl	80268cc <iprintf>
 801aa10:	f06f 030f 	mvn.w	r3, #15
 801aa14:	e00f      	b.n	801aa36 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 801aa16:	687b      	ldr	r3, [r7, #4]
 801aa18:	7d1b      	ldrb	r3, [r3, #20]
 801aa1a:	2b01      	cmp	r3, #1
 801aa1c:	d006      	beq.n	801aa2c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801aa1e:	687b      	ldr	r3, [r7, #4]
 801aa20:	8b5b      	ldrh	r3, [r3, #26]
 801aa22:	f043 0310 	orr.w	r3, r3, #16
 801aa26:	b29a      	uxth	r2, r3
 801aa28:	687b      	ldr	r3, [r7, #4]
 801aa2a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 801aa2c:	2101      	movs	r1, #1
 801aa2e:	6878      	ldr	r0, [r7, #4]
 801aa30:	f7ff fe94 	bl	801a75c <tcp_close_shutdown>
 801aa34:	4603      	mov	r3, r0
}
 801aa36:	4618      	mov	r0, r3
 801aa38:	3708      	adds	r7, #8
 801aa3a:	46bd      	mov	sp, r7
 801aa3c:	bd80      	pop	{r7, pc}
 801aa3e:	bf00      	nop
 801aa40:	0802d3c0 	.word	0x0802d3c0
 801aa44:	0802d4d0 	.word	0x0802d4d0
 801aa48:	0802d404 	.word	0x0802d404

0801aa4c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 801aa4c:	b580      	push	{r7, lr}
 801aa4e:	b08e      	sub	sp, #56	; 0x38
 801aa50:	af04      	add	r7, sp, #16
 801aa52:	6078      	str	r0, [r7, #4]
 801aa54:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 801aa56:	687b      	ldr	r3, [r7, #4]
 801aa58:	2b00      	cmp	r3, #0
 801aa5a:	d107      	bne.n	801aa6c <tcp_abandon+0x20>
 801aa5c:	4b52      	ldr	r3, [pc, #328]	; (801aba8 <tcp_abandon+0x15c>)
 801aa5e:	f240 223d 	movw	r2, #573	; 0x23d
 801aa62:	4952      	ldr	r1, [pc, #328]	; (801abac <tcp_abandon+0x160>)
 801aa64:	4852      	ldr	r0, [pc, #328]	; (801abb0 <tcp_abandon+0x164>)
 801aa66:	f00b ff31 	bl	80268cc <iprintf>
 801aa6a:	e099      	b.n	801aba0 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801aa6c:	687b      	ldr	r3, [r7, #4]
 801aa6e:	7d1b      	ldrb	r3, [r3, #20]
 801aa70:	2b01      	cmp	r3, #1
 801aa72:	d106      	bne.n	801aa82 <tcp_abandon+0x36>
 801aa74:	4b4c      	ldr	r3, [pc, #304]	; (801aba8 <tcp_abandon+0x15c>)
 801aa76:	f44f 7210 	mov.w	r2, #576	; 0x240
 801aa7a:	494e      	ldr	r1, [pc, #312]	; (801abb4 <tcp_abandon+0x168>)
 801aa7c:	484c      	ldr	r0, [pc, #304]	; (801abb0 <tcp_abandon+0x164>)
 801aa7e:	f00b ff25 	bl	80268cc <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 801aa82:	687b      	ldr	r3, [r7, #4]
 801aa84:	7d1b      	ldrb	r3, [r3, #20]
 801aa86:	2b0a      	cmp	r3, #10
 801aa88:	d107      	bne.n	801aa9a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 801aa8a:	6879      	ldr	r1, [r7, #4]
 801aa8c:	484a      	ldr	r0, [pc, #296]	; (801abb8 <tcp_abandon+0x16c>)
 801aa8e:	f001 fb81 	bl	801c194 <tcp_pcb_remove>
    tcp_free(pcb);
 801aa92:	6878      	ldr	r0, [r7, #4]
 801aa94:	f7ff fdb0 	bl	801a5f8 <tcp_free>
 801aa98:	e082      	b.n	801aba0 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 801aa9a:	2300      	movs	r3, #0
 801aa9c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 801aa9e:	2300      	movs	r3, #0
 801aaa0:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 801aaa2:	687b      	ldr	r3, [r7, #4]
 801aaa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801aaa6:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 801aaa8:	687b      	ldr	r3, [r7, #4]
 801aaaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801aaac:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 801aaae:	687b      	ldr	r3, [r7, #4]
 801aab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801aab4:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 801aab6:	687b      	ldr	r3, [r7, #4]
 801aab8:	691b      	ldr	r3, [r3, #16]
 801aaba:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 801aabc:	687b      	ldr	r3, [r7, #4]
 801aabe:	7d1b      	ldrb	r3, [r3, #20]
 801aac0:	2b00      	cmp	r3, #0
 801aac2:	d126      	bne.n	801ab12 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 801aac4:	687b      	ldr	r3, [r7, #4]
 801aac6:	8adb      	ldrh	r3, [r3, #22]
 801aac8:	2b00      	cmp	r3, #0
 801aaca:	d02e      	beq.n	801ab2a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801aacc:	4b3b      	ldr	r3, [pc, #236]	; (801abbc <tcp_abandon+0x170>)
 801aace:	681b      	ldr	r3, [r3, #0]
 801aad0:	687a      	ldr	r2, [r7, #4]
 801aad2:	429a      	cmp	r2, r3
 801aad4:	d105      	bne.n	801aae2 <tcp_abandon+0x96>
 801aad6:	4b39      	ldr	r3, [pc, #228]	; (801abbc <tcp_abandon+0x170>)
 801aad8:	681b      	ldr	r3, [r3, #0]
 801aada:	68db      	ldr	r3, [r3, #12]
 801aadc:	4a37      	ldr	r2, [pc, #220]	; (801abbc <tcp_abandon+0x170>)
 801aade:	6013      	str	r3, [r2, #0]
 801aae0:	e013      	b.n	801ab0a <tcp_abandon+0xbe>
 801aae2:	4b36      	ldr	r3, [pc, #216]	; (801abbc <tcp_abandon+0x170>)
 801aae4:	681b      	ldr	r3, [r3, #0]
 801aae6:	61fb      	str	r3, [r7, #28]
 801aae8:	e00c      	b.n	801ab04 <tcp_abandon+0xb8>
 801aaea:	69fb      	ldr	r3, [r7, #28]
 801aaec:	68db      	ldr	r3, [r3, #12]
 801aaee:	687a      	ldr	r2, [r7, #4]
 801aaf0:	429a      	cmp	r2, r3
 801aaf2:	d104      	bne.n	801aafe <tcp_abandon+0xb2>
 801aaf4:	687b      	ldr	r3, [r7, #4]
 801aaf6:	68da      	ldr	r2, [r3, #12]
 801aaf8:	69fb      	ldr	r3, [r7, #28]
 801aafa:	60da      	str	r2, [r3, #12]
 801aafc:	e005      	b.n	801ab0a <tcp_abandon+0xbe>
 801aafe:	69fb      	ldr	r3, [r7, #28]
 801ab00:	68db      	ldr	r3, [r3, #12]
 801ab02:	61fb      	str	r3, [r7, #28]
 801ab04:	69fb      	ldr	r3, [r7, #28]
 801ab06:	2b00      	cmp	r3, #0
 801ab08:	d1ef      	bne.n	801aaea <tcp_abandon+0x9e>
 801ab0a:	687b      	ldr	r3, [r7, #4]
 801ab0c:	2200      	movs	r2, #0
 801ab0e:	60da      	str	r2, [r3, #12]
 801ab10:	e00b      	b.n	801ab2a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 801ab12:	683b      	ldr	r3, [r7, #0]
 801ab14:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 801ab16:	687b      	ldr	r3, [r7, #4]
 801ab18:	8adb      	ldrh	r3, [r3, #22]
 801ab1a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801ab1c:	6879      	ldr	r1, [r7, #4]
 801ab1e:	4828      	ldr	r0, [pc, #160]	; (801abc0 <tcp_abandon+0x174>)
 801ab20:	f001 fb38 	bl	801c194 <tcp_pcb_remove>
 801ab24:	4b27      	ldr	r3, [pc, #156]	; (801abc4 <tcp_abandon+0x178>)
 801ab26:	2201      	movs	r2, #1
 801ab28:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 801ab2a:	687b      	ldr	r3, [r7, #4]
 801ab2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ab2e:	2b00      	cmp	r3, #0
 801ab30:	d004      	beq.n	801ab3c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 801ab32:	687b      	ldr	r3, [r7, #4]
 801ab34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ab36:	4618      	mov	r0, r3
 801ab38:	f000 ffee 	bl	801bb18 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 801ab3c:	687b      	ldr	r3, [r7, #4]
 801ab3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ab40:	2b00      	cmp	r3, #0
 801ab42:	d004      	beq.n	801ab4e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 801ab44:	687b      	ldr	r3, [r7, #4]
 801ab46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ab48:	4618      	mov	r0, r3
 801ab4a:	f000 ffe5 	bl	801bb18 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801ab4e:	687b      	ldr	r3, [r7, #4]
 801ab50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801ab52:	2b00      	cmp	r3, #0
 801ab54:	d004      	beq.n	801ab60 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 801ab56:	687b      	ldr	r3, [r7, #4]
 801ab58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801ab5a:	4618      	mov	r0, r3
 801ab5c:	f000 ffdc 	bl	801bb18 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 801ab60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ab62:	2b00      	cmp	r3, #0
 801ab64:	d00e      	beq.n	801ab84 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 801ab66:	6879      	ldr	r1, [r7, #4]
 801ab68:	687b      	ldr	r3, [r7, #4]
 801ab6a:	3304      	adds	r3, #4
 801ab6c:	687a      	ldr	r2, [r7, #4]
 801ab6e:	8b12      	ldrh	r2, [r2, #24]
 801ab70:	9202      	str	r2, [sp, #8]
 801ab72:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801ab74:	9201      	str	r2, [sp, #4]
 801ab76:	9300      	str	r3, [sp, #0]
 801ab78:	460b      	mov	r3, r1
 801ab7a:	697a      	ldr	r2, [r7, #20]
 801ab7c:	69b9      	ldr	r1, [r7, #24]
 801ab7e:	6878      	ldr	r0, [r7, #4]
 801ab80:	f005 fcd8 	bl	8020534 <tcp_rst>
    }
    last_state = pcb->state;
 801ab84:	687b      	ldr	r3, [r7, #4]
 801ab86:	7d1b      	ldrb	r3, [r3, #20]
 801ab88:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 801ab8a:	6878      	ldr	r0, [r7, #4]
 801ab8c:	f7ff fd34 	bl	801a5f8 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 801ab90:	693b      	ldr	r3, [r7, #16]
 801ab92:	2b00      	cmp	r3, #0
 801ab94:	d004      	beq.n	801aba0 <tcp_abandon+0x154>
 801ab96:	693b      	ldr	r3, [r7, #16]
 801ab98:	f06f 010c 	mvn.w	r1, #12
 801ab9c:	68f8      	ldr	r0, [r7, #12]
 801ab9e:	4798      	blx	r3
  }
}
 801aba0:	3728      	adds	r7, #40	; 0x28
 801aba2:	46bd      	mov	sp, r7
 801aba4:	bd80      	pop	{r7, pc}
 801aba6:	bf00      	nop
 801aba8:	0802d3c0 	.word	0x0802d3c0
 801abac:	0802d504 	.word	0x0802d504
 801abb0:	0802d404 	.word	0x0802d404
 801abb4:	0802d520 	.word	0x0802d520
 801abb8:	2001c10c 	.word	0x2001c10c
 801abbc:	2001c108 	.word	0x2001c108
 801abc0:	2001c0fc 	.word	0x2001c0fc
 801abc4:	2001c0f8 	.word	0x2001c0f8

0801abc8 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 801abc8:	b580      	push	{r7, lr}
 801abca:	b082      	sub	sp, #8
 801abcc:	af00      	add	r7, sp, #0
 801abce:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 801abd0:	2101      	movs	r1, #1
 801abd2:	6878      	ldr	r0, [r7, #4]
 801abd4:	f7ff ff3a 	bl	801aa4c <tcp_abandon>
}
 801abd8:	bf00      	nop
 801abda:	3708      	adds	r7, #8
 801abdc:	46bd      	mov	sp, r7
 801abde:	bd80      	pop	{r7, pc}

0801abe0 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801abe0:	b580      	push	{r7, lr}
 801abe2:	b088      	sub	sp, #32
 801abe4:	af00      	add	r7, sp, #0
 801abe6:	60f8      	str	r0, [r7, #12]
 801abe8:	60b9      	str	r1, [r7, #8]
 801abea:	4613      	mov	r3, r2
 801abec:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 801abee:	2304      	movs	r3, #4
 801abf0:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801abf2:	68bb      	ldr	r3, [r7, #8]
 801abf4:	2b00      	cmp	r3, #0
 801abf6:	d101      	bne.n	801abfc <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 801abf8:	4b3e      	ldr	r3, [pc, #248]	; (801acf4 <tcp_bind+0x114>)
 801abfa:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801abfc:	68fb      	ldr	r3, [r7, #12]
 801abfe:	2b00      	cmp	r3, #0
 801ac00:	d109      	bne.n	801ac16 <tcp_bind+0x36>
 801ac02:	4b3d      	ldr	r3, [pc, #244]	; (801acf8 <tcp_bind+0x118>)
 801ac04:	f240 22a9 	movw	r2, #681	; 0x2a9
 801ac08:	493c      	ldr	r1, [pc, #240]	; (801acfc <tcp_bind+0x11c>)
 801ac0a:	483d      	ldr	r0, [pc, #244]	; (801ad00 <tcp_bind+0x120>)
 801ac0c:	f00b fe5e 	bl	80268cc <iprintf>
 801ac10:	f06f 030f 	mvn.w	r3, #15
 801ac14:	e06a      	b.n	801acec <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 801ac16:	68fb      	ldr	r3, [r7, #12]
 801ac18:	7d1b      	ldrb	r3, [r3, #20]
 801ac1a:	2b00      	cmp	r3, #0
 801ac1c:	d009      	beq.n	801ac32 <tcp_bind+0x52>
 801ac1e:	4b36      	ldr	r3, [pc, #216]	; (801acf8 <tcp_bind+0x118>)
 801ac20:	f240 22ab 	movw	r2, #683	; 0x2ab
 801ac24:	4937      	ldr	r1, [pc, #220]	; (801ad04 <tcp_bind+0x124>)
 801ac26:	4836      	ldr	r0, [pc, #216]	; (801ad00 <tcp_bind+0x120>)
 801ac28:	f00b fe50 	bl	80268cc <iprintf>
 801ac2c:	f06f 0305 	mvn.w	r3, #5
 801ac30:	e05c      	b.n	801acec <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 801ac32:	88fb      	ldrh	r3, [r7, #6]
 801ac34:	2b00      	cmp	r3, #0
 801ac36:	d109      	bne.n	801ac4c <tcp_bind+0x6c>
    port = tcp_new_port();
 801ac38:	f000 f9f0 	bl	801b01c <tcp_new_port>
 801ac3c:	4603      	mov	r3, r0
 801ac3e:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801ac40:	88fb      	ldrh	r3, [r7, #6]
 801ac42:	2b00      	cmp	r3, #0
 801ac44:	d135      	bne.n	801acb2 <tcp_bind+0xd2>
      return ERR_BUF;
 801ac46:	f06f 0301 	mvn.w	r3, #1
 801ac4a:	e04f      	b.n	801acec <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 801ac4c:	2300      	movs	r3, #0
 801ac4e:	61fb      	str	r3, [r7, #28]
 801ac50:	e02b      	b.n	801acaa <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801ac52:	4a2d      	ldr	r2, [pc, #180]	; (801ad08 <tcp_bind+0x128>)
 801ac54:	69fb      	ldr	r3, [r7, #28]
 801ac56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801ac5a:	681b      	ldr	r3, [r3, #0]
 801ac5c:	61bb      	str	r3, [r7, #24]
 801ac5e:	e01e      	b.n	801ac9e <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 801ac60:	69bb      	ldr	r3, [r7, #24]
 801ac62:	8adb      	ldrh	r3, [r3, #22]
 801ac64:	88fa      	ldrh	r2, [r7, #6]
 801ac66:	429a      	cmp	r2, r3
 801ac68:	d116      	bne.n	801ac98 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 801ac6a:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 801ac6c:	2b00      	cmp	r3, #0
 801ac6e:	d010      	beq.n	801ac92 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 801ac70:	69bb      	ldr	r3, [r7, #24]
 801ac72:	681b      	ldr	r3, [r3, #0]
 801ac74:	2b00      	cmp	r3, #0
 801ac76:	d00c      	beq.n	801ac92 <tcp_bind+0xb2>
 801ac78:	68bb      	ldr	r3, [r7, #8]
 801ac7a:	2b00      	cmp	r3, #0
 801ac7c:	d009      	beq.n	801ac92 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 801ac7e:	68bb      	ldr	r3, [r7, #8]
 801ac80:	681b      	ldr	r3, [r3, #0]
 801ac82:	2b00      	cmp	r3, #0
 801ac84:	d005      	beq.n	801ac92 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 801ac86:	69bb      	ldr	r3, [r7, #24]
 801ac88:	681a      	ldr	r2, [r3, #0]
 801ac8a:	68bb      	ldr	r3, [r7, #8]
 801ac8c:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 801ac8e:	429a      	cmp	r2, r3
 801ac90:	d102      	bne.n	801ac98 <tcp_bind+0xb8>
              return ERR_USE;
 801ac92:	f06f 0307 	mvn.w	r3, #7
 801ac96:	e029      	b.n	801acec <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801ac98:	69bb      	ldr	r3, [r7, #24]
 801ac9a:	68db      	ldr	r3, [r3, #12]
 801ac9c:	61bb      	str	r3, [r7, #24]
 801ac9e:	69bb      	ldr	r3, [r7, #24]
 801aca0:	2b00      	cmp	r3, #0
 801aca2:	d1dd      	bne.n	801ac60 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 801aca4:	69fb      	ldr	r3, [r7, #28]
 801aca6:	3301      	adds	r3, #1
 801aca8:	61fb      	str	r3, [r7, #28]
 801acaa:	69fa      	ldr	r2, [r7, #28]
 801acac:	697b      	ldr	r3, [r7, #20]
 801acae:	429a      	cmp	r2, r3
 801acb0:	dbcf      	blt.n	801ac52 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 801acb2:	68bb      	ldr	r3, [r7, #8]
 801acb4:	2b00      	cmp	r3, #0
 801acb6:	d00c      	beq.n	801acd2 <tcp_bind+0xf2>
 801acb8:	68bb      	ldr	r3, [r7, #8]
 801acba:	681b      	ldr	r3, [r3, #0]
 801acbc:	2b00      	cmp	r3, #0
 801acbe:	d008      	beq.n	801acd2 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 801acc0:	68bb      	ldr	r3, [r7, #8]
 801acc2:	2b00      	cmp	r3, #0
 801acc4:	d002      	beq.n	801accc <tcp_bind+0xec>
 801acc6:	68bb      	ldr	r3, [r7, #8]
 801acc8:	681b      	ldr	r3, [r3, #0]
 801acca:	e000      	b.n	801acce <tcp_bind+0xee>
 801accc:	2300      	movs	r3, #0
 801acce:	68fa      	ldr	r2, [r7, #12]
 801acd0:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 801acd2:	68fb      	ldr	r3, [r7, #12]
 801acd4:	88fa      	ldrh	r2, [r7, #6]
 801acd6:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 801acd8:	4b0c      	ldr	r3, [pc, #48]	; (801ad0c <tcp_bind+0x12c>)
 801acda:	681a      	ldr	r2, [r3, #0]
 801acdc:	68fb      	ldr	r3, [r7, #12]
 801acde:	60da      	str	r2, [r3, #12]
 801ace0:	4a0a      	ldr	r2, [pc, #40]	; (801ad0c <tcp_bind+0x12c>)
 801ace2:	68fb      	ldr	r3, [r7, #12]
 801ace4:	6013      	str	r3, [r2, #0]
 801ace6:	f005 fde7 	bl	80208b8 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 801acea:	2300      	movs	r3, #0
}
 801acec:	4618      	mov	r0, r3
 801acee:	3720      	adds	r7, #32
 801acf0:	46bd      	mov	sp, r7
 801acf2:	bd80      	pop	{r7, pc}
 801acf4:	08030e24 	.word	0x08030e24
 801acf8:	0802d3c0 	.word	0x0802d3c0
 801acfc:	0802d554 	.word	0x0802d554
 801ad00:	0802d404 	.word	0x0802d404
 801ad04:	0802d56c 	.word	0x0802d56c
 801ad08:	08030dec 	.word	0x08030dec
 801ad0c:	2001c108 	.word	0x2001c108

0801ad10 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 801ad10:	b580      	push	{r7, lr}
 801ad12:	b084      	sub	sp, #16
 801ad14:	af00      	add	r7, sp, #0
 801ad16:	60f8      	str	r0, [r7, #12]
 801ad18:	60b9      	str	r1, [r7, #8]
 801ad1a:	4613      	mov	r3, r2
 801ad1c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 801ad1e:	68bb      	ldr	r3, [r7, #8]
 801ad20:	2b00      	cmp	r3, #0
 801ad22:	d106      	bne.n	801ad32 <tcp_accept_null+0x22>
 801ad24:	4b07      	ldr	r3, [pc, #28]	; (801ad44 <tcp_accept_null+0x34>)
 801ad26:	f240 320f 	movw	r2, #783	; 0x30f
 801ad2a:	4907      	ldr	r1, [pc, #28]	; (801ad48 <tcp_accept_null+0x38>)
 801ad2c:	4807      	ldr	r0, [pc, #28]	; (801ad4c <tcp_accept_null+0x3c>)
 801ad2e:	f00b fdcd 	bl	80268cc <iprintf>

  tcp_abort(pcb);
 801ad32:	68b8      	ldr	r0, [r7, #8]
 801ad34:	f7ff ff48 	bl	801abc8 <tcp_abort>

  return ERR_ABRT;
 801ad38:	f06f 030c 	mvn.w	r3, #12
}
 801ad3c:	4618      	mov	r0, r3
 801ad3e:	3710      	adds	r7, #16
 801ad40:	46bd      	mov	sp, r7
 801ad42:	bd80      	pop	{r7, pc}
 801ad44:	0802d3c0 	.word	0x0802d3c0
 801ad48:	0802d594 	.word	0x0802d594
 801ad4c:	0802d404 	.word	0x0802d404

0801ad50 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 801ad50:	b580      	push	{r7, lr}
 801ad52:	b082      	sub	sp, #8
 801ad54:	af00      	add	r7, sp, #0
 801ad56:	6078      	str	r0, [r7, #4]
 801ad58:	460b      	mov	r3, r1
 801ad5a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 801ad5c:	78fb      	ldrb	r3, [r7, #3]
 801ad5e:	2200      	movs	r2, #0
 801ad60:	4619      	mov	r1, r3
 801ad62:	6878      	ldr	r0, [r7, #4]
 801ad64:	f000 f806 	bl	801ad74 <tcp_listen_with_backlog_and_err>
 801ad68:	4603      	mov	r3, r0
}
 801ad6a:	4618      	mov	r0, r3
 801ad6c:	3708      	adds	r7, #8
 801ad6e:	46bd      	mov	sp, r7
 801ad70:	bd80      	pop	{r7, pc}
	...

0801ad74 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 801ad74:	b580      	push	{r7, lr}
 801ad76:	b088      	sub	sp, #32
 801ad78:	af00      	add	r7, sp, #0
 801ad7a:	60f8      	str	r0, [r7, #12]
 801ad7c:	460b      	mov	r3, r1
 801ad7e:	607a      	str	r2, [r7, #4]
 801ad80:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 801ad82:	2300      	movs	r3, #0
 801ad84:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 801ad86:	68fb      	ldr	r3, [r7, #12]
 801ad88:	2b00      	cmp	r3, #0
 801ad8a:	d109      	bne.n	801ada0 <tcp_listen_with_backlog_and_err+0x2c>
 801ad8c:	4b47      	ldr	r3, [pc, #284]	; (801aeac <tcp_listen_with_backlog_and_err+0x138>)
 801ad8e:	f240 3259 	movw	r2, #857	; 0x359
 801ad92:	4947      	ldr	r1, [pc, #284]	; (801aeb0 <tcp_listen_with_backlog_and_err+0x13c>)
 801ad94:	4847      	ldr	r0, [pc, #284]	; (801aeb4 <tcp_listen_with_backlog_and_err+0x140>)
 801ad96:	f00b fd99 	bl	80268cc <iprintf>
 801ad9a:	23f0      	movs	r3, #240	; 0xf0
 801ad9c:	76fb      	strb	r3, [r7, #27]
 801ad9e:	e079      	b.n	801ae94 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 801ada0:	68fb      	ldr	r3, [r7, #12]
 801ada2:	7d1b      	ldrb	r3, [r3, #20]
 801ada4:	2b00      	cmp	r3, #0
 801ada6:	d009      	beq.n	801adbc <tcp_listen_with_backlog_and_err+0x48>
 801ada8:	4b40      	ldr	r3, [pc, #256]	; (801aeac <tcp_listen_with_backlog_and_err+0x138>)
 801adaa:	f240 325a 	movw	r2, #858	; 0x35a
 801adae:	4942      	ldr	r1, [pc, #264]	; (801aeb8 <tcp_listen_with_backlog_and_err+0x144>)
 801adb0:	4840      	ldr	r0, [pc, #256]	; (801aeb4 <tcp_listen_with_backlog_and_err+0x140>)
 801adb2:	f00b fd8b 	bl	80268cc <iprintf>
 801adb6:	23f1      	movs	r3, #241	; 0xf1
 801adb8:	76fb      	strb	r3, [r7, #27]
 801adba:	e06b      	b.n	801ae94 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 801adbc:	68fb      	ldr	r3, [r7, #12]
 801adbe:	7d1b      	ldrb	r3, [r3, #20]
 801adc0:	2b01      	cmp	r3, #1
 801adc2:	d104      	bne.n	801adce <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 801adc4:	68fb      	ldr	r3, [r7, #12]
 801adc6:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 801adc8:	23f7      	movs	r3, #247	; 0xf7
 801adca:	76fb      	strb	r3, [r7, #27]
    goto done;
 801adcc:	e062      	b.n	801ae94 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 801adce:	2002      	movs	r0, #2
 801add0:	f7fe f9f0 	bl	80191b4 <memp_malloc>
 801add4:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 801add6:	69fb      	ldr	r3, [r7, #28]
 801add8:	2b00      	cmp	r3, #0
 801adda:	d102      	bne.n	801ade2 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 801addc:	23ff      	movs	r3, #255	; 0xff
 801adde:	76fb      	strb	r3, [r7, #27]
    goto done;
 801ade0:	e058      	b.n	801ae94 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 801ade2:	68fb      	ldr	r3, [r7, #12]
 801ade4:	691a      	ldr	r2, [r3, #16]
 801ade6:	69fb      	ldr	r3, [r7, #28]
 801ade8:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 801adea:	68fb      	ldr	r3, [r7, #12]
 801adec:	8ada      	ldrh	r2, [r3, #22]
 801adee:	69fb      	ldr	r3, [r7, #28]
 801adf0:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 801adf2:	69fb      	ldr	r3, [r7, #28]
 801adf4:	2201      	movs	r2, #1
 801adf6:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 801adf8:	68fb      	ldr	r3, [r7, #12]
 801adfa:	7d5a      	ldrb	r2, [r3, #21]
 801adfc:	69fb      	ldr	r3, [r7, #28]
 801adfe:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 801ae00:	68fb      	ldr	r3, [r7, #12]
 801ae02:	7a5a      	ldrb	r2, [r3, #9]
 801ae04:	69fb      	ldr	r3, [r7, #28]
 801ae06:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 801ae08:	69fb      	ldr	r3, [r7, #28]
 801ae0a:	2200      	movs	r2, #0
 801ae0c:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 801ae0e:	68fb      	ldr	r3, [r7, #12]
 801ae10:	7ada      	ldrb	r2, [r3, #11]
 801ae12:	69fb      	ldr	r3, [r7, #28]
 801ae14:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 801ae16:	68fb      	ldr	r3, [r7, #12]
 801ae18:	7a9a      	ldrb	r2, [r3, #10]
 801ae1a:	69fb      	ldr	r3, [r7, #28]
 801ae1c:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 801ae1e:	68fb      	ldr	r3, [r7, #12]
 801ae20:	681a      	ldr	r2, [r3, #0]
 801ae22:	69fb      	ldr	r3, [r7, #28]
 801ae24:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 801ae26:	68fb      	ldr	r3, [r7, #12]
 801ae28:	8adb      	ldrh	r3, [r3, #22]
 801ae2a:	2b00      	cmp	r3, #0
 801ae2c:	d021      	beq.n	801ae72 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 801ae2e:	4b23      	ldr	r3, [pc, #140]	; (801aebc <tcp_listen_with_backlog_and_err+0x148>)
 801ae30:	681b      	ldr	r3, [r3, #0]
 801ae32:	68fa      	ldr	r2, [r7, #12]
 801ae34:	429a      	cmp	r2, r3
 801ae36:	d105      	bne.n	801ae44 <tcp_listen_with_backlog_and_err+0xd0>
 801ae38:	4b20      	ldr	r3, [pc, #128]	; (801aebc <tcp_listen_with_backlog_and_err+0x148>)
 801ae3a:	681b      	ldr	r3, [r3, #0]
 801ae3c:	68db      	ldr	r3, [r3, #12]
 801ae3e:	4a1f      	ldr	r2, [pc, #124]	; (801aebc <tcp_listen_with_backlog_and_err+0x148>)
 801ae40:	6013      	str	r3, [r2, #0]
 801ae42:	e013      	b.n	801ae6c <tcp_listen_with_backlog_and_err+0xf8>
 801ae44:	4b1d      	ldr	r3, [pc, #116]	; (801aebc <tcp_listen_with_backlog_and_err+0x148>)
 801ae46:	681b      	ldr	r3, [r3, #0]
 801ae48:	617b      	str	r3, [r7, #20]
 801ae4a:	e00c      	b.n	801ae66 <tcp_listen_with_backlog_and_err+0xf2>
 801ae4c:	697b      	ldr	r3, [r7, #20]
 801ae4e:	68db      	ldr	r3, [r3, #12]
 801ae50:	68fa      	ldr	r2, [r7, #12]
 801ae52:	429a      	cmp	r2, r3
 801ae54:	d104      	bne.n	801ae60 <tcp_listen_with_backlog_and_err+0xec>
 801ae56:	68fb      	ldr	r3, [r7, #12]
 801ae58:	68da      	ldr	r2, [r3, #12]
 801ae5a:	697b      	ldr	r3, [r7, #20]
 801ae5c:	60da      	str	r2, [r3, #12]
 801ae5e:	e005      	b.n	801ae6c <tcp_listen_with_backlog_and_err+0xf8>
 801ae60:	697b      	ldr	r3, [r7, #20]
 801ae62:	68db      	ldr	r3, [r3, #12]
 801ae64:	617b      	str	r3, [r7, #20]
 801ae66:	697b      	ldr	r3, [r7, #20]
 801ae68:	2b00      	cmp	r3, #0
 801ae6a:	d1ef      	bne.n	801ae4c <tcp_listen_with_backlog_and_err+0xd8>
 801ae6c:	68fb      	ldr	r3, [r7, #12]
 801ae6e:	2200      	movs	r2, #0
 801ae70:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 801ae72:	68f8      	ldr	r0, [r7, #12]
 801ae74:	f7ff fbc0 	bl	801a5f8 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 801ae78:	69fb      	ldr	r3, [r7, #28]
 801ae7a:	4a11      	ldr	r2, [pc, #68]	; (801aec0 <tcp_listen_with_backlog_and_err+0x14c>)
 801ae7c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 801ae7e:	4b11      	ldr	r3, [pc, #68]	; (801aec4 <tcp_listen_with_backlog_and_err+0x150>)
 801ae80:	681a      	ldr	r2, [r3, #0]
 801ae82:	69fb      	ldr	r3, [r7, #28]
 801ae84:	60da      	str	r2, [r3, #12]
 801ae86:	4a0f      	ldr	r2, [pc, #60]	; (801aec4 <tcp_listen_with_backlog_and_err+0x150>)
 801ae88:	69fb      	ldr	r3, [r7, #28]
 801ae8a:	6013      	str	r3, [r2, #0]
 801ae8c:	f005 fd14 	bl	80208b8 <tcp_timer_needed>
  res = ERR_OK;
 801ae90:	2300      	movs	r3, #0
 801ae92:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 801ae94:	687b      	ldr	r3, [r7, #4]
 801ae96:	2b00      	cmp	r3, #0
 801ae98:	d002      	beq.n	801aea0 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 801ae9a:	687b      	ldr	r3, [r7, #4]
 801ae9c:	7efa      	ldrb	r2, [r7, #27]
 801ae9e:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 801aea0:	69fb      	ldr	r3, [r7, #28]
}
 801aea2:	4618      	mov	r0, r3
 801aea4:	3720      	adds	r7, #32
 801aea6:	46bd      	mov	sp, r7
 801aea8:	bd80      	pop	{r7, pc}
 801aeaa:	bf00      	nop
 801aeac:	0802d3c0 	.word	0x0802d3c0
 801aeb0:	0802d5b4 	.word	0x0802d5b4
 801aeb4:	0802d404 	.word	0x0802d404
 801aeb8:	0802d5e4 	.word	0x0802d5e4
 801aebc:	2001c108 	.word	0x2001c108
 801aec0:	0801ad11 	.word	0x0801ad11
 801aec4:	2001c104 	.word	0x2001c104

0801aec8 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 801aec8:	b580      	push	{r7, lr}
 801aeca:	b084      	sub	sp, #16
 801aecc:	af00      	add	r7, sp, #0
 801aece:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 801aed0:	687b      	ldr	r3, [r7, #4]
 801aed2:	2b00      	cmp	r3, #0
 801aed4:	d106      	bne.n	801aee4 <tcp_update_rcv_ann_wnd+0x1c>
 801aed6:	4b25      	ldr	r3, [pc, #148]	; (801af6c <tcp_update_rcv_ann_wnd+0xa4>)
 801aed8:	f240 32a6 	movw	r2, #934	; 0x3a6
 801aedc:	4924      	ldr	r1, [pc, #144]	; (801af70 <tcp_update_rcv_ann_wnd+0xa8>)
 801aede:	4825      	ldr	r0, [pc, #148]	; (801af74 <tcp_update_rcv_ann_wnd+0xac>)
 801aee0:	f00b fcf4 	bl	80268cc <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 801aee4:	687b      	ldr	r3, [r7, #4]
 801aee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801aee8:	687a      	ldr	r2, [r7, #4]
 801aeea:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 801aeec:	4413      	add	r3, r2
 801aeee:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 801aef0:	687b      	ldr	r3, [r7, #4]
 801aef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801aef4:	687a      	ldr	r2, [r7, #4]
 801aef6:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 801aef8:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 801aefc:	bf28      	it	cs
 801aefe:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 801af02:	b292      	uxth	r2, r2
 801af04:	4413      	add	r3, r2
 801af06:	68fa      	ldr	r2, [r7, #12]
 801af08:	1ad3      	subs	r3, r2, r3
 801af0a:	2b00      	cmp	r3, #0
 801af0c:	db08      	blt.n	801af20 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 801af0e:	687b      	ldr	r3, [r7, #4]
 801af10:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801af12:	687b      	ldr	r3, [r7, #4]
 801af14:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801af16:	687b      	ldr	r3, [r7, #4]
 801af18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801af1a:	68fa      	ldr	r2, [r7, #12]
 801af1c:	1ad3      	subs	r3, r2, r3
 801af1e:	e020      	b.n	801af62 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 801af20:	687b      	ldr	r3, [r7, #4]
 801af22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801af24:	687b      	ldr	r3, [r7, #4]
 801af26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801af28:	1ad3      	subs	r3, r2, r3
 801af2a:	2b00      	cmp	r3, #0
 801af2c:	dd03      	ble.n	801af36 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 801af2e:	687b      	ldr	r3, [r7, #4]
 801af30:	2200      	movs	r2, #0
 801af32:	855a      	strh	r2, [r3, #42]	; 0x2a
 801af34:	e014      	b.n	801af60 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801af36:	687b      	ldr	r3, [r7, #4]
 801af38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801af3a:	687b      	ldr	r3, [r7, #4]
 801af3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801af3e:	1ad3      	subs	r3, r2, r3
 801af40:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801af42:	68bb      	ldr	r3, [r7, #8]
 801af44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801af48:	d306      	bcc.n	801af58 <tcp_update_rcv_ann_wnd+0x90>
 801af4a:	4b08      	ldr	r3, [pc, #32]	; (801af6c <tcp_update_rcv_ann_wnd+0xa4>)
 801af4c:	f240 32b6 	movw	r2, #950	; 0x3b6
 801af50:	4909      	ldr	r1, [pc, #36]	; (801af78 <tcp_update_rcv_ann_wnd+0xb0>)
 801af52:	4808      	ldr	r0, [pc, #32]	; (801af74 <tcp_update_rcv_ann_wnd+0xac>)
 801af54:	f00b fcba 	bl	80268cc <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 801af58:	68bb      	ldr	r3, [r7, #8]
 801af5a:	b29a      	uxth	r2, r3
 801af5c:	687b      	ldr	r3, [r7, #4]
 801af5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 801af60:	2300      	movs	r3, #0
  }
}
 801af62:	4618      	mov	r0, r3
 801af64:	3710      	adds	r7, #16
 801af66:	46bd      	mov	sp, r7
 801af68:	bd80      	pop	{r7, pc}
 801af6a:	bf00      	nop
 801af6c:	0802d3c0 	.word	0x0802d3c0
 801af70:	0802d61c 	.word	0x0802d61c
 801af74:	0802d404 	.word	0x0802d404
 801af78:	0802d640 	.word	0x0802d640

0801af7c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 801af7c:	b580      	push	{r7, lr}
 801af7e:	b084      	sub	sp, #16
 801af80:	af00      	add	r7, sp, #0
 801af82:	6078      	str	r0, [r7, #4]
 801af84:	460b      	mov	r3, r1
 801af86:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 801af88:	687b      	ldr	r3, [r7, #4]
 801af8a:	2b00      	cmp	r3, #0
 801af8c:	d107      	bne.n	801af9e <tcp_recved+0x22>
 801af8e:	4b1f      	ldr	r3, [pc, #124]	; (801b00c <tcp_recved+0x90>)
 801af90:	f240 32cf 	movw	r2, #975	; 0x3cf
 801af94:	491e      	ldr	r1, [pc, #120]	; (801b010 <tcp_recved+0x94>)
 801af96:	481f      	ldr	r0, [pc, #124]	; (801b014 <tcp_recved+0x98>)
 801af98:	f00b fc98 	bl	80268cc <iprintf>
 801af9c:	e032      	b.n	801b004 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 801af9e:	687b      	ldr	r3, [r7, #4]
 801afa0:	7d1b      	ldrb	r3, [r3, #20]
 801afa2:	2b01      	cmp	r3, #1
 801afa4:	d106      	bne.n	801afb4 <tcp_recved+0x38>
 801afa6:	4b19      	ldr	r3, [pc, #100]	; (801b00c <tcp_recved+0x90>)
 801afa8:	f240 32d2 	movw	r2, #978	; 0x3d2
 801afac:	491a      	ldr	r1, [pc, #104]	; (801b018 <tcp_recved+0x9c>)
 801afae:	4819      	ldr	r0, [pc, #100]	; (801b014 <tcp_recved+0x98>)
 801afb0:	f00b fc8c 	bl	80268cc <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 801afb4:	687b      	ldr	r3, [r7, #4]
 801afb6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801afb8:	887b      	ldrh	r3, [r7, #2]
 801afba:	4413      	add	r3, r2
 801afbc:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 801afbe:	89fb      	ldrh	r3, [r7, #14]
 801afc0:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801afc4:	d804      	bhi.n	801afd0 <tcp_recved+0x54>
 801afc6:	687b      	ldr	r3, [r7, #4]
 801afc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801afca:	89fa      	ldrh	r2, [r7, #14]
 801afcc:	429a      	cmp	r2, r3
 801afce:	d204      	bcs.n	801afda <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 801afd0:	687b      	ldr	r3, [r7, #4]
 801afd2:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801afd6:	851a      	strh	r2, [r3, #40]	; 0x28
 801afd8:	e002      	b.n	801afe0 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 801afda:	687b      	ldr	r3, [r7, #4]
 801afdc:	89fa      	ldrh	r2, [r7, #14]
 801afde:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 801afe0:	6878      	ldr	r0, [r7, #4]
 801afe2:	f7ff ff71 	bl	801aec8 <tcp_update_rcv_ann_wnd>
 801afe6:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 801afe8:	68bb      	ldr	r3, [r7, #8]
 801afea:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801afee:	d309      	bcc.n	801b004 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 801aff0:	687b      	ldr	r3, [r7, #4]
 801aff2:	8b5b      	ldrh	r3, [r3, #26]
 801aff4:	f043 0302 	orr.w	r3, r3, #2
 801aff8:	b29a      	uxth	r2, r3
 801affa:	687b      	ldr	r3, [r7, #4]
 801affc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801affe:	6878      	ldr	r0, [r7, #4]
 801b000:	f004 fce4 	bl	801f9cc <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 801b004:	3710      	adds	r7, #16
 801b006:	46bd      	mov	sp, r7
 801b008:	bd80      	pop	{r7, pc}
 801b00a:	bf00      	nop
 801b00c:	0802d3c0 	.word	0x0802d3c0
 801b010:	0802d65c 	.word	0x0802d65c
 801b014:	0802d404 	.word	0x0802d404
 801b018:	0802d674 	.word	0x0802d674

0801b01c <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 801b01c:	b480      	push	{r7}
 801b01e:	b083      	sub	sp, #12
 801b020:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 801b022:	2300      	movs	r3, #0
 801b024:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 801b026:	4b1e      	ldr	r3, [pc, #120]	; (801b0a0 <tcp_new_port+0x84>)
 801b028:	881b      	ldrh	r3, [r3, #0]
 801b02a:	3301      	adds	r3, #1
 801b02c:	b29a      	uxth	r2, r3
 801b02e:	4b1c      	ldr	r3, [pc, #112]	; (801b0a0 <tcp_new_port+0x84>)
 801b030:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 801b032:	4b1b      	ldr	r3, [pc, #108]	; (801b0a0 <tcp_new_port+0x84>)
 801b034:	881b      	ldrh	r3, [r3, #0]
 801b036:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b03a:	4293      	cmp	r3, r2
 801b03c:	d103      	bne.n	801b046 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 801b03e:	4b18      	ldr	r3, [pc, #96]	; (801b0a0 <tcp_new_port+0x84>)
 801b040:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801b044:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801b046:	2300      	movs	r3, #0
 801b048:	71fb      	strb	r3, [r7, #7]
 801b04a:	e01e      	b.n	801b08a <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 801b04c:	79fb      	ldrb	r3, [r7, #7]
 801b04e:	4a15      	ldr	r2, [pc, #84]	; (801b0a4 <tcp_new_port+0x88>)
 801b050:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b054:	681b      	ldr	r3, [r3, #0]
 801b056:	603b      	str	r3, [r7, #0]
 801b058:	e011      	b.n	801b07e <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 801b05a:	683b      	ldr	r3, [r7, #0]
 801b05c:	8ada      	ldrh	r2, [r3, #22]
 801b05e:	4b10      	ldr	r3, [pc, #64]	; (801b0a0 <tcp_new_port+0x84>)
 801b060:	881b      	ldrh	r3, [r3, #0]
 801b062:	429a      	cmp	r2, r3
 801b064:	d108      	bne.n	801b078 <tcp_new_port+0x5c>
        n++;
 801b066:	88bb      	ldrh	r3, [r7, #4]
 801b068:	3301      	adds	r3, #1
 801b06a:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 801b06c:	88bb      	ldrh	r3, [r7, #4]
 801b06e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801b072:	d3d8      	bcc.n	801b026 <tcp_new_port+0xa>
          return 0;
 801b074:	2300      	movs	r3, #0
 801b076:	e00d      	b.n	801b094 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 801b078:	683b      	ldr	r3, [r7, #0]
 801b07a:	68db      	ldr	r3, [r3, #12]
 801b07c:	603b      	str	r3, [r7, #0]
 801b07e:	683b      	ldr	r3, [r7, #0]
 801b080:	2b00      	cmp	r3, #0
 801b082:	d1ea      	bne.n	801b05a <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801b084:	79fb      	ldrb	r3, [r7, #7]
 801b086:	3301      	adds	r3, #1
 801b088:	71fb      	strb	r3, [r7, #7]
 801b08a:	79fb      	ldrb	r3, [r7, #7]
 801b08c:	2b03      	cmp	r3, #3
 801b08e:	d9dd      	bls.n	801b04c <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 801b090:	4b03      	ldr	r3, [pc, #12]	; (801b0a0 <tcp_new_port+0x84>)
 801b092:	881b      	ldrh	r3, [r3, #0]
}
 801b094:	4618      	mov	r0, r3
 801b096:	370c      	adds	r7, #12
 801b098:	46bd      	mov	sp, r7
 801b09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b09e:	4770      	bx	lr
 801b0a0:	10000060 	.word	0x10000060
 801b0a4:	08030dec 	.word	0x08030dec

0801b0a8 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 801b0a8:	b580      	push	{r7, lr}
 801b0aa:	b08a      	sub	sp, #40	; 0x28
 801b0ac:	af00      	add	r7, sp, #0
 801b0ae:	60f8      	str	r0, [r7, #12]
 801b0b0:	60b9      	str	r1, [r7, #8]
 801b0b2:	603b      	str	r3, [r7, #0]
 801b0b4:	4613      	mov	r3, r2
 801b0b6:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 801b0b8:	2300      	movs	r3, #0
 801b0ba:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801b0bc:	68fb      	ldr	r3, [r7, #12]
 801b0be:	2b00      	cmp	r3, #0
 801b0c0:	d109      	bne.n	801b0d6 <tcp_connect+0x2e>
 801b0c2:	4b7d      	ldr	r3, [pc, #500]	; (801b2b8 <tcp_connect+0x210>)
 801b0c4:	f240 4235 	movw	r2, #1077	; 0x435
 801b0c8:	497c      	ldr	r1, [pc, #496]	; (801b2bc <tcp_connect+0x214>)
 801b0ca:	487d      	ldr	r0, [pc, #500]	; (801b2c0 <tcp_connect+0x218>)
 801b0cc:	f00b fbfe 	bl	80268cc <iprintf>
 801b0d0:	f06f 030f 	mvn.w	r3, #15
 801b0d4:	e0ec      	b.n	801b2b0 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801b0d6:	68bb      	ldr	r3, [r7, #8]
 801b0d8:	2b00      	cmp	r3, #0
 801b0da:	d109      	bne.n	801b0f0 <tcp_connect+0x48>
 801b0dc:	4b76      	ldr	r3, [pc, #472]	; (801b2b8 <tcp_connect+0x210>)
 801b0de:	f240 4236 	movw	r2, #1078	; 0x436
 801b0e2:	4978      	ldr	r1, [pc, #480]	; (801b2c4 <tcp_connect+0x21c>)
 801b0e4:	4876      	ldr	r0, [pc, #472]	; (801b2c0 <tcp_connect+0x218>)
 801b0e6:	f00b fbf1 	bl	80268cc <iprintf>
 801b0ea:	f06f 030f 	mvn.w	r3, #15
 801b0ee:	e0df      	b.n	801b2b0 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 801b0f0:	68fb      	ldr	r3, [r7, #12]
 801b0f2:	7d1b      	ldrb	r3, [r3, #20]
 801b0f4:	2b00      	cmp	r3, #0
 801b0f6:	d009      	beq.n	801b10c <tcp_connect+0x64>
 801b0f8:	4b6f      	ldr	r3, [pc, #444]	; (801b2b8 <tcp_connect+0x210>)
 801b0fa:	f44f 6287 	mov.w	r2, #1080	; 0x438
 801b0fe:	4972      	ldr	r1, [pc, #456]	; (801b2c8 <tcp_connect+0x220>)
 801b100:	486f      	ldr	r0, [pc, #444]	; (801b2c0 <tcp_connect+0x218>)
 801b102:	f00b fbe3 	bl	80268cc <iprintf>
 801b106:	f06f 0309 	mvn.w	r3, #9
 801b10a:	e0d1      	b.n	801b2b0 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 801b10c:	68bb      	ldr	r3, [r7, #8]
 801b10e:	2b00      	cmp	r3, #0
 801b110:	d002      	beq.n	801b118 <tcp_connect+0x70>
 801b112:	68bb      	ldr	r3, [r7, #8]
 801b114:	681b      	ldr	r3, [r3, #0]
 801b116:	e000      	b.n	801b11a <tcp_connect+0x72>
 801b118:	2300      	movs	r3, #0
 801b11a:	68fa      	ldr	r2, [r7, #12]
 801b11c:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 801b11e:	68fb      	ldr	r3, [r7, #12]
 801b120:	88fa      	ldrh	r2, [r7, #6]
 801b122:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801b124:	68fb      	ldr	r3, [r7, #12]
 801b126:	7a1b      	ldrb	r3, [r3, #8]
 801b128:	2b00      	cmp	r3, #0
 801b12a:	d006      	beq.n	801b13a <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 801b12c:	68fb      	ldr	r3, [r7, #12]
 801b12e:	7a1b      	ldrb	r3, [r3, #8]
 801b130:	4618      	mov	r0, r3
 801b132:	f7fe fbb3 	bl	801989c <netif_get_by_index>
 801b136:	6278      	str	r0, [r7, #36]	; 0x24
 801b138:	e005      	b.n	801b146 <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 801b13a:	68fb      	ldr	r3, [r7, #12]
 801b13c:	3304      	adds	r3, #4
 801b13e:	4618      	mov	r0, r3
 801b140:	f009 f99a 	bl	8024478 <ip4_route>
 801b144:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 801b146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b148:	2b00      	cmp	r3, #0
 801b14a:	d102      	bne.n	801b152 <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 801b14c:	f06f 0303 	mvn.w	r3, #3
 801b150:	e0ae      	b.n	801b2b0 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 801b152:	68fb      	ldr	r3, [r7, #12]
 801b154:	2b00      	cmp	r3, #0
 801b156:	d003      	beq.n	801b160 <tcp_connect+0xb8>
 801b158:	68fb      	ldr	r3, [r7, #12]
 801b15a:	681b      	ldr	r3, [r3, #0]
 801b15c:	2b00      	cmp	r3, #0
 801b15e:	d111      	bne.n	801b184 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 801b160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b162:	2b00      	cmp	r3, #0
 801b164:	d002      	beq.n	801b16c <tcp_connect+0xc4>
 801b166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b168:	3304      	adds	r3, #4
 801b16a:	e000      	b.n	801b16e <tcp_connect+0xc6>
 801b16c:	2300      	movs	r3, #0
 801b16e:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 801b170:	69fb      	ldr	r3, [r7, #28]
 801b172:	2b00      	cmp	r3, #0
 801b174:	d102      	bne.n	801b17c <tcp_connect+0xd4>
      return ERR_RTE;
 801b176:	f06f 0303 	mvn.w	r3, #3
 801b17a:	e099      	b.n	801b2b0 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801b17c:	69fb      	ldr	r3, [r7, #28]
 801b17e:	681a      	ldr	r2, [r3, #0]
 801b180:	68fb      	ldr	r3, [r7, #12]
 801b182:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 801b184:	68fb      	ldr	r3, [r7, #12]
 801b186:	8adb      	ldrh	r3, [r3, #22]
 801b188:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 801b18a:	68fb      	ldr	r3, [r7, #12]
 801b18c:	8adb      	ldrh	r3, [r3, #22]
 801b18e:	2b00      	cmp	r3, #0
 801b190:	d10c      	bne.n	801b1ac <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 801b192:	f7ff ff43 	bl	801b01c <tcp_new_port>
 801b196:	4603      	mov	r3, r0
 801b198:	461a      	mov	r2, r3
 801b19a:	68fb      	ldr	r3, [r7, #12]
 801b19c:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 801b19e:	68fb      	ldr	r3, [r7, #12]
 801b1a0:	8adb      	ldrh	r3, [r3, #22]
 801b1a2:	2b00      	cmp	r3, #0
 801b1a4:	d102      	bne.n	801b1ac <tcp_connect+0x104>
      return ERR_BUF;
 801b1a6:	f06f 0301 	mvn.w	r3, #1
 801b1aa:	e081      	b.n	801b2b0 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 801b1ac:	68f8      	ldr	r0, [r7, #12]
 801b1ae:	f001 f885 	bl	801c2bc <tcp_next_iss>
 801b1b2:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 801b1b4:	68fb      	ldr	r3, [r7, #12]
 801b1b6:	2200      	movs	r2, #0
 801b1b8:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 801b1ba:	68fb      	ldr	r3, [r7, #12]
 801b1bc:	697a      	ldr	r2, [r7, #20]
 801b1be:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 801b1c0:	697b      	ldr	r3, [r7, #20]
 801b1c2:	1e5a      	subs	r2, r3, #1
 801b1c4:	68fb      	ldr	r3, [r7, #12]
 801b1c6:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 801b1c8:	697b      	ldr	r3, [r7, #20]
 801b1ca:	1e5a      	subs	r2, r3, #1
 801b1cc:	68fb      	ldr	r3, [r7, #12]
 801b1ce:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 801b1d0:	697b      	ldr	r3, [r7, #20]
 801b1d2:	1e5a      	subs	r2, r3, #1
 801b1d4:	68fb      	ldr	r3, [r7, #12]
 801b1d6:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801b1d8:	68fb      	ldr	r3, [r7, #12]
 801b1da:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801b1de:	855a      	strh	r2, [r3, #42]	; 0x2a
 801b1e0:	68fb      	ldr	r3, [r7, #12]
 801b1e2:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801b1e4:	68fb      	ldr	r3, [r7, #12]
 801b1e6:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801b1e8:	68fb      	ldr	r3, [r7, #12]
 801b1ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801b1ec:	68fb      	ldr	r3, [r7, #12]
 801b1ee:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 801b1f0:	68fb      	ldr	r3, [r7, #12]
 801b1f2:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801b1f6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 801b1fa:	68fb      	ldr	r3, [r7, #12]
 801b1fc:	f44f 7206 	mov.w	r2, #536	; 0x218
 801b200:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 801b202:	68fb      	ldr	r3, [r7, #12]
 801b204:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 801b206:	68fb      	ldr	r3, [r7, #12]
 801b208:	3304      	adds	r3, #4
 801b20a:	461a      	mov	r2, r3
 801b20c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801b20e:	f001 f87b 	bl	801c308 <tcp_eff_send_mss_netif>
 801b212:	4603      	mov	r3, r0
 801b214:	461a      	mov	r2, r3
 801b216:	68fb      	ldr	r3, [r7, #12]
 801b218:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 801b21a:	68fb      	ldr	r3, [r7, #12]
 801b21c:	2201      	movs	r2, #1
 801b21e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 801b222:	68fb      	ldr	r3, [r7, #12]
 801b224:	683a      	ldr	r2, [r7, #0]
 801b226:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 801b22a:	2102      	movs	r1, #2
 801b22c:	68f8      	ldr	r0, [r7, #12]
 801b22e:	f004 fadf 	bl	801f7f0 <tcp_enqueue_flags>
 801b232:	4603      	mov	r3, r0
 801b234:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 801b236:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801b23a:	2b00      	cmp	r3, #0
 801b23c:	d136      	bne.n	801b2ac <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 801b23e:	68fb      	ldr	r3, [r7, #12]
 801b240:	2202      	movs	r2, #2
 801b242:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 801b244:	8b7b      	ldrh	r3, [r7, #26]
 801b246:	2b00      	cmp	r3, #0
 801b248:	d021      	beq.n	801b28e <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 801b24a:	4b20      	ldr	r3, [pc, #128]	; (801b2cc <tcp_connect+0x224>)
 801b24c:	681b      	ldr	r3, [r3, #0]
 801b24e:	68fa      	ldr	r2, [r7, #12]
 801b250:	429a      	cmp	r2, r3
 801b252:	d105      	bne.n	801b260 <tcp_connect+0x1b8>
 801b254:	4b1d      	ldr	r3, [pc, #116]	; (801b2cc <tcp_connect+0x224>)
 801b256:	681b      	ldr	r3, [r3, #0]
 801b258:	68db      	ldr	r3, [r3, #12]
 801b25a:	4a1c      	ldr	r2, [pc, #112]	; (801b2cc <tcp_connect+0x224>)
 801b25c:	6013      	str	r3, [r2, #0]
 801b25e:	e013      	b.n	801b288 <tcp_connect+0x1e0>
 801b260:	4b1a      	ldr	r3, [pc, #104]	; (801b2cc <tcp_connect+0x224>)
 801b262:	681b      	ldr	r3, [r3, #0]
 801b264:	623b      	str	r3, [r7, #32]
 801b266:	e00c      	b.n	801b282 <tcp_connect+0x1da>
 801b268:	6a3b      	ldr	r3, [r7, #32]
 801b26a:	68db      	ldr	r3, [r3, #12]
 801b26c:	68fa      	ldr	r2, [r7, #12]
 801b26e:	429a      	cmp	r2, r3
 801b270:	d104      	bne.n	801b27c <tcp_connect+0x1d4>
 801b272:	68fb      	ldr	r3, [r7, #12]
 801b274:	68da      	ldr	r2, [r3, #12]
 801b276:	6a3b      	ldr	r3, [r7, #32]
 801b278:	60da      	str	r2, [r3, #12]
 801b27a:	e005      	b.n	801b288 <tcp_connect+0x1e0>
 801b27c:	6a3b      	ldr	r3, [r7, #32]
 801b27e:	68db      	ldr	r3, [r3, #12]
 801b280:	623b      	str	r3, [r7, #32]
 801b282:	6a3b      	ldr	r3, [r7, #32]
 801b284:	2b00      	cmp	r3, #0
 801b286:	d1ef      	bne.n	801b268 <tcp_connect+0x1c0>
 801b288:	68fb      	ldr	r3, [r7, #12]
 801b28a:	2200      	movs	r2, #0
 801b28c:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 801b28e:	4b10      	ldr	r3, [pc, #64]	; (801b2d0 <tcp_connect+0x228>)
 801b290:	681a      	ldr	r2, [r3, #0]
 801b292:	68fb      	ldr	r3, [r7, #12]
 801b294:	60da      	str	r2, [r3, #12]
 801b296:	4a0e      	ldr	r2, [pc, #56]	; (801b2d0 <tcp_connect+0x228>)
 801b298:	68fb      	ldr	r3, [r7, #12]
 801b29a:	6013      	str	r3, [r2, #0]
 801b29c:	f005 fb0c 	bl	80208b8 <tcp_timer_needed>
 801b2a0:	4b0c      	ldr	r3, [pc, #48]	; (801b2d4 <tcp_connect+0x22c>)
 801b2a2:	2201      	movs	r2, #1
 801b2a4:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 801b2a6:	68f8      	ldr	r0, [r7, #12]
 801b2a8:	f004 fb90 	bl	801f9cc <tcp_output>
  }
  return ret;
 801b2ac:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 801b2b0:	4618      	mov	r0, r3
 801b2b2:	3728      	adds	r7, #40	; 0x28
 801b2b4:	46bd      	mov	sp, r7
 801b2b6:	bd80      	pop	{r7, pc}
 801b2b8:	0802d3c0 	.word	0x0802d3c0
 801b2bc:	0802d69c 	.word	0x0802d69c
 801b2c0:	0802d404 	.word	0x0802d404
 801b2c4:	0802d6b8 	.word	0x0802d6b8
 801b2c8:	0802d6d4 	.word	0x0802d6d4
 801b2cc:	2001c108 	.word	0x2001c108
 801b2d0:	2001c0fc 	.word	0x2001c0fc
 801b2d4:	2001c0f8 	.word	0x2001c0f8

0801b2d8 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 801b2d8:	b5b0      	push	{r4, r5, r7, lr}
 801b2da:	b090      	sub	sp, #64	; 0x40
 801b2dc:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 801b2de:	2300      	movs	r3, #0
 801b2e0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 801b2e4:	4b94      	ldr	r3, [pc, #592]	; (801b538 <tcp_slowtmr+0x260>)
 801b2e6:	681b      	ldr	r3, [r3, #0]
 801b2e8:	3301      	adds	r3, #1
 801b2ea:	4a93      	ldr	r2, [pc, #588]	; (801b538 <tcp_slowtmr+0x260>)
 801b2ec:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 801b2ee:	4b93      	ldr	r3, [pc, #588]	; (801b53c <tcp_slowtmr+0x264>)
 801b2f0:	781b      	ldrb	r3, [r3, #0]
 801b2f2:	3301      	adds	r3, #1
 801b2f4:	b2da      	uxtb	r2, r3
 801b2f6:	4b91      	ldr	r3, [pc, #580]	; (801b53c <tcp_slowtmr+0x264>)
 801b2f8:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 801b2fa:	2300      	movs	r3, #0
 801b2fc:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 801b2fe:	4b90      	ldr	r3, [pc, #576]	; (801b540 <tcp_slowtmr+0x268>)
 801b300:	681b      	ldr	r3, [r3, #0]
 801b302:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 801b304:	e29f      	b.n	801b846 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801b306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b308:	7d1b      	ldrb	r3, [r3, #20]
 801b30a:	2b00      	cmp	r3, #0
 801b30c:	d106      	bne.n	801b31c <tcp_slowtmr+0x44>
 801b30e:	4b8d      	ldr	r3, [pc, #564]	; (801b544 <tcp_slowtmr+0x26c>)
 801b310:	f240 42be 	movw	r2, #1214	; 0x4be
 801b314:	498c      	ldr	r1, [pc, #560]	; (801b548 <tcp_slowtmr+0x270>)
 801b316:	488d      	ldr	r0, [pc, #564]	; (801b54c <tcp_slowtmr+0x274>)
 801b318:	f00b fad8 	bl	80268cc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 801b31c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b31e:	7d1b      	ldrb	r3, [r3, #20]
 801b320:	2b01      	cmp	r3, #1
 801b322:	d106      	bne.n	801b332 <tcp_slowtmr+0x5a>
 801b324:	4b87      	ldr	r3, [pc, #540]	; (801b544 <tcp_slowtmr+0x26c>)
 801b326:	f240 42bf 	movw	r2, #1215	; 0x4bf
 801b32a:	4989      	ldr	r1, [pc, #548]	; (801b550 <tcp_slowtmr+0x278>)
 801b32c:	4887      	ldr	r0, [pc, #540]	; (801b54c <tcp_slowtmr+0x274>)
 801b32e:	f00b facd 	bl	80268cc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801b332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b334:	7d1b      	ldrb	r3, [r3, #20]
 801b336:	2b0a      	cmp	r3, #10
 801b338:	d106      	bne.n	801b348 <tcp_slowtmr+0x70>
 801b33a:	4b82      	ldr	r3, [pc, #520]	; (801b544 <tcp_slowtmr+0x26c>)
 801b33c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 801b340:	4984      	ldr	r1, [pc, #528]	; (801b554 <tcp_slowtmr+0x27c>)
 801b342:	4882      	ldr	r0, [pc, #520]	; (801b54c <tcp_slowtmr+0x274>)
 801b344:	f00b fac2 	bl	80268cc <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 801b348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b34a:	7f9a      	ldrb	r2, [r3, #30]
 801b34c:	4b7b      	ldr	r3, [pc, #492]	; (801b53c <tcp_slowtmr+0x264>)
 801b34e:	781b      	ldrb	r3, [r3, #0]
 801b350:	429a      	cmp	r2, r3
 801b352:	d105      	bne.n	801b360 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 801b354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b356:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801b358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b35a:	68db      	ldr	r3, [r3, #12]
 801b35c:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 801b35e:	e272      	b.n	801b846 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 801b360:	4b76      	ldr	r3, [pc, #472]	; (801b53c <tcp_slowtmr+0x264>)
 801b362:	781a      	ldrb	r2, [r3, #0]
 801b364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b366:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 801b368:	2300      	movs	r3, #0
 801b36a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 801b36e:	2300      	movs	r3, #0
 801b370:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801b374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b376:	7d1b      	ldrb	r3, [r3, #20]
 801b378:	2b02      	cmp	r3, #2
 801b37a:	d10a      	bne.n	801b392 <tcp_slowtmr+0xba>
 801b37c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b37e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801b382:	2b05      	cmp	r3, #5
 801b384:	d905      	bls.n	801b392 <tcp_slowtmr+0xba>
      ++pcb_remove;
 801b386:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b38a:	3301      	adds	r3, #1
 801b38c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801b390:	e11e      	b.n	801b5d0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 801b392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b394:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801b398:	2b0b      	cmp	r3, #11
 801b39a:	d905      	bls.n	801b3a8 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 801b39c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b3a0:	3301      	adds	r3, #1
 801b3a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801b3a6:	e113      	b.n	801b5d0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 801b3a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b3aa:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801b3ae:	2b00      	cmp	r3, #0
 801b3b0:	d075      	beq.n	801b49e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 801b3b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b3b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b3b6:	2b00      	cmp	r3, #0
 801b3b8:	d006      	beq.n	801b3c8 <tcp_slowtmr+0xf0>
 801b3ba:	4b62      	ldr	r3, [pc, #392]	; (801b544 <tcp_slowtmr+0x26c>)
 801b3bc:	f240 42d4 	movw	r2, #1236	; 0x4d4
 801b3c0:	4965      	ldr	r1, [pc, #404]	; (801b558 <tcp_slowtmr+0x280>)
 801b3c2:	4862      	ldr	r0, [pc, #392]	; (801b54c <tcp_slowtmr+0x274>)
 801b3c4:	f00b fa82 	bl	80268cc <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 801b3c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b3ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b3cc:	2b00      	cmp	r3, #0
 801b3ce:	d106      	bne.n	801b3de <tcp_slowtmr+0x106>
 801b3d0:	4b5c      	ldr	r3, [pc, #368]	; (801b544 <tcp_slowtmr+0x26c>)
 801b3d2:	f240 42d5 	movw	r2, #1237	; 0x4d5
 801b3d6:	4961      	ldr	r1, [pc, #388]	; (801b55c <tcp_slowtmr+0x284>)
 801b3d8:	485c      	ldr	r0, [pc, #368]	; (801b54c <tcp_slowtmr+0x274>)
 801b3da:	f00b fa77 	bl	80268cc <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 801b3de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b3e0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801b3e4:	2b0b      	cmp	r3, #11
 801b3e6:	d905      	bls.n	801b3f4 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 801b3e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b3ec:	3301      	adds	r3, #1
 801b3ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801b3f2:	e0ed      	b.n	801b5d0 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 801b3f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b3f6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801b3fa:	3b01      	subs	r3, #1
 801b3fc:	4a58      	ldr	r2, [pc, #352]	; (801b560 <tcp_slowtmr+0x288>)
 801b3fe:	5cd3      	ldrb	r3, [r2, r3]
 801b400:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 801b402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b404:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801b408:	7c7a      	ldrb	r2, [r7, #17]
 801b40a:	429a      	cmp	r2, r3
 801b40c:	d907      	bls.n	801b41e <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 801b40e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b410:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801b414:	3301      	adds	r3, #1
 801b416:	b2da      	uxtb	r2, r3
 801b418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b41a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 801b41e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b420:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801b424:	7c7a      	ldrb	r2, [r7, #17]
 801b426:	429a      	cmp	r2, r3
 801b428:	f200 80d2 	bhi.w	801b5d0 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 801b42c:	2301      	movs	r3, #1
 801b42e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 801b430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b432:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801b436:	2b00      	cmp	r3, #0
 801b438:	d108      	bne.n	801b44c <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 801b43a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801b43c:	f005 f96e 	bl	802071c <tcp_zero_window_probe>
 801b440:	4603      	mov	r3, r0
 801b442:	2b00      	cmp	r3, #0
 801b444:	d014      	beq.n	801b470 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 801b446:	2300      	movs	r3, #0
 801b448:	623b      	str	r3, [r7, #32]
 801b44a:	e011      	b.n	801b470 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 801b44c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b44e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801b452:	4619      	mov	r1, r3
 801b454:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801b456:	f004 f833 	bl	801f4c0 <tcp_split_unsent_seg>
 801b45a:	4603      	mov	r3, r0
 801b45c:	2b00      	cmp	r3, #0
 801b45e:	d107      	bne.n	801b470 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 801b460:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801b462:	f004 fab3 	bl	801f9cc <tcp_output>
 801b466:	4603      	mov	r3, r0
 801b468:	2b00      	cmp	r3, #0
 801b46a:	d101      	bne.n	801b470 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 801b46c:	2300      	movs	r3, #0
 801b46e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 801b470:	6a3b      	ldr	r3, [r7, #32]
 801b472:	2b00      	cmp	r3, #0
 801b474:	f000 80ac 	beq.w	801b5d0 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 801b478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b47a:	2200      	movs	r2, #0
 801b47c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801b480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b482:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801b486:	2b06      	cmp	r3, #6
 801b488:	f200 80a2 	bhi.w	801b5d0 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 801b48c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b48e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801b492:	3301      	adds	r3, #1
 801b494:	b2da      	uxtb	r2, r3
 801b496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b498:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 801b49c:	e098      	b.n	801b5d0 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 801b49e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b4a0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801b4a4:	2b00      	cmp	r3, #0
 801b4a6:	db0f      	blt.n	801b4c8 <tcp_slowtmr+0x1f0>
 801b4a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b4aa:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801b4ae:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801b4b2:	4293      	cmp	r3, r2
 801b4b4:	d008      	beq.n	801b4c8 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 801b4b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b4b8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801b4bc:	b29b      	uxth	r3, r3
 801b4be:	3301      	adds	r3, #1
 801b4c0:	b29b      	uxth	r3, r3
 801b4c2:	b21a      	sxth	r2, r3
 801b4c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b4c6:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 801b4c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b4ca:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 801b4ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b4d0:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 801b4d4:	429a      	cmp	r2, r3
 801b4d6:	db7b      	blt.n	801b5d0 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 801b4d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801b4da:	f004 fd69 	bl	801ffb0 <tcp_rexmit_rto_prepare>
 801b4de:	4603      	mov	r3, r0
 801b4e0:	2b00      	cmp	r3, #0
 801b4e2:	d007      	beq.n	801b4f4 <tcp_slowtmr+0x21c>
 801b4e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b4e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b4e8:	2b00      	cmp	r3, #0
 801b4ea:	d171      	bne.n	801b5d0 <tcp_slowtmr+0x2f8>
 801b4ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b4ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b4f0:	2b00      	cmp	r3, #0
 801b4f2:	d06d      	beq.n	801b5d0 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 801b4f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b4f6:	7d1b      	ldrb	r3, [r3, #20]
 801b4f8:	2b02      	cmp	r3, #2
 801b4fa:	d03a      	beq.n	801b572 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 801b4fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b4fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801b502:	2b0c      	cmp	r3, #12
 801b504:	bf28      	it	cs
 801b506:	230c      	movcs	r3, #12
 801b508:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 801b50a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b50c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801b510:	10db      	asrs	r3, r3, #3
 801b512:	b21b      	sxth	r3, r3
 801b514:	461a      	mov	r2, r3
 801b516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b518:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801b51c:	4413      	add	r3, r2
 801b51e:	7efa      	ldrb	r2, [r7, #27]
 801b520:	4910      	ldr	r1, [pc, #64]	; (801b564 <tcp_slowtmr+0x28c>)
 801b522:	5c8a      	ldrb	r2, [r1, r2]
 801b524:	4093      	lsls	r3, r2
 801b526:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 801b528:	697b      	ldr	r3, [r7, #20]
 801b52a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 801b52e:	4293      	cmp	r3, r2
 801b530:	dc1a      	bgt.n	801b568 <tcp_slowtmr+0x290>
 801b532:	697b      	ldr	r3, [r7, #20]
 801b534:	b21a      	sxth	r2, r3
 801b536:	e019      	b.n	801b56c <tcp_slowtmr+0x294>
 801b538:	2001c100 	.word	0x2001c100
 801b53c:	20013c2a 	.word	0x20013c2a
 801b540:	2001c0fc 	.word	0x2001c0fc
 801b544:	0802d3c0 	.word	0x0802d3c0
 801b548:	0802d704 	.word	0x0802d704
 801b54c:	0802d404 	.word	0x0802d404
 801b550:	0802d730 	.word	0x0802d730
 801b554:	0802d75c 	.word	0x0802d75c
 801b558:	0802d78c 	.word	0x0802d78c
 801b55c:	0802d7c0 	.word	0x0802d7c0
 801b560:	08030de4 	.word	0x08030de4
 801b564:	08030dd4 	.word	0x08030dd4
 801b568:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801b56c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b56e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 801b572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b574:	2200      	movs	r2, #0
 801b576:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 801b578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b57a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801b57e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b580:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801b584:	4293      	cmp	r3, r2
 801b586:	bf28      	it	cs
 801b588:	4613      	movcs	r3, r2
 801b58a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 801b58c:	8a7b      	ldrh	r3, [r7, #18]
 801b58e:	085b      	lsrs	r3, r3, #1
 801b590:	b29a      	uxth	r2, r3
 801b592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b594:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 801b598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b59a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801b59e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b5a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b5a2:	005b      	lsls	r3, r3, #1
 801b5a4:	b29b      	uxth	r3, r3
 801b5a6:	429a      	cmp	r2, r3
 801b5a8:	d206      	bcs.n	801b5b8 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 801b5aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b5ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b5ae:	005b      	lsls	r3, r3, #1
 801b5b0:	b29a      	uxth	r2, r3
 801b5b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b5b4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 801b5b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b5ba:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 801b5bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b5be:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 801b5c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b5c4:	2200      	movs	r2, #0
 801b5c6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 801b5ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801b5cc:	f004 fd60 	bl	8020090 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 801b5d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b5d2:	7d1b      	ldrb	r3, [r3, #20]
 801b5d4:	2b06      	cmp	r3, #6
 801b5d6:	d111      	bne.n	801b5fc <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 801b5d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b5da:	8b5b      	ldrh	r3, [r3, #26]
 801b5dc:	f003 0310 	and.w	r3, r3, #16
 801b5e0:	2b00      	cmp	r3, #0
 801b5e2:	d00b      	beq.n	801b5fc <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 801b5e4:	4b9d      	ldr	r3, [pc, #628]	; (801b85c <tcp_slowtmr+0x584>)
 801b5e6:	681a      	ldr	r2, [r3, #0]
 801b5e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b5ea:	6a1b      	ldr	r3, [r3, #32]
 801b5ec:	1ad3      	subs	r3, r2, r3
 801b5ee:	2b28      	cmp	r3, #40	; 0x28
 801b5f0:	d904      	bls.n	801b5fc <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 801b5f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b5f6:	3301      	adds	r3, #1
 801b5f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801b5fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b5fe:	7a5b      	ldrb	r3, [r3, #9]
 801b600:	f003 0308 	and.w	r3, r3, #8
 801b604:	2b00      	cmp	r3, #0
 801b606:	d04c      	beq.n	801b6a2 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 801b608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b60a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801b60c:	2b04      	cmp	r3, #4
 801b60e:	d003      	beq.n	801b618 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 801b610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b612:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 801b614:	2b07      	cmp	r3, #7
 801b616:	d144      	bne.n	801b6a2 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801b618:	4b90      	ldr	r3, [pc, #576]	; (801b85c <tcp_slowtmr+0x584>)
 801b61a:	681a      	ldr	r2, [r3, #0]
 801b61c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b61e:	6a1b      	ldr	r3, [r3, #32]
 801b620:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801b622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b624:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b628:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 801b62c:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 801b630:	498b      	ldr	r1, [pc, #556]	; (801b860 <tcp_slowtmr+0x588>)
 801b632:	fba1 1303 	umull	r1, r3, r1, r3
 801b636:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801b638:	429a      	cmp	r2, r3
 801b63a:	d90a      	bls.n	801b652 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 801b63c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b640:	3301      	adds	r3, #1
 801b642:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 801b646:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801b64a:	3301      	adds	r3, #1
 801b64c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801b650:	e027      	b.n	801b6a2 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801b652:	4b82      	ldr	r3, [pc, #520]	; (801b85c <tcp_slowtmr+0x584>)
 801b654:	681a      	ldr	r2, [r3, #0]
 801b656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b658:	6a1b      	ldr	r3, [r3, #32]
 801b65a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 801b65c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b65e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 801b662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b664:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 801b668:	4618      	mov	r0, r3
 801b66a:	4b7e      	ldr	r3, [pc, #504]	; (801b864 <tcp_slowtmr+0x58c>)
 801b66c:	fb00 f303 	mul.w	r3, r0, r3
 801b670:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 801b672:	497b      	ldr	r1, [pc, #492]	; (801b860 <tcp_slowtmr+0x588>)
 801b674:	fba1 1303 	umull	r1, r3, r1, r3
 801b678:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801b67a:	429a      	cmp	r2, r3
 801b67c:	d911      	bls.n	801b6a2 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 801b67e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801b680:	f005 f80c 	bl	802069c <tcp_keepalive>
 801b684:	4603      	mov	r3, r0
 801b686:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 801b68a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 801b68e:	2b00      	cmp	r3, #0
 801b690:	d107      	bne.n	801b6a2 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 801b692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b694:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 801b698:	3301      	adds	r3, #1
 801b69a:	b2da      	uxtb	r2, r3
 801b69c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b69e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 801b6a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b6a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b6a6:	2b00      	cmp	r3, #0
 801b6a8:	d011      	beq.n	801b6ce <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 801b6aa:	4b6c      	ldr	r3, [pc, #432]	; (801b85c <tcp_slowtmr+0x584>)
 801b6ac:	681a      	ldr	r2, [r3, #0]
 801b6ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b6b0:	6a1b      	ldr	r3, [r3, #32]
 801b6b2:	1ad2      	subs	r2, r2, r3
 801b6b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b6b6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 801b6ba:	4619      	mov	r1, r3
 801b6bc:	460b      	mov	r3, r1
 801b6be:	005b      	lsls	r3, r3, #1
 801b6c0:	440b      	add	r3, r1
 801b6c2:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 801b6c4:	429a      	cmp	r2, r3
 801b6c6:	d302      	bcc.n	801b6ce <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 801b6c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801b6ca:	f000 fec7 	bl	801c45c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 801b6ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b6d0:	7d1b      	ldrb	r3, [r3, #20]
 801b6d2:	2b03      	cmp	r3, #3
 801b6d4:	d10b      	bne.n	801b6ee <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801b6d6:	4b61      	ldr	r3, [pc, #388]	; (801b85c <tcp_slowtmr+0x584>)
 801b6d8:	681a      	ldr	r2, [r3, #0]
 801b6da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b6dc:	6a1b      	ldr	r3, [r3, #32]
 801b6de:	1ad3      	subs	r3, r2, r3
 801b6e0:	2b28      	cmp	r3, #40	; 0x28
 801b6e2:	d904      	bls.n	801b6ee <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 801b6e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b6e8:	3301      	adds	r3, #1
 801b6ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 801b6ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b6f0:	7d1b      	ldrb	r3, [r3, #20]
 801b6f2:	2b09      	cmp	r3, #9
 801b6f4:	d10b      	bne.n	801b70e <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801b6f6:	4b59      	ldr	r3, [pc, #356]	; (801b85c <tcp_slowtmr+0x584>)
 801b6f8:	681a      	ldr	r2, [r3, #0]
 801b6fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b6fc:	6a1b      	ldr	r3, [r3, #32]
 801b6fe:	1ad3      	subs	r3, r2, r3
 801b700:	2bf0      	cmp	r3, #240	; 0xf0
 801b702:	d904      	bls.n	801b70e <tcp_slowtmr+0x436>
        ++pcb_remove;
 801b704:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b708:	3301      	adds	r3, #1
 801b70a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801b70e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b712:	2b00      	cmp	r3, #0
 801b714:	d060      	beq.n	801b7d8 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 801b716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b718:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b71c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 801b71e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801b720:	f000 fce8 	bl	801c0f4 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 801b724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b726:	2b00      	cmp	r3, #0
 801b728:	d010      	beq.n	801b74c <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801b72a:	4b4f      	ldr	r3, [pc, #316]	; (801b868 <tcp_slowtmr+0x590>)
 801b72c:	681b      	ldr	r3, [r3, #0]
 801b72e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b730:	429a      	cmp	r2, r3
 801b732:	d106      	bne.n	801b742 <tcp_slowtmr+0x46a>
 801b734:	4b4d      	ldr	r3, [pc, #308]	; (801b86c <tcp_slowtmr+0x594>)
 801b736:	f240 526d 	movw	r2, #1389	; 0x56d
 801b73a:	494d      	ldr	r1, [pc, #308]	; (801b870 <tcp_slowtmr+0x598>)
 801b73c:	484d      	ldr	r0, [pc, #308]	; (801b874 <tcp_slowtmr+0x59c>)
 801b73e:	f00b f8c5 	bl	80268cc <iprintf>
        prev->next = pcb->next;
 801b742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b744:	68da      	ldr	r2, [r3, #12]
 801b746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b748:	60da      	str	r2, [r3, #12]
 801b74a:	e00f      	b.n	801b76c <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 801b74c:	4b46      	ldr	r3, [pc, #280]	; (801b868 <tcp_slowtmr+0x590>)
 801b74e:	681b      	ldr	r3, [r3, #0]
 801b750:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b752:	429a      	cmp	r2, r3
 801b754:	d006      	beq.n	801b764 <tcp_slowtmr+0x48c>
 801b756:	4b45      	ldr	r3, [pc, #276]	; (801b86c <tcp_slowtmr+0x594>)
 801b758:	f240 5271 	movw	r2, #1393	; 0x571
 801b75c:	4946      	ldr	r1, [pc, #280]	; (801b878 <tcp_slowtmr+0x5a0>)
 801b75e:	4845      	ldr	r0, [pc, #276]	; (801b874 <tcp_slowtmr+0x59c>)
 801b760:	f00b f8b4 	bl	80268cc <iprintf>
        tcp_active_pcbs = pcb->next;
 801b764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b766:	68db      	ldr	r3, [r3, #12]
 801b768:	4a3f      	ldr	r2, [pc, #252]	; (801b868 <tcp_slowtmr+0x590>)
 801b76a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 801b76c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801b770:	2b00      	cmp	r3, #0
 801b772:	d013      	beq.n	801b79c <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801b774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b776:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801b778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b77a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801b77c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 801b77e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b780:	3304      	adds	r3, #4
 801b782:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b784:	8ad2      	ldrh	r2, [r2, #22]
 801b786:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801b788:	8b09      	ldrh	r1, [r1, #24]
 801b78a:	9102      	str	r1, [sp, #8]
 801b78c:	9201      	str	r2, [sp, #4]
 801b78e:	9300      	str	r3, [sp, #0]
 801b790:	462b      	mov	r3, r5
 801b792:	4622      	mov	r2, r4
 801b794:	4601      	mov	r1, r0
 801b796:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801b798:	f004 fecc 	bl	8020534 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 801b79c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b79e:	691b      	ldr	r3, [r3, #16]
 801b7a0:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 801b7a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b7a4:	7d1b      	ldrb	r3, [r3, #20]
 801b7a6:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 801b7a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b7aa:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 801b7ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b7ae:	68db      	ldr	r3, [r3, #12]
 801b7b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 801b7b2:	6838      	ldr	r0, [r7, #0]
 801b7b4:	f7fe ff20 	bl	801a5f8 <tcp_free>

      tcp_active_pcbs_changed = 0;
 801b7b8:	4b30      	ldr	r3, [pc, #192]	; (801b87c <tcp_slowtmr+0x5a4>)
 801b7ba:	2200      	movs	r2, #0
 801b7bc:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 801b7be:	68fb      	ldr	r3, [r7, #12]
 801b7c0:	2b00      	cmp	r3, #0
 801b7c2:	d004      	beq.n	801b7ce <tcp_slowtmr+0x4f6>
 801b7c4:	68fb      	ldr	r3, [r7, #12]
 801b7c6:	f06f 010c 	mvn.w	r1, #12
 801b7ca:	68b8      	ldr	r0, [r7, #8]
 801b7cc:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 801b7ce:	4b2b      	ldr	r3, [pc, #172]	; (801b87c <tcp_slowtmr+0x5a4>)
 801b7d0:	781b      	ldrb	r3, [r3, #0]
 801b7d2:	2b00      	cmp	r3, #0
 801b7d4:	d037      	beq.n	801b846 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 801b7d6:	e590      	b.n	801b2fa <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 801b7d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b7da:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801b7dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b7de:	68db      	ldr	r3, [r3, #12]
 801b7e0:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 801b7e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b7e4:	7f1b      	ldrb	r3, [r3, #28]
 801b7e6:	3301      	adds	r3, #1
 801b7e8:	b2da      	uxtb	r2, r3
 801b7ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b7ec:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 801b7ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b7f0:	7f1a      	ldrb	r2, [r3, #28]
 801b7f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b7f4:	7f5b      	ldrb	r3, [r3, #29]
 801b7f6:	429a      	cmp	r2, r3
 801b7f8:	d325      	bcc.n	801b846 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 801b7fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b7fc:	2200      	movs	r2, #0
 801b7fe:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 801b800:	4b1e      	ldr	r3, [pc, #120]	; (801b87c <tcp_slowtmr+0x5a4>)
 801b802:	2200      	movs	r2, #0
 801b804:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 801b806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b808:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b80c:	2b00      	cmp	r3, #0
 801b80e:	d00b      	beq.n	801b828 <tcp_slowtmr+0x550>
 801b810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b812:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b816:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801b818:	6912      	ldr	r2, [r2, #16]
 801b81a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801b81c:	4610      	mov	r0, r2
 801b81e:	4798      	blx	r3
 801b820:	4603      	mov	r3, r0
 801b822:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801b826:	e002      	b.n	801b82e <tcp_slowtmr+0x556>
 801b828:	2300      	movs	r3, #0
 801b82a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 801b82e:	4b13      	ldr	r3, [pc, #76]	; (801b87c <tcp_slowtmr+0x5a4>)
 801b830:	781b      	ldrb	r3, [r3, #0]
 801b832:	2b00      	cmp	r3, #0
 801b834:	d000      	beq.n	801b838 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 801b836:	e560      	b.n	801b2fa <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 801b838:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 801b83c:	2b00      	cmp	r3, #0
 801b83e:	d102      	bne.n	801b846 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 801b840:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801b842:	f004 f8c3 	bl	801f9cc <tcp_output>
  while (pcb != NULL) {
 801b846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b848:	2b00      	cmp	r3, #0
 801b84a:	f47f ad5c 	bne.w	801b306 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 801b84e:	2300      	movs	r3, #0
 801b850:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 801b852:	4b0b      	ldr	r3, [pc, #44]	; (801b880 <tcp_slowtmr+0x5a8>)
 801b854:	681b      	ldr	r3, [r3, #0]
 801b856:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 801b858:	e067      	b.n	801b92a <tcp_slowtmr+0x652>
 801b85a:	bf00      	nop
 801b85c:	2001c100 	.word	0x2001c100
 801b860:	10624dd3 	.word	0x10624dd3
 801b864:	000124f8 	.word	0x000124f8
 801b868:	2001c0fc 	.word	0x2001c0fc
 801b86c:	0802d3c0 	.word	0x0802d3c0
 801b870:	0802d7f8 	.word	0x0802d7f8
 801b874:	0802d404 	.word	0x0802d404
 801b878:	0802d824 	.word	0x0802d824
 801b87c:	2001c0f8 	.word	0x2001c0f8
 801b880:	2001c10c 	.word	0x2001c10c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801b884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b886:	7d1b      	ldrb	r3, [r3, #20]
 801b888:	2b0a      	cmp	r3, #10
 801b88a:	d006      	beq.n	801b89a <tcp_slowtmr+0x5c2>
 801b88c:	4b2b      	ldr	r3, [pc, #172]	; (801b93c <tcp_slowtmr+0x664>)
 801b88e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 801b892:	492b      	ldr	r1, [pc, #172]	; (801b940 <tcp_slowtmr+0x668>)
 801b894:	482b      	ldr	r0, [pc, #172]	; (801b944 <tcp_slowtmr+0x66c>)
 801b896:	f00b f819 	bl	80268cc <iprintf>
    pcb_remove = 0;
 801b89a:	2300      	movs	r3, #0
 801b89c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801b8a0:	4b29      	ldr	r3, [pc, #164]	; (801b948 <tcp_slowtmr+0x670>)
 801b8a2:	681a      	ldr	r2, [r3, #0]
 801b8a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b8a6:	6a1b      	ldr	r3, [r3, #32]
 801b8a8:	1ad3      	subs	r3, r2, r3
 801b8aa:	2bf0      	cmp	r3, #240	; 0xf0
 801b8ac:	d904      	bls.n	801b8b8 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 801b8ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b8b2:	3301      	adds	r3, #1
 801b8b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801b8b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b8bc:	2b00      	cmp	r3, #0
 801b8be:	d02f      	beq.n	801b920 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 801b8c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801b8c2:	f000 fc17 	bl	801c0f4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 801b8c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b8c8:	2b00      	cmp	r3, #0
 801b8ca:	d010      	beq.n	801b8ee <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 801b8cc:	4b1f      	ldr	r3, [pc, #124]	; (801b94c <tcp_slowtmr+0x674>)
 801b8ce:	681b      	ldr	r3, [r3, #0]
 801b8d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b8d2:	429a      	cmp	r2, r3
 801b8d4:	d106      	bne.n	801b8e4 <tcp_slowtmr+0x60c>
 801b8d6:	4b19      	ldr	r3, [pc, #100]	; (801b93c <tcp_slowtmr+0x664>)
 801b8d8:	f240 52af 	movw	r2, #1455	; 0x5af
 801b8dc:	491c      	ldr	r1, [pc, #112]	; (801b950 <tcp_slowtmr+0x678>)
 801b8de:	4819      	ldr	r0, [pc, #100]	; (801b944 <tcp_slowtmr+0x66c>)
 801b8e0:	f00a fff4 	bl	80268cc <iprintf>
        prev->next = pcb->next;
 801b8e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b8e6:	68da      	ldr	r2, [r3, #12]
 801b8e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b8ea:	60da      	str	r2, [r3, #12]
 801b8ec:	e00f      	b.n	801b90e <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801b8ee:	4b17      	ldr	r3, [pc, #92]	; (801b94c <tcp_slowtmr+0x674>)
 801b8f0:	681b      	ldr	r3, [r3, #0]
 801b8f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b8f4:	429a      	cmp	r2, r3
 801b8f6:	d006      	beq.n	801b906 <tcp_slowtmr+0x62e>
 801b8f8:	4b10      	ldr	r3, [pc, #64]	; (801b93c <tcp_slowtmr+0x664>)
 801b8fa:	f240 52b3 	movw	r2, #1459	; 0x5b3
 801b8fe:	4915      	ldr	r1, [pc, #84]	; (801b954 <tcp_slowtmr+0x67c>)
 801b900:	4810      	ldr	r0, [pc, #64]	; (801b944 <tcp_slowtmr+0x66c>)
 801b902:	f00a ffe3 	bl	80268cc <iprintf>
        tcp_tw_pcbs = pcb->next;
 801b906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b908:	68db      	ldr	r3, [r3, #12]
 801b90a:	4a10      	ldr	r2, [pc, #64]	; (801b94c <tcp_slowtmr+0x674>)
 801b90c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 801b90e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b910:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 801b912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b914:	68db      	ldr	r3, [r3, #12]
 801b916:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 801b918:	69f8      	ldr	r0, [r7, #28]
 801b91a:	f7fe fe6d 	bl	801a5f8 <tcp_free>
 801b91e:	e004      	b.n	801b92a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 801b920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b922:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801b924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b926:	68db      	ldr	r3, [r3, #12]
 801b928:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 801b92a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b92c:	2b00      	cmp	r3, #0
 801b92e:	d1a9      	bne.n	801b884 <tcp_slowtmr+0x5ac>
    }
  }
}
 801b930:	bf00      	nop
 801b932:	bf00      	nop
 801b934:	3730      	adds	r7, #48	; 0x30
 801b936:	46bd      	mov	sp, r7
 801b938:	bdb0      	pop	{r4, r5, r7, pc}
 801b93a:	bf00      	nop
 801b93c:	0802d3c0 	.word	0x0802d3c0
 801b940:	0802d850 	.word	0x0802d850
 801b944:	0802d404 	.word	0x0802d404
 801b948:	2001c100 	.word	0x2001c100
 801b94c:	2001c10c 	.word	0x2001c10c
 801b950:	0802d880 	.word	0x0802d880
 801b954:	0802d8a8 	.word	0x0802d8a8

0801b958 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 801b958:	b580      	push	{r7, lr}
 801b95a:	b082      	sub	sp, #8
 801b95c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801b95e:	4b2d      	ldr	r3, [pc, #180]	; (801ba14 <tcp_fasttmr+0xbc>)
 801b960:	781b      	ldrb	r3, [r3, #0]
 801b962:	3301      	adds	r3, #1
 801b964:	b2da      	uxtb	r2, r3
 801b966:	4b2b      	ldr	r3, [pc, #172]	; (801ba14 <tcp_fasttmr+0xbc>)
 801b968:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 801b96a:	4b2b      	ldr	r3, [pc, #172]	; (801ba18 <tcp_fasttmr+0xc0>)
 801b96c:	681b      	ldr	r3, [r3, #0]
 801b96e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801b970:	e048      	b.n	801ba04 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801b972:	687b      	ldr	r3, [r7, #4]
 801b974:	7f9a      	ldrb	r2, [r3, #30]
 801b976:	4b27      	ldr	r3, [pc, #156]	; (801ba14 <tcp_fasttmr+0xbc>)
 801b978:	781b      	ldrb	r3, [r3, #0]
 801b97a:	429a      	cmp	r2, r3
 801b97c:	d03f      	beq.n	801b9fe <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 801b97e:	4b25      	ldr	r3, [pc, #148]	; (801ba14 <tcp_fasttmr+0xbc>)
 801b980:	781a      	ldrb	r2, [r3, #0]
 801b982:	687b      	ldr	r3, [r7, #4]
 801b984:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 801b986:	687b      	ldr	r3, [r7, #4]
 801b988:	8b5b      	ldrh	r3, [r3, #26]
 801b98a:	f003 0301 	and.w	r3, r3, #1
 801b98e:	2b00      	cmp	r3, #0
 801b990:	d010      	beq.n	801b9b4 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 801b992:	687b      	ldr	r3, [r7, #4]
 801b994:	8b5b      	ldrh	r3, [r3, #26]
 801b996:	f043 0302 	orr.w	r3, r3, #2
 801b99a:	b29a      	uxth	r2, r3
 801b99c:	687b      	ldr	r3, [r7, #4]
 801b99e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 801b9a0:	6878      	ldr	r0, [r7, #4]
 801b9a2:	f004 f813 	bl	801f9cc <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801b9a6:	687b      	ldr	r3, [r7, #4]
 801b9a8:	8b5b      	ldrh	r3, [r3, #26]
 801b9aa:	f023 0303 	bic.w	r3, r3, #3
 801b9ae:	b29a      	uxth	r2, r3
 801b9b0:	687b      	ldr	r3, [r7, #4]
 801b9b2:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 801b9b4:	687b      	ldr	r3, [r7, #4]
 801b9b6:	8b5b      	ldrh	r3, [r3, #26]
 801b9b8:	f003 0308 	and.w	r3, r3, #8
 801b9bc:	2b00      	cmp	r3, #0
 801b9be:	d009      	beq.n	801b9d4 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 801b9c0:	687b      	ldr	r3, [r7, #4]
 801b9c2:	8b5b      	ldrh	r3, [r3, #26]
 801b9c4:	f023 0308 	bic.w	r3, r3, #8
 801b9c8:	b29a      	uxth	r2, r3
 801b9ca:	687b      	ldr	r3, [r7, #4]
 801b9cc:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 801b9ce:	6878      	ldr	r0, [r7, #4]
 801b9d0:	f7fe ffa6 	bl	801a920 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 801b9d4:	687b      	ldr	r3, [r7, #4]
 801b9d6:	68db      	ldr	r3, [r3, #12]
 801b9d8:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 801b9da:	687b      	ldr	r3, [r7, #4]
 801b9dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801b9de:	2b00      	cmp	r3, #0
 801b9e0:	d00a      	beq.n	801b9f8 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 801b9e2:	4b0e      	ldr	r3, [pc, #56]	; (801ba1c <tcp_fasttmr+0xc4>)
 801b9e4:	2200      	movs	r2, #0
 801b9e6:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 801b9e8:	6878      	ldr	r0, [r7, #4]
 801b9ea:	f000 f819 	bl	801ba20 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801b9ee:	4b0b      	ldr	r3, [pc, #44]	; (801ba1c <tcp_fasttmr+0xc4>)
 801b9f0:	781b      	ldrb	r3, [r3, #0]
 801b9f2:	2b00      	cmp	r3, #0
 801b9f4:	d000      	beq.n	801b9f8 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 801b9f6:	e7b8      	b.n	801b96a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 801b9f8:	683b      	ldr	r3, [r7, #0]
 801b9fa:	607b      	str	r3, [r7, #4]
 801b9fc:	e002      	b.n	801ba04 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 801b9fe:	687b      	ldr	r3, [r7, #4]
 801ba00:	68db      	ldr	r3, [r3, #12]
 801ba02:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801ba04:	687b      	ldr	r3, [r7, #4]
 801ba06:	2b00      	cmp	r3, #0
 801ba08:	d1b3      	bne.n	801b972 <tcp_fasttmr+0x1a>
    }
  }
}
 801ba0a:	bf00      	nop
 801ba0c:	bf00      	nop
 801ba0e:	3708      	adds	r7, #8
 801ba10:	46bd      	mov	sp, r7
 801ba12:	bd80      	pop	{r7, pc}
 801ba14:	20013c2a 	.word	0x20013c2a
 801ba18:	2001c0fc 	.word	0x2001c0fc
 801ba1c:	2001c0f8 	.word	0x2001c0f8

0801ba20 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 801ba20:	b590      	push	{r4, r7, lr}
 801ba22:	b085      	sub	sp, #20
 801ba24:	af00      	add	r7, sp, #0
 801ba26:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 801ba28:	687b      	ldr	r3, [r7, #4]
 801ba2a:	2b00      	cmp	r3, #0
 801ba2c:	d109      	bne.n	801ba42 <tcp_process_refused_data+0x22>
 801ba2e:	4b37      	ldr	r3, [pc, #220]	; (801bb0c <tcp_process_refused_data+0xec>)
 801ba30:	f240 6209 	movw	r2, #1545	; 0x609
 801ba34:	4936      	ldr	r1, [pc, #216]	; (801bb10 <tcp_process_refused_data+0xf0>)
 801ba36:	4837      	ldr	r0, [pc, #220]	; (801bb14 <tcp_process_refused_data+0xf4>)
 801ba38:	f00a ff48 	bl	80268cc <iprintf>
 801ba3c:	f06f 030f 	mvn.w	r3, #15
 801ba40:	e060      	b.n	801bb04 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 801ba42:	687b      	ldr	r3, [r7, #4]
 801ba44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801ba46:	7b5b      	ldrb	r3, [r3, #13]
 801ba48:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 801ba4a:	687b      	ldr	r3, [r7, #4]
 801ba4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801ba4e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 801ba50:	687b      	ldr	r3, [r7, #4]
 801ba52:	2200      	movs	r2, #0
 801ba54:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801ba56:	687b      	ldr	r3, [r7, #4]
 801ba58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801ba5c:	2b00      	cmp	r3, #0
 801ba5e:	d00b      	beq.n	801ba78 <tcp_process_refused_data+0x58>
 801ba60:	687b      	ldr	r3, [r7, #4]
 801ba62:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801ba66:	687b      	ldr	r3, [r7, #4]
 801ba68:	6918      	ldr	r0, [r3, #16]
 801ba6a:	2300      	movs	r3, #0
 801ba6c:	68ba      	ldr	r2, [r7, #8]
 801ba6e:	6879      	ldr	r1, [r7, #4]
 801ba70:	47a0      	blx	r4
 801ba72:	4603      	mov	r3, r0
 801ba74:	73fb      	strb	r3, [r7, #15]
 801ba76:	e007      	b.n	801ba88 <tcp_process_refused_data+0x68>
 801ba78:	2300      	movs	r3, #0
 801ba7a:	68ba      	ldr	r2, [r7, #8]
 801ba7c:	6879      	ldr	r1, [r7, #4]
 801ba7e:	2000      	movs	r0, #0
 801ba80:	f000 f8c2 	bl	801bc08 <tcp_recv_null>
 801ba84:	4603      	mov	r3, r0
 801ba86:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 801ba88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801ba8c:	2b00      	cmp	r3, #0
 801ba8e:	d12a      	bne.n	801bae6 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 801ba90:	7bbb      	ldrb	r3, [r7, #14]
 801ba92:	f003 0320 	and.w	r3, r3, #32
 801ba96:	2b00      	cmp	r3, #0
 801ba98:	d033      	beq.n	801bb02 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801ba9a:	687b      	ldr	r3, [r7, #4]
 801ba9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801ba9e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801baa2:	d005      	beq.n	801bab0 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 801baa4:	687b      	ldr	r3, [r7, #4]
 801baa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801baa8:	3301      	adds	r3, #1
 801baaa:	b29a      	uxth	r2, r3
 801baac:	687b      	ldr	r3, [r7, #4]
 801baae:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 801bab0:	687b      	ldr	r3, [r7, #4]
 801bab2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801bab6:	2b00      	cmp	r3, #0
 801bab8:	d00b      	beq.n	801bad2 <tcp_process_refused_data+0xb2>
 801baba:	687b      	ldr	r3, [r7, #4]
 801babc:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801bac0:	687b      	ldr	r3, [r7, #4]
 801bac2:	6918      	ldr	r0, [r3, #16]
 801bac4:	2300      	movs	r3, #0
 801bac6:	2200      	movs	r2, #0
 801bac8:	6879      	ldr	r1, [r7, #4]
 801baca:	47a0      	blx	r4
 801bacc:	4603      	mov	r3, r0
 801bace:	73fb      	strb	r3, [r7, #15]
 801bad0:	e001      	b.n	801bad6 <tcp_process_refused_data+0xb6>
 801bad2:	2300      	movs	r3, #0
 801bad4:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 801bad6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801bada:	f113 0f0d 	cmn.w	r3, #13
 801bade:	d110      	bne.n	801bb02 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 801bae0:	f06f 030c 	mvn.w	r3, #12
 801bae4:	e00e      	b.n	801bb04 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 801bae6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801baea:	f113 0f0d 	cmn.w	r3, #13
 801baee:	d102      	bne.n	801baf6 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 801baf0:	f06f 030c 	mvn.w	r3, #12
 801baf4:	e006      	b.n	801bb04 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 801baf6:	687b      	ldr	r3, [r7, #4]
 801baf8:	68ba      	ldr	r2, [r7, #8]
 801bafa:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 801bafc:	f06f 0304 	mvn.w	r3, #4
 801bb00:	e000      	b.n	801bb04 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 801bb02:	2300      	movs	r3, #0
}
 801bb04:	4618      	mov	r0, r3
 801bb06:	3714      	adds	r7, #20
 801bb08:	46bd      	mov	sp, r7
 801bb0a:	bd90      	pop	{r4, r7, pc}
 801bb0c:	0802d3c0 	.word	0x0802d3c0
 801bb10:	0802d8d0 	.word	0x0802d8d0
 801bb14:	0802d404 	.word	0x0802d404

0801bb18 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 801bb18:	b580      	push	{r7, lr}
 801bb1a:	b084      	sub	sp, #16
 801bb1c:	af00      	add	r7, sp, #0
 801bb1e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 801bb20:	e007      	b.n	801bb32 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 801bb22:	687b      	ldr	r3, [r7, #4]
 801bb24:	681b      	ldr	r3, [r3, #0]
 801bb26:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 801bb28:	6878      	ldr	r0, [r7, #4]
 801bb2a:	f000 f80a 	bl	801bb42 <tcp_seg_free>
    seg = next;
 801bb2e:	68fb      	ldr	r3, [r7, #12]
 801bb30:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 801bb32:	687b      	ldr	r3, [r7, #4]
 801bb34:	2b00      	cmp	r3, #0
 801bb36:	d1f4      	bne.n	801bb22 <tcp_segs_free+0xa>
  }
}
 801bb38:	bf00      	nop
 801bb3a:	bf00      	nop
 801bb3c:	3710      	adds	r7, #16
 801bb3e:	46bd      	mov	sp, r7
 801bb40:	bd80      	pop	{r7, pc}

0801bb42 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 801bb42:	b580      	push	{r7, lr}
 801bb44:	b082      	sub	sp, #8
 801bb46:	af00      	add	r7, sp, #0
 801bb48:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 801bb4a:	687b      	ldr	r3, [r7, #4]
 801bb4c:	2b00      	cmp	r3, #0
 801bb4e:	d00c      	beq.n	801bb6a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 801bb50:	687b      	ldr	r3, [r7, #4]
 801bb52:	685b      	ldr	r3, [r3, #4]
 801bb54:	2b00      	cmp	r3, #0
 801bb56:	d004      	beq.n	801bb62 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 801bb58:	687b      	ldr	r3, [r7, #4]
 801bb5a:	685b      	ldr	r3, [r3, #4]
 801bb5c:	4618      	mov	r0, r3
 801bb5e:	f7fe fa2b 	bl	8019fb8 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 801bb62:	6879      	ldr	r1, [r7, #4]
 801bb64:	2003      	movs	r0, #3
 801bb66:	f7fd fb77 	bl	8019258 <memp_free>
  }
}
 801bb6a:	bf00      	nop
 801bb6c:	3708      	adds	r7, #8
 801bb6e:	46bd      	mov	sp, r7
 801bb70:	bd80      	pop	{r7, pc}
	...

0801bb74 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 801bb74:	b580      	push	{r7, lr}
 801bb76:	b082      	sub	sp, #8
 801bb78:	af00      	add	r7, sp, #0
 801bb7a:	6078      	str	r0, [r7, #4]
 801bb7c:	460b      	mov	r3, r1
 801bb7e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 801bb80:	687b      	ldr	r3, [r7, #4]
 801bb82:	2b00      	cmp	r3, #0
 801bb84:	d107      	bne.n	801bb96 <tcp_setprio+0x22>
 801bb86:	4b07      	ldr	r3, [pc, #28]	; (801bba4 <tcp_setprio+0x30>)
 801bb88:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 801bb8c:	4906      	ldr	r1, [pc, #24]	; (801bba8 <tcp_setprio+0x34>)
 801bb8e:	4807      	ldr	r0, [pc, #28]	; (801bbac <tcp_setprio+0x38>)
 801bb90:	f00a fe9c 	bl	80268cc <iprintf>
 801bb94:	e002      	b.n	801bb9c <tcp_setprio+0x28>

  pcb->prio = prio;
 801bb96:	687b      	ldr	r3, [r7, #4]
 801bb98:	78fa      	ldrb	r2, [r7, #3]
 801bb9a:	755a      	strb	r2, [r3, #21]
}
 801bb9c:	3708      	adds	r7, #8
 801bb9e:	46bd      	mov	sp, r7
 801bba0:	bd80      	pop	{r7, pc}
 801bba2:	bf00      	nop
 801bba4:	0802d3c0 	.word	0x0802d3c0
 801bba8:	0802d8f8 	.word	0x0802d8f8
 801bbac:	0802d404 	.word	0x0802d404

0801bbb0 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 801bbb0:	b580      	push	{r7, lr}
 801bbb2:	b084      	sub	sp, #16
 801bbb4:	af00      	add	r7, sp, #0
 801bbb6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 801bbb8:	687b      	ldr	r3, [r7, #4]
 801bbba:	2b00      	cmp	r3, #0
 801bbbc:	d106      	bne.n	801bbcc <tcp_seg_copy+0x1c>
 801bbbe:	4b0f      	ldr	r3, [pc, #60]	; (801bbfc <tcp_seg_copy+0x4c>)
 801bbc0:	f240 6282 	movw	r2, #1666	; 0x682
 801bbc4:	490e      	ldr	r1, [pc, #56]	; (801bc00 <tcp_seg_copy+0x50>)
 801bbc6:	480f      	ldr	r0, [pc, #60]	; (801bc04 <tcp_seg_copy+0x54>)
 801bbc8:	f00a fe80 	bl	80268cc <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 801bbcc:	2003      	movs	r0, #3
 801bbce:	f7fd faf1 	bl	80191b4 <memp_malloc>
 801bbd2:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 801bbd4:	68fb      	ldr	r3, [r7, #12]
 801bbd6:	2b00      	cmp	r3, #0
 801bbd8:	d101      	bne.n	801bbde <tcp_seg_copy+0x2e>
    return NULL;
 801bbda:	2300      	movs	r3, #0
 801bbdc:	e00a      	b.n	801bbf4 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801bbde:	2210      	movs	r2, #16
 801bbe0:	6879      	ldr	r1, [r7, #4]
 801bbe2:	68f8      	ldr	r0, [r7, #12]
 801bbe4:	f009 ff9e 	bl	8025b24 <memcpy>
  pbuf_ref(cseg->p);
 801bbe8:	68fb      	ldr	r3, [r7, #12]
 801bbea:	685b      	ldr	r3, [r3, #4]
 801bbec:	4618      	mov	r0, r3
 801bbee:	f7fe fa89 	bl	801a104 <pbuf_ref>
  return cseg;
 801bbf2:	68fb      	ldr	r3, [r7, #12]
}
 801bbf4:	4618      	mov	r0, r3
 801bbf6:	3710      	adds	r7, #16
 801bbf8:	46bd      	mov	sp, r7
 801bbfa:	bd80      	pop	{r7, pc}
 801bbfc:	0802d3c0 	.word	0x0802d3c0
 801bc00:	0802d914 	.word	0x0802d914
 801bc04:	0802d404 	.word	0x0802d404

0801bc08 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 801bc08:	b580      	push	{r7, lr}
 801bc0a:	b084      	sub	sp, #16
 801bc0c:	af00      	add	r7, sp, #0
 801bc0e:	60f8      	str	r0, [r7, #12]
 801bc10:	60b9      	str	r1, [r7, #8]
 801bc12:	607a      	str	r2, [r7, #4]
 801bc14:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801bc16:	68bb      	ldr	r3, [r7, #8]
 801bc18:	2b00      	cmp	r3, #0
 801bc1a:	d109      	bne.n	801bc30 <tcp_recv_null+0x28>
 801bc1c:	4b12      	ldr	r3, [pc, #72]	; (801bc68 <tcp_recv_null+0x60>)
 801bc1e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801bc22:	4912      	ldr	r1, [pc, #72]	; (801bc6c <tcp_recv_null+0x64>)
 801bc24:	4812      	ldr	r0, [pc, #72]	; (801bc70 <tcp_recv_null+0x68>)
 801bc26:	f00a fe51 	bl	80268cc <iprintf>
 801bc2a:	f06f 030f 	mvn.w	r3, #15
 801bc2e:	e016      	b.n	801bc5e <tcp_recv_null+0x56>

  if (p != NULL) {
 801bc30:	687b      	ldr	r3, [r7, #4]
 801bc32:	2b00      	cmp	r3, #0
 801bc34:	d009      	beq.n	801bc4a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 801bc36:	687b      	ldr	r3, [r7, #4]
 801bc38:	891b      	ldrh	r3, [r3, #8]
 801bc3a:	4619      	mov	r1, r3
 801bc3c:	68b8      	ldr	r0, [r7, #8]
 801bc3e:	f7ff f99d 	bl	801af7c <tcp_recved>
    pbuf_free(p);
 801bc42:	6878      	ldr	r0, [r7, #4]
 801bc44:	f7fe f9b8 	bl	8019fb8 <pbuf_free>
 801bc48:	e008      	b.n	801bc5c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 801bc4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801bc4e:	2b00      	cmp	r3, #0
 801bc50:	d104      	bne.n	801bc5c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 801bc52:	68b8      	ldr	r0, [r7, #8]
 801bc54:	f7fe fece 	bl	801a9f4 <tcp_close>
 801bc58:	4603      	mov	r3, r0
 801bc5a:	e000      	b.n	801bc5e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 801bc5c:	2300      	movs	r3, #0
}
 801bc5e:	4618      	mov	r0, r3
 801bc60:	3710      	adds	r7, #16
 801bc62:	46bd      	mov	sp, r7
 801bc64:	bd80      	pop	{r7, pc}
 801bc66:	bf00      	nop
 801bc68:	0802d3c0 	.word	0x0802d3c0
 801bc6c:	0802d930 	.word	0x0802d930
 801bc70:	0802d404 	.word	0x0802d404

0801bc74 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 801bc74:	b580      	push	{r7, lr}
 801bc76:	b086      	sub	sp, #24
 801bc78:	af00      	add	r7, sp, #0
 801bc7a:	4603      	mov	r3, r0
 801bc7c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801bc7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801bc82:	2b00      	cmp	r3, #0
 801bc84:	db01      	blt.n	801bc8a <tcp_kill_prio+0x16>
 801bc86:	79fb      	ldrb	r3, [r7, #7]
 801bc88:	e000      	b.n	801bc8c <tcp_kill_prio+0x18>
 801bc8a:	237f      	movs	r3, #127	; 0x7f
 801bc8c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 801bc8e:	7afb      	ldrb	r3, [r7, #11]
 801bc90:	2b00      	cmp	r3, #0
 801bc92:	d034      	beq.n	801bcfe <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 801bc94:	7afb      	ldrb	r3, [r7, #11]
 801bc96:	3b01      	subs	r3, #1
 801bc98:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 801bc9a:	2300      	movs	r3, #0
 801bc9c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801bc9e:	2300      	movs	r3, #0
 801bca0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801bca2:	4b19      	ldr	r3, [pc, #100]	; (801bd08 <tcp_kill_prio+0x94>)
 801bca4:	681b      	ldr	r3, [r3, #0]
 801bca6:	617b      	str	r3, [r7, #20]
 801bca8:	e01f      	b.n	801bcea <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 801bcaa:	697b      	ldr	r3, [r7, #20]
 801bcac:	7d5b      	ldrb	r3, [r3, #21]
 801bcae:	7afa      	ldrb	r2, [r7, #11]
 801bcb0:	429a      	cmp	r2, r3
 801bcb2:	d80c      	bhi.n	801bcce <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801bcb4:	697b      	ldr	r3, [r7, #20]
 801bcb6:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 801bcb8:	7afa      	ldrb	r2, [r7, #11]
 801bcba:	429a      	cmp	r2, r3
 801bcbc:	d112      	bne.n	801bce4 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801bcbe:	4b13      	ldr	r3, [pc, #76]	; (801bd0c <tcp_kill_prio+0x98>)
 801bcc0:	681a      	ldr	r2, [r3, #0]
 801bcc2:	697b      	ldr	r3, [r7, #20]
 801bcc4:	6a1b      	ldr	r3, [r3, #32]
 801bcc6:	1ad3      	subs	r3, r2, r3
 801bcc8:	68fa      	ldr	r2, [r7, #12]
 801bcca:	429a      	cmp	r2, r3
 801bccc:	d80a      	bhi.n	801bce4 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 801bcce:	4b0f      	ldr	r3, [pc, #60]	; (801bd0c <tcp_kill_prio+0x98>)
 801bcd0:	681a      	ldr	r2, [r3, #0]
 801bcd2:	697b      	ldr	r3, [r7, #20]
 801bcd4:	6a1b      	ldr	r3, [r3, #32]
 801bcd6:	1ad3      	subs	r3, r2, r3
 801bcd8:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 801bcda:	697b      	ldr	r3, [r7, #20]
 801bcdc:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 801bcde:	697b      	ldr	r3, [r7, #20]
 801bce0:	7d5b      	ldrb	r3, [r3, #21]
 801bce2:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801bce4:	697b      	ldr	r3, [r7, #20]
 801bce6:	68db      	ldr	r3, [r3, #12]
 801bce8:	617b      	str	r3, [r7, #20]
 801bcea:	697b      	ldr	r3, [r7, #20]
 801bcec:	2b00      	cmp	r3, #0
 801bcee:	d1dc      	bne.n	801bcaa <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 801bcf0:	693b      	ldr	r3, [r7, #16]
 801bcf2:	2b00      	cmp	r3, #0
 801bcf4:	d004      	beq.n	801bd00 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801bcf6:	6938      	ldr	r0, [r7, #16]
 801bcf8:	f7fe ff66 	bl	801abc8 <tcp_abort>
 801bcfc:	e000      	b.n	801bd00 <tcp_kill_prio+0x8c>
    return;
 801bcfe:	bf00      	nop
  }
}
 801bd00:	3718      	adds	r7, #24
 801bd02:	46bd      	mov	sp, r7
 801bd04:	bd80      	pop	{r7, pc}
 801bd06:	bf00      	nop
 801bd08:	2001c0fc 	.word	0x2001c0fc
 801bd0c:	2001c100 	.word	0x2001c100

0801bd10 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 801bd10:	b580      	push	{r7, lr}
 801bd12:	b086      	sub	sp, #24
 801bd14:	af00      	add	r7, sp, #0
 801bd16:	4603      	mov	r3, r0
 801bd18:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801bd1a:	79fb      	ldrb	r3, [r7, #7]
 801bd1c:	2b08      	cmp	r3, #8
 801bd1e:	d009      	beq.n	801bd34 <tcp_kill_state+0x24>
 801bd20:	79fb      	ldrb	r3, [r7, #7]
 801bd22:	2b09      	cmp	r3, #9
 801bd24:	d006      	beq.n	801bd34 <tcp_kill_state+0x24>
 801bd26:	4b1a      	ldr	r3, [pc, #104]	; (801bd90 <tcp_kill_state+0x80>)
 801bd28:	f240 62dd 	movw	r2, #1757	; 0x6dd
 801bd2c:	4919      	ldr	r1, [pc, #100]	; (801bd94 <tcp_kill_state+0x84>)
 801bd2e:	481a      	ldr	r0, [pc, #104]	; (801bd98 <tcp_kill_state+0x88>)
 801bd30:	f00a fdcc 	bl	80268cc <iprintf>

  inactivity = 0;
 801bd34:	2300      	movs	r3, #0
 801bd36:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801bd38:	2300      	movs	r3, #0
 801bd3a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801bd3c:	4b17      	ldr	r3, [pc, #92]	; (801bd9c <tcp_kill_state+0x8c>)
 801bd3e:	681b      	ldr	r3, [r3, #0]
 801bd40:	617b      	str	r3, [r7, #20]
 801bd42:	e017      	b.n	801bd74 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 801bd44:	697b      	ldr	r3, [r7, #20]
 801bd46:	7d1b      	ldrb	r3, [r3, #20]
 801bd48:	79fa      	ldrb	r2, [r7, #7]
 801bd4a:	429a      	cmp	r2, r3
 801bd4c:	d10f      	bne.n	801bd6e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801bd4e:	4b14      	ldr	r3, [pc, #80]	; (801bda0 <tcp_kill_state+0x90>)
 801bd50:	681a      	ldr	r2, [r3, #0]
 801bd52:	697b      	ldr	r3, [r7, #20]
 801bd54:	6a1b      	ldr	r3, [r3, #32]
 801bd56:	1ad3      	subs	r3, r2, r3
 801bd58:	68fa      	ldr	r2, [r7, #12]
 801bd5a:	429a      	cmp	r2, r3
 801bd5c:	d807      	bhi.n	801bd6e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 801bd5e:	4b10      	ldr	r3, [pc, #64]	; (801bda0 <tcp_kill_state+0x90>)
 801bd60:	681a      	ldr	r2, [r3, #0]
 801bd62:	697b      	ldr	r3, [r7, #20]
 801bd64:	6a1b      	ldr	r3, [r3, #32]
 801bd66:	1ad3      	subs	r3, r2, r3
 801bd68:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801bd6a:	697b      	ldr	r3, [r7, #20]
 801bd6c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801bd6e:	697b      	ldr	r3, [r7, #20]
 801bd70:	68db      	ldr	r3, [r3, #12]
 801bd72:	617b      	str	r3, [r7, #20]
 801bd74:	697b      	ldr	r3, [r7, #20]
 801bd76:	2b00      	cmp	r3, #0
 801bd78:	d1e4      	bne.n	801bd44 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801bd7a:	693b      	ldr	r3, [r7, #16]
 801bd7c:	2b00      	cmp	r3, #0
 801bd7e:	d003      	beq.n	801bd88 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 801bd80:	2100      	movs	r1, #0
 801bd82:	6938      	ldr	r0, [r7, #16]
 801bd84:	f7fe fe62 	bl	801aa4c <tcp_abandon>
  }
}
 801bd88:	bf00      	nop
 801bd8a:	3718      	adds	r7, #24
 801bd8c:	46bd      	mov	sp, r7
 801bd8e:	bd80      	pop	{r7, pc}
 801bd90:	0802d3c0 	.word	0x0802d3c0
 801bd94:	0802d94c 	.word	0x0802d94c
 801bd98:	0802d404 	.word	0x0802d404
 801bd9c:	2001c0fc 	.word	0x2001c0fc
 801bda0:	2001c100 	.word	0x2001c100

0801bda4 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 801bda4:	b580      	push	{r7, lr}
 801bda6:	b084      	sub	sp, #16
 801bda8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801bdaa:	2300      	movs	r3, #0
 801bdac:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 801bdae:	2300      	movs	r3, #0
 801bdb0:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801bdb2:	4b12      	ldr	r3, [pc, #72]	; (801bdfc <tcp_kill_timewait+0x58>)
 801bdb4:	681b      	ldr	r3, [r3, #0]
 801bdb6:	60fb      	str	r3, [r7, #12]
 801bdb8:	e012      	b.n	801bde0 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801bdba:	4b11      	ldr	r3, [pc, #68]	; (801be00 <tcp_kill_timewait+0x5c>)
 801bdbc:	681a      	ldr	r2, [r3, #0]
 801bdbe:	68fb      	ldr	r3, [r7, #12]
 801bdc0:	6a1b      	ldr	r3, [r3, #32]
 801bdc2:	1ad3      	subs	r3, r2, r3
 801bdc4:	687a      	ldr	r2, [r7, #4]
 801bdc6:	429a      	cmp	r2, r3
 801bdc8:	d807      	bhi.n	801bdda <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801bdca:	4b0d      	ldr	r3, [pc, #52]	; (801be00 <tcp_kill_timewait+0x5c>)
 801bdcc:	681a      	ldr	r2, [r3, #0]
 801bdce:	68fb      	ldr	r3, [r7, #12]
 801bdd0:	6a1b      	ldr	r3, [r3, #32]
 801bdd2:	1ad3      	subs	r3, r2, r3
 801bdd4:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801bdd6:	68fb      	ldr	r3, [r7, #12]
 801bdd8:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801bdda:	68fb      	ldr	r3, [r7, #12]
 801bddc:	68db      	ldr	r3, [r3, #12]
 801bdde:	60fb      	str	r3, [r7, #12]
 801bde0:	68fb      	ldr	r3, [r7, #12]
 801bde2:	2b00      	cmp	r3, #0
 801bde4:	d1e9      	bne.n	801bdba <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 801bde6:	68bb      	ldr	r3, [r7, #8]
 801bde8:	2b00      	cmp	r3, #0
 801bdea:	d002      	beq.n	801bdf2 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801bdec:	68b8      	ldr	r0, [r7, #8]
 801bdee:	f7fe feeb 	bl	801abc8 <tcp_abort>
  }
}
 801bdf2:	bf00      	nop
 801bdf4:	3710      	adds	r7, #16
 801bdf6:	46bd      	mov	sp, r7
 801bdf8:	bd80      	pop	{r7, pc}
 801bdfa:	bf00      	nop
 801bdfc:	2001c10c 	.word	0x2001c10c
 801be00:	2001c100 	.word	0x2001c100

0801be04 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 801be04:	b580      	push	{r7, lr}
 801be06:	b082      	sub	sp, #8
 801be08:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801be0a:	4b10      	ldr	r3, [pc, #64]	; (801be4c <tcp_handle_closepend+0x48>)
 801be0c:	681b      	ldr	r3, [r3, #0]
 801be0e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801be10:	e014      	b.n	801be3c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 801be12:	687b      	ldr	r3, [r7, #4]
 801be14:	68db      	ldr	r3, [r3, #12]
 801be16:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 801be18:	687b      	ldr	r3, [r7, #4]
 801be1a:	8b5b      	ldrh	r3, [r3, #26]
 801be1c:	f003 0308 	and.w	r3, r3, #8
 801be20:	2b00      	cmp	r3, #0
 801be22:	d009      	beq.n	801be38 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 801be24:	687b      	ldr	r3, [r7, #4]
 801be26:	8b5b      	ldrh	r3, [r3, #26]
 801be28:	f023 0308 	bic.w	r3, r3, #8
 801be2c:	b29a      	uxth	r2, r3
 801be2e:	687b      	ldr	r3, [r7, #4]
 801be30:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 801be32:	6878      	ldr	r0, [r7, #4]
 801be34:	f7fe fd74 	bl	801a920 <tcp_close_shutdown_fin>
    }
    pcb = next;
 801be38:	683b      	ldr	r3, [r7, #0]
 801be3a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801be3c:	687b      	ldr	r3, [r7, #4]
 801be3e:	2b00      	cmp	r3, #0
 801be40:	d1e7      	bne.n	801be12 <tcp_handle_closepend+0xe>
  }
}
 801be42:	bf00      	nop
 801be44:	bf00      	nop
 801be46:	3708      	adds	r7, #8
 801be48:	46bd      	mov	sp, r7
 801be4a:	bd80      	pop	{r7, pc}
 801be4c:	2001c0fc 	.word	0x2001c0fc

0801be50 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 801be50:	b580      	push	{r7, lr}
 801be52:	b084      	sub	sp, #16
 801be54:	af00      	add	r7, sp, #0
 801be56:	4603      	mov	r3, r0
 801be58:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801be5a:	2001      	movs	r0, #1
 801be5c:	f7fd f9aa 	bl	80191b4 <memp_malloc>
 801be60:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 801be62:	68fb      	ldr	r3, [r7, #12]
 801be64:	2b00      	cmp	r3, #0
 801be66:	d126      	bne.n	801beb6 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 801be68:	f7ff ffcc 	bl	801be04 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 801be6c:	f7ff ff9a 	bl	801bda4 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801be70:	2001      	movs	r0, #1
 801be72:	f7fd f99f 	bl	80191b4 <memp_malloc>
 801be76:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 801be78:	68fb      	ldr	r3, [r7, #12]
 801be7a:	2b00      	cmp	r3, #0
 801be7c:	d11b      	bne.n	801beb6 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 801be7e:	2009      	movs	r0, #9
 801be80:	f7ff ff46 	bl	801bd10 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801be84:	2001      	movs	r0, #1
 801be86:	f7fd f995 	bl	80191b4 <memp_malloc>
 801be8a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 801be8c:	68fb      	ldr	r3, [r7, #12]
 801be8e:	2b00      	cmp	r3, #0
 801be90:	d111      	bne.n	801beb6 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 801be92:	2008      	movs	r0, #8
 801be94:	f7ff ff3c 	bl	801bd10 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801be98:	2001      	movs	r0, #1
 801be9a:	f7fd f98b 	bl	80191b4 <memp_malloc>
 801be9e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 801bea0:	68fb      	ldr	r3, [r7, #12]
 801bea2:	2b00      	cmp	r3, #0
 801bea4:	d107      	bne.n	801beb6 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801bea6:	79fb      	ldrb	r3, [r7, #7]
 801bea8:	4618      	mov	r0, r3
 801beaa:	f7ff fee3 	bl	801bc74 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801beae:	2001      	movs	r0, #1
 801beb0:	f7fd f980 	bl	80191b4 <memp_malloc>
 801beb4:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 801beb6:	68fb      	ldr	r3, [r7, #12]
 801beb8:	2b00      	cmp	r3, #0
 801beba:	d03f      	beq.n	801bf3c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801bebc:	229c      	movs	r2, #156	; 0x9c
 801bebe:	2100      	movs	r1, #0
 801bec0:	68f8      	ldr	r0, [r7, #12]
 801bec2:	f009 fe57 	bl	8025b74 <memset>
    pcb->prio = prio;
 801bec6:	68fb      	ldr	r3, [r7, #12]
 801bec8:	79fa      	ldrb	r2, [r7, #7]
 801beca:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 801becc:	68fb      	ldr	r3, [r7, #12]
 801bece:	f44f 6286 	mov.w	r2, #1072	; 0x430
 801bed2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801bed6:	68fb      	ldr	r3, [r7, #12]
 801bed8:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801bedc:	855a      	strh	r2, [r3, #42]	; 0x2a
 801bede:	68fb      	ldr	r3, [r7, #12]
 801bee0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801bee2:	68fb      	ldr	r3, [r7, #12]
 801bee4:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 801bee6:	68fb      	ldr	r3, [r7, #12]
 801bee8:	22ff      	movs	r2, #255	; 0xff
 801beea:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 801beec:	68fb      	ldr	r3, [r7, #12]
 801beee:	f44f 7206 	mov.w	r2, #536	; 0x218
 801bef2:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 801bef4:	68fb      	ldr	r3, [r7, #12]
 801bef6:	2206      	movs	r2, #6
 801bef8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 801befc:	68fb      	ldr	r3, [r7, #12]
 801befe:	2206      	movs	r2, #6
 801bf00:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 801bf02:	68fb      	ldr	r3, [r7, #12]
 801bf04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801bf08:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 801bf0a:	68fb      	ldr	r3, [r7, #12]
 801bf0c:	2201      	movs	r2, #1
 801bf0e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 801bf12:	4b0d      	ldr	r3, [pc, #52]	; (801bf48 <tcp_alloc+0xf8>)
 801bf14:	681a      	ldr	r2, [r3, #0]
 801bf16:	68fb      	ldr	r3, [r7, #12]
 801bf18:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801bf1a:	4b0c      	ldr	r3, [pc, #48]	; (801bf4c <tcp_alloc+0xfc>)
 801bf1c:	781a      	ldrb	r2, [r3, #0]
 801bf1e:	68fb      	ldr	r3, [r7, #12]
 801bf20:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 801bf22:	68fb      	ldr	r3, [r7, #12]
 801bf24:	f44f 6286 	mov.w	r2, #1072	; 0x430
 801bf28:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 801bf2c:	68fb      	ldr	r3, [r7, #12]
 801bf2e:	4a08      	ldr	r2, [pc, #32]	; (801bf50 <tcp_alloc+0x100>)
 801bf30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 801bf34:	68fb      	ldr	r3, [r7, #12]
 801bf36:	4a07      	ldr	r2, [pc, #28]	; (801bf54 <tcp_alloc+0x104>)
 801bf38:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 801bf3c:	68fb      	ldr	r3, [r7, #12]
}
 801bf3e:	4618      	mov	r0, r3
 801bf40:	3710      	adds	r7, #16
 801bf42:	46bd      	mov	sp, r7
 801bf44:	bd80      	pop	{r7, pc}
 801bf46:	bf00      	nop
 801bf48:	2001c100 	.word	0x2001c100
 801bf4c:	20013c2a 	.word	0x20013c2a
 801bf50:	0801bc09 	.word	0x0801bc09
 801bf54:	006ddd00 	.word	0x006ddd00

0801bf58 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 801bf58:	b580      	push	{r7, lr}
 801bf5a:	b084      	sub	sp, #16
 801bf5c:	af00      	add	r7, sp, #0
 801bf5e:	4603      	mov	r3, r0
 801bf60:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 801bf62:	2040      	movs	r0, #64	; 0x40
 801bf64:	f7ff ff74 	bl	801be50 <tcp_alloc>
 801bf68:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801bf6a:	68fb      	ldr	r3, [r7, #12]
}
 801bf6c:	4618      	mov	r0, r3
 801bf6e:	3710      	adds	r7, #16
 801bf70:	46bd      	mov	sp, r7
 801bf72:	bd80      	pop	{r7, pc}

0801bf74 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 801bf74:	b480      	push	{r7}
 801bf76:	b083      	sub	sp, #12
 801bf78:	af00      	add	r7, sp, #0
 801bf7a:	6078      	str	r0, [r7, #4]
 801bf7c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 801bf7e:	687b      	ldr	r3, [r7, #4]
 801bf80:	2b00      	cmp	r3, #0
 801bf82:	d002      	beq.n	801bf8a <tcp_arg+0x16>
    pcb->callback_arg = arg;
 801bf84:	687b      	ldr	r3, [r7, #4]
 801bf86:	683a      	ldr	r2, [r7, #0]
 801bf88:	611a      	str	r2, [r3, #16]
  }
}
 801bf8a:	bf00      	nop
 801bf8c:	370c      	adds	r7, #12
 801bf8e:	46bd      	mov	sp, r7
 801bf90:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf94:	4770      	bx	lr
	...

0801bf98 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 801bf98:	b580      	push	{r7, lr}
 801bf9a:	b082      	sub	sp, #8
 801bf9c:	af00      	add	r7, sp, #0
 801bf9e:	6078      	str	r0, [r7, #4]
 801bfa0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801bfa2:	687b      	ldr	r3, [r7, #4]
 801bfa4:	2b00      	cmp	r3, #0
 801bfa6:	d00e      	beq.n	801bfc6 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 801bfa8:	687b      	ldr	r3, [r7, #4]
 801bfaa:	7d1b      	ldrb	r3, [r3, #20]
 801bfac:	2b01      	cmp	r3, #1
 801bfae:	d106      	bne.n	801bfbe <tcp_recv+0x26>
 801bfb0:	4b07      	ldr	r3, [pc, #28]	; (801bfd0 <tcp_recv+0x38>)
 801bfb2:	f240 72df 	movw	r2, #2015	; 0x7df
 801bfb6:	4907      	ldr	r1, [pc, #28]	; (801bfd4 <tcp_recv+0x3c>)
 801bfb8:	4807      	ldr	r0, [pc, #28]	; (801bfd8 <tcp_recv+0x40>)
 801bfba:	f00a fc87 	bl	80268cc <iprintf>
    pcb->recv = recv;
 801bfbe:	687b      	ldr	r3, [r7, #4]
 801bfc0:	683a      	ldr	r2, [r7, #0]
 801bfc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 801bfc6:	bf00      	nop
 801bfc8:	3708      	adds	r7, #8
 801bfca:	46bd      	mov	sp, r7
 801bfcc:	bd80      	pop	{r7, pc}
 801bfce:	bf00      	nop
 801bfd0:	0802d3c0 	.word	0x0802d3c0
 801bfd4:	0802d95c 	.word	0x0802d95c
 801bfd8:	0802d404 	.word	0x0802d404

0801bfdc <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 801bfdc:	b580      	push	{r7, lr}
 801bfde:	b082      	sub	sp, #8
 801bfe0:	af00      	add	r7, sp, #0
 801bfe2:	6078      	str	r0, [r7, #4]
 801bfe4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801bfe6:	687b      	ldr	r3, [r7, #4]
 801bfe8:	2b00      	cmp	r3, #0
 801bfea:	d00e      	beq.n	801c00a <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 801bfec:	687b      	ldr	r3, [r7, #4]
 801bfee:	7d1b      	ldrb	r3, [r3, #20]
 801bff0:	2b01      	cmp	r3, #1
 801bff2:	d106      	bne.n	801c002 <tcp_sent+0x26>
 801bff4:	4b07      	ldr	r3, [pc, #28]	; (801c014 <tcp_sent+0x38>)
 801bff6:	f240 72f3 	movw	r2, #2035	; 0x7f3
 801bffa:	4907      	ldr	r1, [pc, #28]	; (801c018 <tcp_sent+0x3c>)
 801bffc:	4807      	ldr	r0, [pc, #28]	; (801c01c <tcp_sent+0x40>)
 801bffe:	f00a fc65 	bl	80268cc <iprintf>
    pcb->sent = sent;
 801c002:	687b      	ldr	r3, [r7, #4]
 801c004:	683a      	ldr	r2, [r7, #0]
 801c006:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 801c00a:	bf00      	nop
 801c00c:	3708      	adds	r7, #8
 801c00e:	46bd      	mov	sp, r7
 801c010:	bd80      	pop	{r7, pc}
 801c012:	bf00      	nop
 801c014:	0802d3c0 	.word	0x0802d3c0
 801c018:	0802d984 	.word	0x0802d984
 801c01c:	0802d404 	.word	0x0802d404

0801c020 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 801c020:	b580      	push	{r7, lr}
 801c022:	b082      	sub	sp, #8
 801c024:	af00      	add	r7, sp, #0
 801c026:	6078      	str	r0, [r7, #4]
 801c028:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801c02a:	687b      	ldr	r3, [r7, #4]
 801c02c:	2b00      	cmp	r3, #0
 801c02e:	d00e      	beq.n	801c04e <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 801c030:	687b      	ldr	r3, [r7, #4]
 801c032:	7d1b      	ldrb	r3, [r3, #20]
 801c034:	2b01      	cmp	r3, #1
 801c036:	d106      	bne.n	801c046 <tcp_err+0x26>
 801c038:	4b07      	ldr	r3, [pc, #28]	; (801c058 <tcp_err+0x38>)
 801c03a:	f640 020d 	movw	r2, #2061	; 0x80d
 801c03e:	4907      	ldr	r1, [pc, #28]	; (801c05c <tcp_err+0x3c>)
 801c040:	4807      	ldr	r0, [pc, #28]	; (801c060 <tcp_err+0x40>)
 801c042:	f00a fc43 	bl	80268cc <iprintf>
    pcb->errf = err;
 801c046:	687b      	ldr	r3, [r7, #4]
 801c048:	683a      	ldr	r2, [r7, #0]
 801c04a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 801c04e:	bf00      	nop
 801c050:	3708      	adds	r7, #8
 801c052:	46bd      	mov	sp, r7
 801c054:	bd80      	pop	{r7, pc}
 801c056:	bf00      	nop
 801c058:	0802d3c0 	.word	0x0802d3c0
 801c05c:	0802d9ac 	.word	0x0802d9ac
 801c060:	0802d404 	.word	0x0802d404

0801c064 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 801c064:	b480      	push	{r7}
 801c066:	b085      	sub	sp, #20
 801c068:	af00      	add	r7, sp, #0
 801c06a:	6078      	str	r0, [r7, #4]
 801c06c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 801c06e:	687b      	ldr	r3, [r7, #4]
 801c070:	2b00      	cmp	r3, #0
 801c072:	d008      	beq.n	801c086 <tcp_accept+0x22>
 801c074:	687b      	ldr	r3, [r7, #4]
 801c076:	7d1b      	ldrb	r3, [r3, #20]
 801c078:	2b01      	cmp	r3, #1
 801c07a:	d104      	bne.n	801c086 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 801c07c:	687b      	ldr	r3, [r7, #4]
 801c07e:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 801c080:	68fb      	ldr	r3, [r7, #12]
 801c082:	683a      	ldr	r2, [r7, #0]
 801c084:	619a      	str	r2, [r3, #24]
  }
}
 801c086:	bf00      	nop
 801c088:	3714      	adds	r7, #20
 801c08a:	46bd      	mov	sp, r7
 801c08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c090:	4770      	bx	lr
	...

0801c094 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 801c094:	b580      	push	{r7, lr}
 801c096:	b084      	sub	sp, #16
 801c098:	af00      	add	r7, sp, #0
 801c09a:	60f8      	str	r0, [r7, #12]
 801c09c:	60b9      	str	r1, [r7, #8]
 801c09e:	4613      	mov	r3, r2
 801c0a0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 801c0a2:	68fb      	ldr	r3, [r7, #12]
 801c0a4:	2b00      	cmp	r3, #0
 801c0a6:	d107      	bne.n	801c0b8 <tcp_poll+0x24>
 801c0a8:	4b0e      	ldr	r3, [pc, #56]	; (801c0e4 <tcp_poll+0x50>)
 801c0aa:	f640 023d 	movw	r2, #2109	; 0x83d
 801c0ae:	490e      	ldr	r1, [pc, #56]	; (801c0e8 <tcp_poll+0x54>)
 801c0b0:	480e      	ldr	r0, [pc, #56]	; (801c0ec <tcp_poll+0x58>)
 801c0b2:	f00a fc0b 	bl	80268cc <iprintf>
 801c0b6:	e011      	b.n	801c0dc <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 801c0b8:	68fb      	ldr	r3, [r7, #12]
 801c0ba:	7d1b      	ldrb	r3, [r3, #20]
 801c0bc:	2b01      	cmp	r3, #1
 801c0be:	d106      	bne.n	801c0ce <tcp_poll+0x3a>
 801c0c0:	4b08      	ldr	r3, [pc, #32]	; (801c0e4 <tcp_poll+0x50>)
 801c0c2:	f640 023e 	movw	r2, #2110	; 0x83e
 801c0c6:	490a      	ldr	r1, [pc, #40]	; (801c0f0 <tcp_poll+0x5c>)
 801c0c8:	4808      	ldr	r0, [pc, #32]	; (801c0ec <tcp_poll+0x58>)
 801c0ca:	f00a fbff 	bl	80268cc <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 801c0ce:	68fb      	ldr	r3, [r7, #12]
 801c0d0:	68ba      	ldr	r2, [r7, #8]
 801c0d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 801c0d6:	68fb      	ldr	r3, [r7, #12]
 801c0d8:	79fa      	ldrb	r2, [r7, #7]
 801c0da:	775a      	strb	r2, [r3, #29]
}
 801c0dc:	3710      	adds	r7, #16
 801c0de:	46bd      	mov	sp, r7
 801c0e0:	bd80      	pop	{r7, pc}
 801c0e2:	bf00      	nop
 801c0e4:	0802d3c0 	.word	0x0802d3c0
 801c0e8:	0802d9d4 	.word	0x0802d9d4
 801c0ec:	0802d404 	.word	0x0802d404
 801c0f0:	0802d9ec 	.word	0x0802d9ec

0801c0f4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 801c0f4:	b580      	push	{r7, lr}
 801c0f6:	b082      	sub	sp, #8
 801c0f8:	af00      	add	r7, sp, #0
 801c0fa:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 801c0fc:	687b      	ldr	r3, [r7, #4]
 801c0fe:	2b00      	cmp	r3, #0
 801c100:	d107      	bne.n	801c112 <tcp_pcb_purge+0x1e>
 801c102:	4b21      	ldr	r3, [pc, #132]	; (801c188 <tcp_pcb_purge+0x94>)
 801c104:	f640 0251 	movw	r2, #2129	; 0x851
 801c108:	4920      	ldr	r1, [pc, #128]	; (801c18c <tcp_pcb_purge+0x98>)
 801c10a:	4821      	ldr	r0, [pc, #132]	; (801c190 <tcp_pcb_purge+0x9c>)
 801c10c:	f00a fbde 	bl	80268cc <iprintf>
 801c110:	e037      	b.n	801c182 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 801c112:	687b      	ldr	r3, [r7, #4]
 801c114:	7d1b      	ldrb	r3, [r3, #20]
 801c116:	2b00      	cmp	r3, #0
 801c118:	d033      	beq.n	801c182 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 801c11a:	687b      	ldr	r3, [r7, #4]
 801c11c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 801c11e:	2b0a      	cmp	r3, #10
 801c120:	d02f      	beq.n	801c182 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 801c122:	687b      	ldr	r3, [r7, #4]
 801c124:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 801c126:	2b01      	cmp	r3, #1
 801c128:	d02b      	beq.n	801c182 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 801c12a:	687b      	ldr	r3, [r7, #4]
 801c12c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801c12e:	2b00      	cmp	r3, #0
 801c130:	d007      	beq.n	801c142 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801c132:	687b      	ldr	r3, [r7, #4]
 801c134:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801c136:	4618      	mov	r0, r3
 801c138:	f7fd ff3e 	bl	8019fb8 <pbuf_free>
      pcb->refused_data = NULL;
 801c13c:	687b      	ldr	r3, [r7, #4]
 801c13e:	2200      	movs	r2, #0
 801c140:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801c142:	687b      	ldr	r3, [r7, #4]
 801c144:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c146:	2b00      	cmp	r3, #0
 801c148:	d002      	beq.n	801c150 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 801c14a:	6878      	ldr	r0, [r7, #4]
 801c14c:	f000 f986 	bl	801c45c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 801c150:	687b      	ldr	r3, [r7, #4]
 801c152:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801c156:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 801c158:	687b      	ldr	r3, [r7, #4]
 801c15a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c15c:	4618      	mov	r0, r3
 801c15e:	f7ff fcdb 	bl	801bb18 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801c162:	687b      	ldr	r3, [r7, #4]
 801c164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c166:	4618      	mov	r0, r3
 801c168:	f7ff fcd6 	bl	801bb18 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 801c16c:	687b      	ldr	r3, [r7, #4]
 801c16e:	2200      	movs	r2, #0
 801c170:	66da      	str	r2, [r3, #108]	; 0x6c
 801c172:	687b      	ldr	r3, [r7, #4]
 801c174:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801c176:	687b      	ldr	r3, [r7, #4]
 801c178:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 801c17a:	687b      	ldr	r3, [r7, #4]
 801c17c:	2200      	movs	r2, #0
 801c17e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801c182:	3708      	adds	r7, #8
 801c184:	46bd      	mov	sp, r7
 801c186:	bd80      	pop	{r7, pc}
 801c188:	0802d3c0 	.word	0x0802d3c0
 801c18c:	0802da0c 	.word	0x0802da0c
 801c190:	0802d404 	.word	0x0802d404

0801c194 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 801c194:	b580      	push	{r7, lr}
 801c196:	b084      	sub	sp, #16
 801c198:	af00      	add	r7, sp, #0
 801c19a:	6078      	str	r0, [r7, #4]
 801c19c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801c19e:	683b      	ldr	r3, [r7, #0]
 801c1a0:	2b00      	cmp	r3, #0
 801c1a2:	d106      	bne.n	801c1b2 <tcp_pcb_remove+0x1e>
 801c1a4:	4b3e      	ldr	r3, [pc, #248]	; (801c2a0 <tcp_pcb_remove+0x10c>)
 801c1a6:	f640 0283 	movw	r2, #2179	; 0x883
 801c1aa:	493e      	ldr	r1, [pc, #248]	; (801c2a4 <tcp_pcb_remove+0x110>)
 801c1ac:	483e      	ldr	r0, [pc, #248]	; (801c2a8 <tcp_pcb_remove+0x114>)
 801c1ae:	f00a fb8d 	bl	80268cc <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801c1b2:	687b      	ldr	r3, [r7, #4]
 801c1b4:	2b00      	cmp	r3, #0
 801c1b6:	d106      	bne.n	801c1c6 <tcp_pcb_remove+0x32>
 801c1b8:	4b39      	ldr	r3, [pc, #228]	; (801c2a0 <tcp_pcb_remove+0x10c>)
 801c1ba:	f640 0284 	movw	r2, #2180	; 0x884
 801c1be:	493b      	ldr	r1, [pc, #236]	; (801c2ac <tcp_pcb_remove+0x118>)
 801c1c0:	4839      	ldr	r0, [pc, #228]	; (801c2a8 <tcp_pcb_remove+0x114>)
 801c1c2:	f00a fb83 	bl	80268cc <iprintf>

  TCP_RMV(pcblist, pcb);
 801c1c6:	687b      	ldr	r3, [r7, #4]
 801c1c8:	681b      	ldr	r3, [r3, #0]
 801c1ca:	683a      	ldr	r2, [r7, #0]
 801c1cc:	429a      	cmp	r2, r3
 801c1ce:	d105      	bne.n	801c1dc <tcp_pcb_remove+0x48>
 801c1d0:	687b      	ldr	r3, [r7, #4]
 801c1d2:	681b      	ldr	r3, [r3, #0]
 801c1d4:	68da      	ldr	r2, [r3, #12]
 801c1d6:	687b      	ldr	r3, [r7, #4]
 801c1d8:	601a      	str	r2, [r3, #0]
 801c1da:	e013      	b.n	801c204 <tcp_pcb_remove+0x70>
 801c1dc:	687b      	ldr	r3, [r7, #4]
 801c1de:	681b      	ldr	r3, [r3, #0]
 801c1e0:	60fb      	str	r3, [r7, #12]
 801c1e2:	e00c      	b.n	801c1fe <tcp_pcb_remove+0x6a>
 801c1e4:	68fb      	ldr	r3, [r7, #12]
 801c1e6:	68db      	ldr	r3, [r3, #12]
 801c1e8:	683a      	ldr	r2, [r7, #0]
 801c1ea:	429a      	cmp	r2, r3
 801c1ec:	d104      	bne.n	801c1f8 <tcp_pcb_remove+0x64>
 801c1ee:	683b      	ldr	r3, [r7, #0]
 801c1f0:	68da      	ldr	r2, [r3, #12]
 801c1f2:	68fb      	ldr	r3, [r7, #12]
 801c1f4:	60da      	str	r2, [r3, #12]
 801c1f6:	e005      	b.n	801c204 <tcp_pcb_remove+0x70>
 801c1f8:	68fb      	ldr	r3, [r7, #12]
 801c1fa:	68db      	ldr	r3, [r3, #12]
 801c1fc:	60fb      	str	r3, [r7, #12]
 801c1fe:	68fb      	ldr	r3, [r7, #12]
 801c200:	2b00      	cmp	r3, #0
 801c202:	d1ef      	bne.n	801c1e4 <tcp_pcb_remove+0x50>
 801c204:	683b      	ldr	r3, [r7, #0]
 801c206:	2200      	movs	r2, #0
 801c208:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 801c20a:	6838      	ldr	r0, [r7, #0]
 801c20c:	f7ff ff72 	bl	801c0f4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 801c210:	683b      	ldr	r3, [r7, #0]
 801c212:	7d1b      	ldrb	r3, [r3, #20]
 801c214:	2b0a      	cmp	r3, #10
 801c216:	d013      	beq.n	801c240 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 801c218:	683b      	ldr	r3, [r7, #0]
 801c21a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 801c21c:	2b01      	cmp	r3, #1
 801c21e:	d00f      	beq.n	801c240 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 801c220:	683b      	ldr	r3, [r7, #0]
 801c222:	8b5b      	ldrh	r3, [r3, #26]
 801c224:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 801c228:	2b00      	cmp	r3, #0
 801c22a:	d009      	beq.n	801c240 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 801c22c:	683b      	ldr	r3, [r7, #0]
 801c22e:	8b5b      	ldrh	r3, [r3, #26]
 801c230:	f043 0302 	orr.w	r3, r3, #2
 801c234:	b29a      	uxth	r2, r3
 801c236:	683b      	ldr	r3, [r7, #0]
 801c238:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801c23a:	6838      	ldr	r0, [r7, #0]
 801c23c:	f003 fbc6 	bl	801f9cc <tcp_output>
  }

  if (pcb->state != LISTEN) {
 801c240:	683b      	ldr	r3, [r7, #0]
 801c242:	7d1b      	ldrb	r3, [r3, #20]
 801c244:	2b01      	cmp	r3, #1
 801c246:	d020      	beq.n	801c28a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 801c248:	683b      	ldr	r3, [r7, #0]
 801c24a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c24c:	2b00      	cmp	r3, #0
 801c24e:	d006      	beq.n	801c25e <tcp_pcb_remove+0xca>
 801c250:	4b13      	ldr	r3, [pc, #76]	; (801c2a0 <tcp_pcb_remove+0x10c>)
 801c252:	f640 0293 	movw	r2, #2195	; 0x893
 801c256:	4916      	ldr	r1, [pc, #88]	; (801c2b0 <tcp_pcb_remove+0x11c>)
 801c258:	4813      	ldr	r0, [pc, #76]	; (801c2a8 <tcp_pcb_remove+0x114>)
 801c25a:	f00a fb37 	bl	80268cc <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801c25e:	683b      	ldr	r3, [r7, #0]
 801c260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c262:	2b00      	cmp	r3, #0
 801c264:	d006      	beq.n	801c274 <tcp_pcb_remove+0xe0>
 801c266:	4b0e      	ldr	r3, [pc, #56]	; (801c2a0 <tcp_pcb_remove+0x10c>)
 801c268:	f640 0294 	movw	r2, #2196	; 0x894
 801c26c:	4911      	ldr	r1, [pc, #68]	; (801c2b4 <tcp_pcb_remove+0x120>)
 801c26e:	480e      	ldr	r0, [pc, #56]	; (801c2a8 <tcp_pcb_remove+0x114>)
 801c270:	f00a fb2c 	bl	80268cc <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 801c274:	683b      	ldr	r3, [r7, #0]
 801c276:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c278:	2b00      	cmp	r3, #0
 801c27a:	d006      	beq.n	801c28a <tcp_pcb_remove+0xf6>
 801c27c:	4b08      	ldr	r3, [pc, #32]	; (801c2a0 <tcp_pcb_remove+0x10c>)
 801c27e:	f640 0296 	movw	r2, #2198	; 0x896
 801c282:	490d      	ldr	r1, [pc, #52]	; (801c2b8 <tcp_pcb_remove+0x124>)
 801c284:	4808      	ldr	r0, [pc, #32]	; (801c2a8 <tcp_pcb_remove+0x114>)
 801c286:	f00a fb21 	bl	80268cc <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 801c28a:	683b      	ldr	r3, [r7, #0]
 801c28c:	2200      	movs	r2, #0
 801c28e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 801c290:	683b      	ldr	r3, [r7, #0]
 801c292:	2200      	movs	r2, #0
 801c294:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801c296:	bf00      	nop
 801c298:	3710      	adds	r7, #16
 801c29a:	46bd      	mov	sp, r7
 801c29c:	bd80      	pop	{r7, pc}
 801c29e:	bf00      	nop
 801c2a0:	0802d3c0 	.word	0x0802d3c0
 801c2a4:	0802da28 	.word	0x0802da28
 801c2a8:	0802d404 	.word	0x0802d404
 801c2ac:	0802da44 	.word	0x0802da44
 801c2b0:	0802da64 	.word	0x0802da64
 801c2b4:	0802da7c 	.word	0x0802da7c
 801c2b8:	0802da98 	.word	0x0802da98

0801c2bc <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 801c2bc:	b580      	push	{r7, lr}
 801c2be:	b082      	sub	sp, #8
 801c2c0:	af00      	add	r7, sp, #0
 801c2c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 801c2c4:	687b      	ldr	r3, [r7, #4]
 801c2c6:	2b00      	cmp	r3, #0
 801c2c8:	d106      	bne.n	801c2d8 <tcp_next_iss+0x1c>
 801c2ca:	4b0a      	ldr	r3, [pc, #40]	; (801c2f4 <tcp_next_iss+0x38>)
 801c2cc:	f640 02af 	movw	r2, #2223	; 0x8af
 801c2d0:	4909      	ldr	r1, [pc, #36]	; (801c2f8 <tcp_next_iss+0x3c>)
 801c2d2:	480a      	ldr	r0, [pc, #40]	; (801c2fc <tcp_next_iss+0x40>)
 801c2d4:	f00a fafa 	bl	80268cc <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 801c2d8:	4b09      	ldr	r3, [pc, #36]	; (801c300 <tcp_next_iss+0x44>)
 801c2da:	681a      	ldr	r2, [r3, #0]
 801c2dc:	4b09      	ldr	r3, [pc, #36]	; (801c304 <tcp_next_iss+0x48>)
 801c2de:	681b      	ldr	r3, [r3, #0]
 801c2e0:	4413      	add	r3, r2
 801c2e2:	4a07      	ldr	r2, [pc, #28]	; (801c300 <tcp_next_iss+0x44>)
 801c2e4:	6013      	str	r3, [r2, #0]
  return iss;
 801c2e6:	4b06      	ldr	r3, [pc, #24]	; (801c300 <tcp_next_iss+0x44>)
 801c2e8:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801c2ea:	4618      	mov	r0, r3
 801c2ec:	3708      	adds	r7, #8
 801c2ee:	46bd      	mov	sp, r7
 801c2f0:	bd80      	pop	{r7, pc}
 801c2f2:	bf00      	nop
 801c2f4:	0802d3c0 	.word	0x0802d3c0
 801c2f8:	0802dab0 	.word	0x0802dab0
 801c2fc:	0802d404 	.word	0x0802d404
 801c300:	10000064 	.word	0x10000064
 801c304:	2001c100 	.word	0x2001c100

0801c308 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 801c308:	b580      	push	{r7, lr}
 801c30a:	b086      	sub	sp, #24
 801c30c:	af00      	add	r7, sp, #0
 801c30e:	4603      	mov	r3, r0
 801c310:	60b9      	str	r1, [r7, #8]
 801c312:	607a      	str	r2, [r7, #4]
 801c314:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801c316:	687b      	ldr	r3, [r7, #4]
 801c318:	2b00      	cmp	r3, #0
 801c31a:	d106      	bne.n	801c32a <tcp_eff_send_mss_netif+0x22>
 801c31c:	4b14      	ldr	r3, [pc, #80]	; (801c370 <tcp_eff_send_mss_netif+0x68>)
 801c31e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 801c322:	4914      	ldr	r1, [pc, #80]	; (801c374 <tcp_eff_send_mss_netif+0x6c>)
 801c324:	4814      	ldr	r0, [pc, #80]	; (801c378 <tcp_eff_send_mss_netif+0x70>)
 801c326:	f00a fad1 	bl	80268cc <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 801c32a:	68bb      	ldr	r3, [r7, #8]
 801c32c:	2b00      	cmp	r3, #0
 801c32e:	d101      	bne.n	801c334 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 801c330:	89fb      	ldrh	r3, [r7, #14]
 801c332:	e019      	b.n	801c368 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 801c334:	68bb      	ldr	r3, [r7, #8]
 801c336:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801c338:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801c33a:	8afb      	ldrh	r3, [r7, #22]
 801c33c:	2b00      	cmp	r3, #0
 801c33e:	d012      	beq.n	801c366 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 801c340:	2328      	movs	r3, #40	; 0x28
 801c342:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 801c344:	8afa      	ldrh	r2, [r7, #22]
 801c346:	8abb      	ldrh	r3, [r7, #20]
 801c348:	429a      	cmp	r2, r3
 801c34a:	d904      	bls.n	801c356 <tcp_eff_send_mss_netif+0x4e>
 801c34c:	8afa      	ldrh	r2, [r7, #22]
 801c34e:	8abb      	ldrh	r3, [r7, #20]
 801c350:	1ad3      	subs	r3, r2, r3
 801c352:	b29b      	uxth	r3, r3
 801c354:	e000      	b.n	801c358 <tcp_eff_send_mss_netif+0x50>
 801c356:	2300      	movs	r3, #0
 801c358:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801c35a:	8a7a      	ldrh	r2, [r7, #18]
 801c35c:	89fb      	ldrh	r3, [r7, #14]
 801c35e:	4293      	cmp	r3, r2
 801c360:	bf28      	it	cs
 801c362:	4613      	movcs	r3, r2
 801c364:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801c366:	89fb      	ldrh	r3, [r7, #14]
}
 801c368:	4618      	mov	r0, r3
 801c36a:	3718      	adds	r7, #24
 801c36c:	46bd      	mov	sp, r7
 801c36e:	bd80      	pop	{r7, pc}
 801c370:	0802d3c0 	.word	0x0802d3c0
 801c374:	0802dacc 	.word	0x0802dacc
 801c378:	0802d404 	.word	0x0802d404

0801c37c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 801c37c:	b580      	push	{r7, lr}
 801c37e:	b084      	sub	sp, #16
 801c380:	af00      	add	r7, sp, #0
 801c382:	6078      	str	r0, [r7, #4]
 801c384:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801c386:	683b      	ldr	r3, [r7, #0]
 801c388:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801c38a:	687b      	ldr	r3, [r7, #4]
 801c38c:	2b00      	cmp	r3, #0
 801c38e:	d119      	bne.n	801c3c4 <tcp_netif_ip_addr_changed_pcblist+0x48>
 801c390:	4b10      	ldr	r3, [pc, #64]	; (801c3d4 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 801c392:	f44f 6210 	mov.w	r2, #2304	; 0x900
 801c396:	4910      	ldr	r1, [pc, #64]	; (801c3d8 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 801c398:	4810      	ldr	r0, [pc, #64]	; (801c3dc <tcp_netif_ip_addr_changed_pcblist+0x60>)
 801c39a:	f00a fa97 	bl	80268cc <iprintf>

  while (pcb != NULL) {
 801c39e:	e011      	b.n	801c3c4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 801c3a0:	68fb      	ldr	r3, [r7, #12]
 801c3a2:	681a      	ldr	r2, [r3, #0]
 801c3a4:	687b      	ldr	r3, [r7, #4]
 801c3a6:	681b      	ldr	r3, [r3, #0]
 801c3a8:	429a      	cmp	r2, r3
 801c3aa:	d108      	bne.n	801c3be <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 801c3ac:	68fb      	ldr	r3, [r7, #12]
 801c3ae:	68db      	ldr	r3, [r3, #12]
 801c3b0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801c3b2:	68f8      	ldr	r0, [r7, #12]
 801c3b4:	f7fe fc08 	bl	801abc8 <tcp_abort>
      pcb = next;
 801c3b8:	68bb      	ldr	r3, [r7, #8]
 801c3ba:	60fb      	str	r3, [r7, #12]
 801c3bc:	e002      	b.n	801c3c4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 801c3be:	68fb      	ldr	r3, [r7, #12]
 801c3c0:	68db      	ldr	r3, [r3, #12]
 801c3c2:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 801c3c4:	68fb      	ldr	r3, [r7, #12]
 801c3c6:	2b00      	cmp	r3, #0
 801c3c8:	d1ea      	bne.n	801c3a0 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 801c3ca:	bf00      	nop
 801c3cc:	bf00      	nop
 801c3ce:	3710      	adds	r7, #16
 801c3d0:	46bd      	mov	sp, r7
 801c3d2:	bd80      	pop	{r7, pc}
 801c3d4:	0802d3c0 	.word	0x0802d3c0
 801c3d8:	0802daf4 	.word	0x0802daf4
 801c3dc:	0802d404 	.word	0x0802d404

0801c3e0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801c3e0:	b580      	push	{r7, lr}
 801c3e2:	b084      	sub	sp, #16
 801c3e4:	af00      	add	r7, sp, #0
 801c3e6:	6078      	str	r0, [r7, #4]
 801c3e8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 801c3ea:	687b      	ldr	r3, [r7, #4]
 801c3ec:	2b00      	cmp	r3, #0
 801c3ee:	d02a      	beq.n	801c446 <tcp_netif_ip_addr_changed+0x66>
 801c3f0:	687b      	ldr	r3, [r7, #4]
 801c3f2:	681b      	ldr	r3, [r3, #0]
 801c3f4:	2b00      	cmp	r3, #0
 801c3f6:	d026      	beq.n	801c446 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 801c3f8:	4b15      	ldr	r3, [pc, #84]	; (801c450 <tcp_netif_ip_addr_changed+0x70>)
 801c3fa:	681b      	ldr	r3, [r3, #0]
 801c3fc:	4619      	mov	r1, r3
 801c3fe:	6878      	ldr	r0, [r7, #4]
 801c400:	f7ff ffbc 	bl	801c37c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 801c404:	4b13      	ldr	r3, [pc, #76]	; (801c454 <tcp_netif_ip_addr_changed+0x74>)
 801c406:	681b      	ldr	r3, [r3, #0]
 801c408:	4619      	mov	r1, r3
 801c40a:	6878      	ldr	r0, [r7, #4]
 801c40c:	f7ff ffb6 	bl	801c37c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 801c410:	683b      	ldr	r3, [r7, #0]
 801c412:	2b00      	cmp	r3, #0
 801c414:	d017      	beq.n	801c446 <tcp_netif_ip_addr_changed+0x66>
 801c416:	683b      	ldr	r3, [r7, #0]
 801c418:	681b      	ldr	r3, [r3, #0]
 801c41a:	2b00      	cmp	r3, #0
 801c41c:	d013      	beq.n	801c446 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801c41e:	4b0e      	ldr	r3, [pc, #56]	; (801c458 <tcp_netif_ip_addr_changed+0x78>)
 801c420:	681b      	ldr	r3, [r3, #0]
 801c422:	60fb      	str	r3, [r7, #12]
 801c424:	e00c      	b.n	801c440 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801c426:	68fb      	ldr	r3, [r7, #12]
 801c428:	681a      	ldr	r2, [r3, #0]
 801c42a:	687b      	ldr	r3, [r7, #4]
 801c42c:	681b      	ldr	r3, [r3, #0]
 801c42e:	429a      	cmp	r2, r3
 801c430:	d103      	bne.n	801c43a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801c432:	683b      	ldr	r3, [r7, #0]
 801c434:	681a      	ldr	r2, [r3, #0]
 801c436:	68fb      	ldr	r3, [r7, #12]
 801c438:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801c43a:	68fb      	ldr	r3, [r7, #12]
 801c43c:	68db      	ldr	r3, [r3, #12]
 801c43e:	60fb      	str	r3, [r7, #12]
 801c440:	68fb      	ldr	r3, [r7, #12]
 801c442:	2b00      	cmp	r3, #0
 801c444:	d1ef      	bne.n	801c426 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801c446:	bf00      	nop
 801c448:	3710      	adds	r7, #16
 801c44a:	46bd      	mov	sp, r7
 801c44c:	bd80      	pop	{r7, pc}
 801c44e:	bf00      	nop
 801c450:	2001c0fc 	.word	0x2001c0fc
 801c454:	2001c108 	.word	0x2001c108
 801c458:	2001c104 	.word	0x2001c104

0801c45c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 801c45c:	b580      	push	{r7, lr}
 801c45e:	b082      	sub	sp, #8
 801c460:	af00      	add	r7, sp, #0
 801c462:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 801c464:	687b      	ldr	r3, [r7, #4]
 801c466:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c468:	2b00      	cmp	r3, #0
 801c46a:	d007      	beq.n	801c47c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 801c46c:	687b      	ldr	r3, [r7, #4]
 801c46e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c470:	4618      	mov	r0, r3
 801c472:	f7ff fb51 	bl	801bb18 <tcp_segs_free>
    pcb->ooseq = NULL;
 801c476:	687b      	ldr	r3, [r7, #4]
 801c478:	2200      	movs	r2, #0
 801c47a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 801c47c:	bf00      	nop
 801c47e:	3708      	adds	r7, #8
 801c480:	46bd      	mov	sp, r7
 801c482:	bd80      	pop	{r7, pc}

0801c484 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 801c484:	b590      	push	{r4, r7, lr}
 801c486:	b08d      	sub	sp, #52	; 0x34
 801c488:	af04      	add	r7, sp, #16
 801c48a:	6078      	str	r0, [r7, #4]
 801c48c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801c48e:	687b      	ldr	r3, [r7, #4]
 801c490:	2b00      	cmp	r3, #0
 801c492:	d105      	bne.n	801c4a0 <tcp_input+0x1c>
 801c494:	4b9b      	ldr	r3, [pc, #620]	; (801c704 <tcp_input+0x280>)
 801c496:	2283      	movs	r2, #131	; 0x83
 801c498:	499b      	ldr	r1, [pc, #620]	; (801c708 <tcp_input+0x284>)
 801c49a:	489c      	ldr	r0, [pc, #624]	; (801c70c <tcp_input+0x288>)
 801c49c:	f00a fa16 	bl	80268cc <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 801c4a0:	687b      	ldr	r3, [r7, #4]
 801c4a2:	685b      	ldr	r3, [r3, #4]
 801c4a4:	4a9a      	ldr	r2, [pc, #616]	; (801c710 <tcp_input+0x28c>)
 801c4a6:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 801c4a8:	687b      	ldr	r3, [r7, #4]
 801c4aa:	895b      	ldrh	r3, [r3, #10]
 801c4ac:	2b13      	cmp	r3, #19
 801c4ae:	f240 83d1 	bls.w	801cc54 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801c4b2:	4b98      	ldr	r3, [pc, #608]	; (801c714 <tcp_input+0x290>)
 801c4b4:	695b      	ldr	r3, [r3, #20]
 801c4b6:	4a97      	ldr	r2, [pc, #604]	; (801c714 <tcp_input+0x290>)
 801c4b8:	6812      	ldr	r2, [r2, #0]
 801c4ba:	4611      	mov	r1, r2
 801c4bc:	4618      	mov	r0, r3
 801c4be:	f008 fa8f 	bl	80249e0 <ip4_addr_isbroadcast_u32>
 801c4c2:	4603      	mov	r3, r0
 801c4c4:	2b00      	cmp	r3, #0
 801c4c6:	f040 83c7 	bne.w	801cc58 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801c4ca:	4b92      	ldr	r3, [pc, #584]	; (801c714 <tcp_input+0x290>)
 801c4cc:	695b      	ldr	r3, [r3, #20]
 801c4ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801c4d2:	2be0      	cmp	r3, #224	; 0xe0
 801c4d4:	f000 83c0 	beq.w	801cc58 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 801c4d8:	4b8d      	ldr	r3, [pc, #564]	; (801c710 <tcp_input+0x28c>)
 801c4da:	681b      	ldr	r3, [r3, #0]
 801c4dc:	899b      	ldrh	r3, [r3, #12]
 801c4de:	b29b      	uxth	r3, r3
 801c4e0:	4618      	mov	r0, r3
 801c4e2:	f7fc f953 	bl	801878c <lwip_htons>
 801c4e6:	4603      	mov	r3, r0
 801c4e8:	0b1b      	lsrs	r3, r3, #12
 801c4ea:	b29b      	uxth	r3, r3
 801c4ec:	b2db      	uxtb	r3, r3
 801c4ee:	009b      	lsls	r3, r3, #2
 801c4f0:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801c4f2:	7cbb      	ldrb	r3, [r7, #18]
 801c4f4:	2b13      	cmp	r3, #19
 801c4f6:	f240 83b1 	bls.w	801cc5c <tcp_input+0x7d8>
 801c4fa:	7cbb      	ldrb	r3, [r7, #18]
 801c4fc:	b29a      	uxth	r2, r3
 801c4fe:	687b      	ldr	r3, [r7, #4]
 801c500:	891b      	ldrh	r3, [r3, #8]
 801c502:	429a      	cmp	r2, r3
 801c504:	f200 83aa 	bhi.w	801cc5c <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801c508:	7cbb      	ldrb	r3, [r7, #18]
 801c50a:	b29b      	uxth	r3, r3
 801c50c:	3b14      	subs	r3, #20
 801c50e:	b29a      	uxth	r2, r3
 801c510:	4b81      	ldr	r3, [pc, #516]	; (801c718 <tcp_input+0x294>)
 801c512:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 801c514:	4b81      	ldr	r3, [pc, #516]	; (801c71c <tcp_input+0x298>)
 801c516:	2200      	movs	r2, #0
 801c518:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 801c51a:	687b      	ldr	r3, [r7, #4]
 801c51c:	895a      	ldrh	r2, [r3, #10]
 801c51e:	7cbb      	ldrb	r3, [r7, #18]
 801c520:	b29b      	uxth	r3, r3
 801c522:	429a      	cmp	r2, r3
 801c524:	d309      	bcc.n	801c53a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801c526:	4b7c      	ldr	r3, [pc, #496]	; (801c718 <tcp_input+0x294>)
 801c528:	881a      	ldrh	r2, [r3, #0]
 801c52a:	4b7d      	ldr	r3, [pc, #500]	; (801c720 <tcp_input+0x29c>)
 801c52c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801c52e:	7cbb      	ldrb	r3, [r7, #18]
 801c530:	4619      	mov	r1, r3
 801c532:	6878      	ldr	r0, [r7, #4]
 801c534:	f7fd fcba 	bl	8019eac <pbuf_remove_header>
 801c538:	e04e      	b.n	801c5d8 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801c53a:	687b      	ldr	r3, [r7, #4]
 801c53c:	681b      	ldr	r3, [r3, #0]
 801c53e:	2b00      	cmp	r3, #0
 801c540:	d105      	bne.n	801c54e <tcp_input+0xca>
 801c542:	4b70      	ldr	r3, [pc, #448]	; (801c704 <tcp_input+0x280>)
 801c544:	22c2      	movs	r2, #194	; 0xc2
 801c546:	4977      	ldr	r1, [pc, #476]	; (801c724 <tcp_input+0x2a0>)
 801c548:	4870      	ldr	r0, [pc, #448]	; (801c70c <tcp_input+0x288>)
 801c54a:	f00a f9bf 	bl	80268cc <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 801c54e:	2114      	movs	r1, #20
 801c550:	6878      	ldr	r0, [r7, #4]
 801c552:	f7fd fcab 	bl	8019eac <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801c556:	687b      	ldr	r3, [r7, #4]
 801c558:	895a      	ldrh	r2, [r3, #10]
 801c55a:	4b71      	ldr	r3, [pc, #452]	; (801c720 <tcp_input+0x29c>)
 801c55c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801c55e:	4b6e      	ldr	r3, [pc, #440]	; (801c718 <tcp_input+0x294>)
 801c560:	881a      	ldrh	r2, [r3, #0]
 801c562:	4b6f      	ldr	r3, [pc, #444]	; (801c720 <tcp_input+0x29c>)
 801c564:	881b      	ldrh	r3, [r3, #0]
 801c566:	1ad3      	subs	r3, r2, r3
 801c568:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801c56a:	4b6d      	ldr	r3, [pc, #436]	; (801c720 <tcp_input+0x29c>)
 801c56c:	881b      	ldrh	r3, [r3, #0]
 801c56e:	4619      	mov	r1, r3
 801c570:	6878      	ldr	r0, [r7, #4]
 801c572:	f7fd fc9b 	bl	8019eac <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801c576:	687b      	ldr	r3, [r7, #4]
 801c578:	681b      	ldr	r3, [r3, #0]
 801c57a:	895b      	ldrh	r3, [r3, #10]
 801c57c:	8a3a      	ldrh	r2, [r7, #16]
 801c57e:	429a      	cmp	r2, r3
 801c580:	f200 836e 	bhi.w	801cc60 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801c584:	687b      	ldr	r3, [r7, #4]
 801c586:	681b      	ldr	r3, [r3, #0]
 801c588:	685b      	ldr	r3, [r3, #4]
 801c58a:	4a64      	ldr	r2, [pc, #400]	; (801c71c <tcp_input+0x298>)
 801c58c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 801c58e:	687b      	ldr	r3, [r7, #4]
 801c590:	681b      	ldr	r3, [r3, #0]
 801c592:	8a3a      	ldrh	r2, [r7, #16]
 801c594:	4611      	mov	r1, r2
 801c596:	4618      	mov	r0, r3
 801c598:	f7fd fc88 	bl	8019eac <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 801c59c:	687b      	ldr	r3, [r7, #4]
 801c59e:	891a      	ldrh	r2, [r3, #8]
 801c5a0:	8a3b      	ldrh	r3, [r7, #16]
 801c5a2:	1ad3      	subs	r3, r2, r3
 801c5a4:	b29a      	uxth	r2, r3
 801c5a6:	687b      	ldr	r3, [r7, #4]
 801c5a8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801c5aa:	687b      	ldr	r3, [r7, #4]
 801c5ac:	895b      	ldrh	r3, [r3, #10]
 801c5ae:	2b00      	cmp	r3, #0
 801c5b0:	d005      	beq.n	801c5be <tcp_input+0x13a>
 801c5b2:	4b54      	ldr	r3, [pc, #336]	; (801c704 <tcp_input+0x280>)
 801c5b4:	22df      	movs	r2, #223	; 0xdf
 801c5b6:	495c      	ldr	r1, [pc, #368]	; (801c728 <tcp_input+0x2a4>)
 801c5b8:	4854      	ldr	r0, [pc, #336]	; (801c70c <tcp_input+0x288>)
 801c5ba:	f00a f987 	bl	80268cc <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801c5be:	687b      	ldr	r3, [r7, #4]
 801c5c0:	891a      	ldrh	r2, [r3, #8]
 801c5c2:	687b      	ldr	r3, [r7, #4]
 801c5c4:	681b      	ldr	r3, [r3, #0]
 801c5c6:	891b      	ldrh	r3, [r3, #8]
 801c5c8:	429a      	cmp	r2, r3
 801c5ca:	d005      	beq.n	801c5d8 <tcp_input+0x154>
 801c5cc:	4b4d      	ldr	r3, [pc, #308]	; (801c704 <tcp_input+0x280>)
 801c5ce:	22e0      	movs	r2, #224	; 0xe0
 801c5d0:	4956      	ldr	r1, [pc, #344]	; (801c72c <tcp_input+0x2a8>)
 801c5d2:	484e      	ldr	r0, [pc, #312]	; (801c70c <tcp_input+0x288>)
 801c5d4:	f00a f97a 	bl	80268cc <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 801c5d8:	4b4d      	ldr	r3, [pc, #308]	; (801c710 <tcp_input+0x28c>)
 801c5da:	681b      	ldr	r3, [r3, #0]
 801c5dc:	881b      	ldrh	r3, [r3, #0]
 801c5de:	b29b      	uxth	r3, r3
 801c5e0:	4a4b      	ldr	r2, [pc, #300]	; (801c710 <tcp_input+0x28c>)
 801c5e2:	6814      	ldr	r4, [r2, #0]
 801c5e4:	4618      	mov	r0, r3
 801c5e6:	f7fc f8d1 	bl	801878c <lwip_htons>
 801c5ea:	4603      	mov	r3, r0
 801c5ec:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801c5ee:	4b48      	ldr	r3, [pc, #288]	; (801c710 <tcp_input+0x28c>)
 801c5f0:	681b      	ldr	r3, [r3, #0]
 801c5f2:	885b      	ldrh	r3, [r3, #2]
 801c5f4:	b29b      	uxth	r3, r3
 801c5f6:	4a46      	ldr	r2, [pc, #280]	; (801c710 <tcp_input+0x28c>)
 801c5f8:	6814      	ldr	r4, [r2, #0]
 801c5fa:	4618      	mov	r0, r3
 801c5fc:	f7fc f8c6 	bl	801878c <lwip_htons>
 801c600:	4603      	mov	r3, r0
 801c602:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801c604:	4b42      	ldr	r3, [pc, #264]	; (801c710 <tcp_input+0x28c>)
 801c606:	681b      	ldr	r3, [r3, #0]
 801c608:	685b      	ldr	r3, [r3, #4]
 801c60a:	4a41      	ldr	r2, [pc, #260]	; (801c710 <tcp_input+0x28c>)
 801c60c:	6814      	ldr	r4, [r2, #0]
 801c60e:	4618      	mov	r0, r3
 801c610:	f7fc f8d1 	bl	80187b6 <lwip_htonl>
 801c614:	4603      	mov	r3, r0
 801c616:	6063      	str	r3, [r4, #4]
 801c618:	6863      	ldr	r3, [r4, #4]
 801c61a:	4a45      	ldr	r2, [pc, #276]	; (801c730 <tcp_input+0x2ac>)
 801c61c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801c61e:	4b3c      	ldr	r3, [pc, #240]	; (801c710 <tcp_input+0x28c>)
 801c620:	681b      	ldr	r3, [r3, #0]
 801c622:	689b      	ldr	r3, [r3, #8]
 801c624:	4a3a      	ldr	r2, [pc, #232]	; (801c710 <tcp_input+0x28c>)
 801c626:	6814      	ldr	r4, [r2, #0]
 801c628:	4618      	mov	r0, r3
 801c62a:	f7fc f8c4 	bl	80187b6 <lwip_htonl>
 801c62e:	4603      	mov	r3, r0
 801c630:	60a3      	str	r3, [r4, #8]
 801c632:	68a3      	ldr	r3, [r4, #8]
 801c634:	4a3f      	ldr	r2, [pc, #252]	; (801c734 <tcp_input+0x2b0>)
 801c636:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801c638:	4b35      	ldr	r3, [pc, #212]	; (801c710 <tcp_input+0x28c>)
 801c63a:	681b      	ldr	r3, [r3, #0]
 801c63c:	89db      	ldrh	r3, [r3, #14]
 801c63e:	b29b      	uxth	r3, r3
 801c640:	4a33      	ldr	r2, [pc, #204]	; (801c710 <tcp_input+0x28c>)
 801c642:	6814      	ldr	r4, [r2, #0]
 801c644:	4618      	mov	r0, r3
 801c646:	f7fc f8a1 	bl	801878c <lwip_htons>
 801c64a:	4603      	mov	r3, r0
 801c64c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801c64e:	4b30      	ldr	r3, [pc, #192]	; (801c710 <tcp_input+0x28c>)
 801c650:	681b      	ldr	r3, [r3, #0]
 801c652:	899b      	ldrh	r3, [r3, #12]
 801c654:	b29b      	uxth	r3, r3
 801c656:	4618      	mov	r0, r3
 801c658:	f7fc f898 	bl	801878c <lwip_htons>
 801c65c:	4603      	mov	r3, r0
 801c65e:	b2db      	uxtb	r3, r3
 801c660:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801c664:	b2da      	uxtb	r2, r3
 801c666:	4b34      	ldr	r3, [pc, #208]	; (801c738 <tcp_input+0x2b4>)
 801c668:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801c66a:	687b      	ldr	r3, [r7, #4]
 801c66c:	891a      	ldrh	r2, [r3, #8]
 801c66e:	4b33      	ldr	r3, [pc, #204]	; (801c73c <tcp_input+0x2b8>)
 801c670:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801c672:	4b31      	ldr	r3, [pc, #196]	; (801c738 <tcp_input+0x2b4>)
 801c674:	781b      	ldrb	r3, [r3, #0]
 801c676:	f003 0303 	and.w	r3, r3, #3
 801c67a:	2b00      	cmp	r3, #0
 801c67c:	d00c      	beq.n	801c698 <tcp_input+0x214>
    tcplen++;
 801c67e:	4b2f      	ldr	r3, [pc, #188]	; (801c73c <tcp_input+0x2b8>)
 801c680:	881b      	ldrh	r3, [r3, #0]
 801c682:	3301      	adds	r3, #1
 801c684:	b29a      	uxth	r2, r3
 801c686:	4b2d      	ldr	r3, [pc, #180]	; (801c73c <tcp_input+0x2b8>)
 801c688:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801c68a:	687b      	ldr	r3, [r7, #4]
 801c68c:	891a      	ldrh	r2, [r3, #8]
 801c68e:	4b2b      	ldr	r3, [pc, #172]	; (801c73c <tcp_input+0x2b8>)
 801c690:	881b      	ldrh	r3, [r3, #0]
 801c692:	429a      	cmp	r2, r3
 801c694:	f200 82e6 	bhi.w	801cc64 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 801c698:	2300      	movs	r3, #0
 801c69a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801c69c:	4b28      	ldr	r3, [pc, #160]	; (801c740 <tcp_input+0x2bc>)
 801c69e:	681b      	ldr	r3, [r3, #0]
 801c6a0:	61fb      	str	r3, [r7, #28]
 801c6a2:	e09d      	b.n	801c7e0 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801c6a4:	69fb      	ldr	r3, [r7, #28]
 801c6a6:	7d1b      	ldrb	r3, [r3, #20]
 801c6a8:	2b00      	cmp	r3, #0
 801c6aa:	d105      	bne.n	801c6b8 <tcp_input+0x234>
 801c6ac:	4b15      	ldr	r3, [pc, #84]	; (801c704 <tcp_input+0x280>)
 801c6ae:	22fb      	movs	r2, #251	; 0xfb
 801c6b0:	4924      	ldr	r1, [pc, #144]	; (801c744 <tcp_input+0x2c0>)
 801c6b2:	4816      	ldr	r0, [pc, #88]	; (801c70c <tcp_input+0x288>)
 801c6b4:	f00a f90a 	bl	80268cc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801c6b8:	69fb      	ldr	r3, [r7, #28]
 801c6ba:	7d1b      	ldrb	r3, [r3, #20]
 801c6bc:	2b0a      	cmp	r3, #10
 801c6be:	d105      	bne.n	801c6cc <tcp_input+0x248>
 801c6c0:	4b10      	ldr	r3, [pc, #64]	; (801c704 <tcp_input+0x280>)
 801c6c2:	22fc      	movs	r2, #252	; 0xfc
 801c6c4:	4920      	ldr	r1, [pc, #128]	; (801c748 <tcp_input+0x2c4>)
 801c6c6:	4811      	ldr	r0, [pc, #68]	; (801c70c <tcp_input+0x288>)
 801c6c8:	f00a f900 	bl	80268cc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801c6cc:	69fb      	ldr	r3, [r7, #28]
 801c6ce:	7d1b      	ldrb	r3, [r3, #20]
 801c6d0:	2b01      	cmp	r3, #1
 801c6d2:	d105      	bne.n	801c6e0 <tcp_input+0x25c>
 801c6d4:	4b0b      	ldr	r3, [pc, #44]	; (801c704 <tcp_input+0x280>)
 801c6d6:	22fd      	movs	r2, #253	; 0xfd
 801c6d8:	491c      	ldr	r1, [pc, #112]	; (801c74c <tcp_input+0x2c8>)
 801c6da:	480c      	ldr	r0, [pc, #48]	; (801c70c <tcp_input+0x288>)
 801c6dc:	f00a f8f6 	bl	80268cc <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801c6e0:	69fb      	ldr	r3, [r7, #28]
 801c6e2:	7a1b      	ldrb	r3, [r3, #8]
 801c6e4:	2b00      	cmp	r3, #0
 801c6e6:	d033      	beq.n	801c750 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801c6e8:	69fb      	ldr	r3, [r7, #28]
 801c6ea:	7a1a      	ldrb	r2, [r3, #8]
 801c6ec:	4b09      	ldr	r3, [pc, #36]	; (801c714 <tcp_input+0x290>)
 801c6ee:	685b      	ldr	r3, [r3, #4]
 801c6f0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801c6f4:	3301      	adds	r3, #1
 801c6f6:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801c6f8:	429a      	cmp	r2, r3
 801c6fa:	d029      	beq.n	801c750 <tcp_input+0x2cc>
      prev = pcb;
 801c6fc:	69fb      	ldr	r3, [r7, #28]
 801c6fe:	61bb      	str	r3, [r7, #24]
      continue;
 801c700:	e06b      	b.n	801c7da <tcp_input+0x356>
 801c702:	bf00      	nop
 801c704:	0802db28 	.word	0x0802db28
 801c708:	0802db5c 	.word	0x0802db5c
 801c70c:	0802db74 	.word	0x0802db74
 801c710:	20013c3c 	.word	0x20013c3c
 801c714:	20017b68 	.word	0x20017b68
 801c718:	20013c40 	.word	0x20013c40
 801c71c:	20013c44 	.word	0x20013c44
 801c720:	20013c42 	.word	0x20013c42
 801c724:	0802db9c 	.word	0x0802db9c
 801c728:	0802dbac 	.word	0x0802dbac
 801c72c:	0802dbb8 	.word	0x0802dbb8
 801c730:	20013c4c 	.word	0x20013c4c
 801c734:	20013c50 	.word	0x20013c50
 801c738:	20013c58 	.word	0x20013c58
 801c73c:	20013c56 	.word	0x20013c56
 801c740:	2001c0fc 	.word	0x2001c0fc
 801c744:	0802dbd8 	.word	0x0802dbd8
 801c748:	0802dc00 	.word	0x0802dc00
 801c74c:	0802dc2c 	.word	0x0802dc2c
    }

    if (pcb->remote_port == tcphdr->src &&
 801c750:	69fb      	ldr	r3, [r7, #28]
 801c752:	8b1a      	ldrh	r2, [r3, #24]
 801c754:	4b72      	ldr	r3, [pc, #456]	; (801c920 <tcp_input+0x49c>)
 801c756:	681b      	ldr	r3, [r3, #0]
 801c758:	881b      	ldrh	r3, [r3, #0]
 801c75a:	b29b      	uxth	r3, r3
 801c75c:	429a      	cmp	r2, r3
 801c75e:	d13a      	bne.n	801c7d6 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 801c760:	69fb      	ldr	r3, [r7, #28]
 801c762:	8ada      	ldrh	r2, [r3, #22]
 801c764:	4b6e      	ldr	r3, [pc, #440]	; (801c920 <tcp_input+0x49c>)
 801c766:	681b      	ldr	r3, [r3, #0]
 801c768:	885b      	ldrh	r3, [r3, #2]
 801c76a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 801c76c:	429a      	cmp	r2, r3
 801c76e:	d132      	bne.n	801c7d6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801c770:	69fb      	ldr	r3, [r7, #28]
 801c772:	685a      	ldr	r2, [r3, #4]
 801c774:	4b6b      	ldr	r3, [pc, #428]	; (801c924 <tcp_input+0x4a0>)
 801c776:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 801c778:	429a      	cmp	r2, r3
 801c77a:	d12c      	bne.n	801c7d6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801c77c:	69fb      	ldr	r3, [r7, #28]
 801c77e:	681a      	ldr	r2, [r3, #0]
 801c780:	4b68      	ldr	r3, [pc, #416]	; (801c924 <tcp_input+0x4a0>)
 801c782:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801c784:	429a      	cmp	r2, r3
 801c786:	d126      	bne.n	801c7d6 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801c788:	69fb      	ldr	r3, [r7, #28]
 801c78a:	68db      	ldr	r3, [r3, #12]
 801c78c:	69fa      	ldr	r2, [r7, #28]
 801c78e:	429a      	cmp	r2, r3
 801c790:	d106      	bne.n	801c7a0 <tcp_input+0x31c>
 801c792:	4b65      	ldr	r3, [pc, #404]	; (801c928 <tcp_input+0x4a4>)
 801c794:	f240 120d 	movw	r2, #269	; 0x10d
 801c798:	4964      	ldr	r1, [pc, #400]	; (801c92c <tcp_input+0x4a8>)
 801c79a:	4865      	ldr	r0, [pc, #404]	; (801c930 <tcp_input+0x4ac>)
 801c79c:	f00a f896 	bl	80268cc <iprintf>
      if (prev != NULL) {
 801c7a0:	69bb      	ldr	r3, [r7, #24]
 801c7a2:	2b00      	cmp	r3, #0
 801c7a4:	d00a      	beq.n	801c7bc <tcp_input+0x338>
        prev->next = pcb->next;
 801c7a6:	69fb      	ldr	r3, [r7, #28]
 801c7a8:	68da      	ldr	r2, [r3, #12]
 801c7aa:	69bb      	ldr	r3, [r7, #24]
 801c7ac:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 801c7ae:	4b61      	ldr	r3, [pc, #388]	; (801c934 <tcp_input+0x4b0>)
 801c7b0:	681a      	ldr	r2, [r3, #0]
 801c7b2:	69fb      	ldr	r3, [r7, #28]
 801c7b4:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801c7b6:	4a5f      	ldr	r2, [pc, #380]	; (801c934 <tcp_input+0x4b0>)
 801c7b8:	69fb      	ldr	r3, [r7, #28]
 801c7ba:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801c7bc:	69fb      	ldr	r3, [r7, #28]
 801c7be:	68db      	ldr	r3, [r3, #12]
 801c7c0:	69fa      	ldr	r2, [r7, #28]
 801c7c2:	429a      	cmp	r2, r3
 801c7c4:	d111      	bne.n	801c7ea <tcp_input+0x366>
 801c7c6:	4b58      	ldr	r3, [pc, #352]	; (801c928 <tcp_input+0x4a4>)
 801c7c8:	f240 1215 	movw	r2, #277	; 0x115
 801c7cc:	495a      	ldr	r1, [pc, #360]	; (801c938 <tcp_input+0x4b4>)
 801c7ce:	4858      	ldr	r0, [pc, #352]	; (801c930 <tcp_input+0x4ac>)
 801c7d0:	f00a f87c 	bl	80268cc <iprintf>
      break;
 801c7d4:	e009      	b.n	801c7ea <tcp_input+0x366>
    }
    prev = pcb;
 801c7d6:	69fb      	ldr	r3, [r7, #28]
 801c7d8:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801c7da:	69fb      	ldr	r3, [r7, #28]
 801c7dc:	68db      	ldr	r3, [r3, #12]
 801c7de:	61fb      	str	r3, [r7, #28]
 801c7e0:	69fb      	ldr	r3, [r7, #28]
 801c7e2:	2b00      	cmp	r3, #0
 801c7e4:	f47f af5e 	bne.w	801c6a4 <tcp_input+0x220>
 801c7e8:	e000      	b.n	801c7ec <tcp_input+0x368>
      break;
 801c7ea:	bf00      	nop
  }

  if (pcb == NULL) {
 801c7ec:	69fb      	ldr	r3, [r7, #28]
 801c7ee:	2b00      	cmp	r3, #0
 801c7f0:	f040 80aa 	bne.w	801c948 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801c7f4:	4b51      	ldr	r3, [pc, #324]	; (801c93c <tcp_input+0x4b8>)
 801c7f6:	681b      	ldr	r3, [r3, #0]
 801c7f8:	61fb      	str	r3, [r7, #28]
 801c7fa:	e03f      	b.n	801c87c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801c7fc:	69fb      	ldr	r3, [r7, #28]
 801c7fe:	7d1b      	ldrb	r3, [r3, #20]
 801c800:	2b0a      	cmp	r3, #10
 801c802:	d006      	beq.n	801c812 <tcp_input+0x38e>
 801c804:	4b48      	ldr	r3, [pc, #288]	; (801c928 <tcp_input+0x4a4>)
 801c806:	f240 121f 	movw	r2, #287	; 0x11f
 801c80a:	494d      	ldr	r1, [pc, #308]	; (801c940 <tcp_input+0x4bc>)
 801c80c:	4848      	ldr	r0, [pc, #288]	; (801c930 <tcp_input+0x4ac>)
 801c80e:	f00a f85d 	bl	80268cc <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801c812:	69fb      	ldr	r3, [r7, #28]
 801c814:	7a1b      	ldrb	r3, [r3, #8]
 801c816:	2b00      	cmp	r3, #0
 801c818:	d009      	beq.n	801c82e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801c81a:	69fb      	ldr	r3, [r7, #28]
 801c81c:	7a1a      	ldrb	r2, [r3, #8]
 801c81e:	4b41      	ldr	r3, [pc, #260]	; (801c924 <tcp_input+0x4a0>)
 801c820:	685b      	ldr	r3, [r3, #4]
 801c822:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801c826:	3301      	adds	r3, #1
 801c828:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801c82a:	429a      	cmp	r2, r3
 801c82c:	d122      	bne.n	801c874 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 801c82e:	69fb      	ldr	r3, [r7, #28]
 801c830:	8b1a      	ldrh	r2, [r3, #24]
 801c832:	4b3b      	ldr	r3, [pc, #236]	; (801c920 <tcp_input+0x49c>)
 801c834:	681b      	ldr	r3, [r3, #0]
 801c836:	881b      	ldrh	r3, [r3, #0]
 801c838:	b29b      	uxth	r3, r3
 801c83a:	429a      	cmp	r2, r3
 801c83c:	d11b      	bne.n	801c876 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 801c83e:	69fb      	ldr	r3, [r7, #28]
 801c840:	8ada      	ldrh	r2, [r3, #22]
 801c842:	4b37      	ldr	r3, [pc, #220]	; (801c920 <tcp_input+0x49c>)
 801c844:	681b      	ldr	r3, [r3, #0]
 801c846:	885b      	ldrh	r3, [r3, #2]
 801c848:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801c84a:	429a      	cmp	r2, r3
 801c84c:	d113      	bne.n	801c876 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801c84e:	69fb      	ldr	r3, [r7, #28]
 801c850:	685a      	ldr	r2, [r3, #4]
 801c852:	4b34      	ldr	r3, [pc, #208]	; (801c924 <tcp_input+0x4a0>)
 801c854:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801c856:	429a      	cmp	r2, r3
 801c858:	d10d      	bne.n	801c876 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801c85a:	69fb      	ldr	r3, [r7, #28]
 801c85c:	681a      	ldr	r2, [r3, #0]
 801c85e:	4b31      	ldr	r3, [pc, #196]	; (801c924 <tcp_input+0x4a0>)
 801c860:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801c862:	429a      	cmp	r2, r3
 801c864:	d107      	bne.n	801c876 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801c866:	69f8      	ldr	r0, [r7, #28]
 801c868:	f000 fb56 	bl	801cf18 <tcp_timewait_input>
        }
        pbuf_free(p);
 801c86c:	6878      	ldr	r0, [r7, #4]
 801c86e:	f7fd fba3 	bl	8019fb8 <pbuf_free>
        return;
 801c872:	e1fd      	b.n	801cc70 <tcp_input+0x7ec>
        continue;
 801c874:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801c876:	69fb      	ldr	r3, [r7, #28]
 801c878:	68db      	ldr	r3, [r3, #12]
 801c87a:	61fb      	str	r3, [r7, #28]
 801c87c:	69fb      	ldr	r3, [r7, #28]
 801c87e:	2b00      	cmp	r3, #0
 801c880:	d1bc      	bne.n	801c7fc <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 801c882:	2300      	movs	r3, #0
 801c884:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801c886:	4b2f      	ldr	r3, [pc, #188]	; (801c944 <tcp_input+0x4c0>)
 801c888:	681b      	ldr	r3, [r3, #0]
 801c88a:	617b      	str	r3, [r7, #20]
 801c88c:	e02a      	b.n	801c8e4 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801c88e:	697b      	ldr	r3, [r7, #20]
 801c890:	7a1b      	ldrb	r3, [r3, #8]
 801c892:	2b00      	cmp	r3, #0
 801c894:	d00c      	beq.n	801c8b0 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801c896:	697b      	ldr	r3, [r7, #20]
 801c898:	7a1a      	ldrb	r2, [r3, #8]
 801c89a:	4b22      	ldr	r3, [pc, #136]	; (801c924 <tcp_input+0x4a0>)
 801c89c:	685b      	ldr	r3, [r3, #4]
 801c89e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801c8a2:	3301      	adds	r3, #1
 801c8a4:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801c8a6:	429a      	cmp	r2, r3
 801c8a8:	d002      	beq.n	801c8b0 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801c8aa:	697b      	ldr	r3, [r7, #20]
 801c8ac:	61bb      	str	r3, [r7, #24]
        continue;
 801c8ae:	e016      	b.n	801c8de <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 801c8b0:	697b      	ldr	r3, [r7, #20]
 801c8b2:	8ada      	ldrh	r2, [r3, #22]
 801c8b4:	4b1a      	ldr	r3, [pc, #104]	; (801c920 <tcp_input+0x49c>)
 801c8b6:	681b      	ldr	r3, [r3, #0]
 801c8b8:	885b      	ldrh	r3, [r3, #2]
 801c8ba:	b29b      	uxth	r3, r3
 801c8bc:	429a      	cmp	r2, r3
 801c8be:	d10c      	bne.n	801c8da <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801c8c0:	697b      	ldr	r3, [r7, #20]
 801c8c2:	681a      	ldr	r2, [r3, #0]
 801c8c4:	4b17      	ldr	r3, [pc, #92]	; (801c924 <tcp_input+0x4a0>)
 801c8c6:	695b      	ldr	r3, [r3, #20]
 801c8c8:	429a      	cmp	r2, r3
 801c8ca:	d00f      	beq.n	801c8ec <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 801c8cc:	697b      	ldr	r3, [r7, #20]
 801c8ce:	2b00      	cmp	r3, #0
 801c8d0:	d00d      	beq.n	801c8ee <tcp_input+0x46a>
 801c8d2:	697b      	ldr	r3, [r7, #20]
 801c8d4:	681b      	ldr	r3, [r3, #0]
 801c8d6:	2b00      	cmp	r3, #0
 801c8d8:	d009      	beq.n	801c8ee <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801c8da:	697b      	ldr	r3, [r7, #20]
 801c8dc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801c8de:	697b      	ldr	r3, [r7, #20]
 801c8e0:	68db      	ldr	r3, [r3, #12]
 801c8e2:	617b      	str	r3, [r7, #20]
 801c8e4:	697b      	ldr	r3, [r7, #20]
 801c8e6:	2b00      	cmp	r3, #0
 801c8e8:	d1d1      	bne.n	801c88e <tcp_input+0x40a>
 801c8ea:	e000      	b.n	801c8ee <tcp_input+0x46a>
            break;
 801c8ec:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 801c8ee:	697b      	ldr	r3, [r7, #20]
 801c8f0:	2b00      	cmp	r3, #0
 801c8f2:	d029      	beq.n	801c948 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 801c8f4:	69bb      	ldr	r3, [r7, #24]
 801c8f6:	2b00      	cmp	r3, #0
 801c8f8:	d00a      	beq.n	801c910 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801c8fa:	697b      	ldr	r3, [r7, #20]
 801c8fc:	68da      	ldr	r2, [r3, #12]
 801c8fe:	69bb      	ldr	r3, [r7, #24]
 801c900:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801c902:	4b10      	ldr	r3, [pc, #64]	; (801c944 <tcp_input+0x4c0>)
 801c904:	681a      	ldr	r2, [r3, #0]
 801c906:	697b      	ldr	r3, [r7, #20]
 801c908:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801c90a:	4a0e      	ldr	r2, [pc, #56]	; (801c944 <tcp_input+0x4c0>)
 801c90c:	697b      	ldr	r3, [r7, #20]
 801c90e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 801c910:	6978      	ldr	r0, [r7, #20]
 801c912:	f000 fa03 	bl	801cd1c <tcp_listen_input>
      }
      pbuf_free(p);
 801c916:	6878      	ldr	r0, [r7, #4]
 801c918:	f7fd fb4e 	bl	8019fb8 <pbuf_free>
      return;
 801c91c:	e1a8      	b.n	801cc70 <tcp_input+0x7ec>
 801c91e:	bf00      	nop
 801c920:	20013c3c 	.word	0x20013c3c
 801c924:	20017b68 	.word	0x20017b68
 801c928:	0802db28 	.word	0x0802db28
 801c92c:	0802dc54 	.word	0x0802dc54
 801c930:	0802db74 	.word	0x0802db74
 801c934:	2001c0fc 	.word	0x2001c0fc
 801c938:	0802dc80 	.word	0x0802dc80
 801c93c:	2001c10c 	.word	0x2001c10c
 801c940:	0802dcac 	.word	0x0802dcac
 801c944:	2001c104 	.word	0x2001c104
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 801c948:	69fb      	ldr	r3, [r7, #28]
 801c94a:	2b00      	cmp	r3, #0
 801c94c:	f000 8158 	beq.w	801cc00 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 801c950:	4b95      	ldr	r3, [pc, #596]	; (801cba8 <tcp_input+0x724>)
 801c952:	2200      	movs	r2, #0
 801c954:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 801c956:	687b      	ldr	r3, [r7, #4]
 801c958:	891a      	ldrh	r2, [r3, #8]
 801c95a:	4b93      	ldr	r3, [pc, #588]	; (801cba8 <tcp_input+0x724>)
 801c95c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801c95e:	4a92      	ldr	r2, [pc, #584]	; (801cba8 <tcp_input+0x724>)
 801c960:	687b      	ldr	r3, [r7, #4]
 801c962:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 801c964:	4b91      	ldr	r3, [pc, #580]	; (801cbac <tcp_input+0x728>)
 801c966:	681b      	ldr	r3, [r3, #0]
 801c968:	4a8f      	ldr	r2, [pc, #572]	; (801cba8 <tcp_input+0x724>)
 801c96a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 801c96c:	4b90      	ldr	r3, [pc, #576]	; (801cbb0 <tcp_input+0x72c>)
 801c96e:	2200      	movs	r2, #0
 801c970:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 801c972:	4b90      	ldr	r3, [pc, #576]	; (801cbb4 <tcp_input+0x730>)
 801c974:	2200      	movs	r2, #0
 801c976:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 801c978:	4b8f      	ldr	r3, [pc, #572]	; (801cbb8 <tcp_input+0x734>)
 801c97a:	2200      	movs	r2, #0
 801c97c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801c97e:	4b8f      	ldr	r3, [pc, #572]	; (801cbbc <tcp_input+0x738>)
 801c980:	781b      	ldrb	r3, [r3, #0]
 801c982:	f003 0308 	and.w	r3, r3, #8
 801c986:	2b00      	cmp	r3, #0
 801c988:	d006      	beq.n	801c998 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 801c98a:	687b      	ldr	r3, [r7, #4]
 801c98c:	7b5b      	ldrb	r3, [r3, #13]
 801c98e:	f043 0301 	orr.w	r3, r3, #1
 801c992:	b2da      	uxtb	r2, r3
 801c994:	687b      	ldr	r3, [r7, #4]
 801c996:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 801c998:	69fb      	ldr	r3, [r7, #28]
 801c99a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801c99c:	2b00      	cmp	r3, #0
 801c99e:	d017      	beq.n	801c9d0 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801c9a0:	69f8      	ldr	r0, [r7, #28]
 801c9a2:	f7ff f83d 	bl	801ba20 <tcp_process_refused_data>
 801c9a6:	4603      	mov	r3, r0
 801c9a8:	f113 0f0d 	cmn.w	r3, #13
 801c9ac:	d007      	beq.n	801c9be <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801c9ae:	69fb      	ldr	r3, [r7, #28]
 801c9b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801c9b2:	2b00      	cmp	r3, #0
 801c9b4:	d00c      	beq.n	801c9d0 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801c9b6:	4b82      	ldr	r3, [pc, #520]	; (801cbc0 <tcp_input+0x73c>)
 801c9b8:	881b      	ldrh	r3, [r3, #0]
 801c9ba:	2b00      	cmp	r3, #0
 801c9bc:	d008      	beq.n	801c9d0 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 801c9be:	69fb      	ldr	r3, [r7, #28]
 801c9c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801c9c2:	2b00      	cmp	r3, #0
 801c9c4:	f040 80e3 	bne.w	801cb8e <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 801c9c8:	69f8      	ldr	r0, [r7, #28]
 801c9ca:	f003 fe05 	bl	80205d8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 801c9ce:	e0de      	b.n	801cb8e <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 801c9d0:	4a7c      	ldr	r2, [pc, #496]	; (801cbc4 <tcp_input+0x740>)
 801c9d2:	69fb      	ldr	r3, [r7, #28]
 801c9d4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801c9d6:	69f8      	ldr	r0, [r7, #28]
 801c9d8:	f000 fb18 	bl	801d00c <tcp_process>
 801c9dc:	4603      	mov	r3, r0
 801c9de:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 801c9e0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801c9e4:	f113 0f0d 	cmn.w	r3, #13
 801c9e8:	f000 80d3 	beq.w	801cb92 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 801c9ec:	4b71      	ldr	r3, [pc, #452]	; (801cbb4 <tcp_input+0x730>)
 801c9ee:	781b      	ldrb	r3, [r3, #0]
 801c9f0:	f003 0308 	and.w	r3, r3, #8
 801c9f4:	2b00      	cmp	r3, #0
 801c9f6:	d015      	beq.n	801ca24 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 801c9f8:	69fb      	ldr	r3, [r7, #28]
 801c9fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c9fe:	2b00      	cmp	r3, #0
 801ca00:	d008      	beq.n	801ca14 <tcp_input+0x590>
 801ca02:	69fb      	ldr	r3, [r7, #28]
 801ca04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801ca08:	69fa      	ldr	r2, [r7, #28]
 801ca0a:	6912      	ldr	r2, [r2, #16]
 801ca0c:	f06f 010d 	mvn.w	r1, #13
 801ca10:	4610      	mov	r0, r2
 801ca12:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801ca14:	69f9      	ldr	r1, [r7, #28]
 801ca16:	486c      	ldr	r0, [pc, #432]	; (801cbc8 <tcp_input+0x744>)
 801ca18:	f7ff fbbc 	bl	801c194 <tcp_pcb_remove>
        tcp_free(pcb);
 801ca1c:	69f8      	ldr	r0, [r7, #28]
 801ca1e:	f7fd fdeb 	bl	801a5f8 <tcp_free>
 801ca22:	e0da      	b.n	801cbda <tcp_input+0x756>
      } else {
        err = ERR_OK;
 801ca24:	2300      	movs	r3, #0
 801ca26:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 801ca28:	4b63      	ldr	r3, [pc, #396]	; (801cbb8 <tcp_input+0x734>)
 801ca2a:	881b      	ldrh	r3, [r3, #0]
 801ca2c:	2b00      	cmp	r3, #0
 801ca2e:	d01d      	beq.n	801ca6c <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 801ca30:	4b61      	ldr	r3, [pc, #388]	; (801cbb8 <tcp_input+0x734>)
 801ca32:	881b      	ldrh	r3, [r3, #0]
 801ca34:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801ca36:	69fb      	ldr	r3, [r7, #28]
 801ca38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801ca3c:	2b00      	cmp	r3, #0
 801ca3e:	d00a      	beq.n	801ca56 <tcp_input+0x5d2>
 801ca40:	69fb      	ldr	r3, [r7, #28]
 801ca42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801ca46:	69fa      	ldr	r2, [r7, #28]
 801ca48:	6910      	ldr	r0, [r2, #16]
 801ca4a:	89fa      	ldrh	r2, [r7, #14]
 801ca4c:	69f9      	ldr	r1, [r7, #28]
 801ca4e:	4798      	blx	r3
 801ca50:	4603      	mov	r3, r0
 801ca52:	74fb      	strb	r3, [r7, #19]
 801ca54:	e001      	b.n	801ca5a <tcp_input+0x5d6>
 801ca56:	2300      	movs	r3, #0
 801ca58:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801ca5a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801ca5e:	f113 0f0d 	cmn.w	r3, #13
 801ca62:	f000 8098 	beq.w	801cb96 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 801ca66:	4b54      	ldr	r3, [pc, #336]	; (801cbb8 <tcp_input+0x734>)
 801ca68:	2200      	movs	r2, #0
 801ca6a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 801ca6c:	69f8      	ldr	r0, [r7, #28]
 801ca6e:	f000 f915 	bl	801cc9c <tcp_input_delayed_close>
 801ca72:	4603      	mov	r3, r0
 801ca74:	2b00      	cmp	r3, #0
 801ca76:	f040 8090 	bne.w	801cb9a <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801ca7a:	4b4d      	ldr	r3, [pc, #308]	; (801cbb0 <tcp_input+0x72c>)
 801ca7c:	681b      	ldr	r3, [r3, #0]
 801ca7e:	2b00      	cmp	r3, #0
 801ca80:	d041      	beq.n	801cb06 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801ca82:	69fb      	ldr	r3, [r7, #28]
 801ca84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801ca86:	2b00      	cmp	r3, #0
 801ca88:	d006      	beq.n	801ca98 <tcp_input+0x614>
 801ca8a:	4b50      	ldr	r3, [pc, #320]	; (801cbcc <tcp_input+0x748>)
 801ca8c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801ca90:	494f      	ldr	r1, [pc, #316]	; (801cbd0 <tcp_input+0x74c>)
 801ca92:	4850      	ldr	r0, [pc, #320]	; (801cbd4 <tcp_input+0x750>)
 801ca94:	f009 ff1a 	bl	80268cc <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801ca98:	69fb      	ldr	r3, [r7, #28]
 801ca9a:	8b5b      	ldrh	r3, [r3, #26]
 801ca9c:	f003 0310 	and.w	r3, r3, #16
 801caa0:	2b00      	cmp	r3, #0
 801caa2:	d008      	beq.n	801cab6 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 801caa4:	4b42      	ldr	r3, [pc, #264]	; (801cbb0 <tcp_input+0x72c>)
 801caa6:	681b      	ldr	r3, [r3, #0]
 801caa8:	4618      	mov	r0, r3
 801caaa:	f7fd fa85 	bl	8019fb8 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801caae:	69f8      	ldr	r0, [r7, #28]
 801cab0:	f7fe f88a 	bl	801abc8 <tcp_abort>
            goto aborted;
 801cab4:	e091      	b.n	801cbda <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801cab6:	69fb      	ldr	r3, [r7, #28]
 801cab8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801cabc:	2b00      	cmp	r3, #0
 801cabe:	d00c      	beq.n	801cada <tcp_input+0x656>
 801cac0:	69fb      	ldr	r3, [r7, #28]
 801cac2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801cac6:	69fb      	ldr	r3, [r7, #28]
 801cac8:	6918      	ldr	r0, [r3, #16]
 801caca:	4b39      	ldr	r3, [pc, #228]	; (801cbb0 <tcp_input+0x72c>)
 801cacc:	681a      	ldr	r2, [r3, #0]
 801cace:	2300      	movs	r3, #0
 801cad0:	69f9      	ldr	r1, [r7, #28]
 801cad2:	47a0      	blx	r4
 801cad4:	4603      	mov	r3, r0
 801cad6:	74fb      	strb	r3, [r7, #19]
 801cad8:	e008      	b.n	801caec <tcp_input+0x668>
 801cada:	4b35      	ldr	r3, [pc, #212]	; (801cbb0 <tcp_input+0x72c>)
 801cadc:	681a      	ldr	r2, [r3, #0]
 801cade:	2300      	movs	r3, #0
 801cae0:	69f9      	ldr	r1, [r7, #28]
 801cae2:	2000      	movs	r0, #0
 801cae4:	f7ff f890 	bl	801bc08 <tcp_recv_null>
 801cae8:	4603      	mov	r3, r0
 801caea:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 801caec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801caf0:	f113 0f0d 	cmn.w	r3, #13
 801caf4:	d053      	beq.n	801cb9e <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801caf6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801cafa:	2b00      	cmp	r3, #0
 801cafc:	d003      	beq.n	801cb06 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801cafe:	4b2c      	ldr	r3, [pc, #176]	; (801cbb0 <tcp_input+0x72c>)
 801cb00:	681a      	ldr	r2, [r3, #0]
 801cb02:	69fb      	ldr	r3, [r7, #28]
 801cb04:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801cb06:	4b2b      	ldr	r3, [pc, #172]	; (801cbb4 <tcp_input+0x730>)
 801cb08:	781b      	ldrb	r3, [r3, #0]
 801cb0a:	f003 0320 	and.w	r3, r3, #32
 801cb0e:	2b00      	cmp	r3, #0
 801cb10:	d030      	beq.n	801cb74 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 801cb12:	69fb      	ldr	r3, [r7, #28]
 801cb14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801cb16:	2b00      	cmp	r3, #0
 801cb18:	d009      	beq.n	801cb2e <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801cb1a:	69fb      	ldr	r3, [r7, #28]
 801cb1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801cb1e:	7b5a      	ldrb	r2, [r3, #13]
 801cb20:	69fb      	ldr	r3, [r7, #28]
 801cb22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801cb24:	f042 0220 	orr.w	r2, r2, #32
 801cb28:	b2d2      	uxtb	r2, r2
 801cb2a:	735a      	strb	r2, [r3, #13]
 801cb2c:	e022      	b.n	801cb74 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801cb2e:	69fb      	ldr	r3, [r7, #28]
 801cb30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801cb32:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801cb36:	d005      	beq.n	801cb44 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 801cb38:	69fb      	ldr	r3, [r7, #28]
 801cb3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801cb3c:	3301      	adds	r3, #1
 801cb3e:	b29a      	uxth	r2, r3
 801cb40:	69fb      	ldr	r3, [r7, #28]
 801cb42:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 801cb44:	69fb      	ldr	r3, [r7, #28]
 801cb46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801cb4a:	2b00      	cmp	r3, #0
 801cb4c:	d00b      	beq.n	801cb66 <tcp_input+0x6e2>
 801cb4e:	69fb      	ldr	r3, [r7, #28]
 801cb50:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801cb54:	69fb      	ldr	r3, [r7, #28]
 801cb56:	6918      	ldr	r0, [r3, #16]
 801cb58:	2300      	movs	r3, #0
 801cb5a:	2200      	movs	r2, #0
 801cb5c:	69f9      	ldr	r1, [r7, #28]
 801cb5e:	47a0      	blx	r4
 801cb60:	4603      	mov	r3, r0
 801cb62:	74fb      	strb	r3, [r7, #19]
 801cb64:	e001      	b.n	801cb6a <tcp_input+0x6e6>
 801cb66:	2300      	movs	r3, #0
 801cb68:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801cb6a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801cb6e:	f113 0f0d 	cmn.w	r3, #13
 801cb72:	d016      	beq.n	801cba2 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 801cb74:	4b13      	ldr	r3, [pc, #76]	; (801cbc4 <tcp_input+0x740>)
 801cb76:	2200      	movs	r2, #0
 801cb78:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801cb7a:	69f8      	ldr	r0, [r7, #28]
 801cb7c:	f000 f88e 	bl	801cc9c <tcp_input_delayed_close>
 801cb80:	4603      	mov	r3, r0
 801cb82:	2b00      	cmp	r3, #0
 801cb84:	d128      	bne.n	801cbd8 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801cb86:	69f8      	ldr	r0, [r7, #28]
 801cb88:	f002 ff20 	bl	801f9cc <tcp_output>
 801cb8c:	e025      	b.n	801cbda <tcp_input+0x756>
        goto aborted;
 801cb8e:	bf00      	nop
 801cb90:	e023      	b.n	801cbda <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 801cb92:	bf00      	nop
 801cb94:	e021      	b.n	801cbda <tcp_input+0x756>
              goto aborted;
 801cb96:	bf00      	nop
 801cb98:	e01f      	b.n	801cbda <tcp_input+0x756>
          goto aborted;
 801cb9a:	bf00      	nop
 801cb9c:	e01d      	b.n	801cbda <tcp_input+0x756>
            goto aborted;
 801cb9e:	bf00      	nop
 801cba0:	e01b      	b.n	801cbda <tcp_input+0x756>
              goto aborted;
 801cba2:	bf00      	nop
 801cba4:	e019      	b.n	801cbda <tcp_input+0x756>
 801cba6:	bf00      	nop
 801cba8:	20013c2c 	.word	0x20013c2c
 801cbac:	20013c3c 	.word	0x20013c3c
 801cbb0:	20013c5c 	.word	0x20013c5c
 801cbb4:	20013c59 	.word	0x20013c59
 801cbb8:	20013c54 	.word	0x20013c54
 801cbbc:	20013c58 	.word	0x20013c58
 801cbc0:	20013c56 	.word	0x20013c56
 801cbc4:	2001c110 	.word	0x2001c110
 801cbc8:	2001c0fc 	.word	0x2001c0fc
 801cbcc:	0802db28 	.word	0x0802db28
 801cbd0:	0802dcdc 	.word	0x0802dcdc
 801cbd4:	0802db74 	.word	0x0802db74
          goto aborted;
 801cbd8:	bf00      	nop
    tcp_input_pcb = NULL;
 801cbda:	4b27      	ldr	r3, [pc, #156]	; (801cc78 <tcp_input+0x7f4>)
 801cbdc:	2200      	movs	r2, #0
 801cbde:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 801cbe0:	4b26      	ldr	r3, [pc, #152]	; (801cc7c <tcp_input+0x7f8>)
 801cbe2:	2200      	movs	r2, #0
 801cbe4:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 801cbe6:	4b26      	ldr	r3, [pc, #152]	; (801cc80 <tcp_input+0x7fc>)
 801cbe8:	685b      	ldr	r3, [r3, #4]
 801cbea:	2b00      	cmp	r3, #0
 801cbec:	d03f      	beq.n	801cc6e <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 801cbee:	4b24      	ldr	r3, [pc, #144]	; (801cc80 <tcp_input+0x7fc>)
 801cbf0:	685b      	ldr	r3, [r3, #4]
 801cbf2:	4618      	mov	r0, r3
 801cbf4:	f7fd f9e0 	bl	8019fb8 <pbuf_free>
      inseg.p = NULL;
 801cbf8:	4b21      	ldr	r3, [pc, #132]	; (801cc80 <tcp_input+0x7fc>)
 801cbfa:	2200      	movs	r2, #0
 801cbfc:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 801cbfe:	e036      	b.n	801cc6e <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801cc00:	4b20      	ldr	r3, [pc, #128]	; (801cc84 <tcp_input+0x800>)
 801cc02:	681b      	ldr	r3, [r3, #0]
 801cc04:	899b      	ldrh	r3, [r3, #12]
 801cc06:	b29b      	uxth	r3, r3
 801cc08:	4618      	mov	r0, r3
 801cc0a:	f7fb fdbf 	bl	801878c <lwip_htons>
 801cc0e:	4603      	mov	r3, r0
 801cc10:	b2db      	uxtb	r3, r3
 801cc12:	f003 0304 	and.w	r3, r3, #4
 801cc16:	2b00      	cmp	r3, #0
 801cc18:	d118      	bne.n	801cc4c <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801cc1a:	4b1b      	ldr	r3, [pc, #108]	; (801cc88 <tcp_input+0x804>)
 801cc1c:	6819      	ldr	r1, [r3, #0]
 801cc1e:	4b1b      	ldr	r3, [pc, #108]	; (801cc8c <tcp_input+0x808>)
 801cc20:	881b      	ldrh	r3, [r3, #0]
 801cc22:	461a      	mov	r2, r3
 801cc24:	4b1a      	ldr	r3, [pc, #104]	; (801cc90 <tcp_input+0x80c>)
 801cc26:	681b      	ldr	r3, [r3, #0]
 801cc28:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801cc2a:	4b16      	ldr	r3, [pc, #88]	; (801cc84 <tcp_input+0x800>)
 801cc2c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801cc2e:	885b      	ldrh	r3, [r3, #2]
 801cc30:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801cc32:	4a14      	ldr	r2, [pc, #80]	; (801cc84 <tcp_input+0x800>)
 801cc34:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801cc36:	8812      	ldrh	r2, [r2, #0]
 801cc38:	b292      	uxth	r2, r2
 801cc3a:	9202      	str	r2, [sp, #8]
 801cc3c:	9301      	str	r3, [sp, #4]
 801cc3e:	4b15      	ldr	r3, [pc, #84]	; (801cc94 <tcp_input+0x810>)
 801cc40:	9300      	str	r3, [sp, #0]
 801cc42:	4b15      	ldr	r3, [pc, #84]	; (801cc98 <tcp_input+0x814>)
 801cc44:	4602      	mov	r2, r0
 801cc46:	2000      	movs	r0, #0
 801cc48:	f003 fc74 	bl	8020534 <tcp_rst>
    pbuf_free(p);
 801cc4c:	6878      	ldr	r0, [r7, #4]
 801cc4e:	f7fd f9b3 	bl	8019fb8 <pbuf_free>
  return;
 801cc52:	e00c      	b.n	801cc6e <tcp_input+0x7ea>
    goto dropped;
 801cc54:	bf00      	nop
 801cc56:	e006      	b.n	801cc66 <tcp_input+0x7e2>
    goto dropped;
 801cc58:	bf00      	nop
 801cc5a:	e004      	b.n	801cc66 <tcp_input+0x7e2>
    goto dropped;
 801cc5c:	bf00      	nop
 801cc5e:	e002      	b.n	801cc66 <tcp_input+0x7e2>
      goto dropped;
 801cc60:	bf00      	nop
 801cc62:	e000      	b.n	801cc66 <tcp_input+0x7e2>
      goto dropped;
 801cc64:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 801cc66:	6878      	ldr	r0, [r7, #4]
 801cc68:	f7fd f9a6 	bl	8019fb8 <pbuf_free>
 801cc6c:	e000      	b.n	801cc70 <tcp_input+0x7ec>
  return;
 801cc6e:	bf00      	nop
}
 801cc70:	3724      	adds	r7, #36	; 0x24
 801cc72:	46bd      	mov	sp, r7
 801cc74:	bd90      	pop	{r4, r7, pc}
 801cc76:	bf00      	nop
 801cc78:	2001c110 	.word	0x2001c110
 801cc7c:	20013c5c 	.word	0x20013c5c
 801cc80:	20013c2c 	.word	0x20013c2c
 801cc84:	20013c3c 	.word	0x20013c3c
 801cc88:	20013c50 	.word	0x20013c50
 801cc8c:	20013c56 	.word	0x20013c56
 801cc90:	20013c4c 	.word	0x20013c4c
 801cc94:	20017b78 	.word	0x20017b78
 801cc98:	20017b7c 	.word	0x20017b7c

0801cc9c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 801cc9c:	b580      	push	{r7, lr}
 801cc9e:	b082      	sub	sp, #8
 801cca0:	af00      	add	r7, sp, #0
 801cca2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801cca4:	687b      	ldr	r3, [r7, #4]
 801cca6:	2b00      	cmp	r3, #0
 801cca8:	d106      	bne.n	801ccb8 <tcp_input_delayed_close+0x1c>
 801ccaa:	4b17      	ldr	r3, [pc, #92]	; (801cd08 <tcp_input_delayed_close+0x6c>)
 801ccac:	f240 225a 	movw	r2, #602	; 0x25a
 801ccb0:	4916      	ldr	r1, [pc, #88]	; (801cd0c <tcp_input_delayed_close+0x70>)
 801ccb2:	4817      	ldr	r0, [pc, #92]	; (801cd10 <tcp_input_delayed_close+0x74>)
 801ccb4:	f009 fe0a 	bl	80268cc <iprintf>

  if (recv_flags & TF_CLOSED) {
 801ccb8:	4b16      	ldr	r3, [pc, #88]	; (801cd14 <tcp_input_delayed_close+0x78>)
 801ccba:	781b      	ldrb	r3, [r3, #0]
 801ccbc:	f003 0310 	and.w	r3, r3, #16
 801ccc0:	2b00      	cmp	r3, #0
 801ccc2:	d01c      	beq.n	801ccfe <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 801ccc4:	687b      	ldr	r3, [r7, #4]
 801ccc6:	8b5b      	ldrh	r3, [r3, #26]
 801ccc8:	f003 0310 	and.w	r3, r3, #16
 801cccc:	2b00      	cmp	r3, #0
 801ccce:	d10d      	bne.n	801ccec <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 801ccd0:	687b      	ldr	r3, [r7, #4]
 801ccd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801ccd6:	2b00      	cmp	r3, #0
 801ccd8:	d008      	beq.n	801ccec <tcp_input_delayed_close+0x50>
 801ccda:	687b      	ldr	r3, [r7, #4]
 801ccdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801cce0:	687a      	ldr	r2, [r7, #4]
 801cce2:	6912      	ldr	r2, [r2, #16]
 801cce4:	f06f 010e 	mvn.w	r1, #14
 801cce8:	4610      	mov	r0, r2
 801ccea:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801ccec:	6879      	ldr	r1, [r7, #4]
 801ccee:	480a      	ldr	r0, [pc, #40]	; (801cd18 <tcp_input_delayed_close+0x7c>)
 801ccf0:	f7ff fa50 	bl	801c194 <tcp_pcb_remove>
    tcp_free(pcb);
 801ccf4:	6878      	ldr	r0, [r7, #4]
 801ccf6:	f7fd fc7f 	bl	801a5f8 <tcp_free>
    return 1;
 801ccfa:	2301      	movs	r3, #1
 801ccfc:	e000      	b.n	801cd00 <tcp_input_delayed_close+0x64>
  }
  return 0;
 801ccfe:	2300      	movs	r3, #0
}
 801cd00:	4618      	mov	r0, r3
 801cd02:	3708      	adds	r7, #8
 801cd04:	46bd      	mov	sp, r7
 801cd06:	bd80      	pop	{r7, pc}
 801cd08:	0802db28 	.word	0x0802db28
 801cd0c:	0802dcf8 	.word	0x0802dcf8
 801cd10:	0802db74 	.word	0x0802db74
 801cd14:	20013c59 	.word	0x20013c59
 801cd18:	2001c0fc 	.word	0x2001c0fc

0801cd1c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 801cd1c:	b590      	push	{r4, r7, lr}
 801cd1e:	b08b      	sub	sp, #44	; 0x2c
 801cd20:	af04      	add	r7, sp, #16
 801cd22:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 801cd24:	4b6f      	ldr	r3, [pc, #444]	; (801cee4 <tcp_listen_input+0x1c8>)
 801cd26:	781b      	ldrb	r3, [r3, #0]
 801cd28:	f003 0304 	and.w	r3, r3, #4
 801cd2c:	2b00      	cmp	r3, #0
 801cd2e:	f040 80d2 	bne.w	801ced6 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 801cd32:	687b      	ldr	r3, [r7, #4]
 801cd34:	2b00      	cmp	r3, #0
 801cd36:	d106      	bne.n	801cd46 <tcp_listen_input+0x2a>
 801cd38:	4b6b      	ldr	r3, [pc, #428]	; (801cee8 <tcp_listen_input+0x1cc>)
 801cd3a:	f240 2281 	movw	r2, #641	; 0x281
 801cd3e:	496b      	ldr	r1, [pc, #428]	; (801ceec <tcp_listen_input+0x1d0>)
 801cd40:	486b      	ldr	r0, [pc, #428]	; (801cef0 <tcp_listen_input+0x1d4>)
 801cd42:	f009 fdc3 	bl	80268cc <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801cd46:	4b67      	ldr	r3, [pc, #412]	; (801cee4 <tcp_listen_input+0x1c8>)
 801cd48:	781b      	ldrb	r3, [r3, #0]
 801cd4a:	f003 0310 	and.w	r3, r3, #16
 801cd4e:	2b00      	cmp	r3, #0
 801cd50:	d019      	beq.n	801cd86 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801cd52:	4b68      	ldr	r3, [pc, #416]	; (801cef4 <tcp_listen_input+0x1d8>)
 801cd54:	6819      	ldr	r1, [r3, #0]
 801cd56:	4b68      	ldr	r3, [pc, #416]	; (801cef8 <tcp_listen_input+0x1dc>)
 801cd58:	881b      	ldrh	r3, [r3, #0]
 801cd5a:	461a      	mov	r2, r3
 801cd5c:	4b67      	ldr	r3, [pc, #412]	; (801cefc <tcp_listen_input+0x1e0>)
 801cd5e:	681b      	ldr	r3, [r3, #0]
 801cd60:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801cd62:	4b67      	ldr	r3, [pc, #412]	; (801cf00 <tcp_listen_input+0x1e4>)
 801cd64:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801cd66:	885b      	ldrh	r3, [r3, #2]
 801cd68:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801cd6a:	4a65      	ldr	r2, [pc, #404]	; (801cf00 <tcp_listen_input+0x1e4>)
 801cd6c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801cd6e:	8812      	ldrh	r2, [r2, #0]
 801cd70:	b292      	uxth	r2, r2
 801cd72:	9202      	str	r2, [sp, #8]
 801cd74:	9301      	str	r3, [sp, #4]
 801cd76:	4b63      	ldr	r3, [pc, #396]	; (801cf04 <tcp_listen_input+0x1e8>)
 801cd78:	9300      	str	r3, [sp, #0]
 801cd7a:	4b63      	ldr	r3, [pc, #396]	; (801cf08 <tcp_listen_input+0x1ec>)
 801cd7c:	4602      	mov	r2, r0
 801cd7e:	6878      	ldr	r0, [r7, #4]
 801cd80:	f003 fbd8 	bl	8020534 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 801cd84:	e0a9      	b.n	801ceda <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801cd86:	4b57      	ldr	r3, [pc, #348]	; (801cee4 <tcp_listen_input+0x1c8>)
 801cd88:	781b      	ldrb	r3, [r3, #0]
 801cd8a:	f003 0302 	and.w	r3, r3, #2
 801cd8e:	2b00      	cmp	r3, #0
 801cd90:	f000 80a3 	beq.w	801ceda <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 801cd94:	687b      	ldr	r3, [r7, #4]
 801cd96:	7d5b      	ldrb	r3, [r3, #21]
 801cd98:	4618      	mov	r0, r3
 801cd9a:	f7ff f859 	bl	801be50 <tcp_alloc>
 801cd9e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 801cda0:	697b      	ldr	r3, [r7, #20]
 801cda2:	2b00      	cmp	r3, #0
 801cda4:	d111      	bne.n	801cdca <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801cda6:	687b      	ldr	r3, [r7, #4]
 801cda8:	699b      	ldr	r3, [r3, #24]
 801cdaa:	2b00      	cmp	r3, #0
 801cdac:	d00a      	beq.n	801cdc4 <tcp_listen_input+0xa8>
 801cdae:	687b      	ldr	r3, [r7, #4]
 801cdb0:	699b      	ldr	r3, [r3, #24]
 801cdb2:	687a      	ldr	r2, [r7, #4]
 801cdb4:	6910      	ldr	r0, [r2, #16]
 801cdb6:	f04f 32ff 	mov.w	r2, #4294967295
 801cdba:	2100      	movs	r1, #0
 801cdbc:	4798      	blx	r3
 801cdbe:	4603      	mov	r3, r0
 801cdc0:	73bb      	strb	r3, [r7, #14]
      return;
 801cdc2:	e08b      	b.n	801cedc <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801cdc4:	23f0      	movs	r3, #240	; 0xf0
 801cdc6:	73bb      	strb	r3, [r7, #14]
      return;
 801cdc8:	e088      	b.n	801cedc <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801cdca:	4b50      	ldr	r3, [pc, #320]	; (801cf0c <tcp_listen_input+0x1f0>)
 801cdcc:	695a      	ldr	r2, [r3, #20]
 801cdce:	697b      	ldr	r3, [r7, #20]
 801cdd0:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801cdd2:	4b4e      	ldr	r3, [pc, #312]	; (801cf0c <tcp_listen_input+0x1f0>)
 801cdd4:	691a      	ldr	r2, [r3, #16]
 801cdd6:	697b      	ldr	r3, [r7, #20]
 801cdd8:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801cdda:	687b      	ldr	r3, [r7, #4]
 801cddc:	8ada      	ldrh	r2, [r3, #22]
 801cdde:	697b      	ldr	r3, [r7, #20]
 801cde0:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801cde2:	4b47      	ldr	r3, [pc, #284]	; (801cf00 <tcp_listen_input+0x1e4>)
 801cde4:	681b      	ldr	r3, [r3, #0]
 801cde6:	881b      	ldrh	r3, [r3, #0]
 801cde8:	b29a      	uxth	r2, r3
 801cdea:	697b      	ldr	r3, [r7, #20]
 801cdec:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801cdee:	697b      	ldr	r3, [r7, #20]
 801cdf0:	2203      	movs	r2, #3
 801cdf2:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 801cdf4:	4b41      	ldr	r3, [pc, #260]	; (801cefc <tcp_listen_input+0x1e0>)
 801cdf6:	681b      	ldr	r3, [r3, #0]
 801cdf8:	1c5a      	adds	r2, r3, #1
 801cdfa:	697b      	ldr	r3, [r7, #20]
 801cdfc:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801cdfe:	697b      	ldr	r3, [r7, #20]
 801ce00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801ce02:	697b      	ldr	r3, [r7, #20]
 801ce04:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 801ce06:	6978      	ldr	r0, [r7, #20]
 801ce08:	f7ff fa58 	bl	801c2bc <tcp_next_iss>
 801ce0c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801ce0e:	697b      	ldr	r3, [r7, #20]
 801ce10:	693a      	ldr	r2, [r7, #16]
 801ce12:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 801ce14:	697b      	ldr	r3, [r7, #20]
 801ce16:	693a      	ldr	r2, [r7, #16]
 801ce18:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 801ce1a:	697b      	ldr	r3, [r7, #20]
 801ce1c:	693a      	ldr	r2, [r7, #16]
 801ce1e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 801ce20:	697b      	ldr	r3, [r7, #20]
 801ce22:	693a      	ldr	r2, [r7, #16]
 801ce24:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801ce26:	4b35      	ldr	r3, [pc, #212]	; (801cefc <tcp_listen_input+0x1e0>)
 801ce28:	681b      	ldr	r3, [r3, #0]
 801ce2a:	1e5a      	subs	r2, r3, #1
 801ce2c:	697b      	ldr	r3, [r7, #20]
 801ce2e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 801ce30:	687b      	ldr	r3, [r7, #4]
 801ce32:	691a      	ldr	r2, [r3, #16]
 801ce34:	697b      	ldr	r3, [r7, #20]
 801ce36:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 801ce38:	697b      	ldr	r3, [r7, #20]
 801ce3a:	687a      	ldr	r2, [r7, #4]
 801ce3c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801ce3e:	687b      	ldr	r3, [r7, #4]
 801ce40:	7a5b      	ldrb	r3, [r3, #9]
 801ce42:	f003 030c 	and.w	r3, r3, #12
 801ce46:	b2da      	uxtb	r2, r3
 801ce48:	697b      	ldr	r3, [r7, #20]
 801ce4a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 801ce4c:	687b      	ldr	r3, [r7, #4]
 801ce4e:	7a1a      	ldrb	r2, [r3, #8]
 801ce50:	697b      	ldr	r3, [r7, #20]
 801ce52:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 801ce54:	4b2e      	ldr	r3, [pc, #184]	; (801cf10 <tcp_listen_input+0x1f4>)
 801ce56:	681a      	ldr	r2, [r3, #0]
 801ce58:	697b      	ldr	r3, [r7, #20]
 801ce5a:	60da      	str	r2, [r3, #12]
 801ce5c:	4a2c      	ldr	r2, [pc, #176]	; (801cf10 <tcp_listen_input+0x1f4>)
 801ce5e:	697b      	ldr	r3, [r7, #20]
 801ce60:	6013      	str	r3, [r2, #0]
 801ce62:	f003 fd29 	bl	80208b8 <tcp_timer_needed>
 801ce66:	4b2b      	ldr	r3, [pc, #172]	; (801cf14 <tcp_listen_input+0x1f8>)
 801ce68:	2201      	movs	r2, #1
 801ce6a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 801ce6c:	6978      	ldr	r0, [r7, #20]
 801ce6e:	f001 fd8f 	bl	801e990 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801ce72:	4b23      	ldr	r3, [pc, #140]	; (801cf00 <tcp_listen_input+0x1e4>)
 801ce74:	681b      	ldr	r3, [r3, #0]
 801ce76:	89db      	ldrh	r3, [r3, #14]
 801ce78:	b29a      	uxth	r2, r3
 801ce7a:	697b      	ldr	r3, [r7, #20]
 801ce7c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 801ce80:	697b      	ldr	r3, [r7, #20]
 801ce82:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801ce86:	697b      	ldr	r3, [r7, #20]
 801ce88:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801ce8c:	697b      	ldr	r3, [r7, #20]
 801ce8e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801ce90:	697b      	ldr	r3, [r7, #20]
 801ce92:	3304      	adds	r3, #4
 801ce94:	4618      	mov	r0, r3
 801ce96:	f007 faef 	bl	8024478 <ip4_route>
 801ce9a:	4601      	mov	r1, r0
 801ce9c:	697b      	ldr	r3, [r7, #20]
 801ce9e:	3304      	adds	r3, #4
 801cea0:	461a      	mov	r2, r3
 801cea2:	4620      	mov	r0, r4
 801cea4:	f7ff fa30 	bl	801c308 <tcp_eff_send_mss_netif>
 801cea8:	4603      	mov	r3, r0
 801ceaa:	461a      	mov	r2, r3
 801ceac:	697b      	ldr	r3, [r7, #20]
 801ceae:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801ceb0:	2112      	movs	r1, #18
 801ceb2:	6978      	ldr	r0, [r7, #20]
 801ceb4:	f002 fc9c 	bl	801f7f0 <tcp_enqueue_flags>
 801ceb8:	4603      	mov	r3, r0
 801ceba:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 801cebc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801cec0:	2b00      	cmp	r3, #0
 801cec2:	d004      	beq.n	801cece <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 801cec4:	2100      	movs	r1, #0
 801cec6:	6978      	ldr	r0, [r7, #20]
 801cec8:	f7fd fdc0 	bl	801aa4c <tcp_abandon>
      return;
 801cecc:	e006      	b.n	801cedc <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 801cece:	6978      	ldr	r0, [r7, #20]
 801ced0:	f002 fd7c 	bl	801f9cc <tcp_output>
  return;
 801ced4:	e001      	b.n	801ceda <tcp_listen_input+0x1be>
    return;
 801ced6:	bf00      	nop
 801ced8:	e000      	b.n	801cedc <tcp_listen_input+0x1c0>
  return;
 801ceda:	bf00      	nop
}
 801cedc:	371c      	adds	r7, #28
 801cede:	46bd      	mov	sp, r7
 801cee0:	bd90      	pop	{r4, r7, pc}
 801cee2:	bf00      	nop
 801cee4:	20013c58 	.word	0x20013c58
 801cee8:	0802db28 	.word	0x0802db28
 801ceec:	0802dd20 	.word	0x0802dd20
 801cef0:	0802db74 	.word	0x0802db74
 801cef4:	20013c50 	.word	0x20013c50
 801cef8:	20013c56 	.word	0x20013c56
 801cefc:	20013c4c 	.word	0x20013c4c
 801cf00:	20013c3c 	.word	0x20013c3c
 801cf04:	20017b78 	.word	0x20017b78
 801cf08:	20017b7c 	.word	0x20017b7c
 801cf0c:	20017b68 	.word	0x20017b68
 801cf10:	2001c0fc 	.word	0x2001c0fc
 801cf14:	2001c0f8 	.word	0x2001c0f8

0801cf18 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 801cf18:	b580      	push	{r7, lr}
 801cf1a:	b086      	sub	sp, #24
 801cf1c:	af04      	add	r7, sp, #16
 801cf1e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 801cf20:	4b2f      	ldr	r3, [pc, #188]	; (801cfe0 <tcp_timewait_input+0xc8>)
 801cf22:	781b      	ldrb	r3, [r3, #0]
 801cf24:	f003 0304 	and.w	r3, r3, #4
 801cf28:	2b00      	cmp	r3, #0
 801cf2a:	d153      	bne.n	801cfd4 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 801cf2c:	687b      	ldr	r3, [r7, #4]
 801cf2e:	2b00      	cmp	r3, #0
 801cf30:	d106      	bne.n	801cf40 <tcp_timewait_input+0x28>
 801cf32:	4b2c      	ldr	r3, [pc, #176]	; (801cfe4 <tcp_timewait_input+0xcc>)
 801cf34:	f240 22ee 	movw	r2, #750	; 0x2ee
 801cf38:	492b      	ldr	r1, [pc, #172]	; (801cfe8 <tcp_timewait_input+0xd0>)
 801cf3a:	482c      	ldr	r0, [pc, #176]	; (801cfec <tcp_timewait_input+0xd4>)
 801cf3c:	f009 fcc6 	bl	80268cc <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 801cf40:	4b27      	ldr	r3, [pc, #156]	; (801cfe0 <tcp_timewait_input+0xc8>)
 801cf42:	781b      	ldrb	r3, [r3, #0]
 801cf44:	f003 0302 	and.w	r3, r3, #2
 801cf48:	2b00      	cmp	r3, #0
 801cf4a:	d02a      	beq.n	801cfa2 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 801cf4c:	4b28      	ldr	r3, [pc, #160]	; (801cff0 <tcp_timewait_input+0xd8>)
 801cf4e:	681a      	ldr	r2, [r3, #0]
 801cf50:	687b      	ldr	r3, [r7, #4]
 801cf52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cf54:	1ad3      	subs	r3, r2, r3
 801cf56:	2b00      	cmp	r3, #0
 801cf58:	db2d      	blt.n	801cfb6 <tcp_timewait_input+0x9e>
 801cf5a:	4b25      	ldr	r3, [pc, #148]	; (801cff0 <tcp_timewait_input+0xd8>)
 801cf5c:	681a      	ldr	r2, [r3, #0]
 801cf5e:	687b      	ldr	r3, [r7, #4]
 801cf60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cf62:	6879      	ldr	r1, [r7, #4]
 801cf64:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801cf66:	440b      	add	r3, r1
 801cf68:	1ad3      	subs	r3, r2, r3
 801cf6a:	2b00      	cmp	r3, #0
 801cf6c:	dc23      	bgt.n	801cfb6 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801cf6e:	4b21      	ldr	r3, [pc, #132]	; (801cff4 <tcp_timewait_input+0xdc>)
 801cf70:	6819      	ldr	r1, [r3, #0]
 801cf72:	4b21      	ldr	r3, [pc, #132]	; (801cff8 <tcp_timewait_input+0xe0>)
 801cf74:	881b      	ldrh	r3, [r3, #0]
 801cf76:	461a      	mov	r2, r3
 801cf78:	4b1d      	ldr	r3, [pc, #116]	; (801cff0 <tcp_timewait_input+0xd8>)
 801cf7a:	681b      	ldr	r3, [r3, #0]
 801cf7c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801cf7e:	4b1f      	ldr	r3, [pc, #124]	; (801cffc <tcp_timewait_input+0xe4>)
 801cf80:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801cf82:	885b      	ldrh	r3, [r3, #2]
 801cf84:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801cf86:	4a1d      	ldr	r2, [pc, #116]	; (801cffc <tcp_timewait_input+0xe4>)
 801cf88:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801cf8a:	8812      	ldrh	r2, [r2, #0]
 801cf8c:	b292      	uxth	r2, r2
 801cf8e:	9202      	str	r2, [sp, #8]
 801cf90:	9301      	str	r3, [sp, #4]
 801cf92:	4b1b      	ldr	r3, [pc, #108]	; (801d000 <tcp_timewait_input+0xe8>)
 801cf94:	9300      	str	r3, [sp, #0]
 801cf96:	4b1b      	ldr	r3, [pc, #108]	; (801d004 <tcp_timewait_input+0xec>)
 801cf98:	4602      	mov	r2, r0
 801cf9a:	6878      	ldr	r0, [r7, #4]
 801cf9c:	f003 faca 	bl	8020534 <tcp_rst>
      return;
 801cfa0:	e01b      	b.n	801cfda <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 801cfa2:	4b0f      	ldr	r3, [pc, #60]	; (801cfe0 <tcp_timewait_input+0xc8>)
 801cfa4:	781b      	ldrb	r3, [r3, #0]
 801cfa6:	f003 0301 	and.w	r3, r3, #1
 801cfaa:	2b00      	cmp	r3, #0
 801cfac:	d003      	beq.n	801cfb6 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801cfae:	4b16      	ldr	r3, [pc, #88]	; (801d008 <tcp_timewait_input+0xf0>)
 801cfb0:	681a      	ldr	r2, [r3, #0]
 801cfb2:	687b      	ldr	r3, [r7, #4]
 801cfb4:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801cfb6:	4b10      	ldr	r3, [pc, #64]	; (801cff8 <tcp_timewait_input+0xe0>)
 801cfb8:	881b      	ldrh	r3, [r3, #0]
 801cfba:	2b00      	cmp	r3, #0
 801cfbc:	d00c      	beq.n	801cfd8 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801cfbe:	687b      	ldr	r3, [r7, #4]
 801cfc0:	8b5b      	ldrh	r3, [r3, #26]
 801cfc2:	f043 0302 	orr.w	r3, r3, #2
 801cfc6:	b29a      	uxth	r2, r3
 801cfc8:	687b      	ldr	r3, [r7, #4]
 801cfca:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801cfcc:	6878      	ldr	r0, [r7, #4]
 801cfce:	f002 fcfd 	bl	801f9cc <tcp_output>
  }
  return;
 801cfd2:	e001      	b.n	801cfd8 <tcp_timewait_input+0xc0>
    return;
 801cfd4:	bf00      	nop
 801cfd6:	e000      	b.n	801cfda <tcp_timewait_input+0xc2>
  return;
 801cfd8:	bf00      	nop
}
 801cfda:	3708      	adds	r7, #8
 801cfdc:	46bd      	mov	sp, r7
 801cfde:	bd80      	pop	{r7, pc}
 801cfe0:	20013c58 	.word	0x20013c58
 801cfe4:	0802db28 	.word	0x0802db28
 801cfe8:	0802dd40 	.word	0x0802dd40
 801cfec:	0802db74 	.word	0x0802db74
 801cff0:	20013c4c 	.word	0x20013c4c
 801cff4:	20013c50 	.word	0x20013c50
 801cff8:	20013c56 	.word	0x20013c56
 801cffc:	20013c3c 	.word	0x20013c3c
 801d000:	20017b78 	.word	0x20017b78
 801d004:	20017b7c 	.word	0x20017b7c
 801d008:	2001c100 	.word	0x2001c100

0801d00c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 801d00c:	b590      	push	{r4, r7, lr}
 801d00e:	b08d      	sub	sp, #52	; 0x34
 801d010:	af04      	add	r7, sp, #16
 801d012:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 801d014:	2300      	movs	r3, #0
 801d016:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 801d018:	2300      	movs	r3, #0
 801d01a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 801d01c:	687b      	ldr	r3, [r7, #4]
 801d01e:	2b00      	cmp	r3, #0
 801d020:	d106      	bne.n	801d030 <tcp_process+0x24>
 801d022:	4b9d      	ldr	r3, [pc, #628]	; (801d298 <tcp_process+0x28c>)
 801d024:	f44f 7247 	mov.w	r2, #796	; 0x31c
 801d028:	499c      	ldr	r1, [pc, #624]	; (801d29c <tcp_process+0x290>)
 801d02a:	489d      	ldr	r0, [pc, #628]	; (801d2a0 <tcp_process+0x294>)
 801d02c:	f009 fc4e 	bl	80268cc <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 801d030:	4b9c      	ldr	r3, [pc, #624]	; (801d2a4 <tcp_process+0x298>)
 801d032:	781b      	ldrb	r3, [r3, #0]
 801d034:	f003 0304 	and.w	r3, r3, #4
 801d038:	2b00      	cmp	r3, #0
 801d03a:	d04e      	beq.n	801d0da <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 801d03c:	687b      	ldr	r3, [r7, #4]
 801d03e:	7d1b      	ldrb	r3, [r3, #20]
 801d040:	2b02      	cmp	r3, #2
 801d042:	d108      	bne.n	801d056 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 801d044:	687b      	ldr	r3, [r7, #4]
 801d046:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801d048:	4b97      	ldr	r3, [pc, #604]	; (801d2a8 <tcp_process+0x29c>)
 801d04a:	681b      	ldr	r3, [r3, #0]
 801d04c:	429a      	cmp	r2, r3
 801d04e:	d123      	bne.n	801d098 <tcp_process+0x8c>
        acceptable = 1;
 801d050:	2301      	movs	r3, #1
 801d052:	76fb      	strb	r3, [r7, #27]
 801d054:	e020      	b.n	801d098 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801d056:	687b      	ldr	r3, [r7, #4]
 801d058:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801d05a:	4b94      	ldr	r3, [pc, #592]	; (801d2ac <tcp_process+0x2a0>)
 801d05c:	681b      	ldr	r3, [r3, #0]
 801d05e:	429a      	cmp	r2, r3
 801d060:	d102      	bne.n	801d068 <tcp_process+0x5c>
        acceptable = 1;
 801d062:	2301      	movs	r3, #1
 801d064:	76fb      	strb	r3, [r7, #27]
 801d066:	e017      	b.n	801d098 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801d068:	4b90      	ldr	r3, [pc, #576]	; (801d2ac <tcp_process+0x2a0>)
 801d06a:	681a      	ldr	r2, [r3, #0]
 801d06c:	687b      	ldr	r3, [r7, #4]
 801d06e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d070:	1ad3      	subs	r3, r2, r3
 801d072:	2b00      	cmp	r3, #0
 801d074:	db10      	blt.n	801d098 <tcp_process+0x8c>
 801d076:	4b8d      	ldr	r3, [pc, #564]	; (801d2ac <tcp_process+0x2a0>)
 801d078:	681a      	ldr	r2, [r3, #0]
 801d07a:	687b      	ldr	r3, [r7, #4]
 801d07c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d07e:	6879      	ldr	r1, [r7, #4]
 801d080:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801d082:	440b      	add	r3, r1
 801d084:	1ad3      	subs	r3, r2, r3
 801d086:	2b00      	cmp	r3, #0
 801d088:	dc06      	bgt.n	801d098 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801d08a:	687b      	ldr	r3, [r7, #4]
 801d08c:	8b5b      	ldrh	r3, [r3, #26]
 801d08e:	f043 0302 	orr.w	r3, r3, #2
 801d092:	b29a      	uxth	r2, r3
 801d094:	687b      	ldr	r3, [r7, #4]
 801d096:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 801d098:	7efb      	ldrb	r3, [r7, #27]
 801d09a:	2b00      	cmp	r3, #0
 801d09c:	d01b      	beq.n	801d0d6 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801d09e:	687b      	ldr	r3, [r7, #4]
 801d0a0:	7d1b      	ldrb	r3, [r3, #20]
 801d0a2:	2b00      	cmp	r3, #0
 801d0a4:	d106      	bne.n	801d0b4 <tcp_process+0xa8>
 801d0a6:	4b7c      	ldr	r3, [pc, #496]	; (801d298 <tcp_process+0x28c>)
 801d0a8:	f44f 724e 	mov.w	r2, #824	; 0x338
 801d0ac:	4980      	ldr	r1, [pc, #512]	; (801d2b0 <tcp_process+0x2a4>)
 801d0ae:	487c      	ldr	r0, [pc, #496]	; (801d2a0 <tcp_process+0x294>)
 801d0b0:	f009 fc0c 	bl	80268cc <iprintf>
      recv_flags |= TF_RESET;
 801d0b4:	4b7f      	ldr	r3, [pc, #508]	; (801d2b4 <tcp_process+0x2a8>)
 801d0b6:	781b      	ldrb	r3, [r3, #0]
 801d0b8:	f043 0308 	orr.w	r3, r3, #8
 801d0bc:	b2da      	uxtb	r2, r3
 801d0be:	4b7d      	ldr	r3, [pc, #500]	; (801d2b4 <tcp_process+0x2a8>)
 801d0c0:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801d0c2:	687b      	ldr	r3, [r7, #4]
 801d0c4:	8b5b      	ldrh	r3, [r3, #26]
 801d0c6:	f023 0301 	bic.w	r3, r3, #1
 801d0ca:	b29a      	uxth	r2, r3
 801d0cc:	687b      	ldr	r3, [r7, #4]
 801d0ce:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 801d0d0:	f06f 030d 	mvn.w	r3, #13
 801d0d4:	e37a      	b.n	801d7cc <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801d0d6:	2300      	movs	r3, #0
 801d0d8:	e378      	b.n	801d7cc <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801d0da:	4b72      	ldr	r3, [pc, #456]	; (801d2a4 <tcp_process+0x298>)
 801d0dc:	781b      	ldrb	r3, [r3, #0]
 801d0de:	f003 0302 	and.w	r3, r3, #2
 801d0e2:	2b00      	cmp	r3, #0
 801d0e4:	d010      	beq.n	801d108 <tcp_process+0xfc>
 801d0e6:	687b      	ldr	r3, [r7, #4]
 801d0e8:	7d1b      	ldrb	r3, [r3, #20]
 801d0ea:	2b02      	cmp	r3, #2
 801d0ec:	d00c      	beq.n	801d108 <tcp_process+0xfc>
 801d0ee:	687b      	ldr	r3, [r7, #4]
 801d0f0:	7d1b      	ldrb	r3, [r3, #20]
 801d0f2:	2b03      	cmp	r3, #3
 801d0f4:	d008      	beq.n	801d108 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801d0f6:	687b      	ldr	r3, [r7, #4]
 801d0f8:	8b5b      	ldrh	r3, [r3, #26]
 801d0fa:	f043 0302 	orr.w	r3, r3, #2
 801d0fe:	b29a      	uxth	r2, r3
 801d100:	687b      	ldr	r3, [r7, #4]
 801d102:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 801d104:	2300      	movs	r3, #0
 801d106:	e361      	b.n	801d7cc <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801d108:	687b      	ldr	r3, [r7, #4]
 801d10a:	8b5b      	ldrh	r3, [r3, #26]
 801d10c:	f003 0310 	and.w	r3, r3, #16
 801d110:	2b00      	cmp	r3, #0
 801d112:	d103      	bne.n	801d11c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 801d114:	4b68      	ldr	r3, [pc, #416]	; (801d2b8 <tcp_process+0x2ac>)
 801d116:	681a      	ldr	r2, [r3, #0]
 801d118:	687b      	ldr	r3, [r7, #4]
 801d11a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 801d11c:	687b      	ldr	r3, [r7, #4]
 801d11e:	2200      	movs	r2, #0
 801d120:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 801d124:	687b      	ldr	r3, [r7, #4]
 801d126:	2200      	movs	r2, #0
 801d128:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 801d12c:	6878      	ldr	r0, [r7, #4]
 801d12e:	f001 fc2f 	bl	801e990 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801d132:	687b      	ldr	r3, [r7, #4]
 801d134:	7d1b      	ldrb	r3, [r3, #20]
 801d136:	3b02      	subs	r3, #2
 801d138:	2b07      	cmp	r3, #7
 801d13a:	f200 8337 	bhi.w	801d7ac <tcp_process+0x7a0>
 801d13e:	a201      	add	r2, pc, #4	; (adr r2, 801d144 <tcp_process+0x138>)
 801d140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d144:	0801d165 	.word	0x0801d165
 801d148:	0801d395 	.word	0x0801d395
 801d14c:	0801d50d 	.word	0x0801d50d
 801d150:	0801d537 	.word	0x0801d537
 801d154:	0801d65b 	.word	0x0801d65b
 801d158:	0801d50d 	.word	0x0801d50d
 801d15c:	0801d6e7 	.word	0x0801d6e7
 801d160:	0801d777 	.word	0x0801d777
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 801d164:	4b4f      	ldr	r3, [pc, #316]	; (801d2a4 <tcp_process+0x298>)
 801d166:	781b      	ldrb	r3, [r3, #0]
 801d168:	f003 0310 	and.w	r3, r3, #16
 801d16c:	2b00      	cmp	r3, #0
 801d16e:	f000 80e4 	beq.w	801d33a <tcp_process+0x32e>
 801d172:	4b4c      	ldr	r3, [pc, #304]	; (801d2a4 <tcp_process+0x298>)
 801d174:	781b      	ldrb	r3, [r3, #0]
 801d176:	f003 0302 	and.w	r3, r3, #2
 801d17a:	2b00      	cmp	r3, #0
 801d17c:	f000 80dd 	beq.w	801d33a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 801d180:	687b      	ldr	r3, [r7, #4]
 801d182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d184:	1c5a      	adds	r2, r3, #1
 801d186:	4b48      	ldr	r3, [pc, #288]	; (801d2a8 <tcp_process+0x29c>)
 801d188:	681b      	ldr	r3, [r3, #0]
 801d18a:	429a      	cmp	r2, r3
 801d18c:	f040 80d5 	bne.w	801d33a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 801d190:	4b46      	ldr	r3, [pc, #280]	; (801d2ac <tcp_process+0x2a0>)
 801d192:	681b      	ldr	r3, [r3, #0]
 801d194:	1c5a      	adds	r2, r3, #1
 801d196:	687b      	ldr	r3, [r7, #4]
 801d198:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801d19a:	687b      	ldr	r3, [r7, #4]
 801d19c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801d19e:	687b      	ldr	r3, [r7, #4]
 801d1a0:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 801d1a2:	4b41      	ldr	r3, [pc, #260]	; (801d2a8 <tcp_process+0x29c>)
 801d1a4:	681a      	ldr	r2, [r3, #0]
 801d1a6:	687b      	ldr	r3, [r7, #4]
 801d1a8:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801d1aa:	4b44      	ldr	r3, [pc, #272]	; (801d2bc <tcp_process+0x2b0>)
 801d1ac:	681b      	ldr	r3, [r3, #0]
 801d1ae:	89db      	ldrh	r3, [r3, #14]
 801d1b0:	b29a      	uxth	r2, r3
 801d1b2:	687b      	ldr	r3, [r7, #4]
 801d1b4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 801d1b8:	687b      	ldr	r3, [r7, #4]
 801d1ba:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801d1be:	687b      	ldr	r3, [r7, #4]
 801d1c0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801d1c4:	4b39      	ldr	r3, [pc, #228]	; (801d2ac <tcp_process+0x2a0>)
 801d1c6:	681b      	ldr	r3, [r3, #0]
 801d1c8:	1e5a      	subs	r2, r3, #1
 801d1ca:	687b      	ldr	r3, [r7, #4]
 801d1cc:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 801d1ce:	687b      	ldr	r3, [r7, #4]
 801d1d0:	2204      	movs	r2, #4
 801d1d2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801d1d4:	687b      	ldr	r3, [r7, #4]
 801d1d6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801d1d8:	687b      	ldr	r3, [r7, #4]
 801d1da:	3304      	adds	r3, #4
 801d1dc:	4618      	mov	r0, r3
 801d1de:	f007 f94b 	bl	8024478 <ip4_route>
 801d1e2:	4601      	mov	r1, r0
 801d1e4:	687b      	ldr	r3, [r7, #4]
 801d1e6:	3304      	adds	r3, #4
 801d1e8:	461a      	mov	r2, r3
 801d1ea:	4620      	mov	r0, r4
 801d1ec:	f7ff f88c 	bl	801c308 <tcp_eff_send_mss_netif>
 801d1f0:	4603      	mov	r3, r0
 801d1f2:	461a      	mov	r2, r3
 801d1f4:	687b      	ldr	r3, [r7, #4]
 801d1f6:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801d1f8:	687b      	ldr	r3, [r7, #4]
 801d1fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801d1fc:	009a      	lsls	r2, r3, #2
 801d1fe:	687b      	ldr	r3, [r7, #4]
 801d200:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801d202:	005b      	lsls	r3, r3, #1
 801d204:	f241 111c 	movw	r1, #4380	; 0x111c
 801d208:	428b      	cmp	r3, r1
 801d20a:	bf38      	it	cc
 801d20c:	460b      	movcc	r3, r1
 801d20e:	429a      	cmp	r2, r3
 801d210:	d204      	bcs.n	801d21c <tcp_process+0x210>
 801d212:	687b      	ldr	r3, [r7, #4]
 801d214:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801d216:	009b      	lsls	r3, r3, #2
 801d218:	b29b      	uxth	r3, r3
 801d21a:	e00d      	b.n	801d238 <tcp_process+0x22c>
 801d21c:	687b      	ldr	r3, [r7, #4]
 801d21e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801d220:	005b      	lsls	r3, r3, #1
 801d222:	f241 121c 	movw	r2, #4380	; 0x111c
 801d226:	4293      	cmp	r3, r2
 801d228:	d904      	bls.n	801d234 <tcp_process+0x228>
 801d22a:	687b      	ldr	r3, [r7, #4]
 801d22c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801d22e:	005b      	lsls	r3, r3, #1
 801d230:	b29b      	uxth	r3, r3
 801d232:	e001      	b.n	801d238 <tcp_process+0x22c>
 801d234:	f241 131c 	movw	r3, #4380	; 0x111c
 801d238:	687a      	ldr	r2, [r7, #4]
 801d23a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801d23e:	687b      	ldr	r3, [r7, #4]
 801d240:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801d244:	2b00      	cmp	r3, #0
 801d246:	d106      	bne.n	801d256 <tcp_process+0x24a>
 801d248:	4b13      	ldr	r3, [pc, #76]	; (801d298 <tcp_process+0x28c>)
 801d24a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 801d24e:	491c      	ldr	r1, [pc, #112]	; (801d2c0 <tcp_process+0x2b4>)
 801d250:	4813      	ldr	r0, [pc, #76]	; (801d2a0 <tcp_process+0x294>)
 801d252:	f009 fb3b 	bl	80268cc <iprintf>
        --pcb->snd_queuelen;
 801d256:	687b      	ldr	r3, [r7, #4]
 801d258:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801d25c:	3b01      	subs	r3, #1
 801d25e:	b29a      	uxth	r2, r3
 801d260:	687b      	ldr	r3, [r7, #4]
 801d262:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801d266:	687b      	ldr	r3, [r7, #4]
 801d268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d26a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 801d26c:	69fb      	ldr	r3, [r7, #28]
 801d26e:	2b00      	cmp	r3, #0
 801d270:	d12a      	bne.n	801d2c8 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801d272:	687b      	ldr	r3, [r7, #4]
 801d274:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d276:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801d278:	69fb      	ldr	r3, [r7, #28]
 801d27a:	2b00      	cmp	r3, #0
 801d27c:	d106      	bne.n	801d28c <tcp_process+0x280>
 801d27e:	4b06      	ldr	r3, [pc, #24]	; (801d298 <tcp_process+0x28c>)
 801d280:	f44f 725d 	mov.w	r2, #884	; 0x374
 801d284:	490f      	ldr	r1, [pc, #60]	; (801d2c4 <tcp_process+0x2b8>)
 801d286:	4806      	ldr	r0, [pc, #24]	; (801d2a0 <tcp_process+0x294>)
 801d288:	f009 fb20 	bl	80268cc <iprintf>
          pcb->unsent = rseg->next;
 801d28c:	69fb      	ldr	r3, [r7, #28]
 801d28e:	681a      	ldr	r2, [r3, #0]
 801d290:	687b      	ldr	r3, [r7, #4]
 801d292:	66da      	str	r2, [r3, #108]	; 0x6c
 801d294:	e01c      	b.n	801d2d0 <tcp_process+0x2c4>
 801d296:	bf00      	nop
 801d298:	0802db28 	.word	0x0802db28
 801d29c:	0802dd60 	.word	0x0802dd60
 801d2a0:	0802db74 	.word	0x0802db74
 801d2a4:	20013c58 	.word	0x20013c58
 801d2a8:	20013c50 	.word	0x20013c50
 801d2ac:	20013c4c 	.word	0x20013c4c
 801d2b0:	0802dd7c 	.word	0x0802dd7c
 801d2b4:	20013c59 	.word	0x20013c59
 801d2b8:	2001c100 	.word	0x2001c100
 801d2bc:	20013c3c 	.word	0x20013c3c
 801d2c0:	0802dd9c 	.word	0x0802dd9c
 801d2c4:	0802ddb4 	.word	0x0802ddb4
        } else {
          pcb->unacked = rseg->next;
 801d2c8:	69fb      	ldr	r3, [r7, #28]
 801d2ca:	681a      	ldr	r2, [r3, #0]
 801d2cc:	687b      	ldr	r3, [r7, #4]
 801d2ce:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 801d2d0:	69f8      	ldr	r0, [r7, #28]
 801d2d2:	f7fe fc36 	bl	801bb42 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 801d2d6:	687b      	ldr	r3, [r7, #4]
 801d2d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d2da:	2b00      	cmp	r3, #0
 801d2dc:	d104      	bne.n	801d2e8 <tcp_process+0x2dc>
          pcb->rtime = -1;
 801d2de:	687b      	ldr	r3, [r7, #4]
 801d2e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801d2e4:	861a      	strh	r2, [r3, #48]	; 0x30
 801d2e6:	e006      	b.n	801d2f6 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 801d2e8:	687b      	ldr	r3, [r7, #4]
 801d2ea:	2200      	movs	r2, #0
 801d2ec:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 801d2ee:	687b      	ldr	r3, [r7, #4]
 801d2f0:	2200      	movs	r2, #0
 801d2f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801d2f6:	687b      	ldr	r3, [r7, #4]
 801d2f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d2fc:	2b00      	cmp	r3, #0
 801d2fe:	d00a      	beq.n	801d316 <tcp_process+0x30a>
 801d300:	687b      	ldr	r3, [r7, #4]
 801d302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d306:	687a      	ldr	r2, [r7, #4]
 801d308:	6910      	ldr	r0, [r2, #16]
 801d30a:	2200      	movs	r2, #0
 801d30c:	6879      	ldr	r1, [r7, #4]
 801d30e:	4798      	blx	r3
 801d310:	4603      	mov	r3, r0
 801d312:	76bb      	strb	r3, [r7, #26]
 801d314:	e001      	b.n	801d31a <tcp_process+0x30e>
 801d316:	2300      	movs	r3, #0
 801d318:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801d31a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801d31e:	f113 0f0d 	cmn.w	r3, #13
 801d322:	d102      	bne.n	801d32a <tcp_process+0x31e>
          return ERR_ABRT;
 801d324:	f06f 030c 	mvn.w	r3, #12
 801d328:	e250      	b.n	801d7cc <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801d32a:	687b      	ldr	r3, [r7, #4]
 801d32c:	8b5b      	ldrh	r3, [r3, #26]
 801d32e:	f043 0302 	orr.w	r3, r3, #2
 801d332:	b29a      	uxth	r2, r3
 801d334:	687b      	ldr	r3, [r7, #4]
 801d336:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 801d338:	e23a      	b.n	801d7b0 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801d33a:	4b98      	ldr	r3, [pc, #608]	; (801d59c <tcp_process+0x590>)
 801d33c:	781b      	ldrb	r3, [r3, #0]
 801d33e:	f003 0310 	and.w	r3, r3, #16
 801d342:	2b00      	cmp	r3, #0
 801d344:	f000 8234 	beq.w	801d7b0 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801d348:	4b95      	ldr	r3, [pc, #596]	; (801d5a0 <tcp_process+0x594>)
 801d34a:	6819      	ldr	r1, [r3, #0]
 801d34c:	4b95      	ldr	r3, [pc, #596]	; (801d5a4 <tcp_process+0x598>)
 801d34e:	881b      	ldrh	r3, [r3, #0]
 801d350:	461a      	mov	r2, r3
 801d352:	4b95      	ldr	r3, [pc, #596]	; (801d5a8 <tcp_process+0x59c>)
 801d354:	681b      	ldr	r3, [r3, #0]
 801d356:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801d358:	4b94      	ldr	r3, [pc, #592]	; (801d5ac <tcp_process+0x5a0>)
 801d35a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801d35c:	885b      	ldrh	r3, [r3, #2]
 801d35e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801d360:	4a92      	ldr	r2, [pc, #584]	; (801d5ac <tcp_process+0x5a0>)
 801d362:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801d364:	8812      	ldrh	r2, [r2, #0]
 801d366:	b292      	uxth	r2, r2
 801d368:	9202      	str	r2, [sp, #8]
 801d36a:	9301      	str	r3, [sp, #4]
 801d36c:	4b90      	ldr	r3, [pc, #576]	; (801d5b0 <tcp_process+0x5a4>)
 801d36e:	9300      	str	r3, [sp, #0]
 801d370:	4b90      	ldr	r3, [pc, #576]	; (801d5b4 <tcp_process+0x5a8>)
 801d372:	4602      	mov	r2, r0
 801d374:	6878      	ldr	r0, [r7, #4]
 801d376:	f003 f8dd 	bl	8020534 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801d37a:	687b      	ldr	r3, [r7, #4]
 801d37c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801d380:	2b05      	cmp	r3, #5
 801d382:	f200 8215 	bhi.w	801d7b0 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801d386:	687b      	ldr	r3, [r7, #4]
 801d388:	2200      	movs	r2, #0
 801d38a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 801d38c:	6878      	ldr	r0, [r7, #4]
 801d38e:	f002 fea7 	bl	80200e0 <tcp_rexmit_rto>
      break;
 801d392:	e20d      	b.n	801d7b0 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 801d394:	4b81      	ldr	r3, [pc, #516]	; (801d59c <tcp_process+0x590>)
 801d396:	781b      	ldrb	r3, [r3, #0]
 801d398:	f003 0310 	and.w	r3, r3, #16
 801d39c:	2b00      	cmp	r3, #0
 801d39e:	f000 80a1 	beq.w	801d4e4 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801d3a2:	4b7f      	ldr	r3, [pc, #508]	; (801d5a0 <tcp_process+0x594>)
 801d3a4:	681a      	ldr	r2, [r3, #0]
 801d3a6:	687b      	ldr	r3, [r7, #4]
 801d3a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d3aa:	1ad3      	subs	r3, r2, r3
 801d3ac:	3b01      	subs	r3, #1
 801d3ae:	2b00      	cmp	r3, #0
 801d3b0:	db7e      	blt.n	801d4b0 <tcp_process+0x4a4>
 801d3b2:	4b7b      	ldr	r3, [pc, #492]	; (801d5a0 <tcp_process+0x594>)
 801d3b4:	681a      	ldr	r2, [r3, #0]
 801d3b6:	687b      	ldr	r3, [r7, #4]
 801d3b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801d3ba:	1ad3      	subs	r3, r2, r3
 801d3bc:	2b00      	cmp	r3, #0
 801d3be:	dc77      	bgt.n	801d4b0 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 801d3c0:	687b      	ldr	r3, [r7, #4]
 801d3c2:	2204      	movs	r2, #4
 801d3c4:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801d3c6:	687b      	ldr	r3, [r7, #4]
 801d3c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801d3ca:	2b00      	cmp	r3, #0
 801d3cc:	d102      	bne.n	801d3d4 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801d3ce:	23fa      	movs	r3, #250	; 0xfa
 801d3d0:	76bb      	strb	r3, [r7, #26]
 801d3d2:	e01d      	b.n	801d410 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801d3d4:	687b      	ldr	r3, [r7, #4]
 801d3d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801d3d8:	699b      	ldr	r3, [r3, #24]
 801d3da:	2b00      	cmp	r3, #0
 801d3dc:	d106      	bne.n	801d3ec <tcp_process+0x3e0>
 801d3de:	4b76      	ldr	r3, [pc, #472]	; (801d5b8 <tcp_process+0x5ac>)
 801d3e0:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 801d3e4:	4975      	ldr	r1, [pc, #468]	; (801d5bc <tcp_process+0x5b0>)
 801d3e6:	4876      	ldr	r0, [pc, #472]	; (801d5c0 <tcp_process+0x5b4>)
 801d3e8:	f009 fa70 	bl	80268cc <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801d3ec:	687b      	ldr	r3, [r7, #4]
 801d3ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801d3f0:	699b      	ldr	r3, [r3, #24]
 801d3f2:	2b00      	cmp	r3, #0
 801d3f4:	d00a      	beq.n	801d40c <tcp_process+0x400>
 801d3f6:	687b      	ldr	r3, [r7, #4]
 801d3f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801d3fa:	699b      	ldr	r3, [r3, #24]
 801d3fc:	687a      	ldr	r2, [r7, #4]
 801d3fe:	6910      	ldr	r0, [r2, #16]
 801d400:	2200      	movs	r2, #0
 801d402:	6879      	ldr	r1, [r7, #4]
 801d404:	4798      	blx	r3
 801d406:	4603      	mov	r3, r0
 801d408:	76bb      	strb	r3, [r7, #26]
 801d40a:	e001      	b.n	801d410 <tcp_process+0x404>
 801d40c:	23f0      	movs	r3, #240	; 0xf0
 801d40e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 801d410:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801d414:	2b00      	cmp	r3, #0
 801d416:	d00a      	beq.n	801d42e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 801d418:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801d41c:	f113 0f0d 	cmn.w	r3, #13
 801d420:	d002      	beq.n	801d428 <tcp_process+0x41c>
              tcp_abort(pcb);
 801d422:	6878      	ldr	r0, [r7, #4]
 801d424:	f7fd fbd0 	bl	801abc8 <tcp_abort>
            }
            return ERR_ABRT;
 801d428:	f06f 030c 	mvn.w	r3, #12
 801d42c:	e1ce      	b.n	801d7cc <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801d42e:	6878      	ldr	r0, [r7, #4]
 801d430:	f000 fae0 	bl	801d9f4 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 801d434:	4b63      	ldr	r3, [pc, #396]	; (801d5c4 <tcp_process+0x5b8>)
 801d436:	881b      	ldrh	r3, [r3, #0]
 801d438:	2b00      	cmp	r3, #0
 801d43a:	d005      	beq.n	801d448 <tcp_process+0x43c>
            recv_acked--;
 801d43c:	4b61      	ldr	r3, [pc, #388]	; (801d5c4 <tcp_process+0x5b8>)
 801d43e:	881b      	ldrh	r3, [r3, #0]
 801d440:	3b01      	subs	r3, #1
 801d442:	b29a      	uxth	r2, r3
 801d444:	4b5f      	ldr	r3, [pc, #380]	; (801d5c4 <tcp_process+0x5b8>)
 801d446:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801d448:	687b      	ldr	r3, [r7, #4]
 801d44a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801d44c:	009a      	lsls	r2, r3, #2
 801d44e:	687b      	ldr	r3, [r7, #4]
 801d450:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801d452:	005b      	lsls	r3, r3, #1
 801d454:	f241 111c 	movw	r1, #4380	; 0x111c
 801d458:	428b      	cmp	r3, r1
 801d45a:	bf38      	it	cc
 801d45c:	460b      	movcc	r3, r1
 801d45e:	429a      	cmp	r2, r3
 801d460:	d204      	bcs.n	801d46c <tcp_process+0x460>
 801d462:	687b      	ldr	r3, [r7, #4]
 801d464:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801d466:	009b      	lsls	r3, r3, #2
 801d468:	b29b      	uxth	r3, r3
 801d46a:	e00d      	b.n	801d488 <tcp_process+0x47c>
 801d46c:	687b      	ldr	r3, [r7, #4]
 801d46e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801d470:	005b      	lsls	r3, r3, #1
 801d472:	f241 121c 	movw	r2, #4380	; 0x111c
 801d476:	4293      	cmp	r3, r2
 801d478:	d904      	bls.n	801d484 <tcp_process+0x478>
 801d47a:	687b      	ldr	r3, [r7, #4]
 801d47c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801d47e:	005b      	lsls	r3, r3, #1
 801d480:	b29b      	uxth	r3, r3
 801d482:	e001      	b.n	801d488 <tcp_process+0x47c>
 801d484:	f241 131c 	movw	r3, #4380	; 0x111c
 801d488:	687a      	ldr	r2, [r7, #4]
 801d48a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801d48e:	4b4e      	ldr	r3, [pc, #312]	; (801d5c8 <tcp_process+0x5bc>)
 801d490:	781b      	ldrb	r3, [r3, #0]
 801d492:	f003 0320 	and.w	r3, r3, #32
 801d496:	2b00      	cmp	r3, #0
 801d498:	d037      	beq.n	801d50a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801d49a:	687b      	ldr	r3, [r7, #4]
 801d49c:	8b5b      	ldrh	r3, [r3, #26]
 801d49e:	f043 0302 	orr.w	r3, r3, #2
 801d4a2:	b29a      	uxth	r2, r3
 801d4a4:	687b      	ldr	r3, [r7, #4]
 801d4a6:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 801d4a8:	687b      	ldr	r3, [r7, #4]
 801d4aa:	2207      	movs	r2, #7
 801d4ac:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801d4ae:	e02c      	b.n	801d50a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801d4b0:	4b3b      	ldr	r3, [pc, #236]	; (801d5a0 <tcp_process+0x594>)
 801d4b2:	6819      	ldr	r1, [r3, #0]
 801d4b4:	4b3b      	ldr	r3, [pc, #236]	; (801d5a4 <tcp_process+0x598>)
 801d4b6:	881b      	ldrh	r3, [r3, #0]
 801d4b8:	461a      	mov	r2, r3
 801d4ba:	4b3b      	ldr	r3, [pc, #236]	; (801d5a8 <tcp_process+0x59c>)
 801d4bc:	681b      	ldr	r3, [r3, #0]
 801d4be:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801d4c0:	4b3a      	ldr	r3, [pc, #232]	; (801d5ac <tcp_process+0x5a0>)
 801d4c2:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801d4c4:	885b      	ldrh	r3, [r3, #2]
 801d4c6:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801d4c8:	4a38      	ldr	r2, [pc, #224]	; (801d5ac <tcp_process+0x5a0>)
 801d4ca:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801d4cc:	8812      	ldrh	r2, [r2, #0]
 801d4ce:	b292      	uxth	r2, r2
 801d4d0:	9202      	str	r2, [sp, #8]
 801d4d2:	9301      	str	r3, [sp, #4]
 801d4d4:	4b36      	ldr	r3, [pc, #216]	; (801d5b0 <tcp_process+0x5a4>)
 801d4d6:	9300      	str	r3, [sp, #0]
 801d4d8:	4b36      	ldr	r3, [pc, #216]	; (801d5b4 <tcp_process+0x5a8>)
 801d4da:	4602      	mov	r2, r0
 801d4dc:	6878      	ldr	r0, [r7, #4]
 801d4de:	f003 f829 	bl	8020534 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801d4e2:	e167      	b.n	801d7b4 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801d4e4:	4b2d      	ldr	r3, [pc, #180]	; (801d59c <tcp_process+0x590>)
 801d4e6:	781b      	ldrb	r3, [r3, #0]
 801d4e8:	f003 0302 	and.w	r3, r3, #2
 801d4ec:	2b00      	cmp	r3, #0
 801d4ee:	f000 8161 	beq.w	801d7b4 <tcp_process+0x7a8>
 801d4f2:	687b      	ldr	r3, [r7, #4]
 801d4f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d4f6:	1e5a      	subs	r2, r3, #1
 801d4f8:	4b2b      	ldr	r3, [pc, #172]	; (801d5a8 <tcp_process+0x59c>)
 801d4fa:	681b      	ldr	r3, [r3, #0]
 801d4fc:	429a      	cmp	r2, r3
 801d4fe:	f040 8159 	bne.w	801d7b4 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801d502:	6878      	ldr	r0, [r7, #4]
 801d504:	f002 fe0e 	bl	8020124 <tcp_rexmit>
      break;
 801d508:	e154      	b.n	801d7b4 <tcp_process+0x7a8>
 801d50a:	e153      	b.n	801d7b4 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 801d50c:	6878      	ldr	r0, [r7, #4]
 801d50e:	f000 fa71 	bl	801d9f4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801d512:	4b2d      	ldr	r3, [pc, #180]	; (801d5c8 <tcp_process+0x5bc>)
 801d514:	781b      	ldrb	r3, [r3, #0]
 801d516:	f003 0320 	and.w	r3, r3, #32
 801d51a:	2b00      	cmp	r3, #0
 801d51c:	f000 814c 	beq.w	801d7b8 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 801d520:	687b      	ldr	r3, [r7, #4]
 801d522:	8b5b      	ldrh	r3, [r3, #26]
 801d524:	f043 0302 	orr.w	r3, r3, #2
 801d528:	b29a      	uxth	r2, r3
 801d52a:	687b      	ldr	r3, [r7, #4]
 801d52c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801d52e:	687b      	ldr	r3, [r7, #4]
 801d530:	2207      	movs	r2, #7
 801d532:	751a      	strb	r2, [r3, #20]
      }
      break;
 801d534:	e140      	b.n	801d7b8 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801d536:	6878      	ldr	r0, [r7, #4]
 801d538:	f000 fa5c 	bl	801d9f4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801d53c:	4b22      	ldr	r3, [pc, #136]	; (801d5c8 <tcp_process+0x5bc>)
 801d53e:	781b      	ldrb	r3, [r3, #0]
 801d540:	f003 0320 	and.w	r3, r3, #32
 801d544:	2b00      	cmp	r3, #0
 801d546:	d071      	beq.n	801d62c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801d548:	4b14      	ldr	r3, [pc, #80]	; (801d59c <tcp_process+0x590>)
 801d54a:	781b      	ldrb	r3, [r3, #0]
 801d54c:	f003 0310 	and.w	r3, r3, #16
 801d550:	2b00      	cmp	r3, #0
 801d552:	d060      	beq.n	801d616 <tcp_process+0x60a>
 801d554:	687b      	ldr	r3, [r7, #4]
 801d556:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801d558:	4b11      	ldr	r3, [pc, #68]	; (801d5a0 <tcp_process+0x594>)
 801d55a:	681b      	ldr	r3, [r3, #0]
 801d55c:	429a      	cmp	r2, r3
 801d55e:	d15a      	bne.n	801d616 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 801d560:	687b      	ldr	r3, [r7, #4]
 801d562:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801d564:	2b00      	cmp	r3, #0
 801d566:	d156      	bne.n	801d616 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 801d568:	687b      	ldr	r3, [r7, #4]
 801d56a:	8b5b      	ldrh	r3, [r3, #26]
 801d56c:	f043 0302 	orr.w	r3, r3, #2
 801d570:	b29a      	uxth	r2, r3
 801d572:	687b      	ldr	r3, [r7, #4]
 801d574:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801d576:	6878      	ldr	r0, [r7, #4]
 801d578:	f7fe fdbc 	bl	801c0f4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801d57c:	4b13      	ldr	r3, [pc, #76]	; (801d5cc <tcp_process+0x5c0>)
 801d57e:	681b      	ldr	r3, [r3, #0]
 801d580:	687a      	ldr	r2, [r7, #4]
 801d582:	429a      	cmp	r2, r3
 801d584:	d105      	bne.n	801d592 <tcp_process+0x586>
 801d586:	4b11      	ldr	r3, [pc, #68]	; (801d5cc <tcp_process+0x5c0>)
 801d588:	681b      	ldr	r3, [r3, #0]
 801d58a:	68db      	ldr	r3, [r3, #12]
 801d58c:	4a0f      	ldr	r2, [pc, #60]	; (801d5cc <tcp_process+0x5c0>)
 801d58e:	6013      	str	r3, [r2, #0]
 801d590:	e02e      	b.n	801d5f0 <tcp_process+0x5e4>
 801d592:	4b0e      	ldr	r3, [pc, #56]	; (801d5cc <tcp_process+0x5c0>)
 801d594:	681b      	ldr	r3, [r3, #0]
 801d596:	617b      	str	r3, [r7, #20]
 801d598:	e027      	b.n	801d5ea <tcp_process+0x5de>
 801d59a:	bf00      	nop
 801d59c:	20013c58 	.word	0x20013c58
 801d5a0:	20013c50 	.word	0x20013c50
 801d5a4:	20013c56 	.word	0x20013c56
 801d5a8:	20013c4c 	.word	0x20013c4c
 801d5ac:	20013c3c 	.word	0x20013c3c
 801d5b0:	20017b78 	.word	0x20017b78
 801d5b4:	20017b7c 	.word	0x20017b7c
 801d5b8:	0802db28 	.word	0x0802db28
 801d5bc:	0802ddc8 	.word	0x0802ddc8
 801d5c0:	0802db74 	.word	0x0802db74
 801d5c4:	20013c54 	.word	0x20013c54
 801d5c8:	20013c59 	.word	0x20013c59
 801d5cc:	2001c0fc 	.word	0x2001c0fc
 801d5d0:	697b      	ldr	r3, [r7, #20]
 801d5d2:	68db      	ldr	r3, [r3, #12]
 801d5d4:	687a      	ldr	r2, [r7, #4]
 801d5d6:	429a      	cmp	r2, r3
 801d5d8:	d104      	bne.n	801d5e4 <tcp_process+0x5d8>
 801d5da:	687b      	ldr	r3, [r7, #4]
 801d5dc:	68da      	ldr	r2, [r3, #12]
 801d5de:	697b      	ldr	r3, [r7, #20]
 801d5e0:	60da      	str	r2, [r3, #12]
 801d5e2:	e005      	b.n	801d5f0 <tcp_process+0x5e4>
 801d5e4:	697b      	ldr	r3, [r7, #20]
 801d5e6:	68db      	ldr	r3, [r3, #12]
 801d5e8:	617b      	str	r3, [r7, #20]
 801d5ea:	697b      	ldr	r3, [r7, #20]
 801d5ec:	2b00      	cmp	r3, #0
 801d5ee:	d1ef      	bne.n	801d5d0 <tcp_process+0x5c4>
 801d5f0:	687b      	ldr	r3, [r7, #4]
 801d5f2:	2200      	movs	r2, #0
 801d5f4:	60da      	str	r2, [r3, #12]
 801d5f6:	4b77      	ldr	r3, [pc, #476]	; (801d7d4 <tcp_process+0x7c8>)
 801d5f8:	2201      	movs	r2, #1
 801d5fa:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 801d5fc:	687b      	ldr	r3, [r7, #4]
 801d5fe:	220a      	movs	r2, #10
 801d600:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801d602:	4b75      	ldr	r3, [pc, #468]	; (801d7d8 <tcp_process+0x7cc>)
 801d604:	681a      	ldr	r2, [r3, #0]
 801d606:	687b      	ldr	r3, [r7, #4]
 801d608:	60da      	str	r2, [r3, #12]
 801d60a:	4a73      	ldr	r2, [pc, #460]	; (801d7d8 <tcp_process+0x7cc>)
 801d60c:	687b      	ldr	r3, [r7, #4]
 801d60e:	6013      	str	r3, [r2, #0]
 801d610:	f003 f952 	bl	80208b8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 801d614:	e0d2      	b.n	801d7bc <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801d616:	687b      	ldr	r3, [r7, #4]
 801d618:	8b5b      	ldrh	r3, [r3, #26]
 801d61a:	f043 0302 	orr.w	r3, r3, #2
 801d61e:	b29a      	uxth	r2, r3
 801d620:	687b      	ldr	r3, [r7, #4]
 801d622:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 801d624:	687b      	ldr	r3, [r7, #4]
 801d626:	2208      	movs	r2, #8
 801d628:	751a      	strb	r2, [r3, #20]
      break;
 801d62a:	e0c7      	b.n	801d7bc <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801d62c:	4b6b      	ldr	r3, [pc, #428]	; (801d7dc <tcp_process+0x7d0>)
 801d62e:	781b      	ldrb	r3, [r3, #0]
 801d630:	f003 0310 	and.w	r3, r3, #16
 801d634:	2b00      	cmp	r3, #0
 801d636:	f000 80c1 	beq.w	801d7bc <tcp_process+0x7b0>
 801d63a:	687b      	ldr	r3, [r7, #4]
 801d63c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801d63e:	4b68      	ldr	r3, [pc, #416]	; (801d7e0 <tcp_process+0x7d4>)
 801d640:	681b      	ldr	r3, [r3, #0]
 801d642:	429a      	cmp	r2, r3
 801d644:	f040 80ba 	bne.w	801d7bc <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 801d648:	687b      	ldr	r3, [r7, #4]
 801d64a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801d64c:	2b00      	cmp	r3, #0
 801d64e:	f040 80b5 	bne.w	801d7bc <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801d652:	687b      	ldr	r3, [r7, #4]
 801d654:	2206      	movs	r2, #6
 801d656:	751a      	strb	r2, [r3, #20]
      break;
 801d658:	e0b0      	b.n	801d7bc <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801d65a:	6878      	ldr	r0, [r7, #4]
 801d65c:	f000 f9ca 	bl	801d9f4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801d660:	4b60      	ldr	r3, [pc, #384]	; (801d7e4 <tcp_process+0x7d8>)
 801d662:	781b      	ldrb	r3, [r3, #0]
 801d664:	f003 0320 	and.w	r3, r3, #32
 801d668:	2b00      	cmp	r3, #0
 801d66a:	f000 80a9 	beq.w	801d7c0 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801d66e:	687b      	ldr	r3, [r7, #4]
 801d670:	8b5b      	ldrh	r3, [r3, #26]
 801d672:	f043 0302 	orr.w	r3, r3, #2
 801d676:	b29a      	uxth	r2, r3
 801d678:	687b      	ldr	r3, [r7, #4]
 801d67a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 801d67c:	6878      	ldr	r0, [r7, #4]
 801d67e:	f7fe fd39 	bl	801c0f4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801d682:	4b59      	ldr	r3, [pc, #356]	; (801d7e8 <tcp_process+0x7dc>)
 801d684:	681b      	ldr	r3, [r3, #0]
 801d686:	687a      	ldr	r2, [r7, #4]
 801d688:	429a      	cmp	r2, r3
 801d68a:	d105      	bne.n	801d698 <tcp_process+0x68c>
 801d68c:	4b56      	ldr	r3, [pc, #344]	; (801d7e8 <tcp_process+0x7dc>)
 801d68e:	681b      	ldr	r3, [r3, #0]
 801d690:	68db      	ldr	r3, [r3, #12]
 801d692:	4a55      	ldr	r2, [pc, #340]	; (801d7e8 <tcp_process+0x7dc>)
 801d694:	6013      	str	r3, [r2, #0]
 801d696:	e013      	b.n	801d6c0 <tcp_process+0x6b4>
 801d698:	4b53      	ldr	r3, [pc, #332]	; (801d7e8 <tcp_process+0x7dc>)
 801d69a:	681b      	ldr	r3, [r3, #0]
 801d69c:	613b      	str	r3, [r7, #16]
 801d69e:	e00c      	b.n	801d6ba <tcp_process+0x6ae>
 801d6a0:	693b      	ldr	r3, [r7, #16]
 801d6a2:	68db      	ldr	r3, [r3, #12]
 801d6a4:	687a      	ldr	r2, [r7, #4]
 801d6a6:	429a      	cmp	r2, r3
 801d6a8:	d104      	bne.n	801d6b4 <tcp_process+0x6a8>
 801d6aa:	687b      	ldr	r3, [r7, #4]
 801d6ac:	68da      	ldr	r2, [r3, #12]
 801d6ae:	693b      	ldr	r3, [r7, #16]
 801d6b0:	60da      	str	r2, [r3, #12]
 801d6b2:	e005      	b.n	801d6c0 <tcp_process+0x6b4>
 801d6b4:	693b      	ldr	r3, [r7, #16]
 801d6b6:	68db      	ldr	r3, [r3, #12]
 801d6b8:	613b      	str	r3, [r7, #16]
 801d6ba:	693b      	ldr	r3, [r7, #16]
 801d6bc:	2b00      	cmp	r3, #0
 801d6be:	d1ef      	bne.n	801d6a0 <tcp_process+0x694>
 801d6c0:	687b      	ldr	r3, [r7, #4]
 801d6c2:	2200      	movs	r2, #0
 801d6c4:	60da      	str	r2, [r3, #12]
 801d6c6:	4b43      	ldr	r3, [pc, #268]	; (801d7d4 <tcp_process+0x7c8>)
 801d6c8:	2201      	movs	r2, #1
 801d6ca:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801d6cc:	687b      	ldr	r3, [r7, #4]
 801d6ce:	220a      	movs	r2, #10
 801d6d0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801d6d2:	4b41      	ldr	r3, [pc, #260]	; (801d7d8 <tcp_process+0x7cc>)
 801d6d4:	681a      	ldr	r2, [r3, #0]
 801d6d6:	687b      	ldr	r3, [r7, #4]
 801d6d8:	60da      	str	r2, [r3, #12]
 801d6da:	4a3f      	ldr	r2, [pc, #252]	; (801d7d8 <tcp_process+0x7cc>)
 801d6dc:	687b      	ldr	r3, [r7, #4]
 801d6de:	6013      	str	r3, [r2, #0]
 801d6e0:	f003 f8ea 	bl	80208b8 <tcp_timer_needed>
      }
      break;
 801d6e4:	e06c      	b.n	801d7c0 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801d6e6:	6878      	ldr	r0, [r7, #4]
 801d6e8:	f000 f984 	bl	801d9f4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801d6ec:	4b3b      	ldr	r3, [pc, #236]	; (801d7dc <tcp_process+0x7d0>)
 801d6ee:	781b      	ldrb	r3, [r3, #0]
 801d6f0:	f003 0310 	and.w	r3, r3, #16
 801d6f4:	2b00      	cmp	r3, #0
 801d6f6:	d065      	beq.n	801d7c4 <tcp_process+0x7b8>
 801d6f8:	687b      	ldr	r3, [r7, #4]
 801d6fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801d6fc:	4b38      	ldr	r3, [pc, #224]	; (801d7e0 <tcp_process+0x7d4>)
 801d6fe:	681b      	ldr	r3, [r3, #0]
 801d700:	429a      	cmp	r2, r3
 801d702:	d15f      	bne.n	801d7c4 <tcp_process+0x7b8>
 801d704:	687b      	ldr	r3, [r7, #4]
 801d706:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d708:	2b00      	cmp	r3, #0
 801d70a:	d15b      	bne.n	801d7c4 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 801d70c:	6878      	ldr	r0, [r7, #4]
 801d70e:	f7fe fcf1 	bl	801c0f4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801d712:	4b35      	ldr	r3, [pc, #212]	; (801d7e8 <tcp_process+0x7dc>)
 801d714:	681b      	ldr	r3, [r3, #0]
 801d716:	687a      	ldr	r2, [r7, #4]
 801d718:	429a      	cmp	r2, r3
 801d71a:	d105      	bne.n	801d728 <tcp_process+0x71c>
 801d71c:	4b32      	ldr	r3, [pc, #200]	; (801d7e8 <tcp_process+0x7dc>)
 801d71e:	681b      	ldr	r3, [r3, #0]
 801d720:	68db      	ldr	r3, [r3, #12]
 801d722:	4a31      	ldr	r2, [pc, #196]	; (801d7e8 <tcp_process+0x7dc>)
 801d724:	6013      	str	r3, [r2, #0]
 801d726:	e013      	b.n	801d750 <tcp_process+0x744>
 801d728:	4b2f      	ldr	r3, [pc, #188]	; (801d7e8 <tcp_process+0x7dc>)
 801d72a:	681b      	ldr	r3, [r3, #0]
 801d72c:	60fb      	str	r3, [r7, #12]
 801d72e:	e00c      	b.n	801d74a <tcp_process+0x73e>
 801d730:	68fb      	ldr	r3, [r7, #12]
 801d732:	68db      	ldr	r3, [r3, #12]
 801d734:	687a      	ldr	r2, [r7, #4]
 801d736:	429a      	cmp	r2, r3
 801d738:	d104      	bne.n	801d744 <tcp_process+0x738>
 801d73a:	687b      	ldr	r3, [r7, #4]
 801d73c:	68da      	ldr	r2, [r3, #12]
 801d73e:	68fb      	ldr	r3, [r7, #12]
 801d740:	60da      	str	r2, [r3, #12]
 801d742:	e005      	b.n	801d750 <tcp_process+0x744>
 801d744:	68fb      	ldr	r3, [r7, #12]
 801d746:	68db      	ldr	r3, [r3, #12]
 801d748:	60fb      	str	r3, [r7, #12]
 801d74a:	68fb      	ldr	r3, [r7, #12]
 801d74c:	2b00      	cmp	r3, #0
 801d74e:	d1ef      	bne.n	801d730 <tcp_process+0x724>
 801d750:	687b      	ldr	r3, [r7, #4]
 801d752:	2200      	movs	r2, #0
 801d754:	60da      	str	r2, [r3, #12]
 801d756:	4b1f      	ldr	r3, [pc, #124]	; (801d7d4 <tcp_process+0x7c8>)
 801d758:	2201      	movs	r2, #1
 801d75a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801d75c:	687b      	ldr	r3, [r7, #4]
 801d75e:	220a      	movs	r2, #10
 801d760:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801d762:	4b1d      	ldr	r3, [pc, #116]	; (801d7d8 <tcp_process+0x7cc>)
 801d764:	681a      	ldr	r2, [r3, #0]
 801d766:	687b      	ldr	r3, [r7, #4]
 801d768:	60da      	str	r2, [r3, #12]
 801d76a:	4a1b      	ldr	r2, [pc, #108]	; (801d7d8 <tcp_process+0x7cc>)
 801d76c:	687b      	ldr	r3, [r7, #4]
 801d76e:	6013      	str	r3, [r2, #0]
 801d770:	f003 f8a2 	bl	80208b8 <tcp_timer_needed>
      }
      break;
 801d774:	e026      	b.n	801d7c4 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801d776:	6878      	ldr	r0, [r7, #4]
 801d778:	f000 f93c 	bl	801d9f4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801d77c:	4b17      	ldr	r3, [pc, #92]	; (801d7dc <tcp_process+0x7d0>)
 801d77e:	781b      	ldrb	r3, [r3, #0]
 801d780:	f003 0310 	and.w	r3, r3, #16
 801d784:	2b00      	cmp	r3, #0
 801d786:	d01f      	beq.n	801d7c8 <tcp_process+0x7bc>
 801d788:	687b      	ldr	r3, [r7, #4]
 801d78a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801d78c:	4b14      	ldr	r3, [pc, #80]	; (801d7e0 <tcp_process+0x7d4>)
 801d78e:	681b      	ldr	r3, [r3, #0]
 801d790:	429a      	cmp	r2, r3
 801d792:	d119      	bne.n	801d7c8 <tcp_process+0x7bc>
 801d794:	687b      	ldr	r3, [r7, #4]
 801d796:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d798:	2b00      	cmp	r3, #0
 801d79a:	d115      	bne.n	801d7c8 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 801d79c:	4b11      	ldr	r3, [pc, #68]	; (801d7e4 <tcp_process+0x7d8>)
 801d79e:	781b      	ldrb	r3, [r3, #0]
 801d7a0:	f043 0310 	orr.w	r3, r3, #16
 801d7a4:	b2da      	uxtb	r2, r3
 801d7a6:	4b0f      	ldr	r3, [pc, #60]	; (801d7e4 <tcp_process+0x7d8>)
 801d7a8:	701a      	strb	r2, [r3, #0]
      }
      break;
 801d7aa:	e00d      	b.n	801d7c8 <tcp_process+0x7bc>
    default:
      break;
 801d7ac:	bf00      	nop
 801d7ae:	e00c      	b.n	801d7ca <tcp_process+0x7be>
      break;
 801d7b0:	bf00      	nop
 801d7b2:	e00a      	b.n	801d7ca <tcp_process+0x7be>
      break;
 801d7b4:	bf00      	nop
 801d7b6:	e008      	b.n	801d7ca <tcp_process+0x7be>
      break;
 801d7b8:	bf00      	nop
 801d7ba:	e006      	b.n	801d7ca <tcp_process+0x7be>
      break;
 801d7bc:	bf00      	nop
 801d7be:	e004      	b.n	801d7ca <tcp_process+0x7be>
      break;
 801d7c0:	bf00      	nop
 801d7c2:	e002      	b.n	801d7ca <tcp_process+0x7be>
      break;
 801d7c4:	bf00      	nop
 801d7c6:	e000      	b.n	801d7ca <tcp_process+0x7be>
      break;
 801d7c8:	bf00      	nop
  }
  return ERR_OK;
 801d7ca:	2300      	movs	r3, #0
}
 801d7cc:	4618      	mov	r0, r3
 801d7ce:	3724      	adds	r7, #36	; 0x24
 801d7d0:	46bd      	mov	sp, r7
 801d7d2:	bd90      	pop	{r4, r7, pc}
 801d7d4:	2001c0f8 	.word	0x2001c0f8
 801d7d8:	2001c10c 	.word	0x2001c10c
 801d7dc:	20013c58 	.word	0x20013c58
 801d7e0:	20013c50 	.word	0x20013c50
 801d7e4:	20013c59 	.word	0x20013c59
 801d7e8:	2001c0fc 	.word	0x2001c0fc

0801d7ec <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801d7ec:	b590      	push	{r4, r7, lr}
 801d7ee:	b085      	sub	sp, #20
 801d7f0:	af00      	add	r7, sp, #0
 801d7f2:	6078      	str	r0, [r7, #4]
 801d7f4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801d7f6:	687b      	ldr	r3, [r7, #4]
 801d7f8:	2b00      	cmp	r3, #0
 801d7fa:	d106      	bne.n	801d80a <tcp_oos_insert_segment+0x1e>
 801d7fc:	4b3b      	ldr	r3, [pc, #236]	; (801d8ec <tcp_oos_insert_segment+0x100>)
 801d7fe:	f240 421f 	movw	r2, #1055	; 0x41f
 801d802:	493b      	ldr	r1, [pc, #236]	; (801d8f0 <tcp_oos_insert_segment+0x104>)
 801d804:	483b      	ldr	r0, [pc, #236]	; (801d8f4 <tcp_oos_insert_segment+0x108>)
 801d806:	f009 f861 	bl	80268cc <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801d80a:	687b      	ldr	r3, [r7, #4]
 801d80c:	68db      	ldr	r3, [r3, #12]
 801d80e:	899b      	ldrh	r3, [r3, #12]
 801d810:	b29b      	uxth	r3, r3
 801d812:	4618      	mov	r0, r3
 801d814:	f7fa ffba 	bl	801878c <lwip_htons>
 801d818:	4603      	mov	r3, r0
 801d81a:	b2db      	uxtb	r3, r3
 801d81c:	f003 0301 	and.w	r3, r3, #1
 801d820:	2b00      	cmp	r3, #0
 801d822:	d028      	beq.n	801d876 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 801d824:	6838      	ldr	r0, [r7, #0]
 801d826:	f7fe f977 	bl	801bb18 <tcp_segs_free>
    next = NULL;
 801d82a:	2300      	movs	r3, #0
 801d82c:	603b      	str	r3, [r7, #0]
 801d82e:	e056      	b.n	801d8de <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801d830:	683b      	ldr	r3, [r7, #0]
 801d832:	68db      	ldr	r3, [r3, #12]
 801d834:	899b      	ldrh	r3, [r3, #12]
 801d836:	b29b      	uxth	r3, r3
 801d838:	4618      	mov	r0, r3
 801d83a:	f7fa ffa7 	bl	801878c <lwip_htons>
 801d83e:	4603      	mov	r3, r0
 801d840:	b2db      	uxtb	r3, r3
 801d842:	f003 0301 	and.w	r3, r3, #1
 801d846:	2b00      	cmp	r3, #0
 801d848:	d00d      	beq.n	801d866 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801d84a:	687b      	ldr	r3, [r7, #4]
 801d84c:	68db      	ldr	r3, [r3, #12]
 801d84e:	899b      	ldrh	r3, [r3, #12]
 801d850:	b29c      	uxth	r4, r3
 801d852:	2001      	movs	r0, #1
 801d854:	f7fa ff9a 	bl	801878c <lwip_htons>
 801d858:	4603      	mov	r3, r0
 801d85a:	461a      	mov	r2, r3
 801d85c:	687b      	ldr	r3, [r7, #4]
 801d85e:	68db      	ldr	r3, [r3, #12]
 801d860:	4322      	orrs	r2, r4
 801d862:	b292      	uxth	r2, r2
 801d864:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801d866:	683b      	ldr	r3, [r7, #0]
 801d868:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801d86a:	683b      	ldr	r3, [r7, #0]
 801d86c:	681b      	ldr	r3, [r3, #0]
 801d86e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 801d870:	68f8      	ldr	r0, [r7, #12]
 801d872:	f7fe f966 	bl	801bb42 <tcp_seg_free>
    while (next &&
 801d876:	683b      	ldr	r3, [r7, #0]
 801d878:	2b00      	cmp	r3, #0
 801d87a:	d00e      	beq.n	801d89a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801d87c:	687b      	ldr	r3, [r7, #4]
 801d87e:	891b      	ldrh	r3, [r3, #8]
 801d880:	461a      	mov	r2, r3
 801d882:	4b1d      	ldr	r3, [pc, #116]	; (801d8f8 <tcp_oos_insert_segment+0x10c>)
 801d884:	681b      	ldr	r3, [r3, #0]
 801d886:	441a      	add	r2, r3
 801d888:	683b      	ldr	r3, [r7, #0]
 801d88a:	68db      	ldr	r3, [r3, #12]
 801d88c:	685b      	ldr	r3, [r3, #4]
 801d88e:	6839      	ldr	r1, [r7, #0]
 801d890:	8909      	ldrh	r1, [r1, #8]
 801d892:	440b      	add	r3, r1
 801d894:	1ad3      	subs	r3, r2, r3
    while (next &&
 801d896:	2b00      	cmp	r3, #0
 801d898:	daca      	bge.n	801d830 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801d89a:	683b      	ldr	r3, [r7, #0]
 801d89c:	2b00      	cmp	r3, #0
 801d89e:	d01e      	beq.n	801d8de <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801d8a0:	687b      	ldr	r3, [r7, #4]
 801d8a2:	891b      	ldrh	r3, [r3, #8]
 801d8a4:	461a      	mov	r2, r3
 801d8a6:	4b14      	ldr	r3, [pc, #80]	; (801d8f8 <tcp_oos_insert_segment+0x10c>)
 801d8a8:	681b      	ldr	r3, [r3, #0]
 801d8aa:	441a      	add	r2, r3
 801d8ac:	683b      	ldr	r3, [r7, #0]
 801d8ae:	68db      	ldr	r3, [r3, #12]
 801d8b0:	685b      	ldr	r3, [r3, #4]
 801d8b2:	1ad3      	subs	r3, r2, r3
    if (next &&
 801d8b4:	2b00      	cmp	r3, #0
 801d8b6:	dd12      	ble.n	801d8de <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801d8b8:	683b      	ldr	r3, [r7, #0]
 801d8ba:	68db      	ldr	r3, [r3, #12]
 801d8bc:	685b      	ldr	r3, [r3, #4]
 801d8be:	b29a      	uxth	r2, r3
 801d8c0:	4b0d      	ldr	r3, [pc, #52]	; (801d8f8 <tcp_oos_insert_segment+0x10c>)
 801d8c2:	681b      	ldr	r3, [r3, #0]
 801d8c4:	b29b      	uxth	r3, r3
 801d8c6:	1ad3      	subs	r3, r2, r3
 801d8c8:	b29a      	uxth	r2, r3
 801d8ca:	687b      	ldr	r3, [r7, #4]
 801d8cc:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801d8ce:	687b      	ldr	r3, [r7, #4]
 801d8d0:	685a      	ldr	r2, [r3, #4]
 801d8d2:	687b      	ldr	r3, [r7, #4]
 801d8d4:	891b      	ldrh	r3, [r3, #8]
 801d8d6:	4619      	mov	r1, r3
 801d8d8:	4610      	mov	r0, r2
 801d8da:	f7fc f9e7 	bl	8019cac <pbuf_realloc>
    }
  }
  cseg->next = next;
 801d8de:	687b      	ldr	r3, [r7, #4]
 801d8e0:	683a      	ldr	r2, [r7, #0]
 801d8e2:	601a      	str	r2, [r3, #0]
}
 801d8e4:	bf00      	nop
 801d8e6:	3714      	adds	r7, #20
 801d8e8:	46bd      	mov	sp, r7
 801d8ea:	bd90      	pop	{r4, r7, pc}
 801d8ec:	0802db28 	.word	0x0802db28
 801d8f0:	0802dde8 	.word	0x0802dde8
 801d8f4:	0802db74 	.word	0x0802db74
 801d8f8:	20013c4c 	.word	0x20013c4c

0801d8fc <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 801d8fc:	b5b0      	push	{r4, r5, r7, lr}
 801d8fe:	b086      	sub	sp, #24
 801d900:	af00      	add	r7, sp, #0
 801d902:	60f8      	str	r0, [r7, #12]
 801d904:	60b9      	str	r1, [r7, #8]
 801d906:	607a      	str	r2, [r7, #4]
 801d908:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801d90a:	e03e      	b.n	801d98a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 801d90c:	68bb      	ldr	r3, [r7, #8]
 801d90e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 801d910:	68bb      	ldr	r3, [r7, #8]
 801d912:	681b      	ldr	r3, [r3, #0]
 801d914:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801d916:	697b      	ldr	r3, [r7, #20]
 801d918:	685b      	ldr	r3, [r3, #4]
 801d91a:	4618      	mov	r0, r3
 801d91c:	f7fc fbda 	bl	801a0d4 <pbuf_clen>
 801d920:	4603      	mov	r3, r0
 801d922:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801d924:	68fb      	ldr	r3, [r7, #12]
 801d926:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801d92a:	8a7a      	ldrh	r2, [r7, #18]
 801d92c:	429a      	cmp	r2, r3
 801d92e:	d906      	bls.n	801d93e <tcp_free_acked_segments+0x42>
 801d930:	4b2a      	ldr	r3, [pc, #168]	; (801d9dc <tcp_free_acked_segments+0xe0>)
 801d932:	f240 4257 	movw	r2, #1111	; 0x457
 801d936:	492a      	ldr	r1, [pc, #168]	; (801d9e0 <tcp_free_acked_segments+0xe4>)
 801d938:	482a      	ldr	r0, [pc, #168]	; (801d9e4 <tcp_free_acked_segments+0xe8>)
 801d93a:	f008 ffc7 	bl	80268cc <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801d93e:	68fb      	ldr	r3, [r7, #12]
 801d940:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 801d944:	8a7b      	ldrh	r3, [r7, #18]
 801d946:	1ad3      	subs	r3, r2, r3
 801d948:	b29a      	uxth	r2, r3
 801d94a:	68fb      	ldr	r3, [r7, #12]
 801d94c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801d950:	697b      	ldr	r3, [r7, #20]
 801d952:	891a      	ldrh	r2, [r3, #8]
 801d954:	4b24      	ldr	r3, [pc, #144]	; (801d9e8 <tcp_free_acked_segments+0xec>)
 801d956:	881b      	ldrh	r3, [r3, #0]
 801d958:	4413      	add	r3, r2
 801d95a:	b29a      	uxth	r2, r3
 801d95c:	4b22      	ldr	r3, [pc, #136]	; (801d9e8 <tcp_free_acked_segments+0xec>)
 801d95e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 801d960:	6978      	ldr	r0, [r7, #20]
 801d962:	f7fe f8ee 	bl	801bb42 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801d966:	68fb      	ldr	r3, [r7, #12]
 801d968:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801d96c:	2b00      	cmp	r3, #0
 801d96e:	d00c      	beq.n	801d98a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 801d970:	68bb      	ldr	r3, [r7, #8]
 801d972:	2b00      	cmp	r3, #0
 801d974:	d109      	bne.n	801d98a <tcp_free_acked_segments+0x8e>
 801d976:	683b      	ldr	r3, [r7, #0]
 801d978:	2b00      	cmp	r3, #0
 801d97a:	d106      	bne.n	801d98a <tcp_free_acked_segments+0x8e>
 801d97c:	4b17      	ldr	r3, [pc, #92]	; (801d9dc <tcp_free_acked_segments+0xe0>)
 801d97e:	f240 4261 	movw	r2, #1121	; 0x461
 801d982:	491a      	ldr	r1, [pc, #104]	; (801d9ec <tcp_free_acked_segments+0xf0>)
 801d984:	4817      	ldr	r0, [pc, #92]	; (801d9e4 <tcp_free_acked_segments+0xe8>)
 801d986:	f008 ffa1 	bl	80268cc <iprintf>
  while (seg_list != NULL &&
 801d98a:	68bb      	ldr	r3, [r7, #8]
 801d98c:	2b00      	cmp	r3, #0
 801d98e:	d020      	beq.n	801d9d2 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 801d990:	68bb      	ldr	r3, [r7, #8]
 801d992:	68db      	ldr	r3, [r3, #12]
 801d994:	685b      	ldr	r3, [r3, #4]
 801d996:	4618      	mov	r0, r3
 801d998:	f7fa ff0d 	bl	80187b6 <lwip_htonl>
 801d99c:	4604      	mov	r4, r0
 801d99e:	68bb      	ldr	r3, [r7, #8]
 801d9a0:	891b      	ldrh	r3, [r3, #8]
 801d9a2:	461d      	mov	r5, r3
 801d9a4:	68bb      	ldr	r3, [r7, #8]
 801d9a6:	68db      	ldr	r3, [r3, #12]
 801d9a8:	899b      	ldrh	r3, [r3, #12]
 801d9aa:	b29b      	uxth	r3, r3
 801d9ac:	4618      	mov	r0, r3
 801d9ae:	f7fa feed 	bl	801878c <lwip_htons>
 801d9b2:	4603      	mov	r3, r0
 801d9b4:	b2db      	uxtb	r3, r3
 801d9b6:	f003 0303 	and.w	r3, r3, #3
 801d9ba:	2b00      	cmp	r3, #0
 801d9bc:	d001      	beq.n	801d9c2 <tcp_free_acked_segments+0xc6>
 801d9be:	2301      	movs	r3, #1
 801d9c0:	e000      	b.n	801d9c4 <tcp_free_acked_segments+0xc8>
 801d9c2:	2300      	movs	r3, #0
 801d9c4:	442b      	add	r3, r5
 801d9c6:	18e2      	adds	r2, r4, r3
 801d9c8:	4b09      	ldr	r3, [pc, #36]	; (801d9f0 <tcp_free_acked_segments+0xf4>)
 801d9ca:	681b      	ldr	r3, [r3, #0]
 801d9cc:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801d9ce:	2b00      	cmp	r3, #0
 801d9d0:	dd9c      	ble.n	801d90c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801d9d2:	68bb      	ldr	r3, [r7, #8]
}
 801d9d4:	4618      	mov	r0, r3
 801d9d6:	3718      	adds	r7, #24
 801d9d8:	46bd      	mov	sp, r7
 801d9da:	bdb0      	pop	{r4, r5, r7, pc}
 801d9dc:	0802db28 	.word	0x0802db28
 801d9e0:	0802de10 	.word	0x0802de10
 801d9e4:	0802db74 	.word	0x0802db74
 801d9e8:	20013c54 	.word	0x20013c54
 801d9ec:	0802de38 	.word	0x0802de38
 801d9f0:	20013c50 	.word	0x20013c50

0801d9f4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801d9f4:	b5b0      	push	{r4, r5, r7, lr}
 801d9f6:	b094      	sub	sp, #80	; 0x50
 801d9f8:	af00      	add	r7, sp, #0
 801d9fa:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 801d9fc:	2300      	movs	r3, #0
 801d9fe:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801da00:	687b      	ldr	r3, [r7, #4]
 801da02:	2b00      	cmp	r3, #0
 801da04:	d106      	bne.n	801da14 <tcp_receive+0x20>
 801da06:	4b91      	ldr	r3, [pc, #580]	; (801dc4c <tcp_receive+0x258>)
 801da08:	f240 427b 	movw	r2, #1147	; 0x47b
 801da0c:	4990      	ldr	r1, [pc, #576]	; (801dc50 <tcp_receive+0x25c>)
 801da0e:	4891      	ldr	r0, [pc, #580]	; (801dc54 <tcp_receive+0x260>)
 801da10:	f008 ff5c 	bl	80268cc <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801da14:	687b      	ldr	r3, [r7, #4]
 801da16:	7d1b      	ldrb	r3, [r3, #20]
 801da18:	2b03      	cmp	r3, #3
 801da1a:	d806      	bhi.n	801da2a <tcp_receive+0x36>
 801da1c:	4b8b      	ldr	r3, [pc, #556]	; (801dc4c <tcp_receive+0x258>)
 801da1e:	f240 427c 	movw	r2, #1148	; 0x47c
 801da22:	498d      	ldr	r1, [pc, #564]	; (801dc58 <tcp_receive+0x264>)
 801da24:	488b      	ldr	r0, [pc, #556]	; (801dc54 <tcp_receive+0x260>)
 801da26:	f008 ff51 	bl	80268cc <iprintf>

  if (flags & TCP_ACK) {
 801da2a:	4b8c      	ldr	r3, [pc, #560]	; (801dc5c <tcp_receive+0x268>)
 801da2c:	781b      	ldrb	r3, [r3, #0]
 801da2e:	f003 0310 	and.w	r3, r3, #16
 801da32:	2b00      	cmp	r3, #0
 801da34:	f000 8264 	beq.w	801df00 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801da38:	687b      	ldr	r3, [r7, #4]
 801da3a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801da3e:	461a      	mov	r2, r3
 801da40:	687b      	ldr	r3, [r7, #4]
 801da42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801da44:	4413      	add	r3, r2
 801da46:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801da48:	687b      	ldr	r3, [r7, #4]
 801da4a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801da4c:	4b84      	ldr	r3, [pc, #528]	; (801dc60 <tcp_receive+0x26c>)
 801da4e:	681b      	ldr	r3, [r3, #0]
 801da50:	1ad3      	subs	r3, r2, r3
 801da52:	2b00      	cmp	r3, #0
 801da54:	db1b      	blt.n	801da8e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801da56:	687b      	ldr	r3, [r7, #4]
 801da58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801da5a:	4b81      	ldr	r3, [pc, #516]	; (801dc60 <tcp_receive+0x26c>)
 801da5c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801da5e:	429a      	cmp	r2, r3
 801da60:	d106      	bne.n	801da70 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801da62:	687b      	ldr	r3, [r7, #4]
 801da64:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801da66:	4b7f      	ldr	r3, [pc, #508]	; (801dc64 <tcp_receive+0x270>)
 801da68:	681b      	ldr	r3, [r3, #0]
 801da6a:	1ad3      	subs	r3, r2, r3
 801da6c:	2b00      	cmp	r3, #0
 801da6e:	db0e      	blt.n	801da8e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801da70:	687b      	ldr	r3, [r7, #4]
 801da72:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801da74:	4b7b      	ldr	r3, [pc, #492]	; (801dc64 <tcp_receive+0x270>)
 801da76:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801da78:	429a      	cmp	r2, r3
 801da7a:	d125      	bne.n	801dac8 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801da7c:	4b7a      	ldr	r3, [pc, #488]	; (801dc68 <tcp_receive+0x274>)
 801da7e:	681b      	ldr	r3, [r3, #0]
 801da80:	89db      	ldrh	r3, [r3, #14]
 801da82:	b29a      	uxth	r2, r3
 801da84:	687b      	ldr	r3, [r7, #4]
 801da86:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801da8a:	429a      	cmp	r2, r3
 801da8c:	d91c      	bls.n	801dac8 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801da8e:	4b76      	ldr	r3, [pc, #472]	; (801dc68 <tcp_receive+0x274>)
 801da90:	681b      	ldr	r3, [r3, #0]
 801da92:	89db      	ldrh	r3, [r3, #14]
 801da94:	b29a      	uxth	r2, r3
 801da96:	687b      	ldr	r3, [r7, #4]
 801da98:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801da9c:	687b      	ldr	r3, [r7, #4]
 801da9e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 801daa2:	687b      	ldr	r3, [r7, #4]
 801daa4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801daa8:	429a      	cmp	r2, r3
 801daaa:	d205      	bcs.n	801dab8 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 801daac:	687b      	ldr	r3, [r7, #4]
 801daae:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801dab2:	687b      	ldr	r3, [r7, #4]
 801dab4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 801dab8:	4b69      	ldr	r3, [pc, #420]	; (801dc60 <tcp_receive+0x26c>)
 801daba:	681a      	ldr	r2, [r3, #0]
 801dabc:	687b      	ldr	r3, [r7, #4]
 801dabe:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 801dac0:	4b68      	ldr	r3, [pc, #416]	; (801dc64 <tcp_receive+0x270>)
 801dac2:	681a      	ldr	r2, [r3, #0]
 801dac4:	687b      	ldr	r3, [r7, #4]
 801dac6:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801dac8:	4b66      	ldr	r3, [pc, #408]	; (801dc64 <tcp_receive+0x270>)
 801daca:	681a      	ldr	r2, [r3, #0]
 801dacc:	687b      	ldr	r3, [r7, #4]
 801dace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801dad0:	1ad3      	subs	r3, r2, r3
 801dad2:	2b00      	cmp	r3, #0
 801dad4:	dc58      	bgt.n	801db88 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801dad6:	4b65      	ldr	r3, [pc, #404]	; (801dc6c <tcp_receive+0x278>)
 801dad8:	881b      	ldrh	r3, [r3, #0]
 801dada:	2b00      	cmp	r3, #0
 801dadc:	d14b      	bne.n	801db76 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801dade:	687b      	ldr	r3, [r7, #4]
 801dae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801dae2:	687a      	ldr	r2, [r7, #4]
 801dae4:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 801dae8:	4413      	add	r3, r2
 801daea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801daec:	429a      	cmp	r2, r3
 801daee:	d142      	bne.n	801db76 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 801daf0:	687b      	ldr	r3, [r7, #4]
 801daf2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801daf6:	2b00      	cmp	r3, #0
 801daf8:	db3d      	blt.n	801db76 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801dafa:	687b      	ldr	r3, [r7, #4]
 801dafc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801dafe:	4b59      	ldr	r3, [pc, #356]	; (801dc64 <tcp_receive+0x270>)
 801db00:	681b      	ldr	r3, [r3, #0]
 801db02:	429a      	cmp	r2, r3
 801db04:	d137      	bne.n	801db76 <tcp_receive+0x182>
              found_dupack = 1;
 801db06:	2301      	movs	r3, #1
 801db08:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801db0a:	687b      	ldr	r3, [r7, #4]
 801db0c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801db10:	2bff      	cmp	r3, #255	; 0xff
 801db12:	d007      	beq.n	801db24 <tcp_receive+0x130>
                ++pcb->dupacks;
 801db14:	687b      	ldr	r3, [r7, #4]
 801db16:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801db1a:	3301      	adds	r3, #1
 801db1c:	b2da      	uxtb	r2, r3
 801db1e:	687b      	ldr	r3, [r7, #4]
 801db20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 801db24:	687b      	ldr	r3, [r7, #4]
 801db26:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801db2a:	2b03      	cmp	r3, #3
 801db2c:	d91b      	bls.n	801db66 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801db2e:	687b      	ldr	r3, [r7, #4]
 801db30:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801db34:	687b      	ldr	r3, [r7, #4]
 801db36:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801db38:	4413      	add	r3, r2
 801db3a:	b29a      	uxth	r2, r3
 801db3c:	687b      	ldr	r3, [r7, #4]
 801db3e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801db42:	429a      	cmp	r2, r3
 801db44:	d30a      	bcc.n	801db5c <tcp_receive+0x168>
 801db46:	687b      	ldr	r3, [r7, #4]
 801db48:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801db4c:	687b      	ldr	r3, [r7, #4]
 801db4e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801db50:	4413      	add	r3, r2
 801db52:	b29a      	uxth	r2, r3
 801db54:	687b      	ldr	r3, [r7, #4]
 801db56:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801db5a:	e004      	b.n	801db66 <tcp_receive+0x172>
 801db5c:	687b      	ldr	r3, [r7, #4]
 801db5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801db62:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 801db66:	687b      	ldr	r3, [r7, #4]
 801db68:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801db6c:	2b02      	cmp	r3, #2
 801db6e:	d902      	bls.n	801db76 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 801db70:	6878      	ldr	r0, [r7, #4]
 801db72:	f002 fb43 	bl	80201fc <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801db76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801db78:	2b00      	cmp	r3, #0
 801db7a:	f040 8161 	bne.w	801de40 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 801db7e:	687b      	ldr	r3, [r7, #4]
 801db80:	2200      	movs	r2, #0
 801db82:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801db86:	e15b      	b.n	801de40 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801db88:	4b36      	ldr	r3, [pc, #216]	; (801dc64 <tcp_receive+0x270>)
 801db8a:	681a      	ldr	r2, [r3, #0]
 801db8c:	687b      	ldr	r3, [r7, #4]
 801db8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801db90:	1ad3      	subs	r3, r2, r3
 801db92:	3b01      	subs	r3, #1
 801db94:	2b00      	cmp	r3, #0
 801db96:	f2c0 814e 	blt.w	801de36 <tcp_receive+0x442>
 801db9a:	4b32      	ldr	r3, [pc, #200]	; (801dc64 <tcp_receive+0x270>)
 801db9c:	681a      	ldr	r2, [r3, #0]
 801db9e:	687b      	ldr	r3, [r7, #4]
 801dba0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801dba2:	1ad3      	subs	r3, r2, r3
 801dba4:	2b00      	cmp	r3, #0
 801dba6:	f300 8146 	bgt.w	801de36 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801dbaa:	687b      	ldr	r3, [r7, #4]
 801dbac:	8b5b      	ldrh	r3, [r3, #26]
 801dbae:	f003 0304 	and.w	r3, r3, #4
 801dbb2:	2b00      	cmp	r3, #0
 801dbb4:	d010      	beq.n	801dbd8 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801dbb6:	687b      	ldr	r3, [r7, #4]
 801dbb8:	8b5b      	ldrh	r3, [r3, #26]
 801dbba:	f023 0304 	bic.w	r3, r3, #4
 801dbbe:	b29a      	uxth	r2, r3
 801dbc0:	687b      	ldr	r3, [r7, #4]
 801dbc2:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 801dbc4:	687b      	ldr	r3, [r7, #4]
 801dbc6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801dbca:	687b      	ldr	r3, [r7, #4]
 801dbcc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 801dbd0:	687b      	ldr	r3, [r7, #4]
 801dbd2:	2200      	movs	r2, #0
 801dbd4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 801dbd8:	687b      	ldr	r3, [r7, #4]
 801dbda:	2200      	movs	r2, #0
 801dbdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801dbe0:	687b      	ldr	r3, [r7, #4]
 801dbe2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801dbe6:	10db      	asrs	r3, r3, #3
 801dbe8:	b21b      	sxth	r3, r3
 801dbea:	b29a      	uxth	r2, r3
 801dbec:	687b      	ldr	r3, [r7, #4]
 801dbee:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801dbf2:	b29b      	uxth	r3, r3
 801dbf4:	4413      	add	r3, r2
 801dbf6:	b29b      	uxth	r3, r3
 801dbf8:	b21a      	sxth	r2, r3
 801dbfa:	687b      	ldr	r3, [r7, #4]
 801dbfc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 801dc00:	4b18      	ldr	r3, [pc, #96]	; (801dc64 <tcp_receive+0x270>)
 801dc02:	681b      	ldr	r3, [r3, #0]
 801dc04:	b29a      	uxth	r2, r3
 801dc06:	687b      	ldr	r3, [r7, #4]
 801dc08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801dc0a:	b29b      	uxth	r3, r3
 801dc0c:	1ad3      	subs	r3, r2, r3
 801dc0e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 801dc10:	687b      	ldr	r3, [r7, #4]
 801dc12:	2200      	movs	r2, #0
 801dc14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 801dc18:	4b12      	ldr	r3, [pc, #72]	; (801dc64 <tcp_receive+0x270>)
 801dc1a:	681a      	ldr	r2, [r3, #0]
 801dc1c:	687b      	ldr	r3, [r7, #4]
 801dc1e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 801dc20:	687b      	ldr	r3, [r7, #4]
 801dc22:	7d1b      	ldrb	r3, [r3, #20]
 801dc24:	2b03      	cmp	r3, #3
 801dc26:	f240 8097 	bls.w	801dd58 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 801dc2a:	687b      	ldr	r3, [r7, #4]
 801dc2c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801dc30:	687b      	ldr	r3, [r7, #4]
 801dc32:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801dc36:	429a      	cmp	r2, r3
 801dc38:	d245      	bcs.n	801dcc6 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801dc3a:	687b      	ldr	r3, [r7, #4]
 801dc3c:	8b5b      	ldrh	r3, [r3, #26]
 801dc3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801dc42:	2b00      	cmp	r3, #0
 801dc44:	d014      	beq.n	801dc70 <tcp_receive+0x27c>
 801dc46:	2301      	movs	r3, #1
 801dc48:	e013      	b.n	801dc72 <tcp_receive+0x27e>
 801dc4a:	bf00      	nop
 801dc4c:	0802db28 	.word	0x0802db28
 801dc50:	0802de58 	.word	0x0802de58
 801dc54:	0802db74 	.word	0x0802db74
 801dc58:	0802de74 	.word	0x0802de74
 801dc5c:	20013c58 	.word	0x20013c58
 801dc60:	20013c4c 	.word	0x20013c4c
 801dc64:	20013c50 	.word	0x20013c50
 801dc68:	20013c3c 	.word	0x20013c3c
 801dc6c:	20013c56 	.word	0x20013c56
 801dc70:	2302      	movs	r3, #2
 801dc72:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801dc76:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801dc7a:	b29a      	uxth	r2, r3
 801dc7c:	687b      	ldr	r3, [r7, #4]
 801dc7e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801dc80:	fb12 f303 	smulbb	r3, r2, r3
 801dc84:	b29b      	uxth	r3, r3
 801dc86:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801dc88:	4293      	cmp	r3, r2
 801dc8a:	bf28      	it	cs
 801dc8c:	4613      	movcs	r3, r2
 801dc8e:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801dc90:	687b      	ldr	r3, [r7, #4]
 801dc92:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801dc96:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801dc98:	4413      	add	r3, r2
 801dc9a:	b29a      	uxth	r2, r3
 801dc9c:	687b      	ldr	r3, [r7, #4]
 801dc9e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801dca2:	429a      	cmp	r2, r3
 801dca4:	d309      	bcc.n	801dcba <tcp_receive+0x2c6>
 801dca6:	687b      	ldr	r3, [r7, #4]
 801dca8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801dcac:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801dcae:	4413      	add	r3, r2
 801dcb0:	b29a      	uxth	r2, r3
 801dcb2:	687b      	ldr	r3, [r7, #4]
 801dcb4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801dcb8:	e04e      	b.n	801dd58 <tcp_receive+0x364>
 801dcba:	687b      	ldr	r3, [r7, #4]
 801dcbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801dcc0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801dcc4:	e048      	b.n	801dd58 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801dcc6:	687b      	ldr	r3, [r7, #4]
 801dcc8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801dccc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801dcce:	4413      	add	r3, r2
 801dcd0:	b29a      	uxth	r2, r3
 801dcd2:	687b      	ldr	r3, [r7, #4]
 801dcd4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801dcd8:	429a      	cmp	r2, r3
 801dcda:	d309      	bcc.n	801dcf0 <tcp_receive+0x2fc>
 801dcdc:	687b      	ldr	r3, [r7, #4]
 801dcde:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801dce2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801dce4:	4413      	add	r3, r2
 801dce6:	b29a      	uxth	r2, r3
 801dce8:	687b      	ldr	r3, [r7, #4]
 801dcea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801dcee:	e004      	b.n	801dcfa <tcp_receive+0x306>
 801dcf0:	687b      	ldr	r3, [r7, #4]
 801dcf2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801dcf6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801dcfa:	687b      	ldr	r3, [r7, #4]
 801dcfc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801dd00:	687b      	ldr	r3, [r7, #4]
 801dd02:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801dd06:	429a      	cmp	r2, r3
 801dd08:	d326      	bcc.n	801dd58 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801dd0a:	687b      	ldr	r3, [r7, #4]
 801dd0c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801dd10:	687b      	ldr	r3, [r7, #4]
 801dd12:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801dd16:	1ad3      	subs	r3, r2, r3
 801dd18:	b29a      	uxth	r2, r3
 801dd1a:	687b      	ldr	r3, [r7, #4]
 801dd1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801dd20:	687b      	ldr	r3, [r7, #4]
 801dd22:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801dd26:	687b      	ldr	r3, [r7, #4]
 801dd28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801dd2a:	4413      	add	r3, r2
 801dd2c:	b29a      	uxth	r2, r3
 801dd2e:	687b      	ldr	r3, [r7, #4]
 801dd30:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801dd34:	429a      	cmp	r2, r3
 801dd36:	d30a      	bcc.n	801dd4e <tcp_receive+0x35a>
 801dd38:	687b      	ldr	r3, [r7, #4]
 801dd3a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801dd3e:	687b      	ldr	r3, [r7, #4]
 801dd40:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801dd42:	4413      	add	r3, r2
 801dd44:	b29a      	uxth	r2, r3
 801dd46:	687b      	ldr	r3, [r7, #4]
 801dd48:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801dd4c:	e004      	b.n	801dd58 <tcp_receive+0x364>
 801dd4e:	687b      	ldr	r3, [r7, #4]
 801dd50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801dd54:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801dd58:	687b      	ldr	r3, [r7, #4]
 801dd5a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801dd5c:	687b      	ldr	r3, [r7, #4]
 801dd5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801dd60:	4a98      	ldr	r2, [pc, #608]	; (801dfc4 <tcp_receive+0x5d0>)
 801dd62:	6878      	ldr	r0, [r7, #4]
 801dd64:	f7ff fdca 	bl	801d8fc <tcp_free_acked_segments>
 801dd68:	4602      	mov	r2, r0
 801dd6a:	687b      	ldr	r3, [r7, #4]
 801dd6c:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801dd6e:	687b      	ldr	r3, [r7, #4]
 801dd70:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 801dd72:	687b      	ldr	r3, [r7, #4]
 801dd74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801dd76:	4a94      	ldr	r2, [pc, #592]	; (801dfc8 <tcp_receive+0x5d4>)
 801dd78:	6878      	ldr	r0, [r7, #4]
 801dd7a:	f7ff fdbf 	bl	801d8fc <tcp_free_acked_segments>
 801dd7e:	4602      	mov	r2, r0
 801dd80:	687b      	ldr	r3, [r7, #4]
 801dd82:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801dd84:	687b      	ldr	r3, [r7, #4]
 801dd86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801dd88:	2b00      	cmp	r3, #0
 801dd8a:	d104      	bne.n	801dd96 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 801dd8c:	687b      	ldr	r3, [r7, #4]
 801dd8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801dd92:	861a      	strh	r2, [r3, #48]	; 0x30
 801dd94:	e002      	b.n	801dd9c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 801dd96:	687b      	ldr	r3, [r7, #4]
 801dd98:	2200      	movs	r2, #0
 801dd9a:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 801dd9c:	687b      	ldr	r3, [r7, #4]
 801dd9e:	2200      	movs	r2, #0
 801dda0:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801dda2:	687b      	ldr	r3, [r7, #4]
 801dda4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801dda6:	2b00      	cmp	r3, #0
 801dda8:	d103      	bne.n	801ddb2 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 801ddaa:	687b      	ldr	r3, [r7, #4]
 801ddac:	2200      	movs	r2, #0
 801ddae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801ddb2:	687b      	ldr	r3, [r7, #4]
 801ddb4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801ddb8:	4b84      	ldr	r3, [pc, #528]	; (801dfcc <tcp_receive+0x5d8>)
 801ddba:	881b      	ldrh	r3, [r3, #0]
 801ddbc:	4413      	add	r3, r2
 801ddbe:	b29a      	uxth	r2, r3
 801ddc0:	687b      	ldr	r3, [r7, #4]
 801ddc2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801ddc6:	687b      	ldr	r3, [r7, #4]
 801ddc8:	8b5b      	ldrh	r3, [r3, #26]
 801ddca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801ddce:	2b00      	cmp	r3, #0
 801ddd0:	d035      	beq.n	801de3e <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801ddd2:	687b      	ldr	r3, [r7, #4]
 801ddd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ddd6:	2b00      	cmp	r3, #0
 801ddd8:	d118      	bne.n	801de0c <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 801ddda:	687b      	ldr	r3, [r7, #4]
 801dddc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ddde:	2b00      	cmp	r3, #0
 801dde0:	d00c      	beq.n	801ddfc <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801dde2:	687b      	ldr	r3, [r7, #4]
 801dde4:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801dde6:	687b      	ldr	r3, [r7, #4]
 801dde8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ddea:	68db      	ldr	r3, [r3, #12]
 801ddec:	685b      	ldr	r3, [r3, #4]
 801ddee:	4618      	mov	r0, r3
 801ddf0:	f7fa fce1 	bl	80187b6 <lwip_htonl>
 801ddf4:	4603      	mov	r3, r0
 801ddf6:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801ddf8:	2b00      	cmp	r3, #0
 801ddfa:	dc20      	bgt.n	801de3e <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 801ddfc:	687b      	ldr	r3, [r7, #4]
 801ddfe:	8b5b      	ldrh	r3, [r3, #26]
 801de00:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801de04:	b29a      	uxth	r2, r3
 801de06:	687b      	ldr	r3, [r7, #4]
 801de08:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801de0a:	e018      	b.n	801de3e <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801de0c:	687b      	ldr	r3, [r7, #4]
 801de0e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801de10:	687b      	ldr	r3, [r7, #4]
 801de12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801de14:	68db      	ldr	r3, [r3, #12]
 801de16:	685b      	ldr	r3, [r3, #4]
 801de18:	4618      	mov	r0, r3
 801de1a:	f7fa fccc 	bl	80187b6 <lwip_htonl>
 801de1e:	4603      	mov	r3, r0
 801de20:	1ae3      	subs	r3, r4, r3
 801de22:	2b00      	cmp	r3, #0
 801de24:	dc0b      	bgt.n	801de3e <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 801de26:	687b      	ldr	r3, [r7, #4]
 801de28:	8b5b      	ldrh	r3, [r3, #26]
 801de2a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801de2e:	b29a      	uxth	r2, r3
 801de30:	687b      	ldr	r3, [r7, #4]
 801de32:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801de34:	e003      	b.n	801de3e <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801de36:	6878      	ldr	r0, [r7, #4]
 801de38:	f002 fbce 	bl	80205d8 <tcp_send_empty_ack>
 801de3c:	e000      	b.n	801de40 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801de3e:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801de40:	687b      	ldr	r3, [r7, #4]
 801de42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801de44:	2b00      	cmp	r3, #0
 801de46:	d05b      	beq.n	801df00 <tcp_receive+0x50c>
 801de48:	687b      	ldr	r3, [r7, #4]
 801de4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801de4c:	4b60      	ldr	r3, [pc, #384]	; (801dfd0 <tcp_receive+0x5dc>)
 801de4e:	681b      	ldr	r3, [r3, #0]
 801de50:	1ad3      	subs	r3, r2, r3
 801de52:	2b00      	cmp	r3, #0
 801de54:	da54      	bge.n	801df00 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801de56:	4b5f      	ldr	r3, [pc, #380]	; (801dfd4 <tcp_receive+0x5e0>)
 801de58:	681b      	ldr	r3, [r3, #0]
 801de5a:	b29a      	uxth	r2, r3
 801de5c:	687b      	ldr	r3, [r7, #4]
 801de5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801de60:	b29b      	uxth	r3, r3
 801de62:	1ad3      	subs	r3, r2, r3
 801de64:	b29b      	uxth	r3, r3
 801de66:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801de6a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801de6e:	687b      	ldr	r3, [r7, #4]
 801de70:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801de74:	10db      	asrs	r3, r3, #3
 801de76:	b21b      	sxth	r3, r3
 801de78:	b29b      	uxth	r3, r3
 801de7a:	1ad3      	subs	r3, r2, r3
 801de7c:	b29b      	uxth	r3, r3
 801de7e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801de82:	687b      	ldr	r3, [r7, #4]
 801de84:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801de88:	b29a      	uxth	r2, r3
 801de8a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801de8e:	4413      	add	r3, r2
 801de90:	b29b      	uxth	r3, r3
 801de92:	b21a      	sxth	r2, r3
 801de94:	687b      	ldr	r3, [r7, #4]
 801de96:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 801de98:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801de9c:	2b00      	cmp	r3, #0
 801de9e:	da05      	bge.n	801deac <tcp_receive+0x4b8>
        m = (s16_t) - m;
 801dea0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801dea4:	425b      	negs	r3, r3
 801dea6:	b29b      	uxth	r3, r3
 801dea8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801deac:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801deb0:	687b      	ldr	r3, [r7, #4]
 801deb2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801deb6:	109b      	asrs	r3, r3, #2
 801deb8:	b21b      	sxth	r3, r3
 801deba:	b29b      	uxth	r3, r3
 801debc:	1ad3      	subs	r3, r2, r3
 801debe:	b29b      	uxth	r3, r3
 801dec0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 801dec4:	687b      	ldr	r3, [r7, #4]
 801dec6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801deca:	b29a      	uxth	r2, r3
 801decc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801ded0:	4413      	add	r3, r2
 801ded2:	b29b      	uxth	r3, r3
 801ded4:	b21a      	sxth	r2, r3
 801ded6:	687b      	ldr	r3, [r7, #4]
 801ded8:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801deda:	687b      	ldr	r3, [r7, #4]
 801dedc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801dee0:	10db      	asrs	r3, r3, #3
 801dee2:	b21b      	sxth	r3, r3
 801dee4:	b29a      	uxth	r2, r3
 801dee6:	687b      	ldr	r3, [r7, #4]
 801dee8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801deec:	b29b      	uxth	r3, r3
 801deee:	4413      	add	r3, r2
 801def0:	b29b      	uxth	r3, r3
 801def2:	b21a      	sxth	r2, r3
 801def4:	687b      	ldr	r3, [r7, #4]
 801def6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801defa:	687b      	ldr	r3, [r7, #4]
 801defc:	2200      	movs	r2, #0
 801defe:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801df00:	4b35      	ldr	r3, [pc, #212]	; (801dfd8 <tcp_receive+0x5e4>)
 801df02:	881b      	ldrh	r3, [r3, #0]
 801df04:	2b00      	cmp	r3, #0
 801df06:	f000 84e2 	beq.w	801e8ce <tcp_receive+0xeda>
 801df0a:	687b      	ldr	r3, [r7, #4]
 801df0c:	7d1b      	ldrb	r3, [r3, #20]
 801df0e:	2b06      	cmp	r3, #6
 801df10:	f200 84dd 	bhi.w	801e8ce <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801df14:	687b      	ldr	r3, [r7, #4]
 801df16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801df18:	4b30      	ldr	r3, [pc, #192]	; (801dfdc <tcp_receive+0x5e8>)
 801df1a:	681b      	ldr	r3, [r3, #0]
 801df1c:	1ad3      	subs	r3, r2, r3
 801df1e:	3b01      	subs	r3, #1
 801df20:	2b00      	cmp	r3, #0
 801df22:	f2c0 808f 	blt.w	801e044 <tcp_receive+0x650>
 801df26:	687b      	ldr	r3, [r7, #4]
 801df28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801df2a:	4b2b      	ldr	r3, [pc, #172]	; (801dfd8 <tcp_receive+0x5e4>)
 801df2c:	881b      	ldrh	r3, [r3, #0]
 801df2e:	4619      	mov	r1, r3
 801df30:	4b2a      	ldr	r3, [pc, #168]	; (801dfdc <tcp_receive+0x5e8>)
 801df32:	681b      	ldr	r3, [r3, #0]
 801df34:	440b      	add	r3, r1
 801df36:	1ad3      	subs	r3, r2, r3
 801df38:	3301      	adds	r3, #1
 801df3a:	2b00      	cmp	r3, #0
 801df3c:	f300 8082 	bgt.w	801e044 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 801df40:	4b27      	ldr	r3, [pc, #156]	; (801dfe0 <tcp_receive+0x5ec>)
 801df42:	685b      	ldr	r3, [r3, #4]
 801df44:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 801df46:	687b      	ldr	r3, [r7, #4]
 801df48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801df4a:	4b24      	ldr	r3, [pc, #144]	; (801dfdc <tcp_receive+0x5e8>)
 801df4c:	681b      	ldr	r3, [r3, #0]
 801df4e:	1ad3      	subs	r3, r2, r3
 801df50:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801df52:	4b23      	ldr	r3, [pc, #140]	; (801dfe0 <tcp_receive+0x5ec>)
 801df54:	685b      	ldr	r3, [r3, #4]
 801df56:	2b00      	cmp	r3, #0
 801df58:	d106      	bne.n	801df68 <tcp_receive+0x574>
 801df5a:	4b22      	ldr	r3, [pc, #136]	; (801dfe4 <tcp_receive+0x5f0>)
 801df5c:	f240 5294 	movw	r2, #1428	; 0x594
 801df60:	4921      	ldr	r1, [pc, #132]	; (801dfe8 <tcp_receive+0x5f4>)
 801df62:	4822      	ldr	r0, [pc, #136]	; (801dfec <tcp_receive+0x5f8>)
 801df64:	f008 fcb2 	bl	80268cc <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801df68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801df6a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801df6e:	4293      	cmp	r3, r2
 801df70:	d906      	bls.n	801df80 <tcp_receive+0x58c>
 801df72:	4b1c      	ldr	r3, [pc, #112]	; (801dfe4 <tcp_receive+0x5f0>)
 801df74:	f240 5295 	movw	r2, #1429	; 0x595
 801df78:	491d      	ldr	r1, [pc, #116]	; (801dff0 <tcp_receive+0x5fc>)
 801df7a:	481c      	ldr	r0, [pc, #112]	; (801dfec <tcp_receive+0x5f8>)
 801df7c:	f008 fca6 	bl	80268cc <iprintf>
      off = (u16_t)off32;
 801df80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801df82:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801df86:	4b16      	ldr	r3, [pc, #88]	; (801dfe0 <tcp_receive+0x5ec>)
 801df88:	685b      	ldr	r3, [r3, #4]
 801df8a:	891b      	ldrh	r3, [r3, #8]
 801df8c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801df90:	429a      	cmp	r2, r3
 801df92:	d906      	bls.n	801dfa2 <tcp_receive+0x5ae>
 801df94:	4b13      	ldr	r3, [pc, #76]	; (801dfe4 <tcp_receive+0x5f0>)
 801df96:	f240 5297 	movw	r2, #1431	; 0x597
 801df9a:	4916      	ldr	r1, [pc, #88]	; (801dff4 <tcp_receive+0x600>)
 801df9c:	4813      	ldr	r0, [pc, #76]	; (801dfec <tcp_receive+0x5f8>)
 801df9e:	f008 fc95 	bl	80268cc <iprintf>
      inseg.len -= off;
 801dfa2:	4b0f      	ldr	r3, [pc, #60]	; (801dfe0 <tcp_receive+0x5ec>)
 801dfa4:	891a      	ldrh	r2, [r3, #8]
 801dfa6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801dfaa:	1ad3      	subs	r3, r2, r3
 801dfac:	b29a      	uxth	r2, r3
 801dfae:	4b0c      	ldr	r3, [pc, #48]	; (801dfe0 <tcp_receive+0x5ec>)
 801dfb0:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801dfb2:	4b0b      	ldr	r3, [pc, #44]	; (801dfe0 <tcp_receive+0x5ec>)
 801dfb4:	685b      	ldr	r3, [r3, #4]
 801dfb6:	891a      	ldrh	r2, [r3, #8]
 801dfb8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801dfbc:	1ad3      	subs	r3, r2, r3
 801dfbe:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 801dfc0:	e02a      	b.n	801e018 <tcp_receive+0x624>
 801dfc2:	bf00      	nop
 801dfc4:	0802de90 	.word	0x0802de90
 801dfc8:	0802de98 	.word	0x0802de98
 801dfcc:	20013c54 	.word	0x20013c54
 801dfd0:	20013c50 	.word	0x20013c50
 801dfd4:	2001c100 	.word	0x2001c100
 801dfd8:	20013c56 	.word	0x20013c56
 801dfdc:	20013c4c 	.word	0x20013c4c
 801dfe0:	20013c2c 	.word	0x20013c2c
 801dfe4:	0802db28 	.word	0x0802db28
 801dfe8:	0802dea0 	.word	0x0802dea0
 801dfec:	0802db74 	.word	0x0802db74
 801dff0:	0802deb0 	.word	0x0802deb0
 801dff4:	0802dec0 	.word	0x0802dec0
        off -= p->len;
 801dff8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801dffa:	895b      	ldrh	r3, [r3, #10]
 801dffc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801e000:	1ad3      	subs	r3, r2, r3
 801e002:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801e006:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801e008:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801e00a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 801e00c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801e00e:	2200      	movs	r2, #0
 801e010:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801e012:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801e014:	681b      	ldr	r3, [r3, #0]
 801e016:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 801e018:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801e01a:	895b      	ldrh	r3, [r3, #10]
 801e01c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801e020:	429a      	cmp	r2, r3
 801e022:	d8e9      	bhi.n	801dff8 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 801e024:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801e028:	4619      	mov	r1, r3
 801e02a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801e02c:	f7fb ff3e 	bl	8019eac <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801e030:	687b      	ldr	r3, [r7, #4]
 801e032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e034:	4a91      	ldr	r2, [pc, #580]	; (801e27c <tcp_receive+0x888>)
 801e036:	6013      	str	r3, [r2, #0]
 801e038:	4b91      	ldr	r3, [pc, #580]	; (801e280 <tcp_receive+0x88c>)
 801e03a:	68db      	ldr	r3, [r3, #12]
 801e03c:	4a8f      	ldr	r2, [pc, #572]	; (801e27c <tcp_receive+0x888>)
 801e03e:	6812      	ldr	r2, [r2, #0]
 801e040:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801e042:	e00d      	b.n	801e060 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 801e044:	4b8d      	ldr	r3, [pc, #564]	; (801e27c <tcp_receive+0x888>)
 801e046:	681a      	ldr	r2, [r3, #0]
 801e048:	687b      	ldr	r3, [r7, #4]
 801e04a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e04c:	1ad3      	subs	r3, r2, r3
 801e04e:	2b00      	cmp	r3, #0
 801e050:	da06      	bge.n	801e060 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801e052:	687b      	ldr	r3, [r7, #4]
 801e054:	8b5b      	ldrh	r3, [r3, #26]
 801e056:	f043 0302 	orr.w	r3, r3, #2
 801e05a:	b29a      	uxth	r2, r3
 801e05c:	687b      	ldr	r3, [r7, #4]
 801e05e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801e060:	4b86      	ldr	r3, [pc, #536]	; (801e27c <tcp_receive+0x888>)
 801e062:	681a      	ldr	r2, [r3, #0]
 801e064:	687b      	ldr	r3, [r7, #4]
 801e066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e068:	1ad3      	subs	r3, r2, r3
 801e06a:	2b00      	cmp	r3, #0
 801e06c:	f2c0 842a 	blt.w	801e8c4 <tcp_receive+0xed0>
 801e070:	4b82      	ldr	r3, [pc, #520]	; (801e27c <tcp_receive+0x888>)
 801e072:	681a      	ldr	r2, [r3, #0]
 801e074:	687b      	ldr	r3, [r7, #4]
 801e076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e078:	6879      	ldr	r1, [r7, #4]
 801e07a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801e07c:	440b      	add	r3, r1
 801e07e:	1ad3      	subs	r3, r2, r3
 801e080:	3301      	adds	r3, #1
 801e082:	2b00      	cmp	r3, #0
 801e084:	f300 841e 	bgt.w	801e8c4 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801e088:	687b      	ldr	r3, [r7, #4]
 801e08a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801e08c:	4b7b      	ldr	r3, [pc, #492]	; (801e27c <tcp_receive+0x888>)
 801e08e:	681b      	ldr	r3, [r3, #0]
 801e090:	429a      	cmp	r2, r3
 801e092:	f040 829a 	bne.w	801e5ca <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801e096:	4b7a      	ldr	r3, [pc, #488]	; (801e280 <tcp_receive+0x88c>)
 801e098:	891c      	ldrh	r4, [r3, #8]
 801e09a:	4b79      	ldr	r3, [pc, #484]	; (801e280 <tcp_receive+0x88c>)
 801e09c:	68db      	ldr	r3, [r3, #12]
 801e09e:	899b      	ldrh	r3, [r3, #12]
 801e0a0:	b29b      	uxth	r3, r3
 801e0a2:	4618      	mov	r0, r3
 801e0a4:	f7fa fb72 	bl	801878c <lwip_htons>
 801e0a8:	4603      	mov	r3, r0
 801e0aa:	b2db      	uxtb	r3, r3
 801e0ac:	f003 0303 	and.w	r3, r3, #3
 801e0b0:	2b00      	cmp	r3, #0
 801e0b2:	d001      	beq.n	801e0b8 <tcp_receive+0x6c4>
 801e0b4:	2301      	movs	r3, #1
 801e0b6:	e000      	b.n	801e0ba <tcp_receive+0x6c6>
 801e0b8:	2300      	movs	r3, #0
 801e0ba:	4423      	add	r3, r4
 801e0bc:	b29a      	uxth	r2, r3
 801e0be:	4b71      	ldr	r3, [pc, #452]	; (801e284 <tcp_receive+0x890>)
 801e0c0:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801e0c2:	687b      	ldr	r3, [r7, #4]
 801e0c4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801e0c6:	4b6f      	ldr	r3, [pc, #444]	; (801e284 <tcp_receive+0x890>)
 801e0c8:	881b      	ldrh	r3, [r3, #0]
 801e0ca:	429a      	cmp	r2, r3
 801e0cc:	d275      	bcs.n	801e1ba <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801e0ce:	4b6c      	ldr	r3, [pc, #432]	; (801e280 <tcp_receive+0x88c>)
 801e0d0:	68db      	ldr	r3, [r3, #12]
 801e0d2:	899b      	ldrh	r3, [r3, #12]
 801e0d4:	b29b      	uxth	r3, r3
 801e0d6:	4618      	mov	r0, r3
 801e0d8:	f7fa fb58 	bl	801878c <lwip_htons>
 801e0dc:	4603      	mov	r3, r0
 801e0de:	b2db      	uxtb	r3, r3
 801e0e0:	f003 0301 	and.w	r3, r3, #1
 801e0e4:	2b00      	cmp	r3, #0
 801e0e6:	d01f      	beq.n	801e128 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801e0e8:	4b65      	ldr	r3, [pc, #404]	; (801e280 <tcp_receive+0x88c>)
 801e0ea:	68db      	ldr	r3, [r3, #12]
 801e0ec:	899b      	ldrh	r3, [r3, #12]
 801e0ee:	b29b      	uxth	r3, r3
 801e0f0:	b21b      	sxth	r3, r3
 801e0f2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801e0f6:	b21c      	sxth	r4, r3
 801e0f8:	4b61      	ldr	r3, [pc, #388]	; (801e280 <tcp_receive+0x88c>)
 801e0fa:	68db      	ldr	r3, [r3, #12]
 801e0fc:	899b      	ldrh	r3, [r3, #12]
 801e0fe:	b29b      	uxth	r3, r3
 801e100:	4618      	mov	r0, r3
 801e102:	f7fa fb43 	bl	801878c <lwip_htons>
 801e106:	4603      	mov	r3, r0
 801e108:	b2db      	uxtb	r3, r3
 801e10a:	b29b      	uxth	r3, r3
 801e10c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801e110:	b29b      	uxth	r3, r3
 801e112:	4618      	mov	r0, r3
 801e114:	f7fa fb3a 	bl	801878c <lwip_htons>
 801e118:	4603      	mov	r3, r0
 801e11a:	b21b      	sxth	r3, r3
 801e11c:	4323      	orrs	r3, r4
 801e11e:	b21a      	sxth	r2, r3
 801e120:	4b57      	ldr	r3, [pc, #348]	; (801e280 <tcp_receive+0x88c>)
 801e122:	68db      	ldr	r3, [r3, #12]
 801e124:	b292      	uxth	r2, r2
 801e126:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 801e128:	687b      	ldr	r3, [r7, #4]
 801e12a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801e12c:	4b54      	ldr	r3, [pc, #336]	; (801e280 <tcp_receive+0x88c>)
 801e12e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801e130:	4b53      	ldr	r3, [pc, #332]	; (801e280 <tcp_receive+0x88c>)
 801e132:	68db      	ldr	r3, [r3, #12]
 801e134:	899b      	ldrh	r3, [r3, #12]
 801e136:	b29b      	uxth	r3, r3
 801e138:	4618      	mov	r0, r3
 801e13a:	f7fa fb27 	bl	801878c <lwip_htons>
 801e13e:	4603      	mov	r3, r0
 801e140:	b2db      	uxtb	r3, r3
 801e142:	f003 0302 	and.w	r3, r3, #2
 801e146:	2b00      	cmp	r3, #0
 801e148:	d005      	beq.n	801e156 <tcp_receive+0x762>
            inseg.len -= 1;
 801e14a:	4b4d      	ldr	r3, [pc, #308]	; (801e280 <tcp_receive+0x88c>)
 801e14c:	891b      	ldrh	r3, [r3, #8]
 801e14e:	3b01      	subs	r3, #1
 801e150:	b29a      	uxth	r2, r3
 801e152:	4b4b      	ldr	r3, [pc, #300]	; (801e280 <tcp_receive+0x88c>)
 801e154:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801e156:	4b4a      	ldr	r3, [pc, #296]	; (801e280 <tcp_receive+0x88c>)
 801e158:	685b      	ldr	r3, [r3, #4]
 801e15a:	4a49      	ldr	r2, [pc, #292]	; (801e280 <tcp_receive+0x88c>)
 801e15c:	8912      	ldrh	r2, [r2, #8]
 801e15e:	4611      	mov	r1, r2
 801e160:	4618      	mov	r0, r3
 801e162:	f7fb fda3 	bl	8019cac <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801e166:	4b46      	ldr	r3, [pc, #280]	; (801e280 <tcp_receive+0x88c>)
 801e168:	891c      	ldrh	r4, [r3, #8]
 801e16a:	4b45      	ldr	r3, [pc, #276]	; (801e280 <tcp_receive+0x88c>)
 801e16c:	68db      	ldr	r3, [r3, #12]
 801e16e:	899b      	ldrh	r3, [r3, #12]
 801e170:	b29b      	uxth	r3, r3
 801e172:	4618      	mov	r0, r3
 801e174:	f7fa fb0a 	bl	801878c <lwip_htons>
 801e178:	4603      	mov	r3, r0
 801e17a:	b2db      	uxtb	r3, r3
 801e17c:	f003 0303 	and.w	r3, r3, #3
 801e180:	2b00      	cmp	r3, #0
 801e182:	d001      	beq.n	801e188 <tcp_receive+0x794>
 801e184:	2301      	movs	r3, #1
 801e186:	e000      	b.n	801e18a <tcp_receive+0x796>
 801e188:	2300      	movs	r3, #0
 801e18a:	4423      	add	r3, r4
 801e18c:	b29a      	uxth	r2, r3
 801e18e:	4b3d      	ldr	r3, [pc, #244]	; (801e284 <tcp_receive+0x890>)
 801e190:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801e192:	4b3c      	ldr	r3, [pc, #240]	; (801e284 <tcp_receive+0x890>)
 801e194:	881b      	ldrh	r3, [r3, #0]
 801e196:	461a      	mov	r2, r3
 801e198:	4b38      	ldr	r3, [pc, #224]	; (801e27c <tcp_receive+0x888>)
 801e19a:	681b      	ldr	r3, [r3, #0]
 801e19c:	441a      	add	r2, r3
 801e19e:	687b      	ldr	r3, [r7, #4]
 801e1a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e1a2:	6879      	ldr	r1, [r7, #4]
 801e1a4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801e1a6:	440b      	add	r3, r1
 801e1a8:	429a      	cmp	r2, r3
 801e1aa:	d006      	beq.n	801e1ba <tcp_receive+0x7c6>
 801e1ac:	4b36      	ldr	r3, [pc, #216]	; (801e288 <tcp_receive+0x894>)
 801e1ae:	f240 52cb 	movw	r2, #1483	; 0x5cb
 801e1b2:	4936      	ldr	r1, [pc, #216]	; (801e28c <tcp_receive+0x898>)
 801e1b4:	4836      	ldr	r0, [pc, #216]	; (801e290 <tcp_receive+0x89c>)
 801e1b6:	f008 fb89 	bl	80268cc <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801e1ba:	687b      	ldr	r3, [r7, #4]
 801e1bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801e1be:	2b00      	cmp	r3, #0
 801e1c0:	f000 80e7 	beq.w	801e392 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801e1c4:	4b2e      	ldr	r3, [pc, #184]	; (801e280 <tcp_receive+0x88c>)
 801e1c6:	68db      	ldr	r3, [r3, #12]
 801e1c8:	899b      	ldrh	r3, [r3, #12]
 801e1ca:	b29b      	uxth	r3, r3
 801e1cc:	4618      	mov	r0, r3
 801e1ce:	f7fa fadd 	bl	801878c <lwip_htons>
 801e1d2:	4603      	mov	r3, r0
 801e1d4:	b2db      	uxtb	r3, r3
 801e1d6:	f003 0301 	and.w	r3, r3, #1
 801e1da:	2b00      	cmp	r3, #0
 801e1dc:	d010      	beq.n	801e200 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801e1de:	e00a      	b.n	801e1f6 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 801e1e0:	687b      	ldr	r3, [r7, #4]
 801e1e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801e1e4:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801e1e6:	687b      	ldr	r3, [r7, #4]
 801e1e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801e1ea:	681a      	ldr	r2, [r3, #0]
 801e1ec:	687b      	ldr	r3, [r7, #4]
 801e1ee:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 801e1f0:	68f8      	ldr	r0, [r7, #12]
 801e1f2:	f7fd fca6 	bl	801bb42 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801e1f6:	687b      	ldr	r3, [r7, #4]
 801e1f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801e1fa:	2b00      	cmp	r3, #0
 801e1fc:	d1f0      	bne.n	801e1e0 <tcp_receive+0x7ec>
 801e1fe:	e0c8      	b.n	801e392 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 801e200:	687b      	ldr	r3, [r7, #4]
 801e202:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801e204:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801e206:	e052      	b.n	801e2ae <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801e208:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e20a:	68db      	ldr	r3, [r3, #12]
 801e20c:	899b      	ldrh	r3, [r3, #12]
 801e20e:	b29b      	uxth	r3, r3
 801e210:	4618      	mov	r0, r3
 801e212:	f7fa fabb 	bl	801878c <lwip_htons>
 801e216:	4603      	mov	r3, r0
 801e218:	b2db      	uxtb	r3, r3
 801e21a:	f003 0301 	and.w	r3, r3, #1
 801e21e:	2b00      	cmp	r3, #0
 801e220:	d03d      	beq.n	801e29e <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801e222:	4b17      	ldr	r3, [pc, #92]	; (801e280 <tcp_receive+0x88c>)
 801e224:	68db      	ldr	r3, [r3, #12]
 801e226:	899b      	ldrh	r3, [r3, #12]
 801e228:	b29b      	uxth	r3, r3
 801e22a:	4618      	mov	r0, r3
 801e22c:	f7fa faae 	bl	801878c <lwip_htons>
 801e230:	4603      	mov	r3, r0
 801e232:	b2db      	uxtb	r3, r3
 801e234:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801e238:	2b00      	cmp	r3, #0
 801e23a:	d130      	bne.n	801e29e <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801e23c:	4b10      	ldr	r3, [pc, #64]	; (801e280 <tcp_receive+0x88c>)
 801e23e:	68db      	ldr	r3, [r3, #12]
 801e240:	899b      	ldrh	r3, [r3, #12]
 801e242:	b29c      	uxth	r4, r3
 801e244:	2001      	movs	r0, #1
 801e246:	f7fa faa1 	bl	801878c <lwip_htons>
 801e24a:	4603      	mov	r3, r0
 801e24c:	461a      	mov	r2, r3
 801e24e:	4b0c      	ldr	r3, [pc, #48]	; (801e280 <tcp_receive+0x88c>)
 801e250:	68db      	ldr	r3, [r3, #12]
 801e252:	4322      	orrs	r2, r4
 801e254:	b292      	uxth	r2, r2
 801e256:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801e258:	4b09      	ldr	r3, [pc, #36]	; (801e280 <tcp_receive+0x88c>)
 801e25a:	891c      	ldrh	r4, [r3, #8]
 801e25c:	4b08      	ldr	r3, [pc, #32]	; (801e280 <tcp_receive+0x88c>)
 801e25e:	68db      	ldr	r3, [r3, #12]
 801e260:	899b      	ldrh	r3, [r3, #12]
 801e262:	b29b      	uxth	r3, r3
 801e264:	4618      	mov	r0, r3
 801e266:	f7fa fa91 	bl	801878c <lwip_htons>
 801e26a:	4603      	mov	r3, r0
 801e26c:	b2db      	uxtb	r3, r3
 801e26e:	f003 0303 	and.w	r3, r3, #3
 801e272:	2b00      	cmp	r3, #0
 801e274:	d00e      	beq.n	801e294 <tcp_receive+0x8a0>
 801e276:	2301      	movs	r3, #1
 801e278:	e00d      	b.n	801e296 <tcp_receive+0x8a2>
 801e27a:	bf00      	nop
 801e27c:	20013c4c 	.word	0x20013c4c
 801e280:	20013c2c 	.word	0x20013c2c
 801e284:	20013c56 	.word	0x20013c56
 801e288:	0802db28 	.word	0x0802db28
 801e28c:	0802ded0 	.word	0x0802ded0
 801e290:	0802db74 	.word	0x0802db74
 801e294:	2300      	movs	r3, #0
 801e296:	4423      	add	r3, r4
 801e298:	b29a      	uxth	r2, r3
 801e29a:	4b98      	ldr	r3, [pc, #608]	; (801e4fc <tcp_receive+0xb08>)
 801e29c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801e29e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e2a0:	613b      	str	r3, [r7, #16]
              next = next->next;
 801e2a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e2a4:	681b      	ldr	r3, [r3, #0]
 801e2a6:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 801e2a8:	6938      	ldr	r0, [r7, #16]
 801e2aa:	f7fd fc4a 	bl	801bb42 <tcp_seg_free>
            while (next &&
 801e2ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e2b0:	2b00      	cmp	r3, #0
 801e2b2:	d00e      	beq.n	801e2d2 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801e2b4:	4b91      	ldr	r3, [pc, #580]	; (801e4fc <tcp_receive+0xb08>)
 801e2b6:	881b      	ldrh	r3, [r3, #0]
 801e2b8:	461a      	mov	r2, r3
 801e2ba:	4b91      	ldr	r3, [pc, #580]	; (801e500 <tcp_receive+0xb0c>)
 801e2bc:	681b      	ldr	r3, [r3, #0]
 801e2be:	441a      	add	r2, r3
 801e2c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e2c2:	68db      	ldr	r3, [r3, #12]
 801e2c4:	685b      	ldr	r3, [r3, #4]
 801e2c6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801e2c8:	8909      	ldrh	r1, [r1, #8]
 801e2ca:	440b      	add	r3, r1
 801e2cc:	1ad3      	subs	r3, r2, r3
            while (next &&
 801e2ce:	2b00      	cmp	r3, #0
 801e2d0:	da9a      	bge.n	801e208 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801e2d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e2d4:	2b00      	cmp	r3, #0
 801e2d6:	d059      	beq.n	801e38c <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 801e2d8:	4b88      	ldr	r3, [pc, #544]	; (801e4fc <tcp_receive+0xb08>)
 801e2da:	881b      	ldrh	r3, [r3, #0]
 801e2dc:	461a      	mov	r2, r3
 801e2de:	4b88      	ldr	r3, [pc, #544]	; (801e500 <tcp_receive+0xb0c>)
 801e2e0:	681b      	ldr	r3, [r3, #0]
 801e2e2:	441a      	add	r2, r3
 801e2e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e2e6:	68db      	ldr	r3, [r3, #12]
 801e2e8:	685b      	ldr	r3, [r3, #4]
 801e2ea:	1ad3      	subs	r3, r2, r3
            if (next &&
 801e2ec:	2b00      	cmp	r3, #0
 801e2ee:	dd4d      	ble.n	801e38c <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801e2f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e2f2:	68db      	ldr	r3, [r3, #12]
 801e2f4:	685b      	ldr	r3, [r3, #4]
 801e2f6:	b29a      	uxth	r2, r3
 801e2f8:	4b81      	ldr	r3, [pc, #516]	; (801e500 <tcp_receive+0xb0c>)
 801e2fa:	681b      	ldr	r3, [r3, #0]
 801e2fc:	b29b      	uxth	r3, r3
 801e2fe:	1ad3      	subs	r3, r2, r3
 801e300:	b29a      	uxth	r2, r3
 801e302:	4b80      	ldr	r3, [pc, #512]	; (801e504 <tcp_receive+0xb10>)
 801e304:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801e306:	4b7f      	ldr	r3, [pc, #508]	; (801e504 <tcp_receive+0xb10>)
 801e308:	68db      	ldr	r3, [r3, #12]
 801e30a:	899b      	ldrh	r3, [r3, #12]
 801e30c:	b29b      	uxth	r3, r3
 801e30e:	4618      	mov	r0, r3
 801e310:	f7fa fa3c 	bl	801878c <lwip_htons>
 801e314:	4603      	mov	r3, r0
 801e316:	b2db      	uxtb	r3, r3
 801e318:	f003 0302 	and.w	r3, r3, #2
 801e31c:	2b00      	cmp	r3, #0
 801e31e:	d005      	beq.n	801e32c <tcp_receive+0x938>
                inseg.len -= 1;
 801e320:	4b78      	ldr	r3, [pc, #480]	; (801e504 <tcp_receive+0xb10>)
 801e322:	891b      	ldrh	r3, [r3, #8]
 801e324:	3b01      	subs	r3, #1
 801e326:	b29a      	uxth	r2, r3
 801e328:	4b76      	ldr	r3, [pc, #472]	; (801e504 <tcp_receive+0xb10>)
 801e32a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801e32c:	4b75      	ldr	r3, [pc, #468]	; (801e504 <tcp_receive+0xb10>)
 801e32e:	685b      	ldr	r3, [r3, #4]
 801e330:	4a74      	ldr	r2, [pc, #464]	; (801e504 <tcp_receive+0xb10>)
 801e332:	8912      	ldrh	r2, [r2, #8]
 801e334:	4611      	mov	r1, r2
 801e336:	4618      	mov	r0, r3
 801e338:	f7fb fcb8 	bl	8019cac <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801e33c:	4b71      	ldr	r3, [pc, #452]	; (801e504 <tcp_receive+0xb10>)
 801e33e:	891c      	ldrh	r4, [r3, #8]
 801e340:	4b70      	ldr	r3, [pc, #448]	; (801e504 <tcp_receive+0xb10>)
 801e342:	68db      	ldr	r3, [r3, #12]
 801e344:	899b      	ldrh	r3, [r3, #12]
 801e346:	b29b      	uxth	r3, r3
 801e348:	4618      	mov	r0, r3
 801e34a:	f7fa fa1f 	bl	801878c <lwip_htons>
 801e34e:	4603      	mov	r3, r0
 801e350:	b2db      	uxtb	r3, r3
 801e352:	f003 0303 	and.w	r3, r3, #3
 801e356:	2b00      	cmp	r3, #0
 801e358:	d001      	beq.n	801e35e <tcp_receive+0x96a>
 801e35a:	2301      	movs	r3, #1
 801e35c:	e000      	b.n	801e360 <tcp_receive+0x96c>
 801e35e:	2300      	movs	r3, #0
 801e360:	4423      	add	r3, r4
 801e362:	b29a      	uxth	r2, r3
 801e364:	4b65      	ldr	r3, [pc, #404]	; (801e4fc <tcp_receive+0xb08>)
 801e366:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801e368:	4b64      	ldr	r3, [pc, #400]	; (801e4fc <tcp_receive+0xb08>)
 801e36a:	881b      	ldrh	r3, [r3, #0]
 801e36c:	461a      	mov	r2, r3
 801e36e:	4b64      	ldr	r3, [pc, #400]	; (801e500 <tcp_receive+0xb0c>)
 801e370:	681b      	ldr	r3, [r3, #0]
 801e372:	441a      	add	r2, r3
 801e374:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e376:	68db      	ldr	r3, [r3, #12]
 801e378:	685b      	ldr	r3, [r3, #4]
 801e37a:	429a      	cmp	r2, r3
 801e37c:	d006      	beq.n	801e38c <tcp_receive+0x998>
 801e37e:	4b62      	ldr	r3, [pc, #392]	; (801e508 <tcp_receive+0xb14>)
 801e380:	f240 52fc 	movw	r2, #1532	; 0x5fc
 801e384:	4961      	ldr	r1, [pc, #388]	; (801e50c <tcp_receive+0xb18>)
 801e386:	4862      	ldr	r0, [pc, #392]	; (801e510 <tcp_receive+0xb1c>)
 801e388:	f008 faa0 	bl	80268cc <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801e38c:	687b      	ldr	r3, [r7, #4]
 801e38e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801e390:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801e392:	4b5a      	ldr	r3, [pc, #360]	; (801e4fc <tcp_receive+0xb08>)
 801e394:	881b      	ldrh	r3, [r3, #0]
 801e396:	461a      	mov	r2, r3
 801e398:	4b59      	ldr	r3, [pc, #356]	; (801e500 <tcp_receive+0xb0c>)
 801e39a:	681b      	ldr	r3, [r3, #0]
 801e39c:	441a      	add	r2, r3
 801e39e:	687b      	ldr	r3, [r7, #4]
 801e3a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801e3a2:	687b      	ldr	r3, [r7, #4]
 801e3a4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801e3a6:	4b55      	ldr	r3, [pc, #340]	; (801e4fc <tcp_receive+0xb08>)
 801e3a8:	881b      	ldrh	r3, [r3, #0]
 801e3aa:	429a      	cmp	r2, r3
 801e3ac:	d206      	bcs.n	801e3bc <tcp_receive+0x9c8>
 801e3ae:	4b56      	ldr	r3, [pc, #344]	; (801e508 <tcp_receive+0xb14>)
 801e3b0:	f240 6207 	movw	r2, #1543	; 0x607
 801e3b4:	4957      	ldr	r1, [pc, #348]	; (801e514 <tcp_receive+0xb20>)
 801e3b6:	4856      	ldr	r0, [pc, #344]	; (801e510 <tcp_receive+0xb1c>)
 801e3b8:	f008 fa88 	bl	80268cc <iprintf>
        pcb->rcv_wnd -= tcplen;
 801e3bc:	687b      	ldr	r3, [r7, #4]
 801e3be:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801e3c0:	4b4e      	ldr	r3, [pc, #312]	; (801e4fc <tcp_receive+0xb08>)
 801e3c2:	881b      	ldrh	r3, [r3, #0]
 801e3c4:	1ad3      	subs	r3, r2, r3
 801e3c6:	b29a      	uxth	r2, r3
 801e3c8:	687b      	ldr	r3, [r7, #4]
 801e3ca:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801e3cc:	6878      	ldr	r0, [r7, #4]
 801e3ce:	f7fc fd7b 	bl	801aec8 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801e3d2:	4b4c      	ldr	r3, [pc, #304]	; (801e504 <tcp_receive+0xb10>)
 801e3d4:	685b      	ldr	r3, [r3, #4]
 801e3d6:	891b      	ldrh	r3, [r3, #8]
 801e3d8:	2b00      	cmp	r3, #0
 801e3da:	d006      	beq.n	801e3ea <tcp_receive+0x9f6>
          recv_data = inseg.p;
 801e3dc:	4b49      	ldr	r3, [pc, #292]	; (801e504 <tcp_receive+0xb10>)
 801e3de:	685b      	ldr	r3, [r3, #4]
 801e3e0:	4a4d      	ldr	r2, [pc, #308]	; (801e518 <tcp_receive+0xb24>)
 801e3e2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 801e3e4:	4b47      	ldr	r3, [pc, #284]	; (801e504 <tcp_receive+0xb10>)
 801e3e6:	2200      	movs	r2, #0
 801e3e8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801e3ea:	4b46      	ldr	r3, [pc, #280]	; (801e504 <tcp_receive+0xb10>)
 801e3ec:	68db      	ldr	r3, [r3, #12]
 801e3ee:	899b      	ldrh	r3, [r3, #12]
 801e3f0:	b29b      	uxth	r3, r3
 801e3f2:	4618      	mov	r0, r3
 801e3f4:	f7fa f9ca 	bl	801878c <lwip_htons>
 801e3f8:	4603      	mov	r3, r0
 801e3fa:	b2db      	uxtb	r3, r3
 801e3fc:	f003 0301 	and.w	r3, r3, #1
 801e400:	2b00      	cmp	r3, #0
 801e402:	f000 80b8 	beq.w	801e576 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801e406:	4b45      	ldr	r3, [pc, #276]	; (801e51c <tcp_receive+0xb28>)
 801e408:	781b      	ldrb	r3, [r3, #0]
 801e40a:	f043 0320 	orr.w	r3, r3, #32
 801e40e:	b2da      	uxtb	r2, r3
 801e410:	4b42      	ldr	r3, [pc, #264]	; (801e51c <tcp_receive+0xb28>)
 801e412:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 801e414:	e0af      	b.n	801e576 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801e416:	687b      	ldr	r3, [r7, #4]
 801e418:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801e41a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 801e41c:	687b      	ldr	r3, [r7, #4]
 801e41e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801e420:	68db      	ldr	r3, [r3, #12]
 801e422:	685b      	ldr	r3, [r3, #4]
 801e424:	4a36      	ldr	r2, [pc, #216]	; (801e500 <tcp_receive+0xb0c>)
 801e426:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801e428:	68bb      	ldr	r3, [r7, #8]
 801e42a:	891b      	ldrh	r3, [r3, #8]
 801e42c:	461c      	mov	r4, r3
 801e42e:	68bb      	ldr	r3, [r7, #8]
 801e430:	68db      	ldr	r3, [r3, #12]
 801e432:	899b      	ldrh	r3, [r3, #12]
 801e434:	b29b      	uxth	r3, r3
 801e436:	4618      	mov	r0, r3
 801e438:	f7fa f9a8 	bl	801878c <lwip_htons>
 801e43c:	4603      	mov	r3, r0
 801e43e:	b2db      	uxtb	r3, r3
 801e440:	f003 0303 	and.w	r3, r3, #3
 801e444:	2b00      	cmp	r3, #0
 801e446:	d001      	beq.n	801e44c <tcp_receive+0xa58>
 801e448:	2301      	movs	r3, #1
 801e44a:	e000      	b.n	801e44e <tcp_receive+0xa5a>
 801e44c:	2300      	movs	r3, #0
 801e44e:	191a      	adds	r2, r3, r4
 801e450:	687b      	ldr	r3, [r7, #4]
 801e452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e454:	441a      	add	r2, r3
 801e456:	687b      	ldr	r3, [r7, #4]
 801e458:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801e45a:	687b      	ldr	r3, [r7, #4]
 801e45c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801e45e:	461c      	mov	r4, r3
 801e460:	68bb      	ldr	r3, [r7, #8]
 801e462:	891b      	ldrh	r3, [r3, #8]
 801e464:	461d      	mov	r5, r3
 801e466:	68bb      	ldr	r3, [r7, #8]
 801e468:	68db      	ldr	r3, [r3, #12]
 801e46a:	899b      	ldrh	r3, [r3, #12]
 801e46c:	b29b      	uxth	r3, r3
 801e46e:	4618      	mov	r0, r3
 801e470:	f7fa f98c 	bl	801878c <lwip_htons>
 801e474:	4603      	mov	r3, r0
 801e476:	b2db      	uxtb	r3, r3
 801e478:	f003 0303 	and.w	r3, r3, #3
 801e47c:	2b00      	cmp	r3, #0
 801e47e:	d001      	beq.n	801e484 <tcp_receive+0xa90>
 801e480:	2301      	movs	r3, #1
 801e482:	e000      	b.n	801e486 <tcp_receive+0xa92>
 801e484:	2300      	movs	r3, #0
 801e486:	442b      	add	r3, r5
 801e488:	429c      	cmp	r4, r3
 801e48a:	d206      	bcs.n	801e49a <tcp_receive+0xaa6>
 801e48c:	4b1e      	ldr	r3, [pc, #120]	; (801e508 <tcp_receive+0xb14>)
 801e48e:	f240 622b 	movw	r2, #1579	; 0x62b
 801e492:	4923      	ldr	r1, [pc, #140]	; (801e520 <tcp_receive+0xb2c>)
 801e494:	481e      	ldr	r0, [pc, #120]	; (801e510 <tcp_receive+0xb1c>)
 801e496:	f008 fa19 	bl	80268cc <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801e49a:	68bb      	ldr	r3, [r7, #8]
 801e49c:	891b      	ldrh	r3, [r3, #8]
 801e49e:	461c      	mov	r4, r3
 801e4a0:	68bb      	ldr	r3, [r7, #8]
 801e4a2:	68db      	ldr	r3, [r3, #12]
 801e4a4:	899b      	ldrh	r3, [r3, #12]
 801e4a6:	b29b      	uxth	r3, r3
 801e4a8:	4618      	mov	r0, r3
 801e4aa:	f7fa f96f 	bl	801878c <lwip_htons>
 801e4ae:	4603      	mov	r3, r0
 801e4b0:	b2db      	uxtb	r3, r3
 801e4b2:	f003 0303 	and.w	r3, r3, #3
 801e4b6:	2b00      	cmp	r3, #0
 801e4b8:	d001      	beq.n	801e4be <tcp_receive+0xaca>
 801e4ba:	2301      	movs	r3, #1
 801e4bc:	e000      	b.n	801e4c0 <tcp_receive+0xacc>
 801e4be:	2300      	movs	r3, #0
 801e4c0:	1919      	adds	r1, r3, r4
 801e4c2:	687b      	ldr	r3, [r7, #4]
 801e4c4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801e4c6:	b28b      	uxth	r3, r1
 801e4c8:	1ad3      	subs	r3, r2, r3
 801e4ca:	b29a      	uxth	r2, r3
 801e4cc:	687b      	ldr	r3, [r7, #4]
 801e4ce:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801e4d0:	6878      	ldr	r0, [r7, #4]
 801e4d2:	f7fc fcf9 	bl	801aec8 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801e4d6:	68bb      	ldr	r3, [r7, #8]
 801e4d8:	685b      	ldr	r3, [r3, #4]
 801e4da:	891b      	ldrh	r3, [r3, #8]
 801e4dc:	2b00      	cmp	r3, #0
 801e4de:	d028      	beq.n	801e532 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801e4e0:	4b0d      	ldr	r3, [pc, #52]	; (801e518 <tcp_receive+0xb24>)
 801e4e2:	681b      	ldr	r3, [r3, #0]
 801e4e4:	2b00      	cmp	r3, #0
 801e4e6:	d01d      	beq.n	801e524 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 801e4e8:	4b0b      	ldr	r3, [pc, #44]	; (801e518 <tcp_receive+0xb24>)
 801e4ea:	681a      	ldr	r2, [r3, #0]
 801e4ec:	68bb      	ldr	r3, [r7, #8]
 801e4ee:	685b      	ldr	r3, [r3, #4]
 801e4f0:	4619      	mov	r1, r3
 801e4f2:	4610      	mov	r0, r2
 801e4f4:	f7fb fe2e 	bl	801a154 <pbuf_cat>
 801e4f8:	e018      	b.n	801e52c <tcp_receive+0xb38>
 801e4fa:	bf00      	nop
 801e4fc:	20013c56 	.word	0x20013c56
 801e500:	20013c4c 	.word	0x20013c4c
 801e504:	20013c2c 	.word	0x20013c2c
 801e508:	0802db28 	.word	0x0802db28
 801e50c:	0802df08 	.word	0x0802df08
 801e510:	0802db74 	.word	0x0802db74
 801e514:	0802df44 	.word	0x0802df44
 801e518:	20013c5c 	.word	0x20013c5c
 801e51c:	20013c59 	.word	0x20013c59
 801e520:	0802df64 	.word	0x0802df64
            } else {
              recv_data = cseg->p;
 801e524:	68bb      	ldr	r3, [r7, #8]
 801e526:	685b      	ldr	r3, [r3, #4]
 801e528:	4a70      	ldr	r2, [pc, #448]	; (801e6ec <tcp_receive+0xcf8>)
 801e52a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801e52c:	68bb      	ldr	r3, [r7, #8]
 801e52e:	2200      	movs	r2, #0
 801e530:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801e532:	68bb      	ldr	r3, [r7, #8]
 801e534:	68db      	ldr	r3, [r3, #12]
 801e536:	899b      	ldrh	r3, [r3, #12]
 801e538:	b29b      	uxth	r3, r3
 801e53a:	4618      	mov	r0, r3
 801e53c:	f7fa f926 	bl	801878c <lwip_htons>
 801e540:	4603      	mov	r3, r0
 801e542:	b2db      	uxtb	r3, r3
 801e544:	f003 0301 	and.w	r3, r3, #1
 801e548:	2b00      	cmp	r3, #0
 801e54a:	d00d      	beq.n	801e568 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801e54c:	4b68      	ldr	r3, [pc, #416]	; (801e6f0 <tcp_receive+0xcfc>)
 801e54e:	781b      	ldrb	r3, [r3, #0]
 801e550:	f043 0320 	orr.w	r3, r3, #32
 801e554:	b2da      	uxtb	r2, r3
 801e556:	4b66      	ldr	r3, [pc, #408]	; (801e6f0 <tcp_receive+0xcfc>)
 801e558:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801e55a:	687b      	ldr	r3, [r7, #4]
 801e55c:	7d1b      	ldrb	r3, [r3, #20]
 801e55e:	2b04      	cmp	r3, #4
 801e560:	d102      	bne.n	801e568 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 801e562:	687b      	ldr	r3, [r7, #4]
 801e564:	2207      	movs	r2, #7
 801e566:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 801e568:	68bb      	ldr	r3, [r7, #8]
 801e56a:	681a      	ldr	r2, [r3, #0]
 801e56c:	687b      	ldr	r3, [r7, #4]
 801e56e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 801e570:	68b8      	ldr	r0, [r7, #8]
 801e572:	f7fd fae6 	bl	801bb42 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801e576:	687b      	ldr	r3, [r7, #4]
 801e578:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801e57a:	2b00      	cmp	r3, #0
 801e57c:	d008      	beq.n	801e590 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801e57e:	687b      	ldr	r3, [r7, #4]
 801e580:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801e582:	68db      	ldr	r3, [r3, #12]
 801e584:	685a      	ldr	r2, [r3, #4]
 801e586:	687b      	ldr	r3, [r7, #4]
 801e588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801e58a:	429a      	cmp	r2, r3
 801e58c:	f43f af43 	beq.w	801e416 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801e590:	687b      	ldr	r3, [r7, #4]
 801e592:	8b5b      	ldrh	r3, [r3, #26]
 801e594:	f003 0301 	and.w	r3, r3, #1
 801e598:	2b00      	cmp	r3, #0
 801e59a:	d00e      	beq.n	801e5ba <tcp_receive+0xbc6>
 801e59c:	687b      	ldr	r3, [r7, #4]
 801e59e:	8b5b      	ldrh	r3, [r3, #26]
 801e5a0:	f023 0301 	bic.w	r3, r3, #1
 801e5a4:	b29a      	uxth	r2, r3
 801e5a6:	687b      	ldr	r3, [r7, #4]
 801e5a8:	835a      	strh	r2, [r3, #26]
 801e5aa:	687b      	ldr	r3, [r7, #4]
 801e5ac:	8b5b      	ldrh	r3, [r3, #26]
 801e5ae:	f043 0302 	orr.w	r3, r3, #2
 801e5b2:	b29a      	uxth	r2, r3
 801e5b4:	687b      	ldr	r3, [r7, #4]
 801e5b6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801e5b8:	e188      	b.n	801e8cc <tcp_receive+0xed8>
        tcp_ack(pcb);
 801e5ba:	687b      	ldr	r3, [r7, #4]
 801e5bc:	8b5b      	ldrh	r3, [r3, #26]
 801e5be:	f043 0301 	orr.w	r3, r3, #1
 801e5c2:	b29a      	uxth	r2, r3
 801e5c4:	687b      	ldr	r3, [r7, #4]
 801e5c6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801e5c8:	e180      	b.n	801e8cc <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801e5ca:	687b      	ldr	r3, [r7, #4]
 801e5cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801e5ce:	2b00      	cmp	r3, #0
 801e5d0:	d106      	bne.n	801e5e0 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801e5d2:	4848      	ldr	r0, [pc, #288]	; (801e6f4 <tcp_receive+0xd00>)
 801e5d4:	f7fd faec 	bl	801bbb0 <tcp_seg_copy>
 801e5d8:	4602      	mov	r2, r0
 801e5da:	687b      	ldr	r3, [r7, #4]
 801e5dc:	675a      	str	r2, [r3, #116]	; 0x74
 801e5de:	e16d      	b.n	801e8bc <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 801e5e0:	2300      	movs	r3, #0
 801e5e2:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801e5e4:	687b      	ldr	r3, [r7, #4]
 801e5e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801e5e8:	63bb      	str	r3, [r7, #56]	; 0x38
 801e5ea:	e157      	b.n	801e89c <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 801e5ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e5ee:	68db      	ldr	r3, [r3, #12]
 801e5f0:	685a      	ldr	r2, [r3, #4]
 801e5f2:	4b41      	ldr	r3, [pc, #260]	; (801e6f8 <tcp_receive+0xd04>)
 801e5f4:	681b      	ldr	r3, [r3, #0]
 801e5f6:	429a      	cmp	r2, r3
 801e5f8:	d11d      	bne.n	801e636 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801e5fa:	4b3e      	ldr	r3, [pc, #248]	; (801e6f4 <tcp_receive+0xd00>)
 801e5fc:	891a      	ldrh	r2, [r3, #8]
 801e5fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e600:	891b      	ldrh	r3, [r3, #8]
 801e602:	429a      	cmp	r2, r3
 801e604:	f240 814f 	bls.w	801e8a6 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801e608:	483a      	ldr	r0, [pc, #232]	; (801e6f4 <tcp_receive+0xd00>)
 801e60a:	f7fd fad1 	bl	801bbb0 <tcp_seg_copy>
 801e60e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 801e610:	697b      	ldr	r3, [r7, #20]
 801e612:	2b00      	cmp	r3, #0
 801e614:	f000 8149 	beq.w	801e8aa <tcp_receive+0xeb6>
                  if (prev != NULL) {
 801e618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e61a:	2b00      	cmp	r3, #0
 801e61c:	d003      	beq.n	801e626 <tcp_receive+0xc32>
                    prev->next = cseg;
 801e61e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e620:	697a      	ldr	r2, [r7, #20]
 801e622:	601a      	str	r2, [r3, #0]
 801e624:	e002      	b.n	801e62c <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 801e626:	687b      	ldr	r3, [r7, #4]
 801e628:	697a      	ldr	r2, [r7, #20]
 801e62a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801e62c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801e62e:	6978      	ldr	r0, [r7, #20]
 801e630:	f7ff f8dc 	bl	801d7ec <tcp_oos_insert_segment>
                }
                break;
 801e634:	e139      	b.n	801e8aa <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801e636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e638:	2b00      	cmp	r3, #0
 801e63a:	d117      	bne.n	801e66c <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801e63c:	4b2e      	ldr	r3, [pc, #184]	; (801e6f8 <tcp_receive+0xd04>)
 801e63e:	681a      	ldr	r2, [r3, #0]
 801e640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e642:	68db      	ldr	r3, [r3, #12]
 801e644:	685b      	ldr	r3, [r3, #4]
 801e646:	1ad3      	subs	r3, r2, r3
 801e648:	2b00      	cmp	r3, #0
 801e64a:	da57      	bge.n	801e6fc <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801e64c:	4829      	ldr	r0, [pc, #164]	; (801e6f4 <tcp_receive+0xd00>)
 801e64e:	f7fd faaf 	bl	801bbb0 <tcp_seg_copy>
 801e652:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 801e654:	69bb      	ldr	r3, [r7, #24]
 801e656:	2b00      	cmp	r3, #0
 801e658:	f000 8129 	beq.w	801e8ae <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 801e65c:	687b      	ldr	r3, [r7, #4]
 801e65e:	69ba      	ldr	r2, [r7, #24]
 801e660:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801e662:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801e664:	69b8      	ldr	r0, [r7, #24]
 801e666:	f7ff f8c1 	bl	801d7ec <tcp_oos_insert_segment>
                  }
                  break;
 801e66a:	e120      	b.n	801e8ae <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801e66c:	4b22      	ldr	r3, [pc, #136]	; (801e6f8 <tcp_receive+0xd04>)
 801e66e:	681a      	ldr	r2, [r3, #0]
 801e670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e672:	68db      	ldr	r3, [r3, #12]
 801e674:	685b      	ldr	r3, [r3, #4]
 801e676:	1ad3      	subs	r3, r2, r3
 801e678:	3b01      	subs	r3, #1
 801e67a:	2b00      	cmp	r3, #0
 801e67c:	db3e      	blt.n	801e6fc <tcp_receive+0xd08>
 801e67e:	4b1e      	ldr	r3, [pc, #120]	; (801e6f8 <tcp_receive+0xd04>)
 801e680:	681a      	ldr	r2, [r3, #0]
 801e682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e684:	68db      	ldr	r3, [r3, #12]
 801e686:	685b      	ldr	r3, [r3, #4]
 801e688:	1ad3      	subs	r3, r2, r3
 801e68a:	3301      	adds	r3, #1
 801e68c:	2b00      	cmp	r3, #0
 801e68e:	dc35      	bgt.n	801e6fc <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801e690:	4818      	ldr	r0, [pc, #96]	; (801e6f4 <tcp_receive+0xd00>)
 801e692:	f7fd fa8d 	bl	801bbb0 <tcp_seg_copy>
 801e696:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 801e698:	69fb      	ldr	r3, [r7, #28]
 801e69a:	2b00      	cmp	r3, #0
 801e69c:	f000 8109 	beq.w	801e8b2 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801e6a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e6a2:	68db      	ldr	r3, [r3, #12]
 801e6a4:	685b      	ldr	r3, [r3, #4]
 801e6a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801e6a8:	8912      	ldrh	r2, [r2, #8]
 801e6aa:	441a      	add	r2, r3
 801e6ac:	4b12      	ldr	r3, [pc, #72]	; (801e6f8 <tcp_receive+0xd04>)
 801e6ae:	681b      	ldr	r3, [r3, #0]
 801e6b0:	1ad3      	subs	r3, r2, r3
 801e6b2:	2b00      	cmp	r3, #0
 801e6b4:	dd12      	ble.n	801e6dc <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801e6b6:	4b10      	ldr	r3, [pc, #64]	; (801e6f8 <tcp_receive+0xd04>)
 801e6b8:	681b      	ldr	r3, [r3, #0]
 801e6ba:	b29a      	uxth	r2, r3
 801e6bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e6be:	68db      	ldr	r3, [r3, #12]
 801e6c0:	685b      	ldr	r3, [r3, #4]
 801e6c2:	b29b      	uxth	r3, r3
 801e6c4:	1ad3      	subs	r3, r2, r3
 801e6c6:	b29a      	uxth	r2, r3
 801e6c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e6ca:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801e6cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e6ce:	685a      	ldr	r2, [r3, #4]
 801e6d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e6d2:	891b      	ldrh	r3, [r3, #8]
 801e6d4:	4619      	mov	r1, r3
 801e6d6:	4610      	mov	r0, r2
 801e6d8:	f7fb fae8 	bl	8019cac <pbuf_realloc>
                    }
                    prev->next = cseg;
 801e6dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e6de:	69fa      	ldr	r2, [r7, #28]
 801e6e0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801e6e2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801e6e4:	69f8      	ldr	r0, [r7, #28]
 801e6e6:	f7ff f881 	bl	801d7ec <tcp_oos_insert_segment>
                  }
                  break;
 801e6ea:	e0e2      	b.n	801e8b2 <tcp_receive+0xebe>
 801e6ec:	20013c5c 	.word	0x20013c5c
 801e6f0:	20013c59 	.word	0x20013c59
 801e6f4:	20013c2c 	.word	0x20013c2c
 801e6f8:	20013c4c 	.word	0x20013c4c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801e6fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e6fe:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801e700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e702:	681b      	ldr	r3, [r3, #0]
 801e704:	2b00      	cmp	r3, #0
 801e706:	f040 80c6 	bne.w	801e896 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801e70a:	4b80      	ldr	r3, [pc, #512]	; (801e90c <tcp_receive+0xf18>)
 801e70c:	681a      	ldr	r2, [r3, #0]
 801e70e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e710:	68db      	ldr	r3, [r3, #12]
 801e712:	685b      	ldr	r3, [r3, #4]
 801e714:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801e716:	2b00      	cmp	r3, #0
 801e718:	f340 80bd 	ble.w	801e896 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801e71c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e71e:	68db      	ldr	r3, [r3, #12]
 801e720:	899b      	ldrh	r3, [r3, #12]
 801e722:	b29b      	uxth	r3, r3
 801e724:	4618      	mov	r0, r3
 801e726:	f7fa f831 	bl	801878c <lwip_htons>
 801e72a:	4603      	mov	r3, r0
 801e72c:	b2db      	uxtb	r3, r3
 801e72e:	f003 0301 	and.w	r3, r3, #1
 801e732:	2b00      	cmp	r3, #0
 801e734:	f040 80bf 	bne.w	801e8b6 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801e738:	4875      	ldr	r0, [pc, #468]	; (801e910 <tcp_receive+0xf1c>)
 801e73a:	f7fd fa39 	bl	801bbb0 <tcp_seg_copy>
 801e73e:	4602      	mov	r2, r0
 801e740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e742:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801e744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e746:	681b      	ldr	r3, [r3, #0]
 801e748:	2b00      	cmp	r3, #0
 801e74a:	f000 80b6 	beq.w	801e8ba <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801e74e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e750:	68db      	ldr	r3, [r3, #12]
 801e752:	685b      	ldr	r3, [r3, #4]
 801e754:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801e756:	8912      	ldrh	r2, [r2, #8]
 801e758:	441a      	add	r2, r3
 801e75a:	4b6c      	ldr	r3, [pc, #432]	; (801e90c <tcp_receive+0xf18>)
 801e75c:	681b      	ldr	r3, [r3, #0]
 801e75e:	1ad3      	subs	r3, r2, r3
 801e760:	2b00      	cmp	r3, #0
 801e762:	dd12      	ble.n	801e78a <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801e764:	4b69      	ldr	r3, [pc, #420]	; (801e90c <tcp_receive+0xf18>)
 801e766:	681b      	ldr	r3, [r3, #0]
 801e768:	b29a      	uxth	r2, r3
 801e76a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e76c:	68db      	ldr	r3, [r3, #12]
 801e76e:	685b      	ldr	r3, [r3, #4]
 801e770:	b29b      	uxth	r3, r3
 801e772:	1ad3      	subs	r3, r2, r3
 801e774:	b29a      	uxth	r2, r3
 801e776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e778:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801e77a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e77c:	685a      	ldr	r2, [r3, #4]
 801e77e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e780:	891b      	ldrh	r3, [r3, #8]
 801e782:	4619      	mov	r1, r3
 801e784:	4610      	mov	r0, r2
 801e786:	f7fb fa91 	bl	8019cac <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801e78a:	4b62      	ldr	r3, [pc, #392]	; (801e914 <tcp_receive+0xf20>)
 801e78c:	881b      	ldrh	r3, [r3, #0]
 801e78e:	461a      	mov	r2, r3
 801e790:	4b5e      	ldr	r3, [pc, #376]	; (801e90c <tcp_receive+0xf18>)
 801e792:	681b      	ldr	r3, [r3, #0]
 801e794:	441a      	add	r2, r3
 801e796:	687b      	ldr	r3, [r7, #4]
 801e798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e79a:	6879      	ldr	r1, [r7, #4]
 801e79c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801e79e:	440b      	add	r3, r1
 801e7a0:	1ad3      	subs	r3, r2, r3
 801e7a2:	2b00      	cmp	r3, #0
 801e7a4:	f340 8089 	ble.w	801e8ba <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801e7a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e7aa:	681b      	ldr	r3, [r3, #0]
 801e7ac:	68db      	ldr	r3, [r3, #12]
 801e7ae:	899b      	ldrh	r3, [r3, #12]
 801e7b0:	b29b      	uxth	r3, r3
 801e7b2:	4618      	mov	r0, r3
 801e7b4:	f7f9 ffea 	bl	801878c <lwip_htons>
 801e7b8:	4603      	mov	r3, r0
 801e7ba:	b2db      	uxtb	r3, r3
 801e7bc:	f003 0301 	and.w	r3, r3, #1
 801e7c0:	2b00      	cmp	r3, #0
 801e7c2:	d022      	beq.n	801e80a <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801e7c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e7c6:	681b      	ldr	r3, [r3, #0]
 801e7c8:	68db      	ldr	r3, [r3, #12]
 801e7ca:	899b      	ldrh	r3, [r3, #12]
 801e7cc:	b29b      	uxth	r3, r3
 801e7ce:	b21b      	sxth	r3, r3
 801e7d0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801e7d4:	b21c      	sxth	r4, r3
 801e7d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e7d8:	681b      	ldr	r3, [r3, #0]
 801e7da:	68db      	ldr	r3, [r3, #12]
 801e7dc:	899b      	ldrh	r3, [r3, #12]
 801e7de:	b29b      	uxth	r3, r3
 801e7e0:	4618      	mov	r0, r3
 801e7e2:	f7f9 ffd3 	bl	801878c <lwip_htons>
 801e7e6:	4603      	mov	r3, r0
 801e7e8:	b2db      	uxtb	r3, r3
 801e7ea:	b29b      	uxth	r3, r3
 801e7ec:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801e7f0:	b29b      	uxth	r3, r3
 801e7f2:	4618      	mov	r0, r3
 801e7f4:	f7f9 ffca 	bl	801878c <lwip_htons>
 801e7f8:	4603      	mov	r3, r0
 801e7fa:	b21b      	sxth	r3, r3
 801e7fc:	4323      	orrs	r3, r4
 801e7fe:	b21a      	sxth	r2, r3
 801e800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e802:	681b      	ldr	r3, [r3, #0]
 801e804:	68db      	ldr	r3, [r3, #12]
 801e806:	b292      	uxth	r2, r2
 801e808:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801e80a:	687b      	ldr	r3, [r7, #4]
 801e80c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e80e:	b29a      	uxth	r2, r3
 801e810:	687b      	ldr	r3, [r7, #4]
 801e812:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801e814:	4413      	add	r3, r2
 801e816:	b299      	uxth	r1, r3
 801e818:	4b3c      	ldr	r3, [pc, #240]	; (801e90c <tcp_receive+0xf18>)
 801e81a:	681b      	ldr	r3, [r3, #0]
 801e81c:	b29a      	uxth	r2, r3
 801e81e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e820:	681b      	ldr	r3, [r3, #0]
 801e822:	1a8a      	subs	r2, r1, r2
 801e824:	b292      	uxth	r2, r2
 801e826:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801e828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e82a:	681b      	ldr	r3, [r3, #0]
 801e82c:	685a      	ldr	r2, [r3, #4]
 801e82e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e830:	681b      	ldr	r3, [r3, #0]
 801e832:	891b      	ldrh	r3, [r3, #8]
 801e834:	4619      	mov	r1, r3
 801e836:	4610      	mov	r0, r2
 801e838:	f7fb fa38 	bl	8019cac <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801e83c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e83e:	681b      	ldr	r3, [r3, #0]
 801e840:	891c      	ldrh	r4, [r3, #8]
 801e842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e844:	681b      	ldr	r3, [r3, #0]
 801e846:	68db      	ldr	r3, [r3, #12]
 801e848:	899b      	ldrh	r3, [r3, #12]
 801e84a:	b29b      	uxth	r3, r3
 801e84c:	4618      	mov	r0, r3
 801e84e:	f7f9 ff9d 	bl	801878c <lwip_htons>
 801e852:	4603      	mov	r3, r0
 801e854:	b2db      	uxtb	r3, r3
 801e856:	f003 0303 	and.w	r3, r3, #3
 801e85a:	2b00      	cmp	r3, #0
 801e85c:	d001      	beq.n	801e862 <tcp_receive+0xe6e>
 801e85e:	2301      	movs	r3, #1
 801e860:	e000      	b.n	801e864 <tcp_receive+0xe70>
 801e862:	2300      	movs	r3, #0
 801e864:	4423      	add	r3, r4
 801e866:	b29a      	uxth	r2, r3
 801e868:	4b2a      	ldr	r3, [pc, #168]	; (801e914 <tcp_receive+0xf20>)
 801e86a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801e86c:	4b29      	ldr	r3, [pc, #164]	; (801e914 <tcp_receive+0xf20>)
 801e86e:	881b      	ldrh	r3, [r3, #0]
 801e870:	461a      	mov	r2, r3
 801e872:	4b26      	ldr	r3, [pc, #152]	; (801e90c <tcp_receive+0xf18>)
 801e874:	681b      	ldr	r3, [r3, #0]
 801e876:	441a      	add	r2, r3
 801e878:	687b      	ldr	r3, [r7, #4]
 801e87a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e87c:	6879      	ldr	r1, [r7, #4]
 801e87e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801e880:	440b      	add	r3, r1
 801e882:	429a      	cmp	r2, r3
 801e884:	d019      	beq.n	801e8ba <tcp_receive+0xec6>
 801e886:	4b24      	ldr	r3, [pc, #144]	; (801e918 <tcp_receive+0xf24>)
 801e888:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 801e88c:	4923      	ldr	r1, [pc, #140]	; (801e91c <tcp_receive+0xf28>)
 801e88e:	4824      	ldr	r0, [pc, #144]	; (801e920 <tcp_receive+0xf2c>)
 801e890:	f008 f81c 	bl	80268cc <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801e894:	e011      	b.n	801e8ba <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801e896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e898:	681b      	ldr	r3, [r3, #0]
 801e89a:	63bb      	str	r3, [r7, #56]	; 0x38
 801e89c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e89e:	2b00      	cmp	r3, #0
 801e8a0:	f47f aea4 	bne.w	801e5ec <tcp_receive+0xbf8>
 801e8a4:	e00a      	b.n	801e8bc <tcp_receive+0xec8>
                break;
 801e8a6:	bf00      	nop
 801e8a8:	e008      	b.n	801e8bc <tcp_receive+0xec8>
                break;
 801e8aa:	bf00      	nop
 801e8ac:	e006      	b.n	801e8bc <tcp_receive+0xec8>
                  break;
 801e8ae:	bf00      	nop
 801e8b0:	e004      	b.n	801e8bc <tcp_receive+0xec8>
                  break;
 801e8b2:	bf00      	nop
 801e8b4:	e002      	b.n	801e8bc <tcp_receive+0xec8>
                  break;
 801e8b6:	bf00      	nop
 801e8b8:	e000      	b.n	801e8bc <tcp_receive+0xec8>
                break;
 801e8ba:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801e8bc:	6878      	ldr	r0, [r7, #4]
 801e8be:	f001 fe8b 	bl	80205d8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801e8c2:	e003      	b.n	801e8cc <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801e8c4:	6878      	ldr	r0, [r7, #4]
 801e8c6:	f001 fe87 	bl	80205d8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801e8ca:	e01a      	b.n	801e902 <tcp_receive+0xf0e>
 801e8cc:	e019      	b.n	801e902 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801e8ce:	4b0f      	ldr	r3, [pc, #60]	; (801e90c <tcp_receive+0xf18>)
 801e8d0:	681a      	ldr	r2, [r3, #0]
 801e8d2:	687b      	ldr	r3, [r7, #4]
 801e8d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e8d6:	1ad3      	subs	r3, r2, r3
 801e8d8:	2b00      	cmp	r3, #0
 801e8da:	db0a      	blt.n	801e8f2 <tcp_receive+0xefe>
 801e8dc:	4b0b      	ldr	r3, [pc, #44]	; (801e90c <tcp_receive+0xf18>)
 801e8de:	681a      	ldr	r2, [r3, #0]
 801e8e0:	687b      	ldr	r3, [r7, #4]
 801e8e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e8e4:	6879      	ldr	r1, [r7, #4]
 801e8e6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801e8e8:	440b      	add	r3, r1
 801e8ea:	1ad3      	subs	r3, r2, r3
 801e8ec:	3301      	adds	r3, #1
 801e8ee:	2b00      	cmp	r3, #0
 801e8f0:	dd07      	ble.n	801e902 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 801e8f2:	687b      	ldr	r3, [r7, #4]
 801e8f4:	8b5b      	ldrh	r3, [r3, #26]
 801e8f6:	f043 0302 	orr.w	r3, r3, #2
 801e8fa:	b29a      	uxth	r2, r3
 801e8fc:	687b      	ldr	r3, [r7, #4]
 801e8fe:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801e900:	e7ff      	b.n	801e902 <tcp_receive+0xf0e>
 801e902:	bf00      	nop
 801e904:	3750      	adds	r7, #80	; 0x50
 801e906:	46bd      	mov	sp, r7
 801e908:	bdb0      	pop	{r4, r5, r7, pc}
 801e90a:	bf00      	nop
 801e90c:	20013c4c 	.word	0x20013c4c
 801e910:	20013c2c 	.word	0x20013c2c
 801e914:	20013c56 	.word	0x20013c56
 801e918:	0802db28 	.word	0x0802db28
 801e91c:	0802ded0 	.word	0x0802ded0
 801e920:	0802db74 	.word	0x0802db74

0801e924 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 801e924:	b480      	push	{r7}
 801e926:	b083      	sub	sp, #12
 801e928:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801e92a:	4b15      	ldr	r3, [pc, #84]	; (801e980 <tcp_get_next_optbyte+0x5c>)
 801e92c:	881b      	ldrh	r3, [r3, #0]
 801e92e:	1c5a      	adds	r2, r3, #1
 801e930:	b291      	uxth	r1, r2
 801e932:	4a13      	ldr	r2, [pc, #76]	; (801e980 <tcp_get_next_optbyte+0x5c>)
 801e934:	8011      	strh	r1, [r2, #0]
 801e936:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801e938:	4b12      	ldr	r3, [pc, #72]	; (801e984 <tcp_get_next_optbyte+0x60>)
 801e93a:	681b      	ldr	r3, [r3, #0]
 801e93c:	2b00      	cmp	r3, #0
 801e93e:	d004      	beq.n	801e94a <tcp_get_next_optbyte+0x26>
 801e940:	4b11      	ldr	r3, [pc, #68]	; (801e988 <tcp_get_next_optbyte+0x64>)
 801e942:	881b      	ldrh	r3, [r3, #0]
 801e944:	88fa      	ldrh	r2, [r7, #6]
 801e946:	429a      	cmp	r2, r3
 801e948:	d208      	bcs.n	801e95c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801e94a:	4b10      	ldr	r3, [pc, #64]	; (801e98c <tcp_get_next_optbyte+0x68>)
 801e94c:	681b      	ldr	r3, [r3, #0]
 801e94e:	3314      	adds	r3, #20
 801e950:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801e952:	88fb      	ldrh	r3, [r7, #6]
 801e954:	683a      	ldr	r2, [r7, #0]
 801e956:	4413      	add	r3, r2
 801e958:	781b      	ldrb	r3, [r3, #0]
 801e95a:	e00b      	b.n	801e974 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801e95c:	88fb      	ldrh	r3, [r7, #6]
 801e95e:	b2da      	uxtb	r2, r3
 801e960:	4b09      	ldr	r3, [pc, #36]	; (801e988 <tcp_get_next_optbyte+0x64>)
 801e962:	881b      	ldrh	r3, [r3, #0]
 801e964:	b2db      	uxtb	r3, r3
 801e966:	1ad3      	subs	r3, r2, r3
 801e968:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801e96a:	4b06      	ldr	r3, [pc, #24]	; (801e984 <tcp_get_next_optbyte+0x60>)
 801e96c:	681a      	ldr	r2, [r3, #0]
 801e96e:	797b      	ldrb	r3, [r7, #5]
 801e970:	4413      	add	r3, r2
 801e972:	781b      	ldrb	r3, [r3, #0]
  }
}
 801e974:	4618      	mov	r0, r3
 801e976:	370c      	adds	r7, #12
 801e978:	46bd      	mov	sp, r7
 801e97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e97e:	4770      	bx	lr
 801e980:	20013c48 	.word	0x20013c48
 801e984:	20013c44 	.word	0x20013c44
 801e988:	20013c42 	.word	0x20013c42
 801e98c:	20013c3c 	.word	0x20013c3c

0801e990 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801e990:	b580      	push	{r7, lr}
 801e992:	b084      	sub	sp, #16
 801e994:	af00      	add	r7, sp, #0
 801e996:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801e998:	687b      	ldr	r3, [r7, #4]
 801e99a:	2b00      	cmp	r3, #0
 801e99c:	d106      	bne.n	801e9ac <tcp_parseopt+0x1c>
 801e99e:	4b32      	ldr	r3, [pc, #200]	; (801ea68 <tcp_parseopt+0xd8>)
 801e9a0:	f240 727d 	movw	r2, #1917	; 0x77d
 801e9a4:	4931      	ldr	r1, [pc, #196]	; (801ea6c <tcp_parseopt+0xdc>)
 801e9a6:	4832      	ldr	r0, [pc, #200]	; (801ea70 <tcp_parseopt+0xe0>)
 801e9a8:	f007 ff90 	bl	80268cc <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801e9ac:	4b31      	ldr	r3, [pc, #196]	; (801ea74 <tcp_parseopt+0xe4>)
 801e9ae:	881b      	ldrh	r3, [r3, #0]
 801e9b0:	2b00      	cmp	r3, #0
 801e9b2:	d055      	beq.n	801ea60 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801e9b4:	4b30      	ldr	r3, [pc, #192]	; (801ea78 <tcp_parseopt+0xe8>)
 801e9b6:	2200      	movs	r2, #0
 801e9b8:	801a      	strh	r2, [r3, #0]
 801e9ba:	e045      	b.n	801ea48 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 801e9bc:	f7ff ffb2 	bl	801e924 <tcp_get_next_optbyte>
 801e9c0:	4603      	mov	r3, r0
 801e9c2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801e9c4:	7bfb      	ldrb	r3, [r7, #15]
 801e9c6:	2b02      	cmp	r3, #2
 801e9c8:	d006      	beq.n	801e9d8 <tcp_parseopt+0x48>
 801e9ca:	2b02      	cmp	r3, #2
 801e9cc:	dc2b      	bgt.n	801ea26 <tcp_parseopt+0x96>
 801e9ce:	2b00      	cmp	r3, #0
 801e9d0:	d041      	beq.n	801ea56 <tcp_parseopt+0xc6>
 801e9d2:	2b01      	cmp	r3, #1
 801e9d4:	d127      	bne.n	801ea26 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 801e9d6:	e037      	b.n	801ea48 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801e9d8:	f7ff ffa4 	bl	801e924 <tcp_get_next_optbyte>
 801e9dc:	4603      	mov	r3, r0
 801e9de:	2b04      	cmp	r3, #4
 801e9e0:	d13b      	bne.n	801ea5a <tcp_parseopt+0xca>
 801e9e2:	4b25      	ldr	r3, [pc, #148]	; (801ea78 <tcp_parseopt+0xe8>)
 801e9e4:	881b      	ldrh	r3, [r3, #0]
 801e9e6:	3301      	adds	r3, #1
 801e9e8:	4a22      	ldr	r2, [pc, #136]	; (801ea74 <tcp_parseopt+0xe4>)
 801e9ea:	8812      	ldrh	r2, [r2, #0]
 801e9ec:	4293      	cmp	r3, r2
 801e9ee:	da34      	bge.n	801ea5a <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801e9f0:	f7ff ff98 	bl	801e924 <tcp_get_next_optbyte>
 801e9f4:	4603      	mov	r3, r0
 801e9f6:	b29b      	uxth	r3, r3
 801e9f8:	021b      	lsls	r3, r3, #8
 801e9fa:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801e9fc:	f7ff ff92 	bl	801e924 <tcp_get_next_optbyte>
 801ea00:	4603      	mov	r3, r0
 801ea02:	b29a      	uxth	r2, r3
 801ea04:	89bb      	ldrh	r3, [r7, #12]
 801ea06:	4313      	orrs	r3, r2
 801ea08:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801ea0a:	89bb      	ldrh	r3, [r7, #12]
 801ea0c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801ea10:	d804      	bhi.n	801ea1c <tcp_parseopt+0x8c>
 801ea12:	89bb      	ldrh	r3, [r7, #12]
 801ea14:	2b00      	cmp	r3, #0
 801ea16:	d001      	beq.n	801ea1c <tcp_parseopt+0x8c>
 801ea18:	89ba      	ldrh	r2, [r7, #12]
 801ea1a:	e001      	b.n	801ea20 <tcp_parseopt+0x90>
 801ea1c:	f44f 7206 	mov.w	r2, #536	; 0x218
 801ea20:	687b      	ldr	r3, [r7, #4]
 801ea22:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 801ea24:	e010      	b.n	801ea48 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801ea26:	f7ff ff7d 	bl	801e924 <tcp_get_next_optbyte>
 801ea2a:	4603      	mov	r3, r0
 801ea2c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801ea2e:	7afb      	ldrb	r3, [r7, #11]
 801ea30:	2b01      	cmp	r3, #1
 801ea32:	d914      	bls.n	801ea5e <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801ea34:	7afb      	ldrb	r3, [r7, #11]
 801ea36:	b29a      	uxth	r2, r3
 801ea38:	4b0f      	ldr	r3, [pc, #60]	; (801ea78 <tcp_parseopt+0xe8>)
 801ea3a:	881b      	ldrh	r3, [r3, #0]
 801ea3c:	4413      	add	r3, r2
 801ea3e:	b29b      	uxth	r3, r3
 801ea40:	3b02      	subs	r3, #2
 801ea42:	b29a      	uxth	r2, r3
 801ea44:	4b0c      	ldr	r3, [pc, #48]	; (801ea78 <tcp_parseopt+0xe8>)
 801ea46:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801ea48:	4b0b      	ldr	r3, [pc, #44]	; (801ea78 <tcp_parseopt+0xe8>)
 801ea4a:	881a      	ldrh	r2, [r3, #0]
 801ea4c:	4b09      	ldr	r3, [pc, #36]	; (801ea74 <tcp_parseopt+0xe4>)
 801ea4e:	881b      	ldrh	r3, [r3, #0]
 801ea50:	429a      	cmp	r2, r3
 801ea52:	d3b3      	bcc.n	801e9bc <tcp_parseopt+0x2c>
 801ea54:	e004      	b.n	801ea60 <tcp_parseopt+0xd0>
          return;
 801ea56:	bf00      	nop
 801ea58:	e002      	b.n	801ea60 <tcp_parseopt+0xd0>
            return;
 801ea5a:	bf00      	nop
 801ea5c:	e000      	b.n	801ea60 <tcp_parseopt+0xd0>
            return;
 801ea5e:	bf00      	nop
      }
    }
  }
}
 801ea60:	3710      	adds	r7, #16
 801ea62:	46bd      	mov	sp, r7
 801ea64:	bd80      	pop	{r7, pc}
 801ea66:	bf00      	nop
 801ea68:	0802db28 	.word	0x0802db28
 801ea6c:	0802df8c 	.word	0x0802df8c
 801ea70:	0802db74 	.word	0x0802db74
 801ea74:	20013c40 	.word	0x20013c40
 801ea78:	20013c48 	.word	0x20013c48

0801ea7c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801ea7c:	b480      	push	{r7}
 801ea7e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801ea80:	4b05      	ldr	r3, [pc, #20]	; (801ea98 <tcp_trigger_input_pcb_close+0x1c>)
 801ea82:	781b      	ldrb	r3, [r3, #0]
 801ea84:	f043 0310 	orr.w	r3, r3, #16
 801ea88:	b2da      	uxtb	r2, r3
 801ea8a:	4b03      	ldr	r3, [pc, #12]	; (801ea98 <tcp_trigger_input_pcb_close+0x1c>)
 801ea8c:	701a      	strb	r2, [r3, #0]
}
 801ea8e:	bf00      	nop
 801ea90:	46bd      	mov	sp, r7
 801ea92:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ea96:	4770      	bx	lr
 801ea98:	20013c59 	.word	0x20013c59

0801ea9c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801ea9c:	b580      	push	{r7, lr}
 801ea9e:	b084      	sub	sp, #16
 801eaa0:	af00      	add	r7, sp, #0
 801eaa2:	60f8      	str	r0, [r7, #12]
 801eaa4:	60b9      	str	r1, [r7, #8]
 801eaa6:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801eaa8:	68fb      	ldr	r3, [r7, #12]
 801eaaa:	2b00      	cmp	r3, #0
 801eaac:	d00a      	beq.n	801eac4 <tcp_route+0x28>
 801eaae:	68fb      	ldr	r3, [r7, #12]
 801eab0:	7a1b      	ldrb	r3, [r3, #8]
 801eab2:	2b00      	cmp	r3, #0
 801eab4:	d006      	beq.n	801eac4 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801eab6:	68fb      	ldr	r3, [r7, #12]
 801eab8:	7a1b      	ldrb	r3, [r3, #8]
 801eaba:	4618      	mov	r0, r3
 801eabc:	f7fa feee 	bl	801989c <netif_get_by_index>
 801eac0:	4603      	mov	r3, r0
 801eac2:	e003      	b.n	801eacc <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801eac4:	6878      	ldr	r0, [r7, #4]
 801eac6:	f005 fcd7 	bl	8024478 <ip4_route>
 801eaca:	4603      	mov	r3, r0
  }
}
 801eacc:	4618      	mov	r0, r3
 801eace:	3710      	adds	r7, #16
 801ead0:	46bd      	mov	sp, r7
 801ead2:	bd80      	pop	{r7, pc}

0801ead4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801ead4:	b590      	push	{r4, r7, lr}
 801ead6:	b087      	sub	sp, #28
 801ead8:	af00      	add	r7, sp, #0
 801eada:	60f8      	str	r0, [r7, #12]
 801eadc:	60b9      	str	r1, [r7, #8]
 801eade:	603b      	str	r3, [r7, #0]
 801eae0:	4613      	mov	r3, r2
 801eae2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801eae4:	68fb      	ldr	r3, [r7, #12]
 801eae6:	2b00      	cmp	r3, #0
 801eae8:	d105      	bne.n	801eaf6 <tcp_create_segment+0x22>
 801eaea:	4b44      	ldr	r3, [pc, #272]	; (801ebfc <tcp_create_segment+0x128>)
 801eaec:	22a3      	movs	r2, #163	; 0xa3
 801eaee:	4944      	ldr	r1, [pc, #272]	; (801ec00 <tcp_create_segment+0x12c>)
 801eaf0:	4844      	ldr	r0, [pc, #272]	; (801ec04 <tcp_create_segment+0x130>)
 801eaf2:	f007 feeb 	bl	80268cc <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801eaf6:	68bb      	ldr	r3, [r7, #8]
 801eaf8:	2b00      	cmp	r3, #0
 801eafa:	d105      	bne.n	801eb08 <tcp_create_segment+0x34>
 801eafc:	4b3f      	ldr	r3, [pc, #252]	; (801ebfc <tcp_create_segment+0x128>)
 801eafe:	22a4      	movs	r2, #164	; 0xa4
 801eb00:	4941      	ldr	r1, [pc, #260]	; (801ec08 <tcp_create_segment+0x134>)
 801eb02:	4840      	ldr	r0, [pc, #256]	; (801ec04 <tcp_create_segment+0x130>)
 801eb04:	f007 fee2 	bl	80268cc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801eb08:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801eb0c:	009b      	lsls	r3, r3, #2
 801eb0e:	b2db      	uxtb	r3, r3
 801eb10:	f003 0304 	and.w	r3, r3, #4
 801eb14:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801eb16:	2003      	movs	r0, #3
 801eb18:	f7fa fb4c 	bl	80191b4 <memp_malloc>
 801eb1c:	6138      	str	r0, [r7, #16]
 801eb1e:	693b      	ldr	r3, [r7, #16]
 801eb20:	2b00      	cmp	r3, #0
 801eb22:	d104      	bne.n	801eb2e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801eb24:	68b8      	ldr	r0, [r7, #8]
 801eb26:	f7fb fa47 	bl	8019fb8 <pbuf_free>
    return NULL;
 801eb2a:	2300      	movs	r3, #0
 801eb2c:	e061      	b.n	801ebf2 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801eb2e:	693b      	ldr	r3, [r7, #16]
 801eb30:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801eb34:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801eb36:	693b      	ldr	r3, [r7, #16]
 801eb38:	2200      	movs	r2, #0
 801eb3a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801eb3c:	693b      	ldr	r3, [r7, #16]
 801eb3e:	68ba      	ldr	r2, [r7, #8]
 801eb40:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801eb42:	68bb      	ldr	r3, [r7, #8]
 801eb44:	891a      	ldrh	r2, [r3, #8]
 801eb46:	7dfb      	ldrb	r3, [r7, #23]
 801eb48:	b29b      	uxth	r3, r3
 801eb4a:	429a      	cmp	r2, r3
 801eb4c:	d205      	bcs.n	801eb5a <tcp_create_segment+0x86>
 801eb4e:	4b2b      	ldr	r3, [pc, #172]	; (801ebfc <tcp_create_segment+0x128>)
 801eb50:	22b0      	movs	r2, #176	; 0xb0
 801eb52:	492e      	ldr	r1, [pc, #184]	; (801ec0c <tcp_create_segment+0x138>)
 801eb54:	482b      	ldr	r0, [pc, #172]	; (801ec04 <tcp_create_segment+0x130>)
 801eb56:	f007 feb9 	bl	80268cc <iprintf>
  seg->len = p->tot_len - optlen;
 801eb5a:	68bb      	ldr	r3, [r7, #8]
 801eb5c:	891a      	ldrh	r2, [r3, #8]
 801eb5e:	7dfb      	ldrb	r3, [r7, #23]
 801eb60:	b29b      	uxth	r3, r3
 801eb62:	1ad3      	subs	r3, r2, r3
 801eb64:	b29a      	uxth	r2, r3
 801eb66:	693b      	ldr	r3, [r7, #16]
 801eb68:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801eb6a:	2114      	movs	r1, #20
 801eb6c:	68b8      	ldr	r0, [r7, #8]
 801eb6e:	f7fb f98d 	bl	8019e8c <pbuf_add_header>
 801eb72:	4603      	mov	r3, r0
 801eb74:	2b00      	cmp	r3, #0
 801eb76:	d004      	beq.n	801eb82 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801eb78:	6938      	ldr	r0, [r7, #16]
 801eb7a:	f7fc ffe2 	bl	801bb42 <tcp_seg_free>
    return NULL;
 801eb7e:	2300      	movs	r3, #0
 801eb80:	e037      	b.n	801ebf2 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801eb82:	693b      	ldr	r3, [r7, #16]
 801eb84:	685b      	ldr	r3, [r3, #4]
 801eb86:	685a      	ldr	r2, [r3, #4]
 801eb88:	693b      	ldr	r3, [r7, #16]
 801eb8a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801eb8c:	68fb      	ldr	r3, [r7, #12]
 801eb8e:	8ada      	ldrh	r2, [r3, #22]
 801eb90:	693b      	ldr	r3, [r7, #16]
 801eb92:	68dc      	ldr	r4, [r3, #12]
 801eb94:	4610      	mov	r0, r2
 801eb96:	f7f9 fdf9 	bl	801878c <lwip_htons>
 801eb9a:	4603      	mov	r3, r0
 801eb9c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801eb9e:	68fb      	ldr	r3, [r7, #12]
 801eba0:	8b1a      	ldrh	r2, [r3, #24]
 801eba2:	693b      	ldr	r3, [r7, #16]
 801eba4:	68dc      	ldr	r4, [r3, #12]
 801eba6:	4610      	mov	r0, r2
 801eba8:	f7f9 fdf0 	bl	801878c <lwip_htons>
 801ebac:	4603      	mov	r3, r0
 801ebae:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801ebb0:	693b      	ldr	r3, [r7, #16]
 801ebb2:	68dc      	ldr	r4, [r3, #12]
 801ebb4:	6838      	ldr	r0, [r7, #0]
 801ebb6:	f7f9 fdfe 	bl	80187b6 <lwip_htonl>
 801ebba:	4603      	mov	r3, r0
 801ebbc:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801ebbe:	7dfb      	ldrb	r3, [r7, #23]
 801ebc0:	089b      	lsrs	r3, r3, #2
 801ebc2:	b2db      	uxtb	r3, r3
 801ebc4:	b29b      	uxth	r3, r3
 801ebc6:	3305      	adds	r3, #5
 801ebc8:	b29b      	uxth	r3, r3
 801ebca:	031b      	lsls	r3, r3, #12
 801ebcc:	b29a      	uxth	r2, r3
 801ebce:	79fb      	ldrb	r3, [r7, #7]
 801ebd0:	b29b      	uxth	r3, r3
 801ebd2:	4313      	orrs	r3, r2
 801ebd4:	b29a      	uxth	r2, r3
 801ebd6:	693b      	ldr	r3, [r7, #16]
 801ebd8:	68dc      	ldr	r4, [r3, #12]
 801ebda:	4610      	mov	r0, r2
 801ebdc:	f7f9 fdd6 	bl	801878c <lwip_htons>
 801ebe0:	4603      	mov	r3, r0
 801ebe2:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801ebe4:	693b      	ldr	r3, [r7, #16]
 801ebe6:	68db      	ldr	r3, [r3, #12]
 801ebe8:	2200      	movs	r2, #0
 801ebea:	749a      	strb	r2, [r3, #18]
 801ebec:	2200      	movs	r2, #0
 801ebee:	74da      	strb	r2, [r3, #19]
  return seg;
 801ebf0:	693b      	ldr	r3, [r7, #16]
}
 801ebf2:	4618      	mov	r0, r3
 801ebf4:	371c      	adds	r7, #28
 801ebf6:	46bd      	mov	sp, r7
 801ebf8:	bd90      	pop	{r4, r7, pc}
 801ebfa:	bf00      	nop
 801ebfc:	0802dfa8 	.word	0x0802dfa8
 801ec00:	0802dfdc 	.word	0x0802dfdc
 801ec04:	0802dffc 	.word	0x0802dffc
 801ec08:	0802e024 	.word	0x0802e024
 801ec0c:	0802e048 	.word	0x0802e048

0801ec10 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 801ec10:	b580      	push	{r7, lr}
 801ec12:	b086      	sub	sp, #24
 801ec14:	af00      	add	r7, sp, #0
 801ec16:	607b      	str	r3, [r7, #4]
 801ec18:	4603      	mov	r3, r0
 801ec1a:	73fb      	strb	r3, [r7, #15]
 801ec1c:	460b      	mov	r3, r1
 801ec1e:	81bb      	strh	r3, [r7, #12]
 801ec20:	4613      	mov	r3, r2
 801ec22:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 801ec24:	89bb      	ldrh	r3, [r7, #12]
 801ec26:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 801ec28:	687b      	ldr	r3, [r7, #4]
 801ec2a:	2b00      	cmp	r3, #0
 801ec2c:	d105      	bne.n	801ec3a <tcp_pbuf_prealloc+0x2a>
 801ec2e:	4b30      	ldr	r3, [pc, #192]	; (801ecf0 <tcp_pbuf_prealloc+0xe0>)
 801ec30:	22e8      	movs	r2, #232	; 0xe8
 801ec32:	4930      	ldr	r1, [pc, #192]	; (801ecf4 <tcp_pbuf_prealloc+0xe4>)
 801ec34:	4830      	ldr	r0, [pc, #192]	; (801ecf8 <tcp_pbuf_prealloc+0xe8>)
 801ec36:	f007 fe49 	bl	80268cc <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801ec3a:	6a3b      	ldr	r3, [r7, #32]
 801ec3c:	2b00      	cmp	r3, #0
 801ec3e:	d105      	bne.n	801ec4c <tcp_pbuf_prealloc+0x3c>
 801ec40:	4b2b      	ldr	r3, [pc, #172]	; (801ecf0 <tcp_pbuf_prealloc+0xe0>)
 801ec42:	22e9      	movs	r2, #233	; 0xe9
 801ec44:	492d      	ldr	r1, [pc, #180]	; (801ecfc <tcp_pbuf_prealloc+0xec>)
 801ec46:	482c      	ldr	r0, [pc, #176]	; (801ecf8 <tcp_pbuf_prealloc+0xe8>)
 801ec48:	f007 fe40 	bl	80268cc <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801ec4c:	89ba      	ldrh	r2, [r7, #12]
 801ec4e:	897b      	ldrh	r3, [r7, #10]
 801ec50:	429a      	cmp	r2, r3
 801ec52:	d221      	bcs.n	801ec98 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801ec54:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801ec58:	f003 0302 	and.w	r3, r3, #2
 801ec5c:	2b00      	cmp	r3, #0
 801ec5e:	d111      	bne.n	801ec84 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 801ec60:	6a3b      	ldr	r3, [r7, #32]
 801ec62:	8b5b      	ldrh	r3, [r3, #26]
 801ec64:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801ec68:	2b00      	cmp	r3, #0
 801ec6a:	d115      	bne.n	801ec98 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 801ec6c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801ec70:	2b00      	cmp	r3, #0
 801ec72:	d007      	beq.n	801ec84 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 801ec74:	6a3b      	ldr	r3, [r7, #32]
 801ec76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 801ec78:	2b00      	cmp	r3, #0
 801ec7a:	d103      	bne.n	801ec84 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 801ec7c:	6a3b      	ldr	r3, [r7, #32]
 801ec7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 801ec80:	2b00      	cmp	r3, #0
 801ec82:	d009      	beq.n	801ec98 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801ec84:	89bb      	ldrh	r3, [r7, #12]
 801ec86:	f203 231b 	addw	r3, r3, #539	; 0x21b
 801ec8a:	f023 0203 	bic.w	r2, r3, #3
 801ec8e:	897b      	ldrh	r3, [r7, #10]
 801ec90:	4293      	cmp	r3, r2
 801ec92:	bf28      	it	cs
 801ec94:	4613      	movcs	r3, r2
 801ec96:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 801ec98:	8af9      	ldrh	r1, [r7, #22]
 801ec9a:	7bfb      	ldrb	r3, [r7, #15]
 801ec9c:	f44f 7220 	mov.w	r2, #640	; 0x280
 801eca0:	4618      	mov	r0, r3
 801eca2:	f7fa fea5 	bl	80199f0 <pbuf_alloc>
 801eca6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801eca8:	693b      	ldr	r3, [r7, #16]
 801ecaa:	2b00      	cmp	r3, #0
 801ecac:	d101      	bne.n	801ecb2 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801ecae:	2300      	movs	r3, #0
 801ecb0:	e019      	b.n	801ece6 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801ecb2:	693b      	ldr	r3, [r7, #16]
 801ecb4:	681b      	ldr	r3, [r3, #0]
 801ecb6:	2b00      	cmp	r3, #0
 801ecb8:	d006      	beq.n	801ecc8 <tcp_pbuf_prealloc+0xb8>
 801ecba:	4b0d      	ldr	r3, [pc, #52]	; (801ecf0 <tcp_pbuf_prealloc+0xe0>)
 801ecbc:	f240 120b 	movw	r2, #267	; 0x10b
 801ecc0:	490f      	ldr	r1, [pc, #60]	; (801ed00 <tcp_pbuf_prealloc+0xf0>)
 801ecc2:	480d      	ldr	r0, [pc, #52]	; (801ecf8 <tcp_pbuf_prealloc+0xe8>)
 801ecc4:	f007 fe02 	bl	80268cc <iprintf>
  *oversize = p->len - length;
 801ecc8:	693b      	ldr	r3, [r7, #16]
 801ecca:	895a      	ldrh	r2, [r3, #10]
 801eccc:	89bb      	ldrh	r3, [r7, #12]
 801ecce:	1ad3      	subs	r3, r2, r3
 801ecd0:	b29a      	uxth	r2, r3
 801ecd2:	687b      	ldr	r3, [r7, #4]
 801ecd4:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801ecd6:	693b      	ldr	r3, [r7, #16]
 801ecd8:	89ba      	ldrh	r2, [r7, #12]
 801ecda:	811a      	strh	r2, [r3, #8]
 801ecdc:	693b      	ldr	r3, [r7, #16]
 801ecde:	891a      	ldrh	r2, [r3, #8]
 801ece0:	693b      	ldr	r3, [r7, #16]
 801ece2:	815a      	strh	r2, [r3, #10]
  return p;
 801ece4:	693b      	ldr	r3, [r7, #16]
}
 801ece6:	4618      	mov	r0, r3
 801ece8:	3718      	adds	r7, #24
 801ecea:	46bd      	mov	sp, r7
 801ecec:	bd80      	pop	{r7, pc}
 801ecee:	bf00      	nop
 801ecf0:	0802dfa8 	.word	0x0802dfa8
 801ecf4:	0802e060 	.word	0x0802e060
 801ecf8:	0802dffc 	.word	0x0802dffc
 801ecfc:	0802e084 	.word	0x0802e084
 801ed00:	0802e0a4 	.word	0x0802e0a4

0801ed04 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 801ed04:	b580      	push	{r7, lr}
 801ed06:	b082      	sub	sp, #8
 801ed08:	af00      	add	r7, sp, #0
 801ed0a:	6078      	str	r0, [r7, #4]
 801ed0c:	460b      	mov	r3, r1
 801ed0e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 801ed10:	687b      	ldr	r3, [r7, #4]
 801ed12:	2b00      	cmp	r3, #0
 801ed14:	d106      	bne.n	801ed24 <tcp_write_checks+0x20>
 801ed16:	4b33      	ldr	r3, [pc, #204]	; (801ede4 <tcp_write_checks+0xe0>)
 801ed18:	f240 1233 	movw	r2, #307	; 0x133
 801ed1c:	4932      	ldr	r1, [pc, #200]	; (801ede8 <tcp_write_checks+0xe4>)
 801ed1e:	4833      	ldr	r0, [pc, #204]	; (801edec <tcp_write_checks+0xe8>)
 801ed20:	f007 fdd4 	bl	80268cc <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 801ed24:	687b      	ldr	r3, [r7, #4]
 801ed26:	7d1b      	ldrb	r3, [r3, #20]
 801ed28:	2b04      	cmp	r3, #4
 801ed2a:	d00e      	beq.n	801ed4a <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 801ed2c:	687b      	ldr	r3, [r7, #4]
 801ed2e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 801ed30:	2b07      	cmp	r3, #7
 801ed32:	d00a      	beq.n	801ed4a <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 801ed34:	687b      	ldr	r3, [r7, #4]
 801ed36:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 801ed38:	2b02      	cmp	r3, #2
 801ed3a:	d006      	beq.n	801ed4a <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 801ed3c:	687b      	ldr	r3, [r7, #4]
 801ed3e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 801ed40:	2b03      	cmp	r3, #3
 801ed42:	d002      	beq.n	801ed4a <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 801ed44:	f06f 030a 	mvn.w	r3, #10
 801ed48:	e048      	b.n	801eddc <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801ed4a:	887b      	ldrh	r3, [r7, #2]
 801ed4c:	2b00      	cmp	r3, #0
 801ed4e:	d101      	bne.n	801ed54 <tcp_write_checks+0x50>
    return ERR_OK;
 801ed50:	2300      	movs	r3, #0
 801ed52:	e043      	b.n	801eddc <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 801ed54:	687b      	ldr	r3, [r7, #4]
 801ed56:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801ed5a:	887a      	ldrh	r2, [r7, #2]
 801ed5c:	429a      	cmp	r2, r3
 801ed5e:	d909      	bls.n	801ed74 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801ed60:	687b      	ldr	r3, [r7, #4]
 801ed62:	8b5b      	ldrh	r3, [r3, #26]
 801ed64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ed68:	b29a      	uxth	r2, r3
 801ed6a:	687b      	ldr	r3, [r7, #4]
 801ed6c:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801ed6e:	f04f 33ff 	mov.w	r3, #4294967295
 801ed72:	e033      	b.n	801eddc <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801ed74:	687b      	ldr	r3, [r7, #4]
 801ed76:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801ed7a:	2b08      	cmp	r3, #8
 801ed7c:	d909      	bls.n	801ed92 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801ed7e:	687b      	ldr	r3, [r7, #4]
 801ed80:	8b5b      	ldrh	r3, [r3, #26]
 801ed82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ed86:	b29a      	uxth	r2, r3
 801ed88:	687b      	ldr	r3, [r7, #4]
 801ed8a:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801ed8c:	f04f 33ff 	mov.w	r3, #4294967295
 801ed90:	e024      	b.n	801eddc <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801ed92:	687b      	ldr	r3, [r7, #4]
 801ed94:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801ed98:	2b00      	cmp	r3, #0
 801ed9a:	d00f      	beq.n	801edbc <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801ed9c:	687b      	ldr	r3, [r7, #4]
 801ed9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801eda0:	2b00      	cmp	r3, #0
 801eda2:	d11a      	bne.n	801edda <tcp_write_checks+0xd6>
 801eda4:	687b      	ldr	r3, [r7, #4]
 801eda6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801eda8:	2b00      	cmp	r3, #0
 801edaa:	d116      	bne.n	801edda <tcp_write_checks+0xd6>
 801edac:	4b0d      	ldr	r3, [pc, #52]	; (801ede4 <tcp_write_checks+0xe0>)
 801edae:	f240 1255 	movw	r2, #341	; 0x155
 801edb2:	490f      	ldr	r1, [pc, #60]	; (801edf0 <tcp_write_checks+0xec>)
 801edb4:	480d      	ldr	r0, [pc, #52]	; (801edec <tcp_write_checks+0xe8>)
 801edb6:	f007 fd89 	bl	80268cc <iprintf>
 801edba:	e00e      	b.n	801edda <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801edbc:	687b      	ldr	r3, [r7, #4]
 801edbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801edc0:	2b00      	cmp	r3, #0
 801edc2:	d103      	bne.n	801edcc <tcp_write_checks+0xc8>
 801edc4:	687b      	ldr	r3, [r7, #4]
 801edc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801edc8:	2b00      	cmp	r3, #0
 801edca:	d006      	beq.n	801edda <tcp_write_checks+0xd6>
 801edcc:	4b05      	ldr	r3, [pc, #20]	; (801ede4 <tcp_write_checks+0xe0>)
 801edce:	f44f 72ac 	mov.w	r2, #344	; 0x158
 801edd2:	4908      	ldr	r1, [pc, #32]	; (801edf4 <tcp_write_checks+0xf0>)
 801edd4:	4805      	ldr	r0, [pc, #20]	; (801edec <tcp_write_checks+0xe8>)
 801edd6:	f007 fd79 	bl	80268cc <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801edda:	2300      	movs	r3, #0
}
 801eddc:	4618      	mov	r0, r3
 801edde:	3708      	adds	r7, #8
 801ede0:	46bd      	mov	sp, r7
 801ede2:	bd80      	pop	{r7, pc}
 801ede4:	0802dfa8 	.word	0x0802dfa8
 801ede8:	0802e0b8 	.word	0x0802e0b8
 801edec:	0802dffc 	.word	0x0802dffc
 801edf0:	0802e0d8 	.word	0x0802e0d8
 801edf4:	0802e114 	.word	0x0802e114

0801edf8 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 801edf8:	b590      	push	{r4, r7, lr}
 801edfa:	b09b      	sub	sp, #108	; 0x6c
 801edfc:	af04      	add	r7, sp, #16
 801edfe:	60f8      	str	r0, [r7, #12]
 801ee00:	60b9      	str	r1, [r7, #8]
 801ee02:	4611      	mov	r1, r2
 801ee04:	461a      	mov	r2, r3
 801ee06:	460b      	mov	r3, r1
 801ee08:	80fb      	strh	r3, [r7, #6]
 801ee0a:	4613      	mov	r3, r2
 801ee0c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801ee0e:	2300      	movs	r3, #0
 801ee10:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801ee12:	2300      	movs	r3, #0
 801ee14:	653b      	str	r3, [r7, #80]	; 0x50
 801ee16:	2300      	movs	r3, #0
 801ee18:	64fb      	str	r3, [r7, #76]	; 0x4c
 801ee1a:	2300      	movs	r3, #0
 801ee1c:	64bb      	str	r3, [r7, #72]	; 0x48
 801ee1e:	2300      	movs	r3, #0
 801ee20:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801ee22:	2300      	movs	r3, #0
 801ee24:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 801ee28:	2300      	movs	r3, #0
 801ee2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801ee2e:	2300      	movs	r3, #0
 801ee30:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801ee32:	2300      	movs	r3, #0
 801ee34:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801ee36:	2300      	movs	r3, #0
 801ee38:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801ee3a:	68fb      	ldr	r3, [r7, #12]
 801ee3c:	2b00      	cmp	r3, #0
 801ee3e:	d109      	bne.n	801ee54 <tcp_write+0x5c>
 801ee40:	4ba4      	ldr	r3, [pc, #656]	; (801f0d4 <tcp_write+0x2dc>)
 801ee42:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 801ee46:	49a4      	ldr	r1, [pc, #656]	; (801f0d8 <tcp_write+0x2e0>)
 801ee48:	48a4      	ldr	r0, [pc, #656]	; (801f0dc <tcp_write+0x2e4>)
 801ee4a:	f007 fd3f 	bl	80268cc <iprintf>
 801ee4e:	f06f 030f 	mvn.w	r3, #15
 801ee52:	e32a      	b.n	801f4aa <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 801ee54:	68fb      	ldr	r3, [r7, #12]
 801ee56:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801ee5a:	085b      	lsrs	r3, r3, #1
 801ee5c:	b29a      	uxth	r2, r3
 801ee5e:	68fb      	ldr	r3, [r7, #12]
 801ee60:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801ee62:	4293      	cmp	r3, r2
 801ee64:	bf28      	it	cs
 801ee66:	4613      	movcs	r3, r2
 801ee68:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801ee6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801ee6c:	2b00      	cmp	r3, #0
 801ee6e:	d102      	bne.n	801ee76 <tcp_write+0x7e>
 801ee70:	68fb      	ldr	r3, [r7, #12]
 801ee72:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801ee74:	e000      	b.n	801ee78 <tcp_write+0x80>
 801ee76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801ee78:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801ee7a:	68bb      	ldr	r3, [r7, #8]
 801ee7c:	2b00      	cmp	r3, #0
 801ee7e:	d109      	bne.n	801ee94 <tcp_write+0x9c>
 801ee80:	4b94      	ldr	r3, [pc, #592]	; (801f0d4 <tcp_write+0x2dc>)
 801ee82:	f240 12ad 	movw	r2, #429	; 0x1ad
 801ee86:	4996      	ldr	r1, [pc, #600]	; (801f0e0 <tcp_write+0x2e8>)
 801ee88:	4894      	ldr	r0, [pc, #592]	; (801f0dc <tcp_write+0x2e4>)
 801ee8a:	f007 fd1f 	bl	80268cc <iprintf>
 801ee8e:	f06f 030f 	mvn.w	r3, #15
 801ee92:	e30a      	b.n	801f4aa <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 801ee94:	88fb      	ldrh	r3, [r7, #6]
 801ee96:	4619      	mov	r1, r3
 801ee98:	68f8      	ldr	r0, [r7, #12]
 801ee9a:	f7ff ff33 	bl	801ed04 <tcp_write_checks>
 801ee9e:	4603      	mov	r3, r0
 801eea0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 801eea4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801eea8:	2b00      	cmp	r3, #0
 801eeaa:	d002      	beq.n	801eeb2 <tcp_write+0xba>
    return err;
 801eeac:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801eeb0:	e2fb      	b.n	801f4aa <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 801eeb2:	68fb      	ldr	r3, [r7, #12]
 801eeb4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801eeb8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801eebc:	2300      	movs	r3, #0
 801eebe:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801eec2:	68fb      	ldr	r3, [r7, #12]
 801eec4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801eec6:	2b00      	cmp	r3, #0
 801eec8:	f000 80f6 	beq.w	801f0b8 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801eecc:	68fb      	ldr	r3, [r7, #12]
 801eece:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801eed0:	653b      	str	r3, [r7, #80]	; 0x50
 801eed2:	e002      	b.n	801eeda <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 801eed4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801eed6:	681b      	ldr	r3, [r3, #0]
 801eed8:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801eeda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801eedc:	681b      	ldr	r3, [r3, #0]
 801eede:	2b00      	cmp	r3, #0
 801eee0:	d1f8      	bne.n	801eed4 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801eee2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801eee4:	7a9b      	ldrb	r3, [r3, #10]
 801eee6:	009b      	lsls	r3, r3, #2
 801eee8:	b29b      	uxth	r3, r3
 801eeea:	f003 0304 	and.w	r3, r3, #4
 801eeee:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801eef0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801eef2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801eef4:	891b      	ldrh	r3, [r3, #8]
 801eef6:	4619      	mov	r1, r3
 801eef8:	8c3b      	ldrh	r3, [r7, #32]
 801eefa:	440b      	add	r3, r1
 801eefc:	429a      	cmp	r2, r3
 801eefe:	da06      	bge.n	801ef0e <tcp_write+0x116>
 801ef00:	4b74      	ldr	r3, [pc, #464]	; (801f0d4 <tcp_write+0x2dc>)
 801ef02:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801ef06:	4977      	ldr	r1, [pc, #476]	; (801f0e4 <tcp_write+0x2ec>)
 801ef08:	4874      	ldr	r0, [pc, #464]	; (801f0dc <tcp_write+0x2e4>)
 801ef0a:	f007 fcdf 	bl	80268cc <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801ef0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ef10:	891a      	ldrh	r2, [r3, #8]
 801ef12:	8c3b      	ldrh	r3, [r7, #32]
 801ef14:	4413      	add	r3, r2
 801ef16:	b29b      	uxth	r3, r3
 801ef18:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801ef1a:	1ad3      	subs	r3, r2, r3
 801ef1c:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801ef1e:	68fb      	ldr	r3, [r7, #12]
 801ef20:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801ef24:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 801ef26:	8a7b      	ldrh	r3, [r7, #18]
 801ef28:	2b00      	cmp	r3, #0
 801ef2a:	d026      	beq.n	801ef7a <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801ef2c:	8a7b      	ldrh	r3, [r7, #18]
 801ef2e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801ef30:	429a      	cmp	r2, r3
 801ef32:	d206      	bcs.n	801ef42 <tcp_write+0x14a>
 801ef34:	4b67      	ldr	r3, [pc, #412]	; (801f0d4 <tcp_write+0x2dc>)
 801ef36:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801ef3a:	496b      	ldr	r1, [pc, #428]	; (801f0e8 <tcp_write+0x2f0>)
 801ef3c:	4867      	ldr	r0, [pc, #412]	; (801f0dc <tcp_write+0x2e4>)
 801ef3e:	f007 fcc5 	bl	80268cc <iprintf>
      seg = last_unsent;
 801ef42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ef44:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801ef46:	8a7b      	ldrh	r3, [r7, #18]
 801ef48:	88fa      	ldrh	r2, [r7, #6]
 801ef4a:	4293      	cmp	r3, r2
 801ef4c:	bf28      	it	cs
 801ef4e:	4613      	movcs	r3, r2
 801ef50:	b29b      	uxth	r3, r3
 801ef52:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801ef54:	4293      	cmp	r3, r2
 801ef56:	bf28      	it	cs
 801ef58:	4613      	movcs	r3, r2
 801ef5a:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 801ef5c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801ef60:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801ef62:	4413      	add	r3, r2
 801ef64:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 801ef68:	8a7a      	ldrh	r2, [r7, #18]
 801ef6a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801ef6c:	1ad3      	subs	r3, r2, r3
 801ef6e:	b29b      	uxth	r3, r3
 801ef70:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801ef72:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801ef74:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801ef76:	1ad3      	subs	r3, r2, r3
 801ef78:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801ef7a:	8a7b      	ldrh	r3, [r7, #18]
 801ef7c:	2b00      	cmp	r3, #0
 801ef7e:	d00b      	beq.n	801ef98 <tcp_write+0x1a0>
 801ef80:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801ef84:	88fb      	ldrh	r3, [r7, #6]
 801ef86:	429a      	cmp	r2, r3
 801ef88:	d006      	beq.n	801ef98 <tcp_write+0x1a0>
 801ef8a:	4b52      	ldr	r3, [pc, #328]	; (801f0d4 <tcp_write+0x2dc>)
 801ef8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 801ef90:	4956      	ldr	r1, [pc, #344]	; (801f0ec <tcp_write+0x2f4>)
 801ef92:	4852      	ldr	r0, [pc, #328]	; (801f0dc <tcp_write+0x2e4>)
 801ef94:	f007 fc9a 	bl	80268cc <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801ef98:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801ef9c:	88fb      	ldrh	r3, [r7, #6]
 801ef9e:	429a      	cmp	r2, r3
 801efa0:	f080 8167 	bcs.w	801f272 <tcp_write+0x47a>
 801efa4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801efa6:	2b00      	cmp	r3, #0
 801efa8:	f000 8163 	beq.w	801f272 <tcp_write+0x47a>
 801efac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801efae:	891b      	ldrh	r3, [r3, #8]
 801efb0:	2b00      	cmp	r3, #0
 801efb2:	f000 815e 	beq.w	801f272 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801efb6:	88fa      	ldrh	r2, [r7, #6]
 801efb8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801efbc:	1ad2      	subs	r2, r2, r3
 801efbe:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801efc0:	4293      	cmp	r3, r2
 801efc2:	bfa8      	it	ge
 801efc4:	4613      	movge	r3, r2
 801efc6:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 801efc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801efca:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801efcc:	797b      	ldrb	r3, [r7, #5]
 801efce:	f003 0301 	and.w	r3, r3, #1
 801efd2:	2b00      	cmp	r3, #0
 801efd4:	d027      	beq.n	801f026 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801efd6:	f107 0012 	add.w	r0, r7, #18
 801efda:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801efdc:	8bf9      	ldrh	r1, [r7, #30]
 801efde:	2301      	movs	r3, #1
 801efe0:	9302      	str	r3, [sp, #8]
 801efe2:	797b      	ldrb	r3, [r7, #5]
 801efe4:	9301      	str	r3, [sp, #4]
 801efe6:	68fb      	ldr	r3, [r7, #12]
 801efe8:	9300      	str	r3, [sp, #0]
 801efea:	4603      	mov	r3, r0
 801efec:	2000      	movs	r0, #0
 801efee:	f7ff fe0f 	bl	801ec10 <tcp_pbuf_prealloc>
 801eff2:	6578      	str	r0, [r7, #84]	; 0x54
 801eff4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801eff6:	2b00      	cmp	r3, #0
 801eff8:	f000 8225 	beq.w	801f446 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801effc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801effe:	6858      	ldr	r0, [r3, #4]
 801f000:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801f004:	68ba      	ldr	r2, [r7, #8]
 801f006:	4413      	add	r3, r2
 801f008:	8bfa      	ldrh	r2, [r7, #30]
 801f00a:	4619      	mov	r1, r3
 801f00c:	f006 fd8a 	bl	8025b24 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 801f010:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801f012:	f7fb f85f 	bl	801a0d4 <pbuf_clen>
 801f016:	4603      	mov	r3, r0
 801f018:	461a      	mov	r2, r3
 801f01a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801f01e:	4413      	add	r3, r2
 801f020:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 801f024:	e041      	b.n	801f0aa <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801f026:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801f028:	685b      	ldr	r3, [r3, #4]
 801f02a:	637b      	str	r3, [r7, #52]	; 0x34
 801f02c:	e002      	b.n	801f034 <tcp_write+0x23c>
 801f02e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f030:	681b      	ldr	r3, [r3, #0]
 801f032:	637b      	str	r3, [r7, #52]	; 0x34
 801f034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f036:	681b      	ldr	r3, [r3, #0]
 801f038:	2b00      	cmp	r3, #0
 801f03a:	d1f8      	bne.n	801f02e <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801f03c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f03e:	7b1b      	ldrb	r3, [r3, #12]
 801f040:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801f044:	2b00      	cmp	r3, #0
 801f046:	d115      	bne.n	801f074 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801f048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f04a:	685b      	ldr	r3, [r3, #4]
 801f04c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801f04e:	8952      	ldrh	r2, [r2, #10]
 801f050:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801f052:	68ba      	ldr	r2, [r7, #8]
 801f054:	429a      	cmp	r2, r3
 801f056:	d10d      	bne.n	801f074 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801f058:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801f05c:	2b00      	cmp	r3, #0
 801f05e:	d006      	beq.n	801f06e <tcp_write+0x276>
 801f060:	4b1c      	ldr	r3, [pc, #112]	; (801f0d4 <tcp_write+0x2dc>)
 801f062:	f240 2231 	movw	r2, #561	; 0x231
 801f066:	4922      	ldr	r1, [pc, #136]	; (801f0f0 <tcp_write+0x2f8>)
 801f068:	481c      	ldr	r0, [pc, #112]	; (801f0dc <tcp_write+0x2e4>)
 801f06a:	f007 fc2f 	bl	80268cc <iprintf>
          extendlen = seglen;
 801f06e:	8bfb      	ldrh	r3, [r7, #30]
 801f070:	87bb      	strh	r3, [r7, #60]	; 0x3c
 801f072:	e01a      	b.n	801f0aa <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801f074:	8bfb      	ldrh	r3, [r7, #30]
 801f076:	2201      	movs	r2, #1
 801f078:	4619      	mov	r1, r3
 801f07a:	2000      	movs	r0, #0
 801f07c:	f7fa fcb8 	bl	80199f0 <pbuf_alloc>
 801f080:	6578      	str	r0, [r7, #84]	; 0x54
 801f082:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801f084:	2b00      	cmp	r3, #0
 801f086:	f000 81e0 	beq.w	801f44a <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801f08a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801f08e:	68ba      	ldr	r2, [r7, #8]
 801f090:	441a      	add	r2, r3
 801f092:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801f094:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801f096:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801f098:	f7fb f81c 	bl	801a0d4 <pbuf_clen>
 801f09c:	4603      	mov	r3, r0
 801f09e:	461a      	mov	r2, r3
 801f0a0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801f0a4:	4413      	add	r3, r2
 801f0a6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801f0aa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801f0ae:	8bfb      	ldrh	r3, [r7, #30]
 801f0b0:	4413      	add	r3, r2
 801f0b2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801f0b6:	e0dc      	b.n	801f272 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801f0b8:	68fb      	ldr	r3, [r7, #12]
 801f0ba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801f0be:	2b00      	cmp	r3, #0
 801f0c0:	f000 80d7 	beq.w	801f272 <tcp_write+0x47a>
 801f0c4:	4b03      	ldr	r3, [pc, #12]	; (801f0d4 <tcp_write+0x2dc>)
 801f0c6:	f240 224a 	movw	r2, #586	; 0x24a
 801f0ca:	490a      	ldr	r1, [pc, #40]	; (801f0f4 <tcp_write+0x2fc>)
 801f0cc:	4803      	ldr	r0, [pc, #12]	; (801f0dc <tcp_write+0x2e4>)
 801f0ce:	f007 fbfd 	bl	80268cc <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801f0d2:	e0ce      	b.n	801f272 <tcp_write+0x47a>
 801f0d4:	0802dfa8 	.word	0x0802dfa8
 801f0d8:	0802e148 	.word	0x0802e148
 801f0dc:	0802dffc 	.word	0x0802dffc
 801f0e0:	0802e160 	.word	0x0802e160
 801f0e4:	0802e194 	.word	0x0802e194
 801f0e8:	0802e1ac 	.word	0x0802e1ac
 801f0ec:	0802e1cc 	.word	0x0802e1cc
 801f0f0:	0802e1ec 	.word	0x0802e1ec
 801f0f4:	0802e218 	.word	0x0802e218
    struct pbuf *p;
    u16_t left = len - pos;
 801f0f8:	88fa      	ldrh	r2, [r7, #6]
 801f0fa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801f0fe:	1ad3      	subs	r3, r2, r3
 801f100:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801f102:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801f106:	b29b      	uxth	r3, r3
 801f108:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801f10a:	1ad3      	subs	r3, r2, r3
 801f10c:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801f10e:	8b7a      	ldrh	r2, [r7, #26]
 801f110:	8bbb      	ldrh	r3, [r7, #28]
 801f112:	4293      	cmp	r3, r2
 801f114:	bf28      	it	cs
 801f116:	4613      	movcs	r3, r2
 801f118:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801f11a:	797b      	ldrb	r3, [r7, #5]
 801f11c:	f003 0301 	and.w	r3, r3, #1
 801f120:	2b00      	cmp	r3, #0
 801f122:	d036      	beq.n	801f192 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801f124:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801f128:	b29a      	uxth	r2, r3
 801f12a:	8b3b      	ldrh	r3, [r7, #24]
 801f12c:	4413      	add	r3, r2
 801f12e:	b299      	uxth	r1, r3
 801f130:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801f132:	2b00      	cmp	r3, #0
 801f134:	bf0c      	ite	eq
 801f136:	2301      	moveq	r3, #1
 801f138:	2300      	movne	r3, #0
 801f13a:	b2db      	uxtb	r3, r3
 801f13c:	f107 0012 	add.w	r0, r7, #18
 801f140:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801f142:	9302      	str	r3, [sp, #8]
 801f144:	797b      	ldrb	r3, [r7, #5]
 801f146:	9301      	str	r3, [sp, #4]
 801f148:	68fb      	ldr	r3, [r7, #12]
 801f14a:	9300      	str	r3, [sp, #0]
 801f14c:	4603      	mov	r3, r0
 801f14e:	2036      	movs	r0, #54	; 0x36
 801f150:	f7ff fd5e 	bl	801ec10 <tcp_pbuf_prealloc>
 801f154:	6338      	str	r0, [r7, #48]	; 0x30
 801f156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f158:	2b00      	cmp	r3, #0
 801f15a:	f000 8178 	beq.w	801f44e <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801f15e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f160:	895b      	ldrh	r3, [r3, #10]
 801f162:	8b3a      	ldrh	r2, [r7, #24]
 801f164:	429a      	cmp	r2, r3
 801f166:	d906      	bls.n	801f176 <tcp_write+0x37e>
 801f168:	4b8c      	ldr	r3, [pc, #560]	; (801f39c <tcp_write+0x5a4>)
 801f16a:	f240 2266 	movw	r2, #614	; 0x266
 801f16e:	498c      	ldr	r1, [pc, #560]	; (801f3a0 <tcp_write+0x5a8>)
 801f170:	488c      	ldr	r0, [pc, #560]	; (801f3a4 <tcp_write+0x5ac>)
 801f172:	f007 fbab 	bl	80268cc <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801f176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f178:	685a      	ldr	r2, [r3, #4]
 801f17a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801f17e:	18d0      	adds	r0, r2, r3
 801f180:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801f184:	68ba      	ldr	r2, [r7, #8]
 801f186:	4413      	add	r3, r2
 801f188:	8b3a      	ldrh	r2, [r7, #24]
 801f18a:	4619      	mov	r1, r3
 801f18c:	f006 fcca 	bl	8025b24 <memcpy>
 801f190:	e02f      	b.n	801f1f2 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801f192:	8a7b      	ldrh	r3, [r7, #18]
 801f194:	2b00      	cmp	r3, #0
 801f196:	d006      	beq.n	801f1a6 <tcp_write+0x3ae>
 801f198:	4b80      	ldr	r3, [pc, #512]	; (801f39c <tcp_write+0x5a4>)
 801f19a:	f240 2271 	movw	r2, #625	; 0x271
 801f19e:	4982      	ldr	r1, [pc, #520]	; (801f3a8 <tcp_write+0x5b0>)
 801f1a0:	4880      	ldr	r0, [pc, #512]	; (801f3a4 <tcp_write+0x5ac>)
 801f1a2:	f007 fb93 	bl	80268cc <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801f1a6:	8b3b      	ldrh	r3, [r7, #24]
 801f1a8:	2201      	movs	r2, #1
 801f1aa:	4619      	mov	r1, r3
 801f1ac:	2036      	movs	r0, #54	; 0x36
 801f1ae:	f7fa fc1f 	bl	80199f0 <pbuf_alloc>
 801f1b2:	6178      	str	r0, [r7, #20]
 801f1b4:	697b      	ldr	r3, [r7, #20]
 801f1b6:	2b00      	cmp	r3, #0
 801f1b8:	f000 814b 	beq.w	801f452 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801f1bc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801f1c0:	68ba      	ldr	r2, [r7, #8]
 801f1c2:	441a      	add	r2, r3
 801f1c4:	697b      	ldr	r3, [r7, #20]
 801f1c6:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801f1c8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801f1cc:	b29b      	uxth	r3, r3
 801f1ce:	f44f 7220 	mov.w	r2, #640	; 0x280
 801f1d2:	4619      	mov	r1, r3
 801f1d4:	2036      	movs	r0, #54	; 0x36
 801f1d6:	f7fa fc0b 	bl	80199f0 <pbuf_alloc>
 801f1da:	6338      	str	r0, [r7, #48]	; 0x30
 801f1dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f1de:	2b00      	cmp	r3, #0
 801f1e0:	d103      	bne.n	801f1ea <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801f1e2:	6978      	ldr	r0, [r7, #20]
 801f1e4:	f7fa fee8 	bl	8019fb8 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 801f1e8:	e136      	b.n	801f458 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801f1ea:	6979      	ldr	r1, [r7, #20]
 801f1ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801f1ee:	f7fa ffb1 	bl	801a154 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801f1f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801f1f4:	f7fa ff6e 	bl	801a0d4 <pbuf_clen>
 801f1f8:	4603      	mov	r3, r0
 801f1fa:	461a      	mov	r2, r3
 801f1fc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801f200:	4413      	add	r3, r2
 801f202:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801f206:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801f20a:	2b09      	cmp	r3, #9
 801f20c:	d903      	bls.n	801f216 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801f20e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801f210:	f7fa fed2 	bl	8019fb8 <pbuf_free>
      goto memerr;
 801f214:	e120      	b.n	801f458 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801f216:	68fb      	ldr	r3, [r7, #12]
 801f218:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801f21a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801f21e:	441a      	add	r2, r3
 801f220:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801f224:	9300      	str	r3, [sp, #0]
 801f226:	4613      	mov	r3, r2
 801f228:	2200      	movs	r2, #0
 801f22a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801f22c:	68f8      	ldr	r0, [r7, #12]
 801f22e:	f7ff fc51 	bl	801ead4 <tcp_create_segment>
 801f232:	64f8      	str	r0, [r7, #76]	; 0x4c
 801f234:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801f236:	2b00      	cmp	r3, #0
 801f238:	f000 810d 	beq.w	801f456 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801f23c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801f23e:	2b00      	cmp	r3, #0
 801f240:	d102      	bne.n	801f248 <tcp_write+0x450>
      queue = seg;
 801f242:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801f244:	647b      	str	r3, [r7, #68]	; 0x44
 801f246:	e00c      	b.n	801f262 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801f248:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801f24a:	2b00      	cmp	r3, #0
 801f24c:	d106      	bne.n	801f25c <tcp_write+0x464>
 801f24e:	4b53      	ldr	r3, [pc, #332]	; (801f39c <tcp_write+0x5a4>)
 801f250:	f240 22ab 	movw	r2, #683	; 0x2ab
 801f254:	4955      	ldr	r1, [pc, #340]	; (801f3ac <tcp_write+0x5b4>)
 801f256:	4853      	ldr	r0, [pc, #332]	; (801f3a4 <tcp_write+0x5ac>)
 801f258:	f007 fb38 	bl	80268cc <iprintf>
      prev_seg->next = seg;
 801f25c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801f25e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801f260:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801f262:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801f264:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801f266:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801f26a:	8b3b      	ldrh	r3, [r7, #24]
 801f26c:	4413      	add	r3, r2
 801f26e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 801f272:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801f276:	88fb      	ldrh	r3, [r7, #6]
 801f278:	429a      	cmp	r2, r3
 801f27a:	f4ff af3d 	bcc.w	801f0f8 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801f27e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801f280:	2b00      	cmp	r3, #0
 801f282:	d02c      	beq.n	801f2de <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 801f284:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801f286:	685b      	ldr	r3, [r3, #4]
 801f288:	62fb      	str	r3, [r7, #44]	; 0x2c
 801f28a:	e01e      	b.n	801f2ca <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 801f28c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f28e:	891a      	ldrh	r2, [r3, #8]
 801f290:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801f292:	4413      	add	r3, r2
 801f294:	b29a      	uxth	r2, r3
 801f296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f298:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801f29a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f29c:	681b      	ldr	r3, [r3, #0]
 801f29e:	2b00      	cmp	r3, #0
 801f2a0:	d110      	bne.n	801f2c4 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801f2a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f2a4:	685b      	ldr	r3, [r3, #4]
 801f2a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801f2a8:	8952      	ldrh	r2, [r2, #10]
 801f2aa:	4413      	add	r3, r2
 801f2ac:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801f2ae:	68b9      	ldr	r1, [r7, #8]
 801f2b0:	4618      	mov	r0, r3
 801f2b2:	f006 fc37 	bl	8025b24 <memcpy>
        p->len += oversize_used;
 801f2b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f2b8:	895a      	ldrh	r2, [r3, #10]
 801f2ba:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801f2bc:	4413      	add	r3, r2
 801f2be:	b29a      	uxth	r2, r3
 801f2c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f2c2:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801f2c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f2c6:	681b      	ldr	r3, [r3, #0]
 801f2c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 801f2ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f2cc:	2b00      	cmp	r3, #0
 801f2ce:	d1dd      	bne.n	801f28c <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 801f2d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801f2d2:	891a      	ldrh	r2, [r3, #8]
 801f2d4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801f2d6:	4413      	add	r3, r2
 801f2d8:	b29a      	uxth	r2, r3
 801f2da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801f2dc:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801f2de:	8a7a      	ldrh	r2, [r7, #18]
 801f2e0:	68fb      	ldr	r3, [r7, #12]
 801f2e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801f2e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801f2e8:	2b00      	cmp	r3, #0
 801f2ea:	d018      	beq.n	801f31e <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801f2ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801f2ee:	2b00      	cmp	r3, #0
 801f2f0:	d106      	bne.n	801f300 <tcp_write+0x508>
 801f2f2:	4b2a      	ldr	r3, [pc, #168]	; (801f39c <tcp_write+0x5a4>)
 801f2f4:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 801f2f8:	492d      	ldr	r1, [pc, #180]	; (801f3b0 <tcp_write+0x5b8>)
 801f2fa:	482a      	ldr	r0, [pc, #168]	; (801f3a4 <tcp_write+0x5ac>)
 801f2fc:	f007 fae6 	bl	80268cc <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 801f300:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801f302:	685b      	ldr	r3, [r3, #4]
 801f304:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801f306:	4618      	mov	r0, r3
 801f308:	f7fa ff24 	bl	801a154 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801f30c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801f30e:	891a      	ldrh	r2, [r3, #8]
 801f310:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801f312:	891b      	ldrh	r3, [r3, #8]
 801f314:	4413      	add	r3, r2
 801f316:	b29a      	uxth	r2, r3
 801f318:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801f31a:	811a      	strh	r2, [r3, #8]
 801f31c:	e037      	b.n	801f38e <tcp_write+0x596>
  } else if (extendlen > 0) {
 801f31e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801f320:	2b00      	cmp	r3, #0
 801f322:	d034      	beq.n	801f38e <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801f324:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801f326:	2b00      	cmp	r3, #0
 801f328:	d003      	beq.n	801f332 <tcp_write+0x53a>
 801f32a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801f32c:	685b      	ldr	r3, [r3, #4]
 801f32e:	2b00      	cmp	r3, #0
 801f330:	d106      	bne.n	801f340 <tcp_write+0x548>
 801f332:	4b1a      	ldr	r3, [pc, #104]	; (801f39c <tcp_write+0x5a4>)
 801f334:	f240 22e6 	movw	r2, #742	; 0x2e6
 801f338:	491e      	ldr	r1, [pc, #120]	; (801f3b4 <tcp_write+0x5bc>)
 801f33a:	481a      	ldr	r0, [pc, #104]	; (801f3a4 <tcp_write+0x5ac>)
 801f33c:	f007 fac6 	bl	80268cc <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801f340:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801f342:	685b      	ldr	r3, [r3, #4]
 801f344:	62bb      	str	r3, [r7, #40]	; 0x28
 801f346:	e009      	b.n	801f35c <tcp_write+0x564>
      p->tot_len += extendlen;
 801f348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f34a:	891a      	ldrh	r2, [r3, #8]
 801f34c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801f34e:	4413      	add	r3, r2
 801f350:	b29a      	uxth	r2, r3
 801f352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f354:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801f356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f358:	681b      	ldr	r3, [r3, #0]
 801f35a:	62bb      	str	r3, [r7, #40]	; 0x28
 801f35c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f35e:	681b      	ldr	r3, [r3, #0]
 801f360:	2b00      	cmp	r3, #0
 801f362:	d1f1      	bne.n	801f348 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 801f364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f366:	891a      	ldrh	r2, [r3, #8]
 801f368:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801f36a:	4413      	add	r3, r2
 801f36c:	b29a      	uxth	r2, r3
 801f36e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f370:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801f372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f374:	895a      	ldrh	r2, [r3, #10]
 801f376:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801f378:	4413      	add	r3, r2
 801f37a:	b29a      	uxth	r2, r3
 801f37c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f37e:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 801f380:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801f382:	891a      	ldrh	r2, [r3, #8]
 801f384:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801f386:	4413      	add	r3, r2
 801f388:	b29a      	uxth	r2, r3
 801f38a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801f38c:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801f38e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801f390:	2b00      	cmp	r3, #0
 801f392:	d111      	bne.n	801f3b8 <tcp_write+0x5c0>
    pcb->unsent = queue;
 801f394:	68fb      	ldr	r3, [r7, #12]
 801f396:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801f398:	66da      	str	r2, [r3, #108]	; 0x6c
 801f39a:	e010      	b.n	801f3be <tcp_write+0x5c6>
 801f39c:	0802dfa8 	.word	0x0802dfa8
 801f3a0:	0802e248 	.word	0x0802e248
 801f3a4:	0802dffc 	.word	0x0802dffc
 801f3a8:	0802e288 	.word	0x0802e288
 801f3ac:	0802e298 	.word	0x0802e298
 801f3b0:	0802e2ac 	.word	0x0802e2ac
 801f3b4:	0802e2e4 	.word	0x0802e2e4
  } else {
    last_unsent->next = queue;
 801f3b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801f3ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801f3bc:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801f3be:	68fb      	ldr	r3, [r7, #12]
 801f3c0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801f3c2:	88fb      	ldrh	r3, [r7, #6]
 801f3c4:	441a      	add	r2, r3
 801f3c6:	68fb      	ldr	r3, [r7, #12]
 801f3c8:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 801f3ca:	68fb      	ldr	r3, [r7, #12]
 801f3cc:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801f3d0:	88fb      	ldrh	r3, [r7, #6]
 801f3d2:	1ad3      	subs	r3, r2, r3
 801f3d4:	b29a      	uxth	r2, r3
 801f3d6:	68fb      	ldr	r3, [r7, #12]
 801f3d8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 801f3dc:	68fb      	ldr	r3, [r7, #12]
 801f3de:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801f3e2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801f3e6:	68fb      	ldr	r3, [r7, #12]
 801f3e8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801f3ec:	2b00      	cmp	r3, #0
 801f3ee:	d00e      	beq.n	801f40e <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 801f3f0:	68fb      	ldr	r3, [r7, #12]
 801f3f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f3f4:	2b00      	cmp	r3, #0
 801f3f6:	d10a      	bne.n	801f40e <tcp_write+0x616>
 801f3f8:	68fb      	ldr	r3, [r7, #12]
 801f3fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801f3fc:	2b00      	cmp	r3, #0
 801f3fe:	d106      	bne.n	801f40e <tcp_write+0x616>
 801f400:	4b2c      	ldr	r3, [pc, #176]	; (801f4b4 <tcp_write+0x6bc>)
 801f402:	f240 3212 	movw	r2, #786	; 0x312
 801f406:	492c      	ldr	r1, [pc, #176]	; (801f4b8 <tcp_write+0x6c0>)
 801f408:	482c      	ldr	r0, [pc, #176]	; (801f4bc <tcp_write+0x6c4>)
 801f40a:	f007 fa5f 	bl	80268cc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801f40e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801f410:	2b00      	cmp	r3, #0
 801f412:	d016      	beq.n	801f442 <tcp_write+0x64a>
 801f414:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801f416:	68db      	ldr	r3, [r3, #12]
 801f418:	2b00      	cmp	r3, #0
 801f41a:	d012      	beq.n	801f442 <tcp_write+0x64a>
 801f41c:	797b      	ldrb	r3, [r7, #5]
 801f41e:	f003 0302 	and.w	r3, r3, #2
 801f422:	2b00      	cmp	r3, #0
 801f424:	d10d      	bne.n	801f442 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801f426:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801f428:	68db      	ldr	r3, [r3, #12]
 801f42a:	899b      	ldrh	r3, [r3, #12]
 801f42c:	b29c      	uxth	r4, r3
 801f42e:	2008      	movs	r0, #8
 801f430:	f7f9 f9ac 	bl	801878c <lwip_htons>
 801f434:	4603      	mov	r3, r0
 801f436:	461a      	mov	r2, r3
 801f438:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801f43a:	68db      	ldr	r3, [r3, #12]
 801f43c:	4322      	orrs	r2, r4
 801f43e:	b292      	uxth	r2, r2
 801f440:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801f442:	2300      	movs	r3, #0
 801f444:	e031      	b.n	801f4aa <tcp_write+0x6b2>
          goto memerr;
 801f446:	bf00      	nop
 801f448:	e006      	b.n	801f458 <tcp_write+0x660>
            goto memerr;
 801f44a:	bf00      	nop
 801f44c:	e004      	b.n	801f458 <tcp_write+0x660>
        goto memerr;
 801f44e:	bf00      	nop
 801f450:	e002      	b.n	801f458 <tcp_write+0x660>
        goto memerr;
 801f452:	bf00      	nop
 801f454:	e000      	b.n	801f458 <tcp_write+0x660>
      goto memerr;
 801f456:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801f458:	68fb      	ldr	r3, [r7, #12]
 801f45a:	8b5b      	ldrh	r3, [r3, #26]
 801f45c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801f460:	b29a      	uxth	r2, r3
 801f462:	68fb      	ldr	r3, [r7, #12]
 801f464:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801f466:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801f468:	2b00      	cmp	r3, #0
 801f46a:	d002      	beq.n	801f472 <tcp_write+0x67a>
    pbuf_free(concat_p);
 801f46c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801f46e:	f7fa fda3 	bl	8019fb8 <pbuf_free>
  }
  if (queue != NULL) {
 801f472:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801f474:	2b00      	cmp	r3, #0
 801f476:	d002      	beq.n	801f47e <tcp_write+0x686>
    tcp_segs_free(queue);
 801f478:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801f47a:	f7fc fb4d 	bl	801bb18 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801f47e:	68fb      	ldr	r3, [r7, #12]
 801f480:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801f484:	2b00      	cmp	r3, #0
 801f486:	d00e      	beq.n	801f4a6 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801f488:	68fb      	ldr	r3, [r7, #12]
 801f48a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f48c:	2b00      	cmp	r3, #0
 801f48e:	d10a      	bne.n	801f4a6 <tcp_write+0x6ae>
 801f490:	68fb      	ldr	r3, [r7, #12]
 801f492:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801f494:	2b00      	cmp	r3, #0
 801f496:	d106      	bne.n	801f4a6 <tcp_write+0x6ae>
 801f498:	4b06      	ldr	r3, [pc, #24]	; (801f4b4 <tcp_write+0x6bc>)
 801f49a:	f240 3227 	movw	r2, #807	; 0x327
 801f49e:	4906      	ldr	r1, [pc, #24]	; (801f4b8 <tcp_write+0x6c0>)
 801f4a0:	4806      	ldr	r0, [pc, #24]	; (801f4bc <tcp_write+0x6c4>)
 801f4a2:	f007 fa13 	bl	80268cc <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801f4a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 801f4aa:	4618      	mov	r0, r3
 801f4ac:	375c      	adds	r7, #92	; 0x5c
 801f4ae:	46bd      	mov	sp, r7
 801f4b0:	bd90      	pop	{r4, r7, pc}
 801f4b2:	bf00      	nop
 801f4b4:	0802dfa8 	.word	0x0802dfa8
 801f4b8:	0802e31c 	.word	0x0802e31c
 801f4bc:	0802dffc 	.word	0x0802dffc

0801f4c0 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801f4c0:	b590      	push	{r4, r7, lr}
 801f4c2:	b08b      	sub	sp, #44	; 0x2c
 801f4c4:	af02      	add	r7, sp, #8
 801f4c6:	6078      	str	r0, [r7, #4]
 801f4c8:	460b      	mov	r3, r1
 801f4ca:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801f4cc:	2300      	movs	r3, #0
 801f4ce:	61fb      	str	r3, [r7, #28]
 801f4d0:	2300      	movs	r3, #0
 801f4d2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801f4d4:	2300      	movs	r3, #0
 801f4d6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801f4d8:	687b      	ldr	r3, [r7, #4]
 801f4da:	2b00      	cmp	r3, #0
 801f4dc:	d106      	bne.n	801f4ec <tcp_split_unsent_seg+0x2c>
 801f4de:	4b95      	ldr	r3, [pc, #596]	; (801f734 <tcp_split_unsent_seg+0x274>)
 801f4e0:	f240 324b 	movw	r2, #843	; 0x34b
 801f4e4:	4994      	ldr	r1, [pc, #592]	; (801f738 <tcp_split_unsent_seg+0x278>)
 801f4e6:	4895      	ldr	r0, [pc, #596]	; (801f73c <tcp_split_unsent_seg+0x27c>)
 801f4e8:	f007 f9f0 	bl	80268cc <iprintf>

  useg = pcb->unsent;
 801f4ec:	687b      	ldr	r3, [r7, #4]
 801f4ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801f4f0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801f4f2:	697b      	ldr	r3, [r7, #20]
 801f4f4:	2b00      	cmp	r3, #0
 801f4f6:	d102      	bne.n	801f4fe <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801f4f8:	f04f 33ff 	mov.w	r3, #4294967295
 801f4fc:	e116      	b.n	801f72c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801f4fe:	887b      	ldrh	r3, [r7, #2]
 801f500:	2b00      	cmp	r3, #0
 801f502:	d109      	bne.n	801f518 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801f504:	4b8b      	ldr	r3, [pc, #556]	; (801f734 <tcp_split_unsent_seg+0x274>)
 801f506:	f240 3253 	movw	r2, #851	; 0x353
 801f50a:	498d      	ldr	r1, [pc, #564]	; (801f740 <tcp_split_unsent_seg+0x280>)
 801f50c:	488b      	ldr	r0, [pc, #556]	; (801f73c <tcp_split_unsent_seg+0x27c>)
 801f50e:	f007 f9dd 	bl	80268cc <iprintf>
    return ERR_VAL;
 801f512:	f06f 0305 	mvn.w	r3, #5
 801f516:	e109      	b.n	801f72c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801f518:	697b      	ldr	r3, [r7, #20]
 801f51a:	891b      	ldrh	r3, [r3, #8]
 801f51c:	887a      	ldrh	r2, [r7, #2]
 801f51e:	429a      	cmp	r2, r3
 801f520:	d301      	bcc.n	801f526 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801f522:	2300      	movs	r3, #0
 801f524:	e102      	b.n	801f72c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801f526:	687b      	ldr	r3, [r7, #4]
 801f528:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801f52a:	887a      	ldrh	r2, [r7, #2]
 801f52c:	429a      	cmp	r2, r3
 801f52e:	d906      	bls.n	801f53e <tcp_split_unsent_seg+0x7e>
 801f530:	4b80      	ldr	r3, [pc, #512]	; (801f734 <tcp_split_unsent_seg+0x274>)
 801f532:	f240 325b 	movw	r2, #859	; 0x35b
 801f536:	4983      	ldr	r1, [pc, #524]	; (801f744 <tcp_split_unsent_seg+0x284>)
 801f538:	4880      	ldr	r0, [pc, #512]	; (801f73c <tcp_split_unsent_seg+0x27c>)
 801f53a:	f007 f9c7 	bl	80268cc <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801f53e:	697b      	ldr	r3, [r7, #20]
 801f540:	891b      	ldrh	r3, [r3, #8]
 801f542:	2b00      	cmp	r3, #0
 801f544:	d106      	bne.n	801f554 <tcp_split_unsent_seg+0x94>
 801f546:	4b7b      	ldr	r3, [pc, #492]	; (801f734 <tcp_split_unsent_seg+0x274>)
 801f548:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801f54c:	497e      	ldr	r1, [pc, #504]	; (801f748 <tcp_split_unsent_seg+0x288>)
 801f54e:	487b      	ldr	r0, [pc, #492]	; (801f73c <tcp_split_unsent_seg+0x27c>)
 801f550:	f007 f9bc 	bl	80268cc <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801f554:	697b      	ldr	r3, [r7, #20]
 801f556:	7a9b      	ldrb	r3, [r3, #10]
 801f558:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801f55a:	7bfb      	ldrb	r3, [r7, #15]
 801f55c:	009b      	lsls	r3, r3, #2
 801f55e:	b2db      	uxtb	r3, r3
 801f560:	f003 0304 	and.w	r3, r3, #4
 801f564:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801f566:	697b      	ldr	r3, [r7, #20]
 801f568:	891a      	ldrh	r2, [r3, #8]
 801f56a:	887b      	ldrh	r3, [r7, #2]
 801f56c:	1ad3      	subs	r3, r2, r3
 801f56e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801f570:	7bbb      	ldrb	r3, [r7, #14]
 801f572:	b29a      	uxth	r2, r3
 801f574:	89bb      	ldrh	r3, [r7, #12]
 801f576:	4413      	add	r3, r2
 801f578:	b29b      	uxth	r3, r3
 801f57a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801f57e:	4619      	mov	r1, r3
 801f580:	2036      	movs	r0, #54	; 0x36
 801f582:	f7fa fa35 	bl	80199f0 <pbuf_alloc>
 801f586:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801f588:	693b      	ldr	r3, [r7, #16]
 801f58a:	2b00      	cmp	r3, #0
 801f58c:	f000 80b7 	beq.w	801f6fe <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801f590:	697b      	ldr	r3, [r7, #20]
 801f592:	685b      	ldr	r3, [r3, #4]
 801f594:	891a      	ldrh	r2, [r3, #8]
 801f596:	697b      	ldr	r3, [r7, #20]
 801f598:	891b      	ldrh	r3, [r3, #8]
 801f59a:	1ad3      	subs	r3, r2, r3
 801f59c:	b29a      	uxth	r2, r3
 801f59e:	887b      	ldrh	r3, [r7, #2]
 801f5a0:	4413      	add	r3, r2
 801f5a2:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801f5a4:	697b      	ldr	r3, [r7, #20]
 801f5a6:	6858      	ldr	r0, [r3, #4]
 801f5a8:	693b      	ldr	r3, [r7, #16]
 801f5aa:	685a      	ldr	r2, [r3, #4]
 801f5ac:	7bbb      	ldrb	r3, [r7, #14]
 801f5ae:	18d1      	adds	r1, r2, r3
 801f5b0:	897b      	ldrh	r3, [r7, #10]
 801f5b2:	89ba      	ldrh	r2, [r7, #12]
 801f5b4:	f7fa ff06 	bl	801a3c4 <pbuf_copy_partial>
 801f5b8:	4603      	mov	r3, r0
 801f5ba:	461a      	mov	r2, r3
 801f5bc:	89bb      	ldrh	r3, [r7, #12]
 801f5be:	4293      	cmp	r3, r2
 801f5c0:	f040 809f 	bne.w	801f702 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801f5c4:	697b      	ldr	r3, [r7, #20]
 801f5c6:	68db      	ldr	r3, [r3, #12]
 801f5c8:	899b      	ldrh	r3, [r3, #12]
 801f5ca:	b29b      	uxth	r3, r3
 801f5cc:	4618      	mov	r0, r3
 801f5ce:	f7f9 f8dd 	bl	801878c <lwip_htons>
 801f5d2:	4603      	mov	r3, r0
 801f5d4:	b2db      	uxtb	r3, r3
 801f5d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801f5da:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801f5dc:	2300      	movs	r3, #0
 801f5de:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801f5e0:	7efb      	ldrb	r3, [r7, #27]
 801f5e2:	f003 0308 	and.w	r3, r3, #8
 801f5e6:	2b00      	cmp	r3, #0
 801f5e8:	d007      	beq.n	801f5fa <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801f5ea:	7efb      	ldrb	r3, [r7, #27]
 801f5ec:	f023 0308 	bic.w	r3, r3, #8
 801f5f0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801f5f2:	7ebb      	ldrb	r3, [r7, #26]
 801f5f4:	f043 0308 	orr.w	r3, r3, #8
 801f5f8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801f5fa:	7efb      	ldrb	r3, [r7, #27]
 801f5fc:	f003 0301 	and.w	r3, r3, #1
 801f600:	2b00      	cmp	r3, #0
 801f602:	d007      	beq.n	801f614 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801f604:	7efb      	ldrb	r3, [r7, #27]
 801f606:	f023 0301 	bic.w	r3, r3, #1
 801f60a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801f60c:	7ebb      	ldrb	r3, [r7, #26]
 801f60e:	f043 0301 	orr.w	r3, r3, #1
 801f612:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801f614:	697b      	ldr	r3, [r7, #20]
 801f616:	68db      	ldr	r3, [r3, #12]
 801f618:	685b      	ldr	r3, [r3, #4]
 801f61a:	4618      	mov	r0, r3
 801f61c:	f7f9 f8cb 	bl	80187b6 <lwip_htonl>
 801f620:	4602      	mov	r2, r0
 801f622:	887b      	ldrh	r3, [r7, #2]
 801f624:	18d1      	adds	r1, r2, r3
 801f626:	7eba      	ldrb	r2, [r7, #26]
 801f628:	7bfb      	ldrb	r3, [r7, #15]
 801f62a:	9300      	str	r3, [sp, #0]
 801f62c:	460b      	mov	r3, r1
 801f62e:	6939      	ldr	r1, [r7, #16]
 801f630:	6878      	ldr	r0, [r7, #4]
 801f632:	f7ff fa4f 	bl	801ead4 <tcp_create_segment>
 801f636:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 801f638:	69fb      	ldr	r3, [r7, #28]
 801f63a:	2b00      	cmp	r3, #0
 801f63c:	d063      	beq.n	801f706 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801f63e:	697b      	ldr	r3, [r7, #20]
 801f640:	685b      	ldr	r3, [r3, #4]
 801f642:	4618      	mov	r0, r3
 801f644:	f7fa fd46 	bl	801a0d4 <pbuf_clen>
 801f648:	4603      	mov	r3, r0
 801f64a:	461a      	mov	r2, r3
 801f64c:	687b      	ldr	r3, [r7, #4]
 801f64e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801f652:	1a9b      	subs	r3, r3, r2
 801f654:	b29a      	uxth	r2, r3
 801f656:	687b      	ldr	r3, [r7, #4]
 801f658:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801f65c:	697b      	ldr	r3, [r7, #20]
 801f65e:	6858      	ldr	r0, [r3, #4]
 801f660:	697b      	ldr	r3, [r7, #20]
 801f662:	685b      	ldr	r3, [r3, #4]
 801f664:	891a      	ldrh	r2, [r3, #8]
 801f666:	89bb      	ldrh	r3, [r7, #12]
 801f668:	1ad3      	subs	r3, r2, r3
 801f66a:	b29b      	uxth	r3, r3
 801f66c:	4619      	mov	r1, r3
 801f66e:	f7fa fb1d 	bl	8019cac <pbuf_realloc>
  useg->len -= remainder;
 801f672:	697b      	ldr	r3, [r7, #20]
 801f674:	891a      	ldrh	r2, [r3, #8]
 801f676:	89bb      	ldrh	r3, [r7, #12]
 801f678:	1ad3      	subs	r3, r2, r3
 801f67a:	b29a      	uxth	r2, r3
 801f67c:	697b      	ldr	r3, [r7, #20]
 801f67e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801f680:	697b      	ldr	r3, [r7, #20]
 801f682:	68db      	ldr	r3, [r3, #12]
 801f684:	899b      	ldrh	r3, [r3, #12]
 801f686:	b29c      	uxth	r4, r3
 801f688:	7efb      	ldrb	r3, [r7, #27]
 801f68a:	b29b      	uxth	r3, r3
 801f68c:	4618      	mov	r0, r3
 801f68e:	f7f9 f87d 	bl	801878c <lwip_htons>
 801f692:	4603      	mov	r3, r0
 801f694:	461a      	mov	r2, r3
 801f696:	697b      	ldr	r3, [r7, #20]
 801f698:	68db      	ldr	r3, [r3, #12]
 801f69a:	4322      	orrs	r2, r4
 801f69c:	b292      	uxth	r2, r2
 801f69e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801f6a0:	697b      	ldr	r3, [r7, #20]
 801f6a2:	685b      	ldr	r3, [r3, #4]
 801f6a4:	4618      	mov	r0, r3
 801f6a6:	f7fa fd15 	bl	801a0d4 <pbuf_clen>
 801f6aa:	4603      	mov	r3, r0
 801f6ac:	461a      	mov	r2, r3
 801f6ae:	687b      	ldr	r3, [r7, #4]
 801f6b0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801f6b4:	4413      	add	r3, r2
 801f6b6:	b29a      	uxth	r2, r3
 801f6b8:	687b      	ldr	r3, [r7, #4]
 801f6ba:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801f6be:	69fb      	ldr	r3, [r7, #28]
 801f6c0:	685b      	ldr	r3, [r3, #4]
 801f6c2:	4618      	mov	r0, r3
 801f6c4:	f7fa fd06 	bl	801a0d4 <pbuf_clen>
 801f6c8:	4603      	mov	r3, r0
 801f6ca:	461a      	mov	r2, r3
 801f6cc:	687b      	ldr	r3, [r7, #4]
 801f6ce:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801f6d2:	4413      	add	r3, r2
 801f6d4:	b29a      	uxth	r2, r3
 801f6d6:	687b      	ldr	r3, [r7, #4]
 801f6d8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801f6dc:	697b      	ldr	r3, [r7, #20]
 801f6de:	681a      	ldr	r2, [r3, #0]
 801f6e0:	69fb      	ldr	r3, [r7, #28]
 801f6e2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801f6e4:	697b      	ldr	r3, [r7, #20]
 801f6e6:	69fa      	ldr	r2, [r7, #28]
 801f6e8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801f6ea:	69fb      	ldr	r3, [r7, #28]
 801f6ec:	681b      	ldr	r3, [r3, #0]
 801f6ee:	2b00      	cmp	r3, #0
 801f6f0:	d103      	bne.n	801f6fa <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801f6f2:	687b      	ldr	r3, [r7, #4]
 801f6f4:	2200      	movs	r2, #0
 801f6f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801f6fa:	2300      	movs	r3, #0
 801f6fc:	e016      	b.n	801f72c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801f6fe:	bf00      	nop
 801f700:	e002      	b.n	801f708 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801f702:	bf00      	nop
 801f704:	e000      	b.n	801f708 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801f706:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801f708:	69fb      	ldr	r3, [r7, #28]
 801f70a:	2b00      	cmp	r3, #0
 801f70c:	d006      	beq.n	801f71c <tcp_split_unsent_seg+0x25c>
 801f70e:	4b09      	ldr	r3, [pc, #36]	; (801f734 <tcp_split_unsent_seg+0x274>)
 801f710:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 801f714:	490d      	ldr	r1, [pc, #52]	; (801f74c <tcp_split_unsent_seg+0x28c>)
 801f716:	4809      	ldr	r0, [pc, #36]	; (801f73c <tcp_split_unsent_seg+0x27c>)
 801f718:	f007 f8d8 	bl	80268cc <iprintf>
  if (p != NULL) {
 801f71c:	693b      	ldr	r3, [r7, #16]
 801f71e:	2b00      	cmp	r3, #0
 801f720:	d002      	beq.n	801f728 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801f722:	6938      	ldr	r0, [r7, #16]
 801f724:	f7fa fc48 	bl	8019fb8 <pbuf_free>
  }

  return ERR_MEM;
 801f728:	f04f 33ff 	mov.w	r3, #4294967295
}
 801f72c:	4618      	mov	r0, r3
 801f72e:	3724      	adds	r7, #36	; 0x24
 801f730:	46bd      	mov	sp, r7
 801f732:	bd90      	pop	{r4, r7, pc}
 801f734:	0802dfa8 	.word	0x0802dfa8
 801f738:	0802e33c 	.word	0x0802e33c
 801f73c:	0802dffc 	.word	0x0802dffc
 801f740:	0802e360 	.word	0x0802e360
 801f744:	0802e384 	.word	0x0802e384
 801f748:	0802e394 	.word	0x0802e394
 801f74c:	0802e3a4 	.word	0x0802e3a4

0801f750 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801f750:	b590      	push	{r4, r7, lr}
 801f752:	b085      	sub	sp, #20
 801f754:	af00      	add	r7, sp, #0
 801f756:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801f758:	687b      	ldr	r3, [r7, #4]
 801f75a:	2b00      	cmp	r3, #0
 801f75c:	d106      	bne.n	801f76c <tcp_send_fin+0x1c>
 801f75e:	4b21      	ldr	r3, [pc, #132]	; (801f7e4 <tcp_send_fin+0x94>)
 801f760:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801f764:	4920      	ldr	r1, [pc, #128]	; (801f7e8 <tcp_send_fin+0x98>)
 801f766:	4821      	ldr	r0, [pc, #132]	; (801f7ec <tcp_send_fin+0x9c>)
 801f768:	f007 f8b0 	bl	80268cc <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801f76c:	687b      	ldr	r3, [r7, #4]
 801f76e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801f770:	2b00      	cmp	r3, #0
 801f772:	d02e      	beq.n	801f7d2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801f774:	687b      	ldr	r3, [r7, #4]
 801f776:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801f778:	60fb      	str	r3, [r7, #12]
 801f77a:	e002      	b.n	801f782 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801f77c:	68fb      	ldr	r3, [r7, #12]
 801f77e:	681b      	ldr	r3, [r3, #0]
 801f780:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801f782:	68fb      	ldr	r3, [r7, #12]
 801f784:	681b      	ldr	r3, [r3, #0]
 801f786:	2b00      	cmp	r3, #0
 801f788:	d1f8      	bne.n	801f77c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801f78a:	68fb      	ldr	r3, [r7, #12]
 801f78c:	68db      	ldr	r3, [r3, #12]
 801f78e:	899b      	ldrh	r3, [r3, #12]
 801f790:	b29b      	uxth	r3, r3
 801f792:	4618      	mov	r0, r3
 801f794:	f7f8 fffa 	bl	801878c <lwip_htons>
 801f798:	4603      	mov	r3, r0
 801f79a:	b2db      	uxtb	r3, r3
 801f79c:	f003 0307 	and.w	r3, r3, #7
 801f7a0:	2b00      	cmp	r3, #0
 801f7a2:	d116      	bne.n	801f7d2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801f7a4:	68fb      	ldr	r3, [r7, #12]
 801f7a6:	68db      	ldr	r3, [r3, #12]
 801f7a8:	899b      	ldrh	r3, [r3, #12]
 801f7aa:	b29c      	uxth	r4, r3
 801f7ac:	2001      	movs	r0, #1
 801f7ae:	f7f8 ffed 	bl	801878c <lwip_htons>
 801f7b2:	4603      	mov	r3, r0
 801f7b4:	461a      	mov	r2, r3
 801f7b6:	68fb      	ldr	r3, [r7, #12]
 801f7b8:	68db      	ldr	r3, [r3, #12]
 801f7ba:	4322      	orrs	r2, r4
 801f7bc:	b292      	uxth	r2, r2
 801f7be:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801f7c0:	687b      	ldr	r3, [r7, #4]
 801f7c2:	8b5b      	ldrh	r3, [r3, #26]
 801f7c4:	f043 0320 	orr.w	r3, r3, #32
 801f7c8:	b29a      	uxth	r2, r3
 801f7ca:	687b      	ldr	r3, [r7, #4]
 801f7cc:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801f7ce:	2300      	movs	r3, #0
 801f7d0:	e004      	b.n	801f7dc <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801f7d2:	2101      	movs	r1, #1
 801f7d4:	6878      	ldr	r0, [r7, #4]
 801f7d6:	f000 f80b 	bl	801f7f0 <tcp_enqueue_flags>
 801f7da:	4603      	mov	r3, r0
}
 801f7dc:	4618      	mov	r0, r3
 801f7de:	3714      	adds	r7, #20
 801f7e0:	46bd      	mov	sp, r7
 801f7e2:	bd90      	pop	{r4, r7, pc}
 801f7e4:	0802dfa8 	.word	0x0802dfa8
 801f7e8:	0802e3b0 	.word	0x0802e3b0
 801f7ec:	0802dffc 	.word	0x0802dffc

0801f7f0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801f7f0:	b580      	push	{r7, lr}
 801f7f2:	b08a      	sub	sp, #40	; 0x28
 801f7f4:	af02      	add	r7, sp, #8
 801f7f6:	6078      	str	r0, [r7, #4]
 801f7f8:	460b      	mov	r3, r1
 801f7fa:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801f7fc:	2300      	movs	r3, #0
 801f7fe:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801f800:	2300      	movs	r3, #0
 801f802:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801f804:	78fb      	ldrb	r3, [r7, #3]
 801f806:	f003 0303 	and.w	r3, r3, #3
 801f80a:	2b00      	cmp	r3, #0
 801f80c:	d106      	bne.n	801f81c <tcp_enqueue_flags+0x2c>
 801f80e:	4b67      	ldr	r3, [pc, #412]	; (801f9ac <tcp_enqueue_flags+0x1bc>)
 801f810:	f240 4211 	movw	r2, #1041	; 0x411
 801f814:	4966      	ldr	r1, [pc, #408]	; (801f9b0 <tcp_enqueue_flags+0x1c0>)
 801f816:	4867      	ldr	r0, [pc, #412]	; (801f9b4 <tcp_enqueue_flags+0x1c4>)
 801f818:	f007 f858 	bl	80268cc <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801f81c:	687b      	ldr	r3, [r7, #4]
 801f81e:	2b00      	cmp	r3, #0
 801f820:	d106      	bne.n	801f830 <tcp_enqueue_flags+0x40>
 801f822:	4b62      	ldr	r3, [pc, #392]	; (801f9ac <tcp_enqueue_flags+0x1bc>)
 801f824:	f240 4213 	movw	r2, #1043	; 0x413
 801f828:	4963      	ldr	r1, [pc, #396]	; (801f9b8 <tcp_enqueue_flags+0x1c8>)
 801f82a:	4862      	ldr	r0, [pc, #392]	; (801f9b4 <tcp_enqueue_flags+0x1c4>)
 801f82c:	f007 f84e 	bl	80268cc <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801f830:	78fb      	ldrb	r3, [r7, #3]
 801f832:	f003 0302 	and.w	r3, r3, #2
 801f836:	2b00      	cmp	r3, #0
 801f838:	d001      	beq.n	801f83e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801f83a:	2301      	movs	r3, #1
 801f83c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801f83e:	7ffb      	ldrb	r3, [r7, #31]
 801f840:	009b      	lsls	r3, r3, #2
 801f842:	b2db      	uxtb	r3, r3
 801f844:	f003 0304 	and.w	r3, r3, #4
 801f848:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801f84a:	7dfb      	ldrb	r3, [r7, #23]
 801f84c:	b29b      	uxth	r3, r3
 801f84e:	f44f 7220 	mov.w	r2, #640	; 0x280
 801f852:	4619      	mov	r1, r3
 801f854:	2036      	movs	r0, #54	; 0x36
 801f856:	f7fa f8cb 	bl	80199f0 <pbuf_alloc>
 801f85a:	6138      	str	r0, [r7, #16]
 801f85c:	693b      	ldr	r3, [r7, #16]
 801f85e:	2b00      	cmp	r3, #0
 801f860:	d109      	bne.n	801f876 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801f862:	687b      	ldr	r3, [r7, #4]
 801f864:	8b5b      	ldrh	r3, [r3, #26]
 801f866:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801f86a:	b29a      	uxth	r2, r3
 801f86c:	687b      	ldr	r3, [r7, #4]
 801f86e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801f870:	f04f 33ff 	mov.w	r3, #4294967295
 801f874:	e095      	b.n	801f9a2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801f876:	693b      	ldr	r3, [r7, #16]
 801f878:	895a      	ldrh	r2, [r3, #10]
 801f87a:	7dfb      	ldrb	r3, [r7, #23]
 801f87c:	b29b      	uxth	r3, r3
 801f87e:	429a      	cmp	r2, r3
 801f880:	d206      	bcs.n	801f890 <tcp_enqueue_flags+0xa0>
 801f882:	4b4a      	ldr	r3, [pc, #296]	; (801f9ac <tcp_enqueue_flags+0x1bc>)
 801f884:	f240 4239 	movw	r2, #1081	; 0x439
 801f888:	494c      	ldr	r1, [pc, #304]	; (801f9bc <tcp_enqueue_flags+0x1cc>)
 801f88a:	484a      	ldr	r0, [pc, #296]	; (801f9b4 <tcp_enqueue_flags+0x1c4>)
 801f88c:	f007 f81e 	bl	80268cc <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801f890:	687b      	ldr	r3, [r7, #4]
 801f892:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801f894:	78fa      	ldrb	r2, [r7, #3]
 801f896:	7ffb      	ldrb	r3, [r7, #31]
 801f898:	9300      	str	r3, [sp, #0]
 801f89a:	460b      	mov	r3, r1
 801f89c:	6939      	ldr	r1, [r7, #16]
 801f89e:	6878      	ldr	r0, [r7, #4]
 801f8a0:	f7ff f918 	bl	801ead4 <tcp_create_segment>
 801f8a4:	60f8      	str	r0, [r7, #12]
 801f8a6:	68fb      	ldr	r3, [r7, #12]
 801f8a8:	2b00      	cmp	r3, #0
 801f8aa:	d109      	bne.n	801f8c0 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801f8ac:	687b      	ldr	r3, [r7, #4]
 801f8ae:	8b5b      	ldrh	r3, [r3, #26]
 801f8b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801f8b4:	b29a      	uxth	r2, r3
 801f8b6:	687b      	ldr	r3, [r7, #4]
 801f8b8:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801f8ba:	f04f 33ff 	mov.w	r3, #4294967295
 801f8be:	e070      	b.n	801f9a2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801f8c0:	68fb      	ldr	r3, [r7, #12]
 801f8c2:	68db      	ldr	r3, [r3, #12]
 801f8c4:	f003 0303 	and.w	r3, r3, #3
 801f8c8:	2b00      	cmp	r3, #0
 801f8ca:	d006      	beq.n	801f8da <tcp_enqueue_flags+0xea>
 801f8cc:	4b37      	ldr	r3, [pc, #220]	; (801f9ac <tcp_enqueue_flags+0x1bc>)
 801f8ce:	f240 4242 	movw	r2, #1090	; 0x442
 801f8d2:	493b      	ldr	r1, [pc, #236]	; (801f9c0 <tcp_enqueue_flags+0x1d0>)
 801f8d4:	4837      	ldr	r0, [pc, #220]	; (801f9b4 <tcp_enqueue_flags+0x1c4>)
 801f8d6:	f006 fff9 	bl	80268cc <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801f8da:	68fb      	ldr	r3, [r7, #12]
 801f8dc:	891b      	ldrh	r3, [r3, #8]
 801f8de:	2b00      	cmp	r3, #0
 801f8e0:	d006      	beq.n	801f8f0 <tcp_enqueue_flags+0x100>
 801f8e2:	4b32      	ldr	r3, [pc, #200]	; (801f9ac <tcp_enqueue_flags+0x1bc>)
 801f8e4:	f240 4243 	movw	r2, #1091	; 0x443
 801f8e8:	4936      	ldr	r1, [pc, #216]	; (801f9c4 <tcp_enqueue_flags+0x1d4>)
 801f8ea:	4832      	ldr	r0, [pc, #200]	; (801f9b4 <tcp_enqueue_flags+0x1c4>)
 801f8ec:	f006 ffee 	bl	80268cc <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801f8f0:	687b      	ldr	r3, [r7, #4]
 801f8f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801f8f4:	2b00      	cmp	r3, #0
 801f8f6:	d103      	bne.n	801f900 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801f8f8:	687b      	ldr	r3, [r7, #4]
 801f8fa:	68fa      	ldr	r2, [r7, #12]
 801f8fc:	66da      	str	r2, [r3, #108]	; 0x6c
 801f8fe:	e00d      	b.n	801f91c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801f900:	687b      	ldr	r3, [r7, #4]
 801f902:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801f904:	61bb      	str	r3, [r7, #24]
 801f906:	e002      	b.n	801f90e <tcp_enqueue_flags+0x11e>
 801f908:	69bb      	ldr	r3, [r7, #24]
 801f90a:	681b      	ldr	r3, [r3, #0]
 801f90c:	61bb      	str	r3, [r7, #24]
 801f90e:	69bb      	ldr	r3, [r7, #24]
 801f910:	681b      	ldr	r3, [r3, #0]
 801f912:	2b00      	cmp	r3, #0
 801f914:	d1f8      	bne.n	801f908 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801f916:	69bb      	ldr	r3, [r7, #24]
 801f918:	68fa      	ldr	r2, [r7, #12]
 801f91a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801f91c:	687b      	ldr	r3, [r7, #4]
 801f91e:	2200      	movs	r2, #0
 801f920:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801f924:	78fb      	ldrb	r3, [r7, #3]
 801f926:	f003 0302 	and.w	r3, r3, #2
 801f92a:	2b00      	cmp	r3, #0
 801f92c:	d104      	bne.n	801f938 <tcp_enqueue_flags+0x148>
 801f92e:	78fb      	ldrb	r3, [r7, #3]
 801f930:	f003 0301 	and.w	r3, r3, #1
 801f934:	2b00      	cmp	r3, #0
 801f936:	d004      	beq.n	801f942 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801f938:	687b      	ldr	r3, [r7, #4]
 801f93a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801f93c:	1c5a      	adds	r2, r3, #1
 801f93e:	687b      	ldr	r3, [r7, #4]
 801f940:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801f942:	78fb      	ldrb	r3, [r7, #3]
 801f944:	f003 0301 	and.w	r3, r3, #1
 801f948:	2b00      	cmp	r3, #0
 801f94a:	d006      	beq.n	801f95a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801f94c:	687b      	ldr	r3, [r7, #4]
 801f94e:	8b5b      	ldrh	r3, [r3, #26]
 801f950:	f043 0320 	orr.w	r3, r3, #32
 801f954:	b29a      	uxth	r2, r3
 801f956:	687b      	ldr	r3, [r7, #4]
 801f958:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801f95a:	68fb      	ldr	r3, [r7, #12]
 801f95c:	685b      	ldr	r3, [r3, #4]
 801f95e:	4618      	mov	r0, r3
 801f960:	f7fa fbb8 	bl	801a0d4 <pbuf_clen>
 801f964:	4603      	mov	r3, r0
 801f966:	461a      	mov	r2, r3
 801f968:	687b      	ldr	r3, [r7, #4]
 801f96a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801f96e:	4413      	add	r3, r2
 801f970:	b29a      	uxth	r2, r3
 801f972:	687b      	ldr	r3, [r7, #4]
 801f974:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801f978:	687b      	ldr	r3, [r7, #4]
 801f97a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801f97e:	2b00      	cmp	r3, #0
 801f980:	d00e      	beq.n	801f9a0 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801f982:	687b      	ldr	r3, [r7, #4]
 801f984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f986:	2b00      	cmp	r3, #0
 801f988:	d10a      	bne.n	801f9a0 <tcp_enqueue_flags+0x1b0>
 801f98a:	687b      	ldr	r3, [r7, #4]
 801f98c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801f98e:	2b00      	cmp	r3, #0
 801f990:	d106      	bne.n	801f9a0 <tcp_enqueue_flags+0x1b0>
 801f992:	4b06      	ldr	r3, [pc, #24]	; (801f9ac <tcp_enqueue_flags+0x1bc>)
 801f994:	f240 4265 	movw	r2, #1125	; 0x465
 801f998:	490b      	ldr	r1, [pc, #44]	; (801f9c8 <tcp_enqueue_flags+0x1d8>)
 801f99a:	4806      	ldr	r0, [pc, #24]	; (801f9b4 <tcp_enqueue_flags+0x1c4>)
 801f99c:	f006 ff96 	bl	80268cc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801f9a0:	2300      	movs	r3, #0
}
 801f9a2:	4618      	mov	r0, r3
 801f9a4:	3720      	adds	r7, #32
 801f9a6:	46bd      	mov	sp, r7
 801f9a8:	bd80      	pop	{r7, pc}
 801f9aa:	bf00      	nop
 801f9ac:	0802dfa8 	.word	0x0802dfa8
 801f9b0:	0802e3cc 	.word	0x0802e3cc
 801f9b4:	0802dffc 	.word	0x0802dffc
 801f9b8:	0802e424 	.word	0x0802e424
 801f9bc:	0802e444 	.word	0x0802e444
 801f9c0:	0802e480 	.word	0x0802e480
 801f9c4:	0802e498 	.word	0x0802e498
 801f9c8:	0802e4c4 	.word	0x0802e4c4

0801f9cc <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801f9cc:	b5b0      	push	{r4, r5, r7, lr}
 801f9ce:	b08a      	sub	sp, #40	; 0x28
 801f9d0:	af00      	add	r7, sp, #0
 801f9d2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801f9d4:	687b      	ldr	r3, [r7, #4]
 801f9d6:	2b00      	cmp	r3, #0
 801f9d8:	d106      	bne.n	801f9e8 <tcp_output+0x1c>
 801f9da:	4b8a      	ldr	r3, [pc, #552]	; (801fc04 <tcp_output+0x238>)
 801f9dc:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801f9e0:	4989      	ldr	r1, [pc, #548]	; (801fc08 <tcp_output+0x23c>)
 801f9e2:	488a      	ldr	r0, [pc, #552]	; (801fc0c <tcp_output+0x240>)
 801f9e4:	f006 ff72 	bl	80268cc <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801f9e8:	687b      	ldr	r3, [r7, #4]
 801f9ea:	7d1b      	ldrb	r3, [r3, #20]
 801f9ec:	2b01      	cmp	r3, #1
 801f9ee:	d106      	bne.n	801f9fe <tcp_output+0x32>
 801f9f0:	4b84      	ldr	r3, [pc, #528]	; (801fc04 <tcp_output+0x238>)
 801f9f2:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801f9f6:	4986      	ldr	r1, [pc, #536]	; (801fc10 <tcp_output+0x244>)
 801f9f8:	4884      	ldr	r0, [pc, #528]	; (801fc0c <tcp_output+0x240>)
 801f9fa:	f006 ff67 	bl	80268cc <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801f9fe:	4b85      	ldr	r3, [pc, #532]	; (801fc14 <tcp_output+0x248>)
 801fa00:	681b      	ldr	r3, [r3, #0]
 801fa02:	687a      	ldr	r2, [r7, #4]
 801fa04:	429a      	cmp	r2, r3
 801fa06:	d101      	bne.n	801fa0c <tcp_output+0x40>
    return ERR_OK;
 801fa08:	2300      	movs	r3, #0
 801fa0a:	e1ce      	b.n	801fdaa <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801fa0c:	687b      	ldr	r3, [r7, #4]
 801fa0e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801fa12:	687b      	ldr	r3, [r7, #4]
 801fa14:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801fa18:	4293      	cmp	r3, r2
 801fa1a:	bf28      	it	cs
 801fa1c:	4613      	movcs	r3, r2
 801fa1e:	b29b      	uxth	r3, r3
 801fa20:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801fa22:	687b      	ldr	r3, [r7, #4]
 801fa24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801fa26:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 801fa28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fa2a:	2b00      	cmp	r3, #0
 801fa2c:	d10b      	bne.n	801fa46 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801fa2e:	687b      	ldr	r3, [r7, #4]
 801fa30:	8b5b      	ldrh	r3, [r3, #26]
 801fa32:	f003 0302 	and.w	r3, r3, #2
 801fa36:	2b00      	cmp	r3, #0
 801fa38:	f000 81aa 	beq.w	801fd90 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801fa3c:	6878      	ldr	r0, [r7, #4]
 801fa3e:	f000 fdcb 	bl	80205d8 <tcp_send_empty_ack>
 801fa42:	4603      	mov	r3, r0
 801fa44:	e1b1      	b.n	801fdaa <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801fa46:	6879      	ldr	r1, [r7, #4]
 801fa48:	687b      	ldr	r3, [r7, #4]
 801fa4a:	3304      	adds	r3, #4
 801fa4c:	461a      	mov	r2, r3
 801fa4e:	6878      	ldr	r0, [r7, #4]
 801fa50:	f7ff f824 	bl	801ea9c <tcp_route>
 801fa54:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801fa56:	697b      	ldr	r3, [r7, #20]
 801fa58:	2b00      	cmp	r3, #0
 801fa5a:	d102      	bne.n	801fa62 <tcp_output+0x96>
    return ERR_RTE;
 801fa5c:	f06f 0303 	mvn.w	r3, #3
 801fa60:	e1a3      	b.n	801fdaa <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801fa62:	687b      	ldr	r3, [r7, #4]
 801fa64:	2b00      	cmp	r3, #0
 801fa66:	d003      	beq.n	801fa70 <tcp_output+0xa4>
 801fa68:	687b      	ldr	r3, [r7, #4]
 801fa6a:	681b      	ldr	r3, [r3, #0]
 801fa6c:	2b00      	cmp	r3, #0
 801fa6e:	d111      	bne.n	801fa94 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801fa70:	697b      	ldr	r3, [r7, #20]
 801fa72:	2b00      	cmp	r3, #0
 801fa74:	d002      	beq.n	801fa7c <tcp_output+0xb0>
 801fa76:	697b      	ldr	r3, [r7, #20]
 801fa78:	3304      	adds	r3, #4
 801fa7a:	e000      	b.n	801fa7e <tcp_output+0xb2>
 801fa7c:	2300      	movs	r3, #0
 801fa7e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801fa80:	693b      	ldr	r3, [r7, #16]
 801fa82:	2b00      	cmp	r3, #0
 801fa84:	d102      	bne.n	801fa8c <tcp_output+0xc0>
      return ERR_RTE;
 801fa86:	f06f 0303 	mvn.w	r3, #3
 801fa8a:	e18e      	b.n	801fdaa <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801fa8c:	693b      	ldr	r3, [r7, #16]
 801fa8e:	681a      	ldr	r2, [r3, #0]
 801fa90:	687b      	ldr	r3, [r7, #4]
 801fa92:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801fa94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fa96:	68db      	ldr	r3, [r3, #12]
 801fa98:	685b      	ldr	r3, [r3, #4]
 801fa9a:	4618      	mov	r0, r3
 801fa9c:	f7f8 fe8b 	bl	80187b6 <lwip_htonl>
 801faa0:	4602      	mov	r2, r0
 801faa2:	687b      	ldr	r3, [r7, #4]
 801faa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801faa6:	1ad3      	subs	r3, r2, r3
 801faa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801faaa:	8912      	ldrh	r2, [r2, #8]
 801faac:	4413      	add	r3, r2
 801faae:	69ba      	ldr	r2, [r7, #24]
 801fab0:	429a      	cmp	r2, r3
 801fab2:	d227      	bcs.n	801fb04 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801fab4:	687b      	ldr	r3, [r7, #4]
 801fab6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801faba:	461a      	mov	r2, r3
 801fabc:	69bb      	ldr	r3, [r7, #24]
 801fabe:	4293      	cmp	r3, r2
 801fac0:	d114      	bne.n	801faec <tcp_output+0x120>
 801fac2:	687b      	ldr	r3, [r7, #4]
 801fac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801fac6:	2b00      	cmp	r3, #0
 801fac8:	d110      	bne.n	801faec <tcp_output+0x120>
 801faca:	687b      	ldr	r3, [r7, #4]
 801facc:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801fad0:	2b00      	cmp	r3, #0
 801fad2:	d10b      	bne.n	801faec <tcp_output+0x120>
      pcb->persist_cnt = 0;
 801fad4:	687b      	ldr	r3, [r7, #4]
 801fad6:	2200      	movs	r2, #0
 801fad8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801fadc:	687b      	ldr	r3, [r7, #4]
 801fade:	2201      	movs	r2, #1
 801fae0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 801fae4:	687b      	ldr	r3, [r7, #4]
 801fae6:	2200      	movs	r2, #0
 801fae8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801faec:	687b      	ldr	r3, [r7, #4]
 801faee:	8b5b      	ldrh	r3, [r3, #26]
 801faf0:	f003 0302 	and.w	r3, r3, #2
 801faf4:	2b00      	cmp	r3, #0
 801faf6:	f000 814d 	beq.w	801fd94 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801fafa:	6878      	ldr	r0, [r7, #4]
 801fafc:	f000 fd6c 	bl	80205d8 <tcp_send_empty_ack>
 801fb00:	4603      	mov	r3, r0
 801fb02:	e152      	b.n	801fdaa <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801fb04:	687b      	ldr	r3, [r7, #4]
 801fb06:	2200      	movs	r2, #0
 801fb08:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801fb0c:	687b      	ldr	r3, [r7, #4]
 801fb0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801fb10:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801fb12:	6a3b      	ldr	r3, [r7, #32]
 801fb14:	2b00      	cmp	r3, #0
 801fb16:	f000 811c 	beq.w	801fd52 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801fb1a:	e002      	b.n	801fb22 <tcp_output+0x156>
 801fb1c:	6a3b      	ldr	r3, [r7, #32]
 801fb1e:	681b      	ldr	r3, [r3, #0]
 801fb20:	623b      	str	r3, [r7, #32]
 801fb22:	6a3b      	ldr	r3, [r7, #32]
 801fb24:	681b      	ldr	r3, [r3, #0]
 801fb26:	2b00      	cmp	r3, #0
 801fb28:	d1f8      	bne.n	801fb1c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801fb2a:	e112      	b.n	801fd52 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801fb2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fb2e:	68db      	ldr	r3, [r3, #12]
 801fb30:	899b      	ldrh	r3, [r3, #12]
 801fb32:	b29b      	uxth	r3, r3
 801fb34:	4618      	mov	r0, r3
 801fb36:	f7f8 fe29 	bl	801878c <lwip_htons>
 801fb3a:	4603      	mov	r3, r0
 801fb3c:	b2db      	uxtb	r3, r3
 801fb3e:	f003 0304 	and.w	r3, r3, #4
 801fb42:	2b00      	cmp	r3, #0
 801fb44:	d006      	beq.n	801fb54 <tcp_output+0x188>
 801fb46:	4b2f      	ldr	r3, [pc, #188]	; (801fc04 <tcp_output+0x238>)
 801fb48:	f240 5236 	movw	r2, #1334	; 0x536
 801fb4c:	4932      	ldr	r1, [pc, #200]	; (801fc18 <tcp_output+0x24c>)
 801fb4e:	482f      	ldr	r0, [pc, #188]	; (801fc0c <tcp_output+0x240>)
 801fb50:	f006 febc 	bl	80268cc <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801fb54:	687b      	ldr	r3, [r7, #4]
 801fb56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801fb58:	2b00      	cmp	r3, #0
 801fb5a:	d01f      	beq.n	801fb9c <tcp_output+0x1d0>
 801fb5c:	687b      	ldr	r3, [r7, #4]
 801fb5e:	8b5b      	ldrh	r3, [r3, #26]
 801fb60:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801fb64:	2b00      	cmp	r3, #0
 801fb66:	d119      	bne.n	801fb9c <tcp_output+0x1d0>
 801fb68:	687b      	ldr	r3, [r7, #4]
 801fb6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801fb6c:	2b00      	cmp	r3, #0
 801fb6e:	d00b      	beq.n	801fb88 <tcp_output+0x1bc>
 801fb70:	687b      	ldr	r3, [r7, #4]
 801fb72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801fb74:	681b      	ldr	r3, [r3, #0]
 801fb76:	2b00      	cmp	r3, #0
 801fb78:	d110      	bne.n	801fb9c <tcp_output+0x1d0>
 801fb7a:	687b      	ldr	r3, [r7, #4]
 801fb7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801fb7e:	891a      	ldrh	r2, [r3, #8]
 801fb80:	687b      	ldr	r3, [r7, #4]
 801fb82:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801fb84:	429a      	cmp	r2, r3
 801fb86:	d209      	bcs.n	801fb9c <tcp_output+0x1d0>
 801fb88:	687b      	ldr	r3, [r7, #4]
 801fb8a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801fb8e:	2b00      	cmp	r3, #0
 801fb90:	d004      	beq.n	801fb9c <tcp_output+0x1d0>
 801fb92:	687b      	ldr	r3, [r7, #4]
 801fb94:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801fb98:	2b08      	cmp	r3, #8
 801fb9a:	d901      	bls.n	801fba0 <tcp_output+0x1d4>
 801fb9c:	2301      	movs	r3, #1
 801fb9e:	e000      	b.n	801fba2 <tcp_output+0x1d6>
 801fba0:	2300      	movs	r3, #0
 801fba2:	2b00      	cmp	r3, #0
 801fba4:	d106      	bne.n	801fbb4 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801fba6:	687b      	ldr	r3, [r7, #4]
 801fba8:	8b5b      	ldrh	r3, [r3, #26]
 801fbaa:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801fbae:	2b00      	cmp	r3, #0
 801fbb0:	f000 80e4 	beq.w	801fd7c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801fbb4:	687b      	ldr	r3, [r7, #4]
 801fbb6:	7d1b      	ldrb	r3, [r3, #20]
 801fbb8:	2b02      	cmp	r3, #2
 801fbba:	d00d      	beq.n	801fbd8 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801fbbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fbbe:	68db      	ldr	r3, [r3, #12]
 801fbc0:	899b      	ldrh	r3, [r3, #12]
 801fbc2:	b29c      	uxth	r4, r3
 801fbc4:	2010      	movs	r0, #16
 801fbc6:	f7f8 fde1 	bl	801878c <lwip_htons>
 801fbca:	4603      	mov	r3, r0
 801fbcc:	461a      	mov	r2, r3
 801fbce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fbd0:	68db      	ldr	r3, [r3, #12]
 801fbd2:	4322      	orrs	r2, r4
 801fbd4:	b292      	uxth	r2, r2
 801fbd6:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801fbd8:	697a      	ldr	r2, [r7, #20]
 801fbda:	6879      	ldr	r1, [r7, #4]
 801fbdc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801fbde:	f000 f909 	bl	801fdf4 <tcp_output_segment>
 801fbe2:	4603      	mov	r3, r0
 801fbe4:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801fbe6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801fbea:	2b00      	cmp	r3, #0
 801fbec:	d016      	beq.n	801fc1c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801fbee:	687b      	ldr	r3, [r7, #4]
 801fbf0:	8b5b      	ldrh	r3, [r3, #26]
 801fbf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801fbf6:	b29a      	uxth	r2, r3
 801fbf8:	687b      	ldr	r3, [r7, #4]
 801fbfa:	835a      	strh	r2, [r3, #26]
      return err;
 801fbfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801fc00:	e0d3      	b.n	801fdaa <tcp_output+0x3de>
 801fc02:	bf00      	nop
 801fc04:	0802dfa8 	.word	0x0802dfa8
 801fc08:	0802e4ec 	.word	0x0802e4ec
 801fc0c:	0802dffc 	.word	0x0802dffc
 801fc10:	0802e504 	.word	0x0802e504
 801fc14:	2001c110 	.word	0x2001c110
 801fc18:	0802e52c 	.word	0x0802e52c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801fc1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fc1e:	681a      	ldr	r2, [r3, #0]
 801fc20:	687b      	ldr	r3, [r7, #4]
 801fc22:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801fc24:	687b      	ldr	r3, [r7, #4]
 801fc26:	7d1b      	ldrb	r3, [r3, #20]
 801fc28:	2b02      	cmp	r3, #2
 801fc2a:	d006      	beq.n	801fc3a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801fc2c:	687b      	ldr	r3, [r7, #4]
 801fc2e:	8b5b      	ldrh	r3, [r3, #26]
 801fc30:	f023 0303 	bic.w	r3, r3, #3
 801fc34:	b29a      	uxth	r2, r3
 801fc36:	687b      	ldr	r3, [r7, #4]
 801fc38:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801fc3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fc3c:	68db      	ldr	r3, [r3, #12]
 801fc3e:	685b      	ldr	r3, [r3, #4]
 801fc40:	4618      	mov	r0, r3
 801fc42:	f7f8 fdb8 	bl	80187b6 <lwip_htonl>
 801fc46:	4604      	mov	r4, r0
 801fc48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fc4a:	891b      	ldrh	r3, [r3, #8]
 801fc4c:	461d      	mov	r5, r3
 801fc4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fc50:	68db      	ldr	r3, [r3, #12]
 801fc52:	899b      	ldrh	r3, [r3, #12]
 801fc54:	b29b      	uxth	r3, r3
 801fc56:	4618      	mov	r0, r3
 801fc58:	f7f8 fd98 	bl	801878c <lwip_htons>
 801fc5c:	4603      	mov	r3, r0
 801fc5e:	b2db      	uxtb	r3, r3
 801fc60:	f003 0303 	and.w	r3, r3, #3
 801fc64:	2b00      	cmp	r3, #0
 801fc66:	d001      	beq.n	801fc6c <tcp_output+0x2a0>
 801fc68:	2301      	movs	r3, #1
 801fc6a:	e000      	b.n	801fc6e <tcp_output+0x2a2>
 801fc6c:	2300      	movs	r3, #0
 801fc6e:	442b      	add	r3, r5
 801fc70:	4423      	add	r3, r4
 801fc72:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801fc74:	687b      	ldr	r3, [r7, #4]
 801fc76:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801fc78:	68bb      	ldr	r3, [r7, #8]
 801fc7a:	1ad3      	subs	r3, r2, r3
 801fc7c:	2b00      	cmp	r3, #0
 801fc7e:	da02      	bge.n	801fc86 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 801fc80:	687b      	ldr	r3, [r7, #4]
 801fc82:	68ba      	ldr	r2, [r7, #8]
 801fc84:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801fc86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fc88:	891b      	ldrh	r3, [r3, #8]
 801fc8a:	461c      	mov	r4, r3
 801fc8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fc8e:	68db      	ldr	r3, [r3, #12]
 801fc90:	899b      	ldrh	r3, [r3, #12]
 801fc92:	b29b      	uxth	r3, r3
 801fc94:	4618      	mov	r0, r3
 801fc96:	f7f8 fd79 	bl	801878c <lwip_htons>
 801fc9a:	4603      	mov	r3, r0
 801fc9c:	b2db      	uxtb	r3, r3
 801fc9e:	f003 0303 	and.w	r3, r3, #3
 801fca2:	2b00      	cmp	r3, #0
 801fca4:	d001      	beq.n	801fcaa <tcp_output+0x2de>
 801fca6:	2301      	movs	r3, #1
 801fca8:	e000      	b.n	801fcac <tcp_output+0x2e0>
 801fcaa:	2300      	movs	r3, #0
 801fcac:	4423      	add	r3, r4
 801fcae:	2b00      	cmp	r3, #0
 801fcb0:	d049      	beq.n	801fd46 <tcp_output+0x37a>
      seg->next = NULL;
 801fcb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fcb4:	2200      	movs	r2, #0
 801fcb6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801fcb8:	687b      	ldr	r3, [r7, #4]
 801fcba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801fcbc:	2b00      	cmp	r3, #0
 801fcbe:	d105      	bne.n	801fccc <tcp_output+0x300>
        pcb->unacked = seg;
 801fcc0:	687b      	ldr	r3, [r7, #4]
 801fcc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801fcc4:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801fcc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fcc8:	623b      	str	r3, [r7, #32]
 801fcca:	e03f      	b.n	801fd4c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801fccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fcce:	68db      	ldr	r3, [r3, #12]
 801fcd0:	685b      	ldr	r3, [r3, #4]
 801fcd2:	4618      	mov	r0, r3
 801fcd4:	f7f8 fd6f 	bl	80187b6 <lwip_htonl>
 801fcd8:	4604      	mov	r4, r0
 801fcda:	6a3b      	ldr	r3, [r7, #32]
 801fcdc:	68db      	ldr	r3, [r3, #12]
 801fcde:	685b      	ldr	r3, [r3, #4]
 801fce0:	4618      	mov	r0, r3
 801fce2:	f7f8 fd68 	bl	80187b6 <lwip_htonl>
 801fce6:	4603      	mov	r3, r0
 801fce8:	1ae3      	subs	r3, r4, r3
 801fcea:	2b00      	cmp	r3, #0
 801fcec:	da24      	bge.n	801fd38 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801fcee:	687b      	ldr	r3, [r7, #4]
 801fcf0:	3370      	adds	r3, #112	; 0x70
 801fcf2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801fcf4:	e002      	b.n	801fcfc <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801fcf6:	69fb      	ldr	r3, [r7, #28]
 801fcf8:	681b      	ldr	r3, [r3, #0]
 801fcfa:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801fcfc:	69fb      	ldr	r3, [r7, #28]
 801fcfe:	681b      	ldr	r3, [r3, #0]
 801fd00:	2b00      	cmp	r3, #0
 801fd02:	d011      	beq.n	801fd28 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801fd04:	69fb      	ldr	r3, [r7, #28]
 801fd06:	681b      	ldr	r3, [r3, #0]
 801fd08:	68db      	ldr	r3, [r3, #12]
 801fd0a:	685b      	ldr	r3, [r3, #4]
 801fd0c:	4618      	mov	r0, r3
 801fd0e:	f7f8 fd52 	bl	80187b6 <lwip_htonl>
 801fd12:	4604      	mov	r4, r0
 801fd14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fd16:	68db      	ldr	r3, [r3, #12]
 801fd18:	685b      	ldr	r3, [r3, #4]
 801fd1a:	4618      	mov	r0, r3
 801fd1c:	f7f8 fd4b 	bl	80187b6 <lwip_htonl>
 801fd20:	4603      	mov	r3, r0
 801fd22:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801fd24:	2b00      	cmp	r3, #0
 801fd26:	dbe6      	blt.n	801fcf6 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 801fd28:	69fb      	ldr	r3, [r7, #28]
 801fd2a:	681a      	ldr	r2, [r3, #0]
 801fd2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fd2e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801fd30:	69fb      	ldr	r3, [r7, #28]
 801fd32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801fd34:	601a      	str	r2, [r3, #0]
 801fd36:	e009      	b.n	801fd4c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801fd38:	6a3b      	ldr	r3, [r7, #32]
 801fd3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801fd3c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801fd3e:	6a3b      	ldr	r3, [r7, #32]
 801fd40:	681b      	ldr	r3, [r3, #0]
 801fd42:	623b      	str	r3, [r7, #32]
 801fd44:	e002      	b.n	801fd4c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801fd46:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801fd48:	f7fb fefb 	bl	801bb42 <tcp_seg_free>
    }
    seg = pcb->unsent;
 801fd4c:	687b      	ldr	r3, [r7, #4]
 801fd4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801fd50:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801fd52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fd54:	2b00      	cmp	r3, #0
 801fd56:	d012      	beq.n	801fd7e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801fd58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fd5a:	68db      	ldr	r3, [r3, #12]
 801fd5c:	685b      	ldr	r3, [r3, #4]
 801fd5e:	4618      	mov	r0, r3
 801fd60:	f7f8 fd29 	bl	80187b6 <lwip_htonl>
 801fd64:	4602      	mov	r2, r0
 801fd66:	687b      	ldr	r3, [r7, #4]
 801fd68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801fd6a:	1ad3      	subs	r3, r2, r3
 801fd6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801fd6e:	8912      	ldrh	r2, [r2, #8]
 801fd70:	4413      	add	r3, r2
  while (seg != NULL &&
 801fd72:	69ba      	ldr	r2, [r7, #24]
 801fd74:	429a      	cmp	r2, r3
 801fd76:	f4bf aed9 	bcs.w	801fb2c <tcp_output+0x160>
 801fd7a:	e000      	b.n	801fd7e <tcp_output+0x3b2>
      break;
 801fd7c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801fd7e:	687b      	ldr	r3, [r7, #4]
 801fd80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801fd82:	2b00      	cmp	r3, #0
 801fd84:	d108      	bne.n	801fd98 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801fd86:	687b      	ldr	r3, [r7, #4]
 801fd88:	2200      	movs	r2, #0
 801fd8a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801fd8e:	e004      	b.n	801fd9a <tcp_output+0x3ce>
    goto output_done;
 801fd90:	bf00      	nop
 801fd92:	e002      	b.n	801fd9a <tcp_output+0x3ce>
    goto output_done;
 801fd94:	bf00      	nop
 801fd96:	e000      	b.n	801fd9a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801fd98:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801fd9a:	687b      	ldr	r3, [r7, #4]
 801fd9c:	8b5b      	ldrh	r3, [r3, #26]
 801fd9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801fda2:	b29a      	uxth	r2, r3
 801fda4:	687b      	ldr	r3, [r7, #4]
 801fda6:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801fda8:	2300      	movs	r3, #0
}
 801fdaa:	4618      	mov	r0, r3
 801fdac:	3728      	adds	r7, #40	; 0x28
 801fdae:	46bd      	mov	sp, r7
 801fdb0:	bdb0      	pop	{r4, r5, r7, pc}
 801fdb2:	bf00      	nop

0801fdb4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801fdb4:	b580      	push	{r7, lr}
 801fdb6:	b082      	sub	sp, #8
 801fdb8:	af00      	add	r7, sp, #0
 801fdba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801fdbc:	687b      	ldr	r3, [r7, #4]
 801fdbe:	2b00      	cmp	r3, #0
 801fdc0:	d106      	bne.n	801fdd0 <tcp_output_segment_busy+0x1c>
 801fdc2:	4b09      	ldr	r3, [pc, #36]	; (801fde8 <tcp_output_segment_busy+0x34>)
 801fdc4:	f240 529a 	movw	r2, #1434	; 0x59a
 801fdc8:	4908      	ldr	r1, [pc, #32]	; (801fdec <tcp_output_segment_busy+0x38>)
 801fdca:	4809      	ldr	r0, [pc, #36]	; (801fdf0 <tcp_output_segment_busy+0x3c>)
 801fdcc:	f006 fd7e 	bl	80268cc <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801fdd0:	687b      	ldr	r3, [r7, #4]
 801fdd2:	685b      	ldr	r3, [r3, #4]
 801fdd4:	7b9b      	ldrb	r3, [r3, #14]
 801fdd6:	2b01      	cmp	r3, #1
 801fdd8:	d001      	beq.n	801fdde <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801fdda:	2301      	movs	r3, #1
 801fddc:	e000      	b.n	801fde0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801fdde:	2300      	movs	r3, #0
}
 801fde0:	4618      	mov	r0, r3
 801fde2:	3708      	adds	r7, #8
 801fde4:	46bd      	mov	sp, r7
 801fde6:	bd80      	pop	{r7, pc}
 801fde8:	0802dfa8 	.word	0x0802dfa8
 801fdec:	0802e544 	.word	0x0802e544
 801fdf0:	0802dffc 	.word	0x0802dffc

0801fdf4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801fdf4:	b5b0      	push	{r4, r5, r7, lr}
 801fdf6:	b08c      	sub	sp, #48	; 0x30
 801fdf8:	af04      	add	r7, sp, #16
 801fdfa:	60f8      	str	r0, [r7, #12]
 801fdfc:	60b9      	str	r1, [r7, #8]
 801fdfe:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801fe00:	68fb      	ldr	r3, [r7, #12]
 801fe02:	2b00      	cmp	r3, #0
 801fe04:	d106      	bne.n	801fe14 <tcp_output_segment+0x20>
 801fe06:	4b63      	ldr	r3, [pc, #396]	; (801ff94 <tcp_output_segment+0x1a0>)
 801fe08:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801fe0c:	4962      	ldr	r1, [pc, #392]	; (801ff98 <tcp_output_segment+0x1a4>)
 801fe0e:	4863      	ldr	r0, [pc, #396]	; (801ff9c <tcp_output_segment+0x1a8>)
 801fe10:	f006 fd5c 	bl	80268cc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801fe14:	68bb      	ldr	r3, [r7, #8]
 801fe16:	2b00      	cmp	r3, #0
 801fe18:	d106      	bne.n	801fe28 <tcp_output_segment+0x34>
 801fe1a:	4b5e      	ldr	r3, [pc, #376]	; (801ff94 <tcp_output_segment+0x1a0>)
 801fe1c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801fe20:	495f      	ldr	r1, [pc, #380]	; (801ffa0 <tcp_output_segment+0x1ac>)
 801fe22:	485e      	ldr	r0, [pc, #376]	; (801ff9c <tcp_output_segment+0x1a8>)
 801fe24:	f006 fd52 	bl	80268cc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801fe28:	687b      	ldr	r3, [r7, #4]
 801fe2a:	2b00      	cmp	r3, #0
 801fe2c:	d106      	bne.n	801fe3c <tcp_output_segment+0x48>
 801fe2e:	4b59      	ldr	r3, [pc, #356]	; (801ff94 <tcp_output_segment+0x1a0>)
 801fe30:	f240 52ba 	movw	r2, #1466	; 0x5ba
 801fe34:	495b      	ldr	r1, [pc, #364]	; (801ffa4 <tcp_output_segment+0x1b0>)
 801fe36:	4859      	ldr	r0, [pc, #356]	; (801ff9c <tcp_output_segment+0x1a8>)
 801fe38:	f006 fd48 	bl	80268cc <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801fe3c:	68f8      	ldr	r0, [r7, #12]
 801fe3e:	f7ff ffb9 	bl	801fdb4 <tcp_output_segment_busy>
 801fe42:	4603      	mov	r3, r0
 801fe44:	2b00      	cmp	r3, #0
 801fe46:	d001      	beq.n	801fe4c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801fe48:	2300      	movs	r3, #0
 801fe4a:	e09f      	b.n	801ff8c <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801fe4c:	68bb      	ldr	r3, [r7, #8]
 801fe4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801fe50:	68fb      	ldr	r3, [r7, #12]
 801fe52:	68dc      	ldr	r4, [r3, #12]
 801fe54:	4610      	mov	r0, r2
 801fe56:	f7f8 fcae 	bl	80187b6 <lwip_htonl>
 801fe5a:	4603      	mov	r3, r0
 801fe5c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801fe5e:	68bb      	ldr	r3, [r7, #8]
 801fe60:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801fe62:	68fb      	ldr	r3, [r7, #12]
 801fe64:	68dc      	ldr	r4, [r3, #12]
 801fe66:	4610      	mov	r0, r2
 801fe68:	f7f8 fc90 	bl	801878c <lwip_htons>
 801fe6c:	4603      	mov	r3, r0
 801fe6e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801fe70:	68bb      	ldr	r3, [r7, #8]
 801fe72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fe74:	68ba      	ldr	r2, [r7, #8]
 801fe76:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801fe78:	441a      	add	r2, r3
 801fe7a:	68bb      	ldr	r3, [r7, #8]
 801fe7c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801fe7e:	68fb      	ldr	r3, [r7, #12]
 801fe80:	68db      	ldr	r3, [r3, #12]
 801fe82:	3314      	adds	r3, #20
 801fe84:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801fe86:	68fb      	ldr	r3, [r7, #12]
 801fe88:	7a9b      	ldrb	r3, [r3, #10]
 801fe8a:	f003 0301 	and.w	r3, r3, #1
 801fe8e:	2b00      	cmp	r3, #0
 801fe90:	d015      	beq.n	801febe <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801fe92:	68bb      	ldr	r3, [r7, #8]
 801fe94:	3304      	adds	r3, #4
 801fe96:	461a      	mov	r2, r3
 801fe98:	6879      	ldr	r1, [r7, #4]
 801fe9a:	f44f 7006 	mov.w	r0, #536	; 0x218
 801fe9e:	f7fc fa33 	bl	801c308 <tcp_eff_send_mss_netif>
 801fea2:	4603      	mov	r3, r0
 801fea4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801fea6:	8b7b      	ldrh	r3, [r7, #26]
 801fea8:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801feac:	4618      	mov	r0, r3
 801feae:	f7f8 fc82 	bl	80187b6 <lwip_htonl>
 801feb2:	4602      	mov	r2, r0
 801feb4:	69fb      	ldr	r3, [r7, #28]
 801feb6:	601a      	str	r2, [r3, #0]
    opts += 1;
 801feb8:	69fb      	ldr	r3, [r7, #28]
 801feba:	3304      	adds	r3, #4
 801febc:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801febe:	68bb      	ldr	r3, [r7, #8]
 801fec0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801fec4:	2b00      	cmp	r3, #0
 801fec6:	da02      	bge.n	801fece <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801fec8:	68bb      	ldr	r3, [r7, #8]
 801feca:	2200      	movs	r2, #0
 801fecc:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801fece:	68bb      	ldr	r3, [r7, #8]
 801fed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801fed2:	2b00      	cmp	r3, #0
 801fed4:	d10c      	bne.n	801fef0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801fed6:	4b34      	ldr	r3, [pc, #208]	; (801ffa8 <tcp_output_segment+0x1b4>)
 801fed8:	681a      	ldr	r2, [r3, #0]
 801feda:	68bb      	ldr	r3, [r7, #8]
 801fedc:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801fede:	68fb      	ldr	r3, [r7, #12]
 801fee0:	68db      	ldr	r3, [r3, #12]
 801fee2:	685b      	ldr	r3, [r3, #4]
 801fee4:	4618      	mov	r0, r3
 801fee6:	f7f8 fc66 	bl	80187b6 <lwip_htonl>
 801feea:	4602      	mov	r2, r0
 801feec:	68bb      	ldr	r3, [r7, #8]
 801feee:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801fef0:	68fb      	ldr	r3, [r7, #12]
 801fef2:	68da      	ldr	r2, [r3, #12]
 801fef4:	68fb      	ldr	r3, [r7, #12]
 801fef6:	685b      	ldr	r3, [r3, #4]
 801fef8:	685b      	ldr	r3, [r3, #4]
 801fefa:	1ad3      	subs	r3, r2, r3
 801fefc:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801fefe:	68fb      	ldr	r3, [r7, #12]
 801ff00:	685b      	ldr	r3, [r3, #4]
 801ff02:	8959      	ldrh	r1, [r3, #10]
 801ff04:	68fb      	ldr	r3, [r7, #12]
 801ff06:	685b      	ldr	r3, [r3, #4]
 801ff08:	8b3a      	ldrh	r2, [r7, #24]
 801ff0a:	1a8a      	subs	r2, r1, r2
 801ff0c:	b292      	uxth	r2, r2
 801ff0e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801ff10:	68fb      	ldr	r3, [r7, #12]
 801ff12:	685b      	ldr	r3, [r3, #4]
 801ff14:	8919      	ldrh	r1, [r3, #8]
 801ff16:	68fb      	ldr	r3, [r7, #12]
 801ff18:	685b      	ldr	r3, [r3, #4]
 801ff1a:	8b3a      	ldrh	r2, [r7, #24]
 801ff1c:	1a8a      	subs	r2, r1, r2
 801ff1e:	b292      	uxth	r2, r2
 801ff20:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801ff22:	68fb      	ldr	r3, [r7, #12]
 801ff24:	685b      	ldr	r3, [r3, #4]
 801ff26:	68fa      	ldr	r2, [r7, #12]
 801ff28:	68d2      	ldr	r2, [r2, #12]
 801ff2a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801ff2c:	68fb      	ldr	r3, [r7, #12]
 801ff2e:	68db      	ldr	r3, [r3, #12]
 801ff30:	2200      	movs	r2, #0
 801ff32:	741a      	strb	r2, [r3, #16]
 801ff34:	2200      	movs	r2, #0
 801ff36:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801ff38:	68fb      	ldr	r3, [r7, #12]
 801ff3a:	68db      	ldr	r3, [r3, #12]
 801ff3c:	f103 0214 	add.w	r2, r3, #20
 801ff40:	68fb      	ldr	r3, [r7, #12]
 801ff42:	7a9b      	ldrb	r3, [r3, #10]
 801ff44:	009b      	lsls	r3, r3, #2
 801ff46:	f003 0304 	and.w	r3, r3, #4
 801ff4a:	4413      	add	r3, r2
 801ff4c:	69fa      	ldr	r2, [r7, #28]
 801ff4e:	429a      	cmp	r2, r3
 801ff50:	d006      	beq.n	801ff60 <tcp_output_segment+0x16c>
 801ff52:	4b10      	ldr	r3, [pc, #64]	; (801ff94 <tcp_output_segment+0x1a0>)
 801ff54:	f240 621c 	movw	r2, #1564	; 0x61c
 801ff58:	4914      	ldr	r1, [pc, #80]	; (801ffac <tcp_output_segment+0x1b8>)
 801ff5a:	4810      	ldr	r0, [pc, #64]	; (801ff9c <tcp_output_segment+0x1a8>)
 801ff5c:	f006 fcb6 	bl	80268cc <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801ff60:	68fb      	ldr	r3, [r7, #12]
 801ff62:	6858      	ldr	r0, [r3, #4]
 801ff64:	68b9      	ldr	r1, [r7, #8]
 801ff66:	68bb      	ldr	r3, [r7, #8]
 801ff68:	1d1c      	adds	r4, r3, #4
 801ff6a:	68bb      	ldr	r3, [r7, #8]
 801ff6c:	7add      	ldrb	r5, [r3, #11]
 801ff6e:	68bb      	ldr	r3, [r7, #8]
 801ff70:	7a9b      	ldrb	r3, [r3, #10]
 801ff72:	687a      	ldr	r2, [r7, #4]
 801ff74:	9202      	str	r2, [sp, #8]
 801ff76:	2206      	movs	r2, #6
 801ff78:	9201      	str	r2, [sp, #4]
 801ff7a:	9300      	str	r3, [sp, #0]
 801ff7c:	462b      	mov	r3, r5
 801ff7e:	4622      	mov	r2, r4
 801ff80:	f004 fc56 	bl	8024830 <ip4_output_if>
 801ff84:	4603      	mov	r3, r0
 801ff86:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801ff88:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801ff8c:	4618      	mov	r0, r3
 801ff8e:	3720      	adds	r7, #32
 801ff90:	46bd      	mov	sp, r7
 801ff92:	bdb0      	pop	{r4, r5, r7, pc}
 801ff94:	0802dfa8 	.word	0x0802dfa8
 801ff98:	0802e56c 	.word	0x0802e56c
 801ff9c:	0802dffc 	.word	0x0802dffc
 801ffa0:	0802e58c 	.word	0x0802e58c
 801ffa4:	0802e5ac 	.word	0x0802e5ac
 801ffa8:	2001c100 	.word	0x2001c100
 801ffac:	0802e5d0 	.word	0x0802e5d0

0801ffb0 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801ffb0:	b5b0      	push	{r4, r5, r7, lr}
 801ffb2:	b084      	sub	sp, #16
 801ffb4:	af00      	add	r7, sp, #0
 801ffb6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801ffb8:	687b      	ldr	r3, [r7, #4]
 801ffba:	2b00      	cmp	r3, #0
 801ffbc:	d106      	bne.n	801ffcc <tcp_rexmit_rto_prepare+0x1c>
 801ffbe:	4b31      	ldr	r3, [pc, #196]	; (8020084 <tcp_rexmit_rto_prepare+0xd4>)
 801ffc0:	f240 6263 	movw	r2, #1635	; 0x663
 801ffc4:	4930      	ldr	r1, [pc, #192]	; (8020088 <tcp_rexmit_rto_prepare+0xd8>)
 801ffc6:	4831      	ldr	r0, [pc, #196]	; (802008c <tcp_rexmit_rto_prepare+0xdc>)
 801ffc8:	f006 fc80 	bl	80268cc <iprintf>

  if (pcb->unacked == NULL) {
 801ffcc:	687b      	ldr	r3, [r7, #4]
 801ffce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ffd0:	2b00      	cmp	r3, #0
 801ffd2:	d102      	bne.n	801ffda <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801ffd4:	f06f 0305 	mvn.w	r3, #5
 801ffd8:	e050      	b.n	802007c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801ffda:	687b      	ldr	r3, [r7, #4]
 801ffdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ffde:	60fb      	str	r3, [r7, #12]
 801ffe0:	e00b      	b.n	801fffa <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801ffe2:	68f8      	ldr	r0, [r7, #12]
 801ffe4:	f7ff fee6 	bl	801fdb4 <tcp_output_segment_busy>
 801ffe8:	4603      	mov	r3, r0
 801ffea:	2b00      	cmp	r3, #0
 801ffec:	d002      	beq.n	801fff4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801ffee:	f06f 0305 	mvn.w	r3, #5
 801fff2:	e043      	b.n	802007c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801fff4:	68fb      	ldr	r3, [r7, #12]
 801fff6:	681b      	ldr	r3, [r3, #0]
 801fff8:	60fb      	str	r3, [r7, #12]
 801fffa:	68fb      	ldr	r3, [r7, #12]
 801fffc:	681b      	ldr	r3, [r3, #0]
 801fffe:	2b00      	cmp	r3, #0
 8020000:	d1ef      	bne.n	801ffe2 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8020002:	68f8      	ldr	r0, [r7, #12]
 8020004:	f7ff fed6 	bl	801fdb4 <tcp_output_segment_busy>
 8020008:	4603      	mov	r3, r0
 802000a:	2b00      	cmp	r3, #0
 802000c:	d002      	beq.n	8020014 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 802000e:	f06f 0305 	mvn.w	r3, #5
 8020012:	e033      	b.n	802007c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8020014:	687b      	ldr	r3, [r7, #4]
 8020016:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8020018:	68fb      	ldr	r3, [r7, #12]
 802001a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 802001c:	687b      	ldr	r3, [r7, #4]
 802001e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8020020:	687b      	ldr	r3, [r7, #4]
 8020022:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8020024:	687b      	ldr	r3, [r7, #4]
 8020026:	2200      	movs	r2, #0
 8020028:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 802002a:	687b      	ldr	r3, [r7, #4]
 802002c:	8b5b      	ldrh	r3, [r3, #26]
 802002e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8020032:	b29a      	uxth	r2, r3
 8020034:	687b      	ldr	r3, [r7, #4]
 8020036:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8020038:	68fb      	ldr	r3, [r7, #12]
 802003a:	68db      	ldr	r3, [r3, #12]
 802003c:	685b      	ldr	r3, [r3, #4]
 802003e:	4618      	mov	r0, r3
 8020040:	f7f8 fbb9 	bl	80187b6 <lwip_htonl>
 8020044:	4604      	mov	r4, r0
 8020046:	68fb      	ldr	r3, [r7, #12]
 8020048:	891b      	ldrh	r3, [r3, #8]
 802004a:	461d      	mov	r5, r3
 802004c:	68fb      	ldr	r3, [r7, #12]
 802004e:	68db      	ldr	r3, [r3, #12]
 8020050:	899b      	ldrh	r3, [r3, #12]
 8020052:	b29b      	uxth	r3, r3
 8020054:	4618      	mov	r0, r3
 8020056:	f7f8 fb99 	bl	801878c <lwip_htons>
 802005a:	4603      	mov	r3, r0
 802005c:	b2db      	uxtb	r3, r3
 802005e:	f003 0303 	and.w	r3, r3, #3
 8020062:	2b00      	cmp	r3, #0
 8020064:	d001      	beq.n	802006a <tcp_rexmit_rto_prepare+0xba>
 8020066:	2301      	movs	r3, #1
 8020068:	e000      	b.n	802006c <tcp_rexmit_rto_prepare+0xbc>
 802006a:	2300      	movs	r3, #0
 802006c:	442b      	add	r3, r5
 802006e:	18e2      	adds	r2, r4, r3
 8020070:	687b      	ldr	r3, [r7, #4]
 8020072:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8020074:	687b      	ldr	r3, [r7, #4]
 8020076:	2200      	movs	r2, #0
 8020078:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 802007a:	2300      	movs	r3, #0
}
 802007c:	4618      	mov	r0, r3
 802007e:	3710      	adds	r7, #16
 8020080:	46bd      	mov	sp, r7
 8020082:	bdb0      	pop	{r4, r5, r7, pc}
 8020084:	0802dfa8 	.word	0x0802dfa8
 8020088:	0802e5e4 	.word	0x0802e5e4
 802008c:	0802dffc 	.word	0x0802dffc

08020090 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8020090:	b580      	push	{r7, lr}
 8020092:	b082      	sub	sp, #8
 8020094:	af00      	add	r7, sp, #0
 8020096:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8020098:	687b      	ldr	r3, [r7, #4]
 802009a:	2b00      	cmp	r3, #0
 802009c:	d106      	bne.n	80200ac <tcp_rexmit_rto_commit+0x1c>
 802009e:	4b0d      	ldr	r3, [pc, #52]	; (80200d4 <tcp_rexmit_rto_commit+0x44>)
 80200a0:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80200a4:	490c      	ldr	r1, [pc, #48]	; (80200d8 <tcp_rexmit_rto_commit+0x48>)
 80200a6:	480d      	ldr	r0, [pc, #52]	; (80200dc <tcp_rexmit_rto_commit+0x4c>)
 80200a8:	f006 fc10 	bl	80268cc <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80200ac:	687b      	ldr	r3, [r7, #4]
 80200ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80200b2:	2bff      	cmp	r3, #255	; 0xff
 80200b4:	d007      	beq.n	80200c6 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80200b6:	687b      	ldr	r3, [r7, #4]
 80200b8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80200bc:	3301      	adds	r3, #1
 80200be:	b2da      	uxtb	r2, r3
 80200c0:	687b      	ldr	r3, [r7, #4]
 80200c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80200c6:	6878      	ldr	r0, [r7, #4]
 80200c8:	f7ff fc80 	bl	801f9cc <tcp_output>
}
 80200cc:	bf00      	nop
 80200ce:	3708      	adds	r7, #8
 80200d0:	46bd      	mov	sp, r7
 80200d2:	bd80      	pop	{r7, pc}
 80200d4:	0802dfa8 	.word	0x0802dfa8
 80200d8:	0802e608 	.word	0x0802e608
 80200dc:	0802dffc 	.word	0x0802dffc

080200e0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80200e0:	b580      	push	{r7, lr}
 80200e2:	b082      	sub	sp, #8
 80200e4:	af00      	add	r7, sp, #0
 80200e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80200e8:	687b      	ldr	r3, [r7, #4]
 80200ea:	2b00      	cmp	r3, #0
 80200ec:	d106      	bne.n	80200fc <tcp_rexmit_rto+0x1c>
 80200ee:	4b0a      	ldr	r3, [pc, #40]	; (8020118 <tcp_rexmit_rto+0x38>)
 80200f0:	f240 62ad 	movw	r2, #1709	; 0x6ad
 80200f4:	4909      	ldr	r1, [pc, #36]	; (802011c <tcp_rexmit_rto+0x3c>)
 80200f6:	480a      	ldr	r0, [pc, #40]	; (8020120 <tcp_rexmit_rto+0x40>)
 80200f8:	f006 fbe8 	bl	80268cc <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80200fc:	6878      	ldr	r0, [r7, #4]
 80200fe:	f7ff ff57 	bl	801ffb0 <tcp_rexmit_rto_prepare>
 8020102:	4603      	mov	r3, r0
 8020104:	2b00      	cmp	r3, #0
 8020106:	d102      	bne.n	802010e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8020108:	6878      	ldr	r0, [r7, #4]
 802010a:	f7ff ffc1 	bl	8020090 <tcp_rexmit_rto_commit>
  }
}
 802010e:	bf00      	nop
 8020110:	3708      	adds	r7, #8
 8020112:	46bd      	mov	sp, r7
 8020114:	bd80      	pop	{r7, pc}
 8020116:	bf00      	nop
 8020118:	0802dfa8 	.word	0x0802dfa8
 802011c:	0802e62c 	.word	0x0802e62c
 8020120:	0802dffc 	.word	0x0802dffc

08020124 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8020124:	b590      	push	{r4, r7, lr}
 8020126:	b085      	sub	sp, #20
 8020128:	af00      	add	r7, sp, #0
 802012a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 802012c:	687b      	ldr	r3, [r7, #4]
 802012e:	2b00      	cmp	r3, #0
 8020130:	d106      	bne.n	8020140 <tcp_rexmit+0x1c>
 8020132:	4b2f      	ldr	r3, [pc, #188]	; (80201f0 <tcp_rexmit+0xcc>)
 8020134:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8020138:	492e      	ldr	r1, [pc, #184]	; (80201f4 <tcp_rexmit+0xd0>)
 802013a:	482f      	ldr	r0, [pc, #188]	; (80201f8 <tcp_rexmit+0xd4>)
 802013c:	f006 fbc6 	bl	80268cc <iprintf>

  if (pcb->unacked == NULL) {
 8020140:	687b      	ldr	r3, [r7, #4]
 8020142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8020144:	2b00      	cmp	r3, #0
 8020146:	d102      	bne.n	802014e <tcp_rexmit+0x2a>
    return ERR_VAL;
 8020148:	f06f 0305 	mvn.w	r3, #5
 802014c:	e04c      	b.n	80201e8 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 802014e:	687b      	ldr	r3, [r7, #4]
 8020150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8020152:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8020154:	68b8      	ldr	r0, [r7, #8]
 8020156:	f7ff fe2d 	bl	801fdb4 <tcp_output_segment_busy>
 802015a:	4603      	mov	r3, r0
 802015c:	2b00      	cmp	r3, #0
 802015e:	d002      	beq.n	8020166 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8020160:	f06f 0305 	mvn.w	r3, #5
 8020164:	e040      	b.n	80201e8 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8020166:	68bb      	ldr	r3, [r7, #8]
 8020168:	681a      	ldr	r2, [r3, #0]
 802016a:	687b      	ldr	r3, [r7, #4]
 802016c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 802016e:	687b      	ldr	r3, [r7, #4]
 8020170:	336c      	adds	r3, #108	; 0x6c
 8020172:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8020174:	e002      	b.n	802017c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8020176:	68fb      	ldr	r3, [r7, #12]
 8020178:	681b      	ldr	r3, [r3, #0]
 802017a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 802017c:	68fb      	ldr	r3, [r7, #12]
 802017e:	681b      	ldr	r3, [r3, #0]
 8020180:	2b00      	cmp	r3, #0
 8020182:	d011      	beq.n	80201a8 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8020184:	68fb      	ldr	r3, [r7, #12]
 8020186:	681b      	ldr	r3, [r3, #0]
 8020188:	68db      	ldr	r3, [r3, #12]
 802018a:	685b      	ldr	r3, [r3, #4]
 802018c:	4618      	mov	r0, r3
 802018e:	f7f8 fb12 	bl	80187b6 <lwip_htonl>
 8020192:	4604      	mov	r4, r0
 8020194:	68bb      	ldr	r3, [r7, #8]
 8020196:	68db      	ldr	r3, [r3, #12]
 8020198:	685b      	ldr	r3, [r3, #4]
 802019a:	4618      	mov	r0, r3
 802019c:	f7f8 fb0b 	bl	80187b6 <lwip_htonl>
 80201a0:	4603      	mov	r3, r0
 80201a2:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80201a4:	2b00      	cmp	r3, #0
 80201a6:	dbe6      	blt.n	8020176 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80201a8:	68fb      	ldr	r3, [r7, #12]
 80201aa:	681a      	ldr	r2, [r3, #0]
 80201ac:	68bb      	ldr	r3, [r7, #8]
 80201ae:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80201b0:	68fb      	ldr	r3, [r7, #12]
 80201b2:	68ba      	ldr	r2, [r7, #8]
 80201b4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80201b6:	68bb      	ldr	r3, [r7, #8]
 80201b8:	681b      	ldr	r3, [r3, #0]
 80201ba:	2b00      	cmp	r3, #0
 80201bc:	d103      	bne.n	80201c6 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80201be:	687b      	ldr	r3, [r7, #4]
 80201c0:	2200      	movs	r2, #0
 80201c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80201c6:	687b      	ldr	r3, [r7, #4]
 80201c8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80201cc:	2bff      	cmp	r3, #255	; 0xff
 80201ce:	d007      	beq.n	80201e0 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80201d0:	687b      	ldr	r3, [r7, #4]
 80201d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80201d6:	3301      	adds	r3, #1
 80201d8:	b2da      	uxtb	r2, r3
 80201da:	687b      	ldr	r3, [r7, #4]
 80201dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80201e0:	687b      	ldr	r3, [r7, #4]
 80201e2:	2200      	movs	r2, #0
 80201e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80201e6:	2300      	movs	r3, #0
}
 80201e8:	4618      	mov	r0, r3
 80201ea:	3714      	adds	r7, #20
 80201ec:	46bd      	mov	sp, r7
 80201ee:	bd90      	pop	{r4, r7, pc}
 80201f0:	0802dfa8 	.word	0x0802dfa8
 80201f4:	0802e648 	.word	0x0802e648
 80201f8:	0802dffc 	.word	0x0802dffc

080201fc <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80201fc:	b580      	push	{r7, lr}
 80201fe:	b082      	sub	sp, #8
 8020200:	af00      	add	r7, sp, #0
 8020202:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8020204:	687b      	ldr	r3, [r7, #4]
 8020206:	2b00      	cmp	r3, #0
 8020208:	d106      	bne.n	8020218 <tcp_rexmit_fast+0x1c>
 802020a:	4b2a      	ldr	r3, [pc, #168]	; (80202b4 <tcp_rexmit_fast+0xb8>)
 802020c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8020210:	4929      	ldr	r1, [pc, #164]	; (80202b8 <tcp_rexmit_fast+0xbc>)
 8020212:	482a      	ldr	r0, [pc, #168]	; (80202bc <tcp_rexmit_fast+0xc0>)
 8020214:	f006 fb5a 	bl	80268cc <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8020218:	687b      	ldr	r3, [r7, #4]
 802021a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802021c:	2b00      	cmp	r3, #0
 802021e:	d044      	beq.n	80202aa <tcp_rexmit_fast+0xae>
 8020220:	687b      	ldr	r3, [r7, #4]
 8020222:	8b5b      	ldrh	r3, [r3, #26]
 8020224:	f003 0304 	and.w	r3, r3, #4
 8020228:	2b00      	cmp	r3, #0
 802022a:	d13e      	bne.n	80202aa <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 802022c:	6878      	ldr	r0, [r7, #4]
 802022e:	f7ff ff79 	bl	8020124 <tcp_rexmit>
 8020232:	4603      	mov	r3, r0
 8020234:	2b00      	cmp	r3, #0
 8020236:	d138      	bne.n	80202aa <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8020238:	687b      	ldr	r3, [r7, #4]
 802023a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 802023e:	687b      	ldr	r3, [r7, #4]
 8020240:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8020244:	4293      	cmp	r3, r2
 8020246:	bf28      	it	cs
 8020248:	4613      	movcs	r3, r2
 802024a:	b29b      	uxth	r3, r3
 802024c:	0fda      	lsrs	r2, r3, #31
 802024e:	4413      	add	r3, r2
 8020250:	105b      	asrs	r3, r3, #1
 8020252:	b29a      	uxth	r2, r3
 8020254:	687b      	ldr	r3, [r7, #4]
 8020256:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 802025a:	687b      	ldr	r3, [r7, #4]
 802025c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8020260:	461a      	mov	r2, r3
 8020262:	687b      	ldr	r3, [r7, #4]
 8020264:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8020266:	005b      	lsls	r3, r3, #1
 8020268:	429a      	cmp	r2, r3
 802026a:	d206      	bcs.n	802027a <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 802026c:	687b      	ldr	r3, [r7, #4]
 802026e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8020270:	005b      	lsls	r3, r3, #1
 8020272:	b29a      	uxth	r2, r3
 8020274:	687b      	ldr	r3, [r7, #4]
 8020276:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 802027a:	687b      	ldr	r3, [r7, #4]
 802027c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8020280:	687b      	ldr	r3, [r7, #4]
 8020282:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8020284:	4619      	mov	r1, r3
 8020286:	0049      	lsls	r1, r1, #1
 8020288:	440b      	add	r3, r1
 802028a:	b29b      	uxth	r3, r3
 802028c:	4413      	add	r3, r2
 802028e:	b29a      	uxth	r2, r3
 8020290:	687b      	ldr	r3, [r7, #4]
 8020292:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8020296:	687b      	ldr	r3, [r7, #4]
 8020298:	8b5b      	ldrh	r3, [r3, #26]
 802029a:	f043 0304 	orr.w	r3, r3, #4
 802029e:	b29a      	uxth	r2, r3
 80202a0:	687b      	ldr	r3, [r7, #4]
 80202a2:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80202a4:	687b      	ldr	r3, [r7, #4]
 80202a6:	2200      	movs	r2, #0
 80202a8:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 80202aa:	bf00      	nop
 80202ac:	3708      	adds	r7, #8
 80202ae:	46bd      	mov	sp, r7
 80202b0:	bd80      	pop	{r7, pc}
 80202b2:	bf00      	nop
 80202b4:	0802dfa8 	.word	0x0802dfa8
 80202b8:	0802e660 	.word	0x0802e660
 80202bc:	0802dffc 	.word	0x0802dffc

080202c0 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80202c0:	b580      	push	{r7, lr}
 80202c2:	b086      	sub	sp, #24
 80202c4:	af00      	add	r7, sp, #0
 80202c6:	60f8      	str	r0, [r7, #12]
 80202c8:	607b      	str	r3, [r7, #4]
 80202ca:	460b      	mov	r3, r1
 80202cc:	817b      	strh	r3, [r7, #10]
 80202ce:	4613      	mov	r3, r2
 80202d0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80202d2:	897a      	ldrh	r2, [r7, #10]
 80202d4:	893b      	ldrh	r3, [r7, #8]
 80202d6:	4413      	add	r3, r2
 80202d8:	b29b      	uxth	r3, r3
 80202da:	3314      	adds	r3, #20
 80202dc:	b29b      	uxth	r3, r3
 80202de:	f44f 7220 	mov.w	r2, #640	; 0x280
 80202e2:	4619      	mov	r1, r3
 80202e4:	2022      	movs	r0, #34	; 0x22
 80202e6:	f7f9 fb83 	bl	80199f0 <pbuf_alloc>
 80202ea:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80202ec:	697b      	ldr	r3, [r7, #20]
 80202ee:	2b00      	cmp	r3, #0
 80202f0:	d04d      	beq.n	802038e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80202f2:	897b      	ldrh	r3, [r7, #10]
 80202f4:	3313      	adds	r3, #19
 80202f6:	697a      	ldr	r2, [r7, #20]
 80202f8:	8952      	ldrh	r2, [r2, #10]
 80202fa:	4293      	cmp	r3, r2
 80202fc:	db06      	blt.n	802030c <tcp_output_alloc_header_common+0x4c>
 80202fe:	4b26      	ldr	r3, [pc, #152]	; (8020398 <tcp_output_alloc_header_common+0xd8>)
 8020300:	f240 7223 	movw	r2, #1827	; 0x723
 8020304:	4925      	ldr	r1, [pc, #148]	; (802039c <tcp_output_alloc_header_common+0xdc>)
 8020306:	4826      	ldr	r0, [pc, #152]	; (80203a0 <tcp_output_alloc_header_common+0xe0>)
 8020308:	f006 fae0 	bl	80268cc <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 802030c:	697b      	ldr	r3, [r7, #20]
 802030e:	685b      	ldr	r3, [r3, #4]
 8020310:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8020312:	8c3b      	ldrh	r3, [r7, #32]
 8020314:	4618      	mov	r0, r3
 8020316:	f7f8 fa39 	bl	801878c <lwip_htons>
 802031a:	4603      	mov	r3, r0
 802031c:	461a      	mov	r2, r3
 802031e:	693b      	ldr	r3, [r7, #16]
 8020320:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8020322:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8020324:	4618      	mov	r0, r3
 8020326:	f7f8 fa31 	bl	801878c <lwip_htons>
 802032a:	4603      	mov	r3, r0
 802032c:	461a      	mov	r2, r3
 802032e:	693b      	ldr	r3, [r7, #16]
 8020330:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8020332:	693b      	ldr	r3, [r7, #16]
 8020334:	687a      	ldr	r2, [r7, #4]
 8020336:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8020338:	68f8      	ldr	r0, [r7, #12]
 802033a:	f7f8 fa3c 	bl	80187b6 <lwip_htonl>
 802033e:	4602      	mov	r2, r0
 8020340:	693b      	ldr	r3, [r7, #16]
 8020342:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8020344:	897b      	ldrh	r3, [r7, #10]
 8020346:	089b      	lsrs	r3, r3, #2
 8020348:	b29b      	uxth	r3, r3
 802034a:	3305      	adds	r3, #5
 802034c:	b29b      	uxth	r3, r3
 802034e:	031b      	lsls	r3, r3, #12
 8020350:	b29a      	uxth	r2, r3
 8020352:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8020356:	b29b      	uxth	r3, r3
 8020358:	4313      	orrs	r3, r2
 802035a:	b29b      	uxth	r3, r3
 802035c:	4618      	mov	r0, r3
 802035e:	f7f8 fa15 	bl	801878c <lwip_htons>
 8020362:	4603      	mov	r3, r0
 8020364:	461a      	mov	r2, r3
 8020366:	693b      	ldr	r3, [r7, #16]
 8020368:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 802036a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 802036c:	4618      	mov	r0, r3
 802036e:	f7f8 fa0d 	bl	801878c <lwip_htons>
 8020372:	4603      	mov	r3, r0
 8020374:	461a      	mov	r2, r3
 8020376:	693b      	ldr	r3, [r7, #16]
 8020378:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 802037a:	693b      	ldr	r3, [r7, #16]
 802037c:	2200      	movs	r2, #0
 802037e:	741a      	strb	r2, [r3, #16]
 8020380:	2200      	movs	r2, #0
 8020382:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8020384:	693b      	ldr	r3, [r7, #16]
 8020386:	2200      	movs	r2, #0
 8020388:	749a      	strb	r2, [r3, #18]
 802038a:	2200      	movs	r2, #0
 802038c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 802038e:	697b      	ldr	r3, [r7, #20]
}
 8020390:	4618      	mov	r0, r3
 8020392:	3718      	adds	r7, #24
 8020394:	46bd      	mov	sp, r7
 8020396:	bd80      	pop	{r7, pc}
 8020398:	0802dfa8 	.word	0x0802dfa8
 802039c:	0802e680 	.word	0x0802e680
 80203a0:	0802dffc 	.word	0x0802dffc

080203a4 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80203a4:	b5b0      	push	{r4, r5, r7, lr}
 80203a6:	b08a      	sub	sp, #40	; 0x28
 80203a8:	af04      	add	r7, sp, #16
 80203aa:	60f8      	str	r0, [r7, #12]
 80203ac:	607b      	str	r3, [r7, #4]
 80203ae:	460b      	mov	r3, r1
 80203b0:	817b      	strh	r3, [r7, #10]
 80203b2:	4613      	mov	r3, r2
 80203b4:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80203b6:	68fb      	ldr	r3, [r7, #12]
 80203b8:	2b00      	cmp	r3, #0
 80203ba:	d106      	bne.n	80203ca <tcp_output_alloc_header+0x26>
 80203bc:	4b15      	ldr	r3, [pc, #84]	; (8020414 <tcp_output_alloc_header+0x70>)
 80203be:	f240 7242 	movw	r2, #1858	; 0x742
 80203c2:	4915      	ldr	r1, [pc, #84]	; (8020418 <tcp_output_alloc_header+0x74>)
 80203c4:	4815      	ldr	r0, [pc, #84]	; (802041c <tcp_output_alloc_header+0x78>)
 80203c6:	f006 fa81 	bl	80268cc <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80203ca:	68fb      	ldr	r3, [r7, #12]
 80203cc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80203ce:	68fb      	ldr	r3, [r7, #12]
 80203d0:	8adb      	ldrh	r3, [r3, #22]
 80203d2:	68fa      	ldr	r2, [r7, #12]
 80203d4:	8b12      	ldrh	r2, [r2, #24]
 80203d6:	68f9      	ldr	r1, [r7, #12]
 80203d8:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 80203da:	893d      	ldrh	r5, [r7, #8]
 80203dc:	897c      	ldrh	r4, [r7, #10]
 80203de:	9103      	str	r1, [sp, #12]
 80203e0:	2110      	movs	r1, #16
 80203e2:	9102      	str	r1, [sp, #8]
 80203e4:	9201      	str	r2, [sp, #4]
 80203e6:	9300      	str	r3, [sp, #0]
 80203e8:	687b      	ldr	r3, [r7, #4]
 80203ea:	462a      	mov	r2, r5
 80203ec:	4621      	mov	r1, r4
 80203ee:	f7ff ff67 	bl	80202c0 <tcp_output_alloc_header_common>
 80203f2:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80203f4:	697b      	ldr	r3, [r7, #20]
 80203f6:	2b00      	cmp	r3, #0
 80203f8:	d006      	beq.n	8020408 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80203fa:	68fb      	ldr	r3, [r7, #12]
 80203fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80203fe:	68fa      	ldr	r2, [r7, #12]
 8020400:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8020402:	441a      	add	r2, r3
 8020404:	68fb      	ldr	r3, [r7, #12]
 8020406:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8020408:	697b      	ldr	r3, [r7, #20]
}
 802040a:	4618      	mov	r0, r3
 802040c:	3718      	adds	r7, #24
 802040e:	46bd      	mov	sp, r7
 8020410:	bdb0      	pop	{r4, r5, r7, pc}
 8020412:	bf00      	nop
 8020414:	0802dfa8 	.word	0x0802dfa8
 8020418:	0802e6b0 	.word	0x0802e6b0
 802041c:	0802dffc 	.word	0x0802dffc

08020420 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8020420:	b580      	push	{r7, lr}
 8020422:	b088      	sub	sp, #32
 8020424:	af00      	add	r7, sp, #0
 8020426:	60f8      	str	r0, [r7, #12]
 8020428:	60b9      	str	r1, [r7, #8]
 802042a:	4611      	mov	r1, r2
 802042c:	461a      	mov	r2, r3
 802042e:	460b      	mov	r3, r1
 8020430:	71fb      	strb	r3, [r7, #7]
 8020432:	4613      	mov	r3, r2
 8020434:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8020436:	2300      	movs	r3, #0
 8020438:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 802043a:	68bb      	ldr	r3, [r7, #8]
 802043c:	2b00      	cmp	r3, #0
 802043e:	d106      	bne.n	802044e <tcp_output_fill_options+0x2e>
 8020440:	4b13      	ldr	r3, [pc, #76]	; (8020490 <tcp_output_fill_options+0x70>)
 8020442:	f240 7256 	movw	r2, #1878	; 0x756
 8020446:	4913      	ldr	r1, [pc, #76]	; (8020494 <tcp_output_fill_options+0x74>)
 8020448:	4813      	ldr	r0, [pc, #76]	; (8020498 <tcp_output_fill_options+0x78>)
 802044a:	f006 fa3f 	bl	80268cc <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 802044e:	68bb      	ldr	r3, [r7, #8]
 8020450:	685b      	ldr	r3, [r3, #4]
 8020452:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8020454:	69bb      	ldr	r3, [r7, #24]
 8020456:	3314      	adds	r3, #20
 8020458:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 802045a:	69bb      	ldr	r3, [r7, #24]
 802045c:	f103 0214 	add.w	r2, r3, #20
 8020460:	8bfb      	ldrh	r3, [r7, #30]
 8020462:	009b      	lsls	r3, r3, #2
 8020464:	4619      	mov	r1, r3
 8020466:	79fb      	ldrb	r3, [r7, #7]
 8020468:	009b      	lsls	r3, r3, #2
 802046a:	f003 0304 	and.w	r3, r3, #4
 802046e:	440b      	add	r3, r1
 8020470:	4413      	add	r3, r2
 8020472:	697a      	ldr	r2, [r7, #20]
 8020474:	429a      	cmp	r2, r3
 8020476:	d006      	beq.n	8020486 <tcp_output_fill_options+0x66>
 8020478:	4b05      	ldr	r3, [pc, #20]	; (8020490 <tcp_output_fill_options+0x70>)
 802047a:	f240 7275 	movw	r2, #1909	; 0x775
 802047e:	4907      	ldr	r1, [pc, #28]	; (802049c <tcp_output_fill_options+0x7c>)
 8020480:	4805      	ldr	r0, [pc, #20]	; (8020498 <tcp_output_fill_options+0x78>)
 8020482:	f006 fa23 	bl	80268cc <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8020486:	bf00      	nop
 8020488:	3720      	adds	r7, #32
 802048a:	46bd      	mov	sp, r7
 802048c:	bd80      	pop	{r7, pc}
 802048e:	bf00      	nop
 8020490:	0802dfa8 	.word	0x0802dfa8
 8020494:	0802e6d8 	.word	0x0802e6d8
 8020498:	0802dffc 	.word	0x0802dffc
 802049c:	0802e5d0 	.word	0x0802e5d0

080204a0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80204a0:	b580      	push	{r7, lr}
 80204a2:	b08a      	sub	sp, #40	; 0x28
 80204a4:	af04      	add	r7, sp, #16
 80204a6:	60f8      	str	r0, [r7, #12]
 80204a8:	60b9      	str	r1, [r7, #8]
 80204aa:	607a      	str	r2, [r7, #4]
 80204ac:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80204ae:	68bb      	ldr	r3, [r7, #8]
 80204b0:	2b00      	cmp	r3, #0
 80204b2:	d106      	bne.n	80204c2 <tcp_output_control_segment+0x22>
 80204b4:	4b1c      	ldr	r3, [pc, #112]	; (8020528 <tcp_output_control_segment+0x88>)
 80204b6:	f240 7287 	movw	r2, #1927	; 0x787
 80204ba:	491c      	ldr	r1, [pc, #112]	; (802052c <tcp_output_control_segment+0x8c>)
 80204bc:	481c      	ldr	r0, [pc, #112]	; (8020530 <tcp_output_control_segment+0x90>)
 80204be:	f006 fa05 	bl	80268cc <iprintf>

  netif = tcp_route(pcb, src, dst);
 80204c2:	683a      	ldr	r2, [r7, #0]
 80204c4:	6879      	ldr	r1, [r7, #4]
 80204c6:	68f8      	ldr	r0, [r7, #12]
 80204c8:	f7fe fae8 	bl	801ea9c <tcp_route>
 80204cc:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80204ce:	693b      	ldr	r3, [r7, #16]
 80204d0:	2b00      	cmp	r3, #0
 80204d2:	d102      	bne.n	80204da <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80204d4:	23fc      	movs	r3, #252	; 0xfc
 80204d6:	75fb      	strb	r3, [r7, #23]
 80204d8:	e01c      	b.n	8020514 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80204da:	68fb      	ldr	r3, [r7, #12]
 80204dc:	2b00      	cmp	r3, #0
 80204de:	d006      	beq.n	80204ee <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80204e0:	68fb      	ldr	r3, [r7, #12]
 80204e2:	7adb      	ldrb	r3, [r3, #11]
 80204e4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80204e6:	68fb      	ldr	r3, [r7, #12]
 80204e8:	7a9b      	ldrb	r3, [r3, #10]
 80204ea:	757b      	strb	r3, [r7, #21]
 80204ec:	e003      	b.n	80204f6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80204ee:	23ff      	movs	r3, #255	; 0xff
 80204f0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80204f2:	2300      	movs	r3, #0
 80204f4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80204f6:	7dba      	ldrb	r2, [r7, #22]
 80204f8:	693b      	ldr	r3, [r7, #16]
 80204fa:	9302      	str	r3, [sp, #8]
 80204fc:	2306      	movs	r3, #6
 80204fe:	9301      	str	r3, [sp, #4]
 8020500:	7d7b      	ldrb	r3, [r7, #21]
 8020502:	9300      	str	r3, [sp, #0]
 8020504:	4613      	mov	r3, r2
 8020506:	683a      	ldr	r2, [r7, #0]
 8020508:	6879      	ldr	r1, [r7, #4]
 802050a:	68b8      	ldr	r0, [r7, #8]
 802050c:	f004 f990 	bl	8024830 <ip4_output_if>
 8020510:	4603      	mov	r3, r0
 8020512:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8020514:	68b8      	ldr	r0, [r7, #8]
 8020516:	f7f9 fd4f 	bl	8019fb8 <pbuf_free>
  return err;
 802051a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 802051e:	4618      	mov	r0, r3
 8020520:	3718      	adds	r7, #24
 8020522:	46bd      	mov	sp, r7
 8020524:	bd80      	pop	{r7, pc}
 8020526:	bf00      	nop
 8020528:	0802dfa8 	.word	0x0802dfa8
 802052c:	0802e700 	.word	0x0802e700
 8020530:	0802dffc 	.word	0x0802dffc

08020534 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8020534:	b590      	push	{r4, r7, lr}
 8020536:	b08b      	sub	sp, #44	; 0x2c
 8020538:	af04      	add	r7, sp, #16
 802053a:	60f8      	str	r0, [r7, #12]
 802053c:	60b9      	str	r1, [r7, #8]
 802053e:	607a      	str	r2, [r7, #4]
 8020540:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8020542:	683b      	ldr	r3, [r7, #0]
 8020544:	2b00      	cmp	r3, #0
 8020546:	d106      	bne.n	8020556 <tcp_rst+0x22>
 8020548:	4b1f      	ldr	r3, [pc, #124]	; (80205c8 <tcp_rst+0x94>)
 802054a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 802054e:	491f      	ldr	r1, [pc, #124]	; (80205cc <tcp_rst+0x98>)
 8020550:	481f      	ldr	r0, [pc, #124]	; (80205d0 <tcp_rst+0x9c>)
 8020552:	f006 f9bb 	bl	80268cc <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8020556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020558:	2b00      	cmp	r3, #0
 802055a:	d106      	bne.n	802056a <tcp_rst+0x36>
 802055c:	4b1a      	ldr	r3, [pc, #104]	; (80205c8 <tcp_rst+0x94>)
 802055e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8020562:	491c      	ldr	r1, [pc, #112]	; (80205d4 <tcp_rst+0xa0>)
 8020564:	481a      	ldr	r0, [pc, #104]	; (80205d0 <tcp_rst+0x9c>)
 8020566:	f006 f9b1 	bl	80268cc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 802056a:	2300      	movs	r3, #0
 802056c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 802056e:	f246 0308 	movw	r3, #24584	; 0x6008
 8020572:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8020574:	7dfb      	ldrb	r3, [r7, #23]
 8020576:	b29c      	uxth	r4, r3
 8020578:	68b8      	ldr	r0, [r7, #8]
 802057a:	f7f8 f91c 	bl	80187b6 <lwip_htonl>
 802057e:	4602      	mov	r2, r0
 8020580:	8abb      	ldrh	r3, [r7, #20]
 8020582:	9303      	str	r3, [sp, #12]
 8020584:	2314      	movs	r3, #20
 8020586:	9302      	str	r3, [sp, #8]
 8020588:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 802058a:	9301      	str	r3, [sp, #4]
 802058c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 802058e:	9300      	str	r3, [sp, #0]
 8020590:	4613      	mov	r3, r2
 8020592:	2200      	movs	r2, #0
 8020594:	4621      	mov	r1, r4
 8020596:	6878      	ldr	r0, [r7, #4]
 8020598:	f7ff fe92 	bl	80202c0 <tcp_output_alloc_header_common>
 802059c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 802059e:	693b      	ldr	r3, [r7, #16]
 80205a0:	2b00      	cmp	r3, #0
 80205a2:	d00c      	beq.n	80205be <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80205a4:	7dfb      	ldrb	r3, [r7, #23]
 80205a6:	2200      	movs	r2, #0
 80205a8:	6939      	ldr	r1, [r7, #16]
 80205aa:	68f8      	ldr	r0, [r7, #12]
 80205ac:	f7ff ff38 	bl	8020420 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80205b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80205b2:	683a      	ldr	r2, [r7, #0]
 80205b4:	6939      	ldr	r1, [r7, #16]
 80205b6:	68f8      	ldr	r0, [r7, #12]
 80205b8:	f7ff ff72 	bl	80204a0 <tcp_output_control_segment>
 80205bc:	e000      	b.n	80205c0 <tcp_rst+0x8c>
    return;
 80205be:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80205c0:	371c      	adds	r7, #28
 80205c2:	46bd      	mov	sp, r7
 80205c4:	bd90      	pop	{r4, r7, pc}
 80205c6:	bf00      	nop
 80205c8:	0802dfa8 	.word	0x0802dfa8
 80205cc:	0802e72c 	.word	0x0802e72c
 80205d0:	0802dffc 	.word	0x0802dffc
 80205d4:	0802e748 	.word	0x0802e748

080205d8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80205d8:	b590      	push	{r4, r7, lr}
 80205da:	b087      	sub	sp, #28
 80205dc:	af00      	add	r7, sp, #0
 80205de:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80205e0:	2300      	movs	r3, #0
 80205e2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80205e4:	2300      	movs	r3, #0
 80205e6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80205e8:	687b      	ldr	r3, [r7, #4]
 80205ea:	2b00      	cmp	r3, #0
 80205ec:	d106      	bne.n	80205fc <tcp_send_empty_ack+0x24>
 80205ee:	4b28      	ldr	r3, [pc, #160]	; (8020690 <tcp_send_empty_ack+0xb8>)
 80205f0:	f240 72ea 	movw	r2, #2026	; 0x7ea
 80205f4:	4927      	ldr	r1, [pc, #156]	; (8020694 <tcp_send_empty_ack+0xbc>)
 80205f6:	4828      	ldr	r0, [pc, #160]	; (8020698 <tcp_send_empty_ack+0xc0>)
 80205f8:	f006 f968 	bl	80268cc <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80205fc:	7dfb      	ldrb	r3, [r7, #23]
 80205fe:	009b      	lsls	r3, r3, #2
 8020600:	b2db      	uxtb	r3, r3
 8020602:	f003 0304 	and.w	r3, r3, #4
 8020606:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8020608:	7d7b      	ldrb	r3, [r7, #21]
 802060a:	b29c      	uxth	r4, r3
 802060c:	687b      	ldr	r3, [r7, #4]
 802060e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8020610:	4618      	mov	r0, r3
 8020612:	f7f8 f8d0 	bl	80187b6 <lwip_htonl>
 8020616:	4603      	mov	r3, r0
 8020618:	2200      	movs	r2, #0
 802061a:	4621      	mov	r1, r4
 802061c:	6878      	ldr	r0, [r7, #4]
 802061e:	f7ff fec1 	bl	80203a4 <tcp_output_alloc_header>
 8020622:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8020624:	693b      	ldr	r3, [r7, #16]
 8020626:	2b00      	cmp	r3, #0
 8020628:	d109      	bne.n	802063e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 802062a:	687b      	ldr	r3, [r7, #4]
 802062c:	8b5b      	ldrh	r3, [r3, #26]
 802062e:	f043 0303 	orr.w	r3, r3, #3
 8020632:	b29a      	uxth	r2, r3
 8020634:	687b      	ldr	r3, [r7, #4]
 8020636:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8020638:	f06f 0301 	mvn.w	r3, #1
 802063c:	e023      	b.n	8020686 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 802063e:	7dbb      	ldrb	r3, [r7, #22]
 8020640:	7dfa      	ldrb	r2, [r7, #23]
 8020642:	6939      	ldr	r1, [r7, #16]
 8020644:	6878      	ldr	r0, [r7, #4]
 8020646:	f7ff feeb 	bl	8020420 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 802064a:	687a      	ldr	r2, [r7, #4]
 802064c:	687b      	ldr	r3, [r7, #4]
 802064e:	3304      	adds	r3, #4
 8020650:	6939      	ldr	r1, [r7, #16]
 8020652:	6878      	ldr	r0, [r7, #4]
 8020654:	f7ff ff24 	bl	80204a0 <tcp_output_control_segment>
 8020658:	4603      	mov	r3, r0
 802065a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 802065c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8020660:	2b00      	cmp	r3, #0
 8020662:	d007      	beq.n	8020674 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8020664:	687b      	ldr	r3, [r7, #4]
 8020666:	8b5b      	ldrh	r3, [r3, #26]
 8020668:	f043 0303 	orr.w	r3, r3, #3
 802066c:	b29a      	uxth	r2, r3
 802066e:	687b      	ldr	r3, [r7, #4]
 8020670:	835a      	strh	r2, [r3, #26]
 8020672:	e006      	b.n	8020682 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8020674:	687b      	ldr	r3, [r7, #4]
 8020676:	8b5b      	ldrh	r3, [r3, #26]
 8020678:	f023 0303 	bic.w	r3, r3, #3
 802067c:	b29a      	uxth	r2, r3
 802067e:	687b      	ldr	r3, [r7, #4]
 8020680:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8020682:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8020686:	4618      	mov	r0, r3
 8020688:	371c      	adds	r7, #28
 802068a:	46bd      	mov	sp, r7
 802068c:	bd90      	pop	{r4, r7, pc}
 802068e:	bf00      	nop
 8020690:	0802dfa8 	.word	0x0802dfa8
 8020694:	0802e764 	.word	0x0802e764
 8020698:	0802dffc 	.word	0x0802dffc

0802069c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 802069c:	b590      	push	{r4, r7, lr}
 802069e:	b087      	sub	sp, #28
 80206a0:	af00      	add	r7, sp, #0
 80206a2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80206a4:	2300      	movs	r3, #0
 80206a6:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80206a8:	687b      	ldr	r3, [r7, #4]
 80206aa:	2b00      	cmp	r3, #0
 80206ac:	d106      	bne.n	80206bc <tcp_keepalive+0x20>
 80206ae:	4b18      	ldr	r3, [pc, #96]	; (8020710 <tcp_keepalive+0x74>)
 80206b0:	f640 0224 	movw	r2, #2084	; 0x824
 80206b4:	4917      	ldr	r1, [pc, #92]	; (8020714 <tcp_keepalive+0x78>)
 80206b6:	4818      	ldr	r0, [pc, #96]	; (8020718 <tcp_keepalive+0x7c>)
 80206b8:	f006 f908 	bl	80268cc <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80206bc:	7dfb      	ldrb	r3, [r7, #23]
 80206be:	b29c      	uxth	r4, r3
 80206c0:	687b      	ldr	r3, [r7, #4]
 80206c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80206c4:	3b01      	subs	r3, #1
 80206c6:	4618      	mov	r0, r3
 80206c8:	f7f8 f875 	bl	80187b6 <lwip_htonl>
 80206cc:	4603      	mov	r3, r0
 80206ce:	2200      	movs	r2, #0
 80206d0:	4621      	mov	r1, r4
 80206d2:	6878      	ldr	r0, [r7, #4]
 80206d4:	f7ff fe66 	bl	80203a4 <tcp_output_alloc_header>
 80206d8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80206da:	693b      	ldr	r3, [r7, #16]
 80206dc:	2b00      	cmp	r3, #0
 80206de:	d102      	bne.n	80206e6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80206e0:	f04f 33ff 	mov.w	r3, #4294967295
 80206e4:	e010      	b.n	8020708 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80206e6:	7dfb      	ldrb	r3, [r7, #23]
 80206e8:	2200      	movs	r2, #0
 80206ea:	6939      	ldr	r1, [r7, #16]
 80206ec:	6878      	ldr	r0, [r7, #4]
 80206ee:	f7ff fe97 	bl	8020420 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80206f2:	687a      	ldr	r2, [r7, #4]
 80206f4:	687b      	ldr	r3, [r7, #4]
 80206f6:	3304      	adds	r3, #4
 80206f8:	6939      	ldr	r1, [r7, #16]
 80206fa:	6878      	ldr	r0, [r7, #4]
 80206fc:	f7ff fed0 	bl	80204a0 <tcp_output_control_segment>
 8020700:	4603      	mov	r3, r0
 8020702:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8020704:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8020708:	4618      	mov	r0, r3
 802070a:	371c      	adds	r7, #28
 802070c:	46bd      	mov	sp, r7
 802070e:	bd90      	pop	{r4, r7, pc}
 8020710:	0802dfa8 	.word	0x0802dfa8
 8020714:	0802e784 	.word	0x0802e784
 8020718:	0802dffc 	.word	0x0802dffc

0802071c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 802071c:	b590      	push	{r4, r7, lr}
 802071e:	b08b      	sub	sp, #44	; 0x2c
 8020720:	af00      	add	r7, sp, #0
 8020722:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8020724:	2300      	movs	r3, #0
 8020726:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 802072a:	687b      	ldr	r3, [r7, #4]
 802072c:	2b00      	cmp	r3, #0
 802072e:	d106      	bne.n	802073e <tcp_zero_window_probe+0x22>
 8020730:	4b4c      	ldr	r3, [pc, #304]	; (8020864 <tcp_zero_window_probe+0x148>)
 8020732:	f640 024f 	movw	r2, #2127	; 0x84f
 8020736:	494c      	ldr	r1, [pc, #304]	; (8020868 <tcp_zero_window_probe+0x14c>)
 8020738:	484c      	ldr	r0, [pc, #304]	; (802086c <tcp_zero_window_probe+0x150>)
 802073a:	f006 f8c7 	bl	80268cc <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 802073e:	687b      	ldr	r3, [r7, #4]
 8020740:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8020742:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8020744:	6a3b      	ldr	r3, [r7, #32]
 8020746:	2b00      	cmp	r3, #0
 8020748:	d101      	bne.n	802074e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 802074a:	2300      	movs	r3, #0
 802074c:	e086      	b.n	802085c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 802074e:	687b      	ldr	r3, [r7, #4]
 8020750:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8020754:	2bff      	cmp	r3, #255	; 0xff
 8020756:	d007      	beq.n	8020768 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8020758:	687b      	ldr	r3, [r7, #4]
 802075a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 802075e:	3301      	adds	r3, #1
 8020760:	b2da      	uxtb	r2, r3
 8020762:	687b      	ldr	r3, [r7, #4]
 8020764:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8020768:	6a3b      	ldr	r3, [r7, #32]
 802076a:	68db      	ldr	r3, [r3, #12]
 802076c:	899b      	ldrh	r3, [r3, #12]
 802076e:	b29b      	uxth	r3, r3
 8020770:	4618      	mov	r0, r3
 8020772:	f7f8 f80b 	bl	801878c <lwip_htons>
 8020776:	4603      	mov	r3, r0
 8020778:	b2db      	uxtb	r3, r3
 802077a:	f003 0301 	and.w	r3, r3, #1
 802077e:	2b00      	cmp	r3, #0
 8020780:	d005      	beq.n	802078e <tcp_zero_window_probe+0x72>
 8020782:	6a3b      	ldr	r3, [r7, #32]
 8020784:	891b      	ldrh	r3, [r3, #8]
 8020786:	2b00      	cmp	r3, #0
 8020788:	d101      	bne.n	802078e <tcp_zero_window_probe+0x72>
 802078a:	2301      	movs	r3, #1
 802078c:	e000      	b.n	8020790 <tcp_zero_window_probe+0x74>
 802078e:	2300      	movs	r3, #0
 8020790:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8020792:	7ffb      	ldrb	r3, [r7, #31]
 8020794:	2b00      	cmp	r3, #0
 8020796:	bf0c      	ite	eq
 8020798:	2301      	moveq	r3, #1
 802079a:	2300      	movne	r3, #0
 802079c:	b2db      	uxtb	r3, r3
 802079e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80207a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80207a4:	b299      	uxth	r1, r3
 80207a6:	6a3b      	ldr	r3, [r7, #32]
 80207a8:	68db      	ldr	r3, [r3, #12]
 80207aa:	685b      	ldr	r3, [r3, #4]
 80207ac:	8bba      	ldrh	r2, [r7, #28]
 80207ae:	6878      	ldr	r0, [r7, #4]
 80207b0:	f7ff fdf8 	bl	80203a4 <tcp_output_alloc_header>
 80207b4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80207b6:	69bb      	ldr	r3, [r7, #24]
 80207b8:	2b00      	cmp	r3, #0
 80207ba:	d102      	bne.n	80207c2 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80207bc:	f04f 33ff 	mov.w	r3, #4294967295
 80207c0:	e04c      	b.n	802085c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80207c2:	69bb      	ldr	r3, [r7, #24]
 80207c4:	685b      	ldr	r3, [r3, #4]
 80207c6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80207c8:	7ffb      	ldrb	r3, [r7, #31]
 80207ca:	2b00      	cmp	r3, #0
 80207cc:	d011      	beq.n	80207f2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80207ce:	697b      	ldr	r3, [r7, #20]
 80207d0:	899b      	ldrh	r3, [r3, #12]
 80207d2:	b29b      	uxth	r3, r3
 80207d4:	b21b      	sxth	r3, r3
 80207d6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80207da:	b21c      	sxth	r4, r3
 80207dc:	2011      	movs	r0, #17
 80207de:	f7f7 ffd5 	bl	801878c <lwip_htons>
 80207e2:	4603      	mov	r3, r0
 80207e4:	b21b      	sxth	r3, r3
 80207e6:	4323      	orrs	r3, r4
 80207e8:	b21b      	sxth	r3, r3
 80207ea:	b29a      	uxth	r2, r3
 80207ec:	697b      	ldr	r3, [r7, #20]
 80207ee:	819a      	strh	r2, [r3, #12]
 80207f0:	e010      	b.n	8020814 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80207f2:	69bb      	ldr	r3, [r7, #24]
 80207f4:	685b      	ldr	r3, [r3, #4]
 80207f6:	3314      	adds	r3, #20
 80207f8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80207fa:	6a3b      	ldr	r3, [r7, #32]
 80207fc:	6858      	ldr	r0, [r3, #4]
 80207fe:	6a3b      	ldr	r3, [r7, #32]
 8020800:	685b      	ldr	r3, [r3, #4]
 8020802:	891a      	ldrh	r2, [r3, #8]
 8020804:	6a3b      	ldr	r3, [r7, #32]
 8020806:	891b      	ldrh	r3, [r3, #8]
 8020808:	1ad3      	subs	r3, r2, r3
 802080a:	b29b      	uxth	r3, r3
 802080c:	2201      	movs	r2, #1
 802080e:	6939      	ldr	r1, [r7, #16]
 8020810:	f7f9 fdd8 	bl	801a3c4 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8020814:	6a3b      	ldr	r3, [r7, #32]
 8020816:	68db      	ldr	r3, [r3, #12]
 8020818:	685b      	ldr	r3, [r3, #4]
 802081a:	4618      	mov	r0, r3
 802081c:	f7f7 ffcb 	bl	80187b6 <lwip_htonl>
 8020820:	4603      	mov	r3, r0
 8020822:	3301      	adds	r3, #1
 8020824:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8020826:	687b      	ldr	r3, [r7, #4]
 8020828:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 802082a:	68fb      	ldr	r3, [r7, #12]
 802082c:	1ad3      	subs	r3, r2, r3
 802082e:	2b00      	cmp	r3, #0
 8020830:	da02      	bge.n	8020838 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8020832:	687b      	ldr	r3, [r7, #4]
 8020834:	68fa      	ldr	r2, [r7, #12]
 8020836:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8020838:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802083c:	2200      	movs	r2, #0
 802083e:	69b9      	ldr	r1, [r7, #24]
 8020840:	6878      	ldr	r0, [r7, #4]
 8020842:	f7ff fded 	bl	8020420 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8020846:	687a      	ldr	r2, [r7, #4]
 8020848:	687b      	ldr	r3, [r7, #4]
 802084a:	3304      	adds	r3, #4
 802084c:	69b9      	ldr	r1, [r7, #24]
 802084e:	6878      	ldr	r0, [r7, #4]
 8020850:	f7ff fe26 	bl	80204a0 <tcp_output_control_segment>
 8020854:	4603      	mov	r3, r0
 8020856:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8020858:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 802085c:	4618      	mov	r0, r3
 802085e:	372c      	adds	r7, #44	; 0x2c
 8020860:	46bd      	mov	sp, r7
 8020862:	bd90      	pop	{r4, r7, pc}
 8020864:	0802dfa8 	.word	0x0802dfa8
 8020868:	0802e7a0 	.word	0x0802e7a0
 802086c:	0802dffc 	.word	0x0802dffc

08020870 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8020870:	b580      	push	{r7, lr}
 8020872:	b082      	sub	sp, #8
 8020874:	af00      	add	r7, sp, #0
 8020876:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8020878:	f7f9 fef6 	bl	801a668 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 802087c:	4b0a      	ldr	r3, [pc, #40]	; (80208a8 <tcpip_tcp_timer+0x38>)
 802087e:	681b      	ldr	r3, [r3, #0]
 8020880:	2b00      	cmp	r3, #0
 8020882:	d103      	bne.n	802088c <tcpip_tcp_timer+0x1c>
 8020884:	4b09      	ldr	r3, [pc, #36]	; (80208ac <tcpip_tcp_timer+0x3c>)
 8020886:	681b      	ldr	r3, [r3, #0]
 8020888:	2b00      	cmp	r3, #0
 802088a:	d005      	beq.n	8020898 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 802088c:	2200      	movs	r2, #0
 802088e:	4908      	ldr	r1, [pc, #32]	; (80208b0 <tcpip_tcp_timer+0x40>)
 8020890:	20fa      	movs	r0, #250	; 0xfa
 8020892:	f000 f8f3 	bl	8020a7c <sys_timeout>
 8020896:	e003      	b.n	80208a0 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8020898:	4b06      	ldr	r3, [pc, #24]	; (80208b4 <tcpip_tcp_timer+0x44>)
 802089a:	2200      	movs	r2, #0
 802089c:	601a      	str	r2, [r3, #0]
  }
}
 802089e:	bf00      	nop
 80208a0:	bf00      	nop
 80208a2:	3708      	adds	r7, #8
 80208a4:	46bd      	mov	sp, r7
 80208a6:	bd80      	pop	{r7, pc}
 80208a8:	2001c0fc 	.word	0x2001c0fc
 80208ac:	2001c10c 	.word	0x2001c10c
 80208b0:	08020871 	.word	0x08020871
 80208b4:	20013c68 	.word	0x20013c68

080208b8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80208b8:	b580      	push	{r7, lr}
 80208ba:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80208bc:	4b0a      	ldr	r3, [pc, #40]	; (80208e8 <tcp_timer_needed+0x30>)
 80208be:	681b      	ldr	r3, [r3, #0]
 80208c0:	2b00      	cmp	r3, #0
 80208c2:	d10f      	bne.n	80208e4 <tcp_timer_needed+0x2c>
 80208c4:	4b09      	ldr	r3, [pc, #36]	; (80208ec <tcp_timer_needed+0x34>)
 80208c6:	681b      	ldr	r3, [r3, #0]
 80208c8:	2b00      	cmp	r3, #0
 80208ca:	d103      	bne.n	80208d4 <tcp_timer_needed+0x1c>
 80208cc:	4b08      	ldr	r3, [pc, #32]	; (80208f0 <tcp_timer_needed+0x38>)
 80208ce:	681b      	ldr	r3, [r3, #0]
 80208d0:	2b00      	cmp	r3, #0
 80208d2:	d007      	beq.n	80208e4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80208d4:	4b04      	ldr	r3, [pc, #16]	; (80208e8 <tcp_timer_needed+0x30>)
 80208d6:	2201      	movs	r2, #1
 80208d8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80208da:	2200      	movs	r2, #0
 80208dc:	4905      	ldr	r1, [pc, #20]	; (80208f4 <tcp_timer_needed+0x3c>)
 80208de:	20fa      	movs	r0, #250	; 0xfa
 80208e0:	f000 f8cc 	bl	8020a7c <sys_timeout>
  }
}
 80208e4:	bf00      	nop
 80208e6:	bd80      	pop	{r7, pc}
 80208e8:	20013c68 	.word	0x20013c68
 80208ec:	2001c0fc 	.word	0x2001c0fc
 80208f0:	2001c10c 	.word	0x2001c10c
 80208f4:	08020871 	.word	0x08020871

080208f8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80208f8:	b580      	push	{r7, lr}
 80208fa:	b086      	sub	sp, #24
 80208fc:	af00      	add	r7, sp, #0
 80208fe:	60f8      	str	r0, [r7, #12]
 8020900:	60b9      	str	r1, [r7, #8]
 8020902:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8020904:	200a      	movs	r0, #10
 8020906:	f7f8 fc55 	bl	80191b4 <memp_malloc>
 802090a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 802090c:	693b      	ldr	r3, [r7, #16]
 802090e:	2b00      	cmp	r3, #0
 8020910:	d109      	bne.n	8020926 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8020912:	693b      	ldr	r3, [r7, #16]
 8020914:	2b00      	cmp	r3, #0
 8020916:	d151      	bne.n	80209bc <sys_timeout_abs+0xc4>
 8020918:	4b2a      	ldr	r3, [pc, #168]	; (80209c4 <sys_timeout_abs+0xcc>)
 802091a:	22be      	movs	r2, #190	; 0xbe
 802091c:	492a      	ldr	r1, [pc, #168]	; (80209c8 <sys_timeout_abs+0xd0>)
 802091e:	482b      	ldr	r0, [pc, #172]	; (80209cc <sys_timeout_abs+0xd4>)
 8020920:	f005 ffd4 	bl	80268cc <iprintf>
    return;
 8020924:	e04a      	b.n	80209bc <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8020926:	693b      	ldr	r3, [r7, #16]
 8020928:	2200      	movs	r2, #0
 802092a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 802092c:	693b      	ldr	r3, [r7, #16]
 802092e:	68ba      	ldr	r2, [r7, #8]
 8020930:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8020932:	693b      	ldr	r3, [r7, #16]
 8020934:	687a      	ldr	r2, [r7, #4]
 8020936:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8020938:	693b      	ldr	r3, [r7, #16]
 802093a:	68fa      	ldr	r2, [r7, #12]
 802093c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 802093e:	4b24      	ldr	r3, [pc, #144]	; (80209d0 <sys_timeout_abs+0xd8>)
 8020940:	681b      	ldr	r3, [r3, #0]
 8020942:	2b00      	cmp	r3, #0
 8020944:	d103      	bne.n	802094e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8020946:	4a22      	ldr	r2, [pc, #136]	; (80209d0 <sys_timeout_abs+0xd8>)
 8020948:	693b      	ldr	r3, [r7, #16]
 802094a:	6013      	str	r3, [r2, #0]
    return;
 802094c:	e037      	b.n	80209be <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 802094e:	693b      	ldr	r3, [r7, #16]
 8020950:	685a      	ldr	r2, [r3, #4]
 8020952:	4b1f      	ldr	r3, [pc, #124]	; (80209d0 <sys_timeout_abs+0xd8>)
 8020954:	681b      	ldr	r3, [r3, #0]
 8020956:	685b      	ldr	r3, [r3, #4]
 8020958:	1ad3      	subs	r3, r2, r3
 802095a:	0fdb      	lsrs	r3, r3, #31
 802095c:	f003 0301 	and.w	r3, r3, #1
 8020960:	b2db      	uxtb	r3, r3
 8020962:	2b00      	cmp	r3, #0
 8020964:	d007      	beq.n	8020976 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8020966:	4b1a      	ldr	r3, [pc, #104]	; (80209d0 <sys_timeout_abs+0xd8>)
 8020968:	681a      	ldr	r2, [r3, #0]
 802096a:	693b      	ldr	r3, [r7, #16]
 802096c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 802096e:	4a18      	ldr	r2, [pc, #96]	; (80209d0 <sys_timeout_abs+0xd8>)
 8020970:	693b      	ldr	r3, [r7, #16]
 8020972:	6013      	str	r3, [r2, #0]
 8020974:	e023      	b.n	80209be <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8020976:	4b16      	ldr	r3, [pc, #88]	; (80209d0 <sys_timeout_abs+0xd8>)
 8020978:	681b      	ldr	r3, [r3, #0]
 802097a:	617b      	str	r3, [r7, #20]
 802097c:	e01a      	b.n	80209b4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 802097e:	697b      	ldr	r3, [r7, #20]
 8020980:	681b      	ldr	r3, [r3, #0]
 8020982:	2b00      	cmp	r3, #0
 8020984:	d00b      	beq.n	802099e <sys_timeout_abs+0xa6>
 8020986:	693b      	ldr	r3, [r7, #16]
 8020988:	685a      	ldr	r2, [r3, #4]
 802098a:	697b      	ldr	r3, [r7, #20]
 802098c:	681b      	ldr	r3, [r3, #0]
 802098e:	685b      	ldr	r3, [r3, #4]
 8020990:	1ad3      	subs	r3, r2, r3
 8020992:	0fdb      	lsrs	r3, r3, #31
 8020994:	f003 0301 	and.w	r3, r3, #1
 8020998:	b2db      	uxtb	r3, r3
 802099a:	2b00      	cmp	r3, #0
 802099c:	d007      	beq.n	80209ae <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 802099e:	697b      	ldr	r3, [r7, #20]
 80209a0:	681a      	ldr	r2, [r3, #0]
 80209a2:	693b      	ldr	r3, [r7, #16]
 80209a4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80209a6:	697b      	ldr	r3, [r7, #20]
 80209a8:	693a      	ldr	r2, [r7, #16]
 80209aa:	601a      	str	r2, [r3, #0]
        break;
 80209ac:	e007      	b.n	80209be <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80209ae:	697b      	ldr	r3, [r7, #20]
 80209b0:	681b      	ldr	r3, [r3, #0]
 80209b2:	617b      	str	r3, [r7, #20]
 80209b4:	697b      	ldr	r3, [r7, #20]
 80209b6:	2b00      	cmp	r3, #0
 80209b8:	d1e1      	bne.n	802097e <sys_timeout_abs+0x86>
 80209ba:	e000      	b.n	80209be <sys_timeout_abs+0xc6>
    return;
 80209bc:	bf00      	nop
      }
    }
  }
}
 80209be:	3718      	adds	r7, #24
 80209c0:	46bd      	mov	sp, r7
 80209c2:	bd80      	pop	{r7, pc}
 80209c4:	0802e7c4 	.word	0x0802e7c4
 80209c8:	0802e7f8 	.word	0x0802e7f8
 80209cc:	0802e838 	.word	0x0802e838
 80209d0:	20013c60 	.word	0x20013c60

080209d4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80209d4:	b580      	push	{r7, lr}
 80209d6:	b086      	sub	sp, #24
 80209d8:	af00      	add	r7, sp, #0
 80209da:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80209dc:	687b      	ldr	r3, [r7, #4]
 80209de:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80209e0:	697b      	ldr	r3, [r7, #20]
 80209e2:	685b      	ldr	r3, [r3, #4]
 80209e4:	4798      	blx	r3

  now = sys_now();
 80209e6:	f7f0 ffdd 	bl	80119a4 <sys_now>
 80209ea:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80209ec:	697b      	ldr	r3, [r7, #20]
 80209ee:	681a      	ldr	r2, [r3, #0]
 80209f0:	4b0f      	ldr	r3, [pc, #60]	; (8020a30 <lwip_cyclic_timer+0x5c>)
 80209f2:	681b      	ldr	r3, [r3, #0]
 80209f4:	4413      	add	r3, r2
 80209f6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80209f8:	68fa      	ldr	r2, [r7, #12]
 80209fa:	693b      	ldr	r3, [r7, #16]
 80209fc:	1ad3      	subs	r3, r2, r3
 80209fe:	0fdb      	lsrs	r3, r3, #31
 8020a00:	f003 0301 	and.w	r3, r3, #1
 8020a04:	b2db      	uxtb	r3, r3
 8020a06:	2b00      	cmp	r3, #0
 8020a08:	d009      	beq.n	8020a1e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8020a0a:	697b      	ldr	r3, [r7, #20]
 8020a0c:	681a      	ldr	r2, [r3, #0]
 8020a0e:	693b      	ldr	r3, [r7, #16]
 8020a10:	4413      	add	r3, r2
 8020a12:	687a      	ldr	r2, [r7, #4]
 8020a14:	4907      	ldr	r1, [pc, #28]	; (8020a34 <lwip_cyclic_timer+0x60>)
 8020a16:	4618      	mov	r0, r3
 8020a18:	f7ff ff6e 	bl	80208f8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8020a1c:	e004      	b.n	8020a28 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8020a1e:	687a      	ldr	r2, [r7, #4]
 8020a20:	4904      	ldr	r1, [pc, #16]	; (8020a34 <lwip_cyclic_timer+0x60>)
 8020a22:	68f8      	ldr	r0, [r7, #12]
 8020a24:	f7ff ff68 	bl	80208f8 <sys_timeout_abs>
}
 8020a28:	bf00      	nop
 8020a2a:	3718      	adds	r7, #24
 8020a2c:	46bd      	mov	sp, r7
 8020a2e:	bd80      	pop	{r7, pc}
 8020a30:	20013c64 	.word	0x20013c64
 8020a34:	080209d5 	.word	0x080209d5

08020a38 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8020a38:	b580      	push	{r7, lr}
 8020a3a:	b082      	sub	sp, #8
 8020a3c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8020a3e:	2301      	movs	r3, #1
 8020a40:	607b      	str	r3, [r7, #4]
 8020a42:	e00e      	b.n	8020a62 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8020a44:	4a0b      	ldr	r2, [pc, #44]	; (8020a74 <sys_timeouts_init+0x3c>)
 8020a46:	687b      	ldr	r3, [r7, #4]
 8020a48:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8020a4c:	687b      	ldr	r3, [r7, #4]
 8020a4e:	00db      	lsls	r3, r3, #3
 8020a50:	4a08      	ldr	r2, [pc, #32]	; (8020a74 <sys_timeouts_init+0x3c>)
 8020a52:	4413      	add	r3, r2
 8020a54:	461a      	mov	r2, r3
 8020a56:	4908      	ldr	r1, [pc, #32]	; (8020a78 <sys_timeouts_init+0x40>)
 8020a58:	f000 f810 	bl	8020a7c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8020a5c:	687b      	ldr	r3, [r7, #4]
 8020a5e:	3301      	adds	r3, #1
 8020a60:	607b      	str	r3, [r7, #4]
 8020a62:	687b      	ldr	r3, [r7, #4]
 8020a64:	2b04      	cmp	r3, #4
 8020a66:	d9ed      	bls.n	8020a44 <sys_timeouts_init+0xc>
  }
}
 8020a68:	bf00      	nop
 8020a6a:	bf00      	nop
 8020a6c:	3708      	adds	r7, #8
 8020a6e:	46bd      	mov	sp, r7
 8020a70:	bd80      	pop	{r7, pc}
 8020a72:	bf00      	nop
 8020a74:	08030dfc 	.word	0x08030dfc
 8020a78:	080209d5 	.word	0x080209d5

08020a7c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8020a7c:	b580      	push	{r7, lr}
 8020a7e:	b086      	sub	sp, #24
 8020a80:	af00      	add	r7, sp, #0
 8020a82:	60f8      	str	r0, [r7, #12]
 8020a84:	60b9      	str	r1, [r7, #8]
 8020a86:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8020a88:	68fb      	ldr	r3, [r7, #12]
 8020a8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8020a8e:	d306      	bcc.n	8020a9e <sys_timeout+0x22>
 8020a90:	4b0a      	ldr	r3, [pc, #40]	; (8020abc <sys_timeout+0x40>)
 8020a92:	f240 1229 	movw	r2, #297	; 0x129
 8020a96:	490a      	ldr	r1, [pc, #40]	; (8020ac0 <sys_timeout+0x44>)
 8020a98:	480a      	ldr	r0, [pc, #40]	; (8020ac4 <sys_timeout+0x48>)
 8020a9a:	f005 ff17 	bl	80268cc <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8020a9e:	f7f0 ff81 	bl	80119a4 <sys_now>
 8020aa2:	4602      	mov	r2, r0
 8020aa4:	68fb      	ldr	r3, [r7, #12]
 8020aa6:	4413      	add	r3, r2
 8020aa8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8020aaa:	687a      	ldr	r2, [r7, #4]
 8020aac:	68b9      	ldr	r1, [r7, #8]
 8020aae:	6978      	ldr	r0, [r7, #20]
 8020ab0:	f7ff ff22 	bl	80208f8 <sys_timeout_abs>
#endif
}
 8020ab4:	bf00      	nop
 8020ab6:	3718      	adds	r7, #24
 8020ab8:	46bd      	mov	sp, r7
 8020aba:	bd80      	pop	{r7, pc}
 8020abc:	0802e7c4 	.word	0x0802e7c4
 8020ac0:	0802e860 	.word	0x0802e860
 8020ac4:	0802e838 	.word	0x0802e838

08020ac8 <sys_untimeout>:
 * @param handler callback function that would be called by the timeout
 * @param arg callback argument that would be passed to handler
*/
void
sys_untimeout(sys_timeout_handler handler, void *arg)
{
 8020ac8:	b580      	push	{r7, lr}
 8020aca:	b084      	sub	sp, #16
 8020acc:	af00      	add	r7, sp, #0
 8020ace:	6078      	str	r0, [r7, #4]
 8020ad0:	6039      	str	r1, [r7, #0]
  struct sys_timeo *prev_t, *t;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8020ad2:	4b19      	ldr	r3, [pc, #100]	; (8020b38 <sys_untimeout+0x70>)
 8020ad4:	681b      	ldr	r3, [r3, #0]
 8020ad6:	2b00      	cmp	r3, #0
 8020ad8:	d029      	beq.n	8020b2e <sys_untimeout+0x66>
    return;
  }

  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 8020ada:	4b17      	ldr	r3, [pc, #92]	; (8020b38 <sys_untimeout+0x70>)
 8020adc:	681b      	ldr	r3, [r3, #0]
 8020ade:	60bb      	str	r3, [r7, #8]
 8020ae0:	2300      	movs	r3, #0
 8020ae2:	60fb      	str	r3, [r7, #12]
 8020ae4:	e01f      	b.n	8020b26 <sys_untimeout+0x5e>
    if ((t->h == handler) && (t->arg == arg)) {
 8020ae6:	68bb      	ldr	r3, [r7, #8]
 8020ae8:	689b      	ldr	r3, [r3, #8]
 8020aea:	687a      	ldr	r2, [r7, #4]
 8020aec:	429a      	cmp	r2, r3
 8020aee:	d115      	bne.n	8020b1c <sys_untimeout+0x54>
 8020af0:	68bb      	ldr	r3, [r7, #8]
 8020af2:	68db      	ldr	r3, [r3, #12]
 8020af4:	683a      	ldr	r2, [r7, #0]
 8020af6:	429a      	cmp	r2, r3
 8020af8:	d110      	bne.n	8020b1c <sys_untimeout+0x54>
      /* We have a match */
      /* Unlink from previous in list */
      if (prev_t == NULL) {
 8020afa:	68fb      	ldr	r3, [r7, #12]
 8020afc:	2b00      	cmp	r3, #0
 8020afe:	d104      	bne.n	8020b0a <sys_untimeout+0x42>
        next_timeout = t->next;
 8020b00:	68bb      	ldr	r3, [r7, #8]
 8020b02:	681b      	ldr	r3, [r3, #0]
 8020b04:	4a0c      	ldr	r2, [pc, #48]	; (8020b38 <sys_untimeout+0x70>)
 8020b06:	6013      	str	r3, [r2, #0]
 8020b08:	e003      	b.n	8020b12 <sys_untimeout+0x4a>
      } else {
        prev_t->next = t->next;
 8020b0a:	68bb      	ldr	r3, [r7, #8]
 8020b0c:	681a      	ldr	r2, [r3, #0]
 8020b0e:	68fb      	ldr	r3, [r7, #12]
 8020b10:	601a      	str	r2, [r3, #0]
      }
      memp_free(MEMP_SYS_TIMEOUT, t);
 8020b12:	68b9      	ldr	r1, [r7, #8]
 8020b14:	200a      	movs	r0, #10
 8020b16:	f7f8 fb9f 	bl	8019258 <memp_free>
      return;
 8020b1a:	e009      	b.n	8020b30 <sys_untimeout+0x68>
  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 8020b1c:	68bb      	ldr	r3, [r7, #8]
 8020b1e:	60fb      	str	r3, [r7, #12]
 8020b20:	68bb      	ldr	r3, [r7, #8]
 8020b22:	681b      	ldr	r3, [r3, #0]
 8020b24:	60bb      	str	r3, [r7, #8]
 8020b26:	68bb      	ldr	r3, [r7, #8]
 8020b28:	2b00      	cmp	r3, #0
 8020b2a:	d1dc      	bne.n	8020ae6 <sys_untimeout+0x1e>
    }
  }
  return;
 8020b2c:	e000      	b.n	8020b30 <sys_untimeout+0x68>
    return;
 8020b2e:	bf00      	nop
}
 8020b30:	3710      	adds	r7, #16
 8020b32:	46bd      	mov	sp, r7
 8020b34:	bd80      	pop	{r7, pc}
 8020b36:	bf00      	nop
 8020b38:	20013c60 	.word	0x20013c60

08020b3c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8020b3c:	b580      	push	{r7, lr}
 8020b3e:	b084      	sub	sp, #16
 8020b40:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8020b42:	f7f0 ff2f 	bl	80119a4 <sys_now>
 8020b46:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8020b48:	4b17      	ldr	r3, [pc, #92]	; (8020ba8 <sys_check_timeouts+0x6c>)
 8020b4a:	681b      	ldr	r3, [r3, #0]
 8020b4c:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8020b4e:	68bb      	ldr	r3, [r7, #8]
 8020b50:	2b00      	cmp	r3, #0
 8020b52:	d022      	beq.n	8020b9a <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8020b54:	68bb      	ldr	r3, [r7, #8]
 8020b56:	685b      	ldr	r3, [r3, #4]
 8020b58:	68fa      	ldr	r2, [r7, #12]
 8020b5a:	1ad3      	subs	r3, r2, r3
 8020b5c:	0fdb      	lsrs	r3, r3, #31
 8020b5e:	f003 0301 	and.w	r3, r3, #1
 8020b62:	b2db      	uxtb	r3, r3
 8020b64:	2b00      	cmp	r3, #0
 8020b66:	d11a      	bne.n	8020b9e <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8020b68:	68bb      	ldr	r3, [r7, #8]
 8020b6a:	681b      	ldr	r3, [r3, #0]
 8020b6c:	4a0e      	ldr	r2, [pc, #56]	; (8020ba8 <sys_check_timeouts+0x6c>)
 8020b6e:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8020b70:	68bb      	ldr	r3, [r7, #8]
 8020b72:	689b      	ldr	r3, [r3, #8]
 8020b74:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8020b76:	68bb      	ldr	r3, [r7, #8]
 8020b78:	68db      	ldr	r3, [r3, #12]
 8020b7a:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8020b7c:	68bb      	ldr	r3, [r7, #8]
 8020b7e:	685b      	ldr	r3, [r3, #4]
 8020b80:	4a0a      	ldr	r2, [pc, #40]	; (8020bac <sys_check_timeouts+0x70>)
 8020b82:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8020b84:	68b9      	ldr	r1, [r7, #8]
 8020b86:	200a      	movs	r0, #10
 8020b88:	f7f8 fb66 	bl	8019258 <memp_free>
    if (handler != NULL) {
 8020b8c:	687b      	ldr	r3, [r7, #4]
 8020b8e:	2b00      	cmp	r3, #0
 8020b90:	d0da      	beq.n	8020b48 <sys_check_timeouts+0xc>
      handler(arg);
 8020b92:	687b      	ldr	r3, [r7, #4]
 8020b94:	6838      	ldr	r0, [r7, #0]
 8020b96:	4798      	blx	r3
  do {
 8020b98:	e7d6      	b.n	8020b48 <sys_check_timeouts+0xc>
      return;
 8020b9a:	bf00      	nop
 8020b9c:	e000      	b.n	8020ba0 <sys_check_timeouts+0x64>
      return;
 8020b9e:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8020ba0:	3710      	adds	r7, #16
 8020ba2:	46bd      	mov	sp, r7
 8020ba4:	bd80      	pop	{r7, pc}
 8020ba6:	bf00      	nop
 8020ba8:	20013c60 	.word	0x20013c60
 8020bac:	20013c64 	.word	0x20013c64

08020bb0 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8020bb0:	b580      	push	{r7, lr}
 8020bb2:	b082      	sub	sp, #8
 8020bb4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8020bb6:	4b16      	ldr	r3, [pc, #88]	; (8020c10 <sys_timeouts_sleeptime+0x60>)
 8020bb8:	681b      	ldr	r3, [r3, #0]
 8020bba:	2b00      	cmp	r3, #0
 8020bbc:	d102      	bne.n	8020bc4 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8020bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8020bc2:	e020      	b.n	8020c06 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8020bc4:	f7f0 feee 	bl	80119a4 <sys_now>
 8020bc8:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8020bca:	4b11      	ldr	r3, [pc, #68]	; (8020c10 <sys_timeouts_sleeptime+0x60>)
 8020bcc:	681b      	ldr	r3, [r3, #0]
 8020bce:	685a      	ldr	r2, [r3, #4]
 8020bd0:	687b      	ldr	r3, [r7, #4]
 8020bd2:	1ad3      	subs	r3, r2, r3
 8020bd4:	0fdb      	lsrs	r3, r3, #31
 8020bd6:	f003 0301 	and.w	r3, r3, #1
 8020bda:	b2db      	uxtb	r3, r3
 8020bdc:	2b00      	cmp	r3, #0
 8020bde:	d001      	beq.n	8020be4 <sys_timeouts_sleeptime+0x34>
    return 0;
 8020be0:	2300      	movs	r3, #0
 8020be2:	e010      	b.n	8020c06 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8020be4:	4b0a      	ldr	r3, [pc, #40]	; (8020c10 <sys_timeouts_sleeptime+0x60>)
 8020be6:	681b      	ldr	r3, [r3, #0]
 8020be8:	685a      	ldr	r2, [r3, #4]
 8020bea:	687b      	ldr	r3, [r7, #4]
 8020bec:	1ad3      	subs	r3, r2, r3
 8020bee:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8020bf0:	683b      	ldr	r3, [r7, #0]
 8020bf2:	2b00      	cmp	r3, #0
 8020bf4:	da06      	bge.n	8020c04 <sys_timeouts_sleeptime+0x54>
 8020bf6:	4b07      	ldr	r3, [pc, #28]	; (8020c14 <sys_timeouts_sleeptime+0x64>)
 8020bf8:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8020bfc:	4906      	ldr	r1, [pc, #24]	; (8020c18 <sys_timeouts_sleeptime+0x68>)
 8020bfe:	4807      	ldr	r0, [pc, #28]	; (8020c1c <sys_timeouts_sleeptime+0x6c>)
 8020c00:	f005 fe64 	bl	80268cc <iprintf>
    return ret;
 8020c04:	683b      	ldr	r3, [r7, #0]
  }
}
 8020c06:	4618      	mov	r0, r3
 8020c08:	3708      	adds	r7, #8
 8020c0a:	46bd      	mov	sp, r7
 8020c0c:	bd80      	pop	{r7, pc}
 8020c0e:	bf00      	nop
 8020c10:	20013c60 	.word	0x20013c60
 8020c14:	0802e7c4 	.word	0x0802e7c4
 8020c18:	0802e898 	.word	0x0802e898
 8020c1c:	0802e838 	.word	0x0802e838

08020c20 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8020c20:	b580      	push	{r7, lr}
 8020c22:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8020c24:	f005 fee0 	bl	80269e8 <rand>
 8020c28:	4603      	mov	r3, r0
 8020c2a:	b29b      	uxth	r3, r3
 8020c2c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8020c30:	b29b      	uxth	r3, r3
 8020c32:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8020c36:	b29a      	uxth	r2, r3
 8020c38:	4b01      	ldr	r3, [pc, #4]	; (8020c40 <udp_init+0x20>)
 8020c3a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8020c3c:	bf00      	nop
 8020c3e:	bd80      	pop	{r7, pc}
 8020c40:	10000068 	.word	0x10000068

08020c44 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8020c44:	b480      	push	{r7}
 8020c46:	b083      	sub	sp, #12
 8020c48:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8020c4a:	2300      	movs	r3, #0
 8020c4c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8020c4e:	4b17      	ldr	r3, [pc, #92]	; (8020cac <udp_new_port+0x68>)
 8020c50:	881b      	ldrh	r3, [r3, #0]
 8020c52:	1c5a      	adds	r2, r3, #1
 8020c54:	b291      	uxth	r1, r2
 8020c56:	4a15      	ldr	r2, [pc, #84]	; (8020cac <udp_new_port+0x68>)
 8020c58:	8011      	strh	r1, [r2, #0]
 8020c5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8020c5e:	4293      	cmp	r3, r2
 8020c60:	d103      	bne.n	8020c6a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8020c62:	4b12      	ldr	r3, [pc, #72]	; (8020cac <udp_new_port+0x68>)
 8020c64:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8020c68:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8020c6a:	4b11      	ldr	r3, [pc, #68]	; (8020cb0 <udp_new_port+0x6c>)
 8020c6c:	681b      	ldr	r3, [r3, #0]
 8020c6e:	603b      	str	r3, [r7, #0]
 8020c70:	e011      	b.n	8020c96 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8020c72:	683b      	ldr	r3, [r7, #0]
 8020c74:	8a5a      	ldrh	r2, [r3, #18]
 8020c76:	4b0d      	ldr	r3, [pc, #52]	; (8020cac <udp_new_port+0x68>)
 8020c78:	881b      	ldrh	r3, [r3, #0]
 8020c7a:	429a      	cmp	r2, r3
 8020c7c:	d108      	bne.n	8020c90 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8020c7e:	88fb      	ldrh	r3, [r7, #6]
 8020c80:	3301      	adds	r3, #1
 8020c82:	80fb      	strh	r3, [r7, #6]
 8020c84:	88fb      	ldrh	r3, [r7, #6]
 8020c86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8020c8a:	d3e0      	bcc.n	8020c4e <udp_new_port+0xa>
        return 0;
 8020c8c:	2300      	movs	r3, #0
 8020c8e:	e007      	b.n	8020ca0 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8020c90:	683b      	ldr	r3, [r7, #0]
 8020c92:	68db      	ldr	r3, [r3, #12]
 8020c94:	603b      	str	r3, [r7, #0]
 8020c96:	683b      	ldr	r3, [r7, #0]
 8020c98:	2b00      	cmp	r3, #0
 8020c9a:	d1ea      	bne.n	8020c72 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8020c9c:	4b03      	ldr	r3, [pc, #12]	; (8020cac <udp_new_port+0x68>)
 8020c9e:	881b      	ldrh	r3, [r3, #0]
}
 8020ca0:	4618      	mov	r0, r3
 8020ca2:	370c      	adds	r7, #12
 8020ca4:	46bd      	mov	sp, r7
 8020ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020caa:	4770      	bx	lr
 8020cac:	10000068 	.word	0x10000068
 8020cb0:	2001c114 	.word	0x2001c114

08020cb4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8020cb4:	b580      	push	{r7, lr}
 8020cb6:	b084      	sub	sp, #16
 8020cb8:	af00      	add	r7, sp, #0
 8020cba:	60f8      	str	r0, [r7, #12]
 8020cbc:	60b9      	str	r1, [r7, #8]
 8020cbe:	4613      	mov	r3, r2
 8020cc0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8020cc2:	68fb      	ldr	r3, [r7, #12]
 8020cc4:	2b00      	cmp	r3, #0
 8020cc6:	d105      	bne.n	8020cd4 <udp_input_local_match+0x20>
 8020cc8:	4b27      	ldr	r3, [pc, #156]	; (8020d68 <udp_input_local_match+0xb4>)
 8020cca:	2287      	movs	r2, #135	; 0x87
 8020ccc:	4927      	ldr	r1, [pc, #156]	; (8020d6c <udp_input_local_match+0xb8>)
 8020cce:	4828      	ldr	r0, [pc, #160]	; (8020d70 <udp_input_local_match+0xbc>)
 8020cd0:	f005 fdfc 	bl	80268cc <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8020cd4:	68bb      	ldr	r3, [r7, #8]
 8020cd6:	2b00      	cmp	r3, #0
 8020cd8:	d105      	bne.n	8020ce6 <udp_input_local_match+0x32>
 8020cda:	4b23      	ldr	r3, [pc, #140]	; (8020d68 <udp_input_local_match+0xb4>)
 8020cdc:	2288      	movs	r2, #136	; 0x88
 8020cde:	4925      	ldr	r1, [pc, #148]	; (8020d74 <udp_input_local_match+0xc0>)
 8020ce0:	4823      	ldr	r0, [pc, #140]	; (8020d70 <udp_input_local_match+0xbc>)
 8020ce2:	f005 fdf3 	bl	80268cc <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8020ce6:	68fb      	ldr	r3, [r7, #12]
 8020ce8:	7a1b      	ldrb	r3, [r3, #8]
 8020cea:	2b00      	cmp	r3, #0
 8020cec:	d00b      	beq.n	8020d06 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8020cee:	68fb      	ldr	r3, [r7, #12]
 8020cf0:	7a1a      	ldrb	r2, [r3, #8]
 8020cf2:	4b21      	ldr	r3, [pc, #132]	; (8020d78 <udp_input_local_match+0xc4>)
 8020cf4:	685b      	ldr	r3, [r3, #4]
 8020cf6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8020cfa:	3301      	adds	r3, #1
 8020cfc:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8020cfe:	429a      	cmp	r2, r3
 8020d00:	d001      	beq.n	8020d06 <udp_input_local_match+0x52>
    return 0;
 8020d02:	2300      	movs	r3, #0
 8020d04:	e02b      	b.n	8020d5e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8020d06:	79fb      	ldrb	r3, [r7, #7]
 8020d08:	2b00      	cmp	r3, #0
 8020d0a:	d018      	beq.n	8020d3e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8020d0c:	68fb      	ldr	r3, [r7, #12]
 8020d0e:	2b00      	cmp	r3, #0
 8020d10:	d013      	beq.n	8020d3a <udp_input_local_match+0x86>
 8020d12:	68fb      	ldr	r3, [r7, #12]
 8020d14:	681b      	ldr	r3, [r3, #0]
 8020d16:	2b00      	cmp	r3, #0
 8020d18:	d00f      	beq.n	8020d3a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8020d1a:	4b17      	ldr	r3, [pc, #92]	; (8020d78 <udp_input_local_match+0xc4>)
 8020d1c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8020d1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020d22:	d00a      	beq.n	8020d3a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8020d24:	68fb      	ldr	r3, [r7, #12]
 8020d26:	681a      	ldr	r2, [r3, #0]
 8020d28:	4b13      	ldr	r3, [pc, #76]	; (8020d78 <udp_input_local_match+0xc4>)
 8020d2a:	695b      	ldr	r3, [r3, #20]
 8020d2c:	405a      	eors	r2, r3
 8020d2e:	68bb      	ldr	r3, [r7, #8]
 8020d30:	3308      	adds	r3, #8
 8020d32:	681b      	ldr	r3, [r3, #0]
 8020d34:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8020d36:	2b00      	cmp	r3, #0
 8020d38:	d110      	bne.n	8020d5c <udp_input_local_match+0xa8>
          return 1;
 8020d3a:	2301      	movs	r3, #1
 8020d3c:	e00f      	b.n	8020d5e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8020d3e:	68fb      	ldr	r3, [r7, #12]
 8020d40:	2b00      	cmp	r3, #0
 8020d42:	d009      	beq.n	8020d58 <udp_input_local_match+0xa4>
 8020d44:	68fb      	ldr	r3, [r7, #12]
 8020d46:	681b      	ldr	r3, [r3, #0]
 8020d48:	2b00      	cmp	r3, #0
 8020d4a:	d005      	beq.n	8020d58 <udp_input_local_match+0xa4>
 8020d4c:	68fb      	ldr	r3, [r7, #12]
 8020d4e:	681a      	ldr	r2, [r3, #0]
 8020d50:	4b09      	ldr	r3, [pc, #36]	; (8020d78 <udp_input_local_match+0xc4>)
 8020d52:	695b      	ldr	r3, [r3, #20]
 8020d54:	429a      	cmp	r2, r3
 8020d56:	d101      	bne.n	8020d5c <udp_input_local_match+0xa8>
        return 1;
 8020d58:	2301      	movs	r3, #1
 8020d5a:	e000      	b.n	8020d5e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8020d5c:	2300      	movs	r3, #0
}
 8020d5e:	4618      	mov	r0, r3
 8020d60:	3710      	adds	r7, #16
 8020d62:	46bd      	mov	sp, r7
 8020d64:	bd80      	pop	{r7, pc}
 8020d66:	bf00      	nop
 8020d68:	0802e8ac 	.word	0x0802e8ac
 8020d6c:	0802e8dc 	.word	0x0802e8dc
 8020d70:	0802e900 	.word	0x0802e900
 8020d74:	0802e928 	.word	0x0802e928
 8020d78:	20017b68 	.word	0x20017b68

08020d7c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8020d7c:	b590      	push	{r4, r7, lr}
 8020d7e:	b08d      	sub	sp, #52	; 0x34
 8020d80:	af02      	add	r7, sp, #8
 8020d82:	6078      	str	r0, [r7, #4]
 8020d84:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8020d86:	2300      	movs	r3, #0
 8020d88:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8020d8a:	687b      	ldr	r3, [r7, #4]
 8020d8c:	2b00      	cmp	r3, #0
 8020d8e:	d105      	bne.n	8020d9c <udp_input+0x20>
 8020d90:	4b7c      	ldr	r3, [pc, #496]	; (8020f84 <udp_input+0x208>)
 8020d92:	22cf      	movs	r2, #207	; 0xcf
 8020d94:	497c      	ldr	r1, [pc, #496]	; (8020f88 <udp_input+0x20c>)
 8020d96:	487d      	ldr	r0, [pc, #500]	; (8020f8c <udp_input+0x210>)
 8020d98:	f005 fd98 	bl	80268cc <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8020d9c:	683b      	ldr	r3, [r7, #0]
 8020d9e:	2b00      	cmp	r3, #0
 8020da0:	d105      	bne.n	8020dae <udp_input+0x32>
 8020da2:	4b78      	ldr	r3, [pc, #480]	; (8020f84 <udp_input+0x208>)
 8020da4:	22d0      	movs	r2, #208	; 0xd0
 8020da6:	497a      	ldr	r1, [pc, #488]	; (8020f90 <udp_input+0x214>)
 8020da8:	4878      	ldr	r0, [pc, #480]	; (8020f8c <udp_input+0x210>)
 8020daa:	f005 fd8f 	bl	80268cc <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8020dae:	687b      	ldr	r3, [r7, #4]
 8020db0:	895b      	ldrh	r3, [r3, #10]
 8020db2:	2b07      	cmp	r3, #7
 8020db4:	d803      	bhi.n	8020dbe <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8020db6:	6878      	ldr	r0, [r7, #4]
 8020db8:	f7f9 f8fe 	bl	8019fb8 <pbuf_free>
    goto end;
 8020dbc:	e0de      	b.n	8020f7c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8020dbe:	687b      	ldr	r3, [r7, #4]
 8020dc0:	685b      	ldr	r3, [r3, #4]
 8020dc2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8020dc4:	4b73      	ldr	r3, [pc, #460]	; (8020f94 <udp_input+0x218>)
 8020dc6:	695b      	ldr	r3, [r3, #20]
 8020dc8:	4a72      	ldr	r2, [pc, #456]	; (8020f94 <udp_input+0x218>)
 8020dca:	6812      	ldr	r2, [r2, #0]
 8020dcc:	4611      	mov	r1, r2
 8020dce:	4618      	mov	r0, r3
 8020dd0:	f003 fe06 	bl	80249e0 <ip4_addr_isbroadcast_u32>
 8020dd4:	4603      	mov	r3, r0
 8020dd6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8020dd8:	697b      	ldr	r3, [r7, #20]
 8020dda:	881b      	ldrh	r3, [r3, #0]
 8020ddc:	b29b      	uxth	r3, r3
 8020dde:	4618      	mov	r0, r3
 8020de0:	f7f7 fcd4 	bl	801878c <lwip_htons>
 8020de4:	4603      	mov	r3, r0
 8020de6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8020de8:	697b      	ldr	r3, [r7, #20]
 8020dea:	885b      	ldrh	r3, [r3, #2]
 8020dec:	b29b      	uxth	r3, r3
 8020dee:	4618      	mov	r0, r3
 8020df0:	f7f7 fccc 	bl	801878c <lwip_htons>
 8020df4:	4603      	mov	r3, r0
 8020df6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8020df8:	2300      	movs	r3, #0
 8020dfa:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8020dfc:	2300      	movs	r3, #0
 8020dfe:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8020e00:	2300      	movs	r3, #0
 8020e02:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8020e04:	4b64      	ldr	r3, [pc, #400]	; (8020f98 <udp_input+0x21c>)
 8020e06:	681b      	ldr	r3, [r3, #0]
 8020e08:	627b      	str	r3, [r7, #36]	; 0x24
 8020e0a:	e054      	b.n	8020eb6 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8020e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020e0e:	8a5b      	ldrh	r3, [r3, #18]
 8020e10:	89fa      	ldrh	r2, [r7, #14]
 8020e12:	429a      	cmp	r2, r3
 8020e14:	d14a      	bne.n	8020eac <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8020e16:	7cfb      	ldrb	r3, [r7, #19]
 8020e18:	461a      	mov	r2, r3
 8020e1a:	6839      	ldr	r1, [r7, #0]
 8020e1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8020e1e:	f7ff ff49 	bl	8020cb4 <udp_input_local_match>
 8020e22:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8020e24:	2b00      	cmp	r3, #0
 8020e26:	d041      	beq.n	8020eac <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8020e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020e2a:	7c1b      	ldrb	r3, [r3, #16]
 8020e2c:	f003 0304 	and.w	r3, r3, #4
 8020e30:	2b00      	cmp	r3, #0
 8020e32:	d11d      	bne.n	8020e70 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8020e34:	69fb      	ldr	r3, [r7, #28]
 8020e36:	2b00      	cmp	r3, #0
 8020e38:	d102      	bne.n	8020e40 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8020e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020e3c:	61fb      	str	r3, [r7, #28]
 8020e3e:	e017      	b.n	8020e70 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8020e40:	7cfb      	ldrb	r3, [r7, #19]
 8020e42:	2b00      	cmp	r3, #0
 8020e44:	d014      	beq.n	8020e70 <udp_input+0xf4>
 8020e46:	4b53      	ldr	r3, [pc, #332]	; (8020f94 <udp_input+0x218>)
 8020e48:	695b      	ldr	r3, [r3, #20]
 8020e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020e4e:	d10f      	bne.n	8020e70 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8020e50:	69fb      	ldr	r3, [r7, #28]
 8020e52:	681a      	ldr	r2, [r3, #0]
 8020e54:	683b      	ldr	r3, [r7, #0]
 8020e56:	3304      	adds	r3, #4
 8020e58:	681b      	ldr	r3, [r3, #0]
 8020e5a:	429a      	cmp	r2, r3
 8020e5c:	d008      	beq.n	8020e70 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8020e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020e60:	681a      	ldr	r2, [r3, #0]
 8020e62:	683b      	ldr	r3, [r7, #0]
 8020e64:	3304      	adds	r3, #4
 8020e66:	681b      	ldr	r3, [r3, #0]
 8020e68:	429a      	cmp	r2, r3
 8020e6a:	d101      	bne.n	8020e70 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8020e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020e6e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8020e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020e72:	8a9b      	ldrh	r3, [r3, #20]
 8020e74:	8a3a      	ldrh	r2, [r7, #16]
 8020e76:	429a      	cmp	r2, r3
 8020e78:	d118      	bne.n	8020eac <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8020e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020e7c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8020e7e:	2b00      	cmp	r3, #0
 8020e80:	d005      	beq.n	8020e8e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8020e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020e84:	685a      	ldr	r2, [r3, #4]
 8020e86:	4b43      	ldr	r3, [pc, #268]	; (8020f94 <udp_input+0x218>)
 8020e88:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8020e8a:	429a      	cmp	r2, r3
 8020e8c:	d10e      	bne.n	8020eac <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8020e8e:	6a3b      	ldr	r3, [r7, #32]
 8020e90:	2b00      	cmp	r3, #0
 8020e92:	d014      	beq.n	8020ebe <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8020e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020e96:	68da      	ldr	r2, [r3, #12]
 8020e98:	6a3b      	ldr	r3, [r7, #32]
 8020e9a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8020e9c:	4b3e      	ldr	r3, [pc, #248]	; (8020f98 <udp_input+0x21c>)
 8020e9e:	681a      	ldr	r2, [r3, #0]
 8020ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020ea2:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8020ea4:	4a3c      	ldr	r2, [pc, #240]	; (8020f98 <udp_input+0x21c>)
 8020ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020ea8:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8020eaa:	e008      	b.n	8020ebe <udp_input+0x142>
      }
    }

    prev = pcb;
 8020eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020eae:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8020eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020eb2:	68db      	ldr	r3, [r3, #12]
 8020eb4:	627b      	str	r3, [r7, #36]	; 0x24
 8020eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020eb8:	2b00      	cmp	r3, #0
 8020eba:	d1a7      	bne.n	8020e0c <udp_input+0x90>
 8020ebc:	e000      	b.n	8020ec0 <udp_input+0x144>
        break;
 8020ebe:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8020ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020ec2:	2b00      	cmp	r3, #0
 8020ec4:	d101      	bne.n	8020eca <udp_input+0x14e>
    pcb = uncon_pcb;
 8020ec6:	69fb      	ldr	r3, [r7, #28]
 8020ec8:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8020eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020ecc:	2b00      	cmp	r3, #0
 8020ece:	d002      	beq.n	8020ed6 <udp_input+0x15a>
    for_us = 1;
 8020ed0:	2301      	movs	r3, #1
 8020ed2:	76fb      	strb	r3, [r7, #27]
 8020ed4:	e00a      	b.n	8020eec <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8020ed6:	683b      	ldr	r3, [r7, #0]
 8020ed8:	3304      	adds	r3, #4
 8020eda:	681a      	ldr	r2, [r3, #0]
 8020edc:	4b2d      	ldr	r3, [pc, #180]	; (8020f94 <udp_input+0x218>)
 8020ede:	695b      	ldr	r3, [r3, #20]
 8020ee0:	429a      	cmp	r2, r3
 8020ee2:	bf0c      	ite	eq
 8020ee4:	2301      	moveq	r3, #1
 8020ee6:	2300      	movne	r3, #0
 8020ee8:	b2db      	uxtb	r3, r3
 8020eea:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8020eec:	7efb      	ldrb	r3, [r7, #27]
 8020eee:	2b00      	cmp	r3, #0
 8020ef0:	d041      	beq.n	8020f76 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8020ef2:	2108      	movs	r1, #8
 8020ef4:	6878      	ldr	r0, [r7, #4]
 8020ef6:	f7f8 ffd9 	bl	8019eac <pbuf_remove_header>
 8020efa:	4603      	mov	r3, r0
 8020efc:	2b00      	cmp	r3, #0
 8020efe:	d00a      	beq.n	8020f16 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8020f00:	4b20      	ldr	r3, [pc, #128]	; (8020f84 <udp_input+0x208>)
 8020f02:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8020f06:	4925      	ldr	r1, [pc, #148]	; (8020f9c <udp_input+0x220>)
 8020f08:	4820      	ldr	r0, [pc, #128]	; (8020f8c <udp_input+0x210>)
 8020f0a:	f005 fcdf 	bl	80268cc <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8020f0e:	6878      	ldr	r0, [r7, #4]
 8020f10:	f7f9 f852 	bl	8019fb8 <pbuf_free>
      goto end;
 8020f14:	e032      	b.n	8020f7c <udp_input+0x200>
    }

    if (pcb != NULL) {
 8020f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020f18:	2b00      	cmp	r3, #0
 8020f1a:	d012      	beq.n	8020f42 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8020f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020f1e:	699b      	ldr	r3, [r3, #24]
 8020f20:	2b00      	cmp	r3, #0
 8020f22:	d00a      	beq.n	8020f3a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8020f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020f26:	699c      	ldr	r4, [r3, #24]
 8020f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020f2a:	69d8      	ldr	r0, [r3, #28]
 8020f2c:	8a3b      	ldrh	r3, [r7, #16]
 8020f2e:	9300      	str	r3, [sp, #0]
 8020f30:	4b1b      	ldr	r3, [pc, #108]	; (8020fa0 <udp_input+0x224>)
 8020f32:	687a      	ldr	r2, [r7, #4]
 8020f34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8020f36:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8020f38:	e021      	b.n	8020f7e <udp_input+0x202>
        pbuf_free(p);
 8020f3a:	6878      	ldr	r0, [r7, #4]
 8020f3c:	f7f9 f83c 	bl	8019fb8 <pbuf_free>
        goto end;
 8020f40:	e01c      	b.n	8020f7c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8020f42:	7cfb      	ldrb	r3, [r7, #19]
 8020f44:	2b00      	cmp	r3, #0
 8020f46:	d112      	bne.n	8020f6e <udp_input+0x1f2>
 8020f48:	4b12      	ldr	r3, [pc, #72]	; (8020f94 <udp_input+0x218>)
 8020f4a:	695b      	ldr	r3, [r3, #20]
 8020f4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8020f50:	2be0      	cmp	r3, #224	; 0xe0
 8020f52:	d00c      	beq.n	8020f6e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8020f54:	4b0f      	ldr	r3, [pc, #60]	; (8020f94 <udp_input+0x218>)
 8020f56:	899b      	ldrh	r3, [r3, #12]
 8020f58:	3308      	adds	r3, #8
 8020f5a:	b29b      	uxth	r3, r3
 8020f5c:	b21b      	sxth	r3, r3
 8020f5e:	4619      	mov	r1, r3
 8020f60:	6878      	ldr	r0, [r7, #4]
 8020f62:	f7f9 f816 	bl	8019f92 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8020f66:	2103      	movs	r1, #3
 8020f68:	6878      	ldr	r0, [r7, #4]
 8020f6a:	f003 f9fb 	bl	8024364 <icmp_dest_unreach>
      pbuf_free(p);
 8020f6e:	6878      	ldr	r0, [r7, #4]
 8020f70:	f7f9 f822 	bl	8019fb8 <pbuf_free>
  return;
 8020f74:	e003      	b.n	8020f7e <udp_input+0x202>
    pbuf_free(p);
 8020f76:	6878      	ldr	r0, [r7, #4]
 8020f78:	f7f9 f81e 	bl	8019fb8 <pbuf_free>
  return;
 8020f7c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8020f7e:	372c      	adds	r7, #44	; 0x2c
 8020f80:	46bd      	mov	sp, r7
 8020f82:	bd90      	pop	{r4, r7, pc}
 8020f84:	0802e8ac 	.word	0x0802e8ac
 8020f88:	0802e950 	.word	0x0802e950
 8020f8c:	0802e900 	.word	0x0802e900
 8020f90:	0802e968 	.word	0x0802e968
 8020f94:	20017b68 	.word	0x20017b68
 8020f98:	2001c114 	.word	0x2001c114
 8020f9c:	0802e984 	.word	0x0802e984
 8020fa0:	20017b78 	.word	0x20017b78

08020fa4 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8020fa4:	b580      	push	{r7, lr}
 8020fa6:	b088      	sub	sp, #32
 8020fa8:	af02      	add	r7, sp, #8
 8020faa:	60f8      	str	r0, [r7, #12]
 8020fac:	60b9      	str	r1, [r7, #8]
 8020fae:	607a      	str	r2, [r7, #4]
 8020fb0:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8020fb2:	68fb      	ldr	r3, [r7, #12]
 8020fb4:	2b00      	cmp	r3, #0
 8020fb6:	d109      	bne.n	8020fcc <udp_sendto_if+0x28>
 8020fb8:	4b2e      	ldr	r3, [pc, #184]	; (8021074 <udp_sendto_if+0xd0>)
 8020fba:	f44f 7220 	mov.w	r2, #640	; 0x280
 8020fbe:	492e      	ldr	r1, [pc, #184]	; (8021078 <udp_sendto_if+0xd4>)
 8020fc0:	482e      	ldr	r0, [pc, #184]	; (802107c <udp_sendto_if+0xd8>)
 8020fc2:	f005 fc83 	bl	80268cc <iprintf>
 8020fc6:	f06f 030f 	mvn.w	r3, #15
 8020fca:	e04f      	b.n	802106c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8020fcc:	68bb      	ldr	r3, [r7, #8]
 8020fce:	2b00      	cmp	r3, #0
 8020fd0:	d109      	bne.n	8020fe6 <udp_sendto_if+0x42>
 8020fd2:	4b28      	ldr	r3, [pc, #160]	; (8021074 <udp_sendto_if+0xd0>)
 8020fd4:	f240 2281 	movw	r2, #641	; 0x281
 8020fd8:	4929      	ldr	r1, [pc, #164]	; (8021080 <udp_sendto_if+0xdc>)
 8020fda:	4828      	ldr	r0, [pc, #160]	; (802107c <udp_sendto_if+0xd8>)
 8020fdc:	f005 fc76 	bl	80268cc <iprintf>
 8020fe0:	f06f 030f 	mvn.w	r3, #15
 8020fe4:	e042      	b.n	802106c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8020fe6:	687b      	ldr	r3, [r7, #4]
 8020fe8:	2b00      	cmp	r3, #0
 8020fea:	d109      	bne.n	8021000 <udp_sendto_if+0x5c>
 8020fec:	4b21      	ldr	r3, [pc, #132]	; (8021074 <udp_sendto_if+0xd0>)
 8020fee:	f240 2282 	movw	r2, #642	; 0x282
 8020ff2:	4924      	ldr	r1, [pc, #144]	; (8021084 <udp_sendto_if+0xe0>)
 8020ff4:	4821      	ldr	r0, [pc, #132]	; (802107c <udp_sendto_if+0xd8>)
 8020ff6:	f005 fc69 	bl	80268cc <iprintf>
 8020ffa:	f06f 030f 	mvn.w	r3, #15
 8020ffe:	e035      	b.n	802106c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8021000:	6a3b      	ldr	r3, [r7, #32]
 8021002:	2b00      	cmp	r3, #0
 8021004:	d109      	bne.n	802101a <udp_sendto_if+0x76>
 8021006:	4b1b      	ldr	r3, [pc, #108]	; (8021074 <udp_sendto_if+0xd0>)
 8021008:	f240 2283 	movw	r2, #643	; 0x283
 802100c:	491e      	ldr	r1, [pc, #120]	; (8021088 <udp_sendto_if+0xe4>)
 802100e:	481b      	ldr	r0, [pc, #108]	; (802107c <udp_sendto_if+0xd8>)
 8021010:	f005 fc5c 	bl	80268cc <iprintf>
 8021014:	f06f 030f 	mvn.w	r3, #15
 8021018:	e028      	b.n	802106c <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 802101a:	68fb      	ldr	r3, [r7, #12]
 802101c:	2b00      	cmp	r3, #0
 802101e:	d009      	beq.n	8021034 <udp_sendto_if+0x90>
 8021020:	68fb      	ldr	r3, [r7, #12]
 8021022:	681b      	ldr	r3, [r3, #0]
 8021024:	2b00      	cmp	r3, #0
 8021026:	d005      	beq.n	8021034 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8021028:	68fb      	ldr	r3, [r7, #12]
 802102a:	681b      	ldr	r3, [r3, #0]
 802102c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8021030:	2be0      	cmp	r3, #224	; 0xe0
 8021032:	d103      	bne.n	802103c <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8021034:	6a3b      	ldr	r3, [r7, #32]
 8021036:	3304      	adds	r3, #4
 8021038:	617b      	str	r3, [r7, #20]
 802103a:	e00b      	b.n	8021054 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 802103c:	68fb      	ldr	r3, [r7, #12]
 802103e:	681a      	ldr	r2, [r3, #0]
 8021040:	6a3b      	ldr	r3, [r7, #32]
 8021042:	3304      	adds	r3, #4
 8021044:	681b      	ldr	r3, [r3, #0]
 8021046:	429a      	cmp	r2, r3
 8021048:	d002      	beq.n	8021050 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 802104a:	f06f 0303 	mvn.w	r3, #3
 802104e:	e00d      	b.n	802106c <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8021050:	68fb      	ldr	r3, [r7, #12]
 8021052:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8021054:	887a      	ldrh	r2, [r7, #2]
 8021056:	697b      	ldr	r3, [r7, #20]
 8021058:	9301      	str	r3, [sp, #4]
 802105a:	6a3b      	ldr	r3, [r7, #32]
 802105c:	9300      	str	r3, [sp, #0]
 802105e:	4613      	mov	r3, r2
 8021060:	687a      	ldr	r2, [r7, #4]
 8021062:	68b9      	ldr	r1, [r7, #8]
 8021064:	68f8      	ldr	r0, [r7, #12]
 8021066:	f000 f811 	bl	802108c <udp_sendto_if_src>
 802106a:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 802106c:	4618      	mov	r0, r3
 802106e:	3718      	adds	r7, #24
 8021070:	46bd      	mov	sp, r7
 8021072:	bd80      	pop	{r7, pc}
 8021074:	0802e8ac 	.word	0x0802e8ac
 8021078:	0802ea20 	.word	0x0802ea20
 802107c:	0802e900 	.word	0x0802e900
 8021080:	0802ea3c 	.word	0x0802ea3c
 8021084:	0802ea58 	.word	0x0802ea58
 8021088:	0802ea78 	.word	0x0802ea78

0802108c <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 802108c:	b580      	push	{r7, lr}
 802108e:	b08c      	sub	sp, #48	; 0x30
 8021090:	af04      	add	r7, sp, #16
 8021092:	60f8      	str	r0, [r7, #12]
 8021094:	60b9      	str	r1, [r7, #8]
 8021096:	607a      	str	r2, [r7, #4]
 8021098:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 802109a:	68fb      	ldr	r3, [r7, #12]
 802109c:	2b00      	cmp	r3, #0
 802109e:	d109      	bne.n	80210b4 <udp_sendto_if_src+0x28>
 80210a0:	4b65      	ldr	r3, [pc, #404]	; (8021238 <udp_sendto_if_src+0x1ac>)
 80210a2:	f240 22d1 	movw	r2, #721	; 0x2d1
 80210a6:	4965      	ldr	r1, [pc, #404]	; (802123c <udp_sendto_if_src+0x1b0>)
 80210a8:	4865      	ldr	r0, [pc, #404]	; (8021240 <udp_sendto_if_src+0x1b4>)
 80210aa:	f005 fc0f 	bl	80268cc <iprintf>
 80210ae:	f06f 030f 	mvn.w	r3, #15
 80210b2:	e0bc      	b.n	802122e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 80210b4:	68bb      	ldr	r3, [r7, #8]
 80210b6:	2b00      	cmp	r3, #0
 80210b8:	d109      	bne.n	80210ce <udp_sendto_if_src+0x42>
 80210ba:	4b5f      	ldr	r3, [pc, #380]	; (8021238 <udp_sendto_if_src+0x1ac>)
 80210bc:	f240 22d2 	movw	r2, #722	; 0x2d2
 80210c0:	4960      	ldr	r1, [pc, #384]	; (8021244 <udp_sendto_if_src+0x1b8>)
 80210c2:	485f      	ldr	r0, [pc, #380]	; (8021240 <udp_sendto_if_src+0x1b4>)
 80210c4:	f005 fc02 	bl	80268cc <iprintf>
 80210c8:	f06f 030f 	mvn.w	r3, #15
 80210cc:	e0af      	b.n	802122e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80210ce:	687b      	ldr	r3, [r7, #4]
 80210d0:	2b00      	cmp	r3, #0
 80210d2:	d109      	bne.n	80210e8 <udp_sendto_if_src+0x5c>
 80210d4:	4b58      	ldr	r3, [pc, #352]	; (8021238 <udp_sendto_if_src+0x1ac>)
 80210d6:	f240 22d3 	movw	r2, #723	; 0x2d3
 80210da:	495b      	ldr	r1, [pc, #364]	; (8021248 <udp_sendto_if_src+0x1bc>)
 80210dc:	4858      	ldr	r0, [pc, #352]	; (8021240 <udp_sendto_if_src+0x1b4>)
 80210de:	f005 fbf5 	bl	80268cc <iprintf>
 80210e2:	f06f 030f 	mvn.w	r3, #15
 80210e6:	e0a2      	b.n	802122e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 80210e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80210ea:	2b00      	cmp	r3, #0
 80210ec:	d109      	bne.n	8021102 <udp_sendto_if_src+0x76>
 80210ee:	4b52      	ldr	r3, [pc, #328]	; (8021238 <udp_sendto_if_src+0x1ac>)
 80210f0:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 80210f4:	4955      	ldr	r1, [pc, #340]	; (802124c <udp_sendto_if_src+0x1c0>)
 80210f6:	4852      	ldr	r0, [pc, #328]	; (8021240 <udp_sendto_if_src+0x1b4>)
 80210f8:	f005 fbe8 	bl	80268cc <iprintf>
 80210fc:	f06f 030f 	mvn.w	r3, #15
 8021100:	e095      	b.n	802122e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8021102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021104:	2b00      	cmp	r3, #0
 8021106:	d109      	bne.n	802111c <udp_sendto_if_src+0x90>
 8021108:	4b4b      	ldr	r3, [pc, #300]	; (8021238 <udp_sendto_if_src+0x1ac>)
 802110a:	f240 22d5 	movw	r2, #725	; 0x2d5
 802110e:	4950      	ldr	r1, [pc, #320]	; (8021250 <udp_sendto_if_src+0x1c4>)
 8021110:	484b      	ldr	r0, [pc, #300]	; (8021240 <udp_sendto_if_src+0x1b4>)
 8021112:	f005 fbdb 	bl	80268cc <iprintf>
 8021116:	f06f 030f 	mvn.w	r3, #15
 802111a:	e088      	b.n	802122e <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 802111c:	68fb      	ldr	r3, [r7, #12]
 802111e:	8a5b      	ldrh	r3, [r3, #18]
 8021120:	2b00      	cmp	r3, #0
 8021122:	d10f      	bne.n	8021144 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8021124:	68f9      	ldr	r1, [r7, #12]
 8021126:	68fb      	ldr	r3, [r7, #12]
 8021128:	8a5b      	ldrh	r3, [r3, #18]
 802112a:	461a      	mov	r2, r3
 802112c:	68f8      	ldr	r0, [r7, #12]
 802112e:	f000 f893 	bl	8021258 <udp_bind>
 8021132:	4603      	mov	r3, r0
 8021134:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8021136:	f997 301b 	ldrsb.w	r3, [r7, #27]
 802113a:	2b00      	cmp	r3, #0
 802113c:	d002      	beq.n	8021144 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 802113e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8021142:	e074      	b.n	802122e <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8021144:	68bb      	ldr	r3, [r7, #8]
 8021146:	891b      	ldrh	r3, [r3, #8]
 8021148:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 802114c:	4293      	cmp	r3, r2
 802114e:	d902      	bls.n	8021156 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8021150:	f04f 33ff 	mov.w	r3, #4294967295
 8021154:	e06b      	b.n	802122e <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8021156:	2108      	movs	r1, #8
 8021158:	68b8      	ldr	r0, [r7, #8]
 802115a:	f7f8 fe97 	bl	8019e8c <pbuf_add_header>
 802115e:	4603      	mov	r3, r0
 8021160:	2b00      	cmp	r3, #0
 8021162:	d015      	beq.n	8021190 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8021164:	f44f 7220 	mov.w	r2, #640	; 0x280
 8021168:	2108      	movs	r1, #8
 802116a:	2022      	movs	r0, #34	; 0x22
 802116c:	f7f8 fc40 	bl	80199f0 <pbuf_alloc>
 8021170:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8021172:	69fb      	ldr	r3, [r7, #28]
 8021174:	2b00      	cmp	r3, #0
 8021176:	d102      	bne.n	802117e <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8021178:	f04f 33ff 	mov.w	r3, #4294967295
 802117c:	e057      	b.n	802122e <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 802117e:	68bb      	ldr	r3, [r7, #8]
 8021180:	891b      	ldrh	r3, [r3, #8]
 8021182:	2b00      	cmp	r3, #0
 8021184:	d006      	beq.n	8021194 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8021186:	68b9      	ldr	r1, [r7, #8]
 8021188:	69f8      	ldr	r0, [r7, #28]
 802118a:	f7f9 f839 	bl	801a200 <pbuf_chain>
 802118e:	e001      	b.n	8021194 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8021190:	68bb      	ldr	r3, [r7, #8]
 8021192:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8021194:	69fb      	ldr	r3, [r7, #28]
 8021196:	895b      	ldrh	r3, [r3, #10]
 8021198:	2b07      	cmp	r3, #7
 802119a:	d806      	bhi.n	80211aa <udp_sendto_if_src+0x11e>
 802119c:	4b26      	ldr	r3, [pc, #152]	; (8021238 <udp_sendto_if_src+0x1ac>)
 802119e:	f240 320d 	movw	r2, #781	; 0x30d
 80211a2:	492c      	ldr	r1, [pc, #176]	; (8021254 <udp_sendto_if_src+0x1c8>)
 80211a4:	4826      	ldr	r0, [pc, #152]	; (8021240 <udp_sendto_if_src+0x1b4>)
 80211a6:	f005 fb91 	bl	80268cc <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 80211aa:	69fb      	ldr	r3, [r7, #28]
 80211ac:	685b      	ldr	r3, [r3, #4]
 80211ae:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 80211b0:	68fb      	ldr	r3, [r7, #12]
 80211b2:	8a5b      	ldrh	r3, [r3, #18]
 80211b4:	4618      	mov	r0, r3
 80211b6:	f7f7 fae9 	bl	801878c <lwip_htons>
 80211ba:	4603      	mov	r3, r0
 80211bc:	461a      	mov	r2, r3
 80211be:	697b      	ldr	r3, [r7, #20]
 80211c0:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 80211c2:	887b      	ldrh	r3, [r7, #2]
 80211c4:	4618      	mov	r0, r3
 80211c6:	f7f7 fae1 	bl	801878c <lwip_htons>
 80211ca:	4603      	mov	r3, r0
 80211cc:	461a      	mov	r2, r3
 80211ce:	697b      	ldr	r3, [r7, #20]
 80211d0:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 80211d2:	697b      	ldr	r3, [r7, #20]
 80211d4:	2200      	movs	r2, #0
 80211d6:	719a      	strb	r2, [r3, #6]
 80211d8:	2200      	movs	r2, #0
 80211da:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 80211dc:	69fb      	ldr	r3, [r7, #28]
 80211de:	891b      	ldrh	r3, [r3, #8]
 80211e0:	4618      	mov	r0, r3
 80211e2:	f7f7 fad3 	bl	801878c <lwip_htons>
 80211e6:	4603      	mov	r3, r0
 80211e8:	461a      	mov	r2, r3
 80211ea:	697b      	ldr	r3, [r7, #20]
 80211ec:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 80211ee:	2311      	movs	r3, #17
 80211f0:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 80211f2:	68fb      	ldr	r3, [r7, #12]
 80211f4:	7adb      	ldrb	r3, [r3, #11]
 80211f6:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80211f8:	68fb      	ldr	r3, [r7, #12]
 80211fa:	7a9b      	ldrb	r3, [r3, #10]
 80211fc:	7cb9      	ldrb	r1, [r7, #18]
 80211fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8021200:	9202      	str	r2, [sp, #8]
 8021202:	7cfa      	ldrb	r2, [r7, #19]
 8021204:	9201      	str	r2, [sp, #4]
 8021206:	9300      	str	r3, [sp, #0]
 8021208:	460b      	mov	r3, r1
 802120a:	687a      	ldr	r2, [r7, #4]
 802120c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 802120e:	69f8      	ldr	r0, [r7, #28]
 8021210:	f003 fb38 	bl	8024884 <ip4_output_if_src>
 8021214:	4603      	mov	r3, r0
 8021216:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8021218:	69fa      	ldr	r2, [r7, #28]
 802121a:	68bb      	ldr	r3, [r7, #8]
 802121c:	429a      	cmp	r2, r3
 802121e:	d004      	beq.n	802122a <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8021220:	69f8      	ldr	r0, [r7, #28]
 8021222:	f7f8 fec9 	bl	8019fb8 <pbuf_free>
    q = NULL;
 8021226:	2300      	movs	r3, #0
 8021228:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 802122a:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 802122e:	4618      	mov	r0, r3
 8021230:	3720      	adds	r7, #32
 8021232:	46bd      	mov	sp, r7
 8021234:	bd80      	pop	{r7, pc}
 8021236:	bf00      	nop
 8021238:	0802e8ac 	.word	0x0802e8ac
 802123c:	0802ea98 	.word	0x0802ea98
 8021240:	0802e900 	.word	0x0802e900
 8021244:	0802eab8 	.word	0x0802eab8
 8021248:	0802ead8 	.word	0x0802ead8
 802124c:	0802eafc 	.word	0x0802eafc
 8021250:	0802eb20 	.word	0x0802eb20
 8021254:	0802eb44 	.word	0x0802eb44

08021258 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8021258:	b580      	push	{r7, lr}
 802125a:	b086      	sub	sp, #24
 802125c:	af00      	add	r7, sp, #0
 802125e:	60f8      	str	r0, [r7, #12]
 8021260:	60b9      	str	r1, [r7, #8]
 8021262:	4613      	mov	r3, r2
 8021264:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8021266:	68bb      	ldr	r3, [r7, #8]
 8021268:	2b00      	cmp	r3, #0
 802126a:	d101      	bne.n	8021270 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 802126c:	4b39      	ldr	r3, [pc, #228]	; (8021354 <udp_bind+0xfc>)
 802126e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8021270:	68fb      	ldr	r3, [r7, #12]
 8021272:	2b00      	cmp	r3, #0
 8021274:	d109      	bne.n	802128a <udp_bind+0x32>
 8021276:	4b38      	ldr	r3, [pc, #224]	; (8021358 <udp_bind+0x100>)
 8021278:	f240 32b7 	movw	r2, #951	; 0x3b7
 802127c:	4937      	ldr	r1, [pc, #220]	; (802135c <udp_bind+0x104>)
 802127e:	4838      	ldr	r0, [pc, #224]	; (8021360 <udp_bind+0x108>)
 8021280:	f005 fb24 	bl	80268cc <iprintf>
 8021284:	f06f 030f 	mvn.w	r3, #15
 8021288:	e060      	b.n	802134c <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 802128a:	2300      	movs	r3, #0
 802128c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 802128e:	4b35      	ldr	r3, [pc, #212]	; (8021364 <udp_bind+0x10c>)
 8021290:	681b      	ldr	r3, [r3, #0]
 8021292:	617b      	str	r3, [r7, #20]
 8021294:	e009      	b.n	80212aa <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8021296:	68fa      	ldr	r2, [r7, #12]
 8021298:	697b      	ldr	r3, [r7, #20]
 802129a:	429a      	cmp	r2, r3
 802129c:	d102      	bne.n	80212a4 <udp_bind+0x4c>
      rebind = 1;
 802129e:	2301      	movs	r3, #1
 80212a0:	74fb      	strb	r3, [r7, #19]
      break;
 80212a2:	e005      	b.n	80212b0 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80212a4:	697b      	ldr	r3, [r7, #20]
 80212a6:	68db      	ldr	r3, [r3, #12]
 80212a8:	617b      	str	r3, [r7, #20]
 80212aa:	697b      	ldr	r3, [r7, #20]
 80212ac:	2b00      	cmp	r3, #0
 80212ae:	d1f2      	bne.n	8021296 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 80212b0:	88fb      	ldrh	r3, [r7, #6]
 80212b2:	2b00      	cmp	r3, #0
 80212b4:	d109      	bne.n	80212ca <udp_bind+0x72>
    port = udp_new_port();
 80212b6:	f7ff fcc5 	bl	8020c44 <udp_new_port>
 80212ba:	4603      	mov	r3, r0
 80212bc:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80212be:	88fb      	ldrh	r3, [r7, #6]
 80212c0:	2b00      	cmp	r3, #0
 80212c2:	d12c      	bne.n	802131e <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 80212c4:	f06f 0307 	mvn.w	r3, #7
 80212c8:	e040      	b.n	802134c <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80212ca:	4b26      	ldr	r3, [pc, #152]	; (8021364 <udp_bind+0x10c>)
 80212cc:	681b      	ldr	r3, [r3, #0]
 80212ce:	617b      	str	r3, [r7, #20]
 80212d0:	e022      	b.n	8021318 <udp_bind+0xc0>
      if (pcb != ipcb) {
 80212d2:	68fa      	ldr	r2, [r7, #12]
 80212d4:	697b      	ldr	r3, [r7, #20]
 80212d6:	429a      	cmp	r2, r3
 80212d8:	d01b      	beq.n	8021312 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80212da:	697b      	ldr	r3, [r7, #20]
 80212dc:	8a5b      	ldrh	r3, [r3, #18]
 80212de:	88fa      	ldrh	r2, [r7, #6]
 80212e0:	429a      	cmp	r2, r3
 80212e2:	d116      	bne.n	8021312 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80212e4:	697b      	ldr	r3, [r7, #20]
 80212e6:	681a      	ldr	r2, [r3, #0]
 80212e8:	68bb      	ldr	r3, [r7, #8]
 80212ea:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80212ec:	429a      	cmp	r2, r3
 80212ee:	d00d      	beq.n	802130c <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80212f0:	68bb      	ldr	r3, [r7, #8]
 80212f2:	2b00      	cmp	r3, #0
 80212f4:	d00a      	beq.n	802130c <udp_bind+0xb4>
 80212f6:	68bb      	ldr	r3, [r7, #8]
 80212f8:	681b      	ldr	r3, [r3, #0]
 80212fa:	2b00      	cmp	r3, #0
 80212fc:	d006      	beq.n	802130c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80212fe:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8021300:	2b00      	cmp	r3, #0
 8021302:	d003      	beq.n	802130c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8021304:	697b      	ldr	r3, [r7, #20]
 8021306:	681b      	ldr	r3, [r3, #0]
 8021308:	2b00      	cmp	r3, #0
 802130a:	d102      	bne.n	8021312 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 802130c:	f06f 0307 	mvn.w	r3, #7
 8021310:	e01c      	b.n	802134c <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8021312:	697b      	ldr	r3, [r7, #20]
 8021314:	68db      	ldr	r3, [r3, #12]
 8021316:	617b      	str	r3, [r7, #20]
 8021318:	697b      	ldr	r3, [r7, #20]
 802131a:	2b00      	cmp	r3, #0
 802131c:	d1d9      	bne.n	80212d2 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 802131e:	68bb      	ldr	r3, [r7, #8]
 8021320:	2b00      	cmp	r3, #0
 8021322:	d002      	beq.n	802132a <udp_bind+0xd2>
 8021324:	68bb      	ldr	r3, [r7, #8]
 8021326:	681b      	ldr	r3, [r3, #0]
 8021328:	e000      	b.n	802132c <udp_bind+0xd4>
 802132a:	2300      	movs	r3, #0
 802132c:	68fa      	ldr	r2, [r7, #12]
 802132e:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8021330:	68fb      	ldr	r3, [r7, #12]
 8021332:	88fa      	ldrh	r2, [r7, #6]
 8021334:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8021336:	7cfb      	ldrb	r3, [r7, #19]
 8021338:	2b00      	cmp	r3, #0
 802133a:	d106      	bne.n	802134a <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 802133c:	4b09      	ldr	r3, [pc, #36]	; (8021364 <udp_bind+0x10c>)
 802133e:	681a      	ldr	r2, [r3, #0]
 8021340:	68fb      	ldr	r3, [r7, #12]
 8021342:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8021344:	4a07      	ldr	r2, [pc, #28]	; (8021364 <udp_bind+0x10c>)
 8021346:	68fb      	ldr	r3, [r7, #12]
 8021348:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 802134a:	2300      	movs	r3, #0
}
 802134c:	4618      	mov	r0, r3
 802134e:	3718      	adds	r7, #24
 8021350:	46bd      	mov	sp, r7
 8021352:	bd80      	pop	{r7, pc}
 8021354:	08030e24 	.word	0x08030e24
 8021358:	0802e8ac 	.word	0x0802e8ac
 802135c:	0802eb74 	.word	0x0802eb74
 8021360:	0802e900 	.word	0x0802e900
 8021364:	2001c114 	.word	0x2001c114

08021368 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8021368:	b580      	push	{r7, lr}
 802136a:	b086      	sub	sp, #24
 802136c:	af00      	add	r7, sp, #0
 802136e:	60f8      	str	r0, [r7, #12]
 8021370:	60b9      	str	r1, [r7, #8]
 8021372:	4613      	mov	r3, r2
 8021374:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8021376:	68fb      	ldr	r3, [r7, #12]
 8021378:	2b00      	cmp	r3, #0
 802137a:	d109      	bne.n	8021390 <udp_connect+0x28>
 802137c:	4b2c      	ldr	r3, [pc, #176]	; (8021430 <udp_connect+0xc8>)
 802137e:	f240 4235 	movw	r2, #1077	; 0x435
 8021382:	492c      	ldr	r1, [pc, #176]	; (8021434 <udp_connect+0xcc>)
 8021384:	482c      	ldr	r0, [pc, #176]	; (8021438 <udp_connect+0xd0>)
 8021386:	f005 faa1 	bl	80268cc <iprintf>
 802138a:	f06f 030f 	mvn.w	r3, #15
 802138e:	e04b      	b.n	8021428 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8021390:	68bb      	ldr	r3, [r7, #8]
 8021392:	2b00      	cmp	r3, #0
 8021394:	d109      	bne.n	80213aa <udp_connect+0x42>
 8021396:	4b26      	ldr	r3, [pc, #152]	; (8021430 <udp_connect+0xc8>)
 8021398:	f240 4236 	movw	r2, #1078	; 0x436
 802139c:	4927      	ldr	r1, [pc, #156]	; (802143c <udp_connect+0xd4>)
 802139e:	4826      	ldr	r0, [pc, #152]	; (8021438 <udp_connect+0xd0>)
 80213a0:	f005 fa94 	bl	80268cc <iprintf>
 80213a4:	f06f 030f 	mvn.w	r3, #15
 80213a8:	e03e      	b.n	8021428 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 80213aa:	68fb      	ldr	r3, [r7, #12]
 80213ac:	8a5b      	ldrh	r3, [r3, #18]
 80213ae:	2b00      	cmp	r3, #0
 80213b0:	d10f      	bne.n	80213d2 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80213b2:	68f9      	ldr	r1, [r7, #12]
 80213b4:	68fb      	ldr	r3, [r7, #12]
 80213b6:	8a5b      	ldrh	r3, [r3, #18]
 80213b8:	461a      	mov	r2, r3
 80213ba:	68f8      	ldr	r0, [r7, #12]
 80213bc:	f7ff ff4c 	bl	8021258 <udp_bind>
 80213c0:	4603      	mov	r3, r0
 80213c2:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80213c4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80213c8:	2b00      	cmp	r3, #0
 80213ca:	d002      	beq.n	80213d2 <udp_connect+0x6a>
      return err;
 80213cc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80213d0:	e02a      	b.n	8021428 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 80213d2:	68bb      	ldr	r3, [r7, #8]
 80213d4:	2b00      	cmp	r3, #0
 80213d6:	d002      	beq.n	80213de <udp_connect+0x76>
 80213d8:	68bb      	ldr	r3, [r7, #8]
 80213da:	681b      	ldr	r3, [r3, #0]
 80213dc:	e000      	b.n	80213e0 <udp_connect+0x78>
 80213de:	2300      	movs	r3, #0
 80213e0:	68fa      	ldr	r2, [r7, #12]
 80213e2:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 80213e4:	68fb      	ldr	r3, [r7, #12]
 80213e6:	88fa      	ldrh	r2, [r7, #6]
 80213e8:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 80213ea:	68fb      	ldr	r3, [r7, #12]
 80213ec:	7c1b      	ldrb	r3, [r3, #16]
 80213ee:	f043 0304 	orr.w	r3, r3, #4
 80213f2:	b2da      	uxtb	r2, r3
 80213f4:	68fb      	ldr	r3, [r7, #12]
 80213f6:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80213f8:	4b11      	ldr	r3, [pc, #68]	; (8021440 <udp_connect+0xd8>)
 80213fa:	681b      	ldr	r3, [r3, #0]
 80213fc:	617b      	str	r3, [r7, #20]
 80213fe:	e008      	b.n	8021412 <udp_connect+0xaa>
    if (pcb == ipcb) {
 8021400:	68fa      	ldr	r2, [r7, #12]
 8021402:	697b      	ldr	r3, [r7, #20]
 8021404:	429a      	cmp	r2, r3
 8021406:	d101      	bne.n	802140c <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8021408:	2300      	movs	r3, #0
 802140a:	e00d      	b.n	8021428 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 802140c:	697b      	ldr	r3, [r7, #20]
 802140e:	68db      	ldr	r3, [r3, #12]
 8021410:	617b      	str	r3, [r7, #20]
 8021412:	697b      	ldr	r3, [r7, #20]
 8021414:	2b00      	cmp	r3, #0
 8021416:	d1f3      	bne.n	8021400 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8021418:	4b09      	ldr	r3, [pc, #36]	; (8021440 <udp_connect+0xd8>)
 802141a:	681a      	ldr	r2, [r3, #0]
 802141c:	68fb      	ldr	r3, [r7, #12]
 802141e:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8021420:	4a07      	ldr	r2, [pc, #28]	; (8021440 <udp_connect+0xd8>)
 8021422:	68fb      	ldr	r3, [r7, #12]
 8021424:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8021426:	2300      	movs	r3, #0
}
 8021428:	4618      	mov	r0, r3
 802142a:	3718      	adds	r7, #24
 802142c:	46bd      	mov	sp, r7
 802142e:	bd80      	pop	{r7, pc}
 8021430:	0802e8ac 	.word	0x0802e8ac
 8021434:	0802eb8c 	.word	0x0802eb8c
 8021438:	0802e900 	.word	0x0802e900
 802143c:	0802eba8 	.word	0x0802eba8
 8021440:	2001c114 	.word	0x2001c114

08021444 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8021444:	b580      	push	{r7, lr}
 8021446:	b084      	sub	sp, #16
 8021448:	af00      	add	r7, sp, #0
 802144a:	60f8      	str	r0, [r7, #12]
 802144c:	60b9      	str	r1, [r7, #8]
 802144e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8021450:	68fb      	ldr	r3, [r7, #12]
 8021452:	2b00      	cmp	r3, #0
 8021454:	d107      	bne.n	8021466 <udp_recv+0x22>
 8021456:	4b08      	ldr	r3, [pc, #32]	; (8021478 <udp_recv+0x34>)
 8021458:	f240 428a 	movw	r2, #1162	; 0x48a
 802145c:	4907      	ldr	r1, [pc, #28]	; (802147c <udp_recv+0x38>)
 802145e:	4808      	ldr	r0, [pc, #32]	; (8021480 <udp_recv+0x3c>)
 8021460:	f005 fa34 	bl	80268cc <iprintf>
 8021464:	e005      	b.n	8021472 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8021466:	68fb      	ldr	r3, [r7, #12]
 8021468:	68ba      	ldr	r2, [r7, #8]
 802146a:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 802146c:	68fb      	ldr	r3, [r7, #12]
 802146e:	687a      	ldr	r2, [r7, #4]
 8021470:	61da      	str	r2, [r3, #28]
}
 8021472:	3710      	adds	r7, #16
 8021474:	46bd      	mov	sp, r7
 8021476:	bd80      	pop	{r7, pc}
 8021478:	0802e8ac 	.word	0x0802e8ac
 802147c:	0802ebe0 	.word	0x0802ebe0
 8021480:	0802e900 	.word	0x0802e900

08021484 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8021484:	b580      	push	{r7, lr}
 8021486:	b084      	sub	sp, #16
 8021488:	af00      	add	r7, sp, #0
 802148a:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 802148c:	687b      	ldr	r3, [r7, #4]
 802148e:	2b00      	cmp	r3, #0
 8021490:	d107      	bne.n	80214a2 <udp_remove+0x1e>
 8021492:	4b19      	ldr	r3, [pc, #100]	; (80214f8 <udp_remove+0x74>)
 8021494:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8021498:	4918      	ldr	r1, [pc, #96]	; (80214fc <udp_remove+0x78>)
 802149a:	4819      	ldr	r0, [pc, #100]	; (8021500 <udp_remove+0x7c>)
 802149c:	f005 fa16 	bl	80268cc <iprintf>
 80214a0:	e026      	b.n	80214f0 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 80214a2:	4b18      	ldr	r3, [pc, #96]	; (8021504 <udp_remove+0x80>)
 80214a4:	681b      	ldr	r3, [r3, #0]
 80214a6:	687a      	ldr	r2, [r7, #4]
 80214a8:	429a      	cmp	r2, r3
 80214aa:	d105      	bne.n	80214b8 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 80214ac:	4b15      	ldr	r3, [pc, #84]	; (8021504 <udp_remove+0x80>)
 80214ae:	681b      	ldr	r3, [r3, #0]
 80214b0:	68db      	ldr	r3, [r3, #12]
 80214b2:	4a14      	ldr	r2, [pc, #80]	; (8021504 <udp_remove+0x80>)
 80214b4:	6013      	str	r3, [r2, #0]
 80214b6:	e017      	b.n	80214e8 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80214b8:	4b12      	ldr	r3, [pc, #72]	; (8021504 <udp_remove+0x80>)
 80214ba:	681b      	ldr	r3, [r3, #0]
 80214bc:	60fb      	str	r3, [r7, #12]
 80214be:	e010      	b.n	80214e2 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80214c0:	68fb      	ldr	r3, [r7, #12]
 80214c2:	68db      	ldr	r3, [r3, #12]
 80214c4:	2b00      	cmp	r3, #0
 80214c6:	d009      	beq.n	80214dc <udp_remove+0x58>
 80214c8:	68fb      	ldr	r3, [r7, #12]
 80214ca:	68db      	ldr	r3, [r3, #12]
 80214cc:	687a      	ldr	r2, [r7, #4]
 80214ce:	429a      	cmp	r2, r3
 80214d0:	d104      	bne.n	80214dc <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 80214d2:	687b      	ldr	r3, [r7, #4]
 80214d4:	68da      	ldr	r2, [r3, #12]
 80214d6:	68fb      	ldr	r3, [r7, #12]
 80214d8:	60da      	str	r2, [r3, #12]
        break;
 80214da:	e005      	b.n	80214e8 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80214dc:	68fb      	ldr	r3, [r7, #12]
 80214de:	68db      	ldr	r3, [r3, #12]
 80214e0:	60fb      	str	r3, [r7, #12]
 80214e2:	68fb      	ldr	r3, [r7, #12]
 80214e4:	2b00      	cmp	r3, #0
 80214e6:	d1eb      	bne.n	80214c0 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80214e8:	6879      	ldr	r1, [r7, #4]
 80214ea:	2000      	movs	r0, #0
 80214ec:	f7f7 feb4 	bl	8019258 <memp_free>
}
 80214f0:	3710      	adds	r7, #16
 80214f2:	46bd      	mov	sp, r7
 80214f4:	bd80      	pop	{r7, pc}
 80214f6:	bf00      	nop
 80214f8:	0802e8ac 	.word	0x0802e8ac
 80214fc:	0802ebf8 	.word	0x0802ebf8
 8021500:	0802e900 	.word	0x0802e900
 8021504:	2001c114 	.word	0x2001c114

08021508 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8021508:	b580      	push	{r7, lr}
 802150a:	b082      	sub	sp, #8
 802150c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 802150e:	2000      	movs	r0, #0
 8021510:	f7f7 fe50 	bl	80191b4 <memp_malloc>
 8021514:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8021516:	687b      	ldr	r3, [r7, #4]
 8021518:	2b00      	cmp	r3, #0
 802151a:	d007      	beq.n	802152c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 802151c:	2220      	movs	r2, #32
 802151e:	2100      	movs	r1, #0
 8021520:	6878      	ldr	r0, [r7, #4]
 8021522:	f004 fb27 	bl	8025b74 <memset>
    pcb->ttl = UDP_TTL;
 8021526:	687b      	ldr	r3, [r7, #4]
 8021528:	22ff      	movs	r2, #255	; 0xff
 802152a:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 802152c:	687b      	ldr	r3, [r7, #4]
}
 802152e:	4618      	mov	r0, r3
 8021530:	3708      	adds	r7, #8
 8021532:	46bd      	mov	sp, r7
 8021534:	bd80      	pop	{r7, pc}
	...

08021538 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8021538:	b480      	push	{r7}
 802153a:	b085      	sub	sp, #20
 802153c:	af00      	add	r7, sp, #0
 802153e:	6078      	str	r0, [r7, #4]
 8021540:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8021542:	687b      	ldr	r3, [r7, #4]
 8021544:	2b00      	cmp	r3, #0
 8021546:	d01e      	beq.n	8021586 <udp_netif_ip_addr_changed+0x4e>
 8021548:	687b      	ldr	r3, [r7, #4]
 802154a:	681b      	ldr	r3, [r3, #0]
 802154c:	2b00      	cmp	r3, #0
 802154e:	d01a      	beq.n	8021586 <udp_netif_ip_addr_changed+0x4e>
 8021550:	683b      	ldr	r3, [r7, #0]
 8021552:	2b00      	cmp	r3, #0
 8021554:	d017      	beq.n	8021586 <udp_netif_ip_addr_changed+0x4e>
 8021556:	683b      	ldr	r3, [r7, #0]
 8021558:	681b      	ldr	r3, [r3, #0]
 802155a:	2b00      	cmp	r3, #0
 802155c:	d013      	beq.n	8021586 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 802155e:	4b0d      	ldr	r3, [pc, #52]	; (8021594 <udp_netif_ip_addr_changed+0x5c>)
 8021560:	681b      	ldr	r3, [r3, #0]
 8021562:	60fb      	str	r3, [r7, #12]
 8021564:	e00c      	b.n	8021580 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8021566:	68fb      	ldr	r3, [r7, #12]
 8021568:	681a      	ldr	r2, [r3, #0]
 802156a:	687b      	ldr	r3, [r7, #4]
 802156c:	681b      	ldr	r3, [r3, #0]
 802156e:	429a      	cmp	r2, r3
 8021570:	d103      	bne.n	802157a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8021572:	683b      	ldr	r3, [r7, #0]
 8021574:	681a      	ldr	r2, [r3, #0]
 8021576:	68fb      	ldr	r3, [r7, #12]
 8021578:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 802157a:	68fb      	ldr	r3, [r7, #12]
 802157c:	68db      	ldr	r3, [r3, #12]
 802157e:	60fb      	str	r3, [r7, #12]
 8021580:	68fb      	ldr	r3, [r7, #12]
 8021582:	2b00      	cmp	r3, #0
 8021584:	d1ef      	bne.n	8021566 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8021586:	bf00      	nop
 8021588:	3714      	adds	r7, #20
 802158a:	46bd      	mov	sp, r7
 802158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021590:	4770      	bx	lr
 8021592:	bf00      	nop
 8021594:	2001c114 	.word	0x2001c114

08021598 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8021598:	b580      	push	{r7, lr}
 802159a:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 802159c:	4b20      	ldr	r3, [pc, #128]	; (8021620 <dhcp_inc_pcb_refcount+0x88>)
 802159e:	781b      	ldrb	r3, [r3, #0]
 80215a0:	2b00      	cmp	r3, #0
 80215a2:	d133      	bne.n	802160c <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 80215a4:	4b1f      	ldr	r3, [pc, #124]	; (8021624 <dhcp_inc_pcb_refcount+0x8c>)
 80215a6:	681b      	ldr	r3, [r3, #0]
 80215a8:	2b00      	cmp	r3, #0
 80215aa:	d005      	beq.n	80215b8 <dhcp_inc_pcb_refcount+0x20>
 80215ac:	4b1e      	ldr	r3, [pc, #120]	; (8021628 <dhcp_inc_pcb_refcount+0x90>)
 80215ae:	22e5      	movs	r2, #229	; 0xe5
 80215b0:	491e      	ldr	r1, [pc, #120]	; (802162c <dhcp_inc_pcb_refcount+0x94>)
 80215b2:	481f      	ldr	r0, [pc, #124]	; (8021630 <dhcp_inc_pcb_refcount+0x98>)
 80215b4:	f005 f98a 	bl	80268cc <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 80215b8:	f7ff ffa6 	bl	8021508 <udp_new>
 80215bc:	4603      	mov	r3, r0
 80215be:	4a19      	ldr	r2, [pc, #100]	; (8021624 <dhcp_inc_pcb_refcount+0x8c>)
 80215c0:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 80215c2:	4b18      	ldr	r3, [pc, #96]	; (8021624 <dhcp_inc_pcb_refcount+0x8c>)
 80215c4:	681b      	ldr	r3, [r3, #0]
 80215c6:	2b00      	cmp	r3, #0
 80215c8:	d102      	bne.n	80215d0 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 80215ca:	f04f 33ff 	mov.w	r3, #4294967295
 80215ce:	e024      	b.n	802161a <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 80215d0:	4b14      	ldr	r3, [pc, #80]	; (8021624 <dhcp_inc_pcb_refcount+0x8c>)
 80215d2:	681b      	ldr	r3, [r3, #0]
 80215d4:	7a5a      	ldrb	r2, [r3, #9]
 80215d6:	4b13      	ldr	r3, [pc, #76]	; (8021624 <dhcp_inc_pcb_refcount+0x8c>)
 80215d8:	681b      	ldr	r3, [r3, #0]
 80215da:	f042 0220 	orr.w	r2, r2, #32
 80215de:	b2d2      	uxtb	r2, r2
 80215e0:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 80215e2:	4b10      	ldr	r3, [pc, #64]	; (8021624 <dhcp_inc_pcb_refcount+0x8c>)
 80215e4:	681b      	ldr	r3, [r3, #0]
 80215e6:	2244      	movs	r2, #68	; 0x44
 80215e8:	4912      	ldr	r1, [pc, #72]	; (8021634 <dhcp_inc_pcb_refcount+0x9c>)
 80215ea:	4618      	mov	r0, r3
 80215ec:	f7ff fe34 	bl	8021258 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 80215f0:	4b0c      	ldr	r3, [pc, #48]	; (8021624 <dhcp_inc_pcb_refcount+0x8c>)
 80215f2:	681b      	ldr	r3, [r3, #0]
 80215f4:	2243      	movs	r2, #67	; 0x43
 80215f6:	490f      	ldr	r1, [pc, #60]	; (8021634 <dhcp_inc_pcb_refcount+0x9c>)
 80215f8:	4618      	mov	r0, r3
 80215fa:	f7ff feb5 	bl	8021368 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 80215fe:	4b09      	ldr	r3, [pc, #36]	; (8021624 <dhcp_inc_pcb_refcount+0x8c>)
 8021600:	681b      	ldr	r3, [r3, #0]
 8021602:	2200      	movs	r2, #0
 8021604:	490c      	ldr	r1, [pc, #48]	; (8021638 <dhcp_inc_pcb_refcount+0xa0>)
 8021606:	4618      	mov	r0, r3
 8021608:	f7ff ff1c 	bl	8021444 <udp_recv>
  }

  dhcp_pcb_refcount++;
 802160c:	4b04      	ldr	r3, [pc, #16]	; (8021620 <dhcp_inc_pcb_refcount+0x88>)
 802160e:	781b      	ldrb	r3, [r3, #0]
 8021610:	3301      	adds	r3, #1
 8021612:	b2da      	uxtb	r2, r3
 8021614:	4b02      	ldr	r3, [pc, #8]	; (8021620 <dhcp_inc_pcb_refcount+0x88>)
 8021616:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8021618:	2300      	movs	r3, #0
}
 802161a:	4618      	mov	r0, r3
 802161c:	bd80      	pop	{r7, pc}
 802161e:	bf00      	nop
 8021620:	20013c70 	.word	0x20013c70
 8021624:	20013c6c 	.word	0x20013c6c
 8021628:	0802ec10 	.word	0x0802ec10
 802162c:	0802ec48 	.word	0x0802ec48
 8021630:	0802ec70 	.word	0x0802ec70
 8021634:	08030e24 	.word	0x08030e24
 8021638:	08022ecd 	.word	0x08022ecd

0802163c <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 802163c:	b580      	push	{r7, lr}
 802163e:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8021640:	4b0e      	ldr	r3, [pc, #56]	; (802167c <dhcp_dec_pcb_refcount+0x40>)
 8021642:	781b      	ldrb	r3, [r3, #0]
 8021644:	2b00      	cmp	r3, #0
 8021646:	d105      	bne.n	8021654 <dhcp_dec_pcb_refcount+0x18>
 8021648:	4b0d      	ldr	r3, [pc, #52]	; (8021680 <dhcp_dec_pcb_refcount+0x44>)
 802164a:	22ff      	movs	r2, #255	; 0xff
 802164c:	490d      	ldr	r1, [pc, #52]	; (8021684 <dhcp_dec_pcb_refcount+0x48>)
 802164e:	480e      	ldr	r0, [pc, #56]	; (8021688 <dhcp_dec_pcb_refcount+0x4c>)
 8021650:	f005 f93c 	bl	80268cc <iprintf>
  dhcp_pcb_refcount--;
 8021654:	4b09      	ldr	r3, [pc, #36]	; (802167c <dhcp_dec_pcb_refcount+0x40>)
 8021656:	781b      	ldrb	r3, [r3, #0]
 8021658:	3b01      	subs	r3, #1
 802165a:	b2da      	uxtb	r2, r3
 802165c:	4b07      	ldr	r3, [pc, #28]	; (802167c <dhcp_dec_pcb_refcount+0x40>)
 802165e:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8021660:	4b06      	ldr	r3, [pc, #24]	; (802167c <dhcp_dec_pcb_refcount+0x40>)
 8021662:	781b      	ldrb	r3, [r3, #0]
 8021664:	2b00      	cmp	r3, #0
 8021666:	d107      	bne.n	8021678 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8021668:	4b08      	ldr	r3, [pc, #32]	; (802168c <dhcp_dec_pcb_refcount+0x50>)
 802166a:	681b      	ldr	r3, [r3, #0]
 802166c:	4618      	mov	r0, r3
 802166e:	f7ff ff09 	bl	8021484 <udp_remove>
    dhcp_pcb = NULL;
 8021672:	4b06      	ldr	r3, [pc, #24]	; (802168c <dhcp_dec_pcb_refcount+0x50>)
 8021674:	2200      	movs	r2, #0
 8021676:	601a      	str	r2, [r3, #0]
  }
}
 8021678:	bf00      	nop
 802167a:	bd80      	pop	{r7, pc}
 802167c:	20013c70 	.word	0x20013c70
 8021680:	0802ec10 	.word	0x0802ec10
 8021684:	0802ec98 	.word	0x0802ec98
 8021688:	0802ec70 	.word	0x0802ec70
 802168c:	20013c6c 	.word	0x20013c6c

08021690 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8021690:	b580      	push	{r7, lr}
 8021692:	b084      	sub	sp, #16
 8021694:	af00      	add	r7, sp, #0
 8021696:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8021698:	687b      	ldr	r3, [r7, #4]
 802169a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802169c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 802169e:	210c      	movs	r1, #12
 80216a0:	68f8      	ldr	r0, [r7, #12]
 80216a2:	f001 f855 	bl	8022750 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80216a6:	4b06      	ldr	r3, [pc, #24]	; (80216c0 <dhcp_handle_nak+0x30>)
 80216a8:	4a05      	ldr	r2, [pc, #20]	; (80216c0 <dhcp_handle_nak+0x30>)
 80216aa:	4905      	ldr	r1, [pc, #20]	; (80216c0 <dhcp_handle_nak+0x30>)
 80216ac:	6878      	ldr	r0, [r7, #4]
 80216ae:	f7f7 ff75 	bl	801959c <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 80216b2:	6878      	ldr	r0, [r7, #4]
 80216b4:	f000 fc48 	bl	8021f48 <dhcp_discover>
}
 80216b8:	bf00      	nop
 80216ba:	3710      	adds	r7, #16
 80216bc:	46bd      	mov	sp, r7
 80216be:	bd80      	pop	{r7, pc}
 80216c0:	08030e24 	.word	0x08030e24

080216c4 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 80216c4:	b580      	push	{r7, lr}
 80216c6:	b084      	sub	sp, #16
 80216c8:	af00      	add	r7, sp, #0
 80216ca:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80216cc:	687b      	ldr	r3, [r7, #4]
 80216ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80216d0:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 80216d2:	2108      	movs	r1, #8
 80216d4:	68f8      	ldr	r0, [r7, #12]
 80216d6:	f001 f83b 	bl	8022750 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 80216da:	68fb      	ldr	r3, [r7, #12]
 80216dc:	331c      	adds	r3, #28
 80216de:	2200      	movs	r2, #0
 80216e0:	4619      	mov	r1, r3
 80216e2:	6878      	ldr	r0, [r7, #4]
 80216e4:	f002 fb3c 	bl	8023d60 <etharp_query>
 80216e8:	4603      	mov	r3, r0
 80216ea:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 80216ec:	68fb      	ldr	r3, [r7, #12]
 80216ee:	799b      	ldrb	r3, [r3, #6]
 80216f0:	2bff      	cmp	r3, #255	; 0xff
 80216f2:	d005      	beq.n	8021700 <dhcp_check+0x3c>
    dhcp->tries++;
 80216f4:	68fb      	ldr	r3, [r7, #12]
 80216f6:	799b      	ldrb	r3, [r3, #6]
 80216f8:	3301      	adds	r3, #1
 80216fa:	b2da      	uxtb	r2, r3
 80216fc:	68fb      	ldr	r3, [r7, #12]
 80216fe:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8021700:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8021704:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8021706:	893b      	ldrh	r3, [r7, #8]
 8021708:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 802170c:	4a06      	ldr	r2, [pc, #24]	; (8021728 <dhcp_check+0x64>)
 802170e:	fb82 1203 	smull	r1, r2, r2, r3
 8021712:	1152      	asrs	r2, r2, #5
 8021714:	17db      	asrs	r3, r3, #31
 8021716:	1ad3      	subs	r3, r2, r3
 8021718:	b29a      	uxth	r2, r3
 802171a:	68fb      	ldr	r3, [r7, #12]
 802171c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 802171e:	bf00      	nop
 8021720:	3710      	adds	r7, #16
 8021722:	46bd      	mov	sp, r7
 8021724:	bd80      	pop	{r7, pc}
 8021726:	bf00      	nop
 8021728:	10624dd3 	.word	0x10624dd3

0802172c <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 802172c:	b580      	push	{r7, lr}
 802172e:	b084      	sub	sp, #16
 8021730:	af00      	add	r7, sp, #0
 8021732:	6078      	str	r0, [r7, #4]
 8021734:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8021736:	687b      	ldr	r3, [r7, #4]
 8021738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802173a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 802173c:	4b0c      	ldr	r3, [pc, #48]	; (8021770 <dhcp_handle_offer+0x44>)
 802173e:	789b      	ldrb	r3, [r3, #2]
 8021740:	2b00      	cmp	r3, #0
 8021742:	d011      	beq.n	8021768 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8021744:	68fb      	ldr	r3, [r7, #12]
 8021746:	2200      	movs	r2, #0
 8021748:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 802174a:	4b0a      	ldr	r3, [pc, #40]	; (8021774 <dhcp_handle_offer+0x48>)
 802174c:	689b      	ldr	r3, [r3, #8]
 802174e:	4618      	mov	r0, r3
 8021750:	f7f7 f831 	bl	80187b6 <lwip_htonl>
 8021754:	4602      	mov	r2, r0
 8021756:	68fb      	ldr	r3, [r7, #12]
 8021758:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 802175a:	683b      	ldr	r3, [r7, #0]
 802175c:	691a      	ldr	r2, [r3, #16]
 802175e:	68fb      	ldr	r3, [r7, #12]
 8021760:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8021762:	6878      	ldr	r0, [r7, #4]
 8021764:	f000 f808 	bl	8021778 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8021768:	bf00      	nop
 802176a:	3710      	adds	r7, #16
 802176c:	46bd      	mov	sp, r7
 802176e:	bd80      	pop	{r7, pc}
 8021770:	2001c118 	.word	0x2001c118
 8021774:	2001c120 	.word	0x2001c120

08021778 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8021778:	b5b0      	push	{r4, r5, r7, lr}
 802177a:	b08a      	sub	sp, #40	; 0x28
 802177c:	af02      	add	r7, sp, #8
 802177e:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8021780:	687b      	ldr	r3, [r7, #4]
 8021782:	2b00      	cmp	r3, #0
 8021784:	d109      	bne.n	802179a <dhcp_select+0x22>
 8021786:	4b71      	ldr	r3, [pc, #452]	; (802194c <dhcp_select+0x1d4>)
 8021788:	f240 1277 	movw	r2, #375	; 0x177
 802178c:	4970      	ldr	r1, [pc, #448]	; (8021950 <dhcp_select+0x1d8>)
 802178e:	4871      	ldr	r0, [pc, #452]	; (8021954 <dhcp_select+0x1dc>)
 8021790:	f005 f89c 	bl	80268cc <iprintf>
 8021794:	f06f 030f 	mvn.w	r3, #15
 8021798:	e0d3      	b.n	8021942 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 802179a:	687b      	ldr	r3, [r7, #4]
 802179c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802179e:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 80217a0:	69bb      	ldr	r3, [r7, #24]
 80217a2:	2b00      	cmp	r3, #0
 80217a4:	d109      	bne.n	80217ba <dhcp_select+0x42>
 80217a6:	4b69      	ldr	r3, [pc, #420]	; (802194c <dhcp_select+0x1d4>)
 80217a8:	f240 1279 	movw	r2, #377	; 0x179
 80217ac:	496a      	ldr	r1, [pc, #424]	; (8021958 <dhcp_select+0x1e0>)
 80217ae:	4869      	ldr	r0, [pc, #420]	; (8021954 <dhcp_select+0x1dc>)
 80217b0:	f005 f88c 	bl	80268cc <iprintf>
 80217b4:	f06f 0305 	mvn.w	r3, #5
 80217b8:	e0c3      	b.n	8021942 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 80217ba:	2101      	movs	r1, #1
 80217bc:	69b8      	ldr	r0, [r7, #24]
 80217be:	f000 ffc7 	bl	8022750 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80217c2:	f107 030c 	add.w	r3, r7, #12
 80217c6:	2203      	movs	r2, #3
 80217c8:	69b9      	ldr	r1, [r7, #24]
 80217ca:	6878      	ldr	r0, [r7, #4]
 80217cc:	f001 fc4c 	bl	8023068 <dhcp_create_msg>
 80217d0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80217d2:	697b      	ldr	r3, [r7, #20]
 80217d4:	2b00      	cmp	r3, #0
 80217d6:	f000 8085 	beq.w	80218e4 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80217da:	697b      	ldr	r3, [r7, #20]
 80217dc:	685b      	ldr	r3, [r3, #4]
 80217de:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80217e0:	89b8      	ldrh	r0, [r7, #12]
 80217e2:	693b      	ldr	r3, [r7, #16]
 80217e4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80217e8:	2302      	movs	r3, #2
 80217ea:	2239      	movs	r2, #57	; 0x39
 80217ec:	f000 ffca 	bl	8022784 <dhcp_option>
 80217f0:	4603      	mov	r3, r0
 80217f2:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80217f4:	89b8      	ldrh	r0, [r7, #12]
 80217f6:	693b      	ldr	r3, [r7, #16]
 80217f8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80217fc:	687b      	ldr	r3, [r7, #4]
 80217fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8021800:	461a      	mov	r2, r3
 8021802:	f001 f819 	bl	8022838 <dhcp_option_short>
 8021806:	4603      	mov	r3, r0
 8021808:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 802180a:	89b8      	ldrh	r0, [r7, #12]
 802180c:	693b      	ldr	r3, [r7, #16]
 802180e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8021812:	2304      	movs	r3, #4
 8021814:	2232      	movs	r2, #50	; 0x32
 8021816:	f000 ffb5 	bl	8022784 <dhcp_option>
 802181a:	4603      	mov	r3, r0
 802181c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 802181e:	89bc      	ldrh	r4, [r7, #12]
 8021820:	693b      	ldr	r3, [r7, #16]
 8021822:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8021826:	69bb      	ldr	r3, [r7, #24]
 8021828:	69db      	ldr	r3, [r3, #28]
 802182a:	4618      	mov	r0, r3
 802182c:	f7f6 ffc3 	bl	80187b6 <lwip_htonl>
 8021830:	4603      	mov	r3, r0
 8021832:	461a      	mov	r2, r3
 8021834:	4629      	mov	r1, r5
 8021836:	4620      	mov	r0, r4
 8021838:	f001 f830 	bl	802289c <dhcp_option_long>
 802183c:	4603      	mov	r3, r0
 802183e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8021840:	89b8      	ldrh	r0, [r7, #12]
 8021842:	693b      	ldr	r3, [r7, #16]
 8021844:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8021848:	2304      	movs	r3, #4
 802184a:	2236      	movs	r2, #54	; 0x36
 802184c:	f000 ff9a 	bl	8022784 <dhcp_option>
 8021850:	4603      	mov	r3, r0
 8021852:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8021854:	89bc      	ldrh	r4, [r7, #12]
 8021856:	693b      	ldr	r3, [r7, #16]
 8021858:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 802185c:	69bb      	ldr	r3, [r7, #24]
 802185e:	699b      	ldr	r3, [r3, #24]
 8021860:	4618      	mov	r0, r3
 8021862:	f7f6 ffa8 	bl	80187b6 <lwip_htonl>
 8021866:	4603      	mov	r3, r0
 8021868:	461a      	mov	r2, r3
 802186a:	4629      	mov	r1, r5
 802186c:	4620      	mov	r0, r4
 802186e:	f001 f815 	bl	802289c <dhcp_option_long>
 8021872:	4603      	mov	r3, r0
 8021874:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8021876:	89b8      	ldrh	r0, [r7, #12]
 8021878:	693b      	ldr	r3, [r7, #16]
 802187a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 802187e:	2303      	movs	r3, #3
 8021880:	2237      	movs	r2, #55	; 0x37
 8021882:	f000 ff7f 	bl	8022784 <dhcp_option>
 8021886:	4603      	mov	r3, r0
 8021888:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 802188a:	2300      	movs	r3, #0
 802188c:	77bb      	strb	r3, [r7, #30]
 802188e:	e00e      	b.n	80218ae <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8021890:	89b8      	ldrh	r0, [r7, #12]
 8021892:	693b      	ldr	r3, [r7, #16]
 8021894:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8021898:	7fbb      	ldrb	r3, [r7, #30]
 802189a:	4a30      	ldr	r2, [pc, #192]	; (802195c <dhcp_select+0x1e4>)
 802189c:	5cd3      	ldrb	r3, [r2, r3]
 802189e:	461a      	mov	r2, r3
 80218a0:	f000 ffa4 	bl	80227ec <dhcp_option_byte>
 80218a4:	4603      	mov	r3, r0
 80218a6:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80218a8:	7fbb      	ldrb	r3, [r7, #30]
 80218aa:	3301      	adds	r3, #1
 80218ac:	77bb      	strb	r3, [r7, #30]
 80218ae:	7fbb      	ldrb	r3, [r7, #30]
 80218b0:	2b02      	cmp	r3, #2
 80218b2:	d9ed      	bls.n	8021890 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80218b4:	89b8      	ldrh	r0, [r7, #12]
 80218b6:	693b      	ldr	r3, [r7, #16]
 80218b8:	33f0      	adds	r3, #240	; 0xf0
 80218ba:	697a      	ldr	r2, [r7, #20]
 80218bc:	4619      	mov	r1, r3
 80218be:	f001 fca9 	bl	8023214 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80218c2:	4b27      	ldr	r3, [pc, #156]	; (8021960 <dhcp_select+0x1e8>)
 80218c4:	6818      	ldr	r0, [r3, #0]
 80218c6:	4b27      	ldr	r3, [pc, #156]	; (8021964 <dhcp_select+0x1ec>)
 80218c8:	9301      	str	r3, [sp, #4]
 80218ca:	687b      	ldr	r3, [r7, #4]
 80218cc:	9300      	str	r3, [sp, #0]
 80218ce:	2343      	movs	r3, #67	; 0x43
 80218d0:	4a25      	ldr	r2, [pc, #148]	; (8021968 <dhcp_select+0x1f0>)
 80218d2:	6979      	ldr	r1, [r7, #20]
 80218d4:	f7ff fbda 	bl	802108c <udp_sendto_if_src>
 80218d8:	4603      	mov	r3, r0
 80218da:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80218dc:	6978      	ldr	r0, [r7, #20]
 80218de:	f7f8 fb6b 	bl	8019fb8 <pbuf_free>
 80218e2:	e001      	b.n	80218e8 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80218e4:	23ff      	movs	r3, #255	; 0xff
 80218e6:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80218e8:	69bb      	ldr	r3, [r7, #24]
 80218ea:	799b      	ldrb	r3, [r3, #6]
 80218ec:	2bff      	cmp	r3, #255	; 0xff
 80218ee:	d005      	beq.n	80218fc <dhcp_select+0x184>
    dhcp->tries++;
 80218f0:	69bb      	ldr	r3, [r7, #24]
 80218f2:	799b      	ldrb	r3, [r3, #6]
 80218f4:	3301      	adds	r3, #1
 80218f6:	b2da      	uxtb	r2, r3
 80218f8:	69bb      	ldr	r3, [r7, #24]
 80218fa:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80218fc:	69bb      	ldr	r3, [r7, #24]
 80218fe:	799b      	ldrb	r3, [r3, #6]
 8021900:	2b05      	cmp	r3, #5
 8021902:	d80d      	bhi.n	8021920 <dhcp_select+0x1a8>
 8021904:	69bb      	ldr	r3, [r7, #24]
 8021906:	799b      	ldrb	r3, [r3, #6]
 8021908:	461a      	mov	r2, r3
 802190a:	2301      	movs	r3, #1
 802190c:	4093      	lsls	r3, r2
 802190e:	b29b      	uxth	r3, r3
 8021910:	461a      	mov	r2, r3
 8021912:	0152      	lsls	r2, r2, #5
 8021914:	1ad2      	subs	r2, r2, r3
 8021916:	0092      	lsls	r2, r2, #2
 8021918:	4413      	add	r3, r2
 802191a:	00db      	lsls	r3, r3, #3
 802191c:	b29b      	uxth	r3, r3
 802191e:	e001      	b.n	8021924 <dhcp_select+0x1ac>
 8021920:	f64e 2360 	movw	r3, #60000	; 0xea60
 8021924:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8021926:	89fb      	ldrh	r3, [r7, #14]
 8021928:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 802192c:	4a0f      	ldr	r2, [pc, #60]	; (802196c <dhcp_select+0x1f4>)
 802192e:	fb82 1203 	smull	r1, r2, r2, r3
 8021932:	1152      	asrs	r2, r2, #5
 8021934:	17db      	asrs	r3, r3, #31
 8021936:	1ad3      	subs	r3, r2, r3
 8021938:	b29a      	uxth	r2, r3
 802193a:	69bb      	ldr	r3, [r7, #24]
 802193c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 802193e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8021942:	4618      	mov	r0, r3
 8021944:	3720      	adds	r7, #32
 8021946:	46bd      	mov	sp, r7
 8021948:	bdb0      	pop	{r4, r5, r7, pc}
 802194a:	bf00      	nop
 802194c:	0802ec10 	.word	0x0802ec10
 8021950:	0802ecbc 	.word	0x0802ecbc
 8021954:	0802ec70 	.word	0x0802ec70
 8021958:	0802ecd8 	.word	0x0802ecd8
 802195c:	1000006c 	.word	0x1000006c
 8021960:	20013c6c 	.word	0x20013c6c
 8021964:	08030e24 	.word	0x08030e24
 8021968:	08030e28 	.word	0x08030e28
 802196c:	10624dd3 	.word	0x10624dd3

08021970 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8021970:	b580      	push	{r7, lr}
 8021972:	b082      	sub	sp, #8
 8021974:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8021976:	4b27      	ldr	r3, [pc, #156]	; (8021a14 <dhcp_coarse_tmr+0xa4>)
 8021978:	681b      	ldr	r3, [r3, #0]
 802197a:	607b      	str	r3, [r7, #4]
 802197c:	e042      	b.n	8021a04 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 802197e:	687b      	ldr	r3, [r7, #4]
 8021980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021982:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8021984:	683b      	ldr	r3, [r7, #0]
 8021986:	2b00      	cmp	r3, #0
 8021988:	d039      	beq.n	80219fe <dhcp_coarse_tmr+0x8e>
 802198a:	683b      	ldr	r3, [r7, #0]
 802198c:	795b      	ldrb	r3, [r3, #5]
 802198e:	2b00      	cmp	r3, #0
 8021990:	d035      	beq.n	80219fe <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8021992:	683b      	ldr	r3, [r7, #0]
 8021994:	8a9b      	ldrh	r3, [r3, #20]
 8021996:	2b00      	cmp	r3, #0
 8021998:	d012      	beq.n	80219c0 <dhcp_coarse_tmr+0x50>
 802199a:	683b      	ldr	r3, [r7, #0]
 802199c:	8a5b      	ldrh	r3, [r3, #18]
 802199e:	3301      	adds	r3, #1
 80219a0:	b29a      	uxth	r2, r3
 80219a2:	683b      	ldr	r3, [r7, #0]
 80219a4:	825a      	strh	r2, [r3, #18]
 80219a6:	683b      	ldr	r3, [r7, #0]
 80219a8:	8a5a      	ldrh	r2, [r3, #18]
 80219aa:	683b      	ldr	r3, [r7, #0]
 80219ac:	8a9b      	ldrh	r3, [r3, #20]
 80219ae:	429a      	cmp	r2, r3
 80219b0:	d106      	bne.n	80219c0 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 80219b2:	6878      	ldr	r0, [r7, #4]
 80219b4:	f000 fe32 	bl	802261c <dhcp_release_and_stop>
        dhcp_start(netif);
 80219b8:	6878      	ldr	r0, [r7, #4]
 80219ba:	f000 f969 	bl	8021c90 <dhcp_start>
 80219be:	e01e      	b.n	80219fe <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 80219c0:	683b      	ldr	r3, [r7, #0]
 80219c2:	8a1b      	ldrh	r3, [r3, #16]
 80219c4:	2b00      	cmp	r3, #0
 80219c6:	d00b      	beq.n	80219e0 <dhcp_coarse_tmr+0x70>
 80219c8:	683b      	ldr	r3, [r7, #0]
 80219ca:	8a1b      	ldrh	r3, [r3, #16]
 80219cc:	1e5a      	subs	r2, r3, #1
 80219ce:	b291      	uxth	r1, r2
 80219d0:	683a      	ldr	r2, [r7, #0]
 80219d2:	8211      	strh	r1, [r2, #16]
 80219d4:	2b01      	cmp	r3, #1
 80219d6:	d103      	bne.n	80219e0 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 80219d8:	6878      	ldr	r0, [r7, #4]
 80219da:	f000 f8c6 	bl	8021b6a <dhcp_t2_timeout>
 80219de:	e00e      	b.n	80219fe <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 80219e0:	683b      	ldr	r3, [r7, #0]
 80219e2:	89db      	ldrh	r3, [r3, #14]
 80219e4:	2b00      	cmp	r3, #0
 80219e6:	d00a      	beq.n	80219fe <dhcp_coarse_tmr+0x8e>
 80219e8:	683b      	ldr	r3, [r7, #0]
 80219ea:	89db      	ldrh	r3, [r3, #14]
 80219ec:	1e5a      	subs	r2, r3, #1
 80219ee:	b291      	uxth	r1, r2
 80219f0:	683a      	ldr	r2, [r7, #0]
 80219f2:	81d1      	strh	r1, [r2, #14]
 80219f4:	2b01      	cmp	r3, #1
 80219f6:	d102      	bne.n	80219fe <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 80219f8:	6878      	ldr	r0, [r7, #4]
 80219fa:	f000 f888 	bl	8021b0e <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 80219fe:	687b      	ldr	r3, [r7, #4]
 8021a00:	681b      	ldr	r3, [r3, #0]
 8021a02:	607b      	str	r3, [r7, #4]
 8021a04:	687b      	ldr	r3, [r7, #4]
 8021a06:	2b00      	cmp	r3, #0
 8021a08:	d1b9      	bne.n	802197e <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8021a0a:	bf00      	nop
 8021a0c:	bf00      	nop
 8021a0e:	3708      	adds	r7, #8
 8021a10:	46bd      	mov	sp, r7
 8021a12:	bd80      	pop	{r7, pc}
 8021a14:	2001c0ec 	.word	0x2001c0ec

08021a18 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8021a18:	b580      	push	{r7, lr}
 8021a1a:	b082      	sub	sp, #8
 8021a1c:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8021a1e:	4b16      	ldr	r3, [pc, #88]	; (8021a78 <dhcp_fine_tmr+0x60>)
 8021a20:	681b      	ldr	r3, [r3, #0]
 8021a22:	607b      	str	r3, [r7, #4]
 8021a24:	e020      	b.n	8021a68 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8021a26:	687b      	ldr	r3, [r7, #4]
 8021a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021a2a:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8021a2c:	683b      	ldr	r3, [r7, #0]
 8021a2e:	2b00      	cmp	r3, #0
 8021a30:	d017      	beq.n	8021a62 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8021a32:	683b      	ldr	r3, [r7, #0]
 8021a34:	891b      	ldrh	r3, [r3, #8]
 8021a36:	2b01      	cmp	r3, #1
 8021a38:	d906      	bls.n	8021a48 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8021a3a:	683b      	ldr	r3, [r7, #0]
 8021a3c:	891b      	ldrh	r3, [r3, #8]
 8021a3e:	3b01      	subs	r3, #1
 8021a40:	b29a      	uxth	r2, r3
 8021a42:	683b      	ldr	r3, [r7, #0]
 8021a44:	811a      	strh	r2, [r3, #8]
 8021a46:	e00c      	b.n	8021a62 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8021a48:	683b      	ldr	r3, [r7, #0]
 8021a4a:	891b      	ldrh	r3, [r3, #8]
 8021a4c:	2b01      	cmp	r3, #1
 8021a4e:	d108      	bne.n	8021a62 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8021a50:	683b      	ldr	r3, [r7, #0]
 8021a52:	891b      	ldrh	r3, [r3, #8]
 8021a54:	3b01      	subs	r3, #1
 8021a56:	b29a      	uxth	r2, r3
 8021a58:	683b      	ldr	r3, [r7, #0]
 8021a5a:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8021a5c:	6878      	ldr	r0, [r7, #4]
 8021a5e:	f000 f80d 	bl	8021a7c <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8021a62:	687b      	ldr	r3, [r7, #4]
 8021a64:	681b      	ldr	r3, [r3, #0]
 8021a66:	607b      	str	r3, [r7, #4]
 8021a68:	687b      	ldr	r3, [r7, #4]
 8021a6a:	2b00      	cmp	r3, #0
 8021a6c:	d1db      	bne.n	8021a26 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8021a6e:	bf00      	nop
 8021a70:	bf00      	nop
 8021a72:	3708      	adds	r7, #8
 8021a74:	46bd      	mov	sp, r7
 8021a76:	bd80      	pop	{r7, pc}
 8021a78:	2001c0ec 	.word	0x2001c0ec

08021a7c <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8021a7c:	b580      	push	{r7, lr}
 8021a7e:	b084      	sub	sp, #16
 8021a80:	af00      	add	r7, sp, #0
 8021a82:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8021a84:	687b      	ldr	r3, [r7, #4]
 8021a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021a88:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8021a8a:	68fb      	ldr	r3, [r7, #12]
 8021a8c:	795b      	ldrb	r3, [r3, #5]
 8021a8e:	2b0c      	cmp	r3, #12
 8021a90:	d003      	beq.n	8021a9a <dhcp_timeout+0x1e>
 8021a92:	68fb      	ldr	r3, [r7, #12]
 8021a94:	795b      	ldrb	r3, [r3, #5]
 8021a96:	2b06      	cmp	r3, #6
 8021a98:	d103      	bne.n	8021aa2 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8021a9a:	6878      	ldr	r0, [r7, #4]
 8021a9c:	f000 fa54 	bl	8021f48 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8021aa0:	e031      	b.n	8021b06 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8021aa2:	68fb      	ldr	r3, [r7, #12]
 8021aa4:	795b      	ldrb	r3, [r3, #5]
 8021aa6:	2b01      	cmp	r3, #1
 8021aa8:	d10e      	bne.n	8021ac8 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8021aaa:	68fb      	ldr	r3, [r7, #12]
 8021aac:	799b      	ldrb	r3, [r3, #6]
 8021aae:	2b05      	cmp	r3, #5
 8021ab0:	d803      	bhi.n	8021aba <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8021ab2:	6878      	ldr	r0, [r7, #4]
 8021ab4:	f7ff fe60 	bl	8021778 <dhcp_select>
}
 8021ab8:	e025      	b.n	8021b06 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8021aba:	6878      	ldr	r0, [r7, #4]
 8021abc:	f000 fdae 	bl	802261c <dhcp_release_and_stop>
      dhcp_start(netif);
 8021ac0:	6878      	ldr	r0, [r7, #4]
 8021ac2:	f000 f8e5 	bl	8021c90 <dhcp_start>
}
 8021ac6:	e01e      	b.n	8021b06 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8021ac8:	68fb      	ldr	r3, [r7, #12]
 8021aca:	795b      	ldrb	r3, [r3, #5]
 8021acc:	2b08      	cmp	r3, #8
 8021ace:	d10b      	bne.n	8021ae8 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8021ad0:	68fb      	ldr	r3, [r7, #12]
 8021ad2:	799b      	ldrb	r3, [r3, #6]
 8021ad4:	2b01      	cmp	r3, #1
 8021ad6:	d803      	bhi.n	8021ae0 <dhcp_timeout+0x64>
      dhcp_check(netif);
 8021ad8:	6878      	ldr	r0, [r7, #4]
 8021ada:	f7ff fdf3 	bl	80216c4 <dhcp_check>
}
 8021ade:	e012      	b.n	8021b06 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8021ae0:	6878      	ldr	r0, [r7, #4]
 8021ae2:	f000 fad3 	bl	802208c <dhcp_bind>
}
 8021ae6:	e00e      	b.n	8021b06 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8021ae8:	68fb      	ldr	r3, [r7, #12]
 8021aea:	795b      	ldrb	r3, [r3, #5]
 8021aec:	2b03      	cmp	r3, #3
 8021aee:	d10a      	bne.n	8021b06 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8021af0:	68fb      	ldr	r3, [r7, #12]
 8021af2:	799b      	ldrb	r3, [r3, #6]
 8021af4:	2b01      	cmp	r3, #1
 8021af6:	d803      	bhi.n	8021b00 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8021af8:	6878      	ldr	r0, [r7, #4]
 8021afa:	f000 fcd9 	bl	80224b0 <dhcp_reboot>
}
 8021afe:	e002      	b.n	8021b06 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8021b00:	6878      	ldr	r0, [r7, #4]
 8021b02:	f000 fa21 	bl	8021f48 <dhcp_discover>
}
 8021b06:	bf00      	nop
 8021b08:	3710      	adds	r7, #16
 8021b0a:	46bd      	mov	sp, r7
 8021b0c:	bd80      	pop	{r7, pc}

08021b0e <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8021b0e:	b580      	push	{r7, lr}
 8021b10:	b084      	sub	sp, #16
 8021b12:	af00      	add	r7, sp, #0
 8021b14:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8021b16:	687b      	ldr	r3, [r7, #4]
 8021b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021b1a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8021b1c:	68fb      	ldr	r3, [r7, #12]
 8021b1e:	795b      	ldrb	r3, [r3, #5]
 8021b20:	2b01      	cmp	r3, #1
 8021b22:	d007      	beq.n	8021b34 <dhcp_t1_timeout+0x26>
 8021b24:	68fb      	ldr	r3, [r7, #12]
 8021b26:	795b      	ldrb	r3, [r3, #5]
 8021b28:	2b0a      	cmp	r3, #10
 8021b2a:	d003      	beq.n	8021b34 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8021b2c:	68fb      	ldr	r3, [r7, #12]
 8021b2e:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8021b30:	2b05      	cmp	r3, #5
 8021b32:	d116      	bne.n	8021b62 <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8021b34:	6878      	ldr	r0, [r7, #4]
 8021b36:	f000 fb83 	bl	8022240 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8021b3a:	68fb      	ldr	r3, [r7, #12]
 8021b3c:	899b      	ldrh	r3, [r3, #12]
 8021b3e:	461a      	mov	r2, r3
 8021b40:	68fb      	ldr	r3, [r7, #12]
 8021b42:	8a5b      	ldrh	r3, [r3, #18]
 8021b44:	1ad3      	subs	r3, r2, r3
 8021b46:	2b01      	cmp	r3, #1
 8021b48:	dd0b      	ble.n	8021b62 <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8021b4a:	68fb      	ldr	r3, [r7, #12]
 8021b4c:	899b      	ldrh	r3, [r3, #12]
 8021b4e:	461a      	mov	r2, r3
 8021b50:	68fb      	ldr	r3, [r7, #12]
 8021b52:	8a5b      	ldrh	r3, [r3, #18]
 8021b54:	1ad3      	subs	r3, r2, r3
 8021b56:	0fda      	lsrs	r2, r3, #31
 8021b58:	4413      	add	r3, r2
 8021b5a:	105b      	asrs	r3, r3, #1
 8021b5c:	b29a      	uxth	r2, r3
 8021b5e:	68fb      	ldr	r3, [r7, #12]
 8021b60:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8021b62:	bf00      	nop
 8021b64:	3710      	adds	r7, #16
 8021b66:	46bd      	mov	sp, r7
 8021b68:	bd80      	pop	{r7, pc}

08021b6a <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8021b6a:	b580      	push	{r7, lr}
 8021b6c:	b084      	sub	sp, #16
 8021b6e:	af00      	add	r7, sp, #0
 8021b70:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8021b72:	687b      	ldr	r3, [r7, #4]
 8021b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021b76:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8021b78:	68fb      	ldr	r3, [r7, #12]
 8021b7a:	795b      	ldrb	r3, [r3, #5]
 8021b7c:	2b01      	cmp	r3, #1
 8021b7e:	d00b      	beq.n	8021b98 <dhcp_t2_timeout+0x2e>
 8021b80:	68fb      	ldr	r3, [r7, #12]
 8021b82:	795b      	ldrb	r3, [r3, #5]
 8021b84:	2b0a      	cmp	r3, #10
 8021b86:	d007      	beq.n	8021b98 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8021b88:	68fb      	ldr	r3, [r7, #12]
 8021b8a:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8021b8c:	2b05      	cmp	r3, #5
 8021b8e:	d003      	beq.n	8021b98 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8021b90:	68fb      	ldr	r3, [r7, #12]
 8021b92:	795b      	ldrb	r3, [r3, #5]
 8021b94:	2b04      	cmp	r3, #4
 8021b96:	d116      	bne.n	8021bc6 <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8021b98:	6878      	ldr	r0, [r7, #4]
 8021b9a:	f000 fbed 	bl	8022378 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8021b9e:	68fb      	ldr	r3, [r7, #12]
 8021ba0:	8a9b      	ldrh	r3, [r3, #20]
 8021ba2:	461a      	mov	r2, r3
 8021ba4:	68fb      	ldr	r3, [r7, #12]
 8021ba6:	8a5b      	ldrh	r3, [r3, #18]
 8021ba8:	1ad3      	subs	r3, r2, r3
 8021baa:	2b01      	cmp	r3, #1
 8021bac:	dd0b      	ble.n	8021bc6 <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8021bae:	68fb      	ldr	r3, [r7, #12]
 8021bb0:	8a9b      	ldrh	r3, [r3, #20]
 8021bb2:	461a      	mov	r2, r3
 8021bb4:	68fb      	ldr	r3, [r7, #12]
 8021bb6:	8a5b      	ldrh	r3, [r3, #18]
 8021bb8:	1ad3      	subs	r3, r2, r3
 8021bba:	0fda      	lsrs	r2, r3, #31
 8021bbc:	4413      	add	r3, r2
 8021bbe:	105b      	asrs	r3, r3, #1
 8021bc0:	b29a      	uxth	r2, r3
 8021bc2:	68fb      	ldr	r3, [r7, #12]
 8021bc4:	821a      	strh	r2, [r3, #16]
    }
  }
}
 8021bc6:	bf00      	nop
 8021bc8:	3710      	adds	r7, #16
 8021bca:	46bd      	mov	sp, r7
 8021bcc:	bd80      	pop	{r7, pc}
	...

08021bd0 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8021bd0:	b580      	push	{r7, lr}
 8021bd2:	b084      	sub	sp, #16
 8021bd4:	af00      	add	r7, sp, #0
 8021bd6:	6078      	str	r0, [r7, #4]
 8021bd8:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8021bda:	687b      	ldr	r3, [r7, #4]
 8021bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021bde:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8021be0:	68fb      	ldr	r3, [r7, #12]
 8021be2:	2200      	movs	r2, #0
 8021be4:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8021be6:	68fb      	ldr	r3, [r7, #12]
 8021be8:	2200      	movs	r2, #0
 8021bea:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8021bec:	4b26      	ldr	r3, [pc, #152]	; (8021c88 <dhcp_handle_ack+0xb8>)
 8021bee:	78db      	ldrb	r3, [r3, #3]
 8021bf0:	2b00      	cmp	r3, #0
 8021bf2:	d003      	beq.n	8021bfc <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8021bf4:	4b25      	ldr	r3, [pc, #148]	; (8021c8c <dhcp_handle_ack+0xbc>)
 8021bf6:	68da      	ldr	r2, [r3, #12]
 8021bf8:	68fb      	ldr	r3, [r7, #12]
 8021bfa:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8021bfc:	4b22      	ldr	r3, [pc, #136]	; (8021c88 <dhcp_handle_ack+0xb8>)
 8021bfe:	791b      	ldrb	r3, [r3, #4]
 8021c00:	2b00      	cmp	r3, #0
 8021c02:	d004      	beq.n	8021c0e <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8021c04:	4b21      	ldr	r3, [pc, #132]	; (8021c8c <dhcp_handle_ack+0xbc>)
 8021c06:	691a      	ldr	r2, [r3, #16]
 8021c08:	68fb      	ldr	r3, [r7, #12]
 8021c0a:	62da      	str	r2, [r3, #44]	; 0x2c
 8021c0c:	e004      	b.n	8021c18 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8021c0e:	68fb      	ldr	r3, [r7, #12]
 8021c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021c12:	085a      	lsrs	r2, r3, #1
 8021c14:	68fb      	ldr	r3, [r7, #12]
 8021c16:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8021c18:	4b1b      	ldr	r3, [pc, #108]	; (8021c88 <dhcp_handle_ack+0xb8>)
 8021c1a:	795b      	ldrb	r3, [r3, #5]
 8021c1c:	2b00      	cmp	r3, #0
 8021c1e:	d004      	beq.n	8021c2a <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8021c20:	4b1a      	ldr	r3, [pc, #104]	; (8021c8c <dhcp_handle_ack+0xbc>)
 8021c22:	695a      	ldr	r2, [r3, #20]
 8021c24:	68fb      	ldr	r3, [r7, #12]
 8021c26:	631a      	str	r2, [r3, #48]	; 0x30
 8021c28:	e007      	b.n	8021c3a <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8021c2a:	68fb      	ldr	r3, [r7, #12]
 8021c2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8021c2e:	4613      	mov	r3, r2
 8021c30:	00db      	lsls	r3, r3, #3
 8021c32:	1a9b      	subs	r3, r3, r2
 8021c34:	08da      	lsrs	r2, r3, #3
 8021c36:	68fb      	ldr	r3, [r7, #12]
 8021c38:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8021c3a:	683b      	ldr	r3, [r7, #0]
 8021c3c:	691a      	ldr	r2, [r3, #16]
 8021c3e:	68fb      	ldr	r3, [r7, #12]
 8021c40:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8021c42:	4b11      	ldr	r3, [pc, #68]	; (8021c88 <dhcp_handle_ack+0xb8>)
 8021c44:	799b      	ldrb	r3, [r3, #6]
 8021c46:	2b00      	cmp	r3, #0
 8021c48:	d00b      	beq.n	8021c62 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8021c4a:	4b10      	ldr	r3, [pc, #64]	; (8021c8c <dhcp_handle_ack+0xbc>)
 8021c4c:	699b      	ldr	r3, [r3, #24]
 8021c4e:	4618      	mov	r0, r3
 8021c50:	f7f6 fdb1 	bl	80187b6 <lwip_htonl>
 8021c54:	4602      	mov	r2, r0
 8021c56:	68fb      	ldr	r3, [r7, #12]
 8021c58:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8021c5a:	68fb      	ldr	r3, [r7, #12]
 8021c5c:	2201      	movs	r2, #1
 8021c5e:	71da      	strb	r2, [r3, #7]
 8021c60:	e002      	b.n	8021c68 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8021c62:	68fb      	ldr	r3, [r7, #12]
 8021c64:	2200      	movs	r2, #0
 8021c66:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8021c68:	4b07      	ldr	r3, [pc, #28]	; (8021c88 <dhcp_handle_ack+0xb8>)
 8021c6a:	79db      	ldrb	r3, [r3, #7]
 8021c6c:	2b00      	cmp	r3, #0
 8021c6e:	d007      	beq.n	8021c80 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8021c70:	4b06      	ldr	r3, [pc, #24]	; (8021c8c <dhcp_handle_ack+0xbc>)
 8021c72:	69db      	ldr	r3, [r3, #28]
 8021c74:	4618      	mov	r0, r3
 8021c76:	f7f6 fd9e 	bl	80187b6 <lwip_htonl>
 8021c7a:	4602      	mov	r2, r0
 8021c7c:	68fb      	ldr	r3, [r7, #12]
 8021c7e:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8021c80:	bf00      	nop
 8021c82:	3710      	adds	r7, #16
 8021c84:	46bd      	mov	sp, r7
 8021c86:	bd80      	pop	{r7, pc}
 8021c88:	2001c118 	.word	0x2001c118
 8021c8c:	2001c120 	.word	0x2001c120

08021c90 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8021c90:	b580      	push	{r7, lr}
 8021c92:	b084      	sub	sp, #16
 8021c94:	af00      	add	r7, sp, #0
 8021c96:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8021c98:	687b      	ldr	r3, [r7, #4]
 8021c9a:	2b00      	cmp	r3, #0
 8021c9c:	d109      	bne.n	8021cb2 <dhcp_start+0x22>
 8021c9e:	4b37      	ldr	r3, [pc, #220]	; (8021d7c <dhcp_start+0xec>)
 8021ca0:	f240 22e7 	movw	r2, #743	; 0x2e7
 8021ca4:	4936      	ldr	r1, [pc, #216]	; (8021d80 <dhcp_start+0xf0>)
 8021ca6:	4837      	ldr	r0, [pc, #220]	; (8021d84 <dhcp_start+0xf4>)
 8021ca8:	f004 fe10 	bl	80268cc <iprintf>
 8021cac:	f06f 030f 	mvn.w	r3, #15
 8021cb0:	e060      	b.n	8021d74 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8021cb2:	687b      	ldr	r3, [r7, #4]
 8021cb4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8021cb8:	f003 0301 	and.w	r3, r3, #1
 8021cbc:	2b00      	cmp	r3, #0
 8021cbe:	d109      	bne.n	8021cd4 <dhcp_start+0x44>
 8021cc0:	4b2e      	ldr	r3, [pc, #184]	; (8021d7c <dhcp_start+0xec>)
 8021cc2:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8021cc6:	4930      	ldr	r1, [pc, #192]	; (8021d88 <dhcp_start+0xf8>)
 8021cc8:	482e      	ldr	r0, [pc, #184]	; (8021d84 <dhcp_start+0xf4>)
 8021cca:	f004 fdff 	bl	80268cc <iprintf>
 8021cce:	f06f 030f 	mvn.w	r3, #15
 8021cd2:	e04f      	b.n	8021d74 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8021cd4:	687b      	ldr	r3, [r7, #4]
 8021cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021cd8:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8021cda:	687b      	ldr	r3, [r7, #4]
 8021cdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8021cde:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8021ce2:	d202      	bcs.n	8021cea <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8021ce4:	f04f 33ff 	mov.w	r3, #4294967295
 8021ce8:	e044      	b.n	8021d74 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8021cea:	68fb      	ldr	r3, [r7, #12]
 8021cec:	2b00      	cmp	r3, #0
 8021cee:	d10d      	bne.n	8021d0c <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8021cf0:	2034      	movs	r0, #52	; 0x34
 8021cf2:	f7f7 f8b5 	bl	8018e60 <mem_malloc>
 8021cf6:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8021cf8:	68fb      	ldr	r3, [r7, #12]
 8021cfa:	2b00      	cmp	r3, #0
 8021cfc:	d102      	bne.n	8021d04 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8021cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8021d02:	e037      	b.n	8021d74 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8021d04:	687b      	ldr	r3, [r7, #4]
 8021d06:	68fa      	ldr	r2, [r7, #12]
 8021d08:	625a      	str	r2, [r3, #36]	; 0x24
 8021d0a:	e005      	b.n	8021d18 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8021d0c:	68fb      	ldr	r3, [r7, #12]
 8021d0e:	791b      	ldrb	r3, [r3, #4]
 8021d10:	2b00      	cmp	r3, #0
 8021d12:	d001      	beq.n	8021d18 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8021d14:	f7ff fc92 	bl	802163c <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8021d18:	2234      	movs	r2, #52	; 0x34
 8021d1a:	2100      	movs	r1, #0
 8021d1c:	68f8      	ldr	r0, [r7, #12]
 8021d1e:	f003 ff29 	bl	8025b74 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8021d22:	f7ff fc39 	bl	8021598 <dhcp_inc_pcb_refcount>
 8021d26:	4603      	mov	r3, r0
 8021d28:	2b00      	cmp	r3, #0
 8021d2a:	d002      	beq.n	8021d32 <dhcp_start+0xa2>
    return ERR_MEM;
 8021d2c:	f04f 33ff 	mov.w	r3, #4294967295
 8021d30:	e020      	b.n	8021d74 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 8021d32:	68fb      	ldr	r3, [r7, #12]
 8021d34:	2201      	movs	r2, #1
 8021d36:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8021d38:	687b      	ldr	r3, [r7, #4]
 8021d3a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8021d3e:	f003 0304 	and.w	r3, r3, #4
 8021d42:	2b00      	cmp	r3, #0
 8021d44:	d105      	bne.n	8021d52 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8021d46:	2102      	movs	r1, #2
 8021d48:	68f8      	ldr	r0, [r7, #12]
 8021d4a:	f000 fd01 	bl	8022750 <dhcp_set_state>
    return ERR_OK;
 8021d4e:	2300      	movs	r3, #0
 8021d50:	e010      	b.n	8021d74 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8021d52:	6878      	ldr	r0, [r7, #4]
 8021d54:	f000 f8f8 	bl	8021f48 <dhcp_discover>
 8021d58:	4603      	mov	r3, r0
 8021d5a:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8021d5c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8021d60:	2b00      	cmp	r3, #0
 8021d62:	d005      	beq.n	8021d70 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8021d64:	6878      	ldr	r0, [r7, #4]
 8021d66:	f000 fc59 	bl	802261c <dhcp_release_and_stop>
    return ERR_MEM;
 8021d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8021d6e:	e001      	b.n	8021d74 <dhcp_start+0xe4>
  }
  return result;
 8021d70:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8021d74:	4618      	mov	r0, r3
 8021d76:	3710      	adds	r7, #16
 8021d78:	46bd      	mov	sp, r7
 8021d7a:	bd80      	pop	{r7, pc}
 8021d7c:	0802ec10 	.word	0x0802ec10
 8021d80:	0802ecf4 	.word	0x0802ecf4
 8021d84:	0802ec70 	.word	0x0802ec70
 8021d88:	0802ed38 	.word	0x0802ed38

08021d8c <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8021d8c:	b580      	push	{r7, lr}
 8021d8e:	b084      	sub	sp, #16
 8021d90:	af00      	add	r7, sp, #0
 8021d92:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8021d94:	687b      	ldr	r3, [r7, #4]
 8021d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021d98:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 8021d9a:	68fb      	ldr	r3, [r7, #12]
 8021d9c:	2b00      	cmp	r3, #0
 8021d9e:	d025      	beq.n	8021dec <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 8021da0:	68fb      	ldr	r3, [r7, #12]
 8021da2:	795b      	ldrb	r3, [r3, #5]
 8021da4:	2b0a      	cmp	r3, #10
 8021da6:	d008      	beq.n	8021dba <dhcp_network_changed+0x2e>
 8021da8:	2b0a      	cmp	r3, #10
 8021daa:	dc0d      	bgt.n	8021dc8 <dhcp_network_changed+0x3c>
 8021dac:	2b00      	cmp	r3, #0
 8021dae:	d01f      	beq.n	8021df0 <dhcp_network_changed+0x64>
 8021db0:	2b00      	cmp	r3, #0
 8021db2:	db09      	blt.n	8021dc8 <dhcp_network_changed+0x3c>
 8021db4:	3b03      	subs	r3, #3
 8021db6:	2b02      	cmp	r3, #2
 8021db8:	d806      	bhi.n	8021dc8 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 8021dba:	68fb      	ldr	r3, [r7, #12]
 8021dbc:	2200      	movs	r2, #0
 8021dbe:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 8021dc0:	6878      	ldr	r0, [r7, #4]
 8021dc2:	f000 fb75 	bl	80224b0 <dhcp_reboot>
      break;
 8021dc6:	e014      	b.n	8021df2 <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 8021dc8:	68fb      	ldr	r3, [r7, #12]
 8021dca:	795b      	ldrb	r3, [r3, #5]
 8021dcc:	2b0c      	cmp	r3, #12
 8021dce:	d906      	bls.n	8021dde <dhcp_network_changed+0x52>
 8021dd0:	4b09      	ldr	r3, [pc, #36]	; (8021df8 <dhcp_network_changed+0x6c>)
 8021dd2:	f240 326d 	movw	r2, #877	; 0x36d
 8021dd6:	4909      	ldr	r1, [pc, #36]	; (8021dfc <dhcp_network_changed+0x70>)
 8021dd8:	4809      	ldr	r0, [pc, #36]	; (8021e00 <dhcp_network_changed+0x74>)
 8021dda:	f004 fd77 	bl	80268cc <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 8021dde:	68fb      	ldr	r3, [r7, #12]
 8021de0:	2200      	movs	r2, #0
 8021de2:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 8021de4:	6878      	ldr	r0, [r7, #4]
 8021de6:	f000 f8af 	bl	8021f48 <dhcp_discover>
      break;
 8021dea:	e002      	b.n	8021df2 <dhcp_network_changed+0x66>
    return;
 8021dec:	bf00      	nop
 8021dee:	e000      	b.n	8021df2 <dhcp_network_changed+0x66>
      break;
 8021df0:	bf00      	nop
  }
}
 8021df2:	3710      	adds	r7, #16
 8021df4:	46bd      	mov	sp, r7
 8021df6:	bd80      	pop	{r7, pc}
 8021df8:	0802ec10 	.word	0x0802ec10
 8021dfc:	0802ed5c 	.word	0x0802ed5c
 8021e00:	0802ec70 	.word	0x0802ec70

08021e04 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8021e04:	b580      	push	{r7, lr}
 8021e06:	b084      	sub	sp, #16
 8021e08:	af00      	add	r7, sp, #0
 8021e0a:	6078      	str	r0, [r7, #4]
 8021e0c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8021e0e:	687b      	ldr	r3, [r7, #4]
 8021e10:	2b00      	cmp	r3, #0
 8021e12:	d107      	bne.n	8021e24 <dhcp_arp_reply+0x20>
 8021e14:	4b0e      	ldr	r3, [pc, #56]	; (8021e50 <dhcp_arp_reply+0x4c>)
 8021e16:	f240 328b 	movw	r2, #907	; 0x38b
 8021e1a:	490e      	ldr	r1, [pc, #56]	; (8021e54 <dhcp_arp_reply+0x50>)
 8021e1c:	480e      	ldr	r0, [pc, #56]	; (8021e58 <dhcp_arp_reply+0x54>)
 8021e1e:	f004 fd55 	bl	80268cc <iprintf>
 8021e22:	e012      	b.n	8021e4a <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8021e24:	687b      	ldr	r3, [r7, #4]
 8021e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021e28:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8021e2a:	68fb      	ldr	r3, [r7, #12]
 8021e2c:	2b00      	cmp	r3, #0
 8021e2e:	d00c      	beq.n	8021e4a <dhcp_arp_reply+0x46>
 8021e30:	68fb      	ldr	r3, [r7, #12]
 8021e32:	795b      	ldrb	r3, [r3, #5]
 8021e34:	2b08      	cmp	r3, #8
 8021e36:	d108      	bne.n	8021e4a <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8021e38:	683b      	ldr	r3, [r7, #0]
 8021e3a:	681a      	ldr	r2, [r3, #0]
 8021e3c:	68fb      	ldr	r3, [r7, #12]
 8021e3e:	69db      	ldr	r3, [r3, #28]
 8021e40:	429a      	cmp	r2, r3
 8021e42:	d102      	bne.n	8021e4a <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8021e44:	6878      	ldr	r0, [r7, #4]
 8021e46:	f000 f809 	bl	8021e5c <dhcp_decline>
    }
  }
}
 8021e4a:	3710      	adds	r7, #16
 8021e4c:	46bd      	mov	sp, r7
 8021e4e:	bd80      	pop	{r7, pc}
 8021e50:	0802ec10 	.word	0x0802ec10
 8021e54:	0802ecf4 	.word	0x0802ecf4
 8021e58:	0802ec70 	.word	0x0802ec70

08021e5c <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8021e5c:	b5b0      	push	{r4, r5, r7, lr}
 8021e5e:	b08a      	sub	sp, #40	; 0x28
 8021e60:	af02      	add	r7, sp, #8
 8021e62:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8021e64:	687b      	ldr	r3, [r7, #4]
 8021e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021e68:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8021e6a:	210c      	movs	r1, #12
 8021e6c:	69b8      	ldr	r0, [r7, #24]
 8021e6e:	f000 fc6f 	bl	8022750 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8021e72:	f107 030c 	add.w	r3, r7, #12
 8021e76:	2204      	movs	r2, #4
 8021e78:	69b9      	ldr	r1, [r7, #24]
 8021e7a:	6878      	ldr	r0, [r7, #4]
 8021e7c:	f001 f8f4 	bl	8023068 <dhcp_create_msg>
 8021e80:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8021e82:	697b      	ldr	r3, [r7, #20]
 8021e84:	2b00      	cmp	r3, #0
 8021e86:	d035      	beq.n	8021ef4 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8021e88:	697b      	ldr	r3, [r7, #20]
 8021e8a:	685b      	ldr	r3, [r3, #4]
 8021e8c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8021e8e:	89b8      	ldrh	r0, [r7, #12]
 8021e90:	693b      	ldr	r3, [r7, #16]
 8021e92:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8021e96:	2304      	movs	r3, #4
 8021e98:	2232      	movs	r2, #50	; 0x32
 8021e9a:	f000 fc73 	bl	8022784 <dhcp_option>
 8021e9e:	4603      	mov	r3, r0
 8021ea0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8021ea2:	89bc      	ldrh	r4, [r7, #12]
 8021ea4:	693b      	ldr	r3, [r7, #16]
 8021ea6:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8021eaa:	69bb      	ldr	r3, [r7, #24]
 8021eac:	69db      	ldr	r3, [r3, #28]
 8021eae:	4618      	mov	r0, r3
 8021eb0:	f7f6 fc81 	bl	80187b6 <lwip_htonl>
 8021eb4:	4603      	mov	r3, r0
 8021eb6:	461a      	mov	r2, r3
 8021eb8:	4629      	mov	r1, r5
 8021eba:	4620      	mov	r0, r4
 8021ebc:	f000 fcee 	bl	802289c <dhcp_option_long>
 8021ec0:	4603      	mov	r3, r0
 8021ec2:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8021ec4:	89b8      	ldrh	r0, [r7, #12]
 8021ec6:	693b      	ldr	r3, [r7, #16]
 8021ec8:	33f0      	adds	r3, #240	; 0xf0
 8021eca:	697a      	ldr	r2, [r7, #20]
 8021ecc:	4619      	mov	r1, r3
 8021ece:	f001 f9a1 	bl	8023214 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8021ed2:	4b19      	ldr	r3, [pc, #100]	; (8021f38 <dhcp_decline+0xdc>)
 8021ed4:	6818      	ldr	r0, [r3, #0]
 8021ed6:	4b19      	ldr	r3, [pc, #100]	; (8021f3c <dhcp_decline+0xe0>)
 8021ed8:	9301      	str	r3, [sp, #4]
 8021eda:	687b      	ldr	r3, [r7, #4]
 8021edc:	9300      	str	r3, [sp, #0]
 8021ede:	2343      	movs	r3, #67	; 0x43
 8021ee0:	4a17      	ldr	r2, [pc, #92]	; (8021f40 <dhcp_decline+0xe4>)
 8021ee2:	6979      	ldr	r1, [r7, #20]
 8021ee4:	f7ff f8d2 	bl	802108c <udp_sendto_if_src>
 8021ee8:	4603      	mov	r3, r0
 8021eea:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8021eec:	6978      	ldr	r0, [r7, #20]
 8021eee:	f7f8 f863 	bl	8019fb8 <pbuf_free>
 8021ef2:	e001      	b.n	8021ef8 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8021ef4:	23ff      	movs	r3, #255	; 0xff
 8021ef6:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8021ef8:	69bb      	ldr	r3, [r7, #24]
 8021efa:	799b      	ldrb	r3, [r3, #6]
 8021efc:	2bff      	cmp	r3, #255	; 0xff
 8021efe:	d005      	beq.n	8021f0c <dhcp_decline+0xb0>
    dhcp->tries++;
 8021f00:	69bb      	ldr	r3, [r7, #24]
 8021f02:	799b      	ldrb	r3, [r3, #6]
 8021f04:	3301      	adds	r3, #1
 8021f06:	b2da      	uxtb	r2, r3
 8021f08:	69bb      	ldr	r3, [r7, #24]
 8021f0a:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8021f0c:	f242 7310 	movw	r3, #10000	; 0x2710
 8021f10:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8021f12:	89fb      	ldrh	r3, [r7, #14]
 8021f14:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8021f18:	4a0a      	ldr	r2, [pc, #40]	; (8021f44 <dhcp_decline+0xe8>)
 8021f1a:	fb82 1203 	smull	r1, r2, r2, r3
 8021f1e:	1152      	asrs	r2, r2, #5
 8021f20:	17db      	asrs	r3, r3, #31
 8021f22:	1ad3      	subs	r3, r2, r3
 8021f24:	b29a      	uxth	r2, r3
 8021f26:	69bb      	ldr	r3, [r7, #24]
 8021f28:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8021f2a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8021f2e:	4618      	mov	r0, r3
 8021f30:	3720      	adds	r7, #32
 8021f32:	46bd      	mov	sp, r7
 8021f34:	bdb0      	pop	{r4, r5, r7, pc}
 8021f36:	bf00      	nop
 8021f38:	20013c6c 	.word	0x20013c6c
 8021f3c:	08030e24 	.word	0x08030e24
 8021f40:	08030e28 	.word	0x08030e28
 8021f44:	10624dd3 	.word	0x10624dd3

08021f48 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8021f48:	b580      	push	{r7, lr}
 8021f4a:	b08a      	sub	sp, #40	; 0x28
 8021f4c:	af02      	add	r7, sp, #8
 8021f4e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8021f50:	687b      	ldr	r3, [r7, #4]
 8021f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021f54:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8021f56:	2300      	movs	r3, #0
 8021f58:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8021f5a:	69bb      	ldr	r3, [r7, #24]
 8021f5c:	2200      	movs	r2, #0
 8021f5e:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8021f60:	2106      	movs	r1, #6
 8021f62:	69b8      	ldr	r0, [r7, #24]
 8021f64:	f000 fbf4 	bl	8022750 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8021f68:	f107 0308 	add.w	r3, r7, #8
 8021f6c:	2201      	movs	r2, #1
 8021f6e:	69b9      	ldr	r1, [r7, #24]
 8021f70:	6878      	ldr	r0, [r7, #4]
 8021f72:	f001 f879 	bl	8023068 <dhcp_create_msg>
 8021f76:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8021f78:	693b      	ldr	r3, [r7, #16]
 8021f7a:	2b00      	cmp	r3, #0
 8021f7c:	d04b      	beq.n	8022016 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8021f7e:	693b      	ldr	r3, [r7, #16]
 8021f80:	685b      	ldr	r3, [r3, #4]
 8021f82:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8021f84:	8938      	ldrh	r0, [r7, #8]
 8021f86:	68fb      	ldr	r3, [r7, #12]
 8021f88:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8021f8c:	2302      	movs	r3, #2
 8021f8e:	2239      	movs	r2, #57	; 0x39
 8021f90:	f000 fbf8 	bl	8022784 <dhcp_option>
 8021f94:	4603      	mov	r3, r0
 8021f96:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8021f98:	8938      	ldrh	r0, [r7, #8]
 8021f9a:	68fb      	ldr	r3, [r7, #12]
 8021f9c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8021fa0:	687b      	ldr	r3, [r7, #4]
 8021fa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8021fa4:	461a      	mov	r2, r3
 8021fa6:	f000 fc47 	bl	8022838 <dhcp_option_short>
 8021faa:	4603      	mov	r3, r0
 8021fac:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8021fae:	8938      	ldrh	r0, [r7, #8]
 8021fb0:	68fb      	ldr	r3, [r7, #12]
 8021fb2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8021fb6:	2303      	movs	r3, #3
 8021fb8:	2237      	movs	r2, #55	; 0x37
 8021fba:	f000 fbe3 	bl	8022784 <dhcp_option>
 8021fbe:	4603      	mov	r3, r0
 8021fc0:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8021fc2:	2300      	movs	r3, #0
 8021fc4:	77fb      	strb	r3, [r7, #31]
 8021fc6:	e00e      	b.n	8021fe6 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8021fc8:	8938      	ldrh	r0, [r7, #8]
 8021fca:	68fb      	ldr	r3, [r7, #12]
 8021fcc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8021fd0:	7ffb      	ldrb	r3, [r7, #31]
 8021fd2:	4a29      	ldr	r2, [pc, #164]	; (8022078 <dhcp_discover+0x130>)
 8021fd4:	5cd3      	ldrb	r3, [r2, r3]
 8021fd6:	461a      	mov	r2, r3
 8021fd8:	f000 fc08 	bl	80227ec <dhcp_option_byte>
 8021fdc:	4603      	mov	r3, r0
 8021fde:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8021fe0:	7ffb      	ldrb	r3, [r7, #31]
 8021fe2:	3301      	adds	r3, #1
 8021fe4:	77fb      	strb	r3, [r7, #31]
 8021fe6:	7ffb      	ldrb	r3, [r7, #31]
 8021fe8:	2b02      	cmp	r3, #2
 8021fea:	d9ed      	bls.n	8021fc8 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8021fec:	8938      	ldrh	r0, [r7, #8]
 8021fee:	68fb      	ldr	r3, [r7, #12]
 8021ff0:	33f0      	adds	r3, #240	; 0xf0
 8021ff2:	693a      	ldr	r2, [r7, #16]
 8021ff4:	4619      	mov	r1, r3
 8021ff6:	f001 f90d 	bl	8023214 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8021ffa:	4b20      	ldr	r3, [pc, #128]	; (802207c <dhcp_discover+0x134>)
 8021ffc:	6818      	ldr	r0, [r3, #0]
 8021ffe:	4b20      	ldr	r3, [pc, #128]	; (8022080 <dhcp_discover+0x138>)
 8022000:	9301      	str	r3, [sp, #4]
 8022002:	687b      	ldr	r3, [r7, #4]
 8022004:	9300      	str	r3, [sp, #0]
 8022006:	2343      	movs	r3, #67	; 0x43
 8022008:	4a1e      	ldr	r2, [pc, #120]	; (8022084 <dhcp_discover+0x13c>)
 802200a:	6939      	ldr	r1, [r7, #16]
 802200c:	f7ff f83e 	bl	802108c <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8022010:	6938      	ldr	r0, [r7, #16]
 8022012:	f7f7 ffd1 	bl	8019fb8 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8022016:	69bb      	ldr	r3, [r7, #24]
 8022018:	799b      	ldrb	r3, [r3, #6]
 802201a:	2bff      	cmp	r3, #255	; 0xff
 802201c:	d005      	beq.n	802202a <dhcp_discover+0xe2>
    dhcp->tries++;
 802201e:	69bb      	ldr	r3, [r7, #24]
 8022020:	799b      	ldrb	r3, [r3, #6]
 8022022:	3301      	adds	r3, #1
 8022024:	b2da      	uxtb	r2, r3
 8022026:	69bb      	ldr	r3, [r7, #24]
 8022028:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 802202a:	69bb      	ldr	r3, [r7, #24]
 802202c:	799b      	ldrb	r3, [r3, #6]
 802202e:	2b05      	cmp	r3, #5
 8022030:	d80d      	bhi.n	802204e <dhcp_discover+0x106>
 8022032:	69bb      	ldr	r3, [r7, #24]
 8022034:	799b      	ldrb	r3, [r3, #6]
 8022036:	461a      	mov	r2, r3
 8022038:	2301      	movs	r3, #1
 802203a:	4093      	lsls	r3, r2
 802203c:	b29b      	uxth	r3, r3
 802203e:	461a      	mov	r2, r3
 8022040:	0152      	lsls	r2, r2, #5
 8022042:	1ad2      	subs	r2, r2, r3
 8022044:	0092      	lsls	r2, r2, #2
 8022046:	4413      	add	r3, r2
 8022048:	00db      	lsls	r3, r3, #3
 802204a:	b29b      	uxth	r3, r3
 802204c:	e001      	b.n	8022052 <dhcp_discover+0x10a>
 802204e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8022052:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8022054:	897b      	ldrh	r3, [r7, #10]
 8022056:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 802205a:	4a0b      	ldr	r2, [pc, #44]	; (8022088 <dhcp_discover+0x140>)
 802205c:	fb82 1203 	smull	r1, r2, r2, r3
 8022060:	1152      	asrs	r2, r2, #5
 8022062:	17db      	asrs	r3, r3, #31
 8022064:	1ad3      	subs	r3, r2, r3
 8022066:	b29a      	uxth	r2, r3
 8022068:	69bb      	ldr	r3, [r7, #24]
 802206a:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 802206c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8022070:	4618      	mov	r0, r3
 8022072:	3720      	adds	r7, #32
 8022074:	46bd      	mov	sp, r7
 8022076:	bd80      	pop	{r7, pc}
 8022078:	1000006c 	.word	0x1000006c
 802207c:	20013c6c 	.word	0x20013c6c
 8022080:	08030e24 	.word	0x08030e24
 8022084:	08030e28 	.word	0x08030e28
 8022088:	10624dd3 	.word	0x10624dd3

0802208c <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 802208c:	b580      	push	{r7, lr}
 802208e:	b088      	sub	sp, #32
 8022090:	af00      	add	r7, sp, #0
 8022092:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8022094:	687b      	ldr	r3, [r7, #4]
 8022096:	2b00      	cmp	r3, #0
 8022098:	d107      	bne.n	80220aa <dhcp_bind+0x1e>
 802209a:	4b64      	ldr	r3, [pc, #400]	; (802222c <dhcp_bind+0x1a0>)
 802209c:	f240 4215 	movw	r2, #1045	; 0x415
 80220a0:	4963      	ldr	r1, [pc, #396]	; (8022230 <dhcp_bind+0x1a4>)
 80220a2:	4864      	ldr	r0, [pc, #400]	; (8022234 <dhcp_bind+0x1a8>)
 80220a4:	f004 fc12 	bl	80268cc <iprintf>
 80220a8:	e0bc      	b.n	8022224 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 80220aa:	687b      	ldr	r3, [r7, #4]
 80220ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80220ae:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 80220b0:	69bb      	ldr	r3, [r7, #24]
 80220b2:	2b00      	cmp	r3, #0
 80220b4:	d107      	bne.n	80220c6 <dhcp_bind+0x3a>
 80220b6:	4b5d      	ldr	r3, [pc, #372]	; (802222c <dhcp_bind+0x1a0>)
 80220b8:	f240 4217 	movw	r2, #1047	; 0x417
 80220bc:	495e      	ldr	r1, [pc, #376]	; (8022238 <dhcp_bind+0x1ac>)
 80220be:	485d      	ldr	r0, [pc, #372]	; (8022234 <dhcp_bind+0x1a8>)
 80220c0:	f004 fc04 	bl	80268cc <iprintf>
 80220c4:	e0ae      	b.n	8022224 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 80220c6:	69bb      	ldr	r3, [r7, #24]
 80220c8:	2200      	movs	r2, #0
 80220ca:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 80220cc:	69bb      	ldr	r3, [r7, #24]
 80220ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80220d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80220d4:	d019      	beq.n	802210a <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80220d6:	69bb      	ldr	r3, [r7, #24]
 80220d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80220da:	331e      	adds	r3, #30
 80220dc:	4a57      	ldr	r2, [pc, #348]	; (802223c <dhcp_bind+0x1b0>)
 80220de:	fba2 2303 	umull	r2, r3, r2, r3
 80220e2:	095b      	lsrs	r3, r3, #5
 80220e4:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80220e6:	69fb      	ldr	r3, [r7, #28]
 80220e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80220ec:	d302      	bcc.n	80220f4 <dhcp_bind+0x68>
      timeout = 0xffff;
 80220ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80220f2:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 80220f4:	69fb      	ldr	r3, [r7, #28]
 80220f6:	b29a      	uxth	r2, r3
 80220f8:	69bb      	ldr	r3, [r7, #24]
 80220fa:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 80220fc:	69bb      	ldr	r3, [r7, #24]
 80220fe:	8a9b      	ldrh	r3, [r3, #20]
 8022100:	2b00      	cmp	r3, #0
 8022102:	d102      	bne.n	802210a <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8022104:	69bb      	ldr	r3, [r7, #24]
 8022106:	2201      	movs	r2, #1
 8022108:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 802210a:	69bb      	ldr	r3, [r7, #24]
 802210c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802210e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022112:	d01d      	beq.n	8022150 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8022114:	69bb      	ldr	r3, [r7, #24]
 8022116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022118:	331e      	adds	r3, #30
 802211a:	4a48      	ldr	r2, [pc, #288]	; (802223c <dhcp_bind+0x1b0>)
 802211c:	fba2 2303 	umull	r2, r3, r2, r3
 8022120:	095b      	lsrs	r3, r3, #5
 8022122:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8022124:	69fb      	ldr	r3, [r7, #28]
 8022126:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802212a:	d302      	bcc.n	8022132 <dhcp_bind+0xa6>
      timeout = 0xffff;
 802212c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8022130:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 8022132:	69fb      	ldr	r3, [r7, #28]
 8022134:	b29a      	uxth	r2, r3
 8022136:	69bb      	ldr	r3, [r7, #24]
 8022138:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 802213a:	69bb      	ldr	r3, [r7, #24]
 802213c:	895b      	ldrh	r3, [r3, #10]
 802213e:	2b00      	cmp	r3, #0
 8022140:	d102      	bne.n	8022148 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 8022142:	69bb      	ldr	r3, [r7, #24]
 8022144:	2201      	movs	r2, #1
 8022146:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8022148:	69bb      	ldr	r3, [r7, #24]
 802214a:	895a      	ldrh	r2, [r3, #10]
 802214c:	69bb      	ldr	r3, [r7, #24]
 802214e:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8022150:	69bb      	ldr	r3, [r7, #24]
 8022152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022158:	d01d      	beq.n	8022196 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 802215a:	69bb      	ldr	r3, [r7, #24]
 802215c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802215e:	331e      	adds	r3, #30
 8022160:	4a36      	ldr	r2, [pc, #216]	; (802223c <dhcp_bind+0x1b0>)
 8022162:	fba2 2303 	umull	r2, r3, r2, r3
 8022166:	095b      	lsrs	r3, r3, #5
 8022168:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 802216a:	69fb      	ldr	r3, [r7, #28]
 802216c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8022170:	d302      	bcc.n	8022178 <dhcp_bind+0xec>
      timeout = 0xffff;
 8022172:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8022176:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8022178:	69fb      	ldr	r3, [r7, #28]
 802217a:	b29a      	uxth	r2, r3
 802217c:	69bb      	ldr	r3, [r7, #24]
 802217e:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8022180:	69bb      	ldr	r3, [r7, #24]
 8022182:	899b      	ldrh	r3, [r3, #12]
 8022184:	2b00      	cmp	r3, #0
 8022186:	d102      	bne.n	802218e <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8022188:	69bb      	ldr	r3, [r7, #24]
 802218a:	2201      	movs	r2, #1
 802218c:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 802218e:	69bb      	ldr	r3, [r7, #24]
 8022190:	899a      	ldrh	r2, [r3, #12]
 8022192:	69bb      	ldr	r3, [r7, #24]
 8022194:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8022196:	69bb      	ldr	r3, [r7, #24]
 8022198:	895a      	ldrh	r2, [r3, #10]
 802219a:	69bb      	ldr	r3, [r7, #24]
 802219c:	899b      	ldrh	r3, [r3, #12]
 802219e:	429a      	cmp	r2, r3
 80221a0:	d306      	bcc.n	80221b0 <dhcp_bind+0x124>
 80221a2:	69bb      	ldr	r3, [r7, #24]
 80221a4:	899b      	ldrh	r3, [r3, #12]
 80221a6:	2b00      	cmp	r3, #0
 80221a8:	d002      	beq.n	80221b0 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 80221aa:	69bb      	ldr	r3, [r7, #24]
 80221ac:	2200      	movs	r2, #0
 80221ae:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 80221b0:	69bb      	ldr	r3, [r7, #24]
 80221b2:	79db      	ldrb	r3, [r3, #7]
 80221b4:	2b00      	cmp	r3, #0
 80221b6:	d003      	beq.n	80221c0 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 80221b8:	69bb      	ldr	r3, [r7, #24]
 80221ba:	6a1b      	ldr	r3, [r3, #32]
 80221bc:	613b      	str	r3, [r7, #16]
 80221be:	e014      	b.n	80221ea <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 80221c0:	69bb      	ldr	r3, [r7, #24]
 80221c2:	331c      	adds	r3, #28
 80221c4:	781b      	ldrb	r3, [r3, #0]
 80221c6:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 80221c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80221cc:	2b00      	cmp	r3, #0
 80221ce:	db02      	blt.n	80221d6 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 80221d0:	23ff      	movs	r3, #255	; 0xff
 80221d2:	613b      	str	r3, [r7, #16]
 80221d4:	e009      	b.n	80221ea <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 80221d6:	7dfb      	ldrb	r3, [r7, #23]
 80221d8:	2bbf      	cmp	r3, #191	; 0xbf
 80221da:	d903      	bls.n	80221e4 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 80221dc:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80221e0:	613b      	str	r3, [r7, #16]
 80221e2:	e002      	b.n	80221ea <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 80221e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80221e8:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 80221ea:	69bb      	ldr	r3, [r7, #24]
 80221ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80221ee:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 80221f0:	68fb      	ldr	r3, [r7, #12]
 80221f2:	2b00      	cmp	r3, #0
 80221f4:	d108      	bne.n	8022208 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 80221f6:	69bb      	ldr	r3, [r7, #24]
 80221f8:	69da      	ldr	r2, [r3, #28]
 80221fa:	693b      	ldr	r3, [r7, #16]
 80221fc:	4013      	ands	r3, r2
 80221fe:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8022200:	68fb      	ldr	r3, [r7, #12]
 8022202:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8022206:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8022208:	210a      	movs	r1, #10
 802220a:	69b8      	ldr	r0, [r7, #24]
 802220c:	f000 faa0 	bl	8022750 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8022210:	69bb      	ldr	r3, [r7, #24]
 8022212:	f103 011c 	add.w	r1, r3, #28
 8022216:	f107 030c 	add.w	r3, r7, #12
 802221a:	f107 0210 	add.w	r2, r7, #16
 802221e:	6878      	ldr	r0, [r7, #4]
 8022220:	f7f7 f9bc 	bl	801959c <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8022224:	3720      	adds	r7, #32
 8022226:	46bd      	mov	sp, r7
 8022228:	bd80      	pop	{r7, pc}
 802222a:	bf00      	nop
 802222c:	0802ec10 	.word	0x0802ec10
 8022230:	0802ed70 	.word	0x0802ed70
 8022234:	0802ec70 	.word	0x0802ec70
 8022238:	0802ed8c 	.word	0x0802ed8c
 802223c:	88888889 	.word	0x88888889

08022240 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8022240:	b580      	push	{r7, lr}
 8022242:	b08a      	sub	sp, #40	; 0x28
 8022244:	af02      	add	r7, sp, #8
 8022246:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8022248:	687b      	ldr	r3, [r7, #4]
 802224a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802224c:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 802224e:	2105      	movs	r1, #5
 8022250:	69b8      	ldr	r0, [r7, #24]
 8022252:	f000 fa7d 	bl	8022750 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8022256:	f107 030c 	add.w	r3, r7, #12
 802225a:	2203      	movs	r2, #3
 802225c:	69b9      	ldr	r1, [r7, #24]
 802225e:	6878      	ldr	r0, [r7, #4]
 8022260:	f000 ff02 	bl	8023068 <dhcp_create_msg>
 8022264:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8022266:	697b      	ldr	r3, [r7, #20]
 8022268:	2b00      	cmp	r3, #0
 802226a:	d04e      	beq.n	802230a <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 802226c:	697b      	ldr	r3, [r7, #20]
 802226e:	685b      	ldr	r3, [r3, #4]
 8022270:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8022272:	89b8      	ldrh	r0, [r7, #12]
 8022274:	693b      	ldr	r3, [r7, #16]
 8022276:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 802227a:	2302      	movs	r3, #2
 802227c:	2239      	movs	r2, #57	; 0x39
 802227e:	f000 fa81 	bl	8022784 <dhcp_option>
 8022282:	4603      	mov	r3, r0
 8022284:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8022286:	89b8      	ldrh	r0, [r7, #12]
 8022288:	693b      	ldr	r3, [r7, #16]
 802228a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 802228e:	687b      	ldr	r3, [r7, #4]
 8022290:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8022292:	461a      	mov	r2, r3
 8022294:	f000 fad0 	bl	8022838 <dhcp_option_short>
 8022298:	4603      	mov	r3, r0
 802229a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 802229c:	89b8      	ldrh	r0, [r7, #12]
 802229e:	693b      	ldr	r3, [r7, #16]
 80222a0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80222a4:	2303      	movs	r3, #3
 80222a6:	2237      	movs	r2, #55	; 0x37
 80222a8:	f000 fa6c 	bl	8022784 <dhcp_option>
 80222ac:	4603      	mov	r3, r0
 80222ae:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80222b0:	2300      	movs	r3, #0
 80222b2:	77bb      	strb	r3, [r7, #30]
 80222b4:	e00e      	b.n	80222d4 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80222b6:	89b8      	ldrh	r0, [r7, #12]
 80222b8:	693b      	ldr	r3, [r7, #16]
 80222ba:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80222be:	7fbb      	ldrb	r3, [r7, #30]
 80222c0:	4a2a      	ldr	r2, [pc, #168]	; (802236c <dhcp_renew+0x12c>)
 80222c2:	5cd3      	ldrb	r3, [r2, r3]
 80222c4:	461a      	mov	r2, r3
 80222c6:	f000 fa91 	bl	80227ec <dhcp_option_byte>
 80222ca:	4603      	mov	r3, r0
 80222cc:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80222ce:	7fbb      	ldrb	r3, [r7, #30]
 80222d0:	3301      	adds	r3, #1
 80222d2:	77bb      	strb	r3, [r7, #30]
 80222d4:	7fbb      	ldrb	r3, [r7, #30]
 80222d6:	2b02      	cmp	r3, #2
 80222d8:	d9ed      	bls.n	80222b6 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80222da:	89b8      	ldrh	r0, [r7, #12]
 80222dc:	693b      	ldr	r3, [r7, #16]
 80222de:	33f0      	adds	r3, #240	; 0xf0
 80222e0:	697a      	ldr	r2, [r7, #20]
 80222e2:	4619      	mov	r1, r3
 80222e4:	f000 ff96 	bl	8023214 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80222e8:	4b21      	ldr	r3, [pc, #132]	; (8022370 <dhcp_renew+0x130>)
 80222ea:	6818      	ldr	r0, [r3, #0]
 80222ec:	69bb      	ldr	r3, [r7, #24]
 80222ee:	f103 0218 	add.w	r2, r3, #24
 80222f2:	687b      	ldr	r3, [r7, #4]
 80222f4:	9300      	str	r3, [sp, #0]
 80222f6:	2343      	movs	r3, #67	; 0x43
 80222f8:	6979      	ldr	r1, [r7, #20]
 80222fa:	f7fe fe53 	bl	8020fa4 <udp_sendto_if>
 80222fe:	4603      	mov	r3, r0
 8022300:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8022302:	6978      	ldr	r0, [r7, #20]
 8022304:	f7f7 fe58 	bl	8019fb8 <pbuf_free>
 8022308:	e001      	b.n	802230e <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 802230a:	23ff      	movs	r3, #255	; 0xff
 802230c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 802230e:	69bb      	ldr	r3, [r7, #24]
 8022310:	799b      	ldrb	r3, [r3, #6]
 8022312:	2bff      	cmp	r3, #255	; 0xff
 8022314:	d005      	beq.n	8022322 <dhcp_renew+0xe2>
    dhcp->tries++;
 8022316:	69bb      	ldr	r3, [r7, #24]
 8022318:	799b      	ldrb	r3, [r3, #6]
 802231a:	3301      	adds	r3, #1
 802231c:	b2da      	uxtb	r2, r3
 802231e:	69bb      	ldr	r3, [r7, #24]
 8022320:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8022322:	69bb      	ldr	r3, [r7, #24]
 8022324:	799b      	ldrb	r3, [r3, #6]
 8022326:	2b09      	cmp	r3, #9
 8022328:	d80a      	bhi.n	8022340 <dhcp_renew+0x100>
 802232a:	69bb      	ldr	r3, [r7, #24]
 802232c:	799b      	ldrb	r3, [r3, #6]
 802232e:	b29b      	uxth	r3, r3
 8022330:	461a      	mov	r2, r3
 8022332:	0152      	lsls	r2, r2, #5
 8022334:	1ad2      	subs	r2, r2, r3
 8022336:	0092      	lsls	r2, r2, #2
 8022338:	4413      	add	r3, r2
 802233a:	011b      	lsls	r3, r3, #4
 802233c:	b29b      	uxth	r3, r3
 802233e:	e001      	b.n	8022344 <dhcp_renew+0x104>
 8022340:	f644 6320 	movw	r3, #20000	; 0x4e20
 8022344:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8022346:	89fb      	ldrh	r3, [r7, #14]
 8022348:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 802234c:	4a09      	ldr	r2, [pc, #36]	; (8022374 <dhcp_renew+0x134>)
 802234e:	fb82 1203 	smull	r1, r2, r2, r3
 8022352:	1152      	asrs	r2, r2, #5
 8022354:	17db      	asrs	r3, r3, #31
 8022356:	1ad3      	subs	r3, r2, r3
 8022358:	b29a      	uxth	r2, r3
 802235a:	69bb      	ldr	r3, [r7, #24]
 802235c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 802235e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8022362:	4618      	mov	r0, r3
 8022364:	3720      	adds	r7, #32
 8022366:	46bd      	mov	sp, r7
 8022368:	bd80      	pop	{r7, pc}
 802236a:	bf00      	nop
 802236c:	1000006c 	.word	0x1000006c
 8022370:	20013c6c 	.word	0x20013c6c
 8022374:	10624dd3 	.word	0x10624dd3

08022378 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8022378:	b580      	push	{r7, lr}
 802237a:	b08a      	sub	sp, #40	; 0x28
 802237c:	af02      	add	r7, sp, #8
 802237e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8022380:	687b      	ldr	r3, [r7, #4]
 8022382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022384:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8022386:	2104      	movs	r1, #4
 8022388:	69b8      	ldr	r0, [r7, #24]
 802238a:	f000 f9e1 	bl	8022750 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 802238e:	f107 030c 	add.w	r3, r7, #12
 8022392:	2203      	movs	r2, #3
 8022394:	69b9      	ldr	r1, [r7, #24]
 8022396:	6878      	ldr	r0, [r7, #4]
 8022398:	f000 fe66 	bl	8023068 <dhcp_create_msg>
 802239c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 802239e:	697b      	ldr	r3, [r7, #20]
 80223a0:	2b00      	cmp	r3, #0
 80223a2:	d04c      	beq.n	802243e <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80223a4:	697b      	ldr	r3, [r7, #20]
 80223a6:	685b      	ldr	r3, [r3, #4]
 80223a8:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80223aa:	89b8      	ldrh	r0, [r7, #12]
 80223ac:	693b      	ldr	r3, [r7, #16]
 80223ae:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80223b2:	2302      	movs	r3, #2
 80223b4:	2239      	movs	r2, #57	; 0x39
 80223b6:	f000 f9e5 	bl	8022784 <dhcp_option>
 80223ba:	4603      	mov	r3, r0
 80223bc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80223be:	89b8      	ldrh	r0, [r7, #12]
 80223c0:	693b      	ldr	r3, [r7, #16]
 80223c2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80223c6:	687b      	ldr	r3, [r7, #4]
 80223c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80223ca:	461a      	mov	r2, r3
 80223cc:	f000 fa34 	bl	8022838 <dhcp_option_short>
 80223d0:	4603      	mov	r3, r0
 80223d2:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80223d4:	89b8      	ldrh	r0, [r7, #12]
 80223d6:	693b      	ldr	r3, [r7, #16]
 80223d8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80223dc:	2303      	movs	r3, #3
 80223de:	2237      	movs	r2, #55	; 0x37
 80223e0:	f000 f9d0 	bl	8022784 <dhcp_option>
 80223e4:	4603      	mov	r3, r0
 80223e6:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80223e8:	2300      	movs	r3, #0
 80223ea:	77bb      	strb	r3, [r7, #30]
 80223ec:	e00e      	b.n	802240c <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80223ee:	89b8      	ldrh	r0, [r7, #12]
 80223f0:	693b      	ldr	r3, [r7, #16]
 80223f2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80223f6:	7fbb      	ldrb	r3, [r7, #30]
 80223f8:	4a29      	ldr	r2, [pc, #164]	; (80224a0 <dhcp_rebind+0x128>)
 80223fa:	5cd3      	ldrb	r3, [r2, r3]
 80223fc:	461a      	mov	r2, r3
 80223fe:	f000 f9f5 	bl	80227ec <dhcp_option_byte>
 8022402:	4603      	mov	r3, r0
 8022404:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8022406:	7fbb      	ldrb	r3, [r7, #30]
 8022408:	3301      	adds	r3, #1
 802240a:	77bb      	strb	r3, [r7, #30]
 802240c:	7fbb      	ldrb	r3, [r7, #30]
 802240e:	2b02      	cmp	r3, #2
 8022410:	d9ed      	bls.n	80223ee <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8022412:	89b8      	ldrh	r0, [r7, #12]
 8022414:	693b      	ldr	r3, [r7, #16]
 8022416:	33f0      	adds	r3, #240	; 0xf0
 8022418:	697a      	ldr	r2, [r7, #20]
 802241a:	4619      	mov	r1, r3
 802241c:	f000 fefa 	bl	8023214 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8022420:	4b20      	ldr	r3, [pc, #128]	; (80224a4 <dhcp_rebind+0x12c>)
 8022422:	6818      	ldr	r0, [r3, #0]
 8022424:	687b      	ldr	r3, [r7, #4]
 8022426:	9300      	str	r3, [sp, #0]
 8022428:	2343      	movs	r3, #67	; 0x43
 802242a:	4a1f      	ldr	r2, [pc, #124]	; (80224a8 <dhcp_rebind+0x130>)
 802242c:	6979      	ldr	r1, [r7, #20]
 802242e:	f7fe fdb9 	bl	8020fa4 <udp_sendto_if>
 8022432:	4603      	mov	r3, r0
 8022434:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8022436:	6978      	ldr	r0, [r7, #20]
 8022438:	f7f7 fdbe 	bl	8019fb8 <pbuf_free>
 802243c:	e001      	b.n	8022442 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 802243e:	23ff      	movs	r3, #255	; 0xff
 8022440:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8022442:	69bb      	ldr	r3, [r7, #24]
 8022444:	799b      	ldrb	r3, [r3, #6]
 8022446:	2bff      	cmp	r3, #255	; 0xff
 8022448:	d005      	beq.n	8022456 <dhcp_rebind+0xde>
    dhcp->tries++;
 802244a:	69bb      	ldr	r3, [r7, #24]
 802244c:	799b      	ldrb	r3, [r3, #6]
 802244e:	3301      	adds	r3, #1
 8022450:	b2da      	uxtb	r2, r3
 8022452:	69bb      	ldr	r3, [r7, #24]
 8022454:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8022456:	69bb      	ldr	r3, [r7, #24]
 8022458:	799b      	ldrb	r3, [r3, #6]
 802245a:	2b09      	cmp	r3, #9
 802245c:	d80a      	bhi.n	8022474 <dhcp_rebind+0xfc>
 802245e:	69bb      	ldr	r3, [r7, #24]
 8022460:	799b      	ldrb	r3, [r3, #6]
 8022462:	b29b      	uxth	r3, r3
 8022464:	461a      	mov	r2, r3
 8022466:	0152      	lsls	r2, r2, #5
 8022468:	1ad2      	subs	r2, r2, r3
 802246a:	0092      	lsls	r2, r2, #2
 802246c:	4413      	add	r3, r2
 802246e:	00db      	lsls	r3, r3, #3
 8022470:	b29b      	uxth	r3, r3
 8022472:	e001      	b.n	8022478 <dhcp_rebind+0x100>
 8022474:	f242 7310 	movw	r3, #10000	; 0x2710
 8022478:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 802247a:	89fb      	ldrh	r3, [r7, #14]
 802247c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8022480:	4a0a      	ldr	r2, [pc, #40]	; (80224ac <dhcp_rebind+0x134>)
 8022482:	fb82 1203 	smull	r1, r2, r2, r3
 8022486:	1152      	asrs	r2, r2, #5
 8022488:	17db      	asrs	r3, r3, #31
 802248a:	1ad3      	subs	r3, r2, r3
 802248c:	b29a      	uxth	r2, r3
 802248e:	69bb      	ldr	r3, [r7, #24]
 8022490:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8022492:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8022496:	4618      	mov	r0, r3
 8022498:	3720      	adds	r7, #32
 802249a:	46bd      	mov	sp, r7
 802249c:	bd80      	pop	{r7, pc}
 802249e:	bf00      	nop
 80224a0:	1000006c 	.word	0x1000006c
 80224a4:	20013c6c 	.word	0x20013c6c
 80224a8:	08030e28 	.word	0x08030e28
 80224ac:	10624dd3 	.word	0x10624dd3

080224b0 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 80224b0:	b5b0      	push	{r4, r5, r7, lr}
 80224b2:	b08a      	sub	sp, #40	; 0x28
 80224b4:	af02      	add	r7, sp, #8
 80224b6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80224b8:	687b      	ldr	r3, [r7, #4]
 80224ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80224bc:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 80224be:	2103      	movs	r1, #3
 80224c0:	69b8      	ldr	r0, [r7, #24]
 80224c2:	f000 f945 	bl	8022750 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80224c6:	f107 030c 	add.w	r3, r7, #12
 80224ca:	2203      	movs	r2, #3
 80224cc:	69b9      	ldr	r1, [r7, #24]
 80224ce:	6878      	ldr	r0, [r7, #4]
 80224d0:	f000 fdca 	bl	8023068 <dhcp_create_msg>
 80224d4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80224d6:	697b      	ldr	r3, [r7, #20]
 80224d8:	2b00      	cmp	r3, #0
 80224da:	d066      	beq.n	80225aa <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80224dc:	697b      	ldr	r3, [r7, #20]
 80224de:	685b      	ldr	r3, [r3, #4]
 80224e0:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80224e2:	89b8      	ldrh	r0, [r7, #12]
 80224e4:	693b      	ldr	r3, [r7, #16]
 80224e6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80224ea:	2302      	movs	r3, #2
 80224ec:	2239      	movs	r2, #57	; 0x39
 80224ee:	f000 f949 	bl	8022784 <dhcp_option>
 80224f2:	4603      	mov	r3, r0
 80224f4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 80224f6:	89b8      	ldrh	r0, [r7, #12]
 80224f8:	693b      	ldr	r3, [r7, #16]
 80224fa:	33f0      	adds	r3, #240	; 0xf0
 80224fc:	f44f 7210 	mov.w	r2, #576	; 0x240
 8022500:	4619      	mov	r1, r3
 8022502:	f000 f999 	bl	8022838 <dhcp_option_short>
 8022506:	4603      	mov	r3, r0
 8022508:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 802250a:	89b8      	ldrh	r0, [r7, #12]
 802250c:	693b      	ldr	r3, [r7, #16]
 802250e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8022512:	2304      	movs	r3, #4
 8022514:	2232      	movs	r2, #50	; 0x32
 8022516:	f000 f935 	bl	8022784 <dhcp_option>
 802251a:	4603      	mov	r3, r0
 802251c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 802251e:	89bc      	ldrh	r4, [r7, #12]
 8022520:	693b      	ldr	r3, [r7, #16]
 8022522:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8022526:	69bb      	ldr	r3, [r7, #24]
 8022528:	69db      	ldr	r3, [r3, #28]
 802252a:	4618      	mov	r0, r3
 802252c:	f7f6 f943 	bl	80187b6 <lwip_htonl>
 8022530:	4603      	mov	r3, r0
 8022532:	461a      	mov	r2, r3
 8022534:	4629      	mov	r1, r5
 8022536:	4620      	mov	r0, r4
 8022538:	f000 f9b0 	bl	802289c <dhcp_option_long>
 802253c:	4603      	mov	r3, r0
 802253e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8022540:	89b8      	ldrh	r0, [r7, #12]
 8022542:	693b      	ldr	r3, [r7, #16]
 8022544:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8022548:	2303      	movs	r3, #3
 802254a:	2237      	movs	r2, #55	; 0x37
 802254c:	f000 f91a 	bl	8022784 <dhcp_option>
 8022550:	4603      	mov	r3, r0
 8022552:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8022554:	2300      	movs	r3, #0
 8022556:	77bb      	strb	r3, [r7, #30]
 8022558:	e00e      	b.n	8022578 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 802255a:	89b8      	ldrh	r0, [r7, #12]
 802255c:	693b      	ldr	r3, [r7, #16]
 802255e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8022562:	7fbb      	ldrb	r3, [r7, #30]
 8022564:	4a29      	ldr	r2, [pc, #164]	; (802260c <dhcp_reboot+0x15c>)
 8022566:	5cd3      	ldrb	r3, [r2, r3]
 8022568:	461a      	mov	r2, r3
 802256a:	f000 f93f 	bl	80227ec <dhcp_option_byte>
 802256e:	4603      	mov	r3, r0
 8022570:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8022572:	7fbb      	ldrb	r3, [r7, #30]
 8022574:	3301      	adds	r3, #1
 8022576:	77bb      	strb	r3, [r7, #30]
 8022578:	7fbb      	ldrb	r3, [r7, #30]
 802257a:	2b02      	cmp	r3, #2
 802257c:	d9ed      	bls.n	802255a <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 802257e:	89b8      	ldrh	r0, [r7, #12]
 8022580:	693b      	ldr	r3, [r7, #16]
 8022582:	33f0      	adds	r3, #240	; 0xf0
 8022584:	697a      	ldr	r2, [r7, #20]
 8022586:	4619      	mov	r1, r3
 8022588:	f000 fe44 	bl	8023214 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 802258c:	4b20      	ldr	r3, [pc, #128]	; (8022610 <dhcp_reboot+0x160>)
 802258e:	6818      	ldr	r0, [r3, #0]
 8022590:	687b      	ldr	r3, [r7, #4]
 8022592:	9300      	str	r3, [sp, #0]
 8022594:	2343      	movs	r3, #67	; 0x43
 8022596:	4a1f      	ldr	r2, [pc, #124]	; (8022614 <dhcp_reboot+0x164>)
 8022598:	6979      	ldr	r1, [r7, #20]
 802259a:	f7fe fd03 	bl	8020fa4 <udp_sendto_if>
 802259e:	4603      	mov	r3, r0
 80225a0:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80225a2:	6978      	ldr	r0, [r7, #20]
 80225a4:	f7f7 fd08 	bl	8019fb8 <pbuf_free>
 80225a8:	e001      	b.n	80225ae <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80225aa:	23ff      	movs	r3, #255	; 0xff
 80225ac:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80225ae:	69bb      	ldr	r3, [r7, #24]
 80225b0:	799b      	ldrb	r3, [r3, #6]
 80225b2:	2bff      	cmp	r3, #255	; 0xff
 80225b4:	d005      	beq.n	80225c2 <dhcp_reboot+0x112>
    dhcp->tries++;
 80225b6:	69bb      	ldr	r3, [r7, #24]
 80225b8:	799b      	ldrb	r3, [r3, #6]
 80225ba:	3301      	adds	r3, #1
 80225bc:	b2da      	uxtb	r2, r3
 80225be:	69bb      	ldr	r3, [r7, #24]
 80225c0:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80225c2:	69bb      	ldr	r3, [r7, #24]
 80225c4:	799b      	ldrb	r3, [r3, #6]
 80225c6:	2b09      	cmp	r3, #9
 80225c8:	d80a      	bhi.n	80225e0 <dhcp_reboot+0x130>
 80225ca:	69bb      	ldr	r3, [r7, #24]
 80225cc:	799b      	ldrb	r3, [r3, #6]
 80225ce:	b29b      	uxth	r3, r3
 80225d0:	461a      	mov	r2, r3
 80225d2:	0152      	lsls	r2, r2, #5
 80225d4:	1ad2      	subs	r2, r2, r3
 80225d6:	0092      	lsls	r2, r2, #2
 80225d8:	4413      	add	r3, r2
 80225da:	00db      	lsls	r3, r3, #3
 80225dc:	b29b      	uxth	r3, r3
 80225de:	e001      	b.n	80225e4 <dhcp_reboot+0x134>
 80225e0:	f242 7310 	movw	r3, #10000	; 0x2710
 80225e4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80225e6:	89fb      	ldrh	r3, [r7, #14]
 80225e8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80225ec:	4a0a      	ldr	r2, [pc, #40]	; (8022618 <dhcp_reboot+0x168>)
 80225ee:	fb82 1203 	smull	r1, r2, r2, r3
 80225f2:	1152      	asrs	r2, r2, #5
 80225f4:	17db      	asrs	r3, r3, #31
 80225f6:	1ad3      	subs	r3, r2, r3
 80225f8:	b29a      	uxth	r2, r3
 80225fa:	69bb      	ldr	r3, [r7, #24]
 80225fc:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80225fe:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8022602:	4618      	mov	r0, r3
 8022604:	3720      	adds	r7, #32
 8022606:	46bd      	mov	sp, r7
 8022608:	bdb0      	pop	{r4, r5, r7, pc}
 802260a:	bf00      	nop
 802260c:	1000006c 	.word	0x1000006c
 8022610:	20013c6c 	.word	0x20013c6c
 8022614:	08030e28 	.word	0x08030e28
 8022618:	10624dd3 	.word	0x10624dd3

0802261c <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 802261c:	b5b0      	push	{r4, r5, r7, lr}
 802261e:	b08a      	sub	sp, #40	; 0x28
 8022620:	af02      	add	r7, sp, #8
 8022622:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8022624:	687b      	ldr	r3, [r7, #4]
 8022626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022628:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 802262a:	69fb      	ldr	r3, [r7, #28]
 802262c:	2b00      	cmp	r3, #0
 802262e:	f000 8084 	beq.w	802273a <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8022632:	69fb      	ldr	r3, [r7, #28]
 8022634:	795b      	ldrb	r3, [r3, #5]
 8022636:	2b00      	cmp	r3, #0
 8022638:	f000 8081 	beq.w	802273e <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 802263c:	69fb      	ldr	r3, [r7, #28]
 802263e:	699b      	ldr	r3, [r3, #24]
 8022640:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8022642:	69fb      	ldr	r3, [r7, #28]
 8022644:	2200      	movs	r2, #0
 8022646:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8022648:	69fb      	ldr	r3, [r7, #28]
 802264a:	2200      	movs	r2, #0
 802264c:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 802264e:	69fb      	ldr	r3, [r7, #28]
 8022650:	2200      	movs	r2, #0
 8022652:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8022654:	69fb      	ldr	r3, [r7, #28]
 8022656:	2200      	movs	r2, #0
 8022658:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 802265a:	69fb      	ldr	r3, [r7, #28]
 802265c:	2200      	movs	r2, #0
 802265e:	631a      	str	r2, [r3, #48]	; 0x30
 8022660:	69fb      	ldr	r3, [r7, #28]
 8022662:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8022664:	69fb      	ldr	r3, [r7, #28]
 8022666:	62da      	str	r2, [r3, #44]	; 0x2c
 8022668:	69fb      	ldr	r3, [r7, #28]
 802266a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802266c:	69fb      	ldr	r3, [r7, #28]
 802266e:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8022670:	69fb      	ldr	r3, [r7, #28]
 8022672:	2200      	movs	r2, #0
 8022674:	829a      	strh	r2, [r3, #20]
 8022676:	69fb      	ldr	r3, [r7, #28]
 8022678:	8a9a      	ldrh	r2, [r3, #20]
 802267a:	69fb      	ldr	r3, [r7, #28]
 802267c:	825a      	strh	r2, [r3, #18]
 802267e:	69fb      	ldr	r3, [r7, #28]
 8022680:	8a5a      	ldrh	r2, [r3, #18]
 8022682:	69fb      	ldr	r3, [r7, #28]
 8022684:	821a      	strh	r2, [r3, #16]
 8022686:	69fb      	ldr	r3, [r7, #28]
 8022688:	8a1a      	ldrh	r2, [r3, #16]
 802268a:	69fb      	ldr	r3, [r7, #28]
 802268c:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 802268e:	6878      	ldr	r0, [r7, #4]
 8022690:	f000 fdee 	bl	8023270 <dhcp_supplied_address>
 8022694:	4603      	mov	r3, r0
 8022696:	2b00      	cmp	r3, #0
 8022698:	d03b      	beq.n	8022712 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 802269a:	f107 030e 	add.w	r3, r7, #14
 802269e:	2207      	movs	r2, #7
 80226a0:	69f9      	ldr	r1, [r7, #28]
 80226a2:	6878      	ldr	r0, [r7, #4]
 80226a4:	f000 fce0 	bl	8023068 <dhcp_create_msg>
 80226a8:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 80226aa:	69bb      	ldr	r3, [r7, #24]
 80226ac:	2b00      	cmp	r3, #0
 80226ae:	d030      	beq.n	8022712 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80226b0:	69bb      	ldr	r3, [r7, #24]
 80226b2:	685b      	ldr	r3, [r3, #4]
 80226b4:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80226b6:	89f8      	ldrh	r0, [r7, #14]
 80226b8:	697b      	ldr	r3, [r7, #20]
 80226ba:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80226be:	2304      	movs	r3, #4
 80226c0:	2236      	movs	r2, #54	; 0x36
 80226c2:	f000 f85f 	bl	8022784 <dhcp_option>
 80226c6:	4603      	mov	r3, r0
 80226c8:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 80226ca:	89fc      	ldrh	r4, [r7, #14]
 80226cc:	697b      	ldr	r3, [r7, #20]
 80226ce:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80226d2:	693b      	ldr	r3, [r7, #16]
 80226d4:	4618      	mov	r0, r3
 80226d6:	f7f6 f86e 	bl	80187b6 <lwip_htonl>
 80226da:	4603      	mov	r3, r0
 80226dc:	461a      	mov	r2, r3
 80226de:	4629      	mov	r1, r5
 80226e0:	4620      	mov	r0, r4
 80226e2:	f000 f8db 	bl	802289c <dhcp_option_long>
 80226e6:	4603      	mov	r3, r0
 80226e8:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80226ea:	89f8      	ldrh	r0, [r7, #14]
 80226ec:	697b      	ldr	r3, [r7, #20]
 80226ee:	33f0      	adds	r3, #240	; 0xf0
 80226f0:	69ba      	ldr	r2, [r7, #24]
 80226f2:	4619      	mov	r1, r3
 80226f4:	f000 fd8e 	bl	8023214 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80226f8:	4b13      	ldr	r3, [pc, #76]	; (8022748 <dhcp_release_and_stop+0x12c>)
 80226fa:	6818      	ldr	r0, [r3, #0]
 80226fc:	f107 0210 	add.w	r2, r7, #16
 8022700:	687b      	ldr	r3, [r7, #4]
 8022702:	9300      	str	r3, [sp, #0]
 8022704:	2343      	movs	r3, #67	; 0x43
 8022706:	69b9      	ldr	r1, [r7, #24]
 8022708:	f7fe fc4c 	bl	8020fa4 <udp_sendto_if>
      pbuf_free(p_out);
 802270c:	69b8      	ldr	r0, [r7, #24]
 802270e:	f7f7 fc53 	bl	8019fb8 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8022712:	4b0e      	ldr	r3, [pc, #56]	; (802274c <dhcp_release_and_stop+0x130>)
 8022714:	4a0d      	ldr	r2, [pc, #52]	; (802274c <dhcp_release_and_stop+0x130>)
 8022716:	490d      	ldr	r1, [pc, #52]	; (802274c <dhcp_release_and_stop+0x130>)
 8022718:	6878      	ldr	r0, [r7, #4]
 802271a:	f7f6 ff3f 	bl	801959c <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 802271e:	2100      	movs	r1, #0
 8022720:	69f8      	ldr	r0, [r7, #28]
 8022722:	f000 f815 	bl	8022750 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8022726:	69fb      	ldr	r3, [r7, #28]
 8022728:	791b      	ldrb	r3, [r3, #4]
 802272a:	2b00      	cmp	r3, #0
 802272c:	d008      	beq.n	8022740 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 802272e:	f7fe ff85 	bl	802163c <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8022732:	69fb      	ldr	r3, [r7, #28]
 8022734:	2200      	movs	r2, #0
 8022736:	711a      	strb	r2, [r3, #4]
 8022738:	e002      	b.n	8022740 <dhcp_release_and_stop+0x124>
    return;
 802273a:	bf00      	nop
 802273c:	e000      	b.n	8022740 <dhcp_release_and_stop+0x124>
    return;
 802273e:	bf00      	nop
  }
}
 8022740:	3720      	adds	r7, #32
 8022742:	46bd      	mov	sp, r7
 8022744:	bdb0      	pop	{r4, r5, r7, pc}
 8022746:	bf00      	nop
 8022748:	20013c6c 	.word	0x20013c6c
 802274c:	08030e24 	.word	0x08030e24

08022750 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8022750:	b480      	push	{r7}
 8022752:	b083      	sub	sp, #12
 8022754:	af00      	add	r7, sp, #0
 8022756:	6078      	str	r0, [r7, #4]
 8022758:	460b      	mov	r3, r1
 802275a:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 802275c:	687b      	ldr	r3, [r7, #4]
 802275e:	795b      	ldrb	r3, [r3, #5]
 8022760:	78fa      	ldrb	r2, [r7, #3]
 8022762:	429a      	cmp	r2, r3
 8022764:	d008      	beq.n	8022778 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8022766:	687b      	ldr	r3, [r7, #4]
 8022768:	78fa      	ldrb	r2, [r7, #3]
 802276a:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 802276c:	687b      	ldr	r3, [r7, #4]
 802276e:	2200      	movs	r2, #0
 8022770:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8022772:	687b      	ldr	r3, [r7, #4]
 8022774:	2200      	movs	r2, #0
 8022776:	811a      	strh	r2, [r3, #8]
  }
}
 8022778:	bf00      	nop
 802277a:	370c      	adds	r7, #12
 802277c:	46bd      	mov	sp, r7
 802277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022782:	4770      	bx	lr

08022784 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8022784:	b580      	push	{r7, lr}
 8022786:	b082      	sub	sp, #8
 8022788:	af00      	add	r7, sp, #0
 802278a:	6039      	str	r1, [r7, #0]
 802278c:	4611      	mov	r1, r2
 802278e:	461a      	mov	r2, r3
 8022790:	4603      	mov	r3, r0
 8022792:	80fb      	strh	r3, [r7, #6]
 8022794:	460b      	mov	r3, r1
 8022796:	717b      	strb	r3, [r7, #5]
 8022798:	4613      	mov	r3, r2
 802279a:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 802279c:	88fa      	ldrh	r2, [r7, #6]
 802279e:	793b      	ldrb	r3, [r7, #4]
 80227a0:	4413      	add	r3, r2
 80227a2:	3302      	adds	r3, #2
 80227a4:	2b44      	cmp	r3, #68	; 0x44
 80227a6:	d906      	bls.n	80227b6 <dhcp_option+0x32>
 80227a8:	4b0d      	ldr	r3, [pc, #52]	; (80227e0 <dhcp_option+0x5c>)
 80227aa:	f240 529a 	movw	r2, #1434	; 0x59a
 80227ae:	490d      	ldr	r1, [pc, #52]	; (80227e4 <dhcp_option+0x60>)
 80227b0:	480d      	ldr	r0, [pc, #52]	; (80227e8 <dhcp_option+0x64>)
 80227b2:	f004 f88b 	bl	80268cc <iprintf>
  options[options_out_len++] = option_type;
 80227b6:	88fb      	ldrh	r3, [r7, #6]
 80227b8:	1c5a      	adds	r2, r3, #1
 80227ba:	80fa      	strh	r2, [r7, #6]
 80227bc:	461a      	mov	r2, r3
 80227be:	683b      	ldr	r3, [r7, #0]
 80227c0:	4413      	add	r3, r2
 80227c2:	797a      	ldrb	r2, [r7, #5]
 80227c4:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 80227c6:	88fb      	ldrh	r3, [r7, #6]
 80227c8:	1c5a      	adds	r2, r3, #1
 80227ca:	80fa      	strh	r2, [r7, #6]
 80227cc:	461a      	mov	r2, r3
 80227ce:	683b      	ldr	r3, [r7, #0]
 80227d0:	4413      	add	r3, r2
 80227d2:	793a      	ldrb	r2, [r7, #4]
 80227d4:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80227d6:	88fb      	ldrh	r3, [r7, #6]
}
 80227d8:	4618      	mov	r0, r3
 80227da:	3708      	adds	r7, #8
 80227dc:	46bd      	mov	sp, r7
 80227de:	bd80      	pop	{r7, pc}
 80227e0:	0802ec10 	.word	0x0802ec10
 80227e4:	0802eda4 	.word	0x0802eda4
 80227e8:	0802ec70 	.word	0x0802ec70

080227ec <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 80227ec:	b580      	push	{r7, lr}
 80227ee:	b082      	sub	sp, #8
 80227f0:	af00      	add	r7, sp, #0
 80227f2:	4603      	mov	r3, r0
 80227f4:	6039      	str	r1, [r7, #0]
 80227f6:	80fb      	strh	r3, [r7, #6]
 80227f8:	4613      	mov	r3, r2
 80227fa:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 80227fc:	88fb      	ldrh	r3, [r7, #6]
 80227fe:	2b43      	cmp	r3, #67	; 0x43
 8022800:	d906      	bls.n	8022810 <dhcp_option_byte+0x24>
 8022802:	4b0a      	ldr	r3, [pc, #40]	; (802282c <dhcp_option_byte+0x40>)
 8022804:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8022808:	4909      	ldr	r1, [pc, #36]	; (8022830 <dhcp_option_byte+0x44>)
 802280a:	480a      	ldr	r0, [pc, #40]	; (8022834 <dhcp_option_byte+0x48>)
 802280c:	f004 f85e 	bl	80268cc <iprintf>
  options[options_out_len++] = value;
 8022810:	88fb      	ldrh	r3, [r7, #6]
 8022812:	1c5a      	adds	r2, r3, #1
 8022814:	80fa      	strh	r2, [r7, #6]
 8022816:	461a      	mov	r2, r3
 8022818:	683b      	ldr	r3, [r7, #0]
 802281a:	4413      	add	r3, r2
 802281c:	797a      	ldrb	r2, [r7, #5]
 802281e:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8022820:	88fb      	ldrh	r3, [r7, #6]
}
 8022822:	4618      	mov	r0, r3
 8022824:	3708      	adds	r7, #8
 8022826:	46bd      	mov	sp, r7
 8022828:	bd80      	pop	{r7, pc}
 802282a:	bf00      	nop
 802282c:	0802ec10 	.word	0x0802ec10
 8022830:	0802ede8 	.word	0x0802ede8
 8022834:	0802ec70 	.word	0x0802ec70

08022838 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8022838:	b580      	push	{r7, lr}
 802283a:	b082      	sub	sp, #8
 802283c:	af00      	add	r7, sp, #0
 802283e:	4603      	mov	r3, r0
 8022840:	6039      	str	r1, [r7, #0]
 8022842:	80fb      	strh	r3, [r7, #6]
 8022844:	4613      	mov	r3, r2
 8022846:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8022848:	88fb      	ldrh	r3, [r7, #6]
 802284a:	3302      	adds	r3, #2
 802284c:	2b44      	cmp	r3, #68	; 0x44
 802284e:	d906      	bls.n	802285e <dhcp_option_short+0x26>
 8022850:	4b0f      	ldr	r3, [pc, #60]	; (8022890 <dhcp_option_short+0x58>)
 8022852:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8022856:	490f      	ldr	r1, [pc, #60]	; (8022894 <dhcp_option_short+0x5c>)
 8022858:	480f      	ldr	r0, [pc, #60]	; (8022898 <dhcp_option_short+0x60>)
 802285a:	f004 f837 	bl	80268cc <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 802285e:	88bb      	ldrh	r3, [r7, #4]
 8022860:	0a1b      	lsrs	r3, r3, #8
 8022862:	b29a      	uxth	r2, r3
 8022864:	88fb      	ldrh	r3, [r7, #6]
 8022866:	1c59      	adds	r1, r3, #1
 8022868:	80f9      	strh	r1, [r7, #6]
 802286a:	4619      	mov	r1, r3
 802286c:	683b      	ldr	r3, [r7, #0]
 802286e:	440b      	add	r3, r1
 8022870:	b2d2      	uxtb	r2, r2
 8022872:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8022874:	88fb      	ldrh	r3, [r7, #6]
 8022876:	1c5a      	adds	r2, r3, #1
 8022878:	80fa      	strh	r2, [r7, #6]
 802287a:	461a      	mov	r2, r3
 802287c:	683b      	ldr	r3, [r7, #0]
 802287e:	4413      	add	r3, r2
 8022880:	88ba      	ldrh	r2, [r7, #4]
 8022882:	b2d2      	uxtb	r2, r2
 8022884:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8022886:	88fb      	ldrh	r3, [r7, #6]
}
 8022888:	4618      	mov	r0, r3
 802288a:	3708      	adds	r7, #8
 802288c:	46bd      	mov	sp, r7
 802288e:	bd80      	pop	{r7, pc}
 8022890:	0802ec10 	.word	0x0802ec10
 8022894:	0802ee20 	.word	0x0802ee20
 8022898:	0802ec70 	.word	0x0802ec70

0802289c <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 802289c:	b580      	push	{r7, lr}
 802289e:	b084      	sub	sp, #16
 80228a0:	af00      	add	r7, sp, #0
 80228a2:	4603      	mov	r3, r0
 80228a4:	60b9      	str	r1, [r7, #8]
 80228a6:	607a      	str	r2, [r7, #4]
 80228a8:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 80228aa:	89fb      	ldrh	r3, [r7, #14]
 80228ac:	3304      	adds	r3, #4
 80228ae:	2b44      	cmp	r3, #68	; 0x44
 80228b0:	d906      	bls.n	80228c0 <dhcp_option_long+0x24>
 80228b2:	4b19      	ldr	r3, [pc, #100]	; (8022918 <dhcp_option_long+0x7c>)
 80228b4:	f240 52b7 	movw	r2, #1463	; 0x5b7
 80228b8:	4918      	ldr	r1, [pc, #96]	; (802291c <dhcp_option_long+0x80>)
 80228ba:	4819      	ldr	r0, [pc, #100]	; (8022920 <dhcp_option_long+0x84>)
 80228bc:	f004 f806 	bl	80268cc <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 80228c0:	687b      	ldr	r3, [r7, #4]
 80228c2:	0e1a      	lsrs	r2, r3, #24
 80228c4:	89fb      	ldrh	r3, [r7, #14]
 80228c6:	1c59      	adds	r1, r3, #1
 80228c8:	81f9      	strh	r1, [r7, #14]
 80228ca:	4619      	mov	r1, r3
 80228cc:	68bb      	ldr	r3, [r7, #8]
 80228ce:	440b      	add	r3, r1
 80228d0:	b2d2      	uxtb	r2, r2
 80228d2:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 80228d4:	687b      	ldr	r3, [r7, #4]
 80228d6:	0c1a      	lsrs	r2, r3, #16
 80228d8:	89fb      	ldrh	r3, [r7, #14]
 80228da:	1c59      	adds	r1, r3, #1
 80228dc:	81f9      	strh	r1, [r7, #14]
 80228de:	4619      	mov	r1, r3
 80228e0:	68bb      	ldr	r3, [r7, #8]
 80228e2:	440b      	add	r3, r1
 80228e4:	b2d2      	uxtb	r2, r2
 80228e6:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 80228e8:	687b      	ldr	r3, [r7, #4]
 80228ea:	0a1a      	lsrs	r2, r3, #8
 80228ec:	89fb      	ldrh	r3, [r7, #14]
 80228ee:	1c59      	adds	r1, r3, #1
 80228f0:	81f9      	strh	r1, [r7, #14]
 80228f2:	4619      	mov	r1, r3
 80228f4:	68bb      	ldr	r3, [r7, #8]
 80228f6:	440b      	add	r3, r1
 80228f8:	b2d2      	uxtb	r2, r2
 80228fa:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 80228fc:	89fb      	ldrh	r3, [r7, #14]
 80228fe:	1c5a      	adds	r2, r3, #1
 8022900:	81fa      	strh	r2, [r7, #14]
 8022902:	461a      	mov	r2, r3
 8022904:	68bb      	ldr	r3, [r7, #8]
 8022906:	4413      	add	r3, r2
 8022908:	687a      	ldr	r2, [r7, #4]
 802290a:	b2d2      	uxtb	r2, r2
 802290c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 802290e:	89fb      	ldrh	r3, [r7, #14]
}
 8022910:	4618      	mov	r0, r3
 8022912:	3710      	adds	r7, #16
 8022914:	46bd      	mov	sp, r7
 8022916:	bd80      	pop	{r7, pc}
 8022918:	0802ec10 	.word	0x0802ec10
 802291c:	0802ee5c 	.word	0x0802ee5c
 8022920:	0802ec70 	.word	0x0802ec70

08022924 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8022924:	b580      	push	{r7, lr}
 8022926:	b090      	sub	sp, #64	; 0x40
 8022928:	af00      	add	r7, sp, #0
 802292a:	6078      	str	r0, [r7, #4]
 802292c:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 802292e:	2300      	movs	r3, #0
 8022930:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 8022932:	2300      	movs	r3, #0
 8022934:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8022936:	2208      	movs	r2, #8
 8022938:	2100      	movs	r1, #0
 802293a:	48b5      	ldr	r0, [pc, #724]	; (8022c10 <dhcp_parse_reply+0x2ec>)
 802293c:	f003 f91a 	bl	8025b74 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8022940:	687b      	ldr	r3, [r7, #4]
 8022942:	895b      	ldrh	r3, [r3, #10]
 8022944:	2b2b      	cmp	r3, #43	; 0x2b
 8022946:	d802      	bhi.n	802294e <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8022948:	f06f 0301 	mvn.w	r3, #1
 802294c:	e2a7      	b.n	8022e9e <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 802294e:	687b      	ldr	r3, [r7, #4]
 8022950:	685b      	ldr	r3, [r3, #4]
 8022952:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8022954:	23f0      	movs	r3, #240	; 0xf0
 8022956:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8022958:	687b      	ldr	r3, [r7, #4]
 802295a:	891b      	ldrh	r3, [r3, #8]
 802295c:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 802295e:	687b      	ldr	r3, [r7, #4]
 8022960:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8022962:	e00c      	b.n	802297e <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8022964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022966:	895b      	ldrh	r3, [r3, #10]
 8022968:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 802296a:	1ad3      	subs	r3, r2, r3
 802296c:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 802296e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022970:	895b      	ldrh	r3, [r3, #10]
 8022972:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8022974:	1ad3      	subs	r3, r2, r3
 8022976:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 8022978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802297a:	681b      	ldr	r3, [r3, #0]
 802297c:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 802297e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022980:	2b00      	cmp	r3, #0
 8022982:	d004      	beq.n	802298e <dhcp_parse_reply+0x6a>
 8022984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022986:	895b      	ldrh	r3, [r3, #10]
 8022988:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 802298a:	429a      	cmp	r2, r3
 802298c:	d2ea      	bcs.n	8022964 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 802298e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022990:	2b00      	cmp	r3, #0
 8022992:	d102      	bne.n	802299a <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8022994:	f06f 0301 	mvn.w	r3, #1
 8022998:	e281      	b.n	8022e9e <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 802299a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 802299c:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 802299e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80229a0:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 80229a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80229a4:	685b      	ldr	r3, [r3, #4]
 80229a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80229a8:	e239      	b.n	8022e1e <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 80229aa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80229ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80229ae:	4413      	add	r3, r2
 80229b0:	781b      	ldrb	r3, [r3, #0]
 80229b2:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 80229b4:	2300      	movs	r3, #0
 80229b6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 80229ba:	f04f 33ff 	mov.w	r3, #4294967295
 80229be:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 80229c0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80229c2:	3302      	adds	r3, #2
 80229c4:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 80229c6:	8bfa      	ldrh	r2, [r7, #30]
 80229c8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80229ca:	429a      	cmp	r2, r3
 80229cc:	d202      	bcs.n	80229d4 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 80229ce:	f06f 0301 	mvn.w	r3, #1
 80229d2:	e264      	b.n	8022e9e <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 80229d4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80229d6:	3301      	adds	r3, #1
 80229d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80229da:	8952      	ldrh	r2, [r2, #10]
 80229dc:	4293      	cmp	r3, r2
 80229de:	da07      	bge.n	80229f0 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 80229e0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80229e2:	3301      	adds	r3, #1
 80229e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80229e6:	4413      	add	r3, r2
 80229e8:	781b      	ldrb	r3, [r3, #0]
 80229ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80229ee:	e00b      	b.n	8022a08 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 80229f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80229f2:	681b      	ldr	r3, [r3, #0]
 80229f4:	2b00      	cmp	r3, #0
 80229f6:	d004      	beq.n	8022a02 <dhcp_parse_reply+0xde>
 80229f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80229fa:	681b      	ldr	r3, [r3, #0]
 80229fc:	685b      	ldr	r3, [r3, #4]
 80229fe:	781b      	ldrb	r3, [r3, #0]
 8022a00:	e000      	b.n	8022a04 <dhcp_parse_reply+0xe0>
 8022a02:	2300      	movs	r3, #0
 8022a04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8022a08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8022a0c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8022a10:	7dfb      	ldrb	r3, [r7, #23]
 8022a12:	2b3b      	cmp	r3, #59	; 0x3b
 8022a14:	f200 812c 	bhi.w	8022c70 <dhcp_parse_reply+0x34c>
 8022a18:	a201      	add	r2, pc, #4	; (adr r2, 8022a20 <dhcp_parse_reply+0xfc>)
 8022a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022a1e:	bf00      	nop
 8022a20:	08022b11 	.word	0x08022b11
 8022a24:	08022b21 	.word	0x08022b21
 8022a28:	08022c71 	.word	0x08022c71
 8022a2c:	08022b43 	.word	0x08022b43
 8022a30:	08022c71 	.word	0x08022c71
 8022a34:	08022c71 	.word	0x08022c71
 8022a38:	08022c71 	.word	0x08022c71
 8022a3c:	08022c71 	.word	0x08022c71
 8022a40:	08022c71 	.word	0x08022c71
 8022a44:	08022c71 	.word	0x08022c71
 8022a48:	08022c71 	.word	0x08022c71
 8022a4c:	08022c71 	.word	0x08022c71
 8022a50:	08022c71 	.word	0x08022c71
 8022a54:	08022c71 	.word	0x08022c71
 8022a58:	08022c71 	.word	0x08022c71
 8022a5c:	08022c71 	.word	0x08022c71
 8022a60:	08022c71 	.word	0x08022c71
 8022a64:	08022c71 	.word	0x08022c71
 8022a68:	08022c71 	.word	0x08022c71
 8022a6c:	08022c71 	.word	0x08022c71
 8022a70:	08022c71 	.word	0x08022c71
 8022a74:	08022c71 	.word	0x08022c71
 8022a78:	08022c71 	.word	0x08022c71
 8022a7c:	08022c71 	.word	0x08022c71
 8022a80:	08022c71 	.word	0x08022c71
 8022a84:	08022c71 	.word	0x08022c71
 8022a88:	08022c71 	.word	0x08022c71
 8022a8c:	08022c71 	.word	0x08022c71
 8022a90:	08022c71 	.word	0x08022c71
 8022a94:	08022c71 	.word	0x08022c71
 8022a98:	08022c71 	.word	0x08022c71
 8022a9c:	08022c71 	.word	0x08022c71
 8022aa0:	08022c71 	.word	0x08022c71
 8022aa4:	08022c71 	.word	0x08022c71
 8022aa8:	08022c71 	.word	0x08022c71
 8022aac:	08022c71 	.word	0x08022c71
 8022ab0:	08022c71 	.word	0x08022c71
 8022ab4:	08022c71 	.word	0x08022c71
 8022ab8:	08022c71 	.word	0x08022c71
 8022abc:	08022c71 	.word	0x08022c71
 8022ac0:	08022c71 	.word	0x08022c71
 8022ac4:	08022c71 	.word	0x08022c71
 8022ac8:	08022c71 	.word	0x08022c71
 8022acc:	08022c71 	.word	0x08022c71
 8022ad0:	08022c71 	.word	0x08022c71
 8022ad4:	08022c71 	.word	0x08022c71
 8022ad8:	08022c71 	.word	0x08022c71
 8022adc:	08022c71 	.word	0x08022c71
 8022ae0:	08022c71 	.word	0x08022c71
 8022ae4:	08022c71 	.word	0x08022c71
 8022ae8:	08022c71 	.word	0x08022c71
 8022aec:	08022b6f 	.word	0x08022b6f
 8022af0:	08022b91 	.word	0x08022b91
 8022af4:	08022bcd 	.word	0x08022bcd
 8022af8:	08022bef 	.word	0x08022bef
 8022afc:	08022c71 	.word	0x08022c71
 8022b00:	08022c71 	.word	0x08022c71
 8022b04:	08022c71 	.word	0x08022c71
 8022b08:	08022c2d 	.word	0x08022c2d
 8022b0c:	08022c4f 	.word	0x08022c4f
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8022b10:	2300      	movs	r3, #0
 8022b12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8022b16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8022b1a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 8022b1e:	e0ab      	b.n	8022c78 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8022b20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8022b24:	2b04      	cmp	r3, #4
 8022b26:	d009      	beq.n	8022b3c <dhcp_parse_reply+0x218>
 8022b28:	4b3a      	ldr	r3, [pc, #232]	; (8022c14 <dhcp_parse_reply+0x2f0>)
 8022b2a:	f240 622e 	movw	r2, #1582	; 0x62e
 8022b2e:	493a      	ldr	r1, [pc, #232]	; (8022c18 <dhcp_parse_reply+0x2f4>)
 8022b30:	483a      	ldr	r0, [pc, #232]	; (8022c1c <dhcp_parse_reply+0x2f8>)
 8022b32:	f003 fecb 	bl	80268cc <iprintf>
 8022b36:	f06f 0305 	mvn.w	r3, #5
 8022b3a:	e1b0      	b.n	8022e9e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8022b3c:	2306      	movs	r3, #6
 8022b3e:	623b      	str	r3, [r7, #32]
        break;
 8022b40:	e09a      	b.n	8022c78 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8022b42:	2304      	movs	r3, #4
 8022b44:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8022b48:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8022b4c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8022b50:	429a      	cmp	r2, r3
 8022b52:	d209      	bcs.n	8022b68 <dhcp_parse_reply+0x244>
 8022b54:	4b2f      	ldr	r3, [pc, #188]	; (8022c14 <dhcp_parse_reply+0x2f0>)
 8022b56:	f240 6233 	movw	r2, #1587	; 0x633
 8022b5a:	4931      	ldr	r1, [pc, #196]	; (8022c20 <dhcp_parse_reply+0x2fc>)
 8022b5c:	482f      	ldr	r0, [pc, #188]	; (8022c1c <dhcp_parse_reply+0x2f8>)
 8022b5e:	f003 feb5 	bl	80268cc <iprintf>
 8022b62:	f06f 0305 	mvn.w	r3, #5
 8022b66:	e19a      	b.n	8022e9e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8022b68:	2307      	movs	r3, #7
 8022b6a:	623b      	str	r3, [r7, #32]
        break;
 8022b6c:	e084      	b.n	8022c78 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8022b6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8022b72:	2b04      	cmp	r3, #4
 8022b74:	d009      	beq.n	8022b8a <dhcp_parse_reply+0x266>
 8022b76:	4b27      	ldr	r3, [pc, #156]	; (8022c14 <dhcp_parse_reply+0x2f0>)
 8022b78:	f240 6241 	movw	r2, #1601	; 0x641
 8022b7c:	4926      	ldr	r1, [pc, #152]	; (8022c18 <dhcp_parse_reply+0x2f4>)
 8022b7e:	4827      	ldr	r0, [pc, #156]	; (8022c1c <dhcp_parse_reply+0x2f8>)
 8022b80:	f003 fea4 	bl	80268cc <iprintf>
 8022b84:	f06f 0305 	mvn.w	r3, #5
 8022b88:	e189      	b.n	8022e9e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8022b8a:	2303      	movs	r3, #3
 8022b8c:	623b      	str	r3, [r7, #32]
        break;
 8022b8e:	e073      	b.n	8022c78 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8022b90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8022b94:	2b01      	cmp	r3, #1
 8022b96:	d009      	beq.n	8022bac <dhcp_parse_reply+0x288>
 8022b98:	4b1e      	ldr	r3, [pc, #120]	; (8022c14 <dhcp_parse_reply+0x2f0>)
 8022b9a:	f240 624f 	movw	r2, #1615	; 0x64f
 8022b9e:	4921      	ldr	r1, [pc, #132]	; (8022c24 <dhcp_parse_reply+0x300>)
 8022ba0:	481e      	ldr	r0, [pc, #120]	; (8022c1c <dhcp_parse_reply+0x2f8>)
 8022ba2:	f003 fe93 	bl	80268cc <iprintf>
 8022ba6:	f06f 0305 	mvn.w	r3, #5
 8022baa:	e178      	b.n	8022e9e <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8022bac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8022bae:	2bf0      	cmp	r3, #240	; 0xf0
 8022bb0:	d009      	beq.n	8022bc6 <dhcp_parse_reply+0x2a2>
 8022bb2:	4b18      	ldr	r3, [pc, #96]	; (8022c14 <dhcp_parse_reply+0x2f0>)
 8022bb4:	f240 6251 	movw	r2, #1617	; 0x651
 8022bb8:	491b      	ldr	r1, [pc, #108]	; (8022c28 <dhcp_parse_reply+0x304>)
 8022bba:	4818      	ldr	r0, [pc, #96]	; (8022c1c <dhcp_parse_reply+0x2f8>)
 8022bbc:	f003 fe86 	bl	80268cc <iprintf>
 8022bc0:	f06f 0305 	mvn.w	r3, #5
 8022bc4:	e16b      	b.n	8022e9e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8022bc6:	2300      	movs	r3, #0
 8022bc8:	623b      	str	r3, [r7, #32]
        break;
 8022bca:	e055      	b.n	8022c78 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8022bcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8022bd0:	2b01      	cmp	r3, #1
 8022bd2:	d009      	beq.n	8022be8 <dhcp_parse_reply+0x2c4>
 8022bd4:	4b0f      	ldr	r3, [pc, #60]	; (8022c14 <dhcp_parse_reply+0x2f0>)
 8022bd6:	f240 6255 	movw	r2, #1621	; 0x655
 8022bda:	4912      	ldr	r1, [pc, #72]	; (8022c24 <dhcp_parse_reply+0x300>)
 8022bdc:	480f      	ldr	r0, [pc, #60]	; (8022c1c <dhcp_parse_reply+0x2f8>)
 8022bde:	f003 fe75 	bl	80268cc <iprintf>
 8022be2:	f06f 0305 	mvn.w	r3, #5
 8022be6:	e15a      	b.n	8022e9e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8022be8:	2301      	movs	r3, #1
 8022bea:	623b      	str	r3, [r7, #32]
        break;
 8022bec:	e044      	b.n	8022c78 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8022bee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8022bf2:	2b04      	cmp	r3, #4
 8022bf4:	d009      	beq.n	8022c0a <dhcp_parse_reply+0x2e6>
 8022bf6:	4b07      	ldr	r3, [pc, #28]	; (8022c14 <dhcp_parse_reply+0x2f0>)
 8022bf8:	f240 6259 	movw	r2, #1625	; 0x659
 8022bfc:	4906      	ldr	r1, [pc, #24]	; (8022c18 <dhcp_parse_reply+0x2f4>)
 8022bfe:	4807      	ldr	r0, [pc, #28]	; (8022c1c <dhcp_parse_reply+0x2f8>)
 8022c00:	f003 fe64 	bl	80268cc <iprintf>
 8022c04:	f06f 0305 	mvn.w	r3, #5
 8022c08:	e149      	b.n	8022e9e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8022c0a:	2302      	movs	r3, #2
 8022c0c:	623b      	str	r3, [r7, #32]
        break;
 8022c0e:	e033      	b.n	8022c78 <dhcp_parse_reply+0x354>
 8022c10:	2001c118 	.word	0x2001c118
 8022c14:	0802ec10 	.word	0x0802ec10
 8022c18:	0802ee98 	.word	0x0802ee98
 8022c1c:	0802ec70 	.word	0x0802ec70
 8022c20:	0802eea4 	.word	0x0802eea4
 8022c24:	0802eeb8 	.word	0x0802eeb8
 8022c28:	0802eec4 	.word	0x0802eec4
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8022c2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8022c30:	2b04      	cmp	r3, #4
 8022c32:	d009      	beq.n	8022c48 <dhcp_parse_reply+0x324>
 8022c34:	4b9c      	ldr	r3, [pc, #624]	; (8022ea8 <dhcp_parse_reply+0x584>)
 8022c36:	f240 625d 	movw	r2, #1629	; 0x65d
 8022c3a:	499c      	ldr	r1, [pc, #624]	; (8022eac <dhcp_parse_reply+0x588>)
 8022c3c:	489c      	ldr	r0, [pc, #624]	; (8022eb0 <dhcp_parse_reply+0x58c>)
 8022c3e:	f003 fe45 	bl	80268cc <iprintf>
 8022c42:	f06f 0305 	mvn.w	r3, #5
 8022c46:	e12a      	b.n	8022e9e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 8022c48:	2304      	movs	r3, #4
 8022c4a:	623b      	str	r3, [r7, #32]
        break;
 8022c4c:	e014      	b.n	8022c78 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8022c4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8022c52:	2b04      	cmp	r3, #4
 8022c54:	d009      	beq.n	8022c6a <dhcp_parse_reply+0x346>
 8022c56:	4b94      	ldr	r3, [pc, #592]	; (8022ea8 <dhcp_parse_reply+0x584>)
 8022c58:	f240 6261 	movw	r2, #1633	; 0x661
 8022c5c:	4993      	ldr	r1, [pc, #588]	; (8022eac <dhcp_parse_reply+0x588>)
 8022c5e:	4894      	ldr	r0, [pc, #592]	; (8022eb0 <dhcp_parse_reply+0x58c>)
 8022c60:	f003 fe34 	bl	80268cc <iprintf>
 8022c64:	f06f 0305 	mvn.w	r3, #5
 8022c68:	e119      	b.n	8022e9e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 8022c6a:	2305      	movs	r3, #5
 8022c6c:	623b      	str	r3, [r7, #32]
        break;
 8022c6e:	e003      	b.n	8022c78 <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 8022c70:	2300      	movs	r3, #0
 8022c72:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8022c76:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8022c78:	7dfb      	ldrb	r3, [r7, #23]
 8022c7a:	2b00      	cmp	r3, #0
 8022c7c:	d103      	bne.n	8022c86 <dhcp_parse_reply+0x362>
      offset++;
 8022c7e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8022c80:	3301      	adds	r3, #1
 8022c82:	877b      	strh	r3, [r7, #58]	; 0x3a
 8022c84:	e0a1      	b.n	8022dca <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8022c86:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8022c88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8022c8c:	4413      	add	r3, r2
 8022c8e:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8022c92:	4293      	cmp	r3, r2
 8022c94:	dd02      	ble.n	8022c9c <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 8022c96:	f06f 0301 	mvn.w	r3, #1
 8022c9a:	e100      	b.n	8022e9e <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 8022c9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8022ca0:	b29a      	uxth	r2, r3
 8022ca2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8022ca4:	4413      	add	r3, r2
 8022ca6:	b29b      	uxth	r3, r3
 8022ca8:	3302      	adds	r3, #2
 8022caa:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 8022cac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8022cb0:	2b00      	cmp	r3, #0
 8022cb2:	f000 808a 	beq.w	8022dca <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 8022cb6:	2300      	movs	r3, #0
 8022cb8:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8022cba:	6a3b      	ldr	r3, [r7, #32]
 8022cbc:	2b00      	cmp	r3, #0
 8022cbe:	db02      	blt.n	8022cc6 <dhcp_parse_reply+0x3a2>
 8022cc0:	6a3b      	ldr	r3, [r7, #32]
 8022cc2:	2b07      	cmp	r3, #7
 8022cc4:	dd06      	ble.n	8022cd4 <dhcp_parse_reply+0x3b0>
 8022cc6:	4b78      	ldr	r3, [pc, #480]	; (8022ea8 <dhcp_parse_reply+0x584>)
 8022cc8:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8022ccc:	4979      	ldr	r1, [pc, #484]	; (8022eb4 <dhcp_parse_reply+0x590>)
 8022cce:	4878      	ldr	r0, [pc, #480]	; (8022eb0 <dhcp_parse_reply+0x58c>)
 8022cd0:	f003 fdfc 	bl	80268cc <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8022cd4:	4a78      	ldr	r2, [pc, #480]	; (8022eb8 <dhcp_parse_reply+0x594>)
 8022cd6:	6a3b      	ldr	r3, [r7, #32]
 8022cd8:	4413      	add	r3, r2
 8022cda:	781b      	ldrb	r3, [r3, #0]
 8022cdc:	2b00      	cmp	r3, #0
 8022cde:	d174      	bne.n	8022dca <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 8022ce0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8022ce4:	2b04      	cmp	r3, #4
 8022ce6:	bf28      	it	cs
 8022ce8:	2304      	movcs	r3, #4
 8022cea:	b2db      	uxtb	r3, r3
 8022cec:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8022cee:	8bfb      	ldrh	r3, [r7, #30]
 8022cf0:	8aba      	ldrh	r2, [r7, #20]
 8022cf2:	f107 0108 	add.w	r1, r7, #8
 8022cf6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8022cf8:	f7f7 fb64 	bl	801a3c4 <pbuf_copy_partial>
 8022cfc:	4603      	mov	r3, r0
 8022cfe:	461a      	mov	r2, r3
 8022d00:	8abb      	ldrh	r3, [r7, #20]
 8022d02:	4293      	cmp	r3, r2
 8022d04:	d002      	beq.n	8022d0c <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 8022d06:	f06f 0301 	mvn.w	r3, #1
 8022d0a:	e0c8      	b.n	8022e9e <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 8022d0c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8022d10:	2b04      	cmp	r3, #4
 8022d12:	d933      	bls.n	8022d7c <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8022d14:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8022d18:	f003 0303 	and.w	r3, r3, #3
 8022d1c:	b2db      	uxtb	r3, r3
 8022d1e:	2b00      	cmp	r3, #0
 8022d20:	d009      	beq.n	8022d36 <dhcp_parse_reply+0x412>
 8022d22:	4b61      	ldr	r3, [pc, #388]	; (8022ea8 <dhcp_parse_reply+0x584>)
 8022d24:	f240 6281 	movw	r2, #1665	; 0x681
 8022d28:	4964      	ldr	r1, [pc, #400]	; (8022ebc <dhcp_parse_reply+0x598>)
 8022d2a:	4861      	ldr	r0, [pc, #388]	; (8022eb0 <dhcp_parse_reply+0x58c>)
 8022d2c:	f003 fdce 	bl	80268cc <iprintf>
 8022d30:	f06f 0305 	mvn.w	r3, #5
 8022d34:	e0b3      	b.n	8022e9e <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 8022d36:	4a60      	ldr	r2, [pc, #384]	; (8022eb8 <dhcp_parse_reply+0x594>)
 8022d38:	6a3b      	ldr	r3, [r7, #32]
 8022d3a:	4413      	add	r3, r2
 8022d3c:	2201      	movs	r2, #1
 8022d3e:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8022d40:	68bb      	ldr	r3, [r7, #8]
 8022d42:	4618      	mov	r0, r3
 8022d44:	f7f5 fd37 	bl	80187b6 <lwip_htonl>
 8022d48:	4602      	mov	r2, r0
 8022d4a:	495d      	ldr	r1, [pc, #372]	; (8022ec0 <dhcp_parse_reply+0x59c>)
 8022d4c:	6a3b      	ldr	r3, [r7, #32]
 8022d4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8022d52:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8022d56:	3b04      	subs	r3, #4
 8022d58:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8022d5c:	8bfb      	ldrh	r3, [r7, #30]
 8022d5e:	3304      	adds	r3, #4
 8022d60:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8022d62:	8a7a      	ldrh	r2, [r7, #18]
 8022d64:	8bfb      	ldrh	r3, [r7, #30]
 8022d66:	429a      	cmp	r2, r3
 8022d68:	d202      	bcs.n	8022d70 <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 8022d6a:	f06f 0301 	mvn.w	r3, #1
 8022d6e:	e096      	b.n	8022e9e <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 8022d70:	8a7b      	ldrh	r3, [r7, #18]
 8022d72:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8022d74:	6a3b      	ldr	r3, [r7, #32]
 8022d76:	3301      	adds	r3, #1
 8022d78:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8022d7a:	e79e      	b.n	8022cba <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 8022d7c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8022d80:	2b04      	cmp	r3, #4
 8022d82:	d106      	bne.n	8022d92 <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 8022d84:	68bb      	ldr	r3, [r7, #8]
 8022d86:	4618      	mov	r0, r3
 8022d88:	f7f5 fd15 	bl	80187b6 <lwip_htonl>
 8022d8c:	4603      	mov	r3, r0
 8022d8e:	60bb      	str	r3, [r7, #8]
 8022d90:	e011      	b.n	8022db6 <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8022d92:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8022d96:	2b01      	cmp	r3, #1
 8022d98:	d009      	beq.n	8022dae <dhcp_parse_reply+0x48a>
 8022d9a:	4b43      	ldr	r3, [pc, #268]	; (8022ea8 <dhcp_parse_reply+0x584>)
 8022d9c:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8022da0:	4948      	ldr	r1, [pc, #288]	; (8022ec4 <dhcp_parse_reply+0x5a0>)
 8022da2:	4843      	ldr	r0, [pc, #268]	; (8022eb0 <dhcp_parse_reply+0x58c>)
 8022da4:	f003 fd92 	bl	80268cc <iprintf>
 8022da8:	f06f 0305 	mvn.w	r3, #5
 8022dac:	e077      	b.n	8022e9e <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 8022dae:	f107 0308 	add.w	r3, r7, #8
 8022db2:	781b      	ldrb	r3, [r3, #0]
 8022db4:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8022db6:	4a40      	ldr	r2, [pc, #256]	; (8022eb8 <dhcp_parse_reply+0x594>)
 8022db8:	6a3b      	ldr	r3, [r7, #32]
 8022dba:	4413      	add	r3, r2
 8022dbc:	2201      	movs	r2, #1
 8022dbe:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8022dc0:	68ba      	ldr	r2, [r7, #8]
 8022dc2:	493f      	ldr	r1, [pc, #252]	; (8022ec0 <dhcp_parse_reply+0x59c>)
 8022dc4:	6a3b      	ldr	r3, [r7, #32]
 8022dc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8022dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022dcc:	895b      	ldrh	r3, [r3, #10]
 8022dce:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8022dd0:	429a      	cmp	r2, r3
 8022dd2:	d324      	bcc.n	8022e1e <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 8022dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022dd6:	895b      	ldrh	r3, [r3, #10]
 8022dd8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8022dda:	1ad3      	subs	r3, r2, r3
 8022ddc:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8022dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022de0:	895b      	ldrh	r3, [r3, #10]
 8022de2:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8022de4:	1ad3      	subs	r3, r2, r3
 8022de6:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 8022de8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8022dea:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8022dec:	429a      	cmp	r2, r3
 8022dee:	d213      	bcs.n	8022e18 <dhcp_parse_reply+0x4f4>
        q = q->next;
 8022df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022df2:	681b      	ldr	r3, [r3, #0]
 8022df4:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8022df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022df8:	2b00      	cmp	r3, #0
 8022dfa:	d109      	bne.n	8022e10 <dhcp_parse_reply+0x4ec>
 8022dfc:	4b2a      	ldr	r3, [pc, #168]	; (8022ea8 <dhcp_parse_reply+0x584>)
 8022dfe:	f240 629d 	movw	r2, #1693	; 0x69d
 8022e02:	4931      	ldr	r1, [pc, #196]	; (8022ec8 <dhcp_parse_reply+0x5a4>)
 8022e04:	482a      	ldr	r0, [pc, #168]	; (8022eb0 <dhcp_parse_reply+0x58c>)
 8022e06:	f003 fd61 	bl	80268cc <iprintf>
 8022e0a:	f06f 0305 	mvn.w	r3, #5
 8022e0e:	e046      	b.n	8022e9e <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 8022e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022e12:	685b      	ldr	r3, [r3, #4]
 8022e14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8022e16:	e002      	b.n	8022e1e <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8022e18:	f06f 0301 	mvn.w	r3, #1
 8022e1c:	e03f      	b.n	8022e9e <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8022e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022e20:	2b00      	cmp	r3, #0
 8022e22:	d00a      	beq.n	8022e3a <dhcp_parse_reply+0x516>
 8022e24:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8022e26:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8022e28:	429a      	cmp	r2, r3
 8022e2a:	d206      	bcs.n	8022e3a <dhcp_parse_reply+0x516>
 8022e2c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8022e2e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8022e30:	4413      	add	r3, r2
 8022e32:	781b      	ldrb	r3, [r3, #0]
 8022e34:	2bff      	cmp	r3, #255	; 0xff
 8022e36:	f47f adb8 	bne.w	80229aa <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8022e3a:	4b1f      	ldr	r3, [pc, #124]	; (8022eb8 <dhcp_parse_reply+0x594>)
 8022e3c:	781b      	ldrb	r3, [r3, #0]
 8022e3e:	2b00      	cmp	r3, #0
 8022e40:	d018      	beq.n	8022e74 <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8022e42:	4b1f      	ldr	r3, [pc, #124]	; (8022ec0 <dhcp_parse_reply+0x59c>)
 8022e44:	681b      	ldr	r3, [r3, #0]
 8022e46:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8022e48:	4b1b      	ldr	r3, [pc, #108]	; (8022eb8 <dhcp_parse_reply+0x594>)
 8022e4a:	2200      	movs	r2, #0
 8022e4c:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8022e4e:	68fb      	ldr	r3, [r7, #12]
 8022e50:	2b01      	cmp	r3, #1
 8022e52:	d102      	bne.n	8022e5a <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 8022e54:	2301      	movs	r3, #1
 8022e56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8022e58:	e00c      	b.n	8022e74 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8022e5a:	68fb      	ldr	r3, [r7, #12]
 8022e5c:	2b02      	cmp	r3, #2
 8022e5e:	d102      	bne.n	8022e66 <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 8022e60:	2301      	movs	r3, #1
 8022e62:	62bb      	str	r3, [r7, #40]	; 0x28
 8022e64:	e006      	b.n	8022e74 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8022e66:	68fb      	ldr	r3, [r7, #12]
 8022e68:	2b03      	cmp	r3, #3
 8022e6a:	d103      	bne.n	8022e74 <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 8022e6c:	2301      	movs	r3, #1
 8022e6e:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 8022e70:	2301      	movs	r3, #1
 8022e72:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8022e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022e76:	2b00      	cmp	r3, #0
 8022e78:	d006      	beq.n	8022e88 <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8022e7a:	2300      	movs	r3, #0
 8022e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 8022e7e:	236c      	movs	r3, #108	; 0x6c
 8022e80:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8022e82:	23ec      	movs	r3, #236	; 0xec
 8022e84:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8022e86:	e56a      	b.n	802295e <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8022e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022e8a:	2b00      	cmp	r3, #0
 8022e8c:	d006      	beq.n	8022e9c <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 8022e8e:	2300      	movs	r3, #0
 8022e90:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 8022e92:	232c      	movs	r3, #44	; 0x2c
 8022e94:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8022e96:	236c      	movs	r3, #108	; 0x6c
 8022e98:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 8022e9a:	e560      	b.n	802295e <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8022e9c:	2300      	movs	r3, #0
}
 8022e9e:	4618      	mov	r0, r3
 8022ea0:	3740      	adds	r7, #64	; 0x40
 8022ea2:	46bd      	mov	sp, r7
 8022ea4:	bd80      	pop	{r7, pc}
 8022ea6:	bf00      	nop
 8022ea8:	0802ec10 	.word	0x0802ec10
 8022eac:	0802ee98 	.word	0x0802ee98
 8022eb0:	0802ec70 	.word	0x0802ec70
 8022eb4:	0802eedc 	.word	0x0802eedc
 8022eb8:	2001c118 	.word	0x2001c118
 8022ebc:	0802eef0 	.word	0x0802eef0
 8022ec0:	2001c120 	.word	0x2001c120
 8022ec4:	0802ef08 	.word	0x0802ef08
 8022ec8:	0802ef1c 	.word	0x0802ef1c

08022ecc <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8022ecc:	b580      	push	{r7, lr}
 8022ece:	b08a      	sub	sp, #40	; 0x28
 8022ed0:	af00      	add	r7, sp, #0
 8022ed2:	60f8      	str	r0, [r7, #12]
 8022ed4:	60b9      	str	r1, [r7, #8]
 8022ed6:	607a      	str	r2, [r7, #4]
 8022ed8:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8022eda:	4b60      	ldr	r3, [pc, #384]	; (802305c <dhcp_recv+0x190>)
 8022edc:	685b      	ldr	r3, [r3, #4]
 8022ede:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8022ee0:	6a3b      	ldr	r3, [r7, #32]
 8022ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022ee4:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8022ee6:	687b      	ldr	r3, [r7, #4]
 8022ee8:	685b      	ldr	r3, [r3, #4]
 8022eea:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8022eec:	69fb      	ldr	r3, [r7, #28]
 8022eee:	2b00      	cmp	r3, #0
 8022ef0:	f000 809d 	beq.w	802302e <dhcp_recv+0x162>
 8022ef4:	69fb      	ldr	r3, [r7, #28]
 8022ef6:	791b      	ldrb	r3, [r3, #4]
 8022ef8:	2b00      	cmp	r3, #0
 8022efa:	f000 8098 	beq.w	802302e <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8022efe:	687b      	ldr	r3, [r7, #4]
 8022f00:	895b      	ldrh	r3, [r3, #10]
 8022f02:	2b2b      	cmp	r3, #43	; 0x2b
 8022f04:	f240 8095 	bls.w	8023032 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8022f08:	69bb      	ldr	r3, [r7, #24]
 8022f0a:	781b      	ldrb	r3, [r3, #0]
 8022f0c:	2b02      	cmp	r3, #2
 8022f0e:	f040 8092 	bne.w	8023036 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8022f12:	2300      	movs	r3, #0
 8022f14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8022f18:	e012      	b.n	8022f40 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8022f1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8022f1e:	6a3a      	ldr	r2, [r7, #32]
 8022f20:	4413      	add	r3, r2
 8022f22:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8022f26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8022f2a:	69b9      	ldr	r1, [r7, #24]
 8022f2c:	440b      	add	r3, r1
 8022f2e:	7f1b      	ldrb	r3, [r3, #28]
 8022f30:	429a      	cmp	r2, r3
 8022f32:	f040 8082 	bne.w	802303a <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8022f36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8022f3a:	3301      	adds	r3, #1
 8022f3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8022f40:	6a3b      	ldr	r3, [r7, #32]
 8022f42:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8022f46:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8022f4a:	429a      	cmp	r2, r3
 8022f4c:	d203      	bcs.n	8022f56 <dhcp_recv+0x8a>
 8022f4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8022f52:	2b05      	cmp	r3, #5
 8022f54:	d9e1      	bls.n	8022f1a <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8022f56:	69bb      	ldr	r3, [r7, #24]
 8022f58:	685b      	ldr	r3, [r3, #4]
 8022f5a:	4618      	mov	r0, r3
 8022f5c:	f7f5 fc2b 	bl	80187b6 <lwip_htonl>
 8022f60:	4602      	mov	r2, r0
 8022f62:	69fb      	ldr	r3, [r7, #28]
 8022f64:	681b      	ldr	r3, [r3, #0]
 8022f66:	429a      	cmp	r2, r3
 8022f68:	d169      	bne.n	802303e <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8022f6a:	69f9      	ldr	r1, [r7, #28]
 8022f6c:	6878      	ldr	r0, [r7, #4]
 8022f6e:	f7ff fcd9 	bl	8022924 <dhcp_parse_reply>
 8022f72:	4603      	mov	r3, r0
 8022f74:	2b00      	cmp	r3, #0
 8022f76:	d164      	bne.n	8023042 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8022f78:	4b39      	ldr	r3, [pc, #228]	; (8023060 <dhcp_recv+0x194>)
 8022f7a:	785b      	ldrb	r3, [r3, #1]
 8022f7c:	2b00      	cmp	r3, #0
 8022f7e:	d062      	beq.n	8023046 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8022f80:	687b      	ldr	r3, [r7, #4]
 8022f82:	685b      	ldr	r3, [r3, #4]
 8022f84:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8022f86:	4b37      	ldr	r3, [pc, #220]	; (8023064 <dhcp_recv+0x198>)
 8022f88:	685b      	ldr	r3, [r3, #4]
 8022f8a:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8022f8c:	7cfb      	ldrb	r3, [r7, #19]
 8022f8e:	2b05      	cmp	r3, #5
 8022f90:	d12a      	bne.n	8022fe8 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8022f92:	69fb      	ldr	r3, [r7, #28]
 8022f94:	795b      	ldrb	r3, [r3, #5]
 8022f96:	2b01      	cmp	r3, #1
 8022f98:	d112      	bne.n	8022fc0 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 8022f9a:	6979      	ldr	r1, [r7, #20]
 8022f9c:	6a38      	ldr	r0, [r7, #32]
 8022f9e:	f7fe fe17 	bl	8021bd0 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8022fa2:	6a3b      	ldr	r3, [r7, #32]
 8022fa4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8022fa8:	f003 0308 	and.w	r3, r3, #8
 8022fac:	2b00      	cmp	r3, #0
 8022fae:	d003      	beq.n	8022fb8 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8022fb0:	6a38      	ldr	r0, [r7, #32]
 8022fb2:	f7fe fb87 	bl	80216c4 <dhcp_check>
 8022fb6:	e049      	b.n	802304c <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8022fb8:	6a38      	ldr	r0, [r7, #32]
 8022fba:	f7ff f867 	bl	802208c <dhcp_bind>
 8022fbe:	e045      	b.n	802304c <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8022fc0:	69fb      	ldr	r3, [r7, #28]
 8022fc2:	795b      	ldrb	r3, [r3, #5]
 8022fc4:	2b03      	cmp	r3, #3
 8022fc6:	d007      	beq.n	8022fd8 <dhcp_recv+0x10c>
 8022fc8:	69fb      	ldr	r3, [r7, #28]
 8022fca:	795b      	ldrb	r3, [r3, #5]
 8022fcc:	2b04      	cmp	r3, #4
 8022fce:	d003      	beq.n	8022fd8 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8022fd0:	69fb      	ldr	r3, [r7, #28]
 8022fd2:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8022fd4:	2b05      	cmp	r3, #5
 8022fd6:	d139      	bne.n	802304c <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 8022fd8:	6979      	ldr	r1, [r7, #20]
 8022fda:	6a38      	ldr	r0, [r7, #32]
 8022fdc:	f7fe fdf8 	bl	8021bd0 <dhcp_handle_ack>
      dhcp_bind(netif);
 8022fe0:	6a38      	ldr	r0, [r7, #32]
 8022fe2:	f7ff f853 	bl	802208c <dhcp_bind>
 8022fe6:	e031      	b.n	802304c <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8022fe8:	7cfb      	ldrb	r3, [r7, #19]
 8022fea:	2b06      	cmp	r3, #6
 8022fec:	d113      	bne.n	8023016 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8022fee:	69fb      	ldr	r3, [r7, #28]
 8022ff0:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8022ff2:	2b03      	cmp	r3, #3
 8022ff4:	d00b      	beq.n	802300e <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8022ff6:	69fb      	ldr	r3, [r7, #28]
 8022ff8:	795b      	ldrb	r3, [r3, #5]
 8022ffa:	2b01      	cmp	r3, #1
 8022ffc:	d007      	beq.n	802300e <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8022ffe:	69fb      	ldr	r3, [r7, #28]
 8023000:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8023002:	2b04      	cmp	r3, #4
 8023004:	d003      	beq.n	802300e <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8023006:	69fb      	ldr	r3, [r7, #28]
 8023008:	795b      	ldrb	r3, [r3, #5]
 802300a:	2b05      	cmp	r3, #5
 802300c:	d103      	bne.n	8023016 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 802300e:	6a38      	ldr	r0, [r7, #32]
 8023010:	f7fe fb3e 	bl	8021690 <dhcp_handle_nak>
 8023014:	e01a      	b.n	802304c <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8023016:	7cfb      	ldrb	r3, [r7, #19]
 8023018:	2b02      	cmp	r3, #2
 802301a:	d116      	bne.n	802304a <dhcp_recv+0x17e>
 802301c:	69fb      	ldr	r3, [r7, #28]
 802301e:	795b      	ldrb	r3, [r3, #5]
 8023020:	2b06      	cmp	r3, #6
 8023022:	d112      	bne.n	802304a <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8023024:	6979      	ldr	r1, [r7, #20]
 8023026:	6a38      	ldr	r0, [r7, #32]
 8023028:	f7fe fb80 	bl	802172c <dhcp_handle_offer>
 802302c:	e00e      	b.n	802304c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 802302e:	bf00      	nop
 8023030:	e00c      	b.n	802304c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8023032:	bf00      	nop
 8023034:	e00a      	b.n	802304c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8023036:	bf00      	nop
 8023038:	e008      	b.n	802304c <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 802303a:	bf00      	nop
 802303c:	e006      	b.n	802304c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 802303e:	bf00      	nop
 8023040:	e004      	b.n	802304c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8023042:	bf00      	nop
 8023044:	e002      	b.n	802304c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8023046:	bf00      	nop
 8023048:	e000      	b.n	802304c <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 802304a:	bf00      	nop
  pbuf_free(p);
 802304c:	6878      	ldr	r0, [r7, #4]
 802304e:	f7f6 ffb3 	bl	8019fb8 <pbuf_free>
}
 8023052:	bf00      	nop
 8023054:	3728      	adds	r7, #40	; 0x28
 8023056:	46bd      	mov	sp, r7
 8023058:	bd80      	pop	{r7, pc}
 802305a:	bf00      	nop
 802305c:	20017b68 	.word	0x20017b68
 8023060:	2001c118 	.word	0x2001c118
 8023064:	2001c120 	.word	0x2001c120

08023068 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8023068:	b580      	push	{r7, lr}
 802306a:	b088      	sub	sp, #32
 802306c:	af00      	add	r7, sp, #0
 802306e:	60f8      	str	r0, [r7, #12]
 8023070:	60b9      	str	r1, [r7, #8]
 8023072:	603b      	str	r3, [r7, #0]
 8023074:	4613      	mov	r3, r2
 8023076:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8023078:	68fb      	ldr	r3, [r7, #12]
 802307a:	2b00      	cmp	r3, #0
 802307c:	d108      	bne.n	8023090 <dhcp_create_msg+0x28>
 802307e:	4b5f      	ldr	r3, [pc, #380]	; (80231fc <dhcp_create_msg+0x194>)
 8023080:	f240 7269 	movw	r2, #1897	; 0x769
 8023084:	495e      	ldr	r1, [pc, #376]	; (8023200 <dhcp_create_msg+0x198>)
 8023086:	485f      	ldr	r0, [pc, #380]	; (8023204 <dhcp_create_msg+0x19c>)
 8023088:	f003 fc20 	bl	80268cc <iprintf>
 802308c:	2300      	movs	r3, #0
 802308e:	e0b1      	b.n	80231f4 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8023090:	68bb      	ldr	r3, [r7, #8]
 8023092:	2b00      	cmp	r3, #0
 8023094:	d108      	bne.n	80230a8 <dhcp_create_msg+0x40>
 8023096:	4b59      	ldr	r3, [pc, #356]	; (80231fc <dhcp_create_msg+0x194>)
 8023098:	f240 726a 	movw	r2, #1898	; 0x76a
 802309c:	495a      	ldr	r1, [pc, #360]	; (8023208 <dhcp_create_msg+0x1a0>)
 802309e:	4859      	ldr	r0, [pc, #356]	; (8023204 <dhcp_create_msg+0x19c>)
 80230a0:	f003 fc14 	bl	80268cc <iprintf>
 80230a4:	2300      	movs	r3, #0
 80230a6:	e0a5      	b.n	80231f4 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 80230a8:	f44f 7220 	mov.w	r2, #640	; 0x280
 80230ac:	f44f 719a 	mov.w	r1, #308	; 0x134
 80230b0:	2036      	movs	r0, #54	; 0x36
 80230b2:	f7f6 fc9d 	bl	80199f0 <pbuf_alloc>
 80230b6:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 80230b8:	69bb      	ldr	r3, [r7, #24]
 80230ba:	2b00      	cmp	r3, #0
 80230bc:	d101      	bne.n	80230c2 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 80230be:	2300      	movs	r3, #0
 80230c0:	e098      	b.n	80231f4 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 80230c2:	69bb      	ldr	r3, [r7, #24]
 80230c4:	895b      	ldrh	r3, [r3, #10]
 80230c6:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 80230ca:	d206      	bcs.n	80230da <dhcp_create_msg+0x72>
 80230cc:	4b4b      	ldr	r3, [pc, #300]	; (80231fc <dhcp_create_msg+0x194>)
 80230ce:	f240 7271 	movw	r2, #1905	; 0x771
 80230d2:	494e      	ldr	r1, [pc, #312]	; (802320c <dhcp_create_msg+0x1a4>)
 80230d4:	484b      	ldr	r0, [pc, #300]	; (8023204 <dhcp_create_msg+0x19c>)
 80230d6:	f003 fbf9 	bl	80268cc <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 80230da:	79fb      	ldrb	r3, [r7, #7]
 80230dc:	2b03      	cmp	r3, #3
 80230de:	d103      	bne.n	80230e8 <dhcp_create_msg+0x80>
 80230e0:	68bb      	ldr	r3, [r7, #8]
 80230e2:	795b      	ldrb	r3, [r3, #5]
 80230e4:	2b03      	cmp	r3, #3
 80230e6:	d10d      	bne.n	8023104 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 80230e8:	68bb      	ldr	r3, [r7, #8]
 80230ea:	799b      	ldrb	r3, [r3, #6]
 80230ec:	2b00      	cmp	r3, #0
 80230ee:	d105      	bne.n	80230fc <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 80230f0:	f003 fc7a 	bl	80269e8 <rand>
 80230f4:	4603      	mov	r3, r0
 80230f6:	461a      	mov	r2, r3
 80230f8:	4b45      	ldr	r3, [pc, #276]	; (8023210 <dhcp_create_msg+0x1a8>)
 80230fa:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 80230fc:	4b44      	ldr	r3, [pc, #272]	; (8023210 <dhcp_create_msg+0x1a8>)
 80230fe:	681a      	ldr	r2, [r3, #0]
 8023100:	68bb      	ldr	r3, [r7, #8]
 8023102:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8023104:	69bb      	ldr	r3, [r7, #24]
 8023106:	685b      	ldr	r3, [r3, #4]
 8023108:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 802310a:	f44f 729a 	mov.w	r2, #308	; 0x134
 802310e:	2100      	movs	r1, #0
 8023110:	6978      	ldr	r0, [r7, #20]
 8023112:	f002 fd2f 	bl	8025b74 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8023116:	697b      	ldr	r3, [r7, #20]
 8023118:	2201      	movs	r2, #1
 802311a:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 802311c:	697b      	ldr	r3, [r7, #20]
 802311e:	2201      	movs	r2, #1
 8023120:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 8023122:	68fb      	ldr	r3, [r7, #12]
 8023124:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8023128:	697b      	ldr	r3, [r7, #20]
 802312a:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 802312c:	68bb      	ldr	r3, [r7, #8]
 802312e:	681b      	ldr	r3, [r3, #0]
 8023130:	4618      	mov	r0, r3
 8023132:	f7f5 fb40 	bl	80187b6 <lwip_htonl>
 8023136:	4602      	mov	r2, r0
 8023138:	697b      	ldr	r3, [r7, #20]
 802313a:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 802313c:	79fb      	ldrb	r3, [r7, #7]
 802313e:	2b08      	cmp	r3, #8
 8023140:	d010      	beq.n	8023164 <dhcp_create_msg+0xfc>
 8023142:	79fb      	ldrb	r3, [r7, #7]
 8023144:	2b04      	cmp	r3, #4
 8023146:	d00d      	beq.n	8023164 <dhcp_create_msg+0xfc>
 8023148:	79fb      	ldrb	r3, [r7, #7]
 802314a:	2b07      	cmp	r3, #7
 802314c:	d00a      	beq.n	8023164 <dhcp_create_msg+0xfc>
 802314e:	79fb      	ldrb	r3, [r7, #7]
 8023150:	2b03      	cmp	r3, #3
 8023152:	d10c      	bne.n	802316e <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8023154:	68bb      	ldr	r3, [r7, #8]
 8023156:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8023158:	2b05      	cmp	r3, #5
 802315a:	d003      	beq.n	8023164 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 802315c:	68bb      	ldr	r3, [r7, #8]
 802315e:	795b      	ldrb	r3, [r3, #5]
 8023160:	2b04      	cmp	r3, #4
 8023162:	d104      	bne.n	802316e <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8023164:	68fb      	ldr	r3, [r7, #12]
 8023166:	3304      	adds	r3, #4
 8023168:	681a      	ldr	r2, [r3, #0]
 802316a:	697b      	ldr	r3, [r7, #20]
 802316c:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 802316e:	2300      	movs	r3, #0
 8023170:	83fb      	strh	r3, [r7, #30]
 8023172:	e00c      	b.n	802318e <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8023174:	8bfa      	ldrh	r2, [r7, #30]
 8023176:	8bfb      	ldrh	r3, [r7, #30]
 8023178:	68f9      	ldr	r1, [r7, #12]
 802317a:	440a      	add	r2, r1
 802317c:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 8023180:	697a      	ldr	r2, [r7, #20]
 8023182:	4413      	add	r3, r2
 8023184:	460a      	mov	r2, r1
 8023186:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8023188:	8bfb      	ldrh	r3, [r7, #30]
 802318a:	3301      	adds	r3, #1
 802318c:	83fb      	strh	r3, [r7, #30]
 802318e:	8bfb      	ldrh	r3, [r7, #30]
 8023190:	2b05      	cmp	r3, #5
 8023192:	d9ef      	bls.n	8023174 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8023194:	697b      	ldr	r3, [r7, #20]
 8023196:	2200      	movs	r2, #0
 8023198:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 802319c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 80231a0:	2200      	movs	r2, #0
 80231a2:	f062 027d 	orn	r2, r2, #125	; 0x7d
 80231a6:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 80231aa:	2200      	movs	r2, #0
 80231ac:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 80231b0:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 80231b4:	2200      	movs	r2, #0
 80231b6:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 80231ba:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 80231be:	697b      	ldr	r3, [r7, #20]
 80231c0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80231c4:	2301      	movs	r3, #1
 80231c6:	2235      	movs	r2, #53	; 0x35
 80231c8:	2000      	movs	r0, #0
 80231ca:	f7ff fadb 	bl	8022784 <dhcp_option>
 80231ce:	4603      	mov	r3, r0
 80231d0:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 80231d2:	697b      	ldr	r3, [r7, #20]
 80231d4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80231d8:	79fa      	ldrb	r2, [r7, #7]
 80231da:	8a7b      	ldrh	r3, [r7, #18]
 80231dc:	4618      	mov	r0, r3
 80231de:	f7ff fb05 	bl	80227ec <dhcp_option_byte>
 80231e2:	4603      	mov	r3, r0
 80231e4:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 80231e6:	683b      	ldr	r3, [r7, #0]
 80231e8:	2b00      	cmp	r3, #0
 80231ea:	d002      	beq.n	80231f2 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 80231ec:	683b      	ldr	r3, [r7, #0]
 80231ee:	8a7a      	ldrh	r2, [r7, #18]
 80231f0:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 80231f2:	69bb      	ldr	r3, [r7, #24]
}
 80231f4:	4618      	mov	r0, r3
 80231f6:	3720      	adds	r7, #32
 80231f8:	46bd      	mov	sp, r7
 80231fa:	bd80      	pop	{r7, pc}
 80231fc:	0802ec10 	.word	0x0802ec10
 8023200:	0802ef30 	.word	0x0802ef30
 8023204:	0802ec70 	.word	0x0802ec70
 8023208:	0802ef50 	.word	0x0802ef50
 802320c:	0802ef70 	.word	0x0802ef70
 8023210:	20013c74 	.word	0x20013c74

08023214 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8023214:	b580      	push	{r7, lr}
 8023216:	b084      	sub	sp, #16
 8023218:	af00      	add	r7, sp, #0
 802321a:	4603      	mov	r3, r0
 802321c:	60b9      	str	r1, [r7, #8]
 802321e:	607a      	str	r2, [r7, #4]
 8023220:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 8023222:	89fb      	ldrh	r3, [r7, #14]
 8023224:	1c5a      	adds	r2, r3, #1
 8023226:	81fa      	strh	r2, [r7, #14]
 8023228:	461a      	mov	r2, r3
 802322a:	68bb      	ldr	r3, [r7, #8]
 802322c:	4413      	add	r3, r2
 802322e:	22ff      	movs	r2, #255	; 0xff
 8023230:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8023232:	e007      	b.n	8023244 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8023234:	89fb      	ldrh	r3, [r7, #14]
 8023236:	1c5a      	adds	r2, r3, #1
 8023238:	81fa      	strh	r2, [r7, #14]
 802323a:	461a      	mov	r2, r3
 802323c:	68bb      	ldr	r3, [r7, #8]
 802323e:	4413      	add	r3, r2
 8023240:	2200      	movs	r2, #0
 8023242:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8023244:	89fb      	ldrh	r3, [r7, #14]
 8023246:	2b43      	cmp	r3, #67	; 0x43
 8023248:	d904      	bls.n	8023254 <dhcp_option_trailer+0x40>
 802324a:	89fb      	ldrh	r3, [r7, #14]
 802324c:	f003 0303 	and.w	r3, r3, #3
 8023250:	2b00      	cmp	r3, #0
 8023252:	d002      	beq.n	802325a <dhcp_option_trailer+0x46>
 8023254:	89fb      	ldrh	r3, [r7, #14]
 8023256:	2b43      	cmp	r3, #67	; 0x43
 8023258:	d9ec      	bls.n	8023234 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 802325a:	89fb      	ldrh	r3, [r7, #14]
 802325c:	33f0      	adds	r3, #240	; 0xf0
 802325e:	b29b      	uxth	r3, r3
 8023260:	4619      	mov	r1, r3
 8023262:	6878      	ldr	r0, [r7, #4]
 8023264:	f7f6 fd22 	bl	8019cac <pbuf_realloc>
}
 8023268:	bf00      	nop
 802326a:	3710      	adds	r7, #16
 802326c:	46bd      	mov	sp, r7
 802326e:	bd80      	pop	{r7, pc}

08023270 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8023270:	b480      	push	{r7}
 8023272:	b085      	sub	sp, #20
 8023274:	af00      	add	r7, sp, #0
 8023276:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8023278:	687b      	ldr	r3, [r7, #4]
 802327a:	2b00      	cmp	r3, #0
 802327c:	d017      	beq.n	80232ae <dhcp_supplied_address+0x3e>
 802327e:	687b      	ldr	r3, [r7, #4]
 8023280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023282:	2b00      	cmp	r3, #0
 8023284:	d013      	beq.n	80232ae <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8023286:	687b      	ldr	r3, [r7, #4]
 8023288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802328a:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 802328c:	68fb      	ldr	r3, [r7, #12]
 802328e:	795b      	ldrb	r3, [r3, #5]
 8023290:	2b0a      	cmp	r3, #10
 8023292:	d007      	beq.n	80232a4 <dhcp_supplied_address+0x34>
 8023294:	68fb      	ldr	r3, [r7, #12]
 8023296:	795b      	ldrb	r3, [r3, #5]
 8023298:	2b05      	cmp	r3, #5
 802329a:	d003      	beq.n	80232a4 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 802329c:	68fb      	ldr	r3, [r7, #12]
 802329e:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80232a0:	2b04      	cmp	r3, #4
 80232a2:	d101      	bne.n	80232a8 <dhcp_supplied_address+0x38>
 80232a4:	2301      	movs	r3, #1
 80232a6:	e000      	b.n	80232aa <dhcp_supplied_address+0x3a>
 80232a8:	2300      	movs	r3, #0
 80232aa:	b2db      	uxtb	r3, r3
 80232ac:	e000      	b.n	80232b0 <dhcp_supplied_address+0x40>
  }
  return 0;
 80232ae:	2300      	movs	r3, #0
}
 80232b0:	4618      	mov	r0, r3
 80232b2:	3714      	adds	r7, #20
 80232b4:	46bd      	mov	sp, r7
 80232b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80232ba:	4770      	bx	lr

080232bc <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80232bc:	b580      	push	{r7, lr}
 80232be:	b082      	sub	sp, #8
 80232c0:	af00      	add	r7, sp, #0
 80232c2:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80232c4:	4915      	ldr	r1, [pc, #84]	; (802331c <etharp_free_entry+0x60>)
 80232c6:	687a      	ldr	r2, [r7, #4]
 80232c8:	4613      	mov	r3, r2
 80232ca:	005b      	lsls	r3, r3, #1
 80232cc:	4413      	add	r3, r2
 80232ce:	00db      	lsls	r3, r3, #3
 80232d0:	440b      	add	r3, r1
 80232d2:	681b      	ldr	r3, [r3, #0]
 80232d4:	2b00      	cmp	r3, #0
 80232d6:	d013      	beq.n	8023300 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80232d8:	4910      	ldr	r1, [pc, #64]	; (802331c <etharp_free_entry+0x60>)
 80232da:	687a      	ldr	r2, [r7, #4]
 80232dc:	4613      	mov	r3, r2
 80232de:	005b      	lsls	r3, r3, #1
 80232e0:	4413      	add	r3, r2
 80232e2:	00db      	lsls	r3, r3, #3
 80232e4:	440b      	add	r3, r1
 80232e6:	681b      	ldr	r3, [r3, #0]
 80232e8:	4618      	mov	r0, r3
 80232ea:	f7f6 fe65 	bl	8019fb8 <pbuf_free>
    arp_table[i].q = NULL;
 80232ee:	490b      	ldr	r1, [pc, #44]	; (802331c <etharp_free_entry+0x60>)
 80232f0:	687a      	ldr	r2, [r7, #4]
 80232f2:	4613      	mov	r3, r2
 80232f4:	005b      	lsls	r3, r3, #1
 80232f6:	4413      	add	r3, r2
 80232f8:	00db      	lsls	r3, r3, #3
 80232fa:	440b      	add	r3, r1
 80232fc:	2200      	movs	r2, #0
 80232fe:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8023300:	4906      	ldr	r1, [pc, #24]	; (802331c <etharp_free_entry+0x60>)
 8023302:	687a      	ldr	r2, [r7, #4]
 8023304:	4613      	mov	r3, r2
 8023306:	005b      	lsls	r3, r3, #1
 8023308:	4413      	add	r3, r2
 802330a:	00db      	lsls	r3, r3, #3
 802330c:	440b      	add	r3, r1
 802330e:	3314      	adds	r3, #20
 8023310:	2200      	movs	r2, #0
 8023312:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8023314:	bf00      	nop
 8023316:	3708      	adds	r7, #8
 8023318:	46bd      	mov	sp, r7
 802331a:	bd80      	pop	{r7, pc}
 802331c:	20013c78 	.word	0x20013c78

08023320 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8023320:	b580      	push	{r7, lr}
 8023322:	b082      	sub	sp, #8
 8023324:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8023326:	2300      	movs	r3, #0
 8023328:	607b      	str	r3, [r7, #4]
 802332a:	e096      	b.n	802345a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 802332c:	494f      	ldr	r1, [pc, #316]	; (802346c <etharp_tmr+0x14c>)
 802332e:	687a      	ldr	r2, [r7, #4]
 8023330:	4613      	mov	r3, r2
 8023332:	005b      	lsls	r3, r3, #1
 8023334:	4413      	add	r3, r2
 8023336:	00db      	lsls	r3, r3, #3
 8023338:	440b      	add	r3, r1
 802333a:	3314      	adds	r3, #20
 802333c:	781b      	ldrb	r3, [r3, #0]
 802333e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8023340:	78fb      	ldrb	r3, [r7, #3]
 8023342:	2b00      	cmp	r3, #0
 8023344:	f000 8086 	beq.w	8023454 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8023348:	4948      	ldr	r1, [pc, #288]	; (802346c <etharp_tmr+0x14c>)
 802334a:	687a      	ldr	r2, [r7, #4]
 802334c:	4613      	mov	r3, r2
 802334e:	005b      	lsls	r3, r3, #1
 8023350:	4413      	add	r3, r2
 8023352:	00db      	lsls	r3, r3, #3
 8023354:	440b      	add	r3, r1
 8023356:	3312      	adds	r3, #18
 8023358:	881b      	ldrh	r3, [r3, #0]
 802335a:	3301      	adds	r3, #1
 802335c:	b298      	uxth	r0, r3
 802335e:	4943      	ldr	r1, [pc, #268]	; (802346c <etharp_tmr+0x14c>)
 8023360:	687a      	ldr	r2, [r7, #4]
 8023362:	4613      	mov	r3, r2
 8023364:	005b      	lsls	r3, r3, #1
 8023366:	4413      	add	r3, r2
 8023368:	00db      	lsls	r3, r3, #3
 802336a:	440b      	add	r3, r1
 802336c:	3312      	adds	r3, #18
 802336e:	4602      	mov	r2, r0
 8023370:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8023372:	493e      	ldr	r1, [pc, #248]	; (802346c <etharp_tmr+0x14c>)
 8023374:	687a      	ldr	r2, [r7, #4]
 8023376:	4613      	mov	r3, r2
 8023378:	005b      	lsls	r3, r3, #1
 802337a:	4413      	add	r3, r2
 802337c:	00db      	lsls	r3, r3, #3
 802337e:	440b      	add	r3, r1
 8023380:	3312      	adds	r3, #18
 8023382:	881b      	ldrh	r3, [r3, #0]
 8023384:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8023388:	d215      	bcs.n	80233b6 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 802338a:	4938      	ldr	r1, [pc, #224]	; (802346c <etharp_tmr+0x14c>)
 802338c:	687a      	ldr	r2, [r7, #4]
 802338e:	4613      	mov	r3, r2
 8023390:	005b      	lsls	r3, r3, #1
 8023392:	4413      	add	r3, r2
 8023394:	00db      	lsls	r3, r3, #3
 8023396:	440b      	add	r3, r1
 8023398:	3314      	adds	r3, #20
 802339a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 802339c:	2b01      	cmp	r3, #1
 802339e:	d10e      	bne.n	80233be <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80233a0:	4932      	ldr	r1, [pc, #200]	; (802346c <etharp_tmr+0x14c>)
 80233a2:	687a      	ldr	r2, [r7, #4]
 80233a4:	4613      	mov	r3, r2
 80233a6:	005b      	lsls	r3, r3, #1
 80233a8:	4413      	add	r3, r2
 80233aa:	00db      	lsls	r3, r3, #3
 80233ac:	440b      	add	r3, r1
 80233ae:	3312      	adds	r3, #18
 80233b0:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80233b2:	2b04      	cmp	r3, #4
 80233b4:	d903      	bls.n	80233be <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80233b6:	6878      	ldr	r0, [r7, #4]
 80233b8:	f7ff ff80 	bl	80232bc <etharp_free_entry>
 80233bc:	e04a      	b.n	8023454 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80233be:	492b      	ldr	r1, [pc, #172]	; (802346c <etharp_tmr+0x14c>)
 80233c0:	687a      	ldr	r2, [r7, #4]
 80233c2:	4613      	mov	r3, r2
 80233c4:	005b      	lsls	r3, r3, #1
 80233c6:	4413      	add	r3, r2
 80233c8:	00db      	lsls	r3, r3, #3
 80233ca:	440b      	add	r3, r1
 80233cc:	3314      	adds	r3, #20
 80233ce:	781b      	ldrb	r3, [r3, #0]
 80233d0:	2b03      	cmp	r3, #3
 80233d2:	d10a      	bne.n	80233ea <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80233d4:	4925      	ldr	r1, [pc, #148]	; (802346c <etharp_tmr+0x14c>)
 80233d6:	687a      	ldr	r2, [r7, #4]
 80233d8:	4613      	mov	r3, r2
 80233da:	005b      	lsls	r3, r3, #1
 80233dc:	4413      	add	r3, r2
 80233de:	00db      	lsls	r3, r3, #3
 80233e0:	440b      	add	r3, r1
 80233e2:	3314      	adds	r3, #20
 80233e4:	2204      	movs	r2, #4
 80233e6:	701a      	strb	r2, [r3, #0]
 80233e8:	e034      	b.n	8023454 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80233ea:	4920      	ldr	r1, [pc, #128]	; (802346c <etharp_tmr+0x14c>)
 80233ec:	687a      	ldr	r2, [r7, #4]
 80233ee:	4613      	mov	r3, r2
 80233f0:	005b      	lsls	r3, r3, #1
 80233f2:	4413      	add	r3, r2
 80233f4:	00db      	lsls	r3, r3, #3
 80233f6:	440b      	add	r3, r1
 80233f8:	3314      	adds	r3, #20
 80233fa:	781b      	ldrb	r3, [r3, #0]
 80233fc:	2b04      	cmp	r3, #4
 80233fe:	d10a      	bne.n	8023416 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8023400:	491a      	ldr	r1, [pc, #104]	; (802346c <etharp_tmr+0x14c>)
 8023402:	687a      	ldr	r2, [r7, #4]
 8023404:	4613      	mov	r3, r2
 8023406:	005b      	lsls	r3, r3, #1
 8023408:	4413      	add	r3, r2
 802340a:	00db      	lsls	r3, r3, #3
 802340c:	440b      	add	r3, r1
 802340e:	3314      	adds	r3, #20
 8023410:	2202      	movs	r2, #2
 8023412:	701a      	strb	r2, [r3, #0]
 8023414:	e01e      	b.n	8023454 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8023416:	4915      	ldr	r1, [pc, #84]	; (802346c <etharp_tmr+0x14c>)
 8023418:	687a      	ldr	r2, [r7, #4]
 802341a:	4613      	mov	r3, r2
 802341c:	005b      	lsls	r3, r3, #1
 802341e:	4413      	add	r3, r2
 8023420:	00db      	lsls	r3, r3, #3
 8023422:	440b      	add	r3, r1
 8023424:	3314      	adds	r3, #20
 8023426:	781b      	ldrb	r3, [r3, #0]
 8023428:	2b01      	cmp	r3, #1
 802342a:	d113      	bne.n	8023454 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 802342c:	490f      	ldr	r1, [pc, #60]	; (802346c <etharp_tmr+0x14c>)
 802342e:	687a      	ldr	r2, [r7, #4]
 8023430:	4613      	mov	r3, r2
 8023432:	005b      	lsls	r3, r3, #1
 8023434:	4413      	add	r3, r2
 8023436:	00db      	lsls	r3, r3, #3
 8023438:	440b      	add	r3, r1
 802343a:	3308      	adds	r3, #8
 802343c:	6818      	ldr	r0, [r3, #0]
 802343e:	687a      	ldr	r2, [r7, #4]
 8023440:	4613      	mov	r3, r2
 8023442:	005b      	lsls	r3, r3, #1
 8023444:	4413      	add	r3, r2
 8023446:	00db      	lsls	r3, r3, #3
 8023448:	4a08      	ldr	r2, [pc, #32]	; (802346c <etharp_tmr+0x14c>)
 802344a:	4413      	add	r3, r2
 802344c:	3304      	adds	r3, #4
 802344e:	4619      	mov	r1, r3
 8023450:	f000 fe72 	bl	8024138 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8023454:	687b      	ldr	r3, [r7, #4]
 8023456:	3301      	adds	r3, #1
 8023458:	607b      	str	r3, [r7, #4]
 802345a:	687b      	ldr	r3, [r7, #4]
 802345c:	2b09      	cmp	r3, #9
 802345e:	f77f af65 	ble.w	802332c <etharp_tmr+0xc>
      }
    }
  }
}
 8023462:	bf00      	nop
 8023464:	bf00      	nop
 8023466:	3708      	adds	r7, #8
 8023468:	46bd      	mov	sp, r7
 802346a:	bd80      	pop	{r7, pc}
 802346c:	20013c78 	.word	0x20013c78

08023470 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8023470:	b580      	push	{r7, lr}
 8023472:	b08a      	sub	sp, #40	; 0x28
 8023474:	af00      	add	r7, sp, #0
 8023476:	60f8      	str	r0, [r7, #12]
 8023478:	460b      	mov	r3, r1
 802347a:	607a      	str	r2, [r7, #4]
 802347c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 802347e:	230a      	movs	r3, #10
 8023480:	84fb      	strh	r3, [r7, #38]	; 0x26
 8023482:	230a      	movs	r3, #10
 8023484:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8023486:	230a      	movs	r3, #10
 8023488:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 802348a:	2300      	movs	r3, #0
 802348c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 802348e:	230a      	movs	r3, #10
 8023490:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8023492:	2300      	movs	r3, #0
 8023494:	83bb      	strh	r3, [r7, #28]
 8023496:	2300      	movs	r3, #0
 8023498:	837b      	strh	r3, [r7, #26]
 802349a:	2300      	movs	r3, #0
 802349c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 802349e:	2300      	movs	r3, #0
 80234a0:	843b      	strh	r3, [r7, #32]
 80234a2:	e0ae      	b.n	8023602 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80234a4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80234a8:	49a6      	ldr	r1, [pc, #664]	; (8023744 <etharp_find_entry+0x2d4>)
 80234aa:	4613      	mov	r3, r2
 80234ac:	005b      	lsls	r3, r3, #1
 80234ae:	4413      	add	r3, r2
 80234b0:	00db      	lsls	r3, r3, #3
 80234b2:	440b      	add	r3, r1
 80234b4:	3314      	adds	r3, #20
 80234b6:	781b      	ldrb	r3, [r3, #0]
 80234b8:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80234ba:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80234be:	2b0a      	cmp	r3, #10
 80234c0:	d105      	bne.n	80234ce <etharp_find_entry+0x5e>
 80234c2:	7dfb      	ldrb	r3, [r7, #23]
 80234c4:	2b00      	cmp	r3, #0
 80234c6:	d102      	bne.n	80234ce <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80234c8:	8c3b      	ldrh	r3, [r7, #32]
 80234ca:	847b      	strh	r3, [r7, #34]	; 0x22
 80234cc:	e095      	b.n	80235fa <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80234ce:	7dfb      	ldrb	r3, [r7, #23]
 80234d0:	2b00      	cmp	r3, #0
 80234d2:	f000 8092 	beq.w	80235fa <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80234d6:	7dfb      	ldrb	r3, [r7, #23]
 80234d8:	2b01      	cmp	r3, #1
 80234da:	d009      	beq.n	80234f0 <etharp_find_entry+0x80>
 80234dc:	7dfb      	ldrb	r3, [r7, #23]
 80234de:	2b01      	cmp	r3, #1
 80234e0:	d806      	bhi.n	80234f0 <etharp_find_entry+0x80>
 80234e2:	4b99      	ldr	r3, [pc, #612]	; (8023748 <etharp_find_entry+0x2d8>)
 80234e4:	f240 1223 	movw	r2, #291	; 0x123
 80234e8:	4998      	ldr	r1, [pc, #608]	; (802374c <etharp_find_entry+0x2dc>)
 80234ea:	4899      	ldr	r0, [pc, #612]	; (8023750 <etharp_find_entry+0x2e0>)
 80234ec:	f003 f9ee 	bl	80268cc <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80234f0:	68fb      	ldr	r3, [r7, #12]
 80234f2:	2b00      	cmp	r3, #0
 80234f4:	d020      	beq.n	8023538 <etharp_find_entry+0xc8>
 80234f6:	68fb      	ldr	r3, [r7, #12]
 80234f8:	6819      	ldr	r1, [r3, #0]
 80234fa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80234fe:	4891      	ldr	r0, [pc, #580]	; (8023744 <etharp_find_entry+0x2d4>)
 8023500:	4613      	mov	r3, r2
 8023502:	005b      	lsls	r3, r3, #1
 8023504:	4413      	add	r3, r2
 8023506:	00db      	lsls	r3, r3, #3
 8023508:	4403      	add	r3, r0
 802350a:	3304      	adds	r3, #4
 802350c:	681b      	ldr	r3, [r3, #0]
 802350e:	4299      	cmp	r1, r3
 8023510:	d112      	bne.n	8023538 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8023512:	687b      	ldr	r3, [r7, #4]
 8023514:	2b00      	cmp	r3, #0
 8023516:	d00c      	beq.n	8023532 <etharp_find_entry+0xc2>
 8023518:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 802351c:	4989      	ldr	r1, [pc, #548]	; (8023744 <etharp_find_entry+0x2d4>)
 802351e:	4613      	mov	r3, r2
 8023520:	005b      	lsls	r3, r3, #1
 8023522:	4413      	add	r3, r2
 8023524:	00db      	lsls	r3, r3, #3
 8023526:	440b      	add	r3, r1
 8023528:	3308      	adds	r3, #8
 802352a:	681b      	ldr	r3, [r3, #0]
 802352c:	687a      	ldr	r2, [r7, #4]
 802352e:	429a      	cmp	r2, r3
 8023530:	d102      	bne.n	8023538 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8023532:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8023536:	e100      	b.n	802373a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8023538:	7dfb      	ldrb	r3, [r7, #23]
 802353a:	2b01      	cmp	r3, #1
 802353c:	d140      	bne.n	80235c0 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 802353e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8023542:	4980      	ldr	r1, [pc, #512]	; (8023744 <etharp_find_entry+0x2d4>)
 8023544:	4613      	mov	r3, r2
 8023546:	005b      	lsls	r3, r3, #1
 8023548:	4413      	add	r3, r2
 802354a:	00db      	lsls	r3, r3, #3
 802354c:	440b      	add	r3, r1
 802354e:	681b      	ldr	r3, [r3, #0]
 8023550:	2b00      	cmp	r3, #0
 8023552:	d01a      	beq.n	802358a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8023554:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8023558:	497a      	ldr	r1, [pc, #488]	; (8023744 <etharp_find_entry+0x2d4>)
 802355a:	4613      	mov	r3, r2
 802355c:	005b      	lsls	r3, r3, #1
 802355e:	4413      	add	r3, r2
 8023560:	00db      	lsls	r3, r3, #3
 8023562:	440b      	add	r3, r1
 8023564:	3312      	adds	r3, #18
 8023566:	881b      	ldrh	r3, [r3, #0]
 8023568:	8bba      	ldrh	r2, [r7, #28]
 802356a:	429a      	cmp	r2, r3
 802356c:	d845      	bhi.n	80235fa <etharp_find_entry+0x18a>
            old_queue = i;
 802356e:	8c3b      	ldrh	r3, [r7, #32]
 8023570:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8023572:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8023576:	4973      	ldr	r1, [pc, #460]	; (8023744 <etharp_find_entry+0x2d4>)
 8023578:	4613      	mov	r3, r2
 802357a:	005b      	lsls	r3, r3, #1
 802357c:	4413      	add	r3, r2
 802357e:	00db      	lsls	r3, r3, #3
 8023580:	440b      	add	r3, r1
 8023582:	3312      	adds	r3, #18
 8023584:	881b      	ldrh	r3, [r3, #0]
 8023586:	83bb      	strh	r3, [r7, #28]
 8023588:	e037      	b.n	80235fa <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 802358a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 802358e:	496d      	ldr	r1, [pc, #436]	; (8023744 <etharp_find_entry+0x2d4>)
 8023590:	4613      	mov	r3, r2
 8023592:	005b      	lsls	r3, r3, #1
 8023594:	4413      	add	r3, r2
 8023596:	00db      	lsls	r3, r3, #3
 8023598:	440b      	add	r3, r1
 802359a:	3312      	adds	r3, #18
 802359c:	881b      	ldrh	r3, [r3, #0]
 802359e:	8b7a      	ldrh	r2, [r7, #26]
 80235a0:	429a      	cmp	r2, r3
 80235a2:	d82a      	bhi.n	80235fa <etharp_find_entry+0x18a>
            old_pending = i;
 80235a4:	8c3b      	ldrh	r3, [r7, #32]
 80235a6:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 80235a8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80235ac:	4965      	ldr	r1, [pc, #404]	; (8023744 <etharp_find_entry+0x2d4>)
 80235ae:	4613      	mov	r3, r2
 80235b0:	005b      	lsls	r3, r3, #1
 80235b2:	4413      	add	r3, r2
 80235b4:	00db      	lsls	r3, r3, #3
 80235b6:	440b      	add	r3, r1
 80235b8:	3312      	adds	r3, #18
 80235ba:	881b      	ldrh	r3, [r3, #0]
 80235bc:	837b      	strh	r3, [r7, #26]
 80235be:	e01c      	b.n	80235fa <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80235c0:	7dfb      	ldrb	r3, [r7, #23]
 80235c2:	2b01      	cmp	r3, #1
 80235c4:	d919      	bls.n	80235fa <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80235c6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80235ca:	495e      	ldr	r1, [pc, #376]	; (8023744 <etharp_find_entry+0x2d4>)
 80235cc:	4613      	mov	r3, r2
 80235ce:	005b      	lsls	r3, r3, #1
 80235d0:	4413      	add	r3, r2
 80235d2:	00db      	lsls	r3, r3, #3
 80235d4:	440b      	add	r3, r1
 80235d6:	3312      	adds	r3, #18
 80235d8:	881b      	ldrh	r3, [r3, #0]
 80235da:	8b3a      	ldrh	r2, [r7, #24]
 80235dc:	429a      	cmp	r2, r3
 80235de:	d80c      	bhi.n	80235fa <etharp_find_entry+0x18a>
            old_stable = i;
 80235e0:	8c3b      	ldrh	r3, [r7, #32]
 80235e2:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80235e4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80235e8:	4956      	ldr	r1, [pc, #344]	; (8023744 <etharp_find_entry+0x2d4>)
 80235ea:	4613      	mov	r3, r2
 80235ec:	005b      	lsls	r3, r3, #1
 80235ee:	4413      	add	r3, r2
 80235f0:	00db      	lsls	r3, r3, #3
 80235f2:	440b      	add	r3, r1
 80235f4:	3312      	adds	r3, #18
 80235f6:	881b      	ldrh	r3, [r3, #0]
 80235f8:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80235fa:	8c3b      	ldrh	r3, [r7, #32]
 80235fc:	3301      	adds	r3, #1
 80235fe:	b29b      	uxth	r3, r3
 8023600:	843b      	strh	r3, [r7, #32]
 8023602:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8023606:	2b09      	cmp	r3, #9
 8023608:	f77f af4c 	ble.w	80234a4 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 802360c:	7afb      	ldrb	r3, [r7, #11]
 802360e:	f003 0302 	and.w	r3, r3, #2
 8023612:	2b00      	cmp	r3, #0
 8023614:	d108      	bne.n	8023628 <etharp_find_entry+0x1b8>
 8023616:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 802361a:	2b0a      	cmp	r3, #10
 802361c:	d107      	bne.n	802362e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 802361e:	7afb      	ldrb	r3, [r7, #11]
 8023620:	f003 0301 	and.w	r3, r3, #1
 8023624:	2b00      	cmp	r3, #0
 8023626:	d102      	bne.n	802362e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8023628:	f04f 33ff 	mov.w	r3, #4294967295
 802362c:	e085      	b.n	802373a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 802362e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8023632:	2b09      	cmp	r3, #9
 8023634:	dc02      	bgt.n	802363c <etharp_find_entry+0x1cc>
    i = empty;
 8023636:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8023638:	843b      	strh	r3, [r7, #32]
 802363a:	e039      	b.n	80236b0 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 802363c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8023640:	2b09      	cmp	r3, #9
 8023642:	dc14      	bgt.n	802366e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8023644:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8023646:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8023648:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 802364c:	493d      	ldr	r1, [pc, #244]	; (8023744 <etharp_find_entry+0x2d4>)
 802364e:	4613      	mov	r3, r2
 8023650:	005b      	lsls	r3, r3, #1
 8023652:	4413      	add	r3, r2
 8023654:	00db      	lsls	r3, r3, #3
 8023656:	440b      	add	r3, r1
 8023658:	681b      	ldr	r3, [r3, #0]
 802365a:	2b00      	cmp	r3, #0
 802365c:	d018      	beq.n	8023690 <etharp_find_entry+0x220>
 802365e:	4b3a      	ldr	r3, [pc, #232]	; (8023748 <etharp_find_entry+0x2d8>)
 8023660:	f240 126d 	movw	r2, #365	; 0x16d
 8023664:	493b      	ldr	r1, [pc, #236]	; (8023754 <etharp_find_entry+0x2e4>)
 8023666:	483a      	ldr	r0, [pc, #232]	; (8023750 <etharp_find_entry+0x2e0>)
 8023668:	f003 f930 	bl	80268cc <iprintf>
 802366c:	e010      	b.n	8023690 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 802366e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8023672:	2b09      	cmp	r3, #9
 8023674:	dc02      	bgt.n	802367c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8023676:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8023678:	843b      	strh	r3, [r7, #32]
 802367a:	e009      	b.n	8023690 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 802367c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8023680:	2b09      	cmp	r3, #9
 8023682:	dc02      	bgt.n	802368a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8023684:	8bfb      	ldrh	r3, [r7, #30]
 8023686:	843b      	strh	r3, [r7, #32]
 8023688:	e002      	b.n	8023690 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 802368a:	f04f 33ff 	mov.w	r3, #4294967295
 802368e:	e054      	b.n	802373a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8023690:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8023694:	2b09      	cmp	r3, #9
 8023696:	dd06      	ble.n	80236a6 <etharp_find_entry+0x236>
 8023698:	4b2b      	ldr	r3, [pc, #172]	; (8023748 <etharp_find_entry+0x2d8>)
 802369a:	f240 127f 	movw	r2, #383	; 0x17f
 802369e:	492e      	ldr	r1, [pc, #184]	; (8023758 <etharp_find_entry+0x2e8>)
 80236a0:	482b      	ldr	r0, [pc, #172]	; (8023750 <etharp_find_entry+0x2e0>)
 80236a2:	f003 f913 	bl	80268cc <iprintf>
    etharp_free_entry(i);
 80236a6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80236aa:	4618      	mov	r0, r3
 80236ac:	f7ff fe06 	bl	80232bc <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80236b0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80236b4:	2b09      	cmp	r3, #9
 80236b6:	dd06      	ble.n	80236c6 <etharp_find_entry+0x256>
 80236b8:	4b23      	ldr	r3, [pc, #140]	; (8023748 <etharp_find_entry+0x2d8>)
 80236ba:	f240 1283 	movw	r2, #387	; 0x183
 80236be:	4926      	ldr	r1, [pc, #152]	; (8023758 <etharp_find_entry+0x2e8>)
 80236c0:	4823      	ldr	r0, [pc, #140]	; (8023750 <etharp_find_entry+0x2e0>)
 80236c2:	f003 f903 	bl	80268cc <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80236c6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80236ca:	491e      	ldr	r1, [pc, #120]	; (8023744 <etharp_find_entry+0x2d4>)
 80236cc:	4613      	mov	r3, r2
 80236ce:	005b      	lsls	r3, r3, #1
 80236d0:	4413      	add	r3, r2
 80236d2:	00db      	lsls	r3, r3, #3
 80236d4:	440b      	add	r3, r1
 80236d6:	3314      	adds	r3, #20
 80236d8:	781b      	ldrb	r3, [r3, #0]
 80236da:	2b00      	cmp	r3, #0
 80236dc:	d006      	beq.n	80236ec <etharp_find_entry+0x27c>
 80236de:	4b1a      	ldr	r3, [pc, #104]	; (8023748 <etharp_find_entry+0x2d8>)
 80236e0:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80236e4:	491d      	ldr	r1, [pc, #116]	; (802375c <etharp_find_entry+0x2ec>)
 80236e6:	481a      	ldr	r0, [pc, #104]	; (8023750 <etharp_find_entry+0x2e0>)
 80236e8:	f003 f8f0 	bl	80268cc <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80236ec:	68fb      	ldr	r3, [r7, #12]
 80236ee:	2b00      	cmp	r3, #0
 80236f0:	d00b      	beq.n	802370a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80236f2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80236f6:	68fb      	ldr	r3, [r7, #12]
 80236f8:	6819      	ldr	r1, [r3, #0]
 80236fa:	4812      	ldr	r0, [pc, #72]	; (8023744 <etharp_find_entry+0x2d4>)
 80236fc:	4613      	mov	r3, r2
 80236fe:	005b      	lsls	r3, r3, #1
 8023700:	4413      	add	r3, r2
 8023702:	00db      	lsls	r3, r3, #3
 8023704:	4403      	add	r3, r0
 8023706:	3304      	adds	r3, #4
 8023708:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 802370a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 802370e:	490d      	ldr	r1, [pc, #52]	; (8023744 <etharp_find_entry+0x2d4>)
 8023710:	4613      	mov	r3, r2
 8023712:	005b      	lsls	r3, r3, #1
 8023714:	4413      	add	r3, r2
 8023716:	00db      	lsls	r3, r3, #3
 8023718:	440b      	add	r3, r1
 802371a:	3312      	adds	r3, #18
 802371c:	2200      	movs	r2, #0
 802371e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8023720:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8023724:	4907      	ldr	r1, [pc, #28]	; (8023744 <etharp_find_entry+0x2d4>)
 8023726:	4613      	mov	r3, r2
 8023728:	005b      	lsls	r3, r3, #1
 802372a:	4413      	add	r3, r2
 802372c:	00db      	lsls	r3, r3, #3
 802372e:	440b      	add	r3, r1
 8023730:	3308      	adds	r3, #8
 8023732:	687a      	ldr	r2, [r7, #4]
 8023734:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8023736:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 802373a:	4618      	mov	r0, r3
 802373c:	3728      	adds	r7, #40	; 0x28
 802373e:	46bd      	mov	sp, r7
 8023740:	bd80      	pop	{r7, pc}
 8023742:	bf00      	nop
 8023744:	20013c78 	.word	0x20013c78
 8023748:	0802efb0 	.word	0x0802efb0
 802374c:	0802efe8 	.word	0x0802efe8
 8023750:	0802f028 	.word	0x0802f028
 8023754:	0802f050 	.word	0x0802f050
 8023758:	0802f068 	.word	0x0802f068
 802375c:	0802f07c 	.word	0x0802f07c

08023760 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8023760:	b580      	push	{r7, lr}
 8023762:	b088      	sub	sp, #32
 8023764:	af02      	add	r7, sp, #8
 8023766:	60f8      	str	r0, [r7, #12]
 8023768:	60b9      	str	r1, [r7, #8]
 802376a:	607a      	str	r2, [r7, #4]
 802376c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 802376e:	68fb      	ldr	r3, [r7, #12]
 8023770:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8023774:	2b06      	cmp	r3, #6
 8023776:	d006      	beq.n	8023786 <etharp_update_arp_entry+0x26>
 8023778:	4b48      	ldr	r3, [pc, #288]	; (802389c <etharp_update_arp_entry+0x13c>)
 802377a:	f240 12a9 	movw	r2, #425	; 0x1a9
 802377e:	4948      	ldr	r1, [pc, #288]	; (80238a0 <etharp_update_arp_entry+0x140>)
 8023780:	4848      	ldr	r0, [pc, #288]	; (80238a4 <etharp_update_arp_entry+0x144>)
 8023782:	f003 f8a3 	bl	80268cc <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8023786:	68bb      	ldr	r3, [r7, #8]
 8023788:	2b00      	cmp	r3, #0
 802378a:	d012      	beq.n	80237b2 <etharp_update_arp_entry+0x52>
 802378c:	68bb      	ldr	r3, [r7, #8]
 802378e:	681b      	ldr	r3, [r3, #0]
 8023790:	2b00      	cmp	r3, #0
 8023792:	d00e      	beq.n	80237b2 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8023794:	68bb      	ldr	r3, [r7, #8]
 8023796:	681b      	ldr	r3, [r3, #0]
 8023798:	68f9      	ldr	r1, [r7, #12]
 802379a:	4618      	mov	r0, r3
 802379c:	f001 f920 	bl	80249e0 <ip4_addr_isbroadcast_u32>
 80237a0:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80237a2:	2b00      	cmp	r3, #0
 80237a4:	d105      	bne.n	80237b2 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80237a6:	68bb      	ldr	r3, [r7, #8]
 80237a8:	681b      	ldr	r3, [r3, #0]
 80237aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80237ae:	2be0      	cmp	r3, #224	; 0xe0
 80237b0:	d102      	bne.n	80237b8 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80237b2:	f06f 030f 	mvn.w	r3, #15
 80237b6:	e06c      	b.n	8023892 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80237b8:	78fb      	ldrb	r3, [r7, #3]
 80237ba:	68fa      	ldr	r2, [r7, #12]
 80237bc:	4619      	mov	r1, r3
 80237be:	68b8      	ldr	r0, [r7, #8]
 80237c0:	f7ff fe56 	bl	8023470 <etharp_find_entry>
 80237c4:	4603      	mov	r3, r0
 80237c6:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80237c8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80237cc:	2b00      	cmp	r3, #0
 80237ce:	da02      	bge.n	80237d6 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80237d0:	8afb      	ldrh	r3, [r7, #22]
 80237d2:	b25b      	sxtb	r3, r3
 80237d4:	e05d      	b.n	8023892 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80237d6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80237da:	4933      	ldr	r1, [pc, #204]	; (80238a8 <etharp_update_arp_entry+0x148>)
 80237dc:	4613      	mov	r3, r2
 80237de:	005b      	lsls	r3, r3, #1
 80237e0:	4413      	add	r3, r2
 80237e2:	00db      	lsls	r3, r3, #3
 80237e4:	440b      	add	r3, r1
 80237e6:	3314      	adds	r3, #20
 80237e8:	2202      	movs	r2, #2
 80237ea:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80237ec:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80237f0:	492d      	ldr	r1, [pc, #180]	; (80238a8 <etharp_update_arp_entry+0x148>)
 80237f2:	4613      	mov	r3, r2
 80237f4:	005b      	lsls	r3, r3, #1
 80237f6:	4413      	add	r3, r2
 80237f8:	00db      	lsls	r3, r3, #3
 80237fa:	440b      	add	r3, r1
 80237fc:	3308      	adds	r3, #8
 80237fe:	68fa      	ldr	r2, [r7, #12]
 8023800:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8023802:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8023806:	4613      	mov	r3, r2
 8023808:	005b      	lsls	r3, r3, #1
 802380a:	4413      	add	r3, r2
 802380c:	00db      	lsls	r3, r3, #3
 802380e:	3308      	adds	r3, #8
 8023810:	4a25      	ldr	r2, [pc, #148]	; (80238a8 <etharp_update_arp_entry+0x148>)
 8023812:	4413      	add	r3, r2
 8023814:	3304      	adds	r3, #4
 8023816:	2206      	movs	r2, #6
 8023818:	6879      	ldr	r1, [r7, #4]
 802381a:	4618      	mov	r0, r3
 802381c:	f002 f982 	bl	8025b24 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8023820:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8023824:	4920      	ldr	r1, [pc, #128]	; (80238a8 <etharp_update_arp_entry+0x148>)
 8023826:	4613      	mov	r3, r2
 8023828:	005b      	lsls	r3, r3, #1
 802382a:	4413      	add	r3, r2
 802382c:	00db      	lsls	r3, r3, #3
 802382e:	440b      	add	r3, r1
 8023830:	3312      	adds	r3, #18
 8023832:	2200      	movs	r2, #0
 8023834:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8023836:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 802383a:	491b      	ldr	r1, [pc, #108]	; (80238a8 <etharp_update_arp_entry+0x148>)
 802383c:	4613      	mov	r3, r2
 802383e:	005b      	lsls	r3, r3, #1
 8023840:	4413      	add	r3, r2
 8023842:	00db      	lsls	r3, r3, #3
 8023844:	440b      	add	r3, r1
 8023846:	681b      	ldr	r3, [r3, #0]
 8023848:	2b00      	cmp	r3, #0
 802384a:	d021      	beq.n	8023890 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 802384c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8023850:	4915      	ldr	r1, [pc, #84]	; (80238a8 <etharp_update_arp_entry+0x148>)
 8023852:	4613      	mov	r3, r2
 8023854:	005b      	lsls	r3, r3, #1
 8023856:	4413      	add	r3, r2
 8023858:	00db      	lsls	r3, r3, #3
 802385a:	440b      	add	r3, r1
 802385c:	681b      	ldr	r3, [r3, #0]
 802385e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8023860:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8023864:	4910      	ldr	r1, [pc, #64]	; (80238a8 <etharp_update_arp_entry+0x148>)
 8023866:	4613      	mov	r3, r2
 8023868:	005b      	lsls	r3, r3, #1
 802386a:	4413      	add	r3, r2
 802386c:	00db      	lsls	r3, r3, #3
 802386e:	440b      	add	r3, r1
 8023870:	2200      	movs	r2, #0
 8023872:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8023874:	68fb      	ldr	r3, [r7, #12]
 8023876:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 802387a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 802387e:	9300      	str	r3, [sp, #0]
 8023880:	687b      	ldr	r3, [r7, #4]
 8023882:	6939      	ldr	r1, [r7, #16]
 8023884:	68f8      	ldr	r0, [r7, #12]
 8023886:	f001 ffb9 	bl	80257fc <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 802388a:	6938      	ldr	r0, [r7, #16]
 802388c:	f7f6 fb94 	bl	8019fb8 <pbuf_free>
  }
  return ERR_OK;
 8023890:	2300      	movs	r3, #0
}
 8023892:	4618      	mov	r0, r3
 8023894:	3718      	adds	r7, #24
 8023896:	46bd      	mov	sp, r7
 8023898:	bd80      	pop	{r7, pc}
 802389a:	bf00      	nop
 802389c:	0802efb0 	.word	0x0802efb0
 80238a0:	0802f0a8 	.word	0x0802f0a8
 80238a4:	0802f028 	.word	0x0802f028
 80238a8:	20013c78 	.word	0x20013c78

080238ac <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80238ac:	b580      	push	{r7, lr}
 80238ae:	b084      	sub	sp, #16
 80238b0:	af00      	add	r7, sp, #0
 80238b2:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80238b4:	2300      	movs	r3, #0
 80238b6:	60fb      	str	r3, [r7, #12]
 80238b8:	e01e      	b.n	80238f8 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80238ba:	4913      	ldr	r1, [pc, #76]	; (8023908 <etharp_cleanup_netif+0x5c>)
 80238bc:	68fa      	ldr	r2, [r7, #12]
 80238be:	4613      	mov	r3, r2
 80238c0:	005b      	lsls	r3, r3, #1
 80238c2:	4413      	add	r3, r2
 80238c4:	00db      	lsls	r3, r3, #3
 80238c6:	440b      	add	r3, r1
 80238c8:	3314      	adds	r3, #20
 80238ca:	781b      	ldrb	r3, [r3, #0]
 80238cc:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80238ce:	7afb      	ldrb	r3, [r7, #11]
 80238d0:	2b00      	cmp	r3, #0
 80238d2:	d00e      	beq.n	80238f2 <etharp_cleanup_netif+0x46>
 80238d4:	490c      	ldr	r1, [pc, #48]	; (8023908 <etharp_cleanup_netif+0x5c>)
 80238d6:	68fa      	ldr	r2, [r7, #12]
 80238d8:	4613      	mov	r3, r2
 80238da:	005b      	lsls	r3, r3, #1
 80238dc:	4413      	add	r3, r2
 80238de:	00db      	lsls	r3, r3, #3
 80238e0:	440b      	add	r3, r1
 80238e2:	3308      	adds	r3, #8
 80238e4:	681b      	ldr	r3, [r3, #0]
 80238e6:	687a      	ldr	r2, [r7, #4]
 80238e8:	429a      	cmp	r2, r3
 80238ea:	d102      	bne.n	80238f2 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80238ec:	68f8      	ldr	r0, [r7, #12]
 80238ee:	f7ff fce5 	bl	80232bc <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80238f2:	68fb      	ldr	r3, [r7, #12]
 80238f4:	3301      	adds	r3, #1
 80238f6:	60fb      	str	r3, [r7, #12]
 80238f8:	68fb      	ldr	r3, [r7, #12]
 80238fa:	2b09      	cmp	r3, #9
 80238fc:	dddd      	ble.n	80238ba <etharp_cleanup_netif+0xe>
    }
  }
}
 80238fe:	bf00      	nop
 8023900:	bf00      	nop
 8023902:	3710      	adds	r7, #16
 8023904:	46bd      	mov	sp, r7
 8023906:	bd80      	pop	{r7, pc}
 8023908:	20013c78 	.word	0x20013c78

0802390c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 802390c:	b5b0      	push	{r4, r5, r7, lr}
 802390e:	b08a      	sub	sp, #40	; 0x28
 8023910:	af04      	add	r7, sp, #16
 8023912:	6078      	str	r0, [r7, #4]
 8023914:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8023916:	683b      	ldr	r3, [r7, #0]
 8023918:	2b00      	cmp	r3, #0
 802391a:	d107      	bne.n	802392c <etharp_input+0x20>
 802391c:	4b3f      	ldr	r3, [pc, #252]	; (8023a1c <etharp_input+0x110>)
 802391e:	f240 228a 	movw	r2, #650	; 0x28a
 8023922:	493f      	ldr	r1, [pc, #252]	; (8023a20 <etharp_input+0x114>)
 8023924:	483f      	ldr	r0, [pc, #252]	; (8023a24 <etharp_input+0x118>)
 8023926:	f002 ffd1 	bl	80268cc <iprintf>
 802392a:	e074      	b.n	8023a16 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 802392c:	687b      	ldr	r3, [r7, #4]
 802392e:	685b      	ldr	r3, [r3, #4]
 8023930:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8023932:	693b      	ldr	r3, [r7, #16]
 8023934:	881b      	ldrh	r3, [r3, #0]
 8023936:	b29b      	uxth	r3, r3
 8023938:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802393c:	d10c      	bne.n	8023958 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 802393e:	693b      	ldr	r3, [r7, #16]
 8023940:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8023942:	2b06      	cmp	r3, #6
 8023944:	d108      	bne.n	8023958 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8023946:	693b      	ldr	r3, [r7, #16]
 8023948:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 802394a:	2b04      	cmp	r3, #4
 802394c:	d104      	bne.n	8023958 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 802394e:	693b      	ldr	r3, [r7, #16]
 8023950:	885b      	ldrh	r3, [r3, #2]
 8023952:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8023954:	2b08      	cmp	r3, #8
 8023956:	d003      	beq.n	8023960 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8023958:	6878      	ldr	r0, [r7, #4]
 802395a:	f7f6 fb2d 	bl	8019fb8 <pbuf_free>
    return;
 802395e:	e05a      	b.n	8023a16 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8023960:	693b      	ldr	r3, [r7, #16]
 8023962:	330e      	adds	r3, #14
 8023964:	681b      	ldr	r3, [r3, #0]
 8023966:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8023968:	693b      	ldr	r3, [r7, #16]
 802396a:	3318      	adds	r3, #24
 802396c:	681b      	ldr	r3, [r3, #0]
 802396e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8023970:	683b      	ldr	r3, [r7, #0]
 8023972:	3304      	adds	r3, #4
 8023974:	681b      	ldr	r3, [r3, #0]
 8023976:	2b00      	cmp	r3, #0
 8023978:	d102      	bne.n	8023980 <etharp_input+0x74>
    for_us = 0;
 802397a:	2300      	movs	r3, #0
 802397c:	75fb      	strb	r3, [r7, #23]
 802397e:	e009      	b.n	8023994 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8023980:	68ba      	ldr	r2, [r7, #8]
 8023982:	683b      	ldr	r3, [r7, #0]
 8023984:	3304      	adds	r3, #4
 8023986:	681b      	ldr	r3, [r3, #0]
 8023988:	429a      	cmp	r2, r3
 802398a:	bf0c      	ite	eq
 802398c:	2301      	moveq	r3, #1
 802398e:	2300      	movne	r3, #0
 8023990:	b2db      	uxtb	r3, r3
 8023992:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8023994:	693b      	ldr	r3, [r7, #16]
 8023996:	f103 0208 	add.w	r2, r3, #8
 802399a:	7dfb      	ldrb	r3, [r7, #23]
 802399c:	2b00      	cmp	r3, #0
 802399e:	d001      	beq.n	80239a4 <etharp_input+0x98>
 80239a0:	2301      	movs	r3, #1
 80239a2:	e000      	b.n	80239a6 <etharp_input+0x9a>
 80239a4:	2302      	movs	r3, #2
 80239a6:	f107 010c 	add.w	r1, r7, #12
 80239aa:	6838      	ldr	r0, [r7, #0]
 80239ac:	f7ff fed8 	bl	8023760 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80239b0:	693b      	ldr	r3, [r7, #16]
 80239b2:	88db      	ldrh	r3, [r3, #6]
 80239b4:	b29b      	uxth	r3, r3
 80239b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80239ba:	d003      	beq.n	80239c4 <etharp_input+0xb8>
 80239bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80239c0:	d01e      	beq.n	8023a00 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80239c2:	e025      	b.n	8023a10 <etharp_input+0x104>
      if (for_us) {
 80239c4:	7dfb      	ldrb	r3, [r7, #23]
 80239c6:	2b00      	cmp	r3, #0
 80239c8:	d021      	beq.n	8023a0e <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80239ca:	683b      	ldr	r3, [r7, #0]
 80239cc:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 80239d0:	693b      	ldr	r3, [r7, #16]
 80239d2:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80239d6:	683b      	ldr	r3, [r7, #0]
 80239d8:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 80239dc:	683b      	ldr	r3, [r7, #0]
 80239de:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80239e0:	693a      	ldr	r2, [r7, #16]
 80239e2:	3208      	adds	r2, #8
        etharp_raw(netif,
 80239e4:	2102      	movs	r1, #2
 80239e6:	9103      	str	r1, [sp, #12]
 80239e8:	f107 010c 	add.w	r1, r7, #12
 80239ec:	9102      	str	r1, [sp, #8]
 80239ee:	9201      	str	r2, [sp, #4]
 80239f0:	9300      	str	r3, [sp, #0]
 80239f2:	462b      	mov	r3, r5
 80239f4:	4622      	mov	r2, r4
 80239f6:	4601      	mov	r1, r0
 80239f8:	6838      	ldr	r0, [r7, #0]
 80239fa:	f000 faef 	bl	8023fdc <etharp_raw>
      break;
 80239fe:	e006      	b.n	8023a0e <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8023a00:	f107 030c 	add.w	r3, r7, #12
 8023a04:	4619      	mov	r1, r3
 8023a06:	6838      	ldr	r0, [r7, #0]
 8023a08:	f7fe f9fc 	bl	8021e04 <dhcp_arp_reply>
      break;
 8023a0c:	e000      	b.n	8023a10 <etharp_input+0x104>
      break;
 8023a0e:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8023a10:	6878      	ldr	r0, [r7, #4]
 8023a12:	f7f6 fad1 	bl	8019fb8 <pbuf_free>
}
 8023a16:	3718      	adds	r7, #24
 8023a18:	46bd      	mov	sp, r7
 8023a1a:	bdb0      	pop	{r4, r5, r7, pc}
 8023a1c:	0802efb0 	.word	0x0802efb0
 8023a20:	0802f100 	.word	0x0802f100
 8023a24:	0802f028 	.word	0x0802f028

08023a28 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8023a28:	b580      	push	{r7, lr}
 8023a2a:	b086      	sub	sp, #24
 8023a2c:	af02      	add	r7, sp, #8
 8023a2e:	60f8      	str	r0, [r7, #12]
 8023a30:	60b9      	str	r1, [r7, #8]
 8023a32:	4613      	mov	r3, r2
 8023a34:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8023a36:	79fa      	ldrb	r2, [r7, #7]
 8023a38:	4944      	ldr	r1, [pc, #272]	; (8023b4c <etharp_output_to_arp_index+0x124>)
 8023a3a:	4613      	mov	r3, r2
 8023a3c:	005b      	lsls	r3, r3, #1
 8023a3e:	4413      	add	r3, r2
 8023a40:	00db      	lsls	r3, r3, #3
 8023a42:	440b      	add	r3, r1
 8023a44:	3314      	adds	r3, #20
 8023a46:	781b      	ldrb	r3, [r3, #0]
 8023a48:	2b01      	cmp	r3, #1
 8023a4a:	d806      	bhi.n	8023a5a <etharp_output_to_arp_index+0x32>
 8023a4c:	4b40      	ldr	r3, [pc, #256]	; (8023b50 <etharp_output_to_arp_index+0x128>)
 8023a4e:	f240 22ee 	movw	r2, #750	; 0x2ee
 8023a52:	4940      	ldr	r1, [pc, #256]	; (8023b54 <etharp_output_to_arp_index+0x12c>)
 8023a54:	4840      	ldr	r0, [pc, #256]	; (8023b58 <etharp_output_to_arp_index+0x130>)
 8023a56:	f002 ff39 	bl	80268cc <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8023a5a:	79fa      	ldrb	r2, [r7, #7]
 8023a5c:	493b      	ldr	r1, [pc, #236]	; (8023b4c <etharp_output_to_arp_index+0x124>)
 8023a5e:	4613      	mov	r3, r2
 8023a60:	005b      	lsls	r3, r3, #1
 8023a62:	4413      	add	r3, r2
 8023a64:	00db      	lsls	r3, r3, #3
 8023a66:	440b      	add	r3, r1
 8023a68:	3314      	adds	r3, #20
 8023a6a:	781b      	ldrb	r3, [r3, #0]
 8023a6c:	2b02      	cmp	r3, #2
 8023a6e:	d153      	bne.n	8023b18 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8023a70:	79fa      	ldrb	r2, [r7, #7]
 8023a72:	4936      	ldr	r1, [pc, #216]	; (8023b4c <etharp_output_to_arp_index+0x124>)
 8023a74:	4613      	mov	r3, r2
 8023a76:	005b      	lsls	r3, r3, #1
 8023a78:	4413      	add	r3, r2
 8023a7a:	00db      	lsls	r3, r3, #3
 8023a7c:	440b      	add	r3, r1
 8023a7e:	3312      	adds	r3, #18
 8023a80:	881b      	ldrh	r3, [r3, #0]
 8023a82:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8023a86:	d919      	bls.n	8023abc <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8023a88:	79fa      	ldrb	r2, [r7, #7]
 8023a8a:	4613      	mov	r3, r2
 8023a8c:	005b      	lsls	r3, r3, #1
 8023a8e:	4413      	add	r3, r2
 8023a90:	00db      	lsls	r3, r3, #3
 8023a92:	4a2e      	ldr	r2, [pc, #184]	; (8023b4c <etharp_output_to_arp_index+0x124>)
 8023a94:	4413      	add	r3, r2
 8023a96:	3304      	adds	r3, #4
 8023a98:	4619      	mov	r1, r3
 8023a9a:	68f8      	ldr	r0, [r7, #12]
 8023a9c:	f000 fb4c 	bl	8024138 <etharp_request>
 8023aa0:	4603      	mov	r3, r0
 8023aa2:	2b00      	cmp	r3, #0
 8023aa4:	d138      	bne.n	8023b18 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8023aa6:	79fa      	ldrb	r2, [r7, #7]
 8023aa8:	4928      	ldr	r1, [pc, #160]	; (8023b4c <etharp_output_to_arp_index+0x124>)
 8023aaa:	4613      	mov	r3, r2
 8023aac:	005b      	lsls	r3, r3, #1
 8023aae:	4413      	add	r3, r2
 8023ab0:	00db      	lsls	r3, r3, #3
 8023ab2:	440b      	add	r3, r1
 8023ab4:	3314      	adds	r3, #20
 8023ab6:	2203      	movs	r2, #3
 8023ab8:	701a      	strb	r2, [r3, #0]
 8023aba:	e02d      	b.n	8023b18 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8023abc:	79fa      	ldrb	r2, [r7, #7]
 8023abe:	4923      	ldr	r1, [pc, #140]	; (8023b4c <etharp_output_to_arp_index+0x124>)
 8023ac0:	4613      	mov	r3, r2
 8023ac2:	005b      	lsls	r3, r3, #1
 8023ac4:	4413      	add	r3, r2
 8023ac6:	00db      	lsls	r3, r3, #3
 8023ac8:	440b      	add	r3, r1
 8023aca:	3312      	adds	r3, #18
 8023acc:	881b      	ldrh	r3, [r3, #0]
 8023ace:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8023ad2:	d321      	bcc.n	8023b18 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8023ad4:	79fa      	ldrb	r2, [r7, #7]
 8023ad6:	4613      	mov	r3, r2
 8023ad8:	005b      	lsls	r3, r3, #1
 8023ada:	4413      	add	r3, r2
 8023adc:	00db      	lsls	r3, r3, #3
 8023ade:	4a1b      	ldr	r2, [pc, #108]	; (8023b4c <etharp_output_to_arp_index+0x124>)
 8023ae0:	4413      	add	r3, r2
 8023ae2:	1d19      	adds	r1, r3, #4
 8023ae4:	79fa      	ldrb	r2, [r7, #7]
 8023ae6:	4613      	mov	r3, r2
 8023ae8:	005b      	lsls	r3, r3, #1
 8023aea:	4413      	add	r3, r2
 8023aec:	00db      	lsls	r3, r3, #3
 8023aee:	3308      	adds	r3, #8
 8023af0:	4a16      	ldr	r2, [pc, #88]	; (8023b4c <etharp_output_to_arp_index+0x124>)
 8023af2:	4413      	add	r3, r2
 8023af4:	3304      	adds	r3, #4
 8023af6:	461a      	mov	r2, r3
 8023af8:	68f8      	ldr	r0, [r7, #12]
 8023afa:	f000 fafb 	bl	80240f4 <etharp_request_dst>
 8023afe:	4603      	mov	r3, r0
 8023b00:	2b00      	cmp	r3, #0
 8023b02:	d109      	bne.n	8023b18 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8023b04:	79fa      	ldrb	r2, [r7, #7]
 8023b06:	4911      	ldr	r1, [pc, #68]	; (8023b4c <etharp_output_to_arp_index+0x124>)
 8023b08:	4613      	mov	r3, r2
 8023b0a:	005b      	lsls	r3, r3, #1
 8023b0c:	4413      	add	r3, r2
 8023b0e:	00db      	lsls	r3, r3, #3
 8023b10:	440b      	add	r3, r1
 8023b12:	3314      	adds	r3, #20
 8023b14:	2203      	movs	r2, #3
 8023b16:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8023b18:	68fb      	ldr	r3, [r7, #12]
 8023b1a:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8023b1e:	79fa      	ldrb	r2, [r7, #7]
 8023b20:	4613      	mov	r3, r2
 8023b22:	005b      	lsls	r3, r3, #1
 8023b24:	4413      	add	r3, r2
 8023b26:	00db      	lsls	r3, r3, #3
 8023b28:	3308      	adds	r3, #8
 8023b2a:	4a08      	ldr	r2, [pc, #32]	; (8023b4c <etharp_output_to_arp_index+0x124>)
 8023b2c:	4413      	add	r3, r2
 8023b2e:	3304      	adds	r3, #4
 8023b30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8023b34:	9200      	str	r2, [sp, #0]
 8023b36:	460a      	mov	r2, r1
 8023b38:	68b9      	ldr	r1, [r7, #8]
 8023b3a:	68f8      	ldr	r0, [r7, #12]
 8023b3c:	f001 fe5e 	bl	80257fc <ethernet_output>
 8023b40:	4603      	mov	r3, r0
}
 8023b42:	4618      	mov	r0, r3
 8023b44:	3710      	adds	r7, #16
 8023b46:	46bd      	mov	sp, r7
 8023b48:	bd80      	pop	{r7, pc}
 8023b4a:	bf00      	nop
 8023b4c:	20013c78 	.word	0x20013c78
 8023b50:	0802efb0 	.word	0x0802efb0
 8023b54:	0802f120 	.word	0x0802f120
 8023b58:	0802f028 	.word	0x0802f028

08023b5c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8023b5c:	b580      	push	{r7, lr}
 8023b5e:	b08a      	sub	sp, #40	; 0x28
 8023b60:	af02      	add	r7, sp, #8
 8023b62:	60f8      	str	r0, [r7, #12]
 8023b64:	60b9      	str	r1, [r7, #8]
 8023b66:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8023b68:	687b      	ldr	r3, [r7, #4]
 8023b6a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8023b6c:	68fb      	ldr	r3, [r7, #12]
 8023b6e:	2b00      	cmp	r3, #0
 8023b70:	d106      	bne.n	8023b80 <etharp_output+0x24>
 8023b72:	4b73      	ldr	r3, [pc, #460]	; (8023d40 <etharp_output+0x1e4>)
 8023b74:	f240 321e 	movw	r2, #798	; 0x31e
 8023b78:	4972      	ldr	r1, [pc, #456]	; (8023d44 <etharp_output+0x1e8>)
 8023b7a:	4873      	ldr	r0, [pc, #460]	; (8023d48 <etharp_output+0x1ec>)
 8023b7c:	f002 fea6 	bl	80268cc <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8023b80:	68bb      	ldr	r3, [r7, #8]
 8023b82:	2b00      	cmp	r3, #0
 8023b84:	d106      	bne.n	8023b94 <etharp_output+0x38>
 8023b86:	4b6e      	ldr	r3, [pc, #440]	; (8023d40 <etharp_output+0x1e4>)
 8023b88:	f240 321f 	movw	r2, #799	; 0x31f
 8023b8c:	496f      	ldr	r1, [pc, #444]	; (8023d4c <etharp_output+0x1f0>)
 8023b8e:	486e      	ldr	r0, [pc, #440]	; (8023d48 <etharp_output+0x1ec>)
 8023b90:	f002 fe9c 	bl	80268cc <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8023b94:	687b      	ldr	r3, [r7, #4]
 8023b96:	2b00      	cmp	r3, #0
 8023b98:	d106      	bne.n	8023ba8 <etharp_output+0x4c>
 8023b9a:	4b69      	ldr	r3, [pc, #420]	; (8023d40 <etharp_output+0x1e4>)
 8023b9c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8023ba0:	496b      	ldr	r1, [pc, #428]	; (8023d50 <etharp_output+0x1f4>)
 8023ba2:	4869      	ldr	r0, [pc, #420]	; (8023d48 <etharp_output+0x1ec>)
 8023ba4:	f002 fe92 	bl	80268cc <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8023ba8:	687b      	ldr	r3, [r7, #4]
 8023baa:	681b      	ldr	r3, [r3, #0]
 8023bac:	68f9      	ldr	r1, [r7, #12]
 8023bae:	4618      	mov	r0, r3
 8023bb0:	f000 ff16 	bl	80249e0 <ip4_addr_isbroadcast_u32>
 8023bb4:	4603      	mov	r3, r0
 8023bb6:	2b00      	cmp	r3, #0
 8023bb8:	d002      	beq.n	8023bc0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8023bba:	4b66      	ldr	r3, [pc, #408]	; (8023d54 <etharp_output+0x1f8>)
 8023bbc:	61fb      	str	r3, [r7, #28]
 8023bbe:	e0af      	b.n	8023d20 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8023bc0:	687b      	ldr	r3, [r7, #4]
 8023bc2:	681b      	ldr	r3, [r3, #0]
 8023bc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8023bc8:	2be0      	cmp	r3, #224	; 0xe0
 8023bca:	d118      	bne.n	8023bfe <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8023bcc:	2301      	movs	r3, #1
 8023bce:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8023bd0:	2300      	movs	r3, #0
 8023bd2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8023bd4:	235e      	movs	r3, #94	; 0x5e
 8023bd6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8023bd8:	687b      	ldr	r3, [r7, #4]
 8023bda:	3301      	adds	r3, #1
 8023bdc:	781b      	ldrb	r3, [r3, #0]
 8023bde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8023be2:	b2db      	uxtb	r3, r3
 8023be4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8023be6:	687b      	ldr	r3, [r7, #4]
 8023be8:	3302      	adds	r3, #2
 8023bea:	781b      	ldrb	r3, [r3, #0]
 8023bec:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8023bee:	687b      	ldr	r3, [r7, #4]
 8023bf0:	3303      	adds	r3, #3
 8023bf2:	781b      	ldrb	r3, [r3, #0]
 8023bf4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8023bf6:	f107 0310 	add.w	r3, r7, #16
 8023bfa:	61fb      	str	r3, [r7, #28]
 8023bfc:	e090      	b.n	8023d20 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8023bfe:	687b      	ldr	r3, [r7, #4]
 8023c00:	681a      	ldr	r2, [r3, #0]
 8023c02:	68fb      	ldr	r3, [r7, #12]
 8023c04:	3304      	adds	r3, #4
 8023c06:	681b      	ldr	r3, [r3, #0]
 8023c08:	405a      	eors	r2, r3
 8023c0a:	68fb      	ldr	r3, [r7, #12]
 8023c0c:	3308      	adds	r3, #8
 8023c0e:	681b      	ldr	r3, [r3, #0]
 8023c10:	4013      	ands	r3, r2
 8023c12:	2b00      	cmp	r3, #0
 8023c14:	d012      	beq.n	8023c3c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8023c16:	687b      	ldr	r3, [r7, #4]
 8023c18:	681b      	ldr	r3, [r3, #0]
 8023c1a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8023c1c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8023c20:	4293      	cmp	r3, r2
 8023c22:	d00b      	beq.n	8023c3c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8023c24:	68fb      	ldr	r3, [r7, #12]
 8023c26:	330c      	adds	r3, #12
 8023c28:	681b      	ldr	r3, [r3, #0]
 8023c2a:	2b00      	cmp	r3, #0
 8023c2c:	d003      	beq.n	8023c36 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8023c2e:	68fb      	ldr	r3, [r7, #12]
 8023c30:	330c      	adds	r3, #12
 8023c32:	61bb      	str	r3, [r7, #24]
 8023c34:	e002      	b.n	8023c3c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8023c36:	f06f 0303 	mvn.w	r3, #3
 8023c3a:	e07d      	b.n	8023d38 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8023c3c:	4b46      	ldr	r3, [pc, #280]	; (8023d58 <etharp_output+0x1fc>)
 8023c3e:	781b      	ldrb	r3, [r3, #0]
 8023c40:	4619      	mov	r1, r3
 8023c42:	4a46      	ldr	r2, [pc, #280]	; (8023d5c <etharp_output+0x200>)
 8023c44:	460b      	mov	r3, r1
 8023c46:	005b      	lsls	r3, r3, #1
 8023c48:	440b      	add	r3, r1
 8023c4a:	00db      	lsls	r3, r3, #3
 8023c4c:	4413      	add	r3, r2
 8023c4e:	3314      	adds	r3, #20
 8023c50:	781b      	ldrb	r3, [r3, #0]
 8023c52:	2b01      	cmp	r3, #1
 8023c54:	d925      	bls.n	8023ca2 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8023c56:	4b40      	ldr	r3, [pc, #256]	; (8023d58 <etharp_output+0x1fc>)
 8023c58:	781b      	ldrb	r3, [r3, #0]
 8023c5a:	4619      	mov	r1, r3
 8023c5c:	4a3f      	ldr	r2, [pc, #252]	; (8023d5c <etharp_output+0x200>)
 8023c5e:	460b      	mov	r3, r1
 8023c60:	005b      	lsls	r3, r3, #1
 8023c62:	440b      	add	r3, r1
 8023c64:	00db      	lsls	r3, r3, #3
 8023c66:	4413      	add	r3, r2
 8023c68:	3308      	adds	r3, #8
 8023c6a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8023c6c:	68fa      	ldr	r2, [r7, #12]
 8023c6e:	429a      	cmp	r2, r3
 8023c70:	d117      	bne.n	8023ca2 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8023c72:	69bb      	ldr	r3, [r7, #24]
 8023c74:	681a      	ldr	r2, [r3, #0]
 8023c76:	4b38      	ldr	r3, [pc, #224]	; (8023d58 <etharp_output+0x1fc>)
 8023c78:	781b      	ldrb	r3, [r3, #0]
 8023c7a:	4618      	mov	r0, r3
 8023c7c:	4937      	ldr	r1, [pc, #220]	; (8023d5c <etharp_output+0x200>)
 8023c7e:	4603      	mov	r3, r0
 8023c80:	005b      	lsls	r3, r3, #1
 8023c82:	4403      	add	r3, r0
 8023c84:	00db      	lsls	r3, r3, #3
 8023c86:	440b      	add	r3, r1
 8023c88:	3304      	adds	r3, #4
 8023c8a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8023c8c:	429a      	cmp	r2, r3
 8023c8e:	d108      	bne.n	8023ca2 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8023c90:	4b31      	ldr	r3, [pc, #196]	; (8023d58 <etharp_output+0x1fc>)
 8023c92:	781b      	ldrb	r3, [r3, #0]
 8023c94:	461a      	mov	r2, r3
 8023c96:	68b9      	ldr	r1, [r7, #8]
 8023c98:	68f8      	ldr	r0, [r7, #12]
 8023c9a:	f7ff fec5 	bl	8023a28 <etharp_output_to_arp_index>
 8023c9e:	4603      	mov	r3, r0
 8023ca0:	e04a      	b.n	8023d38 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8023ca2:	2300      	movs	r3, #0
 8023ca4:	75fb      	strb	r3, [r7, #23]
 8023ca6:	e031      	b.n	8023d0c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8023ca8:	7dfa      	ldrb	r2, [r7, #23]
 8023caa:	492c      	ldr	r1, [pc, #176]	; (8023d5c <etharp_output+0x200>)
 8023cac:	4613      	mov	r3, r2
 8023cae:	005b      	lsls	r3, r3, #1
 8023cb0:	4413      	add	r3, r2
 8023cb2:	00db      	lsls	r3, r3, #3
 8023cb4:	440b      	add	r3, r1
 8023cb6:	3314      	adds	r3, #20
 8023cb8:	781b      	ldrb	r3, [r3, #0]
 8023cba:	2b01      	cmp	r3, #1
 8023cbc:	d923      	bls.n	8023d06 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8023cbe:	7dfa      	ldrb	r2, [r7, #23]
 8023cc0:	4926      	ldr	r1, [pc, #152]	; (8023d5c <etharp_output+0x200>)
 8023cc2:	4613      	mov	r3, r2
 8023cc4:	005b      	lsls	r3, r3, #1
 8023cc6:	4413      	add	r3, r2
 8023cc8:	00db      	lsls	r3, r3, #3
 8023cca:	440b      	add	r3, r1
 8023ccc:	3308      	adds	r3, #8
 8023cce:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8023cd0:	68fa      	ldr	r2, [r7, #12]
 8023cd2:	429a      	cmp	r2, r3
 8023cd4:	d117      	bne.n	8023d06 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8023cd6:	69bb      	ldr	r3, [r7, #24]
 8023cd8:	6819      	ldr	r1, [r3, #0]
 8023cda:	7dfa      	ldrb	r2, [r7, #23]
 8023cdc:	481f      	ldr	r0, [pc, #124]	; (8023d5c <etharp_output+0x200>)
 8023cde:	4613      	mov	r3, r2
 8023ce0:	005b      	lsls	r3, r3, #1
 8023ce2:	4413      	add	r3, r2
 8023ce4:	00db      	lsls	r3, r3, #3
 8023ce6:	4403      	add	r3, r0
 8023ce8:	3304      	adds	r3, #4
 8023cea:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8023cec:	4299      	cmp	r1, r3
 8023cee:	d10a      	bne.n	8023d06 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8023cf0:	4a19      	ldr	r2, [pc, #100]	; (8023d58 <etharp_output+0x1fc>)
 8023cf2:	7dfb      	ldrb	r3, [r7, #23]
 8023cf4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8023cf6:	7dfb      	ldrb	r3, [r7, #23]
 8023cf8:	461a      	mov	r2, r3
 8023cfa:	68b9      	ldr	r1, [r7, #8]
 8023cfc:	68f8      	ldr	r0, [r7, #12]
 8023cfe:	f7ff fe93 	bl	8023a28 <etharp_output_to_arp_index>
 8023d02:	4603      	mov	r3, r0
 8023d04:	e018      	b.n	8023d38 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8023d06:	7dfb      	ldrb	r3, [r7, #23]
 8023d08:	3301      	adds	r3, #1
 8023d0a:	75fb      	strb	r3, [r7, #23]
 8023d0c:	7dfb      	ldrb	r3, [r7, #23]
 8023d0e:	2b09      	cmp	r3, #9
 8023d10:	d9ca      	bls.n	8023ca8 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8023d12:	68ba      	ldr	r2, [r7, #8]
 8023d14:	69b9      	ldr	r1, [r7, #24]
 8023d16:	68f8      	ldr	r0, [r7, #12]
 8023d18:	f000 f822 	bl	8023d60 <etharp_query>
 8023d1c:	4603      	mov	r3, r0
 8023d1e:	e00b      	b.n	8023d38 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8023d20:	68fb      	ldr	r3, [r7, #12]
 8023d22:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8023d26:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8023d2a:	9300      	str	r3, [sp, #0]
 8023d2c:	69fb      	ldr	r3, [r7, #28]
 8023d2e:	68b9      	ldr	r1, [r7, #8]
 8023d30:	68f8      	ldr	r0, [r7, #12]
 8023d32:	f001 fd63 	bl	80257fc <ethernet_output>
 8023d36:	4603      	mov	r3, r0
}
 8023d38:	4618      	mov	r0, r3
 8023d3a:	3720      	adds	r7, #32
 8023d3c:	46bd      	mov	sp, r7
 8023d3e:	bd80      	pop	{r7, pc}
 8023d40:	0802efb0 	.word	0x0802efb0
 8023d44:	0802f100 	.word	0x0802f100
 8023d48:	0802f028 	.word	0x0802f028
 8023d4c:	0802f150 	.word	0x0802f150
 8023d50:	0802f0f0 	.word	0x0802f0f0
 8023d54:	08030e2c 	.word	0x08030e2c
 8023d58:	20013d68 	.word	0x20013d68
 8023d5c:	20013c78 	.word	0x20013c78

08023d60 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8023d60:	b580      	push	{r7, lr}
 8023d62:	b08c      	sub	sp, #48	; 0x30
 8023d64:	af02      	add	r7, sp, #8
 8023d66:	60f8      	str	r0, [r7, #12]
 8023d68:	60b9      	str	r1, [r7, #8]
 8023d6a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8023d6c:	68fb      	ldr	r3, [r7, #12]
 8023d6e:	332a      	adds	r3, #42	; 0x2a
 8023d70:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8023d72:	23ff      	movs	r3, #255	; 0xff
 8023d74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8023d78:	2300      	movs	r3, #0
 8023d7a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8023d7c:	68bb      	ldr	r3, [r7, #8]
 8023d7e:	681b      	ldr	r3, [r3, #0]
 8023d80:	68f9      	ldr	r1, [r7, #12]
 8023d82:	4618      	mov	r0, r3
 8023d84:	f000 fe2c 	bl	80249e0 <ip4_addr_isbroadcast_u32>
 8023d88:	4603      	mov	r3, r0
 8023d8a:	2b00      	cmp	r3, #0
 8023d8c:	d10c      	bne.n	8023da8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8023d8e:	68bb      	ldr	r3, [r7, #8]
 8023d90:	681b      	ldr	r3, [r3, #0]
 8023d92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8023d96:	2be0      	cmp	r3, #224	; 0xe0
 8023d98:	d006      	beq.n	8023da8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8023d9a:	68bb      	ldr	r3, [r7, #8]
 8023d9c:	2b00      	cmp	r3, #0
 8023d9e:	d003      	beq.n	8023da8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8023da0:	68bb      	ldr	r3, [r7, #8]
 8023da2:	681b      	ldr	r3, [r3, #0]
 8023da4:	2b00      	cmp	r3, #0
 8023da6:	d102      	bne.n	8023dae <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8023da8:	f06f 030f 	mvn.w	r3, #15
 8023dac:	e101      	b.n	8023fb2 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8023dae:	68fa      	ldr	r2, [r7, #12]
 8023db0:	2101      	movs	r1, #1
 8023db2:	68b8      	ldr	r0, [r7, #8]
 8023db4:	f7ff fb5c 	bl	8023470 <etharp_find_entry>
 8023db8:	4603      	mov	r3, r0
 8023dba:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8023dbc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8023dc0:	2b00      	cmp	r3, #0
 8023dc2:	da02      	bge.n	8023dca <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8023dc4:	8a7b      	ldrh	r3, [r7, #18]
 8023dc6:	b25b      	sxtb	r3, r3
 8023dc8:	e0f3      	b.n	8023fb2 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8023dca:	8a7b      	ldrh	r3, [r7, #18]
 8023dcc:	2b7e      	cmp	r3, #126	; 0x7e
 8023dce:	d906      	bls.n	8023dde <etharp_query+0x7e>
 8023dd0:	4b7a      	ldr	r3, [pc, #488]	; (8023fbc <etharp_query+0x25c>)
 8023dd2:	f240 32c1 	movw	r2, #961	; 0x3c1
 8023dd6:	497a      	ldr	r1, [pc, #488]	; (8023fc0 <etharp_query+0x260>)
 8023dd8:	487a      	ldr	r0, [pc, #488]	; (8023fc4 <etharp_query+0x264>)
 8023dda:	f002 fd77 	bl	80268cc <iprintf>
  i = (netif_addr_idx_t)i_err;
 8023dde:	8a7b      	ldrh	r3, [r7, #18]
 8023de0:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8023de2:	7c7a      	ldrb	r2, [r7, #17]
 8023de4:	4978      	ldr	r1, [pc, #480]	; (8023fc8 <etharp_query+0x268>)
 8023de6:	4613      	mov	r3, r2
 8023de8:	005b      	lsls	r3, r3, #1
 8023dea:	4413      	add	r3, r2
 8023dec:	00db      	lsls	r3, r3, #3
 8023dee:	440b      	add	r3, r1
 8023df0:	3314      	adds	r3, #20
 8023df2:	781b      	ldrb	r3, [r3, #0]
 8023df4:	2b00      	cmp	r3, #0
 8023df6:	d115      	bne.n	8023e24 <etharp_query+0xc4>
    is_new_entry = 1;
 8023df8:	2301      	movs	r3, #1
 8023dfa:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8023dfc:	7c7a      	ldrb	r2, [r7, #17]
 8023dfe:	4972      	ldr	r1, [pc, #456]	; (8023fc8 <etharp_query+0x268>)
 8023e00:	4613      	mov	r3, r2
 8023e02:	005b      	lsls	r3, r3, #1
 8023e04:	4413      	add	r3, r2
 8023e06:	00db      	lsls	r3, r3, #3
 8023e08:	440b      	add	r3, r1
 8023e0a:	3314      	adds	r3, #20
 8023e0c:	2201      	movs	r2, #1
 8023e0e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8023e10:	7c7a      	ldrb	r2, [r7, #17]
 8023e12:	496d      	ldr	r1, [pc, #436]	; (8023fc8 <etharp_query+0x268>)
 8023e14:	4613      	mov	r3, r2
 8023e16:	005b      	lsls	r3, r3, #1
 8023e18:	4413      	add	r3, r2
 8023e1a:	00db      	lsls	r3, r3, #3
 8023e1c:	440b      	add	r3, r1
 8023e1e:	3308      	adds	r3, #8
 8023e20:	68fa      	ldr	r2, [r7, #12]
 8023e22:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8023e24:	7c7a      	ldrb	r2, [r7, #17]
 8023e26:	4968      	ldr	r1, [pc, #416]	; (8023fc8 <etharp_query+0x268>)
 8023e28:	4613      	mov	r3, r2
 8023e2a:	005b      	lsls	r3, r3, #1
 8023e2c:	4413      	add	r3, r2
 8023e2e:	00db      	lsls	r3, r3, #3
 8023e30:	440b      	add	r3, r1
 8023e32:	3314      	adds	r3, #20
 8023e34:	781b      	ldrb	r3, [r3, #0]
 8023e36:	2b01      	cmp	r3, #1
 8023e38:	d011      	beq.n	8023e5e <etharp_query+0xfe>
 8023e3a:	7c7a      	ldrb	r2, [r7, #17]
 8023e3c:	4962      	ldr	r1, [pc, #392]	; (8023fc8 <etharp_query+0x268>)
 8023e3e:	4613      	mov	r3, r2
 8023e40:	005b      	lsls	r3, r3, #1
 8023e42:	4413      	add	r3, r2
 8023e44:	00db      	lsls	r3, r3, #3
 8023e46:	440b      	add	r3, r1
 8023e48:	3314      	adds	r3, #20
 8023e4a:	781b      	ldrb	r3, [r3, #0]
 8023e4c:	2b01      	cmp	r3, #1
 8023e4e:	d806      	bhi.n	8023e5e <etharp_query+0xfe>
 8023e50:	4b5a      	ldr	r3, [pc, #360]	; (8023fbc <etharp_query+0x25c>)
 8023e52:	f240 32cd 	movw	r2, #973	; 0x3cd
 8023e56:	495d      	ldr	r1, [pc, #372]	; (8023fcc <etharp_query+0x26c>)
 8023e58:	485a      	ldr	r0, [pc, #360]	; (8023fc4 <etharp_query+0x264>)
 8023e5a:	f002 fd37 	bl	80268cc <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8023e5e:	6a3b      	ldr	r3, [r7, #32]
 8023e60:	2b00      	cmp	r3, #0
 8023e62:	d102      	bne.n	8023e6a <etharp_query+0x10a>
 8023e64:	687b      	ldr	r3, [r7, #4]
 8023e66:	2b00      	cmp	r3, #0
 8023e68:	d10c      	bne.n	8023e84 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8023e6a:	68b9      	ldr	r1, [r7, #8]
 8023e6c:	68f8      	ldr	r0, [r7, #12]
 8023e6e:	f000 f963 	bl	8024138 <etharp_request>
 8023e72:	4603      	mov	r3, r0
 8023e74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8023e78:	687b      	ldr	r3, [r7, #4]
 8023e7a:	2b00      	cmp	r3, #0
 8023e7c:	d102      	bne.n	8023e84 <etharp_query+0x124>
      return result;
 8023e7e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8023e82:	e096      	b.n	8023fb2 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8023e84:	687b      	ldr	r3, [r7, #4]
 8023e86:	2b00      	cmp	r3, #0
 8023e88:	d106      	bne.n	8023e98 <etharp_query+0x138>
 8023e8a:	4b4c      	ldr	r3, [pc, #304]	; (8023fbc <etharp_query+0x25c>)
 8023e8c:	f240 32e1 	movw	r2, #993	; 0x3e1
 8023e90:	494f      	ldr	r1, [pc, #316]	; (8023fd0 <etharp_query+0x270>)
 8023e92:	484c      	ldr	r0, [pc, #304]	; (8023fc4 <etharp_query+0x264>)
 8023e94:	f002 fd1a 	bl	80268cc <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8023e98:	7c7a      	ldrb	r2, [r7, #17]
 8023e9a:	494b      	ldr	r1, [pc, #300]	; (8023fc8 <etharp_query+0x268>)
 8023e9c:	4613      	mov	r3, r2
 8023e9e:	005b      	lsls	r3, r3, #1
 8023ea0:	4413      	add	r3, r2
 8023ea2:	00db      	lsls	r3, r3, #3
 8023ea4:	440b      	add	r3, r1
 8023ea6:	3314      	adds	r3, #20
 8023ea8:	781b      	ldrb	r3, [r3, #0]
 8023eaa:	2b01      	cmp	r3, #1
 8023eac:	d917      	bls.n	8023ede <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8023eae:	4a49      	ldr	r2, [pc, #292]	; (8023fd4 <etharp_query+0x274>)
 8023eb0:	7c7b      	ldrb	r3, [r7, #17]
 8023eb2:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8023eb4:	7c7a      	ldrb	r2, [r7, #17]
 8023eb6:	4613      	mov	r3, r2
 8023eb8:	005b      	lsls	r3, r3, #1
 8023eba:	4413      	add	r3, r2
 8023ebc:	00db      	lsls	r3, r3, #3
 8023ebe:	3308      	adds	r3, #8
 8023ec0:	4a41      	ldr	r2, [pc, #260]	; (8023fc8 <etharp_query+0x268>)
 8023ec2:	4413      	add	r3, r2
 8023ec4:	3304      	adds	r3, #4
 8023ec6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8023eca:	9200      	str	r2, [sp, #0]
 8023ecc:	697a      	ldr	r2, [r7, #20]
 8023ece:	6879      	ldr	r1, [r7, #4]
 8023ed0:	68f8      	ldr	r0, [r7, #12]
 8023ed2:	f001 fc93 	bl	80257fc <ethernet_output>
 8023ed6:	4603      	mov	r3, r0
 8023ed8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8023edc:	e067      	b.n	8023fae <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8023ede:	7c7a      	ldrb	r2, [r7, #17]
 8023ee0:	4939      	ldr	r1, [pc, #228]	; (8023fc8 <etharp_query+0x268>)
 8023ee2:	4613      	mov	r3, r2
 8023ee4:	005b      	lsls	r3, r3, #1
 8023ee6:	4413      	add	r3, r2
 8023ee8:	00db      	lsls	r3, r3, #3
 8023eea:	440b      	add	r3, r1
 8023eec:	3314      	adds	r3, #20
 8023eee:	781b      	ldrb	r3, [r3, #0]
 8023ef0:	2b01      	cmp	r3, #1
 8023ef2:	d15c      	bne.n	8023fae <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8023ef4:	2300      	movs	r3, #0
 8023ef6:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8023ef8:	687b      	ldr	r3, [r7, #4]
 8023efa:	61fb      	str	r3, [r7, #28]
    while (p) {
 8023efc:	e01c      	b.n	8023f38 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8023efe:	69fb      	ldr	r3, [r7, #28]
 8023f00:	895a      	ldrh	r2, [r3, #10]
 8023f02:	69fb      	ldr	r3, [r7, #28]
 8023f04:	891b      	ldrh	r3, [r3, #8]
 8023f06:	429a      	cmp	r2, r3
 8023f08:	d10a      	bne.n	8023f20 <etharp_query+0x1c0>
 8023f0a:	69fb      	ldr	r3, [r7, #28]
 8023f0c:	681b      	ldr	r3, [r3, #0]
 8023f0e:	2b00      	cmp	r3, #0
 8023f10:	d006      	beq.n	8023f20 <etharp_query+0x1c0>
 8023f12:	4b2a      	ldr	r3, [pc, #168]	; (8023fbc <etharp_query+0x25c>)
 8023f14:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8023f18:	492f      	ldr	r1, [pc, #188]	; (8023fd8 <etharp_query+0x278>)
 8023f1a:	482a      	ldr	r0, [pc, #168]	; (8023fc4 <etharp_query+0x264>)
 8023f1c:	f002 fcd6 	bl	80268cc <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8023f20:	69fb      	ldr	r3, [r7, #28]
 8023f22:	7b1b      	ldrb	r3, [r3, #12]
 8023f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8023f28:	2b00      	cmp	r3, #0
 8023f2a:	d002      	beq.n	8023f32 <etharp_query+0x1d2>
        copy_needed = 1;
 8023f2c:	2301      	movs	r3, #1
 8023f2e:	61bb      	str	r3, [r7, #24]
        break;
 8023f30:	e005      	b.n	8023f3e <etharp_query+0x1de>
      }
      p = p->next;
 8023f32:	69fb      	ldr	r3, [r7, #28]
 8023f34:	681b      	ldr	r3, [r3, #0]
 8023f36:	61fb      	str	r3, [r7, #28]
    while (p) {
 8023f38:	69fb      	ldr	r3, [r7, #28]
 8023f3a:	2b00      	cmp	r3, #0
 8023f3c:	d1df      	bne.n	8023efe <etharp_query+0x19e>
    }
    if (copy_needed) {
 8023f3e:	69bb      	ldr	r3, [r7, #24]
 8023f40:	2b00      	cmp	r3, #0
 8023f42:	d007      	beq.n	8023f54 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8023f44:	687a      	ldr	r2, [r7, #4]
 8023f46:	f44f 7120 	mov.w	r1, #640	; 0x280
 8023f4a:	200e      	movs	r0, #14
 8023f4c:	f7f6 fad6 	bl	801a4fc <pbuf_clone>
 8023f50:	61f8      	str	r0, [r7, #28]
 8023f52:	e004      	b.n	8023f5e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8023f54:	687b      	ldr	r3, [r7, #4]
 8023f56:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8023f58:	69f8      	ldr	r0, [r7, #28]
 8023f5a:	f7f6 f8d3 	bl	801a104 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8023f5e:	69fb      	ldr	r3, [r7, #28]
 8023f60:	2b00      	cmp	r3, #0
 8023f62:	d021      	beq.n	8023fa8 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8023f64:	7c7a      	ldrb	r2, [r7, #17]
 8023f66:	4918      	ldr	r1, [pc, #96]	; (8023fc8 <etharp_query+0x268>)
 8023f68:	4613      	mov	r3, r2
 8023f6a:	005b      	lsls	r3, r3, #1
 8023f6c:	4413      	add	r3, r2
 8023f6e:	00db      	lsls	r3, r3, #3
 8023f70:	440b      	add	r3, r1
 8023f72:	681b      	ldr	r3, [r3, #0]
 8023f74:	2b00      	cmp	r3, #0
 8023f76:	d00a      	beq.n	8023f8e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8023f78:	7c7a      	ldrb	r2, [r7, #17]
 8023f7a:	4913      	ldr	r1, [pc, #76]	; (8023fc8 <etharp_query+0x268>)
 8023f7c:	4613      	mov	r3, r2
 8023f7e:	005b      	lsls	r3, r3, #1
 8023f80:	4413      	add	r3, r2
 8023f82:	00db      	lsls	r3, r3, #3
 8023f84:	440b      	add	r3, r1
 8023f86:	681b      	ldr	r3, [r3, #0]
 8023f88:	4618      	mov	r0, r3
 8023f8a:	f7f6 f815 	bl	8019fb8 <pbuf_free>
      }
      arp_table[i].q = p;
 8023f8e:	7c7a      	ldrb	r2, [r7, #17]
 8023f90:	490d      	ldr	r1, [pc, #52]	; (8023fc8 <etharp_query+0x268>)
 8023f92:	4613      	mov	r3, r2
 8023f94:	005b      	lsls	r3, r3, #1
 8023f96:	4413      	add	r3, r2
 8023f98:	00db      	lsls	r3, r3, #3
 8023f9a:	440b      	add	r3, r1
 8023f9c:	69fa      	ldr	r2, [r7, #28]
 8023f9e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8023fa0:	2300      	movs	r3, #0
 8023fa2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8023fa6:	e002      	b.n	8023fae <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8023fa8:	23ff      	movs	r3, #255	; 0xff
 8023faa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8023fae:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8023fb2:	4618      	mov	r0, r3
 8023fb4:	3728      	adds	r7, #40	; 0x28
 8023fb6:	46bd      	mov	sp, r7
 8023fb8:	bd80      	pop	{r7, pc}
 8023fba:	bf00      	nop
 8023fbc:	0802efb0 	.word	0x0802efb0
 8023fc0:	0802f15c 	.word	0x0802f15c
 8023fc4:	0802f028 	.word	0x0802f028
 8023fc8:	20013c78 	.word	0x20013c78
 8023fcc:	0802f16c 	.word	0x0802f16c
 8023fd0:	0802f150 	.word	0x0802f150
 8023fd4:	20013d68 	.word	0x20013d68
 8023fd8:	0802f194 	.word	0x0802f194

08023fdc <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8023fdc:	b580      	push	{r7, lr}
 8023fde:	b08a      	sub	sp, #40	; 0x28
 8023fe0:	af02      	add	r7, sp, #8
 8023fe2:	60f8      	str	r0, [r7, #12]
 8023fe4:	60b9      	str	r1, [r7, #8]
 8023fe6:	607a      	str	r2, [r7, #4]
 8023fe8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8023fea:	2300      	movs	r3, #0
 8023fec:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8023fee:	68fb      	ldr	r3, [r7, #12]
 8023ff0:	2b00      	cmp	r3, #0
 8023ff2:	d106      	bne.n	8024002 <etharp_raw+0x26>
 8023ff4:	4b3a      	ldr	r3, [pc, #232]	; (80240e0 <etharp_raw+0x104>)
 8023ff6:	f240 4257 	movw	r2, #1111	; 0x457
 8023ffa:	493a      	ldr	r1, [pc, #232]	; (80240e4 <etharp_raw+0x108>)
 8023ffc:	483a      	ldr	r0, [pc, #232]	; (80240e8 <etharp_raw+0x10c>)
 8023ffe:	f002 fc65 	bl	80268cc <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8024002:	f44f 7220 	mov.w	r2, #640	; 0x280
 8024006:	211c      	movs	r1, #28
 8024008:	200e      	movs	r0, #14
 802400a:	f7f5 fcf1 	bl	80199f0 <pbuf_alloc>
 802400e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8024010:	69bb      	ldr	r3, [r7, #24]
 8024012:	2b00      	cmp	r3, #0
 8024014:	d102      	bne.n	802401c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8024016:	f04f 33ff 	mov.w	r3, #4294967295
 802401a:	e05d      	b.n	80240d8 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 802401c:	69bb      	ldr	r3, [r7, #24]
 802401e:	895b      	ldrh	r3, [r3, #10]
 8024020:	2b1b      	cmp	r3, #27
 8024022:	d806      	bhi.n	8024032 <etharp_raw+0x56>
 8024024:	4b2e      	ldr	r3, [pc, #184]	; (80240e0 <etharp_raw+0x104>)
 8024026:	f240 4262 	movw	r2, #1122	; 0x462
 802402a:	4930      	ldr	r1, [pc, #192]	; (80240ec <etharp_raw+0x110>)
 802402c:	482e      	ldr	r0, [pc, #184]	; (80240e8 <etharp_raw+0x10c>)
 802402e:	f002 fc4d 	bl	80268cc <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8024032:	69bb      	ldr	r3, [r7, #24]
 8024034:	685b      	ldr	r3, [r3, #4]
 8024036:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8024038:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 802403a:	4618      	mov	r0, r3
 802403c:	f7f4 fba6 	bl	801878c <lwip_htons>
 8024040:	4603      	mov	r3, r0
 8024042:	461a      	mov	r2, r3
 8024044:	697b      	ldr	r3, [r7, #20]
 8024046:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8024048:	68fb      	ldr	r3, [r7, #12]
 802404a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 802404e:	2b06      	cmp	r3, #6
 8024050:	d006      	beq.n	8024060 <etharp_raw+0x84>
 8024052:	4b23      	ldr	r3, [pc, #140]	; (80240e0 <etharp_raw+0x104>)
 8024054:	f240 4269 	movw	r2, #1129	; 0x469
 8024058:	4925      	ldr	r1, [pc, #148]	; (80240f0 <etharp_raw+0x114>)
 802405a:	4823      	ldr	r0, [pc, #140]	; (80240e8 <etharp_raw+0x10c>)
 802405c:	f002 fc36 	bl	80268cc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8024060:	697b      	ldr	r3, [r7, #20]
 8024062:	3308      	adds	r3, #8
 8024064:	2206      	movs	r2, #6
 8024066:	6839      	ldr	r1, [r7, #0]
 8024068:	4618      	mov	r0, r3
 802406a:	f001 fd5b 	bl	8025b24 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 802406e:	697b      	ldr	r3, [r7, #20]
 8024070:	3312      	adds	r3, #18
 8024072:	2206      	movs	r2, #6
 8024074:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8024076:	4618      	mov	r0, r3
 8024078:	f001 fd54 	bl	8025b24 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 802407c:	697b      	ldr	r3, [r7, #20]
 802407e:	330e      	adds	r3, #14
 8024080:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8024082:	6812      	ldr	r2, [r2, #0]
 8024084:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8024086:	697b      	ldr	r3, [r7, #20]
 8024088:	3318      	adds	r3, #24
 802408a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802408c:	6812      	ldr	r2, [r2, #0]
 802408e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8024090:	697b      	ldr	r3, [r7, #20]
 8024092:	2200      	movs	r2, #0
 8024094:	701a      	strb	r2, [r3, #0]
 8024096:	2200      	movs	r2, #0
 8024098:	f042 0201 	orr.w	r2, r2, #1
 802409c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 802409e:	697b      	ldr	r3, [r7, #20]
 80240a0:	2200      	movs	r2, #0
 80240a2:	f042 0208 	orr.w	r2, r2, #8
 80240a6:	709a      	strb	r2, [r3, #2]
 80240a8:	2200      	movs	r2, #0
 80240aa:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80240ac:	697b      	ldr	r3, [r7, #20]
 80240ae:	2206      	movs	r2, #6
 80240b0:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80240b2:	697b      	ldr	r3, [r7, #20]
 80240b4:	2204      	movs	r2, #4
 80240b6:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80240b8:	f640 0306 	movw	r3, #2054	; 0x806
 80240bc:	9300      	str	r3, [sp, #0]
 80240be:	687b      	ldr	r3, [r7, #4]
 80240c0:	68ba      	ldr	r2, [r7, #8]
 80240c2:	69b9      	ldr	r1, [r7, #24]
 80240c4:	68f8      	ldr	r0, [r7, #12]
 80240c6:	f001 fb99 	bl	80257fc <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80240ca:	69b8      	ldr	r0, [r7, #24]
 80240cc:	f7f5 ff74 	bl	8019fb8 <pbuf_free>
  p = NULL;
 80240d0:	2300      	movs	r3, #0
 80240d2:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80240d4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80240d8:	4618      	mov	r0, r3
 80240da:	3720      	adds	r7, #32
 80240dc:	46bd      	mov	sp, r7
 80240de:	bd80      	pop	{r7, pc}
 80240e0:	0802efb0 	.word	0x0802efb0
 80240e4:	0802f100 	.word	0x0802f100
 80240e8:	0802f028 	.word	0x0802f028
 80240ec:	0802f1b0 	.word	0x0802f1b0
 80240f0:	0802f1e4 	.word	0x0802f1e4

080240f4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80240f4:	b580      	push	{r7, lr}
 80240f6:	b088      	sub	sp, #32
 80240f8:	af04      	add	r7, sp, #16
 80240fa:	60f8      	str	r0, [r7, #12]
 80240fc:	60b9      	str	r1, [r7, #8]
 80240fe:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8024100:	68fb      	ldr	r3, [r7, #12]
 8024102:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8024106:	68fb      	ldr	r3, [r7, #12]
 8024108:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 802410c:	68fb      	ldr	r3, [r7, #12]
 802410e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8024110:	2201      	movs	r2, #1
 8024112:	9203      	str	r2, [sp, #12]
 8024114:	68ba      	ldr	r2, [r7, #8]
 8024116:	9202      	str	r2, [sp, #8]
 8024118:	4a06      	ldr	r2, [pc, #24]	; (8024134 <etharp_request_dst+0x40>)
 802411a:	9201      	str	r2, [sp, #4]
 802411c:	9300      	str	r3, [sp, #0]
 802411e:	4603      	mov	r3, r0
 8024120:	687a      	ldr	r2, [r7, #4]
 8024122:	68f8      	ldr	r0, [r7, #12]
 8024124:	f7ff ff5a 	bl	8023fdc <etharp_raw>
 8024128:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 802412a:	4618      	mov	r0, r3
 802412c:	3710      	adds	r7, #16
 802412e:	46bd      	mov	sp, r7
 8024130:	bd80      	pop	{r7, pc}
 8024132:	bf00      	nop
 8024134:	08030e34 	.word	0x08030e34

08024138 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8024138:	b580      	push	{r7, lr}
 802413a:	b082      	sub	sp, #8
 802413c:	af00      	add	r7, sp, #0
 802413e:	6078      	str	r0, [r7, #4]
 8024140:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8024142:	4a05      	ldr	r2, [pc, #20]	; (8024158 <etharp_request+0x20>)
 8024144:	6839      	ldr	r1, [r7, #0]
 8024146:	6878      	ldr	r0, [r7, #4]
 8024148:	f7ff ffd4 	bl	80240f4 <etharp_request_dst>
 802414c:	4603      	mov	r3, r0
}
 802414e:	4618      	mov	r0, r3
 8024150:	3708      	adds	r7, #8
 8024152:	46bd      	mov	sp, r7
 8024154:	bd80      	pop	{r7, pc}
 8024156:	bf00      	nop
 8024158:	08030e2c 	.word	0x08030e2c

0802415c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 802415c:	b580      	push	{r7, lr}
 802415e:	b08e      	sub	sp, #56	; 0x38
 8024160:	af04      	add	r7, sp, #16
 8024162:	6078      	str	r0, [r7, #4]
 8024164:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8024166:	4b79      	ldr	r3, [pc, #484]	; (802434c <icmp_input+0x1f0>)
 8024168:	689b      	ldr	r3, [r3, #8]
 802416a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 802416c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802416e:	781b      	ldrb	r3, [r3, #0]
 8024170:	f003 030f 	and.w	r3, r3, #15
 8024174:	b2db      	uxtb	r3, r3
 8024176:	009b      	lsls	r3, r3, #2
 8024178:	b2db      	uxtb	r3, r3
 802417a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 802417c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 802417e:	2b13      	cmp	r3, #19
 8024180:	f240 80cd 	bls.w	802431e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8024184:	687b      	ldr	r3, [r7, #4]
 8024186:	895b      	ldrh	r3, [r3, #10]
 8024188:	2b03      	cmp	r3, #3
 802418a:	f240 80ca 	bls.w	8024322 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 802418e:	687b      	ldr	r3, [r7, #4]
 8024190:	685b      	ldr	r3, [r3, #4]
 8024192:	781b      	ldrb	r3, [r3, #0]
 8024194:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8024198:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 802419c:	2b00      	cmp	r3, #0
 802419e:	f000 80b7 	beq.w	8024310 <icmp_input+0x1b4>
 80241a2:	2b08      	cmp	r3, #8
 80241a4:	f040 80b7 	bne.w	8024316 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80241a8:	4b69      	ldr	r3, [pc, #420]	; (8024350 <icmp_input+0x1f4>)
 80241aa:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80241ac:	4b67      	ldr	r3, [pc, #412]	; (802434c <icmp_input+0x1f0>)
 80241ae:	695b      	ldr	r3, [r3, #20]
 80241b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80241b4:	2be0      	cmp	r3, #224	; 0xe0
 80241b6:	f000 80bb 	beq.w	8024330 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80241ba:	4b64      	ldr	r3, [pc, #400]	; (802434c <icmp_input+0x1f0>)
 80241bc:	695b      	ldr	r3, [r3, #20]
 80241be:	4a63      	ldr	r2, [pc, #396]	; (802434c <icmp_input+0x1f0>)
 80241c0:	6812      	ldr	r2, [r2, #0]
 80241c2:	4611      	mov	r1, r2
 80241c4:	4618      	mov	r0, r3
 80241c6:	f000 fc0b 	bl	80249e0 <ip4_addr_isbroadcast_u32>
 80241ca:	4603      	mov	r3, r0
 80241cc:	2b00      	cmp	r3, #0
 80241ce:	f040 80b1 	bne.w	8024334 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80241d2:	687b      	ldr	r3, [r7, #4]
 80241d4:	891b      	ldrh	r3, [r3, #8]
 80241d6:	2b07      	cmp	r3, #7
 80241d8:	f240 80a5 	bls.w	8024326 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80241dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80241de:	330e      	adds	r3, #14
 80241e0:	4619      	mov	r1, r3
 80241e2:	6878      	ldr	r0, [r7, #4]
 80241e4:	f7f5 fe52 	bl	8019e8c <pbuf_add_header>
 80241e8:	4603      	mov	r3, r0
 80241ea:	2b00      	cmp	r3, #0
 80241ec:	d04b      	beq.n	8024286 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80241ee:	687b      	ldr	r3, [r7, #4]
 80241f0:	891a      	ldrh	r2, [r3, #8]
 80241f2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80241f4:	4413      	add	r3, r2
 80241f6:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80241f8:	687b      	ldr	r3, [r7, #4]
 80241fa:	891b      	ldrh	r3, [r3, #8]
 80241fc:	8b7a      	ldrh	r2, [r7, #26]
 80241fe:	429a      	cmp	r2, r3
 8024200:	f0c0 809a 	bcc.w	8024338 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8024204:	8b7b      	ldrh	r3, [r7, #26]
 8024206:	f44f 7220 	mov.w	r2, #640	; 0x280
 802420a:	4619      	mov	r1, r3
 802420c:	200e      	movs	r0, #14
 802420e:	f7f5 fbef 	bl	80199f0 <pbuf_alloc>
 8024212:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8024214:	697b      	ldr	r3, [r7, #20]
 8024216:	2b00      	cmp	r3, #0
 8024218:	f000 8090 	beq.w	802433c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 802421c:	697b      	ldr	r3, [r7, #20]
 802421e:	895b      	ldrh	r3, [r3, #10]
 8024220:	461a      	mov	r2, r3
 8024222:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8024224:	3308      	adds	r3, #8
 8024226:	429a      	cmp	r2, r3
 8024228:	d203      	bcs.n	8024232 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 802422a:	6978      	ldr	r0, [r7, #20]
 802422c:	f7f5 fec4 	bl	8019fb8 <pbuf_free>
          goto icmperr;
 8024230:	e085      	b.n	802433e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8024232:	697b      	ldr	r3, [r7, #20]
 8024234:	685b      	ldr	r3, [r3, #4]
 8024236:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8024238:	6a79      	ldr	r1, [r7, #36]	; 0x24
 802423a:	4618      	mov	r0, r3
 802423c:	f001 fc72 	bl	8025b24 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8024240:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8024242:	4619      	mov	r1, r3
 8024244:	6978      	ldr	r0, [r7, #20]
 8024246:	f7f5 fe31 	bl	8019eac <pbuf_remove_header>
 802424a:	4603      	mov	r3, r0
 802424c:	2b00      	cmp	r3, #0
 802424e:	d009      	beq.n	8024264 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8024250:	4b40      	ldr	r3, [pc, #256]	; (8024354 <icmp_input+0x1f8>)
 8024252:	22b6      	movs	r2, #182	; 0xb6
 8024254:	4940      	ldr	r1, [pc, #256]	; (8024358 <icmp_input+0x1fc>)
 8024256:	4841      	ldr	r0, [pc, #260]	; (802435c <icmp_input+0x200>)
 8024258:	f002 fb38 	bl	80268cc <iprintf>
          pbuf_free(r);
 802425c:	6978      	ldr	r0, [r7, #20]
 802425e:	f7f5 feab 	bl	8019fb8 <pbuf_free>
          goto icmperr;
 8024262:	e06c      	b.n	802433e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8024264:	6879      	ldr	r1, [r7, #4]
 8024266:	6978      	ldr	r0, [r7, #20]
 8024268:	f7f5 ffda 	bl	801a220 <pbuf_copy>
 802426c:	4603      	mov	r3, r0
 802426e:	2b00      	cmp	r3, #0
 8024270:	d003      	beq.n	802427a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8024272:	6978      	ldr	r0, [r7, #20]
 8024274:	f7f5 fea0 	bl	8019fb8 <pbuf_free>
          goto icmperr;
 8024278:	e061      	b.n	802433e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 802427a:	6878      	ldr	r0, [r7, #4]
 802427c:	f7f5 fe9c 	bl	8019fb8 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8024280:	697b      	ldr	r3, [r7, #20]
 8024282:	607b      	str	r3, [r7, #4]
 8024284:	e00f      	b.n	80242a6 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8024286:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8024288:	330e      	adds	r3, #14
 802428a:	4619      	mov	r1, r3
 802428c:	6878      	ldr	r0, [r7, #4]
 802428e:	f7f5 fe0d 	bl	8019eac <pbuf_remove_header>
 8024292:	4603      	mov	r3, r0
 8024294:	2b00      	cmp	r3, #0
 8024296:	d006      	beq.n	80242a6 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8024298:	4b2e      	ldr	r3, [pc, #184]	; (8024354 <icmp_input+0x1f8>)
 802429a:	22c7      	movs	r2, #199	; 0xc7
 802429c:	4930      	ldr	r1, [pc, #192]	; (8024360 <icmp_input+0x204>)
 802429e:	482f      	ldr	r0, [pc, #188]	; (802435c <icmp_input+0x200>)
 80242a0:	f002 fb14 	bl	80268cc <iprintf>
          goto icmperr;
 80242a4:	e04b      	b.n	802433e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80242a6:	687b      	ldr	r3, [r7, #4]
 80242a8:	685b      	ldr	r3, [r3, #4]
 80242aa:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80242ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80242ae:	4619      	mov	r1, r3
 80242b0:	6878      	ldr	r0, [r7, #4]
 80242b2:	f7f5 fdeb 	bl	8019e8c <pbuf_add_header>
 80242b6:	4603      	mov	r3, r0
 80242b8:	2b00      	cmp	r3, #0
 80242ba:	d12b      	bne.n	8024314 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80242bc:	687b      	ldr	r3, [r7, #4]
 80242be:	685b      	ldr	r3, [r3, #4]
 80242c0:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80242c2:	69fb      	ldr	r3, [r7, #28]
 80242c4:	681a      	ldr	r2, [r3, #0]
 80242c6:	68fb      	ldr	r3, [r7, #12]
 80242c8:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80242ca:	4b20      	ldr	r3, [pc, #128]	; (802434c <icmp_input+0x1f0>)
 80242cc:	691a      	ldr	r2, [r3, #16]
 80242ce:	68fb      	ldr	r3, [r7, #12]
 80242d0:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80242d2:	693b      	ldr	r3, [r7, #16]
 80242d4:	2200      	movs	r2, #0
 80242d6:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 80242d8:	693b      	ldr	r3, [r7, #16]
 80242da:	2200      	movs	r2, #0
 80242dc:	709a      	strb	r2, [r3, #2]
 80242de:	2200      	movs	r2, #0
 80242e0:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80242e2:	68fb      	ldr	r3, [r7, #12]
 80242e4:	22ff      	movs	r2, #255	; 0xff
 80242e6:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80242e8:	68fb      	ldr	r3, [r7, #12]
 80242ea:	2200      	movs	r2, #0
 80242ec:	729a      	strb	r2, [r3, #10]
 80242ee:	2200      	movs	r2, #0
 80242f0:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80242f2:	683b      	ldr	r3, [r7, #0]
 80242f4:	9302      	str	r3, [sp, #8]
 80242f6:	2301      	movs	r3, #1
 80242f8:	9301      	str	r3, [sp, #4]
 80242fa:	2300      	movs	r3, #0
 80242fc:	9300      	str	r3, [sp, #0]
 80242fe:	23ff      	movs	r3, #255	; 0xff
 8024300:	2200      	movs	r2, #0
 8024302:	69f9      	ldr	r1, [r7, #28]
 8024304:	6878      	ldr	r0, [r7, #4]
 8024306:	f000 fa93 	bl	8024830 <ip4_output_if>
 802430a:	4603      	mov	r3, r0
 802430c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 802430e:	e001      	b.n	8024314 <icmp_input+0x1b8>
      break;
 8024310:	bf00      	nop
 8024312:	e000      	b.n	8024316 <icmp_input+0x1ba>
      break;
 8024314:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8024316:	6878      	ldr	r0, [r7, #4]
 8024318:	f7f5 fe4e 	bl	8019fb8 <pbuf_free>
  return;
 802431c:	e013      	b.n	8024346 <icmp_input+0x1ea>
    goto lenerr;
 802431e:	bf00      	nop
 8024320:	e002      	b.n	8024328 <icmp_input+0x1cc>
    goto lenerr;
 8024322:	bf00      	nop
 8024324:	e000      	b.n	8024328 <icmp_input+0x1cc>
        goto lenerr;
 8024326:	bf00      	nop
lenerr:
  pbuf_free(p);
 8024328:	6878      	ldr	r0, [r7, #4]
 802432a:	f7f5 fe45 	bl	8019fb8 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 802432e:	e00a      	b.n	8024346 <icmp_input+0x1ea>
        goto icmperr;
 8024330:	bf00      	nop
 8024332:	e004      	b.n	802433e <icmp_input+0x1e2>
        goto icmperr;
 8024334:	bf00      	nop
 8024336:	e002      	b.n	802433e <icmp_input+0x1e2>
          goto icmperr;
 8024338:	bf00      	nop
 802433a:	e000      	b.n	802433e <icmp_input+0x1e2>
          goto icmperr;
 802433c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 802433e:	6878      	ldr	r0, [r7, #4]
 8024340:	f7f5 fe3a 	bl	8019fb8 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8024344:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8024346:	3728      	adds	r7, #40	; 0x28
 8024348:	46bd      	mov	sp, r7
 802434a:	bd80      	pop	{r7, pc}
 802434c:	20017b68 	.word	0x20017b68
 8024350:	20017b7c 	.word	0x20017b7c
 8024354:	0802f228 	.word	0x0802f228
 8024358:	0802f260 	.word	0x0802f260
 802435c:	0802f298 	.word	0x0802f298
 8024360:	0802f2c0 	.word	0x0802f2c0

08024364 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8024364:	b580      	push	{r7, lr}
 8024366:	b082      	sub	sp, #8
 8024368:	af00      	add	r7, sp, #0
 802436a:	6078      	str	r0, [r7, #4]
 802436c:	460b      	mov	r3, r1
 802436e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8024370:	78fb      	ldrb	r3, [r7, #3]
 8024372:	461a      	mov	r2, r3
 8024374:	2103      	movs	r1, #3
 8024376:	6878      	ldr	r0, [r7, #4]
 8024378:	f000 f814 	bl	80243a4 <icmp_send_response>
}
 802437c:	bf00      	nop
 802437e:	3708      	adds	r7, #8
 8024380:	46bd      	mov	sp, r7
 8024382:	bd80      	pop	{r7, pc}

08024384 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8024384:	b580      	push	{r7, lr}
 8024386:	b082      	sub	sp, #8
 8024388:	af00      	add	r7, sp, #0
 802438a:	6078      	str	r0, [r7, #4]
 802438c:	460b      	mov	r3, r1
 802438e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8024390:	78fb      	ldrb	r3, [r7, #3]
 8024392:	461a      	mov	r2, r3
 8024394:	210b      	movs	r1, #11
 8024396:	6878      	ldr	r0, [r7, #4]
 8024398:	f000 f804 	bl	80243a4 <icmp_send_response>
}
 802439c:	bf00      	nop
 802439e:	3708      	adds	r7, #8
 80243a0:	46bd      	mov	sp, r7
 80243a2:	bd80      	pop	{r7, pc}

080243a4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80243a4:	b580      	push	{r7, lr}
 80243a6:	b08c      	sub	sp, #48	; 0x30
 80243a8:	af04      	add	r7, sp, #16
 80243aa:	6078      	str	r0, [r7, #4]
 80243ac:	460b      	mov	r3, r1
 80243ae:	70fb      	strb	r3, [r7, #3]
 80243b0:	4613      	mov	r3, r2
 80243b2:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80243b4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80243b8:	2124      	movs	r1, #36	; 0x24
 80243ba:	2022      	movs	r0, #34	; 0x22
 80243bc:	f7f5 fb18 	bl	80199f0 <pbuf_alloc>
 80243c0:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80243c2:	69fb      	ldr	r3, [r7, #28]
 80243c4:	2b00      	cmp	r3, #0
 80243c6:	d04c      	beq.n	8024462 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80243c8:	69fb      	ldr	r3, [r7, #28]
 80243ca:	895b      	ldrh	r3, [r3, #10]
 80243cc:	2b23      	cmp	r3, #35	; 0x23
 80243ce:	d806      	bhi.n	80243de <icmp_send_response+0x3a>
 80243d0:	4b26      	ldr	r3, [pc, #152]	; (802446c <icmp_send_response+0xc8>)
 80243d2:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80243d6:	4926      	ldr	r1, [pc, #152]	; (8024470 <icmp_send_response+0xcc>)
 80243d8:	4826      	ldr	r0, [pc, #152]	; (8024474 <icmp_send_response+0xd0>)
 80243da:	f002 fa77 	bl	80268cc <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80243de:	687b      	ldr	r3, [r7, #4]
 80243e0:	685b      	ldr	r3, [r3, #4]
 80243e2:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80243e4:	69fb      	ldr	r3, [r7, #28]
 80243e6:	685b      	ldr	r3, [r3, #4]
 80243e8:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80243ea:	697b      	ldr	r3, [r7, #20]
 80243ec:	78fa      	ldrb	r2, [r7, #3]
 80243ee:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80243f0:	697b      	ldr	r3, [r7, #20]
 80243f2:	78ba      	ldrb	r2, [r7, #2]
 80243f4:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80243f6:	697b      	ldr	r3, [r7, #20]
 80243f8:	2200      	movs	r2, #0
 80243fa:	711a      	strb	r2, [r3, #4]
 80243fc:	2200      	movs	r2, #0
 80243fe:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8024400:	697b      	ldr	r3, [r7, #20]
 8024402:	2200      	movs	r2, #0
 8024404:	719a      	strb	r2, [r3, #6]
 8024406:	2200      	movs	r2, #0
 8024408:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 802440a:	69fb      	ldr	r3, [r7, #28]
 802440c:	685b      	ldr	r3, [r3, #4]
 802440e:	f103 0008 	add.w	r0, r3, #8
 8024412:	687b      	ldr	r3, [r7, #4]
 8024414:	685b      	ldr	r3, [r3, #4]
 8024416:	221c      	movs	r2, #28
 8024418:	4619      	mov	r1, r3
 802441a:	f001 fb83 	bl	8025b24 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 802441e:	69bb      	ldr	r3, [r7, #24]
 8024420:	68db      	ldr	r3, [r3, #12]
 8024422:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8024424:	f107 030c 	add.w	r3, r7, #12
 8024428:	4618      	mov	r0, r3
 802442a:	f000 f825 	bl	8024478 <ip4_route>
 802442e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8024430:	693b      	ldr	r3, [r7, #16]
 8024432:	2b00      	cmp	r3, #0
 8024434:	d011      	beq.n	802445a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8024436:	697b      	ldr	r3, [r7, #20]
 8024438:	2200      	movs	r2, #0
 802443a:	709a      	strb	r2, [r3, #2]
 802443c:	2200      	movs	r2, #0
 802443e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8024440:	f107 020c 	add.w	r2, r7, #12
 8024444:	693b      	ldr	r3, [r7, #16]
 8024446:	9302      	str	r3, [sp, #8]
 8024448:	2301      	movs	r3, #1
 802444a:	9301      	str	r3, [sp, #4]
 802444c:	2300      	movs	r3, #0
 802444e:	9300      	str	r3, [sp, #0]
 8024450:	23ff      	movs	r3, #255	; 0xff
 8024452:	2100      	movs	r1, #0
 8024454:	69f8      	ldr	r0, [r7, #28]
 8024456:	f000 f9eb 	bl	8024830 <ip4_output_if>
  }
  pbuf_free(q);
 802445a:	69f8      	ldr	r0, [r7, #28]
 802445c:	f7f5 fdac 	bl	8019fb8 <pbuf_free>
 8024460:	e000      	b.n	8024464 <icmp_send_response+0xc0>
    return;
 8024462:	bf00      	nop
}
 8024464:	3720      	adds	r7, #32
 8024466:	46bd      	mov	sp, r7
 8024468:	bd80      	pop	{r7, pc}
 802446a:	bf00      	nop
 802446c:	0802f228 	.word	0x0802f228
 8024470:	0802f2f4 	.word	0x0802f2f4
 8024474:	0802f298 	.word	0x0802f298

08024478 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8024478:	b480      	push	{r7}
 802447a:	b085      	sub	sp, #20
 802447c:	af00      	add	r7, sp, #0
 802447e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8024480:	4b33      	ldr	r3, [pc, #204]	; (8024550 <ip4_route+0xd8>)
 8024482:	681b      	ldr	r3, [r3, #0]
 8024484:	60fb      	str	r3, [r7, #12]
 8024486:	e036      	b.n	80244f6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8024488:	68fb      	ldr	r3, [r7, #12]
 802448a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 802448e:	f003 0301 	and.w	r3, r3, #1
 8024492:	b2db      	uxtb	r3, r3
 8024494:	2b00      	cmp	r3, #0
 8024496:	d02b      	beq.n	80244f0 <ip4_route+0x78>
 8024498:	68fb      	ldr	r3, [r7, #12]
 802449a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 802449e:	089b      	lsrs	r3, r3, #2
 80244a0:	f003 0301 	and.w	r3, r3, #1
 80244a4:	b2db      	uxtb	r3, r3
 80244a6:	2b00      	cmp	r3, #0
 80244a8:	d022      	beq.n	80244f0 <ip4_route+0x78>
 80244aa:	68fb      	ldr	r3, [r7, #12]
 80244ac:	3304      	adds	r3, #4
 80244ae:	681b      	ldr	r3, [r3, #0]
 80244b0:	2b00      	cmp	r3, #0
 80244b2:	d01d      	beq.n	80244f0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80244b4:	687b      	ldr	r3, [r7, #4]
 80244b6:	681a      	ldr	r2, [r3, #0]
 80244b8:	68fb      	ldr	r3, [r7, #12]
 80244ba:	3304      	adds	r3, #4
 80244bc:	681b      	ldr	r3, [r3, #0]
 80244be:	405a      	eors	r2, r3
 80244c0:	68fb      	ldr	r3, [r7, #12]
 80244c2:	3308      	adds	r3, #8
 80244c4:	681b      	ldr	r3, [r3, #0]
 80244c6:	4013      	ands	r3, r2
 80244c8:	2b00      	cmp	r3, #0
 80244ca:	d101      	bne.n	80244d0 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80244cc:	68fb      	ldr	r3, [r7, #12]
 80244ce:	e038      	b.n	8024542 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80244d0:	68fb      	ldr	r3, [r7, #12]
 80244d2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80244d6:	f003 0302 	and.w	r3, r3, #2
 80244da:	2b00      	cmp	r3, #0
 80244dc:	d108      	bne.n	80244f0 <ip4_route+0x78>
 80244de:	687b      	ldr	r3, [r7, #4]
 80244e0:	681a      	ldr	r2, [r3, #0]
 80244e2:	68fb      	ldr	r3, [r7, #12]
 80244e4:	330c      	adds	r3, #12
 80244e6:	681b      	ldr	r3, [r3, #0]
 80244e8:	429a      	cmp	r2, r3
 80244ea:	d101      	bne.n	80244f0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80244ec:	68fb      	ldr	r3, [r7, #12]
 80244ee:	e028      	b.n	8024542 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80244f0:	68fb      	ldr	r3, [r7, #12]
 80244f2:	681b      	ldr	r3, [r3, #0]
 80244f4:	60fb      	str	r3, [r7, #12]
 80244f6:	68fb      	ldr	r3, [r7, #12]
 80244f8:	2b00      	cmp	r3, #0
 80244fa:	d1c5      	bne.n	8024488 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80244fc:	4b15      	ldr	r3, [pc, #84]	; (8024554 <ip4_route+0xdc>)
 80244fe:	681b      	ldr	r3, [r3, #0]
 8024500:	2b00      	cmp	r3, #0
 8024502:	d01a      	beq.n	802453a <ip4_route+0xc2>
 8024504:	4b13      	ldr	r3, [pc, #76]	; (8024554 <ip4_route+0xdc>)
 8024506:	681b      	ldr	r3, [r3, #0]
 8024508:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 802450c:	f003 0301 	and.w	r3, r3, #1
 8024510:	2b00      	cmp	r3, #0
 8024512:	d012      	beq.n	802453a <ip4_route+0xc2>
 8024514:	4b0f      	ldr	r3, [pc, #60]	; (8024554 <ip4_route+0xdc>)
 8024516:	681b      	ldr	r3, [r3, #0]
 8024518:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 802451c:	f003 0304 	and.w	r3, r3, #4
 8024520:	2b00      	cmp	r3, #0
 8024522:	d00a      	beq.n	802453a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8024524:	4b0b      	ldr	r3, [pc, #44]	; (8024554 <ip4_route+0xdc>)
 8024526:	681b      	ldr	r3, [r3, #0]
 8024528:	3304      	adds	r3, #4
 802452a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 802452c:	2b00      	cmp	r3, #0
 802452e:	d004      	beq.n	802453a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8024530:	687b      	ldr	r3, [r7, #4]
 8024532:	681b      	ldr	r3, [r3, #0]
 8024534:	b2db      	uxtb	r3, r3
 8024536:	2b7f      	cmp	r3, #127	; 0x7f
 8024538:	d101      	bne.n	802453e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 802453a:	2300      	movs	r3, #0
 802453c:	e001      	b.n	8024542 <ip4_route+0xca>
  }

  return netif_default;
 802453e:	4b05      	ldr	r3, [pc, #20]	; (8024554 <ip4_route+0xdc>)
 8024540:	681b      	ldr	r3, [r3, #0]
}
 8024542:	4618      	mov	r0, r3
 8024544:	3714      	adds	r7, #20
 8024546:	46bd      	mov	sp, r7
 8024548:	f85d 7b04 	ldr.w	r7, [sp], #4
 802454c:	4770      	bx	lr
 802454e:	bf00      	nop
 8024550:	2001c0ec 	.word	0x2001c0ec
 8024554:	2001c0f0 	.word	0x2001c0f0

08024558 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8024558:	b580      	push	{r7, lr}
 802455a:	b082      	sub	sp, #8
 802455c:	af00      	add	r7, sp, #0
 802455e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8024560:	687b      	ldr	r3, [r7, #4]
 8024562:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8024566:	f003 0301 	and.w	r3, r3, #1
 802456a:	b2db      	uxtb	r3, r3
 802456c:	2b00      	cmp	r3, #0
 802456e:	d016      	beq.n	802459e <ip4_input_accept+0x46>
 8024570:	687b      	ldr	r3, [r7, #4]
 8024572:	3304      	adds	r3, #4
 8024574:	681b      	ldr	r3, [r3, #0]
 8024576:	2b00      	cmp	r3, #0
 8024578:	d011      	beq.n	802459e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 802457a:	4b0b      	ldr	r3, [pc, #44]	; (80245a8 <ip4_input_accept+0x50>)
 802457c:	695a      	ldr	r2, [r3, #20]
 802457e:	687b      	ldr	r3, [r7, #4]
 8024580:	3304      	adds	r3, #4
 8024582:	681b      	ldr	r3, [r3, #0]
 8024584:	429a      	cmp	r2, r3
 8024586:	d008      	beq.n	802459a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8024588:	4b07      	ldr	r3, [pc, #28]	; (80245a8 <ip4_input_accept+0x50>)
 802458a:	695b      	ldr	r3, [r3, #20]
 802458c:	6879      	ldr	r1, [r7, #4]
 802458e:	4618      	mov	r0, r3
 8024590:	f000 fa26 	bl	80249e0 <ip4_addr_isbroadcast_u32>
 8024594:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8024596:	2b00      	cmp	r3, #0
 8024598:	d001      	beq.n	802459e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 802459a:	2301      	movs	r3, #1
 802459c:	e000      	b.n	80245a0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 802459e:	2300      	movs	r3, #0
}
 80245a0:	4618      	mov	r0, r3
 80245a2:	3708      	adds	r7, #8
 80245a4:	46bd      	mov	sp, r7
 80245a6:	bd80      	pop	{r7, pc}
 80245a8:	20017b68 	.word	0x20017b68

080245ac <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80245ac:	b580      	push	{r7, lr}
 80245ae:	b088      	sub	sp, #32
 80245b0:	af00      	add	r7, sp, #0
 80245b2:	6078      	str	r0, [r7, #4]
 80245b4:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 80245b6:	2301      	movs	r3, #1
 80245b8:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80245ba:	687b      	ldr	r3, [r7, #4]
 80245bc:	685b      	ldr	r3, [r3, #4]
 80245be:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 80245c0:	69fb      	ldr	r3, [r7, #28]
 80245c2:	781b      	ldrb	r3, [r3, #0]
 80245c4:	091b      	lsrs	r3, r3, #4
 80245c6:	b2db      	uxtb	r3, r3
 80245c8:	2b04      	cmp	r3, #4
 80245ca:	d004      	beq.n	80245d6 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80245cc:	6878      	ldr	r0, [r7, #4]
 80245ce:	f7f5 fcf3 	bl	8019fb8 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80245d2:	2300      	movs	r3, #0
 80245d4:	e123      	b.n	802481e <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80245d6:	69fb      	ldr	r3, [r7, #28]
 80245d8:	781b      	ldrb	r3, [r3, #0]
 80245da:	f003 030f 	and.w	r3, r3, #15
 80245de:	b2db      	uxtb	r3, r3
 80245e0:	009b      	lsls	r3, r3, #2
 80245e2:	b2db      	uxtb	r3, r3
 80245e4:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80245e6:	69fb      	ldr	r3, [r7, #28]
 80245e8:	885b      	ldrh	r3, [r3, #2]
 80245ea:	b29b      	uxth	r3, r3
 80245ec:	4618      	mov	r0, r3
 80245ee:	f7f4 f8cd 	bl	801878c <lwip_htons>
 80245f2:	4603      	mov	r3, r0
 80245f4:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80245f6:	687b      	ldr	r3, [r7, #4]
 80245f8:	891b      	ldrh	r3, [r3, #8]
 80245fa:	8a3a      	ldrh	r2, [r7, #16]
 80245fc:	429a      	cmp	r2, r3
 80245fe:	d204      	bcs.n	802460a <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8024600:	8a3b      	ldrh	r3, [r7, #16]
 8024602:	4619      	mov	r1, r3
 8024604:	6878      	ldr	r0, [r7, #4]
 8024606:	f7f5 fb51 	bl	8019cac <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 802460a:	687b      	ldr	r3, [r7, #4]
 802460c:	895b      	ldrh	r3, [r3, #10]
 802460e:	8a7a      	ldrh	r2, [r7, #18]
 8024610:	429a      	cmp	r2, r3
 8024612:	d807      	bhi.n	8024624 <ip4_input+0x78>
 8024614:	687b      	ldr	r3, [r7, #4]
 8024616:	891b      	ldrh	r3, [r3, #8]
 8024618:	8a3a      	ldrh	r2, [r7, #16]
 802461a:	429a      	cmp	r2, r3
 802461c:	d802      	bhi.n	8024624 <ip4_input+0x78>
 802461e:	8a7b      	ldrh	r3, [r7, #18]
 8024620:	2b13      	cmp	r3, #19
 8024622:	d804      	bhi.n	802462e <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8024624:	6878      	ldr	r0, [r7, #4]
 8024626:	f7f5 fcc7 	bl	8019fb8 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 802462a:	2300      	movs	r3, #0
 802462c:	e0f7      	b.n	802481e <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 802462e:	69fb      	ldr	r3, [r7, #28]
 8024630:	691b      	ldr	r3, [r3, #16]
 8024632:	4a7d      	ldr	r2, [pc, #500]	; (8024828 <ip4_input+0x27c>)
 8024634:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8024636:	69fb      	ldr	r3, [r7, #28]
 8024638:	68db      	ldr	r3, [r3, #12]
 802463a:	4a7b      	ldr	r2, [pc, #492]	; (8024828 <ip4_input+0x27c>)
 802463c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 802463e:	4b7a      	ldr	r3, [pc, #488]	; (8024828 <ip4_input+0x27c>)
 8024640:	695b      	ldr	r3, [r3, #20]
 8024642:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8024646:	2be0      	cmp	r3, #224	; 0xe0
 8024648:	d112      	bne.n	8024670 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 802464a:	683b      	ldr	r3, [r7, #0]
 802464c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8024650:	f003 0301 	and.w	r3, r3, #1
 8024654:	b2db      	uxtb	r3, r3
 8024656:	2b00      	cmp	r3, #0
 8024658:	d007      	beq.n	802466a <ip4_input+0xbe>
 802465a:	683b      	ldr	r3, [r7, #0]
 802465c:	3304      	adds	r3, #4
 802465e:	681b      	ldr	r3, [r3, #0]
 8024660:	2b00      	cmp	r3, #0
 8024662:	d002      	beq.n	802466a <ip4_input+0xbe>
      netif = inp;
 8024664:	683b      	ldr	r3, [r7, #0]
 8024666:	61bb      	str	r3, [r7, #24]
 8024668:	e02a      	b.n	80246c0 <ip4_input+0x114>
    } else {
      netif = NULL;
 802466a:	2300      	movs	r3, #0
 802466c:	61bb      	str	r3, [r7, #24]
 802466e:	e027      	b.n	80246c0 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8024670:	6838      	ldr	r0, [r7, #0]
 8024672:	f7ff ff71 	bl	8024558 <ip4_input_accept>
 8024676:	4603      	mov	r3, r0
 8024678:	2b00      	cmp	r3, #0
 802467a:	d002      	beq.n	8024682 <ip4_input+0xd6>
      netif = inp;
 802467c:	683b      	ldr	r3, [r7, #0]
 802467e:	61bb      	str	r3, [r7, #24]
 8024680:	e01e      	b.n	80246c0 <ip4_input+0x114>
    } else {
      netif = NULL;
 8024682:	2300      	movs	r3, #0
 8024684:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8024686:	4b68      	ldr	r3, [pc, #416]	; (8024828 <ip4_input+0x27c>)
 8024688:	695b      	ldr	r3, [r3, #20]
 802468a:	b2db      	uxtb	r3, r3
 802468c:	2b7f      	cmp	r3, #127	; 0x7f
 802468e:	d017      	beq.n	80246c0 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8024690:	4b66      	ldr	r3, [pc, #408]	; (802482c <ip4_input+0x280>)
 8024692:	681b      	ldr	r3, [r3, #0]
 8024694:	61bb      	str	r3, [r7, #24]
 8024696:	e00e      	b.n	80246b6 <ip4_input+0x10a>
          if (netif == inp) {
 8024698:	69ba      	ldr	r2, [r7, #24]
 802469a:	683b      	ldr	r3, [r7, #0]
 802469c:	429a      	cmp	r2, r3
 802469e:	d006      	beq.n	80246ae <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80246a0:	69b8      	ldr	r0, [r7, #24]
 80246a2:	f7ff ff59 	bl	8024558 <ip4_input_accept>
 80246a6:	4603      	mov	r3, r0
 80246a8:	2b00      	cmp	r3, #0
 80246aa:	d108      	bne.n	80246be <ip4_input+0x112>
 80246ac:	e000      	b.n	80246b0 <ip4_input+0x104>
            continue;
 80246ae:	bf00      	nop
        NETIF_FOREACH(netif) {
 80246b0:	69bb      	ldr	r3, [r7, #24]
 80246b2:	681b      	ldr	r3, [r3, #0]
 80246b4:	61bb      	str	r3, [r7, #24]
 80246b6:	69bb      	ldr	r3, [r7, #24]
 80246b8:	2b00      	cmp	r3, #0
 80246ba:	d1ed      	bne.n	8024698 <ip4_input+0xec>
 80246bc:	e000      	b.n	80246c0 <ip4_input+0x114>
            break;
 80246be:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 80246c0:	69bb      	ldr	r3, [r7, #24]
 80246c2:	2b00      	cmp	r3, #0
 80246c4:	d111      	bne.n	80246ea <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 80246c6:	69fb      	ldr	r3, [r7, #28]
 80246c8:	7a5b      	ldrb	r3, [r3, #9]
 80246ca:	2b11      	cmp	r3, #17
 80246cc:	d10d      	bne.n	80246ea <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 80246ce:	8a7b      	ldrh	r3, [r7, #18]
 80246d0:	69fa      	ldr	r2, [r7, #28]
 80246d2:	4413      	add	r3, r2
 80246d4:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 80246d6:	68fb      	ldr	r3, [r7, #12]
 80246d8:	885b      	ldrh	r3, [r3, #2]
 80246da:	b29b      	uxth	r3, r3
 80246dc:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 80246e0:	d103      	bne.n	80246ea <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 80246e2:	683b      	ldr	r3, [r7, #0]
 80246e4:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 80246e6:	2300      	movs	r3, #0
 80246e8:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 80246ea:	697b      	ldr	r3, [r7, #20]
 80246ec:	2b00      	cmp	r3, #0
 80246ee:	d017      	beq.n	8024720 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 80246f0:	4b4d      	ldr	r3, [pc, #308]	; (8024828 <ip4_input+0x27c>)
 80246f2:	691b      	ldr	r3, [r3, #16]
 80246f4:	2b00      	cmp	r3, #0
 80246f6:	d013      	beq.n	8024720 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80246f8:	4b4b      	ldr	r3, [pc, #300]	; (8024828 <ip4_input+0x27c>)
 80246fa:	691b      	ldr	r3, [r3, #16]
 80246fc:	6839      	ldr	r1, [r7, #0]
 80246fe:	4618      	mov	r0, r3
 8024700:	f000 f96e 	bl	80249e0 <ip4_addr_isbroadcast_u32>
 8024704:	4603      	mov	r3, r0
 8024706:	2b00      	cmp	r3, #0
 8024708:	d105      	bne.n	8024716 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 802470a:	4b47      	ldr	r3, [pc, #284]	; (8024828 <ip4_input+0x27c>)
 802470c:	691b      	ldr	r3, [r3, #16]
 802470e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8024712:	2be0      	cmp	r3, #224	; 0xe0
 8024714:	d104      	bne.n	8024720 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8024716:	6878      	ldr	r0, [r7, #4]
 8024718:	f7f5 fc4e 	bl	8019fb8 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 802471c:	2300      	movs	r3, #0
 802471e:	e07e      	b.n	802481e <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8024720:	69bb      	ldr	r3, [r7, #24]
 8024722:	2b00      	cmp	r3, #0
 8024724:	d104      	bne.n	8024730 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8024726:	6878      	ldr	r0, [r7, #4]
 8024728:	f7f5 fc46 	bl	8019fb8 <pbuf_free>
    return ERR_OK;
 802472c:	2300      	movs	r3, #0
 802472e:	e076      	b.n	802481e <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8024730:	69fb      	ldr	r3, [r7, #28]
 8024732:	88db      	ldrh	r3, [r3, #6]
 8024734:	b29b      	uxth	r3, r3
 8024736:	461a      	mov	r2, r3
 8024738:	f64f 733f 	movw	r3, #65343	; 0xff3f
 802473c:	4013      	ands	r3, r2
 802473e:	2b00      	cmp	r3, #0
 8024740:	d00b      	beq.n	802475a <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8024742:	6878      	ldr	r0, [r7, #4]
 8024744:	f000 fc92 	bl	802506c <ip4_reass>
 8024748:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 802474a:	687b      	ldr	r3, [r7, #4]
 802474c:	2b00      	cmp	r3, #0
 802474e:	d101      	bne.n	8024754 <ip4_input+0x1a8>
      return ERR_OK;
 8024750:	2300      	movs	r3, #0
 8024752:	e064      	b.n	802481e <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8024754:	687b      	ldr	r3, [r7, #4]
 8024756:	685b      	ldr	r3, [r3, #4]
 8024758:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 802475a:	4a33      	ldr	r2, [pc, #204]	; (8024828 <ip4_input+0x27c>)
 802475c:	69bb      	ldr	r3, [r7, #24]
 802475e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8024760:	4a31      	ldr	r2, [pc, #196]	; (8024828 <ip4_input+0x27c>)
 8024762:	683b      	ldr	r3, [r7, #0]
 8024764:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8024766:	4a30      	ldr	r2, [pc, #192]	; (8024828 <ip4_input+0x27c>)
 8024768:	69fb      	ldr	r3, [r7, #28]
 802476a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 802476c:	69fb      	ldr	r3, [r7, #28]
 802476e:	781b      	ldrb	r3, [r3, #0]
 8024770:	f003 030f 	and.w	r3, r3, #15
 8024774:	b2db      	uxtb	r3, r3
 8024776:	009b      	lsls	r3, r3, #2
 8024778:	b2db      	uxtb	r3, r3
 802477a:	b29a      	uxth	r2, r3
 802477c:	4b2a      	ldr	r3, [pc, #168]	; (8024828 <ip4_input+0x27c>)
 802477e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8024780:	8a7b      	ldrh	r3, [r7, #18]
 8024782:	4619      	mov	r1, r3
 8024784:	6878      	ldr	r0, [r7, #4]
 8024786:	f7f5 fb91 	bl	8019eac <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 802478a:	69fb      	ldr	r3, [r7, #28]
 802478c:	7a5b      	ldrb	r3, [r3, #9]
 802478e:	2b11      	cmp	r3, #17
 8024790:	d006      	beq.n	80247a0 <ip4_input+0x1f4>
 8024792:	2b11      	cmp	r3, #17
 8024794:	dc13      	bgt.n	80247be <ip4_input+0x212>
 8024796:	2b01      	cmp	r3, #1
 8024798:	d00c      	beq.n	80247b4 <ip4_input+0x208>
 802479a:	2b06      	cmp	r3, #6
 802479c:	d005      	beq.n	80247aa <ip4_input+0x1fe>
 802479e:	e00e      	b.n	80247be <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80247a0:	6839      	ldr	r1, [r7, #0]
 80247a2:	6878      	ldr	r0, [r7, #4]
 80247a4:	f7fc faea 	bl	8020d7c <udp_input>
        break;
 80247a8:	e026      	b.n	80247f8 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80247aa:	6839      	ldr	r1, [r7, #0]
 80247ac:	6878      	ldr	r0, [r7, #4]
 80247ae:	f7f7 fe69 	bl	801c484 <tcp_input>
        break;
 80247b2:	e021      	b.n	80247f8 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80247b4:	6839      	ldr	r1, [r7, #0]
 80247b6:	6878      	ldr	r0, [r7, #4]
 80247b8:	f7ff fcd0 	bl	802415c <icmp_input>
        break;
 80247bc:	e01c      	b.n	80247f8 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80247be:	4b1a      	ldr	r3, [pc, #104]	; (8024828 <ip4_input+0x27c>)
 80247c0:	695b      	ldr	r3, [r3, #20]
 80247c2:	69b9      	ldr	r1, [r7, #24]
 80247c4:	4618      	mov	r0, r3
 80247c6:	f000 f90b 	bl	80249e0 <ip4_addr_isbroadcast_u32>
 80247ca:	4603      	mov	r3, r0
 80247cc:	2b00      	cmp	r3, #0
 80247ce:	d10f      	bne.n	80247f0 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80247d0:	4b15      	ldr	r3, [pc, #84]	; (8024828 <ip4_input+0x27c>)
 80247d2:	695b      	ldr	r3, [r3, #20]
 80247d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80247d8:	2be0      	cmp	r3, #224	; 0xe0
 80247da:	d009      	beq.n	80247f0 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80247dc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80247e0:	4619      	mov	r1, r3
 80247e2:	6878      	ldr	r0, [r7, #4]
 80247e4:	f7f5 fbd5 	bl	8019f92 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80247e8:	2102      	movs	r1, #2
 80247ea:	6878      	ldr	r0, [r7, #4]
 80247ec:	f7ff fdba 	bl	8024364 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80247f0:	6878      	ldr	r0, [r7, #4]
 80247f2:	f7f5 fbe1 	bl	8019fb8 <pbuf_free>
        break;
 80247f6:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80247f8:	4b0b      	ldr	r3, [pc, #44]	; (8024828 <ip4_input+0x27c>)
 80247fa:	2200      	movs	r2, #0
 80247fc:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80247fe:	4b0a      	ldr	r3, [pc, #40]	; (8024828 <ip4_input+0x27c>)
 8024800:	2200      	movs	r2, #0
 8024802:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8024804:	4b08      	ldr	r3, [pc, #32]	; (8024828 <ip4_input+0x27c>)
 8024806:	2200      	movs	r2, #0
 8024808:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 802480a:	4b07      	ldr	r3, [pc, #28]	; (8024828 <ip4_input+0x27c>)
 802480c:	2200      	movs	r2, #0
 802480e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8024810:	4b05      	ldr	r3, [pc, #20]	; (8024828 <ip4_input+0x27c>)
 8024812:	2200      	movs	r2, #0
 8024814:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8024816:	4b04      	ldr	r3, [pc, #16]	; (8024828 <ip4_input+0x27c>)
 8024818:	2200      	movs	r2, #0
 802481a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 802481c:	2300      	movs	r3, #0
}
 802481e:	4618      	mov	r0, r3
 8024820:	3720      	adds	r7, #32
 8024822:	46bd      	mov	sp, r7
 8024824:	bd80      	pop	{r7, pc}
 8024826:	bf00      	nop
 8024828:	20017b68 	.word	0x20017b68
 802482c:	2001c0ec 	.word	0x2001c0ec

08024830 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8024830:	b580      	push	{r7, lr}
 8024832:	b08a      	sub	sp, #40	; 0x28
 8024834:	af04      	add	r7, sp, #16
 8024836:	60f8      	str	r0, [r7, #12]
 8024838:	60b9      	str	r1, [r7, #8]
 802483a:	607a      	str	r2, [r7, #4]
 802483c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 802483e:	68bb      	ldr	r3, [r7, #8]
 8024840:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8024842:	687b      	ldr	r3, [r7, #4]
 8024844:	2b00      	cmp	r3, #0
 8024846:	d009      	beq.n	802485c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8024848:	68bb      	ldr	r3, [r7, #8]
 802484a:	2b00      	cmp	r3, #0
 802484c:	d003      	beq.n	8024856 <ip4_output_if+0x26>
 802484e:	68bb      	ldr	r3, [r7, #8]
 8024850:	681b      	ldr	r3, [r3, #0]
 8024852:	2b00      	cmp	r3, #0
 8024854:	d102      	bne.n	802485c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8024856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024858:	3304      	adds	r3, #4
 802485a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 802485c:	78fa      	ldrb	r2, [r7, #3]
 802485e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024860:	9302      	str	r3, [sp, #8]
 8024862:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8024866:	9301      	str	r3, [sp, #4]
 8024868:	f897 3020 	ldrb.w	r3, [r7, #32]
 802486c:	9300      	str	r3, [sp, #0]
 802486e:	4613      	mov	r3, r2
 8024870:	687a      	ldr	r2, [r7, #4]
 8024872:	6979      	ldr	r1, [r7, #20]
 8024874:	68f8      	ldr	r0, [r7, #12]
 8024876:	f000 f805 	bl	8024884 <ip4_output_if_src>
 802487a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 802487c:	4618      	mov	r0, r3
 802487e:	3718      	adds	r7, #24
 8024880:	46bd      	mov	sp, r7
 8024882:	bd80      	pop	{r7, pc}

08024884 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8024884:	b580      	push	{r7, lr}
 8024886:	b088      	sub	sp, #32
 8024888:	af00      	add	r7, sp, #0
 802488a:	60f8      	str	r0, [r7, #12]
 802488c:	60b9      	str	r1, [r7, #8]
 802488e:	607a      	str	r2, [r7, #4]
 8024890:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8024892:	68fb      	ldr	r3, [r7, #12]
 8024894:	7b9b      	ldrb	r3, [r3, #14]
 8024896:	2b01      	cmp	r3, #1
 8024898:	d006      	beq.n	80248a8 <ip4_output_if_src+0x24>
 802489a:	4b4b      	ldr	r3, [pc, #300]	; (80249c8 <ip4_output_if_src+0x144>)
 802489c:	f44f 7255 	mov.w	r2, #852	; 0x354
 80248a0:	494a      	ldr	r1, [pc, #296]	; (80249cc <ip4_output_if_src+0x148>)
 80248a2:	484b      	ldr	r0, [pc, #300]	; (80249d0 <ip4_output_if_src+0x14c>)
 80248a4:	f002 f812 	bl	80268cc <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80248a8:	687b      	ldr	r3, [r7, #4]
 80248aa:	2b00      	cmp	r3, #0
 80248ac:	d060      	beq.n	8024970 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80248ae:	2314      	movs	r3, #20
 80248b0:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80248b2:	2114      	movs	r1, #20
 80248b4:	68f8      	ldr	r0, [r7, #12]
 80248b6:	f7f5 fae9 	bl	8019e8c <pbuf_add_header>
 80248ba:	4603      	mov	r3, r0
 80248bc:	2b00      	cmp	r3, #0
 80248be:	d002      	beq.n	80248c6 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80248c0:	f06f 0301 	mvn.w	r3, #1
 80248c4:	e07c      	b.n	80249c0 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80248c6:	68fb      	ldr	r3, [r7, #12]
 80248c8:	685b      	ldr	r3, [r3, #4]
 80248ca:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80248cc:	68fb      	ldr	r3, [r7, #12]
 80248ce:	895b      	ldrh	r3, [r3, #10]
 80248d0:	2b13      	cmp	r3, #19
 80248d2:	d806      	bhi.n	80248e2 <ip4_output_if_src+0x5e>
 80248d4:	4b3c      	ldr	r3, [pc, #240]	; (80249c8 <ip4_output_if_src+0x144>)
 80248d6:	f44f 7262 	mov.w	r2, #904	; 0x388
 80248da:	493e      	ldr	r1, [pc, #248]	; (80249d4 <ip4_output_if_src+0x150>)
 80248dc:	483c      	ldr	r0, [pc, #240]	; (80249d0 <ip4_output_if_src+0x14c>)
 80248de:	f001 fff5 	bl	80268cc <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80248e2:	69fb      	ldr	r3, [r7, #28]
 80248e4:	78fa      	ldrb	r2, [r7, #3]
 80248e6:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80248e8:	69fb      	ldr	r3, [r7, #28]
 80248ea:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80248ee:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80248f0:	687b      	ldr	r3, [r7, #4]
 80248f2:	681a      	ldr	r2, [r3, #0]
 80248f4:	69fb      	ldr	r3, [r7, #28]
 80248f6:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80248f8:	8b7b      	ldrh	r3, [r7, #26]
 80248fa:	089b      	lsrs	r3, r3, #2
 80248fc:	b29b      	uxth	r3, r3
 80248fe:	b2db      	uxtb	r3, r3
 8024900:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8024904:	b2da      	uxtb	r2, r3
 8024906:	69fb      	ldr	r3, [r7, #28]
 8024908:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 802490a:	69fb      	ldr	r3, [r7, #28]
 802490c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8024910:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8024912:	68fb      	ldr	r3, [r7, #12]
 8024914:	891b      	ldrh	r3, [r3, #8]
 8024916:	4618      	mov	r0, r3
 8024918:	f7f3 ff38 	bl	801878c <lwip_htons>
 802491c:	4603      	mov	r3, r0
 802491e:	461a      	mov	r2, r3
 8024920:	69fb      	ldr	r3, [r7, #28]
 8024922:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8024924:	69fb      	ldr	r3, [r7, #28]
 8024926:	2200      	movs	r2, #0
 8024928:	719a      	strb	r2, [r3, #6]
 802492a:	2200      	movs	r2, #0
 802492c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 802492e:	4b2a      	ldr	r3, [pc, #168]	; (80249d8 <ip4_output_if_src+0x154>)
 8024930:	881b      	ldrh	r3, [r3, #0]
 8024932:	4618      	mov	r0, r3
 8024934:	f7f3 ff2a 	bl	801878c <lwip_htons>
 8024938:	4603      	mov	r3, r0
 802493a:	461a      	mov	r2, r3
 802493c:	69fb      	ldr	r3, [r7, #28]
 802493e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8024940:	4b25      	ldr	r3, [pc, #148]	; (80249d8 <ip4_output_if_src+0x154>)
 8024942:	881b      	ldrh	r3, [r3, #0]
 8024944:	3301      	adds	r3, #1
 8024946:	b29a      	uxth	r2, r3
 8024948:	4b23      	ldr	r3, [pc, #140]	; (80249d8 <ip4_output_if_src+0x154>)
 802494a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 802494c:	68bb      	ldr	r3, [r7, #8]
 802494e:	2b00      	cmp	r3, #0
 8024950:	d104      	bne.n	802495c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8024952:	4b22      	ldr	r3, [pc, #136]	; (80249dc <ip4_output_if_src+0x158>)
 8024954:	681a      	ldr	r2, [r3, #0]
 8024956:	69fb      	ldr	r3, [r7, #28]
 8024958:	60da      	str	r2, [r3, #12]
 802495a:	e003      	b.n	8024964 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 802495c:	68bb      	ldr	r3, [r7, #8]
 802495e:	681a      	ldr	r2, [r3, #0]
 8024960:	69fb      	ldr	r3, [r7, #28]
 8024962:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8024964:	69fb      	ldr	r3, [r7, #28]
 8024966:	2200      	movs	r2, #0
 8024968:	729a      	strb	r2, [r3, #10]
 802496a:	2200      	movs	r2, #0
 802496c:	72da      	strb	r2, [r3, #11]
 802496e:	e00f      	b.n	8024990 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8024970:	68fb      	ldr	r3, [r7, #12]
 8024972:	895b      	ldrh	r3, [r3, #10]
 8024974:	2b13      	cmp	r3, #19
 8024976:	d802      	bhi.n	802497e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8024978:	f06f 0301 	mvn.w	r3, #1
 802497c:	e020      	b.n	80249c0 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 802497e:	68fb      	ldr	r3, [r7, #12]
 8024980:	685b      	ldr	r3, [r3, #4]
 8024982:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8024984:	69fb      	ldr	r3, [r7, #28]
 8024986:	691b      	ldr	r3, [r3, #16]
 8024988:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 802498a:	f107 0314 	add.w	r3, r7, #20
 802498e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8024990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024992:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8024994:	2b00      	cmp	r3, #0
 8024996:	d00c      	beq.n	80249b2 <ip4_output_if_src+0x12e>
 8024998:	68fb      	ldr	r3, [r7, #12]
 802499a:	891a      	ldrh	r2, [r3, #8]
 802499c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802499e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80249a0:	429a      	cmp	r2, r3
 80249a2:	d906      	bls.n	80249b2 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80249a4:	687a      	ldr	r2, [r7, #4]
 80249a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80249a8:	68f8      	ldr	r0, [r7, #12]
 80249aa:	f000 fd53 	bl	8025454 <ip4_frag>
 80249ae:	4603      	mov	r3, r0
 80249b0:	e006      	b.n	80249c0 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80249b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80249b4:	695b      	ldr	r3, [r3, #20]
 80249b6:	687a      	ldr	r2, [r7, #4]
 80249b8:	68f9      	ldr	r1, [r7, #12]
 80249ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80249bc:	4798      	blx	r3
 80249be:	4603      	mov	r3, r0
}
 80249c0:	4618      	mov	r0, r3
 80249c2:	3720      	adds	r7, #32
 80249c4:	46bd      	mov	sp, r7
 80249c6:	bd80      	pop	{r7, pc}
 80249c8:	0802f320 	.word	0x0802f320
 80249cc:	0802f354 	.word	0x0802f354
 80249d0:	0802f360 	.word	0x0802f360
 80249d4:	0802f388 	.word	0x0802f388
 80249d8:	20013d6a 	.word	0x20013d6a
 80249dc:	08030e24 	.word	0x08030e24

080249e0 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80249e0:	b480      	push	{r7}
 80249e2:	b085      	sub	sp, #20
 80249e4:	af00      	add	r7, sp, #0
 80249e6:	6078      	str	r0, [r7, #4]
 80249e8:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80249ea:	687b      	ldr	r3, [r7, #4]
 80249ec:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80249ee:	687b      	ldr	r3, [r7, #4]
 80249f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80249f4:	d002      	beq.n	80249fc <ip4_addr_isbroadcast_u32+0x1c>
 80249f6:	687b      	ldr	r3, [r7, #4]
 80249f8:	2b00      	cmp	r3, #0
 80249fa:	d101      	bne.n	8024a00 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80249fc:	2301      	movs	r3, #1
 80249fe:	e02a      	b.n	8024a56 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8024a00:	683b      	ldr	r3, [r7, #0]
 8024a02:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8024a06:	f003 0302 	and.w	r3, r3, #2
 8024a0a:	2b00      	cmp	r3, #0
 8024a0c:	d101      	bne.n	8024a12 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8024a0e:	2300      	movs	r3, #0
 8024a10:	e021      	b.n	8024a56 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8024a12:	683b      	ldr	r3, [r7, #0]
 8024a14:	3304      	adds	r3, #4
 8024a16:	681b      	ldr	r3, [r3, #0]
 8024a18:	687a      	ldr	r2, [r7, #4]
 8024a1a:	429a      	cmp	r2, r3
 8024a1c:	d101      	bne.n	8024a22 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8024a1e:	2300      	movs	r3, #0
 8024a20:	e019      	b.n	8024a56 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8024a22:	68fa      	ldr	r2, [r7, #12]
 8024a24:	683b      	ldr	r3, [r7, #0]
 8024a26:	3304      	adds	r3, #4
 8024a28:	681b      	ldr	r3, [r3, #0]
 8024a2a:	405a      	eors	r2, r3
 8024a2c:	683b      	ldr	r3, [r7, #0]
 8024a2e:	3308      	adds	r3, #8
 8024a30:	681b      	ldr	r3, [r3, #0]
 8024a32:	4013      	ands	r3, r2
 8024a34:	2b00      	cmp	r3, #0
 8024a36:	d10d      	bne.n	8024a54 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8024a38:	683b      	ldr	r3, [r7, #0]
 8024a3a:	3308      	adds	r3, #8
 8024a3c:	681b      	ldr	r3, [r3, #0]
 8024a3e:	43da      	mvns	r2, r3
 8024a40:	687b      	ldr	r3, [r7, #4]
 8024a42:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8024a44:	683b      	ldr	r3, [r7, #0]
 8024a46:	3308      	adds	r3, #8
 8024a48:	681b      	ldr	r3, [r3, #0]
 8024a4a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8024a4c:	429a      	cmp	r2, r3
 8024a4e:	d101      	bne.n	8024a54 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8024a50:	2301      	movs	r3, #1
 8024a52:	e000      	b.n	8024a56 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8024a54:	2300      	movs	r3, #0
  }
}
 8024a56:	4618      	mov	r0, r3
 8024a58:	3714      	adds	r7, #20
 8024a5a:	46bd      	mov	sp, r7
 8024a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024a60:	4770      	bx	lr
	...

08024a64 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8024a64:	b580      	push	{r7, lr}
 8024a66:	b084      	sub	sp, #16
 8024a68:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8024a6a:	2300      	movs	r3, #0
 8024a6c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8024a6e:	4b12      	ldr	r3, [pc, #72]	; (8024ab8 <ip_reass_tmr+0x54>)
 8024a70:	681b      	ldr	r3, [r3, #0]
 8024a72:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8024a74:	e018      	b.n	8024aa8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8024a76:	68fb      	ldr	r3, [r7, #12]
 8024a78:	7fdb      	ldrb	r3, [r3, #31]
 8024a7a:	2b00      	cmp	r3, #0
 8024a7c:	d00b      	beq.n	8024a96 <ip_reass_tmr+0x32>
      r->timer--;
 8024a7e:	68fb      	ldr	r3, [r7, #12]
 8024a80:	7fdb      	ldrb	r3, [r3, #31]
 8024a82:	3b01      	subs	r3, #1
 8024a84:	b2da      	uxtb	r2, r3
 8024a86:	68fb      	ldr	r3, [r7, #12]
 8024a88:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8024a8a:	68fb      	ldr	r3, [r7, #12]
 8024a8c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8024a8e:	68fb      	ldr	r3, [r7, #12]
 8024a90:	681b      	ldr	r3, [r3, #0]
 8024a92:	60fb      	str	r3, [r7, #12]
 8024a94:	e008      	b.n	8024aa8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8024a96:	68fb      	ldr	r3, [r7, #12]
 8024a98:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8024a9a:	68fb      	ldr	r3, [r7, #12]
 8024a9c:	681b      	ldr	r3, [r3, #0]
 8024a9e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8024aa0:	68b9      	ldr	r1, [r7, #8]
 8024aa2:	6878      	ldr	r0, [r7, #4]
 8024aa4:	f000 f80a 	bl	8024abc <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8024aa8:	68fb      	ldr	r3, [r7, #12]
 8024aaa:	2b00      	cmp	r3, #0
 8024aac:	d1e3      	bne.n	8024a76 <ip_reass_tmr+0x12>
    }
  }
}
 8024aae:	bf00      	nop
 8024ab0:	bf00      	nop
 8024ab2:	3710      	adds	r7, #16
 8024ab4:	46bd      	mov	sp, r7
 8024ab6:	bd80      	pop	{r7, pc}
 8024ab8:	20013d6c 	.word	0x20013d6c

08024abc <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8024abc:	b580      	push	{r7, lr}
 8024abe:	b088      	sub	sp, #32
 8024ac0:	af00      	add	r7, sp, #0
 8024ac2:	6078      	str	r0, [r7, #4]
 8024ac4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8024ac6:	2300      	movs	r3, #0
 8024ac8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8024aca:	683a      	ldr	r2, [r7, #0]
 8024acc:	687b      	ldr	r3, [r7, #4]
 8024ace:	429a      	cmp	r2, r3
 8024ad0:	d105      	bne.n	8024ade <ip_reass_free_complete_datagram+0x22>
 8024ad2:	4b45      	ldr	r3, [pc, #276]	; (8024be8 <ip_reass_free_complete_datagram+0x12c>)
 8024ad4:	22ab      	movs	r2, #171	; 0xab
 8024ad6:	4945      	ldr	r1, [pc, #276]	; (8024bec <ip_reass_free_complete_datagram+0x130>)
 8024ad8:	4845      	ldr	r0, [pc, #276]	; (8024bf0 <ip_reass_free_complete_datagram+0x134>)
 8024ada:	f001 fef7 	bl	80268cc <iprintf>
  if (prev != NULL) {
 8024ade:	683b      	ldr	r3, [r7, #0]
 8024ae0:	2b00      	cmp	r3, #0
 8024ae2:	d00a      	beq.n	8024afa <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8024ae4:	683b      	ldr	r3, [r7, #0]
 8024ae6:	681b      	ldr	r3, [r3, #0]
 8024ae8:	687a      	ldr	r2, [r7, #4]
 8024aea:	429a      	cmp	r2, r3
 8024aec:	d005      	beq.n	8024afa <ip_reass_free_complete_datagram+0x3e>
 8024aee:	4b3e      	ldr	r3, [pc, #248]	; (8024be8 <ip_reass_free_complete_datagram+0x12c>)
 8024af0:	22ad      	movs	r2, #173	; 0xad
 8024af2:	4940      	ldr	r1, [pc, #256]	; (8024bf4 <ip_reass_free_complete_datagram+0x138>)
 8024af4:	483e      	ldr	r0, [pc, #248]	; (8024bf0 <ip_reass_free_complete_datagram+0x134>)
 8024af6:	f001 fee9 	bl	80268cc <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8024afa:	687b      	ldr	r3, [r7, #4]
 8024afc:	685b      	ldr	r3, [r3, #4]
 8024afe:	685b      	ldr	r3, [r3, #4]
 8024b00:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8024b02:	697b      	ldr	r3, [r7, #20]
 8024b04:	889b      	ldrh	r3, [r3, #4]
 8024b06:	b29b      	uxth	r3, r3
 8024b08:	2b00      	cmp	r3, #0
 8024b0a:	d12a      	bne.n	8024b62 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8024b0c:	687b      	ldr	r3, [r7, #4]
 8024b0e:	685b      	ldr	r3, [r3, #4]
 8024b10:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8024b12:	697b      	ldr	r3, [r7, #20]
 8024b14:	681a      	ldr	r2, [r3, #0]
 8024b16:	687b      	ldr	r3, [r7, #4]
 8024b18:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8024b1a:	69bb      	ldr	r3, [r7, #24]
 8024b1c:	6858      	ldr	r0, [r3, #4]
 8024b1e:	687b      	ldr	r3, [r7, #4]
 8024b20:	3308      	adds	r3, #8
 8024b22:	2214      	movs	r2, #20
 8024b24:	4619      	mov	r1, r3
 8024b26:	f000 fffd 	bl	8025b24 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8024b2a:	2101      	movs	r1, #1
 8024b2c:	69b8      	ldr	r0, [r7, #24]
 8024b2e:	f7ff fc29 	bl	8024384 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8024b32:	69b8      	ldr	r0, [r7, #24]
 8024b34:	f7f5 face 	bl	801a0d4 <pbuf_clen>
 8024b38:	4603      	mov	r3, r0
 8024b3a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8024b3c:	8bfa      	ldrh	r2, [r7, #30]
 8024b3e:	8a7b      	ldrh	r3, [r7, #18]
 8024b40:	4413      	add	r3, r2
 8024b42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8024b46:	db05      	blt.n	8024b54 <ip_reass_free_complete_datagram+0x98>
 8024b48:	4b27      	ldr	r3, [pc, #156]	; (8024be8 <ip_reass_free_complete_datagram+0x12c>)
 8024b4a:	22bc      	movs	r2, #188	; 0xbc
 8024b4c:	492a      	ldr	r1, [pc, #168]	; (8024bf8 <ip_reass_free_complete_datagram+0x13c>)
 8024b4e:	4828      	ldr	r0, [pc, #160]	; (8024bf0 <ip_reass_free_complete_datagram+0x134>)
 8024b50:	f001 febc 	bl	80268cc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8024b54:	8bfa      	ldrh	r2, [r7, #30]
 8024b56:	8a7b      	ldrh	r3, [r7, #18]
 8024b58:	4413      	add	r3, r2
 8024b5a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8024b5c:	69b8      	ldr	r0, [r7, #24]
 8024b5e:	f7f5 fa2b 	bl	8019fb8 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8024b62:	687b      	ldr	r3, [r7, #4]
 8024b64:	685b      	ldr	r3, [r3, #4]
 8024b66:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8024b68:	e01f      	b.n	8024baa <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8024b6a:	69bb      	ldr	r3, [r7, #24]
 8024b6c:	685b      	ldr	r3, [r3, #4]
 8024b6e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8024b70:	69bb      	ldr	r3, [r7, #24]
 8024b72:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8024b74:	697b      	ldr	r3, [r7, #20]
 8024b76:	681b      	ldr	r3, [r3, #0]
 8024b78:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8024b7a:	68f8      	ldr	r0, [r7, #12]
 8024b7c:	f7f5 faaa 	bl	801a0d4 <pbuf_clen>
 8024b80:	4603      	mov	r3, r0
 8024b82:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8024b84:	8bfa      	ldrh	r2, [r7, #30]
 8024b86:	8a7b      	ldrh	r3, [r7, #18]
 8024b88:	4413      	add	r3, r2
 8024b8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8024b8e:	db05      	blt.n	8024b9c <ip_reass_free_complete_datagram+0xe0>
 8024b90:	4b15      	ldr	r3, [pc, #84]	; (8024be8 <ip_reass_free_complete_datagram+0x12c>)
 8024b92:	22cc      	movs	r2, #204	; 0xcc
 8024b94:	4918      	ldr	r1, [pc, #96]	; (8024bf8 <ip_reass_free_complete_datagram+0x13c>)
 8024b96:	4816      	ldr	r0, [pc, #88]	; (8024bf0 <ip_reass_free_complete_datagram+0x134>)
 8024b98:	f001 fe98 	bl	80268cc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8024b9c:	8bfa      	ldrh	r2, [r7, #30]
 8024b9e:	8a7b      	ldrh	r3, [r7, #18]
 8024ba0:	4413      	add	r3, r2
 8024ba2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8024ba4:	68f8      	ldr	r0, [r7, #12]
 8024ba6:	f7f5 fa07 	bl	8019fb8 <pbuf_free>
  while (p != NULL) {
 8024baa:	69bb      	ldr	r3, [r7, #24]
 8024bac:	2b00      	cmp	r3, #0
 8024bae:	d1dc      	bne.n	8024b6a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8024bb0:	6839      	ldr	r1, [r7, #0]
 8024bb2:	6878      	ldr	r0, [r7, #4]
 8024bb4:	f000 f8c2 	bl	8024d3c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8024bb8:	4b10      	ldr	r3, [pc, #64]	; (8024bfc <ip_reass_free_complete_datagram+0x140>)
 8024bba:	881b      	ldrh	r3, [r3, #0]
 8024bbc:	8bfa      	ldrh	r2, [r7, #30]
 8024bbe:	429a      	cmp	r2, r3
 8024bc0:	d905      	bls.n	8024bce <ip_reass_free_complete_datagram+0x112>
 8024bc2:	4b09      	ldr	r3, [pc, #36]	; (8024be8 <ip_reass_free_complete_datagram+0x12c>)
 8024bc4:	22d2      	movs	r2, #210	; 0xd2
 8024bc6:	490e      	ldr	r1, [pc, #56]	; (8024c00 <ip_reass_free_complete_datagram+0x144>)
 8024bc8:	4809      	ldr	r0, [pc, #36]	; (8024bf0 <ip_reass_free_complete_datagram+0x134>)
 8024bca:	f001 fe7f 	bl	80268cc <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8024bce:	4b0b      	ldr	r3, [pc, #44]	; (8024bfc <ip_reass_free_complete_datagram+0x140>)
 8024bd0:	881a      	ldrh	r2, [r3, #0]
 8024bd2:	8bfb      	ldrh	r3, [r7, #30]
 8024bd4:	1ad3      	subs	r3, r2, r3
 8024bd6:	b29a      	uxth	r2, r3
 8024bd8:	4b08      	ldr	r3, [pc, #32]	; (8024bfc <ip_reass_free_complete_datagram+0x140>)
 8024bda:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8024bdc:	8bfb      	ldrh	r3, [r7, #30]
}
 8024bde:	4618      	mov	r0, r3
 8024be0:	3720      	adds	r7, #32
 8024be2:	46bd      	mov	sp, r7
 8024be4:	bd80      	pop	{r7, pc}
 8024be6:	bf00      	nop
 8024be8:	0802f3b8 	.word	0x0802f3b8
 8024bec:	0802f3f4 	.word	0x0802f3f4
 8024bf0:	0802f400 	.word	0x0802f400
 8024bf4:	0802f428 	.word	0x0802f428
 8024bf8:	0802f43c 	.word	0x0802f43c
 8024bfc:	20013d70 	.word	0x20013d70
 8024c00:	0802f45c 	.word	0x0802f45c

08024c04 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8024c04:	b580      	push	{r7, lr}
 8024c06:	b08a      	sub	sp, #40	; 0x28
 8024c08:	af00      	add	r7, sp, #0
 8024c0a:	6078      	str	r0, [r7, #4]
 8024c0c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8024c0e:	2300      	movs	r3, #0
 8024c10:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8024c12:	2300      	movs	r3, #0
 8024c14:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8024c16:	2300      	movs	r3, #0
 8024c18:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8024c1a:	2300      	movs	r3, #0
 8024c1c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8024c1e:	2300      	movs	r3, #0
 8024c20:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8024c22:	4b28      	ldr	r3, [pc, #160]	; (8024cc4 <ip_reass_remove_oldest_datagram+0xc0>)
 8024c24:	681b      	ldr	r3, [r3, #0]
 8024c26:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8024c28:	e030      	b.n	8024c8c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8024c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024c2c:	695a      	ldr	r2, [r3, #20]
 8024c2e:	687b      	ldr	r3, [r7, #4]
 8024c30:	68db      	ldr	r3, [r3, #12]
 8024c32:	429a      	cmp	r2, r3
 8024c34:	d10c      	bne.n	8024c50 <ip_reass_remove_oldest_datagram+0x4c>
 8024c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024c38:	699a      	ldr	r2, [r3, #24]
 8024c3a:	687b      	ldr	r3, [r7, #4]
 8024c3c:	691b      	ldr	r3, [r3, #16]
 8024c3e:	429a      	cmp	r2, r3
 8024c40:	d106      	bne.n	8024c50 <ip_reass_remove_oldest_datagram+0x4c>
 8024c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024c44:	899a      	ldrh	r2, [r3, #12]
 8024c46:	687b      	ldr	r3, [r7, #4]
 8024c48:	889b      	ldrh	r3, [r3, #4]
 8024c4a:	b29b      	uxth	r3, r3
 8024c4c:	429a      	cmp	r2, r3
 8024c4e:	d014      	beq.n	8024c7a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8024c50:	693b      	ldr	r3, [r7, #16]
 8024c52:	3301      	adds	r3, #1
 8024c54:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8024c56:	6a3b      	ldr	r3, [r7, #32]
 8024c58:	2b00      	cmp	r3, #0
 8024c5a:	d104      	bne.n	8024c66 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8024c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024c5e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8024c60:	69fb      	ldr	r3, [r7, #28]
 8024c62:	61bb      	str	r3, [r7, #24]
 8024c64:	e009      	b.n	8024c7a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8024c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024c68:	7fda      	ldrb	r2, [r3, #31]
 8024c6a:	6a3b      	ldr	r3, [r7, #32]
 8024c6c:	7fdb      	ldrb	r3, [r3, #31]
 8024c6e:	429a      	cmp	r2, r3
 8024c70:	d803      	bhi.n	8024c7a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8024c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024c74:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8024c76:	69fb      	ldr	r3, [r7, #28]
 8024c78:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8024c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024c7c:	681b      	ldr	r3, [r3, #0]
 8024c7e:	2b00      	cmp	r3, #0
 8024c80:	d001      	beq.n	8024c86 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8024c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024c84:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8024c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024c88:	681b      	ldr	r3, [r3, #0]
 8024c8a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8024c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024c8e:	2b00      	cmp	r3, #0
 8024c90:	d1cb      	bne.n	8024c2a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8024c92:	6a3b      	ldr	r3, [r7, #32]
 8024c94:	2b00      	cmp	r3, #0
 8024c96:	d008      	beq.n	8024caa <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8024c98:	69b9      	ldr	r1, [r7, #24]
 8024c9a:	6a38      	ldr	r0, [r7, #32]
 8024c9c:	f7ff ff0e 	bl	8024abc <ip_reass_free_complete_datagram>
 8024ca0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8024ca2:	697a      	ldr	r2, [r7, #20]
 8024ca4:	68fb      	ldr	r3, [r7, #12]
 8024ca6:	4413      	add	r3, r2
 8024ca8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8024caa:	697a      	ldr	r2, [r7, #20]
 8024cac:	683b      	ldr	r3, [r7, #0]
 8024cae:	429a      	cmp	r2, r3
 8024cb0:	da02      	bge.n	8024cb8 <ip_reass_remove_oldest_datagram+0xb4>
 8024cb2:	693b      	ldr	r3, [r7, #16]
 8024cb4:	2b01      	cmp	r3, #1
 8024cb6:	dcac      	bgt.n	8024c12 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8024cb8:	697b      	ldr	r3, [r7, #20]
}
 8024cba:	4618      	mov	r0, r3
 8024cbc:	3728      	adds	r7, #40	; 0x28
 8024cbe:	46bd      	mov	sp, r7
 8024cc0:	bd80      	pop	{r7, pc}
 8024cc2:	bf00      	nop
 8024cc4:	20013d6c 	.word	0x20013d6c

08024cc8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8024cc8:	b580      	push	{r7, lr}
 8024cca:	b084      	sub	sp, #16
 8024ccc:	af00      	add	r7, sp, #0
 8024cce:	6078      	str	r0, [r7, #4]
 8024cd0:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8024cd2:	2004      	movs	r0, #4
 8024cd4:	f7f4 fa6e 	bl	80191b4 <memp_malloc>
 8024cd8:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8024cda:	68fb      	ldr	r3, [r7, #12]
 8024cdc:	2b00      	cmp	r3, #0
 8024cde:	d110      	bne.n	8024d02 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8024ce0:	6839      	ldr	r1, [r7, #0]
 8024ce2:	6878      	ldr	r0, [r7, #4]
 8024ce4:	f7ff ff8e 	bl	8024c04 <ip_reass_remove_oldest_datagram>
 8024ce8:	4602      	mov	r2, r0
 8024cea:	683b      	ldr	r3, [r7, #0]
 8024cec:	4293      	cmp	r3, r2
 8024cee:	dc03      	bgt.n	8024cf8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8024cf0:	2004      	movs	r0, #4
 8024cf2:	f7f4 fa5f 	bl	80191b4 <memp_malloc>
 8024cf6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8024cf8:	68fb      	ldr	r3, [r7, #12]
 8024cfa:	2b00      	cmp	r3, #0
 8024cfc:	d101      	bne.n	8024d02 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8024cfe:	2300      	movs	r3, #0
 8024d00:	e016      	b.n	8024d30 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8024d02:	2220      	movs	r2, #32
 8024d04:	2100      	movs	r1, #0
 8024d06:	68f8      	ldr	r0, [r7, #12]
 8024d08:	f000 ff34 	bl	8025b74 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8024d0c:	68fb      	ldr	r3, [r7, #12]
 8024d0e:	220f      	movs	r2, #15
 8024d10:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8024d12:	4b09      	ldr	r3, [pc, #36]	; (8024d38 <ip_reass_enqueue_new_datagram+0x70>)
 8024d14:	681a      	ldr	r2, [r3, #0]
 8024d16:	68fb      	ldr	r3, [r7, #12]
 8024d18:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8024d1a:	4a07      	ldr	r2, [pc, #28]	; (8024d38 <ip_reass_enqueue_new_datagram+0x70>)
 8024d1c:	68fb      	ldr	r3, [r7, #12]
 8024d1e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8024d20:	68fb      	ldr	r3, [r7, #12]
 8024d22:	3308      	adds	r3, #8
 8024d24:	2214      	movs	r2, #20
 8024d26:	6879      	ldr	r1, [r7, #4]
 8024d28:	4618      	mov	r0, r3
 8024d2a:	f000 fefb 	bl	8025b24 <memcpy>
  return ipr;
 8024d2e:	68fb      	ldr	r3, [r7, #12]
}
 8024d30:	4618      	mov	r0, r3
 8024d32:	3710      	adds	r7, #16
 8024d34:	46bd      	mov	sp, r7
 8024d36:	bd80      	pop	{r7, pc}
 8024d38:	20013d6c 	.word	0x20013d6c

08024d3c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8024d3c:	b580      	push	{r7, lr}
 8024d3e:	b082      	sub	sp, #8
 8024d40:	af00      	add	r7, sp, #0
 8024d42:	6078      	str	r0, [r7, #4]
 8024d44:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8024d46:	4b10      	ldr	r3, [pc, #64]	; (8024d88 <ip_reass_dequeue_datagram+0x4c>)
 8024d48:	681b      	ldr	r3, [r3, #0]
 8024d4a:	687a      	ldr	r2, [r7, #4]
 8024d4c:	429a      	cmp	r2, r3
 8024d4e:	d104      	bne.n	8024d5a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8024d50:	687b      	ldr	r3, [r7, #4]
 8024d52:	681b      	ldr	r3, [r3, #0]
 8024d54:	4a0c      	ldr	r2, [pc, #48]	; (8024d88 <ip_reass_dequeue_datagram+0x4c>)
 8024d56:	6013      	str	r3, [r2, #0]
 8024d58:	e00d      	b.n	8024d76 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8024d5a:	683b      	ldr	r3, [r7, #0]
 8024d5c:	2b00      	cmp	r3, #0
 8024d5e:	d106      	bne.n	8024d6e <ip_reass_dequeue_datagram+0x32>
 8024d60:	4b0a      	ldr	r3, [pc, #40]	; (8024d8c <ip_reass_dequeue_datagram+0x50>)
 8024d62:	f240 1245 	movw	r2, #325	; 0x145
 8024d66:	490a      	ldr	r1, [pc, #40]	; (8024d90 <ip_reass_dequeue_datagram+0x54>)
 8024d68:	480a      	ldr	r0, [pc, #40]	; (8024d94 <ip_reass_dequeue_datagram+0x58>)
 8024d6a:	f001 fdaf 	bl	80268cc <iprintf>
    prev->next = ipr->next;
 8024d6e:	687b      	ldr	r3, [r7, #4]
 8024d70:	681a      	ldr	r2, [r3, #0]
 8024d72:	683b      	ldr	r3, [r7, #0]
 8024d74:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8024d76:	6879      	ldr	r1, [r7, #4]
 8024d78:	2004      	movs	r0, #4
 8024d7a:	f7f4 fa6d 	bl	8019258 <memp_free>
}
 8024d7e:	bf00      	nop
 8024d80:	3708      	adds	r7, #8
 8024d82:	46bd      	mov	sp, r7
 8024d84:	bd80      	pop	{r7, pc}
 8024d86:	bf00      	nop
 8024d88:	20013d6c 	.word	0x20013d6c
 8024d8c:	0802f3b8 	.word	0x0802f3b8
 8024d90:	0802f480 	.word	0x0802f480
 8024d94:	0802f400 	.word	0x0802f400

08024d98 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8024d98:	b580      	push	{r7, lr}
 8024d9a:	b08c      	sub	sp, #48	; 0x30
 8024d9c:	af00      	add	r7, sp, #0
 8024d9e:	60f8      	str	r0, [r7, #12]
 8024da0:	60b9      	str	r1, [r7, #8]
 8024da2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8024da4:	2300      	movs	r3, #0
 8024da6:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8024da8:	2301      	movs	r3, #1
 8024daa:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8024dac:	68bb      	ldr	r3, [r7, #8]
 8024dae:	685b      	ldr	r3, [r3, #4]
 8024db0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8024db2:	69fb      	ldr	r3, [r7, #28]
 8024db4:	885b      	ldrh	r3, [r3, #2]
 8024db6:	b29b      	uxth	r3, r3
 8024db8:	4618      	mov	r0, r3
 8024dba:	f7f3 fce7 	bl	801878c <lwip_htons>
 8024dbe:	4603      	mov	r3, r0
 8024dc0:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8024dc2:	69fb      	ldr	r3, [r7, #28]
 8024dc4:	781b      	ldrb	r3, [r3, #0]
 8024dc6:	f003 030f 	and.w	r3, r3, #15
 8024dca:	b2db      	uxtb	r3, r3
 8024dcc:	009b      	lsls	r3, r3, #2
 8024dce:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8024dd0:	7e7b      	ldrb	r3, [r7, #25]
 8024dd2:	b29b      	uxth	r3, r3
 8024dd4:	8b7a      	ldrh	r2, [r7, #26]
 8024dd6:	429a      	cmp	r2, r3
 8024dd8:	d202      	bcs.n	8024de0 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8024dda:	f04f 33ff 	mov.w	r3, #4294967295
 8024dde:	e135      	b.n	802504c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8024de0:	7e7b      	ldrb	r3, [r7, #25]
 8024de2:	b29b      	uxth	r3, r3
 8024de4:	8b7a      	ldrh	r2, [r7, #26]
 8024de6:	1ad3      	subs	r3, r2, r3
 8024de8:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8024dea:	69fb      	ldr	r3, [r7, #28]
 8024dec:	88db      	ldrh	r3, [r3, #6]
 8024dee:	b29b      	uxth	r3, r3
 8024df0:	4618      	mov	r0, r3
 8024df2:	f7f3 fccb 	bl	801878c <lwip_htons>
 8024df6:	4603      	mov	r3, r0
 8024df8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8024dfc:	b29b      	uxth	r3, r3
 8024dfe:	00db      	lsls	r3, r3, #3
 8024e00:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8024e02:	68bb      	ldr	r3, [r7, #8]
 8024e04:	685b      	ldr	r3, [r3, #4]
 8024e06:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8024e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024e0a:	2200      	movs	r2, #0
 8024e0c:	701a      	strb	r2, [r3, #0]
 8024e0e:	2200      	movs	r2, #0
 8024e10:	705a      	strb	r2, [r3, #1]
 8024e12:	2200      	movs	r2, #0
 8024e14:	709a      	strb	r2, [r3, #2]
 8024e16:	2200      	movs	r2, #0
 8024e18:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8024e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024e1c:	8afa      	ldrh	r2, [r7, #22]
 8024e1e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8024e20:	8afa      	ldrh	r2, [r7, #22]
 8024e22:	8b7b      	ldrh	r3, [r7, #26]
 8024e24:	4413      	add	r3, r2
 8024e26:	b29a      	uxth	r2, r3
 8024e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024e2a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8024e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024e2e:	88db      	ldrh	r3, [r3, #6]
 8024e30:	b29b      	uxth	r3, r3
 8024e32:	8afa      	ldrh	r2, [r7, #22]
 8024e34:	429a      	cmp	r2, r3
 8024e36:	d902      	bls.n	8024e3e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8024e38:	f04f 33ff 	mov.w	r3, #4294967295
 8024e3c:	e106      	b.n	802504c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8024e3e:	68fb      	ldr	r3, [r7, #12]
 8024e40:	685b      	ldr	r3, [r3, #4]
 8024e42:	627b      	str	r3, [r7, #36]	; 0x24
 8024e44:	e068      	b.n	8024f18 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8024e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024e48:	685b      	ldr	r3, [r3, #4]
 8024e4a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8024e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024e4e:	889b      	ldrh	r3, [r3, #4]
 8024e50:	b29a      	uxth	r2, r3
 8024e52:	693b      	ldr	r3, [r7, #16]
 8024e54:	889b      	ldrh	r3, [r3, #4]
 8024e56:	b29b      	uxth	r3, r3
 8024e58:	429a      	cmp	r2, r3
 8024e5a:	d235      	bcs.n	8024ec8 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8024e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024e5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8024e60:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8024e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024e64:	2b00      	cmp	r3, #0
 8024e66:	d020      	beq.n	8024eaa <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8024e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024e6a:	889b      	ldrh	r3, [r3, #4]
 8024e6c:	b29a      	uxth	r2, r3
 8024e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024e70:	88db      	ldrh	r3, [r3, #6]
 8024e72:	b29b      	uxth	r3, r3
 8024e74:	429a      	cmp	r2, r3
 8024e76:	d307      	bcc.n	8024e88 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8024e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024e7a:	88db      	ldrh	r3, [r3, #6]
 8024e7c:	b29a      	uxth	r2, r3
 8024e7e:	693b      	ldr	r3, [r7, #16]
 8024e80:	889b      	ldrh	r3, [r3, #4]
 8024e82:	b29b      	uxth	r3, r3
 8024e84:	429a      	cmp	r2, r3
 8024e86:	d902      	bls.n	8024e8e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8024e88:	f04f 33ff 	mov.w	r3, #4294967295
 8024e8c:	e0de      	b.n	802504c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8024e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024e90:	68ba      	ldr	r2, [r7, #8]
 8024e92:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8024e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024e96:	88db      	ldrh	r3, [r3, #6]
 8024e98:	b29a      	uxth	r2, r3
 8024e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024e9c:	889b      	ldrh	r3, [r3, #4]
 8024e9e:	b29b      	uxth	r3, r3
 8024ea0:	429a      	cmp	r2, r3
 8024ea2:	d03d      	beq.n	8024f20 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8024ea4:	2300      	movs	r3, #0
 8024ea6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8024ea8:	e03a      	b.n	8024f20 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8024eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024eac:	88db      	ldrh	r3, [r3, #6]
 8024eae:	b29a      	uxth	r2, r3
 8024eb0:	693b      	ldr	r3, [r7, #16]
 8024eb2:	889b      	ldrh	r3, [r3, #4]
 8024eb4:	b29b      	uxth	r3, r3
 8024eb6:	429a      	cmp	r2, r3
 8024eb8:	d902      	bls.n	8024ec0 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8024eba:	f04f 33ff 	mov.w	r3, #4294967295
 8024ebe:	e0c5      	b.n	802504c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8024ec0:	68fb      	ldr	r3, [r7, #12]
 8024ec2:	68ba      	ldr	r2, [r7, #8]
 8024ec4:	605a      	str	r2, [r3, #4]
      break;
 8024ec6:	e02b      	b.n	8024f20 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8024ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024eca:	889b      	ldrh	r3, [r3, #4]
 8024ecc:	b29a      	uxth	r2, r3
 8024ece:	693b      	ldr	r3, [r7, #16]
 8024ed0:	889b      	ldrh	r3, [r3, #4]
 8024ed2:	b29b      	uxth	r3, r3
 8024ed4:	429a      	cmp	r2, r3
 8024ed6:	d102      	bne.n	8024ede <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8024ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8024edc:	e0b6      	b.n	802504c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8024ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024ee0:	889b      	ldrh	r3, [r3, #4]
 8024ee2:	b29a      	uxth	r2, r3
 8024ee4:	693b      	ldr	r3, [r7, #16]
 8024ee6:	88db      	ldrh	r3, [r3, #6]
 8024ee8:	b29b      	uxth	r3, r3
 8024eea:	429a      	cmp	r2, r3
 8024eec:	d202      	bcs.n	8024ef4 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8024eee:	f04f 33ff 	mov.w	r3, #4294967295
 8024ef2:	e0ab      	b.n	802504c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8024ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024ef6:	2b00      	cmp	r3, #0
 8024ef8:	d009      	beq.n	8024f0e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8024efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024efc:	88db      	ldrh	r3, [r3, #6]
 8024efe:	b29a      	uxth	r2, r3
 8024f00:	693b      	ldr	r3, [r7, #16]
 8024f02:	889b      	ldrh	r3, [r3, #4]
 8024f04:	b29b      	uxth	r3, r3
 8024f06:	429a      	cmp	r2, r3
 8024f08:	d001      	beq.n	8024f0e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8024f0a:	2300      	movs	r3, #0
 8024f0c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8024f0e:	693b      	ldr	r3, [r7, #16]
 8024f10:	681b      	ldr	r3, [r3, #0]
 8024f12:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8024f14:	693b      	ldr	r3, [r7, #16]
 8024f16:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8024f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024f1a:	2b00      	cmp	r3, #0
 8024f1c:	d193      	bne.n	8024e46 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8024f1e:	e000      	b.n	8024f22 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8024f20:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8024f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024f24:	2b00      	cmp	r3, #0
 8024f26:	d12d      	bne.n	8024f84 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8024f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024f2a:	2b00      	cmp	r3, #0
 8024f2c:	d01c      	beq.n	8024f68 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8024f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024f30:	88db      	ldrh	r3, [r3, #6]
 8024f32:	b29a      	uxth	r2, r3
 8024f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024f36:	889b      	ldrh	r3, [r3, #4]
 8024f38:	b29b      	uxth	r3, r3
 8024f3a:	429a      	cmp	r2, r3
 8024f3c:	d906      	bls.n	8024f4c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8024f3e:	4b45      	ldr	r3, [pc, #276]	; (8025054 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8024f40:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8024f44:	4944      	ldr	r1, [pc, #272]	; (8025058 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8024f46:	4845      	ldr	r0, [pc, #276]	; (802505c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8024f48:	f001 fcc0 	bl	80268cc <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8024f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024f4e:	68ba      	ldr	r2, [r7, #8]
 8024f50:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8024f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024f54:	88db      	ldrh	r3, [r3, #6]
 8024f56:	b29a      	uxth	r2, r3
 8024f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024f5a:	889b      	ldrh	r3, [r3, #4]
 8024f5c:	b29b      	uxth	r3, r3
 8024f5e:	429a      	cmp	r2, r3
 8024f60:	d010      	beq.n	8024f84 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8024f62:	2300      	movs	r3, #0
 8024f64:	623b      	str	r3, [r7, #32]
 8024f66:	e00d      	b.n	8024f84 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8024f68:	68fb      	ldr	r3, [r7, #12]
 8024f6a:	685b      	ldr	r3, [r3, #4]
 8024f6c:	2b00      	cmp	r3, #0
 8024f6e:	d006      	beq.n	8024f7e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8024f70:	4b38      	ldr	r3, [pc, #224]	; (8025054 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8024f72:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8024f76:	493a      	ldr	r1, [pc, #232]	; (8025060 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8024f78:	4838      	ldr	r0, [pc, #224]	; (802505c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8024f7a:	f001 fca7 	bl	80268cc <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8024f7e:	68fb      	ldr	r3, [r7, #12]
 8024f80:	68ba      	ldr	r2, [r7, #8]
 8024f82:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8024f84:	687b      	ldr	r3, [r7, #4]
 8024f86:	2b00      	cmp	r3, #0
 8024f88:	d105      	bne.n	8024f96 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8024f8a:	68fb      	ldr	r3, [r7, #12]
 8024f8c:	7f9b      	ldrb	r3, [r3, #30]
 8024f8e:	f003 0301 	and.w	r3, r3, #1
 8024f92:	2b00      	cmp	r3, #0
 8024f94:	d059      	beq.n	802504a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8024f96:	6a3b      	ldr	r3, [r7, #32]
 8024f98:	2b00      	cmp	r3, #0
 8024f9a:	d04f      	beq.n	802503c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8024f9c:	68fb      	ldr	r3, [r7, #12]
 8024f9e:	685b      	ldr	r3, [r3, #4]
 8024fa0:	2b00      	cmp	r3, #0
 8024fa2:	d006      	beq.n	8024fb2 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8024fa4:	68fb      	ldr	r3, [r7, #12]
 8024fa6:	685b      	ldr	r3, [r3, #4]
 8024fa8:	685b      	ldr	r3, [r3, #4]
 8024faa:	889b      	ldrh	r3, [r3, #4]
 8024fac:	b29b      	uxth	r3, r3
 8024fae:	2b00      	cmp	r3, #0
 8024fb0:	d002      	beq.n	8024fb8 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8024fb2:	2300      	movs	r3, #0
 8024fb4:	623b      	str	r3, [r7, #32]
 8024fb6:	e041      	b.n	802503c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8024fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024fba:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8024fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024fbe:	681b      	ldr	r3, [r3, #0]
 8024fc0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8024fc2:	e012      	b.n	8024fea <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8024fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024fc6:	685b      	ldr	r3, [r3, #4]
 8024fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8024fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024fcc:	88db      	ldrh	r3, [r3, #6]
 8024fce:	b29a      	uxth	r2, r3
 8024fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024fd2:	889b      	ldrh	r3, [r3, #4]
 8024fd4:	b29b      	uxth	r3, r3
 8024fd6:	429a      	cmp	r2, r3
 8024fd8:	d002      	beq.n	8024fe0 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8024fda:	2300      	movs	r3, #0
 8024fdc:	623b      	str	r3, [r7, #32]
            break;
 8024fde:	e007      	b.n	8024ff0 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8024fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024fe2:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8024fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024fe6:	681b      	ldr	r3, [r3, #0]
 8024fe8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8024fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024fec:	2b00      	cmp	r3, #0
 8024fee:	d1e9      	bne.n	8024fc4 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8024ff0:	6a3b      	ldr	r3, [r7, #32]
 8024ff2:	2b00      	cmp	r3, #0
 8024ff4:	d022      	beq.n	802503c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8024ff6:	68fb      	ldr	r3, [r7, #12]
 8024ff8:	685b      	ldr	r3, [r3, #4]
 8024ffa:	2b00      	cmp	r3, #0
 8024ffc:	d106      	bne.n	802500c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8024ffe:	4b15      	ldr	r3, [pc, #84]	; (8025054 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8025000:	f240 12df 	movw	r2, #479	; 0x1df
 8025004:	4917      	ldr	r1, [pc, #92]	; (8025064 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8025006:	4815      	ldr	r0, [pc, #84]	; (802505c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8025008:	f001 fc60 	bl	80268cc <iprintf>
          LWIP_ASSERT("sanity check",
 802500c:	68fb      	ldr	r3, [r7, #12]
 802500e:	685b      	ldr	r3, [r3, #4]
 8025010:	685b      	ldr	r3, [r3, #4]
 8025012:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8025014:	429a      	cmp	r2, r3
 8025016:	d106      	bne.n	8025026 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8025018:	4b0e      	ldr	r3, [pc, #56]	; (8025054 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 802501a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 802501e:	4911      	ldr	r1, [pc, #68]	; (8025064 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8025020:	480e      	ldr	r0, [pc, #56]	; (802505c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8025022:	f001 fc53 	bl	80268cc <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8025026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025028:	681b      	ldr	r3, [r3, #0]
 802502a:	2b00      	cmp	r3, #0
 802502c:	d006      	beq.n	802503c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 802502e:	4b09      	ldr	r3, [pc, #36]	; (8025054 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8025030:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8025034:	490c      	ldr	r1, [pc, #48]	; (8025068 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8025036:	4809      	ldr	r0, [pc, #36]	; (802505c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8025038:	f001 fc48 	bl	80268cc <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 802503c:	6a3b      	ldr	r3, [r7, #32]
 802503e:	2b00      	cmp	r3, #0
 8025040:	bf14      	ite	ne
 8025042:	2301      	movne	r3, #1
 8025044:	2300      	moveq	r3, #0
 8025046:	b2db      	uxtb	r3, r3
 8025048:	e000      	b.n	802504c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 802504a:	2300      	movs	r3, #0
}
 802504c:	4618      	mov	r0, r3
 802504e:	3730      	adds	r7, #48	; 0x30
 8025050:	46bd      	mov	sp, r7
 8025052:	bd80      	pop	{r7, pc}
 8025054:	0802f3b8 	.word	0x0802f3b8
 8025058:	0802f49c 	.word	0x0802f49c
 802505c:	0802f400 	.word	0x0802f400
 8025060:	0802f4bc 	.word	0x0802f4bc
 8025064:	0802f4f4 	.word	0x0802f4f4
 8025068:	0802f504 	.word	0x0802f504

0802506c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 802506c:	b580      	push	{r7, lr}
 802506e:	b08e      	sub	sp, #56	; 0x38
 8025070:	af00      	add	r7, sp, #0
 8025072:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8025074:	687b      	ldr	r3, [r7, #4]
 8025076:	685b      	ldr	r3, [r3, #4]
 8025078:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 802507a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802507c:	781b      	ldrb	r3, [r3, #0]
 802507e:	f003 030f 	and.w	r3, r3, #15
 8025082:	b2db      	uxtb	r3, r3
 8025084:	009b      	lsls	r3, r3, #2
 8025086:	b2db      	uxtb	r3, r3
 8025088:	2b14      	cmp	r3, #20
 802508a:	f040 8171 	bne.w	8025370 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 802508e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025090:	88db      	ldrh	r3, [r3, #6]
 8025092:	b29b      	uxth	r3, r3
 8025094:	4618      	mov	r0, r3
 8025096:	f7f3 fb79 	bl	801878c <lwip_htons>
 802509a:	4603      	mov	r3, r0
 802509c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80250a0:	b29b      	uxth	r3, r3
 80250a2:	00db      	lsls	r3, r3, #3
 80250a4:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80250a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80250a8:	885b      	ldrh	r3, [r3, #2]
 80250aa:	b29b      	uxth	r3, r3
 80250ac:	4618      	mov	r0, r3
 80250ae:	f7f3 fb6d 	bl	801878c <lwip_htons>
 80250b2:	4603      	mov	r3, r0
 80250b4:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80250b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80250b8:	781b      	ldrb	r3, [r3, #0]
 80250ba:	f003 030f 	and.w	r3, r3, #15
 80250be:	b2db      	uxtb	r3, r3
 80250c0:	009b      	lsls	r3, r3, #2
 80250c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80250c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80250ca:	b29b      	uxth	r3, r3
 80250cc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80250ce:	429a      	cmp	r2, r3
 80250d0:	f0c0 8150 	bcc.w	8025374 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80250d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80250d8:	b29b      	uxth	r3, r3
 80250da:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80250dc:	1ad3      	subs	r3, r2, r3
 80250de:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80250e0:	6878      	ldr	r0, [r7, #4]
 80250e2:	f7f4 fff7 	bl	801a0d4 <pbuf_clen>
 80250e6:	4603      	mov	r3, r0
 80250e8:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80250ea:	4b8c      	ldr	r3, [pc, #560]	; (802531c <ip4_reass+0x2b0>)
 80250ec:	881b      	ldrh	r3, [r3, #0]
 80250ee:	461a      	mov	r2, r3
 80250f0:	8c3b      	ldrh	r3, [r7, #32]
 80250f2:	4413      	add	r3, r2
 80250f4:	2b0a      	cmp	r3, #10
 80250f6:	dd10      	ble.n	802511a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80250f8:	8c3b      	ldrh	r3, [r7, #32]
 80250fa:	4619      	mov	r1, r3
 80250fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80250fe:	f7ff fd81 	bl	8024c04 <ip_reass_remove_oldest_datagram>
 8025102:	4603      	mov	r3, r0
 8025104:	2b00      	cmp	r3, #0
 8025106:	f000 8137 	beq.w	8025378 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 802510a:	4b84      	ldr	r3, [pc, #528]	; (802531c <ip4_reass+0x2b0>)
 802510c:	881b      	ldrh	r3, [r3, #0]
 802510e:	461a      	mov	r2, r3
 8025110:	8c3b      	ldrh	r3, [r7, #32]
 8025112:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8025114:	2b0a      	cmp	r3, #10
 8025116:	f300 812f 	bgt.w	8025378 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 802511a:	4b81      	ldr	r3, [pc, #516]	; (8025320 <ip4_reass+0x2b4>)
 802511c:	681b      	ldr	r3, [r3, #0]
 802511e:	633b      	str	r3, [r7, #48]	; 0x30
 8025120:	e015      	b.n	802514e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8025122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025124:	695a      	ldr	r2, [r3, #20]
 8025126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025128:	68db      	ldr	r3, [r3, #12]
 802512a:	429a      	cmp	r2, r3
 802512c:	d10c      	bne.n	8025148 <ip4_reass+0xdc>
 802512e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025130:	699a      	ldr	r2, [r3, #24]
 8025132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025134:	691b      	ldr	r3, [r3, #16]
 8025136:	429a      	cmp	r2, r3
 8025138:	d106      	bne.n	8025148 <ip4_reass+0xdc>
 802513a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802513c:	899a      	ldrh	r2, [r3, #12]
 802513e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025140:	889b      	ldrh	r3, [r3, #4]
 8025142:	b29b      	uxth	r3, r3
 8025144:	429a      	cmp	r2, r3
 8025146:	d006      	beq.n	8025156 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8025148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802514a:	681b      	ldr	r3, [r3, #0]
 802514c:	633b      	str	r3, [r7, #48]	; 0x30
 802514e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025150:	2b00      	cmp	r3, #0
 8025152:	d1e6      	bne.n	8025122 <ip4_reass+0xb6>
 8025154:	e000      	b.n	8025158 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8025156:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8025158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802515a:	2b00      	cmp	r3, #0
 802515c:	d109      	bne.n	8025172 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 802515e:	8c3b      	ldrh	r3, [r7, #32]
 8025160:	4619      	mov	r1, r3
 8025162:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8025164:	f7ff fdb0 	bl	8024cc8 <ip_reass_enqueue_new_datagram>
 8025168:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 802516a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802516c:	2b00      	cmp	r3, #0
 802516e:	d11c      	bne.n	80251aa <ip4_reass+0x13e>
      goto nullreturn;
 8025170:	e105      	b.n	802537e <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8025172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025174:	88db      	ldrh	r3, [r3, #6]
 8025176:	b29b      	uxth	r3, r3
 8025178:	4618      	mov	r0, r3
 802517a:	f7f3 fb07 	bl	801878c <lwip_htons>
 802517e:	4603      	mov	r3, r0
 8025180:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8025184:	2b00      	cmp	r3, #0
 8025186:	d110      	bne.n	80251aa <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8025188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802518a:	89db      	ldrh	r3, [r3, #14]
 802518c:	4618      	mov	r0, r3
 802518e:	f7f3 fafd 	bl	801878c <lwip_htons>
 8025192:	4603      	mov	r3, r0
 8025194:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8025198:	2b00      	cmp	r3, #0
 802519a:	d006      	beq.n	80251aa <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 802519c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802519e:	3308      	adds	r3, #8
 80251a0:	2214      	movs	r2, #20
 80251a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80251a4:	4618      	mov	r0, r3
 80251a6:	f000 fcbd 	bl	8025b24 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80251aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80251ac:	88db      	ldrh	r3, [r3, #6]
 80251ae:	b29b      	uxth	r3, r3
 80251b0:	f003 0320 	and.w	r3, r3, #32
 80251b4:	2b00      	cmp	r3, #0
 80251b6:	bf0c      	ite	eq
 80251b8:	2301      	moveq	r3, #1
 80251ba:	2300      	movne	r3, #0
 80251bc:	b2db      	uxtb	r3, r3
 80251be:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80251c0:	69fb      	ldr	r3, [r7, #28]
 80251c2:	2b00      	cmp	r3, #0
 80251c4:	d00e      	beq.n	80251e4 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80251c6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80251c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80251ca:	4413      	add	r3, r2
 80251cc:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80251ce:	8b7a      	ldrh	r2, [r7, #26]
 80251d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80251d2:	429a      	cmp	r2, r3
 80251d4:	f0c0 80a0 	bcc.w	8025318 <ip4_reass+0x2ac>
 80251d8:	8b7b      	ldrh	r3, [r7, #26]
 80251da:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80251de:	4293      	cmp	r3, r2
 80251e0:	f200 809a 	bhi.w	8025318 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80251e4:	69fa      	ldr	r2, [r7, #28]
 80251e6:	6879      	ldr	r1, [r7, #4]
 80251e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80251ea:	f7ff fdd5 	bl	8024d98 <ip_reass_chain_frag_into_datagram_and_validate>
 80251ee:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80251f0:	697b      	ldr	r3, [r7, #20]
 80251f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80251f6:	f000 809b 	beq.w	8025330 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80251fa:	4b48      	ldr	r3, [pc, #288]	; (802531c <ip4_reass+0x2b0>)
 80251fc:	881a      	ldrh	r2, [r3, #0]
 80251fe:	8c3b      	ldrh	r3, [r7, #32]
 8025200:	4413      	add	r3, r2
 8025202:	b29a      	uxth	r2, r3
 8025204:	4b45      	ldr	r3, [pc, #276]	; (802531c <ip4_reass+0x2b0>)
 8025206:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8025208:	69fb      	ldr	r3, [r7, #28]
 802520a:	2b00      	cmp	r3, #0
 802520c:	d00d      	beq.n	802522a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 802520e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8025210:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8025212:	4413      	add	r3, r2
 8025214:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8025216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025218:	8a7a      	ldrh	r2, [r7, #18]
 802521a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 802521c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802521e:	7f9b      	ldrb	r3, [r3, #30]
 8025220:	f043 0301 	orr.w	r3, r3, #1
 8025224:	b2da      	uxtb	r2, r3
 8025226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025228:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 802522a:	697b      	ldr	r3, [r7, #20]
 802522c:	2b01      	cmp	r3, #1
 802522e:	d171      	bne.n	8025314 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8025230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025232:	8b9b      	ldrh	r3, [r3, #28]
 8025234:	3314      	adds	r3, #20
 8025236:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8025238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802523a:	685b      	ldr	r3, [r3, #4]
 802523c:	685b      	ldr	r3, [r3, #4]
 802523e:	681b      	ldr	r3, [r3, #0]
 8025240:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8025242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025244:	685b      	ldr	r3, [r3, #4]
 8025246:	685b      	ldr	r3, [r3, #4]
 8025248:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 802524a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802524c:	3308      	adds	r3, #8
 802524e:	2214      	movs	r2, #20
 8025250:	4619      	mov	r1, r3
 8025252:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8025254:	f000 fc66 	bl	8025b24 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8025258:	8a3b      	ldrh	r3, [r7, #16]
 802525a:	4618      	mov	r0, r3
 802525c:	f7f3 fa96 	bl	801878c <lwip_htons>
 8025260:	4603      	mov	r3, r0
 8025262:	461a      	mov	r2, r3
 8025264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025266:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8025268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802526a:	2200      	movs	r2, #0
 802526c:	719a      	strb	r2, [r3, #6]
 802526e:	2200      	movs	r2, #0
 8025270:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8025272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025274:	2200      	movs	r2, #0
 8025276:	729a      	strb	r2, [r3, #10]
 8025278:	2200      	movs	r2, #0
 802527a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 802527c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802527e:	685b      	ldr	r3, [r3, #4]
 8025280:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8025282:	e00d      	b.n	80252a0 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8025284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8025286:	685b      	ldr	r3, [r3, #4]
 8025288:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 802528a:	2114      	movs	r1, #20
 802528c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 802528e:	f7f4 fe0d 	bl	8019eac <pbuf_remove_header>
      pbuf_cat(p, r);
 8025292:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8025294:	6878      	ldr	r0, [r7, #4]
 8025296:	f7f4 ff5d 	bl	801a154 <pbuf_cat>
      r = iprh->next_pbuf;
 802529a:	68fb      	ldr	r3, [r7, #12]
 802529c:	681b      	ldr	r3, [r3, #0]
 802529e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80252a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80252a2:	2b00      	cmp	r3, #0
 80252a4:	d1ee      	bne.n	8025284 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80252a6:	4b1e      	ldr	r3, [pc, #120]	; (8025320 <ip4_reass+0x2b4>)
 80252a8:	681b      	ldr	r3, [r3, #0]
 80252aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80252ac:	429a      	cmp	r2, r3
 80252ae:	d102      	bne.n	80252b6 <ip4_reass+0x24a>
      ipr_prev = NULL;
 80252b0:	2300      	movs	r3, #0
 80252b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80252b4:	e010      	b.n	80252d8 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80252b6:	4b1a      	ldr	r3, [pc, #104]	; (8025320 <ip4_reass+0x2b4>)
 80252b8:	681b      	ldr	r3, [r3, #0]
 80252ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80252bc:	e007      	b.n	80252ce <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80252be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80252c0:	681b      	ldr	r3, [r3, #0]
 80252c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80252c4:	429a      	cmp	r2, r3
 80252c6:	d006      	beq.n	80252d6 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80252c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80252ca:	681b      	ldr	r3, [r3, #0]
 80252cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80252ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80252d0:	2b00      	cmp	r3, #0
 80252d2:	d1f4      	bne.n	80252be <ip4_reass+0x252>
 80252d4:	e000      	b.n	80252d8 <ip4_reass+0x26c>
          break;
 80252d6:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80252d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80252da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80252dc:	f7ff fd2e 	bl	8024d3c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80252e0:	6878      	ldr	r0, [r7, #4]
 80252e2:	f7f4 fef7 	bl	801a0d4 <pbuf_clen>
 80252e6:	4603      	mov	r3, r0
 80252e8:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80252ea:	4b0c      	ldr	r3, [pc, #48]	; (802531c <ip4_reass+0x2b0>)
 80252ec:	881b      	ldrh	r3, [r3, #0]
 80252ee:	8c3a      	ldrh	r2, [r7, #32]
 80252f0:	429a      	cmp	r2, r3
 80252f2:	d906      	bls.n	8025302 <ip4_reass+0x296>
 80252f4:	4b0b      	ldr	r3, [pc, #44]	; (8025324 <ip4_reass+0x2b8>)
 80252f6:	f240 229b 	movw	r2, #667	; 0x29b
 80252fa:	490b      	ldr	r1, [pc, #44]	; (8025328 <ip4_reass+0x2bc>)
 80252fc:	480b      	ldr	r0, [pc, #44]	; (802532c <ip4_reass+0x2c0>)
 80252fe:	f001 fae5 	bl	80268cc <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8025302:	4b06      	ldr	r3, [pc, #24]	; (802531c <ip4_reass+0x2b0>)
 8025304:	881a      	ldrh	r2, [r3, #0]
 8025306:	8c3b      	ldrh	r3, [r7, #32]
 8025308:	1ad3      	subs	r3, r2, r3
 802530a:	b29a      	uxth	r2, r3
 802530c:	4b03      	ldr	r3, [pc, #12]	; (802531c <ip4_reass+0x2b0>)
 802530e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8025310:	687b      	ldr	r3, [r7, #4]
 8025312:	e038      	b.n	8025386 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8025314:	2300      	movs	r3, #0
 8025316:	e036      	b.n	8025386 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8025318:	bf00      	nop
 802531a:	e00a      	b.n	8025332 <ip4_reass+0x2c6>
 802531c:	20013d70 	.word	0x20013d70
 8025320:	20013d6c 	.word	0x20013d6c
 8025324:	0802f3b8 	.word	0x0802f3b8
 8025328:	0802f528 	.word	0x0802f528
 802532c:	0802f400 	.word	0x0802f400
    goto nullreturn_ipr;
 8025330:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8025332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025334:	2b00      	cmp	r3, #0
 8025336:	d106      	bne.n	8025346 <ip4_reass+0x2da>
 8025338:	4b15      	ldr	r3, [pc, #84]	; (8025390 <ip4_reass+0x324>)
 802533a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 802533e:	4915      	ldr	r1, [pc, #84]	; (8025394 <ip4_reass+0x328>)
 8025340:	4815      	ldr	r0, [pc, #84]	; (8025398 <ip4_reass+0x32c>)
 8025342:	f001 fac3 	bl	80268cc <iprintf>
  if (ipr->p == NULL) {
 8025346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025348:	685b      	ldr	r3, [r3, #4]
 802534a:	2b00      	cmp	r3, #0
 802534c:	d116      	bne.n	802537c <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 802534e:	4b13      	ldr	r3, [pc, #76]	; (802539c <ip4_reass+0x330>)
 8025350:	681b      	ldr	r3, [r3, #0]
 8025352:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8025354:	429a      	cmp	r2, r3
 8025356:	d006      	beq.n	8025366 <ip4_reass+0x2fa>
 8025358:	4b0d      	ldr	r3, [pc, #52]	; (8025390 <ip4_reass+0x324>)
 802535a:	f240 22ab 	movw	r2, #683	; 0x2ab
 802535e:	4910      	ldr	r1, [pc, #64]	; (80253a0 <ip4_reass+0x334>)
 8025360:	480d      	ldr	r0, [pc, #52]	; (8025398 <ip4_reass+0x32c>)
 8025362:	f001 fab3 	bl	80268cc <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8025366:	2100      	movs	r1, #0
 8025368:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802536a:	f7ff fce7 	bl	8024d3c <ip_reass_dequeue_datagram>
 802536e:	e006      	b.n	802537e <ip4_reass+0x312>
    goto nullreturn;
 8025370:	bf00      	nop
 8025372:	e004      	b.n	802537e <ip4_reass+0x312>
    goto nullreturn;
 8025374:	bf00      	nop
 8025376:	e002      	b.n	802537e <ip4_reass+0x312>
      goto nullreturn;
 8025378:	bf00      	nop
 802537a:	e000      	b.n	802537e <ip4_reass+0x312>
  }

nullreturn:
 802537c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 802537e:	6878      	ldr	r0, [r7, #4]
 8025380:	f7f4 fe1a 	bl	8019fb8 <pbuf_free>
  return NULL;
 8025384:	2300      	movs	r3, #0
}
 8025386:	4618      	mov	r0, r3
 8025388:	3738      	adds	r7, #56	; 0x38
 802538a:	46bd      	mov	sp, r7
 802538c:	bd80      	pop	{r7, pc}
 802538e:	bf00      	nop
 8025390:	0802f3b8 	.word	0x0802f3b8
 8025394:	0802f544 	.word	0x0802f544
 8025398:	0802f400 	.word	0x0802f400
 802539c:	20013d6c 	.word	0x20013d6c
 80253a0:	0802f550 	.word	0x0802f550

080253a4 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80253a4:	b580      	push	{r7, lr}
 80253a6:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80253a8:	2005      	movs	r0, #5
 80253aa:	f7f3 ff03 	bl	80191b4 <memp_malloc>
 80253ae:	4603      	mov	r3, r0
}
 80253b0:	4618      	mov	r0, r3
 80253b2:	bd80      	pop	{r7, pc}

080253b4 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80253b4:	b580      	push	{r7, lr}
 80253b6:	b082      	sub	sp, #8
 80253b8:	af00      	add	r7, sp, #0
 80253ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80253bc:	687b      	ldr	r3, [r7, #4]
 80253be:	2b00      	cmp	r3, #0
 80253c0:	d106      	bne.n	80253d0 <ip_frag_free_pbuf_custom_ref+0x1c>
 80253c2:	4b07      	ldr	r3, [pc, #28]	; (80253e0 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80253c4:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80253c8:	4906      	ldr	r1, [pc, #24]	; (80253e4 <ip_frag_free_pbuf_custom_ref+0x30>)
 80253ca:	4807      	ldr	r0, [pc, #28]	; (80253e8 <ip_frag_free_pbuf_custom_ref+0x34>)
 80253cc:	f001 fa7e 	bl	80268cc <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80253d0:	6879      	ldr	r1, [r7, #4]
 80253d2:	2005      	movs	r0, #5
 80253d4:	f7f3 ff40 	bl	8019258 <memp_free>
}
 80253d8:	bf00      	nop
 80253da:	3708      	adds	r7, #8
 80253dc:	46bd      	mov	sp, r7
 80253de:	bd80      	pop	{r7, pc}
 80253e0:	0802f3b8 	.word	0x0802f3b8
 80253e4:	0802f570 	.word	0x0802f570
 80253e8:	0802f400 	.word	0x0802f400

080253ec <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80253ec:	b580      	push	{r7, lr}
 80253ee:	b084      	sub	sp, #16
 80253f0:	af00      	add	r7, sp, #0
 80253f2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80253f4:	687b      	ldr	r3, [r7, #4]
 80253f6:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80253f8:	68fb      	ldr	r3, [r7, #12]
 80253fa:	2b00      	cmp	r3, #0
 80253fc:	d106      	bne.n	802540c <ipfrag_free_pbuf_custom+0x20>
 80253fe:	4b11      	ldr	r3, [pc, #68]	; (8025444 <ipfrag_free_pbuf_custom+0x58>)
 8025400:	f240 22ce 	movw	r2, #718	; 0x2ce
 8025404:	4910      	ldr	r1, [pc, #64]	; (8025448 <ipfrag_free_pbuf_custom+0x5c>)
 8025406:	4811      	ldr	r0, [pc, #68]	; (802544c <ipfrag_free_pbuf_custom+0x60>)
 8025408:	f001 fa60 	bl	80268cc <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 802540c:	68fa      	ldr	r2, [r7, #12]
 802540e:	687b      	ldr	r3, [r7, #4]
 8025410:	429a      	cmp	r2, r3
 8025412:	d006      	beq.n	8025422 <ipfrag_free_pbuf_custom+0x36>
 8025414:	4b0b      	ldr	r3, [pc, #44]	; (8025444 <ipfrag_free_pbuf_custom+0x58>)
 8025416:	f240 22cf 	movw	r2, #719	; 0x2cf
 802541a:	490d      	ldr	r1, [pc, #52]	; (8025450 <ipfrag_free_pbuf_custom+0x64>)
 802541c:	480b      	ldr	r0, [pc, #44]	; (802544c <ipfrag_free_pbuf_custom+0x60>)
 802541e:	f001 fa55 	bl	80268cc <iprintf>
  if (pcr->original != NULL) {
 8025422:	68fb      	ldr	r3, [r7, #12]
 8025424:	695b      	ldr	r3, [r3, #20]
 8025426:	2b00      	cmp	r3, #0
 8025428:	d004      	beq.n	8025434 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 802542a:	68fb      	ldr	r3, [r7, #12]
 802542c:	695b      	ldr	r3, [r3, #20]
 802542e:	4618      	mov	r0, r3
 8025430:	f7f4 fdc2 	bl	8019fb8 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8025434:	68f8      	ldr	r0, [r7, #12]
 8025436:	f7ff ffbd 	bl	80253b4 <ip_frag_free_pbuf_custom_ref>
}
 802543a:	bf00      	nop
 802543c:	3710      	adds	r7, #16
 802543e:	46bd      	mov	sp, r7
 8025440:	bd80      	pop	{r7, pc}
 8025442:	bf00      	nop
 8025444:	0802f3b8 	.word	0x0802f3b8
 8025448:	0802f57c 	.word	0x0802f57c
 802544c:	0802f400 	.word	0x0802f400
 8025450:	0802f588 	.word	0x0802f588

08025454 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8025454:	b580      	push	{r7, lr}
 8025456:	b094      	sub	sp, #80	; 0x50
 8025458:	af02      	add	r7, sp, #8
 802545a:	60f8      	str	r0, [r7, #12]
 802545c:	60b9      	str	r1, [r7, #8]
 802545e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8025460:	2300      	movs	r3, #0
 8025462:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8025466:	68bb      	ldr	r3, [r7, #8]
 8025468:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802546a:	3b14      	subs	r3, #20
 802546c:	2b00      	cmp	r3, #0
 802546e:	da00      	bge.n	8025472 <ip4_frag+0x1e>
 8025470:	3307      	adds	r3, #7
 8025472:	10db      	asrs	r3, r3, #3
 8025474:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8025476:	2314      	movs	r3, #20
 8025478:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 802547a:	68fb      	ldr	r3, [r7, #12]
 802547c:	685b      	ldr	r3, [r3, #4]
 802547e:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8025480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8025482:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8025484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025486:	781b      	ldrb	r3, [r3, #0]
 8025488:	f003 030f 	and.w	r3, r3, #15
 802548c:	b2db      	uxtb	r3, r3
 802548e:	009b      	lsls	r3, r3, #2
 8025490:	b2db      	uxtb	r3, r3
 8025492:	2b14      	cmp	r3, #20
 8025494:	d002      	beq.n	802549c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8025496:	f06f 0305 	mvn.w	r3, #5
 802549a:	e110      	b.n	80256be <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 802549c:	68fb      	ldr	r3, [r7, #12]
 802549e:	895b      	ldrh	r3, [r3, #10]
 80254a0:	2b13      	cmp	r3, #19
 80254a2:	d809      	bhi.n	80254b8 <ip4_frag+0x64>
 80254a4:	4b88      	ldr	r3, [pc, #544]	; (80256c8 <ip4_frag+0x274>)
 80254a6:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80254aa:	4988      	ldr	r1, [pc, #544]	; (80256cc <ip4_frag+0x278>)
 80254ac:	4888      	ldr	r0, [pc, #544]	; (80256d0 <ip4_frag+0x27c>)
 80254ae:	f001 fa0d 	bl	80268cc <iprintf>
 80254b2:	f06f 0305 	mvn.w	r3, #5
 80254b6:	e102      	b.n	80256be <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80254b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80254ba:	88db      	ldrh	r3, [r3, #6]
 80254bc:	b29b      	uxth	r3, r3
 80254be:	4618      	mov	r0, r3
 80254c0:	f7f3 f964 	bl	801878c <lwip_htons>
 80254c4:	4603      	mov	r3, r0
 80254c6:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80254c8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80254ca:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80254ce:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80254d2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80254d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80254d8:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80254da:	68fb      	ldr	r3, [r7, #12]
 80254dc:	891b      	ldrh	r3, [r3, #8]
 80254de:	3b14      	subs	r3, #20
 80254e0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80254e4:	e0e1      	b.n	80256aa <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80254e6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80254e8:	00db      	lsls	r3, r3, #3
 80254ea:	b29b      	uxth	r3, r3
 80254ec:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80254f0:	4293      	cmp	r3, r2
 80254f2:	bf28      	it	cs
 80254f4:	4613      	movcs	r3, r2
 80254f6:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80254f8:	f44f 7220 	mov.w	r2, #640	; 0x280
 80254fc:	2114      	movs	r1, #20
 80254fe:	200e      	movs	r0, #14
 8025500:	f7f4 fa76 	bl	80199f0 <pbuf_alloc>
 8025504:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8025506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025508:	2b00      	cmp	r3, #0
 802550a:	f000 80d5 	beq.w	80256b8 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 802550e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025510:	895b      	ldrh	r3, [r3, #10]
 8025512:	2b13      	cmp	r3, #19
 8025514:	d806      	bhi.n	8025524 <ip4_frag+0xd0>
 8025516:	4b6c      	ldr	r3, [pc, #432]	; (80256c8 <ip4_frag+0x274>)
 8025518:	f44f 7249 	mov.w	r2, #804	; 0x324
 802551c:	496d      	ldr	r1, [pc, #436]	; (80256d4 <ip4_frag+0x280>)
 802551e:	486c      	ldr	r0, [pc, #432]	; (80256d0 <ip4_frag+0x27c>)
 8025520:	f001 f9d4 	bl	80268cc <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8025524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025526:	685b      	ldr	r3, [r3, #4]
 8025528:	2214      	movs	r2, #20
 802552a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 802552c:	4618      	mov	r0, r3
 802552e:	f000 faf9 	bl	8025b24 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8025532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025534:	685b      	ldr	r3, [r3, #4]
 8025536:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8025538:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 802553a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 802553e:	e064      	b.n	802560a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8025540:	68fb      	ldr	r3, [r7, #12]
 8025542:	895a      	ldrh	r2, [r3, #10]
 8025544:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8025546:	1ad3      	subs	r3, r2, r3
 8025548:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 802554a:	68fb      	ldr	r3, [r7, #12]
 802554c:	895b      	ldrh	r3, [r3, #10]
 802554e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8025550:	429a      	cmp	r2, r3
 8025552:	d906      	bls.n	8025562 <ip4_frag+0x10e>
 8025554:	4b5c      	ldr	r3, [pc, #368]	; (80256c8 <ip4_frag+0x274>)
 8025556:	f240 322d 	movw	r2, #813	; 0x32d
 802555a:	495f      	ldr	r1, [pc, #380]	; (80256d8 <ip4_frag+0x284>)
 802555c:	485c      	ldr	r0, [pc, #368]	; (80256d0 <ip4_frag+0x27c>)
 802555e:	f001 f9b5 	bl	80268cc <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8025562:	8bfa      	ldrh	r2, [r7, #30]
 8025564:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8025568:	4293      	cmp	r3, r2
 802556a:	bf28      	it	cs
 802556c:	4613      	movcs	r3, r2
 802556e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8025572:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8025576:	2b00      	cmp	r3, #0
 8025578:	d105      	bne.n	8025586 <ip4_frag+0x132>
        poff = 0;
 802557a:	2300      	movs	r3, #0
 802557c:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 802557e:	68fb      	ldr	r3, [r7, #12]
 8025580:	681b      	ldr	r3, [r3, #0]
 8025582:	60fb      	str	r3, [r7, #12]
        continue;
 8025584:	e041      	b.n	802560a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8025586:	f7ff ff0d 	bl	80253a4 <ip_frag_alloc_pbuf_custom_ref>
 802558a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 802558c:	69bb      	ldr	r3, [r7, #24]
 802558e:	2b00      	cmp	r3, #0
 8025590:	d103      	bne.n	802559a <ip4_frag+0x146>
        pbuf_free(rambuf);
 8025592:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8025594:	f7f4 fd10 	bl	8019fb8 <pbuf_free>
        goto memerr;
 8025598:	e08f      	b.n	80256ba <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 802559a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 802559c:	68fb      	ldr	r3, [r7, #12]
 802559e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80255a0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80255a2:	4413      	add	r3, r2
 80255a4:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80255a8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80255ac:	9201      	str	r2, [sp, #4]
 80255ae:	9300      	str	r3, [sp, #0]
 80255b0:	4603      	mov	r3, r0
 80255b2:	2241      	movs	r2, #65	; 0x41
 80255b4:	2000      	movs	r0, #0
 80255b6:	f7f4 fb45 	bl	8019c44 <pbuf_alloced_custom>
 80255ba:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80255bc:	697b      	ldr	r3, [r7, #20]
 80255be:	2b00      	cmp	r3, #0
 80255c0:	d106      	bne.n	80255d0 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80255c2:	69b8      	ldr	r0, [r7, #24]
 80255c4:	f7ff fef6 	bl	80253b4 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80255c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80255ca:	f7f4 fcf5 	bl	8019fb8 <pbuf_free>
        goto memerr;
 80255ce:	e074      	b.n	80256ba <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80255d0:	68f8      	ldr	r0, [r7, #12]
 80255d2:	f7f4 fd97 	bl	801a104 <pbuf_ref>
      pcr->original = p;
 80255d6:	69bb      	ldr	r3, [r7, #24]
 80255d8:	68fa      	ldr	r2, [r7, #12]
 80255da:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80255dc:	69bb      	ldr	r3, [r7, #24]
 80255de:	4a3f      	ldr	r2, [pc, #252]	; (80256dc <ip4_frag+0x288>)
 80255e0:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80255e2:	6979      	ldr	r1, [r7, #20]
 80255e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80255e6:	f7f4 fdb5 	bl	801a154 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80255ea:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80255ee:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80255f2:	1ad3      	subs	r3, r2, r3
 80255f4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 80255f8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80255fc:	2b00      	cmp	r3, #0
 80255fe:	d004      	beq.n	802560a <ip4_frag+0x1b6>
        poff = 0;
 8025600:	2300      	movs	r3, #0
 8025602:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8025604:	68fb      	ldr	r3, [r7, #12]
 8025606:	681b      	ldr	r3, [r3, #0]
 8025608:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 802560a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 802560e:	2b00      	cmp	r3, #0
 8025610:	d196      	bne.n	8025540 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8025612:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8025614:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8025618:	4413      	add	r3, r2
 802561a:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 802561c:	68bb      	ldr	r3, [r7, #8]
 802561e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8025620:	f1a3 0213 	sub.w	r2, r3, #19
 8025624:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8025628:	429a      	cmp	r2, r3
 802562a:	bfcc      	ite	gt
 802562c:	2301      	movgt	r3, #1
 802562e:	2300      	movle	r3, #0
 8025630:	b2db      	uxtb	r3, r3
 8025632:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8025634:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8025638:	f3c3 030c 	ubfx	r3, r3, #0, #13
 802563c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 802563e:	6a3b      	ldr	r3, [r7, #32]
 8025640:	2b00      	cmp	r3, #0
 8025642:	d002      	beq.n	802564a <ip4_frag+0x1f6>
 8025644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025646:	2b00      	cmp	r3, #0
 8025648:	d003      	beq.n	8025652 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 802564a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 802564c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8025650:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8025652:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8025654:	4618      	mov	r0, r3
 8025656:	f7f3 f899 	bl	801878c <lwip_htons>
 802565a:	4603      	mov	r3, r0
 802565c:	461a      	mov	r2, r3
 802565e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025660:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8025662:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8025664:	3314      	adds	r3, #20
 8025666:	b29b      	uxth	r3, r3
 8025668:	4618      	mov	r0, r3
 802566a:	f7f3 f88f 	bl	801878c <lwip_htons>
 802566e:	4603      	mov	r3, r0
 8025670:	461a      	mov	r2, r3
 8025672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025674:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8025676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025678:	2200      	movs	r2, #0
 802567a:	729a      	strb	r2, [r3, #10]
 802567c:	2200      	movs	r2, #0
 802567e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8025680:	68bb      	ldr	r3, [r7, #8]
 8025682:	695b      	ldr	r3, [r3, #20]
 8025684:	687a      	ldr	r2, [r7, #4]
 8025686:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8025688:	68b8      	ldr	r0, [r7, #8]
 802568a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 802568c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802568e:	f7f4 fc93 	bl	8019fb8 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8025692:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8025696:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8025698:	1ad3      	subs	r3, r2, r3
 802569a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 802569e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80256a2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80256a4:	4413      	add	r3, r2
 80256a6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80256aa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80256ae:	2b00      	cmp	r3, #0
 80256b0:	f47f af19 	bne.w	80254e6 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80256b4:	2300      	movs	r3, #0
 80256b6:	e002      	b.n	80256be <ip4_frag+0x26a>
      goto memerr;
 80256b8:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80256ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80256be:	4618      	mov	r0, r3
 80256c0:	3748      	adds	r7, #72	; 0x48
 80256c2:	46bd      	mov	sp, r7
 80256c4:	bd80      	pop	{r7, pc}
 80256c6:	bf00      	nop
 80256c8:	0802f3b8 	.word	0x0802f3b8
 80256cc:	0802f594 	.word	0x0802f594
 80256d0:	0802f400 	.word	0x0802f400
 80256d4:	0802f5b0 	.word	0x0802f5b0
 80256d8:	0802f5d0 	.word	0x0802f5d0
 80256dc:	080253ed 	.word	0x080253ed

080256e0 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80256e0:	b580      	push	{r7, lr}
 80256e2:	b086      	sub	sp, #24
 80256e4:	af00      	add	r7, sp, #0
 80256e6:	6078      	str	r0, [r7, #4]
 80256e8:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80256ea:	230e      	movs	r3, #14
 80256ec:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80256ee:	687b      	ldr	r3, [r7, #4]
 80256f0:	895b      	ldrh	r3, [r3, #10]
 80256f2:	2b0e      	cmp	r3, #14
 80256f4:	d96e      	bls.n	80257d4 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80256f6:	687b      	ldr	r3, [r7, #4]
 80256f8:	7bdb      	ldrb	r3, [r3, #15]
 80256fa:	2b00      	cmp	r3, #0
 80256fc:	d106      	bne.n	802570c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80256fe:	683b      	ldr	r3, [r7, #0]
 8025700:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8025704:	3301      	adds	r3, #1
 8025706:	b2da      	uxtb	r2, r3
 8025708:	687b      	ldr	r3, [r7, #4]
 802570a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 802570c:	687b      	ldr	r3, [r7, #4]
 802570e:	685b      	ldr	r3, [r3, #4]
 8025710:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8025712:	693b      	ldr	r3, [r7, #16]
 8025714:	7b1a      	ldrb	r2, [r3, #12]
 8025716:	7b5b      	ldrb	r3, [r3, #13]
 8025718:	021b      	lsls	r3, r3, #8
 802571a:	4313      	orrs	r3, r2
 802571c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 802571e:	693b      	ldr	r3, [r7, #16]
 8025720:	781b      	ldrb	r3, [r3, #0]
 8025722:	f003 0301 	and.w	r3, r3, #1
 8025726:	2b00      	cmp	r3, #0
 8025728:	d023      	beq.n	8025772 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 802572a:	693b      	ldr	r3, [r7, #16]
 802572c:	781b      	ldrb	r3, [r3, #0]
 802572e:	2b01      	cmp	r3, #1
 8025730:	d10f      	bne.n	8025752 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8025732:	693b      	ldr	r3, [r7, #16]
 8025734:	785b      	ldrb	r3, [r3, #1]
 8025736:	2b00      	cmp	r3, #0
 8025738:	d11b      	bne.n	8025772 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 802573a:	693b      	ldr	r3, [r7, #16]
 802573c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 802573e:	2b5e      	cmp	r3, #94	; 0x5e
 8025740:	d117      	bne.n	8025772 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8025742:	687b      	ldr	r3, [r7, #4]
 8025744:	7b5b      	ldrb	r3, [r3, #13]
 8025746:	f043 0310 	orr.w	r3, r3, #16
 802574a:	b2da      	uxtb	r2, r3
 802574c:	687b      	ldr	r3, [r7, #4]
 802574e:	735a      	strb	r2, [r3, #13]
 8025750:	e00f      	b.n	8025772 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8025752:	693b      	ldr	r3, [r7, #16]
 8025754:	2206      	movs	r2, #6
 8025756:	4928      	ldr	r1, [pc, #160]	; (80257f8 <ethernet_input+0x118>)
 8025758:	4618      	mov	r0, r3
 802575a:	f000 f9d3 	bl	8025b04 <memcmp>
 802575e:	4603      	mov	r3, r0
 8025760:	2b00      	cmp	r3, #0
 8025762:	d106      	bne.n	8025772 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8025764:	687b      	ldr	r3, [r7, #4]
 8025766:	7b5b      	ldrb	r3, [r3, #13]
 8025768:	f043 0308 	orr.w	r3, r3, #8
 802576c:	b2da      	uxtb	r2, r3
 802576e:	687b      	ldr	r3, [r7, #4]
 8025770:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8025772:	89fb      	ldrh	r3, [r7, #14]
 8025774:	2b08      	cmp	r3, #8
 8025776:	d003      	beq.n	8025780 <ethernet_input+0xa0>
 8025778:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 802577c:	d014      	beq.n	80257a8 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 802577e:	e032      	b.n	80257e6 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8025780:	683b      	ldr	r3, [r7, #0]
 8025782:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8025786:	f003 0308 	and.w	r3, r3, #8
 802578a:	2b00      	cmp	r3, #0
 802578c:	d024      	beq.n	80257d8 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 802578e:	8afb      	ldrh	r3, [r7, #22]
 8025790:	4619      	mov	r1, r3
 8025792:	6878      	ldr	r0, [r7, #4]
 8025794:	f7f4 fb8a 	bl	8019eac <pbuf_remove_header>
 8025798:	4603      	mov	r3, r0
 802579a:	2b00      	cmp	r3, #0
 802579c:	d11e      	bne.n	80257dc <ethernet_input+0xfc>
        ip4_input(p, netif);
 802579e:	6839      	ldr	r1, [r7, #0]
 80257a0:	6878      	ldr	r0, [r7, #4]
 80257a2:	f7fe ff03 	bl	80245ac <ip4_input>
      break;
 80257a6:	e013      	b.n	80257d0 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80257a8:	683b      	ldr	r3, [r7, #0]
 80257aa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80257ae:	f003 0308 	and.w	r3, r3, #8
 80257b2:	2b00      	cmp	r3, #0
 80257b4:	d014      	beq.n	80257e0 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80257b6:	8afb      	ldrh	r3, [r7, #22]
 80257b8:	4619      	mov	r1, r3
 80257ba:	6878      	ldr	r0, [r7, #4]
 80257bc:	f7f4 fb76 	bl	8019eac <pbuf_remove_header>
 80257c0:	4603      	mov	r3, r0
 80257c2:	2b00      	cmp	r3, #0
 80257c4:	d10e      	bne.n	80257e4 <ethernet_input+0x104>
        etharp_input(p, netif);
 80257c6:	6839      	ldr	r1, [r7, #0]
 80257c8:	6878      	ldr	r0, [r7, #4]
 80257ca:	f7fe f89f 	bl	802390c <etharp_input>
      break;
 80257ce:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80257d0:	2300      	movs	r3, #0
 80257d2:	e00c      	b.n	80257ee <ethernet_input+0x10e>
    goto free_and_return;
 80257d4:	bf00      	nop
 80257d6:	e006      	b.n	80257e6 <ethernet_input+0x106>
        goto free_and_return;
 80257d8:	bf00      	nop
 80257da:	e004      	b.n	80257e6 <ethernet_input+0x106>
        goto free_and_return;
 80257dc:	bf00      	nop
 80257de:	e002      	b.n	80257e6 <ethernet_input+0x106>
        goto free_and_return;
 80257e0:	bf00      	nop
 80257e2:	e000      	b.n	80257e6 <ethernet_input+0x106>
        goto free_and_return;
 80257e4:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80257e6:	6878      	ldr	r0, [r7, #4]
 80257e8:	f7f4 fbe6 	bl	8019fb8 <pbuf_free>
  return ERR_OK;
 80257ec:	2300      	movs	r3, #0
}
 80257ee:	4618      	mov	r0, r3
 80257f0:	3718      	adds	r7, #24
 80257f2:	46bd      	mov	sp, r7
 80257f4:	bd80      	pop	{r7, pc}
 80257f6:	bf00      	nop
 80257f8:	08030e2c 	.word	0x08030e2c

080257fc <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80257fc:	b580      	push	{r7, lr}
 80257fe:	b086      	sub	sp, #24
 8025800:	af00      	add	r7, sp, #0
 8025802:	60f8      	str	r0, [r7, #12]
 8025804:	60b9      	str	r1, [r7, #8]
 8025806:	607a      	str	r2, [r7, #4]
 8025808:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 802580a:	8c3b      	ldrh	r3, [r7, #32]
 802580c:	4618      	mov	r0, r3
 802580e:	f7f2 ffbd 	bl	801878c <lwip_htons>
 8025812:	4603      	mov	r3, r0
 8025814:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8025816:	210e      	movs	r1, #14
 8025818:	68b8      	ldr	r0, [r7, #8]
 802581a:	f7f4 fb37 	bl	8019e8c <pbuf_add_header>
 802581e:	4603      	mov	r3, r0
 8025820:	2b00      	cmp	r3, #0
 8025822:	d125      	bne.n	8025870 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8025824:	68bb      	ldr	r3, [r7, #8]
 8025826:	685b      	ldr	r3, [r3, #4]
 8025828:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 802582a:	693b      	ldr	r3, [r7, #16]
 802582c:	8afa      	ldrh	r2, [r7, #22]
 802582e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8025830:	693b      	ldr	r3, [r7, #16]
 8025832:	2206      	movs	r2, #6
 8025834:	6839      	ldr	r1, [r7, #0]
 8025836:	4618      	mov	r0, r3
 8025838:	f000 f974 	bl	8025b24 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 802583c:	693b      	ldr	r3, [r7, #16]
 802583e:	3306      	adds	r3, #6
 8025840:	2206      	movs	r2, #6
 8025842:	6879      	ldr	r1, [r7, #4]
 8025844:	4618      	mov	r0, r3
 8025846:	f000 f96d 	bl	8025b24 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 802584a:	68fb      	ldr	r3, [r7, #12]
 802584c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8025850:	2b06      	cmp	r3, #6
 8025852:	d006      	beq.n	8025862 <ethernet_output+0x66>
 8025854:	4b0a      	ldr	r3, [pc, #40]	; (8025880 <ethernet_output+0x84>)
 8025856:	f44f 7299 	mov.w	r2, #306	; 0x132
 802585a:	490a      	ldr	r1, [pc, #40]	; (8025884 <ethernet_output+0x88>)
 802585c:	480a      	ldr	r0, [pc, #40]	; (8025888 <ethernet_output+0x8c>)
 802585e:	f001 f835 	bl	80268cc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8025862:	68fb      	ldr	r3, [r7, #12]
 8025864:	699b      	ldr	r3, [r3, #24]
 8025866:	68b9      	ldr	r1, [r7, #8]
 8025868:	68f8      	ldr	r0, [r7, #12]
 802586a:	4798      	blx	r3
 802586c:	4603      	mov	r3, r0
 802586e:	e002      	b.n	8025876 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8025870:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8025872:	f06f 0301 	mvn.w	r3, #1
}
 8025876:	4618      	mov	r0, r3
 8025878:	3718      	adds	r7, #24
 802587a:	46bd      	mov	sp, r7
 802587c:	bd80      	pop	{r7, pc}
 802587e:	bf00      	nop
 8025880:	0802f5e0 	.word	0x0802f5e0
 8025884:	0802f618 	.word	0x0802f618
 8025888:	0802f64c 	.word	0x0802f64c

0802588c <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 802588c:	b580      	push	{r7, lr}
 802588e:	b082      	sub	sp, #8
 8025890:	af00      	add	r7, sp, #0
 8025892:	6078      	str	r0, [r7, #4]
 8025894:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8025896:	683b      	ldr	r3, [r7, #0]
 8025898:	2200      	movs	r2, #0
 802589a:	2104      	movs	r1, #4
 802589c:	4618      	mov	r0, r3
 802589e:	f7ec fcc5 	bl	801222c <osMessageQueueNew>
 80258a2:	4602      	mov	r2, r0
 80258a4:	687b      	ldr	r3, [r7, #4]
 80258a6:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 80258a8:	687b      	ldr	r3, [r7, #4]
 80258aa:	681b      	ldr	r3, [r3, #0]
 80258ac:	2b00      	cmp	r3, #0
 80258ae:	d102      	bne.n	80258b6 <sys_mbox_new+0x2a>
    return ERR_MEM;
 80258b0:	f04f 33ff 	mov.w	r3, #4294967295
 80258b4:	e000      	b.n	80258b8 <sys_mbox_new+0x2c>

  return ERR_OK;
 80258b6:	2300      	movs	r3, #0
}
 80258b8:	4618      	mov	r0, r3
 80258ba:	3708      	adds	r7, #8
 80258bc:	46bd      	mov	sp, r7
 80258be:	bd80      	pop	{r7, pc}

080258c0 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 80258c0:	b580      	push	{r7, lr}
 80258c2:	b084      	sub	sp, #16
 80258c4:	af00      	add	r7, sp, #0
 80258c6:	6078      	str	r0, [r7, #4]
 80258c8:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 80258ca:	687b      	ldr	r3, [r7, #4]
 80258cc:	6818      	ldr	r0, [r3, #0]
 80258ce:	4639      	mov	r1, r7
 80258d0:	2300      	movs	r3, #0
 80258d2:	2200      	movs	r2, #0
 80258d4:	f7ec fd1e 	bl	8012314 <osMessageQueuePut>
 80258d8:	4603      	mov	r3, r0
 80258da:	2b00      	cmp	r3, #0
 80258dc:	d102      	bne.n	80258e4 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 80258de:	2300      	movs	r3, #0
 80258e0:	73fb      	strb	r3, [r7, #15]
 80258e2:	e001      	b.n	80258e8 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 80258e4:	23ff      	movs	r3, #255	; 0xff
 80258e6:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 80258e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80258ec:	4618      	mov	r0, r3
 80258ee:	3710      	adds	r7, #16
 80258f0:	46bd      	mov	sp, r7
 80258f2:	bd80      	pop	{r7, pc}

080258f4 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80258f4:	b580      	push	{r7, lr}
 80258f6:	b086      	sub	sp, #24
 80258f8:	af00      	add	r7, sp, #0
 80258fa:	60f8      	str	r0, [r7, #12]
 80258fc:	60b9      	str	r1, [r7, #8]
 80258fe:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8025900:	f7ec f998 	bl	8011c34 <osKernelGetTickCount>
 8025904:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 8025906:	687b      	ldr	r3, [r7, #4]
 8025908:	2b00      	cmp	r3, #0
 802590a:	d013      	beq.n	8025934 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 802590c:	68fb      	ldr	r3, [r7, #12]
 802590e:	6818      	ldr	r0, [r3, #0]
 8025910:	687b      	ldr	r3, [r7, #4]
 8025912:	2200      	movs	r2, #0
 8025914:	68b9      	ldr	r1, [r7, #8]
 8025916:	f7ec fd5d 	bl	80123d4 <osMessageQueueGet>
 802591a:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 802591c:	693b      	ldr	r3, [r7, #16]
 802591e:	2b00      	cmp	r3, #0
 8025920:	d105      	bne.n	802592e <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 8025922:	f7ec f987 	bl	8011c34 <osKernelGetTickCount>
 8025926:	4602      	mov	r2, r0
 8025928:	697b      	ldr	r3, [r7, #20]
 802592a:	1ad3      	subs	r3, r2, r3
 802592c:	e00f      	b.n	802594e <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 802592e:	f04f 33ff 	mov.w	r3, #4294967295
 8025932:	e00c      	b.n	802594e <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 8025934:	68fb      	ldr	r3, [r7, #12]
 8025936:	6818      	ldr	r0, [r3, #0]
 8025938:	f04f 33ff 	mov.w	r3, #4294967295
 802593c:	2200      	movs	r2, #0
 802593e:	68b9      	ldr	r1, [r7, #8]
 8025940:	f7ec fd48 	bl	80123d4 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 8025944:	f7ec f976 	bl	8011c34 <osKernelGetTickCount>
 8025948:	4602      	mov	r2, r0
 802594a:	697b      	ldr	r3, [r7, #20]
 802594c:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 802594e:	4618      	mov	r0, r3
 8025950:	3718      	adds	r7, #24
 8025952:	46bd      	mov	sp, r7
 8025954:	bd80      	pop	{r7, pc}

08025956 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8025956:	b480      	push	{r7}
 8025958:	b083      	sub	sp, #12
 802595a:	af00      	add	r7, sp, #0
 802595c:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 802595e:	687b      	ldr	r3, [r7, #4]
 8025960:	681b      	ldr	r3, [r3, #0]
 8025962:	2b00      	cmp	r3, #0
 8025964:	d101      	bne.n	802596a <sys_mbox_valid+0x14>
    return 0;
 8025966:	2300      	movs	r3, #0
 8025968:	e000      	b.n	802596c <sys_mbox_valid+0x16>
  else
    return 1;
 802596a:	2301      	movs	r3, #1
}
 802596c:	4618      	mov	r0, r3
 802596e:	370c      	adds	r7, #12
 8025970:	46bd      	mov	sp, r7
 8025972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025976:	4770      	bx	lr

08025978 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8025978:	b580      	push	{r7, lr}
 802597a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 802597c:	2000      	movs	r0, #0
 802597e:	f7ec fa27 	bl	8011dd0 <osMutexNew>
 8025982:	4603      	mov	r3, r0
 8025984:	4a01      	ldr	r2, [pc, #4]	; (802598c <sys_init+0x14>)
 8025986:	6013      	str	r3, [r2, #0]
#endif
}
 8025988:	bf00      	nop
 802598a:	bd80      	pop	{r7, pc}
 802598c:	2001c140 	.word	0x2001c140

08025990 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8025990:	b580      	push	{r7, lr}
 8025992:	b082      	sub	sp, #8
 8025994:	af00      	add	r7, sp, #0
 8025996:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8025998:	2000      	movs	r0, #0
 802599a:	f7ec fa19 	bl	8011dd0 <osMutexNew>
 802599e:	4602      	mov	r2, r0
 80259a0:	687b      	ldr	r3, [r7, #4]
 80259a2:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 80259a4:	687b      	ldr	r3, [r7, #4]
 80259a6:	681b      	ldr	r3, [r3, #0]
 80259a8:	2b00      	cmp	r3, #0
 80259aa:	d102      	bne.n	80259b2 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80259ac:	f04f 33ff 	mov.w	r3, #4294967295
 80259b0:	e000      	b.n	80259b4 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 80259b2:	2300      	movs	r3, #0
}
 80259b4:	4618      	mov	r0, r3
 80259b6:	3708      	adds	r7, #8
 80259b8:	46bd      	mov	sp, r7
 80259ba:	bd80      	pop	{r7, pc}

080259bc <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 80259bc:	b580      	push	{r7, lr}
 80259be:	b082      	sub	sp, #8
 80259c0:	af00      	add	r7, sp, #0
 80259c2:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 80259c4:	687b      	ldr	r3, [r7, #4]
 80259c6:	681b      	ldr	r3, [r3, #0]
 80259c8:	f04f 31ff 	mov.w	r1, #4294967295
 80259cc:	4618      	mov	r0, r3
 80259ce:	f7ec fa85 	bl	8011edc <osMutexAcquire>
#endif
}
 80259d2:	bf00      	nop
 80259d4:	3708      	adds	r7, #8
 80259d6:	46bd      	mov	sp, r7
 80259d8:	bd80      	pop	{r7, pc}

080259da <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 80259da:	b580      	push	{r7, lr}
 80259dc:	b082      	sub	sp, #8
 80259de:	af00      	add	r7, sp, #0
 80259e0:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 80259e2:	687b      	ldr	r3, [r7, #4]
 80259e4:	681b      	ldr	r3, [r3, #0]
 80259e6:	4618      	mov	r0, r3
 80259e8:	f7ec fac3 	bl	8011f72 <osMutexRelease>
}
 80259ec:	bf00      	nop
 80259ee:	3708      	adds	r7, #8
 80259f0:	46bd      	mov	sp, r7
 80259f2:	bd80      	pop	{r7, pc}

080259f4 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80259f4:	b580      	push	{r7, lr}
 80259f6:	b08e      	sub	sp, #56	; 0x38
 80259f8:	af00      	add	r7, sp, #0
 80259fa:	60f8      	str	r0, [r7, #12]
 80259fc:	60b9      	str	r1, [r7, #8]
 80259fe:	607a      	str	r2, [r7, #4]
 8025a00:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 8025a02:	f107 0314 	add.w	r3, r7, #20
 8025a06:	2224      	movs	r2, #36	; 0x24
 8025a08:	2100      	movs	r1, #0
 8025a0a:	4618      	mov	r0, r3
 8025a0c:	f000 f8b2 	bl	8025b74 <memset>
 8025a10:	68fb      	ldr	r3, [r7, #12]
 8025a12:	617b      	str	r3, [r7, #20]
 8025a14:	683b      	ldr	r3, [r7, #0]
 8025a16:	62bb      	str	r3, [r7, #40]	; 0x28
 8025a18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8025a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8025a1c:	f107 0314 	add.w	r3, r7, #20
 8025a20:	461a      	mov	r2, r3
 8025a22:	6879      	ldr	r1, [r7, #4]
 8025a24:	68b8      	ldr	r0, [r7, #8]
 8025a26:	f7ec f91a 	bl	8011c5e <osThreadNew>
 8025a2a:	4603      	mov	r3, r0
#endif
}
 8025a2c:	4618      	mov	r0, r3
 8025a2e:	3738      	adds	r7, #56	; 0x38
 8025a30:	46bd      	mov	sp, r7
 8025a32:	bd80      	pop	{r7, pc}

08025a34 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8025a34:	b580      	push	{r7, lr}
 8025a36:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8025a38:	4b04      	ldr	r3, [pc, #16]	; (8025a4c <sys_arch_protect+0x18>)
 8025a3a:	681b      	ldr	r3, [r3, #0]
 8025a3c:	f04f 31ff 	mov.w	r1, #4294967295
 8025a40:	4618      	mov	r0, r3
 8025a42:	f7ec fa4b 	bl	8011edc <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 8025a46:	2301      	movs	r3, #1
}
 8025a48:	4618      	mov	r0, r3
 8025a4a:	bd80      	pop	{r7, pc}
 8025a4c:	2001c140 	.word	0x2001c140

08025a50 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8025a50:	b580      	push	{r7, lr}
 8025a52:	b082      	sub	sp, #8
 8025a54:	af00      	add	r7, sp, #0
 8025a56:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8025a58:	4b04      	ldr	r3, [pc, #16]	; (8025a6c <sys_arch_unprotect+0x1c>)
 8025a5a:	681b      	ldr	r3, [r3, #0]
 8025a5c:	4618      	mov	r0, r3
 8025a5e:	f7ec fa88 	bl	8011f72 <osMutexRelease>
}
 8025a62:	bf00      	nop
 8025a64:	3708      	adds	r7, #8
 8025a66:	46bd      	mov	sp, r7
 8025a68:	bd80      	pop	{r7, pc}
 8025a6a:	bf00      	nop
 8025a6c:	2001c140 	.word	0x2001c140

08025a70 <atoi>:
 8025a70:	220a      	movs	r2, #10
 8025a72:	2100      	movs	r1, #0
 8025a74:	f001 bfe6 	b.w	8027a44 <strtol>

08025a78 <fiprintf>:
 8025a78:	b40e      	push	{r1, r2, r3}
 8025a7a:	b503      	push	{r0, r1, lr}
 8025a7c:	4601      	mov	r1, r0
 8025a7e:	ab03      	add	r3, sp, #12
 8025a80:	4805      	ldr	r0, [pc, #20]	; (8025a98 <fiprintf+0x20>)
 8025a82:	f853 2b04 	ldr.w	r2, [r3], #4
 8025a86:	6800      	ldr	r0, [r0, #0]
 8025a88:	9301      	str	r3, [sp, #4]
 8025a8a:	f000 f985 	bl	8025d98 <_vfiprintf_r>
 8025a8e:	b002      	add	sp, #8
 8025a90:	f85d eb04 	ldr.w	lr, [sp], #4
 8025a94:	b003      	add	sp, #12
 8025a96:	4770      	bx	lr
 8025a98:	10000070 	.word	0x10000070

08025a9c <__libc_init_array>:
 8025a9c:	b570      	push	{r4, r5, r6, lr}
 8025a9e:	4d0d      	ldr	r5, [pc, #52]	; (8025ad4 <__libc_init_array+0x38>)
 8025aa0:	4c0d      	ldr	r4, [pc, #52]	; (8025ad8 <__libc_init_array+0x3c>)
 8025aa2:	1b64      	subs	r4, r4, r5
 8025aa4:	10a4      	asrs	r4, r4, #2
 8025aa6:	2600      	movs	r6, #0
 8025aa8:	42a6      	cmp	r6, r4
 8025aaa:	d109      	bne.n	8025ac0 <__libc_init_array+0x24>
 8025aac:	4d0b      	ldr	r5, [pc, #44]	; (8025adc <__libc_init_array+0x40>)
 8025aae:	4c0c      	ldr	r4, [pc, #48]	; (8025ae0 <__libc_init_array+0x44>)
 8025ab0:	f005 f81e 	bl	802aaf0 <_init>
 8025ab4:	1b64      	subs	r4, r4, r5
 8025ab6:	10a4      	asrs	r4, r4, #2
 8025ab8:	2600      	movs	r6, #0
 8025aba:	42a6      	cmp	r6, r4
 8025abc:	d105      	bne.n	8025aca <__libc_init_array+0x2e>
 8025abe:	bd70      	pop	{r4, r5, r6, pc}
 8025ac0:	f855 3b04 	ldr.w	r3, [r5], #4
 8025ac4:	4798      	blx	r3
 8025ac6:	3601      	adds	r6, #1
 8025ac8:	e7ee      	b.n	8025aa8 <__libc_init_array+0xc>
 8025aca:	f855 3b04 	ldr.w	r3, [r5], #4
 8025ace:	4798      	blx	r3
 8025ad0:	3601      	adds	r6, #1
 8025ad2:	e7f2      	b.n	8025aba <__libc_init_array+0x1e>
 8025ad4:	080313b8 	.word	0x080313b8
 8025ad8:	080313b8 	.word	0x080313b8
 8025adc:	080313b8 	.word	0x080313b8
 8025ae0:	080313bc 	.word	0x080313bc

08025ae4 <malloc>:
 8025ae4:	4b02      	ldr	r3, [pc, #8]	; (8025af0 <malloc+0xc>)
 8025ae6:	4601      	mov	r1, r0
 8025ae8:	6818      	ldr	r0, [r3, #0]
 8025aea:	f000 b8b7 	b.w	8025c5c <_malloc_r>
 8025aee:	bf00      	nop
 8025af0:	10000070 	.word	0x10000070

08025af4 <free>:
 8025af4:	4b02      	ldr	r3, [pc, #8]	; (8025b00 <free+0xc>)
 8025af6:	4601      	mov	r1, r0
 8025af8:	6818      	ldr	r0, [r3, #0]
 8025afa:	f000 b843 	b.w	8025b84 <_free_r>
 8025afe:	bf00      	nop
 8025b00:	10000070 	.word	0x10000070

08025b04 <memcmp>:
 8025b04:	b510      	push	{r4, lr}
 8025b06:	3901      	subs	r1, #1
 8025b08:	4402      	add	r2, r0
 8025b0a:	4290      	cmp	r0, r2
 8025b0c:	d101      	bne.n	8025b12 <memcmp+0xe>
 8025b0e:	2000      	movs	r0, #0
 8025b10:	e005      	b.n	8025b1e <memcmp+0x1a>
 8025b12:	7803      	ldrb	r3, [r0, #0]
 8025b14:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8025b18:	42a3      	cmp	r3, r4
 8025b1a:	d001      	beq.n	8025b20 <memcmp+0x1c>
 8025b1c:	1b18      	subs	r0, r3, r4
 8025b1e:	bd10      	pop	{r4, pc}
 8025b20:	3001      	adds	r0, #1
 8025b22:	e7f2      	b.n	8025b0a <memcmp+0x6>

08025b24 <memcpy>:
 8025b24:	440a      	add	r2, r1
 8025b26:	4291      	cmp	r1, r2
 8025b28:	f100 33ff 	add.w	r3, r0, #4294967295
 8025b2c:	d100      	bne.n	8025b30 <memcpy+0xc>
 8025b2e:	4770      	bx	lr
 8025b30:	b510      	push	{r4, lr}
 8025b32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8025b36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8025b3a:	4291      	cmp	r1, r2
 8025b3c:	d1f9      	bne.n	8025b32 <memcpy+0xe>
 8025b3e:	bd10      	pop	{r4, pc}

08025b40 <memmove>:
 8025b40:	4288      	cmp	r0, r1
 8025b42:	b510      	push	{r4, lr}
 8025b44:	eb01 0402 	add.w	r4, r1, r2
 8025b48:	d902      	bls.n	8025b50 <memmove+0x10>
 8025b4a:	4284      	cmp	r4, r0
 8025b4c:	4623      	mov	r3, r4
 8025b4e:	d807      	bhi.n	8025b60 <memmove+0x20>
 8025b50:	1e43      	subs	r3, r0, #1
 8025b52:	42a1      	cmp	r1, r4
 8025b54:	d008      	beq.n	8025b68 <memmove+0x28>
 8025b56:	f811 2b01 	ldrb.w	r2, [r1], #1
 8025b5a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8025b5e:	e7f8      	b.n	8025b52 <memmove+0x12>
 8025b60:	4402      	add	r2, r0
 8025b62:	4601      	mov	r1, r0
 8025b64:	428a      	cmp	r2, r1
 8025b66:	d100      	bne.n	8025b6a <memmove+0x2a>
 8025b68:	bd10      	pop	{r4, pc}
 8025b6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8025b6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8025b72:	e7f7      	b.n	8025b64 <memmove+0x24>

08025b74 <memset>:
 8025b74:	4402      	add	r2, r0
 8025b76:	4603      	mov	r3, r0
 8025b78:	4293      	cmp	r3, r2
 8025b7a:	d100      	bne.n	8025b7e <memset+0xa>
 8025b7c:	4770      	bx	lr
 8025b7e:	f803 1b01 	strb.w	r1, [r3], #1
 8025b82:	e7f9      	b.n	8025b78 <memset+0x4>

08025b84 <_free_r>:
 8025b84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8025b86:	2900      	cmp	r1, #0
 8025b88:	d044      	beq.n	8025c14 <_free_r+0x90>
 8025b8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8025b8e:	9001      	str	r0, [sp, #4]
 8025b90:	2b00      	cmp	r3, #0
 8025b92:	f1a1 0404 	sub.w	r4, r1, #4
 8025b96:	bfb8      	it	lt
 8025b98:	18e4      	addlt	r4, r4, r3
 8025b9a:	f003 fc95 	bl	80294c8 <__malloc_lock>
 8025b9e:	4a1e      	ldr	r2, [pc, #120]	; (8025c18 <_free_r+0x94>)
 8025ba0:	9801      	ldr	r0, [sp, #4]
 8025ba2:	6813      	ldr	r3, [r2, #0]
 8025ba4:	b933      	cbnz	r3, 8025bb4 <_free_r+0x30>
 8025ba6:	6063      	str	r3, [r4, #4]
 8025ba8:	6014      	str	r4, [r2, #0]
 8025baa:	b003      	add	sp, #12
 8025bac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8025bb0:	f003 bc90 	b.w	80294d4 <__malloc_unlock>
 8025bb4:	42a3      	cmp	r3, r4
 8025bb6:	d908      	bls.n	8025bca <_free_r+0x46>
 8025bb8:	6825      	ldr	r5, [r4, #0]
 8025bba:	1961      	adds	r1, r4, r5
 8025bbc:	428b      	cmp	r3, r1
 8025bbe:	bf01      	itttt	eq
 8025bc0:	6819      	ldreq	r1, [r3, #0]
 8025bc2:	685b      	ldreq	r3, [r3, #4]
 8025bc4:	1949      	addeq	r1, r1, r5
 8025bc6:	6021      	streq	r1, [r4, #0]
 8025bc8:	e7ed      	b.n	8025ba6 <_free_r+0x22>
 8025bca:	461a      	mov	r2, r3
 8025bcc:	685b      	ldr	r3, [r3, #4]
 8025bce:	b10b      	cbz	r3, 8025bd4 <_free_r+0x50>
 8025bd0:	42a3      	cmp	r3, r4
 8025bd2:	d9fa      	bls.n	8025bca <_free_r+0x46>
 8025bd4:	6811      	ldr	r1, [r2, #0]
 8025bd6:	1855      	adds	r5, r2, r1
 8025bd8:	42a5      	cmp	r5, r4
 8025bda:	d10b      	bne.n	8025bf4 <_free_r+0x70>
 8025bdc:	6824      	ldr	r4, [r4, #0]
 8025bde:	4421      	add	r1, r4
 8025be0:	1854      	adds	r4, r2, r1
 8025be2:	42a3      	cmp	r3, r4
 8025be4:	6011      	str	r1, [r2, #0]
 8025be6:	d1e0      	bne.n	8025baa <_free_r+0x26>
 8025be8:	681c      	ldr	r4, [r3, #0]
 8025bea:	685b      	ldr	r3, [r3, #4]
 8025bec:	6053      	str	r3, [r2, #4]
 8025bee:	4421      	add	r1, r4
 8025bf0:	6011      	str	r1, [r2, #0]
 8025bf2:	e7da      	b.n	8025baa <_free_r+0x26>
 8025bf4:	d902      	bls.n	8025bfc <_free_r+0x78>
 8025bf6:	230c      	movs	r3, #12
 8025bf8:	6003      	str	r3, [r0, #0]
 8025bfa:	e7d6      	b.n	8025baa <_free_r+0x26>
 8025bfc:	6825      	ldr	r5, [r4, #0]
 8025bfe:	1961      	adds	r1, r4, r5
 8025c00:	428b      	cmp	r3, r1
 8025c02:	bf04      	itt	eq
 8025c04:	6819      	ldreq	r1, [r3, #0]
 8025c06:	685b      	ldreq	r3, [r3, #4]
 8025c08:	6063      	str	r3, [r4, #4]
 8025c0a:	bf04      	itt	eq
 8025c0c:	1949      	addeq	r1, r1, r5
 8025c0e:	6021      	streq	r1, [r4, #0]
 8025c10:	6054      	str	r4, [r2, #4]
 8025c12:	e7ca      	b.n	8025baa <_free_r+0x26>
 8025c14:	b003      	add	sp, #12
 8025c16:	bd30      	pop	{r4, r5, pc}
 8025c18:	20013d74 	.word	0x20013d74

08025c1c <sbrk_aligned>:
 8025c1c:	b570      	push	{r4, r5, r6, lr}
 8025c1e:	4e0e      	ldr	r6, [pc, #56]	; (8025c58 <sbrk_aligned+0x3c>)
 8025c20:	460c      	mov	r4, r1
 8025c22:	6831      	ldr	r1, [r6, #0]
 8025c24:	4605      	mov	r5, r0
 8025c26:	b911      	cbnz	r1, 8025c2e <sbrk_aligned+0x12>
 8025c28:	f000 ff24 	bl	8026a74 <_sbrk_r>
 8025c2c:	6030      	str	r0, [r6, #0]
 8025c2e:	4621      	mov	r1, r4
 8025c30:	4628      	mov	r0, r5
 8025c32:	f000 ff1f 	bl	8026a74 <_sbrk_r>
 8025c36:	1c43      	adds	r3, r0, #1
 8025c38:	d00a      	beq.n	8025c50 <sbrk_aligned+0x34>
 8025c3a:	1cc4      	adds	r4, r0, #3
 8025c3c:	f024 0403 	bic.w	r4, r4, #3
 8025c40:	42a0      	cmp	r0, r4
 8025c42:	d007      	beq.n	8025c54 <sbrk_aligned+0x38>
 8025c44:	1a21      	subs	r1, r4, r0
 8025c46:	4628      	mov	r0, r5
 8025c48:	f000 ff14 	bl	8026a74 <_sbrk_r>
 8025c4c:	3001      	adds	r0, #1
 8025c4e:	d101      	bne.n	8025c54 <sbrk_aligned+0x38>
 8025c50:	f04f 34ff 	mov.w	r4, #4294967295
 8025c54:	4620      	mov	r0, r4
 8025c56:	bd70      	pop	{r4, r5, r6, pc}
 8025c58:	20013d78 	.word	0x20013d78

08025c5c <_malloc_r>:
 8025c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025c60:	1ccd      	adds	r5, r1, #3
 8025c62:	f025 0503 	bic.w	r5, r5, #3
 8025c66:	3508      	adds	r5, #8
 8025c68:	2d0c      	cmp	r5, #12
 8025c6a:	bf38      	it	cc
 8025c6c:	250c      	movcc	r5, #12
 8025c6e:	2d00      	cmp	r5, #0
 8025c70:	4607      	mov	r7, r0
 8025c72:	db01      	blt.n	8025c78 <_malloc_r+0x1c>
 8025c74:	42a9      	cmp	r1, r5
 8025c76:	d905      	bls.n	8025c84 <_malloc_r+0x28>
 8025c78:	230c      	movs	r3, #12
 8025c7a:	603b      	str	r3, [r7, #0]
 8025c7c:	2600      	movs	r6, #0
 8025c7e:	4630      	mov	r0, r6
 8025c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025c84:	4e2e      	ldr	r6, [pc, #184]	; (8025d40 <_malloc_r+0xe4>)
 8025c86:	f003 fc1f 	bl	80294c8 <__malloc_lock>
 8025c8a:	6833      	ldr	r3, [r6, #0]
 8025c8c:	461c      	mov	r4, r3
 8025c8e:	bb34      	cbnz	r4, 8025cde <_malloc_r+0x82>
 8025c90:	4629      	mov	r1, r5
 8025c92:	4638      	mov	r0, r7
 8025c94:	f7ff ffc2 	bl	8025c1c <sbrk_aligned>
 8025c98:	1c43      	adds	r3, r0, #1
 8025c9a:	4604      	mov	r4, r0
 8025c9c:	d14d      	bne.n	8025d3a <_malloc_r+0xde>
 8025c9e:	6834      	ldr	r4, [r6, #0]
 8025ca0:	4626      	mov	r6, r4
 8025ca2:	2e00      	cmp	r6, #0
 8025ca4:	d140      	bne.n	8025d28 <_malloc_r+0xcc>
 8025ca6:	6823      	ldr	r3, [r4, #0]
 8025ca8:	4631      	mov	r1, r6
 8025caa:	4638      	mov	r0, r7
 8025cac:	eb04 0803 	add.w	r8, r4, r3
 8025cb0:	f000 fee0 	bl	8026a74 <_sbrk_r>
 8025cb4:	4580      	cmp	r8, r0
 8025cb6:	d13a      	bne.n	8025d2e <_malloc_r+0xd2>
 8025cb8:	6821      	ldr	r1, [r4, #0]
 8025cba:	3503      	adds	r5, #3
 8025cbc:	1a6d      	subs	r5, r5, r1
 8025cbe:	f025 0503 	bic.w	r5, r5, #3
 8025cc2:	3508      	adds	r5, #8
 8025cc4:	2d0c      	cmp	r5, #12
 8025cc6:	bf38      	it	cc
 8025cc8:	250c      	movcc	r5, #12
 8025cca:	4629      	mov	r1, r5
 8025ccc:	4638      	mov	r0, r7
 8025cce:	f7ff ffa5 	bl	8025c1c <sbrk_aligned>
 8025cd2:	3001      	adds	r0, #1
 8025cd4:	d02b      	beq.n	8025d2e <_malloc_r+0xd2>
 8025cd6:	6823      	ldr	r3, [r4, #0]
 8025cd8:	442b      	add	r3, r5
 8025cda:	6023      	str	r3, [r4, #0]
 8025cdc:	e00e      	b.n	8025cfc <_malloc_r+0xa0>
 8025cde:	6822      	ldr	r2, [r4, #0]
 8025ce0:	1b52      	subs	r2, r2, r5
 8025ce2:	d41e      	bmi.n	8025d22 <_malloc_r+0xc6>
 8025ce4:	2a0b      	cmp	r2, #11
 8025ce6:	d916      	bls.n	8025d16 <_malloc_r+0xba>
 8025ce8:	1961      	adds	r1, r4, r5
 8025cea:	42a3      	cmp	r3, r4
 8025cec:	6025      	str	r5, [r4, #0]
 8025cee:	bf18      	it	ne
 8025cf0:	6059      	strne	r1, [r3, #4]
 8025cf2:	6863      	ldr	r3, [r4, #4]
 8025cf4:	bf08      	it	eq
 8025cf6:	6031      	streq	r1, [r6, #0]
 8025cf8:	5162      	str	r2, [r4, r5]
 8025cfa:	604b      	str	r3, [r1, #4]
 8025cfc:	4638      	mov	r0, r7
 8025cfe:	f104 060b 	add.w	r6, r4, #11
 8025d02:	f003 fbe7 	bl	80294d4 <__malloc_unlock>
 8025d06:	f026 0607 	bic.w	r6, r6, #7
 8025d0a:	1d23      	adds	r3, r4, #4
 8025d0c:	1af2      	subs	r2, r6, r3
 8025d0e:	d0b6      	beq.n	8025c7e <_malloc_r+0x22>
 8025d10:	1b9b      	subs	r3, r3, r6
 8025d12:	50a3      	str	r3, [r4, r2]
 8025d14:	e7b3      	b.n	8025c7e <_malloc_r+0x22>
 8025d16:	6862      	ldr	r2, [r4, #4]
 8025d18:	42a3      	cmp	r3, r4
 8025d1a:	bf0c      	ite	eq
 8025d1c:	6032      	streq	r2, [r6, #0]
 8025d1e:	605a      	strne	r2, [r3, #4]
 8025d20:	e7ec      	b.n	8025cfc <_malloc_r+0xa0>
 8025d22:	4623      	mov	r3, r4
 8025d24:	6864      	ldr	r4, [r4, #4]
 8025d26:	e7b2      	b.n	8025c8e <_malloc_r+0x32>
 8025d28:	4634      	mov	r4, r6
 8025d2a:	6876      	ldr	r6, [r6, #4]
 8025d2c:	e7b9      	b.n	8025ca2 <_malloc_r+0x46>
 8025d2e:	230c      	movs	r3, #12
 8025d30:	603b      	str	r3, [r7, #0]
 8025d32:	4638      	mov	r0, r7
 8025d34:	f003 fbce 	bl	80294d4 <__malloc_unlock>
 8025d38:	e7a1      	b.n	8025c7e <_malloc_r+0x22>
 8025d3a:	6025      	str	r5, [r4, #0]
 8025d3c:	e7de      	b.n	8025cfc <_malloc_r+0xa0>
 8025d3e:	bf00      	nop
 8025d40:	20013d74 	.word	0x20013d74

08025d44 <__sfputc_r>:
 8025d44:	6893      	ldr	r3, [r2, #8]
 8025d46:	3b01      	subs	r3, #1
 8025d48:	2b00      	cmp	r3, #0
 8025d4a:	b410      	push	{r4}
 8025d4c:	6093      	str	r3, [r2, #8]
 8025d4e:	da08      	bge.n	8025d62 <__sfputc_r+0x1e>
 8025d50:	6994      	ldr	r4, [r2, #24]
 8025d52:	42a3      	cmp	r3, r4
 8025d54:	db01      	blt.n	8025d5a <__sfputc_r+0x16>
 8025d56:	290a      	cmp	r1, #10
 8025d58:	d103      	bne.n	8025d62 <__sfputc_r+0x1e>
 8025d5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025d5e:	f001 be7b 	b.w	8027a58 <__swbuf_r>
 8025d62:	6813      	ldr	r3, [r2, #0]
 8025d64:	1c58      	adds	r0, r3, #1
 8025d66:	6010      	str	r0, [r2, #0]
 8025d68:	7019      	strb	r1, [r3, #0]
 8025d6a:	4608      	mov	r0, r1
 8025d6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025d70:	4770      	bx	lr

08025d72 <__sfputs_r>:
 8025d72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025d74:	4606      	mov	r6, r0
 8025d76:	460f      	mov	r7, r1
 8025d78:	4614      	mov	r4, r2
 8025d7a:	18d5      	adds	r5, r2, r3
 8025d7c:	42ac      	cmp	r4, r5
 8025d7e:	d101      	bne.n	8025d84 <__sfputs_r+0x12>
 8025d80:	2000      	movs	r0, #0
 8025d82:	e007      	b.n	8025d94 <__sfputs_r+0x22>
 8025d84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025d88:	463a      	mov	r2, r7
 8025d8a:	4630      	mov	r0, r6
 8025d8c:	f7ff ffda 	bl	8025d44 <__sfputc_r>
 8025d90:	1c43      	adds	r3, r0, #1
 8025d92:	d1f3      	bne.n	8025d7c <__sfputs_r+0xa>
 8025d94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08025d98 <_vfiprintf_r>:
 8025d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025d9c:	460d      	mov	r5, r1
 8025d9e:	b09d      	sub	sp, #116	; 0x74
 8025da0:	4614      	mov	r4, r2
 8025da2:	4698      	mov	r8, r3
 8025da4:	4606      	mov	r6, r0
 8025da6:	b118      	cbz	r0, 8025db0 <_vfiprintf_r+0x18>
 8025da8:	6983      	ldr	r3, [r0, #24]
 8025daa:	b90b      	cbnz	r3, 8025db0 <_vfiprintf_r+0x18>
 8025dac:	f002 feee 	bl	8028b8c <__sinit>
 8025db0:	4b89      	ldr	r3, [pc, #548]	; (8025fd8 <_vfiprintf_r+0x240>)
 8025db2:	429d      	cmp	r5, r3
 8025db4:	d11b      	bne.n	8025dee <_vfiprintf_r+0x56>
 8025db6:	6875      	ldr	r5, [r6, #4]
 8025db8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8025dba:	07d9      	lsls	r1, r3, #31
 8025dbc:	d405      	bmi.n	8025dca <_vfiprintf_r+0x32>
 8025dbe:	89ab      	ldrh	r3, [r5, #12]
 8025dc0:	059a      	lsls	r2, r3, #22
 8025dc2:	d402      	bmi.n	8025dca <_vfiprintf_r+0x32>
 8025dc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8025dc6:	f003 faf2 	bl	80293ae <__retarget_lock_acquire_recursive>
 8025dca:	89ab      	ldrh	r3, [r5, #12]
 8025dcc:	071b      	lsls	r3, r3, #28
 8025dce:	d501      	bpl.n	8025dd4 <_vfiprintf_r+0x3c>
 8025dd0:	692b      	ldr	r3, [r5, #16]
 8025dd2:	b9eb      	cbnz	r3, 8025e10 <_vfiprintf_r+0x78>
 8025dd4:	4629      	mov	r1, r5
 8025dd6:	4630      	mov	r0, r6
 8025dd8:	f001 fea2 	bl	8027b20 <__swsetup_r>
 8025ddc:	b1c0      	cbz	r0, 8025e10 <_vfiprintf_r+0x78>
 8025dde:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8025de0:	07dc      	lsls	r4, r3, #31
 8025de2:	d50e      	bpl.n	8025e02 <_vfiprintf_r+0x6a>
 8025de4:	f04f 30ff 	mov.w	r0, #4294967295
 8025de8:	b01d      	add	sp, #116	; 0x74
 8025dea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025dee:	4b7b      	ldr	r3, [pc, #492]	; (8025fdc <_vfiprintf_r+0x244>)
 8025df0:	429d      	cmp	r5, r3
 8025df2:	d101      	bne.n	8025df8 <_vfiprintf_r+0x60>
 8025df4:	68b5      	ldr	r5, [r6, #8]
 8025df6:	e7df      	b.n	8025db8 <_vfiprintf_r+0x20>
 8025df8:	4b79      	ldr	r3, [pc, #484]	; (8025fe0 <_vfiprintf_r+0x248>)
 8025dfa:	429d      	cmp	r5, r3
 8025dfc:	bf08      	it	eq
 8025dfe:	68f5      	ldreq	r5, [r6, #12]
 8025e00:	e7da      	b.n	8025db8 <_vfiprintf_r+0x20>
 8025e02:	89ab      	ldrh	r3, [r5, #12]
 8025e04:	0598      	lsls	r0, r3, #22
 8025e06:	d4ed      	bmi.n	8025de4 <_vfiprintf_r+0x4c>
 8025e08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8025e0a:	f003 fad1 	bl	80293b0 <__retarget_lock_release_recursive>
 8025e0e:	e7e9      	b.n	8025de4 <_vfiprintf_r+0x4c>
 8025e10:	2300      	movs	r3, #0
 8025e12:	9309      	str	r3, [sp, #36]	; 0x24
 8025e14:	2320      	movs	r3, #32
 8025e16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8025e1a:	f8cd 800c 	str.w	r8, [sp, #12]
 8025e1e:	2330      	movs	r3, #48	; 0x30
 8025e20:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8025fe4 <_vfiprintf_r+0x24c>
 8025e24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8025e28:	f04f 0901 	mov.w	r9, #1
 8025e2c:	4623      	mov	r3, r4
 8025e2e:	469a      	mov	sl, r3
 8025e30:	f813 2b01 	ldrb.w	r2, [r3], #1
 8025e34:	b10a      	cbz	r2, 8025e3a <_vfiprintf_r+0xa2>
 8025e36:	2a25      	cmp	r2, #37	; 0x25
 8025e38:	d1f9      	bne.n	8025e2e <_vfiprintf_r+0x96>
 8025e3a:	ebba 0b04 	subs.w	fp, sl, r4
 8025e3e:	d00b      	beq.n	8025e58 <_vfiprintf_r+0xc0>
 8025e40:	465b      	mov	r3, fp
 8025e42:	4622      	mov	r2, r4
 8025e44:	4629      	mov	r1, r5
 8025e46:	4630      	mov	r0, r6
 8025e48:	f7ff ff93 	bl	8025d72 <__sfputs_r>
 8025e4c:	3001      	adds	r0, #1
 8025e4e:	f000 80aa 	beq.w	8025fa6 <_vfiprintf_r+0x20e>
 8025e52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8025e54:	445a      	add	r2, fp
 8025e56:	9209      	str	r2, [sp, #36]	; 0x24
 8025e58:	f89a 3000 	ldrb.w	r3, [sl]
 8025e5c:	2b00      	cmp	r3, #0
 8025e5e:	f000 80a2 	beq.w	8025fa6 <_vfiprintf_r+0x20e>
 8025e62:	2300      	movs	r3, #0
 8025e64:	f04f 32ff 	mov.w	r2, #4294967295
 8025e68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8025e6c:	f10a 0a01 	add.w	sl, sl, #1
 8025e70:	9304      	str	r3, [sp, #16]
 8025e72:	9307      	str	r3, [sp, #28]
 8025e74:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8025e78:	931a      	str	r3, [sp, #104]	; 0x68
 8025e7a:	4654      	mov	r4, sl
 8025e7c:	2205      	movs	r2, #5
 8025e7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025e82:	4858      	ldr	r0, [pc, #352]	; (8025fe4 <_vfiprintf_r+0x24c>)
 8025e84:	f7da f9bc 	bl	8000200 <memchr>
 8025e88:	9a04      	ldr	r2, [sp, #16]
 8025e8a:	b9d8      	cbnz	r0, 8025ec4 <_vfiprintf_r+0x12c>
 8025e8c:	06d1      	lsls	r1, r2, #27
 8025e8e:	bf44      	itt	mi
 8025e90:	2320      	movmi	r3, #32
 8025e92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8025e96:	0713      	lsls	r3, r2, #28
 8025e98:	bf44      	itt	mi
 8025e9a:	232b      	movmi	r3, #43	; 0x2b
 8025e9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8025ea0:	f89a 3000 	ldrb.w	r3, [sl]
 8025ea4:	2b2a      	cmp	r3, #42	; 0x2a
 8025ea6:	d015      	beq.n	8025ed4 <_vfiprintf_r+0x13c>
 8025ea8:	9a07      	ldr	r2, [sp, #28]
 8025eaa:	4654      	mov	r4, sl
 8025eac:	2000      	movs	r0, #0
 8025eae:	f04f 0c0a 	mov.w	ip, #10
 8025eb2:	4621      	mov	r1, r4
 8025eb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8025eb8:	3b30      	subs	r3, #48	; 0x30
 8025eba:	2b09      	cmp	r3, #9
 8025ebc:	d94e      	bls.n	8025f5c <_vfiprintf_r+0x1c4>
 8025ebe:	b1b0      	cbz	r0, 8025eee <_vfiprintf_r+0x156>
 8025ec0:	9207      	str	r2, [sp, #28]
 8025ec2:	e014      	b.n	8025eee <_vfiprintf_r+0x156>
 8025ec4:	eba0 0308 	sub.w	r3, r0, r8
 8025ec8:	fa09 f303 	lsl.w	r3, r9, r3
 8025ecc:	4313      	orrs	r3, r2
 8025ece:	9304      	str	r3, [sp, #16]
 8025ed0:	46a2      	mov	sl, r4
 8025ed2:	e7d2      	b.n	8025e7a <_vfiprintf_r+0xe2>
 8025ed4:	9b03      	ldr	r3, [sp, #12]
 8025ed6:	1d19      	adds	r1, r3, #4
 8025ed8:	681b      	ldr	r3, [r3, #0]
 8025eda:	9103      	str	r1, [sp, #12]
 8025edc:	2b00      	cmp	r3, #0
 8025ede:	bfbb      	ittet	lt
 8025ee0:	425b      	neglt	r3, r3
 8025ee2:	f042 0202 	orrlt.w	r2, r2, #2
 8025ee6:	9307      	strge	r3, [sp, #28]
 8025ee8:	9307      	strlt	r3, [sp, #28]
 8025eea:	bfb8      	it	lt
 8025eec:	9204      	strlt	r2, [sp, #16]
 8025eee:	7823      	ldrb	r3, [r4, #0]
 8025ef0:	2b2e      	cmp	r3, #46	; 0x2e
 8025ef2:	d10c      	bne.n	8025f0e <_vfiprintf_r+0x176>
 8025ef4:	7863      	ldrb	r3, [r4, #1]
 8025ef6:	2b2a      	cmp	r3, #42	; 0x2a
 8025ef8:	d135      	bne.n	8025f66 <_vfiprintf_r+0x1ce>
 8025efa:	9b03      	ldr	r3, [sp, #12]
 8025efc:	1d1a      	adds	r2, r3, #4
 8025efe:	681b      	ldr	r3, [r3, #0]
 8025f00:	9203      	str	r2, [sp, #12]
 8025f02:	2b00      	cmp	r3, #0
 8025f04:	bfb8      	it	lt
 8025f06:	f04f 33ff 	movlt.w	r3, #4294967295
 8025f0a:	3402      	adds	r4, #2
 8025f0c:	9305      	str	r3, [sp, #20]
 8025f0e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8025ff4 <_vfiprintf_r+0x25c>
 8025f12:	7821      	ldrb	r1, [r4, #0]
 8025f14:	2203      	movs	r2, #3
 8025f16:	4650      	mov	r0, sl
 8025f18:	f7da f972 	bl	8000200 <memchr>
 8025f1c:	b140      	cbz	r0, 8025f30 <_vfiprintf_r+0x198>
 8025f1e:	2340      	movs	r3, #64	; 0x40
 8025f20:	eba0 000a 	sub.w	r0, r0, sl
 8025f24:	fa03 f000 	lsl.w	r0, r3, r0
 8025f28:	9b04      	ldr	r3, [sp, #16]
 8025f2a:	4303      	orrs	r3, r0
 8025f2c:	3401      	adds	r4, #1
 8025f2e:	9304      	str	r3, [sp, #16]
 8025f30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025f34:	482c      	ldr	r0, [pc, #176]	; (8025fe8 <_vfiprintf_r+0x250>)
 8025f36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8025f3a:	2206      	movs	r2, #6
 8025f3c:	f7da f960 	bl	8000200 <memchr>
 8025f40:	2800      	cmp	r0, #0
 8025f42:	d03f      	beq.n	8025fc4 <_vfiprintf_r+0x22c>
 8025f44:	4b29      	ldr	r3, [pc, #164]	; (8025fec <_vfiprintf_r+0x254>)
 8025f46:	bb1b      	cbnz	r3, 8025f90 <_vfiprintf_r+0x1f8>
 8025f48:	9b03      	ldr	r3, [sp, #12]
 8025f4a:	3307      	adds	r3, #7
 8025f4c:	f023 0307 	bic.w	r3, r3, #7
 8025f50:	3308      	adds	r3, #8
 8025f52:	9303      	str	r3, [sp, #12]
 8025f54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025f56:	443b      	add	r3, r7
 8025f58:	9309      	str	r3, [sp, #36]	; 0x24
 8025f5a:	e767      	b.n	8025e2c <_vfiprintf_r+0x94>
 8025f5c:	fb0c 3202 	mla	r2, ip, r2, r3
 8025f60:	460c      	mov	r4, r1
 8025f62:	2001      	movs	r0, #1
 8025f64:	e7a5      	b.n	8025eb2 <_vfiprintf_r+0x11a>
 8025f66:	2300      	movs	r3, #0
 8025f68:	3401      	adds	r4, #1
 8025f6a:	9305      	str	r3, [sp, #20]
 8025f6c:	4619      	mov	r1, r3
 8025f6e:	f04f 0c0a 	mov.w	ip, #10
 8025f72:	4620      	mov	r0, r4
 8025f74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8025f78:	3a30      	subs	r2, #48	; 0x30
 8025f7a:	2a09      	cmp	r2, #9
 8025f7c:	d903      	bls.n	8025f86 <_vfiprintf_r+0x1ee>
 8025f7e:	2b00      	cmp	r3, #0
 8025f80:	d0c5      	beq.n	8025f0e <_vfiprintf_r+0x176>
 8025f82:	9105      	str	r1, [sp, #20]
 8025f84:	e7c3      	b.n	8025f0e <_vfiprintf_r+0x176>
 8025f86:	fb0c 2101 	mla	r1, ip, r1, r2
 8025f8a:	4604      	mov	r4, r0
 8025f8c:	2301      	movs	r3, #1
 8025f8e:	e7f0      	b.n	8025f72 <_vfiprintf_r+0x1da>
 8025f90:	ab03      	add	r3, sp, #12
 8025f92:	9300      	str	r3, [sp, #0]
 8025f94:	462a      	mov	r2, r5
 8025f96:	4b16      	ldr	r3, [pc, #88]	; (8025ff0 <_vfiprintf_r+0x258>)
 8025f98:	a904      	add	r1, sp, #16
 8025f9a:	4630      	mov	r0, r6
 8025f9c:	f000 f8cc 	bl	8026138 <_printf_float>
 8025fa0:	4607      	mov	r7, r0
 8025fa2:	1c78      	adds	r0, r7, #1
 8025fa4:	d1d6      	bne.n	8025f54 <_vfiprintf_r+0x1bc>
 8025fa6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8025fa8:	07d9      	lsls	r1, r3, #31
 8025faa:	d405      	bmi.n	8025fb8 <_vfiprintf_r+0x220>
 8025fac:	89ab      	ldrh	r3, [r5, #12]
 8025fae:	059a      	lsls	r2, r3, #22
 8025fb0:	d402      	bmi.n	8025fb8 <_vfiprintf_r+0x220>
 8025fb2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8025fb4:	f003 f9fc 	bl	80293b0 <__retarget_lock_release_recursive>
 8025fb8:	89ab      	ldrh	r3, [r5, #12]
 8025fba:	065b      	lsls	r3, r3, #25
 8025fbc:	f53f af12 	bmi.w	8025de4 <_vfiprintf_r+0x4c>
 8025fc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8025fc2:	e711      	b.n	8025de8 <_vfiprintf_r+0x50>
 8025fc4:	ab03      	add	r3, sp, #12
 8025fc6:	9300      	str	r3, [sp, #0]
 8025fc8:	462a      	mov	r2, r5
 8025fca:	4b09      	ldr	r3, [pc, #36]	; (8025ff0 <_vfiprintf_r+0x258>)
 8025fcc:	a904      	add	r1, sp, #16
 8025fce:	4630      	mov	r0, r6
 8025fd0:	f000 fb56 	bl	8026680 <_printf_i>
 8025fd4:	e7e4      	b.n	8025fa0 <_vfiprintf_r+0x208>
 8025fd6:	bf00      	nop
 8025fd8:	0803117c 	.word	0x0803117c
 8025fdc:	0803119c 	.word	0x0803119c
 8025fe0:	0803115c 	.word	0x0803115c
 8025fe4:	08030f40 	.word	0x08030f40
 8025fe8:	08030f4a 	.word	0x08030f4a
 8025fec:	08026139 	.word	0x08026139
 8025ff0:	08025d73 	.word	0x08025d73
 8025ff4:	08030f46 	.word	0x08030f46

08025ff8 <__cvt>:
 8025ff8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8025ffc:	ec55 4b10 	vmov	r4, r5, d0
 8026000:	2d00      	cmp	r5, #0
 8026002:	460e      	mov	r6, r1
 8026004:	4619      	mov	r1, r3
 8026006:	462b      	mov	r3, r5
 8026008:	bfbb      	ittet	lt
 802600a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 802600e:	461d      	movlt	r5, r3
 8026010:	2300      	movge	r3, #0
 8026012:	232d      	movlt	r3, #45	; 0x2d
 8026014:	700b      	strb	r3, [r1, #0]
 8026016:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8026018:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 802601c:	4691      	mov	r9, r2
 802601e:	f023 0820 	bic.w	r8, r3, #32
 8026022:	bfbc      	itt	lt
 8026024:	4622      	movlt	r2, r4
 8026026:	4614      	movlt	r4, r2
 8026028:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 802602c:	d005      	beq.n	802603a <__cvt+0x42>
 802602e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8026032:	d100      	bne.n	8026036 <__cvt+0x3e>
 8026034:	3601      	adds	r6, #1
 8026036:	2102      	movs	r1, #2
 8026038:	e000      	b.n	802603c <__cvt+0x44>
 802603a:	2103      	movs	r1, #3
 802603c:	ab03      	add	r3, sp, #12
 802603e:	9301      	str	r3, [sp, #4]
 8026040:	ab02      	add	r3, sp, #8
 8026042:	9300      	str	r3, [sp, #0]
 8026044:	ec45 4b10 	vmov	d0, r4, r5
 8026048:	4653      	mov	r3, sl
 802604a:	4632      	mov	r2, r6
 802604c:	f001 fe90 	bl	8027d70 <_dtoa_r>
 8026050:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8026054:	4607      	mov	r7, r0
 8026056:	d102      	bne.n	802605e <__cvt+0x66>
 8026058:	f019 0f01 	tst.w	r9, #1
 802605c:	d022      	beq.n	80260a4 <__cvt+0xac>
 802605e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8026062:	eb07 0906 	add.w	r9, r7, r6
 8026066:	d110      	bne.n	802608a <__cvt+0x92>
 8026068:	783b      	ldrb	r3, [r7, #0]
 802606a:	2b30      	cmp	r3, #48	; 0x30
 802606c:	d10a      	bne.n	8026084 <__cvt+0x8c>
 802606e:	2200      	movs	r2, #0
 8026070:	2300      	movs	r3, #0
 8026072:	4620      	mov	r0, r4
 8026074:	4629      	mov	r1, r5
 8026076:	f7da fd37 	bl	8000ae8 <__aeabi_dcmpeq>
 802607a:	b918      	cbnz	r0, 8026084 <__cvt+0x8c>
 802607c:	f1c6 0601 	rsb	r6, r6, #1
 8026080:	f8ca 6000 	str.w	r6, [sl]
 8026084:	f8da 3000 	ldr.w	r3, [sl]
 8026088:	4499      	add	r9, r3
 802608a:	2200      	movs	r2, #0
 802608c:	2300      	movs	r3, #0
 802608e:	4620      	mov	r0, r4
 8026090:	4629      	mov	r1, r5
 8026092:	f7da fd29 	bl	8000ae8 <__aeabi_dcmpeq>
 8026096:	b108      	cbz	r0, 802609c <__cvt+0xa4>
 8026098:	f8cd 900c 	str.w	r9, [sp, #12]
 802609c:	2230      	movs	r2, #48	; 0x30
 802609e:	9b03      	ldr	r3, [sp, #12]
 80260a0:	454b      	cmp	r3, r9
 80260a2:	d307      	bcc.n	80260b4 <__cvt+0xbc>
 80260a4:	9b03      	ldr	r3, [sp, #12]
 80260a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80260a8:	1bdb      	subs	r3, r3, r7
 80260aa:	4638      	mov	r0, r7
 80260ac:	6013      	str	r3, [r2, #0]
 80260ae:	b004      	add	sp, #16
 80260b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80260b4:	1c59      	adds	r1, r3, #1
 80260b6:	9103      	str	r1, [sp, #12]
 80260b8:	701a      	strb	r2, [r3, #0]
 80260ba:	e7f0      	b.n	802609e <__cvt+0xa6>

080260bc <__exponent>:
 80260bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80260be:	4603      	mov	r3, r0
 80260c0:	2900      	cmp	r1, #0
 80260c2:	bfb8      	it	lt
 80260c4:	4249      	neglt	r1, r1
 80260c6:	f803 2b02 	strb.w	r2, [r3], #2
 80260ca:	bfb4      	ite	lt
 80260cc:	222d      	movlt	r2, #45	; 0x2d
 80260ce:	222b      	movge	r2, #43	; 0x2b
 80260d0:	2909      	cmp	r1, #9
 80260d2:	7042      	strb	r2, [r0, #1]
 80260d4:	dd2a      	ble.n	802612c <__exponent+0x70>
 80260d6:	f10d 0407 	add.w	r4, sp, #7
 80260da:	46a4      	mov	ip, r4
 80260dc:	270a      	movs	r7, #10
 80260de:	46a6      	mov	lr, r4
 80260e0:	460a      	mov	r2, r1
 80260e2:	fb91 f6f7 	sdiv	r6, r1, r7
 80260e6:	fb07 1516 	mls	r5, r7, r6, r1
 80260ea:	3530      	adds	r5, #48	; 0x30
 80260ec:	2a63      	cmp	r2, #99	; 0x63
 80260ee:	f104 34ff 	add.w	r4, r4, #4294967295
 80260f2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80260f6:	4631      	mov	r1, r6
 80260f8:	dcf1      	bgt.n	80260de <__exponent+0x22>
 80260fa:	3130      	adds	r1, #48	; 0x30
 80260fc:	f1ae 0502 	sub.w	r5, lr, #2
 8026100:	f804 1c01 	strb.w	r1, [r4, #-1]
 8026104:	1c44      	adds	r4, r0, #1
 8026106:	4629      	mov	r1, r5
 8026108:	4561      	cmp	r1, ip
 802610a:	d30a      	bcc.n	8026122 <__exponent+0x66>
 802610c:	f10d 0209 	add.w	r2, sp, #9
 8026110:	eba2 020e 	sub.w	r2, r2, lr
 8026114:	4565      	cmp	r5, ip
 8026116:	bf88      	it	hi
 8026118:	2200      	movhi	r2, #0
 802611a:	4413      	add	r3, r2
 802611c:	1a18      	subs	r0, r3, r0
 802611e:	b003      	add	sp, #12
 8026120:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026122:	f811 2b01 	ldrb.w	r2, [r1], #1
 8026126:	f804 2f01 	strb.w	r2, [r4, #1]!
 802612a:	e7ed      	b.n	8026108 <__exponent+0x4c>
 802612c:	2330      	movs	r3, #48	; 0x30
 802612e:	3130      	adds	r1, #48	; 0x30
 8026130:	7083      	strb	r3, [r0, #2]
 8026132:	70c1      	strb	r1, [r0, #3]
 8026134:	1d03      	adds	r3, r0, #4
 8026136:	e7f1      	b.n	802611c <__exponent+0x60>

08026138 <_printf_float>:
 8026138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802613c:	ed2d 8b02 	vpush	{d8}
 8026140:	b08d      	sub	sp, #52	; 0x34
 8026142:	460c      	mov	r4, r1
 8026144:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8026148:	4616      	mov	r6, r2
 802614a:	461f      	mov	r7, r3
 802614c:	4605      	mov	r5, r0
 802614e:	f003 f929 	bl	80293a4 <_localeconv_r>
 8026152:	f8d0 a000 	ldr.w	sl, [r0]
 8026156:	4650      	mov	r0, sl
 8026158:	f7da f844 	bl	80001e4 <strlen>
 802615c:	2300      	movs	r3, #0
 802615e:	930a      	str	r3, [sp, #40]	; 0x28
 8026160:	6823      	ldr	r3, [r4, #0]
 8026162:	9305      	str	r3, [sp, #20]
 8026164:	f8d8 3000 	ldr.w	r3, [r8]
 8026168:	f894 b018 	ldrb.w	fp, [r4, #24]
 802616c:	3307      	adds	r3, #7
 802616e:	f023 0307 	bic.w	r3, r3, #7
 8026172:	f103 0208 	add.w	r2, r3, #8
 8026176:	f8c8 2000 	str.w	r2, [r8]
 802617a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802617e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8026182:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8026186:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 802618a:	9307      	str	r3, [sp, #28]
 802618c:	f8cd 8018 	str.w	r8, [sp, #24]
 8026190:	ee08 0a10 	vmov	s16, r0
 8026194:	4b9f      	ldr	r3, [pc, #636]	; (8026414 <_printf_float+0x2dc>)
 8026196:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 802619a:	f04f 32ff 	mov.w	r2, #4294967295
 802619e:	f7da fcd5 	bl	8000b4c <__aeabi_dcmpun>
 80261a2:	bb88      	cbnz	r0, 8026208 <_printf_float+0xd0>
 80261a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80261a8:	4b9a      	ldr	r3, [pc, #616]	; (8026414 <_printf_float+0x2dc>)
 80261aa:	f04f 32ff 	mov.w	r2, #4294967295
 80261ae:	f7da fcaf 	bl	8000b10 <__aeabi_dcmple>
 80261b2:	bb48      	cbnz	r0, 8026208 <_printf_float+0xd0>
 80261b4:	2200      	movs	r2, #0
 80261b6:	2300      	movs	r3, #0
 80261b8:	4640      	mov	r0, r8
 80261ba:	4649      	mov	r1, r9
 80261bc:	f7da fc9e 	bl	8000afc <__aeabi_dcmplt>
 80261c0:	b110      	cbz	r0, 80261c8 <_printf_float+0x90>
 80261c2:	232d      	movs	r3, #45	; 0x2d
 80261c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80261c8:	4b93      	ldr	r3, [pc, #588]	; (8026418 <_printf_float+0x2e0>)
 80261ca:	4894      	ldr	r0, [pc, #592]	; (802641c <_printf_float+0x2e4>)
 80261cc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80261d0:	bf94      	ite	ls
 80261d2:	4698      	movls	r8, r3
 80261d4:	4680      	movhi	r8, r0
 80261d6:	2303      	movs	r3, #3
 80261d8:	6123      	str	r3, [r4, #16]
 80261da:	9b05      	ldr	r3, [sp, #20]
 80261dc:	f023 0204 	bic.w	r2, r3, #4
 80261e0:	6022      	str	r2, [r4, #0]
 80261e2:	f04f 0900 	mov.w	r9, #0
 80261e6:	9700      	str	r7, [sp, #0]
 80261e8:	4633      	mov	r3, r6
 80261ea:	aa0b      	add	r2, sp, #44	; 0x2c
 80261ec:	4621      	mov	r1, r4
 80261ee:	4628      	mov	r0, r5
 80261f0:	f000 f9d8 	bl	80265a4 <_printf_common>
 80261f4:	3001      	adds	r0, #1
 80261f6:	f040 8090 	bne.w	802631a <_printf_float+0x1e2>
 80261fa:	f04f 30ff 	mov.w	r0, #4294967295
 80261fe:	b00d      	add	sp, #52	; 0x34
 8026200:	ecbd 8b02 	vpop	{d8}
 8026204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026208:	4642      	mov	r2, r8
 802620a:	464b      	mov	r3, r9
 802620c:	4640      	mov	r0, r8
 802620e:	4649      	mov	r1, r9
 8026210:	f7da fc9c 	bl	8000b4c <__aeabi_dcmpun>
 8026214:	b140      	cbz	r0, 8026228 <_printf_float+0xf0>
 8026216:	464b      	mov	r3, r9
 8026218:	2b00      	cmp	r3, #0
 802621a:	bfbc      	itt	lt
 802621c:	232d      	movlt	r3, #45	; 0x2d
 802621e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8026222:	487f      	ldr	r0, [pc, #508]	; (8026420 <_printf_float+0x2e8>)
 8026224:	4b7f      	ldr	r3, [pc, #508]	; (8026424 <_printf_float+0x2ec>)
 8026226:	e7d1      	b.n	80261cc <_printf_float+0x94>
 8026228:	6863      	ldr	r3, [r4, #4]
 802622a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 802622e:	9206      	str	r2, [sp, #24]
 8026230:	1c5a      	adds	r2, r3, #1
 8026232:	d13f      	bne.n	80262b4 <_printf_float+0x17c>
 8026234:	2306      	movs	r3, #6
 8026236:	6063      	str	r3, [r4, #4]
 8026238:	9b05      	ldr	r3, [sp, #20]
 802623a:	6861      	ldr	r1, [r4, #4]
 802623c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8026240:	2300      	movs	r3, #0
 8026242:	9303      	str	r3, [sp, #12]
 8026244:	ab0a      	add	r3, sp, #40	; 0x28
 8026246:	e9cd b301 	strd	fp, r3, [sp, #4]
 802624a:	ab09      	add	r3, sp, #36	; 0x24
 802624c:	ec49 8b10 	vmov	d0, r8, r9
 8026250:	9300      	str	r3, [sp, #0]
 8026252:	6022      	str	r2, [r4, #0]
 8026254:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8026258:	4628      	mov	r0, r5
 802625a:	f7ff fecd 	bl	8025ff8 <__cvt>
 802625e:	9b06      	ldr	r3, [sp, #24]
 8026260:	9909      	ldr	r1, [sp, #36]	; 0x24
 8026262:	2b47      	cmp	r3, #71	; 0x47
 8026264:	4680      	mov	r8, r0
 8026266:	d108      	bne.n	802627a <_printf_float+0x142>
 8026268:	1cc8      	adds	r0, r1, #3
 802626a:	db02      	blt.n	8026272 <_printf_float+0x13a>
 802626c:	6863      	ldr	r3, [r4, #4]
 802626e:	4299      	cmp	r1, r3
 8026270:	dd41      	ble.n	80262f6 <_printf_float+0x1be>
 8026272:	f1ab 0b02 	sub.w	fp, fp, #2
 8026276:	fa5f fb8b 	uxtb.w	fp, fp
 802627a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 802627e:	d820      	bhi.n	80262c2 <_printf_float+0x18a>
 8026280:	3901      	subs	r1, #1
 8026282:	465a      	mov	r2, fp
 8026284:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8026288:	9109      	str	r1, [sp, #36]	; 0x24
 802628a:	f7ff ff17 	bl	80260bc <__exponent>
 802628e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8026290:	1813      	adds	r3, r2, r0
 8026292:	2a01      	cmp	r2, #1
 8026294:	4681      	mov	r9, r0
 8026296:	6123      	str	r3, [r4, #16]
 8026298:	dc02      	bgt.n	80262a0 <_printf_float+0x168>
 802629a:	6822      	ldr	r2, [r4, #0]
 802629c:	07d2      	lsls	r2, r2, #31
 802629e:	d501      	bpl.n	80262a4 <_printf_float+0x16c>
 80262a0:	3301      	adds	r3, #1
 80262a2:	6123      	str	r3, [r4, #16]
 80262a4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80262a8:	2b00      	cmp	r3, #0
 80262aa:	d09c      	beq.n	80261e6 <_printf_float+0xae>
 80262ac:	232d      	movs	r3, #45	; 0x2d
 80262ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80262b2:	e798      	b.n	80261e6 <_printf_float+0xae>
 80262b4:	9a06      	ldr	r2, [sp, #24]
 80262b6:	2a47      	cmp	r2, #71	; 0x47
 80262b8:	d1be      	bne.n	8026238 <_printf_float+0x100>
 80262ba:	2b00      	cmp	r3, #0
 80262bc:	d1bc      	bne.n	8026238 <_printf_float+0x100>
 80262be:	2301      	movs	r3, #1
 80262c0:	e7b9      	b.n	8026236 <_printf_float+0xfe>
 80262c2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80262c6:	d118      	bne.n	80262fa <_printf_float+0x1c2>
 80262c8:	2900      	cmp	r1, #0
 80262ca:	6863      	ldr	r3, [r4, #4]
 80262cc:	dd0b      	ble.n	80262e6 <_printf_float+0x1ae>
 80262ce:	6121      	str	r1, [r4, #16]
 80262d0:	b913      	cbnz	r3, 80262d8 <_printf_float+0x1a0>
 80262d2:	6822      	ldr	r2, [r4, #0]
 80262d4:	07d0      	lsls	r0, r2, #31
 80262d6:	d502      	bpl.n	80262de <_printf_float+0x1a6>
 80262d8:	3301      	adds	r3, #1
 80262da:	440b      	add	r3, r1
 80262dc:	6123      	str	r3, [r4, #16]
 80262de:	65a1      	str	r1, [r4, #88]	; 0x58
 80262e0:	f04f 0900 	mov.w	r9, #0
 80262e4:	e7de      	b.n	80262a4 <_printf_float+0x16c>
 80262e6:	b913      	cbnz	r3, 80262ee <_printf_float+0x1b6>
 80262e8:	6822      	ldr	r2, [r4, #0]
 80262ea:	07d2      	lsls	r2, r2, #31
 80262ec:	d501      	bpl.n	80262f2 <_printf_float+0x1ba>
 80262ee:	3302      	adds	r3, #2
 80262f0:	e7f4      	b.n	80262dc <_printf_float+0x1a4>
 80262f2:	2301      	movs	r3, #1
 80262f4:	e7f2      	b.n	80262dc <_printf_float+0x1a4>
 80262f6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80262fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80262fc:	4299      	cmp	r1, r3
 80262fe:	db05      	blt.n	802630c <_printf_float+0x1d4>
 8026300:	6823      	ldr	r3, [r4, #0]
 8026302:	6121      	str	r1, [r4, #16]
 8026304:	07d8      	lsls	r0, r3, #31
 8026306:	d5ea      	bpl.n	80262de <_printf_float+0x1a6>
 8026308:	1c4b      	adds	r3, r1, #1
 802630a:	e7e7      	b.n	80262dc <_printf_float+0x1a4>
 802630c:	2900      	cmp	r1, #0
 802630e:	bfd4      	ite	le
 8026310:	f1c1 0202 	rsble	r2, r1, #2
 8026314:	2201      	movgt	r2, #1
 8026316:	4413      	add	r3, r2
 8026318:	e7e0      	b.n	80262dc <_printf_float+0x1a4>
 802631a:	6823      	ldr	r3, [r4, #0]
 802631c:	055a      	lsls	r2, r3, #21
 802631e:	d407      	bmi.n	8026330 <_printf_float+0x1f8>
 8026320:	6923      	ldr	r3, [r4, #16]
 8026322:	4642      	mov	r2, r8
 8026324:	4631      	mov	r1, r6
 8026326:	4628      	mov	r0, r5
 8026328:	47b8      	blx	r7
 802632a:	3001      	adds	r0, #1
 802632c:	d12c      	bne.n	8026388 <_printf_float+0x250>
 802632e:	e764      	b.n	80261fa <_printf_float+0xc2>
 8026330:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8026334:	f240 80e0 	bls.w	80264f8 <_printf_float+0x3c0>
 8026338:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 802633c:	2200      	movs	r2, #0
 802633e:	2300      	movs	r3, #0
 8026340:	f7da fbd2 	bl	8000ae8 <__aeabi_dcmpeq>
 8026344:	2800      	cmp	r0, #0
 8026346:	d034      	beq.n	80263b2 <_printf_float+0x27a>
 8026348:	4a37      	ldr	r2, [pc, #220]	; (8026428 <_printf_float+0x2f0>)
 802634a:	2301      	movs	r3, #1
 802634c:	4631      	mov	r1, r6
 802634e:	4628      	mov	r0, r5
 8026350:	47b8      	blx	r7
 8026352:	3001      	adds	r0, #1
 8026354:	f43f af51 	beq.w	80261fa <_printf_float+0xc2>
 8026358:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 802635c:	429a      	cmp	r2, r3
 802635e:	db02      	blt.n	8026366 <_printf_float+0x22e>
 8026360:	6823      	ldr	r3, [r4, #0]
 8026362:	07d8      	lsls	r0, r3, #31
 8026364:	d510      	bpl.n	8026388 <_printf_float+0x250>
 8026366:	ee18 3a10 	vmov	r3, s16
 802636a:	4652      	mov	r2, sl
 802636c:	4631      	mov	r1, r6
 802636e:	4628      	mov	r0, r5
 8026370:	47b8      	blx	r7
 8026372:	3001      	adds	r0, #1
 8026374:	f43f af41 	beq.w	80261fa <_printf_float+0xc2>
 8026378:	f04f 0800 	mov.w	r8, #0
 802637c:	f104 091a 	add.w	r9, r4, #26
 8026380:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026382:	3b01      	subs	r3, #1
 8026384:	4543      	cmp	r3, r8
 8026386:	dc09      	bgt.n	802639c <_printf_float+0x264>
 8026388:	6823      	ldr	r3, [r4, #0]
 802638a:	079b      	lsls	r3, r3, #30
 802638c:	f100 8105 	bmi.w	802659a <_printf_float+0x462>
 8026390:	68e0      	ldr	r0, [r4, #12]
 8026392:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8026394:	4298      	cmp	r0, r3
 8026396:	bfb8      	it	lt
 8026398:	4618      	movlt	r0, r3
 802639a:	e730      	b.n	80261fe <_printf_float+0xc6>
 802639c:	2301      	movs	r3, #1
 802639e:	464a      	mov	r2, r9
 80263a0:	4631      	mov	r1, r6
 80263a2:	4628      	mov	r0, r5
 80263a4:	47b8      	blx	r7
 80263a6:	3001      	adds	r0, #1
 80263a8:	f43f af27 	beq.w	80261fa <_printf_float+0xc2>
 80263ac:	f108 0801 	add.w	r8, r8, #1
 80263b0:	e7e6      	b.n	8026380 <_printf_float+0x248>
 80263b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80263b4:	2b00      	cmp	r3, #0
 80263b6:	dc39      	bgt.n	802642c <_printf_float+0x2f4>
 80263b8:	4a1b      	ldr	r2, [pc, #108]	; (8026428 <_printf_float+0x2f0>)
 80263ba:	2301      	movs	r3, #1
 80263bc:	4631      	mov	r1, r6
 80263be:	4628      	mov	r0, r5
 80263c0:	47b8      	blx	r7
 80263c2:	3001      	adds	r0, #1
 80263c4:	f43f af19 	beq.w	80261fa <_printf_float+0xc2>
 80263c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80263cc:	4313      	orrs	r3, r2
 80263ce:	d102      	bne.n	80263d6 <_printf_float+0x29e>
 80263d0:	6823      	ldr	r3, [r4, #0]
 80263d2:	07d9      	lsls	r1, r3, #31
 80263d4:	d5d8      	bpl.n	8026388 <_printf_float+0x250>
 80263d6:	ee18 3a10 	vmov	r3, s16
 80263da:	4652      	mov	r2, sl
 80263dc:	4631      	mov	r1, r6
 80263de:	4628      	mov	r0, r5
 80263e0:	47b8      	blx	r7
 80263e2:	3001      	adds	r0, #1
 80263e4:	f43f af09 	beq.w	80261fa <_printf_float+0xc2>
 80263e8:	f04f 0900 	mov.w	r9, #0
 80263ec:	f104 0a1a 	add.w	sl, r4, #26
 80263f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80263f2:	425b      	negs	r3, r3
 80263f4:	454b      	cmp	r3, r9
 80263f6:	dc01      	bgt.n	80263fc <_printf_float+0x2c4>
 80263f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80263fa:	e792      	b.n	8026322 <_printf_float+0x1ea>
 80263fc:	2301      	movs	r3, #1
 80263fe:	4652      	mov	r2, sl
 8026400:	4631      	mov	r1, r6
 8026402:	4628      	mov	r0, r5
 8026404:	47b8      	blx	r7
 8026406:	3001      	adds	r0, #1
 8026408:	f43f aef7 	beq.w	80261fa <_printf_float+0xc2>
 802640c:	f109 0901 	add.w	r9, r9, #1
 8026410:	e7ee      	b.n	80263f0 <_printf_float+0x2b8>
 8026412:	bf00      	nop
 8026414:	7fefffff 	.word	0x7fefffff
 8026418:	08030f51 	.word	0x08030f51
 802641c:	08030f55 	.word	0x08030f55
 8026420:	08030f5d 	.word	0x08030f5d
 8026424:	08030f59 	.word	0x08030f59
 8026428:	08031398 	.word	0x08031398
 802642c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802642e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8026430:	429a      	cmp	r2, r3
 8026432:	bfa8      	it	ge
 8026434:	461a      	movge	r2, r3
 8026436:	2a00      	cmp	r2, #0
 8026438:	4691      	mov	r9, r2
 802643a:	dc37      	bgt.n	80264ac <_printf_float+0x374>
 802643c:	f04f 0b00 	mov.w	fp, #0
 8026440:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8026444:	f104 021a 	add.w	r2, r4, #26
 8026448:	6da3      	ldr	r3, [r4, #88]	; 0x58
 802644a:	9305      	str	r3, [sp, #20]
 802644c:	eba3 0309 	sub.w	r3, r3, r9
 8026450:	455b      	cmp	r3, fp
 8026452:	dc33      	bgt.n	80264bc <_printf_float+0x384>
 8026454:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8026458:	429a      	cmp	r2, r3
 802645a:	db3b      	blt.n	80264d4 <_printf_float+0x39c>
 802645c:	6823      	ldr	r3, [r4, #0]
 802645e:	07da      	lsls	r2, r3, #31
 8026460:	d438      	bmi.n	80264d4 <_printf_float+0x39c>
 8026462:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026464:	9a05      	ldr	r2, [sp, #20]
 8026466:	9909      	ldr	r1, [sp, #36]	; 0x24
 8026468:	1a9a      	subs	r2, r3, r2
 802646a:	eba3 0901 	sub.w	r9, r3, r1
 802646e:	4591      	cmp	r9, r2
 8026470:	bfa8      	it	ge
 8026472:	4691      	movge	r9, r2
 8026474:	f1b9 0f00 	cmp.w	r9, #0
 8026478:	dc35      	bgt.n	80264e6 <_printf_float+0x3ae>
 802647a:	f04f 0800 	mov.w	r8, #0
 802647e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8026482:	f104 0a1a 	add.w	sl, r4, #26
 8026486:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 802648a:	1a9b      	subs	r3, r3, r2
 802648c:	eba3 0309 	sub.w	r3, r3, r9
 8026490:	4543      	cmp	r3, r8
 8026492:	f77f af79 	ble.w	8026388 <_printf_float+0x250>
 8026496:	2301      	movs	r3, #1
 8026498:	4652      	mov	r2, sl
 802649a:	4631      	mov	r1, r6
 802649c:	4628      	mov	r0, r5
 802649e:	47b8      	blx	r7
 80264a0:	3001      	adds	r0, #1
 80264a2:	f43f aeaa 	beq.w	80261fa <_printf_float+0xc2>
 80264a6:	f108 0801 	add.w	r8, r8, #1
 80264aa:	e7ec      	b.n	8026486 <_printf_float+0x34e>
 80264ac:	4613      	mov	r3, r2
 80264ae:	4631      	mov	r1, r6
 80264b0:	4642      	mov	r2, r8
 80264b2:	4628      	mov	r0, r5
 80264b4:	47b8      	blx	r7
 80264b6:	3001      	adds	r0, #1
 80264b8:	d1c0      	bne.n	802643c <_printf_float+0x304>
 80264ba:	e69e      	b.n	80261fa <_printf_float+0xc2>
 80264bc:	2301      	movs	r3, #1
 80264be:	4631      	mov	r1, r6
 80264c0:	4628      	mov	r0, r5
 80264c2:	9205      	str	r2, [sp, #20]
 80264c4:	47b8      	blx	r7
 80264c6:	3001      	adds	r0, #1
 80264c8:	f43f ae97 	beq.w	80261fa <_printf_float+0xc2>
 80264cc:	9a05      	ldr	r2, [sp, #20]
 80264ce:	f10b 0b01 	add.w	fp, fp, #1
 80264d2:	e7b9      	b.n	8026448 <_printf_float+0x310>
 80264d4:	ee18 3a10 	vmov	r3, s16
 80264d8:	4652      	mov	r2, sl
 80264da:	4631      	mov	r1, r6
 80264dc:	4628      	mov	r0, r5
 80264de:	47b8      	blx	r7
 80264e0:	3001      	adds	r0, #1
 80264e2:	d1be      	bne.n	8026462 <_printf_float+0x32a>
 80264e4:	e689      	b.n	80261fa <_printf_float+0xc2>
 80264e6:	9a05      	ldr	r2, [sp, #20]
 80264e8:	464b      	mov	r3, r9
 80264ea:	4442      	add	r2, r8
 80264ec:	4631      	mov	r1, r6
 80264ee:	4628      	mov	r0, r5
 80264f0:	47b8      	blx	r7
 80264f2:	3001      	adds	r0, #1
 80264f4:	d1c1      	bne.n	802647a <_printf_float+0x342>
 80264f6:	e680      	b.n	80261fa <_printf_float+0xc2>
 80264f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80264fa:	2a01      	cmp	r2, #1
 80264fc:	dc01      	bgt.n	8026502 <_printf_float+0x3ca>
 80264fe:	07db      	lsls	r3, r3, #31
 8026500:	d538      	bpl.n	8026574 <_printf_float+0x43c>
 8026502:	2301      	movs	r3, #1
 8026504:	4642      	mov	r2, r8
 8026506:	4631      	mov	r1, r6
 8026508:	4628      	mov	r0, r5
 802650a:	47b8      	blx	r7
 802650c:	3001      	adds	r0, #1
 802650e:	f43f ae74 	beq.w	80261fa <_printf_float+0xc2>
 8026512:	ee18 3a10 	vmov	r3, s16
 8026516:	4652      	mov	r2, sl
 8026518:	4631      	mov	r1, r6
 802651a:	4628      	mov	r0, r5
 802651c:	47b8      	blx	r7
 802651e:	3001      	adds	r0, #1
 8026520:	f43f ae6b 	beq.w	80261fa <_printf_float+0xc2>
 8026524:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8026528:	2200      	movs	r2, #0
 802652a:	2300      	movs	r3, #0
 802652c:	f7da fadc 	bl	8000ae8 <__aeabi_dcmpeq>
 8026530:	b9d8      	cbnz	r0, 802656a <_printf_float+0x432>
 8026532:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026534:	f108 0201 	add.w	r2, r8, #1
 8026538:	3b01      	subs	r3, #1
 802653a:	4631      	mov	r1, r6
 802653c:	4628      	mov	r0, r5
 802653e:	47b8      	blx	r7
 8026540:	3001      	adds	r0, #1
 8026542:	d10e      	bne.n	8026562 <_printf_float+0x42a>
 8026544:	e659      	b.n	80261fa <_printf_float+0xc2>
 8026546:	2301      	movs	r3, #1
 8026548:	4652      	mov	r2, sl
 802654a:	4631      	mov	r1, r6
 802654c:	4628      	mov	r0, r5
 802654e:	47b8      	blx	r7
 8026550:	3001      	adds	r0, #1
 8026552:	f43f ae52 	beq.w	80261fa <_printf_float+0xc2>
 8026556:	f108 0801 	add.w	r8, r8, #1
 802655a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802655c:	3b01      	subs	r3, #1
 802655e:	4543      	cmp	r3, r8
 8026560:	dcf1      	bgt.n	8026546 <_printf_float+0x40e>
 8026562:	464b      	mov	r3, r9
 8026564:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8026568:	e6dc      	b.n	8026324 <_printf_float+0x1ec>
 802656a:	f04f 0800 	mov.w	r8, #0
 802656e:	f104 0a1a 	add.w	sl, r4, #26
 8026572:	e7f2      	b.n	802655a <_printf_float+0x422>
 8026574:	2301      	movs	r3, #1
 8026576:	4642      	mov	r2, r8
 8026578:	e7df      	b.n	802653a <_printf_float+0x402>
 802657a:	2301      	movs	r3, #1
 802657c:	464a      	mov	r2, r9
 802657e:	4631      	mov	r1, r6
 8026580:	4628      	mov	r0, r5
 8026582:	47b8      	blx	r7
 8026584:	3001      	adds	r0, #1
 8026586:	f43f ae38 	beq.w	80261fa <_printf_float+0xc2>
 802658a:	f108 0801 	add.w	r8, r8, #1
 802658e:	68e3      	ldr	r3, [r4, #12]
 8026590:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8026592:	1a5b      	subs	r3, r3, r1
 8026594:	4543      	cmp	r3, r8
 8026596:	dcf0      	bgt.n	802657a <_printf_float+0x442>
 8026598:	e6fa      	b.n	8026390 <_printf_float+0x258>
 802659a:	f04f 0800 	mov.w	r8, #0
 802659e:	f104 0919 	add.w	r9, r4, #25
 80265a2:	e7f4      	b.n	802658e <_printf_float+0x456>

080265a4 <_printf_common>:
 80265a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80265a8:	4616      	mov	r6, r2
 80265aa:	4699      	mov	r9, r3
 80265ac:	688a      	ldr	r2, [r1, #8]
 80265ae:	690b      	ldr	r3, [r1, #16]
 80265b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80265b4:	4293      	cmp	r3, r2
 80265b6:	bfb8      	it	lt
 80265b8:	4613      	movlt	r3, r2
 80265ba:	6033      	str	r3, [r6, #0]
 80265bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80265c0:	4607      	mov	r7, r0
 80265c2:	460c      	mov	r4, r1
 80265c4:	b10a      	cbz	r2, 80265ca <_printf_common+0x26>
 80265c6:	3301      	adds	r3, #1
 80265c8:	6033      	str	r3, [r6, #0]
 80265ca:	6823      	ldr	r3, [r4, #0]
 80265cc:	0699      	lsls	r1, r3, #26
 80265ce:	bf42      	ittt	mi
 80265d0:	6833      	ldrmi	r3, [r6, #0]
 80265d2:	3302      	addmi	r3, #2
 80265d4:	6033      	strmi	r3, [r6, #0]
 80265d6:	6825      	ldr	r5, [r4, #0]
 80265d8:	f015 0506 	ands.w	r5, r5, #6
 80265dc:	d106      	bne.n	80265ec <_printf_common+0x48>
 80265de:	f104 0a19 	add.w	sl, r4, #25
 80265e2:	68e3      	ldr	r3, [r4, #12]
 80265e4:	6832      	ldr	r2, [r6, #0]
 80265e6:	1a9b      	subs	r3, r3, r2
 80265e8:	42ab      	cmp	r3, r5
 80265ea:	dc26      	bgt.n	802663a <_printf_common+0x96>
 80265ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80265f0:	1e13      	subs	r3, r2, #0
 80265f2:	6822      	ldr	r2, [r4, #0]
 80265f4:	bf18      	it	ne
 80265f6:	2301      	movne	r3, #1
 80265f8:	0692      	lsls	r2, r2, #26
 80265fa:	d42b      	bmi.n	8026654 <_printf_common+0xb0>
 80265fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8026600:	4649      	mov	r1, r9
 8026602:	4638      	mov	r0, r7
 8026604:	47c0      	blx	r8
 8026606:	3001      	adds	r0, #1
 8026608:	d01e      	beq.n	8026648 <_printf_common+0xa4>
 802660a:	6823      	ldr	r3, [r4, #0]
 802660c:	68e5      	ldr	r5, [r4, #12]
 802660e:	6832      	ldr	r2, [r6, #0]
 8026610:	f003 0306 	and.w	r3, r3, #6
 8026614:	2b04      	cmp	r3, #4
 8026616:	bf08      	it	eq
 8026618:	1aad      	subeq	r5, r5, r2
 802661a:	68a3      	ldr	r3, [r4, #8]
 802661c:	6922      	ldr	r2, [r4, #16]
 802661e:	bf0c      	ite	eq
 8026620:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8026624:	2500      	movne	r5, #0
 8026626:	4293      	cmp	r3, r2
 8026628:	bfc4      	itt	gt
 802662a:	1a9b      	subgt	r3, r3, r2
 802662c:	18ed      	addgt	r5, r5, r3
 802662e:	2600      	movs	r6, #0
 8026630:	341a      	adds	r4, #26
 8026632:	42b5      	cmp	r5, r6
 8026634:	d11a      	bne.n	802666c <_printf_common+0xc8>
 8026636:	2000      	movs	r0, #0
 8026638:	e008      	b.n	802664c <_printf_common+0xa8>
 802663a:	2301      	movs	r3, #1
 802663c:	4652      	mov	r2, sl
 802663e:	4649      	mov	r1, r9
 8026640:	4638      	mov	r0, r7
 8026642:	47c0      	blx	r8
 8026644:	3001      	adds	r0, #1
 8026646:	d103      	bne.n	8026650 <_printf_common+0xac>
 8026648:	f04f 30ff 	mov.w	r0, #4294967295
 802664c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026650:	3501      	adds	r5, #1
 8026652:	e7c6      	b.n	80265e2 <_printf_common+0x3e>
 8026654:	18e1      	adds	r1, r4, r3
 8026656:	1c5a      	adds	r2, r3, #1
 8026658:	2030      	movs	r0, #48	; 0x30
 802665a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802665e:	4422      	add	r2, r4
 8026660:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8026664:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8026668:	3302      	adds	r3, #2
 802666a:	e7c7      	b.n	80265fc <_printf_common+0x58>
 802666c:	2301      	movs	r3, #1
 802666e:	4622      	mov	r2, r4
 8026670:	4649      	mov	r1, r9
 8026672:	4638      	mov	r0, r7
 8026674:	47c0      	blx	r8
 8026676:	3001      	adds	r0, #1
 8026678:	d0e6      	beq.n	8026648 <_printf_common+0xa4>
 802667a:	3601      	adds	r6, #1
 802667c:	e7d9      	b.n	8026632 <_printf_common+0x8e>
	...

08026680 <_printf_i>:
 8026680:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8026684:	7e0f      	ldrb	r7, [r1, #24]
 8026686:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8026688:	2f78      	cmp	r7, #120	; 0x78
 802668a:	4691      	mov	r9, r2
 802668c:	4680      	mov	r8, r0
 802668e:	460c      	mov	r4, r1
 8026690:	469a      	mov	sl, r3
 8026692:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8026696:	d807      	bhi.n	80266a8 <_printf_i+0x28>
 8026698:	2f62      	cmp	r7, #98	; 0x62
 802669a:	d80a      	bhi.n	80266b2 <_printf_i+0x32>
 802669c:	2f00      	cmp	r7, #0
 802669e:	f000 80d8 	beq.w	8026852 <_printf_i+0x1d2>
 80266a2:	2f58      	cmp	r7, #88	; 0x58
 80266a4:	f000 80a3 	beq.w	80267ee <_printf_i+0x16e>
 80266a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80266ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80266b0:	e03a      	b.n	8026728 <_printf_i+0xa8>
 80266b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80266b6:	2b15      	cmp	r3, #21
 80266b8:	d8f6      	bhi.n	80266a8 <_printf_i+0x28>
 80266ba:	a101      	add	r1, pc, #4	; (adr r1, 80266c0 <_printf_i+0x40>)
 80266bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80266c0:	08026719 	.word	0x08026719
 80266c4:	0802672d 	.word	0x0802672d
 80266c8:	080266a9 	.word	0x080266a9
 80266cc:	080266a9 	.word	0x080266a9
 80266d0:	080266a9 	.word	0x080266a9
 80266d4:	080266a9 	.word	0x080266a9
 80266d8:	0802672d 	.word	0x0802672d
 80266dc:	080266a9 	.word	0x080266a9
 80266e0:	080266a9 	.word	0x080266a9
 80266e4:	080266a9 	.word	0x080266a9
 80266e8:	080266a9 	.word	0x080266a9
 80266ec:	08026839 	.word	0x08026839
 80266f0:	0802675d 	.word	0x0802675d
 80266f4:	0802681b 	.word	0x0802681b
 80266f8:	080266a9 	.word	0x080266a9
 80266fc:	080266a9 	.word	0x080266a9
 8026700:	0802685b 	.word	0x0802685b
 8026704:	080266a9 	.word	0x080266a9
 8026708:	0802675d 	.word	0x0802675d
 802670c:	080266a9 	.word	0x080266a9
 8026710:	080266a9 	.word	0x080266a9
 8026714:	08026823 	.word	0x08026823
 8026718:	682b      	ldr	r3, [r5, #0]
 802671a:	1d1a      	adds	r2, r3, #4
 802671c:	681b      	ldr	r3, [r3, #0]
 802671e:	602a      	str	r2, [r5, #0]
 8026720:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8026724:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8026728:	2301      	movs	r3, #1
 802672a:	e0a3      	b.n	8026874 <_printf_i+0x1f4>
 802672c:	6820      	ldr	r0, [r4, #0]
 802672e:	6829      	ldr	r1, [r5, #0]
 8026730:	0606      	lsls	r6, r0, #24
 8026732:	f101 0304 	add.w	r3, r1, #4
 8026736:	d50a      	bpl.n	802674e <_printf_i+0xce>
 8026738:	680e      	ldr	r6, [r1, #0]
 802673a:	602b      	str	r3, [r5, #0]
 802673c:	2e00      	cmp	r6, #0
 802673e:	da03      	bge.n	8026748 <_printf_i+0xc8>
 8026740:	232d      	movs	r3, #45	; 0x2d
 8026742:	4276      	negs	r6, r6
 8026744:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8026748:	485e      	ldr	r0, [pc, #376]	; (80268c4 <_printf_i+0x244>)
 802674a:	230a      	movs	r3, #10
 802674c:	e019      	b.n	8026782 <_printf_i+0x102>
 802674e:	680e      	ldr	r6, [r1, #0]
 8026750:	602b      	str	r3, [r5, #0]
 8026752:	f010 0f40 	tst.w	r0, #64	; 0x40
 8026756:	bf18      	it	ne
 8026758:	b236      	sxthne	r6, r6
 802675a:	e7ef      	b.n	802673c <_printf_i+0xbc>
 802675c:	682b      	ldr	r3, [r5, #0]
 802675e:	6820      	ldr	r0, [r4, #0]
 8026760:	1d19      	adds	r1, r3, #4
 8026762:	6029      	str	r1, [r5, #0]
 8026764:	0601      	lsls	r1, r0, #24
 8026766:	d501      	bpl.n	802676c <_printf_i+0xec>
 8026768:	681e      	ldr	r6, [r3, #0]
 802676a:	e002      	b.n	8026772 <_printf_i+0xf2>
 802676c:	0646      	lsls	r6, r0, #25
 802676e:	d5fb      	bpl.n	8026768 <_printf_i+0xe8>
 8026770:	881e      	ldrh	r6, [r3, #0]
 8026772:	4854      	ldr	r0, [pc, #336]	; (80268c4 <_printf_i+0x244>)
 8026774:	2f6f      	cmp	r7, #111	; 0x6f
 8026776:	bf0c      	ite	eq
 8026778:	2308      	moveq	r3, #8
 802677a:	230a      	movne	r3, #10
 802677c:	2100      	movs	r1, #0
 802677e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8026782:	6865      	ldr	r5, [r4, #4]
 8026784:	60a5      	str	r5, [r4, #8]
 8026786:	2d00      	cmp	r5, #0
 8026788:	bfa2      	ittt	ge
 802678a:	6821      	ldrge	r1, [r4, #0]
 802678c:	f021 0104 	bicge.w	r1, r1, #4
 8026790:	6021      	strge	r1, [r4, #0]
 8026792:	b90e      	cbnz	r6, 8026798 <_printf_i+0x118>
 8026794:	2d00      	cmp	r5, #0
 8026796:	d04d      	beq.n	8026834 <_printf_i+0x1b4>
 8026798:	4615      	mov	r5, r2
 802679a:	fbb6 f1f3 	udiv	r1, r6, r3
 802679e:	fb03 6711 	mls	r7, r3, r1, r6
 80267a2:	5dc7      	ldrb	r7, [r0, r7]
 80267a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80267a8:	4637      	mov	r7, r6
 80267aa:	42bb      	cmp	r3, r7
 80267ac:	460e      	mov	r6, r1
 80267ae:	d9f4      	bls.n	802679a <_printf_i+0x11a>
 80267b0:	2b08      	cmp	r3, #8
 80267b2:	d10b      	bne.n	80267cc <_printf_i+0x14c>
 80267b4:	6823      	ldr	r3, [r4, #0]
 80267b6:	07de      	lsls	r6, r3, #31
 80267b8:	d508      	bpl.n	80267cc <_printf_i+0x14c>
 80267ba:	6923      	ldr	r3, [r4, #16]
 80267bc:	6861      	ldr	r1, [r4, #4]
 80267be:	4299      	cmp	r1, r3
 80267c0:	bfde      	ittt	le
 80267c2:	2330      	movle	r3, #48	; 0x30
 80267c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80267c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80267cc:	1b52      	subs	r2, r2, r5
 80267ce:	6122      	str	r2, [r4, #16]
 80267d0:	f8cd a000 	str.w	sl, [sp]
 80267d4:	464b      	mov	r3, r9
 80267d6:	aa03      	add	r2, sp, #12
 80267d8:	4621      	mov	r1, r4
 80267da:	4640      	mov	r0, r8
 80267dc:	f7ff fee2 	bl	80265a4 <_printf_common>
 80267e0:	3001      	adds	r0, #1
 80267e2:	d14c      	bne.n	802687e <_printf_i+0x1fe>
 80267e4:	f04f 30ff 	mov.w	r0, #4294967295
 80267e8:	b004      	add	sp, #16
 80267ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80267ee:	4835      	ldr	r0, [pc, #212]	; (80268c4 <_printf_i+0x244>)
 80267f0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80267f4:	6829      	ldr	r1, [r5, #0]
 80267f6:	6823      	ldr	r3, [r4, #0]
 80267f8:	f851 6b04 	ldr.w	r6, [r1], #4
 80267fc:	6029      	str	r1, [r5, #0]
 80267fe:	061d      	lsls	r5, r3, #24
 8026800:	d514      	bpl.n	802682c <_printf_i+0x1ac>
 8026802:	07df      	lsls	r7, r3, #31
 8026804:	bf44      	itt	mi
 8026806:	f043 0320 	orrmi.w	r3, r3, #32
 802680a:	6023      	strmi	r3, [r4, #0]
 802680c:	b91e      	cbnz	r6, 8026816 <_printf_i+0x196>
 802680e:	6823      	ldr	r3, [r4, #0]
 8026810:	f023 0320 	bic.w	r3, r3, #32
 8026814:	6023      	str	r3, [r4, #0]
 8026816:	2310      	movs	r3, #16
 8026818:	e7b0      	b.n	802677c <_printf_i+0xfc>
 802681a:	6823      	ldr	r3, [r4, #0]
 802681c:	f043 0320 	orr.w	r3, r3, #32
 8026820:	6023      	str	r3, [r4, #0]
 8026822:	2378      	movs	r3, #120	; 0x78
 8026824:	4828      	ldr	r0, [pc, #160]	; (80268c8 <_printf_i+0x248>)
 8026826:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802682a:	e7e3      	b.n	80267f4 <_printf_i+0x174>
 802682c:	0659      	lsls	r1, r3, #25
 802682e:	bf48      	it	mi
 8026830:	b2b6      	uxthmi	r6, r6
 8026832:	e7e6      	b.n	8026802 <_printf_i+0x182>
 8026834:	4615      	mov	r5, r2
 8026836:	e7bb      	b.n	80267b0 <_printf_i+0x130>
 8026838:	682b      	ldr	r3, [r5, #0]
 802683a:	6826      	ldr	r6, [r4, #0]
 802683c:	6961      	ldr	r1, [r4, #20]
 802683e:	1d18      	adds	r0, r3, #4
 8026840:	6028      	str	r0, [r5, #0]
 8026842:	0635      	lsls	r5, r6, #24
 8026844:	681b      	ldr	r3, [r3, #0]
 8026846:	d501      	bpl.n	802684c <_printf_i+0x1cc>
 8026848:	6019      	str	r1, [r3, #0]
 802684a:	e002      	b.n	8026852 <_printf_i+0x1d2>
 802684c:	0670      	lsls	r0, r6, #25
 802684e:	d5fb      	bpl.n	8026848 <_printf_i+0x1c8>
 8026850:	8019      	strh	r1, [r3, #0]
 8026852:	2300      	movs	r3, #0
 8026854:	6123      	str	r3, [r4, #16]
 8026856:	4615      	mov	r5, r2
 8026858:	e7ba      	b.n	80267d0 <_printf_i+0x150>
 802685a:	682b      	ldr	r3, [r5, #0]
 802685c:	1d1a      	adds	r2, r3, #4
 802685e:	602a      	str	r2, [r5, #0]
 8026860:	681d      	ldr	r5, [r3, #0]
 8026862:	6862      	ldr	r2, [r4, #4]
 8026864:	2100      	movs	r1, #0
 8026866:	4628      	mov	r0, r5
 8026868:	f7d9 fcca 	bl	8000200 <memchr>
 802686c:	b108      	cbz	r0, 8026872 <_printf_i+0x1f2>
 802686e:	1b40      	subs	r0, r0, r5
 8026870:	6060      	str	r0, [r4, #4]
 8026872:	6863      	ldr	r3, [r4, #4]
 8026874:	6123      	str	r3, [r4, #16]
 8026876:	2300      	movs	r3, #0
 8026878:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802687c:	e7a8      	b.n	80267d0 <_printf_i+0x150>
 802687e:	6923      	ldr	r3, [r4, #16]
 8026880:	462a      	mov	r2, r5
 8026882:	4649      	mov	r1, r9
 8026884:	4640      	mov	r0, r8
 8026886:	47d0      	blx	sl
 8026888:	3001      	adds	r0, #1
 802688a:	d0ab      	beq.n	80267e4 <_printf_i+0x164>
 802688c:	6823      	ldr	r3, [r4, #0]
 802688e:	079b      	lsls	r3, r3, #30
 8026890:	d413      	bmi.n	80268ba <_printf_i+0x23a>
 8026892:	68e0      	ldr	r0, [r4, #12]
 8026894:	9b03      	ldr	r3, [sp, #12]
 8026896:	4298      	cmp	r0, r3
 8026898:	bfb8      	it	lt
 802689a:	4618      	movlt	r0, r3
 802689c:	e7a4      	b.n	80267e8 <_printf_i+0x168>
 802689e:	2301      	movs	r3, #1
 80268a0:	4632      	mov	r2, r6
 80268a2:	4649      	mov	r1, r9
 80268a4:	4640      	mov	r0, r8
 80268a6:	47d0      	blx	sl
 80268a8:	3001      	adds	r0, #1
 80268aa:	d09b      	beq.n	80267e4 <_printf_i+0x164>
 80268ac:	3501      	adds	r5, #1
 80268ae:	68e3      	ldr	r3, [r4, #12]
 80268b0:	9903      	ldr	r1, [sp, #12]
 80268b2:	1a5b      	subs	r3, r3, r1
 80268b4:	42ab      	cmp	r3, r5
 80268b6:	dcf2      	bgt.n	802689e <_printf_i+0x21e>
 80268b8:	e7eb      	b.n	8026892 <_printf_i+0x212>
 80268ba:	2500      	movs	r5, #0
 80268bc:	f104 0619 	add.w	r6, r4, #25
 80268c0:	e7f5      	b.n	80268ae <_printf_i+0x22e>
 80268c2:	bf00      	nop
 80268c4:	08030f61 	.word	0x08030f61
 80268c8:	08030f72 	.word	0x08030f72

080268cc <iprintf>:
 80268cc:	b40f      	push	{r0, r1, r2, r3}
 80268ce:	4b0a      	ldr	r3, [pc, #40]	; (80268f8 <iprintf+0x2c>)
 80268d0:	b513      	push	{r0, r1, r4, lr}
 80268d2:	681c      	ldr	r4, [r3, #0]
 80268d4:	b124      	cbz	r4, 80268e0 <iprintf+0x14>
 80268d6:	69a3      	ldr	r3, [r4, #24]
 80268d8:	b913      	cbnz	r3, 80268e0 <iprintf+0x14>
 80268da:	4620      	mov	r0, r4
 80268dc:	f002 f956 	bl	8028b8c <__sinit>
 80268e0:	ab05      	add	r3, sp, #20
 80268e2:	9a04      	ldr	r2, [sp, #16]
 80268e4:	68a1      	ldr	r1, [r4, #8]
 80268e6:	9301      	str	r3, [sp, #4]
 80268e8:	4620      	mov	r0, r4
 80268ea:	f7ff fa55 	bl	8025d98 <_vfiprintf_r>
 80268ee:	b002      	add	sp, #8
 80268f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80268f4:	b004      	add	sp, #16
 80268f6:	4770      	bx	lr
 80268f8:	10000070 	.word	0x10000070

080268fc <_puts_r>:
 80268fc:	b570      	push	{r4, r5, r6, lr}
 80268fe:	460e      	mov	r6, r1
 8026900:	4605      	mov	r5, r0
 8026902:	b118      	cbz	r0, 802690c <_puts_r+0x10>
 8026904:	6983      	ldr	r3, [r0, #24]
 8026906:	b90b      	cbnz	r3, 802690c <_puts_r+0x10>
 8026908:	f002 f940 	bl	8028b8c <__sinit>
 802690c:	69ab      	ldr	r3, [r5, #24]
 802690e:	68ac      	ldr	r4, [r5, #8]
 8026910:	b913      	cbnz	r3, 8026918 <_puts_r+0x1c>
 8026912:	4628      	mov	r0, r5
 8026914:	f002 f93a 	bl	8028b8c <__sinit>
 8026918:	4b2c      	ldr	r3, [pc, #176]	; (80269cc <_puts_r+0xd0>)
 802691a:	429c      	cmp	r4, r3
 802691c:	d120      	bne.n	8026960 <_puts_r+0x64>
 802691e:	686c      	ldr	r4, [r5, #4]
 8026920:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8026922:	07db      	lsls	r3, r3, #31
 8026924:	d405      	bmi.n	8026932 <_puts_r+0x36>
 8026926:	89a3      	ldrh	r3, [r4, #12]
 8026928:	0598      	lsls	r0, r3, #22
 802692a:	d402      	bmi.n	8026932 <_puts_r+0x36>
 802692c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802692e:	f002 fd3e 	bl	80293ae <__retarget_lock_acquire_recursive>
 8026932:	89a3      	ldrh	r3, [r4, #12]
 8026934:	0719      	lsls	r1, r3, #28
 8026936:	d51d      	bpl.n	8026974 <_puts_r+0x78>
 8026938:	6923      	ldr	r3, [r4, #16]
 802693a:	b1db      	cbz	r3, 8026974 <_puts_r+0x78>
 802693c:	3e01      	subs	r6, #1
 802693e:	68a3      	ldr	r3, [r4, #8]
 8026940:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8026944:	3b01      	subs	r3, #1
 8026946:	60a3      	str	r3, [r4, #8]
 8026948:	bb39      	cbnz	r1, 802699a <_puts_r+0x9e>
 802694a:	2b00      	cmp	r3, #0
 802694c:	da38      	bge.n	80269c0 <_puts_r+0xc4>
 802694e:	4622      	mov	r2, r4
 8026950:	210a      	movs	r1, #10
 8026952:	4628      	mov	r0, r5
 8026954:	f001 f880 	bl	8027a58 <__swbuf_r>
 8026958:	3001      	adds	r0, #1
 802695a:	d011      	beq.n	8026980 <_puts_r+0x84>
 802695c:	250a      	movs	r5, #10
 802695e:	e011      	b.n	8026984 <_puts_r+0x88>
 8026960:	4b1b      	ldr	r3, [pc, #108]	; (80269d0 <_puts_r+0xd4>)
 8026962:	429c      	cmp	r4, r3
 8026964:	d101      	bne.n	802696a <_puts_r+0x6e>
 8026966:	68ac      	ldr	r4, [r5, #8]
 8026968:	e7da      	b.n	8026920 <_puts_r+0x24>
 802696a:	4b1a      	ldr	r3, [pc, #104]	; (80269d4 <_puts_r+0xd8>)
 802696c:	429c      	cmp	r4, r3
 802696e:	bf08      	it	eq
 8026970:	68ec      	ldreq	r4, [r5, #12]
 8026972:	e7d5      	b.n	8026920 <_puts_r+0x24>
 8026974:	4621      	mov	r1, r4
 8026976:	4628      	mov	r0, r5
 8026978:	f001 f8d2 	bl	8027b20 <__swsetup_r>
 802697c:	2800      	cmp	r0, #0
 802697e:	d0dd      	beq.n	802693c <_puts_r+0x40>
 8026980:	f04f 35ff 	mov.w	r5, #4294967295
 8026984:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8026986:	07da      	lsls	r2, r3, #31
 8026988:	d405      	bmi.n	8026996 <_puts_r+0x9a>
 802698a:	89a3      	ldrh	r3, [r4, #12]
 802698c:	059b      	lsls	r3, r3, #22
 802698e:	d402      	bmi.n	8026996 <_puts_r+0x9a>
 8026990:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8026992:	f002 fd0d 	bl	80293b0 <__retarget_lock_release_recursive>
 8026996:	4628      	mov	r0, r5
 8026998:	bd70      	pop	{r4, r5, r6, pc}
 802699a:	2b00      	cmp	r3, #0
 802699c:	da04      	bge.n	80269a8 <_puts_r+0xac>
 802699e:	69a2      	ldr	r2, [r4, #24]
 80269a0:	429a      	cmp	r2, r3
 80269a2:	dc06      	bgt.n	80269b2 <_puts_r+0xb6>
 80269a4:	290a      	cmp	r1, #10
 80269a6:	d004      	beq.n	80269b2 <_puts_r+0xb6>
 80269a8:	6823      	ldr	r3, [r4, #0]
 80269aa:	1c5a      	adds	r2, r3, #1
 80269ac:	6022      	str	r2, [r4, #0]
 80269ae:	7019      	strb	r1, [r3, #0]
 80269b0:	e7c5      	b.n	802693e <_puts_r+0x42>
 80269b2:	4622      	mov	r2, r4
 80269b4:	4628      	mov	r0, r5
 80269b6:	f001 f84f 	bl	8027a58 <__swbuf_r>
 80269ba:	3001      	adds	r0, #1
 80269bc:	d1bf      	bne.n	802693e <_puts_r+0x42>
 80269be:	e7df      	b.n	8026980 <_puts_r+0x84>
 80269c0:	6823      	ldr	r3, [r4, #0]
 80269c2:	250a      	movs	r5, #10
 80269c4:	1c5a      	adds	r2, r3, #1
 80269c6:	6022      	str	r2, [r4, #0]
 80269c8:	701d      	strb	r5, [r3, #0]
 80269ca:	e7db      	b.n	8026984 <_puts_r+0x88>
 80269cc:	0803117c 	.word	0x0803117c
 80269d0:	0803119c 	.word	0x0803119c
 80269d4:	0803115c 	.word	0x0803115c

080269d8 <puts>:
 80269d8:	4b02      	ldr	r3, [pc, #8]	; (80269e4 <puts+0xc>)
 80269da:	4601      	mov	r1, r0
 80269dc:	6818      	ldr	r0, [r3, #0]
 80269de:	f7ff bf8d 	b.w	80268fc <_puts_r>
 80269e2:	bf00      	nop
 80269e4:	10000070 	.word	0x10000070

080269e8 <rand>:
 80269e8:	4b16      	ldr	r3, [pc, #88]	; (8026a44 <rand+0x5c>)
 80269ea:	b510      	push	{r4, lr}
 80269ec:	681c      	ldr	r4, [r3, #0]
 80269ee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80269f0:	b9b3      	cbnz	r3, 8026a20 <rand+0x38>
 80269f2:	2018      	movs	r0, #24
 80269f4:	f7ff f876 	bl	8025ae4 <malloc>
 80269f8:	63a0      	str	r0, [r4, #56]	; 0x38
 80269fa:	b928      	cbnz	r0, 8026a08 <rand+0x20>
 80269fc:	4602      	mov	r2, r0
 80269fe:	4b12      	ldr	r3, [pc, #72]	; (8026a48 <rand+0x60>)
 8026a00:	4812      	ldr	r0, [pc, #72]	; (8026a4c <rand+0x64>)
 8026a02:	214e      	movs	r1, #78	; 0x4e
 8026a04:	f001 f8fa 	bl	8027bfc <__assert_func>
 8026a08:	4a11      	ldr	r2, [pc, #68]	; (8026a50 <rand+0x68>)
 8026a0a:	4b12      	ldr	r3, [pc, #72]	; (8026a54 <rand+0x6c>)
 8026a0c:	e9c0 2300 	strd	r2, r3, [r0]
 8026a10:	4b11      	ldr	r3, [pc, #68]	; (8026a58 <rand+0x70>)
 8026a12:	6083      	str	r3, [r0, #8]
 8026a14:	230b      	movs	r3, #11
 8026a16:	8183      	strh	r3, [r0, #12]
 8026a18:	2201      	movs	r2, #1
 8026a1a:	2300      	movs	r3, #0
 8026a1c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8026a20:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8026a22:	4a0e      	ldr	r2, [pc, #56]	; (8026a5c <rand+0x74>)
 8026a24:	6920      	ldr	r0, [r4, #16]
 8026a26:	6963      	ldr	r3, [r4, #20]
 8026a28:	490d      	ldr	r1, [pc, #52]	; (8026a60 <rand+0x78>)
 8026a2a:	4342      	muls	r2, r0
 8026a2c:	fb01 2203 	mla	r2, r1, r3, r2
 8026a30:	fba0 0101 	umull	r0, r1, r0, r1
 8026a34:	1c43      	adds	r3, r0, #1
 8026a36:	eb42 0001 	adc.w	r0, r2, r1
 8026a3a:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8026a3e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8026a42:	bd10      	pop	{r4, pc}
 8026a44:	10000070 	.word	0x10000070
 8026a48:	08030f83 	.word	0x08030f83
 8026a4c:	08030f9a 	.word	0x08030f9a
 8026a50:	abcd330e 	.word	0xabcd330e
 8026a54:	e66d1234 	.word	0xe66d1234
 8026a58:	0005deec 	.word	0x0005deec
 8026a5c:	5851f42d 	.word	0x5851f42d
 8026a60:	4c957f2d 	.word	0x4c957f2d

08026a64 <realloc>:
 8026a64:	4b02      	ldr	r3, [pc, #8]	; (8026a70 <realloc+0xc>)
 8026a66:	460a      	mov	r2, r1
 8026a68:	4601      	mov	r1, r0
 8026a6a:	6818      	ldr	r0, [r3, #0]
 8026a6c:	f003 ba0f 	b.w	8029e8e <_realloc_r>
 8026a70:	10000070 	.word	0x10000070

08026a74 <_sbrk_r>:
 8026a74:	b538      	push	{r3, r4, r5, lr}
 8026a76:	4d06      	ldr	r5, [pc, #24]	; (8026a90 <_sbrk_r+0x1c>)
 8026a78:	2300      	movs	r3, #0
 8026a7a:	4604      	mov	r4, r0
 8026a7c:	4608      	mov	r0, r1
 8026a7e:	602b      	str	r3, [r5, #0]
 8026a80:	f7e3 faf8 	bl	800a074 <_sbrk>
 8026a84:	1c43      	adds	r3, r0, #1
 8026a86:	d102      	bne.n	8026a8e <_sbrk_r+0x1a>
 8026a88:	682b      	ldr	r3, [r5, #0]
 8026a8a:	b103      	cbz	r3, 8026a8e <_sbrk_r+0x1a>
 8026a8c:	6023      	str	r3, [r4, #0]
 8026a8e:	bd38      	pop	{r3, r4, r5, pc}
 8026a90:	20013d7c 	.word	0x20013d7c

08026a94 <siprintf>:
 8026a94:	b40e      	push	{r1, r2, r3}
 8026a96:	b500      	push	{lr}
 8026a98:	b09c      	sub	sp, #112	; 0x70
 8026a9a:	ab1d      	add	r3, sp, #116	; 0x74
 8026a9c:	9002      	str	r0, [sp, #8]
 8026a9e:	9006      	str	r0, [sp, #24]
 8026aa0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8026aa4:	4809      	ldr	r0, [pc, #36]	; (8026acc <siprintf+0x38>)
 8026aa6:	9107      	str	r1, [sp, #28]
 8026aa8:	9104      	str	r1, [sp, #16]
 8026aaa:	4909      	ldr	r1, [pc, #36]	; (8026ad0 <siprintf+0x3c>)
 8026aac:	f853 2b04 	ldr.w	r2, [r3], #4
 8026ab0:	9105      	str	r1, [sp, #20]
 8026ab2:	6800      	ldr	r0, [r0, #0]
 8026ab4:	9301      	str	r3, [sp, #4]
 8026ab6:	a902      	add	r1, sp, #8
 8026ab8:	f003 fa74 	bl	8029fa4 <_svfiprintf_r>
 8026abc:	9b02      	ldr	r3, [sp, #8]
 8026abe:	2200      	movs	r2, #0
 8026ac0:	701a      	strb	r2, [r3, #0]
 8026ac2:	b01c      	add	sp, #112	; 0x70
 8026ac4:	f85d eb04 	ldr.w	lr, [sp], #4
 8026ac8:	b003      	add	sp, #12
 8026aca:	4770      	bx	lr
 8026acc:	10000070 	.word	0x10000070
 8026ad0:	ffff0208 	.word	0xffff0208

08026ad4 <siscanf>:
 8026ad4:	b40e      	push	{r1, r2, r3}
 8026ad6:	b510      	push	{r4, lr}
 8026ad8:	b09f      	sub	sp, #124	; 0x7c
 8026ada:	ac21      	add	r4, sp, #132	; 0x84
 8026adc:	f44f 7101 	mov.w	r1, #516	; 0x204
 8026ae0:	f854 2b04 	ldr.w	r2, [r4], #4
 8026ae4:	9201      	str	r2, [sp, #4]
 8026ae6:	f8ad 101c 	strh.w	r1, [sp, #28]
 8026aea:	9004      	str	r0, [sp, #16]
 8026aec:	9008      	str	r0, [sp, #32]
 8026aee:	f7d9 fb79 	bl	80001e4 <strlen>
 8026af2:	4b0c      	ldr	r3, [pc, #48]	; (8026b24 <siscanf+0x50>)
 8026af4:	9005      	str	r0, [sp, #20]
 8026af6:	9009      	str	r0, [sp, #36]	; 0x24
 8026af8:	930d      	str	r3, [sp, #52]	; 0x34
 8026afa:	480b      	ldr	r0, [pc, #44]	; (8026b28 <siscanf+0x54>)
 8026afc:	9a01      	ldr	r2, [sp, #4]
 8026afe:	6800      	ldr	r0, [r0, #0]
 8026b00:	9403      	str	r4, [sp, #12]
 8026b02:	2300      	movs	r3, #0
 8026b04:	9311      	str	r3, [sp, #68]	; 0x44
 8026b06:	9316      	str	r3, [sp, #88]	; 0x58
 8026b08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8026b0c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8026b10:	a904      	add	r1, sp, #16
 8026b12:	4623      	mov	r3, r4
 8026b14:	f003 fba0 	bl	802a258 <__ssvfiscanf_r>
 8026b18:	b01f      	add	sp, #124	; 0x7c
 8026b1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8026b1e:	b003      	add	sp, #12
 8026b20:	4770      	bx	lr
 8026b22:	bf00      	nop
 8026b24:	08026b4f 	.word	0x08026b4f
 8026b28:	10000070 	.word	0x10000070

08026b2c <__sread>:
 8026b2c:	b510      	push	{r4, lr}
 8026b2e:	460c      	mov	r4, r1
 8026b30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026b34:	f003 fe5a 	bl	802a7ec <_read_r>
 8026b38:	2800      	cmp	r0, #0
 8026b3a:	bfab      	itete	ge
 8026b3c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8026b3e:	89a3      	ldrhlt	r3, [r4, #12]
 8026b40:	181b      	addge	r3, r3, r0
 8026b42:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8026b46:	bfac      	ite	ge
 8026b48:	6563      	strge	r3, [r4, #84]	; 0x54
 8026b4a:	81a3      	strhlt	r3, [r4, #12]
 8026b4c:	bd10      	pop	{r4, pc}

08026b4e <__seofread>:
 8026b4e:	2000      	movs	r0, #0
 8026b50:	4770      	bx	lr

08026b52 <__swrite>:
 8026b52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026b56:	461f      	mov	r7, r3
 8026b58:	898b      	ldrh	r3, [r1, #12]
 8026b5a:	05db      	lsls	r3, r3, #23
 8026b5c:	4605      	mov	r5, r0
 8026b5e:	460c      	mov	r4, r1
 8026b60:	4616      	mov	r6, r2
 8026b62:	d505      	bpl.n	8026b70 <__swrite+0x1e>
 8026b64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026b68:	2302      	movs	r3, #2
 8026b6a:	2200      	movs	r2, #0
 8026b6c:	f002 fc22 	bl	80293b4 <_lseek_r>
 8026b70:	89a3      	ldrh	r3, [r4, #12]
 8026b72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8026b76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8026b7a:	81a3      	strh	r3, [r4, #12]
 8026b7c:	4632      	mov	r2, r6
 8026b7e:	463b      	mov	r3, r7
 8026b80:	4628      	mov	r0, r5
 8026b82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8026b86:	f000 bfb9 	b.w	8027afc <_write_r>

08026b8a <__sseek>:
 8026b8a:	b510      	push	{r4, lr}
 8026b8c:	460c      	mov	r4, r1
 8026b8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026b92:	f002 fc0f 	bl	80293b4 <_lseek_r>
 8026b96:	1c43      	adds	r3, r0, #1
 8026b98:	89a3      	ldrh	r3, [r4, #12]
 8026b9a:	bf15      	itete	ne
 8026b9c:	6560      	strne	r0, [r4, #84]	; 0x54
 8026b9e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8026ba2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8026ba6:	81a3      	strheq	r3, [r4, #12]
 8026ba8:	bf18      	it	ne
 8026baa:	81a3      	strhne	r3, [r4, #12]
 8026bac:	bd10      	pop	{r4, pc}

08026bae <__sclose>:
 8026bae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026bb2:	f001 b841 	b.w	8027c38 <_close_r>

08026bb6 <strcat>:
 8026bb6:	b510      	push	{r4, lr}
 8026bb8:	4602      	mov	r2, r0
 8026bba:	7814      	ldrb	r4, [r2, #0]
 8026bbc:	4613      	mov	r3, r2
 8026bbe:	3201      	adds	r2, #1
 8026bc0:	2c00      	cmp	r4, #0
 8026bc2:	d1fa      	bne.n	8026bba <strcat+0x4>
 8026bc4:	3b01      	subs	r3, #1
 8026bc6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8026bca:	f803 2f01 	strb.w	r2, [r3, #1]!
 8026bce:	2a00      	cmp	r2, #0
 8026bd0:	d1f9      	bne.n	8026bc6 <strcat+0x10>
 8026bd2:	bd10      	pop	{r4, pc}

08026bd4 <strchr>:
 8026bd4:	b2c9      	uxtb	r1, r1
 8026bd6:	4603      	mov	r3, r0
 8026bd8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8026bdc:	b11a      	cbz	r2, 8026be6 <strchr+0x12>
 8026bde:	428a      	cmp	r2, r1
 8026be0:	d1f9      	bne.n	8026bd6 <strchr+0x2>
 8026be2:	4618      	mov	r0, r3
 8026be4:	4770      	bx	lr
 8026be6:	2900      	cmp	r1, #0
 8026be8:	bf18      	it	ne
 8026bea:	2300      	movne	r3, #0
 8026bec:	e7f9      	b.n	8026be2 <strchr+0xe>

08026bee <strcpy>:
 8026bee:	4603      	mov	r3, r0
 8026bf0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8026bf4:	f803 2b01 	strb.w	r2, [r3], #1
 8026bf8:	2a00      	cmp	r2, #0
 8026bfa:	d1f9      	bne.n	8026bf0 <strcpy+0x2>
 8026bfc:	4770      	bx	lr

08026bfe <strncmp>:
 8026bfe:	b510      	push	{r4, lr}
 8026c00:	b17a      	cbz	r2, 8026c22 <strncmp+0x24>
 8026c02:	4603      	mov	r3, r0
 8026c04:	3901      	subs	r1, #1
 8026c06:	1884      	adds	r4, r0, r2
 8026c08:	f813 0b01 	ldrb.w	r0, [r3], #1
 8026c0c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8026c10:	4290      	cmp	r0, r2
 8026c12:	d101      	bne.n	8026c18 <strncmp+0x1a>
 8026c14:	42a3      	cmp	r3, r4
 8026c16:	d101      	bne.n	8026c1c <strncmp+0x1e>
 8026c18:	1a80      	subs	r0, r0, r2
 8026c1a:	bd10      	pop	{r4, pc}
 8026c1c:	2800      	cmp	r0, #0
 8026c1e:	d1f3      	bne.n	8026c08 <strncmp+0xa>
 8026c20:	e7fa      	b.n	8026c18 <strncmp+0x1a>
 8026c22:	4610      	mov	r0, r2
 8026c24:	e7f9      	b.n	8026c1a <strncmp+0x1c>

08026c26 <sulp>:
 8026c26:	b570      	push	{r4, r5, r6, lr}
 8026c28:	4604      	mov	r4, r0
 8026c2a:	460d      	mov	r5, r1
 8026c2c:	ec45 4b10 	vmov	d0, r4, r5
 8026c30:	4616      	mov	r6, r2
 8026c32:	f002 ffc7 	bl	8029bc4 <__ulp>
 8026c36:	ec51 0b10 	vmov	r0, r1, d0
 8026c3a:	b17e      	cbz	r6, 8026c5c <sulp+0x36>
 8026c3c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8026c40:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8026c44:	2b00      	cmp	r3, #0
 8026c46:	dd09      	ble.n	8026c5c <sulp+0x36>
 8026c48:	051b      	lsls	r3, r3, #20
 8026c4a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8026c4e:	2400      	movs	r4, #0
 8026c50:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8026c54:	4622      	mov	r2, r4
 8026c56:	462b      	mov	r3, r5
 8026c58:	f7d9 fcde 	bl	8000618 <__aeabi_dmul>
 8026c5c:	bd70      	pop	{r4, r5, r6, pc}
	...

08026c60 <_strtod_l>:
 8026c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026c64:	ed2d 8b02 	vpush	{d8}
 8026c68:	b09d      	sub	sp, #116	; 0x74
 8026c6a:	461f      	mov	r7, r3
 8026c6c:	2300      	movs	r3, #0
 8026c6e:	9318      	str	r3, [sp, #96]	; 0x60
 8026c70:	4ba2      	ldr	r3, [pc, #648]	; (8026efc <_strtod_l+0x29c>)
 8026c72:	9213      	str	r2, [sp, #76]	; 0x4c
 8026c74:	681b      	ldr	r3, [r3, #0]
 8026c76:	9305      	str	r3, [sp, #20]
 8026c78:	4604      	mov	r4, r0
 8026c7a:	4618      	mov	r0, r3
 8026c7c:	4688      	mov	r8, r1
 8026c7e:	f7d9 fab1 	bl	80001e4 <strlen>
 8026c82:	f04f 0a00 	mov.w	sl, #0
 8026c86:	4605      	mov	r5, r0
 8026c88:	f04f 0b00 	mov.w	fp, #0
 8026c8c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8026c90:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8026c92:	781a      	ldrb	r2, [r3, #0]
 8026c94:	2a2b      	cmp	r2, #43	; 0x2b
 8026c96:	d04e      	beq.n	8026d36 <_strtod_l+0xd6>
 8026c98:	d83b      	bhi.n	8026d12 <_strtod_l+0xb2>
 8026c9a:	2a0d      	cmp	r2, #13
 8026c9c:	d834      	bhi.n	8026d08 <_strtod_l+0xa8>
 8026c9e:	2a08      	cmp	r2, #8
 8026ca0:	d834      	bhi.n	8026d0c <_strtod_l+0xac>
 8026ca2:	2a00      	cmp	r2, #0
 8026ca4:	d03e      	beq.n	8026d24 <_strtod_l+0xc4>
 8026ca6:	2300      	movs	r3, #0
 8026ca8:	930a      	str	r3, [sp, #40]	; 0x28
 8026caa:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8026cac:	7833      	ldrb	r3, [r6, #0]
 8026cae:	2b30      	cmp	r3, #48	; 0x30
 8026cb0:	f040 80b0 	bne.w	8026e14 <_strtod_l+0x1b4>
 8026cb4:	7873      	ldrb	r3, [r6, #1]
 8026cb6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8026cba:	2b58      	cmp	r3, #88	; 0x58
 8026cbc:	d168      	bne.n	8026d90 <_strtod_l+0x130>
 8026cbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026cc0:	9301      	str	r3, [sp, #4]
 8026cc2:	ab18      	add	r3, sp, #96	; 0x60
 8026cc4:	9702      	str	r7, [sp, #8]
 8026cc6:	9300      	str	r3, [sp, #0]
 8026cc8:	4a8d      	ldr	r2, [pc, #564]	; (8026f00 <_strtod_l+0x2a0>)
 8026cca:	ab19      	add	r3, sp, #100	; 0x64
 8026ccc:	a917      	add	r1, sp, #92	; 0x5c
 8026cce:	4620      	mov	r0, r4
 8026cd0:	f002 f860 	bl	8028d94 <__gethex>
 8026cd4:	f010 0707 	ands.w	r7, r0, #7
 8026cd8:	4605      	mov	r5, r0
 8026cda:	d005      	beq.n	8026ce8 <_strtod_l+0x88>
 8026cdc:	2f06      	cmp	r7, #6
 8026cde:	d12c      	bne.n	8026d3a <_strtod_l+0xda>
 8026ce0:	3601      	adds	r6, #1
 8026ce2:	2300      	movs	r3, #0
 8026ce4:	9617      	str	r6, [sp, #92]	; 0x5c
 8026ce6:	930a      	str	r3, [sp, #40]	; 0x28
 8026ce8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8026cea:	2b00      	cmp	r3, #0
 8026cec:	f040 8590 	bne.w	8027810 <_strtod_l+0xbb0>
 8026cf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026cf2:	b1eb      	cbz	r3, 8026d30 <_strtod_l+0xd0>
 8026cf4:	4652      	mov	r2, sl
 8026cf6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8026cfa:	ec43 2b10 	vmov	d0, r2, r3
 8026cfe:	b01d      	add	sp, #116	; 0x74
 8026d00:	ecbd 8b02 	vpop	{d8}
 8026d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026d08:	2a20      	cmp	r2, #32
 8026d0a:	d1cc      	bne.n	8026ca6 <_strtod_l+0x46>
 8026d0c:	3301      	adds	r3, #1
 8026d0e:	9317      	str	r3, [sp, #92]	; 0x5c
 8026d10:	e7be      	b.n	8026c90 <_strtod_l+0x30>
 8026d12:	2a2d      	cmp	r2, #45	; 0x2d
 8026d14:	d1c7      	bne.n	8026ca6 <_strtod_l+0x46>
 8026d16:	2201      	movs	r2, #1
 8026d18:	920a      	str	r2, [sp, #40]	; 0x28
 8026d1a:	1c5a      	adds	r2, r3, #1
 8026d1c:	9217      	str	r2, [sp, #92]	; 0x5c
 8026d1e:	785b      	ldrb	r3, [r3, #1]
 8026d20:	2b00      	cmp	r3, #0
 8026d22:	d1c2      	bne.n	8026caa <_strtod_l+0x4a>
 8026d24:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8026d26:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8026d2a:	2b00      	cmp	r3, #0
 8026d2c:	f040 856e 	bne.w	802780c <_strtod_l+0xbac>
 8026d30:	4652      	mov	r2, sl
 8026d32:	465b      	mov	r3, fp
 8026d34:	e7e1      	b.n	8026cfa <_strtod_l+0x9a>
 8026d36:	2200      	movs	r2, #0
 8026d38:	e7ee      	b.n	8026d18 <_strtod_l+0xb8>
 8026d3a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8026d3c:	b13a      	cbz	r2, 8026d4e <_strtod_l+0xee>
 8026d3e:	2135      	movs	r1, #53	; 0x35
 8026d40:	a81a      	add	r0, sp, #104	; 0x68
 8026d42:	f003 f84a 	bl	8029dda <__copybits>
 8026d46:	9918      	ldr	r1, [sp, #96]	; 0x60
 8026d48:	4620      	mov	r0, r4
 8026d4a:	f002 fc09 	bl	8029560 <_Bfree>
 8026d4e:	3f01      	subs	r7, #1
 8026d50:	2f04      	cmp	r7, #4
 8026d52:	d806      	bhi.n	8026d62 <_strtod_l+0x102>
 8026d54:	e8df f007 	tbb	[pc, r7]
 8026d58:	1714030a 	.word	0x1714030a
 8026d5c:	0a          	.byte	0x0a
 8026d5d:	00          	.byte	0x00
 8026d5e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8026d62:	0728      	lsls	r0, r5, #28
 8026d64:	d5c0      	bpl.n	8026ce8 <_strtod_l+0x88>
 8026d66:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8026d6a:	e7bd      	b.n	8026ce8 <_strtod_l+0x88>
 8026d6c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8026d70:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8026d72:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8026d76:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8026d7a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8026d7e:	e7f0      	b.n	8026d62 <_strtod_l+0x102>
 8026d80:	f8df b180 	ldr.w	fp, [pc, #384]	; 8026f04 <_strtod_l+0x2a4>
 8026d84:	e7ed      	b.n	8026d62 <_strtod_l+0x102>
 8026d86:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8026d8a:	f04f 3aff 	mov.w	sl, #4294967295
 8026d8e:	e7e8      	b.n	8026d62 <_strtod_l+0x102>
 8026d90:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8026d92:	1c5a      	adds	r2, r3, #1
 8026d94:	9217      	str	r2, [sp, #92]	; 0x5c
 8026d96:	785b      	ldrb	r3, [r3, #1]
 8026d98:	2b30      	cmp	r3, #48	; 0x30
 8026d9a:	d0f9      	beq.n	8026d90 <_strtod_l+0x130>
 8026d9c:	2b00      	cmp	r3, #0
 8026d9e:	d0a3      	beq.n	8026ce8 <_strtod_l+0x88>
 8026da0:	2301      	movs	r3, #1
 8026da2:	f04f 0900 	mov.w	r9, #0
 8026da6:	9304      	str	r3, [sp, #16]
 8026da8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8026daa:	9308      	str	r3, [sp, #32]
 8026dac:	f8cd 901c 	str.w	r9, [sp, #28]
 8026db0:	464f      	mov	r7, r9
 8026db2:	220a      	movs	r2, #10
 8026db4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8026db6:	7806      	ldrb	r6, [r0, #0]
 8026db8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8026dbc:	b2d9      	uxtb	r1, r3
 8026dbe:	2909      	cmp	r1, #9
 8026dc0:	d92a      	bls.n	8026e18 <_strtod_l+0x1b8>
 8026dc2:	9905      	ldr	r1, [sp, #20]
 8026dc4:	462a      	mov	r2, r5
 8026dc6:	f7ff ff1a 	bl	8026bfe <strncmp>
 8026dca:	b398      	cbz	r0, 8026e34 <_strtod_l+0x1d4>
 8026dcc:	2000      	movs	r0, #0
 8026dce:	4632      	mov	r2, r6
 8026dd0:	463d      	mov	r5, r7
 8026dd2:	9005      	str	r0, [sp, #20]
 8026dd4:	4603      	mov	r3, r0
 8026dd6:	2a65      	cmp	r2, #101	; 0x65
 8026dd8:	d001      	beq.n	8026dde <_strtod_l+0x17e>
 8026dda:	2a45      	cmp	r2, #69	; 0x45
 8026ddc:	d118      	bne.n	8026e10 <_strtod_l+0x1b0>
 8026dde:	b91d      	cbnz	r5, 8026de8 <_strtod_l+0x188>
 8026de0:	9a04      	ldr	r2, [sp, #16]
 8026de2:	4302      	orrs	r2, r0
 8026de4:	d09e      	beq.n	8026d24 <_strtod_l+0xc4>
 8026de6:	2500      	movs	r5, #0
 8026de8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8026dec:	f108 0201 	add.w	r2, r8, #1
 8026df0:	9217      	str	r2, [sp, #92]	; 0x5c
 8026df2:	f898 2001 	ldrb.w	r2, [r8, #1]
 8026df6:	2a2b      	cmp	r2, #43	; 0x2b
 8026df8:	d075      	beq.n	8026ee6 <_strtod_l+0x286>
 8026dfa:	2a2d      	cmp	r2, #45	; 0x2d
 8026dfc:	d07b      	beq.n	8026ef6 <_strtod_l+0x296>
 8026dfe:	f04f 0c00 	mov.w	ip, #0
 8026e02:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8026e06:	2909      	cmp	r1, #9
 8026e08:	f240 8082 	bls.w	8026f10 <_strtod_l+0x2b0>
 8026e0c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8026e10:	2600      	movs	r6, #0
 8026e12:	e09d      	b.n	8026f50 <_strtod_l+0x2f0>
 8026e14:	2300      	movs	r3, #0
 8026e16:	e7c4      	b.n	8026da2 <_strtod_l+0x142>
 8026e18:	2f08      	cmp	r7, #8
 8026e1a:	bfd8      	it	le
 8026e1c:	9907      	ldrle	r1, [sp, #28]
 8026e1e:	f100 0001 	add.w	r0, r0, #1
 8026e22:	bfda      	itte	le
 8026e24:	fb02 3301 	mlale	r3, r2, r1, r3
 8026e28:	9307      	strle	r3, [sp, #28]
 8026e2a:	fb02 3909 	mlagt	r9, r2, r9, r3
 8026e2e:	3701      	adds	r7, #1
 8026e30:	9017      	str	r0, [sp, #92]	; 0x5c
 8026e32:	e7bf      	b.n	8026db4 <_strtod_l+0x154>
 8026e34:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8026e36:	195a      	adds	r2, r3, r5
 8026e38:	9217      	str	r2, [sp, #92]	; 0x5c
 8026e3a:	5d5a      	ldrb	r2, [r3, r5]
 8026e3c:	2f00      	cmp	r7, #0
 8026e3e:	d037      	beq.n	8026eb0 <_strtod_l+0x250>
 8026e40:	9005      	str	r0, [sp, #20]
 8026e42:	463d      	mov	r5, r7
 8026e44:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8026e48:	2b09      	cmp	r3, #9
 8026e4a:	d912      	bls.n	8026e72 <_strtod_l+0x212>
 8026e4c:	2301      	movs	r3, #1
 8026e4e:	e7c2      	b.n	8026dd6 <_strtod_l+0x176>
 8026e50:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8026e52:	1c5a      	adds	r2, r3, #1
 8026e54:	9217      	str	r2, [sp, #92]	; 0x5c
 8026e56:	785a      	ldrb	r2, [r3, #1]
 8026e58:	3001      	adds	r0, #1
 8026e5a:	2a30      	cmp	r2, #48	; 0x30
 8026e5c:	d0f8      	beq.n	8026e50 <_strtod_l+0x1f0>
 8026e5e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8026e62:	2b08      	cmp	r3, #8
 8026e64:	f200 84d9 	bhi.w	802781a <_strtod_l+0xbba>
 8026e68:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8026e6a:	9005      	str	r0, [sp, #20]
 8026e6c:	2000      	movs	r0, #0
 8026e6e:	9308      	str	r3, [sp, #32]
 8026e70:	4605      	mov	r5, r0
 8026e72:	3a30      	subs	r2, #48	; 0x30
 8026e74:	f100 0301 	add.w	r3, r0, #1
 8026e78:	d014      	beq.n	8026ea4 <_strtod_l+0x244>
 8026e7a:	9905      	ldr	r1, [sp, #20]
 8026e7c:	4419      	add	r1, r3
 8026e7e:	9105      	str	r1, [sp, #20]
 8026e80:	462b      	mov	r3, r5
 8026e82:	eb00 0e05 	add.w	lr, r0, r5
 8026e86:	210a      	movs	r1, #10
 8026e88:	4573      	cmp	r3, lr
 8026e8a:	d113      	bne.n	8026eb4 <_strtod_l+0x254>
 8026e8c:	182b      	adds	r3, r5, r0
 8026e8e:	2b08      	cmp	r3, #8
 8026e90:	f105 0501 	add.w	r5, r5, #1
 8026e94:	4405      	add	r5, r0
 8026e96:	dc1c      	bgt.n	8026ed2 <_strtod_l+0x272>
 8026e98:	9907      	ldr	r1, [sp, #28]
 8026e9a:	230a      	movs	r3, #10
 8026e9c:	fb03 2301 	mla	r3, r3, r1, r2
 8026ea0:	9307      	str	r3, [sp, #28]
 8026ea2:	2300      	movs	r3, #0
 8026ea4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8026ea6:	1c51      	adds	r1, r2, #1
 8026ea8:	9117      	str	r1, [sp, #92]	; 0x5c
 8026eaa:	7852      	ldrb	r2, [r2, #1]
 8026eac:	4618      	mov	r0, r3
 8026eae:	e7c9      	b.n	8026e44 <_strtod_l+0x1e4>
 8026eb0:	4638      	mov	r0, r7
 8026eb2:	e7d2      	b.n	8026e5a <_strtod_l+0x1fa>
 8026eb4:	2b08      	cmp	r3, #8
 8026eb6:	dc04      	bgt.n	8026ec2 <_strtod_l+0x262>
 8026eb8:	9e07      	ldr	r6, [sp, #28]
 8026eba:	434e      	muls	r6, r1
 8026ebc:	9607      	str	r6, [sp, #28]
 8026ebe:	3301      	adds	r3, #1
 8026ec0:	e7e2      	b.n	8026e88 <_strtod_l+0x228>
 8026ec2:	f103 0c01 	add.w	ip, r3, #1
 8026ec6:	f1bc 0f10 	cmp.w	ip, #16
 8026eca:	bfd8      	it	le
 8026ecc:	fb01 f909 	mulle.w	r9, r1, r9
 8026ed0:	e7f5      	b.n	8026ebe <_strtod_l+0x25e>
 8026ed2:	2d10      	cmp	r5, #16
 8026ed4:	bfdc      	itt	le
 8026ed6:	230a      	movle	r3, #10
 8026ed8:	fb03 2909 	mlale	r9, r3, r9, r2
 8026edc:	e7e1      	b.n	8026ea2 <_strtod_l+0x242>
 8026ede:	2300      	movs	r3, #0
 8026ee0:	9305      	str	r3, [sp, #20]
 8026ee2:	2301      	movs	r3, #1
 8026ee4:	e77c      	b.n	8026de0 <_strtod_l+0x180>
 8026ee6:	f04f 0c00 	mov.w	ip, #0
 8026eea:	f108 0202 	add.w	r2, r8, #2
 8026eee:	9217      	str	r2, [sp, #92]	; 0x5c
 8026ef0:	f898 2002 	ldrb.w	r2, [r8, #2]
 8026ef4:	e785      	b.n	8026e02 <_strtod_l+0x1a2>
 8026ef6:	f04f 0c01 	mov.w	ip, #1
 8026efa:	e7f6      	b.n	8026eea <_strtod_l+0x28a>
 8026efc:	08031224 	.word	0x08031224
 8026f00:	08030ff8 	.word	0x08030ff8
 8026f04:	7ff00000 	.word	0x7ff00000
 8026f08:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8026f0a:	1c51      	adds	r1, r2, #1
 8026f0c:	9117      	str	r1, [sp, #92]	; 0x5c
 8026f0e:	7852      	ldrb	r2, [r2, #1]
 8026f10:	2a30      	cmp	r2, #48	; 0x30
 8026f12:	d0f9      	beq.n	8026f08 <_strtod_l+0x2a8>
 8026f14:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8026f18:	2908      	cmp	r1, #8
 8026f1a:	f63f af79 	bhi.w	8026e10 <_strtod_l+0x1b0>
 8026f1e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8026f22:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8026f24:	9206      	str	r2, [sp, #24]
 8026f26:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8026f28:	1c51      	adds	r1, r2, #1
 8026f2a:	9117      	str	r1, [sp, #92]	; 0x5c
 8026f2c:	7852      	ldrb	r2, [r2, #1]
 8026f2e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8026f32:	2e09      	cmp	r6, #9
 8026f34:	d937      	bls.n	8026fa6 <_strtod_l+0x346>
 8026f36:	9e06      	ldr	r6, [sp, #24]
 8026f38:	1b89      	subs	r1, r1, r6
 8026f3a:	2908      	cmp	r1, #8
 8026f3c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8026f40:	dc02      	bgt.n	8026f48 <_strtod_l+0x2e8>
 8026f42:	4576      	cmp	r6, lr
 8026f44:	bfa8      	it	ge
 8026f46:	4676      	movge	r6, lr
 8026f48:	f1bc 0f00 	cmp.w	ip, #0
 8026f4c:	d000      	beq.n	8026f50 <_strtod_l+0x2f0>
 8026f4e:	4276      	negs	r6, r6
 8026f50:	2d00      	cmp	r5, #0
 8026f52:	d14d      	bne.n	8026ff0 <_strtod_l+0x390>
 8026f54:	9904      	ldr	r1, [sp, #16]
 8026f56:	4301      	orrs	r1, r0
 8026f58:	f47f aec6 	bne.w	8026ce8 <_strtod_l+0x88>
 8026f5c:	2b00      	cmp	r3, #0
 8026f5e:	f47f aee1 	bne.w	8026d24 <_strtod_l+0xc4>
 8026f62:	2a69      	cmp	r2, #105	; 0x69
 8026f64:	d027      	beq.n	8026fb6 <_strtod_l+0x356>
 8026f66:	dc24      	bgt.n	8026fb2 <_strtod_l+0x352>
 8026f68:	2a49      	cmp	r2, #73	; 0x49
 8026f6a:	d024      	beq.n	8026fb6 <_strtod_l+0x356>
 8026f6c:	2a4e      	cmp	r2, #78	; 0x4e
 8026f6e:	f47f aed9 	bne.w	8026d24 <_strtod_l+0xc4>
 8026f72:	499f      	ldr	r1, [pc, #636]	; (80271f0 <_strtod_l+0x590>)
 8026f74:	a817      	add	r0, sp, #92	; 0x5c
 8026f76:	f002 f965 	bl	8029244 <__match>
 8026f7a:	2800      	cmp	r0, #0
 8026f7c:	f43f aed2 	beq.w	8026d24 <_strtod_l+0xc4>
 8026f80:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8026f82:	781b      	ldrb	r3, [r3, #0]
 8026f84:	2b28      	cmp	r3, #40	; 0x28
 8026f86:	d12d      	bne.n	8026fe4 <_strtod_l+0x384>
 8026f88:	499a      	ldr	r1, [pc, #616]	; (80271f4 <_strtod_l+0x594>)
 8026f8a:	aa1a      	add	r2, sp, #104	; 0x68
 8026f8c:	a817      	add	r0, sp, #92	; 0x5c
 8026f8e:	f002 f96d 	bl	802926c <__hexnan>
 8026f92:	2805      	cmp	r0, #5
 8026f94:	d126      	bne.n	8026fe4 <_strtod_l+0x384>
 8026f96:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8026f98:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8026f9c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8026fa0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8026fa4:	e6a0      	b.n	8026ce8 <_strtod_l+0x88>
 8026fa6:	210a      	movs	r1, #10
 8026fa8:	fb01 2e0e 	mla	lr, r1, lr, r2
 8026fac:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8026fb0:	e7b9      	b.n	8026f26 <_strtod_l+0x2c6>
 8026fb2:	2a6e      	cmp	r2, #110	; 0x6e
 8026fb4:	e7db      	b.n	8026f6e <_strtod_l+0x30e>
 8026fb6:	4990      	ldr	r1, [pc, #576]	; (80271f8 <_strtod_l+0x598>)
 8026fb8:	a817      	add	r0, sp, #92	; 0x5c
 8026fba:	f002 f943 	bl	8029244 <__match>
 8026fbe:	2800      	cmp	r0, #0
 8026fc0:	f43f aeb0 	beq.w	8026d24 <_strtod_l+0xc4>
 8026fc4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8026fc6:	498d      	ldr	r1, [pc, #564]	; (80271fc <_strtod_l+0x59c>)
 8026fc8:	3b01      	subs	r3, #1
 8026fca:	a817      	add	r0, sp, #92	; 0x5c
 8026fcc:	9317      	str	r3, [sp, #92]	; 0x5c
 8026fce:	f002 f939 	bl	8029244 <__match>
 8026fd2:	b910      	cbnz	r0, 8026fda <_strtod_l+0x37a>
 8026fd4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8026fd6:	3301      	adds	r3, #1
 8026fd8:	9317      	str	r3, [sp, #92]	; 0x5c
 8026fda:	f8df b230 	ldr.w	fp, [pc, #560]	; 802720c <_strtod_l+0x5ac>
 8026fde:	f04f 0a00 	mov.w	sl, #0
 8026fe2:	e681      	b.n	8026ce8 <_strtod_l+0x88>
 8026fe4:	4886      	ldr	r0, [pc, #536]	; (8027200 <_strtod_l+0x5a0>)
 8026fe6:	f003 fc13 	bl	802a810 <nan>
 8026fea:	ec5b ab10 	vmov	sl, fp, d0
 8026fee:	e67b      	b.n	8026ce8 <_strtod_l+0x88>
 8026ff0:	9b05      	ldr	r3, [sp, #20]
 8026ff2:	9807      	ldr	r0, [sp, #28]
 8026ff4:	1af3      	subs	r3, r6, r3
 8026ff6:	2f00      	cmp	r7, #0
 8026ff8:	bf08      	it	eq
 8026ffa:	462f      	moveq	r7, r5
 8026ffc:	2d10      	cmp	r5, #16
 8026ffe:	9306      	str	r3, [sp, #24]
 8027000:	46a8      	mov	r8, r5
 8027002:	bfa8      	it	ge
 8027004:	f04f 0810 	movge.w	r8, #16
 8027008:	f7d9 fa8c 	bl	8000524 <__aeabi_ui2d>
 802700c:	2d09      	cmp	r5, #9
 802700e:	4682      	mov	sl, r0
 8027010:	468b      	mov	fp, r1
 8027012:	dd13      	ble.n	802703c <_strtod_l+0x3dc>
 8027014:	4b7b      	ldr	r3, [pc, #492]	; (8027204 <_strtod_l+0x5a4>)
 8027016:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 802701a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 802701e:	f7d9 fafb 	bl	8000618 <__aeabi_dmul>
 8027022:	4682      	mov	sl, r0
 8027024:	4648      	mov	r0, r9
 8027026:	468b      	mov	fp, r1
 8027028:	f7d9 fa7c 	bl	8000524 <__aeabi_ui2d>
 802702c:	4602      	mov	r2, r0
 802702e:	460b      	mov	r3, r1
 8027030:	4650      	mov	r0, sl
 8027032:	4659      	mov	r1, fp
 8027034:	f7d9 f93a 	bl	80002ac <__adddf3>
 8027038:	4682      	mov	sl, r0
 802703a:	468b      	mov	fp, r1
 802703c:	2d0f      	cmp	r5, #15
 802703e:	dc38      	bgt.n	80270b2 <_strtod_l+0x452>
 8027040:	9b06      	ldr	r3, [sp, #24]
 8027042:	2b00      	cmp	r3, #0
 8027044:	f43f ae50 	beq.w	8026ce8 <_strtod_l+0x88>
 8027048:	dd24      	ble.n	8027094 <_strtod_l+0x434>
 802704a:	2b16      	cmp	r3, #22
 802704c:	dc0b      	bgt.n	8027066 <_strtod_l+0x406>
 802704e:	496d      	ldr	r1, [pc, #436]	; (8027204 <_strtod_l+0x5a4>)
 8027050:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8027054:	e9d1 0100 	ldrd	r0, r1, [r1]
 8027058:	4652      	mov	r2, sl
 802705a:	465b      	mov	r3, fp
 802705c:	f7d9 fadc 	bl	8000618 <__aeabi_dmul>
 8027060:	4682      	mov	sl, r0
 8027062:	468b      	mov	fp, r1
 8027064:	e640      	b.n	8026ce8 <_strtod_l+0x88>
 8027066:	9a06      	ldr	r2, [sp, #24]
 8027068:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 802706c:	4293      	cmp	r3, r2
 802706e:	db20      	blt.n	80270b2 <_strtod_l+0x452>
 8027070:	4c64      	ldr	r4, [pc, #400]	; (8027204 <_strtod_l+0x5a4>)
 8027072:	f1c5 050f 	rsb	r5, r5, #15
 8027076:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 802707a:	4652      	mov	r2, sl
 802707c:	465b      	mov	r3, fp
 802707e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8027082:	f7d9 fac9 	bl	8000618 <__aeabi_dmul>
 8027086:	9b06      	ldr	r3, [sp, #24]
 8027088:	1b5d      	subs	r5, r3, r5
 802708a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 802708e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8027092:	e7e3      	b.n	802705c <_strtod_l+0x3fc>
 8027094:	9b06      	ldr	r3, [sp, #24]
 8027096:	3316      	adds	r3, #22
 8027098:	db0b      	blt.n	80270b2 <_strtod_l+0x452>
 802709a:	9b05      	ldr	r3, [sp, #20]
 802709c:	1b9e      	subs	r6, r3, r6
 802709e:	4b59      	ldr	r3, [pc, #356]	; (8027204 <_strtod_l+0x5a4>)
 80270a0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80270a4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80270a8:	4650      	mov	r0, sl
 80270aa:	4659      	mov	r1, fp
 80270ac:	f7d9 fbde 	bl	800086c <__aeabi_ddiv>
 80270b0:	e7d6      	b.n	8027060 <_strtod_l+0x400>
 80270b2:	9b06      	ldr	r3, [sp, #24]
 80270b4:	eba5 0808 	sub.w	r8, r5, r8
 80270b8:	4498      	add	r8, r3
 80270ba:	f1b8 0f00 	cmp.w	r8, #0
 80270be:	dd74      	ble.n	80271aa <_strtod_l+0x54a>
 80270c0:	f018 030f 	ands.w	r3, r8, #15
 80270c4:	d00a      	beq.n	80270dc <_strtod_l+0x47c>
 80270c6:	494f      	ldr	r1, [pc, #316]	; (8027204 <_strtod_l+0x5a4>)
 80270c8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80270cc:	4652      	mov	r2, sl
 80270ce:	465b      	mov	r3, fp
 80270d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80270d4:	f7d9 faa0 	bl	8000618 <__aeabi_dmul>
 80270d8:	4682      	mov	sl, r0
 80270da:	468b      	mov	fp, r1
 80270dc:	f038 080f 	bics.w	r8, r8, #15
 80270e0:	d04f      	beq.n	8027182 <_strtod_l+0x522>
 80270e2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80270e6:	dd22      	ble.n	802712e <_strtod_l+0x4ce>
 80270e8:	2500      	movs	r5, #0
 80270ea:	462e      	mov	r6, r5
 80270ec:	9507      	str	r5, [sp, #28]
 80270ee:	9505      	str	r5, [sp, #20]
 80270f0:	2322      	movs	r3, #34	; 0x22
 80270f2:	f8df b118 	ldr.w	fp, [pc, #280]	; 802720c <_strtod_l+0x5ac>
 80270f6:	6023      	str	r3, [r4, #0]
 80270f8:	f04f 0a00 	mov.w	sl, #0
 80270fc:	9b07      	ldr	r3, [sp, #28]
 80270fe:	2b00      	cmp	r3, #0
 8027100:	f43f adf2 	beq.w	8026ce8 <_strtod_l+0x88>
 8027104:	9918      	ldr	r1, [sp, #96]	; 0x60
 8027106:	4620      	mov	r0, r4
 8027108:	f002 fa2a 	bl	8029560 <_Bfree>
 802710c:	9905      	ldr	r1, [sp, #20]
 802710e:	4620      	mov	r0, r4
 8027110:	f002 fa26 	bl	8029560 <_Bfree>
 8027114:	4631      	mov	r1, r6
 8027116:	4620      	mov	r0, r4
 8027118:	f002 fa22 	bl	8029560 <_Bfree>
 802711c:	9907      	ldr	r1, [sp, #28]
 802711e:	4620      	mov	r0, r4
 8027120:	f002 fa1e 	bl	8029560 <_Bfree>
 8027124:	4629      	mov	r1, r5
 8027126:	4620      	mov	r0, r4
 8027128:	f002 fa1a 	bl	8029560 <_Bfree>
 802712c:	e5dc      	b.n	8026ce8 <_strtod_l+0x88>
 802712e:	4b36      	ldr	r3, [pc, #216]	; (8027208 <_strtod_l+0x5a8>)
 8027130:	9304      	str	r3, [sp, #16]
 8027132:	2300      	movs	r3, #0
 8027134:	ea4f 1828 	mov.w	r8, r8, asr #4
 8027138:	4650      	mov	r0, sl
 802713a:	4659      	mov	r1, fp
 802713c:	4699      	mov	r9, r3
 802713e:	f1b8 0f01 	cmp.w	r8, #1
 8027142:	dc21      	bgt.n	8027188 <_strtod_l+0x528>
 8027144:	b10b      	cbz	r3, 802714a <_strtod_l+0x4ea>
 8027146:	4682      	mov	sl, r0
 8027148:	468b      	mov	fp, r1
 802714a:	4b2f      	ldr	r3, [pc, #188]	; (8027208 <_strtod_l+0x5a8>)
 802714c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8027150:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8027154:	4652      	mov	r2, sl
 8027156:	465b      	mov	r3, fp
 8027158:	e9d9 0100 	ldrd	r0, r1, [r9]
 802715c:	f7d9 fa5c 	bl	8000618 <__aeabi_dmul>
 8027160:	4b2a      	ldr	r3, [pc, #168]	; (802720c <_strtod_l+0x5ac>)
 8027162:	460a      	mov	r2, r1
 8027164:	400b      	ands	r3, r1
 8027166:	492a      	ldr	r1, [pc, #168]	; (8027210 <_strtod_l+0x5b0>)
 8027168:	428b      	cmp	r3, r1
 802716a:	4682      	mov	sl, r0
 802716c:	d8bc      	bhi.n	80270e8 <_strtod_l+0x488>
 802716e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8027172:	428b      	cmp	r3, r1
 8027174:	bf86      	itte	hi
 8027176:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8027214 <_strtod_l+0x5b4>
 802717a:	f04f 3aff 	movhi.w	sl, #4294967295
 802717e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8027182:	2300      	movs	r3, #0
 8027184:	9304      	str	r3, [sp, #16]
 8027186:	e084      	b.n	8027292 <_strtod_l+0x632>
 8027188:	f018 0f01 	tst.w	r8, #1
 802718c:	d005      	beq.n	802719a <_strtod_l+0x53a>
 802718e:	9b04      	ldr	r3, [sp, #16]
 8027190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027194:	f7d9 fa40 	bl	8000618 <__aeabi_dmul>
 8027198:	2301      	movs	r3, #1
 802719a:	9a04      	ldr	r2, [sp, #16]
 802719c:	3208      	adds	r2, #8
 802719e:	f109 0901 	add.w	r9, r9, #1
 80271a2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80271a6:	9204      	str	r2, [sp, #16]
 80271a8:	e7c9      	b.n	802713e <_strtod_l+0x4de>
 80271aa:	d0ea      	beq.n	8027182 <_strtod_l+0x522>
 80271ac:	f1c8 0800 	rsb	r8, r8, #0
 80271b0:	f018 020f 	ands.w	r2, r8, #15
 80271b4:	d00a      	beq.n	80271cc <_strtod_l+0x56c>
 80271b6:	4b13      	ldr	r3, [pc, #76]	; (8027204 <_strtod_l+0x5a4>)
 80271b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80271bc:	4650      	mov	r0, sl
 80271be:	4659      	mov	r1, fp
 80271c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80271c4:	f7d9 fb52 	bl	800086c <__aeabi_ddiv>
 80271c8:	4682      	mov	sl, r0
 80271ca:	468b      	mov	fp, r1
 80271cc:	ea5f 1828 	movs.w	r8, r8, asr #4
 80271d0:	d0d7      	beq.n	8027182 <_strtod_l+0x522>
 80271d2:	f1b8 0f1f 	cmp.w	r8, #31
 80271d6:	dd1f      	ble.n	8027218 <_strtod_l+0x5b8>
 80271d8:	2500      	movs	r5, #0
 80271da:	462e      	mov	r6, r5
 80271dc:	9507      	str	r5, [sp, #28]
 80271de:	9505      	str	r5, [sp, #20]
 80271e0:	2322      	movs	r3, #34	; 0x22
 80271e2:	f04f 0a00 	mov.w	sl, #0
 80271e6:	f04f 0b00 	mov.w	fp, #0
 80271ea:	6023      	str	r3, [r4, #0]
 80271ec:	e786      	b.n	80270fc <_strtod_l+0x49c>
 80271ee:	bf00      	nop
 80271f0:	08030f5e 	.word	0x08030f5e
 80271f4:	0803100c 	.word	0x0803100c
 80271f8:	08030f56 	.word	0x08030f56
 80271fc:	080310e4 	.word	0x080310e4
 8027200:	080310e0 	.word	0x080310e0
 8027204:	080312c0 	.word	0x080312c0
 8027208:	08031298 	.word	0x08031298
 802720c:	7ff00000 	.word	0x7ff00000
 8027210:	7ca00000 	.word	0x7ca00000
 8027214:	7fefffff 	.word	0x7fefffff
 8027218:	f018 0310 	ands.w	r3, r8, #16
 802721c:	bf18      	it	ne
 802721e:	236a      	movne	r3, #106	; 0x6a
 8027220:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80275d0 <_strtod_l+0x970>
 8027224:	9304      	str	r3, [sp, #16]
 8027226:	4650      	mov	r0, sl
 8027228:	4659      	mov	r1, fp
 802722a:	2300      	movs	r3, #0
 802722c:	f018 0f01 	tst.w	r8, #1
 8027230:	d004      	beq.n	802723c <_strtod_l+0x5dc>
 8027232:	e9d9 2300 	ldrd	r2, r3, [r9]
 8027236:	f7d9 f9ef 	bl	8000618 <__aeabi_dmul>
 802723a:	2301      	movs	r3, #1
 802723c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8027240:	f109 0908 	add.w	r9, r9, #8
 8027244:	d1f2      	bne.n	802722c <_strtod_l+0x5cc>
 8027246:	b10b      	cbz	r3, 802724c <_strtod_l+0x5ec>
 8027248:	4682      	mov	sl, r0
 802724a:	468b      	mov	fp, r1
 802724c:	9b04      	ldr	r3, [sp, #16]
 802724e:	b1c3      	cbz	r3, 8027282 <_strtod_l+0x622>
 8027250:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8027254:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8027258:	2b00      	cmp	r3, #0
 802725a:	4659      	mov	r1, fp
 802725c:	dd11      	ble.n	8027282 <_strtod_l+0x622>
 802725e:	2b1f      	cmp	r3, #31
 8027260:	f340 8124 	ble.w	80274ac <_strtod_l+0x84c>
 8027264:	2b34      	cmp	r3, #52	; 0x34
 8027266:	bfde      	ittt	le
 8027268:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 802726c:	f04f 33ff 	movle.w	r3, #4294967295
 8027270:	fa03 f202 	lslle.w	r2, r3, r2
 8027274:	f04f 0a00 	mov.w	sl, #0
 8027278:	bfcc      	ite	gt
 802727a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 802727e:	ea02 0b01 	andle.w	fp, r2, r1
 8027282:	2200      	movs	r2, #0
 8027284:	2300      	movs	r3, #0
 8027286:	4650      	mov	r0, sl
 8027288:	4659      	mov	r1, fp
 802728a:	f7d9 fc2d 	bl	8000ae8 <__aeabi_dcmpeq>
 802728e:	2800      	cmp	r0, #0
 8027290:	d1a2      	bne.n	80271d8 <_strtod_l+0x578>
 8027292:	9b07      	ldr	r3, [sp, #28]
 8027294:	9300      	str	r3, [sp, #0]
 8027296:	9908      	ldr	r1, [sp, #32]
 8027298:	462b      	mov	r3, r5
 802729a:	463a      	mov	r2, r7
 802729c:	4620      	mov	r0, r4
 802729e:	f002 f9c7 	bl	8029630 <__s2b>
 80272a2:	9007      	str	r0, [sp, #28]
 80272a4:	2800      	cmp	r0, #0
 80272a6:	f43f af1f 	beq.w	80270e8 <_strtod_l+0x488>
 80272aa:	9b05      	ldr	r3, [sp, #20]
 80272ac:	1b9e      	subs	r6, r3, r6
 80272ae:	9b06      	ldr	r3, [sp, #24]
 80272b0:	2b00      	cmp	r3, #0
 80272b2:	bfb4      	ite	lt
 80272b4:	4633      	movlt	r3, r6
 80272b6:	2300      	movge	r3, #0
 80272b8:	930c      	str	r3, [sp, #48]	; 0x30
 80272ba:	9b06      	ldr	r3, [sp, #24]
 80272bc:	2500      	movs	r5, #0
 80272be:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80272c2:	9312      	str	r3, [sp, #72]	; 0x48
 80272c4:	462e      	mov	r6, r5
 80272c6:	9b07      	ldr	r3, [sp, #28]
 80272c8:	4620      	mov	r0, r4
 80272ca:	6859      	ldr	r1, [r3, #4]
 80272cc:	f002 f908 	bl	80294e0 <_Balloc>
 80272d0:	9005      	str	r0, [sp, #20]
 80272d2:	2800      	cmp	r0, #0
 80272d4:	f43f af0c 	beq.w	80270f0 <_strtod_l+0x490>
 80272d8:	9b07      	ldr	r3, [sp, #28]
 80272da:	691a      	ldr	r2, [r3, #16]
 80272dc:	3202      	adds	r2, #2
 80272de:	f103 010c 	add.w	r1, r3, #12
 80272e2:	0092      	lsls	r2, r2, #2
 80272e4:	300c      	adds	r0, #12
 80272e6:	f7fe fc1d 	bl	8025b24 <memcpy>
 80272ea:	ec4b ab10 	vmov	d0, sl, fp
 80272ee:	aa1a      	add	r2, sp, #104	; 0x68
 80272f0:	a919      	add	r1, sp, #100	; 0x64
 80272f2:	4620      	mov	r0, r4
 80272f4:	f002 fce2 	bl	8029cbc <__d2b>
 80272f8:	ec4b ab18 	vmov	d8, sl, fp
 80272fc:	9018      	str	r0, [sp, #96]	; 0x60
 80272fe:	2800      	cmp	r0, #0
 8027300:	f43f aef6 	beq.w	80270f0 <_strtod_l+0x490>
 8027304:	2101      	movs	r1, #1
 8027306:	4620      	mov	r0, r4
 8027308:	f002 fa2c 	bl	8029764 <__i2b>
 802730c:	4606      	mov	r6, r0
 802730e:	2800      	cmp	r0, #0
 8027310:	f43f aeee 	beq.w	80270f0 <_strtod_l+0x490>
 8027314:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8027316:	9904      	ldr	r1, [sp, #16]
 8027318:	2b00      	cmp	r3, #0
 802731a:	bfab      	itete	ge
 802731c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 802731e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8027320:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8027322:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8027326:	bfac      	ite	ge
 8027328:	eb03 0902 	addge.w	r9, r3, r2
 802732c:	1ad7      	sublt	r7, r2, r3
 802732e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8027330:	eba3 0801 	sub.w	r8, r3, r1
 8027334:	4490      	add	r8, r2
 8027336:	4ba1      	ldr	r3, [pc, #644]	; (80275bc <_strtod_l+0x95c>)
 8027338:	f108 38ff 	add.w	r8, r8, #4294967295
 802733c:	4598      	cmp	r8, r3
 802733e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8027342:	f280 80c7 	bge.w	80274d4 <_strtod_l+0x874>
 8027346:	eba3 0308 	sub.w	r3, r3, r8
 802734a:	2b1f      	cmp	r3, #31
 802734c:	eba2 0203 	sub.w	r2, r2, r3
 8027350:	f04f 0101 	mov.w	r1, #1
 8027354:	f300 80b1 	bgt.w	80274ba <_strtod_l+0x85a>
 8027358:	fa01 f303 	lsl.w	r3, r1, r3
 802735c:	930d      	str	r3, [sp, #52]	; 0x34
 802735e:	2300      	movs	r3, #0
 8027360:	9308      	str	r3, [sp, #32]
 8027362:	eb09 0802 	add.w	r8, r9, r2
 8027366:	9b04      	ldr	r3, [sp, #16]
 8027368:	45c1      	cmp	r9, r8
 802736a:	4417      	add	r7, r2
 802736c:	441f      	add	r7, r3
 802736e:	464b      	mov	r3, r9
 8027370:	bfa8      	it	ge
 8027372:	4643      	movge	r3, r8
 8027374:	42bb      	cmp	r3, r7
 8027376:	bfa8      	it	ge
 8027378:	463b      	movge	r3, r7
 802737a:	2b00      	cmp	r3, #0
 802737c:	bfc2      	ittt	gt
 802737e:	eba8 0803 	subgt.w	r8, r8, r3
 8027382:	1aff      	subgt	r7, r7, r3
 8027384:	eba9 0903 	subgt.w	r9, r9, r3
 8027388:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802738a:	2b00      	cmp	r3, #0
 802738c:	dd17      	ble.n	80273be <_strtod_l+0x75e>
 802738e:	4631      	mov	r1, r6
 8027390:	461a      	mov	r2, r3
 8027392:	4620      	mov	r0, r4
 8027394:	f002 faa6 	bl	80298e4 <__pow5mult>
 8027398:	4606      	mov	r6, r0
 802739a:	2800      	cmp	r0, #0
 802739c:	f43f aea8 	beq.w	80270f0 <_strtod_l+0x490>
 80273a0:	4601      	mov	r1, r0
 80273a2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80273a4:	4620      	mov	r0, r4
 80273a6:	f002 f9f3 	bl	8029790 <__multiply>
 80273aa:	900b      	str	r0, [sp, #44]	; 0x2c
 80273ac:	2800      	cmp	r0, #0
 80273ae:	f43f ae9f 	beq.w	80270f0 <_strtod_l+0x490>
 80273b2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80273b4:	4620      	mov	r0, r4
 80273b6:	f002 f8d3 	bl	8029560 <_Bfree>
 80273ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80273bc:	9318      	str	r3, [sp, #96]	; 0x60
 80273be:	f1b8 0f00 	cmp.w	r8, #0
 80273c2:	f300 808c 	bgt.w	80274de <_strtod_l+0x87e>
 80273c6:	9b06      	ldr	r3, [sp, #24]
 80273c8:	2b00      	cmp	r3, #0
 80273ca:	dd08      	ble.n	80273de <_strtod_l+0x77e>
 80273cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80273ce:	9905      	ldr	r1, [sp, #20]
 80273d0:	4620      	mov	r0, r4
 80273d2:	f002 fa87 	bl	80298e4 <__pow5mult>
 80273d6:	9005      	str	r0, [sp, #20]
 80273d8:	2800      	cmp	r0, #0
 80273da:	f43f ae89 	beq.w	80270f0 <_strtod_l+0x490>
 80273de:	2f00      	cmp	r7, #0
 80273e0:	dd08      	ble.n	80273f4 <_strtod_l+0x794>
 80273e2:	9905      	ldr	r1, [sp, #20]
 80273e4:	463a      	mov	r2, r7
 80273e6:	4620      	mov	r0, r4
 80273e8:	f002 fad6 	bl	8029998 <__lshift>
 80273ec:	9005      	str	r0, [sp, #20]
 80273ee:	2800      	cmp	r0, #0
 80273f0:	f43f ae7e 	beq.w	80270f0 <_strtod_l+0x490>
 80273f4:	f1b9 0f00 	cmp.w	r9, #0
 80273f8:	dd08      	ble.n	802740c <_strtod_l+0x7ac>
 80273fa:	4631      	mov	r1, r6
 80273fc:	464a      	mov	r2, r9
 80273fe:	4620      	mov	r0, r4
 8027400:	f002 faca 	bl	8029998 <__lshift>
 8027404:	4606      	mov	r6, r0
 8027406:	2800      	cmp	r0, #0
 8027408:	f43f ae72 	beq.w	80270f0 <_strtod_l+0x490>
 802740c:	9a05      	ldr	r2, [sp, #20]
 802740e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8027410:	4620      	mov	r0, r4
 8027412:	f002 fb4d 	bl	8029ab0 <__mdiff>
 8027416:	4605      	mov	r5, r0
 8027418:	2800      	cmp	r0, #0
 802741a:	f43f ae69 	beq.w	80270f0 <_strtod_l+0x490>
 802741e:	68c3      	ldr	r3, [r0, #12]
 8027420:	930b      	str	r3, [sp, #44]	; 0x2c
 8027422:	2300      	movs	r3, #0
 8027424:	60c3      	str	r3, [r0, #12]
 8027426:	4631      	mov	r1, r6
 8027428:	f002 fb26 	bl	8029a78 <__mcmp>
 802742c:	2800      	cmp	r0, #0
 802742e:	da60      	bge.n	80274f2 <_strtod_l+0x892>
 8027430:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8027432:	ea53 030a 	orrs.w	r3, r3, sl
 8027436:	f040 8082 	bne.w	802753e <_strtod_l+0x8de>
 802743a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 802743e:	2b00      	cmp	r3, #0
 8027440:	d17d      	bne.n	802753e <_strtod_l+0x8de>
 8027442:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8027446:	0d1b      	lsrs	r3, r3, #20
 8027448:	051b      	lsls	r3, r3, #20
 802744a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 802744e:	d976      	bls.n	802753e <_strtod_l+0x8de>
 8027450:	696b      	ldr	r3, [r5, #20]
 8027452:	b913      	cbnz	r3, 802745a <_strtod_l+0x7fa>
 8027454:	692b      	ldr	r3, [r5, #16]
 8027456:	2b01      	cmp	r3, #1
 8027458:	dd71      	ble.n	802753e <_strtod_l+0x8de>
 802745a:	4629      	mov	r1, r5
 802745c:	2201      	movs	r2, #1
 802745e:	4620      	mov	r0, r4
 8027460:	f002 fa9a 	bl	8029998 <__lshift>
 8027464:	4631      	mov	r1, r6
 8027466:	4605      	mov	r5, r0
 8027468:	f002 fb06 	bl	8029a78 <__mcmp>
 802746c:	2800      	cmp	r0, #0
 802746e:	dd66      	ble.n	802753e <_strtod_l+0x8de>
 8027470:	9904      	ldr	r1, [sp, #16]
 8027472:	4a53      	ldr	r2, [pc, #332]	; (80275c0 <_strtod_l+0x960>)
 8027474:	465b      	mov	r3, fp
 8027476:	2900      	cmp	r1, #0
 8027478:	f000 8081 	beq.w	802757e <_strtod_l+0x91e>
 802747c:	ea02 010b 	and.w	r1, r2, fp
 8027480:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8027484:	dc7b      	bgt.n	802757e <_strtod_l+0x91e>
 8027486:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 802748a:	f77f aea9 	ble.w	80271e0 <_strtod_l+0x580>
 802748e:	4b4d      	ldr	r3, [pc, #308]	; (80275c4 <_strtod_l+0x964>)
 8027490:	4650      	mov	r0, sl
 8027492:	4659      	mov	r1, fp
 8027494:	2200      	movs	r2, #0
 8027496:	f7d9 f8bf 	bl	8000618 <__aeabi_dmul>
 802749a:	460b      	mov	r3, r1
 802749c:	4303      	orrs	r3, r0
 802749e:	bf08      	it	eq
 80274a0:	2322      	moveq	r3, #34	; 0x22
 80274a2:	4682      	mov	sl, r0
 80274a4:	468b      	mov	fp, r1
 80274a6:	bf08      	it	eq
 80274a8:	6023      	streq	r3, [r4, #0]
 80274aa:	e62b      	b.n	8027104 <_strtod_l+0x4a4>
 80274ac:	f04f 32ff 	mov.w	r2, #4294967295
 80274b0:	fa02 f303 	lsl.w	r3, r2, r3
 80274b4:	ea03 0a0a 	and.w	sl, r3, sl
 80274b8:	e6e3      	b.n	8027282 <_strtod_l+0x622>
 80274ba:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80274be:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80274c2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80274c6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80274ca:	fa01 f308 	lsl.w	r3, r1, r8
 80274ce:	9308      	str	r3, [sp, #32]
 80274d0:	910d      	str	r1, [sp, #52]	; 0x34
 80274d2:	e746      	b.n	8027362 <_strtod_l+0x702>
 80274d4:	2300      	movs	r3, #0
 80274d6:	9308      	str	r3, [sp, #32]
 80274d8:	2301      	movs	r3, #1
 80274da:	930d      	str	r3, [sp, #52]	; 0x34
 80274dc:	e741      	b.n	8027362 <_strtod_l+0x702>
 80274de:	9918      	ldr	r1, [sp, #96]	; 0x60
 80274e0:	4642      	mov	r2, r8
 80274e2:	4620      	mov	r0, r4
 80274e4:	f002 fa58 	bl	8029998 <__lshift>
 80274e8:	9018      	str	r0, [sp, #96]	; 0x60
 80274ea:	2800      	cmp	r0, #0
 80274ec:	f47f af6b 	bne.w	80273c6 <_strtod_l+0x766>
 80274f0:	e5fe      	b.n	80270f0 <_strtod_l+0x490>
 80274f2:	465f      	mov	r7, fp
 80274f4:	d16e      	bne.n	80275d4 <_strtod_l+0x974>
 80274f6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80274f8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80274fc:	b342      	cbz	r2, 8027550 <_strtod_l+0x8f0>
 80274fe:	4a32      	ldr	r2, [pc, #200]	; (80275c8 <_strtod_l+0x968>)
 8027500:	4293      	cmp	r3, r2
 8027502:	d128      	bne.n	8027556 <_strtod_l+0x8f6>
 8027504:	9b04      	ldr	r3, [sp, #16]
 8027506:	4651      	mov	r1, sl
 8027508:	b1eb      	cbz	r3, 8027546 <_strtod_l+0x8e6>
 802750a:	4b2d      	ldr	r3, [pc, #180]	; (80275c0 <_strtod_l+0x960>)
 802750c:	403b      	ands	r3, r7
 802750e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8027512:	f04f 32ff 	mov.w	r2, #4294967295
 8027516:	d819      	bhi.n	802754c <_strtod_l+0x8ec>
 8027518:	0d1b      	lsrs	r3, r3, #20
 802751a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 802751e:	fa02 f303 	lsl.w	r3, r2, r3
 8027522:	4299      	cmp	r1, r3
 8027524:	d117      	bne.n	8027556 <_strtod_l+0x8f6>
 8027526:	4b29      	ldr	r3, [pc, #164]	; (80275cc <_strtod_l+0x96c>)
 8027528:	429f      	cmp	r7, r3
 802752a:	d102      	bne.n	8027532 <_strtod_l+0x8d2>
 802752c:	3101      	adds	r1, #1
 802752e:	f43f addf 	beq.w	80270f0 <_strtod_l+0x490>
 8027532:	4b23      	ldr	r3, [pc, #140]	; (80275c0 <_strtod_l+0x960>)
 8027534:	403b      	ands	r3, r7
 8027536:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 802753a:	f04f 0a00 	mov.w	sl, #0
 802753e:	9b04      	ldr	r3, [sp, #16]
 8027540:	2b00      	cmp	r3, #0
 8027542:	d1a4      	bne.n	802748e <_strtod_l+0x82e>
 8027544:	e5de      	b.n	8027104 <_strtod_l+0x4a4>
 8027546:	f04f 33ff 	mov.w	r3, #4294967295
 802754a:	e7ea      	b.n	8027522 <_strtod_l+0x8c2>
 802754c:	4613      	mov	r3, r2
 802754e:	e7e8      	b.n	8027522 <_strtod_l+0x8c2>
 8027550:	ea53 030a 	orrs.w	r3, r3, sl
 8027554:	d08c      	beq.n	8027470 <_strtod_l+0x810>
 8027556:	9b08      	ldr	r3, [sp, #32]
 8027558:	b1db      	cbz	r3, 8027592 <_strtod_l+0x932>
 802755a:	423b      	tst	r3, r7
 802755c:	d0ef      	beq.n	802753e <_strtod_l+0x8de>
 802755e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8027560:	9a04      	ldr	r2, [sp, #16]
 8027562:	4650      	mov	r0, sl
 8027564:	4659      	mov	r1, fp
 8027566:	b1c3      	cbz	r3, 802759a <_strtod_l+0x93a>
 8027568:	f7ff fb5d 	bl	8026c26 <sulp>
 802756c:	4602      	mov	r2, r0
 802756e:	460b      	mov	r3, r1
 8027570:	ec51 0b18 	vmov	r0, r1, d8
 8027574:	f7d8 fe9a 	bl	80002ac <__adddf3>
 8027578:	4682      	mov	sl, r0
 802757a:	468b      	mov	fp, r1
 802757c:	e7df      	b.n	802753e <_strtod_l+0x8de>
 802757e:	4013      	ands	r3, r2
 8027580:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8027584:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8027588:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 802758c:	f04f 3aff 	mov.w	sl, #4294967295
 8027590:	e7d5      	b.n	802753e <_strtod_l+0x8de>
 8027592:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8027594:	ea13 0f0a 	tst.w	r3, sl
 8027598:	e7e0      	b.n	802755c <_strtod_l+0x8fc>
 802759a:	f7ff fb44 	bl	8026c26 <sulp>
 802759e:	4602      	mov	r2, r0
 80275a0:	460b      	mov	r3, r1
 80275a2:	ec51 0b18 	vmov	r0, r1, d8
 80275a6:	f7d8 fe7f 	bl	80002a8 <__aeabi_dsub>
 80275aa:	2200      	movs	r2, #0
 80275ac:	2300      	movs	r3, #0
 80275ae:	4682      	mov	sl, r0
 80275b0:	468b      	mov	fp, r1
 80275b2:	f7d9 fa99 	bl	8000ae8 <__aeabi_dcmpeq>
 80275b6:	2800      	cmp	r0, #0
 80275b8:	d0c1      	beq.n	802753e <_strtod_l+0x8de>
 80275ba:	e611      	b.n	80271e0 <_strtod_l+0x580>
 80275bc:	fffffc02 	.word	0xfffffc02
 80275c0:	7ff00000 	.word	0x7ff00000
 80275c4:	39500000 	.word	0x39500000
 80275c8:	000fffff 	.word	0x000fffff
 80275cc:	7fefffff 	.word	0x7fefffff
 80275d0:	08031020 	.word	0x08031020
 80275d4:	4631      	mov	r1, r6
 80275d6:	4628      	mov	r0, r5
 80275d8:	f002 fbcc 	bl	8029d74 <__ratio>
 80275dc:	ec59 8b10 	vmov	r8, r9, d0
 80275e0:	ee10 0a10 	vmov	r0, s0
 80275e4:	2200      	movs	r2, #0
 80275e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80275ea:	4649      	mov	r1, r9
 80275ec:	f7d9 fa90 	bl	8000b10 <__aeabi_dcmple>
 80275f0:	2800      	cmp	r0, #0
 80275f2:	d07a      	beq.n	80276ea <_strtod_l+0xa8a>
 80275f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80275f6:	2b00      	cmp	r3, #0
 80275f8:	d04a      	beq.n	8027690 <_strtod_l+0xa30>
 80275fa:	4b95      	ldr	r3, [pc, #596]	; (8027850 <_strtod_l+0xbf0>)
 80275fc:	2200      	movs	r2, #0
 80275fe:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8027602:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8027850 <_strtod_l+0xbf0>
 8027606:	f04f 0800 	mov.w	r8, #0
 802760a:	4b92      	ldr	r3, [pc, #584]	; (8027854 <_strtod_l+0xbf4>)
 802760c:	403b      	ands	r3, r7
 802760e:	930d      	str	r3, [sp, #52]	; 0x34
 8027610:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8027612:	4b91      	ldr	r3, [pc, #580]	; (8027858 <_strtod_l+0xbf8>)
 8027614:	429a      	cmp	r2, r3
 8027616:	f040 80b0 	bne.w	802777a <_strtod_l+0xb1a>
 802761a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 802761e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8027622:	ec4b ab10 	vmov	d0, sl, fp
 8027626:	e9cd 0108 	strd	r0, r1, [sp, #32]
 802762a:	f002 facb 	bl	8029bc4 <__ulp>
 802762e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8027632:	ec53 2b10 	vmov	r2, r3, d0
 8027636:	f7d8 ffef 	bl	8000618 <__aeabi_dmul>
 802763a:	4652      	mov	r2, sl
 802763c:	465b      	mov	r3, fp
 802763e:	f7d8 fe35 	bl	80002ac <__adddf3>
 8027642:	460b      	mov	r3, r1
 8027644:	4983      	ldr	r1, [pc, #524]	; (8027854 <_strtod_l+0xbf4>)
 8027646:	4a85      	ldr	r2, [pc, #532]	; (802785c <_strtod_l+0xbfc>)
 8027648:	4019      	ands	r1, r3
 802764a:	4291      	cmp	r1, r2
 802764c:	4682      	mov	sl, r0
 802764e:	d960      	bls.n	8027712 <_strtod_l+0xab2>
 8027650:	ee18 3a90 	vmov	r3, s17
 8027654:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8027658:	4293      	cmp	r3, r2
 802765a:	d104      	bne.n	8027666 <_strtod_l+0xa06>
 802765c:	ee18 3a10 	vmov	r3, s16
 8027660:	3301      	adds	r3, #1
 8027662:	f43f ad45 	beq.w	80270f0 <_strtod_l+0x490>
 8027666:	f8df b200 	ldr.w	fp, [pc, #512]	; 8027868 <_strtod_l+0xc08>
 802766a:	f04f 3aff 	mov.w	sl, #4294967295
 802766e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8027670:	4620      	mov	r0, r4
 8027672:	f001 ff75 	bl	8029560 <_Bfree>
 8027676:	9905      	ldr	r1, [sp, #20]
 8027678:	4620      	mov	r0, r4
 802767a:	f001 ff71 	bl	8029560 <_Bfree>
 802767e:	4631      	mov	r1, r6
 8027680:	4620      	mov	r0, r4
 8027682:	f001 ff6d 	bl	8029560 <_Bfree>
 8027686:	4629      	mov	r1, r5
 8027688:	4620      	mov	r0, r4
 802768a:	f001 ff69 	bl	8029560 <_Bfree>
 802768e:	e61a      	b.n	80272c6 <_strtod_l+0x666>
 8027690:	f1ba 0f00 	cmp.w	sl, #0
 8027694:	d11b      	bne.n	80276ce <_strtod_l+0xa6e>
 8027696:	f3cb 0313 	ubfx	r3, fp, #0, #20
 802769a:	b9f3      	cbnz	r3, 80276da <_strtod_l+0xa7a>
 802769c:	4b6c      	ldr	r3, [pc, #432]	; (8027850 <_strtod_l+0xbf0>)
 802769e:	2200      	movs	r2, #0
 80276a0:	4640      	mov	r0, r8
 80276a2:	4649      	mov	r1, r9
 80276a4:	f7d9 fa2a 	bl	8000afc <__aeabi_dcmplt>
 80276a8:	b9d0      	cbnz	r0, 80276e0 <_strtod_l+0xa80>
 80276aa:	4640      	mov	r0, r8
 80276ac:	4649      	mov	r1, r9
 80276ae:	4b6c      	ldr	r3, [pc, #432]	; (8027860 <_strtod_l+0xc00>)
 80276b0:	2200      	movs	r2, #0
 80276b2:	f7d8 ffb1 	bl	8000618 <__aeabi_dmul>
 80276b6:	4680      	mov	r8, r0
 80276b8:	4689      	mov	r9, r1
 80276ba:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80276be:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80276c2:	9315      	str	r3, [sp, #84]	; 0x54
 80276c4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80276c8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80276cc:	e79d      	b.n	802760a <_strtod_l+0x9aa>
 80276ce:	f1ba 0f01 	cmp.w	sl, #1
 80276d2:	d102      	bne.n	80276da <_strtod_l+0xa7a>
 80276d4:	2f00      	cmp	r7, #0
 80276d6:	f43f ad83 	beq.w	80271e0 <_strtod_l+0x580>
 80276da:	4b62      	ldr	r3, [pc, #392]	; (8027864 <_strtod_l+0xc04>)
 80276dc:	2200      	movs	r2, #0
 80276de:	e78e      	b.n	80275fe <_strtod_l+0x99e>
 80276e0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8027860 <_strtod_l+0xc00>
 80276e4:	f04f 0800 	mov.w	r8, #0
 80276e8:	e7e7      	b.n	80276ba <_strtod_l+0xa5a>
 80276ea:	4b5d      	ldr	r3, [pc, #372]	; (8027860 <_strtod_l+0xc00>)
 80276ec:	4640      	mov	r0, r8
 80276ee:	4649      	mov	r1, r9
 80276f0:	2200      	movs	r2, #0
 80276f2:	f7d8 ff91 	bl	8000618 <__aeabi_dmul>
 80276f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80276f8:	4680      	mov	r8, r0
 80276fa:	4689      	mov	r9, r1
 80276fc:	b933      	cbnz	r3, 802770c <_strtod_l+0xaac>
 80276fe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8027702:	900e      	str	r0, [sp, #56]	; 0x38
 8027704:	930f      	str	r3, [sp, #60]	; 0x3c
 8027706:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 802770a:	e7dd      	b.n	80276c8 <_strtod_l+0xa68>
 802770c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8027710:	e7f9      	b.n	8027706 <_strtod_l+0xaa6>
 8027712:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8027716:	9b04      	ldr	r3, [sp, #16]
 8027718:	2b00      	cmp	r3, #0
 802771a:	d1a8      	bne.n	802766e <_strtod_l+0xa0e>
 802771c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8027720:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8027722:	0d1b      	lsrs	r3, r3, #20
 8027724:	051b      	lsls	r3, r3, #20
 8027726:	429a      	cmp	r2, r3
 8027728:	d1a1      	bne.n	802766e <_strtod_l+0xa0e>
 802772a:	4640      	mov	r0, r8
 802772c:	4649      	mov	r1, r9
 802772e:	f7d9 fa83 	bl	8000c38 <__aeabi_d2lz>
 8027732:	f7d8 ff43 	bl	80005bc <__aeabi_l2d>
 8027736:	4602      	mov	r2, r0
 8027738:	460b      	mov	r3, r1
 802773a:	4640      	mov	r0, r8
 802773c:	4649      	mov	r1, r9
 802773e:	f7d8 fdb3 	bl	80002a8 <__aeabi_dsub>
 8027742:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8027744:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8027748:	ea43 030a 	orr.w	r3, r3, sl
 802774c:	4313      	orrs	r3, r2
 802774e:	4680      	mov	r8, r0
 8027750:	4689      	mov	r9, r1
 8027752:	d055      	beq.n	8027800 <_strtod_l+0xba0>
 8027754:	a336      	add	r3, pc, #216	; (adr r3, 8027830 <_strtod_l+0xbd0>)
 8027756:	e9d3 2300 	ldrd	r2, r3, [r3]
 802775a:	f7d9 f9cf 	bl	8000afc <__aeabi_dcmplt>
 802775e:	2800      	cmp	r0, #0
 8027760:	f47f acd0 	bne.w	8027104 <_strtod_l+0x4a4>
 8027764:	a334      	add	r3, pc, #208	; (adr r3, 8027838 <_strtod_l+0xbd8>)
 8027766:	e9d3 2300 	ldrd	r2, r3, [r3]
 802776a:	4640      	mov	r0, r8
 802776c:	4649      	mov	r1, r9
 802776e:	f7d9 f9e3 	bl	8000b38 <__aeabi_dcmpgt>
 8027772:	2800      	cmp	r0, #0
 8027774:	f43f af7b 	beq.w	802766e <_strtod_l+0xa0e>
 8027778:	e4c4      	b.n	8027104 <_strtod_l+0x4a4>
 802777a:	9b04      	ldr	r3, [sp, #16]
 802777c:	b333      	cbz	r3, 80277cc <_strtod_l+0xb6c>
 802777e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8027780:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8027784:	d822      	bhi.n	80277cc <_strtod_l+0xb6c>
 8027786:	a32e      	add	r3, pc, #184	; (adr r3, 8027840 <_strtod_l+0xbe0>)
 8027788:	e9d3 2300 	ldrd	r2, r3, [r3]
 802778c:	4640      	mov	r0, r8
 802778e:	4649      	mov	r1, r9
 8027790:	f7d9 f9be 	bl	8000b10 <__aeabi_dcmple>
 8027794:	b1a0      	cbz	r0, 80277c0 <_strtod_l+0xb60>
 8027796:	4649      	mov	r1, r9
 8027798:	4640      	mov	r0, r8
 802779a:	f7d9 fa15 	bl	8000bc8 <__aeabi_d2uiz>
 802779e:	2801      	cmp	r0, #1
 80277a0:	bf38      	it	cc
 80277a2:	2001      	movcc	r0, #1
 80277a4:	f7d8 febe 	bl	8000524 <__aeabi_ui2d>
 80277a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80277aa:	4680      	mov	r8, r0
 80277ac:	4689      	mov	r9, r1
 80277ae:	bb23      	cbnz	r3, 80277fa <_strtod_l+0xb9a>
 80277b0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80277b4:	9010      	str	r0, [sp, #64]	; 0x40
 80277b6:	9311      	str	r3, [sp, #68]	; 0x44
 80277b8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80277bc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80277c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80277c2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80277c4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80277c8:	1a9b      	subs	r3, r3, r2
 80277ca:	9309      	str	r3, [sp, #36]	; 0x24
 80277cc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80277d0:	eeb0 0a48 	vmov.f32	s0, s16
 80277d4:	eef0 0a68 	vmov.f32	s1, s17
 80277d8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80277dc:	f002 f9f2 	bl	8029bc4 <__ulp>
 80277e0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80277e4:	ec53 2b10 	vmov	r2, r3, d0
 80277e8:	f7d8 ff16 	bl	8000618 <__aeabi_dmul>
 80277ec:	ec53 2b18 	vmov	r2, r3, d8
 80277f0:	f7d8 fd5c 	bl	80002ac <__adddf3>
 80277f4:	4682      	mov	sl, r0
 80277f6:	468b      	mov	fp, r1
 80277f8:	e78d      	b.n	8027716 <_strtod_l+0xab6>
 80277fa:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80277fe:	e7db      	b.n	80277b8 <_strtod_l+0xb58>
 8027800:	a311      	add	r3, pc, #68	; (adr r3, 8027848 <_strtod_l+0xbe8>)
 8027802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027806:	f7d9 f979 	bl	8000afc <__aeabi_dcmplt>
 802780a:	e7b2      	b.n	8027772 <_strtod_l+0xb12>
 802780c:	2300      	movs	r3, #0
 802780e:	930a      	str	r3, [sp, #40]	; 0x28
 8027810:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8027812:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8027814:	6013      	str	r3, [r2, #0]
 8027816:	f7ff ba6b 	b.w	8026cf0 <_strtod_l+0x90>
 802781a:	2a65      	cmp	r2, #101	; 0x65
 802781c:	f43f ab5f 	beq.w	8026ede <_strtod_l+0x27e>
 8027820:	2a45      	cmp	r2, #69	; 0x45
 8027822:	f43f ab5c 	beq.w	8026ede <_strtod_l+0x27e>
 8027826:	2301      	movs	r3, #1
 8027828:	f7ff bb94 	b.w	8026f54 <_strtod_l+0x2f4>
 802782c:	f3af 8000 	nop.w
 8027830:	94a03595 	.word	0x94a03595
 8027834:	3fdfffff 	.word	0x3fdfffff
 8027838:	35afe535 	.word	0x35afe535
 802783c:	3fe00000 	.word	0x3fe00000
 8027840:	ffc00000 	.word	0xffc00000
 8027844:	41dfffff 	.word	0x41dfffff
 8027848:	94a03595 	.word	0x94a03595
 802784c:	3fcfffff 	.word	0x3fcfffff
 8027850:	3ff00000 	.word	0x3ff00000
 8027854:	7ff00000 	.word	0x7ff00000
 8027858:	7fe00000 	.word	0x7fe00000
 802785c:	7c9fffff 	.word	0x7c9fffff
 8027860:	3fe00000 	.word	0x3fe00000
 8027864:	bff00000 	.word	0xbff00000
 8027868:	7fefffff 	.word	0x7fefffff

0802786c <strtod>:
 802786c:	460a      	mov	r2, r1
 802786e:	4601      	mov	r1, r0
 8027870:	4802      	ldr	r0, [pc, #8]	; (802787c <strtod+0x10>)
 8027872:	4b03      	ldr	r3, [pc, #12]	; (8027880 <strtod+0x14>)
 8027874:	6800      	ldr	r0, [r0, #0]
 8027876:	f7ff b9f3 	b.w	8026c60 <_strtod_l>
 802787a:	bf00      	nop
 802787c:	10000070 	.word	0x10000070
 8027880:	100000d8 	.word	0x100000d8

08027884 <strtok>:
 8027884:	4b16      	ldr	r3, [pc, #88]	; (80278e0 <strtok+0x5c>)
 8027886:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8027888:	681e      	ldr	r6, [r3, #0]
 802788a:	6db4      	ldr	r4, [r6, #88]	; 0x58
 802788c:	4605      	mov	r5, r0
 802788e:	b9fc      	cbnz	r4, 80278d0 <strtok+0x4c>
 8027890:	2050      	movs	r0, #80	; 0x50
 8027892:	9101      	str	r1, [sp, #4]
 8027894:	f7fe f926 	bl	8025ae4 <malloc>
 8027898:	9901      	ldr	r1, [sp, #4]
 802789a:	65b0      	str	r0, [r6, #88]	; 0x58
 802789c:	4602      	mov	r2, r0
 802789e:	b920      	cbnz	r0, 80278aa <strtok+0x26>
 80278a0:	4b10      	ldr	r3, [pc, #64]	; (80278e4 <strtok+0x60>)
 80278a2:	4811      	ldr	r0, [pc, #68]	; (80278e8 <strtok+0x64>)
 80278a4:	2157      	movs	r1, #87	; 0x57
 80278a6:	f000 f9a9 	bl	8027bfc <__assert_func>
 80278aa:	e9c0 4400 	strd	r4, r4, [r0]
 80278ae:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80278b2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80278b6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80278ba:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80278be:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80278c2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80278c6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80278ca:	6184      	str	r4, [r0, #24]
 80278cc:	7704      	strb	r4, [r0, #28]
 80278ce:	6244      	str	r4, [r0, #36]	; 0x24
 80278d0:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80278d2:	2301      	movs	r3, #1
 80278d4:	4628      	mov	r0, r5
 80278d6:	b002      	add	sp, #8
 80278d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80278dc:	f000 b806 	b.w	80278ec <__strtok_r>
 80278e0:	10000070 	.word	0x10000070
 80278e4:	08030f83 	.word	0x08030f83
 80278e8:	08031048 	.word	0x08031048

080278ec <__strtok_r>:
 80278ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80278ee:	b908      	cbnz	r0, 80278f4 <__strtok_r+0x8>
 80278f0:	6810      	ldr	r0, [r2, #0]
 80278f2:	b188      	cbz	r0, 8027918 <__strtok_r+0x2c>
 80278f4:	4604      	mov	r4, r0
 80278f6:	4620      	mov	r0, r4
 80278f8:	f814 5b01 	ldrb.w	r5, [r4], #1
 80278fc:	460f      	mov	r7, r1
 80278fe:	f817 6b01 	ldrb.w	r6, [r7], #1
 8027902:	b91e      	cbnz	r6, 802790c <__strtok_r+0x20>
 8027904:	b965      	cbnz	r5, 8027920 <__strtok_r+0x34>
 8027906:	6015      	str	r5, [r2, #0]
 8027908:	4628      	mov	r0, r5
 802790a:	e005      	b.n	8027918 <__strtok_r+0x2c>
 802790c:	42b5      	cmp	r5, r6
 802790e:	d1f6      	bne.n	80278fe <__strtok_r+0x12>
 8027910:	2b00      	cmp	r3, #0
 8027912:	d1f0      	bne.n	80278f6 <__strtok_r+0xa>
 8027914:	6014      	str	r4, [r2, #0]
 8027916:	7003      	strb	r3, [r0, #0]
 8027918:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802791a:	461c      	mov	r4, r3
 802791c:	e00c      	b.n	8027938 <__strtok_r+0x4c>
 802791e:	b915      	cbnz	r5, 8027926 <__strtok_r+0x3a>
 8027920:	f814 3b01 	ldrb.w	r3, [r4], #1
 8027924:	460e      	mov	r6, r1
 8027926:	f816 5b01 	ldrb.w	r5, [r6], #1
 802792a:	42ab      	cmp	r3, r5
 802792c:	d1f7      	bne.n	802791e <__strtok_r+0x32>
 802792e:	2b00      	cmp	r3, #0
 8027930:	d0f3      	beq.n	802791a <__strtok_r+0x2e>
 8027932:	2300      	movs	r3, #0
 8027934:	f804 3c01 	strb.w	r3, [r4, #-1]
 8027938:	6014      	str	r4, [r2, #0]
 802793a:	e7ed      	b.n	8027918 <__strtok_r+0x2c>

0802793c <_strtol_l.constprop.0>:
 802793c:	2b01      	cmp	r3, #1
 802793e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027942:	d001      	beq.n	8027948 <_strtol_l.constprop.0+0xc>
 8027944:	2b24      	cmp	r3, #36	; 0x24
 8027946:	d906      	bls.n	8027956 <_strtol_l.constprop.0+0x1a>
 8027948:	f001 f800 	bl	802894c <__errno>
 802794c:	2316      	movs	r3, #22
 802794e:	6003      	str	r3, [r0, #0]
 8027950:	2000      	movs	r0, #0
 8027952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027956:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8027a3c <_strtol_l.constprop.0+0x100>
 802795a:	460d      	mov	r5, r1
 802795c:	462e      	mov	r6, r5
 802795e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8027962:	f814 700c 	ldrb.w	r7, [r4, ip]
 8027966:	f017 0708 	ands.w	r7, r7, #8
 802796a:	d1f7      	bne.n	802795c <_strtol_l.constprop.0+0x20>
 802796c:	2c2d      	cmp	r4, #45	; 0x2d
 802796e:	d132      	bne.n	80279d6 <_strtol_l.constprop.0+0x9a>
 8027970:	782c      	ldrb	r4, [r5, #0]
 8027972:	2701      	movs	r7, #1
 8027974:	1cb5      	adds	r5, r6, #2
 8027976:	2b00      	cmp	r3, #0
 8027978:	d05b      	beq.n	8027a32 <_strtol_l.constprop.0+0xf6>
 802797a:	2b10      	cmp	r3, #16
 802797c:	d109      	bne.n	8027992 <_strtol_l.constprop.0+0x56>
 802797e:	2c30      	cmp	r4, #48	; 0x30
 8027980:	d107      	bne.n	8027992 <_strtol_l.constprop.0+0x56>
 8027982:	782c      	ldrb	r4, [r5, #0]
 8027984:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8027988:	2c58      	cmp	r4, #88	; 0x58
 802798a:	d14d      	bne.n	8027a28 <_strtol_l.constprop.0+0xec>
 802798c:	786c      	ldrb	r4, [r5, #1]
 802798e:	2310      	movs	r3, #16
 8027990:	3502      	adds	r5, #2
 8027992:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8027996:	f108 38ff 	add.w	r8, r8, #4294967295
 802799a:	f04f 0c00 	mov.w	ip, #0
 802799e:	fbb8 f9f3 	udiv	r9, r8, r3
 80279a2:	4666      	mov	r6, ip
 80279a4:	fb03 8a19 	mls	sl, r3, r9, r8
 80279a8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80279ac:	f1be 0f09 	cmp.w	lr, #9
 80279b0:	d816      	bhi.n	80279e0 <_strtol_l.constprop.0+0xa4>
 80279b2:	4674      	mov	r4, lr
 80279b4:	42a3      	cmp	r3, r4
 80279b6:	dd24      	ble.n	8027a02 <_strtol_l.constprop.0+0xc6>
 80279b8:	f1bc 0f00 	cmp.w	ip, #0
 80279bc:	db1e      	blt.n	80279fc <_strtol_l.constprop.0+0xc0>
 80279be:	45b1      	cmp	r9, r6
 80279c0:	d31c      	bcc.n	80279fc <_strtol_l.constprop.0+0xc0>
 80279c2:	d101      	bne.n	80279c8 <_strtol_l.constprop.0+0x8c>
 80279c4:	45a2      	cmp	sl, r4
 80279c6:	db19      	blt.n	80279fc <_strtol_l.constprop.0+0xc0>
 80279c8:	fb06 4603 	mla	r6, r6, r3, r4
 80279cc:	f04f 0c01 	mov.w	ip, #1
 80279d0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80279d4:	e7e8      	b.n	80279a8 <_strtol_l.constprop.0+0x6c>
 80279d6:	2c2b      	cmp	r4, #43	; 0x2b
 80279d8:	bf04      	itt	eq
 80279da:	782c      	ldrbeq	r4, [r5, #0]
 80279dc:	1cb5      	addeq	r5, r6, #2
 80279de:	e7ca      	b.n	8027976 <_strtol_l.constprop.0+0x3a>
 80279e0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80279e4:	f1be 0f19 	cmp.w	lr, #25
 80279e8:	d801      	bhi.n	80279ee <_strtol_l.constprop.0+0xb2>
 80279ea:	3c37      	subs	r4, #55	; 0x37
 80279ec:	e7e2      	b.n	80279b4 <_strtol_l.constprop.0+0x78>
 80279ee:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80279f2:	f1be 0f19 	cmp.w	lr, #25
 80279f6:	d804      	bhi.n	8027a02 <_strtol_l.constprop.0+0xc6>
 80279f8:	3c57      	subs	r4, #87	; 0x57
 80279fa:	e7db      	b.n	80279b4 <_strtol_l.constprop.0+0x78>
 80279fc:	f04f 3cff 	mov.w	ip, #4294967295
 8027a00:	e7e6      	b.n	80279d0 <_strtol_l.constprop.0+0x94>
 8027a02:	f1bc 0f00 	cmp.w	ip, #0
 8027a06:	da05      	bge.n	8027a14 <_strtol_l.constprop.0+0xd8>
 8027a08:	2322      	movs	r3, #34	; 0x22
 8027a0a:	6003      	str	r3, [r0, #0]
 8027a0c:	4646      	mov	r6, r8
 8027a0e:	b942      	cbnz	r2, 8027a22 <_strtol_l.constprop.0+0xe6>
 8027a10:	4630      	mov	r0, r6
 8027a12:	e79e      	b.n	8027952 <_strtol_l.constprop.0+0x16>
 8027a14:	b107      	cbz	r7, 8027a18 <_strtol_l.constprop.0+0xdc>
 8027a16:	4276      	negs	r6, r6
 8027a18:	2a00      	cmp	r2, #0
 8027a1a:	d0f9      	beq.n	8027a10 <_strtol_l.constprop.0+0xd4>
 8027a1c:	f1bc 0f00 	cmp.w	ip, #0
 8027a20:	d000      	beq.n	8027a24 <_strtol_l.constprop.0+0xe8>
 8027a22:	1e69      	subs	r1, r5, #1
 8027a24:	6011      	str	r1, [r2, #0]
 8027a26:	e7f3      	b.n	8027a10 <_strtol_l.constprop.0+0xd4>
 8027a28:	2430      	movs	r4, #48	; 0x30
 8027a2a:	2b00      	cmp	r3, #0
 8027a2c:	d1b1      	bne.n	8027992 <_strtol_l.constprop.0+0x56>
 8027a2e:	2308      	movs	r3, #8
 8027a30:	e7af      	b.n	8027992 <_strtol_l.constprop.0+0x56>
 8027a32:	2c30      	cmp	r4, #48	; 0x30
 8027a34:	d0a5      	beq.n	8027982 <_strtol_l.constprop.0+0x46>
 8027a36:	230a      	movs	r3, #10
 8027a38:	e7ab      	b.n	8027992 <_strtol_l.constprop.0+0x56>
 8027a3a:	bf00      	nop
 8027a3c:	08030e3b 	.word	0x08030e3b

08027a40 <_strtol_r>:
 8027a40:	f7ff bf7c 	b.w	802793c <_strtol_l.constprop.0>

08027a44 <strtol>:
 8027a44:	4613      	mov	r3, r2
 8027a46:	460a      	mov	r2, r1
 8027a48:	4601      	mov	r1, r0
 8027a4a:	4802      	ldr	r0, [pc, #8]	; (8027a54 <strtol+0x10>)
 8027a4c:	6800      	ldr	r0, [r0, #0]
 8027a4e:	f7ff bf75 	b.w	802793c <_strtol_l.constprop.0>
 8027a52:	bf00      	nop
 8027a54:	10000070 	.word	0x10000070

08027a58 <__swbuf_r>:
 8027a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027a5a:	460e      	mov	r6, r1
 8027a5c:	4614      	mov	r4, r2
 8027a5e:	4605      	mov	r5, r0
 8027a60:	b118      	cbz	r0, 8027a6a <__swbuf_r+0x12>
 8027a62:	6983      	ldr	r3, [r0, #24]
 8027a64:	b90b      	cbnz	r3, 8027a6a <__swbuf_r+0x12>
 8027a66:	f001 f891 	bl	8028b8c <__sinit>
 8027a6a:	4b21      	ldr	r3, [pc, #132]	; (8027af0 <__swbuf_r+0x98>)
 8027a6c:	429c      	cmp	r4, r3
 8027a6e:	d12b      	bne.n	8027ac8 <__swbuf_r+0x70>
 8027a70:	686c      	ldr	r4, [r5, #4]
 8027a72:	69a3      	ldr	r3, [r4, #24]
 8027a74:	60a3      	str	r3, [r4, #8]
 8027a76:	89a3      	ldrh	r3, [r4, #12]
 8027a78:	071a      	lsls	r2, r3, #28
 8027a7a:	d52f      	bpl.n	8027adc <__swbuf_r+0x84>
 8027a7c:	6923      	ldr	r3, [r4, #16]
 8027a7e:	b36b      	cbz	r3, 8027adc <__swbuf_r+0x84>
 8027a80:	6923      	ldr	r3, [r4, #16]
 8027a82:	6820      	ldr	r0, [r4, #0]
 8027a84:	1ac0      	subs	r0, r0, r3
 8027a86:	6963      	ldr	r3, [r4, #20]
 8027a88:	b2f6      	uxtb	r6, r6
 8027a8a:	4283      	cmp	r3, r0
 8027a8c:	4637      	mov	r7, r6
 8027a8e:	dc04      	bgt.n	8027a9a <__swbuf_r+0x42>
 8027a90:	4621      	mov	r1, r4
 8027a92:	4628      	mov	r0, r5
 8027a94:	f000 ffe6 	bl	8028a64 <_fflush_r>
 8027a98:	bb30      	cbnz	r0, 8027ae8 <__swbuf_r+0x90>
 8027a9a:	68a3      	ldr	r3, [r4, #8]
 8027a9c:	3b01      	subs	r3, #1
 8027a9e:	60a3      	str	r3, [r4, #8]
 8027aa0:	6823      	ldr	r3, [r4, #0]
 8027aa2:	1c5a      	adds	r2, r3, #1
 8027aa4:	6022      	str	r2, [r4, #0]
 8027aa6:	701e      	strb	r6, [r3, #0]
 8027aa8:	6963      	ldr	r3, [r4, #20]
 8027aaa:	3001      	adds	r0, #1
 8027aac:	4283      	cmp	r3, r0
 8027aae:	d004      	beq.n	8027aba <__swbuf_r+0x62>
 8027ab0:	89a3      	ldrh	r3, [r4, #12]
 8027ab2:	07db      	lsls	r3, r3, #31
 8027ab4:	d506      	bpl.n	8027ac4 <__swbuf_r+0x6c>
 8027ab6:	2e0a      	cmp	r6, #10
 8027ab8:	d104      	bne.n	8027ac4 <__swbuf_r+0x6c>
 8027aba:	4621      	mov	r1, r4
 8027abc:	4628      	mov	r0, r5
 8027abe:	f000 ffd1 	bl	8028a64 <_fflush_r>
 8027ac2:	b988      	cbnz	r0, 8027ae8 <__swbuf_r+0x90>
 8027ac4:	4638      	mov	r0, r7
 8027ac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8027ac8:	4b0a      	ldr	r3, [pc, #40]	; (8027af4 <__swbuf_r+0x9c>)
 8027aca:	429c      	cmp	r4, r3
 8027acc:	d101      	bne.n	8027ad2 <__swbuf_r+0x7a>
 8027ace:	68ac      	ldr	r4, [r5, #8]
 8027ad0:	e7cf      	b.n	8027a72 <__swbuf_r+0x1a>
 8027ad2:	4b09      	ldr	r3, [pc, #36]	; (8027af8 <__swbuf_r+0xa0>)
 8027ad4:	429c      	cmp	r4, r3
 8027ad6:	bf08      	it	eq
 8027ad8:	68ec      	ldreq	r4, [r5, #12]
 8027ada:	e7ca      	b.n	8027a72 <__swbuf_r+0x1a>
 8027adc:	4621      	mov	r1, r4
 8027ade:	4628      	mov	r0, r5
 8027ae0:	f000 f81e 	bl	8027b20 <__swsetup_r>
 8027ae4:	2800      	cmp	r0, #0
 8027ae6:	d0cb      	beq.n	8027a80 <__swbuf_r+0x28>
 8027ae8:	f04f 37ff 	mov.w	r7, #4294967295
 8027aec:	e7ea      	b.n	8027ac4 <__swbuf_r+0x6c>
 8027aee:	bf00      	nop
 8027af0:	0803117c 	.word	0x0803117c
 8027af4:	0803119c 	.word	0x0803119c
 8027af8:	0803115c 	.word	0x0803115c

08027afc <_write_r>:
 8027afc:	b538      	push	{r3, r4, r5, lr}
 8027afe:	4d07      	ldr	r5, [pc, #28]	; (8027b1c <_write_r+0x20>)
 8027b00:	4604      	mov	r4, r0
 8027b02:	4608      	mov	r0, r1
 8027b04:	4611      	mov	r1, r2
 8027b06:	2200      	movs	r2, #0
 8027b08:	602a      	str	r2, [r5, #0]
 8027b0a:	461a      	mov	r2, r3
 8027b0c:	f7e1 ff9d 	bl	8009a4a <_write>
 8027b10:	1c43      	adds	r3, r0, #1
 8027b12:	d102      	bne.n	8027b1a <_write_r+0x1e>
 8027b14:	682b      	ldr	r3, [r5, #0]
 8027b16:	b103      	cbz	r3, 8027b1a <_write_r+0x1e>
 8027b18:	6023      	str	r3, [r4, #0]
 8027b1a:	bd38      	pop	{r3, r4, r5, pc}
 8027b1c:	20013d7c 	.word	0x20013d7c

08027b20 <__swsetup_r>:
 8027b20:	4b32      	ldr	r3, [pc, #200]	; (8027bec <__swsetup_r+0xcc>)
 8027b22:	b570      	push	{r4, r5, r6, lr}
 8027b24:	681d      	ldr	r5, [r3, #0]
 8027b26:	4606      	mov	r6, r0
 8027b28:	460c      	mov	r4, r1
 8027b2a:	b125      	cbz	r5, 8027b36 <__swsetup_r+0x16>
 8027b2c:	69ab      	ldr	r3, [r5, #24]
 8027b2e:	b913      	cbnz	r3, 8027b36 <__swsetup_r+0x16>
 8027b30:	4628      	mov	r0, r5
 8027b32:	f001 f82b 	bl	8028b8c <__sinit>
 8027b36:	4b2e      	ldr	r3, [pc, #184]	; (8027bf0 <__swsetup_r+0xd0>)
 8027b38:	429c      	cmp	r4, r3
 8027b3a:	d10f      	bne.n	8027b5c <__swsetup_r+0x3c>
 8027b3c:	686c      	ldr	r4, [r5, #4]
 8027b3e:	89a3      	ldrh	r3, [r4, #12]
 8027b40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8027b44:	0719      	lsls	r1, r3, #28
 8027b46:	d42c      	bmi.n	8027ba2 <__swsetup_r+0x82>
 8027b48:	06dd      	lsls	r5, r3, #27
 8027b4a:	d411      	bmi.n	8027b70 <__swsetup_r+0x50>
 8027b4c:	2309      	movs	r3, #9
 8027b4e:	6033      	str	r3, [r6, #0]
 8027b50:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8027b54:	81a3      	strh	r3, [r4, #12]
 8027b56:	f04f 30ff 	mov.w	r0, #4294967295
 8027b5a:	e03e      	b.n	8027bda <__swsetup_r+0xba>
 8027b5c:	4b25      	ldr	r3, [pc, #148]	; (8027bf4 <__swsetup_r+0xd4>)
 8027b5e:	429c      	cmp	r4, r3
 8027b60:	d101      	bne.n	8027b66 <__swsetup_r+0x46>
 8027b62:	68ac      	ldr	r4, [r5, #8]
 8027b64:	e7eb      	b.n	8027b3e <__swsetup_r+0x1e>
 8027b66:	4b24      	ldr	r3, [pc, #144]	; (8027bf8 <__swsetup_r+0xd8>)
 8027b68:	429c      	cmp	r4, r3
 8027b6a:	bf08      	it	eq
 8027b6c:	68ec      	ldreq	r4, [r5, #12]
 8027b6e:	e7e6      	b.n	8027b3e <__swsetup_r+0x1e>
 8027b70:	0758      	lsls	r0, r3, #29
 8027b72:	d512      	bpl.n	8027b9a <__swsetup_r+0x7a>
 8027b74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8027b76:	b141      	cbz	r1, 8027b8a <__swsetup_r+0x6a>
 8027b78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8027b7c:	4299      	cmp	r1, r3
 8027b7e:	d002      	beq.n	8027b86 <__swsetup_r+0x66>
 8027b80:	4630      	mov	r0, r6
 8027b82:	f7fd ffff 	bl	8025b84 <_free_r>
 8027b86:	2300      	movs	r3, #0
 8027b88:	6363      	str	r3, [r4, #52]	; 0x34
 8027b8a:	89a3      	ldrh	r3, [r4, #12]
 8027b8c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8027b90:	81a3      	strh	r3, [r4, #12]
 8027b92:	2300      	movs	r3, #0
 8027b94:	6063      	str	r3, [r4, #4]
 8027b96:	6923      	ldr	r3, [r4, #16]
 8027b98:	6023      	str	r3, [r4, #0]
 8027b9a:	89a3      	ldrh	r3, [r4, #12]
 8027b9c:	f043 0308 	orr.w	r3, r3, #8
 8027ba0:	81a3      	strh	r3, [r4, #12]
 8027ba2:	6923      	ldr	r3, [r4, #16]
 8027ba4:	b94b      	cbnz	r3, 8027bba <__swsetup_r+0x9a>
 8027ba6:	89a3      	ldrh	r3, [r4, #12]
 8027ba8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8027bac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8027bb0:	d003      	beq.n	8027bba <__swsetup_r+0x9a>
 8027bb2:	4621      	mov	r1, r4
 8027bb4:	4630      	mov	r0, r6
 8027bb6:	f001 fc35 	bl	8029424 <__smakebuf_r>
 8027bba:	89a0      	ldrh	r0, [r4, #12]
 8027bbc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8027bc0:	f010 0301 	ands.w	r3, r0, #1
 8027bc4:	d00a      	beq.n	8027bdc <__swsetup_r+0xbc>
 8027bc6:	2300      	movs	r3, #0
 8027bc8:	60a3      	str	r3, [r4, #8]
 8027bca:	6963      	ldr	r3, [r4, #20]
 8027bcc:	425b      	negs	r3, r3
 8027bce:	61a3      	str	r3, [r4, #24]
 8027bd0:	6923      	ldr	r3, [r4, #16]
 8027bd2:	b943      	cbnz	r3, 8027be6 <__swsetup_r+0xc6>
 8027bd4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8027bd8:	d1ba      	bne.n	8027b50 <__swsetup_r+0x30>
 8027bda:	bd70      	pop	{r4, r5, r6, pc}
 8027bdc:	0781      	lsls	r1, r0, #30
 8027bde:	bf58      	it	pl
 8027be0:	6963      	ldrpl	r3, [r4, #20]
 8027be2:	60a3      	str	r3, [r4, #8]
 8027be4:	e7f4      	b.n	8027bd0 <__swsetup_r+0xb0>
 8027be6:	2000      	movs	r0, #0
 8027be8:	e7f7      	b.n	8027bda <__swsetup_r+0xba>
 8027bea:	bf00      	nop
 8027bec:	10000070 	.word	0x10000070
 8027bf0:	0803117c 	.word	0x0803117c
 8027bf4:	0803119c 	.word	0x0803119c
 8027bf8:	0803115c 	.word	0x0803115c

08027bfc <__assert_func>:
 8027bfc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8027bfe:	4614      	mov	r4, r2
 8027c00:	461a      	mov	r2, r3
 8027c02:	4b09      	ldr	r3, [pc, #36]	; (8027c28 <__assert_func+0x2c>)
 8027c04:	681b      	ldr	r3, [r3, #0]
 8027c06:	4605      	mov	r5, r0
 8027c08:	68d8      	ldr	r0, [r3, #12]
 8027c0a:	b14c      	cbz	r4, 8027c20 <__assert_func+0x24>
 8027c0c:	4b07      	ldr	r3, [pc, #28]	; (8027c2c <__assert_func+0x30>)
 8027c0e:	9100      	str	r1, [sp, #0]
 8027c10:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8027c14:	4906      	ldr	r1, [pc, #24]	; (8027c30 <__assert_func+0x34>)
 8027c16:	462b      	mov	r3, r5
 8027c18:	f7fd ff2e 	bl	8025a78 <fiprintf>
 8027c1c:	f002 fef3 	bl	802aa06 <abort>
 8027c20:	4b04      	ldr	r3, [pc, #16]	; (8027c34 <__assert_func+0x38>)
 8027c22:	461c      	mov	r4, r3
 8027c24:	e7f3      	b.n	8027c0e <__assert_func+0x12>
 8027c26:	bf00      	nop
 8027c28:	10000070 	.word	0x10000070
 8027c2c:	080310a5 	.word	0x080310a5
 8027c30:	080310b2 	.word	0x080310b2
 8027c34:	080310e0 	.word	0x080310e0

08027c38 <_close_r>:
 8027c38:	b538      	push	{r3, r4, r5, lr}
 8027c3a:	4d06      	ldr	r5, [pc, #24]	; (8027c54 <_close_r+0x1c>)
 8027c3c:	2300      	movs	r3, #0
 8027c3e:	4604      	mov	r4, r0
 8027c40:	4608      	mov	r0, r1
 8027c42:	602b      	str	r3, [r5, #0]
 8027c44:	f7e2 f9e1 	bl	800a00a <_close>
 8027c48:	1c43      	adds	r3, r0, #1
 8027c4a:	d102      	bne.n	8027c52 <_close_r+0x1a>
 8027c4c:	682b      	ldr	r3, [r5, #0]
 8027c4e:	b103      	cbz	r3, 8027c52 <_close_r+0x1a>
 8027c50:	6023      	str	r3, [r4, #0]
 8027c52:	bd38      	pop	{r3, r4, r5, pc}
 8027c54:	20013d7c 	.word	0x20013d7c

08027c58 <quorem>:
 8027c58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027c5c:	6903      	ldr	r3, [r0, #16]
 8027c5e:	690c      	ldr	r4, [r1, #16]
 8027c60:	42a3      	cmp	r3, r4
 8027c62:	4607      	mov	r7, r0
 8027c64:	f2c0 8081 	blt.w	8027d6a <quorem+0x112>
 8027c68:	3c01      	subs	r4, #1
 8027c6a:	f101 0814 	add.w	r8, r1, #20
 8027c6e:	f100 0514 	add.w	r5, r0, #20
 8027c72:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8027c76:	9301      	str	r3, [sp, #4]
 8027c78:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8027c7c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8027c80:	3301      	adds	r3, #1
 8027c82:	429a      	cmp	r2, r3
 8027c84:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8027c88:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8027c8c:	fbb2 f6f3 	udiv	r6, r2, r3
 8027c90:	d331      	bcc.n	8027cf6 <quorem+0x9e>
 8027c92:	f04f 0e00 	mov.w	lr, #0
 8027c96:	4640      	mov	r0, r8
 8027c98:	46ac      	mov	ip, r5
 8027c9a:	46f2      	mov	sl, lr
 8027c9c:	f850 2b04 	ldr.w	r2, [r0], #4
 8027ca0:	b293      	uxth	r3, r2
 8027ca2:	fb06 e303 	mla	r3, r6, r3, lr
 8027ca6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8027caa:	b29b      	uxth	r3, r3
 8027cac:	ebaa 0303 	sub.w	r3, sl, r3
 8027cb0:	f8dc a000 	ldr.w	sl, [ip]
 8027cb4:	0c12      	lsrs	r2, r2, #16
 8027cb6:	fa13 f38a 	uxtah	r3, r3, sl
 8027cba:	fb06 e202 	mla	r2, r6, r2, lr
 8027cbe:	9300      	str	r3, [sp, #0]
 8027cc0:	9b00      	ldr	r3, [sp, #0]
 8027cc2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8027cc6:	b292      	uxth	r2, r2
 8027cc8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8027ccc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8027cd0:	f8bd 3000 	ldrh.w	r3, [sp]
 8027cd4:	4581      	cmp	r9, r0
 8027cd6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8027cda:	f84c 3b04 	str.w	r3, [ip], #4
 8027cde:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8027ce2:	d2db      	bcs.n	8027c9c <quorem+0x44>
 8027ce4:	f855 300b 	ldr.w	r3, [r5, fp]
 8027ce8:	b92b      	cbnz	r3, 8027cf6 <quorem+0x9e>
 8027cea:	9b01      	ldr	r3, [sp, #4]
 8027cec:	3b04      	subs	r3, #4
 8027cee:	429d      	cmp	r5, r3
 8027cf0:	461a      	mov	r2, r3
 8027cf2:	d32e      	bcc.n	8027d52 <quorem+0xfa>
 8027cf4:	613c      	str	r4, [r7, #16]
 8027cf6:	4638      	mov	r0, r7
 8027cf8:	f001 febe 	bl	8029a78 <__mcmp>
 8027cfc:	2800      	cmp	r0, #0
 8027cfe:	db24      	blt.n	8027d4a <quorem+0xf2>
 8027d00:	3601      	adds	r6, #1
 8027d02:	4628      	mov	r0, r5
 8027d04:	f04f 0c00 	mov.w	ip, #0
 8027d08:	f858 2b04 	ldr.w	r2, [r8], #4
 8027d0c:	f8d0 e000 	ldr.w	lr, [r0]
 8027d10:	b293      	uxth	r3, r2
 8027d12:	ebac 0303 	sub.w	r3, ip, r3
 8027d16:	0c12      	lsrs	r2, r2, #16
 8027d18:	fa13 f38e 	uxtah	r3, r3, lr
 8027d1c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8027d20:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8027d24:	b29b      	uxth	r3, r3
 8027d26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8027d2a:	45c1      	cmp	r9, r8
 8027d2c:	f840 3b04 	str.w	r3, [r0], #4
 8027d30:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8027d34:	d2e8      	bcs.n	8027d08 <quorem+0xb0>
 8027d36:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8027d3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8027d3e:	b922      	cbnz	r2, 8027d4a <quorem+0xf2>
 8027d40:	3b04      	subs	r3, #4
 8027d42:	429d      	cmp	r5, r3
 8027d44:	461a      	mov	r2, r3
 8027d46:	d30a      	bcc.n	8027d5e <quorem+0x106>
 8027d48:	613c      	str	r4, [r7, #16]
 8027d4a:	4630      	mov	r0, r6
 8027d4c:	b003      	add	sp, #12
 8027d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027d52:	6812      	ldr	r2, [r2, #0]
 8027d54:	3b04      	subs	r3, #4
 8027d56:	2a00      	cmp	r2, #0
 8027d58:	d1cc      	bne.n	8027cf4 <quorem+0x9c>
 8027d5a:	3c01      	subs	r4, #1
 8027d5c:	e7c7      	b.n	8027cee <quorem+0x96>
 8027d5e:	6812      	ldr	r2, [r2, #0]
 8027d60:	3b04      	subs	r3, #4
 8027d62:	2a00      	cmp	r2, #0
 8027d64:	d1f0      	bne.n	8027d48 <quorem+0xf0>
 8027d66:	3c01      	subs	r4, #1
 8027d68:	e7eb      	b.n	8027d42 <quorem+0xea>
 8027d6a:	2000      	movs	r0, #0
 8027d6c:	e7ee      	b.n	8027d4c <quorem+0xf4>
	...

08027d70 <_dtoa_r>:
 8027d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027d74:	ed2d 8b04 	vpush	{d8-d9}
 8027d78:	ec57 6b10 	vmov	r6, r7, d0
 8027d7c:	b093      	sub	sp, #76	; 0x4c
 8027d7e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8027d80:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8027d84:	9106      	str	r1, [sp, #24]
 8027d86:	ee10 aa10 	vmov	sl, s0
 8027d8a:	4604      	mov	r4, r0
 8027d8c:	9209      	str	r2, [sp, #36]	; 0x24
 8027d8e:	930c      	str	r3, [sp, #48]	; 0x30
 8027d90:	46bb      	mov	fp, r7
 8027d92:	b975      	cbnz	r5, 8027db2 <_dtoa_r+0x42>
 8027d94:	2010      	movs	r0, #16
 8027d96:	f7fd fea5 	bl	8025ae4 <malloc>
 8027d9a:	4602      	mov	r2, r0
 8027d9c:	6260      	str	r0, [r4, #36]	; 0x24
 8027d9e:	b920      	cbnz	r0, 8027daa <_dtoa_r+0x3a>
 8027da0:	4ba7      	ldr	r3, [pc, #668]	; (8028040 <_dtoa_r+0x2d0>)
 8027da2:	21ea      	movs	r1, #234	; 0xea
 8027da4:	48a7      	ldr	r0, [pc, #668]	; (8028044 <_dtoa_r+0x2d4>)
 8027da6:	f7ff ff29 	bl	8027bfc <__assert_func>
 8027daa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8027dae:	6005      	str	r5, [r0, #0]
 8027db0:	60c5      	str	r5, [r0, #12]
 8027db2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8027db4:	6819      	ldr	r1, [r3, #0]
 8027db6:	b151      	cbz	r1, 8027dce <_dtoa_r+0x5e>
 8027db8:	685a      	ldr	r2, [r3, #4]
 8027dba:	604a      	str	r2, [r1, #4]
 8027dbc:	2301      	movs	r3, #1
 8027dbe:	4093      	lsls	r3, r2
 8027dc0:	608b      	str	r3, [r1, #8]
 8027dc2:	4620      	mov	r0, r4
 8027dc4:	f001 fbcc 	bl	8029560 <_Bfree>
 8027dc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8027dca:	2200      	movs	r2, #0
 8027dcc:	601a      	str	r2, [r3, #0]
 8027dce:	1e3b      	subs	r3, r7, #0
 8027dd0:	bfaa      	itet	ge
 8027dd2:	2300      	movge	r3, #0
 8027dd4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8027dd8:	f8c8 3000 	strge.w	r3, [r8]
 8027ddc:	4b9a      	ldr	r3, [pc, #616]	; (8028048 <_dtoa_r+0x2d8>)
 8027dde:	bfbc      	itt	lt
 8027de0:	2201      	movlt	r2, #1
 8027de2:	f8c8 2000 	strlt.w	r2, [r8]
 8027de6:	ea33 030b 	bics.w	r3, r3, fp
 8027dea:	d11b      	bne.n	8027e24 <_dtoa_r+0xb4>
 8027dec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8027dee:	f242 730f 	movw	r3, #9999	; 0x270f
 8027df2:	6013      	str	r3, [r2, #0]
 8027df4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8027df8:	4333      	orrs	r3, r6
 8027dfa:	f000 8592 	beq.w	8028922 <_dtoa_r+0xbb2>
 8027dfe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8027e00:	b963      	cbnz	r3, 8027e1c <_dtoa_r+0xac>
 8027e02:	4b92      	ldr	r3, [pc, #584]	; (802804c <_dtoa_r+0x2dc>)
 8027e04:	e022      	b.n	8027e4c <_dtoa_r+0xdc>
 8027e06:	4b92      	ldr	r3, [pc, #584]	; (8028050 <_dtoa_r+0x2e0>)
 8027e08:	9301      	str	r3, [sp, #4]
 8027e0a:	3308      	adds	r3, #8
 8027e0c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8027e0e:	6013      	str	r3, [r2, #0]
 8027e10:	9801      	ldr	r0, [sp, #4]
 8027e12:	b013      	add	sp, #76	; 0x4c
 8027e14:	ecbd 8b04 	vpop	{d8-d9}
 8027e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027e1c:	4b8b      	ldr	r3, [pc, #556]	; (802804c <_dtoa_r+0x2dc>)
 8027e1e:	9301      	str	r3, [sp, #4]
 8027e20:	3303      	adds	r3, #3
 8027e22:	e7f3      	b.n	8027e0c <_dtoa_r+0x9c>
 8027e24:	2200      	movs	r2, #0
 8027e26:	2300      	movs	r3, #0
 8027e28:	4650      	mov	r0, sl
 8027e2a:	4659      	mov	r1, fp
 8027e2c:	f7d8 fe5c 	bl	8000ae8 <__aeabi_dcmpeq>
 8027e30:	ec4b ab19 	vmov	d9, sl, fp
 8027e34:	4680      	mov	r8, r0
 8027e36:	b158      	cbz	r0, 8027e50 <_dtoa_r+0xe0>
 8027e38:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8027e3a:	2301      	movs	r3, #1
 8027e3c:	6013      	str	r3, [r2, #0]
 8027e3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8027e40:	2b00      	cmp	r3, #0
 8027e42:	f000 856b 	beq.w	802891c <_dtoa_r+0xbac>
 8027e46:	4883      	ldr	r0, [pc, #524]	; (8028054 <_dtoa_r+0x2e4>)
 8027e48:	6018      	str	r0, [r3, #0]
 8027e4a:	1e43      	subs	r3, r0, #1
 8027e4c:	9301      	str	r3, [sp, #4]
 8027e4e:	e7df      	b.n	8027e10 <_dtoa_r+0xa0>
 8027e50:	ec4b ab10 	vmov	d0, sl, fp
 8027e54:	aa10      	add	r2, sp, #64	; 0x40
 8027e56:	a911      	add	r1, sp, #68	; 0x44
 8027e58:	4620      	mov	r0, r4
 8027e5a:	f001 ff2f 	bl	8029cbc <__d2b>
 8027e5e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8027e62:	ee08 0a10 	vmov	s16, r0
 8027e66:	2d00      	cmp	r5, #0
 8027e68:	f000 8084 	beq.w	8027f74 <_dtoa_r+0x204>
 8027e6c:	ee19 3a90 	vmov	r3, s19
 8027e70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8027e74:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8027e78:	4656      	mov	r6, sl
 8027e7a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8027e7e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8027e82:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8027e86:	4b74      	ldr	r3, [pc, #464]	; (8028058 <_dtoa_r+0x2e8>)
 8027e88:	2200      	movs	r2, #0
 8027e8a:	4630      	mov	r0, r6
 8027e8c:	4639      	mov	r1, r7
 8027e8e:	f7d8 fa0b 	bl	80002a8 <__aeabi_dsub>
 8027e92:	a365      	add	r3, pc, #404	; (adr r3, 8028028 <_dtoa_r+0x2b8>)
 8027e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027e98:	f7d8 fbbe 	bl	8000618 <__aeabi_dmul>
 8027e9c:	a364      	add	r3, pc, #400	; (adr r3, 8028030 <_dtoa_r+0x2c0>)
 8027e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027ea2:	f7d8 fa03 	bl	80002ac <__adddf3>
 8027ea6:	4606      	mov	r6, r0
 8027ea8:	4628      	mov	r0, r5
 8027eaa:	460f      	mov	r7, r1
 8027eac:	f7d8 fb4a 	bl	8000544 <__aeabi_i2d>
 8027eb0:	a361      	add	r3, pc, #388	; (adr r3, 8028038 <_dtoa_r+0x2c8>)
 8027eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027eb6:	f7d8 fbaf 	bl	8000618 <__aeabi_dmul>
 8027eba:	4602      	mov	r2, r0
 8027ebc:	460b      	mov	r3, r1
 8027ebe:	4630      	mov	r0, r6
 8027ec0:	4639      	mov	r1, r7
 8027ec2:	f7d8 f9f3 	bl	80002ac <__adddf3>
 8027ec6:	4606      	mov	r6, r0
 8027ec8:	460f      	mov	r7, r1
 8027eca:	f7d8 fe55 	bl	8000b78 <__aeabi_d2iz>
 8027ece:	2200      	movs	r2, #0
 8027ed0:	9000      	str	r0, [sp, #0]
 8027ed2:	2300      	movs	r3, #0
 8027ed4:	4630      	mov	r0, r6
 8027ed6:	4639      	mov	r1, r7
 8027ed8:	f7d8 fe10 	bl	8000afc <__aeabi_dcmplt>
 8027edc:	b150      	cbz	r0, 8027ef4 <_dtoa_r+0x184>
 8027ede:	9800      	ldr	r0, [sp, #0]
 8027ee0:	f7d8 fb30 	bl	8000544 <__aeabi_i2d>
 8027ee4:	4632      	mov	r2, r6
 8027ee6:	463b      	mov	r3, r7
 8027ee8:	f7d8 fdfe 	bl	8000ae8 <__aeabi_dcmpeq>
 8027eec:	b910      	cbnz	r0, 8027ef4 <_dtoa_r+0x184>
 8027eee:	9b00      	ldr	r3, [sp, #0]
 8027ef0:	3b01      	subs	r3, #1
 8027ef2:	9300      	str	r3, [sp, #0]
 8027ef4:	9b00      	ldr	r3, [sp, #0]
 8027ef6:	2b16      	cmp	r3, #22
 8027ef8:	d85a      	bhi.n	8027fb0 <_dtoa_r+0x240>
 8027efa:	9a00      	ldr	r2, [sp, #0]
 8027efc:	4b57      	ldr	r3, [pc, #348]	; (802805c <_dtoa_r+0x2ec>)
 8027efe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8027f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027f06:	ec51 0b19 	vmov	r0, r1, d9
 8027f0a:	f7d8 fdf7 	bl	8000afc <__aeabi_dcmplt>
 8027f0e:	2800      	cmp	r0, #0
 8027f10:	d050      	beq.n	8027fb4 <_dtoa_r+0x244>
 8027f12:	9b00      	ldr	r3, [sp, #0]
 8027f14:	3b01      	subs	r3, #1
 8027f16:	9300      	str	r3, [sp, #0]
 8027f18:	2300      	movs	r3, #0
 8027f1a:	930b      	str	r3, [sp, #44]	; 0x2c
 8027f1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8027f1e:	1b5d      	subs	r5, r3, r5
 8027f20:	1e6b      	subs	r3, r5, #1
 8027f22:	9305      	str	r3, [sp, #20]
 8027f24:	bf45      	ittet	mi
 8027f26:	f1c5 0301 	rsbmi	r3, r5, #1
 8027f2a:	9304      	strmi	r3, [sp, #16]
 8027f2c:	2300      	movpl	r3, #0
 8027f2e:	2300      	movmi	r3, #0
 8027f30:	bf4c      	ite	mi
 8027f32:	9305      	strmi	r3, [sp, #20]
 8027f34:	9304      	strpl	r3, [sp, #16]
 8027f36:	9b00      	ldr	r3, [sp, #0]
 8027f38:	2b00      	cmp	r3, #0
 8027f3a:	db3d      	blt.n	8027fb8 <_dtoa_r+0x248>
 8027f3c:	9b05      	ldr	r3, [sp, #20]
 8027f3e:	9a00      	ldr	r2, [sp, #0]
 8027f40:	920a      	str	r2, [sp, #40]	; 0x28
 8027f42:	4413      	add	r3, r2
 8027f44:	9305      	str	r3, [sp, #20]
 8027f46:	2300      	movs	r3, #0
 8027f48:	9307      	str	r3, [sp, #28]
 8027f4a:	9b06      	ldr	r3, [sp, #24]
 8027f4c:	2b09      	cmp	r3, #9
 8027f4e:	f200 8089 	bhi.w	8028064 <_dtoa_r+0x2f4>
 8027f52:	2b05      	cmp	r3, #5
 8027f54:	bfc4      	itt	gt
 8027f56:	3b04      	subgt	r3, #4
 8027f58:	9306      	strgt	r3, [sp, #24]
 8027f5a:	9b06      	ldr	r3, [sp, #24]
 8027f5c:	f1a3 0302 	sub.w	r3, r3, #2
 8027f60:	bfcc      	ite	gt
 8027f62:	2500      	movgt	r5, #0
 8027f64:	2501      	movle	r5, #1
 8027f66:	2b03      	cmp	r3, #3
 8027f68:	f200 8087 	bhi.w	802807a <_dtoa_r+0x30a>
 8027f6c:	e8df f003 	tbb	[pc, r3]
 8027f70:	59383a2d 	.word	0x59383a2d
 8027f74:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8027f78:	441d      	add	r5, r3
 8027f7a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8027f7e:	2b20      	cmp	r3, #32
 8027f80:	bfc1      	itttt	gt
 8027f82:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8027f86:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8027f8a:	fa0b f303 	lslgt.w	r3, fp, r3
 8027f8e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8027f92:	bfda      	itte	le
 8027f94:	f1c3 0320 	rsble	r3, r3, #32
 8027f98:	fa06 f003 	lslle.w	r0, r6, r3
 8027f9c:	4318      	orrgt	r0, r3
 8027f9e:	f7d8 fac1 	bl	8000524 <__aeabi_ui2d>
 8027fa2:	2301      	movs	r3, #1
 8027fa4:	4606      	mov	r6, r0
 8027fa6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8027faa:	3d01      	subs	r5, #1
 8027fac:	930e      	str	r3, [sp, #56]	; 0x38
 8027fae:	e76a      	b.n	8027e86 <_dtoa_r+0x116>
 8027fb0:	2301      	movs	r3, #1
 8027fb2:	e7b2      	b.n	8027f1a <_dtoa_r+0x1aa>
 8027fb4:	900b      	str	r0, [sp, #44]	; 0x2c
 8027fb6:	e7b1      	b.n	8027f1c <_dtoa_r+0x1ac>
 8027fb8:	9b04      	ldr	r3, [sp, #16]
 8027fba:	9a00      	ldr	r2, [sp, #0]
 8027fbc:	1a9b      	subs	r3, r3, r2
 8027fbe:	9304      	str	r3, [sp, #16]
 8027fc0:	4253      	negs	r3, r2
 8027fc2:	9307      	str	r3, [sp, #28]
 8027fc4:	2300      	movs	r3, #0
 8027fc6:	930a      	str	r3, [sp, #40]	; 0x28
 8027fc8:	e7bf      	b.n	8027f4a <_dtoa_r+0x1da>
 8027fca:	2300      	movs	r3, #0
 8027fcc:	9308      	str	r3, [sp, #32]
 8027fce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027fd0:	2b00      	cmp	r3, #0
 8027fd2:	dc55      	bgt.n	8028080 <_dtoa_r+0x310>
 8027fd4:	2301      	movs	r3, #1
 8027fd6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8027fda:	461a      	mov	r2, r3
 8027fdc:	9209      	str	r2, [sp, #36]	; 0x24
 8027fde:	e00c      	b.n	8027ffa <_dtoa_r+0x28a>
 8027fe0:	2301      	movs	r3, #1
 8027fe2:	e7f3      	b.n	8027fcc <_dtoa_r+0x25c>
 8027fe4:	2300      	movs	r3, #0
 8027fe6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8027fe8:	9308      	str	r3, [sp, #32]
 8027fea:	9b00      	ldr	r3, [sp, #0]
 8027fec:	4413      	add	r3, r2
 8027fee:	9302      	str	r3, [sp, #8]
 8027ff0:	3301      	adds	r3, #1
 8027ff2:	2b01      	cmp	r3, #1
 8027ff4:	9303      	str	r3, [sp, #12]
 8027ff6:	bfb8      	it	lt
 8027ff8:	2301      	movlt	r3, #1
 8027ffa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8027ffc:	2200      	movs	r2, #0
 8027ffe:	6042      	str	r2, [r0, #4]
 8028000:	2204      	movs	r2, #4
 8028002:	f102 0614 	add.w	r6, r2, #20
 8028006:	429e      	cmp	r6, r3
 8028008:	6841      	ldr	r1, [r0, #4]
 802800a:	d93d      	bls.n	8028088 <_dtoa_r+0x318>
 802800c:	4620      	mov	r0, r4
 802800e:	f001 fa67 	bl	80294e0 <_Balloc>
 8028012:	9001      	str	r0, [sp, #4]
 8028014:	2800      	cmp	r0, #0
 8028016:	d13b      	bne.n	8028090 <_dtoa_r+0x320>
 8028018:	4b11      	ldr	r3, [pc, #68]	; (8028060 <_dtoa_r+0x2f0>)
 802801a:	4602      	mov	r2, r0
 802801c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8028020:	e6c0      	b.n	8027da4 <_dtoa_r+0x34>
 8028022:	2301      	movs	r3, #1
 8028024:	e7df      	b.n	8027fe6 <_dtoa_r+0x276>
 8028026:	bf00      	nop
 8028028:	636f4361 	.word	0x636f4361
 802802c:	3fd287a7 	.word	0x3fd287a7
 8028030:	8b60c8b3 	.word	0x8b60c8b3
 8028034:	3fc68a28 	.word	0x3fc68a28
 8028038:	509f79fb 	.word	0x509f79fb
 802803c:	3fd34413 	.word	0x3fd34413
 8028040:	08030f83 	.word	0x08030f83
 8028044:	080310ee 	.word	0x080310ee
 8028048:	7ff00000 	.word	0x7ff00000
 802804c:	080310ea 	.word	0x080310ea
 8028050:	080310e1 	.word	0x080310e1
 8028054:	08031399 	.word	0x08031399
 8028058:	3ff80000 	.word	0x3ff80000
 802805c:	080312c0 	.word	0x080312c0
 8028060:	08031149 	.word	0x08031149
 8028064:	2501      	movs	r5, #1
 8028066:	2300      	movs	r3, #0
 8028068:	9306      	str	r3, [sp, #24]
 802806a:	9508      	str	r5, [sp, #32]
 802806c:	f04f 33ff 	mov.w	r3, #4294967295
 8028070:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8028074:	2200      	movs	r2, #0
 8028076:	2312      	movs	r3, #18
 8028078:	e7b0      	b.n	8027fdc <_dtoa_r+0x26c>
 802807a:	2301      	movs	r3, #1
 802807c:	9308      	str	r3, [sp, #32]
 802807e:	e7f5      	b.n	802806c <_dtoa_r+0x2fc>
 8028080:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028082:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8028086:	e7b8      	b.n	8027ffa <_dtoa_r+0x28a>
 8028088:	3101      	adds	r1, #1
 802808a:	6041      	str	r1, [r0, #4]
 802808c:	0052      	lsls	r2, r2, #1
 802808e:	e7b8      	b.n	8028002 <_dtoa_r+0x292>
 8028090:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8028092:	9a01      	ldr	r2, [sp, #4]
 8028094:	601a      	str	r2, [r3, #0]
 8028096:	9b03      	ldr	r3, [sp, #12]
 8028098:	2b0e      	cmp	r3, #14
 802809a:	f200 809d 	bhi.w	80281d8 <_dtoa_r+0x468>
 802809e:	2d00      	cmp	r5, #0
 80280a0:	f000 809a 	beq.w	80281d8 <_dtoa_r+0x468>
 80280a4:	9b00      	ldr	r3, [sp, #0]
 80280a6:	2b00      	cmp	r3, #0
 80280a8:	dd32      	ble.n	8028110 <_dtoa_r+0x3a0>
 80280aa:	4ab7      	ldr	r2, [pc, #732]	; (8028388 <_dtoa_r+0x618>)
 80280ac:	f003 030f 	and.w	r3, r3, #15
 80280b0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80280b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80280b8:	9b00      	ldr	r3, [sp, #0]
 80280ba:	05d8      	lsls	r0, r3, #23
 80280bc:	ea4f 1723 	mov.w	r7, r3, asr #4
 80280c0:	d516      	bpl.n	80280f0 <_dtoa_r+0x380>
 80280c2:	4bb2      	ldr	r3, [pc, #712]	; (802838c <_dtoa_r+0x61c>)
 80280c4:	ec51 0b19 	vmov	r0, r1, d9
 80280c8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80280cc:	f7d8 fbce 	bl	800086c <__aeabi_ddiv>
 80280d0:	f007 070f 	and.w	r7, r7, #15
 80280d4:	4682      	mov	sl, r0
 80280d6:	468b      	mov	fp, r1
 80280d8:	2503      	movs	r5, #3
 80280da:	4eac      	ldr	r6, [pc, #688]	; (802838c <_dtoa_r+0x61c>)
 80280dc:	b957      	cbnz	r7, 80280f4 <_dtoa_r+0x384>
 80280de:	4642      	mov	r2, r8
 80280e0:	464b      	mov	r3, r9
 80280e2:	4650      	mov	r0, sl
 80280e4:	4659      	mov	r1, fp
 80280e6:	f7d8 fbc1 	bl	800086c <__aeabi_ddiv>
 80280ea:	4682      	mov	sl, r0
 80280ec:	468b      	mov	fp, r1
 80280ee:	e028      	b.n	8028142 <_dtoa_r+0x3d2>
 80280f0:	2502      	movs	r5, #2
 80280f2:	e7f2      	b.n	80280da <_dtoa_r+0x36a>
 80280f4:	07f9      	lsls	r1, r7, #31
 80280f6:	d508      	bpl.n	802810a <_dtoa_r+0x39a>
 80280f8:	4640      	mov	r0, r8
 80280fa:	4649      	mov	r1, r9
 80280fc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8028100:	f7d8 fa8a 	bl	8000618 <__aeabi_dmul>
 8028104:	3501      	adds	r5, #1
 8028106:	4680      	mov	r8, r0
 8028108:	4689      	mov	r9, r1
 802810a:	107f      	asrs	r7, r7, #1
 802810c:	3608      	adds	r6, #8
 802810e:	e7e5      	b.n	80280dc <_dtoa_r+0x36c>
 8028110:	f000 809b 	beq.w	802824a <_dtoa_r+0x4da>
 8028114:	9b00      	ldr	r3, [sp, #0]
 8028116:	4f9d      	ldr	r7, [pc, #628]	; (802838c <_dtoa_r+0x61c>)
 8028118:	425e      	negs	r6, r3
 802811a:	4b9b      	ldr	r3, [pc, #620]	; (8028388 <_dtoa_r+0x618>)
 802811c:	f006 020f 	and.w	r2, r6, #15
 8028120:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8028124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028128:	ec51 0b19 	vmov	r0, r1, d9
 802812c:	f7d8 fa74 	bl	8000618 <__aeabi_dmul>
 8028130:	1136      	asrs	r6, r6, #4
 8028132:	4682      	mov	sl, r0
 8028134:	468b      	mov	fp, r1
 8028136:	2300      	movs	r3, #0
 8028138:	2502      	movs	r5, #2
 802813a:	2e00      	cmp	r6, #0
 802813c:	d17a      	bne.n	8028234 <_dtoa_r+0x4c4>
 802813e:	2b00      	cmp	r3, #0
 8028140:	d1d3      	bne.n	80280ea <_dtoa_r+0x37a>
 8028142:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8028144:	2b00      	cmp	r3, #0
 8028146:	f000 8082 	beq.w	802824e <_dtoa_r+0x4de>
 802814a:	4b91      	ldr	r3, [pc, #580]	; (8028390 <_dtoa_r+0x620>)
 802814c:	2200      	movs	r2, #0
 802814e:	4650      	mov	r0, sl
 8028150:	4659      	mov	r1, fp
 8028152:	f7d8 fcd3 	bl	8000afc <__aeabi_dcmplt>
 8028156:	2800      	cmp	r0, #0
 8028158:	d079      	beq.n	802824e <_dtoa_r+0x4de>
 802815a:	9b03      	ldr	r3, [sp, #12]
 802815c:	2b00      	cmp	r3, #0
 802815e:	d076      	beq.n	802824e <_dtoa_r+0x4de>
 8028160:	9b02      	ldr	r3, [sp, #8]
 8028162:	2b00      	cmp	r3, #0
 8028164:	dd36      	ble.n	80281d4 <_dtoa_r+0x464>
 8028166:	9b00      	ldr	r3, [sp, #0]
 8028168:	4650      	mov	r0, sl
 802816a:	4659      	mov	r1, fp
 802816c:	1e5f      	subs	r7, r3, #1
 802816e:	2200      	movs	r2, #0
 8028170:	4b88      	ldr	r3, [pc, #544]	; (8028394 <_dtoa_r+0x624>)
 8028172:	f7d8 fa51 	bl	8000618 <__aeabi_dmul>
 8028176:	9e02      	ldr	r6, [sp, #8]
 8028178:	4682      	mov	sl, r0
 802817a:	468b      	mov	fp, r1
 802817c:	3501      	adds	r5, #1
 802817e:	4628      	mov	r0, r5
 8028180:	f7d8 f9e0 	bl	8000544 <__aeabi_i2d>
 8028184:	4652      	mov	r2, sl
 8028186:	465b      	mov	r3, fp
 8028188:	f7d8 fa46 	bl	8000618 <__aeabi_dmul>
 802818c:	4b82      	ldr	r3, [pc, #520]	; (8028398 <_dtoa_r+0x628>)
 802818e:	2200      	movs	r2, #0
 8028190:	f7d8 f88c 	bl	80002ac <__adddf3>
 8028194:	46d0      	mov	r8, sl
 8028196:	46d9      	mov	r9, fp
 8028198:	4682      	mov	sl, r0
 802819a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 802819e:	2e00      	cmp	r6, #0
 80281a0:	d158      	bne.n	8028254 <_dtoa_r+0x4e4>
 80281a2:	4b7e      	ldr	r3, [pc, #504]	; (802839c <_dtoa_r+0x62c>)
 80281a4:	2200      	movs	r2, #0
 80281a6:	4640      	mov	r0, r8
 80281a8:	4649      	mov	r1, r9
 80281aa:	f7d8 f87d 	bl	80002a8 <__aeabi_dsub>
 80281ae:	4652      	mov	r2, sl
 80281b0:	465b      	mov	r3, fp
 80281b2:	4680      	mov	r8, r0
 80281b4:	4689      	mov	r9, r1
 80281b6:	f7d8 fcbf 	bl	8000b38 <__aeabi_dcmpgt>
 80281ba:	2800      	cmp	r0, #0
 80281bc:	f040 8295 	bne.w	80286ea <_dtoa_r+0x97a>
 80281c0:	4652      	mov	r2, sl
 80281c2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80281c6:	4640      	mov	r0, r8
 80281c8:	4649      	mov	r1, r9
 80281ca:	f7d8 fc97 	bl	8000afc <__aeabi_dcmplt>
 80281ce:	2800      	cmp	r0, #0
 80281d0:	f040 8289 	bne.w	80286e6 <_dtoa_r+0x976>
 80281d4:	ec5b ab19 	vmov	sl, fp, d9
 80281d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80281da:	2b00      	cmp	r3, #0
 80281dc:	f2c0 8148 	blt.w	8028470 <_dtoa_r+0x700>
 80281e0:	9a00      	ldr	r2, [sp, #0]
 80281e2:	2a0e      	cmp	r2, #14
 80281e4:	f300 8144 	bgt.w	8028470 <_dtoa_r+0x700>
 80281e8:	4b67      	ldr	r3, [pc, #412]	; (8028388 <_dtoa_r+0x618>)
 80281ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80281ee:	e9d3 8900 	ldrd	r8, r9, [r3]
 80281f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80281f4:	2b00      	cmp	r3, #0
 80281f6:	f280 80d5 	bge.w	80283a4 <_dtoa_r+0x634>
 80281fa:	9b03      	ldr	r3, [sp, #12]
 80281fc:	2b00      	cmp	r3, #0
 80281fe:	f300 80d1 	bgt.w	80283a4 <_dtoa_r+0x634>
 8028202:	f040 826f 	bne.w	80286e4 <_dtoa_r+0x974>
 8028206:	4b65      	ldr	r3, [pc, #404]	; (802839c <_dtoa_r+0x62c>)
 8028208:	2200      	movs	r2, #0
 802820a:	4640      	mov	r0, r8
 802820c:	4649      	mov	r1, r9
 802820e:	f7d8 fa03 	bl	8000618 <__aeabi_dmul>
 8028212:	4652      	mov	r2, sl
 8028214:	465b      	mov	r3, fp
 8028216:	f7d8 fc85 	bl	8000b24 <__aeabi_dcmpge>
 802821a:	9e03      	ldr	r6, [sp, #12]
 802821c:	4637      	mov	r7, r6
 802821e:	2800      	cmp	r0, #0
 8028220:	f040 8245 	bne.w	80286ae <_dtoa_r+0x93e>
 8028224:	9d01      	ldr	r5, [sp, #4]
 8028226:	2331      	movs	r3, #49	; 0x31
 8028228:	f805 3b01 	strb.w	r3, [r5], #1
 802822c:	9b00      	ldr	r3, [sp, #0]
 802822e:	3301      	adds	r3, #1
 8028230:	9300      	str	r3, [sp, #0]
 8028232:	e240      	b.n	80286b6 <_dtoa_r+0x946>
 8028234:	07f2      	lsls	r2, r6, #31
 8028236:	d505      	bpl.n	8028244 <_dtoa_r+0x4d4>
 8028238:	e9d7 2300 	ldrd	r2, r3, [r7]
 802823c:	f7d8 f9ec 	bl	8000618 <__aeabi_dmul>
 8028240:	3501      	adds	r5, #1
 8028242:	2301      	movs	r3, #1
 8028244:	1076      	asrs	r6, r6, #1
 8028246:	3708      	adds	r7, #8
 8028248:	e777      	b.n	802813a <_dtoa_r+0x3ca>
 802824a:	2502      	movs	r5, #2
 802824c:	e779      	b.n	8028142 <_dtoa_r+0x3d2>
 802824e:	9f00      	ldr	r7, [sp, #0]
 8028250:	9e03      	ldr	r6, [sp, #12]
 8028252:	e794      	b.n	802817e <_dtoa_r+0x40e>
 8028254:	9901      	ldr	r1, [sp, #4]
 8028256:	4b4c      	ldr	r3, [pc, #304]	; (8028388 <_dtoa_r+0x618>)
 8028258:	4431      	add	r1, r6
 802825a:	910d      	str	r1, [sp, #52]	; 0x34
 802825c:	9908      	ldr	r1, [sp, #32]
 802825e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8028262:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8028266:	2900      	cmp	r1, #0
 8028268:	d043      	beq.n	80282f2 <_dtoa_r+0x582>
 802826a:	494d      	ldr	r1, [pc, #308]	; (80283a0 <_dtoa_r+0x630>)
 802826c:	2000      	movs	r0, #0
 802826e:	f7d8 fafd 	bl	800086c <__aeabi_ddiv>
 8028272:	4652      	mov	r2, sl
 8028274:	465b      	mov	r3, fp
 8028276:	f7d8 f817 	bl	80002a8 <__aeabi_dsub>
 802827a:	9d01      	ldr	r5, [sp, #4]
 802827c:	4682      	mov	sl, r0
 802827e:	468b      	mov	fp, r1
 8028280:	4649      	mov	r1, r9
 8028282:	4640      	mov	r0, r8
 8028284:	f7d8 fc78 	bl	8000b78 <__aeabi_d2iz>
 8028288:	4606      	mov	r6, r0
 802828a:	f7d8 f95b 	bl	8000544 <__aeabi_i2d>
 802828e:	4602      	mov	r2, r0
 8028290:	460b      	mov	r3, r1
 8028292:	4640      	mov	r0, r8
 8028294:	4649      	mov	r1, r9
 8028296:	f7d8 f807 	bl	80002a8 <__aeabi_dsub>
 802829a:	3630      	adds	r6, #48	; 0x30
 802829c:	f805 6b01 	strb.w	r6, [r5], #1
 80282a0:	4652      	mov	r2, sl
 80282a2:	465b      	mov	r3, fp
 80282a4:	4680      	mov	r8, r0
 80282a6:	4689      	mov	r9, r1
 80282a8:	f7d8 fc28 	bl	8000afc <__aeabi_dcmplt>
 80282ac:	2800      	cmp	r0, #0
 80282ae:	d163      	bne.n	8028378 <_dtoa_r+0x608>
 80282b0:	4642      	mov	r2, r8
 80282b2:	464b      	mov	r3, r9
 80282b4:	4936      	ldr	r1, [pc, #216]	; (8028390 <_dtoa_r+0x620>)
 80282b6:	2000      	movs	r0, #0
 80282b8:	f7d7 fff6 	bl	80002a8 <__aeabi_dsub>
 80282bc:	4652      	mov	r2, sl
 80282be:	465b      	mov	r3, fp
 80282c0:	f7d8 fc1c 	bl	8000afc <__aeabi_dcmplt>
 80282c4:	2800      	cmp	r0, #0
 80282c6:	f040 80b5 	bne.w	8028434 <_dtoa_r+0x6c4>
 80282ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80282cc:	429d      	cmp	r5, r3
 80282ce:	d081      	beq.n	80281d4 <_dtoa_r+0x464>
 80282d0:	4b30      	ldr	r3, [pc, #192]	; (8028394 <_dtoa_r+0x624>)
 80282d2:	2200      	movs	r2, #0
 80282d4:	4650      	mov	r0, sl
 80282d6:	4659      	mov	r1, fp
 80282d8:	f7d8 f99e 	bl	8000618 <__aeabi_dmul>
 80282dc:	4b2d      	ldr	r3, [pc, #180]	; (8028394 <_dtoa_r+0x624>)
 80282de:	4682      	mov	sl, r0
 80282e0:	468b      	mov	fp, r1
 80282e2:	4640      	mov	r0, r8
 80282e4:	4649      	mov	r1, r9
 80282e6:	2200      	movs	r2, #0
 80282e8:	f7d8 f996 	bl	8000618 <__aeabi_dmul>
 80282ec:	4680      	mov	r8, r0
 80282ee:	4689      	mov	r9, r1
 80282f0:	e7c6      	b.n	8028280 <_dtoa_r+0x510>
 80282f2:	4650      	mov	r0, sl
 80282f4:	4659      	mov	r1, fp
 80282f6:	f7d8 f98f 	bl	8000618 <__aeabi_dmul>
 80282fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80282fc:	9d01      	ldr	r5, [sp, #4]
 80282fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8028300:	4682      	mov	sl, r0
 8028302:	468b      	mov	fp, r1
 8028304:	4649      	mov	r1, r9
 8028306:	4640      	mov	r0, r8
 8028308:	f7d8 fc36 	bl	8000b78 <__aeabi_d2iz>
 802830c:	4606      	mov	r6, r0
 802830e:	f7d8 f919 	bl	8000544 <__aeabi_i2d>
 8028312:	3630      	adds	r6, #48	; 0x30
 8028314:	4602      	mov	r2, r0
 8028316:	460b      	mov	r3, r1
 8028318:	4640      	mov	r0, r8
 802831a:	4649      	mov	r1, r9
 802831c:	f7d7 ffc4 	bl	80002a8 <__aeabi_dsub>
 8028320:	f805 6b01 	strb.w	r6, [r5], #1
 8028324:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8028326:	429d      	cmp	r5, r3
 8028328:	4680      	mov	r8, r0
 802832a:	4689      	mov	r9, r1
 802832c:	f04f 0200 	mov.w	r2, #0
 8028330:	d124      	bne.n	802837c <_dtoa_r+0x60c>
 8028332:	4b1b      	ldr	r3, [pc, #108]	; (80283a0 <_dtoa_r+0x630>)
 8028334:	4650      	mov	r0, sl
 8028336:	4659      	mov	r1, fp
 8028338:	f7d7 ffb8 	bl	80002ac <__adddf3>
 802833c:	4602      	mov	r2, r0
 802833e:	460b      	mov	r3, r1
 8028340:	4640      	mov	r0, r8
 8028342:	4649      	mov	r1, r9
 8028344:	f7d8 fbf8 	bl	8000b38 <__aeabi_dcmpgt>
 8028348:	2800      	cmp	r0, #0
 802834a:	d173      	bne.n	8028434 <_dtoa_r+0x6c4>
 802834c:	4652      	mov	r2, sl
 802834e:	465b      	mov	r3, fp
 8028350:	4913      	ldr	r1, [pc, #76]	; (80283a0 <_dtoa_r+0x630>)
 8028352:	2000      	movs	r0, #0
 8028354:	f7d7 ffa8 	bl	80002a8 <__aeabi_dsub>
 8028358:	4602      	mov	r2, r0
 802835a:	460b      	mov	r3, r1
 802835c:	4640      	mov	r0, r8
 802835e:	4649      	mov	r1, r9
 8028360:	f7d8 fbcc 	bl	8000afc <__aeabi_dcmplt>
 8028364:	2800      	cmp	r0, #0
 8028366:	f43f af35 	beq.w	80281d4 <_dtoa_r+0x464>
 802836a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802836c:	1e6b      	subs	r3, r5, #1
 802836e:	930f      	str	r3, [sp, #60]	; 0x3c
 8028370:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8028374:	2b30      	cmp	r3, #48	; 0x30
 8028376:	d0f8      	beq.n	802836a <_dtoa_r+0x5fa>
 8028378:	9700      	str	r7, [sp, #0]
 802837a:	e049      	b.n	8028410 <_dtoa_r+0x6a0>
 802837c:	4b05      	ldr	r3, [pc, #20]	; (8028394 <_dtoa_r+0x624>)
 802837e:	f7d8 f94b 	bl	8000618 <__aeabi_dmul>
 8028382:	4680      	mov	r8, r0
 8028384:	4689      	mov	r9, r1
 8028386:	e7bd      	b.n	8028304 <_dtoa_r+0x594>
 8028388:	080312c0 	.word	0x080312c0
 802838c:	08031298 	.word	0x08031298
 8028390:	3ff00000 	.word	0x3ff00000
 8028394:	40240000 	.word	0x40240000
 8028398:	401c0000 	.word	0x401c0000
 802839c:	40140000 	.word	0x40140000
 80283a0:	3fe00000 	.word	0x3fe00000
 80283a4:	9d01      	ldr	r5, [sp, #4]
 80283a6:	4656      	mov	r6, sl
 80283a8:	465f      	mov	r7, fp
 80283aa:	4642      	mov	r2, r8
 80283ac:	464b      	mov	r3, r9
 80283ae:	4630      	mov	r0, r6
 80283b0:	4639      	mov	r1, r7
 80283b2:	f7d8 fa5b 	bl	800086c <__aeabi_ddiv>
 80283b6:	f7d8 fbdf 	bl	8000b78 <__aeabi_d2iz>
 80283ba:	4682      	mov	sl, r0
 80283bc:	f7d8 f8c2 	bl	8000544 <__aeabi_i2d>
 80283c0:	4642      	mov	r2, r8
 80283c2:	464b      	mov	r3, r9
 80283c4:	f7d8 f928 	bl	8000618 <__aeabi_dmul>
 80283c8:	4602      	mov	r2, r0
 80283ca:	460b      	mov	r3, r1
 80283cc:	4630      	mov	r0, r6
 80283ce:	4639      	mov	r1, r7
 80283d0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80283d4:	f7d7 ff68 	bl	80002a8 <__aeabi_dsub>
 80283d8:	f805 6b01 	strb.w	r6, [r5], #1
 80283dc:	9e01      	ldr	r6, [sp, #4]
 80283de:	9f03      	ldr	r7, [sp, #12]
 80283e0:	1bae      	subs	r6, r5, r6
 80283e2:	42b7      	cmp	r7, r6
 80283e4:	4602      	mov	r2, r0
 80283e6:	460b      	mov	r3, r1
 80283e8:	d135      	bne.n	8028456 <_dtoa_r+0x6e6>
 80283ea:	f7d7 ff5f 	bl	80002ac <__adddf3>
 80283ee:	4642      	mov	r2, r8
 80283f0:	464b      	mov	r3, r9
 80283f2:	4606      	mov	r6, r0
 80283f4:	460f      	mov	r7, r1
 80283f6:	f7d8 fb9f 	bl	8000b38 <__aeabi_dcmpgt>
 80283fa:	b9d0      	cbnz	r0, 8028432 <_dtoa_r+0x6c2>
 80283fc:	4642      	mov	r2, r8
 80283fe:	464b      	mov	r3, r9
 8028400:	4630      	mov	r0, r6
 8028402:	4639      	mov	r1, r7
 8028404:	f7d8 fb70 	bl	8000ae8 <__aeabi_dcmpeq>
 8028408:	b110      	cbz	r0, 8028410 <_dtoa_r+0x6a0>
 802840a:	f01a 0f01 	tst.w	sl, #1
 802840e:	d110      	bne.n	8028432 <_dtoa_r+0x6c2>
 8028410:	4620      	mov	r0, r4
 8028412:	ee18 1a10 	vmov	r1, s16
 8028416:	f001 f8a3 	bl	8029560 <_Bfree>
 802841a:	2300      	movs	r3, #0
 802841c:	9800      	ldr	r0, [sp, #0]
 802841e:	702b      	strb	r3, [r5, #0]
 8028420:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8028422:	3001      	adds	r0, #1
 8028424:	6018      	str	r0, [r3, #0]
 8028426:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8028428:	2b00      	cmp	r3, #0
 802842a:	f43f acf1 	beq.w	8027e10 <_dtoa_r+0xa0>
 802842e:	601d      	str	r5, [r3, #0]
 8028430:	e4ee      	b.n	8027e10 <_dtoa_r+0xa0>
 8028432:	9f00      	ldr	r7, [sp, #0]
 8028434:	462b      	mov	r3, r5
 8028436:	461d      	mov	r5, r3
 8028438:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802843c:	2a39      	cmp	r2, #57	; 0x39
 802843e:	d106      	bne.n	802844e <_dtoa_r+0x6de>
 8028440:	9a01      	ldr	r2, [sp, #4]
 8028442:	429a      	cmp	r2, r3
 8028444:	d1f7      	bne.n	8028436 <_dtoa_r+0x6c6>
 8028446:	9901      	ldr	r1, [sp, #4]
 8028448:	2230      	movs	r2, #48	; 0x30
 802844a:	3701      	adds	r7, #1
 802844c:	700a      	strb	r2, [r1, #0]
 802844e:	781a      	ldrb	r2, [r3, #0]
 8028450:	3201      	adds	r2, #1
 8028452:	701a      	strb	r2, [r3, #0]
 8028454:	e790      	b.n	8028378 <_dtoa_r+0x608>
 8028456:	4ba6      	ldr	r3, [pc, #664]	; (80286f0 <_dtoa_r+0x980>)
 8028458:	2200      	movs	r2, #0
 802845a:	f7d8 f8dd 	bl	8000618 <__aeabi_dmul>
 802845e:	2200      	movs	r2, #0
 8028460:	2300      	movs	r3, #0
 8028462:	4606      	mov	r6, r0
 8028464:	460f      	mov	r7, r1
 8028466:	f7d8 fb3f 	bl	8000ae8 <__aeabi_dcmpeq>
 802846a:	2800      	cmp	r0, #0
 802846c:	d09d      	beq.n	80283aa <_dtoa_r+0x63a>
 802846e:	e7cf      	b.n	8028410 <_dtoa_r+0x6a0>
 8028470:	9a08      	ldr	r2, [sp, #32]
 8028472:	2a00      	cmp	r2, #0
 8028474:	f000 80d7 	beq.w	8028626 <_dtoa_r+0x8b6>
 8028478:	9a06      	ldr	r2, [sp, #24]
 802847a:	2a01      	cmp	r2, #1
 802847c:	f300 80ba 	bgt.w	80285f4 <_dtoa_r+0x884>
 8028480:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8028482:	2a00      	cmp	r2, #0
 8028484:	f000 80b2 	beq.w	80285ec <_dtoa_r+0x87c>
 8028488:	f203 4333 	addw	r3, r3, #1075	; 0x433
 802848c:	9e07      	ldr	r6, [sp, #28]
 802848e:	9d04      	ldr	r5, [sp, #16]
 8028490:	9a04      	ldr	r2, [sp, #16]
 8028492:	441a      	add	r2, r3
 8028494:	9204      	str	r2, [sp, #16]
 8028496:	9a05      	ldr	r2, [sp, #20]
 8028498:	2101      	movs	r1, #1
 802849a:	441a      	add	r2, r3
 802849c:	4620      	mov	r0, r4
 802849e:	9205      	str	r2, [sp, #20]
 80284a0:	f001 f960 	bl	8029764 <__i2b>
 80284a4:	4607      	mov	r7, r0
 80284a6:	2d00      	cmp	r5, #0
 80284a8:	dd0c      	ble.n	80284c4 <_dtoa_r+0x754>
 80284aa:	9b05      	ldr	r3, [sp, #20]
 80284ac:	2b00      	cmp	r3, #0
 80284ae:	dd09      	ble.n	80284c4 <_dtoa_r+0x754>
 80284b0:	42ab      	cmp	r3, r5
 80284b2:	9a04      	ldr	r2, [sp, #16]
 80284b4:	bfa8      	it	ge
 80284b6:	462b      	movge	r3, r5
 80284b8:	1ad2      	subs	r2, r2, r3
 80284ba:	9204      	str	r2, [sp, #16]
 80284bc:	9a05      	ldr	r2, [sp, #20]
 80284be:	1aed      	subs	r5, r5, r3
 80284c0:	1ad3      	subs	r3, r2, r3
 80284c2:	9305      	str	r3, [sp, #20]
 80284c4:	9b07      	ldr	r3, [sp, #28]
 80284c6:	b31b      	cbz	r3, 8028510 <_dtoa_r+0x7a0>
 80284c8:	9b08      	ldr	r3, [sp, #32]
 80284ca:	2b00      	cmp	r3, #0
 80284cc:	f000 80af 	beq.w	802862e <_dtoa_r+0x8be>
 80284d0:	2e00      	cmp	r6, #0
 80284d2:	dd13      	ble.n	80284fc <_dtoa_r+0x78c>
 80284d4:	4639      	mov	r1, r7
 80284d6:	4632      	mov	r2, r6
 80284d8:	4620      	mov	r0, r4
 80284da:	f001 fa03 	bl	80298e4 <__pow5mult>
 80284de:	ee18 2a10 	vmov	r2, s16
 80284e2:	4601      	mov	r1, r0
 80284e4:	4607      	mov	r7, r0
 80284e6:	4620      	mov	r0, r4
 80284e8:	f001 f952 	bl	8029790 <__multiply>
 80284ec:	ee18 1a10 	vmov	r1, s16
 80284f0:	4680      	mov	r8, r0
 80284f2:	4620      	mov	r0, r4
 80284f4:	f001 f834 	bl	8029560 <_Bfree>
 80284f8:	ee08 8a10 	vmov	s16, r8
 80284fc:	9b07      	ldr	r3, [sp, #28]
 80284fe:	1b9a      	subs	r2, r3, r6
 8028500:	d006      	beq.n	8028510 <_dtoa_r+0x7a0>
 8028502:	ee18 1a10 	vmov	r1, s16
 8028506:	4620      	mov	r0, r4
 8028508:	f001 f9ec 	bl	80298e4 <__pow5mult>
 802850c:	ee08 0a10 	vmov	s16, r0
 8028510:	2101      	movs	r1, #1
 8028512:	4620      	mov	r0, r4
 8028514:	f001 f926 	bl	8029764 <__i2b>
 8028518:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802851a:	2b00      	cmp	r3, #0
 802851c:	4606      	mov	r6, r0
 802851e:	f340 8088 	ble.w	8028632 <_dtoa_r+0x8c2>
 8028522:	461a      	mov	r2, r3
 8028524:	4601      	mov	r1, r0
 8028526:	4620      	mov	r0, r4
 8028528:	f001 f9dc 	bl	80298e4 <__pow5mult>
 802852c:	9b06      	ldr	r3, [sp, #24]
 802852e:	2b01      	cmp	r3, #1
 8028530:	4606      	mov	r6, r0
 8028532:	f340 8081 	ble.w	8028638 <_dtoa_r+0x8c8>
 8028536:	f04f 0800 	mov.w	r8, #0
 802853a:	6933      	ldr	r3, [r6, #16]
 802853c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8028540:	6918      	ldr	r0, [r3, #16]
 8028542:	f001 f8bf 	bl	80296c4 <__hi0bits>
 8028546:	f1c0 0020 	rsb	r0, r0, #32
 802854a:	9b05      	ldr	r3, [sp, #20]
 802854c:	4418      	add	r0, r3
 802854e:	f010 001f 	ands.w	r0, r0, #31
 8028552:	f000 8092 	beq.w	802867a <_dtoa_r+0x90a>
 8028556:	f1c0 0320 	rsb	r3, r0, #32
 802855a:	2b04      	cmp	r3, #4
 802855c:	f340 808a 	ble.w	8028674 <_dtoa_r+0x904>
 8028560:	f1c0 001c 	rsb	r0, r0, #28
 8028564:	9b04      	ldr	r3, [sp, #16]
 8028566:	4403      	add	r3, r0
 8028568:	9304      	str	r3, [sp, #16]
 802856a:	9b05      	ldr	r3, [sp, #20]
 802856c:	4403      	add	r3, r0
 802856e:	4405      	add	r5, r0
 8028570:	9305      	str	r3, [sp, #20]
 8028572:	9b04      	ldr	r3, [sp, #16]
 8028574:	2b00      	cmp	r3, #0
 8028576:	dd07      	ble.n	8028588 <_dtoa_r+0x818>
 8028578:	ee18 1a10 	vmov	r1, s16
 802857c:	461a      	mov	r2, r3
 802857e:	4620      	mov	r0, r4
 8028580:	f001 fa0a 	bl	8029998 <__lshift>
 8028584:	ee08 0a10 	vmov	s16, r0
 8028588:	9b05      	ldr	r3, [sp, #20]
 802858a:	2b00      	cmp	r3, #0
 802858c:	dd05      	ble.n	802859a <_dtoa_r+0x82a>
 802858e:	4631      	mov	r1, r6
 8028590:	461a      	mov	r2, r3
 8028592:	4620      	mov	r0, r4
 8028594:	f001 fa00 	bl	8029998 <__lshift>
 8028598:	4606      	mov	r6, r0
 802859a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802859c:	2b00      	cmp	r3, #0
 802859e:	d06e      	beq.n	802867e <_dtoa_r+0x90e>
 80285a0:	ee18 0a10 	vmov	r0, s16
 80285a4:	4631      	mov	r1, r6
 80285a6:	f001 fa67 	bl	8029a78 <__mcmp>
 80285aa:	2800      	cmp	r0, #0
 80285ac:	da67      	bge.n	802867e <_dtoa_r+0x90e>
 80285ae:	9b00      	ldr	r3, [sp, #0]
 80285b0:	3b01      	subs	r3, #1
 80285b2:	ee18 1a10 	vmov	r1, s16
 80285b6:	9300      	str	r3, [sp, #0]
 80285b8:	220a      	movs	r2, #10
 80285ba:	2300      	movs	r3, #0
 80285bc:	4620      	mov	r0, r4
 80285be:	f000 fff1 	bl	80295a4 <__multadd>
 80285c2:	9b08      	ldr	r3, [sp, #32]
 80285c4:	ee08 0a10 	vmov	s16, r0
 80285c8:	2b00      	cmp	r3, #0
 80285ca:	f000 81b1 	beq.w	8028930 <_dtoa_r+0xbc0>
 80285ce:	2300      	movs	r3, #0
 80285d0:	4639      	mov	r1, r7
 80285d2:	220a      	movs	r2, #10
 80285d4:	4620      	mov	r0, r4
 80285d6:	f000 ffe5 	bl	80295a4 <__multadd>
 80285da:	9b02      	ldr	r3, [sp, #8]
 80285dc:	2b00      	cmp	r3, #0
 80285de:	4607      	mov	r7, r0
 80285e0:	f300 808e 	bgt.w	8028700 <_dtoa_r+0x990>
 80285e4:	9b06      	ldr	r3, [sp, #24]
 80285e6:	2b02      	cmp	r3, #2
 80285e8:	dc51      	bgt.n	802868e <_dtoa_r+0x91e>
 80285ea:	e089      	b.n	8028700 <_dtoa_r+0x990>
 80285ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80285ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80285f2:	e74b      	b.n	802848c <_dtoa_r+0x71c>
 80285f4:	9b03      	ldr	r3, [sp, #12]
 80285f6:	1e5e      	subs	r6, r3, #1
 80285f8:	9b07      	ldr	r3, [sp, #28]
 80285fa:	42b3      	cmp	r3, r6
 80285fc:	bfbf      	itttt	lt
 80285fe:	9b07      	ldrlt	r3, [sp, #28]
 8028600:	9607      	strlt	r6, [sp, #28]
 8028602:	1af2      	sublt	r2, r6, r3
 8028604:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8028606:	bfb6      	itet	lt
 8028608:	189b      	addlt	r3, r3, r2
 802860a:	1b9e      	subge	r6, r3, r6
 802860c:	930a      	strlt	r3, [sp, #40]	; 0x28
 802860e:	9b03      	ldr	r3, [sp, #12]
 8028610:	bfb8      	it	lt
 8028612:	2600      	movlt	r6, #0
 8028614:	2b00      	cmp	r3, #0
 8028616:	bfb7      	itett	lt
 8028618:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 802861c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8028620:	1a9d      	sublt	r5, r3, r2
 8028622:	2300      	movlt	r3, #0
 8028624:	e734      	b.n	8028490 <_dtoa_r+0x720>
 8028626:	9e07      	ldr	r6, [sp, #28]
 8028628:	9d04      	ldr	r5, [sp, #16]
 802862a:	9f08      	ldr	r7, [sp, #32]
 802862c:	e73b      	b.n	80284a6 <_dtoa_r+0x736>
 802862e:	9a07      	ldr	r2, [sp, #28]
 8028630:	e767      	b.n	8028502 <_dtoa_r+0x792>
 8028632:	9b06      	ldr	r3, [sp, #24]
 8028634:	2b01      	cmp	r3, #1
 8028636:	dc18      	bgt.n	802866a <_dtoa_r+0x8fa>
 8028638:	f1ba 0f00 	cmp.w	sl, #0
 802863c:	d115      	bne.n	802866a <_dtoa_r+0x8fa>
 802863e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8028642:	b993      	cbnz	r3, 802866a <_dtoa_r+0x8fa>
 8028644:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8028648:	0d1b      	lsrs	r3, r3, #20
 802864a:	051b      	lsls	r3, r3, #20
 802864c:	b183      	cbz	r3, 8028670 <_dtoa_r+0x900>
 802864e:	9b04      	ldr	r3, [sp, #16]
 8028650:	3301      	adds	r3, #1
 8028652:	9304      	str	r3, [sp, #16]
 8028654:	9b05      	ldr	r3, [sp, #20]
 8028656:	3301      	adds	r3, #1
 8028658:	9305      	str	r3, [sp, #20]
 802865a:	f04f 0801 	mov.w	r8, #1
 802865e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028660:	2b00      	cmp	r3, #0
 8028662:	f47f af6a 	bne.w	802853a <_dtoa_r+0x7ca>
 8028666:	2001      	movs	r0, #1
 8028668:	e76f      	b.n	802854a <_dtoa_r+0x7da>
 802866a:	f04f 0800 	mov.w	r8, #0
 802866e:	e7f6      	b.n	802865e <_dtoa_r+0x8ee>
 8028670:	4698      	mov	r8, r3
 8028672:	e7f4      	b.n	802865e <_dtoa_r+0x8ee>
 8028674:	f43f af7d 	beq.w	8028572 <_dtoa_r+0x802>
 8028678:	4618      	mov	r0, r3
 802867a:	301c      	adds	r0, #28
 802867c:	e772      	b.n	8028564 <_dtoa_r+0x7f4>
 802867e:	9b03      	ldr	r3, [sp, #12]
 8028680:	2b00      	cmp	r3, #0
 8028682:	dc37      	bgt.n	80286f4 <_dtoa_r+0x984>
 8028684:	9b06      	ldr	r3, [sp, #24]
 8028686:	2b02      	cmp	r3, #2
 8028688:	dd34      	ble.n	80286f4 <_dtoa_r+0x984>
 802868a:	9b03      	ldr	r3, [sp, #12]
 802868c:	9302      	str	r3, [sp, #8]
 802868e:	9b02      	ldr	r3, [sp, #8]
 8028690:	b96b      	cbnz	r3, 80286ae <_dtoa_r+0x93e>
 8028692:	4631      	mov	r1, r6
 8028694:	2205      	movs	r2, #5
 8028696:	4620      	mov	r0, r4
 8028698:	f000 ff84 	bl	80295a4 <__multadd>
 802869c:	4601      	mov	r1, r0
 802869e:	4606      	mov	r6, r0
 80286a0:	ee18 0a10 	vmov	r0, s16
 80286a4:	f001 f9e8 	bl	8029a78 <__mcmp>
 80286a8:	2800      	cmp	r0, #0
 80286aa:	f73f adbb 	bgt.w	8028224 <_dtoa_r+0x4b4>
 80286ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80286b0:	9d01      	ldr	r5, [sp, #4]
 80286b2:	43db      	mvns	r3, r3
 80286b4:	9300      	str	r3, [sp, #0]
 80286b6:	f04f 0800 	mov.w	r8, #0
 80286ba:	4631      	mov	r1, r6
 80286bc:	4620      	mov	r0, r4
 80286be:	f000 ff4f 	bl	8029560 <_Bfree>
 80286c2:	2f00      	cmp	r7, #0
 80286c4:	f43f aea4 	beq.w	8028410 <_dtoa_r+0x6a0>
 80286c8:	f1b8 0f00 	cmp.w	r8, #0
 80286cc:	d005      	beq.n	80286da <_dtoa_r+0x96a>
 80286ce:	45b8      	cmp	r8, r7
 80286d0:	d003      	beq.n	80286da <_dtoa_r+0x96a>
 80286d2:	4641      	mov	r1, r8
 80286d4:	4620      	mov	r0, r4
 80286d6:	f000 ff43 	bl	8029560 <_Bfree>
 80286da:	4639      	mov	r1, r7
 80286dc:	4620      	mov	r0, r4
 80286de:	f000 ff3f 	bl	8029560 <_Bfree>
 80286e2:	e695      	b.n	8028410 <_dtoa_r+0x6a0>
 80286e4:	2600      	movs	r6, #0
 80286e6:	4637      	mov	r7, r6
 80286e8:	e7e1      	b.n	80286ae <_dtoa_r+0x93e>
 80286ea:	9700      	str	r7, [sp, #0]
 80286ec:	4637      	mov	r7, r6
 80286ee:	e599      	b.n	8028224 <_dtoa_r+0x4b4>
 80286f0:	40240000 	.word	0x40240000
 80286f4:	9b08      	ldr	r3, [sp, #32]
 80286f6:	2b00      	cmp	r3, #0
 80286f8:	f000 80ca 	beq.w	8028890 <_dtoa_r+0xb20>
 80286fc:	9b03      	ldr	r3, [sp, #12]
 80286fe:	9302      	str	r3, [sp, #8]
 8028700:	2d00      	cmp	r5, #0
 8028702:	dd05      	ble.n	8028710 <_dtoa_r+0x9a0>
 8028704:	4639      	mov	r1, r7
 8028706:	462a      	mov	r2, r5
 8028708:	4620      	mov	r0, r4
 802870a:	f001 f945 	bl	8029998 <__lshift>
 802870e:	4607      	mov	r7, r0
 8028710:	f1b8 0f00 	cmp.w	r8, #0
 8028714:	d05b      	beq.n	80287ce <_dtoa_r+0xa5e>
 8028716:	6879      	ldr	r1, [r7, #4]
 8028718:	4620      	mov	r0, r4
 802871a:	f000 fee1 	bl	80294e0 <_Balloc>
 802871e:	4605      	mov	r5, r0
 8028720:	b928      	cbnz	r0, 802872e <_dtoa_r+0x9be>
 8028722:	4b87      	ldr	r3, [pc, #540]	; (8028940 <_dtoa_r+0xbd0>)
 8028724:	4602      	mov	r2, r0
 8028726:	f240 21ea 	movw	r1, #746	; 0x2ea
 802872a:	f7ff bb3b 	b.w	8027da4 <_dtoa_r+0x34>
 802872e:	693a      	ldr	r2, [r7, #16]
 8028730:	3202      	adds	r2, #2
 8028732:	0092      	lsls	r2, r2, #2
 8028734:	f107 010c 	add.w	r1, r7, #12
 8028738:	300c      	adds	r0, #12
 802873a:	f7fd f9f3 	bl	8025b24 <memcpy>
 802873e:	2201      	movs	r2, #1
 8028740:	4629      	mov	r1, r5
 8028742:	4620      	mov	r0, r4
 8028744:	f001 f928 	bl	8029998 <__lshift>
 8028748:	9b01      	ldr	r3, [sp, #4]
 802874a:	f103 0901 	add.w	r9, r3, #1
 802874e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8028752:	4413      	add	r3, r2
 8028754:	9305      	str	r3, [sp, #20]
 8028756:	f00a 0301 	and.w	r3, sl, #1
 802875a:	46b8      	mov	r8, r7
 802875c:	9304      	str	r3, [sp, #16]
 802875e:	4607      	mov	r7, r0
 8028760:	4631      	mov	r1, r6
 8028762:	ee18 0a10 	vmov	r0, s16
 8028766:	f7ff fa77 	bl	8027c58 <quorem>
 802876a:	4641      	mov	r1, r8
 802876c:	9002      	str	r0, [sp, #8]
 802876e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8028772:	ee18 0a10 	vmov	r0, s16
 8028776:	f001 f97f 	bl	8029a78 <__mcmp>
 802877a:	463a      	mov	r2, r7
 802877c:	9003      	str	r0, [sp, #12]
 802877e:	4631      	mov	r1, r6
 8028780:	4620      	mov	r0, r4
 8028782:	f001 f995 	bl	8029ab0 <__mdiff>
 8028786:	68c2      	ldr	r2, [r0, #12]
 8028788:	f109 3bff 	add.w	fp, r9, #4294967295
 802878c:	4605      	mov	r5, r0
 802878e:	bb02      	cbnz	r2, 80287d2 <_dtoa_r+0xa62>
 8028790:	4601      	mov	r1, r0
 8028792:	ee18 0a10 	vmov	r0, s16
 8028796:	f001 f96f 	bl	8029a78 <__mcmp>
 802879a:	4602      	mov	r2, r0
 802879c:	4629      	mov	r1, r5
 802879e:	4620      	mov	r0, r4
 80287a0:	9207      	str	r2, [sp, #28]
 80287a2:	f000 fedd 	bl	8029560 <_Bfree>
 80287a6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80287aa:	ea43 0102 	orr.w	r1, r3, r2
 80287ae:	9b04      	ldr	r3, [sp, #16]
 80287b0:	430b      	orrs	r3, r1
 80287b2:	464d      	mov	r5, r9
 80287b4:	d10f      	bne.n	80287d6 <_dtoa_r+0xa66>
 80287b6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80287ba:	d02a      	beq.n	8028812 <_dtoa_r+0xaa2>
 80287bc:	9b03      	ldr	r3, [sp, #12]
 80287be:	2b00      	cmp	r3, #0
 80287c0:	dd02      	ble.n	80287c8 <_dtoa_r+0xa58>
 80287c2:	9b02      	ldr	r3, [sp, #8]
 80287c4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80287c8:	f88b a000 	strb.w	sl, [fp]
 80287cc:	e775      	b.n	80286ba <_dtoa_r+0x94a>
 80287ce:	4638      	mov	r0, r7
 80287d0:	e7ba      	b.n	8028748 <_dtoa_r+0x9d8>
 80287d2:	2201      	movs	r2, #1
 80287d4:	e7e2      	b.n	802879c <_dtoa_r+0xa2c>
 80287d6:	9b03      	ldr	r3, [sp, #12]
 80287d8:	2b00      	cmp	r3, #0
 80287da:	db04      	blt.n	80287e6 <_dtoa_r+0xa76>
 80287dc:	9906      	ldr	r1, [sp, #24]
 80287de:	430b      	orrs	r3, r1
 80287e0:	9904      	ldr	r1, [sp, #16]
 80287e2:	430b      	orrs	r3, r1
 80287e4:	d122      	bne.n	802882c <_dtoa_r+0xabc>
 80287e6:	2a00      	cmp	r2, #0
 80287e8:	ddee      	ble.n	80287c8 <_dtoa_r+0xa58>
 80287ea:	ee18 1a10 	vmov	r1, s16
 80287ee:	2201      	movs	r2, #1
 80287f0:	4620      	mov	r0, r4
 80287f2:	f001 f8d1 	bl	8029998 <__lshift>
 80287f6:	4631      	mov	r1, r6
 80287f8:	ee08 0a10 	vmov	s16, r0
 80287fc:	f001 f93c 	bl	8029a78 <__mcmp>
 8028800:	2800      	cmp	r0, #0
 8028802:	dc03      	bgt.n	802880c <_dtoa_r+0xa9c>
 8028804:	d1e0      	bne.n	80287c8 <_dtoa_r+0xa58>
 8028806:	f01a 0f01 	tst.w	sl, #1
 802880a:	d0dd      	beq.n	80287c8 <_dtoa_r+0xa58>
 802880c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8028810:	d1d7      	bne.n	80287c2 <_dtoa_r+0xa52>
 8028812:	2339      	movs	r3, #57	; 0x39
 8028814:	f88b 3000 	strb.w	r3, [fp]
 8028818:	462b      	mov	r3, r5
 802881a:	461d      	mov	r5, r3
 802881c:	3b01      	subs	r3, #1
 802881e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8028822:	2a39      	cmp	r2, #57	; 0x39
 8028824:	d071      	beq.n	802890a <_dtoa_r+0xb9a>
 8028826:	3201      	adds	r2, #1
 8028828:	701a      	strb	r2, [r3, #0]
 802882a:	e746      	b.n	80286ba <_dtoa_r+0x94a>
 802882c:	2a00      	cmp	r2, #0
 802882e:	dd07      	ble.n	8028840 <_dtoa_r+0xad0>
 8028830:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8028834:	d0ed      	beq.n	8028812 <_dtoa_r+0xaa2>
 8028836:	f10a 0301 	add.w	r3, sl, #1
 802883a:	f88b 3000 	strb.w	r3, [fp]
 802883e:	e73c      	b.n	80286ba <_dtoa_r+0x94a>
 8028840:	9b05      	ldr	r3, [sp, #20]
 8028842:	f809 ac01 	strb.w	sl, [r9, #-1]
 8028846:	4599      	cmp	r9, r3
 8028848:	d047      	beq.n	80288da <_dtoa_r+0xb6a>
 802884a:	ee18 1a10 	vmov	r1, s16
 802884e:	2300      	movs	r3, #0
 8028850:	220a      	movs	r2, #10
 8028852:	4620      	mov	r0, r4
 8028854:	f000 fea6 	bl	80295a4 <__multadd>
 8028858:	45b8      	cmp	r8, r7
 802885a:	ee08 0a10 	vmov	s16, r0
 802885e:	f04f 0300 	mov.w	r3, #0
 8028862:	f04f 020a 	mov.w	r2, #10
 8028866:	4641      	mov	r1, r8
 8028868:	4620      	mov	r0, r4
 802886a:	d106      	bne.n	802887a <_dtoa_r+0xb0a>
 802886c:	f000 fe9a 	bl	80295a4 <__multadd>
 8028870:	4680      	mov	r8, r0
 8028872:	4607      	mov	r7, r0
 8028874:	f109 0901 	add.w	r9, r9, #1
 8028878:	e772      	b.n	8028760 <_dtoa_r+0x9f0>
 802887a:	f000 fe93 	bl	80295a4 <__multadd>
 802887e:	4639      	mov	r1, r7
 8028880:	4680      	mov	r8, r0
 8028882:	2300      	movs	r3, #0
 8028884:	220a      	movs	r2, #10
 8028886:	4620      	mov	r0, r4
 8028888:	f000 fe8c 	bl	80295a4 <__multadd>
 802888c:	4607      	mov	r7, r0
 802888e:	e7f1      	b.n	8028874 <_dtoa_r+0xb04>
 8028890:	9b03      	ldr	r3, [sp, #12]
 8028892:	9302      	str	r3, [sp, #8]
 8028894:	9d01      	ldr	r5, [sp, #4]
 8028896:	ee18 0a10 	vmov	r0, s16
 802889a:	4631      	mov	r1, r6
 802889c:	f7ff f9dc 	bl	8027c58 <quorem>
 80288a0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80288a4:	9b01      	ldr	r3, [sp, #4]
 80288a6:	f805 ab01 	strb.w	sl, [r5], #1
 80288aa:	1aea      	subs	r2, r5, r3
 80288ac:	9b02      	ldr	r3, [sp, #8]
 80288ae:	4293      	cmp	r3, r2
 80288b0:	dd09      	ble.n	80288c6 <_dtoa_r+0xb56>
 80288b2:	ee18 1a10 	vmov	r1, s16
 80288b6:	2300      	movs	r3, #0
 80288b8:	220a      	movs	r2, #10
 80288ba:	4620      	mov	r0, r4
 80288bc:	f000 fe72 	bl	80295a4 <__multadd>
 80288c0:	ee08 0a10 	vmov	s16, r0
 80288c4:	e7e7      	b.n	8028896 <_dtoa_r+0xb26>
 80288c6:	9b02      	ldr	r3, [sp, #8]
 80288c8:	2b00      	cmp	r3, #0
 80288ca:	bfc8      	it	gt
 80288cc:	461d      	movgt	r5, r3
 80288ce:	9b01      	ldr	r3, [sp, #4]
 80288d0:	bfd8      	it	le
 80288d2:	2501      	movle	r5, #1
 80288d4:	441d      	add	r5, r3
 80288d6:	f04f 0800 	mov.w	r8, #0
 80288da:	ee18 1a10 	vmov	r1, s16
 80288de:	2201      	movs	r2, #1
 80288e0:	4620      	mov	r0, r4
 80288e2:	f001 f859 	bl	8029998 <__lshift>
 80288e6:	4631      	mov	r1, r6
 80288e8:	ee08 0a10 	vmov	s16, r0
 80288ec:	f001 f8c4 	bl	8029a78 <__mcmp>
 80288f0:	2800      	cmp	r0, #0
 80288f2:	dc91      	bgt.n	8028818 <_dtoa_r+0xaa8>
 80288f4:	d102      	bne.n	80288fc <_dtoa_r+0xb8c>
 80288f6:	f01a 0f01 	tst.w	sl, #1
 80288fa:	d18d      	bne.n	8028818 <_dtoa_r+0xaa8>
 80288fc:	462b      	mov	r3, r5
 80288fe:	461d      	mov	r5, r3
 8028900:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8028904:	2a30      	cmp	r2, #48	; 0x30
 8028906:	d0fa      	beq.n	80288fe <_dtoa_r+0xb8e>
 8028908:	e6d7      	b.n	80286ba <_dtoa_r+0x94a>
 802890a:	9a01      	ldr	r2, [sp, #4]
 802890c:	429a      	cmp	r2, r3
 802890e:	d184      	bne.n	802881a <_dtoa_r+0xaaa>
 8028910:	9b00      	ldr	r3, [sp, #0]
 8028912:	3301      	adds	r3, #1
 8028914:	9300      	str	r3, [sp, #0]
 8028916:	2331      	movs	r3, #49	; 0x31
 8028918:	7013      	strb	r3, [r2, #0]
 802891a:	e6ce      	b.n	80286ba <_dtoa_r+0x94a>
 802891c:	4b09      	ldr	r3, [pc, #36]	; (8028944 <_dtoa_r+0xbd4>)
 802891e:	f7ff ba95 	b.w	8027e4c <_dtoa_r+0xdc>
 8028922:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8028924:	2b00      	cmp	r3, #0
 8028926:	f47f aa6e 	bne.w	8027e06 <_dtoa_r+0x96>
 802892a:	4b07      	ldr	r3, [pc, #28]	; (8028948 <_dtoa_r+0xbd8>)
 802892c:	f7ff ba8e 	b.w	8027e4c <_dtoa_r+0xdc>
 8028930:	9b02      	ldr	r3, [sp, #8]
 8028932:	2b00      	cmp	r3, #0
 8028934:	dcae      	bgt.n	8028894 <_dtoa_r+0xb24>
 8028936:	9b06      	ldr	r3, [sp, #24]
 8028938:	2b02      	cmp	r3, #2
 802893a:	f73f aea8 	bgt.w	802868e <_dtoa_r+0x91e>
 802893e:	e7a9      	b.n	8028894 <_dtoa_r+0xb24>
 8028940:	08031149 	.word	0x08031149
 8028944:	08031398 	.word	0x08031398
 8028948:	080310e1 	.word	0x080310e1

0802894c <__errno>:
 802894c:	4b01      	ldr	r3, [pc, #4]	; (8028954 <__errno+0x8>)
 802894e:	6818      	ldr	r0, [r3, #0]
 8028950:	4770      	bx	lr
 8028952:	bf00      	nop
 8028954:	10000070 	.word	0x10000070

08028958 <__sflush_r>:
 8028958:	898a      	ldrh	r2, [r1, #12]
 802895a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802895e:	4605      	mov	r5, r0
 8028960:	0710      	lsls	r0, r2, #28
 8028962:	460c      	mov	r4, r1
 8028964:	d458      	bmi.n	8028a18 <__sflush_r+0xc0>
 8028966:	684b      	ldr	r3, [r1, #4]
 8028968:	2b00      	cmp	r3, #0
 802896a:	dc05      	bgt.n	8028978 <__sflush_r+0x20>
 802896c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802896e:	2b00      	cmp	r3, #0
 8028970:	dc02      	bgt.n	8028978 <__sflush_r+0x20>
 8028972:	2000      	movs	r0, #0
 8028974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028978:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802897a:	2e00      	cmp	r6, #0
 802897c:	d0f9      	beq.n	8028972 <__sflush_r+0x1a>
 802897e:	2300      	movs	r3, #0
 8028980:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8028984:	682f      	ldr	r7, [r5, #0]
 8028986:	602b      	str	r3, [r5, #0]
 8028988:	d032      	beq.n	80289f0 <__sflush_r+0x98>
 802898a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802898c:	89a3      	ldrh	r3, [r4, #12]
 802898e:	075a      	lsls	r2, r3, #29
 8028990:	d505      	bpl.n	802899e <__sflush_r+0x46>
 8028992:	6863      	ldr	r3, [r4, #4]
 8028994:	1ac0      	subs	r0, r0, r3
 8028996:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8028998:	b10b      	cbz	r3, 802899e <__sflush_r+0x46>
 802899a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802899c:	1ac0      	subs	r0, r0, r3
 802899e:	2300      	movs	r3, #0
 80289a0:	4602      	mov	r2, r0
 80289a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80289a4:	6a21      	ldr	r1, [r4, #32]
 80289a6:	4628      	mov	r0, r5
 80289a8:	47b0      	blx	r6
 80289aa:	1c43      	adds	r3, r0, #1
 80289ac:	89a3      	ldrh	r3, [r4, #12]
 80289ae:	d106      	bne.n	80289be <__sflush_r+0x66>
 80289b0:	6829      	ldr	r1, [r5, #0]
 80289b2:	291d      	cmp	r1, #29
 80289b4:	d82c      	bhi.n	8028a10 <__sflush_r+0xb8>
 80289b6:	4a2a      	ldr	r2, [pc, #168]	; (8028a60 <__sflush_r+0x108>)
 80289b8:	40ca      	lsrs	r2, r1
 80289ba:	07d6      	lsls	r6, r2, #31
 80289bc:	d528      	bpl.n	8028a10 <__sflush_r+0xb8>
 80289be:	2200      	movs	r2, #0
 80289c0:	6062      	str	r2, [r4, #4]
 80289c2:	04d9      	lsls	r1, r3, #19
 80289c4:	6922      	ldr	r2, [r4, #16]
 80289c6:	6022      	str	r2, [r4, #0]
 80289c8:	d504      	bpl.n	80289d4 <__sflush_r+0x7c>
 80289ca:	1c42      	adds	r2, r0, #1
 80289cc:	d101      	bne.n	80289d2 <__sflush_r+0x7a>
 80289ce:	682b      	ldr	r3, [r5, #0]
 80289d0:	b903      	cbnz	r3, 80289d4 <__sflush_r+0x7c>
 80289d2:	6560      	str	r0, [r4, #84]	; 0x54
 80289d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80289d6:	602f      	str	r7, [r5, #0]
 80289d8:	2900      	cmp	r1, #0
 80289da:	d0ca      	beq.n	8028972 <__sflush_r+0x1a>
 80289dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80289e0:	4299      	cmp	r1, r3
 80289e2:	d002      	beq.n	80289ea <__sflush_r+0x92>
 80289e4:	4628      	mov	r0, r5
 80289e6:	f7fd f8cd 	bl	8025b84 <_free_r>
 80289ea:	2000      	movs	r0, #0
 80289ec:	6360      	str	r0, [r4, #52]	; 0x34
 80289ee:	e7c1      	b.n	8028974 <__sflush_r+0x1c>
 80289f0:	6a21      	ldr	r1, [r4, #32]
 80289f2:	2301      	movs	r3, #1
 80289f4:	4628      	mov	r0, r5
 80289f6:	47b0      	blx	r6
 80289f8:	1c41      	adds	r1, r0, #1
 80289fa:	d1c7      	bne.n	802898c <__sflush_r+0x34>
 80289fc:	682b      	ldr	r3, [r5, #0]
 80289fe:	2b00      	cmp	r3, #0
 8028a00:	d0c4      	beq.n	802898c <__sflush_r+0x34>
 8028a02:	2b1d      	cmp	r3, #29
 8028a04:	d001      	beq.n	8028a0a <__sflush_r+0xb2>
 8028a06:	2b16      	cmp	r3, #22
 8028a08:	d101      	bne.n	8028a0e <__sflush_r+0xb6>
 8028a0a:	602f      	str	r7, [r5, #0]
 8028a0c:	e7b1      	b.n	8028972 <__sflush_r+0x1a>
 8028a0e:	89a3      	ldrh	r3, [r4, #12]
 8028a10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8028a14:	81a3      	strh	r3, [r4, #12]
 8028a16:	e7ad      	b.n	8028974 <__sflush_r+0x1c>
 8028a18:	690f      	ldr	r7, [r1, #16]
 8028a1a:	2f00      	cmp	r7, #0
 8028a1c:	d0a9      	beq.n	8028972 <__sflush_r+0x1a>
 8028a1e:	0793      	lsls	r3, r2, #30
 8028a20:	680e      	ldr	r6, [r1, #0]
 8028a22:	bf08      	it	eq
 8028a24:	694b      	ldreq	r3, [r1, #20]
 8028a26:	600f      	str	r7, [r1, #0]
 8028a28:	bf18      	it	ne
 8028a2a:	2300      	movne	r3, #0
 8028a2c:	eba6 0807 	sub.w	r8, r6, r7
 8028a30:	608b      	str	r3, [r1, #8]
 8028a32:	f1b8 0f00 	cmp.w	r8, #0
 8028a36:	dd9c      	ble.n	8028972 <__sflush_r+0x1a>
 8028a38:	6a21      	ldr	r1, [r4, #32]
 8028a3a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8028a3c:	4643      	mov	r3, r8
 8028a3e:	463a      	mov	r2, r7
 8028a40:	4628      	mov	r0, r5
 8028a42:	47b0      	blx	r6
 8028a44:	2800      	cmp	r0, #0
 8028a46:	dc06      	bgt.n	8028a56 <__sflush_r+0xfe>
 8028a48:	89a3      	ldrh	r3, [r4, #12]
 8028a4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8028a4e:	81a3      	strh	r3, [r4, #12]
 8028a50:	f04f 30ff 	mov.w	r0, #4294967295
 8028a54:	e78e      	b.n	8028974 <__sflush_r+0x1c>
 8028a56:	4407      	add	r7, r0
 8028a58:	eba8 0800 	sub.w	r8, r8, r0
 8028a5c:	e7e9      	b.n	8028a32 <__sflush_r+0xda>
 8028a5e:	bf00      	nop
 8028a60:	20400001 	.word	0x20400001

08028a64 <_fflush_r>:
 8028a64:	b538      	push	{r3, r4, r5, lr}
 8028a66:	690b      	ldr	r3, [r1, #16]
 8028a68:	4605      	mov	r5, r0
 8028a6a:	460c      	mov	r4, r1
 8028a6c:	b913      	cbnz	r3, 8028a74 <_fflush_r+0x10>
 8028a6e:	2500      	movs	r5, #0
 8028a70:	4628      	mov	r0, r5
 8028a72:	bd38      	pop	{r3, r4, r5, pc}
 8028a74:	b118      	cbz	r0, 8028a7e <_fflush_r+0x1a>
 8028a76:	6983      	ldr	r3, [r0, #24]
 8028a78:	b90b      	cbnz	r3, 8028a7e <_fflush_r+0x1a>
 8028a7a:	f000 f887 	bl	8028b8c <__sinit>
 8028a7e:	4b14      	ldr	r3, [pc, #80]	; (8028ad0 <_fflush_r+0x6c>)
 8028a80:	429c      	cmp	r4, r3
 8028a82:	d11b      	bne.n	8028abc <_fflush_r+0x58>
 8028a84:	686c      	ldr	r4, [r5, #4]
 8028a86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8028a8a:	2b00      	cmp	r3, #0
 8028a8c:	d0ef      	beq.n	8028a6e <_fflush_r+0xa>
 8028a8e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8028a90:	07d0      	lsls	r0, r2, #31
 8028a92:	d404      	bmi.n	8028a9e <_fflush_r+0x3a>
 8028a94:	0599      	lsls	r1, r3, #22
 8028a96:	d402      	bmi.n	8028a9e <_fflush_r+0x3a>
 8028a98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8028a9a:	f000 fc88 	bl	80293ae <__retarget_lock_acquire_recursive>
 8028a9e:	4628      	mov	r0, r5
 8028aa0:	4621      	mov	r1, r4
 8028aa2:	f7ff ff59 	bl	8028958 <__sflush_r>
 8028aa6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8028aa8:	07da      	lsls	r2, r3, #31
 8028aaa:	4605      	mov	r5, r0
 8028aac:	d4e0      	bmi.n	8028a70 <_fflush_r+0xc>
 8028aae:	89a3      	ldrh	r3, [r4, #12]
 8028ab0:	059b      	lsls	r3, r3, #22
 8028ab2:	d4dd      	bmi.n	8028a70 <_fflush_r+0xc>
 8028ab4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8028ab6:	f000 fc7b 	bl	80293b0 <__retarget_lock_release_recursive>
 8028aba:	e7d9      	b.n	8028a70 <_fflush_r+0xc>
 8028abc:	4b05      	ldr	r3, [pc, #20]	; (8028ad4 <_fflush_r+0x70>)
 8028abe:	429c      	cmp	r4, r3
 8028ac0:	d101      	bne.n	8028ac6 <_fflush_r+0x62>
 8028ac2:	68ac      	ldr	r4, [r5, #8]
 8028ac4:	e7df      	b.n	8028a86 <_fflush_r+0x22>
 8028ac6:	4b04      	ldr	r3, [pc, #16]	; (8028ad8 <_fflush_r+0x74>)
 8028ac8:	429c      	cmp	r4, r3
 8028aca:	bf08      	it	eq
 8028acc:	68ec      	ldreq	r4, [r5, #12]
 8028ace:	e7da      	b.n	8028a86 <_fflush_r+0x22>
 8028ad0:	0803117c 	.word	0x0803117c
 8028ad4:	0803119c 	.word	0x0803119c
 8028ad8:	0803115c 	.word	0x0803115c

08028adc <std>:
 8028adc:	2300      	movs	r3, #0
 8028ade:	b510      	push	{r4, lr}
 8028ae0:	4604      	mov	r4, r0
 8028ae2:	e9c0 3300 	strd	r3, r3, [r0]
 8028ae6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8028aea:	6083      	str	r3, [r0, #8]
 8028aec:	8181      	strh	r1, [r0, #12]
 8028aee:	6643      	str	r3, [r0, #100]	; 0x64
 8028af0:	81c2      	strh	r2, [r0, #14]
 8028af2:	6183      	str	r3, [r0, #24]
 8028af4:	4619      	mov	r1, r3
 8028af6:	2208      	movs	r2, #8
 8028af8:	305c      	adds	r0, #92	; 0x5c
 8028afa:	f7fd f83b 	bl	8025b74 <memset>
 8028afe:	4b05      	ldr	r3, [pc, #20]	; (8028b14 <std+0x38>)
 8028b00:	6263      	str	r3, [r4, #36]	; 0x24
 8028b02:	4b05      	ldr	r3, [pc, #20]	; (8028b18 <std+0x3c>)
 8028b04:	62a3      	str	r3, [r4, #40]	; 0x28
 8028b06:	4b05      	ldr	r3, [pc, #20]	; (8028b1c <std+0x40>)
 8028b08:	62e3      	str	r3, [r4, #44]	; 0x2c
 8028b0a:	4b05      	ldr	r3, [pc, #20]	; (8028b20 <std+0x44>)
 8028b0c:	6224      	str	r4, [r4, #32]
 8028b0e:	6323      	str	r3, [r4, #48]	; 0x30
 8028b10:	bd10      	pop	{r4, pc}
 8028b12:	bf00      	nop
 8028b14:	08026b2d 	.word	0x08026b2d
 8028b18:	08026b53 	.word	0x08026b53
 8028b1c:	08026b8b 	.word	0x08026b8b
 8028b20:	08026baf 	.word	0x08026baf

08028b24 <_cleanup_r>:
 8028b24:	4901      	ldr	r1, [pc, #4]	; (8028b2c <_cleanup_r+0x8>)
 8028b26:	f000 b8af 	b.w	8028c88 <_fwalk_reent>
 8028b2a:	bf00      	nop
 8028b2c:	08028a65 	.word	0x08028a65

08028b30 <__sfmoreglue>:
 8028b30:	b570      	push	{r4, r5, r6, lr}
 8028b32:	2268      	movs	r2, #104	; 0x68
 8028b34:	1e4d      	subs	r5, r1, #1
 8028b36:	4355      	muls	r5, r2
 8028b38:	460e      	mov	r6, r1
 8028b3a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8028b3e:	f7fd f88d 	bl	8025c5c <_malloc_r>
 8028b42:	4604      	mov	r4, r0
 8028b44:	b140      	cbz	r0, 8028b58 <__sfmoreglue+0x28>
 8028b46:	2100      	movs	r1, #0
 8028b48:	e9c0 1600 	strd	r1, r6, [r0]
 8028b4c:	300c      	adds	r0, #12
 8028b4e:	60a0      	str	r0, [r4, #8]
 8028b50:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8028b54:	f7fd f80e 	bl	8025b74 <memset>
 8028b58:	4620      	mov	r0, r4
 8028b5a:	bd70      	pop	{r4, r5, r6, pc}

08028b5c <__sfp_lock_acquire>:
 8028b5c:	4801      	ldr	r0, [pc, #4]	; (8028b64 <__sfp_lock_acquire+0x8>)
 8028b5e:	f000 bc26 	b.w	80293ae <__retarget_lock_acquire_recursive>
 8028b62:	bf00      	nop
 8028b64:	20013d81 	.word	0x20013d81

08028b68 <__sfp_lock_release>:
 8028b68:	4801      	ldr	r0, [pc, #4]	; (8028b70 <__sfp_lock_release+0x8>)
 8028b6a:	f000 bc21 	b.w	80293b0 <__retarget_lock_release_recursive>
 8028b6e:	bf00      	nop
 8028b70:	20013d81 	.word	0x20013d81

08028b74 <__sinit_lock_acquire>:
 8028b74:	4801      	ldr	r0, [pc, #4]	; (8028b7c <__sinit_lock_acquire+0x8>)
 8028b76:	f000 bc1a 	b.w	80293ae <__retarget_lock_acquire_recursive>
 8028b7a:	bf00      	nop
 8028b7c:	20013d82 	.word	0x20013d82

08028b80 <__sinit_lock_release>:
 8028b80:	4801      	ldr	r0, [pc, #4]	; (8028b88 <__sinit_lock_release+0x8>)
 8028b82:	f000 bc15 	b.w	80293b0 <__retarget_lock_release_recursive>
 8028b86:	bf00      	nop
 8028b88:	20013d82 	.word	0x20013d82

08028b8c <__sinit>:
 8028b8c:	b510      	push	{r4, lr}
 8028b8e:	4604      	mov	r4, r0
 8028b90:	f7ff fff0 	bl	8028b74 <__sinit_lock_acquire>
 8028b94:	69a3      	ldr	r3, [r4, #24]
 8028b96:	b11b      	cbz	r3, 8028ba0 <__sinit+0x14>
 8028b98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8028b9c:	f7ff bff0 	b.w	8028b80 <__sinit_lock_release>
 8028ba0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8028ba4:	6523      	str	r3, [r4, #80]	; 0x50
 8028ba6:	4b13      	ldr	r3, [pc, #76]	; (8028bf4 <__sinit+0x68>)
 8028ba8:	4a13      	ldr	r2, [pc, #76]	; (8028bf8 <__sinit+0x6c>)
 8028baa:	681b      	ldr	r3, [r3, #0]
 8028bac:	62a2      	str	r2, [r4, #40]	; 0x28
 8028bae:	42a3      	cmp	r3, r4
 8028bb0:	bf04      	itt	eq
 8028bb2:	2301      	moveq	r3, #1
 8028bb4:	61a3      	streq	r3, [r4, #24]
 8028bb6:	4620      	mov	r0, r4
 8028bb8:	f000 f820 	bl	8028bfc <__sfp>
 8028bbc:	6060      	str	r0, [r4, #4]
 8028bbe:	4620      	mov	r0, r4
 8028bc0:	f000 f81c 	bl	8028bfc <__sfp>
 8028bc4:	60a0      	str	r0, [r4, #8]
 8028bc6:	4620      	mov	r0, r4
 8028bc8:	f000 f818 	bl	8028bfc <__sfp>
 8028bcc:	2200      	movs	r2, #0
 8028bce:	60e0      	str	r0, [r4, #12]
 8028bd0:	2104      	movs	r1, #4
 8028bd2:	6860      	ldr	r0, [r4, #4]
 8028bd4:	f7ff ff82 	bl	8028adc <std>
 8028bd8:	68a0      	ldr	r0, [r4, #8]
 8028bda:	2201      	movs	r2, #1
 8028bdc:	2109      	movs	r1, #9
 8028bde:	f7ff ff7d 	bl	8028adc <std>
 8028be2:	68e0      	ldr	r0, [r4, #12]
 8028be4:	2202      	movs	r2, #2
 8028be6:	2112      	movs	r1, #18
 8028be8:	f7ff ff78 	bl	8028adc <std>
 8028bec:	2301      	movs	r3, #1
 8028bee:	61a3      	str	r3, [r4, #24]
 8028bf0:	e7d2      	b.n	8028b98 <__sinit+0xc>
 8028bf2:	bf00      	nop
 8028bf4:	08030f3c 	.word	0x08030f3c
 8028bf8:	08028b25 	.word	0x08028b25

08028bfc <__sfp>:
 8028bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028bfe:	4607      	mov	r7, r0
 8028c00:	f7ff ffac 	bl	8028b5c <__sfp_lock_acquire>
 8028c04:	4b1e      	ldr	r3, [pc, #120]	; (8028c80 <__sfp+0x84>)
 8028c06:	681e      	ldr	r6, [r3, #0]
 8028c08:	69b3      	ldr	r3, [r6, #24]
 8028c0a:	b913      	cbnz	r3, 8028c12 <__sfp+0x16>
 8028c0c:	4630      	mov	r0, r6
 8028c0e:	f7ff ffbd 	bl	8028b8c <__sinit>
 8028c12:	3648      	adds	r6, #72	; 0x48
 8028c14:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8028c18:	3b01      	subs	r3, #1
 8028c1a:	d503      	bpl.n	8028c24 <__sfp+0x28>
 8028c1c:	6833      	ldr	r3, [r6, #0]
 8028c1e:	b30b      	cbz	r3, 8028c64 <__sfp+0x68>
 8028c20:	6836      	ldr	r6, [r6, #0]
 8028c22:	e7f7      	b.n	8028c14 <__sfp+0x18>
 8028c24:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8028c28:	b9d5      	cbnz	r5, 8028c60 <__sfp+0x64>
 8028c2a:	4b16      	ldr	r3, [pc, #88]	; (8028c84 <__sfp+0x88>)
 8028c2c:	60e3      	str	r3, [r4, #12]
 8028c2e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8028c32:	6665      	str	r5, [r4, #100]	; 0x64
 8028c34:	f000 fbba 	bl	80293ac <__retarget_lock_init_recursive>
 8028c38:	f7ff ff96 	bl	8028b68 <__sfp_lock_release>
 8028c3c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8028c40:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8028c44:	6025      	str	r5, [r4, #0]
 8028c46:	61a5      	str	r5, [r4, #24]
 8028c48:	2208      	movs	r2, #8
 8028c4a:	4629      	mov	r1, r5
 8028c4c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8028c50:	f7fc ff90 	bl	8025b74 <memset>
 8028c54:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8028c58:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8028c5c:	4620      	mov	r0, r4
 8028c5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8028c60:	3468      	adds	r4, #104	; 0x68
 8028c62:	e7d9      	b.n	8028c18 <__sfp+0x1c>
 8028c64:	2104      	movs	r1, #4
 8028c66:	4638      	mov	r0, r7
 8028c68:	f7ff ff62 	bl	8028b30 <__sfmoreglue>
 8028c6c:	4604      	mov	r4, r0
 8028c6e:	6030      	str	r0, [r6, #0]
 8028c70:	2800      	cmp	r0, #0
 8028c72:	d1d5      	bne.n	8028c20 <__sfp+0x24>
 8028c74:	f7ff ff78 	bl	8028b68 <__sfp_lock_release>
 8028c78:	230c      	movs	r3, #12
 8028c7a:	603b      	str	r3, [r7, #0]
 8028c7c:	e7ee      	b.n	8028c5c <__sfp+0x60>
 8028c7e:	bf00      	nop
 8028c80:	08030f3c 	.word	0x08030f3c
 8028c84:	ffff0001 	.word	0xffff0001

08028c88 <_fwalk_reent>:
 8028c88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8028c8c:	4606      	mov	r6, r0
 8028c8e:	4688      	mov	r8, r1
 8028c90:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8028c94:	2700      	movs	r7, #0
 8028c96:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8028c9a:	f1b9 0901 	subs.w	r9, r9, #1
 8028c9e:	d505      	bpl.n	8028cac <_fwalk_reent+0x24>
 8028ca0:	6824      	ldr	r4, [r4, #0]
 8028ca2:	2c00      	cmp	r4, #0
 8028ca4:	d1f7      	bne.n	8028c96 <_fwalk_reent+0xe>
 8028ca6:	4638      	mov	r0, r7
 8028ca8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8028cac:	89ab      	ldrh	r3, [r5, #12]
 8028cae:	2b01      	cmp	r3, #1
 8028cb0:	d907      	bls.n	8028cc2 <_fwalk_reent+0x3a>
 8028cb2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8028cb6:	3301      	adds	r3, #1
 8028cb8:	d003      	beq.n	8028cc2 <_fwalk_reent+0x3a>
 8028cba:	4629      	mov	r1, r5
 8028cbc:	4630      	mov	r0, r6
 8028cbe:	47c0      	blx	r8
 8028cc0:	4307      	orrs	r7, r0
 8028cc2:	3568      	adds	r5, #104	; 0x68
 8028cc4:	e7e9      	b.n	8028c9a <_fwalk_reent+0x12>

08028cc6 <rshift>:
 8028cc6:	6903      	ldr	r3, [r0, #16]
 8028cc8:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8028ccc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8028cd0:	ea4f 1261 	mov.w	r2, r1, asr #5
 8028cd4:	f100 0414 	add.w	r4, r0, #20
 8028cd8:	dd45      	ble.n	8028d66 <rshift+0xa0>
 8028cda:	f011 011f 	ands.w	r1, r1, #31
 8028cde:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8028ce2:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8028ce6:	d10c      	bne.n	8028d02 <rshift+0x3c>
 8028ce8:	f100 0710 	add.w	r7, r0, #16
 8028cec:	4629      	mov	r1, r5
 8028cee:	42b1      	cmp	r1, r6
 8028cf0:	d334      	bcc.n	8028d5c <rshift+0x96>
 8028cf2:	1a9b      	subs	r3, r3, r2
 8028cf4:	009b      	lsls	r3, r3, #2
 8028cf6:	1eea      	subs	r2, r5, #3
 8028cf8:	4296      	cmp	r6, r2
 8028cfa:	bf38      	it	cc
 8028cfc:	2300      	movcc	r3, #0
 8028cfe:	4423      	add	r3, r4
 8028d00:	e015      	b.n	8028d2e <rshift+0x68>
 8028d02:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8028d06:	f1c1 0820 	rsb	r8, r1, #32
 8028d0a:	40cf      	lsrs	r7, r1
 8028d0c:	f105 0e04 	add.w	lr, r5, #4
 8028d10:	46a1      	mov	r9, r4
 8028d12:	4576      	cmp	r6, lr
 8028d14:	46f4      	mov	ip, lr
 8028d16:	d815      	bhi.n	8028d44 <rshift+0x7e>
 8028d18:	1a9a      	subs	r2, r3, r2
 8028d1a:	0092      	lsls	r2, r2, #2
 8028d1c:	3a04      	subs	r2, #4
 8028d1e:	3501      	adds	r5, #1
 8028d20:	42ae      	cmp	r6, r5
 8028d22:	bf38      	it	cc
 8028d24:	2200      	movcc	r2, #0
 8028d26:	18a3      	adds	r3, r4, r2
 8028d28:	50a7      	str	r7, [r4, r2]
 8028d2a:	b107      	cbz	r7, 8028d2e <rshift+0x68>
 8028d2c:	3304      	adds	r3, #4
 8028d2e:	1b1a      	subs	r2, r3, r4
 8028d30:	42a3      	cmp	r3, r4
 8028d32:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8028d36:	bf08      	it	eq
 8028d38:	2300      	moveq	r3, #0
 8028d3a:	6102      	str	r2, [r0, #16]
 8028d3c:	bf08      	it	eq
 8028d3e:	6143      	streq	r3, [r0, #20]
 8028d40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8028d44:	f8dc c000 	ldr.w	ip, [ip]
 8028d48:	fa0c fc08 	lsl.w	ip, ip, r8
 8028d4c:	ea4c 0707 	orr.w	r7, ip, r7
 8028d50:	f849 7b04 	str.w	r7, [r9], #4
 8028d54:	f85e 7b04 	ldr.w	r7, [lr], #4
 8028d58:	40cf      	lsrs	r7, r1
 8028d5a:	e7da      	b.n	8028d12 <rshift+0x4c>
 8028d5c:	f851 cb04 	ldr.w	ip, [r1], #4
 8028d60:	f847 cf04 	str.w	ip, [r7, #4]!
 8028d64:	e7c3      	b.n	8028cee <rshift+0x28>
 8028d66:	4623      	mov	r3, r4
 8028d68:	e7e1      	b.n	8028d2e <rshift+0x68>

08028d6a <__hexdig_fun>:
 8028d6a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8028d6e:	2b09      	cmp	r3, #9
 8028d70:	d802      	bhi.n	8028d78 <__hexdig_fun+0xe>
 8028d72:	3820      	subs	r0, #32
 8028d74:	b2c0      	uxtb	r0, r0
 8028d76:	4770      	bx	lr
 8028d78:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8028d7c:	2b05      	cmp	r3, #5
 8028d7e:	d801      	bhi.n	8028d84 <__hexdig_fun+0x1a>
 8028d80:	3847      	subs	r0, #71	; 0x47
 8028d82:	e7f7      	b.n	8028d74 <__hexdig_fun+0xa>
 8028d84:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8028d88:	2b05      	cmp	r3, #5
 8028d8a:	d801      	bhi.n	8028d90 <__hexdig_fun+0x26>
 8028d8c:	3827      	subs	r0, #39	; 0x27
 8028d8e:	e7f1      	b.n	8028d74 <__hexdig_fun+0xa>
 8028d90:	2000      	movs	r0, #0
 8028d92:	4770      	bx	lr

08028d94 <__gethex>:
 8028d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028d98:	ed2d 8b02 	vpush	{d8}
 8028d9c:	b089      	sub	sp, #36	; 0x24
 8028d9e:	ee08 0a10 	vmov	s16, r0
 8028da2:	9304      	str	r3, [sp, #16]
 8028da4:	4bb4      	ldr	r3, [pc, #720]	; (8029078 <__gethex+0x2e4>)
 8028da6:	681b      	ldr	r3, [r3, #0]
 8028da8:	9301      	str	r3, [sp, #4]
 8028daa:	4618      	mov	r0, r3
 8028dac:	468b      	mov	fp, r1
 8028dae:	4690      	mov	r8, r2
 8028db0:	f7d7 fa18 	bl	80001e4 <strlen>
 8028db4:	9b01      	ldr	r3, [sp, #4]
 8028db6:	f8db 2000 	ldr.w	r2, [fp]
 8028dba:	4403      	add	r3, r0
 8028dbc:	4682      	mov	sl, r0
 8028dbe:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8028dc2:	9305      	str	r3, [sp, #20]
 8028dc4:	1c93      	adds	r3, r2, #2
 8028dc6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8028dca:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8028dce:	32fe      	adds	r2, #254	; 0xfe
 8028dd0:	18d1      	adds	r1, r2, r3
 8028dd2:	461f      	mov	r7, r3
 8028dd4:	f813 0b01 	ldrb.w	r0, [r3], #1
 8028dd8:	9100      	str	r1, [sp, #0]
 8028dda:	2830      	cmp	r0, #48	; 0x30
 8028ddc:	d0f8      	beq.n	8028dd0 <__gethex+0x3c>
 8028dde:	f7ff ffc4 	bl	8028d6a <__hexdig_fun>
 8028de2:	4604      	mov	r4, r0
 8028de4:	2800      	cmp	r0, #0
 8028de6:	d13a      	bne.n	8028e5e <__gethex+0xca>
 8028de8:	9901      	ldr	r1, [sp, #4]
 8028dea:	4652      	mov	r2, sl
 8028dec:	4638      	mov	r0, r7
 8028dee:	f7fd ff06 	bl	8026bfe <strncmp>
 8028df2:	4605      	mov	r5, r0
 8028df4:	2800      	cmp	r0, #0
 8028df6:	d168      	bne.n	8028eca <__gethex+0x136>
 8028df8:	f817 000a 	ldrb.w	r0, [r7, sl]
 8028dfc:	eb07 060a 	add.w	r6, r7, sl
 8028e00:	f7ff ffb3 	bl	8028d6a <__hexdig_fun>
 8028e04:	2800      	cmp	r0, #0
 8028e06:	d062      	beq.n	8028ece <__gethex+0x13a>
 8028e08:	4633      	mov	r3, r6
 8028e0a:	7818      	ldrb	r0, [r3, #0]
 8028e0c:	2830      	cmp	r0, #48	; 0x30
 8028e0e:	461f      	mov	r7, r3
 8028e10:	f103 0301 	add.w	r3, r3, #1
 8028e14:	d0f9      	beq.n	8028e0a <__gethex+0x76>
 8028e16:	f7ff ffa8 	bl	8028d6a <__hexdig_fun>
 8028e1a:	2301      	movs	r3, #1
 8028e1c:	fab0 f480 	clz	r4, r0
 8028e20:	0964      	lsrs	r4, r4, #5
 8028e22:	4635      	mov	r5, r6
 8028e24:	9300      	str	r3, [sp, #0]
 8028e26:	463a      	mov	r2, r7
 8028e28:	4616      	mov	r6, r2
 8028e2a:	3201      	adds	r2, #1
 8028e2c:	7830      	ldrb	r0, [r6, #0]
 8028e2e:	f7ff ff9c 	bl	8028d6a <__hexdig_fun>
 8028e32:	2800      	cmp	r0, #0
 8028e34:	d1f8      	bne.n	8028e28 <__gethex+0x94>
 8028e36:	9901      	ldr	r1, [sp, #4]
 8028e38:	4652      	mov	r2, sl
 8028e3a:	4630      	mov	r0, r6
 8028e3c:	f7fd fedf 	bl	8026bfe <strncmp>
 8028e40:	b980      	cbnz	r0, 8028e64 <__gethex+0xd0>
 8028e42:	b94d      	cbnz	r5, 8028e58 <__gethex+0xc4>
 8028e44:	eb06 050a 	add.w	r5, r6, sl
 8028e48:	462a      	mov	r2, r5
 8028e4a:	4616      	mov	r6, r2
 8028e4c:	3201      	adds	r2, #1
 8028e4e:	7830      	ldrb	r0, [r6, #0]
 8028e50:	f7ff ff8b 	bl	8028d6a <__hexdig_fun>
 8028e54:	2800      	cmp	r0, #0
 8028e56:	d1f8      	bne.n	8028e4a <__gethex+0xb6>
 8028e58:	1bad      	subs	r5, r5, r6
 8028e5a:	00ad      	lsls	r5, r5, #2
 8028e5c:	e004      	b.n	8028e68 <__gethex+0xd4>
 8028e5e:	2400      	movs	r4, #0
 8028e60:	4625      	mov	r5, r4
 8028e62:	e7e0      	b.n	8028e26 <__gethex+0x92>
 8028e64:	2d00      	cmp	r5, #0
 8028e66:	d1f7      	bne.n	8028e58 <__gethex+0xc4>
 8028e68:	7833      	ldrb	r3, [r6, #0]
 8028e6a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8028e6e:	2b50      	cmp	r3, #80	; 0x50
 8028e70:	d13b      	bne.n	8028eea <__gethex+0x156>
 8028e72:	7873      	ldrb	r3, [r6, #1]
 8028e74:	2b2b      	cmp	r3, #43	; 0x2b
 8028e76:	d02c      	beq.n	8028ed2 <__gethex+0x13e>
 8028e78:	2b2d      	cmp	r3, #45	; 0x2d
 8028e7a:	d02e      	beq.n	8028eda <__gethex+0x146>
 8028e7c:	1c71      	adds	r1, r6, #1
 8028e7e:	f04f 0900 	mov.w	r9, #0
 8028e82:	7808      	ldrb	r0, [r1, #0]
 8028e84:	f7ff ff71 	bl	8028d6a <__hexdig_fun>
 8028e88:	1e43      	subs	r3, r0, #1
 8028e8a:	b2db      	uxtb	r3, r3
 8028e8c:	2b18      	cmp	r3, #24
 8028e8e:	d82c      	bhi.n	8028eea <__gethex+0x156>
 8028e90:	f1a0 0210 	sub.w	r2, r0, #16
 8028e94:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8028e98:	f7ff ff67 	bl	8028d6a <__hexdig_fun>
 8028e9c:	1e43      	subs	r3, r0, #1
 8028e9e:	b2db      	uxtb	r3, r3
 8028ea0:	2b18      	cmp	r3, #24
 8028ea2:	d91d      	bls.n	8028ee0 <__gethex+0x14c>
 8028ea4:	f1b9 0f00 	cmp.w	r9, #0
 8028ea8:	d000      	beq.n	8028eac <__gethex+0x118>
 8028eaa:	4252      	negs	r2, r2
 8028eac:	4415      	add	r5, r2
 8028eae:	f8cb 1000 	str.w	r1, [fp]
 8028eb2:	b1e4      	cbz	r4, 8028eee <__gethex+0x15a>
 8028eb4:	9b00      	ldr	r3, [sp, #0]
 8028eb6:	2b00      	cmp	r3, #0
 8028eb8:	bf14      	ite	ne
 8028eba:	2700      	movne	r7, #0
 8028ebc:	2706      	moveq	r7, #6
 8028ebe:	4638      	mov	r0, r7
 8028ec0:	b009      	add	sp, #36	; 0x24
 8028ec2:	ecbd 8b02 	vpop	{d8}
 8028ec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028eca:	463e      	mov	r6, r7
 8028ecc:	4625      	mov	r5, r4
 8028ece:	2401      	movs	r4, #1
 8028ed0:	e7ca      	b.n	8028e68 <__gethex+0xd4>
 8028ed2:	f04f 0900 	mov.w	r9, #0
 8028ed6:	1cb1      	adds	r1, r6, #2
 8028ed8:	e7d3      	b.n	8028e82 <__gethex+0xee>
 8028eda:	f04f 0901 	mov.w	r9, #1
 8028ede:	e7fa      	b.n	8028ed6 <__gethex+0x142>
 8028ee0:	230a      	movs	r3, #10
 8028ee2:	fb03 0202 	mla	r2, r3, r2, r0
 8028ee6:	3a10      	subs	r2, #16
 8028ee8:	e7d4      	b.n	8028e94 <__gethex+0x100>
 8028eea:	4631      	mov	r1, r6
 8028eec:	e7df      	b.n	8028eae <__gethex+0x11a>
 8028eee:	1bf3      	subs	r3, r6, r7
 8028ef0:	3b01      	subs	r3, #1
 8028ef2:	4621      	mov	r1, r4
 8028ef4:	2b07      	cmp	r3, #7
 8028ef6:	dc0b      	bgt.n	8028f10 <__gethex+0x17c>
 8028ef8:	ee18 0a10 	vmov	r0, s16
 8028efc:	f000 faf0 	bl	80294e0 <_Balloc>
 8028f00:	4604      	mov	r4, r0
 8028f02:	b940      	cbnz	r0, 8028f16 <__gethex+0x182>
 8028f04:	4b5d      	ldr	r3, [pc, #372]	; (802907c <__gethex+0x2e8>)
 8028f06:	4602      	mov	r2, r0
 8028f08:	21de      	movs	r1, #222	; 0xde
 8028f0a:	485d      	ldr	r0, [pc, #372]	; (8029080 <__gethex+0x2ec>)
 8028f0c:	f7fe fe76 	bl	8027bfc <__assert_func>
 8028f10:	3101      	adds	r1, #1
 8028f12:	105b      	asrs	r3, r3, #1
 8028f14:	e7ee      	b.n	8028ef4 <__gethex+0x160>
 8028f16:	f100 0914 	add.w	r9, r0, #20
 8028f1a:	f04f 0b00 	mov.w	fp, #0
 8028f1e:	f1ca 0301 	rsb	r3, sl, #1
 8028f22:	f8cd 9008 	str.w	r9, [sp, #8]
 8028f26:	f8cd b000 	str.w	fp, [sp]
 8028f2a:	9306      	str	r3, [sp, #24]
 8028f2c:	42b7      	cmp	r7, r6
 8028f2e:	d340      	bcc.n	8028fb2 <__gethex+0x21e>
 8028f30:	9802      	ldr	r0, [sp, #8]
 8028f32:	9b00      	ldr	r3, [sp, #0]
 8028f34:	f840 3b04 	str.w	r3, [r0], #4
 8028f38:	eba0 0009 	sub.w	r0, r0, r9
 8028f3c:	1080      	asrs	r0, r0, #2
 8028f3e:	0146      	lsls	r6, r0, #5
 8028f40:	6120      	str	r0, [r4, #16]
 8028f42:	4618      	mov	r0, r3
 8028f44:	f000 fbbe 	bl	80296c4 <__hi0bits>
 8028f48:	1a30      	subs	r0, r6, r0
 8028f4a:	f8d8 6000 	ldr.w	r6, [r8]
 8028f4e:	42b0      	cmp	r0, r6
 8028f50:	dd63      	ble.n	802901a <__gethex+0x286>
 8028f52:	1b87      	subs	r7, r0, r6
 8028f54:	4639      	mov	r1, r7
 8028f56:	4620      	mov	r0, r4
 8028f58:	f000 ff62 	bl	8029e20 <__any_on>
 8028f5c:	4682      	mov	sl, r0
 8028f5e:	b1a8      	cbz	r0, 8028f8c <__gethex+0x1f8>
 8028f60:	1e7b      	subs	r3, r7, #1
 8028f62:	1159      	asrs	r1, r3, #5
 8028f64:	f003 021f 	and.w	r2, r3, #31
 8028f68:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8028f6c:	f04f 0a01 	mov.w	sl, #1
 8028f70:	fa0a f202 	lsl.w	r2, sl, r2
 8028f74:	420a      	tst	r2, r1
 8028f76:	d009      	beq.n	8028f8c <__gethex+0x1f8>
 8028f78:	4553      	cmp	r3, sl
 8028f7a:	dd05      	ble.n	8028f88 <__gethex+0x1f4>
 8028f7c:	1eb9      	subs	r1, r7, #2
 8028f7e:	4620      	mov	r0, r4
 8028f80:	f000 ff4e 	bl	8029e20 <__any_on>
 8028f84:	2800      	cmp	r0, #0
 8028f86:	d145      	bne.n	8029014 <__gethex+0x280>
 8028f88:	f04f 0a02 	mov.w	sl, #2
 8028f8c:	4639      	mov	r1, r7
 8028f8e:	4620      	mov	r0, r4
 8028f90:	f7ff fe99 	bl	8028cc6 <rshift>
 8028f94:	443d      	add	r5, r7
 8028f96:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8028f9a:	42ab      	cmp	r3, r5
 8028f9c:	da4c      	bge.n	8029038 <__gethex+0x2a4>
 8028f9e:	ee18 0a10 	vmov	r0, s16
 8028fa2:	4621      	mov	r1, r4
 8028fa4:	f000 fadc 	bl	8029560 <_Bfree>
 8028fa8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8028faa:	2300      	movs	r3, #0
 8028fac:	6013      	str	r3, [r2, #0]
 8028fae:	27a3      	movs	r7, #163	; 0xa3
 8028fb0:	e785      	b.n	8028ebe <__gethex+0x12a>
 8028fb2:	1e73      	subs	r3, r6, #1
 8028fb4:	9a05      	ldr	r2, [sp, #20]
 8028fb6:	9303      	str	r3, [sp, #12]
 8028fb8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8028fbc:	4293      	cmp	r3, r2
 8028fbe:	d019      	beq.n	8028ff4 <__gethex+0x260>
 8028fc0:	f1bb 0f20 	cmp.w	fp, #32
 8028fc4:	d107      	bne.n	8028fd6 <__gethex+0x242>
 8028fc6:	9b02      	ldr	r3, [sp, #8]
 8028fc8:	9a00      	ldr	r2, [sp, #0]
 8028fca:	f843 2b04 	str.w	r2, [r3], #4
 8028fce:	9302      	str	r3, [sp, #8]
 8028fd0:	2300      	movs	r3, #0
 8028fd2:	9300      	str	r3, [sp, #0]
 8028fd4:	469b      	mov	fp, r3
 8028fd6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8028fda:	f7ff fec6 	bl	8028d6a <__hexdig_fun>
 8028fde:	9b00      	ldr	r3, [sp, #0]
 8028fe0:	f000 000f 	and.w	r0, r0, #15
 8028fe4:	fa00 f00b 	lsl.w	r0, r0, fp
 8028fe8:	4303      	orrs	r3, r0
 8028fea:	9300      	str	r3, [sp, #0]
 8028fec:	f10b 0b04 	add.w	fp, fp, #4
 8028ff0:	9b03      	ldr	r3, [sp, #12]
 8028ff2:	e00d      	b.n	8029010 <__gethex+0x27c>
 8028ff4:	9b03      	ldr	r3, [sp, #12]
 8028ff6:	9a06      	ldr	r2, [sp, #24]
 8028ff8:	4413      	add	r3, r2
 8028ffa:	42bb      	cmp	r3, r7
 8028ffc:	d3e0      	bcc.n	8028fc0 <__gethex+0x22c>
 8028ffe:	4618      	mov	r0, r3
 8029000:	9901      	ldr	r1, [sp, #4]
 8029002:	9307      	str	r3, [sp, #28]
 8029004:	4652      	mov	r2, sl
 8029006:	f7fd fdfa 	bl	8026bfe <strncmp>
 802900a:	9b07      	ldr	r3, [sp, #28]
 802900c:	2800      	cmp	r0, #0
 802900e:	d1d7      	bne.n	8028fc0 <__gethex+0x22c>
 8029010:	461e      	mov	r6, r3
 8029012:	e78b      	b.n	8028f2c <__gethex+0x198>
 8029014:	f04f 0a03 	mov.w	sl, #3
 8029018:	e7b8      	b.n	8028f8c <__gethex+0x1f8>
 802901a:	da0a      	bge.n	8029032 <__gethex+0x29e>
 802901c:	1a37      	subs	r7, r6, r0
 802901e:	4621      	mov	r1, r4
 8029020:	ee18 0a10 	vmov	r0, s16
 8029024:	463a      	mov	r2, r7
 8029026:	f000 fcb7 	bl	8029998 <__lshift>
 802902a:	1bed      	subs	r5, r5, r7
 802902c:	4604      	mov	r4, r0
 802902e:	f100 0914 	add.w	r9, r0, #20
 8029032:	f04f 0a00 	mov.w	sl, #0
 8029036:	e7ae      	b.n	8028f96 <__gethex+0x202>
 8029038:	f8d8 0004 	ldr.w	r0, [r8, #4]
 802903c:	42a8      	cmp	r0, r5
 802903e:	dd72      	ble.n	8029126 <__gethex+0x392>
 8029040:	1b45      	subs	r5, r0, r5
 8029042:	42ae      	cmp	r6, r5
 8029044:	dc36      	bgt.n	80290b4 <__gethex+0x320>
 8029046:	f8d8 300c 	ldr.w	r3, [r8, #12]
 802904a:	2b02      	cmp	r3, #2
 802904c:	d02a      	beq.n	80290a4 <__gethex+0x310>
 802904e:	2b03      	cmp	r3, #3
 8029050:	d02c      	beq.n	80290ac <__gethex+0x318>
 8029052:	2b01      	cmp	r3, #1
 8029054:	d11c      	bne.n	8029090 <__gethex+0x2fc>
 8029056:	42ae      	cmp	r6, r5
 8029058:	d11a      	bne.n	8029090 <__gethex+0x2fc>
 802905a:	2e01      	cmp	r6, #1
 802905c:	d112      	bne.n	8029084 <__gethex+0x2f0>
 802905e:	9a04      	ldr	r2, [sp, #16]
 8029060:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8029064:	6013      	str	r3, [r2, #0]
 8029066:	2301      	movs	r3, #1
 8029068:	6123      	str	r3, [r4, #16]
 802906a:	f8c9 3000 	str.w	r3, [r9]
 802906e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8029070:	2762      	movs	r7, #98	; 0x62
 8029072:	601c      	str	r4, [r3, #0]
 8029074:	e723      	b.n	8028ebe <__gethex+0x12a>
 8029076:	bf00      	nop
 8029078:	08031224 	.word	0x08031224
 802907c:	08031149 	.word	0x08031149
 8029080:	080311bc 	.word	0x080311bc
 8029084:	1e71      	subs	r1, r6, #1
 8029086:	4620      	mov	r0, r4
 8029088:	f000 feca 	bl	8029e20 <__any_on>
 802908c:	2800      	cmp	r0, #0
 802908e:	d1e6      	bne.n	802905e <__gethex+0x2ca>
 8029090:	ee18 0a10 	vmov	r0, s16
 8029094:	4621      	mov	r1, r4
 8029096:	f000 fa63 	bl	8029560 <_Bfree>
 802909a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802909c:	2300      	movs	r3, #0
 802909e:	6013      	str	r3, [r2, #0]
 80290a0:	2750      	movs	r7, #80	; 0x50
 80290a2:	e70c      	b.n	8028ebe <__gethex+0x12a>
 80290a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80290a6:	2b00      	cmp	r3, #0
 80290a8:	d1f2      	bne.n	8029090 <__gethex+0x2fc>
 80290aa:	e7d8      	b.n	802905e <__gethex+0x2ca>
 80290ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80290ae:	2b00      	cmp	r3, #0
 80290b0:	d1d5      	bne.n	802905e <__gethex+0x2ca>
 80290b2:	e7ed      	b.n	8029090 <__gethex+0x2fc>
 80290b4:	1e6f      	subs	r7, r5, #1
 80290b6:	f1ba 0f00 	cmp.w	sl, #0
 80290ba:	d131      	bne.n	8029120 <__gethex+0x38c>
 80290bc:	b127      	cbz	r7, 80290c8 <__gethex+0x334>
 80290be:	4639      	mov	r1, r7
 80290c0:	4620      	mov	r0, r4
 80290c2:	f000 fead 	bl	8029e20 <__any_on>
 80290c6:	4682      	mov	sl, r0
 80290c8:	117b      	asrs	r3, r7, #5
 80290ca:	2101      	movs	r1, #1
 80290cc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80290d0:	f007 071f 	and.w	r7, r7, #31
 80290d4:	fa01 f707 	lsl.w	r7, r1, r7
 80290d8:	421f      	tst	r7, r3
 80290da:	4629      	mov	r1, r5
 80290dc:	4620      	mov	r0, r4
 80290de:	bf18      	it	ne
 80290e0:	f04a 0a02 	orrne.w	sl, sl, #2
 80290e4:	1b76      	subs	r6, r6, r5
 80290e6:	f7ff fdee 	bl	8028cc6 <rshift>
 80290ea:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80290ee:	2702      	movs	r7, #2
 80290f0:	f1ba 0f00 	cmp.w	sl, #0
 80290f4:	d048      	beq.n	8029188 <__gethex+0x3f4>
 80290f6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80290fa:	2b02      	cmp	r3, #2
 80290fc:	d015      	beq.n	802912a <__gethex+0x396>
 80290fe:	2b03      	cmp	r3, #3
 8029100:	d017      	beq.n	8029132 <__gethex+0x39e>
 8029102:	2b01      	cmp	r3, #1
 8029104:	d109      	bne.n	802911a <__gethex+0x386>
 8029106:	f01a 0f02 	tst.w	sl, #2
 802910a:	d006      	beq.n	802911a <__gethex+0x386>
 802910c:	f8d9 0000 	ldr.w	r0, [r9]
 8029110:	ea4a 0a00 	orr.w	sl, sl, r0
 8029114:	f01a 0f01 	tst.w	sl, #1
 8029118:	d10e      	bne.n	8029138 <__gethex+0x3a4>
 802911a:	f047 0710 	orr.w	r7, r7, #16
 802911e:	e033      	b.n	8029188 <__gethex+0x3f4>
 8029120:	f04f 0a01 	mov.w	sl, #1
 8029124:	e7d0      	b.n	80290c8 <__gethex+0x334>
 8029126:	2701      	movs	r7, #1
 8029128:	e7e2      	b.n	80290f0 <__gethex+0x35c>
 802912a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802912c:	f1c3 0301 	rsb	r3, r3, #1
 8029130:	9315      	str	r3, [sp, #84]	; 0x54
 8029132:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8029134:	2b00      	cmp	r3, #0
 8029136:	d0f0      	beq.n	802911a <__gethex+0x386>
 8029138:	f8d4 b010 	ldr.w	fp, [r4, #16]
 802913c:	f104 0314 	add.w	r3, r4, #20
 8029140:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8029144:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8029148:	f04f 0c00 	mov.w	ip, #0
 802914c:	4618      	mov	r0, r3
 802914e:	f853 2b04 	ldr.w	r2, [r3], #4
 8029152:	f1b2 3fff 	cmp.w	r2, #4294967295
 8029156:	d01c      	beq.n	8029192 <__gethex+0x3fe>
 8029158:	3201      	adds	r2, #1
 802915a:	6002      	str	r2, [r0, #0]
 802915c:	2f02      	cmp	r7, #2
 802915e:	f104 0314 	add.w	r3, r4, #20
 8029162:	d13f      	bne.n	80291e4 <__gethex+0x450>
 8029164:	f8d8 2000 	ldr.w	r2, [r8]
 8029168:	3a01      	subs	r2, #1
 802916a:	42b2      	cmp	r2, r6
 802916c:	d10a      	bne.n	8029184 <__gethex+0x3f0>
 802916e:	1171      	asrs	r1, r6, #5
 8029170:	2201      	movs	r2, #1
 8029172:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8029176:	f006 061f 	and.w	r6, r6, #31
 802917a:	fa02 f606 	lsl.w	r6, r2, r6
 802917e:	421e      	tst	r6, r3
 8029180:	bf18      	it	ne
 8029182:	4617      	movne	r7, r2
 8029184:	f047 0720 	orr.w	r7, r7, #32
 8029188:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802918a:	601c      	str	r4, [r3, #0]
 802918c:	9b04      	ldr	r3, [sp, #16]
 802918e:	601d      	str	r5, [r3, #0]
 8029190:	e695      	b.n	8028ebe <__gethex+0x12a>
 8029192:	4299      	cmp	r1, r3
 8029194:	f843 cc04 	str.w	ip, [r3, #-4]
 8029198:	d8d8      	bhi.n	802914c <__gethex+0x3b8>
 802919a:	68a3      	ldr	r3, [r4, #8]
 802919c:	459b      	cmp	fp, r3
 802919e:	db19      	blt.n	80291d4 <__gethex+0x440>
 80291a0:	6861      	ldr	r1, [r4, #4]
 80291a2:	ee18 0a10 	vmov	r0, s16
 80291a6:	3101      	adds	r1, #1
 80291a8:	f000 f99a 	bl	80294e0 <_Balloc>
 80291ac:	4681      	mov	r9, r0
 80291ae:	b918      	cbnz	r0, 80291b8 <__gethex+0x424>
 80291b0:	4b1a      	ldr	r3, [pc, #104]	; (802921c <__gethex+0x488>)
 80291b2:	4602      	mov	r2, r0
 80291b4:	2184      	movs	r1, #132	; 0x84
 80291b6:	e6a8      	b.n	8028f0a <__gethex+0x176>
 80291b8:	6922      	ldr	r2, [r4, #16]
 80291ba:	3202      	adds	r2, #2
 80291bc:	f104 010c 	add.w	r1, r4, #12
 80291c0:	0092      	lsls	r2, r2, #2
 80291c2:	300c      	adds	r0, #12
 80291c4:	f7fc fcae 	bl	8025b24 <memcpy>
 80291c8:	4621      	mov	r1, r4
 80291ca:	ee18 0a10 	vmov	r0, s16
 80291ce:	f000 f9c7 	bl	8029560 <_Bfree>
 80291d2:	464c      	mov	r4, r9
 80291d4:	6923      	ldr	r3, [r4, #16]
 80291d6:	1c5a      	adds	r2, r3, #1
 80291d8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80291dc:	6122      	str	r2, [r4, #16]
 80291de:	2201      	movs	r2, #1
 80291e0:	615a      	str	r2, [r3, #20]
 80291e2:	e7bb      	b.n	802915c <__gethex+0x3c8>
 80291e4:	6922      	ldr	r2, [r4, #16]
 80291e6:	455a      	cmp	r2, fp
 80291e8:	dd0b      	ble.n	8029202 <__gethex+0x46e>
 80291ea:	2101      	movs	r1, #1
 80291ec:	4620      	mov	r0, r4
 80291ee:	f7ff fd6a 	bl	8028cc6 <rshift>
 80291f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80291f6:	3501      	adds	r5, #1
 80291f8:	42ab      	cmp	r3, r5
 80291fa:	f6ff aed0 	blt.w	8028f9e <__gethex+0x20a>
 80291fe:	2701      	movs	r7, #1
 8029200:	e7c0      	b.n	8029184 <__gethex+0x3f0>
 8029202:	f016 061f 	ands.w	r6, r6, #31
 8029206:	d0fa      	beq.n	80291fe <__gethex+0x46a>
 8029208:	4453      	add	r3, sl
 802920a:	f1c6 0620 	rsb	r6, r6, #32
 802920e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8029212:	f000 fa57 	bl	80296c4 <__hi0bits>
 8029216:	42b0      	cmp	r0, r6
 8029218:	dbe7      	blt.n	80291ea <__gethex+0x456>
 802921a:	e7f0      	b.n	80291fe <__gethex+0x46a>
 802921c:	08031149 	.word	0x08031149

08029220 <L_shift>:
 8029220:	f1c2 0208 	rsb	r2, r2, #8
 8029224:	0092      	lsls	r2, r2, #2
 8029226:	b570      	push	{r4, r5, r6, lr}
 8029228:	f1c2 0620 	rsb	r6, r2, #32
 802922c:	6843      	ldr	r3, [r0, #4]
 802922e:	6804      	ldr	r4, [r0, #0]
 8029230:	fa03 f506 	lsl.w	r5, r3, r6
 8029234:	432c      	orrs	r4, r5
 8029236:	40d3      	lsrs	r3, r2
 8029238:	6004      	str	r4, [r0, #0]
 802923a:	f840 3f04 	str.w	r3, [r0, #4]!
 802923e:	4288      	cmp	r0, r1
 8029240:	d3f4      	bcc.n	802922c <L_shift+0xc>
 8029242:	bd70      	pop	{r4, r5, r6, pc}

08029244 <__match>:
 8029244:	b530      	push	{r4, r5, lr}
 8029246:	6803      	ldr	r3, [r0, #0]
 8029248:	3301      	adds	r3, #1
 802924a:	f811 4b01 	ldrb.w	r4, [r1], #1
 802924e:	b914      	cbnz	r4, 8029256 <__match+0x12>
 8029250:	6003      	str	r3, [r0, #0]
 8029252:	2001      	movs	r0, #1
 8029254:	bd30      	pop	{r4, r5, pc}
 8029256:	f813 2b01 	ldrb.w	r2, [r3], #1
 802925a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 802925e:	2d19      	cmp	r5, #25
 8029260:	bf98      	it	ls
 8029262:	3220      	addls	r2, #32
 8029264:	42a2      	cmp	r2, r4
 8029266:	d0f0      	beq.n	802924a <__match+0x6>
 8029268:	2000      	movs	r0, #0
 802926a:	e7f3      	b.n	8029254 <__match+0x10>

0802926c <__hexnan>:
 802926c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029270:	680b      	ldr	r3, [r1, #0]
 8029272:	115e      	asrs	r6, r3, #5
 8029274:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8029278:	f013 031f 	ands.w	r3, r3, #31
 802927c:	b087      	sub	sp, #28
 802927e:	bf18      	it	ne
 8029280:	3604      	addne	r6, #4
 8029282:	2500      	movs	r5, #0
 8029284:	1f37      	subs	r7, r6, #4
 8029286:	4690      	mov	r8, r2
 8029288:	6802      	ldr	r2, [r0, #0]
 802928a:	9301      	str	r3, [sp, #4]
 802928c:	4682      	mov	sl, r0
 802928e:	f846 5c04 	str.w	r5, [r6, #-4]
 8029292:	46b9      	mov	r9, r7
 8029294:	463c      	mov	r4, r7
 8029296:	9502      	str	r5, [sp, #8]
 8029298:	46ab      	mov	fp, r5
 802929a:	7851      	ldrb	r1, [r2, #1]
 802929c:	1c53      	adds	r3, r2, #1
 802929e:	9303      	str	r3, [sp, #12]
 80292a0:	b341      	cbz	r1, 80292f4 <__hexnan+0x88>
 80292a2:	4608      	mov	r0, r1
 80292a4:	9205      	str	r2, [sp, #20]
 80292a6:	9104      	str	r1, [sp, #16]
 80292a8:	f7ff fd5f 	bl	8028d6a <__hexdig_fun>
 80292ac:	2800      	cmp	r0, #0
 80292ae:	d14f      	bne.n	8029350 <__hexnan+0xe4>
 80292b0:	9904      	ldr	r1, [sp, #16]
 80292b2:	9a05      	ldr	r2, [sp, #20]
 80292b4:	2920      	cmp	r1, #32
 80292b6:	d818      	bhi.n	80292ea <__hexnan+0x7e>
 80292b8:	9b02      	ldr	r3, [sp, #8]
 80292ba:	459b      	cmp	fp, r3
 80292bc:	dd13      	ble.n	80292e6 <__hexnan+0x7a>
 80292be:	454c      	cmp	r4, r9
 80292c0:	d206      	bcs.n	80292d0 <__hexnan+0x64>
 80292c2:	2d07      	cmp	r5, #7
 80292c4:	dc04      	bgt.n	80292d0 <__hexnan+0x64>
 80292c6:	462a      	mov	r2, r5
 80292c8:	4649      	mov	r1, r9
 80292ca:	4620      	mov	r0, r4
 80292cc:	f7ff ffa8 	bl	8029220 <L_shift>
 80292d0:	4544      	cmp	r4, r8
 80292d2:	d950      	bls.n	8029376 <__hexnan+0x10a>
 80292d4:	2300      	movs	r3, #0
 80292d6:	f1a4 0904 	sub.w	r9, r4, #4
 80292da:	f844 3c04 	str.w	r3, [r4, #-4]
 80292de:	f8cd b008 	str.w	fp, [sp, #8]
 80292e2:	464c      	mov	r4, r9
 80292e4:	461d      	mov	r5, r3
 80292e6:	9a03      	ldr	r2, [sp, #12]
 80292e8:	e7d7      	b.n	802929a <__hexnan+0x2e>
 80292ea:	2929      	cmp	r1, #41	; 0x29
 80292ec:	d156      	bne.n	802939c <__hexnan+0x130>
 80292ee:	3202      	adds	r2, #2
 80292f0:	f8ca 2000 	str.w	r2, [sl]
 80292f4:	f1bb 0f00 	cmp.w	fp, #0
 80292f8:	d050      	beq.n	802939c <__hexnan+0x130>
 80292fa:	454c      	cmp	r4, r9
 80292fc:	d206      	bcs.n	802930c <__hexnan+0xa0>
 80292fe:	2d07      	cmp	r5, #7
 8029300:	dc04      	bgt.n	802930c <__hexnan+0xa0>
 8029302:	462a      	mov	r2, r5
 8029304:	4649      	mov	r1, r9
 8029306:	4620      	mov	r0, r4
 8029308:	f7ff ff8a 	bl	8029220 <L_shift>
 802930c:	4544      	cmp	r4, r8
 802930e:	d934      	bls.n	802937a <__hexnan+0x10e>
 8029310:	f1a8 0204 	sub.w	r2, r8, #4
 8029314:	4623      	mov	r3, r4
 8029316:	f853 1b04 	ldr.w	r1, [r3], #4
 802931a:	f842 1f04 	str.w	r1, [r2, #4]!
 802931e:	429f      	cmp	r7, r3
 8029320:	d2f9      	bcs.n	8029316 <__hexnan+0xaa>
 8029322:	1b3b      	subs	r3, r7, r4
 8029324:	f023 0303 	bic.w	r3, r3, #3
 8029328:	3304      	adds	r3, #4
 802932a:	3401      	adds	r4, #1
 802932c:	3e03      	subs	r6, #3
 802932e:	42b4      	cmp	r4, r6
 8029330:	bf88      	it	hi
 8029332:	2304      	movhi	r3, #4
 8029334:	4443      	add	r3, r8
 8029336:	2200      	movs	r2, #0
 8029338:	f843 2b04 	str.w	r2, [r3], #4
 802933c:	429f      	cmp	r7, r3
 802933e:	d2fb      	bcs.n	8029338 <__hexnan+0xcc>
 8029340:	683b      	ldr	r3, [r7, #0]
 8029342:	b91b      	cbnz	r3, 802934c <__hexnan+0xe0>
 8029344:	4547      	cmp	r7, r8
 8029346:	d127      	bne.n	8029398 <__hexnan+0x12c>
 8029348:	2301      	movs	r3, #1
 802934a:	603b      	str	r3, [r7, #0]
 802934c:	2005      	movs	r0, #5
 802934e:	e026      	b.n	802939e <__hexnan+0x132>
 8029350:	3501      	adds	r5, #1
 8029352:	2d08      	cmp	r5, #8
 8029354:	f10b 0b01 	add.w	fp, fp, #1
 8029358:	dd06      	ble.n	8029368 <__hexnan+0xfc>
 802935a:	4544      	cmp	r4, r8
 802935c:	d9c3      	bls.n	80292e6 <__hexnan+0x7a>
 802935e:	2300      	movs	r3, #0
 8029360:	f844 3c04 	str.w	r3, [r4, #-4]
 8029364:	2501      	movs	r5, #1
 8029366:	3c04      	subs	r4, #4
 8029368:	6822      	ldr	r2, [r4, #0]
 802936a:	f000 000f 	and.w	r0, r0, #15
 802936e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8029372:	6022      	str	r2, [r4, #0]
 8029374:	e7b7      	b.n	80292e6 <__hexnan+0x7a>
 8029376:	2508      	movs	r5, #8
 8029378:	e7b5      	b.n	80292e6 <__hexnan+0x7a>
 802937a:	9b01      	ldr	r3, [sp, #4]
 802937c:	2b00      	cmp	r3, #0
 802937e:	d0df      	beq.n	8029340 <__hexnan+0xd4>
 8029380:	f04f 32ff 	mov.w	r2, #4294967295
 8029384:	f1c3 0320 	rsb	r3, r3, #32
 8029388:	fa22 f303 	lsr.w	r3, r2, r3
 802938c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8029390:	401a      	ands	r2, r3
 8029392:	f846 2c04 	str.w	r2, [r6, #-4]
 8029396:	e7d3      	b.n	8029340 <__hexnan+0xd4>
 8029398:	3f04      	subs	r7, #4
 802939a:	e7d1      	b.n	8029340 <__hexnan+0xd4>
 802939c:	2004      	movs	r0, #4
 802939e:	b007      	add	sp, #28
 80293a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080293a4 <_localeconv_r>:
 80293a4:	4800      	ldr	r0, [pc, #0]	; (80293a8 <_localeconv_r+0x4>)
 80293a6:	4770      	bx	lr
 80293a8:	100001c8 	.word	0x100001c8

080293ac <__retarget_lock_init_recursive>:
 80293ac:	4770      	bx	lr

080293ae <__retarget_lock_acquire_recursive>:
 80293ae:	4770      	bx	lr

080293b0 <__retarget_lock_release_recursive>:
 80293b0:	4770      	bx	lr
	...

080293b4 <_lseek_r>:
 80293b4:	b538      	push	{r3, r4, r5, lr}
 80293b6:	4d07      	ldr	r5, [pc, #28]	; (80293d4 <_lseek_r+0x20>)
 80293b8:	4604      	mov	r4, r0
 80293ba:	4608      	mov	r0, r1
 80293bc:	4611      	mov	r1, r2
 80293be:	2200      	movs	r2, #0
 80293c0:	602a      	str	r2, [r5, #0]
 80293c2:	461a      	mov	r2, r3
 80293c4:	f7e0 fe48 	bl	800a058 <_lseek>
 80293c8:	1c43      	adds	r3, r0, #1
 80293ca:	d102      	bne.n	80293d2 <_lseek_r+0x1e>
 80293cc:	682b      	ldr	r3, [r5, #0]
 80293ce:	b103      	cbz	r3, 80293d2 <_lseek_r+0x1e>
 80293d0:	6023      	str	r3, [r4, #0]
 80293d2:	bd38      	pop	{r3, r4, r5, pc}
 80293d4:	20013d7c 	.word	0x20013d7c

080293d8 <__swhatbuf_r>:
 80293d8:	b570      	push	{r4, r5, r6, lr}
 80293da:	460e      	mov	r6, r1
 80293dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80293e0:	2900      	cmp	r1, #0
 80293e2:	b096      	sub	sp, #88	; 0x58
 80293e4:	4614      	mov	r4, r2
 80293e6:	461d      	mov	r5, r3
 80293e8:	da08      	bge.n	80293fc <__swhatbuf_r+0x24>
 80293ea:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80293ee:	2200      	movs	r2, #0
 80293f0:	602a      	str	r2, [r5, #0]
 80293f2:	061a      	lsls	r2, r3, #24
 80293f4:	d410      	bmi.n	8029418 <__swhatbuf_r+0x40>
 80293f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80293fa:	e00e      	b.n	802941a <__swhatbuf_r+0x42>
 80293fc:	466a      	mov	r2, sp
 80293fe:	f001 fb09 	bl	802aa14 <_fstat_r>
 8029402:	2800      	cmp	r0, #0
 8029404:	dbf1      	blt.n	80293ea <__swhatbuf_r+0x12>
 8029406:	9a01      	ldr	r2, [sp, #4]
 8029408:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802940c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8029410:	425a      	negs	r2, r3
 8029412:	415a      	adcs	r2, r3
 8029414:	602a      	str	r2, [r5, #0]
 8029416:	e7ee      	b.n	80293f6 <__swhatbuf_r+0x1e>
 8029418:	2340      	movs	r3, #64	; 0x40
 802941a:	2000      	movs	r0, #0
 802941c:	6023      	str	r3, [r4, #0]
 802941e:	b016      	add	sp, #88	; 0x58
 8029420:	bd70      	pop	{r4, r5, r6, pc}
	...

08029424 <__smakebuf_r>:
 8029424:	898b      	ldrh	r3, [r1, #12]
 8029426:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8029428:	079d      	lsls	r5, r3, #30
 802942a:	4606      	mov	r6, r0
 802942c:	460c      	mov	r4, r1
 802942e:	d507      	bpl.n	8029440 <__smakebuf_r+0x1c>
 8029430:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8029434:	6023      	str	r3, [r4, #0]
 8029436:	6123      	str	r3, [r4, #16]
 8029438:	2301      	movs	r3, #1
 802943a:	6163      	str	r3, [r4, #20]
 802943c:	b002      	add	sp, #8
 802943e:	bd70      	pop	{r4, r5, r6, pc}
 8029440:	ab01      	add	r3, sp, #4
 8029442:	466a      	mov	r2, sp
 8029444:	f7ff ffc8 	bl	80293d8 <__swhatbuf_r>
 8029448:	9900      	ldr	r1, [sp, #0]
 802944a:	4605      	mov	r5, r0
 802944c:	4630      	mov	r0, r6
 802944e:	f7fc fc05 	bl	8025c5c <_malloc_r>
 8029452:	b948      	cbnz	r0, 8029468 <__smakebuf_r+0x44>
 8029454:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8029458:	059a      	lsls	r2, r3, #22
 802945a:	d4ef      	bmi.n	802943c <__smakebuf_r+0x18>
 802945c:	f023 0303 	bic.w	r3, r3, #3
 8029460:	f043 0302 	orr.w	r3, r3, #2
 8029464:	81a3      	strh	r3, [r4, #12]
 8029466:	e7e3      	b.n	8029430 <__smakebuf_r+0xc>
 8029468:	4b0d      	ldr	r3, [pc, #52]	; (80294a0 <__smakebuf_r+0x7c>)
 802946a:	62b3      	str	r3, [r6, #40]	; 0x28
 802946c:	89a3      	ldrh	r3, [r4, #12]
 802946e:	6020      	str	r0, [r4, #0]
 8029470:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8029474:	81a3      	strh	r3, [r4, #12]
 8029476:	9b00      	ldr	r3, [sp, #0]
 8029478:	6163      	str	r3, [r4, #20]
 802947a:	9b01      	ldr	r3, [sp, #4]
 802947c:	6120      	str	r0, [r4, #16]
 802947e:	b15b      	cbz	r3, 8029498 <__smakebuf_r+0x74>
 8029480:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8029484:	4630      	mov	r0, r6
 8029486:	f001 fad7 	bl	802aa38 <_isatty_r>
 802948a:	b128      	cbz	r0, 8029498 <__smakebuf_r+0x74>
 802948c:	89a3      	ldrh	r3, [r4, #12]
 802948e:	f023 0303 	bic.w	r3, r3, #3
 8029492:	f043 0301 	orr.w	r3, r3, #1
 8029496:	81a3      	strh	r3, [r4, #12]
 8029498:	89a0      	ldrh	r0, [r4, #12]
 802949a:	4305      	orrs	r5, r0
 802949c:	81a5      	strh	r5, [r4, #12]
 802949e:	e7cd      	b.n	802943c <__smakebuf_r+0x18>
 80294a0:	08028b25 	.word	0x08028b25

080294a4 <__ascii_mbtowc>:
 80294a4:	b082      	sub	sp, #8
 80294a6:	b901      	cbnz	r1, 80294aa <__ascii_mbtowc+0x6>
 80294a8:	a901      	add	r1, sp, #4
 80294aa:	b142      	cbz	r2, 80294be <__ascii_mbtowc+0x1a>
 80294ac:	b14b      	cbz	r3, 80294c2 <__ascii_mbtowc+0x1e>
 80294ae:	7813      	ldrb	r3, [r2, #0]
 80294b0:	600b      	str	r3, [r1, #0]
 80294b2:	7812      	ldrb	r2, [r2, #0]
 80294b4:	1e10      	subs	r0, r2, #0
 80294b6:	bf18      	it	ne
 80294b8:	2001      	movne	r0, #1
 80294ba:	b002      	add	sp, #8
 80294bc:	4770      	bx	lr
 80294be:	4610      	mov	r0, r2
 80294c0:	e7fb      	b.n	80294ba <__ascii_mbtowc+0x16>
 80294c2:	f06f 0001 	mvn.w	r0, #1
 80294c6:	e7f8      	b.n	80294ba <__ascii_mbtowc+0x16>

080294c8 <__malloc_lock>:
 80294c8:	4801      	ldr	r0, [pc, #4]	; (80294d0 <__malloc_lock+0x8>)
 80294ca:	f7ff bf70 	b.w	80293ae <__retarget_lock_acquire_recursive>
 80294ce:	bf00      	nop
 80294d0:	20013d80 	.word	0x20013d80

080294d4 <__malloc_unlock>:
 80294d4:	4801      	ldr	r0, [pc, #4]	; (80294dc <__malloc_unlock+0x8>)
 80294d6:	f7ff bf6b 	b.w	80293b0 <__retarget_lock_release_recursive>
 80294da:	bf00      	nop
 80294dc:	20013d80 	.word	0x20013d80

080294e0 <_Balloc>:
 80294e0:	b570      	push	{r4, r5, r6, lr}
 80294e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80294e4:	4604      	mov	r4, r0
 80294e6:	460d      	mov	r5, r1
 80294e8:	b976      	cbnz	r6, 8029508 <_Balloc+0x28>
 80294ea:	2010      	movs	r0, #16
 80294ec:	f7fc fafa 	bl	8025ae4 <malloc>
 80294f0:	4602      	mov	r2, r0
 80294f2:	6260      	str	r0, [r4, #36]	; 0x24
 80294f4:	b920      	cbnz	r0, 8029500 <_Balloc+0x20>
 80294f6:	4b18      	ldr	r3, [pc, #96]	; (8029558 <_Balloc+0x78>)
 80294f8:	4818      	ldr	r0, [pc, #96]	; (802955c <_Balloc+0x7c>)
 80294fa:	2166      	movs	r1, #102	; 0x66
 80294fc:	f7fe fb7e 	bl	8027bfc <__assert_func>
 8029500:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8029504:	6006      	str	r6, [r0, #0]
 8029506:	60c6      	str	r6, [r0, #12]
 8029508:	6a66      	ldr	r6, [r4, #36]	; 0x24
 802950a:	68f3      	ldr	r3, [r6, #12]
 802950c:	b183      	cbz	r3, 8029530 <_Balloc+0x50>
 802950e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8029510:	68db      	ldr	r3, [r3, #12]
 8029512:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8029516:	b9b8      	cbnz	r0, 8029548 <_Balloc+0x68>
 8029518:	2101      	movs	r1, #1
 802951a:	fa01 f605 	lsl.w	r6, r1, r5
 802951e:	1d72      	adds	r2, r6, #5
 8029520:	0092      	lsls	r2, r2, #2
 8029522:	4620      	mov	r0, r4
 8029524:	f000 fc9d 	bl	8029e62 <_calloc_r>
 8029528:	b160      	cbz	r0, 8029544 <_Balloc+0x64>
 802952a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 802952e:	e00e      	b.n	802954e <_Balloc+0x6e>
 8029530:	2221      	movs	r2, #33	; 0x21
 8029532:	2104      	movs	r1, #4
 8029534:	4620      	mov	r0, r4
 8029536:	f000 fc94 	bl	8029e62 <_calloc_r>
 802953a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802953c:	60f0      	str	r0, [r6, #12]
 802953e:	68db      	ldr	r3, [r3, #12]
 8029540:	2b00      	cmp	r3, #0
 8029542:	d1e4      	bne.n	802950e <_Balloc+0x2e>
 8029544:	2000      	movs	r0, #0
 8029546:	bd70      	pop	{r4, r5, r6, pc}
 8029548:	6802      	ldr	r2, [r0, #0]
 802954a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 802954e:	2300      	movs	r3, #0
 8029550:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8029554:	e7f7      	b.n	8029546 <_Balloc+0x66>
 8029556:	bf00      	nop
 8029558:	08030f83 	.word	0x08030f83
 802955c:	08031238 	.word	0x08031238

08029560 <_Bfree>:
 8029560:	b570      	push	{r4, r5, r6, lr}
 8029562:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8029564:	4605      	mov	r5, r0
 8029566:	460c      	mov	r4, r1
 8029568:	b976      	cbnz	r6, 8029588 <_Bfree+0x28>
 802956a:	2010      	movs	r0, #16
 802956c:	f7fc faba 	bl	8025ae4 <malloc>
 8029570:	4602      	mov	r2, r0
 8029572:	6268      	str	r0, [r5, #36]	; 0x24
 8029574:	b920      	cbnz	r0, 8029580 <_Bfree+0x20>
 8029576:	4b09      	ldr	r3, [pc, #36]	; (802959c <_Bfree+0x3c>)
 8029578:	4809      	ldr	r0, [pc, #36]	; (80295a0 <_Bfree+0x40>)
 802957a:	218a      	movs	r1, #138	; 0x8a
 802957c:	f7fe fb3e 	bl	8027bfc <__assert_func>
 8029580:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8029584:	6006      	str	r6, [r0, #0]
 8029586:	60c6      	str	r6, [r0, #12]
 8029588:	b13c      	cbz	r4, 802959a <_Bfree+0x3a>
 802958a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 802958c:	6862      	ldr	r2, [r4, #4]
 802958e:	68db      	ldr	r3, [r3, #12]
 8029590:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8029594:	6021      	str	r1, [r4, #0]
 8029596:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 802959a:	bd70      	pop	{r4, r5, r6, pc}
 802959c:	08030f83 	.word	0x08030f83
 80295a0:	08031238 	.word	0x08031238

080295a4 <__multadd>:
 80295a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80295a8:	690d      	ldr	r5, [r1, #16]
 80295aa:	4607      	mov	r7, r0
 80295ac:	460c      	mov	r4, r1
 80295ae:	461e      	mov	r6, r3
 80295b0:	f101 0c14 	add.w	ip, r1, #20
 80295b4:	2000      	movs	r0, #0
 80295b6:	f8dc 3000 	ldr.w	r3, [ip]
 80295ba:	b299      	uxth	r1, r3
 80295bc:	fb02 6101 	mla	r1, r2, r1, r6
 80295c0:	0c1e      	lsrs	r6, r3, #16
 80295c2:	0c0b      	lsrs	r3, r1, #16
 80295c4:	fb02 3306 	mla	r3, r2, r6, r3
 80295c8:	b289      	uxth	r1, r1
 80295ca:	3001      	adds	r0, #1
 80295cc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80295d0:	4285      	cmp	r5, r0
 80295d2:	f84c 1b04 	str.w	r1, [ip], #4
 80295d6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80295da:	dcec      	bgt.n	80295b6 <__multadd+0x12>
 80295dc:	b30e      	cbz	r6, 8029622 <__multadd+0x7e>
 80295de:	68a3      	ldr	r3, [r4, #8]
 80295e0:	42ab      	cmp	r3, r5
 80295e2:	dc19      	bgt.n	8029618 <__multadd+0x74>
 80295e4:	6861      	ldr	r1, [r4, #4]
 80295e6:	4638      	mov	r0, r7
 80295e8:	3101      	adds	r1, #1
 80295ea:	f7ff ff79 	bl	80294e0 <_Balloc>
 80295ee:	4680      	mov	r8, r0
 80295f0:	b928      	cbnz	r0, 80295fe <__multadd+0x5a>
 80295f2:	4602      	mov	r2, r0
 80295f4:	4b0c      	ldr	r3, [pc, #48]	; (8029628 <__multadd+0x84>)
 80295f6:	480d      	ldr	r0, [pc, #52]	; (802962c <__multadd+0x88>)
 80295f8:	21b5      	movs	r1, #181	; 0xb5
 80295fa:	f7fe faff 	bl	8027bfc <__assert_func>
 80295fe:	6922      	ldr	r2, [r4, #16]
 8029600:	3202      	adds	r2, #2
 8029602:	f104 010c 	add.w	r1, r4, #12
 8029606:	0092      	lsls	r2, r2, #2
 8029608:	300c      	adds	r0, #12
 802960a:	f7fc fa8b 	bl	8025b24 <memcpy>
 802960e:	4621      	mov	r1, r4
 8029610:	4638      	mov	r0, r7
 8029612:	f7ff ffa5 	bl	8029560 <_Bfree>
 8029616:	4644      	mov	r4, r8
 8029618:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 802961c:	3501      	adds	r5, #1
 802961e:	615e      	str	r6, [r3, #20]
 8029620:	6125      	str	r5, [r4, #16]
 8029622:	4620      	mov	r0, r4
 8029624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8029628:	08031149 	.word	0x08031149
 802962c:	08031238 	.word	0x08031238

08029630 <__s2b>:
 8029630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8029634:	460c      	mov	r4, r1
 8029636:	4615      	mov	r5, r2
 8029638:	461f      	mov	r7, r3
 802963a:	2209      	movs	r2, #9
 802963c:	3308      	adds	r3, #8
 802963e:	4606      	mov	r6, r0
 8029640:	fb93 f3f2 	sdiv	r3, r3, r2
 8029644:	2100      	movs	r1, #0
 8029646:	2201      	movs	r2, #1
 8029648:	429a      	cmp	r2, r3
 802964a:	db09      	blt.n	8029660 <__s2b+0x30>
 802964c:	4630      	mov	r0, r6
 802964e:	f7ff ff47 	bl	80294e0 <_Balloc>
 8029652:	b940      	cbnz	r0, 8029666 <__s2b+0x36>
 8029654:	4602      	mov	r2, r0
 8029656:	4b19      	ldr	r3, [pc, #100]	; (80296bc <__s2b+0x8c>)
 8029658:	4819      	ldr	r0, [pc, #100]	; (80296c0 <__s2b+0x90>)
 802965a:	21ce      	movs	r1, #206	; 0xce
 802965c:	f7fe face 	bl	8027bfc <__assert_func>
 8029660:	0052      	lsls	r2, r2, #1
 8029662:	3101      	adds	r1, #1
 8029664:	e7f0      	b.n	8029648 <__s2b+0x18>
 8029666:	9b08      	ldr	r3, [sp, #32]
 8029668:	6143      	str	r3, [r0, #20]
 802966a:	2d09      	cmp	r5, #9
 802966c:	f04f 0301 	mov.w	r3, #1
 8029670:	6103      	str	r3, [r0, #16]
 8029672:	dd16      	ble.n	80296a2 <__s2b+0x72>
 8029674:	f104 0909 	add.w	r9, r4, #9
 8029678:	46c8      	mov	r8, r9
 802967a:	442c      	add	r4, r5
 802967c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8029680:	4601      	mov	r1, r0
 8029682:	3b30      	subs	r3, #48	; 0x30
 8029684:	220a      	movs	r2, #10
 8029686:	4630      	mov	r0, r6
 8029688:	f7ff ff8c 	bl	80295a4 <__multadd>
 802968c:	45a0      	cmp	r8, r4
 802968e:	d1f5      	bne.n	802967c <__s2b+0x4c>
 8029690:	f1a5 0408 	sub.w	r4, r5, #8
 8029694:	444c      	add	r4, r9
 8029696:	1b2d      	subs	r5, r5, r4
 8029698:	1963      	adds	r3, r4, r5
 802969a:	42bb      	cmp	r3, r7
 802969c:	db04      	blt.n	80296a8 <__s2b+0x78>
 802969e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80296a2:	340a      	adds	r4, #10
 80296a4:	2509      	movs	r5, #9
 80296a6:	e7f6      	b.n	8029696 <__s2b+0x66>
 80296a8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80296ac:	4601      	mov	r1, r0
 80296ae:	3b30      	subs	r3, #48	; 0x30
 80296b0:	220a      	movs	r2, #10
 80296b2:	4630      	mov	r0, r6
 80296b4:	f7ff ff76 	bl	80295a4 <__multadd>
 80296b8:	e7ee      	b.n	8029698 <__s2b+0x68>
 80296ba:	bf00      	nop
 80296bc:	08031149 	.word	0x08031149
 80296c0:	08031238 	.word	0x08031238

080296c4 <__hi0bits>:
 80296c4:	0c03      	lsrs	r3, r0, #16
 80296c6:	041b      	lsls	r3, r3, #16
 80296c8:	b9d3      	cbnz	r3, 8029700 <__hi0bits+0x3c>
 80296ca:	0400      	lsls	r0, r0, #16
 80296cc:	2310      	movs	r3, #16
 80296ce:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80296d2:	bf04      	itt	eq
 80296d4:	0200      	lsleq	r0, r0, #8
 80296d6:	3308      	addeq	r3, #8
 80296d8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80296dc:	bf04      	itt	eq
 80296de:	0100      	lsleq	r0, r0, #4
 80296e0:	3304      	addeq	r3, #4
 80296e2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80296e6:	bf04      	itt	eq
 80296e8:	0080      	lsleq	r0, r0, #2
 80296ea:	3302      	addeq	r3, #2
 80296ec:	2800      	cmp	r0, #0
 80296ee:	db05      	blt.n	80296fc <__hi0bits+0x38>
 80296f0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80296f4:	f103 0301 	add.w	r3, r3, #1
 80296f8:	bf08      	it	eq
 80296fa:	2320      	moveq	r3, #32
 80296fc:	4618      	mov	r0, r3
 80296fe:	4770      	bx	lr
 8029700:	2300      	movs	r3, #0
 8029702:	e7e4      	b.n	80296ce <__hi0bits+0xa>

08029704 <__lo0bits>:
 8029704:	6803      	ldr	r3, [r0, #0]
 8029706:	f013 0207 	ands.w	r2, r3, #7
 802970a:	4601      	mov	r1, r0
 802970c:	d00b      	beq.n	8029726 <__lo0bits+0x22>
 802970e:	07da      	lsls	r2, r3, #31
 8029710:	d423      	bmi.n	802975a <__lo0bits+0x56>
 8029712:	0798      	lsls	r0, r3, #30
 8029714:	bf49      	itett	mi
 8029716:	085b      	lsrmi	r3, r3, #1
 8029718:	089b      	lsrpl	r3, r3, #2
 802971a:	2001      	movmi	r0, #1
 802971c:	600b      	strmi	r3, [r1, #0]
 802971e:	bf5c      	itt	pl
 8029720:	600b      	strpl	r3, [r1, #0]
 8029722:	2002      	movpl	r0, #2
 8029724:	4770      	bx	lr
 8029726:	b298      	uxth	r0, r3
 8029728:	b9a8      	cbnz	r0, 8029756 <__lo0bits+0x52>
 802972a:	0c1b      	lsrs	r3, r3, #16
 802972c:	2010      	movs	r0, #16
 802972e:	b2da      	uxtb	r2, r3
 8029730:	b90a      	cbnz	r2, 8029736 <__lo0bits+0x32>
 8029732:	3008      	adds	r0, #8
 8029734:	0a1b      	lsrs	r3, r3, #8
 8029736:	071a      	lsls	r2, r3, #28
 8029738:	bf04      	itt	eq
 802973a:	091b      	lsreq	r3, r3, #4
 802973c:	3004      	addeq	r0, #4
 802973e:	079a      	lsls	r2, r3, #30
 8029740:	bf04      	itt	eq
 8029742:	089b      	lsreq	r3, r3, #2
 8029744:	3002      	addeq	r0, #2
 8029746:	07da      	lsls	r2, r3, #31
 8029748:	d403      	bmi.n	8029752 <__lo0bits+0x4e>
 802974a:	085b      	lsrs	r3, r3, #1
 802974c:	f100 0001 	add.w	r0, r0, #1
 8029750:	d005      	beq.n	802975e <__lo0bits+0x5a>
 8029752:	600b      	str	r3, [r1, #0]
 8029754:	4770      	bx	lr
 8029756:	4610      	mov	r0, r2
 8029758:	e7e9      	b.n	802972e <__lo0bits+0x2a>
 802975a:	2000      	movs	r0, #0
 802975c:	4770      	bx	lr
 802975e:	2020      	movs	r0, #32
 8029760:	4770      	bx	lr
	...

08029764 <__i2b>:
 8029764:	b510      	push	{r4, lr}
 8029766:	460c      	mov	r4, r1
 8029768:	2101      	movs	r1, #1
 802976a:	f7ff feb9 	bl	80294e0 <_Balloc>
 802976e:	4602      	mov	r2, r0
 8029770:	b928      	cbnz	r0, 802977e <__i2b+0x1a>
 8029772:	4b05      	ldr	r3, [pc, #20]	; (8029788 <__i2b+0x24>)
 8029774:	4805      	ldr	r0, [pc, #20]	; (802978c <__i2b+0x28>)
 8029776:	f44f 71a0 	mov.w	r1, #320	; 0x140
 802977a:	f7fe fa3f 	bl	8027bfc <__assert_func>
 802977e:	2301      	movs	r3, #1
 8029780:	6144      	str	r4, [r0, #20]
 8029782:	6103      	str	r3, [r0, #16]
 8029784:	bd10      	pop	{r4, pc}
 8029786:	bf00      	nop
 8029788:	08031149 	.word	0x08031149
 802978c:	08031238 	.word	0x08031238

08029790 <__multiply>:
 8029790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029794:	4691      	mov	r9, r2
 8029796:	690a      	ldr	r2, [r1, #16]
 8029798:	f8d9 3010 	ldr.w	r3, [r9, #16]
 802979c:	429a      	cmp	r2, r3
 802979e:	bfb8      	it	lt
 80297a0:	460b      	movlt	r3, r1
 80297a2:	460c      	mov	r4, r1
 80297a4:	bfbc      	itt	lt
 80297a6:	464c      	movlt	r4, r9
 80297a8:	4699      	movlt	r9, r3
 80297aa:	6927      	ldr	r7, [r4, #16]
 80297ac:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80297b0:	68a3      	ldr	r3, [r4, #8]
 80297b2:	6861      	ldr	r1, [r4, #4]
 80297b4:	eb07 060a 	add.w	r6, r7, sl
 80297b8:	42b3      	cmp	r3, r6
 80297ba:	b085      	sub	sp, #20
 80297bc:	bfb8      	it	lt
 80297be:	3101      	addlt	r1, #1
 80297c0:	f7ff fe8e 	bl	80294e0 <_Balloc>
 80297c4:	b930      	cbnz	r0, 80297d4 <__multiply+0x44>
 80297c6:	4602      	mov	r2, r0
 80297c8:	4b44      	ldr	r3, [pc, #272]	; (80298dc <__multiply+0x14c>)
 80297ca:	4845      	ldr	r0, [pc, #276]	; (80298e0 <__multiply+0x150>)
 80297cc:	f240 115d 	movw	r1, #349	; 0x15d
 80297d0:	f7fe fa14 	bl	8027bfc <__assert_func>
 80297d4:	f100 0514 	add.w	r5, r0, #20
 80297d8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80297dc:	462b      	mov	r3, r5
 80297de:	2200      	movs	r2, #0
 80297e0:	4543      	cmp	r3, r8
 80297e2:	d321      	bcc.n	8029828 <__multiply+0x98>
 80297e4:	f104 0314 	add.w	r3, r4, #20
 80297e8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80297ec:	f109 0314 	add.w	r3, r9, #20
 80297f0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80297f4:	9202      	str	r2, [sp, #8]
 80297f6:	1b3a      	subs	r2, r7, r4
 80297f8:	3a15      	subs	r2, #21
 80297fa:	f022 0203 	bic.w	r2, r2, #3
 80297fe:	3204      	adds	r2, #4
 8029800:	f104 0115 	add.w	r1, r4, #21
 8029804:	428f      	cmp	r7, r1
 8029806:	bf38      	it	cc
 8029808:	2204      	movcc	r2, #4
 802980a:	9201      	str	r2, [sp, #4]
 802980c:	9a02      	ldr	r2, [sp, #8]
 802980e:	9303      	str	r3, [sp, #12]
 8029810:	429a      	cmp	r2, r3
 8029812:	d80c      	bhi.n	802982e <__multiply+0x9e>
 8029814:	2e00      	cmp	r6, #0
 8029816:	dd03      	ble.n	8029820 <__multiply+0x90>
 8029818:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 802981c:	2b00      	cmp	r3, #0
 802981e:	d05a      	beq.n	80298d6 <__multiply+0x146>
 8029820:	6106      	str	r6, [r0, #16]
 8029822:	b005      	add	sp, #20
 8029824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029828:	f843 2b04 	str.w	r2, [r3], #4
 802982c:	e7d8      	b.n	80297e0 <__multiply+0x50>
 802982e:	f8b3 a000 	ldrh.w	sl, [r3]
 8029832:	f1ba 0f00 	cmp.w	sl, #0
 8029836:	d024      	beq.n	8029882 <__multiply+0xf2>
 8029838:	f104 0e14 	add.w	lr, r4, #20
 802983c:	46a9      	mov	r9, r5
 802983e:	f04f 0c00 	mov.w	ip, #0
 8029842:	f85e 2b04 	ldr.w	r2, [lr], #4
 8029846:	f8d9 1000 	ldr.w	r1, [r9]
 802984a:	fa1f fb82 	uxth.w	fp, r2
 802984e:	b289      	uxth	r1, r1
 8029850:	fb0a 110b 	mla	r1, sl, fp, r1
 8029854:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8029858:	f8d9 2000 	ldr.w	r2, [r9]
 802985c:	4461      	add	r1, ip
 802985e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8029862:	fb0a c20b 	mla	r2, sl, fp, ip
 8029866:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 802986a:	b289      	uxth	r1, r1
 802986c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8029870:	4577      	cmp	r7, lr
 8029872:	f849 1b04 	str.w	r1, [r9], #4
 8029876:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 802987a:	d8e2      	bhi.n	8029842 <__multiply+0xb2>
 802987c:	9a01      	ldr	r2, [sp, #4]
 802987e:	f845 c002 	str.w	ip, [r5, r2]
 8029882:	9a03      	ldr	r2, [sp, #12]
 8029884:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8029888:	3304      	adds	r3, #4
 802988a:	f1b9 0f00 	cmp.w	r9, #0
 802988e:	d020      	beq.n	80298d2 <__multiply+0x142>
 8029890:	6829      	ldr	r1, [r5, #0]
 8029892:	f104 0c14 	add.w	ip, r4, #20
 8029896:	46ae      	mov	lr, r5
 8029898:	f04f 0a00 	mov.w	sl, #0
 802989c:	f8bc b000 	ldrh.w	fp, [ip]
 80298a0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80298a4:	fb09 220b 	mla	r2, r9, fp, r2
 80298a8:	4492      	add	sl, r2
 80298aa:	b289      	uxth	r1, r1
 80298ac:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80298b0:	f84e 1b04 	str.w	r1, [lr], #4
 80298b4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80298b8:	f8be 1000 	ldrh.w	r1, [lr]
 80298bc:	0c12      	lsrs	r2, r2, #16
 80298be:	fb09 1102 	mla	r1, r9, r2, r1
 80298c2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80298c6:	4567      	cmp	r7, ip
 80298c8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80298cc:	d8e6      	bhi.n	802989c <__multiply+0x10c>
 80298ce:	9a01      	ldr	r2, [sp, #4]
 80298d0:	50a9      	str	r1, [r5, r2]
 80298d2:	3504      	adds	r5, #4
 80298d4:	e79a      	b.n	802980c <__multiply+0x7c>
 80298d6:	3e01      	subs	r6, #1
 80298d8:	e79c      	b.n	8029814 <__multiply+0x84>
 80298da:	bf00      	nop
 80298dc:	08031149 	.word	0x08031149
 80298e0:	08031238 	.word	0x08031238

080298e4 <__pow5mult>:
 80298e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80298e8:	4615      	mov	r5, r2
 80298ea:	f012 0203 	ands.w	r2, r2, #3
 80298ee:	4606      	mov	r6, r0
 80298f0:	460f      	mov	r7, r1
 80298f2:	d007      	beq.n	8029904 <__pow5mult+0x20>
 80298f4:	4c25      	ldr	r4, [pc, #148]	; (802998c <__pow5mult+0xa8>)
 80298f6:	3a01      	subs	r2, #1
 80298f8:	2300      	movs	r3, #0
 80298fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80298fe:	f7ff fe51 	bl	80295a4 <__multadd>
 8029902:	4607      	mov	r7, r0
 8029904:	10ad      	asrs	r5, r5, #2
 8029906:	d03d      	beq.n	8029984 <__pow5mult+0xa0>
 8029908:	6a74      	ldr	r4, [r6, #36]	; 0x24
 802990a:	b97c      	cbnz	r4, 802992c <__pow5mult+0x48>
 802990c:	2010      	movs	r0, #16
 802990e:	f7fc f8e9 	bl	8025ae4 <malloc>
 8029912:	4602      	mov	r2, r0
 8029914:	6270      	str	r0, [r6, #36]	; 0x24
 8029916:	b928      	cbnz	r0, 8029924 <__pow5mult+0x40>
 8029918:	4b1d      	ldr	r3, [pc, #116]	; (8029990 <__pow5mult+0xac>)
 802991a:	481e      	ldr	r0, [pc, #120]	; (8029994 <__pow5mult+0xb0>)
 802991c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8029920:	f7fe f96c 	bl	8027bfc <__assert_func>
 8029924:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8029928:	6004      	str	r4, [r0, #0]
 802992a:	60c4      	str	r4, [r0, #12]
 802992c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8029930:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8029934:	b94c      	cbnz	r4, 802994a <__pow5mult+0x66>
 8029936:	f240 2171 	movw	r1, #625	; 0x271
 802993a:	4630      	mov	r0, r6
 802993c:	f7ff ff12 	bl	8029764 <__i2b>
 8029940:	2300      	movs	r3, #0
 8029942:	f8c8 0008 	str.w	r0, [r8, #8]
 8029946:	4604      	mov	r4, r0
 8029948:	6003      	str	r3, [r0, #0]
 802994a:	f04f 0900 	mov.w	r9, #0
 802994e:	07eb      	lsls	r3, r5, #31
 8029950:	d50a      	bpl.n	8029968 <__pow5mult+0x84>
 8029952:	4639      	mov	r1, r7
 8029954:	4622      	mov	r2, r4
 8029956:	4630      	mov	r0, r6
 8029958:	f7ff ff1a 	bl	8029790 <__multiply>
 802995c:	4639      	mov	r1, r7
 802995e:	4680      	mov	r8, r0
 8029960:	4630      	mov	r0, r6
 8029962:	f7ff fdfd 	bl	8029560 <_Bfree>
 8029966:	4647      	mov	r7, r8
 8029968:	106d      	asrs	r5, r5, #1
 802996a:	d00b      	beq.n	8029984 <__pow5mult+0xa0>
 802996c:	6820      	ldr	r0, [r4, #0]
 802996e:	b938      	cbnz	r0, 8029980 <__pow5mult+0x9c>
 8029970:	4622      	mov	r2, r4
 8029972:	4621      	mov	r1, r4
 8029974:	4630      	mov	r0, r6
 8029976:	f7ff ff0b 	bl	8029790 <__multiply>
 802997a:	6020      	str	r0, [r4, #0]
 802997c:	f8c0 9000 	str.w	r9, [r0]
 8029980:	4604      	mov	r4, r0
 8029982:	e7e4      	b.n	802994e <__pow5mult+0x6a>
 8029984:	4638      	mov	r0, r7
 8029986:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802998a:	bf00      	nop
 802998c:	08031388 	.word	0x08031388
 8029990:	08030f83 	.word	0x08030f83
 8029994:	08031238 	.word	0x08031238

08029998 <__lshift>:
 8029998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802999c:	460c      	mov	r4, r1
 802999e:	6849      	ldr	r1, [r1, #4]
 80299a0:	6923      	ldr	r3, [r4, #16]
 80299a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80299a6:	68a3      	ldr	r3, [r4, #8]
 80299a8:	4607      	mov	r7, r0
 80299aa:	4691      	mov	r9, r2
 80299ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80299b0:	f108 0601 	add.w	r6, r8, #1
 80299b4:	42b3      	cmp	r3, r6
 80299b6:	db0b      	blt.n	80299d0 <__lshift+0x38>
 80299b8:	4638      	mov	r0, r7
 80299ba:	f7ff fd91 	bl	80294e0 <_Balloc>
 80299be:	4605      	mov	r5, r0
 80299c0:	b948      	cbnz	r0, 80299d6 <__lshift+0x3e>
 80299c2:	4602      	mov	r2, r0
 80299c4:	4b2a      	ldr	r3, [pc, #168]	; (8029a70 <__lshift+0xd8>)
 80299c6:	482b      	ldr	r0, [pc, #172]	; (8029a74 <__lshift+0xdc>)
 80299c8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80299cc:	f7fe f916 	bl	8027bfc <__assert_func>
 80299d0:	3101      	adds	r1, #1
 80299d2:	005b      	lsls	r3, r3, #1
 80299d4:	e7ee      	b.n	80299b4 <__lshift+0x1c>
 80299d6:	2300      	movs	r3, #0
 80299d8:	f100 0114 	add.w	r1, r0, #20
 80299dc:	f100 0210 	add.w	r2, r0, #16
 80299e0:	4618      	mov	r0, r3
 80299e2:	4553      	cmp	r3, sl
 80299e4:	db37      	blt.n	8029a56 <__lshift+0xbe>
 80299e6:	6920      	ldr	r0, [r4, #16]
 80299e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80299ec:	f104 0314 	add.w	r3, r4, #20
 80299f0:	f019 091f 	ands.w	r9, r9, #31
 80299f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80299f8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80299fc:	d02f      	beq.n	8029a5e <__lshift+0xc6>
 80299fe:	f1c9 0e20 	rsb	lr, r9, #32
 8029a02:	468a      	mov	sl, r1
 8029a04:	f04f 0c00 	mov.w	ip, #0
 8029a08:	681a      	ldr	r2, [r3, #0]
 8029a0a:	fa02 f209 	lsl.w	r2, r2, r9
 8029a0e:	ea42 020c 	orr.w	r2, r2, ip
 8029a12:	f84a 2b04 	str.w	r2, [sl], #4
 8029a16:	f853 2b04 	ldr.w	r2, [r3], #4
 8029a1a:	4298      	cmp	r0, r3
 8029a1c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8029a20:	d8f2      	bhi.n	8029a08 <__lshift+0x70>
 8029a22:	1b03      	subs	r3, r0, r4
 8029a24:	3b15      	subs	r3, #21
 8029a26:	f023 0303 	bic.w	r3, r3, #3
 8029a2a:	3304      	adds	r3, #4
 8029a2c:	f104 0215 	add.w	r2, r4, #21
 8029a30:	4290      	cmp	r0, r2
 8029a32:	bf38      	it	cc
 8029a34:	2304      	movcc	r3, #4
 8029a36:	f841 c003 	str.w	ip, [r1, r3]
 8029a3a:	f1bc 0f00 	cmp.w	ip, #0
 8029a3e:	d001      	beq.n	8029a44 <__lshift+0xac>
 8029a40:	f108 0602 	add.w	r6, r8, #2
 8029a44:	3e01      	subs	r6, #1
 8029a46:	4638      	mov	r0, r7
 8029a48:	612e      	str	r6, [r5, #16]
 8029a4a:	4621      	mov	r1, r4
 8029a4c:	f7ff fd88 	bl	8029560 <_Bfree>
 8029a50:	4628      	mov	r0, r5
 8029a52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8029a56:	f842 0f04 	str.w	r0, [r2, #4]!
 8029a5a:	3301      	adds	r3, #1
 8029a5c:	e7c1      	b.n	80299e2 <__lshift+0x4a>
 8029a5e:	3904      	subs	r1, #4
 8029a60:	f853 2b04 	ldr.w	r2, [r3], #4
 8029a64:	f841 2f04 	str.w	r2, [r1, #4]!
 8029a68:	4298      	cmp	r0, r3
 8029a6a:	d8f9      	bhi.n	8029a60 <__lshift+0xc8>
 8029a6c:	e7ea      	b.n	8029a44 <__lshift+0xac>
 8029a6e:	bf00      	nop
 8029a70:	08031149 	.word	0x08031149
 8029a74:	08031238 	.word	0x08031238

08029a78 <__mcmp>:
 8029a78:	b530      	push	{r4, r5, lr}
 8029a7a:	6902      	ldr	r2, [r0, #16]
 8029a7c:	690c      	ldr	r4, [r1, #16]
 8029a7e:	1b12      	subs	r2, r2, r4
 8029a80:	d10e      	bne.n	8029aa0 <__mcmp+0x28>
 8029a82:	f100 0314 	add.w	r3, r0, #20
 8029a86:	3114      	adds	r1, #20
 8029a88:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8029a8c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8029a90:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8029a94:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8029a98:	42a5      	cmp	r5, r4
 8029a9a:	d003      	beq.n	8029aa4 <__mcmp+0x2c>
 8029a9c:	d305      	bcc.n	8029aaa <__mcmp+0x32>
 8029a9e:	2201      	movs	r2, #1
 8029aa0:	4610      	mov	r0, r2
 8029aa2:	bd30      	pop	{r4, r5, pc}
 8029aa4:	4283      	cmp	r3, r0
 8029aa6:	d3f3      	bcc.n	8029a90 <__mcmp+0x18>
 8029aa8:	e7fa      	b.n	8029aa0 <__mcmp+0x28>
 8029aaa:	f04f 32ff 	mov.w	r2, #4294967295
 8029aae:	e7f7      	b.n	8029aa0 <__mcmp+0x28>

08029ab0 <__mdiff>:
 8029ab0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029ab4:	460c      	mov	r4, r1
 8029ab6:	4606      	mov	r6, r0
 8029ab8:	4611      	mov	r1, r2
 8029aba:	4620      	mov	r0, r4
 8029abc:	4690      	mov	r8, r2
 8029abe:	f7ff ffdb 	bl	8029a78 <__mcmp>
 8029ac2:	1e05      	subs	r5, r0, #0
 8029ac4:	d110      	bne.n	8029ae8 <__mdiff+0x38>
 8029ac6:	4629      	mov	r1, r5
 8029ac8:	4630      	mov	r0, r6
 8029aca:	f7ff fd09 	bl	80294e0 <_Balloc>
 8029ace:	b930      	cbnz	r0, 8029ade <__mdiff+0x2e>
 8029ad0:	4b3a      	ldr	r3, [pc, #232]	; (8029bbc <__mdiff+0x10c>)
 8029ad2:	4602      	mov	r2, r0
 8029ad4:	f240 2132 	movw	r1, #562	; 0x232
 8029ad8:	4839      	ldr	r0, [pc, #228]	; (8029bc0 <__mdiff+0x110>)
 8029ada:	f7fe f88f 	bl	8027bfc <__assert_func>
 8029ade:	2301      	movs	r3, #1
 8029ae0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8029ae4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029ae8:	bfa4      	itt	ge
 8029aea:	4643      	movge	r3, r8
 8029aec:	46a0      	movge	r8, r4
 8029aee:	4630      	mov	r0, r6
 8029af0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8029af4:	bfa6      	itte	ge
 8029af6:	461c      	movge	r4, r3
 8029af8:	2500      	movge	r5, #0
 8029afa:	2501      	movlt	r5, #1
 8029afc:	f7ff fcf0 	bl	80294e0 <_Balloc>
 8029b00:	b920      	cbnz	r0, 8029b0c <__mdiff+0x5c>
 8029b02:	4b2e      	ldr	r3, [pc, #184]	; (8029bbc <__mdiff+0x10c>)
 8029b04:	4602      	mov	r2, r0
 8029b06:	f44f 7110 	mov.w	r1, #576	; 0x240
 8029b0a:	e7e5      	b.n	8029ad8 <__mdiff+0x28>
 8029b0c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8029b10:	6926      	ldr	r6, [r4, #16]
 8029b12:	60c5      	str	r5, [r0, #12]
 8029b14:	f104 0914 	add.w	r9, r4, #20
 8029b18:	f108 0514 	add.w	r5, r8, #20
 8029b1c:	f100 0e14 	add.w	lr, r0, #20
 8029b20:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8029b24:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8029b28:	f108 0210 	add.w	r2, r8, #16
 8029b2c:	46f2      	mov	sl, lr
 8029b2e:	2100      	movs	r1, #0
 8029b30:	f859 3b04 	ldr.w	r3, [r9], #4
 8029b34:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8029b38:	fa1f f883 	uxth.w	r8, r3
 8029b3c:	fa11 f18b 	uxtah	r1, r1, fp
 8029b40:	0c1b      	lsrs	r3, r3, #16
 8029b42:	eba1 0808 	sub.w	r8, r1, r8
 8029b46:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8029b4a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8029b4e:	fa1f f888 	uxth.w	r8, r8
 8029b52:	1419      	asrs	r1, r3, #16
 8029b54:	454e      	cmp	r6, r9
 8029b56:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8029b5a:	f84a 3b04 	str.w	r3, [sl], #4
 8029b5e:	d8e7      	bhi.n	8029b30 <__mdiff+0x80>
 8029b60:	1b33      	subs	r3, r6, r4
 8029b62:	3b15      	subs	r3, #21
 8029b64:	f023 0303 	bic.w	r3, r3, #3
 8029b68:	3304      	adds	r3, #4
 8029b6a:	3415      	adds	r4, #21
 8029b6c:	42a6      	cmp	r6, r4
 8029b6e:	bf38      	it	cc
 8029b70:	2304      	movcc	r3, #4
 8029b72:	441d      	add	r5, r3
 8029b74:	4473      	add	r3, lr
 8029b76:	469e      	mov	lr, r3
 8029b78:	462e      	mov	r6, r5
 8029b7a:	4566      	cmp	r6, ip
 8029b7c:	d30e      	bcc.n	8029b9c <__mdiff+0xec>
 8029b7e:	f10c 0203 	add.w	r2, ip, #3
 8029b82:	1b52      	subs	r2, r2, r5
 8029b84:	f022 0203 	bic.w	r2, r2, #3
 8029b88:	3d03      	subs	r5, #3
 8029b8a:	45ac      	cmp	ip, r5
 8029b8c:	bf38      	it	cc
 8029b8e:	2200      	movcc	r2, #0
 8029b90:	441a      	add	r2, r3
 8029b92:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8029b96:	b17b      	cbz	r3, 8029bb8 <__mdiff+0x108>
 8029b98:	6107      	str	r7, [r0, #16]
 8029b9a:	e7a3      	b.n	8029ae4 <__mdiff+0x34>
 8029b9c:	f856 8b04 	ldr.w	r8, [r6], #4
 8029ba0:	fa11 f288 	uxtah	r2, r1, r8
 8029ba4:	1414      	asrs	r4, r2, #16
 8029ba6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8029baa:	b292      	uxth	r2, r2
 8029bac:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8029bb0:	f84e 2b04 	str.w	r2, [lr], #4
 8029bb4:	1421      	asrs	r1, r4, #16
 8029bb6:	e7e0      	b.n	8029b7a <__mdiff+0xca>
 8029bb8:	3f01      	subs	r7, #1
 8029bba:	e7ea      	b.n	8029b92 <__mdiff+0xe2>
 8029bbc:	08031149 	.word	0x08031149
 8029bc0:	08031238 	.word	0x08031238

08029bc4 <__ulp>:
 8029bc4:	b082      	sub	sp, #8
 8029bc6:	ed8d 0b00 	vstr	d0, [sp]
 8029bca:	9b01      	ldr	r3, [sp, #4]
 8029bcc:	4912      	ldr	r1, [pc, #72]	; (8029c18 <__ulp+0x54>)
 8029bce:	4019      	ands	r1, r3
 8029bd0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8029bd4:	2900      	cmp	r1, #0
 8029bd6:	dd05      	ble.n	8029be4 <__ulp+0x20>
 8029bd8:	2200      	movs	r2, #0
 8029bda:	460b      	mov	r3, r1
 8029bdc:	ec43 2b10 	vmov	d0, r2, r3
 8029be0:	b002      	add	sp, #8
 8029be2:	4770      	bx	lr
 8029be4:	4249      	negs	r1, r1
 8029be6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8029bea:	ea4f 5021 	mov.w	r0, r1, asr #20
 8029bee:	f04f 0200 	mov.w	r2, #0
 8029bf2:	f04f 0300 	mov.w	r3, #0
 8029bf6:	da04      	bge.n	8029c02 <__ulp+0x3e>
 8029bf8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8029bfc:	fa41 f300 	asr.w	r3, r1, r0
 8029c00:	e7ec      	b.n	8029bdc <__ulp+0x18>
 8029c02:	f1a0 0114 	sub.w	r1, r0, #20
 8029c06:	291e      	cmp	r1, #30
 8029c08:	bfda      	itte	le
 8029c0a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8029c0e:	fa20 f101 	lsrle.w	r1, r0, r1
 8029c12:	2101      	movgt	r1, #1
 8029c14:	460a      	mov	r2, r1
 8029c16:	e7e1      	b.n	8029bdc <__ulp+0x18>
 8029c18:	7ff00000 	.word	0x7ff00000

08029c1c <__b2d>:
 8029c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029c1e:	6905      	ldr	r5, [r0, #16]
 8029c20:	f100 0714 	add.w	r7, r0, #20
 8029c24:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8029c28:	1f2e      	subs	r6, r5, #4
 8029c2a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8029c2e:	4620      	mov	r0, r4
 8029c30:	f7ff fd48 	bl	80296c4 <__hi0bits>
 8029c34:	f1c0 0320 	rsb	r3, r0, #32
 8029c38:	280a      	cmp	r0, #10
 8029c3a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8029cb8 <__b2d+0x9c>
 8029c3e:	600b      	str	r3, [r1, #0]
 8029c40:	dc14      	bgt.n	8029c6c <__b2d+0x50>
 8029c42:	f1c0 0e0b 	rsb	lr, r0, #11
 8029c46:	fa24 f10e 	lsr.w	r1, r4, lr
 8029c4a:	42b7      	cmp	r7, r6
 8029c4c:	ea41 030c 	orr.w	r3, r1, ip
 8029c50:	bf34      	ite	cc
 8029c52:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8029c56:	2100      	movcs	r1, #0
 8029c58:	3015      	adds	r0, #21
 8029c5a:	fa04 f000 	lsl.w	r0, r4, r0
 8029c5e:	fa21 f10e 	lsr.w	r1, r1, lr
 8029c62:	ea40 0201 	orr.w	r2, r0, r1
 8029c66:	ec43 2b10 	vmov	d0, r2, r3
 8029c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8029c6c:	42b7      	cmp	r7, r6
 8029c6e:	bf3a      	itte	cc
 8029c70:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8029c74:	f1a5 0608 	subcc.w	r6, r5, #8
 8029c78:	2100      	movcs	r1, #0
 8029c7a:	380b      	subs	r0, #11
 8029c7c:	d017      	beq.n	8029cae <__b2d+0x92>
 8029c7e:	f1c0 0c20 	rsb	ip, r0, #32
 8029c82:	fa04 f500 	lsl.w	r5, r4, r0
 8029c86:	42be      	cmp	r6, r7
 8029c88:	fa21 f40c 	lsr.w	r4, r1, ip
 8029c8c:	ea45 0504 	orr.w	r5, r5, r4
 8029c90:	bf8c      	ite	hi
 8029c92:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8029c96:	2400      	movls	r4, #0
 8029c98:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8029c9c:	fa01 f000 	lsl.w	r0, r1, r0
 8029ca0:	fa24 f40c 	lsr.w	r4, r4, ip
 8029ca4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8029ca8:	ea40 0204 	orr.w	r2, r0, r4
 8029cac:	e7db      	b.n	8029c66 <__b2d+0x4a>
 8029cae:	ea44 030c 	orr.w	r3, r4, ip
 8029cb2:	460a      	mov	r2, r1
 8029cb4:	e7d7      	b.n	8029c66 <__b2d+0x4a>
 8029cb6:	bf00      	nop
 8029cb8:	3ff00000 	.word	0x3ff00000

08029cbc <__d2b>:
 8029cbc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8029cc0:	4689      	mov	r9, r1
 8029cc2:	2101      	movs	r1, #1
 8029cc4:	ec57 6b10 	vmov	r6, r7, d0
 8029cc8:	4690      	mov	r8, r2
 8029cca:	f7ff fc09 	bl	80294e0 <_Balloc>
 8029cce:	4604      	mov	r4, r0
 8029cd0:	b930      	cbnz	r0, 8029ce0 <__d2b+0x24>
 8029cd2:	4602      	mov	r2, r0
 8029cd4:	4b25      	ldr	r3, [pc, #148]	; (8029d6c <__d2b+0xb0>)
 8029cd6:	4826      	ldr	r0, [pc, #152]	; (8029d70 <__d2b+0xb4>)
 8029cd8:	f240 310a 	movw	r1, #778	; 0x30a
 8029cdc:	f7fd ff8e 	bl	8027bfc <__assert_func>
 8029ce0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8029ce4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8029ce8:	bb35      	cbnz	r5, 8029d38 <__d2b+0x7c>
 8029cea:	2e00      	cmp	r6, #0
 8029cec:	9301      	str	r3, [sp, #4]
 8029cee:	d028      	beq.n	8029d42 <__d2b+0x86>
 8029cf0:	4668      	mov	r0, sp
 8029cf2:	9600      	str	r6, [sp, #0]
 8029cf4:	f7ff fd06 	bl	8029704 <__lo0bits>
 8029cf8:	9900      	ldr	r1, [sp, #0]
 8029cfa:	b300      	cbz	r0, 8029d3e <__d2b+0x82>
 8029cfc:	9a01      	ldr	r2, [sp, #4]
 8029cfe:	f1c0 0320 	rsb	r3, r0, #32
 8029d02:	fa02 f303 	lsl.w	r3, r2, r3
 8029d06:	430b      	orrs	r3, r1
 8029d08:	40c2      	lsrs	r2, r0
 8029d0a:	6163      	str	r3, [r4, #20]
 8029d0c:	9201      	str	r2, [sp, #4]
 8029d0e:	9b01      	ldr	r3, [sp, #4]
 8029d10:	61a3      	str	r3, [r4, #24]
 8029d12:	2b00      	cmp	r3, #0
 8029d14:	bf14      	ite	ne
 8029d16:	2202      	movne	r2, #2
 8029d18:	2201      	moveq	r2, #1
 8029d1a:	6122      	str	r2, [r4, #16]
 8029d1c:	b1d5      	cbz	r5, 8029d54 <__d2b+0x98>
 8029d1e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8029d22:	4405      	add	r5, r0
 8029d24:	f8c9 5000 	str.w	r5, [r9]
 8029d28:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8029d2c:	f8c8 0000 	str.w	r0, [r8]
 8029d30:	4620      	mov	r0, r4
 8029d32:	b003      	add	sp, #12
 8029d34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8029d38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8029d3c:	e7d5      	b.n	8029cea <__d2b+0x2e>
 8029d3e:	6161      	str	r1, [r4, #20]
 8029d40:	e7e5      	b.n	8029d0e <__d2b+0x52>
 8029d42:	a801      	add	r0, sp, #4
 8029d44:	f7ff fcde 	bl	8029704 <__lo0bits>
 8029d48:	9b01      	ldr	r3, [sp, #4]
 8029d4a:	6163      	str	r3, [r4, #20]
 8029d4c:	2201      	movs	r2, #1
 8029d4e:	6122      	str	r2, [r4, #16]
 8029d50:	3020      	adds	r0, #32
 8029d52:	e7e3      	b.n	8029d1c <__d2b+0x60>
 8029d54:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8029d58:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8029d5c:	f8c9 0000 	str.w	r0, [r9]
 8029d60:	6918      	ldr	r0, [r3, #16]
 8029d62:	f7ff fcaf 	bl	80296c4 <__hi0bits>
 8029d66:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8029d6a:	e7df      	b.n	8029d2c <__d2b+0x70>
 8029d6c:	08031149 	.word	0x08031149
 8029d70:	08031238 	.word	0x08031238

08029d74 <__ratio>:
 8029d74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029d78:	4688      	mov	r8, r1
 8029d7a:	4669      	mov	r1, sp
 8029d7c:	4681      	mov	r9, r0
 8029d7e:	f7ff ff4d 	bl	8029c1c <__b2d>
 8029d82:	a901      	add	r1, sp, #4
 8029d84:	4640      	mov	r0, r8
 8029d86:	ec55 4b10 	vmov	r4, r5, d0
 8029d8a:	f7ff ff47 	bl	8029c1c <__b2d>
 8029d8e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8029d92:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8029d96:	eba3 0c02 	sub.w	ip, r3, r2
 8029d9a:	e9dd 3200 	ldrd	r3, r2, [sp]
 8029d9e:	1a9b      	subs	r3, r3, r2
 8029da0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8029da4:	ec51 0b10 	vmov	r0, r1, d0
 8029da8:	2b00      	cmp	r3, #0
 8029daa:	bfd6      	itet	le
 8029dac:	460a      	movle	r2, r1
 8029dae:	462a      	movgt	r2, r5
 8029db0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8029db4:	468b      	mov	fp, r1
 8029db6:	462f      	mov	r7, r5
 8029db8:	bfd4      	ite	le
 8029dba:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8029dbe:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8029dc2:	4620      	mov	r0, r4
 8029dc4:	ee10 2a10 	vmov	r2, s0
 8029dc8:	465b      	mov	r3, fp
 8029dca:	4639      	mov	r1, r7
 8029dcc:	f7d6 fd4e 	bl	800086c <__aeabi_ddiv>
 8029dd0:	ec41 0b10 	vmov	d0, r0, r1
 8029dd4:	b003      	add	sp, #12
 8029dd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08029dda <__copybits>:
 8029dda:	3901      	subs	r1, #1
 8029ddc:	b570      	push	{r4, r5, r6, lr}
 8029dde:	1149      	asrs	r1, r1, #5
 8029de0:	6914      	ldr	r4, [r2, #16]
 8029de2:	3101      	adds	r1, #1
 8029de4:	f102 0314 	add.w	r3, r2, #20
 8029de8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8029dec:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8029df0:	1f05      	subs	r5, r0, #4
 8029df2:	42a3      	cmp	r3, r4
 8029df4:	d30c      	bcc.n	8029e10 <__copybits+0x36>
 8029df6:	1aa3      	subs	r3, r4, r2
 8029df8:	3b11      	subs	r3, #17
 8029dfa:	f023 0303 	bic.w	r3, r3, #3
 8029dfe:	3211      	adds	r2, #17
 8029e00:	42a2      	cmp	r2, r4
 8029e02:	bf88      	it	hi
 8029e04:	2300      	movhi	r3, #0
 8029e06:	4418      	add	r0, r3
 8029e08:	2300      	movs	r3, #0
 8029e0a:	4288      	cmp	r0, r1
 8029e0c:	d305      	bcc.n	8029e1a <__copybits+0x40>
 8029e0e:	bd70      	pop	{r4, r5, r6, pc}
 8029e10:	f853 6b04 	ldr.w	r6, [r3], #4
 8029e14:	f845 6f04 	str.w	r6, [r5, #4]!
 8029e18:	e7eb      	b.n	8029df2 <__copybits+0x18>
 8029e1a:	f840 3b04 	str.w	r3, [r0], #4
 8029e1e:	e7f4      	b.n	8029e0a <__copybits+0x30>

08029e20 <__any_on>:
 8029e20:	f100 0214 	add.w	r2, r0, #20
 8029e24:	6900      	ldr	r0, [r0, #16]
 8029e26:	114b      	asrs	r3, r1, #5
 8029e28:	4298      	cmp	r0, r3
 8029e2a:	b510      	push	{r4, lr}
 8029e2c:	db11      	blt.n	8029e52 <__any_on+0x32>
 8029e2e:	dd0a      	ble.n	8029e46 <__any_on+0x26>
 8029e30:	f011 011f 	ands.w	r1, r1, #31
 8029e34:	d007      	beq.n	8029e46 <__any_on+0x26>
 8029e36:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8029e3a:	fa24 f001 	lsr.w	r0, r4, r1
 8029e3e:	fa00 f101 	lsl.w	r1, r0, r1
 8029e42:	428c      	cmp	r4, r1
 8029e44:	d10b      	bne.n	8029e5e <__any_on+0x3e>
 8029e46:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8029e4a:	4293      	cmp	r3, r2
 8029e4c:	d803      	bhi.n	8029e56 <__any_on+0x36>
 8029e4e:	2000      	movs	r0, #0
 8029e50:	bd10      	pop	{r4, pc}
 8029e52:	4603      	mov	r3, r0
 8029e54:	e7f7      	b.n	8029e46 <__any_on+0x26>
 8029e56:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8029e5a:	2900      	cmp	r1, #0
 8029e5c:	d0f5      	beq.n	8029e4a <__any_on+0x2a>
 8029e5e:	2001      	movs	r0, #1
 8029e60:	e7f6      	b.n	8029e50 <__any_on+0x30>

08029e62 <_calloc_r>:
 8029e62:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8029e64:	fba1 2402 	umull	r2, r4, r1, r2
 8029e68:	b94c      	cbnz	r4, 8029e7e <_calloc_r+0x1c>
 8029e6a:	4611      	mov	r1, r2
 8029e6c:	9201      	str	r2, [sp, #4]
 8029e6e:	f7fb fef5 	bl	8025c5c <_malloc_r>
 8029e72:	9a01      	ldr	r2, [sp, #4]
 8029e74:	4605      	mov	r5, r0
 8029e76:	b930      	cbnz	r0, 8029e86 <_calloc_r+0x24>
 8029e78:	4628      	mov	r0, r5
 8029e7a:	b003      	add	sp, #12
 8029e7c:	bd30      	pop	{r4, r5, pc}
 8029e7e:	220c      	movs	r2, #12
 8029e80:	6002      	str	r2, [r0, #0]
 8029e82:	2500      	movs	r5, #0
 8029e84:	e7f8      	b.n	8029e78 <_calloc_r+0x16>
 8029e86:	4621      	mov	r1, r4
 8029e88:	f7fb fe74 	bl	8025b74 <memset>
 8029e8c:	e7f4      	b.n	8029e78 <_calloc_r+0x16>

08029e8e <_realloc_r>:
 8029e8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8029e92:	4680      	mov	r8, r0
 8029e94:	4614      	mov	r4, r2
 8029e96:	460e      	mov	r6, r1
 8029e98:	b921      	cbnz	r1, 8029ea4 <_realloc_r+0x16>
 8029e9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8029e9e:	4611      	mov	r1, r2
 8029ea0:	f7fb bedc 	b.w	8025c5c <_malloc_r>
 8029ea4:	b92a      	cbnz	r2, 8029eb2 <_realloc_r+0x24>
 8029ea6:	f7fb fe6d 	bl	8025b84 <_free_r>
 8029eaa:	4625      	mov	r5, r4
 8029eac:	4628      	mov	r0, r5
 8029eae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8029eb2:	f000 fdd1 	bl	802aa58 <_malloc_usable_size_r>
 8029eb6:	4284      	cmp	r4, r0
 8029eb8:	4607      	mov	r7, r0
 8029eba:	d802      	bhi.n	8029ec2 <_realloc_r+0x34>
 8029ebc:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8029ec0:	d812      	bhi.n	8029ee8 <_realloc_r+0x5a>
 8029ec2:	4621      	mov	r1, r4
 8029ec4:	4640      	mov	r0, r8
 8029ec6:	f7fb fec9 	bl	8025c5c <_malloc_r>
 8029eca:	4605      	mov	r5, r0
 8029ecc:	2800      	cmp	r0, #0
 8029ece:	d0ed      	beq.n	8029eac <_realloc_r+0x1e>
 8029ed0:	42bc      	cmp	r4, r7
 8029ed2:	4622      	mov	r2, r4
 8029ed4:	4631      	mov	r1, r6
 8029ed6:	bf28      	it	cs
 8029ed8:	463a      	movcs	r2, r7
 8029eda:	f7fb fe23 	bl	8025b24 <memcpy>
 8029ede:	4631      	mov	r1, r6
 8029ee0:	4640      	mov	r0, r8
 8029ee2:	f7fb fe4f 	bl	8025b84 <_free_r>
 8029ee6:	e7e1      	b.n	8029eac <_realloc_r+0x1e>
 8029ee8:	4635      	mov	r5, r6
 8029eea:	e7df      	b.n	8029eac <_realloc_r+0x1e>

08029eec <__ssputs_r>:
 8029eec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8029ef0:	688e      	ldr	r6, [r1, #8]
 8029ef2:	429e      	cmp	r6, r3
 8029ef4:	4682      	mov	sl, r0
 8029ef6:	460c      	mov	r4, r1
 8029ef8:	4690      	mov	r8, r2
 8029efa:	461f      	mov	r7, r3
 8029efc:	d838      	bhi.n	8029f70 <__ssputs_r+0x84>
 8029efe:	898a      	ldrh	r2, [r1, #12]
 8029f00:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8029f04:	d032      	beq.n	8029f6c <__ssputs_r+0x80>
 8029f06:	6825      	ldr	r5, [r4, #0]
 8029f08:	6909      	ldr	r1, [r1, #16]
 8029f0a:	eba5 0901 	sub.w	r9, r5, r1
 8029f0e:	6965      	ldr	r5, [r4, #20]
 8029f10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8029f14:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8029f18:	3301      	adds	r3, #1
 8029f1a:	444b      	add	r3, r9
 8029f1c:	106d      	asrs	r5, r5, #1
 8029f1e:	429d      	cmp	r5, r3
 8029f20:	bf38      	it	cc
 8029f22:	461d      	movcc	r5, r3
 8029f24:	0553      	lsls	r3, r2, #21
 8029f26:	d531      	bpl.n	8029f8c <__ssputs_r+0xa0>
 8029f28:	4629      	mov	r1, r5
 8029f2a:	f7fb fe97 	bl	8025c5c <_malloc_r>
 8029f2e:	4606      	mov	r6, r0
 8029f30:	b950      	cbnz	r0, 8029f48 <__ssputs_r+0x5c>
 8029f32:	230c      	movs	r3, #12
 8029f34:	f8ca 3000 	str.w	r3, [sl]
 8029f38:	89a3      	ldrh	r3, [r4, #12]
 8029f3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8029f3e:	81a3      	strh	r3, [r4, #12]
 8029f40:	f04f 30ff 	mov.w	r0, #4294967295
 8029f44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8029f48:	6921      	ldr	r1, [r4, #16]
 8029f4a:	464a      	mov	r2, r9
 8029f4c:	f7fb fdea 	bl	8025b24 <memcpy>
 8029f50:	89a3      	ldrh	r3, [r4, #12]
 8029f52:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8029f56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8029f5a:	81a3      	strh	r3, [r4, #12]
 8029f5c:	6126      	str	r6, [r4, #16]
 8029f5e:	6165      	str	r5, [r4, #20]
 8029f60:	444e      	add	r6, r9
 8029f62:	eba5 0509 	sub.w	r5, r5, r9
 8029f66:	6026      	str	r6, [r4, #0]
 8029f68:	60a5      	str	r5, [r4, #8]
 8029f6a:	463e      	mov	r6, r7
 8029f6c:	42be      	cmp	r6, r7
 8029f6e:	d900      	bls.n	8029f72 <__ssputs_r+0x86>
 8029f70:	463e      	mov	r6, r7
 8029f72:	6820      	ldr	r0, [r4, #0]
 8029f74:	4632      	mov	r2, r6
 8029f76:	4641      	mov	r1, r8
 8029f78:	f7fb fde2 	bl	8025b40 <memmove>
 8029f7c:	68a3      	ldr	r3, [r4, #8]
 8029f7e:	1b9b      	subs	r3, r3, r6
 8029f80:	60a3      	str	r3, [r4, #8]
 8029f82:	6823      	ldr	r3, [r4, #0]
 8029f84:	4433      	add	r3, r6
 8029f86:	6023      	str	r3, [r4, #0]
 8029f88:	2000      	movs	r0, #0
 8029f8a:	e7db      	b.n	8029f44 <__ssputs_r+0x58>
 8029f8c:	462a      	mov	r2, r5
 8029f8e:	f7ff ff7e 	bl	8029e8e <_realloc_r>
 8029f92:	4606      	mov	r6, r0
 8029f94:	2800      	cmp	r0, #0
 8029f96:	d1e1      	bne.n	8029f5c <__ssputs_r+0x70>
 8029f98:	6921      	ldr	r1, [r4, #16]
 8029f9a:	4650      	mov	r0, sl
 8029f9c:	f7fb fdf2 	bl	8025b84 <_free_r>
 8029fa0:	e7c7      	b.n	8029f32 <__ssputs_r+0x46>
	...

08029fa4 <_svfiprintf_r>:
 8029fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029fa8:	4698      	mov	r8, r3
 8029faa:	898b      	ldrh	r3, [r1, #12]
 8029fac:	061b      	lsls	r3, r3, #24
 8029fae:	b09d      	sub	sp, #116	; 0x74
 8029fb0:	4607      	mov	r7, r0
 8029fb2:	460d      	mov	r5, r1
 8029fb4:	4614      	mov	r4, r2
 8029fb6:	d50e      	bpl.n	8029fd6 <_svfiprintf_r+0x32>
 8029fb8:	690b      	ldr	r3, [r1, #16]
 8029fba:	b963      	cbnz	r3, 8029fd6 <_svfiprintf_r+0x32>
 8029fbc:	2140      	movs	r1, #64	; 0x40
 8029fbe:	f7fb fe4d 	bl	8025c5c <_malloc_r>
 8029fc2:	6028      	str	r0, [r5, #0]
 8029fc4:	6128      	str	r0, [r5, #16]
 8029fc6:	b920      	cbnz	r0, 8029fd2 <_svfiprintf_r+0x2e>
 8029fc8:	230c      	movs	r3, #12
 8029fca:	603b      	str	r3, [r7, #0]
 8029fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8029fd0:	e0d1      	b.n	802a176 <_svfiprintf_r+0x1d2>
 8029fd2:	2340      	movs	r3, #64	; 0x40
 8029fd4:	616b      	str	r3, [r5, #20]
 8029fd6:	2300      	movs	r3, #0
 8029fd8:	9309      	str	r3, [sp, #36]	; 0x24
 8029fda:	2320      	movs	r3, #32
 8029fdc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8029fe0:	f8cd 800c 	str.w	r8, [sp, #12]
 8029fe4:	2330      	movs	r3, #48	; 0x30
 8029fe6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 802a190 <_svfiprintf_r+0x1ec>
 8029fea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8029fee:	f04f 0901 	mov.w	r9, #1
 8029ff2:	4623      	mov	r3, r4
 8029ff4:	469a      	mov	sl, r3
 8029ff6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8029ffa:	b10a      	cbz	r2, 802a000 <_svfiprintf_r+0x5c>
 8029ffc:	2a25      	cmp	r2, #37	; 0x25
 8029ffe:	d1f9      	bne.n	8029ff4 <_svfiprintf_r+0x50>
 802a000:	ebba 0b04 	subs.w	fp, sl, r4
 802a004:	d00b      	beq.n	802a01e <_svfiprintf_r+0x7a>
 802a006:	465b      	mov	r3, fp
 802a008:	4622      	mov	r2, r4
 802a00a:	4629      	mov	r1, r5
 802a00c:	4638      	mov	r0, r7
 802a00e:	f7ff ff6d 	bl	8029eec <__ssputs_r>
 802a012:	3001      	adds	r0, #1
 802a014:	f000 80aa 	beq.w	802a16c <_svfiprintf_r+0x1c8>
 802a018:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802a01a:	445a      	add	r2, fp
 802a01c:	9209      	str	r2, [sp, #36]	; 0x24
 802a01e:	f89a 3000 	ldrb.w	r3, [sl]
 802a022:	2b00      	cmp	r3, #0
 802a024:	f000 80a2 	beq.w	802a16c <_svfiprintf_r+0x1c8>
 802a028:	2300      	movs	r3, #0
 802a02a:	f04f 32ff 	mov.w	r2, #4294967295
 802a02e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802a032:	f10a 0a01 	add.w	sl, sl, #1
 802a036:	9304      	str	r3, [sp, #16]
 802a038:	9307      	str	r3, [sp, #28]
 802a03a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802a03e:	931a      	str	r3, [sp, #104]	; 0x68
 802a040:	4654      	mov	r4, sl
 802a042:	2205      	movs	r2, #5
 802a044:	f814 1b01 	ldrb.w	r1, [r4], #1
 802a048:	4851      	ldr	r0, [pc, #324]	; (802a190 <_svfiprintf_r+0x1ec>)
 802a04a:	f7d6 f8d9 	bl	8000200 <memchr>
 802a04e:	9a04      	ldr	r2, [sp, #16]
 802a050:	b9d8      	cbnz	r0, 802a08a <_svfiprintf_r+0xe6>
 802a052:	06d0      	lsls	r0, r2, #27
 802a054:	bf44      	itt	mi
 802a056:	2320      	movmi	r3, #32
 802a058:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802a05c:	0711      	lsls	r1, r2, #28
 802a05e:	bf44      	itt	mi
 802a060:	232b      	movmi	r3, #43	; 0x2b
 802a062:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802a066:	f89a 3000 	ldrb.w	r3, [sl]
 802a06a:	2b2a      	cmp	r3, #42	; 0x2a
 802a06c:	d015      	beq.n	802a09a <_svfiprintf_r+0xf6>
 802a06e:	9a07      	ldr	r2, [sp, #28]
 802a070:	4654      	mov	r4, sl
 802a072:	2000      	movs	r0, #0
 802a074:	f04f 0c0a 	mov.w	ip, #10
 802a078:	4621      	mov	r1, r4
 802a07a:	f811 3b01 	ldrb.w	r3, [r1], #1
 802a07e:	3b30      	subs	r3, #48	; 0x30
 802a080:	2b09      	cmp	r3, #9
 802a082:	d94e      	bls.n	802a122 <_svfiprintf_r+0x17e>
 802a084:	b1b0      	cbz	r0, 802a0b4 <_svfiprintf_r+0x110>
 802a086:	9207      	str	r2, [sp, #28]
 802a088:	e014      	b.n	802a0b4 <_svfiprintf_r+0x110>
 802a08a:	eba0 0308 	sub.w	r3, r0, r8
 802a08e:	fa09 f303 	lsl.w	r3, r9, r3
 802a092:	4313      	orrs	r3, r2
 802a094:	9304      	str	r3, [sp, #16]
 802a096:	46a2      	mov	sl, r4
 802a098:	e7d2      	b.n	802a040 <_svfiprintf_r+0x9c>
 802a09a:	9b03      	ldr	r3, [sp, #12]
 802a09c:	1d19      	adds	r1, r3, #4
 802a09e:	681b      	ldr	r3, [r3, #0]
 802a0a0:	9103      	str	r1, [sp, #12]
 802a0a2:	2b00      	cmp	r3, #0
 802a0a4:	bfbb      	ittet	lt
 802a0a6:	425b      	neglt	r3, r3
 802a0a8:	f042 0202 	orrlt.w	r2, r2, #2
 802a0ac:	9307      	strge	r3, [sp, #28]
 802a0ae:	9307      	strlt	r3, [sp, #28]
 802a0b0:	bfb8      	it	lt
 802a0b2:	9204      	strlt	r2, [sp, #16]
 802a0b4:	7823      	ldrb	r3, [r4, #0]
 802a0b6:	2b2e      	cmp	r3, #46	; 0x2e
 802a0b8:	d10c      	bne.n	802a0d4 <_svfiprintf_r+0x130>
 802a0ba:	7863      	ldrb	r3, [r4, #1]
 802a0bc:	2b2a      	cmp	r3, #42	; 0x2a
 802a0be:	d135      	bne.n	802a12c <_svfiprintf_r+0x188>
 802a0c0:	9b03      	ldr	r3, [sp, #12]
 802a0c2:	1d1a      	adds	r2, r3, #4
 802a0c4:	681b      	ldr	r3, [r3, #0]
 802a0c6:	9203      	str	r2, [sp, #12]
 802a0c8:	2b00      	cmp	r3, #0
 802a0ca:	bfb8      	it	lt
 802a0cc:	f04f 33ff 	movlt.w	r3, #4294967295
 802a0d0:	3402      	adds	r4, #2
 802a0d2:	9305      	str	r3, [sp, #20]
 802a0d4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 802a1a0 <_svfiprintf_r+0x1fc>
 802a0d8:	7821      	ldrb	r1, [r4, #0]
 802a0da:	2203      	movs	r2, #3
 802a0dc:	4650      	mov	r0, sl
 802a0de:	f7d6 f88f 	bl	8000200 <memchr>
 802a0e2:	b140      	cbz	r0, 802a0f6 <_svfiprintf_r+0x152>
 802a0e4:	2340      	movs	r3, #64	; 0x40
 802a0e6:	eba0 000a 	sub.w	r0, r0, sl
 802a0ea:	fa03 f000 	lsl.w	r0, r3, r0
 802a0ee:	9b04      	ldr	r3, [sp, #16]
 802a0f0:	4303      	orrs	r3, r0
 802a0f2:	3401      	adds	r4, #1
 802a0f4:	9304      	str	r3, [sp, #16]
 802a0f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 802a0fa:	4826      	ldr	r0, [pc, #152]	; (802a194 <_svfiprintf_r+0x1f0>)
 802a0fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802a100:	2206      	movs	r2, #6
 802a102:	f7d6 f87d 	bl	8000200 <memchr>
 802a106:	2800      	cmp	r0, #0
 802a108:	d038      	beq.n	802a17c <_svfiprintf_r+0x1d8>
 802a10a:	4b23      	ldr	r3, [pc, #140]	; (802a198 <_svfiprintf_r+0x1f4>)
 802a10c:	bb1b      	cbnz	r3, 802a156 <_svfiprintf_r+0x1b2>
 802a10e:	9b03      	ldr	r3, [sp, #12]
 802a110:	3307      	adds	r3, #7
 802a112:	f023 0307 	bic.w	r3, r3, #7
 802a116:	3308      	adds	r3, #8
 802a118:	9303      	str	r3, [sp, #12]
 802a11a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802a11c:	4433      	add	r3, r6
 802a11e:	9309      	str	r3, [sp, #36]	; 0x24
 802a120:	e767      	b.n	8029ff2 <_svfiprintf_r+0x4e>
 802a122:	fb0c 3202 	mla	r2, ip, r2, r3
 802a126:	460c      	mov	r4, r1
 802a128:	2001      	movs	r0, #1
 802a12a:	e7a5      	b.n	802a078 <_svfiprintf_r+0xd4>
 802a12c:	2300      	movs	r3, #0
 802a12e:	3401      	adds	r4, #1
 802a130:	9305      	str	r3, [sp, #20]
 802a132:	4619      	mov	r1, r3
 802a134:	f04f 0c0a 	mov.w	ip, #10
 802a138:	4620      	mov	r0, r4
 802a13a:	f810 2b01 	ldrb.w	r2, [r0], #1
 802a13e:	3a30      	subs	r2, #48	; 0x30
 802a140:	2a09      	cmp	r2, #9
 802a142:	d903      	bls.n	802a14c <_svfiprintf_r+0x1a8>
 802a144:	2b00      	cmp	r3, #0
 802a146:	d0c5      	beq.n	802a0d4 <_svfiprintf_r+0x130>
 802a148:	9105      	str	r1, [sp, #20]
 802a14a:	e7c3      	b.n	802a0d4 <_svfiprintf_r+0x130>
 802a14c:	fb0c 2101 	mla	r1, ip, r1, r2
 802a150:	4604      	mov	r4, r0
 802a152:	2301      	movs	r3, #1
 802a154:	e7f0      	b.n	802a138 <_svfiprintf_r+0x194>
 802a156:	ab03      	add	r3, sp, #12
 802a158:	9300      	str	r3, [sp, #0]
 802a15a:	462a      	mov	r2, r5
 802a15c:	4b0f      	ldr	r3, [pc, #60]	; (802a19c <_svfiprintf_r+0x1f8>)
 802a15e:	a904      	add	r1, sp, #16
 802a160:	4638      	mov	r0, r7
 802a162:	f7fb ffe9 	bl	8026138 <_printf_float>
 802a166:	1c42      	adds	r2, r0, #1
 802a168:	4606      	mov	r6, r0
 802a16a:	d1d6      	bne.n	802a11a <_svfiprintf_r+0x176>
 802a16c:	89ab      	ldrh	r3, [r5, #12]
 802a16e:	065b      	lsls	r3, r3, #25
 802a170:	f53f af2c 	bmi.w	8029fcc <_svfiprintf_r+0x28>
 802a174:	9809      	ldr	r0, [sp, #36]	; 0x24
 802a176:	b01d      	add	sp, #116	; 0x74
 802a178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a17c:	ab03      	add	r3, sp, #12
 802a17e:	9300      	str	r3, [sp, #0]
 802a180:	462a      	mov	r2, r5
 802a182:	4b06      	ldr	r3, [pc, #24]	; (802a19c <_svfiprintf_r+0x1f8>)
 802a184:	a904      	add	r1, sp, #16
 802a186:	4638      	mov	r0, r7
 802a188:	f7fc fa7a 	bl	8026680 <_printf_i>
 802a18c:	e7eb      	b.n	802a166 <_svfiprintf_r+0x1c2>
 802a18e:	bf00      	nop
 802a190:	08030f40 	.word	0x08030f40
 802a194:	08030f4a 	.word	0x08030f4a
 802a198:	08026139 	.word	0x08026139
 802a19c:	08029eed 	.word	0x08029eed
 802a1a0:	08030f46 	.word	0x08030f46

0802a1a4 <_sungetc_r>:
 802a1a4:	b538      	push	{r3, r4, r5, lr}
 802a1a6:	1c4b      	adds	r3, r1, #1
 802a1a8:	4614      	mov	r4, r2
 802a1aa:	d103      	bne.n	802a1b4 <_sungetc_r+0x10>
 802a1ac:	f04f 35ff 	mov.w	r5, #4294967295
 802a1b0:	4628      	mov	r0, r5
 802a1b2:	bd38      	pop	{r3, r4, r5, pc}
 802a1b4:	8993      	ldrh	r3, [r2, #12]
 802a1b6:	f023 0320 	bic.w	r3, r3, #32
 802a1ba:	8193      	strh	r3, [r2, #12]
 802a1bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802a1be:	6852      	ldr	r2, [r2, #4]
 802a1c0:	b2cd      	uxtb	r5, r1
 802a1c2:	b18b      	cbz	r3, 802a1e8 <_sungetc_r+0x44>
 802a1c4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802a1c6:	4293      	cmp	r3, r2
 802a1c8:	dd08      	ble.n	802a1dc <_sungetc_r+0x38>
 802a1ca:	6823      	ldr	r3, [r4, #0]
 802a1cc:	1e5a      	subs	r2, r3, #1
 802a1ce:	6022      	str	r2, [r4, #0]
 802a1d0:	f803 5c01 	strb.w	r5, [r3, #-1]
 802a1d4:	6863      	ldr	r3, [r4, #4]
 802a1d6:	3301      	adds	r3, #1
 802a1d8:	6063      	str	r3, [r4, #4]
 802a1da:	e7e9      	b.n	802a1b0 <_sungetc_r+0xc>
 802a1dc:	4621      	mov	r1, r4
 802a1de:	f000 fbcb 	bl	802a978 <__submore>
 802a1e2:	2800      	cmp	r0, #0
 802a1e4:	d0f1      	beq.n	802a1ca <_sungetc_r+0x26>
 802a1e6:	e7e1      	b.n	802a1ac <_sungetc_r+0x8>
 802a1e8:	6921      	ldr	r1, [r4, #16]
 802a1ea:	6823      	ldr	r3, [r4, #0]
 802a1ec:	b151      	cbz	r1, 802a204 <_sungetc_r+0x60>
 802a1ee:	4299      	cmp	r1, r3
 802a1f0:	d208      	bcs.n	802a204 <_sungetc_r+0x60>
 802a1f2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 802a1f6:	42a9      	cmp	r1, r5
 802a1f8:	d104      	bne.n	802a204 <_sungetc_r+0x60>
 802a1fa:	3b01      	subs	r3, #1
 802a1fc:	3201      	adds	r2, #1
 802a1fe:	6023      	str	r3, [r4, #0]
 802a200:	6062      	str	r2, [r4, #4]
 802a202:	e7d5      	b.n	802a1b0 <_sungetc_r+0xc>
 802a204:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 802a208:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802a20c:	6363      	str	r3, [r4, #52]	; 0x34
 802a20e:	2303      	movs	r3, #3
 802a210:	63a3      	str	r3, [r4, #56]	; 0x38
 802a212:	4623      	mov	r3, r4
 802a214:	f803 5f46 	strb.w	r5, [r3, #70]!
 802a218:	6023      	str	r3, [r4, #0]
 802a21a:	2301      	movs	r3, #1
 802a21c:	e7dc      	b.n	802a1d8 <_sungetc_r+0x34>

0802a21e <__ssrefill_r>:
 802a21e:	b510      	push	{r4, lr}
 802a220:	460c      	mov	r4, r1
 802a222:	6b49      	ldr	r1, [r1, #52]	; 0x34
 802a224:	b169      	cbz	r1, 802a242 <__ssrefill_r+0x24>
 802a226:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802a22a:	4299      	cmp	r1, r3
 802a22c:	d001      	beq.n	802a232 <__ssrefill_r+0x14>
 802a22e:	f7fb fca9 	bl	8025b84 <_free_r>
 802a232:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802a234:	6063      	str	r3, [r4, #4]
 802a236:	2000      	movs	r0, #0
 802a238:	6360      	str	r0, [r4, #52]	; 0x34
 802a23a:	b113      	cbz	r3, 802a242 <__ssrefill_r+0x24>
 802a23c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802a23e:	6023      	str	r3, [r4, #0]
 802a240:	bd10      	pop	{r4, pc}
 802a242:	6923      	ldr	r3, [r4, #16]
 802a244:	6023      	str	r3, [r4, #0]
 802a246:	2300      	movs	r3, #0
 802a248:	6063      	str	r3, [r4, #4]
 802a24a:	89a3      	ldrh	r3, [r4, #12]
 802a24c:	f043 0320 	orr.w	r3, r3, #32
 802a250:	81a3      	strh	r3, [r4, #12]
 802a252:	f04f 30ff 	mov.w	r0, #4294967295
 802a256:	e7f3      	b.n	802a240 <__ssrefill_r+0x22>

0802a258 <__ssvfiscanf_r>:
 802a258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802a25c:	460c      	mov	r4, r1
 802a25e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 802a262:	2100      	movs	r1, #0
 802a264:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 802a268:	49a6      	ldr	r1, [pc, #664]	; (802a504 <__ssvfiscanf_r+0x2ac>)
 802a26a:	91a0      	str	r1, [sp, #640]	; 0x280
 802a26c:	f10d 0804 	add.w	r8, sp, #4
 802a270:	49a5      	ldr	r1, [pc, #660]	; (802a508 <__ssvfiscanf_r+0x2b0>)
 802a272:	4fa6      	ldr	r7, [pc, #664]	; (802a50c <__ssvfiscanf_r+0x2b4>)
 802a274:	f8df 9298 	ldr.w	r9, [pc, #664]	; 802a510 <__ssvfiscanf_r+0x2b8>
 802a278:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 802a27c:	4606      	mov	r6, r0
 802a27e:	91a1      	str	r1, [sp, #644]	; 0x284
 802a280:	9300      	str	r3, [sp, #0]
 802a282:	7813      	ldrb	r3, [r2, #0]
 802a284:	2b00      	cmp	r3, #0
 802a286:	f000 815a 	beq.w	802a53e <__ssvfiscanf_r+0x2e6>
 802a28a:	5dd9      	ldrb	r1, [r3, r7]
 802a28c:	f011 0108 	ands.w	r1, r1, #8
 802a290:	f102 0501 	add.w	r5, r2, #1
 802a294:	d019      	beq.n	802a2ca <__ssvfiscanf_r+0x72>
 802a296:	6863      	ldr	r3, [r4, #4]
 802a298:	2b00      	cmp	r3, #0
 802a29a:	dd0f      	ble.n	802a2bc <__ssvfiscanf_r+0x64>
 802a29c:	6823      	ldr	r3, [r4, #0]
 802a29e:	781a      	ldrb	r2, [r3, #0]
 802a2a0:	5cba      	ldrb	r2, [r7, r2]
 802a2a2:	0712      	lsls	r2, r2, #28
 802a2a4:	d401      	bmi.n	802a2aa <__ssvfiscanf_r+0x52>
 802a2a6:	462a      	mov	r2, r5
 802a2a8:	e7eb      	b.n	802a282 <__ssvfiscanf_r+0x2a>
 802a2aa:	9a45      	ldr	r2, [sp, #276]	; 0x114
 802a2ac:	3201      	adds	r2, #1
 802a2ae:	9245      	str	r2, [sp, #276]	; 0x114
 802a2b0:	6862      	ldr	r2, [r4, #4]
 802a2b2:	3301      	adds	r3, #1
 802a2b4:	3a01      	subs	r2, #1
 802a2b6:	6062      	str	r2, [r4, #4]
 802a2b8:	6023      	str	r3, [r4, #0]
 802a2ba:	e7ec      	b.n	802a296 <__ssvfiscanf_r+0x3e>
 802a2bc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 802a2be:	4621      	mov	r1, r4
 802a2c0:	4630      	mov	r0, r6
 802a2c2:	4798      	blx	r3
 802a2c4:	2800      	cmp	r0, #0
 802a2c6:	d0e9      	beq.n	802a29c <__ssvfiscanf_r+0x44>
 802a2c8:	e7ed      	b.n	802a2a6 <__ssvfiscanf_r+0x4e>
 802a2ca:	2b25      	cmp	r3, #37	; 0x25
 802a2cc:	d012      	beq.n	802a2f4 <__ssvfiscanf_r+0x9c>
 802a2ce:	469a      	mov	sl, r3
 802a2d0:	6863      	ldr	r3, [r4, #4]
 802a2d2:	2b00      	cmp	r3, #0
 802a2d4:	f340 8091 	ble.w	802a3fa <__ssvfiscanf_r+0x1a2>
 802a2d8:	6822      	ldr	r2, [r4, #0]
 802a2da:	7813      	ldrb	r3, [r2, #0]
 802a2dc:	4553      	cmp	r3, sl
 802a2de:	f040 812e 	bne.w	802a53e <__ssvfiscanf_r+0x2e6>
 802a2e2:	6863      	ldr	r3, [r4, #4]
 802a2e4:	3b01      	subs	r3, #1
 802a2e6:	6063      	str	r3, [r4, #4]
 802a2e8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 802a2ea:	3201      	adds	r2, #1
 802a2ec:	3301      	adds	r3, #1
 802a2ee:	6022      	str	r2, [r4, #0]
 802a2f0:	9345      	str	r3, [sp, #276]	; 0x114
 802a2f2:	e7d8      	b.n	802a2a6 <__ssvfiscanf_r+0x4e>
 802a2f4:	9141      	str	r1, [sp, #260]	; 0x104
 802a2f6:	9143      	str	r1, [sp, #268]	; 0x10c
 802a2f8:	7853      	ldrb	r3, [r2, #1]
 802a2fa:	2b2a      	cmp	r3, #42	; 0x2a
 802a2fc:	bf02      	ittt	eq
 802a2fe:	2310      	moveq	r3, #16
 802a300:	1c95      	addeq	r5, r2, #2
 802a302:	9341      	streq	r3, [sp, #260]	; 0x104
 802a304:	220a      	movs	r2, #10
 802a306:	46aa      	mov	sl, r5
 802a308:	f81a 1b01 	ldrb.w	r1, [sl], #1
 802a30c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 802a310:	2b09      	cmp	r3, #9
 802a312:	d91d      	bls.n	802a350 <__ssvfiscanf_r+0xf8>
 802a314:	487e      	ldr	r0, [pc, #504]	; (802a510 <__ssvfiscanf_r+0x2b8>)
 802a316:	2203      	movs	r2, #3
 802a318:	f7d5 ff72 	bl	8000200 <memchr>
 802a31c:	b140      	cbz	r0, 802a330 <__ssvfiscanf_r+0xd8>
 802a31e:	2301      	movs	r3, #1
 802a320:	eba0 0009 	sub.w	r0, r0, r9
 802a324:	fa03 f000 	lsl.w	r0, r3, r0
 802a328:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802a32a:	4318      	orrs	r0, r3
 802a32c:	9041      	str	r0, [sp, #260]	; 0x104
 802a32e:	4655      	mov	r5, sl
 802a330:	f815 3b01 	ldrb.w	r3, [r5], #1
 802a334:	2b78      	cmp	r3, #120	; 0x78
 802a336:	d806      	bhi.n	802a346 <__ssvfiscanf_r+0xee>
 802a338:	2b57      	cmp	r3, #87	; 0x57
 802a33a:	d810      	bhi.n	802a35e <__ssvfiscanf_r+0x106>
 802a33c:	2b25      	cmp	r3, #37	; 0x25
 802a33e:	d0c6      	beq.n	802a2ce <__ssvfiscanf_r+0x76>
 802a340:	d856      	bhi.n	802a3f0 <__ssvfiscanf_r+0x198>
 802a342:	2b00      	cmp	r3, #0
 802a344:	d064      	beq.n	802a410 <__ssvfiscanf_r+0x1b8>
 802a346:	2303      	movs	r3, #3
 802a348:	9347      	str	r3, [sp, #284]	; 0x11c
 802a34a:	230a      	movs	r3, #10
 802a34c:	9342      	str	r3, [sp, #264]	; 0x108
 802a34e:	e071      	b.n	802a434 <__ssvfiscanf_r+0x1dc>
 802a350:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 802a352:	fb02 1103 	mla	r1, r2, r3, r1
 802a356:	3930      	subs	r1, #48	; 0x30
 802a358:	9143      	str	r1, [sp, #268]	; 0x10c
 802a35a:	4655      	mov	r5, sl
 802a35c:	e7d3      	b.n	802a306 <__ssvfiscanf_r+0xae>
 802a35e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 802a362:	2a20      	cmp	r2, #32
 802a364:	d8ef      	bhi.n	802a346 <__ssvfiscanf_r+0xee>
 802a366:	a101      	add	r1, pc, #4	; (adr r1, 802a36c <__ssvfiscanf_r+0x114>)
 802a368:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 802a36c:	0802a41f 	.word	0x0802a41f
 802a370:	0802a347 	.word	0x0802a347
 802a374:	0802a347 	.word	0x0802a347
 802a378:	0802a47d 	.word	0x0802a47d
 802a37c:	0802a347 	.word	0x0802a347
 802a380:	0802a347 	.word	0x0802a347
 802a384:	0802a347 	.word	0x0802a347
 802a388:	0802a347 	.word	0x0802a347
 802a38c:	0802a347 	.word	0x0802a347
 802a390:	0802a347 	.word	0x0802a347
 802a394:	0802a347 	.word	0x0802a347
 802a398:	0802a493 	.word	0x0802a493
 802a39c:	0802a469 	.word	0x0802a469
 802a3a0:	0802a3f7 	.word	0x0802a3f7
 802a3a4:	0802a3f7 	.word	0x0802a3f7
 802a3a8:	0802a3f7 	.word	0x0802a3f7
 802a3ac:	0802a347 	.word	0x0802a347
 802a3b0:	0802a46d 	.word	0x0802a46d
 802a3b4:	0802a347 	.word	0x0802a347
 802a3b8:	0802a347 	.word	0x0802a347
 802a3bc:	0802a347 	.word	0x0802a347
 802a3c0:	0802a347 	.word	0x0802a347
 802a3c4:	0802a4a3 	.word	0x0802a4a3
 802a3c8:	0802a475 	.word	0x0802a475
 802a3cc:	0802a417 	.word	0x0802a417
 802a3d0:	0802a347 	.word	0x0802a347
 802a3d4:	0802a347 	.word	0x0802a347
 802a3d8:	0802a49f 	.word	0x0802a49f
 802a3dc:	0802a347 	.word	0x0802a347
 802a3e0:	0802a469 	.word	0x0802a469
 802a3e4:	0802a347 	.word	0x0802a347
 802a3e8:	0802a347 	.word	0x0802a347
 802a3ec:	0802a41f 	.word	0x0802a41f
 802a3f0:	3b45      	subs	r3, #69	; 0x45
 802a3f2:	2b02      	cmp	r3, #2
 802a3f4:	d8a7      	bhi.n	802a346 <__ssvfiscanf_r+0xee>
 802a3f6:	2305      	movs	r3, #5
 802a3f8:	e01b      	b.n	802a432 <__ssvfiscanf_r+0x1da>
 802a3fa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 802a3fc:	4621      	mov	r1, r4
 802a3fe:	4630      	mov	r0, r6
 802a400:	4798      	blx	r3
 802a402:	2800      	cmp	r0, #0
 802a404:	f43f af68 	beq.w	802a2d8 <__ssvfiscanf_r+0x80>
 802a408:	9844      	ldr	r0, [sp, #272]	; 0x110
 802a40a:	2800      	cmp	r0, #0
 802a40c:	f040 808d 	bne.w	802a52a <__ssvfiscanf_r+0x2d2>
 802a410:	f04f 30ff 	mov.w	r0, #4294967295
 802a414:	e08f      	b.n	802a536 <__ssvfiscanf_r+0x2de>
 802a416:	9a41      	ldr	r2, [sp, #260]	; 0x104
 802a418:	f042 0220 	orr.w	r2, r2, #32
 802a41c:	9241      	str	r2, [sp, #260]	; 0x104
 802a41e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 802a420:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 802a424:	9241      	str	r2, [sp, #260]	; 0x104
 802a426:	2210      	movs	r2, #16
 802a428:	2b6f      	cmp	r3, #111	; 0x6f
 802a42a:	9242      	str	r2, [sp, #264]	; 0x108
 802a42c:	bf34      	ite	cc
 802a42e:	2303      	movcc	r3, #3
 802a430:	2304      	movcs	r3, #4
 802a432:	9347      	str	r3, [sp, #284]	; 0x11c
 802a434:	6863      	ldr	r3, [r4, #4]
 802a436:	2b00      	cmp	r3, #0
 802a438:	dd42      	ble.n	802a4c0 <__ssvfiscanf_r+0x268>
 802a43a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802a43c:	0659      	lsls	r1, r3, #25
 802a43e:	d404      	bmi.n	802a44a <__ssvfiscanf_r+0x1f2>
 802a440:	6823      	ldr	r3, [r4, #0]
 802a442:	781a      	ldrb	r2, [r3, #0]
 802a444:	5cba      	ldrb	r2, [r7, r2]
 802a446:	0712      	lsls	r2, r2, #28
 802a448:	d441      	bmi.n	802a4ce <__ssvfiscanf_r+0x276>
 802a44a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 802a44c:	2b02      	cmp	r3, #2
 802a44e:	dc50      	bgt.n	802a4f2 <__ssvfiscanf_r+0x29a>
 802a450:	466b      	mov	r3, sp
 802a452:	4622      	mov	r2, r4
 802a454:	a941      	add	r1, sp, #260	; 0x104
 802a456:	4630      	mov	r0, r6
 802a458:	f000 f876 	bl	802a548 <_scanf_chars>
 802a45c:	2801      	cmp	r0, #1
 802a45e:	d06e      	beq.n	802a53e <__ssvfiscanf_r+0x2e6>
 802a460:	2802      	cmp	r0, #2
 802a462:	f47f af20 	bne.w	802a2a6 <__ssvfiscanf_r+0x4e>
 802a466:	e7cf      	b.n	802a408 <__ssvfiscanf_r+0x1b0>
 802a468:	220a      	movs	r2, #10
 802a46a:	e7dd      	b.n	802a428 <__ssvfiscanf_r+0x1d0>
 802a46c:	2300      	movs	r3, #0
 802a46e:	9342      	str	r3, [sp, #264]	; 0x108
 802a470:	2303      	movs	r3, #3
 802a472:	e7de      	b.n	802a432 <__ssvfiscanf_r+0x1da>
 802a474:	2308      	movs	r3, #8
 802a476:	9342      	str	r3, [sp, #264]	; 0x108
 802a478:	2304      	movs	r3, #4
 802a47a:	e7da      	b.n	802a432 <__ssvfiscanf_r+0x1da>
 802a47c:	4629      	mov	r1, r5
 802a47e:	4640      	mov	r0, r8
 802a480:	f000 f9ce 	bl	802a820 <__sccl>
 802a484:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802a486:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802a48a:	9341      	str	r3, [sp, #260]	; 0x104
 802a48c:	4605      	mov	r5, r0
 802a48e:	2301      	movs	r3, #1
 802a490:	e7cf      	b.n	802a432 <__ssvfiscanf_r+0x1da>
 802a492:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802a494:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802a498:	9341      	str	r3, [sp, #260]	; 0x104
 802a49a:	2300      	movs	r3, #0
 802a49c:	e7c9      	b.n	802a432 <__ssvfiscanf_r+0x1da>
 802a49e:	2302      	movs	r3, #2
 802a4a0:	e7c7      	b.n	802a432 <__ssvfiscanf_r+0x1da>
 802a4a2:	9841      	ldr	r0, [sp, #260]	; 0x104
 802a4a4:	06c3      	lsls	r3, r0, #27
 802a4a6:	f53f aefe 	bmi.w	802a2a6 <__ssvfiscanf_r+0x4e>
 802a4aa:	9b00      	ldr	r3, [sp, #0]
 802a4ac:	9a45      	ldr	r2, [sp, #276]	; 0x114
 802a4ae:	1d19      	adds	r1, r3, #4
 802a4b0:	9100      	str	r1, [sp, #0]
 802a4b2:	681b      	ldr	r3, [r3, #0]
 802a4b4:	f010 0f01 	tst.w	r0, #1
 802a4b8:	bf14      	ite	ne
 802a4ba:	801a      	strhne	r2, [r3, #0]
 802a4bc:	601a      	streq	r2, [r3, #0]
 802a4be:	e6f2      	b.n	802a2a6 <__ssvfiscanf_r+0x4e>
 802a4c0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 802a4c2:	4621      	mov	r1, r4
 802a4c4:	4630      	mov	r0, r6
 802a4c6:	4798      	blx	r3
 802a4c8:	2800      	cmp	r0, #0
 802a4ca:	d0b6      	beq.n	802a43a <__ssvfiscanf_r+0x1e2>
 802a4cc:	e79c      	b.n	802a408 <__ssvfiscanf_r+0x1b0>
 802a4ce:	9a45      	ldr	r2, [sp, #276]	; 0x114
 802a4d0:	3201      	adds	r2, #1
 802a4d2:	9245      	str	r2, [sp, #276]	; 0x114
 802a4d4:	6862      	ldr	r2, [r4, #4]
 802a4d6:	3a01      	subs	r2, #1
 802a4d8:	2a00      	cmp	r2, #0
 802a4da:	6062      	str	r2, [r4, #4]
 802a4dc:	dd02      	ble.n	802a4e4 <__ssvfiscanf_r+0x28c>
 802a4de:	3301      	adds	r3, #1
 802a4e0:	6023      	str	r3, [r4, #0]
 802a4e2:	e7ad      	b.n	802a440 <__ssvfiscanf_r+0x1e8>
 802a4e4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 802a4e6:	4621      	mov	r1, r4
 802a4e8:	4630      	mov	r0, r6
 802a4ea:	4798      	blx	r3
 802a4ec:	2800      	cmp	r0, #0
 802a4ee:	d0a7      	beq.n	802a440 <__ssvfiscanf_r+0x1e8>
 802a4f0:	e78a      	b.n	802a408 <__ssvfiscanf_r+0x1b0>
 802a4f2:	2b04      	cmp	r3, #4
 802a4f4:	dc0e      	bgt.n	802a514 <__ssvfiscanf_r+0x2bc>
 802a4f6:	466b      	mov	r3, sp
 802a4f8:	4622      	mov	r2, r4
 802a4fa:	a941      	add	r1, sp, #260	; 0x104
 802a4fc:	4630      	mov	r0, r6
 802a4fe:	f000 f87d 	bl	802a5fc <_scanf_i>
 802a502:	e7ab      	b.n	802a45c <__ssvfiscanf_r+0x204>
 802a504:	0802a1a5 	.word	0x0802a1a5
 802a508:	0802a21f 	.word	0x0802a21f
 802a50c:	08030e3b 	.word	0x08030e3b
 802a510:	08030f46 	.word	0x08030f46
 802a514:	4b0b      	ldr	r3, [pc, #44]	; (802a544 <__ssvfiscanf_r+0x2ec>)
 802a516:	2b00      	cmp	r3, #0
 802a518:	f43f aec5 	beq.w	802a2a6 <__ssvfiscanf_r+0x4e>
 802a51c:	466b      	mov	r3, sp
 802a51e:	4622      	mov	r2, r4
 802a520:	a941      	add	r1, sp, #260	; 0x104
 802a522:	4630      	mov	r0, r6
 802a524:	f3af 8000 	nop.w
 802a528:	e798      	b.n	802a45c <__ssvfiscanf_r+0x204>
 802a52a:	89a3      	ldrh	r3, [r4, #12]
 802a52c:	f013 0f40 	tst.w	r3, #64	; 0x40
 802a530:	bf18      	it	ne
 802a532:	f04f 30ff 	movne.w	r0, #4294967295
 802a536:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 802a53a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802a53e:	9844      	ldr	r0, [sp, #272]	; 0x110
 802a540:	e7f9      	b.n	802a536 <__ssvfiscanf_r+0x2de>
 802a542:	bf00      	nop
 802a544:	00000000 	.word	0x00000000

0802a548 <_scanf_chars>:
 802a548:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802a54c:	4615      	mov	r5, r2
 802a54e:	688a      	ldr	r2, [r1, #8]
 802a550:	4680      	mov	r8, r0
 802a552:	460c      	mov	r4, r1
 802a554:	b932      	cbnz	r2, 802a564 <_scanf_chars+0x1c>
 802a556:	698a      	ldr	r2, [r1, #24]
 802a558:	2a00      	cmp	r2, #0
 802a55a:	bf0c      	ite	eq
 802a55c:	2201      	moveq	r2, #1
 802a55e:	f04f 32ff 	movne.w	r2, #4294967295
 802a562:	608a      	str	r2, [r1, #8]
 802a564:	6822      	ldr	r2, [r4, #0]
 802a566:	f8df 9090 	ldr.w	r9, [pc, #144]	; 802a5f8 <_scanf_chars+0xb0>
 802a56a:	06d1      	lsls	r1, r2, #27
 802a56c:	bf5f      	itttt	pl
 802a56e:	681a      	ldrpl	r2, [r3, #0]
 802a570:	1d11      	addpl	r1, r2, #4
 802a572:	6019      	strpl	r1, [r3, #0]
 802a574:	6816      	ldrpl	r6, [r2, #0]
 802a576:	2700      	movs	r7, #0
 802a578:	69a0      	ldr	r0, [r4, #24]
 802a57a:	b188      	cbz	r0, 802a5a0 <_scanf_chars+0x58>
 802a57c:	2801      	cmp	r0, #1
 802a57e:	d107      	bne.n	802a590 <_scanf_chars+0x48>
 802a580:	682a      	ldr	r2, [r5, #0]
 802a582:	7811      	ldrb	r1, [r2, #0]
 802a584:	6962      	ldr	r2, [r4, #20]
 802a586:	5c52      	ldrb	r2, [r2, r1]
 802a588:	b952      	cbnz	r2, 802a5a0 <_scanf_chars+0x58>
 802a58a:	2f00      	cmp	r7, #0
 802a58c:	d031      	beq.n	802a5f2 <_scanf_chars+0xaa>
 802a58e:	e022      	b.n	802a5d6 <_scanf_chars+0x8e>
 802a590:	2802      	cmp	r0, #2
 802a592:	d120      	bne.n	802a5d6 <_scanf_chars+0x8e>
 802a594:	682b      	ldr	r3, [r5, #0]
 802a596:	781b      	ldrb	r3, [r3, #0]
 802a598:	f813 3009 	ldrb.w	r3, [r3, r9]
 802a59c:	071b      	lsls	r3, r3, #28
 802a59e:	d41a      	bmi.n	802a5d6 <_scanf_chars+0x8e>
 802a5a0:	6823      	ldr	r3, [r4, #0]
 802a5a2:	06da      	lsls	r2, r3, #27
 802a5a4:	bf5e      	ittt	pl
 802a5a6:	682b      	ldrpl	r3, [r5, #0]
 802a5a8:	781b      	ldrbpl	r3, [r3, #0]
 802a5aa:	f806 3b01 	strbpl.w	r3, [r6], #1
 802a5ae:	682a      	ldr	r2, [r5, #0]
 802a5b0:	686b      	ldr	r3, [r5, #4]
 802a5b2:	3201      	adds	r2, #1
 802a5b4:	602a      	str	r2, [r5, #0]
 802a5b6:	68a2      	ldr	r2, [r4, #8]
 802a5b8:	3b01      	subs	r3, #1
 802a5ba:	3a01      	subs	r2, #1
 802a5bc:	606b      	str	r3, [r5, #4]
 802a5be:	3701      	adds	r7, #1
 802a5c0:	60a2      	str	r2, [r4, #8]
 802a5c2:	b142      	cbz	r2, 802a5d6 <_scanf_chars+0x8e>
 802a5c4:	2b00      	cmp	r3, #0
 802a5c6:	dcd7      	bgt.n	802a578 <_scanf_chars+0x30>
 802a5c8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 802a5cc:	4629      	mov	r1, r5
 802a5ce:	4640      	mov	r0, r8
 802a5d0:	4798      	blx	r3
 802a5d2:	2800      	cmp	r0, #0
 802a5d4:	d0d0      	beq.n	802a578 <_scanf_chars+0x30>
 802a5d6:	6823      	ldr	r3, [r4, #0]
 802a5d8:	f013 0310 	ands.w	r3, r3, #16
 802a5dc:	d105      	bne.n	802a5ea <_scanf_chars+0xa2>
 802a5de:	68e2      	ldr	r2, [r4, #12]
 802a5e0:	3201      	adds	r2, #1
 802a5e2:	60e2      	str	r2, [r4, #12]
 802a5e4:	69a2      	ldr	r2, [r4, #24]
 802a5e6:	b102      	cbz	r2, 802a5ea <_scanf_chars+0xa2>
 802a5e8:	7033      	strb	r3, [r6, #0]
 802a5ea:	6923      	ldr	r3, [r4, #16]
 802a5ec:	443b      	add	r3, r7
 802a5ee:	6123      	str	r3, [r4, #16]
 802a5f0:	2000      	movs	r0, #0
 802a5f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802a5f6:	bf00      	nop
 802a5f8:	08030e3b 	.word	0x08030e3b

0802a5fc <_scanf_i>:
 802a5fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a600:	4698      	mov	r8, r3
 802a602:	4b76      	ldr	r3, [pc, #472]	; (802a7dc <_scanf_i+0x1e0>)
 802a604:	460c      	mov	r4, r1
 802a606:	4682      	mov	sl, r0
 802a608:	4616      	mov	r6, r2
 802a60a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 802a60e:	b087      	sub	sp, #28
 802a610:	ab03      	add	r3, sp, #12
 802a612:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 802a616:	4b72      	ldr	r3, [pc, #456]	; (802a7e0 <_scanf_i+0x1e4>)
 802a618:	69a1      	ldr	r1, [r4, #24]
 802a61a:	4a72      	ldr	r2, [pc, #456]	; (802a7e4 <_scanf_i+0x1e8>)
 802a61c:	2903      	cmp	r1, #3
 802a61e:	bf18      	it	ne
 802a620:	461a      	movne	r2, r3
 802a622:	68a3      	ldr	r3, [r4, #8]
 802a624:	9201      	str	r2, [sp, #4]
 802a626:	1e5a      	subs	r2, r3, #1
 802a628:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 802a62c:	bf88      	it	hi
 802a62e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 802a632:	4627      	mov	r7, r4
 802a634:	bf82      	ittt	hi
 802a636:	eb03 0905 	addhi.w	r9, r3, r5
 802a63a:	f240 135d 	movwhi	r3, #349	; 0x15d
 802a63e:	60a3      	strhi	r3, [r4, #8]
 802a640:	f857 3b1c 	ldr.w	r3, [r7], #28
 802a644:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 802a648:	bf98      	it	ls
 802a64a:	f04f 0900 	movls.w	r9, #0
 802a64e:	6023      	str	r3, [r4, #0]
 802a650:	463d      	mov	r5, r7
 802a652:	f04f 0b00 	mov.w	fp, #0
 802a656:	6831      	ldr	r1, [r6, #0]
 802a658:	ab03      	add	r3, sp, #12
 802a65a:	7809      	ldrb	r1, [r1, #0]
 802a65c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 802a660:	2202      	movs	r2, #2
 802a662:	f7d5 fdcd 	bl	8000200 <memchr>
 802a666:	b328      	cbz	r0, 802a6b4 <_scanf_i+0xb8>
 802a668:	f1bb 0f01 	cmp.w	fp, #1
 802a66c:	d159      	bne.n	802a722 <_scanf_i+0x126>
 802a66e:	6862      	ldr	r2, [r4, #4]
 802a670:	b92a      	cbnz	r2, 802a67e <_scanf_i+0x82>
 802a672:	6822      	ldr	r2, [r4, #0]
 802a674:	2308      	movs	r3, #8
 802a676:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 802a67a:	6063      	str	r3, [r4, #4]
 802a67c:	6022      	str	r2, [r4, #0]
 802a67e:	6822      	ldr	r2, [r4, #0]
 802a680:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 802a684:	6022      	str	r2, [r4, #0]
 802a686:	68a2      	ldr	r2, [r4, #8]
 802a688:	1e51      	subs	r1, r2, #1
 802a68a:	60a1      	str	r1, [r4, #8]
 802a68c:	b192      	cbz	r2, 802a6b4 <_scanf_i+0xb8>
 802a68e:	6832      	ldr	r2, [r6, #0]
 802a690:	1c51      	adds	r1, r2, #1
 802a692:	6031      	str	r1, [r6, #0]
 802a694:	7812      	ldrb	r2, [r2, #0]
 802a696:	f805 2b01 	strb.w	r2, [r5], #1
 802a69a:	6872      	ldr	r2, [r6, #4]
 802a69c:	3a01      	subs	r2, #1
 802a69e:	2a00      	cmp	r2, #0
 802a6a0:	6072      	str	r2, [r6, #4]
 802a6a2:	dc07      	bgt.n	802a6b4 <_scanf_i+0xb8>
 802a6a4:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 802a6a8:	4631      	mov	r1, r6
 802a6aa:	4650      	mov	r0, sl
 802a6ac:	4790      	blx	r2
 802a6ae:	2800      	cmp	r0, #0
 802a6b0:	f040 8085 	bne.w	802a7be <_scanf_i+0x1c2>
 802a6b4:	f10b 0b01 	add.w	fp, fp, #1
 802a6b8:	f1bb 0f03 	cmp.w	fp, #3
 802a6bc:	d1cb      	bne.n	802a656 <_scanf_i+0x5a>
 802a6be:	6863      	ldr	r3, [r4, #4]
 802a6c0:	b90b      	cbnz	r3, 802a6c6 <_scanf_i+0xca>
 802a6c2:	230a      	movs	r3, #10
 802a6c4:	6063      	str	r3, [r4, #4]
 802a6c6:	6863      	ldr	r3, [r4, #4]
 802a6c8:	4947      	ldr	r1, [pc, #284]	; (802a7e8 <_scanf_i+0x1ec>)
 802a6ca:	6960      	ldr	r0, [r4, #20]
 802a6cc:	1ac9      	subs	r1, r1, r3
 802a6ce:	f000 f8a7 	bl	802a820 <__sccl>
 802a6d2:	f04f 0b00 	mov.w	fp, #0
 802a6d6:	68a3      	ldr	r3, [r4, #8]
 802a6d8:	6822      	ldr	r2, [r4, #0]
 802a6da:	2b00      	cmp	r3, #0
 802a6dc:	d03d      	beq.n	802a75a <_scanf_i+0x15e>
 802a6de:	6831      	ldr	r1, [r6, #0]
 802a6e0:	6960      	ldr	r0, [r4, #20]
 802a6e2:	f891 c000 	ldrb.w	ip, [r1]
 802a6e6:	f810 000c 	ldrb.w	r0, [r0, ip]
 802a6ea:	2800      	cmp	r0, #0
 802a6ec:	d035      	beq.n	802a75a <_scanf_i+0x15e>
 802a6ee:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 802a6f2:	d124      	bne.n	802a73e <_scanf_i+0x142>
 802a6f4:	0510      	lsls	r0, r2, #20
 802a6f6:	d522      	bpl.n	802a73e <_scanf_i+0x142>
 802a6f8:	f10b 0b01 	add.w	fp, fp, #1
 802a6fc:	f1b9 0f00 	cmp.w	r9, #0
 802a700:	d003      	beq.n	802a70a <_scanf_i+0x10e>
 802a702:	3301      	adds	r3, #1
 802a704:	f109 39ff 	add.w	r9, r9, #4294967295
 802a708:	60a3      	str	r3, [r4, #8]
 802a70a:	6873      	ldr	r3, [r6, #4]
 802a70c:	3b01      	subs	r3, #1
 802a70e:	2b00      	cmp	r3, #0
 802a710:	6073      	str	r3, [r6, #4]
 802a712:	dd1b      	ble.n	802a74c <_scanf_i+0x150>
 802a714:	6833      	ldr	r3, [r6, #0]
 802a716:	3301      	adds	r3, #1
 802a718:	6033      	str	r3, [r6, #0]
 802a71a:	68a3      	ldr	r3, [r4, #8]
 802a71c:	3b01      	subs	r3, #1
 802a71e:	60a3      	str	r3, [r4, #8]
 802a720:	e7d9      	b.n	802a6d6 <_scanf_i+0xda>
 802a722:	f1bb 0f02 	cmp.w	fp, #2
 802a726:	d1ae      	bne.n	802a686 <_scanf_i+0x8a>
 802a728:	6822      	ldr	r2, [r4, #0]
 802a72a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 802a72e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 802a732:	d1bf      	bne.n	802a6b4 <_scanf_i+0xb8>
 802a734:	2310      	movs	r3, #16
 802a736:	6063      	str	r3, [r4, #4]
 802a738:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 802a73c:	e7a2      	b.n	802a684 <_scanf_i+0x88>
 802a73e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 802a742:	6022      	str	r2, [r4, #0]
 802a744:	780b      	ldrb	r3, [r1, #0]
 802a746:	f805 3b01 	strb.w	r3, [r5], #1
 802a74a:	e7de      	b.n	802a70a <_scanf_i+0x10e>
 802a74c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 802a750:	4631      	mov	r1, r6
 802a752:	4650      	mov	r0, sl
 802a754:	4798      	blx	r3
 802a756:	2800      	cmp	r0, #0
 802a758:	d0df      	beq.n	802a71a <_scanf_i+0x11e>
 802a75a:	6823      	ldr	r3, [r4, #0]
 802a75c:	05db      	lsls	r3, r3, #23
 802a75e:	d50d      	bpl.n	802a77c <_scanf_i+0x180>
 802a760:	42bd      	cmp	r5, r7
 802a762:	d909      	bls.n	802a778 <_scanf_i+0x17c>
 802a764:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 802a768:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 802a76c:	4632      	mov	r2, r6
 802a76e:	4650      	mov	r0, sl
 802a770:	4798      	blx	r3
 802a772:	f105 39ff 	add.w	r9, r5, #4294967295
 802a776:	464d      	mov	r5, r9
 802a778:	42bd      	cmp	r5, r7
 802a77a:	d02d      	beq.n	802a7d8 <_scanf_i+0x1dc>
 802a77c:	6822      	ldr	r2, [r4, #0]
 802a77e:	f012 0210 	ands.w	r2, r2, #16
 802a782:	d113      	bne.n	802a7ac <_scanf_i+0x1b0>
 802a784:	702a      	strb	r2, [r5, #0]
 802a786:	6863      	ldr	r3, [r4, #4]
 802a788:	9e01      	ldr	r6, [sp, #4]
 802a78a:	4639      	mov	r1, r7
 802a78c:	4650      	mov	r0, sl
 802a78e:	47b0      	blx	r6
 802a790:	6821      	ldr	r1, [r4, #0]
 802a792:	f8d8 3000 	ldr.w	r3, [r8]
 802a796:	f011 0f20 	tst.w	r1, #32
 802a79a:	d013      	beq.n	802a7c4 <_scanf_i+0x1c8>
 802a79c:	1d1a      	adds	r2, r3, #4
 802a79e:	f8c8 2000 	str.w	r2, [r8]
 802a7a2:	681b      	ldr	r3, [r3, #0]
 802a7a4:	6018      	str	r0, [r3, #0]
 802a7a6:	68e3      	ldr	r3, [r4, #12]
 802a7a8:	3301      	adds	r3, #1
 802a7aa:	60e3      	str	r3, [r4, #12]
 802a7ac:	1bed      	subs	r5, r5, r7
 802a7ae:	44ab      	add	fp, r5
 802a7b0:	6925      	ldr	r5, [r4, #16]
 802a7b2:	445d      	add	r5, fp
 802a7b4:	6125      	str	r5, [r4, #16]
 802a7b6:	2000      	movs	r0, #0
 802a7b8:	b007      	add	sp, #28
 802a7ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a7be:	f04f 0b00 	mov.w	fp, #0
 802a7c2:	e7ca      	b.n	802a75a <_scanf_i+0x15e>
 802a7c4:	1d1a      	adds	r2, r3, #4
 802a7c6:	f8c8 2000 	str.w	r2, [r8]
 802a7ca:	681b      	ldr	r3, [r3, #0]
 802a7cc:	f011 0f01 	tst.w	r1, #1
 802a7d0:	bf14      	ite	ne
 802a7d2:	8018      	strhne	r0, [r3, #0]
 802a7d4:	6018      	streq	r0, [r3, #0]
 802a7d6:	e7e6      	b.n	802a7a6 <_scanf_i+0x1aa>
 802a7d8:	2001      	movs	r0, #1
 802a7da:	e7ed      	b.n	802a7b8 <_scanf_i+0x1bc>
 802a7dc:	0802f674 	.word	0x0802f674
 802a7e0:	0802a975 	.word	0x0802a975
 802a7e4:	08027a41 	.word	0x08027a41
 802a7e8:	080313ad 	.word	0x080313ad

0802a7ec <_read_r>:
 802a7ec:	b538      	push	{r3, r4, r5, lr}
 802a7ee:	4d07      	ldr	r5, [pc, #28]	; (802a80c <_read_r+0x20>)
 802a7f0:	4604      	mov	r4, r0
 802a7f2:	4608      	mov	r0, r1
 802a7f4:	4611      	mov	r1, r2
 802a7f6:	2200      	movs	r2, #0
 802a7f8:	602a      	str	r2, [r5, #0]
 802a7fa:	461a      	mov	r2, r3
 802a7fc:	f7df fbe8 	bl	8009fd0 <_read>
 802a800:	1c43      	adds	r3, r0, #1
 802a802:	d102      	bne.n	802a80a <_read_r+0x1e>
 802a804:	682b      	ldr	r3, [r5, #0]
 802a806:	b103      	cbz	r3, 802a80a <_read_r+0x1e>
 802a808:	6023      	str	r3, [r4, #0]
 802a80a:	bd38      	pop	{r3, r4, r5, pc}
 802a80c:	20013d7c 	.word	0x20013d7c

0802a810 <nan>:
 802a810:	ed9f 0b01 	vldr	d0, [pc, #4]	; 802a818 <nan+0x8>
 802a814:	4770      	bx	lr
 802a816:	bf00      	nop
 802a818:	00000000 	.word	0x00000000
 802a81c:	7ff80000 	.word	0x7ff80000

0802a820 <__sccl>:
 802a820:	b570      	push	{r4, r5, r6, lr}
 802a822:	780b      	ldrb	r3, [r1, #0]
 802a824:	4604      	mov	r4, r0
 802a826:	2b5e      	cmp	r3, #94	; 0x5e
 802a828:	bf0b      	itete	eq
 802a82a:	784b      	ldrbeq	r3, [r1, #1]
 802a82c:	1c48      	addne	r0, r1, #1
 802a82e:	1c88      	addeq	r0, r1, #2
 802a830:	2200      	movne	r2, #0
 802a832:	bf08      	it	eq
 802a834:	2201      	moveq	r2, #1
 802a836:	1e61      	subs	r1, r4, #1
 802a838:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 802a83c:	f801 2f01 	strb.w	r2, [r1, #1]!
 802a840:	42a9      	cmp	r1, r5
 802a842:	d1fb      	bne.n	802a83c <__sccl+0x1c>
 802a844:	b90b      	cbnz	r3, 802a84a <__sccl+0x2a>
 802a846:	3801      	subs	r0, #1
 802a848:	bd70      	pop	{r4, r5, r6, pc}
 802a84a:	f082 0201 	eor.w	r2, r2, #1
 802a84e:	54e2      	strb	r2, [r4, r3]
 802a850:	4605      	mov	r5, r0
 802a852:	4628      	mov	r0, r5
 802a854:	f810 1b01 	ldrb.w	r1, [r0], #1
 802a858:	292d      	cmp	r1, #45	; 0x2d
 802a85a:	d006      	beq.n	802a86a <__sccl+0x4a>
 802a85c:	295d      	cmp	r1, #93	; 0x5d
 802a85e:	d0f3      	beq.n	802a848 <__sccl+0x28>
 802a860:	b909      	cbnz	r1, 802a866 <__sccl+0x46>
 802a862:	4628      	mov	r0, r5
 802a864:	e7f0      	b.n	802a848 <__sccl+0x28>
 802a866:	460b      	mov	r3, r1
 802a868:	e7f1      	b.n	802a84e <__sccl+0x2e>
 802a86a:	786e      	ldrb	r6, [r5, #1]
 802a86c:	2e5d      	cmp	r6, #93	; 0x5d
 802a86e:	d0fa      	beq.n	802a866 <__sccl+0x46>
 802a870:	42b3      	cmp	r3, r6
 802a872:	dcf8      	bgt.n	802a866 <__sccl+0x46>
 802a874:	3502      	adds	r5, #2
 802a876:	4619      	mov	r1, r3
 802a878:	3101      	adds	r1, #1
 802a87a:	428e      	cmp	r6, r1
 802a87c:	5462      	strb	r2, [r4, r1]
 802a87e:	dcfb      	bgt.n	802a878 <__sccl+0x58>
 802a880:	1af1      	subs	r1, r6, r3
 802a882:	3901      	subs	r1, #1
 802a884:	1c58      	adds	r0, r3, #1
 802a886:	42b3      	cmp	r3, r6
 802a888:	bfa8      	it	ge
 802a88a:	2100      	movge	r1, #0
 802a88c:	1843      	adds	r3, r0, r1
 802a88e:	e7e0      	b.n	802a852 <__sccl+0x32>

0802a890 <_strtoul_l.constprop.0>:
 802a890:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802a894:	4f36      	ldr	r7, [pc, #216]	; (802a970 <_strtoul_l.constprop.0+0xe0>)
 802a896:	4686      	mov	lr, r0
 802a898:	460d      	mov	r5, r1
 802a89a:	4628      	mov	r0, r5
 802a89c:	f815 4b01 	ldrb.w	r4, [r5], #1
 802a8a0:	5de6      	ldrb	r6, [r4, r7]
 802a8a2:	f016 0608 	ands.w	r6, r6, #8
 802a8a6:	d1f8      	bne.n	802a89a <_strtoul_l.constprop.0+0xa>
 802a8a8:	2c2d      	cmp	r4, #45	; 0x2d
 802a8aa:	d12f      	bne.n	802a90c <_strtoul_l.constprop.0+0x7c>
 802a8ac:	782c      	ldrb	r4, [r5, #0]
 802a8ae:	2601      	movs	r6, #1
 802a8b0:	1c85      	adds	r5, r0, #2
 802a8b2:	2b00      	cmp	r3, #0
 802a8b4:	d057      	beq.n	802a966 <_strtoul_l.constprop.0+0xd6>
 802a8b6:	2b10      	cmp	r3, #16
 802a8b8:	d109      	bne.n	802a8ce <_strtoul_l.constprop.0+0x3e>
 802a8ba:	2c30      	cmp	r4, #48	; 0x30
 802a8bc:	d107      	bne.n	802a8ce <_strtoul_l.constprop.0+0x3e>
 802a8be:	7828      	ldrb	r0, [r5, #0]
 802a8c0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 802a8c4:	2858      	cmp	r0, #88	; 0x58
 802a8c6:	d149      	bne.n	802a95c <_strtoul_l.constprop.0+0xcc>
 802a8c8:	786c      	ldrb	r4, [r5, #1]
 802a8ca:	2310      	movs	r3, #16
 802a8cc:	3502      	adds	r5, #2
 802a8ce:	f04f 38ff 	mov.w	r8, #4294967295
 802a8d2:	2700      	movs	r7, #0
 802a8d4:	fbb8 f8f3 	udiv	r8, r8, r3
 802a8d8:	fb03 f908 	mul.w	r9, r3, r8
 802a8dc:	ea6f 0909 	mvn.w	r9, r9
 802a8e0:	4638      	mov	r0, r7
 802a8e2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 802a8e6:	f1bc 0f09 	cmp.w	ip, #9
 802a8ea:	d814      	bhi.n	802a916 <_strtoul_l.constprop.0+0x86>
 802a8ec:	4664      	mov	r4, ip
 802a8ee:	42a3      	cmp	r3, r4
 802a8f0:	dd22      	ble.n	802a938 <_strtoul_l.constprop.0+0xa8>
 802a8f2:	2f00      	cmp	r7, #0
 802a8f4:	db1d      	blt.n	802a932 <_strtoul_l.constprop.0+0xa2>
 802a8f6:	4580      	cmp	r8, r0
 802a8f8:	d31b      	bcc.n	802a932 <_strtoul_l.constprop.0+0xa2>
 802a8fa:	d101      	bne.n	802a900 <_strtoul_l.constprop.0+0x70>
 802a8fc:	45a1      	cmp	r9, r4
 802a8fe:	db18      	blt.n	802a932 <_strtoul_l.constprop.0+0xa2>
 802a900:	fb00 4003 	mla	r0, r0, r3, r4
 802a904:	2701      	movs	r7, #1
 802a906:	f815 4b01 	ldrb.w	r4, [r5], #1
 802a90a:	e7ea      	b.n	802a8e2 <_strtoul_l.constprop.0+0x52>
 802a90c:	2c2b      	cmp	r4, #43	; 0x2b
 802a90e:	bf04      	itt	eq
 802a910:	782c      	ldrbeq	r4, [r5, #0]
 802a912:	1c85      	addeq	r5, r0, #2
 802a914:	e7cd      	b.n	802a8b2 <_strtoul_l.constprop.0+0x22>
 802a916:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 802a91a:	f1bc 0f19 	cmp.w	ip, #25
 802a91e:	d801      	bhi.n	802a924 <_strtoul_l.constprop.0+0x94>
 802a920:	3c37      	subs	r4, #55	; 0x37
 802a922:	e7e4      	b.n	802a8ee <_strtoul_l.constprop.0+0x5e>
 802a924:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 802a928:	f1bc 0f19 	cmp.w	ip, #25
 802a92c:	d804      	bhi.n	802a938 <_strtoul_l.constprop.0+0xa8>
 802a92e:	3c57      	subs	r4, #87	; 0x57
 802a930:	e7dd      	b.n	802a8ee <_strtoul_l.constprop.0+0x5e>
 802a932:	f04f 37ff 	mov.w	r7, #4294967295
 802a936:	e7e6      	b.n	802a906 <_strtoul_l.constprop.0+0x76>
 802a938:	2f00      	cmp	r7, #0
 802a93a:	da07      	bge.n	802a94c <_strtoul_l.constprop.0+0xbc>
 802a93c:	2322      	movs	r3, #34	; 0x22
 802a93e:	f8ce 3000 	str.w	r3, [lr]
 802a942:	f04f 30ff 	mov.w	r0, #4294967295
 802a946:	b932      	cbnz	r2, 802a956 <_strtoul_l.constprop.0+0xc6>
 802a948:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802a94c:	b106      	cbz	r6, 802a950 <_strtoul_l.constprop.0+0xc0>
 802a94e:	4240      	negs	r0, r0
 802a950:	2a00      	cmp	r2, #0
 802a952:	d0f9      	beq.n	802a948 <_strtoul_l.constprop.0+0xb8>
 802a954:	b107      	cbz	r7, 802a958 <_strtoul_l.constprop.0+0xc8>
 802a956:	1e69      	subs	r1, r5, #1
 802a958:	6011      	str	r1, [r2, #0]
 802a95a:	e7f5      	b.n	802a948 <_strtoul_l.constprop.0+0xb8>
 802a95c:	2430      	movs	r4, #48	; 0x30
 802a95e:	2b00      	cmp	r3, #0
 802a960:	d1b5      	bne.n	802a8ce <_strtoul_l.constprop.0+0x3e>
 802a962:	2308      	movs	r3, #8
 802a964:	e7b3      	b.n	802a8ce <_strtoul_l.constprop.0+0x3e>
 802a966:	2c30      	cmp	r4, #48	; 0x30
 802a968:	d0a9      	beq.n	802a8be <_strtoul_l.constprop.0+0x2e>
 802a96a:	230a      	movs	r3, #10
 802a96c:	e7af      	b.n	802a8ce <_strtoul_l.constprop.0+0x3e>
 802a96e:	bf00      	nop
 802a970:	08030e3b 	.word	0x08030e3b

0802a974 <_strtoul_r>:
 802a974:	f7ff bf8c 	b.w	802a890 <_strtoul_l.constprop.0>

0802a978 <__submore>:
 802a978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802a97c:	460c      	mov	r4, r1
 802a97e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 802a980:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802a984:	4299      	cmp	r1, r3
 802a986:	d11d      	bne.n	802a9c4 <__submore+0x4c>
 802a988:	f44f 6180 	mov.w	r1, #1024	; 0x400
 802a98c:	f7fb f966 	bl	8025c5c <_malloc_r>
 802a990:	b918      	cbnz	r0, 802a99a <__submore+0x22>
 802a992:	f04f 30ff 	mov.w	r0, #4294967295
 802a996:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802a99a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802a99e:	63a3      	str	r3, [r4, #56]	; 0x38
 802a9a0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 802a9a4:	6360      	str	r0, [r4, #52]	; 0x34
 802a9a6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 802a9aa:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 802a9ae:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 802a9b2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 802a9b6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 802a9ba:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 802a9be:	6020      	str	r0, [r4, #0]
 802a9c0:	2000      	movs	r0, #0
 802a9c2:	e7e8      	b.n	802a996 <__submore+0x1e>
 802a9c4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 802a9c6:	0077      	lsls	r7, r6, #1
 802a9c8:	463a      	mov	r2, r7
 802a9ca:	f7ff fa60 	bl	8029e8e <_realloc_r>
 802a9ce:	4605      	mov	r5, r0
 802a9d0:	2800      	cmp	r0, #0
 802a9d2:	d0de      	beq.n	802a992 <__submore+0x1a>
 802a9d4:	eb00 0806 	add.w	r8, r0, r6
 802a9d8:	4601      	mov	r1, r0
 802a9da:	4632      	mov	r2, r6
 802a9dc:	4640      	mov	r0, r8
 802a9de:	f7fb f8a1 	bl	8025b24 <memcpy>
 802a9e2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 802a9e6:	f8c4 8000 	str.w	r8, [r4]
 802a9ea:	e7e9      	b.n	802a9c0 <__submore+0x48>

0802a9ec <__ascii_wctomb>:
 802a9ec:	b149      	cbz	r1, 802aa02 <__ascii_wctomb+0x16>
 802a9ee:	2aff      	cmp	r2, #255	; 0xff
 802a9f0:	bf85      	ittet	hi
 802a9f2:	238a      	movhi	r3, #138	; 0x8a
 802a9f4:	6003      	strhi	r3, [r0, #0]
 802a9f6:	700a      	strbls	r2, [r1, #0]
 802a9f8:	f04f 30ff 	movhi.w	r0, #4294967295
 802a9fc:	bf98      	it	ls
 802a9fe:	2001      	movls	r0, #1
 802aa00:	4770      	bx	lr
 802aa02:	4608      	mov	r0, r1
 802aa04:	4770      	bx	lr

0802aa06 <abort>:
 802aa06:	b508      	push	{r3, lr}
 802aa08:	2006      	movs	r0, #6
 802aa0a:	f000 f855 	bl	802aab8 <raise>
 802aa0e:	2001      	movs	r0, #1
 802aa10:	f7df fad4 	bl	8009fbc <_exit>

0802aa14 <_fstat_r>:
 802aa14:	b538      	push	{r3, r4, r5, lr}
 802aa16:	4d07      	ldr	r5, [pc, #28]	; (802aa34 <_fstat_r+0x20>)
 802aa18:	2300      	movs	r3, #0
 802aa1a:	4604      	mov	r4, r0
 802aa1c:	4608      	mov	r0, r1
 802aa1e:	4611      	mov	r1, r2
 802aa20:	602b      	str	r3, [r5, #0]
 802aa22:	f7df fafe 	bl	800a022 <_fstat>
 802aa26:	1c43      	adds	r3, r0, #1
 802aa28:	d102      	bne.n	802aa30 <_fstat_r+0x1c>
 802aa2a:	682b      	ldr	r3, [r5, #0]
 802aa2c:	b103      	cbz	r3, 802aa30 <_fstat_r+0x1c>
 802aa2e:	6023      	str	r3, [r4, #0]
 802aa30:	bd38      	pop	{r3, r4, r5, pc}
 802aa32:	bf00      	nop
 802aa34:	20013d7c 	.word	0x20013d7c

0802aa38 <_isatty_r>:
 802aa38:	b538      	push	{r3, r4, r5, lr}
 802aa3a:	4d06      	ldr	r5, [pc, #24]	; (802aa54 <_isatty_r+0x1c>)
 802aa3c:	2300      	movs	r3, #0
 802aa3e:	4604      	mov	r4, r0
 802aa40:	4608      	mov	r0, r1
 802aa42:	602b      	str	r3, [r5, #0]
 802aa44:	f7df fafd 	bl	800a042 <_isatty>
 802aa48:	1c43      	adds	r3, r0, #1
 802aa4a:	d102      	bne.n	802aa52 <_isatty_r+0x1a>
 802aa4c:	682b      	ldr	r3, [r5, #0]
 802aa4e:	b103      	cbz	r3, 802aa52 <_isatty_r+0x1a>
 802aa50:	6023      	str	r3, [r4, #0]
 802aa52:	bd38      	pop	{r3, r4, r5, pc}
 802aa54:	20013d7c 	.word	0x20013d7c

0802aa58 <_malloc_usable_size_r>:
 802aa58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802aa5c:	1f18      	subs	r0, r3, #4
 802aa5e:	2b00      	cmp	r3, #0
 802aa60:	bfbc      	itt	lt
 802aa62:	580b      	ldrlt	r3, [r1, r0]
 802aa64:	18c0      	addlt	r0, r0, r3
 802aa66:	4770      	bx	lr

0802aa68 <_raise_r>:
 802aa68:	291f      	cmp	r1, #31
 802aa6a:	b538      	push	{r3, r4, r5, lr}
 802aa6c:	4604      	mov	r4, r0
 802aa6e:	460d      	mov	r5, r1
 802aa70:	d904      	bls.n	802aa7c <_raise_r+0x14>
 802aa72:	2316      	movs	r3, #22
 802aa74:	6003      	str	r3, [r0, #0]
 802aa76:	f04f 30ff 	mov.w	r0, #4294967295
 802aa7a:	bd38      	pop	{r3, r4, r5, pc}
 802aa7c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802aa7e:	b112      	cbz	r2, 802aa86 <_raise_r+0x1e>
 802aa80:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802aa84:	b94b      	cbnz	r3, 802aa9a <_raise_r+0x32>
 802aa86:	4620      	mov	r0, r4
 802aa88:	f000 f830 	bl	802aaec <_getpid_r>
 802aa8c:	462a      	mov	r2, r5
 802aa8e:	4601      	mov	r1, r0
 802aa90:	4620      	mov	r0, r4
 802aa92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802aa96:	f000 b817 	b.w	802aac8 <_kill_r>
 802aa9a:	2b01      	cmp	r3, #1
 802aa9c:	d00a      	beq.n	802aab4 <_raise_r+0x4c>
 802aa9e:	1c59      	adds	r1, r3, #1
 802aaa0:	d103      	bne.n	802aaaa <_raise_r+0x42>
 802aaa2:	2316      	movs	r3, #22
 802aaa4:	6003      	str	r3, [r0, #0]
 802aaa6:	2001      	movs	r0, #1
 802aaa8:	e7e7      	b.n	802aa7a <_raise_r+0x12>
 802aaaa:	2400      	movs	r4, #0
 802aaac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802aab0:	4628      	mov	r0, r5
 802aab2:	4798      	blx	r3
 802aab4:	2000      	movs	r0, #0
 802aab6:	e7e0      	b.n	802aa7a <_raise_r+0x12>

0802aab8 <raise>:
 802aab8:	4b02      	ldr	r3, [pc, #8]	; (802aac4 <raise+0xc>)
 802aaba:	4601      	mov	r1, r0
 802aabc:	6818      	ldr	r0, [r3, #0]
 802aabe:	f7ff bfd3 	b.w	802aa68 <_raise_r>
 802aac2:	bf00      	nop
 802aac4:	10000070 	.word	0x10000070

0802aac8 <_kill_r>:
 802aac8:	b538      	push	{r3, r4, r5, lr}
 802aaca:	4d07      	ldr	r5, [pc, #28]	; (802aae8 <_kill_r+0x20>)
 802aacc:	2300      	movs	r3, #0
 802aace:	4604      	mov	r4, r0
 802aad0:	4608      	mov	r0, r1
 802aad2:	4611      	mov	r1, r2
 802aad4:	602b      	str	r3, [r5, #0]
 802aad6:	f7df fa5f 	bl	8009f98 <_kill>
 802aada:	1c43      	adds	r3, r0, #1
 802aadc:	d102      	bne.n	802aae4 <_kill_r+0x1c>
 802aade:	682b      	ldr	r3, [r5, #0]
 802aae0:	b103      	cbz	r3, 802aae4 <_kill_r+0x1c>
 802aae2:	6023      	str	r3, [r4, #0]
 802aae4:	bd38      	pop	{r3, r4, r5, pc}
 802aae6:	bf00      	nop
 802aae8:	20013d7c 	.word	0x20013d7c

0802aaec <_getpid_r>:
 802aaec:	f7df ba4c 	b.w	8009f88 <_getpid>

0802aaf0 <_init>:
 802aaf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802aaf2:	bf00      	nop
 802aaf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802aaf6:	bc08      	pop	{r3}
 802aaf8:	469e      	mov	lr, r3
 802aafa:	4770      	bx	lr

0802aafc <_fini>:
 802aafc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802aafe:	bf00      	nop
 802ab00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802ab02:	bc08      	pop	{r3}
 802ab04:	469e      	mov	lr, r3
 802ab06:	4770      	bx	lr
