
Stm32f407Ethernet_flash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040c8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08004258  08004258  00014258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004268  08004268  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004268  08004268  00014268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004270  08004270  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004270  08004270  00014270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004274  08004274  00014274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004278  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          000038bc  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00002204  200038cc  200038cc  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002068d  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003bf2  00000000  00000000  000406cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016b0  00000000  00000000  000442c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001568  00000000  00000000  00045970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000059c8  00000000  00000000  00046ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b517  00000000  00000000  0004c8a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ebaa2  00000000  00000000  00067db7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00153859  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005fd4  00000000  00000000  001538ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004240 	.word	0x08004240

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08004240 	.word	0x08004240

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <RingAdd>:


/* Ring Buffer functions */
// This function must be called only after disabling USART RX interrupt or inside of the RX interrupt
void RingAdd(modbusRingBuffer_t *xRingBuffer, uint8_t u8Val)
{
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
 80004dc:	460b      	mov	r3, r1
 80004de:	70fb      	strb	r3, [r7, #3]

	xRingBuffer->uxBuffer[xRingBuffer->u8end] = u8Val;
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80004e6:	4619      	mov	r1, r3
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	78fa      	ldrb	r2, [r7, #3]
 80004ec:	545a      	strb	r2, [r3, r1]
	xRingBuffer->u8end = (xRingBuffer->u8end + 1) % MAX_BUFFER;
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80004f4:	3301      	adds	r3, #1
 80004f6:	425a      	negs	r2, r3
 80004f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80004fc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000500:	bf58      	it	pl
 8000502:	4253      	negpl	r3, r2
 8000504:	b2da      	uxtb	r2, r3
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	if (xRingBuffer->u8available == MAX_BUFFER)
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8000512:	2b80      	cmp	r3, #128	; 0x80
 8000514:	d113      	bne.n	800053e <RingAdd+0x6a>
	{
		xRingBuffer->overflow = true;
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	2201      	movs	r2, #1
 800051a:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8000524:	3301      	adds	r3, #1
 8000526:	425a      	negs	r2, r3
 8000528:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800052c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000530:	bf58      	it	pl
 8000532:	4253      	negpl	r3, r2
 8000534:	b2da      	uxtb	r2, r3
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	{
		xRingBuffer->overflow = false;
		xRingBuffer->u8available++;
	}

}
 800053c:	e00b      	b.n	8000556 <RingAdd+0x82>
		xRingBuffer->overflow = false;
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	2200      	movs	r2, #0
 8000542:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
		xRingBuffer->u8available++;
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800054c:	3301      	adds	r3, #1
 800054e:	b2da      	uxtb	r2, r3
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
}
 8000556:	bf00      	nop
 8000558:	370c      	adds	r7, #12
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr
	...

08000564 <HAL_UART_TxCpltCallback>:
 * Modbus functionality.
 * @ingroup UartHandle UART HAL handler
 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b086      	sub	sp, #24
 8000568:	af02      	add	r7, sp, #8
 800056a:	6078      	str	r0, [r7, #4]
	/* Modbus RTU TX callback BEGIN */
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800056c:	2300      	movs	r3, #0
 800056e:	60bb      	str	r3, [r7, #8]
	int i;
	for (i = 0; i < numberHandlers; i++ )
 8000570:	2300      	movs	r3, #0
 8000572:	60fb      	str	r3, [r7, #12]
 8000574:	e019      	b.n	80005aa <HAL_UART_TxCpltCallback+0x46>
	{
	   	if (mHandlers[i]->port == huart  )
 8000576:	4a17      	ldr	r2, [pc, #92]	; (80005d4 <HAL_UART_TxCpltCallback+0x70>)
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800057e:	685b      	ldr	r3, [r3, #4]
 8000580:	687a      	ldr	r2, [r7, #4]
 8000582:	429a      	cmp	r2, r3
 8000584:	d10e      	bne.n	80005a4 <HAL_UART_TxCpltCallback+0x40>
	   	{
	   		// notify the end of TX
	   		xTaskNotifyFromISR(mHandlers[i]->myTaskModbusAHandle, 0, eNoAction, &xHigherPriorityTaskWoken);
 8000586:	4a13      	ldr	r2, [pc, #76]	; (80005d4 <HAL_UART_TxCpltCallback+0x70>)
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800058e:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
 8000592:	f107 0308 	add.w	r3, r7, #8
 8000596:	9300      	str	r3, [sp, #0]
 8000598:	2300      	movs	r3, #0
 800059a:	2200      	movs	r2, #0
 800059c:	2100      	movs	r1, #0
 800059e:	f003 fb8d 	bl	8003cbc <xTaskGenericNotifyFromISR>
	   		break;
 80005a2:	e008      	b.n	80005b6 <HAL_UART_TxCpltCallback+0x52>
	for (i = 0; i < numberHandlers; i++ )
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	3301      	adds	r3, #1
 80005a8:	60fb      	str	r3, [r7, #12]
 80005aa:	4b0b      	ldr	r3, [pc, #44]	; (80005d8 <HAL_UART_TxCpltCallback+0x74>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	461a      	mov	r2, r3
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	4293      	cmp	r3, r2
 80005b4:	dbdf      	blt.n	8000576 <HAL_UART_TxCpltCallback+0x12>
	   	}

	}
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80005b6:	68bb      	ldr	r3, [r7, #8]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d007      	beq.n	80005cc <HAL_UART_TxCpltCallback+0x68>
 80005bc:	4b07      	ldr	r3, [pc, #28]	; (80005dc <HAL_UART_TxCpltCallback+0x78>)
 80005be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80005c2:	601a      	str	r2, [r3, #0]
 80005c4:	f3bf 8f4f 	dsb	sy
 80005c8:	f3bf 8f6f 	isb	sy
	/*
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 * */

}
 80005cc:	bf00      	nop
 80005ce:	3710      	adds	r7, #16
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	200004f8 	.word	0x200004f8
 80005d8:	2000002c 	.word	0x2000002c
 80005dc:	e000ed04 	.word	0xe000ed04

080005e0 <HAL_UART_RxCpltCallback>:
 * user should implement the correct control flow and verification to maintain
 * Modbus functionality.
 * @ingroup UartHandle UART HAL handler
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 80005e0:	b590      	push	{r4, r7, lr}
 80005e2:	b087      	sub	sp, #28
 80005e4:	af02      	add	r7, sp, #8
 80005e6:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80005e8:	2300      	movs	r3, #0
 80005ea:	60bb      	str	r3, [r7, #8]

	/* Modbus RTU RX callback BEGIN */
    int i;
    for (i = 0; i < numberHandlers; i++ )
 80005ec:	2300      	movs	r3, #0
 80005ee:	60fb      	str	r3, [r7, #12]
 80005f0:	e042      	b.n	8000678 <HAL_UART_RxCpltCallback+0x98>
    {
    	if (mHandlers[i]->port == UartHandle  )
 80005f2:	4a2d      	ldr	r2, [pc, #180]	; (80006a8 <HAL_UART_RxCpltCallback+0xc8>)
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005fa:	685b      	ldr	r3, [r3, #4]
 80005fc:	687a      	ldr	r2, [r7, #4]
 80005fe:	429a      	cmp	r2, r3
 8000600:	d137      	bne.n	8000672 <HAL_UART_RxCpltCallback+0x92>
    	{

    		if(mHandlers[i]->xTypeHW == USART_HW)
 8000602:	4a29      	ldr	r2, [pc, #164]	; (80006a8 <HAL_UART_RxCpltCallback+0xc8>)
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800060a:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800060e:	2b01      	cmp	r3, #1
 8000610:	d139      	bne.n	8000686 <HAL_UART_RxCpltCallback+0xa6>
    		{
    			RingAdd(&mHandlers[i]->xBufferRX, mHandlers[i]->dataRX);
 8000612:	4a25      	ldr	r2, [pc, #148]	; (80006a8 <HAL_UART_RxCpltCallback+0xc8>)
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800061a:	f103 02bc 	add.w	r2, r3, #188	; 0xbc
 800061e:	4922      	ldr	r1, [pc, #136]	; (80006a8 <HAL_UART_RxCpltCallback+0xc8>)
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000626:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 800062a:	4619      	mov	r1, r3
 800062c:	4610      	mov	r0, r2
 800062e:	f7ff ff51 	bl	80004d4 <RingAdd>
    			HAL_UART_Receive_IT(mHandlers[i]->port, &mHandlers[i]->dataRX, 1);
 8000632:	4a1d      	ldr	r2, [pc, #116]	; (80006a8 <HAL_UART_RxCpltCallback+0xc8>)
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800063a:	6858      	ldr	r0, [r3, #4]
 800063c:	4a1a      	ldr	r2, [pc, #104]	; (80006a8 <HAL_UART_RxCpltCallback+0xc8>)
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000644:	33a6      	adds	r3, #166	; 0xa6
 8000646:	2201      	movs	r2, #1
 8000648:	4619      	mov	r1, r3
 800064a:	f001 fc99 	bl	8001f80 <HAL_UART_Receive_IT>
    			xTimerResetFromISR(mHandlers[i]->xTimerT35, &xHigherPriorityTaskWoken);
 800064e:	4a16      	ldr	r2, [pc, #88]	; (80006a8 <HAL_UART_RxCpltCallback+0xc8>)
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000656:	f8d3 40b0 	ldr.w	r4, [r3, #176]	; 0xb0
 800065a:	f003 f84d 	bl	80036f8 <xTaskGetTickCountFromISR>
 800065e:	4602      	mov	r2, r0
 8000660:	f107 0308 	add.w	r3, r7, #8
 8000664:	2100      	movs	r1, #0
 8000666:	9100      	str	r1, [sp, #0]
 8000668:	2107      	movs	r1, #7
 800066a:	4620      	mov	r0, r4
 800066c:	f003 fc56 	bl	8003f1c <xTimerGenericCommand>
    		}
    		break;
 8000670:	e009      	b.n	8000686 <HAL_UART_RxCpltCallback+0xa6>
    for (i = 0; i < numberHandlers; i++ )
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	3301      	adds	r3, #1
 8000676:	60fb      	str	r3, [r7, #12]
 8000678:	4b0c      	ldr	r3, [pc, #48]	; (80006ac <HAL_UART_RxCpltCallback+0xcc>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	461a      	mov	r2, r3
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	4293      	cmp	r3, r2
 8000682:	dbb6      	blt.n	80005f2 <HAL_UART_RxCpltCallback+0x12>
 8000684:	e000      	b.n	8000688 <HAL_UART_RxCpltCallback+0xa8>
    		break;
 8000686:	bf00      	nop
    	}
    }
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8000688:	68bb      	ldr	r3, [r7, #8]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d007      	beq.n	800069e <HAL_UART_RxCpltCallback+0xbe>
 800068e:	4b08      	ldr	r3, [pc, #32]	; (80006b0 <HAL_UART_RxCpltCallback+0xd0>)
 8000690:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	f3bf 8f4f 	dsb	sy
 800069a:	f3bf 8f6f 	isb	sy
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 *
	 * */

}
 800069e:	bf00      	nop
 80006a0:	3714      	adds	r7, #20
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd90      	pop	{r4, r7, pc}
 80006a6:	bf00      	nop
 80006a8:	200004f8 	.word	0x200004f8
 80006ac:	2000002c 	.word	0x2000002c
 80006b0:	e000ed04 	.word	0xe000ed04

080006b4 <HAL_UART_ErrorCallback>:
 * handled by the HAL
 * */


void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b084      	sub	sp, #16
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]

 int i;

 for (i = 0; i < numberHandlers; i++ )
 80006bc:	2300      	movs	r3, #0
 80006be:	60fb      	str	r3, [r7, #12]
 80006c0:	e03f      	b.n	8000742 <HAL_UART_ErrorCallback+0x8e>
 {
    	if (mHandlers[i]->port == huart  )
 80006c2:	4a26      	ldr	r2, [pc, #152]	; (800075c <HAL_UART_ErrorCallback+0xa8>)
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006ca:	685b      	ldr	r3, [r3, #4]
 80006cc:	687a      	ldr	r2, [r7, #4]
 80006ce:	429a      	cmp	r2, r3
 80006d0:	d134      	bne.n	800073c <HAL_UART_ErrorCallback+0x88>
    	{

    		if(mHandlers[i]->xTypeHW == USART_HW_DMA)
 80006d2:	4a22      	ldr	r2, [pc, #136]	; (800075c <HAL_UART_ErrorCallback+0xa8>)
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006da:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 80006de:	2b04      	cmp	r3, #4
 80006e0:	d136      	bne.n	8000750 <HAL_UART_ErrorCallback+0x9c>
    		{
    			while(HAL_UARTEx_ReceiveToIdle_DMA(mHandlers[i]->port, mHandlers[i]->xBufferRX.uxBuffer, MAX_BUFFER) != HAL_OK)
 80006e2:	e007      	b.n	80006f4 <HAL_UART_ErrorCallback+0x40>
    		    {
    					HAL_UART_DMAStop(mHandlers[i]->port);
 80006e4:	4a1d      	ldr	r2, [pc, #116]	; (800075c <HAL_UART_ErrorCallback+0xa8>)
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006ec:	685b      	ldr	r3, [r3, #4]
 80006ee:	4618      	mov	r0, r3
 80006f0:	f001 fc76 	bl	8001fe0 <HAL_UART_DMAStop>
    			while(HAL_UARTEx_ReceiveToIdle_DMA(mHandlers[i]->port, mHandlers[i]->xBufferRX.uxBuffer, MAX_BUFFER) != HAL_OK)
 80006f4:	4a19      	ldr	r2, [pc, #100]	; (800075c <HAL_UART_ErrorCallback+0xa8>)
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006fc:	6858      	ldr	r0, [r3, #4]
 80006fe:	4a17      	ldr	r2, [pc, #92]	; (800075c <HAL_UART_ErrorCallback+0xa8>)
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000706:	33bc      	adds	r3, #188	; 0xbc
 8000708:	2280      	movs	r2, #128	; 0x80
 800070a:	4619      	mov	r1, r3
 800070c:	f001 fce7 	bl	80020de <HAL_UARTEx_ReceiveToIdle_DMA>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d1e6      	bne.n	80006e4 <HAL_UART_ErrorCallback+0x30>
   				}
				__HAL_DMA_DISABLE_IT(mHandlers[i]->port->hdmarx, DMA_IT_HT); // we don't need half-transfer interrupt
 8000716:	4a11      	ldr	r2, [pc, #68]	; (800075c <HAL_UART_ErrorCallback+0xa8>)
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800071e:	685b      	ldr	r3, [r3, #4]
 8000720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	681a      	ldr	r2, [r3, #0]
 8000726:	490d      	ldr	r1, [pc, #52]	; (800075c <HAL_UART_ErrorCallback+0xa8>)
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800072e:	685b      	ldr	r3, [r3, #4]
 8000730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	f022 0208 	bic.w	r2, r2, #8
 8000738:	601a      	str	r2, [r3, #0]

    		}

    		break;
 800073a:	e009      	b.n	8000750 <HAL_UART_ErrorCallback+0x9c>
 for (i = 0; i < numberHandlers; i++ )
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	3301      	adds	r3, #1
 8000740:	60fb      	str	r3, [r7, #12]
 8000742:	4b07      	ldr	r3, [pc, #28]	; (8000760 <HAL_UART_ErrorCallback+0xac>)
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	461a      	mov	r2, r3
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	4293      	cmp	r3, r2
 800074c:	dbb9      	blt.n	80006c2 <HAL_UART_ErrorCallback+0xe>
    	}
   }
}
 800074e:	e000      	b.n	8000752 <HAL_UART_ErrorCallback+0x9e>
    		break;
 8000750:	bf00      	nop
}
 8000752:	bf00      	nop
 8000754:	3710      	adds	r7, #16
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	200004f8 	.word	0x200004f8
 8000760:	2000002c 	.word	0x2000002c

08000764 <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b086      	sub	sp, #24
 8000768:	af02      	add	r7, sp, #8
 800076a:	6078      	str	r0, [r7, #4]
 800076c:	460b      	mov	r3, r1
 800076e:	807b      	strh	r3, [r7, #2]
	    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000770:	2300      	movs	r3, #0
 8000772:	60bb      	str	r3, [r7, #8]
		/* Modbus RTU RX callback BEGIN */
	    int i;
	    for (i = 0; i < numberHandlers; i++ )
 8000774:	2300      	movs	r3, #0
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	e05f      	b.n	800083a <HAL_UARTEx_RxEventCallback+0xd6>
	    {
	    	if (mHandlers[i]->port == huart  )
 800077a:	4a3b      	ldr	r2, [pc, #236]	; (8000868 <HAL_UARTEx_RxEventCallback+0x104>)
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000782:	685b      	ldr	r3, [r3, #4]
 8000784:	687a      	ldr	r2, [r7, #4]
 8000786:	429a      	cmp	r2, r3
 8000788:	d154      	bne.n	8000834 <HAL_UARTEx_RxEventCallback+0xd0>
	    	{


	    		if(mHandlers[i]->xTypeHW == USART_HW_DMA)
 800078a:	4a37      	ldr	r2, [pc, #220]	; (8000868 <HAL_UARTEx_RxEventCallback+0x104>)
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000792:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8000796:	2b04      	cmp	r3, #4
 8000798:	d156      	bne.n	8000848 <HAL_UARTEx_RxEventCallback+0xe4>
	    		{
	    			if(Size) //check if we have received any byte
 800079a:	887b      	ldrh	r3, [r7, #2]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d053      	beq.n	8000848 <HAL_UARTEx_RxEventCallback+0xe4>
	    			{
		    				mHandlers[i]->xBufferRX.u8available = Size;
 80007a0:	4a31      	ldr	r2, [pc, #196]	; (8000868 <HAL_UARTEx_RxEventCallback+0x104>)
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007a8:	887a      	ldrh	r2, [r7, #2]
 80007aa:	b2d2      	uxtb	r2, r2
 80007ac:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
		    				mHandlers[i]->xBufferRX.overflow = false;
 80007b0:	4a2d      	ldr	r2, [pc, #180]	; (8000868 <HAL_UARTEx_RxEventCallback+0x104>)
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007b8:	2200      	movs	r2, #0
 80007ba:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f

		    				while(HAL_UARTEx_ReceiveToIdle_DMA(mHandlers[i]->port, mHandlers[i]->xBufferRX.uxBuffer, MAX_BUFFER) != HAL_OK)
 80007be:	e007      	b.n	80007d0 <HAL_UARTEx_RxEventCallback+0x6c>
		    				{
		    					HAL_UART_DMAStop(mHandlers[i]->port);
 80007c0:	4a29      	ldr	r2, [pc, #164]	; (8000868 <HAL_UARTEx_RxEventCallback+0x104>)
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007c8:	685b      	ldr	r3, [r3, #4]
 80007ca:	4618      	mov	r0, r3
 80007cc:	f001 fc08 	bl	8001fe0 <HAL_UART_DMAStop>
		    				while(HAL_UARTEx_ReceiveToIdle_DMA(mHandlers[i]->port, mHandlers[i]->xBufferRX.uxBuffer, MAX_BUFFER) != HAL_OK)
 80007d0:	4a25      	ldr	r2, [pc, #148]	; (8000868 <HAL_UARTEx_RxEventCallback+0x104>)
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007d8:	6858      	ldr	r0, [r3, #4]
 80007da:	4a23      	ldr	r2, [pc, #140]	; (8000868 <HAL_UARTEx_RxEventCallback+0x104>)
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007e2:	33bc      	adds	r3, #188	; 0xbc
 80007e4:	2280      	movs	r2, #128	; 0x80
 80007e6:	4619      	mov	r1, r3
 80007e8:	f001 fc79 	bl	80020de <HAL_UARTEx_ReceiveToIdle_DMA>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d1e6      	bne.n	80007c0 <HAL_UARTEx_RxEventCallback+0x5c>

		    				}
		    				__HAL_DMA_DISABLE_IT(mHandlers[i]->port->hdmarx, DMA_IT_HT); // we don't need half-transfer interrupt
 80007f2:	4a1d      	ldr	r2, [pc, #116]	; (8000868 <HAL_UARTEx_RxEventCallback+0x104>)
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007fa:	685b      	ldr	r3, [r3, #4]
 80007fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	681a      	ldr	r2, [r3, #0]
 8000802:	4919      	ldr	r1, [pc, #100]	; (8000868 <HAL_UARTEx_RxEventCallback+0x104>)
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800080a:	685b      	ldr	r3, [r3, #4]
 800080c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	f022 0208 	bic.w	r2, r2, #8
 8000814:	601a      	str	r2, [r3, #0]

		    				xTaskNotifyFromISR(mHandlers[i]->myTaskModbusAHandle, 0 , eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 8000816:	4a14      	ldr	r2, [pc, #80]	; (8000868 <HAL_UARTEx_RxEventCallback+0x104>)
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800081e:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
 8000822:	f107 0308 	add.w	r3, r7, #8
 8000826:	9300      	str	r3, [sp, #0]
 8000828:	2300      	movs	r3, #0
 800082a:	2203      	movs	r2, #3
 800082c:	2100      	movs	r1, #0
 800082e:	f003 fa45 	bl	8003cbc <xTaskGenericNotifyFromISR>
	    			}
	    		}

	    		break;
 8000832:	e009      	b.n	8000848 <HAL_UARTEx_RxEventCallback+0xe4>
	    for (i = 0; i < numberHandlers; i++ )
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	3301      	adds	r3, #1
 8000838:	60fb      	str	r3, [r7, #12]
 800083a:	4b0c      	ldr	r3, [pc, #48]	; (800086c <HAL_UARTEx_RxEventCallback+0x108>)
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	461a      	mov	r2, r3
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	4293      	cmp	r3, r2
 8000844:	db99      	blt.n	800077a <HAL_UARTEx_RxEventCallback+0x16>
 8000846:	e000      	b.n	800084a <HAL_UARTEx_RxEventCallback+0xe6>
	    		break;
 8000848:	bf00      	nop
	    	}
	    }
	    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800084a:	68bb      	ldr	r3, [r7, #8]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d007      	beq.n	8000860 <HAL_UARTEx_RxEventCallback+0xfc>
 8000850:	4b07      	ldr	r3, [pc, #28]	; (8000870 <HAL_UARTEx_RxEventCallback+0x10c>)
 8000852:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	f3bf 8f4f 	dsb	sy
 800085c:	f3bf 8f6f 	isb	sy
}
 8000860:	bf00      	nop
 8000862:	3710      	adds	r7, #16
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	200004f8 	.word	0x200004f8
 800086c:	2000002c 	.word	0x2000002c
 8000870:	e000ed04 	.word	0xe000ed04

08000874 <HAL_TIM_PeriodElapsedCallback>:
//  }
//  return len;
//}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
//  }
//  if (htim->Instance == TIM12) // check if the interrupt comes from TIM12
//  {
//    link_callback_IP();
//  }
}
 800087c:	bf00      	nop
 800087e:	370c      	adds	r7, #12
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr

08000888 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800088c:	f000 f95e 	bl	8000b4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000890:	f000 f802 	bl	8000898 <SystemClock_Config>
//  osKernelStart();

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000894:	e7fe      	b.n	8000894 <main+0xc>
	...

08000898 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b094      	sub	sp, #80	; 0x50
 800089c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800089e:	f107 0320 	add.w	r3, r7, #32
 80008a2:	2230      	movs	r2, #48	; 0x30
 80008a4:	2100      	movs	r1, #0
 80008a6:	4618      	mov	r0, r3
 80008a8:	f003 fcc2 	bl	8004230 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008ac:	f107 030c 	add.w	r3, r7, #12
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	605a      	str	r2, [r3, #4]
 80008b6:	609a      	str	r2, [r3, #8]
 80008b8:	60da      	str	r2, [r3, #12]
 80008ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008bc:	2300      	movs	r3, #0
 80008be:	60bb      	str	r3, [r7, #8]
 80008c0:	4b28      	ldr	r3, [pc, #160]	; (8000964 <SystemClock_Config+0xcc>)
 80008c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c4:	4a27      	ldr	r2, [pc, #156]	; (8000964 <SystemClock_Config+0xcc>)
 80008c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008ca:	6413      	str	r3, [r2, #64]	; 0x40
 80008cc:	4b25      	ldr	r3, [pc, #148]	; (8000964 <SystemClock_Config+0xcc>)
 80008ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008d4:	60bb      	str	r3, [r7, #8]
 80008d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008d8:	2300      	movs	r3, #0
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	4b22      	ldr	r3, [pc, #136]	; (8000968 <SystemClock_Config+0xd0>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a21      	ldr	r2, [pc, #132]	; (8000968 <SystemClock_Config+0xd0>)
 80008e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008e6:	6013      	str	r3, [r2, #0]
 80008e8:	4b1f      	ldr	r3, [pc, #124]	; (8000968 <SystemClock_Config+0xd0>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008f0:	607b      	str	r3, [r7, #4]
 80008f2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008f4:	2301      	movs	r3, #1
 80008f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008fe:	2302      	movs	r3, #2
 8000900:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000902:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000906:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000908:	2304      	movs	r3, #4
 800090a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800090c:	23a8      	movs	r3, #168	; 0xa8
 800090e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000910:	2302      	movs	r3, #2
 8000912:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000914:	2304      	movs	r3, #4
 8000916:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000918:	f107 0320 	add.w	r3, r7, #32
 800091c:	4618      	mov	r0, r3
 800091e:	f000 fd87 	bl	8001430 <HAL_RCC_OscConfig>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000928:	f000 f820 	bl	800096c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800092c:	230f      	movs	r3, #15
 800092e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000930:	2302      	movs	r3, #2
 8000932:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000934:	2300      	movs	r3, #0
 8000936:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000938:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800093c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800093e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000942:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000944:	f107 030c 	add.w	r3, r7, #12
 8000948:	2105      	movs	r1, #5
 800094a:	4618      	mov	r0, r3
 800094c:	f000 ffe8 	bl	8001920 <HAL_RCC_ClockConfig>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000956:	f000 f809 	bl	800096c <Error_Handler>
  }
}
 800095a:	bf00      	nop
 800095c:	3750      	adds	r7, #80	; 0x50
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40023800 	.word	0x40023800
 8000968:	40007000 	.word	0x40007000

0800096c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000970:	b672      	cpsid	i
}
 8000972:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000974:	e7fe      	b.n	8000974 <Error_Handler+0x8>
	...

08000978 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	607b      	str	r3, [r7, #4]
 8000982:	4b12      	ldr	r3, [pc, #72]	; (80009cc <HAL_MspInit+0x54>)
 8000984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000986:	4a11      	ldr	r2, [pc, #68]	; (80009cc <HAL_MspInit+0x54>)
 8000988:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800098c:	6453      	str	r3, [r2, #68]	; 0x44
 800098e:	4b0f      	ldr	r3, [pc, #60]	; (80009cc <HAL_MspInit+0x54>)
 8000990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000992:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000996:	607b      	str	r3, [r7, #4]
 8000998:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	603b      	str	r3, [r7, #0]
 800099e:	4b0b      	ldr	r3, [pc, #44]	; (80009cc <HAL_MspInit+0x54>)
 80009a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a2:	4a0a      	ldr	r2, [pc, #40]	; (80009cc <HAL_MspInit+0x54>)
 80009a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009a8:	6413      	str	r3, [r2, #64]	; 0x40
 80009aa:	4b08      	ldr	r3, [pc, #32]	; (80009cc <HAL_MspInit+0x54>)
 80009ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009b2:	603b      	str	r3, [r7, #0]
 80009b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009b6:	2200      	movs	r2, #0
 80009b8:	210f      	movs	r1, #15
 80009ba:	f06f 0001 	mvn.w	r0, #1
 80009be:	f000 f9f4 	bl	8000daa <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009c2:	bf00      	nop
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	40023800 	.word	0x40023800

080009d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009d4:	e7fe      	b.n	80009d4 <NMI_Handler+0x4>

080009d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009da:	e7fe      	b.n	80009da <HardFault_Handler+0x4>

080009dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009e0:	e7fe      	b.n	80009e0 <MemManage_Handler+0x4>

080009e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009e2:	b480      	push	{r7}
 80009e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009e6:	e7fe      	b.n	80009e6 <BusFault_Handler+0x4>

080009e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009ec:	e7fe      	b.n	80009ec <UsageFault_Handler+0x4>

080009ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ee:	b480      	push	{r7}
 80009f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009f2:	bf00      	nop
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr

080009fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a00:	f000 f8f6 	bl	8000bf0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000a04:	f003 f8ce 	bl	8003ba4 <xTaskGetSchedulerState>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b01      	cmp	r3, #1
 8000a0c:	d001      	beq.n	8000a12 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000a0e:	f003 fb7b 	bl	8004108 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
	...

08000a18 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8000a1c:	4802      	ldr	r0, [pc, #8]	; (8000a28 <DMA1_Stream0_IRQHandler+0x10>)
 8000a1e:	f000 fad7 	bl	8000fd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000a22:	bf00      	nop
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	20000720 	.word	0x20000720

08000a2c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a30:	4802      	ldr	r0, [pc, #8]	; (8000a3c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000a32:	f001 f961 	bl	8001cf8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20000548 	.word	0x20000548

08000a40 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a44:	4802      	ldr	r0, [pc, #8]	; (8000a50 <USART1_IRQHandler+0x10>)
 8000a46:	f001 fbaf 	bl	80021a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	200006dc 	.word	0x200006dc

08000a54 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8000a58:	4803      	ldr	r0, [pc, #12]	; (8000a68 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 8000a5a:	f001 f94d 	bl	8001cf8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 8000a5e:	4803      	ldr	r0, [pc, #12]	; (8000a6c <TIM8_BRK_TIM12_IRQHandler+0x18>)
 8000a60:	f001 f94a 	bl	8001cf8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8000a64:	bf00      	nop
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	20000500 	.word	0x20000500
 8000a6c:	20000590 	.word	0x20000590

08000a70 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8000a74:	4802      	ldr	r0, [pc, #8]	; (8000a80 <DMA1_Stream7_IRQHandler+0x10>)
 8000a76:	f000 faab 	bl	8000fd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20000780 	.word	0x20000780

08000a84 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8000a88:	4802      	ldr	r0, [pc, #8]	; (8000a94 <UART5_IRQHandler+0x10>)
 8000a8a:	f001 fb8d 	bl	80021a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	20000638 	.word	0x20000638

08000a98 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000a9c:	4802      	ldr	r0, [pc, #8]	; (8000aa8 <DMA2_Stream2_IRQHandler+0x10>)
 8000a9e:	f000 fa97 	bl	8000fd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	2000067c 	.word	0x2000067c

08000aac <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000ab0:	4802      	ldr	r0, [pc, #8]	; (8000abc <ETH_IRQHandler+0x10>)
 8000ab2:	f000 fc45 	bl	8001340 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	200020b4 	.word	0x200020b4

08000ac0 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000ac4:	4802      	ldr	r0, [pc, #8]	; (8000ad0 <DMA2_Stream7_IRQHandler+0x10>)
 8000ac6:	f000 fa83 	bl	8000fd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	200005d8 	.word	0x200005d8

08000ad4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ad8:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <SystemInit+0x20>)
 8000ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ade:	4a05      	ldr	r2, [pc, #20]	; (8000af4 <SystemInit+0x20>)
 8000ae0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ae4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	e000ed00 	.word	0xe000ed00

08000af8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000af8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b30 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000afc:	480d      	ldr	r0, [pc, #52]	; (8000b34 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000afe:	490e      	ldr	r1, [pc, #56]	; (8000b38 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b00:	4a0e      	ldr	r2, [pc, #56]	; (8000b3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b04:	e002      	b.n	8000b0c <LoopCopyDataInit>

08000b06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b0a:	3304      	adds	r3, #4

08000b0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b10:	d3f9      	bcc.n	8000b06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b12:	4a0b      	ldr	r2, [pc, #44]	; (8000b40 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b14:	4c0b      	ldr	r4, [pc, #44]	; (8000b44 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b18:	e001      	b.n	8000b1e <LoopFillZerobss>

08000b1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b1c:	3204      	adds	r2, #4

08000b1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b20:	d3fb      	bcc.n	8000b1a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b22:	f7ff ffd7 	bl	8000ad4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b26:	f003 fb51 	bl	80041cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b2a:	f7ff fead 	bl	8000888 <main>
  bx  lr    
 8000b2e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b30:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 8000b34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b38:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000b3c:	08004278 	.word	0x08004278
  ldr r2, =_sbss
 8000b40:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000b44:	200038cc 	.word	0x200038cc

08000b48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b48:	e7fe      	b.n	8000b48 <ADC_IRQHandler>
	...

08000b4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b50:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <HAL_Init+0x40>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a0d      	ldr	r2, [pc, #52]	; (8000b8c <HAL_Init+0x40>)
 8000b56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b5c:	4b0b      	ldr	r3, [pc, #44]	; (8000b8c <HAL_Init+0x40>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a0a      	ldr	r2, [pc, #40]	; (8000b8c <HAL_Init+0x40>)
 8000b62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b68:	4b08      	ldr	r3, [pc, #32]	; (8000b8c <HAL_Init+0x40>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a07      	ldr	r2, [pc, #28]	; (8000b8c <HAL_Init+0x40>)
 8000b6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b74:	2003      	movs	r0, #3
 8000b76:	f000 f90d 	bl	8000d94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b7a:	200f      	movs	r0, #15
 8000b7c:	f000 f808 	bl	8000b90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b80:	f7ff fefa 	bl	8000978 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b84:	2300      	movs	r3, #0
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40023c00 	.word	0x40023c00

08000b90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b98:	4b12      	ldr	r3, [pc, #72]	; (8000be4 <HAL_InitTick+0x54>)
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	4b12      	ldr	r3, [pc, #72]	; (8000be8 <HAL_InitTick+0x58>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ba6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f000 f917 	bl	8000de2 <HAL_SYSTICK_Config>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	e00e      	b.n	8000bdc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2b0f      	cmp	r3, #15
 8000bc2:	d80a      	bhi.n	8000bda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	6879      	ldr	r1, [r7, #4]
 8000bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bcc:	f000 f8ed 	bl	8000daa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bd0:	4a06      	ldr	r2, [pc, #24]	; (8000bec <HAL_InitTick+0x5c>)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	e000      	b.n	8000bdc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bda:	2301      	movs	r3, #1
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	20000000 	.word	0x20000000
 8000be8:	20000008 	.word	0x20000008
 8000bec:	20000004 	.word	0x20000004

08000bf0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bf4:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <HAL_IncTick+0x20>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <HAL_IncTick+0x24>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4413      	add	r3, r2
 8000c00:	4a04      	ldr	r2, [pc, #16]	; (8000c14 <HAL_IncTick+0x24>)
 8000c02:	6013      	str	r3, [r2, #0]
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	20000008 	.word	0x20000008
 8000c14:	200007e0 	.word	0x200007e0

08000c18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c1c:	4b03      	ldr	r3, [pc, #12]	; (8000c2c <HAL_GetTick+0x14>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	200007e0 	.word	0x200007e0

08000c30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b085      	sub	sp, #20
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	f003 0307 	and.w	r3, r3, #7
 8000c3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c40:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <__NVIC_SetPriorityGrouping+0x44>)
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c46:	68ba      	ldr	r2, [r7, #8]
 8000c48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c62:	4a04      	ldr	r2, [pc, #16]	; (8000c74 <__NVIC_SetPriorityGrouping+0x44>)
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	60d3      	str	r3, [r2, #12]
}
 8000c68:	bf00      	nop
 8000c6a:	3714      	adds	r7, #20
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr
 8000c74:	e000ed00 	.word	0xe000ed00

08000c78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c7c:	4b04      	ldr	r3, [pc, #16]	; (8000c90 <__NVIC_GetPriorityGrouping+0x18>)
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	0a1b      	lsrs	r3, r3, #8
 8000c82:	f003 0307 	and.w	r3, r3, #7
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	e000ed00 	.word	0xe000ed00

08000c94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	6039      	str	r1, [r7, #0]
 8000c9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	db0a      	blt.n	8000cbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	b2da      	uxtb	r2, r3
 8000cac:	490c      	ldr	r1, [pc, #48]	; (8000ce0 <__NVIC_SetPriority+0x4c>)
 8000cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb2:	0112      	lsls	r2, r2, #4
 8000cb4:	b2d2      	uxtb	r2, r2
 8000cb6:	440b      	add	r3, r1
 8000cb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cbc:	e00a      	b.n	8000cd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	b2da      	uxtb	r2, r3
 8000cc2:	4908      	ldr	r1, [pc, #32]	; (8000ce4 <__NVIC_SetPriority+0x50>)
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
 8000cc6:	f003 030f 	and.w	r3, r3, #15
 8000cca:	3b04      	subs	r3, #4
 8000ccc:	0112      	lsls	r2, r2, #4
 8000cce:	b2d2      	uxtb	r2, r2
 8000cd0:	440b      	add	r3, r1
 8000cd2:	761a      	strb	r2, [r3, #24]
}
 8000cd4:	bf00      	nop
 8000cd6:	370c      	adds	r7, #12
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr
 8000ce0:	e000e100 	.word	0xe000e100
 8000ce4:	e000ed00 	.word	0xe000ed00

08000ce8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b089      	sub	sp, #36	; 0x24
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	60f8      	str	r0, [r7, #12]
 8000cf0:	60b9      	str	r1, [r7, #8]
 8000cf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	f003 0307 	and.w	r3, r3, #7
 8000cfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cfc:	69fb      	ldr	r3, [r7, #28]
 8000cfe:	f1c3 0307 	rsb	r3, r3, #7
 8000d02:	2b04      	cmp	r3, #4
 8000d04:	bf28      	it	cs
 8000d06:	2304      	movcs	r3, #4
 8000d08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	3304      	adds	r3, #4
 8000d0e:	2b06      	cmp	r3, #6
 8000d10:	d902      	bls.n	8000d18 <NVIC_EncodePriority+0x30>
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	3b03      	subs	r3, #3
 8000d16:	e000      	b.n	8000d1a <NVIC_EncodePriority+0x32>
 8000d18:	2300      	movs	r3, #0
 8000d1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d1c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d20:	69bb      	ldr	r3, [r7, #24]
 8000d22:	fa02 f303 	lsl.w	r3, r2, r3
 8000d26:	43da      	mvns	r2, r3
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	401a      	ands	r2, r3
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d30:	f04f 31ff 	mov.w	r1, #4294967295
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	fa01 f303 	lsl.w	r3, r1, r3
 8000d3a:	43d9      	mvns	r1, r3
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d40:	4313      	orrs	r3, r2
         );
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3724      	adds	r7, #36	; 0x24
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
	...

08000d50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	3b01      	subs	r3, #1
 8000d5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d60:	d301      	bcc.n	8000d66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d62:	2301      	movs	r3, #1
 8000d64:	e00f      	b.n	8000d86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d66:	4a0a      	ldr	r2, [pc, #40]	; (8000d90 <SysTick_Config+0x40>)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	3b01      	subs	r3, #1
 8000d6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d6e:	210f      	movs	r1, #15
 8000d70:	f04f 30ff 	mov.w	r0, #4294967295
 8000d74:	f7ff ff8e 	bl	8000c94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d78:	4b05      	ldr	r3, [pc, #20]	; (8000d90 <SysTick_Config+0x40>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d7e:	4b04      	ldr	r3, [pc, #16]	; (8000d90 <SysTick_Config+0x40>)
 8000d80:	2207      	movs	r2, #7
 8000d82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d84:	2300      	movs	r3, #0
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	e000e010 	.word	0xe000e010

08000d94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d9c:	6878      	ldr	r0, [r7, #4]
 8000d9e:	f7ff ff47 	bl	8000c30 <__NVIC_SetPriorityGrouping>
}
 8000da2:	bf00      	nop
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}

08000daa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b086      	sub	sp, #24
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	4603      	mov	r3, r0
 8000db2:	60b9      	str	r1, [r7, #8]
 8000db4:	607a      	str	r2, [r7, #4]
 8000db6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000db8:	2300      	movs	r3, #0
 8000dba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dbc:	f7ff ff5c 	bl	8000c78 <__NVIC_GetPriorityGrouping>
 8000dc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dc2:	687a      	ldr	r2, [r7, #4]
 8000dc4:	68b9      	ldr	r1, [r7, #8]
 8000dc6:	6978      	ldr	r0, [r7, #20]
 8000dc8:	f7ff ff8e 	bl	8000ce8 <NVIC_EncodePriority>
 8000dcc:	4602      	mov	r2, r0
 8000dce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dd2:	4611      	mov	r1, r2
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff ff5d 	bl	8000c94 <__NVIC_SetPriority>
}
 8000dda:	bf00      	nop
 8000ddc:	3718      	adds	r7, #24
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b082      	sub	sp, #8
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dea:	6878      	ldr	r0, [r7, #4]
 8000dec:	f7ff ffb0 	bl	8000d50 <SysTick_Config>
 8000df0:	4603      	mov	r3, r0
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b086      	sub	sp, #24
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	60f8      	str	r0, [r7, #12]
 8000e02:	60b9      	str	r1, [r7, #8]
 8000e04:	607a      	str	r2, [r7, #4]
 8000e06:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e10:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d101      	bne.n	8000e20 <HAL_DMA_Start_IT+0x26>
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	e040      	b.n	8000ea2 <HAL_DMA_Start_IT+0xa8>
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	2201      	movs	r2, #1
 8000e24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d12f      	bne.n	8000e94 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	2202      	movs	r2, #2
 8000e38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	2200      	movs	r2, #0
 8000e40:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	687a      	ldr	r2, [r7, #4]
 8000e46:	68b9      	ldr	r1, [r7, #8]
 8000e48:	68f8      	ldr	r0, [r7, #12]
 8000e4a:	f000 fa4b 	bl	80012e4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e52:	223f      	movs	r2, #63	; 0x3f
 8000e54:	409a      	lsls	r2, r3
 8000e56:	693b      	ldr	r3, [r7, #16]
 8000e58:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f042 0216 	orr.w	r2, r2, #22
 8000e68:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d007      	beq.n	8000e82 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f042 0208 	orr.w	r2, r2, #8
 8000e80:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f042 0201 	orr.w	r2, r2, #1
 8000e90:	601a      	str	r2, [r3, #0]
 8000e92:	e005      	b.n	8000ea0 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	2200      	movs	r2, #0
 8000e98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8000ea0:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3718      	adds	r7, #24
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}

08000eaa <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	b084      	sub	sp, #16
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eb6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000eb8:	f7ff feae 	bl	8000c18 <HAL_GetTick>
 8000ebc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	2b02      	cmp	r3, #2
 8000ec8:	d008      	beq.n	8000edc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2280      	movs	r2, #128	; 0x80
 8000ece:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	e052      	b.n	8000f82 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f022 0216 	bic.w	r2, r2, #22
 8000eea:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	695a      	ldr	r2, [r3, #20]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000efa:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d103      	bne.n	8000f0c <HAL_DMA_Abort+0x62>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d007      	beq.n	8000f1c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f022 0208 	bic.w	r2, r2, #8
 8000f1a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f022 0201 	bic.w	r2, r2, #1
 8000f2a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f2c:	e013      	b.n	8000f56 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f2e:	f7ff fe73 	bl	8000c18 <HAL_GetTick>
 8000f32:	4602      	mov	r2, r0
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	1ad3      	subs	r3, r2, r3
 8000f38:	2b05      	cmp	r3, #5
 8000f3a:	d90c      	bls.n	8000f56 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2220      	movs	r2, #32
 8000f40:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2203      	movs	r2, #3
 8000f46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000f52:	2303      	movs	r3, #3
 8000f54:	e015      	b.n	8000f82 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f003 0301 	and.w	r3, r3, #1
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d1e4      	bne.n	8000f2e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f68:	223f      	movs	r2, #63	; 0x3f
 8000f6a:	409a      	lsls	r2, r3
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2201      	movs	r2, #1
 8000f74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000f80:	2300      	movs	r3, #0
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3710      	adds	r7, #16
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	b083      	sub	sp, #12
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	2b02      	cmp	r3, #2
 8000f9c:	d004      	beq.n	8000fa8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2280      	movs	r2, #128	; 0x80
 8000fa2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	e00c      	b.n	8000fc2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2205      	movs	r2, #5
 8000fac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f022 0201 	bic.w	r2, r2, #1
 8000fbe:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000fc0:	2300      	movs	r3, #0
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
	...

08000fd0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b086      	sub	sp, #24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000fdc:	4b8e      	ldr	r3, [pc, #568]	; (8001218 <HAL_DMA_IRQHandler+0x248>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a8e      	ldr	r2, [pc, #568]	; (800121c <HAL_DMA_IRQHandler+0x24c>)
 8000fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8000fe6:	0a9b      	lsrs	r3, r3, #10
 8000fe8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ffa:	2208      	movs	r2, #8
 8000ffc:	409a      	lsls	r2, r3
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	4013      	ands	r3, r2
 8001002:	2b00      	cmp	r3, #0
 8001004:	d01a      	beq.n	800103c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f003 0304 	and.w	r3, r3, #4
 8001010:	2b00      	cmp	r3, #0
 8001012:	d013      	beq.n	800103c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f022 0204 	bic.w	r2, r2, #4
 8001022:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001028:	2208      	movs	r2, #8
 800102a:	409a      	lsls	r2, r3
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001034:	f043 0201 	orr.w	r2, r3, #1
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001040:	2201      	movs	r2, #1
 8001042:	409a      	lsls	r2, r3
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	4013      	ands	r3, r2
 8001048:	2b00      	cmp	r3, #0
 800104a:	d012      	beq.n	8001072 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	695b      	ldr	r3, [r3, #20]
 8001052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001056:	2b00      	cmp	r3, #0
 8001058:	d00b      	beq.n	8001072 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800105e:	2201      	movs	r2, #1
 8001060:	409a      	lsls	r2, r3
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800106a:	f043 0202 	orr.w	r2, r3, #2
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001076:	2204      	movs	r2, #4
 8001078:	409a      	lsls	r2, r3
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	4013      	ands	r3, r2
 800107e:	2b00      	cmp	r3, #0
 8001080:	d012      	beq.n	80010a8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f003 0302 	and.w	r3, r3, #2
 800108c:	2b00      	cmp	r3, #0
 800108e:	d00b      	beq.n	80010a8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001094:	2204      	movs	r2, #4
 8001096:	409a      	lsls	r2, r3
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010a0:	f043 0204 	orr.w	r2, r3, #4
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010ac:	2210      	movs	r2, #16
 80010ae:	409a      	lsls	r2, r3
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	4013      	ands	r3, r2
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d043      	beq.n	8001140 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f003 0308 	and.w	r3, r3, #8
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d03c      	beq.n	8001140 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010ca:	2210      	movs	r2, #16
 80010cc:	409a      	lsls	r2, r3
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d018      	beq.n	8001112 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d108      	bne.n	8001100 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d024      	beq.n	8001140 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	4798      	blx	r3
 80010fe:	e01f      	b.n	8001140 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001104:	2b00      	cmp	r3, #0
 8001106:	d01b      	beq.n	8001140 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	4798      	blx	r3
 8001110:	e016      	b.n	8001140 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800111c:	2b00      	cmp	r3, #0
 800111e:	d107      	bne.n	8001130 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f022 0208 	bic.w	r2, r2, #8
 800112e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001134:	2b00      	cmp	r3, #0
 8001136:	d003      	beq.n	8001140 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001144:	2220      	movs	r2, #32
 8001146:	409a      	lsls	r2, r3
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	4013      	ands	r3, r2
 800114c:	2b00      	cmp	r3, #0
 800114e:	f000 808f 	beq.w	8001270 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f003 0310 	and.w	r3, r3, #16
 800115c:	2b00      	cmp	r3, #0
 800115e:	f000 8087 	beq.w	8001270 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001166:	2220      	movs	r2, #32
 8001168:	409a      	lsls	r2, r3
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001174:	b2db      	uxtb	r3, r3
 8001176:	2b05      	cmp	r3, #5
 8001178:	d136      	bne.n	80011e8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f022 0216 	bic.w	r2, r2, #22
 8001188:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	695a      	ldr	r2, [r3, #20]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001198:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d103      	bne.n	80011aa <HAL_DMA_IRQHandler+0x1da>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d007      	beq.n	80011ba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f022 0208 	bic.w	r2, r2, #8
 80011b8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011be:	223f      	movs	r2, #63	; 0x3f
 80011c0:	409a      	lsls	r2, r3
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2201      	movs	r2, #1
 80011ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2200      	movs	r2, #0
 80011d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d07e      	beq.n	80012dc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	4798      	blx	r3
        }
        return;
 80011e6:	e079      	b.n	80012dc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d01d      	beq.n	8001232 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001200:	2b00      	cmp	r3, #0
 8001202:	d10d      	bne.n	8001220 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001208:	2b00      	cmp	r3, #0
 800120a:	d031      	beq.n	8001270 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	4798      	blx	r3
 8001214:	e02c      	b.n	8001270 <HAL_DMA_IRQHandler+0x2a0>
 8001216:	bf00      	nop
 8001218:	20000000 	.word	0x20000000
 800121c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001224:	2b00      	cmp	r3, #0
 8001226:	d023      	beq.n	8001270 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	4798      	blx	r3
 8001230:	e01e      	b.n	8001270 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800123c:	2b00      	cmp	r3, #0
 800123e:	d10f      	bne.n	8001260 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f022 0210 	bic.w	r2, r2, #16
 800124e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2201      	movs	r2, #1
 8001254:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2200      	movs	r2, #0
 800125c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001264:	2b00      	cmp	r3, #0
 8001266:	d003      	beq.n	8001270 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001274:	2b00      	cmp	r3, #0
 8001276:	d032      	beq.n	80012de <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800127c:	f003 0301 	and.w	r3, r3, #1
 8001280:	2b00      	cmp	r3, #0
 8001282:	d022      	beq.n	80012ca <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2205      	movs	r2, #5
 8001288:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f022 0201 	bic.w	r2, r2, #1
 800129a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	3301      	adds	r3, #1
 80012a0:	60bb      	str	r3, [r7, #8]
 80012a2:	697a      	ldr	r2, [r7, #20]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d307      	bcc.n	80012b8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d1f2      	bne.n	800129c <HAL_DMA_IRQHandler+0x2cc>
 80012b6:	e000      	b.n	80012ba <HAL_DMA_IRQHandler+0x2ea>
          break;
 80012b8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2201      	movs	r2, #1
 80012be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2200      	movs	r2, #0
 80012c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d005      	beq.n	80012de <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	4798      	blx	r3
 80012da:	e000      	b.n	80012de <HAL_DMA_IRQHandler+0x30e>
        return;
 80012dc:	bf00      	nop
    }
  }
}
 80012de:	3718      	adds	r7, #24
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b085      	sub	sp, #20
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	60f8      	str	r0, [r7, #12]
 80012ec:	60b9      	str	r1, [r7, #8]
 80012ee:	607a      	str	r2, [r7, #4]
 80012f0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001300:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	683a      	ldr	r2, [r7, #0]
 8001308:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	2b40      	cmp	r3, #64	; 0x40
 8001310:	d108      	bne.n	8001324 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	68ba      	ldr	r2, [r7, #8]
 8001320:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001322:	e007      	b.n	8001334 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	68ba      	ldr	r2, [r7, #8]
 800132a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	687a      	ldr	r2, [r7, #4]
 8001332:	60da      	str	r2, [r3, #12]
}
 8001334:	bf00      	nop
 8001336:	3714      	adds	r7, #20
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001350:	695b      	ldr	r3, [r3, #20]
 8001352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001356:	2b40      	cmp	r3, #64	; 0x40
 8001358:	d112      	bne.n	8001380 <HAL_ETH_IRQHandler+0x40>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f001 fd4a 	bl	8002df4 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001368:	461a      	mov	r2, r3
 800136a:	2340      	movs	r3, #64	; 0x40
 800136c:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2201      	movs	r2, #1
 8001372:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2200      	movs	r2, #0
 800137a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800137e:	e01a      	b.n	80013b6 <HAL_ETH_IRQHandler+0x76>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001388:	695b      	ldr	r3, [r3, #20]
 800138a:	f003 0301 	and.w	r3, r3, #1
 800138e:	2b01      	cmp	r3, #1
 8001390:	d111      	bne.n	80013b6 <HAL_ETH_IRQHandler+0x76>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f000 f838 	bl	8001408 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013a0:	461a      	mov	r2, r3
 80013a2:	2301      	movs	r3, #1
 80013a4:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2201      	movs	r2, #1
 80013aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2200      	movs	r2, #0
 80013b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013be:	461a      	mov	r2, r3
 80013c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013c4:	6153      	str	r3, [r2, #20]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013ce:	695b      	ldr	r3, [r3, #20]
 80013d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80013d8:	d112      	bne.n	8001400 <HAL_ETH_IRQHandler+0xc0>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f000 f81e 	bl	800141c <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013e8:	461a      	mov	r2, r3
 80013ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013ee:	6153      	str	r3, [r2, #20]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2201      	movs	r2, #1
 80013f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2200      	movs	r2, #0
 80013fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8001400:	bf00      	nop
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}

08001408 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001410:	bf00      	nop
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001424:	bf00      	nop
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b086      	sub	sp, #24
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d101      	bne.n	8001442 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e267      	b.n	8001912 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	2b00      	cmp	r3, #0
 800144c:	d075      	beq.n	800153a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800144e:	4b88      	ldr	r3, [pc, #544]	; (8001670 <HAL_RCC_OscConfig+0x240>)
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	f003 030c 	and.w	r3, r3, #12
 8001456:	2b04      	cmp	r3, #4
 8001458:	d00c      	beq.n	8001474 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800145a:	4b85      	ldr	r3, [pc, #532]	; (8001670 <HAL_RCC_OscConfig+0x240>)
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001462:	2b08      	cmp	r3, #8
 8001464:	d112      	bne.n	800148c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001466:	4b82      	ldr	r3, [pc, #520]	; (8001670 <HAL_RCC_OscConfig+0x240>)
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800146e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001472:	d10b      	bne.n	800148c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001474:	4b7e      	ldr	r3, [pc, #504]	; (8001670 <HAL_RCC_OscConfig+0x240>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147c:	2b00      	cmp	r3, #0
 800147e:	d05b      	beq.n	8001538 <HAL_RCC_OscConfig+0x108>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d157      	bne.n	8001538 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	e242      	b.n	8001912 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001494:	d106      	bne.n	80014a4 <HAL_RCC_OscConfig+0x74>
 8001496:	4b76      	ldr	r3, [pc, #472]	; (8001670 <HAL_RCC_OscConfig+0x240>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a75      	ldr	r2, [pc, #468]	; (8001670 <HAL_RCC_OscConfig+0x240>)
 800149c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014a0:	6013      	str	r3, [r2, #0]
 80014a2:	e01d      	b.n	80014e0 <HAL_RCC_OscConfig+0xb0>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014ac:	d10c      	bne.n	80014c8 <HAL_RCC_OscConfig+0x98>
 80014ae:	4b70      	ldr	r3, [pc, #448]	; (8001670 <HAL_RCC_OscConfig+0x240>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a6f      	ldr	r2, [pc, #444]	; (8001670 <HAL_RCC_OscConfig+0x240>)
 80014b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014b8:	6013      	str	r3, [r2, #0]
 80014ba:	4b6d      	ldr	r3, [pc, #436]	; (8001670 <HAL_RCC_OscConfig+0x240>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a6c      	ldr	r2, [pc, #432]	; (8001670 <HAL_RCC_OscConfig+0x240>)
 80014c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014c4:	6013      	str	r3, [r2, #0]
 80014c6:	e00b      	b.n	80014e0 <HAL_RCC_OscConfig+0xb0>
 80014c8:	4b69      	ldr	r3, [pc, #420]	; (8001670 <HAL_RCC_OscConfig+0x240>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a68      	ldr	r2, [pc, #416]	; (8001670 <HAL_RCC_OscConfig+0x240>)
 80014ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014d2:	6013      	str	r3, [r2, #0]
 80014d4:	4b66      	ldr	r3, [pc, #408]	; (8001670 <HAL_RCC_OscConfig+0x240>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a65      	ldr	r2, [pc, #404]	; (8001670 <HAL_RCC_OscConfig+0x240>)
 80014da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d013      	beq.n	8001510 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e8:	f7ff fb96 	bl	8000c18 <HAL_GetTick>
 80014ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ee:	e008      	b.n	8001502 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014f0:	f7ff fb92 	bl	8000c18 <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	2b64      	cmp	r3, #100	; 0x64
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e207      	b.n	8001912 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001502:	4b5b      	ldr	r3, [pc, #364]	; (8001670 <HAL_RCC_OscConfig+0x240>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d0f0      	beq.n	80014f0 <HAL_RCC_OscConfig+0xc0>
 800150e:	e014      	b.n	800153a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001510:	f7ff fb82 	bl	8000c18 <HAL_GetTick>
 8001514:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001516:	e008      	b.n	800152a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001518:	f7ff fb7e 	bl	8000c18 <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	2b64      	cmp	r3, #100	; 0x64
 8001524:	d901      	bls.n	800152a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e1f3      	b.n	8001912 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800152a:	4b51      	ldr	r3, [pc, #324]	; (8001670 <HAL_RCC_OscConfig+0x240>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d1f0      	bne.n	8001518 <HAL_RCC_OscConfig+0xe8>
 8001536:	e000      	b.n	800153a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001538:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 0302 	and.w	r3, r3, #2
 8001542:	2b00      	cmp	r3, #0
 8001544:	d063      	beq.n	800160e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001546:	4b4a      	ldr	r3, [pc, #296]	; (8001670 <HAL_RCC_OscConfig+0x240>)
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	f003 030c 	and.w	r3, r3, #12
 800154e:	2b00      	cmp	r3, #0
 8001550:	d00b      	beq.n	800156a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001552:	4b47      	ldr	r3, [pc, #284]	; (8001670 <HAL_RCC_OscConfig+0x240>)
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800155a:	2b08      	cmp	r3, #8
 800155c:	d11c      	bne.n	8001598 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800155e:	4b44      	ldr	r3, [pc, #272]	; (8001670 <HAL_RCC_OscConfig+0x240>)
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d116      	bne.n	8001598 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800156a:	4b41      	ldr	r3, [pc, #260]	; (8001670 <HAL_RCC_OscConfig+0x240>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0302 	and.w	r3, r3, #2
 8001572:	2b00      	cmp	r3, #0
 8001574:	d005      	beq.n	8001582 <HAL_RCC_OscConfig+0x152>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	68db      	ldr	r3, [r3, #12]
 800157a:	2b01      	cmp	r3, #1
 800157c:	d001      	beq.n	8001582 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e1c7      	b.n	8001912 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001582:	4b3b      	ldr	r3, [pc, #236]	; (8001670 <HAL_RCC_OscConfig+0x240>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	691b      	ldr	r3, [r3, #16]
 800158e:	00db      	lsls	r3, r3, #3
 8001590:	4937      	ldr	r1, [pc, #220]	; (8001670 <HAL_RCC_OscConfig+0x240>)
 8001592:	4313      	orrs	r3, r2
 8001594:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001596:	e03a      	b.n	800160e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d020      	beq.n	80015e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015a0:	4b34      	ldr	r3, [pc, #208]	; (8001674 <HAL_RCC_OscConfig+0x244>)
 80015a2:	2201      	movs	r2, #1
 80015a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015a6:	f7ff fb37 	bl	8000c18 <HAL_GetTick>
 80015aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015ac:	e008      	b.n	80015c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015ae:	f7ff fb33 	bl	8000c18 <HAL_GetTick>
 80015b2:	4602      	mov	r2, r0
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d901      	bls.n	80015c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80015bc:	2303      	movs	r3, #3
 80015be:	e1a8      	b.n	8001912 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015c0:	4b2b      	ldr	r3, [pc, #172]	; (8001670 <HAL_RCC_OscConfig+0x240>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 0302 	and.w	r3, r3, #2
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d0f0      	beq.n	80015ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015cc:	4b28      	ldr	r3, [pc, #160]	; (8001670 <HAL_RCC_OscConfig+0x240>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	691b      	ldr	r3, [r3, #16]
 80015d8:	00db      	lsls	r3, r3, #3
 80015da:	4925      	ldr	r1, [pc, #148]	; (8001670 <HAL_RCC_OscConfig+0x240>)
 80015dc:	4313      	orrs	r3, r2
 80015de:	600b      	str	r3, [r1, #0]
 80015e0:	e015      	b.n	800160e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015e2:	4b24      	ldr	r3, [pc, #144]	; (8001674 <HAL_RCC_OscConfig+0x244>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e8:	f7ff fb16 	bl	8000c18 <HAL_GetTick>
 80015ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015ee:	e008      	b.n	8001602 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015f0:	f7ff fb12 	bl	8000c18 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e187      	b.n	8001912 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001602:	4b1b      	ldr	r3, [pc, #108]	; (8001670 <HAL_RCC_OscConfig+0x240>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0302 	and.w	r3, r3, #2
 800160a:	2b00      	cmp	r3, #0
 800160c:	d1f0      	bne.n	80015f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 0308 	and.w	r3, r3, #8
 8001616:	2b00      	cmp	r3, #0
 8001618:	d036      	beq.n	8001688 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	695b      	ldr	r3, [r3, #20]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d016      	beq.n	8001650 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001622:	4b15      	ldr	r3, [pc, #84]	; (8001678 <HAL_RCC_OscConfig+0x248>)
 8001624:	2201      	movs	r2, #1
 8001626:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001628:	f7ff faf6 	bl	8000c18 <HAL_GetTick>
 800162c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800162e:	e008      	b.n	8001642 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001630:	f7ff faf2 	bl	8000c18 <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	2b02      	cmp	r3, #2
 800163c:	d901      	bls.n	8001642 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e167      	b.n	8001912 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001642:	4b0b      	ldr	r3, [pc, #44]	; (8001670 <HAL_RCC_OscConfig+0x240>)
 8001644:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	2b00      	cmp	r3, #0
 800164c:	d0f0      	beq.n	8001630 <HAL_RCC_OscConfig+0x200>
 800164e:	e01b      	b.n	8001688 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001650:	4b09      	ldr	r3, [pc, #36]	; (8001678 <HAL_RCC_OscConfig+0x248>)
 8001652:	2200      	movs	r2, #0
 8001654:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001656:	f7ff fadf 	bl	8000c18 <HAL_GetTick>
 800165a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800165c:	e00e      	b.n	800167c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800165e:	f7ff fadb 	bl	8000c18 <HAL_GetTick>
 8001662:	4602      	mov	r2, r0
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	2b02      	cmp	r3, #2
 800166a:	d907      	bls.n	800167c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800166c:	2303      	movs	r3, #3
 800166e:	e150      	b.n	8001912 <HAL_RCC_OscConfig+0x4e2>
 8001670:	40023800 	.word	0x40023800
 8001674:	42470000 	.word	0x42470000
 8001678:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800167c:	4b88      	ldr	r3, [pc, #544]	; (80018a0 <HAL_RCC_OscConfig+0x470>)
 800167e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001680:	f003 0302 	and.w	r3, r3, #2
 8001684:	2b00      	cmp	r3, #0
 8001686:	d1ea      	bne.n	800165e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0304 	and.w	r3, r3, #4
 8001690:	2b00      	cmp	r3, #0
 8001692:	f000 8097 	beq.w	80017c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001696:	2300      	movs	r3, #0
 8001698:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800169a:	4b81      	ldr	r3, [pc, #516]	; (80018a0 <HAL_RCC_OscConfig+0x470>)
 800169c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d10f      	bne.n	80016c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	60bb      	str	r3, [r7, #8]
 80016aa:	4b7d      	ldr	r3, [pc, #500]	; (80018a0 <HAL_RCC_OscConfig+0x470>)
 80016ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ae:	4a7c      	ldr	r2, [pc, #496]	; (80018a0 <HAL_RCC_OscConfig+0x470>)
 80016b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016b4:	6413      	str	r3, [r2, #64]	; 0x40
 80016b6:	4b7a      	ldr	r3, [pc, #488]	; (80018a0 <HAL_RCC_OscConfig+0x470>)
 80016b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016be:	60bb      	str	r3, [r7, #8]
 80016c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016c2:	2301      	movs	r3, #1
 80016c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016c6:	4b77      	ldr	r3, [pc, #476]	; (80018a4 <HAL_RCC_OscConfig+0x474>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d118      	bne.n	8001704 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016d2:	4b74      	ldr	r3, [pc, #464]	; (80018a4 <HAL_RCC_OscConfig+0x474>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a73      	ldr	r2, [pc, #460]	; (80018a4 <HAL_RCC_OscConfig+0x474>)
 80016d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016de:	f7ff fa9b 	bl	8000c18 <HAL_GetTick>
 80016e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016e4:	e008      	b.n	80016f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016e6:	f7ff fa97 	bl	8000c18 <HAL_GetTick>
 80016ea:	4602      	mov	r2, r0
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d901      	bls.n	80016f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80016f4:	2303      	movs	r3, #3
 80016f6:	e10c      	b.n	8001912 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016f8:	4b6a      	ldr	r3, [pc, #424]	; (80018a4 <HAL_RCC_OscConfig+0x474>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001700:	2b00      	cmp	r3, #0
 8001702:	d0f0      	beq.n	80016e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	2b01      	cmp	r3, #1
 800170a:	d106      	bne.n	800171a <HAL_RCC_OscConfig+0x2ea>
 800170c:	4b64      	ldr	r3, [pc, #400]	; (80018a0 <HAL_RCC_OscConfig+0x470>)
 800170e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001710:	4a63      	ldr	r2, [pc, #396]	; (80018a0 <HAL_RCC_OscConfig+0x470>)
 8001712:	f043 0301 	orr.w	r3, r3, #1
 8001716:	6713      	str	r3, [r2, #112]	; 0x70
 8001718:	e01c      	b.n	8001754 <HAL_RCC_OscConfig+0x324>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	2b05      	cmp	r3, #5
 8001720:	d10c      	bne.n	800173c <HAL_RCC_OscConfig+0x30c>
 8001722:	4b5f      	ldr	r3, [pc, #380]	; (80018a0 <HAL_RCC_OscConfig+0x470>)
 8001724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001726:	4a5e      	ldr	r2, [pc, #376]	; (80018a0 <HAL_RCC_OscConfig+0x470>)
 8001728:	f043 0304 	orr.w	r3, r3, #4
 800172c:	6713      	str	r3, [r2, #112]	; 0x70
 800172e:	4b5c      	ldr	r3, [pc, #368]	; (80018a0 <HAL_RCC_OscConfig+0x470>)
 8001730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001732:	4a5b      	ldr	r2, [pc, #364]	; (80018a0 <HAL_RCC_OscConfig+0x470>)
 8001734:	f043 0301 	orr.w	r3, r3, #1
 8001738:	6713      	str	r3, [r2, #112]	; 0x70
 800173a:	e00b      	b.n	8001754 <HAL_RCC_OscConfig+0x324>
 800173c:	4b58      	ldr	r3, [pc, #352]	; (80018a0 <HAL_RCC_OscConfig+0x470>)
 800173e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001740:	4a57      	ldr	r2, [pc, #348]	; (80018a0 <HAL_RCC_OscConfig+0x470>)
 8001742:	f023 0301 	bic.w	r3, r3, #1
 8001746:	6713      	str	r3, [r2, #112]	; 0x70
 8001748:	4b55      	ldr	r3, [pc, #340]	; (80018a0 <HAL_RCC_OscConfig+0x470>)
 800174a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800174c:	4a54      	ldr	r2, [pc, #336]	; (80018a0 <HAL_RCC_OscConfig+0x470>)
 800174e:	f023 0304 	bic.w	r3, r3, #4
 8001752:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d015      	beq.n	8001788 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800175c:	f7ff fa5c 	bl	8000c18 <HAL_GetTick>
 8001760:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001762:	e00a      	b.n	800177a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001764:	f7ff fa58 	bl	8000c18 <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001772:	4293      	cmp	r3, r2
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e0cb      	b.n	8001912 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800177a:	4b49      	ldr	r3, [pc, #292]	; (80018a0 <HAL_RCC_OscConfig+0x470>)
 800177c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800177e:	f003 0302 	and.w	r3, r3, #2
 8001782:	2b00      	cmp	r3, #0
 8001784:	d0ee      	beq.n	8001764 <HAL_RCC_OscConfig+0x334>
 8001786:	e014      	b.n	80017b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001788:	f7ff fa46 	bl	8000c18 <HAL_GetTick>
 800178c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800178e:	e00a      	b.n	80017a6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001790:	f7ff fa42 	bl	8000c18 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	f241 3288 	movw	r2, #5000	; 0x1388
 800179e:	4293      	cmp	r3, r2
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e0b5      	b.n	8001912 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017a6:	4b3e      	ldr	r3, [pc, #248]	; (80018a0 <HAL_RCC_OscConfig+0x470>)
 80017a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017aa:	f003 0302 	and.w	r3, r3, #2
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d1ee      	bne.n	8001790 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017b2:	7dfb      	ldrb	r3, [r7, #23]
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d105      	bne.n	80017c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017b8:	4b39      	ldr	r3, [pc, #228]	; (80018a0 <HAL_RCC_OscConfig+0x470>)
 80017ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017bc:	4a38      	ldr	r2, [pc, #224]	; (80018a0 <HAL_RCC_OscConfig+0x470>)
 80017be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017c2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	699b      	ldr	r3, [r3, #24]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	f000 80a1 	beq.w	8001910 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017ce:	4b34      	ldr	r3, [pc, #208]	; (80018a0 <HAL_RCC_OscConfig+0x470>)
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	f003 030c 	and.w	r3, r3, #12
 80017d6:	2b08      	cmp	r3, #8
 80017d8:	d05c      	beq.n	8001894 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	699b      	ldr	r3, [r3, #24]
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d141      	bne.n	8001866 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017e2:	4b31      	ldr	r3, [pc, #196]	; (80018a8 <HAL_RCC_OscConfig+0x478>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e8:	f7ff fa16 	bl	8000c18 <HAL_GetTick>
 80017ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017ee:	e008      	b.n	8001802 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017f0:	f7ff fa12 	bl	8000c18 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e087      	b.n	8001912 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001802:	4b27      	ldr	r3, [pc, #156]	; (80018a0 <HAL_RCC_OscConfig+0x470>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d1f0      	bne.n	80017f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	69da      	ldr	r2, [r3, #28]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6a1b      	ldr	r3, [r3, #32]
 8001816:	431a      	orrs	r2, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181c:	019b      	lsls	r3, r3, #6
 800181e:	431a      	orrs	r2, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001824:	085b      	lsrs	r3, r3, #1
 8001826:	3b01      	subs	r3, #1
 8001828:	041b      	lsls	r3, r3, #16
 800182a:	431a      	orrs	r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001830:	061b      	lsls	r3, r3, #24
 8001832:	491b      	ldr	r1, [pc, #108]	; (80018a0 <HAL_RCC_OscConfig+0x470>)
 8001834:	4313      	orrs	r3, r2
 8001836:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001838:	4b1b      	ldr	r3, [pc, #108]	; (80018a8 <HAL_RCC_OscConfig+0x478>)
 800183a:	2201      	movs	r2, #1
 800183c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800183e:	f7ff f9eb 	bl	8000c18 <HAL_GetTick>
 8001842:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001844:	e008      	b.n	8001858 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001846:	f7ff f9e7 	bl	8000c18 <HAL_GetTick>
 800184a:	4602      	mov	r2, r0
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	2b02      	cmp	r3, #2
 8001852:	d901      	bls.n	8001858 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001854:	2303      	movs	r3, #3
 8001856:	e05c      	b.n	8001912 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001858:	4b11      	ldr	r3, [pc, #68]	; (80018a0 <HAL_RCC_OscConfig+0x470>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001860:	2b00      	cmp	r3, #0
 8001862:	d0f0      	beq.n	8001846 <HAL_RCC_OscConfig+0x416>
 8001864:	e054      	b.n	8001910 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001866:	4b10      	ldr	r3, [pc, #64]	; (80018a8 <HAL_RCC_OscConfig+0x478>)
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800186c:	f7ff f9d4 	bl	8000c18 <HAL_GetTick>
 8001870:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001872:	e008      	b.n	8001886 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001874:	f7ff f9d0 	bl	8000c18 <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	2b02      	cmp	r3, #2
 8001880:	d901      	bls.n	8001886 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e045      	b.n	8001912 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001886:	4b06      	ldr	r3, [pc, #24]	; (80018a0 <HAL_RCC_OscConfig+0x470>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d1f0      	bne.n	8001874 <HAL_RCC_OscConfig+0x444>
 8001892:	e03d      	b.n	8001910 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	699b      	ldr	r3, [r3, #24]
 8001898:	2b01      	cmp	r3, #1
 800189a:	d107      	bne.n	80018ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e038      	b.n	8001912 <HAL_RCC_OscConfig+0x4e2>
 80018a0:	40023800 	.word	0x40023800
 80018a4:	40007000 	.word	0x40007000
 80018a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80018ac:	4b1b      	ldr	r3, [pc, #108]	; (800191c <HAL_RCC_OscConfig+0x4ec>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	699b      	ldr	r3, [r3, #24]
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d028      	beq.n	800190c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d121      	bne.n	800190c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d11a      	bne.n	800190c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018d6:	68fa      	ldr	r2, [r7, #12]
 80018d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80018dc:	4013      	ands	r3, r2
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80018e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d111      	bne.n	800190c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f2:	085b      	lsrs	r3, r3, #1
 80018f4:	3b01      	subs	r3, #1
 80018f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d107      	bne.n	800190c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001906:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001908:	429a      	cmp	r2, r3
 800190a:	d001      	beq.n	8001910 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e000      	b.n	8001912 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001910:	2300      	movs	r3, #0
}
 8001912:	4618      	mov	r0, r3
 8001914:	3718      	adds	r7, #24
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	40023800 	.word	0x40023800

08001920 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d101      	bne.n	8001934 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e0cc      	b.n	8001ace <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001934:	4b68      	ldr	r3, [pc, #416]	; (8001ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 0307 	and.w	r3, r3, #7
 800193c:	683a      	ldr	r2, [r7, #0]
 800193e:	429a      	cmp	r2, r3
 8001940:	d90c      	bls.n	800195c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001942:	4b65      	ldr	r3, [pc, #404]	; (8001ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8001944:	683a      	ldr	r2, [r7, #0]
 8001946:	b2d2      	uxtb	r2, r2
 8001948:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800194a:	4b63      	ldr	r3, [pc, #396]	; (8001ad8 <HAL_RCC_ClockConfig+0x1b8>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0307 	and.w	r3, r3, #7
 8001952:	683a      	ldr	r2, [r7, #0]
 8001954:	429a      	cmp	r2, r3
 8001956:	d001      	beq.n	800195c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e0b8      	b.n	8001ace <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0302 	and.w	r3, r3, #2
 8001964:	2b00      	cmp	r3, #0
 8001966:	d020      	beq.n	80019aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0304 	and.w	r3, r3, #4
 8001970:	2b00      	cmp	r3, #0
 8001972:	d005      	beq.n	8001980 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001974:	4b59      	ldr	r3, [pc, #356]	; (8001adc <HAL_RCC_ClockConfig+0x1bc>)
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	4a58      	ldr	r2, [pc, #352]	; (8001adc <HAL_RCC_ClockConfig+0x1bc>)
 800197a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800197e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0308 	and.w	r3, r3, #8
 8001988:	2b00      	cmp	r3, #0
 800198a:	d005      	beq.n	8001998 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800198c:	4b53      	ldr	r3, [pc, #332]	; (8001adc <HAL_RCC_ClockConfig+0x1bc>)
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	4a52      	ldr	r2, [pc, #328]	; (8001adc <HAL_RCC_ClockConfig+0x1bc>)
 8001992:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001996:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001998:	4b50      	ldr	r3, [pc, #320]	; (8001adc <HAL_RCC_ClockConfig+0x1bc>)
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	494d      	ldr	r1, [pc, #308]	; (8001adc <HAL_RCC_ClockConfig+0x1bc>)
 80019a6:	4313      	orrs	r3, r2
 80019a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0301 	and.w	r3, r3, #1
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d044      	beq.n	8001a40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d107      	bne.n	80019ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019be:	4b47      	ldr	r3, [pc, #284]	; (8001adc <HAL_RCC_ClockConfig+0x1bc>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d119      	bne.n	80019fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e07f      	b.n	8001ace <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d003      	beq.n	80019de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019da:	2b03      	cmp	r3, #3
 80019dc:	d107      	bne.n	80019ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019de:	4b3f      	ldr	r3, [pc, #252]	; (8001adc <HAL_RCC_ClockConfig+0x1bc>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d109      	bne.n	80019fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e06f      	b.n	8001ace <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019ee:	4b3b      	ldr	r3, [pc, #236]	; (8001adc <HAL_RCC_ClockConfig+0x1bc>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0302 	and.w	r3, r3, #2
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d101      	bne.n	80019fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e067      	b.n	8001ace <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019fe:	4b37      	ldr	r3, [pc, #220]	; (8001adc <HAL_RCC_ClockConfig+0x1bc>)
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	f023 0203 	bic.w	r2, r3, #3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	4934      	ldr	r1, [pc, #208]	; (8001adc <HAL_RCC_ClockConfig+0x1bc>)
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a10:	f7ff f902 	bl	8000c18 <HAL_GetTick>
 8001a14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a16:	e00a      	b.n	8001a2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a18:	f7ff f8fe 	bl	8000c18 <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d901      	bls.n	8001a2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e04f      	b.n	8001ace <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a2e:	4b2b      	ldr	r3, [pc, #172]	; (8001adc <HAL_RCC_ClockConfig+0x1bc>)
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	f003 020c 	and.w	r2, r3, #12
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d1eb      	bne.n	8001a18 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a40:	4b25      	ldr	r3, [pc, #148]	; (8001ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0307 	and.w	r3, r3, #7
 8001a48:	683a      	ldr	r2, [r7, #0]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d20c      	bcs.n	8001a68 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a4e:	4b22      	ldr	r3, [pc, #136]	; (8001ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a50:	683a      	ldr	r2, [r7, #0]
 8001a52:	b2d2      	uxtb	r2, r2
 8001a54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a56:	4b20      	ldr	r3, [pc, #128]	; (8001ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0307 	and.w	r3, r3, #7
 8001a5e:	683a      	ldr	r2, [r7, #0]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d001      	beq.n	8001a68 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e032      	b.n	8001ace <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0304 	and.w	r3, r3, #4
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d008      	beq.n	8001a86 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a74:	4b19      	ldr	r3, [pc, #100]	; (8001adc <HAL_RCC_ClockConfig+0x1bc>)
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	4916      	ldr	r1, [pc, #88]	; (8001adc <HAL_RCC_ClockConfig+0x1bc>)
 8001a82:	4313      	orrs	r3, r2
 8001a84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0308 	and.w	r3, r3, #8
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d009      	beq.n	8001aa6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a92:	4b12      	ldr	r3, [pc, #72]	; (8001adc <HAL_RCC_ClockConfig+0x1bc>)
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	691b      	ldr	r3, [r3, #16]
 8001a9e:	00db      	lsls	r3, r3, #3
 8001aa0:	490e      	ldr	r1, [pc, #56]	; (8001adc <HAL_RCC_ClockConfig+0x1bc>)
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001aa6:	f000 f821 	bl	8001aec <HAL_RCC_GetSysClockFreq>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	4b0b      	ldr	r3, [pc, #44]	; (8001adc <HAL_RCC_ClockConfig+0x1bc>)
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	091b      	lsrs	r3, r3, #4
 8001ab2:	f003 030f 	and.w	r3, r3, #15
 8001ab6:	490a      	ldr	r1, [pc, #40]	; (8001ae0 <HAL_RCC_ClockConfig+0x1c0>)
 8001ab8:	5ccb      	ldrb	r3, [r1, r3]
 8001aba:	fa22 f303 	lsr.w	r3, r2, r3
 8001abe:	4a09      	ldr	r2, [pc, #36]	; (8001ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ac0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001ac2:	4b09      	ldr	r3, [pc, #36]	; (8001ae8 <HAL_RCC_ClockConfig+0x1c8>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7ff f862 	bl	8000b90 <HAL_InitTick>

  return HAL_OK;
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3710      	adds	r7, #16
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	40023c00 	.word	0x40023c00
 8001adc:	40023800 	.word	0x40023800
 8001ae0:	08004258 	.word	0x08004258
 8001ae4:	20000000 	.word	0x20000000
 8001ae8:	20000004 	.word	0x20000004

08001aec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001aec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001af0:	b094      	sub	sp, #80	; 0x50
 8001af2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001af4:	2300      	movs	r3, #0
 8001af6:	647b      	str	r3, [r7, #68]	; 0x44
 8001af8:	2300      	movs	r3, #0
 8001afa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001afc:	2300      	movs	r3, #0
 8001afe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001b00:	2300      	movs	r3, #0
 8001b02:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b04:	4b79      	ldr	r3, [pc, #484]	; (8001cec <HAL_RCC_GetSysClockFreq+0x200>)
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	f003 030c 	and.w	r3, r3, #12
 8001b0c:	2b08      	cmp	r3, #8
 8001b0e:	d00d      	beq.n	8001b2c <HAL_RCC_GetSysClockFreq+0x40>
 8001b10:	2b08      	cmp	r3, #8
 8001b12:	f200 80e1 	bhi.w	8001cd8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d002      	beq.n	8001b20 <HAL_RCC_GetSysClockFreq+0x34>
 8001b1a:	2b04      	cmp	r3, #4
 8001b1c:	d003      	beq.n	8001b26 <HAL_RCC_GetSysClockFreq+0x3a>
 8001b1e:	e0db      	b.n	8001cd8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b20:	4b73      	ldr	r3, [pc, #460]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b22:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001b24:	e0db      	b.n	8001cde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b26:	4b73      	ldr	r3, [pc, #460]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0x208>)
 8001b28:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b2a:	e0d8      	b.n	8001cde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b2c:	4b6f      	ldr	r3, [pc, #444]	; (8001cec <HAL_RCC_GetSysClockFreq+0x200>)
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b34:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b36:	4b6d      	ldr	r3, [pc, #436]	; (8001cec <HAL_RCC_GetSysClockFreq+0x200>)
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d063      	beq.n	8001c0a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b42:	4b6a      	ldr	r3, [pc, #424]	; (8001cec <HAL_RCC_GetSysClockFreq+0x200>)
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	099b      	lsrs	r3, r3, #6
 8001b48:	2200      	movs	r2, #0
 8001b4a:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b4c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b54:	633b      	str	r3, [r7, #48]	; 0x30
 8001b56:	2300      	movs	r3, #0
 8001b58:	637b      	str	r3, [r7, #52]	; 0x34
 8001b5a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001b5e:	4622      	mov	r2, r4
 8001b60:	462b      	mov	r3, r5
 8001b62:	f04f 0000 	mov.w	r0, #0
 8001b66:	f04f 0100 	mov.w	r1, #0
 8001b6a:	0159      	lsls	r1, r3, #5
 8001b6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b70:	0150      	lsls	r0, r2, #5
 8001b72:	4602      	mov	r2, r0
 8001b74:	460b      	mov	r3, r1
 8001b76:	4621      	mov	r1, r4
 8001b78:	1a51      	subs	r1, r2, r1
 8001b7a:	6139      	str	r1, [r7, #16]
 8001b7c:	4629      	mov	r1, r5
 8001b7e:	eb63 0301 	sbc.w	r3, r3, r1
 8001b82:	617b      	str	r3, [r7, #20]
 8001b84:	f04f 0200 	mov.w	r2, #0
 8001b88:	f04f 0300 	mov.w	r3, #0
 8001b8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b90:	4659      	mov	r1, fp
 8001b92:	018b      	lsls	r3, r1, #6
 8001b94:	4651      	mov	r1, sl
 8001b96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b9a:	4651      	mov	r1, sl
 8001b9c:	018a      	lsls	r2, r1, #6
 8001b9e:	4651      	mov	r1, sl
 8001ba0:	ebb2 0801 	subs.w	r8, r2, r1
 8001ba4:	4659      	mov	r1, fp
 8001ba6:	eb63 0901 	sbc.w	r9, r3, r1
 8001baa:	f04f 0200 	mov.w	r2, #0
 8001bae:	f04f 0300 	mov.w	r3, #0
 8001bb2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001bb6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001bba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001bbe:	4690      	mov	r8, r2
 8001bc0:	4699      	mov	r9, r3
 8001bc2:	4623      	mov	r3, r4
 8001bc4:	eb18 0303 	adds.w	r3, r8, r3
 8001bc8:	60bb      	str	r3, [r7, #8]
 8001bca:	462b      	mov	r3, r5
 8001bcc:	eb49 0303 	adc.w	r3, r9, r3
 8001bd0:	60fb      	str	r3, [r7, #12]
 8001bd2:	f04f 0200 	mov.w	r2, #0
 8001bd6:	f04f 0300 	mov.w	r3, #0
 8001bda:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001bde:	4629      	mov	r1, r5
 8001be0:	024b      	lsls	r3, r1, #9
 8001be2:	4621      	mov	r1, r4
 8001be4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001be8:	4621      	mov	r1, r4
 8001bea:	024a      	lsls	r2, r1, #9
 8001bec:	4610      	mov	r0, r2
 8001bee:	4619      	mov	r1, r3
 8001bf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bf6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001bf8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001bfc:	f7fe fae8 	bl	80001d0 <__aeabi_uldivmod>
 8001c00:	4602      	mov	r2, r0
 8001c02:	460b      	mov	r3, r1
 8001c04:	4613      	mov	r3, r2
 8001c06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c08:	e058      	b.n	8001cbc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c0a:	4b38      	ldr	r3, [pc, #224]	; (8001cec <HAL_RCC_GetSysClockFreq+0x200>)
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	099b      	lsrs	r3, r3, #6
 8001c10:	2200      	movs	r2, #0
 8001c12:	4618      	mov	r0, r3
 8001c14:	4611      	mov	r1, r2
 8001c16:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c1a:	623b      	str	r3, [r7, #32]
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	627b      	str	r3, [r7, #36]	; 0x24
 8001c20:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c24:	4642      	mov	r2, r8
 8001c26:	464b      	mov	r3, r9
 8001c28:	f04f 0000 	mov.w	r0, #0
 8001c2c:	f04f 0100 	mov.w	r1, #0
 8001c30:	0159      	lsls	r1, r3, #5
 8001c32:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c36:	0150      	lsls	r0, r2, #5
 8001c38:	4602      	mov	r2, r0
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	4641      	mov	r1, r8
 8001c3e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c42:	4649      	mov	r1, r9
 8001c44:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c48:	f04f 0200 	mov.w	r2, #0
 8001c4c:	f04f 0300 	mov.w	r3, #0
 8001c50:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c54:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c58:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c5c:	ebb2 040a 	subs.w	r4, r2, sl
 8001c60:	eb63 050b 	sbc.w	r5, r3, fp
 8001c64:	f04f 0200 	mov.w	r2, #0
 8001c68:	f04f 0300 	mov.w	r3, #0
 8001c6c:	00eb      	lsls	r3, r5, #3
 8001c6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c72:	00e2      	lsls	r2, r4, #3
 8001c74:	4614      	mov	r4, r2
 8001c76:	461d      	mov	r5, r3
 8001c78:	4643      	mov	r3, r8
 8001c7a:	18e3      	adds	r3, r4, r3
 8001c7c:	603b      	str	r3, [r7, #0]
 8001c7e:	464b      	mov	r3, r9
 8001c80:	eb45 0303 	adc.w	r3, r5, r3
 8001c84:	607b      	str	r3, [r7, #4]
 8001c86:	f04f 0200 	mov.w	r2, #0
 8001c8a:	f04f 0300 	mov.w	r3, #0
 8001c8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c92:	4629      	mov	r1, r5
 8001c94:	028b      	lsls	r3, r1, #10
 8001c96:	4621      	mov	r1, r4
 8001c98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c9c:	4621      	mov	r1, r4
 8001c9e:	028a      	lsls	r2, r1, #10
 8001ca0:	4610      	mov	r0, r2
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	61bb      	str	r3, [r7, #24]
 8001caa:	61fa      	str	r2, [r7, #28]
 8001cac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001cb0:	f7fe fa8e 	bl	80001d0 <__aeabi_uldivmod>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	4613      	mov	r3, r2
 8001cba:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001cbc:	4b0b      	ldr	r3, [pc, #44]	; (8001cec <HAL_RCC_GetSysClockFreq+0x200>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	0c1b      	lsrs	r3, r3, #16
 8001cc2:	f003 0303 	and.w	r3, r3, #3
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001ccc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001cce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cd4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001cd6:	e002      	b.n	8001cde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cd8:	4b05      	ldr	r3, [pc, #20]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001cda:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001cdc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3750      	adds	r7, #80	; 0x50
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cea:	bf00      	nop
 8001cec:	40023800 	.word	0x40023800
 8001cf0:	00f42400 	.word	0x00f42400
 8001cf4:	007a1200 	.word	0x007a1200

08001cf8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	691b      	ldr	r3, [r3, #16]
 8001d06:	f003 0302 	and.w	r3, r3, #2
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d122      	bne.n	8001d54 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	f003 0302 	and.w	r3, r3, #2
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d11b      	bne.n	8001d54 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f06f 0202 	mvn.w	r2, #2
 8001d24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2201      	movs	r2, #1
 8001d2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	699b      	ldr	r3, [r3, #24]
 8001d32:	f003 0303 	and.w	r3, r3, #3
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d003      	beq.n	8001d42 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f000 f8ee 	bl	8001f1c <HAL_TIM_IC_CaptureCallback>
 8001d40:	e005      	b.n	8001d4e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f000 f8e0 	bl	8001f08 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f000 f8f1 	bl	8001f30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2200      	movs	r2, #0
 8001d52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	691b      	ldr	r3, [r3, #16]
 8001d5a:	f003 0304 	and.w	r3, r3, #4
 8001d5e:	2b04      	cmp	r3, #4
 8001d60:	d122      	bne.n	8001da8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	f003 0304 	and.w	r3, r3, #4
 8001d6c:	2b04      	cmp	r3, #4
 8001d6e:	d11b      	bne.n	8001da8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f06f 0204 	mvn.w	r2, #4
 8001d78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2202      	movs	r2, #2
 8001d7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	699b      	ldr	r3, [r3, #24]
 8001d86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d003      	beq.n	8001d96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f000 f8c4 	bl	8001f1c <HAL_TIM_IC_CaptureCallback>
 8001d94:	e005      	b.n	8001da2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f000 f8b6 	bl	8001f08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f000 f8c7 	bl	8001f30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	691b      	ldr	r3, [r3, #16]
 8001dae:	f003 0308 	and.w	r3, r3, #8
 8001db2:	2b08      	cmp	r3, #8
 8001db4:	d122      	bne.n	8001dfc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	f003 0308 	and.w	r3, r3, #8
 8001dc0:	2b08      	cmp	r3, #8
 8001dc2:	d11b      	bne.n	8001dfc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f06f 0208 	mvn.w	r2, #8
 8001dcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2204      	movs	r2, #4
 8001dd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	69db      	ldr	r3, [r3, #28]
 8001dda:	f003 0303 	and.w	r3, r3, #3
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d003      	beq.n	8001dea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f000 f89a 	bl	8001f1c <HAL_TIM_IC_CaptureCallback>
 8001de8:	e005      	b.n	8001df6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f000 f88c 	bl	8001f08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f000 f89d 	bl	8001f30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	691b      	ldr	r3, [r3, #16]
 8001e02:	f003 0310 	and.w	r3, r3, #16
 8001e06:	2b10      	cmp	r3, #16
 8001e08:	d122      	bne.n	8001e50 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	f003 0310 	and.w	r3, r3, #16
 8001e14:	2b10      	cmp	r3, #16
 8001e16:	d11b      	bne.n	8001e50 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f06f 0210 	mvn.w	r2, #16
 8001e20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2208      	movs	r2, #8
 8001e26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	69db      	ldr	r3, [r3, #28]
 8001e2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d003      	beq.n	8001e3e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f000 f870 	bl	8001f1c <HAL_TIM_IC_CaptureCallback>
 8001e3c:	e005      	b.n	8001e4a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f000 f862 	bl	8001f08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f000 f873 	bl	8001f30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	691b      	ldr	r3, [r3, #16]
 8001e56:	f003 0301 	and.w	r3, r3, #1
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d10e      	bne.n	8001e7c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	f003 0301 	and.w	r3, r3, #1
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d107      	bne.n	8001e7c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f06f 0201 	mvn.w	r2, #1
 8001e74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f7fe fcfc 	bl	8000874 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	691b      	ldr	r3, [r3, #16]
 8001e82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e86:	2b80      	cmp	r3, #128	; 0x80
 8001e88:	d10e      	bne.n	8001ea8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e94:	2b80      	cmp	r3, #128	; 0x80
 8001e96:	d107      	bne.n	8001ea8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001ea0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f000 f862 	bl	8001f6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	691b      	ldr	r3, [r3, #16]
 8001eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eb2:	2b40      	cmp	r3, #64	; 0x40
 8001eb4:	d10e      	bne.n	8001ed4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ec0:	2b40      	cmp	r3, #64	; 0x40
 8001ec2:	d107      	bne.n	8001ed4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001ecc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f000 f838 	bl	8001f44 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	691b      	ldr	r3, [r3, #16]
 8001eda:	f003 0320 	and.w	r3, r3, #32
 8001ede:	2b20      	cmp	r3, #32
 8001ee0:	d10e      	bne.n	8001f00 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	f003 0320 	and.w	r3, r3, #32
 8001eec:	2b20      	cmp	r3, #32
 8001eee:	d107      	bne.n	8001f00 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f06f 0220 	mvn.w	r2, #32
 8001ef8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f000 f82c 	bl	8001f58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f00:	bf00      	nop
 8001f02:	3708      	adds	r7, #8
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f10:	bf00      	nop
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f24:	bf00      	nop
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f38:	bf00      	nop
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f4c:	bf00      	nop
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f60:	bf00      	nop
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001f74:	bf00      	nop
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	60b9      	str	r1, [r7, #8]
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	2b20      	cmp	r3, #32
 8001f98:	d11d      	bne.n	8001fd6 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d002      	beq.n	8001fa6 <HAL_UART_Receive_IT+0x26>
 8001fa0:	88fb      	ldrh	r3, [r7, #6]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d101      	bne.n	8001faa <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e016      	b.n	8001fd8 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d101      	bne.n	8001fb8 <HAL_UART_Receive_IT+0x38>
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	e00f      	b.n	8001fd8 <HAL_UART_Receive_IT+0x58>
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001fc6:	88fb      	ldrh	r3, [r7, #6]
 8001fc8:	461a      	mov	r2, r3
 8001fca:	68b9      	ldr	r1, [r7, #8]
 8001fcc:	68f8      	ldr	r0, [r7, #12]
 8001fce:	f000 fc7b 	bl	80028c8 <UART_Start_Receive_IT>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	e000      	b.n	8001fd8 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8001fd6:	2302      	movs	r3, #2
  }
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3710      	adds	r7, #16
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b090      	sub	sp, #64	; 0x40
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	695b      	ldr	r3, [r3, #20]
 8001ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ff6:	2b80      	cmp	r3, #128	; 0x80
 8001ff8:	bf0c      	ite	eq
 8001ffa:	2301      	moveq	r3, #1
 8001ffc:	2300      	movne	r3, #0
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002008:	b2db      	uxtb	r3, r3
 800200a:	2b21      	cmp	r3, #33	; 0x21
 800200c:	d128      	bne.n	8002060 <HAL_UART_DMAStop+0x80>
 800200e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002010:	2b00      	cmp	r3, #0
 8002012:	d025      	beq.n	8002060 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	3314      	adds	r3, #20
 800201a:	627b      	str	r3, [r7, #36]	; 0x24
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800201c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201e:	e853 3f00 	ldrex	r3, [r3]
 8002022:	623b      	str	r3, [r7, #32]
   return(result);
 8002024:	6a3b      	ldr	r3, [r7, #32]
 8002026:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800202a:	63bb      	str	r3, [r7, #56]	; 0x38
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	3314      	adds	r3, #20
 8002032:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002034:	633a      	str	r2, [r7, #48]	; 0x30
 8002036:	62fb      	str	r3, [r7, #44]	; 0x2c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002038:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800203a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800203c:	e841 2300 	strex	r3, r2, [r1]
 8002040:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002044:	2b00      	cmp	r3, #0
 8002046:	d1e5      	bne.n	8002014 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800204c:	2b00      	cmp	r3, #0
 800204e:	d004      	beq.n	800205a <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002054:	4618      	mov	r0, r3
 8002056:	f7fe ff28 	bl	8000eaa <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f000 fd08 	bl	8002a70 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	695b      	ldr	r3, [r3, #20]
 8002066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800206a:	2b40      	cmp	r3, #64	; 0x40
 800206c:	bf0c      	ite	eq
 800206e:	2301      	moveq	r3, #1
 8002070:	2300      	movne	r3, #0
 8002072:	b2db      	uxtb	r3, r3
 8002074:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800207c:	b2db      	uxtb	r3, r3
 800207e:	2b22      	cmp	r3, #34	; 0x22
 8002080:	d128      	bne.n	80020d4 <HAL_UART_DMAStop+0xf4>
 8002082:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002084:	2b00      	cmp	r3, #0
 8002086:	d025      	beq.n	80020d4 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	3314      	adds	r3, #20
 800208e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	e853 3f00 	ldrex	r3, [r3]
 8002096:	60fb      	str	r3, [r7, #12]
   return(result);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800209e:	637b      	str	r3, [r7, #52]	; 0x34
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	3314      	adds	r3, #20
 80020a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80020a8:	61fa      	str	r2, [r7, #28]
 80020aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020ac:	69b9      	ldr	r1, [r7, #24]
 80020ae:	69fa      	ldr	r2, [r7, #28]
 80020b0:	e841 2300 	strex	r3, r2, [r1]
 80020b4:	617b      	str	r3, [r7, #20]
   return(result);
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d1e5      	bne.n	8002088 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d004      	beq.n	80020ce <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7fe feee 	bl	8000eaa <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f000 fcf6 	bl	8002ac0 <UART_EndRxTransfer>
  }

  return HAL_OK;
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3740      	adds	r7, #64	; 0x40
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}

080020de <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80020de:	b580      	push	{r7, lr}
 80020e0:	b08c      	sub	sp, #48	; 0x30
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	60f8      	str	r0, [r7, #12]
 80020e6:	60b9      	str	r1, [r7, #8]
 80020e8:	4613      	mov	r3, r2
 80020ea:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	2b20      	cmp	r3, #32
 80020f6:	d152      	bne.n	800219e <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d002      	beq.n	8002104 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80020fe:	88fb      	ldrh	r3, [r7, #6]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d101      	bne.n	8002108 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e04b      	b.n	80021a0 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800210e:	2b01      	cmp	r3, #1
 8002110:	d101      	bne.n	8002116 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8002112:	2302      	movs	r3, #2
 8002114:	e044      	b.n	80021a0 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2201      	movs	r2, #1
 800211a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2201      	movs	r2, #1
 8002122:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8002124:	88fb      	ldrh	r3, [r7, #6]
 8002126:	461a      	mov	r2, r3
 8002128:	68b9      	ldr	r1, [r7, #8]
 800212a:	68f8      	ldr	r0, [r7, #12]
 800212c:	f000 fc06 	bl	800293c <UART_Start_Receive_DMA>
 8002130:	4603      	mov	r3, r0
 8002132:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8002136:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800213a:	2b00      	cmp	r3, #0
 800213c:	d12c      	bne.n	8002198 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002142:	2b01      	cmp	r3, #1
 8002144:	d125      	bne.n	8002192 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002146:	2300      	movs	r3, #0
 8002148:	613b      	str	r3, [r7, #16]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	613b      	str	r3, [r7, #16]
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	613b      	str	r3, [r7, #16]
 800215a:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	330c      	adds	r3, #12
 8002162:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002164:	69bb      	ldr	r3, [r7, #24]
 8002166:	e853 3f00 	ldrex	r3, [r3]
 800216a:	617b      	str	r3, [r7, #20]
   return(result);
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	f043 0310 	orr.w	r3, r3, #16
 8002172:	62bb      	str	r3, [r7, #40]	; 0x28
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	330c      	adds	r3, #12
 800217a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800217c:	627a      	str	r2, [r7, #36]	; 0x24
 800217e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002180:	6a39      	ldr	r1, [r7, #32]
 8002182:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002184:	e841 2300 	strex	r3, r2, [r1]
 8002188:	61fb      	str	r3, [r7, #28]
   return(result);
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d1e5      	bne.n	800215c <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8002190:	e002      	b.n	8002198 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8002198:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800219c:	e000      	b.n	80021a0 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 800219e:	2302      	movs	r3, #2
  }
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3730      	adds	r7, #48	; 0x30
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b0ba      	sub	sp, #232	; 0xe8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	695b      	ldr	r3, [r3, #20]
 80021ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80021ce:	2300      	movs	r3, #0
 80021d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80021d4:	2300      	movs	r3, #0
 80021d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80021da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80021de:	f003 030f 	and.w	r3, r3, #15
 80021e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80021e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d10f      	bne.n	800220e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80021ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80021f2:	f003 0320 	and.w	r3, r3, #32
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d009      	beq.n	800220e <HAL_UART_IRQHandler+0x66>
 80021fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80021fe:	f003 0320 	and.w	r3, r3, #32
 8002202:	2b00      	cmp	r3, #0
 8002204:	d003      	beq.n	800220e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f000 fd39 	bl	8002c7e <UART_Receive_IT>
      return;
 800220c:	e256      	b.n	80026bc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800220e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002212:	2b00      	cmp	r3, #0
 8002214:	f000 80de 	beq.w	80023d4 <HAL_UART_IRQHandler+0x22c>
 8002218:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800221c:	f003 0301 	and.w	r3, r3, #1
 8002220:	2b00      	cmp	r3, #0
 8002222:	d106      	bne.n	8002232 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002224:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002228:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800222c:	2b00      	cmp	r3, #0
 800222e:	f000 80d1 	beq.w	80023d4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002232:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	2b00      	cmp	r3, #0
 800223c:	d00b      	beq.n	8002256 <HAL_UART_IRQHandler+0xae>
 800223e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002246:	2b00      	cmp	r3, #0
 8002248:	d005      	beq.n	8002256 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224e:	f043 0201 	orr.w	r2, r3, #1
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002256:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800225a:	f003 0304 	and.w	r3, r3, #4
 800225e:	2b00      	cmp	r3, #0
 8002260:	d00b      	beq.n	800227a <HAL_UART_IRQHandler+0xd2>
 8002262:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002266:	f003 0301 	and.w	r3, r3, #1
 800226a:	2b00      	cmp	r3, #0
 800226c:	d005      	beq.n	800227a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002272:	f043 0202 	orr.w	r2, r3, #2
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800227a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800227e:	f003 0302 	and.w	r3, r3, #2
 8002282:	2b00      	cmp	r3, #0
 8002284:	d00b      	beq.n	800229e <HAL_UART_IRQHandler+0xf6>
 8002286:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800228a:	f003 0301 	and.w	r3, r3, #1
 800228e:	2b00      	cmp	r3, #0
 8002290:	d005      	beq.n	800229e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002296:	f043 0204 	orr.w	r2, r3, #4
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800229e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022a2:	f003 0308 	and.w	r3, r3, #8
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d011      	beq.n	80022ce <HAL_UART_IRQHandler+0x126>
 80022aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80022ae:	f003 0320 	and.w	r3, r3, #32
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d105      	bne.n	80022c2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80022b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80022ba:	f003 0301 	and.w	r3, r3, #1
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d005      	beq.n	80022ce <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c6:	f043 0208 	orr.w	r2, r3, #8
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	f000 81ed 	beq.w	80026b2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80022d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022dc:	f003 0320 	and.w	r3, r3, #32
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d008      	beq.n	80022f6 <HAL_UART_IRQHandler+0x14e>
 80022e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80022e8:	f003 0320 	and.w	r3, r3, #32
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d002      	beq.n	80022f6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f000 fcc4 	bl	8002c7e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	695b      	ldr	r3, [r3, #20]
 80022fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002300:	2b40      	cmp	r3, #64	; 0x40
 8002302:	bf0c      	ite	eq
 8002304:	2301      	moveq	r3, #1
 8002306:	2300      	movne	r3, #0
 8002308:	b2db      	uxtb	r3, r3
 800230a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002312:	f003 0308 	and.w	r3, r3, #8
 8002316:	2b00      	cmp	r3, #0
 8002318:	d103      	bne.n	8002322 <HAL_UART_IRQHandler+0x17a>
 800231a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800231e:	2b00      	cmp	r3, #0
 8002320:	d04f      	beq.n	80023c2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f000 fbcc 	bl	8002ac0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	695b      	ldr	r3, [r3, #20]
 800232e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002332:	2b40      	cmp	r3, #64	; 0x40
 8002334:	d141      	bne.n	80023ba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	3314      	adds	r3, #20
 800233c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002340:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002344:	e853 3f00 	ldrex	r3, [r3]
 8002348:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800234c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002350:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002354:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	3314      	adds	r3, #20
 800235e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002362:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002366:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800236a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800236e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002372:	e841 2300 	strex	r3, r2, [r1]
 8002376:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800237a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d1d9      	bne.n	8002336 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002386:	2b00      	cmp	r3, #0
 8002388:	d013      	beq.n	80023b2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800238e:	4a7d      	ldr	r2, [pc, #500]	; (8002584 <HAL_UART_IRQHandler+0x3dc>)
 8002390:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002396:	4618      	mov	r0, r3
 8002398:	f7fe fdf7 	bl	8000f8a <HAL_DMA_Abort_IT>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d016      	beq.n	80023d0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80023ac:	4610      	mov	r0, r2
 80023ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023b0:	e00e      	b.n	80023d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f7fe f97e 	bl	80006b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023b8:	e00a      	b.n	80023d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f7fe f97a 	bl	80006b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023c0:	e006      	b.n	80023d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f7fe f976 	bl	80006b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80023ce:	e170      	b.n	80026b2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023d0:	bf00      	nop
    return;
 80023d2:	e16e      	b.n	80026b2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d8:	2b01      	cmp	r3, #1
 80023da:	f040 814a 	bne.w	8002672 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80023de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023e2:	f003 0310 	and.w	r3, r3, #16
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	f000 8143 	beq.w	8002672 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80023ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023f0:	f003 0310 	and.w	r3, r3, #16
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	f000 813c 	beq.w	8002672 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80023fa:	2300      	movs	r3, #0
 80023fc:	60bb      	str	r3, [r7, #8]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	60bb      	str	r3, [r7, #8]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	60bb      	str	r3, [r7, #8]
 800240e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	695b      	ldr	r3, [r3, #20]
 8002416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800241a:	2b40      	cmp	r3, #64	; 0x40
 800241c:	f040 80b4 	bne.w	8002588 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800242c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002430:	2b00      	cmp	r3, #0
 8002432:	f000 8140 	beq.w	80026b6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800243a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800243e:	429a      	cmp	r2, r3
 8002440:	f080 8139 	bcs.w	80026b6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800244a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002450:	69db      	ldr	r3, [r3, #28]
 8002452:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002456:	f000 8088 	beq.w	800256a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	330c      	adds	r3, #12
 8002460:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002464:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002468:	e853 3f00 	ldrex	r3, [r3]
 800246c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002470:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002474:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002478:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	330c      	adds	r3, #12
 8002482:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002486:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800248a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800248e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002492:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002496:	e841 2300 	strex	r3, r2, [r1]
 800249a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800249e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d1d9      	bne.n	800245a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	3314      	adds	r3, #20
 80024ac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024b0:	e853 3f00 	ldrex	r3, [r3]
 80024b4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80024b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024b8:	f023 0301 	bic.w	r3, r3, #1
 80024bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	3314      	adds	r3, #20
 80024c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80024ca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80024ce:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024d0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80024d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80024d6:	e841 2300 	strex	r3, r2, [r1]
 80024da:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80024dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d1e1      	bne.n	80024a6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	3314      	adds	r3, #20
 80024e8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024ec:	e853 3f00 	ldrex	r3, [r3]
 80024f0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80024f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80024f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	3314      	adds	r3, #20
 8002502:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002506:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002508:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800250a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800250c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800250e:	e841 2300 	strex	r3, r2, [r1]
 8002512:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002514:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002516:	2b00      	cmp	r3, #0
 8002518:	d1e3      	bne.n	80024e2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2220      	movs	r2, #32
 800251e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2200      	movs	r2, #0
 8002526:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	330c      	adds	r3, #12
 800252e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002530:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002532:	e853 3f00 	ldrex	r3, [r3]
 8002536:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002538:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800253a:	f023 0310 	bic.w	r3, r3, #16
 800253e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	330c      	adds	r3, #12
 8002548:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800254c:	65ba      	str	r2, [r7, #88]	; 0x58
 800254e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002550:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002552:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002554:	e841 2300 	strex	r3, r2, [r1]
 8002558:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800255a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800255c:	2b00      	cmp	r3, #0
 800255e:	d1e3      	bne.n	8002528 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002564:	4618      	mov	r0, r3
 8002566:	f7fe fca0 	bl	8000eaa <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002572:	b29b      	uxth	r3, r3
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	b29b      	uxth	r3, r3
 8002578:	4619      	mov	r1, r3
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f7fe f8f2 	bl	8000764 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002580:	e099      	b.n	80026b6 <HAL_UART_IRQHandler+0x50e>
 8002582:	bf00      	nop
 8002584:	08002b87 	.word	0x08002b87
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002590:	b29b      	uxth	r3, r3
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800259c:	b29b      	uxth	r3, r3
 800259e:	2b00      	cmp	r3, #0
 80025a0:	f000 808b 	beq.w	80026ba <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80025a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	f000 8086 	beq.w	80026ba <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	330c      	adds	r3, #12
 80025b4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025b8:	e853 3f00 	ldrex	r3, [r3]
 80025bc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80025be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80025c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	330c      	adds	r3, #12
 80025ce:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80025d2:	647a      	str	r2, [r7, #68]	; 0x44
 80025d4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80025d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80025da:	e841 2300 	strex	r3, r2, [r1]
 80025de:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80025e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d1e3      	bne.n	80025ae <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	3314      	adds	r3, #20
 80025ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f0:	e853 3f00 	ldrex	r3, [r3]
 80025f4:	623b      	str	r3, [r7, #32]
   return(result);
 80025f6:	6a3b      	ldr	r3, [r7, #32]
 80025f8:	f023 0301 	bic.w	r3, r3, #1
 80025fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	3314      	adds	r3, #20
 8002606:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800260a:	633a      	str	r2, [r7, #48]	; 0x30
 800260c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800260e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002610:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002612:	e841 2300 	strex	r3, r2, [r1]
 8002616:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800261a:	2b00      	cmp	r3, #0
 800261c:	d1e3      	bne.n	80025e6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2220      	movs	r2, #32
 8002622:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	330c      	adds	r3, #12
 8002632:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	e853 3f00 	ldrex	r3, [r3]
 800263a:	60fb      	str	r3, [r7, #12]
   return(result);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f023 0310 	bic.w	r3, r3, #16
 8002642:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	330c      	adds	r3, #12
 800264c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002650:	61fa      	str	r2, [r7, #28]
 8002652:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002654:	69b9      	ldr	r1, [r7, #24]
 8002656:	69fa      	ldr	r2, [r7, #28]
 8002658:	e841 2300 	strex	r3, r2, [r1]
 800265c:	617b      	str	r3, [r7, #20]
   return(result);
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d1e3      	bne.n	800262c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002664:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002668:	4619      	mov	r1, r3
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f7fe f87a 	bl	8000764 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002670:	e023      	b.n	80026ba <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002672:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800267a:	2b00      	cmp	r3, #0
 800267c:	d009      	beq.n	8002692 <HAL_UART_IRQHandler+0x4ea>
 800267e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002686:	2b00      	cmp	r3, #0
 8002688:	d003      	beq.n	8002692 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f000 fa8f 	bl	8002bae <UART_Transmit_IT>
    return;
 8002690:	e014      	b.n	80026bc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800269a:	2b00      	cmp	r3, #0
 800269c:	d00e      	beq.n	80026bc <HAL_UART_IRQHandler+0x514>
 800269e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d008      	beq.n	80026bc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f000 facf 	bl	8002c4e <UART_EndTransmit_IT>
    return;
 80026b0:	e004      	b.n	80026bc <HAL_UART_IRQHandler+0x514>
    return;
 80026b2:	bf00      	nop
 80026b4:	e002      	b.n	80026bc <HAL_UART_IRQHandler+0x514>
      return;
 80026b6:	bf00      	nop
 80026b8:	e000      	b.n	80026bc <HAL_UART_IRQHandler+0x514>
      return;
 80026ba:	bf00      	nop
  }
}
 80026bc:	37e8      	adds	r7, #232	; 0xe8
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop

080026c4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80026cc:	bf00      	nop
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr

080026d8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b09c      	sub	sp, #112	; 0x70
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026e4:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d172      	bne.n	80027da <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80026f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026f6:	2200      	movs	r2, #0
 80026f8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80026fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	330c      	adds	r3, #12
 8002700:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002702:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002704:	e853 3f00 	ldrex	r3, [r3]
 8002708:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800270a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800270c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002710:	66bb      	str	r3, [r7, #104]	; 0x68
 8002712:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	330c      	adds	r3, #12
 8002718:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800271a:	65ba      	str	r2, [r7, #88]	; 0x58
 800271c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800271e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002720:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002722:	e841 2300 	strex	r3, r2, [r1]
 8002726:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002728:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800272a:	2b00      	cmp	r3, #0
 800272c:	d1e5      	bne.n	80026fa <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800272e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	3314      	adds	r3, #20
 8002734:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002738:	e853 3f00 	ldrex	r3, [r3]
 800273c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800273e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002740:	f023 0301 	bic.w	r3, r3, #1
 8002744:	667b      	str	r3, [r7, #100]	; 0x64
 8002746:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	3314      	adds	r3, #20
 800274c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800274e:	647a      	str	r2, [r7, #68]	; 0x44
 8002750:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002752:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002754:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002756:	e841 2300 	strex	r3, r2, [r1]
 800275a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800275c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800275e:	2b00      	cmp	r3, #0
 8002760:	d1e5      	bne.n	800272e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002762:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	3314      	adds	r3, #20
 8002768:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800276a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276c:	e853 3f00 	ldrex	r3, [r3]
 8002770:	623b      	str	r3, [r7, #32]
   return(result);
 8002772:	6a3b      	ldr	r3, [r7, #32]
 8002774:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002778:	663b      	str	r3, [r7, #96]	; 0x60
 800277a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	3314      	adds	r3, #20
 8002780:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002782:	633a      	str	r2, [r7, #48]	; 0x30
 8002784:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002786:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002788:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800278a:	e841 2300 	strex	r3, r2, [r1]
 800278e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002792:	2b00      	cmp	r3, #0
 8002794:	d1e5      	bne.n	8002762 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002796:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002798:	2220      	movs	r2, #32
 800279a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800279e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d119      	bne.n	80027da <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	330c      	adds	r3, #12
 80027ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	e853 3f00 	ldrex	r3, [r3]
 80027b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	f023 0310 	bic.w	r3, r3, #16
 80027bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80027be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	330c      	adds	r3, #12
 80027c4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80027c6:	61fa      	str	r2, [r7, #28]
 80027c8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027ca:	69b9      	ldr	r1, [r7, #24]
 80027cc:	69fa      	ldr	r2, [r7, #28]
 80027ce:	e841 2300 	strex	r3, r2, [r1]
 80027d2:	617b      	str	r3, [r7, #20]
   return(result);
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d1e5      	bne.n	80027a6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d106      	bne.n	80027f0 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80027e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80027e6:	4619      	mov	r1, r3
 80027e8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80027ea:	f7fd ffbb 	bl	8000764 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80027ee:	e002      	b.n	80027f6 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80027f0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80027f2:	f7fd fef5 	bl	80005e0 <HAL_UART_RxCpltCallback>
}
 80027f6:	bf00      	nop
 80027f8:	3770      	adds	r7, #112	; 0x70
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}

080027fe <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80027fe:	b580      	push	{r7, lr}
 8002800:	b084      	sub	sp, #16
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800280a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002810:	2b01      	cmp	r3, #1
 8002812:	d108      	bne.n	8002826 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002818:	085b      	lsrs	r3, r3, #1
 800281a:	b29b      	uxth	r3, r3
 800281c:	4619      	mov	r1, r3
 800281e:	68f8      	ldr	r0, [r7, #12]
 8002820:	f7fd ffa0 	bl	8000764 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002824:	e002      	b.n	800282c <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8002826:	68f8      	ldr	r0, [r7, #12]
 8002828:	f7ff ff4c 	bl	80026c4 <HAL_UART_RxHalfCpltCallback>
}
 800282c:	bf00      	nop
 800282e:	3710      	adds	r7, #16
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}

08002834 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800283c:	2300      	movs	r3, #0
 800283e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002844:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	695b      	ldr	r3, [r3, #20]
 800284c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002850:	2b80      	cmp	r3, #128	; 0x80
 8002852:	bf0c      	ite	eq
 8002854:	2301      	moveq	r3, #1
 8002856:	2300      	movne	r3, #0
 8002858:	b2db      	uxtb	r3, r3
 800285a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002862:	b2db      	uxtb	r3, r3
 8002864:	2b21      	cmp	r3, #33	; 0x21
 8002866:	d108      	bne.n	800287a <UART_DMAError+0x46>
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d005      	beq.n	800287a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	2200      	movs	r2, #0
 8002872:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002874:	68b8      	ldr	r0, [r7, #8]
 8002876:	f000 f8fb 	bl	8002a70 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	695b      	ldr	r3, [r3, #20]
 8002880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002884:	2b40      	cmp	r3, #64	; 0x40
 8002886:	bf0c      	ite	eq
 8002888:	2301      	moveq	r3, #1
 800288a:	2300      	movne	r3, #0
 800288c:	b2db      	uxtb	r3, r3
 800288e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002896:	b2db      	uxtb	r3, r3
 8002898:	2b22      	cmp	r3, #34	; 0x22
 800289a:	d108      	bne.n	80028ae <UART_DMAError+0x7a>
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d005      	beq.n	80028ae <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	2200      	movs	r2, #0
 80028a6:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80028a8:	68b8      	ldr	r0, [r7, #8]
 80028aa:	f000 f909 	bl	8002ac0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b2:	f043 0210 	orr.w	r2, r3, #16
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80028ba:	68b8      	ldr	r0, [r7, #8]
 80028bc:	f7fd fefa 	bl	80006b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80028c0:	bf00      	nop
 80028c2:	3710      	adds	r7, #16
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b085      	sub	sp, #20
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	4613      	mov	r3, r2
 80028d4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	68ba      	ldr	r2, [r7, #8]
 80028da:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	88fa      	ldrh	r2, [r7, #6]
 80028e0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	88fa      	ldrh	r2, [r7, #6]
 80028e6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2200      	movs	r2, #0
 80028ec:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2222      	movs	r2, #34	; 0x22
 80028f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	68da      	ldr	r2, [r3, #12]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800290c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	695a      	ldr	r2, [r3, #20]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f042 0201 	orr.w	r2, r2, #1
 800291c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	68da      	ldr	r2, [r3, #12]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f042 0220 	orr.w	r2, r2, #32
 800292c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800292e:	2300      	movs	r3, #0
}
 8002930:	4618      	mov	r0, r3
 8002932:	3714      	adds	r7, #20
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b098      	sub	sp, #96	; 0x60
 8002940:	af00      	add	r7, sp, #0
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	4613      	mov	r3, r2
 8002948:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800294a:	68ba      	ldr	r2, [r7, #8]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	88fa      	ldrh	r2, [r7, #6]
 8002954:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2200      	movs	r2, #0
 800295a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2222      	movs	r2, #34	; 0x22
 8002960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002968:	4a3e      	ldr	r2, [pc, #248]	; (8002a64 <UART_Start_Receive_DMA+0x128>)
 800296a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002970:	4a3d      	ldr	r2, [pc, #244]	; (8002a68 <UART_Start_Receive_DMA+0x12c>)
 8002972:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002978:	4a3c      	ldr	r2, [pc, #240]	; (8002a6c <UART_Start_Receive_DMA+0x130>)
 800297a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002980:	2200      	movs	r2, #0
 8002982:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8002984:	f107 0308 	add.w	r3, r7, #8
 8002988:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	3304      	adds	r3, #4
 8002994:	4619      	mov	r1, r3
 8002996:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	88fb      	ldrh	r3, [r7, #6]
 800299c:	f7fe fa2d 	bl	8000dfa <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80029a0:	2300      	movs	r3, #0
 80029a2:	613b      	str	r3, [r7, #16]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	613b      	str	r3, [r7, #16]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	613b      	str	r3, [r7, #16]
 80029b4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	330c      	adds	r3, #12
 80029c4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029c8:	e853 3f00 	ldrex	r3, [r3]
 80029cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80029ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029d4:	65bb      	str	r3, [r7, #88]	; 0x58
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	330c      	adds	r3, #12
 80029dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80029de:	64fa      	str	r2, [r7, #76]	; 0x4c
 80029e0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029e2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80029e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80029e6:	e841 2300 	strex	r3, r2, [r1]
 80029ea:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80029ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d1e5      	bne.n	80029be <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	3314      	adds	r3, #20
 80029f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029fc:	e853 3f00 	ldrex	r3, [r3]
 8002a00:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a04:	f043 0301 	orr.w	r3, r3, #1
 8002a08:	657b      	str	r3, [r7, #84]	; 0x54
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	3314      	adds	r3, #20
 8002a10:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002a12:	63ba      	str	r2, [r7, #56]	; 0x38
 8002a14:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a16:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002a18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a1a:	e841 2300 	strex	r3, r2, [r1]
 8002a1e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d1e5      	bne.n	80029f2 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	3314      	adds	r3, #20
 8002a2c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	e853 3f00 	ldrex	r3, [r3]
 8002a34:	617b      	str	r3, [r7, #20]
   return(result);
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a3c:	653b      	str	r3, [r7, #80]	; 0x50
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	3314      	adds	r3, #20
 8002a44:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002a46:	627a      	str	r2, [r7, #36]	; 0x24
 8002a48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a4a:	6a39      	ldr	r1, [r7, #32]
 8002a4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a4e:	e841 2300 	strex	r3, r2, [r1]
 8002a52:	61fb      	str	r3, [r7, #28]
   return(result);
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d1e5      	bne.n	8002a26 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8002a5a:	2300      	movs	r3, #0
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3760      	adds	r7, #96	; 0x60
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	080026d9 	.word	0x080026d9
 8002a68:	080027ff 	.word	0x080027ff
 8002a6c:	08002835 	.word	0x08002835

08002a70 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b089      	sub	sp, #36	; 0x24
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	330c      	adds	r3, #12
 8002a7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	e853 3f00 	ldrex	r3, [r3]
 8002a86:	60bb      	str	r3, [r7, #8]
   return(result);
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002a8e:	61fb      	str	r3, [r7, #28]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	330c      	adds	r3, #12
 8002a96:	69fa      	ldr	r2, [r7, #28]
 8002a98:	61ba      	str	r2, [r7, #24]
 8002a9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a9c:	6979      	ldr	r1, [r7, #20]
 8002a9e:	69ba      	ldr	r2, [r7, #24]
 8002aa0:	e841 2300 	strex	r3, r2, [r1]
 8002aa4:	613b      	str	r3, [r7, #16]
   return(result);
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d1e5      	bne.n	8002a78 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2220      	movs	r2, #32
 8002ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8002ab4:	bf00      	nop
 8002ab6:	3724      	adds	r7, #36	; 0x24
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr

08002ac0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b095      	sub	sp, #84	; 0x54
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	330c      	adds	r3, #12
 8002ace:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ad2:	e853 3f00 	ldrex	r3, [r3]
 8002ad6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ada:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002ade:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	330c      	adds	r3, #12
 8002ae6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ae8:	643a      	str	r2, [r7, #64]	; 0x40
 8002aea:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002aee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002af0:	e841 2300 	strex	r3, r2, [r1]
 8002af4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d1e5      	bne.n	8002ac8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	3314      	adds	r3, #20
 8002b02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b04:	6a3b      	ldr	r3, [r7, #32]
 8002b06:	e853 3f00 	ldrex	r3, [r3]
 8002b0a:	61fb      	str	r3, [r7, #28]
   return(result);
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	f023 0301 	bic.w	r3, r3, #1
 8002b12:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	3314      	adds	r3, #20
 8002b1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002b1c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b24:	e841 2300 	strex	r3, r2, [r1]
 8002b28:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d1e5      	bne.n	8002afc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d119      	bne.n	8002b6c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	330c      	adds	r3, #12
 8002b3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	e853 3f00 	ldrex	r3, [r3]
 8002b46:	60bb      	str	r3, [r7, #8]
   return(result);
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	f023 0310 	bic.w	r3, r3, #16
 8002b4e:	647b      	str	r3, [r7, #68]	; 0x44
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	330c      	adds	r3, #12
 8002b56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002b58:	61ba      	str	r2, [r7, #24]
 8002b5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b5c:	6979      	ldr	r1, [r7, #20]
 8002b5e:	69ba      	ldr	r2, [r7, #24]
 8002b60:	e841 2300 	strex	r3, r2, [r1]
 8002b64:	613b      	str	r3, [r7, #16]
   return(result);
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d1e5      	bne.n	8002b38 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2220      	movs	r2, #32
 8002b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002b7a:	bf00      	nop
 8002b7c:	3754      	adds	r7, #84	; 0x54
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr

08002b86 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002b86:	b580      	push	{r7, lr}
 8002b88:	b084      	sub	sp, #16
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b92:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2200      	movs	r2, #0
 8002b98:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002ba0:	68f8      	ldr	r0, [r7, #12]
 8002ba2:	f7fd fd87 	bl	80006b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002ba6:	bf00      	nop
 8002ba8:	3710      	adds	r7, #16
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}

08002bae <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002bae:	b480      	push	{r7}
 8002bb0:	b085      	sub	sp, #20
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	2b21      	cmp	r3, #33	; 0x21
 8002bc0:	d13e      	bne.n	8002c40 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bca:	d114      	bne.n	8002bf6 <UART_Transmit_IT+0x48>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	691b      	ldr	r3, [r3, #16]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d110      	bne.n	8002bf6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a1b      	ldr	r3, [r3, #32]
 8002bd8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	881b      	ldrh	r3, [r3, #0]
 8002bde:	461a      	mov	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002be8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a1b      	ldr	r3, [r3, #32]
 8002bee:	1c9a      	adds	r2, r3, #2
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	621a      	str	r2, [r3, #32]
 8002bf4:	e008      	b.n	8002c08 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a1b      	ldr	r3, [r3, #32]
 8002bfa:	1c59      	adds	r1, r3, #1
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	6211      	str	r1, [r2, #32]
 8002c00:	781a      	ldrb	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	3b01      	subs	r3, #1
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	4619      	mov	r1, r3
 8002c16:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d10f      	bne.n	8002c3c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	68da      	ldr	r2, [r3, #12]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c2a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	68da      	ldr	r2, [r3, #12]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c3a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	e000      	b.n	8002c42 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002c40:	2302      	movs	r3, #2
  }
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3714      	adds	r7, #20
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr

08002c4e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002c4e:	b580      	push	{r7, lr}
 8002c50:	b082      	sub	sp, #8
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	68da      	ldr	r2, [r3, #12]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c64:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2220      	movs	r2, #32
 8002c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f7fd fc78 	bl	8000564 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3708      	adds	r7, #8
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}

08002c7e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002c7e:	b580      	push	{r7, lr}
 8002c80:	b08c      	sub	sp, #48	; 0x30
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	2b22      	cmp	r3, #34	; 0x22
 8002c90:	f040 80ab 	bne.w	8002dea <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c9c:	d117      	bne.n	8002cce <UART_Receive_IT+0x50>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	691b      	ldr	r3, [r3, #16]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d113      	bne.n	8002cce <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cae:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cbc:	b29a      	uxth	r2, r3
 8002cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc6:	1c9a      	adds	r2, r3, #2
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	629a      	str	r2, [r3, #40]	; 0x28
 8002ccc:	e026      	b.n	8002d1c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ce0:	d007      	beq.n	8002cf2 <UART_Receive_IT+0x74>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d10a      	bne.n	8002d00 <UART_Receive_IT+0x82>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	691b      	ldr	r3, [r3, #16]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d106      	bne.n	8002d00 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	b2da      	uxtb	r2, r3
 8002cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cfc:	701a      	strb	r2, [r3, #0]
 8002cfe:	e008      	b.n	8002d12 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d0c:	b2da      	uxtb	r2, r3
 8002d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d10:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d16:	1c5a      	adds	r2, r3, #1
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	3b01      	subs	r3, #1
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	4619      	mov	r1, r3
 8002d2a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d15a      	bne.n	8002de6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	68da      	ldr	r2, [r3, #12]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f022 0220 	bic.w	r2, r2, #32
 8002d3e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	68da      	ldr	r2, [r3, #12]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d4e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	695a      	ldr	r2, [r3, #20]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f022 0201 	bic.w	r2, r2, #1
 8002d5e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2220      	movs	r2, #32
 8002d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d135      	bne.n	8002ddc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	330c      	adds	r3, #12
 8002d7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	e853 3f00 	ldrex	r3, [r3]
 8002d84:	613b      	str	r3, [r7, #16]
   return(result);
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	f023 0310 	bic.w	r3, r3, #16
 8002d8c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	330c      	adds	r3, #12
 8002d94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d96:	623a      	str	r2, [r7, #32]
 8002d98:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d9a:	69f9      	ldr	r1, [r7, #28]
 8002d9c:	6a3a      	ldr	r2, [r7, #32]
 8002d9e:	e841 2300 	strex	r3, r2, [r1]
 8002da2:	61bb      	str	r3, [r7, #24]
   return(result);
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d1e5      	bne.n	8002d76 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0310 	and.w	r3, r3, #16
 8002db4:	2b10      	cmp	r3, #16
 8002db6:	d10a      	bne.n	8002dce <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002db8:	2300      	movs	r3, #0
 8002dba:	60fb      	str	r3, [r7, #12]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	60fb      	str	r3, [r7, #12]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	60fb      	str	r3, [r7, #12]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f7fd fcc5 	bl	8000764 <HAL_UARTEx_RxEventCallback>
 8002dda:	e002      	b.n	8002de2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f7fd fbff 	bl	80005e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002de2:	2300      	movs	r3, #0
 8002de4:	e002      	b.n	8002dec <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002de6:	2300      	movs	r3, #0
 8002de8:	e000      	b.n	8002dec <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002dea:	2302      	movs	r3, #2
  }
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3730      	adds	r7, #48	; 0x30
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8002dfc:	4b04      	ldr	r3, [pc, #16]	; (8002e10 <HAL_ETH_RxCpltCallback+0x1c>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4618      	mov	r0, r3
 8002e02:	f000 f807 	bl	8002e14 <osSemaphoreRelease>
}
 8002e06:	bf00      	nop
 8002e08:	3708      	adds	r7, #8
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	20000030 	.word	0x20000030

08002e14 <osSemaphoreRelease>:
  }

  return (stat);
}

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b086      	sub	sp, #24
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8002e20:	2300      	movs	r3, #0
 8002e22:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d103      	bne.n	8002e32 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8002e2a:	f06f 0303 	mvn.w	r3, #3
 8002e2e:	617b      	str	r3, [r7, #20]
 8002e30:	e02c      	b.n	8002e8c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e32:	f3ef 8305 	mrs	r3, IPSR
 8002e36:	60fb      	str	r3, [r7, #12]
  return(result);
 8002e38:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d01a      	beq.n	8002e74 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8002e42:	f107 0308 	add.w	r3, r7, #8
 8002e46:	4619      	mov	r1, r3
 8002e48:	6938      	ldr	r0, [r7, #16]
 8002e4a:	f000 fa48 	bl	80032de <xQueueGiveFromISR>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d003      	beq.n	8002e5c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8002e54:	f06f 0302 	mvn.w	r3, #2
 8002e58:	617b      	str	r3, [r7, #20]
 8002e5a:	e017      	b.n	8002e8c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d014      	beq.n	8002e8c <osSemaphoreRelease+0x78>
 8002e62:	4b0d      	ldr	r3, [pc, #52]	; (8002e98 <osSemaphoreRelease+0x84>)
 8002e64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e68:	601a      	str	r2, [r3, #0]
 8002e6a:	f3bf 8f4f 	dsb	sy
 8002e6e:	f3bf 8f6f 	isb	sy
 8002e72:	e00b      	b.n	8002e8c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8002e74:	2300      	movs	r3, #0
 8002e76:	2200      	movs	r2, #0
 8002e78:	2100      	movs	r1, #0
 8002e7a:	6938      	ldr	r0, [r7, #16]
 8002e7c:	f000 f896 	bl	8002fac <xQueueGenericSend>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d002      	beq.n	8002e8c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8002e86:	f06f 0302 	mvn.w	r3, #2
 8002e8a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8002e8c:	697b      	ldr	r3, [r7, #20]
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3718      	adds	r7, #24
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	e000ed04 	.word	0xe000ed04

08002e9c <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b085      	sub	sp, #20
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	68fa      	ldr	r2, [r7, #12]
 8002eb0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	689a      	ldr	r2, [r3, #8]
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	683a      	ldr	r2, [r7, #0]
 8002ec0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	683a      	ldr	r2, [r7, #0]
 8002ec6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	1c5a      	adds	r2, r3, #1
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	601a      	str	r2, [r3, #0]
}
 8002ed8:	bf00      	nop
 8002eda:	3714      	adds	r7, #20
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b085      	sub	sp, #20
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002efa:	d103      	bne.n	8002f04 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	691b      	ldr	r3, [r3, #16]
 8002f00:	60fb      	str	r3, [r7, #12]
 8002f02:	e00c      	b.n	8002f1e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	3308      	adds	r3, #8
 8002f08:	60fb      	str	r3, [r7, #12]
 8002f0a:	e002      	b.n	8002f12 <vListInsert+0x2e>
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	60fb      	str	r3, [r7, #12]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	68ba      	ldr	r2, [r7, #8]
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d2f6      	bcs.n	8002f0c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	685a      	ldr	r2, [r3, #4]
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	683a      	ldr	r2, [r7, #0]
 8002f2c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	68fa      	ldr	r2, [r7, #12]
 8002f32:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	683a      	ldr	r2, [r7, #0]
 8002f38:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	1c5a      	adds	r2, r3, #1
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	601a      	str	r2, [r3, #0]
}
 8002f4a:	bf00      	nop
 8002f4c:	3714      	adds	r7, #20
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr

08002f56 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002f56:	b480      	push	{r7}
 8002f58:	b085      	sub	sp, #20
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	691b      	ldr	r3, [r3, #16]
 8002f62:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	6892      	ldr	r2, [r2, #8]
 8002f6c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	6852      	ldr	r2, [r2, #4]
 8002f76:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d103      	bne.n	8002f8a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	689a      	ldr	r2, [r3, #8]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	1e5a      	subs	r2, r3, #1
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3714      	adds	r7, #20
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
	...

08002fac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b08e      	sub	sp, #56	; 0x38
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	60b9      	str	r1, [r7, #8]
 8002fb6:	607a      	str	r2, [r7, #4]
 8002fb8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d10a      	bne.n	8002fde <xQueueGenericSend+0x32>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fcc:	f383 8811 	msr	BASEPRI, r3
 8002fd0:	f3bf 8f6f 	isb	sy
 8002fd4:	f3bf 8f4f 	dsb	sy
 8002fd8:	62bb      	str	r3, [r7, #40]	; 0x28
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002fda:	bf00      	nop
 8002fdc:	e7fe      	b.n	8002fdc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d103      	bne.n	8002fec <xQueueGenericSend+0x40>
 8002fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d101      	bne.n	8002ff0 <xQueueGenericSend+0x44>
 8002fec:	2301      	movs	r3, #1
 8002fee:	e000      	b.n	8002ff2 <xQueueGenericSend+0x46>
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d10a      	bne.n	800300c <xQueueGenericSend+0x60>
	__asm volatile
 8002ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ffa:	f383 8811 	msr	BASEPRI, r3
 8002ffe:	f3bf 8f6f 	isb	sy
 8003002:	f3bf 8f4f 	dsb	sy
 8003006:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003008:	bf00      	nop
 800300a:	e7fe      	b.n	800300a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	2b02      	cmp	r3, #2
 8003010:	d103      	bne.n	800301a <xQueueGenericSend+0x6e>
 8003012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003016:	2b01      	cmp	r3, #1
 8003018:	d101      	bne.n	800301e <xQueueGenericSend+0x72>
 800301a:	2301      	movs	r3, #1
 800301c:	e000      	b.n	8003020 <xQueueGenericSend+0x74>
 800301e:	2300      	movs	r3, #0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d10a      	bne.n	800303a <xQueueGenericSend+0x8e>
	__asm volatile
 8003024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003028:	f383 8811 	msr	BASEPRI, r3
 800302c:	f3bf 8f6f 	isb	sy
 8003030:	f3bf 8f4f 	dsb	sy
 8003034:	623b      	str	r3, [r7, #32]
}
 8003036:	bf00      	nop
 8003038:	e7fe      	b.n	8003038 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800303a:	f000 fdb3 	bl	8003ba4 <xTaskGetSchedulerState>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d102      	bne.n	800304a <xQueueGenericSend+0x9e>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d101      	bne.n	800304e <xQueueGenericSend+0xa2>
 800304a:	2301      	movs	r3, #1
 800304c:	e000      	b.n	8003050 <xQueueGenericSend+0xa4>
 800304e:	2300      	movs	r3, #0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d10a      	bne.n	800306a <xQueueGenericSend+0xbe>
	__asm volatile
 8003054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003058:	f383 8811 	msr	BASEPRI, r3
 800305c:	f3bf 8f6f 	isb	sy
 8003060:	f3bf 8f4f 	dsb	sy
 8003064:	61fb      	str	r3, [r7, #28]
}
 8003066:	bf00      	nop
 8003068:	e7fe      	b.n	8003068 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800306a:	f000 ffbd 	bl	8003fe8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800306e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003070:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003076:	429a      	cmp	r2, r3
 8003078:	d302      	bcc.n	8003080 <xQueueGenericSend+0xd4>
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	2b02      	cmp	r3, #2
 800307e:	d129      	bne.n	80030d4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003080:	683a      	ldr	r2, [r7, #0]
 8003082:	68b9      	ldr	r1, [r7, #8]
 8003084:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003086:	f000 f9b7 	bl	80033f8 <prvCopyDataToQueue>
 800308a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800308c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800308e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003090:	2b00      	cmp	r3, #0
 8003092:	d010      	beq.n	80030b6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003096:	3324      	adds	r3, #36	; 0x24
 8003098:	4618      	mov	r0, r3
 800309a:	f000 fc7b 	bl	8003994 <xTaskRemoveFromEventList>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d013      	beq.n	80030cc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80030a4:	4b3f      	ldr	r3, [pc, #252]	; (80031a4 <xQueueGenericSend+0x1f8>)
 80030a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030aa:	601a      	str	r2, [r3, #0]
 80030ac:	f3bf 8f4f 	dsb	sy
 80030b0:	f3bf 8f6f 	isb	sy
 80030b4:	e00a      	b.n	80030cc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80030b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d007      	beq.n	80030cc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80030bc:	4b39      	ldr	r3, [pc, #228]	; (80031a4 <xQueueGenericSend+0x1f8>)
 80030be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030c2:	601a      	str	r2, [r3, #0]
 80030c4:	f3bf 8f4f 	dsb	sy
 80030c8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80030cc:	f000 ffbc 	bl	8004048 <vPortExitCritical>
				return pdPASS;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e063      	b.n	800319c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d103      	bne.n	80030e2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80030da:	f000 ffb5 	bl	8004048 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80030de:	2300      	movs	r3, #0
 80030e0:	e05c      	b.n	800319c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80030e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d106      	bne.n	80030f6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80030e8:	f107 0314 	add.w	r3, r7, #20
 80030ec:	4618      	mov	r0, r3
 80030ee:	f000 fcb5 	bl	8003a5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80030f2:	2301      	movs	r3, #1
 80030f4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80030f6:	f000 ffa7 	bl	8004048 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80030fa:	f000 fa51 	bl	80035a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80030fe:	f000 ff73 	bl	8003fe8 <vPortEnterCritical>
 8003102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003104:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003108:	b25b      	sxtb	r3, r3
 800310a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800310e:	d103      	bne.n	8003118 <xQueueGenericSend+0x16c>
 8003110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003112:	2200      	movs	r2, #0
 8003114:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800311a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800311e:	b25b      	sxtb	r3, r3
 8003120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003124:	d103      	bne.n	800312e <xQueueGenericSend+0x182>
 8003126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003128:	2200      	movs	r2, #0
 800312a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800312e:	f000 ff8b 	bl	8004048 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003132:	1d3a      	adds	r2, r7, #4
 8003134:	f107 0314 	add.w	r3, r7, #20
 8003138:	4611      	mov	r1, r2
 800313a:	4618      	mov	r0, r3
 800313c:	f000 fca4 	bl	8003a88 <xTaskCheckForTimeOut>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d124      	bne.n	8003190 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003146:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003148:	f000 fa12 	bl	8003570 <prvIsQueueFull>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d018      	beq.n	8003184 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003154:	3310      	adds	r3, #16
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	4611      	mov	r1, r2
 800315a:	4618      	mov	r0, r3
 800315c:	f000 fbf6 	bl	800394c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003160:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003162:	f000 f9b3 	bl	80034cc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003166:	f000 fa29 	bl	80035bc <xTaskResumeAll>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	f47f af7c 	bne.w	800306a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003172:	4b0c      	ldr	r3, [pc, #48]	; (80031a4 <xQueueGenericSend+0x1f8>)
 8003174:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003178:	601a      	str	r2, [r3, #0]
 800317a:	f3bf 8f4f 	dsb	sy
 800317e:	f3bf 8f6f 	isb	sy
 8003182:	e772      	b.n	800306a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003184:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003186:	f000 f9a1 	bl	80034cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800318a:	f000 fa17 	bl	80035bc <xTaskResumeAll>
 800318e:	e76c      	b.n	800306a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003190:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003192:	f000 f99b 	bl	80034cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003196:	f000 fa11 	bl	80035bc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800319a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800319c:	4618      	mov	r0, r3
 800319e:	3738      	adds	r7, #56	; 0x38
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	e000ed04 	.word	0xe000ed04

080031a8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b090      	sub	sp, #64	; 0x40
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	60b9      	str	r1, [r7, #8]
 80031b2:	607a      	str	r2, [r7, #4]
 80031b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80031ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d10a      	bne.n	80031d6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80031c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031c4:	f383 8811 	msr	BASEPRI, r3
 80031c8:	f3bf 8f6f 	isb	sy
 80031cc:	f3bf 8f4f 	dsb	sy
 80031d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80031d2:	bf00      	nop
 80031d4:	e7fe      	b.n	80031d4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d103      	bne.n	80031e4 <xQueueGenericSendFromISR+0x3c>
 80031dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d101      	bne.n	80031e8 <xQueueGenericSendFromISR+0x40>
 80031e4:	2301      	movs	r3, #1
 80031e6:	e000      	b.n	80031ea <xQueueGenericSendFromISR+0x42>
 80031e8:	2300      	movs	r3, #0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d10a      	bne.n	8003204 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80031ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031f2:	f383 8811 	msr	BASEPRI, r3
 80031f6:	f3bf 8f6f 	isb	sy
 80031fa:	f3bf 8f4f 	dsb	sy
 80031fe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003200:	bf00      	nop
 8003202:	e7fe      	b.n	8003202 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	2b02      	cmp	r3, #2
 8003208:	d103      	bne.n	8003212 <xQueueGenericSendFromISR+0x6a>
 800320a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800320c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800320e:	2b01      	cmp	r3, #1
 8003210:	d101      	bne.n	8003216 <xQueueGenericSendFromISR+0x6e>
 8003212:	2301      	movs	r3, #1
 8003214:	e000      	b.n	8003218 <xQueueGenericSendFromISR+0x70>
 8003216:	2300      	movs	r3, #0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d10a      	bne.n	8003232 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800321c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003220:	f383 8811 	msr	BASEPRI, r3
 8003224:	f3bf 8f6f 	isb	sy
 8003228:	f3bf 8f4f 	dsb	sy
 800322c:	623b      	str	r3, [r7, #32]
}
 800322e:	bf00      	nop
 8003230:	e7fe      	b.n	8003230 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003232:	f000 ff8b 	bl	800414c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003236:	f3ef 8211 	mrs	r2, BASEPRI
 800323a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800323e:	f383 8811 	msr	BASEPRI, r3
 8003242:	f3bf 8f6f 	isb	sy
 8003246:	f3bf 8f4f 	dsb	sy
 800324a:	61fa      	str	r2, [r7, #28]
 800324c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800324e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003250:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003254:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800325a:	429a      	cmp	r2, r3
 800325c:	d302      	bcc.n	8003264 <xQueueGenericSendFromISR+0xbc>
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	2b02      	cmp	r3, #2
 8003262:	d12f      	bne.n	80032c4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003266:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800326a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800326e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003272:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003274:	683a      	ldr	r2, [r7, #0]
 8003276:	68b9      	ldr	r1, [r7, #8]
 8003278:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800327a:	f000 f8bd 	bl	80033f8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800327e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003286:	d112      	bne.n	80032ae <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800328a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328c:	2b00      	cmp	r3, #0
 800328e:	d016      	beq.n	80032be <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003292:	3324      	adds	r3, #36	; 0x24
 8003294:	4618      	mov	r0, r3
 8003296:	f000 fb7d 	bl	8003994 <xTaskRemoveFromEventList>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d00e      	beq.n	80032be <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d00b      	beq.n	80032be <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2201      	movs	r2, #1
 80032aa:	601a      	str	r2, [r3, #0]
 80032ac:	e007      	b.n	80032be <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80032ae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80032b2:	3301      	adds	r3, #1
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	b25a      	sxtb	r2, r3
 80032b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80032be:	2301      	movs	r3, #1
 80032c0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80032c2:	e001      	b.n	80032c8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80032c4:	2300      	movs	r3, #0
 80032c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032ca:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80032d2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80032d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3740      	adds	r7, #64	; 0x40
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}

080032de <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80032de:	b580      	push	{r7, lr}
 80032e0:	b08e      	sub	sp, #56	; 0x38
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
 80032e6:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80032ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d10a      	bne.n	8003308 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80032f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032f6:	f383 8811 	msr	BASEPRI, r3
 80032fa:	f3bf 8f6f 	isb	sy
 80032fe:	f3bf 8f4f 	dsb	sy
 8003302:	623b      	str	r3, [r7, #32]
}
 8003304:	bf00      	nop
 8003306:	e7fe      	b.n	8003306 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800330a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330c:	2b00      	cmp	r3, #0
 800330e:	d00a      	beq.n	8003326 <xQueueGiveFromISR+0x48>
	__asm volatile
 8003310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003314:	f383 8811 	msr	BASEPRI, r3
 8003318:	f3bf 8f6f 	isb	sy
 800331c:	f3bf 8f4f 	dsb	sy
 8003320:	61fb      	str	r3, [r7, #28]
}
 8003322:	bf00      	nop
 8003324:	e7fe      	b.n	8003324 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8003326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d103      	bne.n	8003336 <xQueueGiveFromISR+0x58>
 800332e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d101      	bne.n	800333a <xQueueGiveFromISR+0x5c>
 8003336:	2301      	movs	r3, #1
 8003338:	e000      	b.n	800333c <xQueueGiveFromISR+0x5e>
 800333a:	2300      	movs	r3, #0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d10a      	bne.n	8003356 <xQueueGiveFromISR+0x78>
	__asm volatile
 8003340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003344:	f383 8811 	msr	BASEPRI, r3
 8003348:	f3bf 8f6f 	isb	sy
 800334c:	f3bf 8f4f 	dsb	sy
 8003350:	61bb      	str	r3, [r7, #24]
}
 8003352:	bf00      	nop
 8003354:	e7fe      	b.n	8003354 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003356:	f000 fef9 	bl	800414c <vPortValidateInterruptPriority>
	__asm volatile
 800335a:	f3ef 8211 	mrs	r2, BASEPRI
 800335e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003362:	f383 8811 	msr	BASEPRI, r3
 8003366:	f3bf 8f6f 	isb	sy
 800336a:	f3bf 8f4f 	dsb	sy
 800336e:	617a      	str	r2, [r7, #20]
 8003370:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8003372:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003374:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800337a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800337c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800337e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003380:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003382:	429a      	cmp	r2, r3
 8003384:	d22b      	bcs.n	80033de <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003388:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800338c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003392:	1c5a      	adds	r2, r3, #1
 8003394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003396:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003398:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800339c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033a0:	d112      	bne.n	80033c8 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80033a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d016      	beq.n	80033d8 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80033aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ac:	3324      	adds	r3, #36	; 0x24
 80033ae:	4618      	mov	r0, r3
 80033b0:	f000 faf0 	bl	8003994 <xTaskRemoveFromEventList>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00e      	beq.n	80033d8 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d00b      	beq.n	80033d8 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	2201      	movs	r2, #1
 80033c4:	601a      	str	r2, [r3, #0]
 80033c6:	e007      	b.n	80033d8 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80033c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80033cc:	3301      	adds	r3, #1
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	b25a      	sxtb	r2, r3
 80033d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80033d8:	2301      	movs	r3, #1
 80033da:	637b      	str	r3, [r7, #52]	; 0x34
 80033dc:	e001      	b.n	80033e2 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80033de:	2300      	movs	r3, #0
 80033e0:	637b      	str	r3, [r7, #52]	; 0x34
 80033e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033e4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	f383 8811 	msr	BASEPRI, r3
}
 80033ec:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80033ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3738      	adds	r7, #56	; 0x38
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b086      	sub	sp, #24
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	60b9      	str	r1, [r7, #8]
 8003402:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003404:	2300      	movs	r3, #0
 8003406:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800340c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003412:	2b00      	cmp	r3, #0
 8003414:	d10d      	bne.n	8003432 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d14d      	bne.n	80034ba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	4618      	mov	r0, r3
 8003424:	f000 fbdc 	bl	8003be0 <xTaskPriorityDisinherit>
 8003428:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2200      	movs	r2, #0
 800342e:	609a      	str	r2, [r3, #8]
 8003430:	e043      	b.n	80034ba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d119      	bne.n	800346c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6858      	ldr	r0, [r3, #4]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003440:	461a      	mov	r2, r3
 8003442:	68b9      	ldr	r1, [r7, #8]
 8003444:	f000 fee6 	bl	8004214 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	685a      	ldr	r2, [r3, #4]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003450:	441a      	add	r2, r3
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	685a      	ldr	r2, [r3, #4]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	429a      	cmp	r2, r3
 8003460:	d32b      	bcc.n	80034ba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	605a      	str	r2, [r3, #4]
 800346a:	e026      	b.n	80034ba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	68d8      	ldr	r0, [r3, #12]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003474:	461a      	mov	r2, r3
 8003476:	68b9      	ldr	r1, [r7, #8]
 8003478:	f000 fecc 	bl	8004214 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	68da      	ldr	r2, [r3, #12]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003484:	425b      	negs	r3, r3
 8003486:	441a      	add	r2, r3
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	68da      	ldr	r2, [r3, #12]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	429a      	cmp	r2, r3
 8003496:	d207      	bcs.n	80034a8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	689a      	ldr	r2, [r3, #8]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a0:	425b      	negs	r3, r3
 80034a2:	441a      	add	r2, r3
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d105      	bne.n	80034ba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d002      	beq.n	80034ba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	3b01      	subs	r3, #1
 80034b8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	1c5a      	adds	r2, r3, #1
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80034c2:	697b      	ldr	r3, [r7, #20]
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3718      	adds	r7, #24
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}

080034cc <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80034d4:	f000 fd88 	bl	8003fe8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80034de:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80034e0:	e011      	b.n	8003506 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d012      	beq.n	8003510 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	3324      	adds	r3, #36	; 0x24
 80034ee:	4618      	mov	r0, r3
 80034f0:	f000 fa50 	bl	8003994 <xTaskRemoveFromEventList>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d001      	beq.n	80034fe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80034fa:	f000 fb27 	bl	8003b4c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80034fe:	7bfb      	ldrb	r3, [r7, #15]
 8003500:	3b01      	subs	r3, #1
 8003502:	b2db      	uxtb	r3, r3
 8003504:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003506:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800350a:	2b00      	cmp	r3, #0
 800350c:	dce9      	bgt.n	80034e2 <prvUnlockQueue+0x16>
 800350e:	e000      	b.n	8003512 <prvUnlockQueue+0x46>
					break;
 8003510:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	22ff      	movs	r2, #255	; 0xff
 8003516:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800351a:	f000 fd95 	bl	8004048 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800351e:	f000 fd63 	bl	8003fe8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003528:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800352a:	e011      	b.n	8003550 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	691b      	ldr	r3, [r3, #16]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d012      	beq.n	800355a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	3310      	adds	r3, #16
 8003538:	4618      	mov	r0, r3
 800353a:	f000 fa2b 	bl	8003994 <xTaskRemoveFromEventList>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d001      	beq.n	8003548 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003544:	f000 fb02 	bl	8003b4c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003548:	7bbb      	ldrb	r3, [r7, #14]
 800354a:	3b01      	subs	r3, #1
 800354c:	b2db      	uxtb	r3, r3
 800354e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003550:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003554:	2b00      	cmp	r3, #0
 8003556:	dce9      	bgt.n	800352c <prvUnlockQueue+0x60>
 8003558:	e000      	b.n	800355c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800355a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	22ff      	movs	r2, #255	; 0xff
 8003560:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003564:	f000 fd70 	bl	8004048 <vPortExitCritical>
}
 8003568:	bf00      	nop
 800356a:	3710      	adds	r7, #16
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003578:	f000 fd36 	bl	8003fe8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003584:	429a      	cmp	r2, r3
 8003586:	d102      	bne.n	800358e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003588:	2301      	movs	r3, #1
 800358a:	60fb      	str	r3, [r7, #12]
 800358c:	e001      	b.n	8003592 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800358e:	2300      	movs	r3, #0
 8003590:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003592:	f000 fd59 	bl	8004048 <vPortExitCritical>

	return xReturn;
 8003596:	68fb      	ldr	r3, [r7, #12]
}
 8003598:	4618      	mov	r0, r3
 800359a:	3710      	adds	r7, #16
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}

080035a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80035a0:	b480      	push	{r7}
 80035a2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80035a4:	4b04      	ldr	r3, [pc, #16]	; (80035b8 <vTaskSuspendAll+0x18>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	3301      	adds	r3, #1
 80035aa:	4a03      	ldr	r2, [pc, #12]	; (80035b8 <vTaskSuspendAll+0x18>)
 80035ac:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80035ae:	bf00      	nop
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr
 80035b8:	200004e8 	.word	0x200004e8

080035bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80035c2:	2300      	movs	r3, #0
 80035c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80035c6:	2300      	movs	r3, #0
 80035c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80035ca:	4b42      	ldr	r3, [pc, #264]	; (80036d4 <xTaskResumeAll+0x118>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d10a      	bne.n	80035e8 <xTaskResumeAll+0x2c>
	__asm volatile
 80035d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035d6:	f383 8811 	msr	BASEPRI, r3
 80035da:	f3bf 8f6f 	isb	sy
 80035de:	f3bf 8f4f 	dsb	sy
 80035e2:	603b      	str	r3, [r7, #0]
}
 80035e4:	bf00      	nop
 80035e6:	e7fe      	b.n	80035e6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80035e8:	f000 fcfe 	bl	8003fe8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80035ec:	4b39      	ldr	r3, [pc, #228]	; (80036d4 <xTaskResumeAll+0x118>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	3b01      	subs	r3, #1
 80035f2:	4a38      	ldr	r2, [pc, #224]	; (80036d4 <xTaskResumeAll+0x118>)
 80035f4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035f6:	4b37      	ldr	r3, [pc, #220]	; (80036d4 <xTaskResumeAll+0x118>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d162      	bne.n	80036c4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80035fe:	4b36      	ldr	r3, [pc, #216]	; (80036d8 <xTaskResumeAll+0x11c>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d05e      	beq.n	80036c4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003606:	e02f      	b.n	8003668 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003608:	4b34      	ldr	r3, [pc, #208]	; (80036dc <xTaskResumeAll+0x120>)
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	3318      	adds	r3, #24
 8003614:	4618      	mov	r0, r3
 8003616:	f7ff fc9e 	bl	8002f56 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	3304      	adds	r3, #4
 800361e:	4618      	mov	r0, r3
 8003620:	f7ff fc99 	bl	8002f56 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003628:	4b2d      	ldr	r3, [pc, #180]	; (80036e0 <xTaskResumeAll+0x124>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	429a      	cmp	r2, r3
 800362e:	d903      	bls.n	8003638 <xTaskResumeAll+0x7c>
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003634:	4a2a      	ldr	r2, [pc, #168]	; (80036e0 <xTaskResumeAll+0x124>)
 8003636:	6013      	str	r3, [r2, #0]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800363c:	4613      	mov	r3, r2
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	4413      	add	r3, r2
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	4a27      	ldr	r2, [pc, #156]	; (80036e4 <xTaskResumeAll+0x128>)
 8003646:	441a      	add	r2, r3
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	3304      	adds	r3, #4
 800364c:	4619      	mov	r1, r3
 800364e:	4610      	mov	r0, r2
 8003650:	f7ff fc24 	bl	8002e9c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003658:	4b23      	ldr	r3, [pc, #140]	; (80036e8 <xTaskResumeAll+0x12c>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800365e:	429a      	cmp	r2, r3
 8003660:	d302      	bcc.n	8003668 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003662:	4b22      	ldr	r3, [pc, #136]	; (80036ec <xTaskResumeAll+0x130>)
 8003664:	2201      	movs	r2, #1
 8003666:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003668:	4b1c      	ldr	r3, [pc, #112]	; (80036dc <xTaskResumeAll+0x120>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d1cb      	bne.n	8003608 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d001      	beq.n	800367a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003676:	f000 fa75 	bl	8003b64 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800367a:	4b1d      	ldr	r3, [pc, #116]	; (80036f0 <xTaskResumeAll+0x134>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d010      	beq.n	80036a8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003686:	f000 f849 	bl	800371c <xTaskIncrementTick>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d002      	beq.n	8003696 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003690:	4b16      	ldr	r3, [pc, #88]	; (80036ec <xTaskResumeAll+0x130>)
 8003692:	2201      	movs	r2, #1
 8003694:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	3b01      	subs	r3, #1
 800369a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d1f1      	bne.n	8003686 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80036a2:	4b13      	ldr	r3, [pc, #76]	; (80036f0 <xTaskResumeAll+0x134>)
 80036a4:	2200      	movs	r2, #0
 80036a6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80036a8:	4b10      	ldr	r3, [pc, #64]	; (80036ec <xTaskResumeAll+0x130>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d009      	beq.n	80036c4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80036b0:	2301      	movs	r3, #1
 80036b2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80036b4:	4b0f      	ldr	r3, [pc, #60]	; (80036f4 <xTaskResumeAll+0x138>)
 80036b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036ba:	601a      	str	r2, [r3, #0]
 80036bc:	f3bf 8f4f 	dsb	sy
 80036c0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80036c4:	f000 fcc0 	bl	8004048 <vPortExitCritical>

	return xAlreadyYielded;
 80036c8:	68bb      	ldr	r3, [r7, #8]
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3710      	adds	r7, #16
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	200004e8 	.word	0x200004e8
 80036d8:	200004c8 	.word	0x200004c8
 80036dc:	200004a0 	.word	0x200004a0
 80036e0:	200004d0 	.word	0x200004d0
 80036e4:	20000038 	.word	0x20000038
 80036e8:	20000034 	.word	0x20000034
 80036ec:	200004dc 	.word	0x200004dc
 80036f0:	200004d8 	.word	0x200004d8
 80036f4:	e000ed04 	.word	0xe000ed04

080036f8 <xTaskGetTickCountFromISR>:
	return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80036fe:	f000 fd25 	bl	800414c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003702:	2300      	movs	r3, #0
 8003704:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8003706:	4b04      	ldr	r3, [pc, #16]	; (8003718 <xTaskGetTickCountFromISR+0x20>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800370c:	683b      	ldr	r3, [r7, #0]
}
 800370e:	4618      	mov	r0, r3
 8003710:	3708      	adds	r7, #8
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	200004cc 	.word	0x200004cc

0800371c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b086      	sub	sp, #24
 8003720:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003722:	2300      	movs	r3, #0
 8003724:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003726:	4b4f      	ldr	r3, [pc, #316]	; (8003864 <xTaskIncrementTick+0x148>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2b00      	cmp	r3, #0
 800372c:	f040 808f 	bne.w	800384e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003730:	4b4d      	ldr	r3, [pc, #308]	; (8003868 <xTaskIncrementTick+0x14c>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	3301      	adds	r3, #1
 8003736:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003738:	4a4b      	ldr	r2, [pc, #300]	; (8003868 <xTaskIncrementTick+0x14c>)
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d120      	bne.n	8003786 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003744:	4b49      	ldr	r3, [pc, #292]	; (800386c <xTaskIncrementTick+0x150>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d00a      	beq.n	8003764 <xTaskIncrementTick+0x48>
	__asm volatile
 800374e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003752:	f383 8811 	msr	BASEPRI, r3
 8003756:	f3bf 8f6f 	isb	sy
 800375a:	f3bf 8f4f 	dsb	sy
 800375e:	603b      	str	r3, [r7, #0]
}
 8003760:	bf00      	nop
 8003762:	e7fe      	b.n	8003762 <xTaskIncrementTick+0x46>
 8003764:	4b41      	ldr	r3, [pc, #260]	; (800386c <xTaskIncrementTick+0x150>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	60fb      	str	r3, [r7, #12]
 800376a:	4b41      	ldr	r3, [pc, #260]	; (8003870 <xTaskIncrementTick+0x154>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a3f      	ldr	r2, [pc, #252]	; (800386c <xTaskIncrementTick+0x150>)
 8003770:	6013      	str	r3, [r2, #0]
 8003772:	4a3f      	ldr	r2, [pc, #252]	; (8003870 <xTaskIncrementTick+0x154>)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	6013      	str	r3, [r2, #0]
 8003778:	4b3e      	ldr	r3, [pc, #248]	; (8003874 <xTaskIncrementTick+0x158>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	3301      	adds	r3, #1
 800377e:	4a3d      	ldr	r2, [pc, #244]	; (8003874 <xTaskIncrementTick+0x158>)
 8003780:	6013      	str	r3, [r2, #0]
 8003782:	f000 f9ef 	bl	8003b64 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003786:	4b3c      	ldr	r3, [pc, #240]	; (8003878 <xTaskIncrementTick+0x15c>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	693a      	ldr	r2, [r7, #16]
 800378c:	429a      	cmp	r2, r3
 800378e:	d349      	bcc.n	8003824 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003790:	4b36      	ldr	r3, [pc, #216]	; (800386c <xTaskIncrementTick+0x150>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d104      	bne.n	80037a4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800379a:	4b37      	ldr	r3, [pc, #220]	; (8003878 <xTaskIncrementTick+0x15c>)
 800379c:	f04f 32ff 	mov.w	r2, #4294967295
 80037a0:	601a      	str	r2, [r3, #0]
					break;
 80037a2:	e03f      	b.n	8003824 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037a4:	4b31      	ldr	r3, [pc, #196]	; (800386c <xTaskIncrementTick+0x150>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80037b4:	693a      	ldr	r2, [r7, #16]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d203      	bcs.n	80037c4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80037bc:	4a2e      	ldr	r2, [pc, #184]	; (8003878 <xTaskIncrementTick+0x15c>)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80037c2:	e02f      	b.n	8003824 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	3304      	adds	r3, #4
 80037c8:	4618      	mov	r0, r3
 80037ca:	f7ff fbc4 	bl	8002f56 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d004      	beq.n	80037e0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	3318      	adds	r3, #24
 80037da:	4618      	mov	r0, r3
 80037dc:	f7ff fbbb 	bl	8002f56 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037e4:	4b25      	ldr	r3, [pc, #148]	; (800387c <xTaskIncrementTick+0x160>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d903      	bls.n	80037f4 <xTaskIncrementTick+0xd8>
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f0:	4a22      	ldr	r2, [pc, #136]	; (800387c <xTaskIncrementTick+0x160>)
 80037f2:	6013      	str	r3, [r2, #0]
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037f8:	4613      	mov	r3, r2
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	4413      	add	r3, r2
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	4a1f      	ldr	r2, [pc, #124]	; (8003880 <xTaskIncrementTick+0x164>)
 8003802:	441a      	add	r2, r3
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	3304      	adds	r3, #4
 8003808:	4619      	mov	r1, r3
 800380a:	4610      	mov	r0, r2
 800380c:	f7ff fb46 	bl	8002e9c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003814:	4b1b      	ldr	r3, [pc, #108]	; (8003884 <xTaskIncrementTick+0x168>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381a:	429a      	cmp	r2, r3
 800381c:	d3b8      	bcc.n	8003790 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800381e:	2301      	movs	r3, #1
 8003820:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003822:	e7b5      	b.n	8003790 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003824:	4b17      	ldr	r3, [pc, #92]	; (8003884 <xTaskIncrementTick+0x168>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800382a:	4915      	ldr	r1, [pc, #84]	; (8003880 <xTaskIncrementTick+0x164>)
 800382c:	4613      	mov	r3, r2
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	4413      	add	r3, r2
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	440b      	add	r3, r1
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	2b01      	cmp	r3, #1
 800383a:	d901      	bls.n	8003840 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800383c:	2301      	movs	r3, #1
 800383e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003840:	4b11      	ldr	r3, [pc, #68]	; (8003888 <xTaskIncrementTick+0x16c>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d007      	beq.n	8003858 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003848:	2301      	movs	r3, #1
 800384a:	617b      	str	r3, [r7, #20]
 800384c:	e004      	b.n	8003858 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800384e:	4b0f      	ldr	r3, [pc, #60]	; (800388c <xTaskIncrementTick+0x170>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	3301      	adds	r3, #1
 8003854:	4a0d      	ldr	r2, [pc, #52]	; (800388c <xTaskIncrementTick+0x170>)
 8003856:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003858:	697b      	ldr	r3, [r7, #20]
}
 800385a:	4618      	mov	r0, r3
 800385c:	3718      	adds	r7, #24
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	200004e8 	.word	0x200004e8
 8003868:	200004cc 	.word	0x200004cc
 800386c:	20000498 	.word	0x20000498
 8003870:	2000049c 	.word	0x2000049c
 8003874:	200004e0 	.word	0x200004e0
 8003878:	200004e4 	.word	0x200004e4
 800387c:	200004d0 	.word	0x200004d0
 8003880:	20000038 	.word	0x20000038
 8003884:	20000034 	.word	0x20000034
 8003888:	200004dc 	.word	0x200004dc
 800388c:	200004d8 	.word	0x200004d8

08003890 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003890:	b480      	push	{r7}
 8003892:	b085      	sub	sp, #20
 8003894:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003896:	4b28      	ldr	r3, [pc, #160]	; (8003938 <vTaskSwitchContext+0xa8>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d003      	beq.n	80038a6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800389e:	4b27      	ldr	r3, [pc, #156]	; (800393c <vTaskSwitchContext+0xac>)
 80038a0:	2201      	movs	r2, #1
 80038a2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80038a4:	e041      	b.n	800392a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80038a6:	4b25      	ldr	r3, [pc, #148]	; (800393c <vTaskSwitchContext+0xac>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038ac:	4b24      	ldr	r3, [pc, #144]	; (8003940 <vTaskSwitchContext+0xb0>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	60fb      	str	r3, [r7, #12]
 80038b2:	e010      	b.n	80038d6 <vTaskSwitchContext+0x46>
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d10a      	bne.n	80038d0 <vTaskSwitchContext+0x40>
	__asm volatile
 80038ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038be:	f383 8811 	msr	BASEPRI, r3
 80038c2:	f3bf 8f6f 	isb	sy
 80038c6:	f3bf 8f4f 	dsb	sy
 80038ca:	607b      	str	r3, [r7, #4]
}
 80038cc:	bf00      	nop
 80038ce:	e7fe      	b.n	80038ce <vTaskSwitchContext+0x3e>
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	3b01      	subs	r3, #1
 80038d4:	60fb      	str	r3, [r7, #12]
 80038d6:	491b      	ldr	r1, [pc, #108]	; (8003944 <vTaskSwitchContext+0xb4>)
 80038d8:	68fa      	ldr	r2, [r7, #12]
 80038da:	4613      	mov	r3, r2
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	4413      	add	r3, r2
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	440b      	add	r3, r1
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d0e4      	beq.n	80038b4 <vTaskSwitchContext+0x24>
 80038ea:	68fa      	ldr	r2, [r7, #12]
 80038ec:	4613      	mov	r3, r2
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	4413      	add	r3, r2
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	4a13      	ldr	r2, [pc, #76]	; (8003944 <vTaskSwitchContext+0xb4>)
 80038f6:	4413      	add	r3, r2
 80038f8:	60bb      	str	r3, [r7, #8]
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	685a      	ldr	r2, [r3, #4]
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	605a      	str	r2, [r3, #4]
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	685a      	ldr	r2, [r3, #4]
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	3308      	adds	r3, #8
 800390c:	429a      	cmp	r2, r3
 800390e:	d104      	bne.n	800391a <vTaskSwitchContext+0x8a>
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	685a      	ldr	r2, [r3, #4]
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	605a      	str	r2, [r3, #4]
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	4a09      	ldr	r2, [pc, #36]	; (8003948 <vTaskSwitchContext+0xb8>)
 8003922:	6013      	str	r3, [r2, #0]
 8003924:	4a06      	ldr	r2, [pc, #24]	; (8003940 <vTaskSwitchContext+0xb0>)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6013      	str	r3, [r2, #0]
}
 800392a:	bf00      	nop
 800392c:	3714      	adds	r7, #20
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr
 8003936:	bf00      	nop
 8003938:	200004e8 	.word	0x200004e8
 800393c:	200004dc 	.word	0x200004dc
 8003940:	200004d0 	.word	0x200004d0
 8003944:	20000038 	.word	0x20000038
 8003948:	20000034 	.word	0x20000034

0800394c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d10a      	bne.n	8003972 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800395c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003960:	f383 8811 	msr	BASEPRI, r3
 8003964:	f3bf 8f6f 	isb	sy
 8003968:	f3bf 8f4f 	dsb	sy
 800396c:	60fb      	str	r3, [r7, #12]
}
 800396e:	bf00      	nop
 8003970:	e7fe      	b.n	8003970 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003972:	4b07      	ldr	r3, [pc, #28]	; (8003990 <vTaskPlaceOnEventList+0x44>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	3318      	adds	r3, #24
 8003978:	4619      	mov	r1, r3
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f7ff fab2 	bl	8002ee4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003980:	2101      	movs	r1, #1
 8003982:	6838      	ldr	r0, [r7, #0]
 8003984:	f000 fa76 	bl	8003e74 <prvAddCurrentTaskToDelayedList>
}
 8003988:	bf00      	nop
 800398a:	3710      	adds	r7, #16
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}
 8003990:	20000034 	.word	0x20000034

08003994 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b086      	sub	sp, #24
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d10a      	bne.n	80039c0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80039aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ae:	f383 8811 	msr	BASEPRI, r3
 80039b2:	f3bf 8f6f 	isb	sy
 80039b6:	f3bf 8f4f 	dsb	sy
 80039ba:	60fb      	str	r3, [r7, #12]
}
 80039bc:	bf00      	nop
 80039be:	e7fe      	b.n	80039be <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	3318      	adds	r3, #24
 80039c4:	4618      	mov	r0, r3
 80039c6:	f7ff fac6 	bl	8002f56 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039ca:	4b1e      	ldr	r3, [pc, #120]	; (8003a44 <xTaskRemoveFromEventList+0xb0>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d11d      	bne.n	8003a0e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	3304      	adds	r3, #4
 80039d6:	4618      	mov	r0, r3
 80039d8:	f7ff fabd 	bl	8002f56 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039e0:	4b19      	ldr	r3, [pc, #100]	; (8003a48 <xTaskRemoveFromEventList+0xb4>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d903      	bls.n	80039f0 <xTaskRemoveFromEventList+0x5c>
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ec:	4a16      	ldr	r2, [pc, #88]	; (8003a48 <xTaskRemoveFromEventList+0xb4>)
 80039ee:	6013      	str	r3, [r2, #0]
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039f4:	4613      	mov	r3, r2
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	4413      	add	r3, r2
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	4a13      	ldr	r2, [pc, #76]	; (8003a4c <xTaskRemoveFromEventList+0xb8>)
 80039fe:	441a      	add	r2, r3
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	3304      	adds	r3, #4
 8003a04:	4619      	mov	r1, r3
 8003a06:	4610      	mov	r0, r2
 8003a08:	f7ff fa48 	bl	8002e9c <vListInsertEnd>
 8003a0c:	e005      	b.n	8003a1a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	3318      	adds	r3, #24
 8003a12:	4619      	mov	r1, r3
 8003a14:	480e      	ldr	r0, [pc, #56]	; (8003a50 <xTaskRemoveFromEventList+0xbc>)
 8003a16:	f7ff fa41 	bl	8002e9c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a1e:	4b0d      	ldr	r3, [pc, #52]	; (8003a54 <xTaskRemoveFromEventList+0xc0>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d905      	bls.n	8003a34 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003a2c:	4b0a      	ldr	r3, [pc, #40]	; (8003a58 <xTaskRemoveFromEventList+0xc4>)
 8003a2e:	2201      	movs	r2, #1
 8003a30:	601a      	str	r2, [r3, #0]
 8003a32:	e001      	b.n	8003a38 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003a34:	2300      	movs	r3, #0
 8003a36:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003a38:	697b      	ldr	r3, [r7, #20]
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3718      	adds	r7, #24
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	200004e8 	.word	0x200004e8
 8003a48:	200004d0 	.word	0x200004d0
 8003a4c:	20000038 	.word	0x20000038
 8003a50:	200004a0 	.word	0x200004a0
 8003a54:	20000034 	.word	0x20000034
 8003a58:	200004dc 	.word	0x200004dc

08003a5c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003a64:	4b06      	ldr	r3, [pc, #24]	; (8003a80 <vTaskInternalSetTimeOutState+0x24>)
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003a6c:	4b05      	ldr	r3, [pc, #20]	; (8003a84 <vTaskInternalSetTimeOutState+0x28>)
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	605a      	str	r2, [r3, #4]
}
 8003a74:	bf00      	nop
 8003a76:	370c      	adds	r7, #12
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr
 8003a80:	200004e0 	.word	0x200004e0
 8003a84:	200004cc 	.word	0x200004cc

08003a88 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b088      	sub	sp, #32
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d10a      	bne.n	8003aae <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a9c:	f383 8811 	msr	BASEPRI, r3
 8003aa0:	f3bf 8f6f 	isb	sy
 8003aa4:	f3bf 8f4f 	dsb	sy
 8003aa8:	613b      	str	r3, [r7, #16]
}
 8003aaa:	bf00      	nop
 8003aac:	e7fe      	b.n	8003aac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d10a      	bne.n	8003aca <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ab8:	f383 8811 	msr	BASEPRI, r3
 8003abc:	f3bf 8f6f 	isb	sy
 8003ac0:	f3bf 8f4f 	dsb	sy
 8003ac4:	60fb      	str	r3, [r7, #12]
}
 8003ac6:	bf00      	nop
 8003ac8:	e7fe      	b.n	8003ac8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003aca:	f000 fa8d 	bl	8003fe8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003ace:	4b1d      	ldr	r3, [pc, #116]	; (8003b44 <xTaskCheckForTimeOut+0xbc>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	69ba      	ldr	r2, [r7, #24]
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ae6:	d102      	bne.n	8003aee <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	61fb      	str	r3, [r7, #28]
 8003aec:	e023      	b.n	8003b36 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	4b15      	ldr	r3, [pc, #84]	; (8003b48 <xTaskCheckForTimeOut+0xc0>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d007      	beq.n	8003b0a <xTaskCheckForTimeOut+0x82>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	69ba      	ldr	r2, [r7, #24]
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d302      	bcc.n	8003b0a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003b04:	2301      	movs	r3, #1
 8003b06:	61fb      	str	r3, [r7, #28]
 8003b08:	e015      	b.n	8003b36 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	697a      	ldr	r2, [r7, #20]
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d20b      	bcs.n	8003b2c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	1ad2      	subs	r2, r2, r3
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f7ff ff9b 	bl	8003a5c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003b26:	2300      	movs	r3, #0
 8003b28:	61fb      	str	r3, [r7, #28]
 8003b2a:	e004      	b.n	8003b36 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003b32:	2301      	movs	r3, #1
 8003b34:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003b36:	f000 fa87 	bl	8004048 <vPortExitCritical>

	return xReturn;
 8003b3a:	69fb      	ldr	r3, [r7, #28]
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3720      	adds	r7, #32
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	200004cc 	.word	0x200004cc
 8003b48:	200004e0 	.word	0x200004e0

08003b4c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003b50:	4b03      	ldr	r3, [pc, #12]	; (8003b60 <vTaskMissedYield+0x14>)
 8003b52:	2201      	movs	r2, #1
 8003b54:	601a      	str	r2, [r3, #0]
}
 8003b56:	bf00      	nop
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr
 8003b60:	200004dc 	.word	0x200004dc

08003b64 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b6a:	4b0c      	ldr	r3, [pc, #48]	; (8003b9c <prvResetNextTaskUnblockTime+0x38>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d104      	bne.n	8003b7e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003b74:	4b0a      	ldr	r3, [pc, #40]	; (8003ba0 <prvResetNextTaskUnblockTime+0x3c>)
 8003b76:	f04f 32ff 	mov.w	r2, #4294967295
 8003b7a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003b7c:	e008      	b.n	8003b90 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b7e:	4b07      	ldr	r3, [pc, #28]	; (8003b9c <prvResetNextTaskUnblockTime+0x38>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	4a04      	ldr	r2, [pc, #16]	; (8003ba0 <prvResetNextTaskUnblockTime+0x3c>)
 8003b8e:	6013      	str	r3, [r2, #0]
}
 8003b90:	bf00      	nop
 8003b92:	370c      	adds	r7, #12
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr
 8003b9c:	20000498 	.word	0x20000498
 8003ba0:	200004e4 	.word	0x200004e4

08003ba4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003baa:	4b0b      	ldr	r3, [pc, #44]	; (8003bd8 <xTaskGetSchedulerState+0x34>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d102      	bne.n	8003bb8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	607b      	str	r3, [r7, #4]
 8003bb6:	e008      	b.n	8003bca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003bb8:	4b08      	ldr	r3, [pc, #32]	; (8003bdc <xTaskGetSchedulerState+0x38>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d102      	bne.n	8003bc6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003bc0:	2302      	movs	r3, #2
 8003bc2:	607b      	str	r3, [r7, #4]
 8003bc4:	e001      	b.n	8003bca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003bca:	687b      	ldr	r3, [r7, #4]
	}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	370c      	adds	r7, #12
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr
 8003bd8:	200004d4 	.word	0x200004d4
 8003bdc:	200004e8 	.word	0x200004e8

08003be0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b086      	sub	sp, #24
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003bec:	2300      	movs	r3, #0
 8003bee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d056      	beq.n	8003ca4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003bf6:	4b2e      	ldr	r3, [pc, #184]	; (8003cb0 <xTaskPriorityDisinherit+0xd0>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	693a      	ldr	r2, [r7, #16]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d00a      	beq.n	8003c16 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c04:	f383 8811 	msr	BASEPRI, r3
 8003c08:	f3bf 8f6f 	isb	sy
 8003c0c:	f3bf 8f4f 	dsb	sy
 8003c10:	60fb      	str	r3, [r7, #12]
}
 8003c12:	bf00      	nop
 8003c14:	e7fe      	b.n	8003c14 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d10a      	bne.n	8003c34 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c22:	f383 8811 	msr	BASEPRI, r3
 8003c26:	f3bf 8f6f 	isb	sy
 8003c2a:	f3bf 8f4f 	dsb	sy
 8003c2e:	60bb      	str	r3, [r7, #8]
}
 8003c30:	bf00      	nop
 8003c32:	e7fe      	b.n	8003c32 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c38:	1e5a      	subs	r2, r3, #1
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d02c      	beq.n	8003ca4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d128      	bne.n	8003ca4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	3304      	adds	r3, #4
 8003c56:	4618      	mov	r0, r3
 8003c58:	f7ff f97d 	bl	8002f56 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c68:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c74:	4b0f      	ldr	r3, [pc, #60]	; (8003cb4 <xTaskPriorityDisinherit+0xd4>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d903      	bls.n	8003c84 <xTaskPriorityDisinherit+0xa4>
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c80:	4a0c      	ldr	r2, [pc, #48]	; (8003cb4 <xTaskPriorityDisinherit+0xd4>)
 8003c82:	6013      	str	r3, [r2, #0]
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c88:	4613      	mov	r3, r2
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	4413      	add	r3, r2
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	4a09      	ldr	r2, [pc, #36]	; (8003cb8 <xTaskPriorityDisinherit+0xd8>)
 8003c92:	441a      	add	r2, r3
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	3304      	adds	r3, #4
 8003c98:	4619      	mov	r1, r3
 8003c9a:	4610      	mov	r0, r2
 8003c9c:	f7ff f8fe 	bl	8002e9c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003ca4:	697b      	ldr	r3, [r7, #20]
	}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3718      	adds	r7, #24
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	20000034 	.word	0x20000034
 8003cb4:	200004d0 	.word	0x200004d0
 8003cb8:	20000038 	.word	0x20000038

08003cbc <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b08e      	sub	sp, #56	; 0x38
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	60b9      	str	r1, [r7, #8]
 8003cc6:	603b      	str	r3, [r7, #0]
 8003cc8:	4613      	mov	r3, r2
 8003cca:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d10a      	bne.n	8003cec <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8003cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cda:	f383 8811 	msr	BASEPRI, r3
 8003cde:	f3bf 8f6f 	isb	sy
 8003ce2:	f3bf 8f4f 	dsb	sy
 8003ce6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003ce8:	bf00      	nop
 8003cea:	e7fe      	b.n	8003cea <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003cec:	f000 fa2e 	bl	800414c <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8003cf4:	f3ef 8211 	mrs	r2, BASEPRI
 8003cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cfc:	f383 8811 	msr	BASEPRI, r3
 8003d00:	f3bf 8f6f 	isb	sy
 8003d04:	f3bf 8f4f 	dsb	sy
 8003d08:	623a      	str	r2, [r7, #32]
 8003d0a:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8003d0c:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d003      	beq.n	8003d1e <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8003d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8003d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d20:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003d24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8003d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d2a:	2202      	movs	r2, #2
 8003d2c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8003d30:	79fb      	ldrb	r3, [r7, #7]
 8003d32:	2b04      	cmp	r3, #4
 8003d34:	d828      	bhi.n	8003d88 <xTaskGenericNotifyFromISR+0xcc>
 8003d36:	a201      	add	r2, pc, #4	; (adr r2, 8003d3c <xTaskGenericNotifyFromISR+0x80>)
 8003d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d3c:	08003da9 	.word	0x08003da9
 8003d40:	08003d51 	.word	0x08003d51
 8003d44:	08003d5f 	.word	0x08003d5f
 8003d48:	08003d6b 	.word	0x08003d6b
 8003d4c:	08003d73 	.word	0x08003d73
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8003d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d52:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	431a      	orrs	r2, r3
 8003d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d5a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8003d5c:	e027      	b.n	8003dae <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8003d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d62:	1c5a      	adds	r2, r3, #1
 8003d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d66:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8003d68:	e021      	b.n	8003dae <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8003d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d6c:	68ba      	ldr	r2, [r7, #8]
 8003d6e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8003d70:	e01d      	b.n	8003dae <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8003d72:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	d003      	beq.n	8003d82 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8003d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d7c:	68ba      	ldr	r2, [r7, #8]
 8003d7e:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8003d80:	e015      	b.n	8003dae <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 8003d82:	2300      	movs	r3, #0
 8003d84:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8003d86:	e012      	b.n	8003dae <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8003d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d90:	d00c      	beq.n	8003dac <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 8003d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d96:	f383 8811 	msr	BASEPRI, r3
 8003d9a:	f3bf 8f6f 	isb	sy
 8003d9e:	f3bf 8f4f 	dsb	sy
 8003da2:	61bb      	str	r3, [r7, #24]
}
 8003da4:	bf00      	nop
 8003da6:	e7fe      	b.n	8003da6 <xTaskGenericNotifyFromISR+0xea>
					break;
 8003da8:	bf00      	nop
 8003daa:	e000      	b.n	8003dae <xTaskGenericNotifyFromISR+0xf2>
					break;
 8003dac:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8003dae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d146      	bne.n	8003e44 <xTaskGenericNotifyFromISR+0x188>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8003db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d00a      	beq.n	8003dd4 <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 8003dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dc2:	f383 8811 	msr	BASEPRI, r3
 8003dc6:	f3bf 8f6f 	isb	sy
 8003dca:	f3bf 8f4f 	dsb	sy
 8003dce:	617b      	str	r3, [r7, #20]
}
 8003dd0:	bf00      	nop
 8003dd2:	e7fe      	b.n	8003dd2 <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003dd4:	4b21      	ldr	r3, [pc, #132]	; (8003e5c <xTaskGenericNotifyFromISR+0x1a0>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d11d      	bne.n	8003e18 <xTaskGenericNotifyFromISR+0x15c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dde:	3304      	adds	r3, #4
 8003de0:	4618      	mov	r0, r3
 8003de2:	f7ff f8b8 	bl	8002f56 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003de8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dea:	4b1d      	ldr	r3, [pc, #116]	; (8003e60 <xTaskGenericNotifyFromISR+0x1a4>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d903      	bls.n	8003dfa <xTaskGenericNotifyFromISR+0x13e>
 8003df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df6:	4a1a      	ldr	r2, [pc, #104]	; (8003e60 <xTaskGenericNotifyFromISR+0x1a4>)
 8003df8:	6013      	str	r3, [r2, #0]
 8003dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dfe:	4613      	mov	r3, r2
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	4413      	add	r3, r2
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	4a17      	ldr	r2, [pc, #92]	; (8003e64 <xTaskGenericNotifyFromISR+0x1a8>)
 8003e08:	441a      	add	r2, r3
 8003e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e0c:	3304      	adds	r3, #4
 8003e0e:	4619      	mov	r1, r3
 8003e10:	4610      	mov	r0, r2
 8003e12:	f7ff f843 	bl	8002e9c <vListInsertEnd>
 8003e16:	e005      	b.n	8003e24 <xTaskGenericNotifyFromISR+0x168>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8003e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e1a:	3318      	adds	r3, #24
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	4812      	ldr	r0, [pc, #72]	; (8003e68 <xTaskGenericNotifyFromISR+0x1ac>)
 8003e20:	f7ff f83c 	bl	8002e9c <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e28:	4b10      	ldr	r3, [pc, #64]	; (8003e6c <xTaskGenericNotifyFromISR+0x1b0>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d908      	bls.n	8003e44 <xTaskGenericNotifyFromISR+0x188>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8003e32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d002      	beq.n	8003e3e <xTaskGenericNotifyFromISR+0x182>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8003e38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8003e3e:	4b0c      	ldr	r3, [pc, #48]	; (8003e70 <xTaskGenericNotifyFromISR+0x1b4>)
 8003e40:	2201      	movs	r2, #1
 8003e42:	601a      	str	r2, [r3, #0]
 8003e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e46:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	f383 8811 	msr	BASEPRI, r3
}
 8003e4e:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8003e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3738      	adds	r7, #56	; 0x38
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	200004e8 	.word	0x200004e8
 8003e60:	200004d0 	.word	0x200004d0
 8003e64:	20000038 	.word	0x20000038
 8003e68:	200004a0 	.word	0x200004a0
 8003e6c:	20000034 	.word	0x20000034
 8003e70:	200004dc 	.word	0x200004dc

08003e74 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003e7e:	4b21      	ldr	r3, [pc, #132]	; (8003f04 <prvAddCurrentTaskToDelayedList+0x90>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e84:	4b20      	ldr	r3, [pc, #128]	; (8003f08 <prvAddCurrentTaskToDelayedList+0x94>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	3304      	adds	r3, #4
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f7ff f863 	bl	8002f56 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e96:	d10a      	bne.n	8003eae <prvAddCurrentTaskToDelayedList+0x3a>
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d007      	beq.n	8003eae <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e9e:	4b1a      	ldr	r3, [pc, #104]	; (8003f08 <prvAddCurrentTaskToDelayedList+0x94>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	3304      	adds	r3, #4
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	4819      	ldr	r0, [pc, #100]	; (8003f0c <prvAddCurrentTaskToDelayedList+0x98>)
 8003ea8:	f7fe fff8 	bl	8002e9c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003eac:	e026      	b.n	8003efc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003eae:	68fa      	ldr	r2, [r7, #12]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4413      	add	r3, r2
 8003eb4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003eb6:	4b14      	ldr	r3, [pc, #80]	; (8003f08 <prvAddCurrentTaskToDelayedList+0x94>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	68ba      	ldr	r2, [r7, #8]
 8003ebc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003ebe:	68ba      	ldr	r2, [r7, #8]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d209      	bcs.n	8003eda <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ec6:	4b12      	ldr	r3, [pc, #72]	; (8003f10 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	4b0f      	ldr	r3, [pc, #60]	; (8003f08 <prvAddCurrentTaskToDelayedList+0x94>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	3304      	adds	r3, #4
 8003ed0:	4619      	mov	r1, r3
 8003ed2:	4610      	mov	r0, r2
 8003ed4:	f7ff f806 	bl	8002ee4 <vListInsert>
}
 8003ed8:	e010      	b.n	8003efc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003eda:	4b0e      	ldr	r3, [pc, #56]	; (8003f14 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	4b0a      	ldr	r3, [pc, #40]	; (8003f08 <prvAddCurrentTaskToDelayedList+0x94>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	3304      	adds	r3, #4
 8003ee4:	4619      	mov	r1, r3
 8003ee6:	4610      	mov	r0, r2
 8003ee8:	f7fe fffc 	bl	8002ee4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003eec:	4b0a      	ldr	r3, [pc, #40]	; (8003f18 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	68ba      	ldr	r2, [r7, #8]
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d202      	bcs.n	8003efc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003ef6:	4a08      	ldr	r2, [pc, #32]	; (8003f18 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	6013      	str	r3, [r2, #0]
}
 8003efc:	bf00      	nop
 8003efe:	3710      	adds	r7, #16
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	200004cc 	.word	0x200004cc
 8003f08:	20000034 	.word	0x20000034
 8003f0c:	200004b4 	.word	0x200004b4
 8003f10:	2000049c 	.word	0x2000049c
 8003f14:	20000498 	.word	0x20000498
 8003f18:	200004e4 	.word	0x200004e4

08003f1c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b08a      	sub	sp, #40	; 0x28
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	60b9      	str	r1, [r7, #8]
 8003f26:	607a      	str	r2, [r7, #4]
 8003f28:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d10a      	bne.n	8003f4a <xTimerGenericCommand+0x2e>
	__asm volatile
 8003f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f38:	f383 8811 	msr	BASEPRI, r3
 8003f3c:	f3bf 8f6f 	isb	sy
 8003f40:	f3bf 8f4f 	dsb	sy
 8003f44:	623b      	str	r3, [r7, #32]
}
 8003f46:	bf00      	nop
 8003f48:	e7fe      	b.n	8003f48 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003f4a:	4b1a      	ldr	r3, [pc, #104]	; (8003fb4 <xTimerGenericCommand+0x98>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d02a      	beq.n	8003fa8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	2b05      	cmp	r3, #5
 8003f62:	dc18      	bgt.n	8003f96 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003f64:	f7ff fe1e 	bl	8003ba4 <xTaskGetSchedulerState>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d109      	bne.n	8003f82 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003f6e:	4b11      	ldr	r3, [pc, #68]	; (8003fb4 <xTimerGenericCommand+0x98>)
 8003f70:	6818      	ldr	r0, [r3, #0]
 8003f72:	f107 0110 	add.w	r1, r7, #16
 8003f76:	2300      	movs	r3, #0
 8003f78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f7a:	f7ff f817 	bl	8002fac <xQueueGenericSend>
 8003f7e:	6278      	str	r0, [r7, #36]	; 0x24
 8003f80:	e012      	b.n	8003fa8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003f82:	4b0c      	ldr	r3, [pc, #48]	; (8003fb4 <xTimerGenericCommand+0x98>)
 8003f84:	6818      	ldr	r0, [r3, #0]
 8003f86:	f107 0110 	add.w	r1, r7, #16
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f7ff f80d 	bl	8002fac <xQueueGenericSend>
 8003f92:	6278      	str	r0, [r7, #36]	; 0x24
 8003f94:	e008      	b.n	8003fa8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003f96:	4b07      	ldr	r3, [pc, #28]	; (8003fb4 <xTimerGenericCommand+0x98>)
 8003f98:	6818      	ldr	r0, [r3, #0]
 8003f9a:	f107 0110 	add.w	r1, r7, #16
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	683a      	ldr	r2, [r7, #0]
 8003fa2:	f7ff f901 	bl	80031a8 <xQueueGenericSendFromISR>
 8003fa6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3728      	adds	r7, #40	; 0x28
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	200004ec 	.word	0x200004ec
	...

08003fc0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003fc0:	4b07      	ldr	r3, [pc, #28]	; (8003fe0 <pxCurrentTCBConst2>)
 8003fc2:	6819      	ldr	r1, [r3, #0]
 8003fc4:	6808      	ldr	r0, [r1, #0]
 8003fc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fca:	f380 8809 	msr	PSP, r0
 8003fce:	f3bf 8f6f 	isb	sy
 8003fd2:	f04f 0000 	mov.w	r0, #0
 8003fd6:	f380 8811 	msr	BASEPRI, r0
 8003fda:	4770      	bx	lr
 8003fdc:	f3af 8000 	nop.w

08003fe0 <pxCurrentTCBConst2>:
 8003fe0:	20000034 	.word	0x20000034
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003fe4:	bf00      	nop
 8003fe6:	bf00      	nop

08003fe8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
	__asm volatile
 8003fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff2:	f383 8811 	msr	BASEPRI, r3
 8003ff6:	f3bf 8f6f 	isb	sy
 8003ffa:	f3bf 8f4f 	dsb	sy
 8003ffe:	607b      	str	r3, [r7, #4]
}
 8004000:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004002:	4b0f      	ldr	r3, [pc, #60]	; (8004040 <vPortEnterCritical+0x58>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	3301      	adds	r3, #1
 8004008:	4a0d      	ldr	r2, [pc, #52]	; (8004040 <vPortEnterCritical+0x58>)
 800400a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800400c:	4b0c      	ldr	r3, [pc, #48]	; (8004040 <vPortEnterCritical+0x58>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2b01      	cmp	r3, #1
 8004012:	d10f      	bne.n	8004034 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004014:	4b0b      	ldr	r3, [pc, #44]	; (8004044 <vPortEnterCritical+0x5c>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	b2db      	uxtb	r3, r3
 800401a:	2b00      	cmp	r3, #0
 800401c:	d00a      	beq.n	8004034 <vPortEnterCritical+0x4c>
	__asm volatile
 800401e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004022:	f383 8811 	msr	BASEPRI, r3
 8004026:	f3bf 8f6f 	isb	sy
 800402a:	f3bf 8f4f 	dsb	sy
 800402e:	603b      	str	r3, [r7, #0]
}
 8004030:	bf00      	nop
 8004032:	e7fe      	b.n	8004032 <vPortEnterCritical+0x4a>
	}
}
 8004034:	bf00      	nop
 8004036:	370c      	adds	r7, #12
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr
 8004040:	2000000c 	.word	0x2000000c
 8004044:	e000ed04 	.word	0xe000ed04

08004048 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004048:	b480      	push	{r7}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800404e:	4b12      	ldr	r3, [pc, #72]	; (8004098 <vPortExitCritical+0x50>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d10a      	bne.n	800406c <vPortExitCritical+0x24>
	__asm volatile
 8004056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800405a:	f383 8811 	msr	BASEPRI, r3
 800405e:	f3bf 8f6f 	isb	sy
 8004062:	f3bf 8f4f 	dsb	sy
 8004066:	607b      	str	r3, [r7, #4]
}
 8004068:	bf00      	nop
 800406a:	e7fe      	b.n	800406a <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800406c:	4b0a      	ldr	r3, [pc, #40]	; (8004098 <vPortExitCritical+0x50>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	3b01      	subs	r3, #1
 8004072:	4a09      	ldr	r2, [pc, #36]	; (8004098 <vPortExitCritical+0x50>)
 8004074:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004076:	4b08      	ldr	r3, [pc, #32]	; (8004098 <vPortExitCritical+0x50>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d105      	bne.n	800408a <vPortExitCritical+0x42>
 800407e:	2300      	movs	r3, #0
 8004080:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	f383 8811 	msr	BASEPRI, r3
}
 8004088:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800408a:	bf00      	nop
 800408c:	370c      	adds	r7, #12
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr
 8004096:	bf00      	nop
 8004098:	2000000c 	.word	0x2000000c
 800409c:	00000000 	.word	0x00000000

080040a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80040a0:	f3ef 8009 	mrs	r0, PSP
 80040a4:	f3bf 8f6f 	isb	sy
 80040a8:	4b15      	ldr	r3, [pc, #84]	; (8004100 <pxCurrentTCBConst>)
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	f01e 0f10 	tst.w	lr, #16
 80040b0:	bf08      	it	eq
 80040b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80040b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040ba:	6010      	str	r0, [r2, #0]
 80040bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80040c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80040c4:	f380 8811 	msr	BASEPRI, r0
 80040c8:	f3bf 8f4f 	dsb	sy
 80040cc:	f3bf 8f6f 	isb	sy
 80040d0:	f7ff fbde 	bl	8003890 <vTaskSwitchContext>
 80040d4:	f04f 0000 	mov.w	r0, #0
 80040d8:	f380 8811 	msr	BASEPRI, r0
 80040dc:	bc09      	pop	{r0, r3}
 80040de:	6819      	ldr	r1, [r3, #0]
 80040e0:	6808      	ldr	r0, [r1, #0]
 80040e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040e6:	f01e 0f10 	tst.w	lr, #16
 80040ea:	bf08      	it	eq
 80040ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80040f0:	f380 8809 	msr	PSP, r0
 80040f4:	f3bf 8f6f 	isb	sy
 80040f8:	4770      	bx	lr
 80040fa:	bf00      	nop
 80040fc:	f3af 8000 	nop.w

08004100 <pxCurrentTCBConst>:
 8004100:	20000034 	.word	0x20000034
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004104:	bf00      	nop
 8004106:	bf00      	nop

08004108 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0
	__asm volatile
 800410e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004112:	f383 8811 	msr	BASEPRI, r3
 8004116:	f3bf 8f6f 	isb	sy
 800411a:	f3bf 8f4f 	dsb	sy
 800411e:	607b      	str	r3, [r7, #4]
}
 8004120:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004122:	f7ff fafb 	bl	800371c <xTaskIncrementTick>
 8004126:	4603      	mov	r3, r0
 8004128:	2b00      	cmp	r3, #0
 800412a:	d003      	beq.n	8004134 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800412c:	4b06      	ldr	r3, [pc, #24]	; (8004148 <xPortSysTickHandler+0x40>)
 800412e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004132:	601a      	str	r2, [r3, #0]
 8004134:	2300      	movs	r3, #0
 8004136:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	f383 8811 	msr	BASEPRI, r3
}
 800413e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004140:	bf00      	nop
 8004142:	3708      	adds	r7, #8
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}
 8004148:	e000ed04 	.word	0xe000ed04

0800414c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800414c:	b480      	push	{r7}
 800414e:	b085      	sub	sp, #20
 8004150:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004152:	f3ef 8305 	mrs	r3, IPSR
 8004156:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2b0f      	cmp	r3, #15
 800415c:	d914      	bls.n	8004188 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800415e:	4a17      	ldr	r2, [pc, #92]	; (80041bc <vPortValidateInterruptPriority+0x70>)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	4413      	add	r3, r2
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004168:	4b15      	ldr	r3, [pc, #84]	; (80041c0 <vPortValidateInterruptPriority+0x74>)
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	7afa      	ldrb	r2, [r7, #11]
 800416e:	429a      	cmp	r2, r3
 8004170:	d20a      	bcs.n	8004188 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004176:	f383 8811 	msr	BASEPRI, r3
 800417a:	f3bf 8f6f 	isb	sy
 800417e:	f3bf 8f4f 	dsb	sy
 8004182:	607b      	str	r3, [r7, #4]
}
 8004184:	bf00      	nop
 8004186:	e7fe      	b.n	8004186 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004188:	4b0e      	ldr	r3, [pc, #56]	; (80041c4 <vPortValidateInterruptPriority+0x78>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004190:	4b0d      	ldr	r3, [pc, #52]	; (80041c8 <vPortValidateInterruptPriority+0x7c>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	429a      	cmp	r2, r3
 8004196:	d90a      	bls.n	80041ae <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800419c:	f383 8811 	msr	BASEPRI, r3
 80041a0:	f3bf 8f6f 	isb	sy
 80041a4:	f3bf 8f4f 	dsb	sy
 80041a8:	603b      	str	r3, [r7, #0]
}
 80041aa:	bf00      	nop
 80041ac:	e7fe      	b.n	80041ac <vPortValidateInterruptPriority+0x60>
	}
 80041ae:	bf00      	nop
 80041b0:	3714      	adds	r7, #20
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	e000e3f0 	.word	0xe000e3f0
 80041c0:	200004f0 	.word	0x200004f0
 80041c4:	e000ed0c 	.word	0xe000ed0c
 80041c8:	200004f4 	.word	0x200004f4

080041cc <__libc_init_array>:
 80041cc:	b570      	push	{r4, r5, r6, lr}
 80041ce:	4d0d      	ldr	r5, [pc, #52]	; (8004204 <__libc_init_array+0x38>)
 80041d0:	4c0d      	ldr	r4, [pc, #52]	; (8004208 <__libc_init_array+0x3c>)
 80041d2:	1b64      	subs	r4, r4, r5
 80041d4:	10a4      	asrs	r4, r4, #2
 80041d6:	2600      	movs	r6, #0
 80041d8:	42a6      	cmp	r6, r4
 80041da:	d109      	bne.n	80041f0 <__libc_init_array+0x24>
 80041dc:	4d0b      	ldr	r5, [pc, #44]	; (800420c <__libc_init_array+0x40>)
 80041de:	4c0c      	ldr	r4, [pc, #48]	; (8004210 <__libc_init_array+0x44>)
 80041e0:	f000 f82e 	bl	8004240 <_init>
 80041e4:	1b64      	subs	r4, r4, r5
 80041e6:	10a4      	asrs	r4, r4, #2
 80041e8:	2600      	movs	r6, #0
 80041ea:	42a6      	cmp	r6, r4
 80041ec:	d105      	bne.n	80041fa <__libc_init_array+0x2e>
 80041ee:	bd70      	pop	{r4, r5, r6, pc}
 80041f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80041f4:	4798      	blx	r3
 80041f6:	3601      	adds	r6, #1
 80041f8:	e7ee      	b.n	80041d8 <__libc_init_array+0xc>
 80041fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80041fe:	4798      	blx	r3
 8004200:	3601      	adds	r6, #1
 8004202:	e7f2      	b.n	80041ea <__libc_init_array+0x1e>
 8004204:	08004270 	.word	0x08004270
 8004208:	08004270 	.word	0x08004270
 800420c:	08004270 	.word	0x08004270
 8004210:	08004274 	.word	0x08004274

08004214 <memcpy>:
 8004214:	440a      	add	r2, r1
 8004216:	4291      	cmp	r1, r2
 8004218:	f100 33ff 	add.w	r3, r0, #4294967295
 800421c:	d100      	bne.n	8004220 <memcpy+0xc>
 800421e:	4770      	bx	lr
 8004220:	b510      	push	{r4, lr}
 8004222:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004226:	f803 4f01 	strb.w	r4, [r3, #1]!
 800422a:	4291      	cmp	r1, r2
 800422c:	d1f9      	bne.n	8004222 <memcpy+0xe>
 800422e:	bd10      	pop	{r4, pc}

08004230 <memset>:
 8004230:	4402      	add	r2, r0
 8004232:	4603      	mov	r3, r0
 8004234:	4293      	cmp	r3, r2
 8004236:	d100      	bne.n	800423a <memset+0xa>
 8004238:	4770      	bx	lr
 800423a:	f803 1b01 	strb.w	r1, [r3], #1
 800423e:	e7f9      	b.n	8004234 <memset+0x4>

08004240 <_init>:
 8004240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004242:	bf00      	nop
 8004244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004246:	bc08      	pop	{r3}
 8004248:	469e      	mov	lr, r3
 800424a:	4770      	bx	lr

0800424c <_fini>:
 800424c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800424e:	bf00      	nop
 8004250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004252:	bc08      	pop	{r3}
 8004254:	469e      	mov	lr, r3
 8004256:	4770      	bx	lr
